uint64_t sub_100001DDC(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100001E08()
{
  uint64_t v0;

  return sub_10000225C(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_DWORD *)(v0 + 28));
}

uint64_t sub_100001EE8()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_100001F30(char a1, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v2 + 16);
  v12 = swift_allocObject(&unk_100074488, 24, 7);
  swift_weakInit(v12 + 16, v2);
  v13 = swift_allocObject(&unk_100074500, 32, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  *(_DWORD *)(v13 + 28) = a2;
  aBlock[4] = sub_100001E08;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100074518;
  v14 = _Block_copy(aBlock);
  v15 = swift_retain(v12);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10000215C((uint64_t *)&unk_10007A960);
  v18 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

uint64_t sub_10000215C(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000219C(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000021DC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006DD0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000221C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100006DD0(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000225C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  Class isa;
  Class v12;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[24];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v35, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v10 = result;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v12 = UInt32._bridgeToObjectiveC()().super.super.isa;
    v13 = objc_msgSend(objc_allocWithZone((Class)BMDeviceBluetoothUseCase), "initWithStarting:useCase:", isa, v12);

    v14 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v10 + 192))();
    objc_msgSend(v14, "sendEvent:", v13);

    v15 = sub_100002FCC();
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v15, v5);
    v16 = v13;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v29 = (_QWORD *)swift_slowAlloc(8, -1);
      v30 = swift_slowAlloc(32, -1);
      v34 = v30;
      *(_DWORD *)v19 = 136315394;
      v32 = v6;
      v20 = sub_100002574(a3);
      v21 = String.init(cString:)(v20);
      v23 = v22;
      v33 = sub_100002CA8(v21, v22, &v34);
      v31 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 12) = 2112;
      v33 = (uint64_t)v16;
      v24 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v19 + 14, v19 + 22);
      v25 = v29;
      *v29 = v16;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Send usecase event %s for %@", (uint8_t *)v19, 0x16u);
      v26 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v25, 1, v26);
      swift_slowDealloc(v25, -1, -1);
      v27 = v30;
      swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v8, v31);
    }
    else
    {

      swift_release(v10);
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
  }
  return result;
}

uint64_t sub_10000255C(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

const char *sub_100002574(int a1)
{
  const char *result;

  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 >= 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589824:
              return "FindNearbyRemote";
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              result = "InternalTestActiveScan";
              break;
            case 2147418118:
              result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            result = "ADPD";
            break;
          case 524289:
            result = "ADPDBuffer";
            break;
          case 524290:
            result = "MicroLocation";
            break;
          case 524291:
            result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 458754)
                return "?";
              result = "PrecisionFindingFindeeHighPriority";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            result = "CaptiveNetworkJoin";
            break;
          case 393217:
            result = "UseCaseSIMTransfer";
            break;
          case 393218:
            result = "MacSetup";
            break;
          case 393219:
            result = "AppleIDSignIn";
            break;
          case 393220:
            result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752)
                return "?";
              result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000)
              return "?";
            result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else
  {
    result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        result = "HealthKit";
        break;
      case 2:
        result = "HomeKit";
        break;
      case 3:
        result = "FindMyObjectConnection";
        break;
      case 4:
        result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        result = "MIDI";
        break;
      case 6:
        result = "Continuity";
        break;
      case 7:
        result = "InstantHotSpot";
        break;
      case 8:
        result = "NearBy";
        break;
      case 9:
        result = "Sharing";
        break;
      case 10:
        result = "HearingSupport";
        break;
      case 11:
        result = "Magnet";
        break;
      case 12:
        result = "HID";
        break;
      case 13:
        result = "LEA";
        break;
      case 14:
        result = "External";
        break;
      case 15:
        result = "ExternalMedical";
        break;
      case 16:
        result = "ExternalLock";
        break;
      case 17:
        result = "ExternalWatch";
        break;
      case 18:
        result = "SmartRouting";
        break;
      case 19:
        result = "DigitalID";
        break;
      case 20:
        result = "DigitalKey";
        break;
      case 21:
        result = "DigitalCarKey";
        break;
      case 22:
        result = "HeySiri";
        break;
      case 23:
        result = "ThirdPartyApp";
        break;
      case 24:
        result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            result = "DevicePresenceDetection";
            break;
          case 257:
            result = "AudioBox";
            break;
          case 258:
            result = "SIMTransfer";
            break;
          case 259:
            result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            result = "MacMigrate";
            break;
          case 263:
            result = "HIDUARTService";
            break;
          case 264:
            result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            result = "BaseBandFastConnect";
            break;
          case 266:
            result = "SafetyAlerts";
            break;
          case 267:
            result = "LECarPlay";
            break;
          case 268:
            result = "TCCBluetooth";
            break;
          case 269:
            result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_100002CA8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_100002DD4(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100002D98((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100002D98((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100002D78(v12);
  return v7;
}

uint64_t sub_100002D78(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100002D98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100002DD4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_100004AAC(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100002F8C(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger(0);
  return sub_10000255C(v3, a2);
}

uint64_t sub_100002FCC()
{
  return sub_100002F8C(&qword_10007E5F8, (uint64_t)qword_100080A80);
}

id sub_100002FE8()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 40);
  if (v1)
  {
    v2 = *(id *)(v0 + 40);
  }
  else
  {
    v3 = (id)BiomeLibrary();
    v4 = objc_msgSend(v3, "Device");
    swift_unknownObjectRelease(v3);
    v5 = objc_msgSend(v4, "Wireless");
    swift_unknownObjectRelease(v4);
    v6 = objc_msgSend(v5, "BluetoothUseCase");
    swift_unknownObjectRelease(v5);
    v7 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 40) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

uint64_t sub_1000030B0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 104, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 104));
}

uint64_t sub_1000030EC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000030F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000030FC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003104(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000310C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003114(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000311C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003124(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000312C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003134(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000313C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003144(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10000314C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003154(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100003164(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003184(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000031F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003204(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003214(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100003234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t SystemVersionNumber.rawValue.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain(v0[1]);
  return v1;
}

void __swiftcall SystemVersionNumber.init(rawValue:)(bluetoothuserd::SystemVersionNumber_optional *__return_ptr retstr, Swift::String rawValue)
{
  uint64_t v3[10];

  sub_100003C44(rawValue._countAndFlagsBits, (unint64_t)rawValue._object, v3);
  sub_100004064((uint64_t)v3, (uint64_t)retstr, &qword_10007A760);
}

void __swiftcall SystemVersionNumber.init(stringLiteral:)(bluetoothuserd::SystemVersionNumber *__return_ptr retstr, Swift::String stringLiteral)
{
  void *v3;
  void *v4;
  Swift::Int v5;
  Swift::Bool v6;
  void *v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10[10];
  uint64_t v11;
  void *v12;
  __int128 v13;
  void *v14;
  Swift::Int v15;
  Swift::Bool v16;
  __int128 v17;
  void *v18;

  sub_100003C44(stringLiteral._countAndFlagsBits, (unint64_t)stringLiteral._object, v10);
  sub_100004064((uint64_t)v10, (uint64_t)&v11, &qword_10007A760);
  v3 = v12;
  if (v12)
  {
    v4 = v14;
    v5 = v15;
    v6 = v16;
    v7 = v18;
    v8 = v13;
    v9 = v17;
    retstr->rawValue._countAndFlagsBits = v11;
    retstr->rawValue._object = v3;
    *(_OWORD *)&retstr->baseNumber = v8;
    retstr->baseLetter._object = v4;
    retstr->childType.value = v5;
    retstr->childType.is_nil = v6;
    *(_OWORD *)&retstr->buildNumber = v9;
    retstr->suffix.value._object = v7;
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_10000332C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4[10];

  sub_100003C44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v4);
  return sub_100004064((uint64_t)v4, a2, &qword_10007A760);
}

uint64_t sub_100003374@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100003380(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100004480();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000033DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100004480();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10000342C@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result;
  __int128 v4;
  __int128 v5;
  uint64_t v6[10];
  _OWORD v7[5];

  sub_100003C44(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), v6);
  result = sub_100004064((uint64_t)v6, (uint64_t)v7, &qword_10007A760);
  if (*((_QWORD *)&v7[0] + 1))
  {
    v4 = v7[3];
    a2[2] = v7[2];
    a2[3] = v4;
    a2[4] = v7[4];
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10000349C(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(v8, v9) & 1;
}

BOOL sub_1000034F4(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_10000354C(v8, v9);
}

BOOL sub_10000354C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a2[2];
  v3 = a1[2];
  v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      v7 = a2[3];
      v8 = a2[4];
      v9 = a1[3];
      v10 = a1[4];
      v11 = v7 == v9 && v8 == v10;
      if ((v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1) & 1) == 0) && a2[7] >= a1[7])
      {
        sub_100004064((uint64_t)(a2 + 8), (uint64_t)v18, &qword_10007A770);
        sub_100004064((uint64_t)v18, (uint64_t)&v19, &qword_10007A770);
        if (v20)
          v12 = v19;
        else
          v12 = 0;
        if (v20)
          v13 = v20;
        else
          v13 = 0xE000000000000000;
        sub_100004064((uint64_t)(a1 + 8), (uint64_t)v17, &qword_10007A770);
        sub_100004064((uint64_t)v17, (uint64_t)&v21, &qword_10007A770);
        if (v22)
          v14 = v21;
        else
          v14 = 0;
        if (v22)
          v15 = v22;
        else
          v15 = 0xE000000000000000;
        if (v12 == v14 && v13 == v15)
          v4 = 0;
        else
          v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1);
        sub_100004458((uint64_t)v18);
        sub_100004458((uint64_t)v17);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v15);
      }
    }
    else
    {
      v4 = 0;
    }
  }
  return (v4 & 1) == 0;
}

BOOL sub_10000369C(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000036F4(v8, v9);
}

BOOL sub_1000036F4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a1[2];
  v3 = a2[2];
  v4 = 1;
  if (v2 >= v3)
  {
    if (v3 >= v2)
    {
      v7 = a1[3];
      v8 = a1[4];
      v9 = a2[3];
      v10 = a2[4];
      v11 = v7 == v9 && v8 == v10;
      if ((v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1) & 1) == 0) && a1[7] >= a2[7])
      {
        sub_100004064((uint64_t)(a1 + 8), (uint64_t)v18, &qword_10007A770);
        sub_100004064((uint64_t)v18, (uint64_t)&v19, &qword_10007A770);
        if (v20)
          v12 = v19;
        else
          v12 = 0;
        if (v20)
          v13 = v20;
        else
          v13 = 0xE000000000000000;
        sub_100004064((uint64_t)(a2 + 8), (uint64_t)v17, &qword_10007A770);
        sub_100004064((uint64_t)v17, (uint64_t)&v21, &qword_10007A770);
        if (v22)
          v14 = v21;
        else
          v14 = 0;
        if (v22)
          v15 = v22;
        else
          v15 = 0xE000000000000000;
        if (v12 == v14 && v13 == v15)
          v4 = 0;
        else
          v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1);
        sub_100004458((uint64_t)v18);
        sub_100004458((uint64_t)v17);
        swift_bridgeObjectRelease(v13);
        swift_bridgeObjectRelease(v15);
      }
    }
    else
    {
      v4 = 0;
    }
  }
  return (v4 & 1) == 0;
}

uint64_t sub_100003848(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return sub_1000038A0(v8, v9) & 1;
}

uint64_t sub_1000038A0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a2[2];
  v3 = a1[2];
  if (v2 < v3)
    goto LABEL_2;
  if (v3 < v2)
  {
    v4 = 0;
    return v4 & 1;
  }
  v7 = a2[3];
  v8 = a2[4];
  v9 = a1[3];
  v10 = a1[4];
  v11 = v7 == v9 && v8 == v10;
  if (v11 || (v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1) & 1) == 0))
  {
    if (a2[7] < a1[7])
    {
LABEL_2:
      v4 = 1;
      return v4 & 1;
    }
    sub_100004064((uint64_t)(a2 + 8), (uint64_t)v18, &qword_10007A770);
    sub_100004064((uint64_t)v18, (uint64_t)&v19, &qword_10007A770);
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v13 = v20;
    else
      v13 = 0xE000000000000000;
    sub_100004064((uint64_t)(a1 + 8), (uint64_t)v17, &qword_10007A770);
    sub_100004064((uint64_t)v17, (uint64_t)&v21, &qword_10007A770);
    if (v22)
      v14 = v21;
    else
      v14 = 0;
    if (v22)
      v15 = v22;
    else
      v15 = 0xE000000000000000;
    if (v12 == v14 && v13 == v15)
      v4 = 0;
    else
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1);
    sub_100004458((uint64_t)v18);
    sub_100004458((uint64_t)v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }
  return v4 & 1;
}

uint64_t sub_1000039F4(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)();
}

uint64_t SystemVersionNumber.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  Swift::String v12;
  void *v13;
  Swift::String v14;
  uint64_t v16;
  unint64_t v17;
  _BYTE v18[16];
  _BYTE v19[16];
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  sub_100004064(v0 + 40, (uint64_t)v19, &qword_10007A768);
  sub_100004064((uint64_t)v19, (uint64_t)&v20, &qword_10007A768);
  if ((v21 & 1) != 0)
  {
    v2 = 0;
    v3 = (void *)0xE000000000000000;
  }
  else
  {
    v22 = v20;
    v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v3 = v4;
  }
  sub_100004064(v0 + 64, (uint64_t)v18, &qword_10007A770);
  sub_100004064((uint64_t)v18, (uint64_t)&v22, &qword_10007A770);
  if (v23)
  {
    v16 = 0;
    v17 = 0xE000000000000000;
    Character.write<A>(to:)(&v16, v22, v23, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v6 = v16;
    v5 = (void *)v17;
  }
  else
  {
    v6 = 0;
    v5 = (void *)0xE000000000000000;
  }
  v16 = 0;
  v17 = 0xE000000000000000;
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9 = *(_QWORD *)(v0 + 24);
  v10 = *(_QWORD *)(v1 + 32);
  swift_bridgeObjectRetain(v10);
  Character.write<A>(to:)(&v16, v9, v10, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_bridgeObjectRelease(v10);
  v11._countAndFlagsBits = v2;
  v11._object = v3;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v3);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v13 = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v13);
  v14._countAndFlagsBits = v6;
  v14._object = v5;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v5);
  return v16;
}

uint64_t sub_100003C04()
{
  return SystemVersionNumber.description.getter();
}

uint64_t sub_100003C44@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  NSString v11;
  id v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  char v15;
  char v16;
  void (*v17)(char *, uint64_t);
  Swift::String_optional v18;
  void *object;
  uint64_t v20;
  char v21;
  char v22;
  unint64_t v23;
  unint64_t v24;
  Swift::String_optional v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t countAndFlagsBits;
  uint64_t v39;

  v6 = type metadata accessor for NSScanner.NumberRepresentation(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_allocWithZone((Class)NSScanner);
  swift_bridgeObjectRetain(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = objc_msgSend(v10, "initWithString:", v11);

  v13 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  v14 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 104);
  v14(v9, enum case for NSScanner.NumberRepresentation.decimal(_:), v6);
  v39 = NSScanner.scanInt(representation:)(v9);
  v16 = v15;
  v17 = *(void (**)(char *, uint64_t))(v7 + 8);
  v17(v9, v6);
  if ((v16 & 1) != 0)
  {

    goto LABEL_19;
  }
  v18 = NSScanner.scanCharacter()();
  object = v18.value._object;
  if (v18.value._object)
  {
    countAndFlagsBits = v18.value._countAndFlagsBits;
    v14(v9, v13, v6);
    v20 = NSScanner.scanInt(representation:)(v9);
    v22 = v21;
    v17(v9, v6);
    if ((v22 & 1) == 0)
    {
      if (v20 >= 1000)
        v23 = v20 % 0x3E8uLL;
      else
        v23 = v20;
      if (v20 >= 1000)
        v24 = v20 / 0x3E8uLL;
      else
        v24 = 0;
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(v18.value._object);
      v25 = NSScanner.scanCharacter()();
      v26 = v25.value._countAndFlagsBits;
      v27 = v25.value._object;
      v28 = HIBYTE(a2) & 0xF;
      if ((a2 & 0x2000000000000000) == 0)
        v28 = a1;
      v29 = 7;
      if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
        v29 = 11;
      v37 = v29 | (v28 << 16);
      v30 = swift_bridgeObjectRetain(v25.value._object);
      v31 = NSScanner.currentIndex.getter(v30);
      v37 = String.distance(from:to:)(v37, v31, a1, a2);

      if (!v37)
      {
        v35 = v20 < 1000;
        swift_bridgeObjectRelease(v25.value._object);
        swift_bridgeObjectRelease(v18.value._object);
        result = swift_bridgeObjectRelease(a2);
        v34 = countAndFlagsBits;
        v33 = v39;
        goto LABEL_22;
      }
      swift_bridgeObjectRelease_n(v18.value._object, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      result = swift_bridgeObjectRelease_n(v25.value._object, 2);
      goto LABEL_20;
    }

    swift_bridgeObjectRelease(v18.value._object);
LABEL_19:
    result = swift_bridgeObjectRelease(a2);
LABEL_20:
    a1 = 0;
    a2 = 0;
    v33 = 0;
    v34 = 0;
    object = 0;
    goto LABEL_21;
  }

  result = swift_bridgeObjectRelease(a2);
  a1 = 0;
  a2 = 0;
  v33 = 0;
  v34 = 0;
LABEL_21:
  v24 = 0;
  v35 = 0;
  v23 = 0;
  v26 = 0;
  v27 = 0;
LABEL_22:
  *a3 = a1;
  a3[1] = a2;
  a3[2] = v33;
  a3[3] = v34;
  a3[4] = (uint64_t)object;
  a3[5] = v24;
  a3[6] = v35;
  a3[7] = v23;
  a3[8] = v26;
  a3[9] = (uint64_t)v27;
  return result;
}

uint64_t _s14bluetoothuserd19SystemVersionNumberV1loiySbAC_ACtFZ_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _BYTE v17[16];
  _BYTE v18[16];
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = a1[2];
  v3 = a2[2];
  if (v2 < v3)
    goto LABEL_2;
  if (v3 < v2)
  {
    v4 = 0;
    return v4 & 1;
  }
  v7 = a1[3];
  v8 = a1[4];
  v9 = a2[3];
  v10 = a2[4];
  v11 = v7 == v9 && v8 == v10;
  if (v11 || (v4 = 1, (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v9, v10, 1) & 1) == 0))
  {
    if (a1[7] < a2[7])
    {
LABEL_2:
      v4 = 1;
      return v4 & 1;
    }
    sub_100004064((uint64_t)(a1 + 8), (uint64_t)v18, &qword_10007A770);
    sub_100004064((uint64_t)v18, (uint64_t)&v19, &qword_10007A770);
    if (v20)
      v12 = v19;
    else
      v12 = 0;
    if (v20)
      v13 = v20;
    else
      v13 = 0xE000000000000000;
    sub_100004064((uint64_t)(a2 + 8), (uint64_t)v17, &qword_10007A770);
    sub_100004064((uint64_t)v17, (uint64_t)&v21, &qword_10007A770);
    if (v22)
      v14 = v21;
    else
      v14 = 0;
    if (v22)
      v15 = v22;
    else
      v15 = 0xE000000000000000;
    if (v12 == v14 && v13 == v15)
      v4 = 0;
    else
      v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, v14, v15, 1);
    sub_100004458((uint64_t)v18);
    sub_100004458((uint64_t)v17);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
  }
  return v4 & 1;
}

uint64_t sub_100004064(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000215C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000040AC()
{
  unint64_t result;

  result = qword_10007A778;
  if (!qword_10007A778)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SystemVersionNumber, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A778);
  }
  return result;
}

void *sub_1000040F0()
{
  return &protocol witness table for String;
}

unint64_t sub_100004100()
{
  unint64_t result;

  result = qword_10007A780;
  if (!qword_10007A780)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SystemVersionNumber, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A780);
  }
  return result;
}

void *sub_100004144()
{
  return &protocol witness table for String;
}

void *sub_100004150()
{
  return &protocol witness table for String;
}

unint64_t sub_100004160()
{
  unint64_t result;

  result = qword_10007A788;
  if (!qword_10007A788)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SystemVersionNumber, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A788);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SystemVersionNumber(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t destroy for SystemVersionNumber(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_bridgeObjectRelease(a1[9]);
}

uint64_t initializeWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v4;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v9 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

__n128 initializeWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for SystemVersionNumber(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemVersionNumber(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SystemVersionNumber(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemVersionNumber()
{
  return &type metadata for SystemVersionNumber;
}

uint64_t sub_100004458(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

unint64_t sub_100004480()
{
  unint64_t result;

  result = qword_10007A790;
  if (!qword_10007A790)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for SystemVersionNumber, &type metadata for SystemVersionNumber);
    atomic_store(result, (unint64_t *)&qword_10007A790);
  }
  return result;
}

uint64_t sub_1000044C4()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for DarwinNotificationManager();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = _swiftEmptyArrayStorage;
  static DarwinNotificationManager.shared = result;
  return result;
}

uint64_t *DarwinNotificationManager.shared.unsafeMutableAddressor()
{
  if (qword_10007D020 != -1)
    swift_once(&qword_10007D020, sub_1000044C4);
  return &static DarwinNotificationManager.shared;
}

uint64_t static DarwinNotificationManager.shared.getter()
{
  if (qword_10007D020 != -1)
    swift_once(&qword_10007D020, sub_1000044C4);
  return swift_retain(static DarwinNotificationManager.shared);
}

void *variable initialization expression of DarwinNotificationManager.helpers()
{
  return &_swiftEmptyArrayStorage;
}

uint64_t DarwinNotificationManager.registerHelper(helper:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 16, v8, 33, 0);
  v3 = swift_retain(a1);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v5 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v4 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, a1);
  specialized Array._endMutation()(v6);
  return swift_endAccess(v8);
}

uint64_t DarwinNotificationManager.unregisterHelper(helper:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 16, v8, 1, 0);
  v3 = *(_QWORD *)(v1 + 16);
  swift_retain(a1);
  v4 = swift_bridgeObjectRetain(v3);
  v5 = sub_100004E64(v4, a1);
  swift_bridgeObjectRelease(v3);
  swift_release(a1);
  v6 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v5;
  return swift_bridgeObjectRelease(v6);
}

Swift::Void __swiftcall DarwinNotificationManager.setUp()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  void *v3;
  uint64_t v4;
  _QWORD v5[5];
  uint64_t v6;

  v1 = v0;
  sub_100004FBC();
  v2 = static OS_dispatch_queue.main.getter();
  v5[4] = sub_100004FF8;
  v6 = v1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_100004A24;
  v5[3] = &unk_1000715F8;
  v3 = _Block_copy(v5);
  v4 = v6;
  swift_retain(v1);
  swift_release(v4);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v2, v3);
  _Block_release(v3);

}

const char *sub_100004754(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  const char *result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSString v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[3];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v9 = String.init(cString:)(result);
    v11 = v10;
    v12 = sub_1000306DC();
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
    v13 = swift_bridgeObjectRetain_n(v11, 2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(12, -1);
      v27 = a2;
      v17 = (uint8_t *)v16;
      v18 = swift_slowAlloc(32, -1);
      v29[0] = v18;
      *(_DWORD *)v17 = 136315138;
      v26 = v17 + 4;
      swift_bridgeObjectRetain(v11);
      v28 = sub_100002CA8(v9, v11, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29, v26, v17 + 12);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "On xpc event stream, com.apple.notifyd.matching, notification %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v19 = v17;
      a2 = v27;
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v11, 2);
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_beginAccess(a2 + 16, v29, 0, 0);
    v20 = *(_QWORD *)(a2 + 16);
    if ((unint64_t)v20 >> 62)
    {
      if (v20 < 0)
        v25 = *(_QWORD *)(a2 + 16);
      else
        v25 = v20 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(a2 + 16));
      result = (const char *)_CocoaArrayWrapper.endIndex.getter(v25);
      v21 = (uint64_t)result;
      if (result)
        goto LABEL_7;
    }
    else
    {
      v21 = *(_QWORD *)((v20 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = (const char *)swift_bridgeObjectRetain(*(_QWORD *)(a2 + 16));
      if (v21)
      {
LABEL_7:
        if (v21 < 1)
        {
          __break(1u);
          return result;
        }
        v22 = 0;
        do
        {
          if ((v20 & 0xC000000000000001) != 0)
          {
            v23 = specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
          }
          else
          {
            v23 = *(_QWORD *)(v20 + 8 * v22 + 32);
            swift_retain(v23);
          }
          ++v22;
          v24 = String._bridgeToObjectiveC()();
          (*(void (**)(void))(*(_QWORD *)v23 + 120))();
          swift_release(v23);

        }
        while (v21 != v22);
      }
    }
    swift_bridgeObjectRelease(v11);
    return (const char *)swift_bridgeObjectRelease(v20);
  }
  return result;
}

uint64_t sub_100004A24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t DarwinNotificationManager.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t DarwinNotificationManager.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t sub_100004AAC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_100004B40(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_100004D18(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_100004D18(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_100004B40(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_100004CB4(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_100004CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10000215C(&qword_10007B3C0);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_100004D18(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000215C(&qword_10007B3C0);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

_QWORD *sub_100004E64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;

  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      while ((a1 & 0xC000000000000001) != 0)
      {
        v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
        v9 = v5 + 1;
        if (__OFADD__(v5, 1))
        {
LABEL_13:
          __break(1u);
          return _swiftEmptyArrayStorage;
        }
LABEL_9:
        if (v8 == a2)
        {
          swift_release(a2);
        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          v6 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
          v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v8);
          specialized ContiguousArray._endMutation()(v7);
        }
        ++v5;
        if (v9 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      __break(1u);
LABEL_16:
      if (a1 < 0)
        v11 = a1;
      else
        v11 = a1 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v11);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v8 = *(_QWORD *)(a1 + 8 * v5 + 32);
    swift_retain(v8);
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
      goto LABEL_13;
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

unint64_t sub_100004FBC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007A900;
  if (!qword_10007A900)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10007A900);
  }
  return result;
}

const char *sub_100004FF8(void *a1)
{
  uint64_t v1;

  return sub_100004754(a1, v1);
}

uint64_t type metadata accessor for DarwinNotificationManager()
{
  return objc_opt_self(_TtC14bluetoothuserd25DarwinNotificationManager);
}

id sub_100005024(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  objc_class *v4;
  id v9;
  id v10;

  v9 = objc_allocWithZone(v4);
  v10 = sub_100006ADC(a1, a2, a3, a4);

  swift_release(a4);
  return v10;
}

id sub_100005090()
{
  _QWORD *v0;
  objc_super v2;

  (*(void (**)(void))((swift_isaMask & *v0) + 0xE0))();
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000051B4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000306DC();
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Start KeyValueStoreCustomObserver", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v14 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    v15 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain(*(_QWORD *)((char *)v1
                                       + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys));
    v16 = (_QWORD *)(v12 + 40);
    do
    {
      v17 = *v16;
      swift_bridgeObjectRetain(*v16);
      v18 = String._bridgeToObjectiveC()();
      objc_msgSend(v14, "addObserver:forKeyPath:options:context:", v1, v18, 0, 0);

      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v17);
      objc_msgSend(v15, "addObserver:forKeyPath:options:context:", v1, v19, 0, 0);

      v16 += 2;
      --v13;
    }
    while (v13);
    v11 = swift_bridgeObjectRelease(v12);
  }
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0x110))(v11);
}

uint64_t sub_1000053A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  NSString v7;
  NSString v8;
  id v9;
  int *v10;
  _BYTE v12[24];

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults);
    v4 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults);
    swift_bridgeObjectRetain(*(_QWORD *)(v0
                                       + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys));
    v5 = (_QWORD *)(v1 + 40);
    do
    {
      v6 = *v5;
      swift_bridgeObjectRetain(*v5);
      v7 = String._bridgeToObjectiveC()();
      objc_msgSend(v3, "removeObserver:forKeyPath:context:", v0, v7, 0);

      v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v6);
      objc_msgSend(v4, "removeObserver:forKeyPath:context:", v0, v8, 0);

      v5 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  v9 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v9, "removeObserver:", v0);

  v10 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken, v12, 0, 0);
  return notify_cancel(*v10);
}

void sub_10000567C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  char *v16;
  uint8_t *v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  id v36;
  id v37;
  uint64_t v38;
  NSString v39;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  char *v43;
  uint64_t (*v44)(char *, uint64_t);
  id v45;
  uint64_t v46;
  uint64_t v47;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = ((uint64_t (*)(void))__chkstk_darwin)();
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v40 - v7;
  v45 = *(id *)&v1[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults];
  v9 = objc_msgSend(v45, "synchronize");
  v10 = sub_1000308B4();
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12 = v11(v8, v10, v2);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(8, -1);
    v44 = (uint64_t (*)(char *, uint64_t))v2;
    v16 = v6;
    v17 = v15;
    *(_DWORD *)v15 = 67109120;
    LODWORD(v47) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 4, v15 + 4, v15 + 8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cloud KVS synchronized: %{BOOL}d", v17, 8u);
    v18 = v17;
    v6 = v16;
    v2 = (uint64_t)v44;
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v3 + 8);
  v19(v8, v2);
  v11(v6, v10, v2);
  v20 = v1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v44 = (uint64_t (*)(char *, uint64_t))v19;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v47 = v42;
    v43 = v6;
    *(_DWORD *)v23 = 136315138;
    v24 = v23 + 12;
    v40 = v23 + 4;
    v41 = v23;
    v25 = objc_msgSend(v45, "dictionaryRepresentation");
    v26 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v25, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v27 = Dictionary.description.getter(v26, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
    v29 = v28;
    swift_bridgeObjectRelease(v26);
    v46 = sub_100002CA8(v27, v29, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40, v24);

    v30 = v29;
    v31 = v45;
    swift_bridgeObjectRelease(v30);
    v32 = v41;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cloud KVS snapshot: %s", v41, 0xCu);
    v33 = v42;
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    v34 = v44(v43, v2);
  }
  else
  {

    v34 = ((uint64_t (*)(char *, uint64_t))v19)(v6, v2);
    v31 = v45;
  }
  (*(void (**)(uint64_t))((swift_isaMask & *(_QWORD *)v20) + 0xF0))(v34);
  v35 = (void *)objc_opt_self(NSNotificationCenter);
  v36 = objc_msgSend(v35, "defaultCenter");
  objc_msgSend(v36, "addObserver:selector:name:object:", v20, "handleUbiquitousKeyValueStoreChangeWithNotification:", NSUbiquitousKeyValueStoreDidChangeExternallyNotification, v31);

  v37 = objc_msgSend(v35, "defaultCenter");
  v38 = *((_QWORD *)sub_10000C314() + 1);
  swift_bridgeObjectRetain(v38);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v37, "addObserver:selector:name:object:", v20, "handleUbiquitousKeyValueStoreChangeLocallyWithNotification:", v39, 0);

}

void sub_100005AAC()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  NSString v5;

  v1 = (void *)objc_opt_self(NSNotificationCenter);
  v2 = objc_msgSend(v1, "defaultCenter");
  objc_msgSend(v2, "removeObserver:name:object:", v0, NSUbiquitousKeyValueStoreDidChangeExternallyNotification, *(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults));

  v3 = objc_msgSend(v1, "defaultCenter");
  v4 = *((_QWORD *)sub_10000C314() + 1);
  swift_bridgeObjectRetain(v4);
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  objc_msgSend(v3, "removeObserver:name:object:", v0, v5, 0);

}

unint64_t sub_100005B90()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t result;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  _OWORD v36[2];
  uint64_t v37[5];
  __int128 v38;
  __int128 v39;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = Notification.userInfo.getter(v4);
  if (!result)
    return result;
  v8 = result;
  v9 = sub_1000308B4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
  v10 = swift_bridgeObjectRetain_n(v8, 2);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(12, -1);
    v34 = v1;
    v14 = (uint8_t *)v13;
    v33 = swift_slowAlloc(32, -1);
    v37[0] = v33;
    *(_DWORD *)v14 = 136315138;
    v31 = v14 + 4;
    v15 = swift_bridgeObjectRetain(v8);
    v32 = (char *)&type metadata for Any + 8;
    v16 = Dictionary.description.getter(v15, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v18 = v17;
    swift_bridgeObjectRelease(v8);
    *(_QWORD *)&v38 = sub_100002CA8(v16, v18, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, (char *)&v38 + 8, v31, v14 + 12);
    swift_bridgeObjectRelease_n(v8, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Cloud KVS Notification: %s", v14, 0xCu);
    v19 = v33;
    swift_arrayDestroy(v33, 1, v32);
    swift_slowDealloc(v19, -1, -1);
    v20 = v14;
    v1 = v34;
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v8, 2);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangeReasonKey);
  v23 = v22;
  *(_QWORD *)&v38 = v21;
  *((_QWORD *)&v38 + 1) = v22;
  swift_bridgeObjectRetain(v22);
  result = AnyHashable.init<A>(_:)(&v38, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v8 + 16))
  {
    __break(1u);
    goto LABEL_21;
  }
  result = sub_1000069E8((uint64_t)v37);
  if ((v24 & 1) == 0)
  {
LABEL_21:
    __break(1u);
    return result;
  }
  sub_100002D98(*(_QWORD *)(v8 + 56) + 32 * result, (uint64_t)v36);
  sub_100006C18((uint64_t)v37);
  swift_bridgeObjectRelease(v23);
  sub_100006C4C(v36, &v38);
  swift_dynamicCast(&v35, &v38, (char *)&type metadata for Any + 8, &type metadata for Int, 7);
  if (v35 > 3 || v35 == 2)
  {
    v30 = v8;
    return swift_bridgeObjectRelease(v30);
  }
  *(_QWORD *)&v36[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
  *((_QWORD *)&v36[0] + 1) = v25;
  AnyHashable.init<A>(_:)(v36, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v8 + 16) && (v26 = sub_1000069E8((uint64_t)v37), (v27 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v8 + 56) + 32 * v26, (uint64_t)&v38);
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
  }
  swift_bridgeObjectRelease(v8);
  sub_100006C18((uint64_t)v37);
  if (!*((_QWORD *)&v39 + 1))
    return sub_100006C5C((uint64_t)&v38);
  v28 = sub_10000215C(&qword_10007BDD0);
  result = swift_dynamicCast(v36, &v38, (char *)&type metadata for Any + 8, v28, 6);
  if ((result & 1) != 0)
  {
    v29 = *(_QWORD *)&v36[0];
    (*(void (**)(_QWORD, _QWORD))((swift_isaMask & *v1) + 0x108))(0, *(_QWORD *)&v36[0]);
    v30 = v29;
    return swift_bridgeObjectRelease(v30);
  }
  return result;
}

uint64_t sub_100005F5C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  _BYTE v12[40];
  __int128 v13;
  __int128 v14;

  v2 = v1;
  v3 = Notification.userInfo.getter(a1);
  if (v3)
  {
    v4 = v3;
    v11[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
    v11[1] = v5;
    AnyHashable.init<A>(_:)(v11, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v4 + 16) && (v6 = sub_1000069E8((uint64_t)v12), (v7 & 1) != 0))
    {
      sub_100002D98(*(_QWORD *)(v4 + 56) + 32 * v6, (uint64_t)&v13);
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    swift_bridgeObjectRelease(v4);
    sub_100006C18((uint64_t)v12);
    if (*((_QWORD *)&v14 + 1))
    {
      v8 = sub_10000215C(&qword_10007BDD0);
      if ((swift_dynamicCast(v11, &v13, (char *)&type metadata for Any + 8, v8, 6) & 1) != 0)
      {
        v9 = v11[0];
        (*(void (**)(_QWORD, _QWORD))((swift_isaMask & *v2) + 0x108))(0, v11[0]);
        return swift_bridgeObjectRelease(v9);
      }
    }
    else
    {
      sub_100006C5C((uint64_t)&v13);
    }
  }
  return (*(uint64_t (**)(_QWORD, _QWORD *))((swift_isaMask & *v2) + 0x108))(0, _swiftEmptyArrayStorage);
}

uint64_t sub_1000060B8(void *a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v13;

  v7 = type metadata accessor for Notification(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v11 = a1;
  a4(v10);

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100006158(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  v12 = swift_allocObject(&unk_100071630, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, v2);
  v13 = swift_allocObject(&unk_100071658, 40, 7);
  *(_QWORD *)(v13 + 16) = v12;
  *(_BYTE *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = a2;
  aBlock[4] = sub_100006CEC;
  v25 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100071670;
  v14 = _Block_copy(aBlock);
  swift_retain(v12);
  v15 = swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v15);
  v23 = _swiftEmptyArrayStorage;
  v16 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v17 = sub_10000215C((uint64_t *)&unk_10007A960);
  v18 = sub_100006D84();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v19 = v25;
  swift_release(v12);
  return swift_release(v19);
}

void sub_100006384()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  int *v4;
  _QWORD v5[5];
  uint64_t v6;

  v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue);
  v2 = swift_allocObject(&unk_100071630, 24, 7);
  swift_unknownObjectWeakInit(v2 + 16, v0);
  v5[4] = sub_100006E14;
  v6 = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000065D4;
  v5[3] = &unk_100071698;
  v3 = _Block_copy(v5);
  swift_release(v6);
  v4 = (int *)(v0 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken);
  swift_beginAccess(v4, v5, 33, 0);
  notify_register_dispatch("com.apple.bluetooth.prefsChanged", v4, v1, v3);
  swift_endAccess(v5);
  _Block_release(v3);
}

uint64_t sub_100006470(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  void (*v15)(uint64_t, _QWORD *);
  _BYTE v17[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = a1 + 16;
  v7 = sub_1000308B4();
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Root KVS Notification", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_beginAccess(v6, v17, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v6);
  if (result)
  {
    v13 = (void *)result;
    v15 = *(void (**)(uint64_t, _QWORD *))(result
                                                   + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    v14 = *(_QWORD *)(result + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify + 8);
    swift_retain(v14);

    v15(1, _swiftEmptyArrayStorage);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_1000065D4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10000663C(uint64_t a1, uint64_t a2)
{
  return sub_100006704(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100006648(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100006688(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_1000066F8(uint64_t a1, uint64_t a2)
{
  return sub_100006704(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100006704(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100006740(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000067B4(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100006830@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5;
  return result;
}

uint64_t sub_100006870(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_1000068F8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10000693C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100006964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000219C(&qword_10007A8C8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100060868);
  v3 = sub_10000219C((unint64_t *)&unk_10007A8F0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000607BC);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

unint64_t sub_1000069E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100006A18(a1, v4);
}

unint64_t sub_100006A18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_100006E70(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_100006C18((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

id sub_100006ADC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  void *v14;
  char *v15;
  id v16;
  id v17;
  objc_super v19;
  char v20[24];

  v9 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_defaults;
  v10 = (void *)objc_opt_self(NSUserDefaults);
  v11 = v4;
  *(_QWORD *)&v4[v9] = objc_msgSend(v10, "standardUserDefaults");
  v12 = OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudDefaults;
  v13 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v13, v20, 0, 0);
  v14 = (void *)*v13;
  *(_QWORD *)&v11[v12] = *v13;
  *(_DWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_rootPrefsChangeToken] = -1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_cloudKVSChangedNotification] = 0;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_dispatchQueue] = a1;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_monitoredUserDefaultKeys] = a2;
  v15 = &v11[OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify];
  *(_QWORD *)v15 = a3;
  *((_QWORD *)v15 + 1) = a4;
  v16 = v14;
  v17 = a1;
  swift_retain(a4);

  v19.receiver = v11;
  v19.super_class = (Class)type metadata accessor for KeyValueStoreCustomObserver();
  return objc_msgSendSuper2(&v19, "init");
}

uint64_t type metadata accessor for KeyValueStoreCustomObserver()
{
  return objc_opt_self(_TtC14bluetoothuserd27KeyValueStoreCustomObserver);
}

uint64_t sub_100006C18(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

_OWORD *sub_100006C4C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100006C5C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000215C(&qword_10007BE80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100006C9C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100006CC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100006CEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  void *v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  _BYTE v9[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = v1 + 16;
  swift_beginAccess(v1 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v4);
  if (result)
  {
    v6 = (void *)result;
    v8 = *(void (**)(uint64_t, uint64_t))(result
                                                 + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC14bluetoothuserd27KeyValueStoreCustomObserver_notify + 8);
    swift_retain(v7);

    v8(v2, v3);
    return swift_release(v7);
  }
  return result;
}

unint64_t sub_100006D84()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007AE30;
  if (!qword_10007AE30)
  {
    v1 = sub_100006DD0((uint64_t *)&unk_10007A960);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007AE30);
  }
  return result;
}

uint64_t sub_100006DD0(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100006E14()
{
  uint64_t v0;

  return sub_100006470(v0);
}

void type metadata accessor for NSKeyValueChangeKey()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10007A8D0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_1000716D0);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007A8D0);
  }
}

uint64_t sub_100006E70(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_100006EAC()
{
  return sub_10000219C(&qword_10007A8D8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100060780);
}

uint64_t sub_100006ED8()
{
  return sub_10000219C(&qword_10007A8E0, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_100060754);
}

uint64_t sub_100006F04()
{
  return sub_10000219C(&qword_10007A8E8, (uint64_t (*)(uint64_t))type metadata accessor for NSKeyValueChangeKey, (uint64_t)&unk_1000607F0);
}

id sub_100006F38()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ApplePushServiceManager()), "init");
  qword_1000809B8 = (uint64_t)result;
  return result;
}

uint64_t *sub_100006F64()
{
  if (qword_10007D330 != -1)
    swift_once(&qword_10007D330, sub_100006F38);
  return &qword_1000809B8;
}

uint64_t sub_100006FE4()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions, v3, 0, 0);
  return swift_bridgeObjectRetain(*v1);
}

uint64_t sub_10000702C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_10000707C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000070C4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[24];

  v1 = (uint64_t *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment, v4, 0, 0);
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t sub_100007118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  _BYTE v8[24];

  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment);
  swift_beginAccess(v5, v8, 1, 0);
  v6 = v5[1];
  *v5 = a1;
  v5[1] = a2;
  return swift_bridgeObjectRelease(v6);
}

id sub_100007174()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  objc_class *v19;
  _QWORD v21[2];
  uint64_t v22;
  void (*v23)(char *, _QWORD, uint64_t);
  uint64_t v24;
  objc_super v25;
  _QWORD *v26;

  v1 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v1);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v8 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  __chkstk_darwin(v7);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue;
  v21[0] = sub_100004FBC();
  v23 = *(void (**)(char *, _QWORD, uint64_t))(v8 + 104);
  v23(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  v11 = v0;
  static DispatchQoS.unspecified.getter(v11);
  v26 = _swiftEmptyArrayStorage;
  v12 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10000215C((uint64_t *)&unk_10007A910);
  v14 = sub_1000021DC((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v1, v12);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100066640, v6, v3, v10, 0);
  *(_QWORD *)(v21[1] + v22) = v15;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptions] = _swiftEmptyArrayStorage;
  v16 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue;
  static DispatchQoS.unspecified.getter(v15);
  v26 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v13, v14, v1, v12);
  v23(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v24);
  *(_QWORD *)&v11[v16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100066660, v6, v3, v10, 0);
  v17 = &v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushEnvironment];
  *(_QWORD *)v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *((_QWORD *)v17 + 1) = v18;
  *(_QWORD *)&v11[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection] = 0;

  v19 = (objc_class *)type metadata accessor for ApplePushServiceManager();
  v25.receiver = v11;
  v25.super_class = v19;
  return objc_msgSendSuper2(&v25, "init");
}

uint64_t type metadata accessor for ApplePushServiceManager()
{
  return objc_opt_self(_TtC14bluetoothuserd23ApplePushServiceManager);
}

id sub_100007484()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  Swift::String v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  id v29;
  NSString v30;
  NSString v31;
  id v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  Class isa;
  void *v39;
  id v40;
  NSString v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  unint64_t v47;
  unint64_t v48;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)__chkstk_darwin(v4);
  v9 = (char *)&v47 - v8;
  v10 = OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection;
  if (!*(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_apsConnection))
  {
    v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v12 = objc_msgSend(v11, "bundleIdentifier");

    if (v12)
    {
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v15 = v14;

      v16 = sub_100030710();
      v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v16, v2);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Set up APS connection", v20, 2u);
        swift_slowDealloc(v20, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
      v47 = 0xD00000000000001BLL;
      v48 = 0x80000001000666A0;
      v21._countAndFlagsBits = v13;
      v21._object = v15;
      String.append(_:)(v21);
      v22 = swift_bridgeObjectRelease(v15);
      v24 = v47;
      v23 = v48;
      (*(void (**)(uint64_t))((swift_isaMask & *v1) + 0xA8))(v22);
      v26 = v25;
      v27 = *(void **)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_pushServiceQueue);
      v28 = objc_allocWithZone((Class)APSConnection);
      v29 = v27;
      v30 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v26);
      v31 = String._bridgeToObjectiveC()();
      v32 = objc_msgSend(v28, "initWithEnvironmentName:namedDelegatePort:queue:", v30, v31, v29);

      v33 = *(void **)((char *)v1 + v10);
      *(_QWORD *)((char *)v1 + v10) = v32;

      v34 = *(void **)((char *)v1 + v10);
      if (!v34)
        goto LABEL_10;
      v35 = sub_10000215C((uint64_t *)&unk_10007B630);
      v36 = swift_allocObject(v35, 48, 7);
      *(_OWORD *)(v36 + 16) = xmmword_1000606F0;
      *(_QWORD *)(v36 + 32) = v24;
      *(_QWORD *)(v36 + 40) = v23;
      v37 = v34;
      swift_bridgeObjectRetain(v23);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v36);
      objc_msgSend(v37, "_setEnabledTopics:", isa);

      v39 = *(void **)((char *)v1 + v10);
      if (v39)
      {
        v40 = v39;
        v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v23);
        objc_msgSend(v40, "requestTokenForTopic:identifier:", v41, 0);

        result = *(id *)((char *)v1 + v10);
        if (!result)
          return result;
      }
      else
      {
LABEL_10:
        swift_bridgeObjectRelease(v23);
        result = *(id *)((char *)v1 + v10);
        if (!result)
          return result;
      }
      return objc_msgSend(result, "setDelegate:", v1);
    }
    v42 = sub_100030710();
    v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v42, v2);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to setup APS cannot get bundleIdentifier!", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    return (id)(*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return result;
}

uint64_t sub_100007898(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10000874C(a2, a3);
}

uint64_t sub_100007938(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  return sub_100008A58(a2, a3, a4, a5, a6, a7);
}

uint64_t sub_100007A78(uint64_t a1, void *a2)
{
  return sub_100008E60(a2);
}

id sub_100007AE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ApplePushServiceManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100007B80(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v1 = sub_10000215C((uint64_t *)&unk_10007A950);
  return OS_dispatch_queue.sync<A>(execute:)(sub_1000091DC, v3, v1);
}

uint64_t sub_100007BE8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _BYTE v21[40];

  v6 = sub_10000215C((uint64_t *)&unk_10007A950);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000094F4(a1, (uint64_t)v21);
  v10 = swift_allocObject(&unk_1000717F8, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, a2);
  v11 = sub_10000215C(&qword_10007AA38);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_10000955C, v10, v11, a3);
  sub_100009204(a3, (uint64_t)v9);
  v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))((swift_isaMask & *a2) + 0xA0))(v21);
  v14 = v13;
  v15 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_100008338(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_100008338(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_1000092F4((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_100007D8C(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v22 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000215C((uint64_t *)&unk_10007A950);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10);
  v21[1] = *(_QWORD *)&v1[OBJC_IVAR____TtC14bluetoothuserd23ApplePushServiceManager_subscriptionQueue];
  sub_100009204(a1, (uint64_t)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = swift_allocObject(&unk_1000717A8, v14 + v12, v13 | 7);
  *(_QWORD *)(v15 + 16) = v1;
  sub_1000092F4((uint64_t)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v14);
  aBlock[4] = sub_10000933C;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_1000717C0;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v1);
  v23 = _swiftEmptyArrayStorage;
  v17 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10000215C((uint64_t *)&unk_10007A960);
  v19 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v25);
}

uint64_t sub_100007FE0(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = sub_10000215C((uint64_t *)&unk_10007A950);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_100009204(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12);
      v17 = a1(v12);
      if (v3)
      {
        sub_1000094B4((uint64_t)v12);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_1000092F4((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_100008548(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100008548(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_1000092F4(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_1000094B4((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_1000081D4()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x90))();
}

uint64_t sub_10000820C()
{
  _QWORD **v0;

  return (*(uint64_t (**)(void))((swift_isaMask & **v0) + 0x98))();
}

void (*sub_100008244(_QWORD *a1))(_QWORD *a1)
{
  _QWORD **v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))((swift_isaMask & **v1) + 0xA0))();
  return sub_1000082A4;
}

void sub_1000082A4(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1000082D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10000215C((uint64_t *)&unk_10007A950);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100009760, v5, v3);
}

uint64_t sub_100008338(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007AA28);
  v11 = *(_QWORD *)(sub_10000215C((uint64_t *)&unk_10007A950) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C((uint64_t *)&unk_10007A950);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000095C8(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_100008548(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100008564(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100008564(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007AA28);
  v11 = *(_QWORD *)(sub_10000215C((uint64_t *)&unk_10007A950) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C((uint64_t *)&unk_10007A950);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000874C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  Swift::String v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v25 - v9;
  if (a2 >> 60 == 15)
  {
    v11 = sub_100030710();
    v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Invalid Public Token", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  else
  {
    v17 = sub_10000971C(a1, a2);
    if (IsAppleInternalBuild(v17))
    {
      v18 = sub_100030710();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, v18, v4);
      sub_10000971C(a1, a2);
      v19 = sub_10000971C(a1, a2);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = swift_slowAlloc(32, -1);
        v28 = v26;
        *(_DWORD *)v22 = 136315138;
        v25 = v22 + 4;
        v23 = Data.base64EncodedString(options:)(0);
        v27 = sub_100002CA8(v23._countAndFlagsBits, (unint64_t)v23._object, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v25, v22 + 12);
        swift_bridgeObjectRelease(v23._object);
        sub_1000093D8(a1, a2);
        sub_1000093D8(a1, a2);
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "didReceivePublicToken: %s", v22, 0xCu);
        v24 = v26;
        swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v22, -1, -1);

        sub_1000093D8(a1, a2);
      }
      else
      {
        sub_1000093D8(a1, a2);
        sub_1000093D8(a1, a2);
        sub_1000093EC(a1, a2);

      }
      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v4);
    }
    else
    {
      return sub_1000093D8(a1, a2);
    }
  }
}

uint64_t sub_100008A58(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  uint64_t *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  uint64_t *v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;

  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v36 - v17;
  if (a2 >> 60 != 15 && a4 && a6)
  {
    sub_100009708(a1, a2);
    swift_bridgeObjectRetain(a4);
    v19 = swift_bridgeObjectRetain(a6);
    if (IsAppleInternalBuild(v19))
    {
      v20 = sub_100030710();
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v20, v12);
      sub_100009708(a1, a2);
      sub_100009708(a1, a2);
      swift_bridgeObjectRetain(a4);
      v21 = swift_bridgeObjectRetain(a6);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      v41 = v23;
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(32, -1);
        v39 = a5;
        v25 = v24;
        v40 = swift_slowAlloc(96, -1);
        v43 = v40;
        *(_DWORD *)v25 = 136315650;
        v36 = v25 + 4;
        v26 = Data.base64EncodedString(options:)(0);
        v38 = v22;
        v42 = sub_100002CA8(v26._countAndFlagsBits, (unint64_t)v26._object, &v43);
        v37 = &v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v36, v25 + 12);
        swift_bridgeObjectRelease(v26._object);
        sub_1000093D8(a1, a2);
        sub_1000093D8(a1, a2);
        *(_WORD *)(v25 + 12) = 2080;
        swift_bridgeObjectRetain(a4);
        v42 = sub_100002CA8(a3, a4, &v43);
        v27 = v37;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v37, v25 + 14, v25 + 22);
        swift_bridgeObjectRelease_n(a4, 3);
        *(_WORD *)(v25 + 22) = 2080;
        swift_bridgeObjectRetain(a6);
        v42 = sub_100002CA8(v39, a6, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v27, v25 + 24, v25 + 32);
        swift_bridgeObjectRelease_n(a6, 3);
        v28 = v38;
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v41, "didReceiveToken: %s, for topic: %s, identifier: %s", (uint8_t *)v25, 0x20u);
        v29 = v40;
        swift_arrayDestroy(v40, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v25, -1, -1);

        sub_1000093D8(a1, a2);
      }
      else
      {
        sub_1000093D8(a1, a2);
        sub_1000093D8(a1, a2);
        sub_1000093EC(a1, a2);

        swift_bridgeObjectRelease_n(a6, 2);
        swift_bridgeObjectRelease_n(a4, 2);
      }
      return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
    else
    {
      sub_1000093D8(a1, a2);
      swift_bridgeObjectRelease(a6);
      return swift_bridgeObjectRelease(a4);
    }
  }
  else
  {
    v30 = sub_100030710();
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v30, v12);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invalid APS data arguments", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  }
}

uint64_t sub_100008E60(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject *v20;
  _QWORD *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = sub_10000215C((uint64_t *)&unk_10007A950);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v39 - v11;
  if (a1)
  {
    v13 = a1;
    v14 = sub_100030710();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v14, v6);
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      v42 = v18;
      v43 = v7;
      *(_DWORD *)v18 = 138412290;
      v40 = v18 + 4;
      v46 = v15;
      v19 = v15;
      v44 = v6;
      v20 = v19;
      v7 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v40, v18 + 12);
      v21 = v41;
      *v41 = a1;

      v6 = v44;
      v22 = v17;
      v23 = v42;
      _os_log_impl((void *)&_mh_execute_header, v16, v22, "didReceive: message: %@", v42, 0xCu);
      v24 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v21, 1, v24);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {

      v16 = v15;
    }

    v31 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    v32 = (*(uint64_t (**)(uint64_t))((swift_isaMask & *v45) + 0x90))(v31);
    v33 = v32;
    v34 = *(_QWORD *)(v32 + 16);
    if (v34)
    {
      v35 = v32 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
      v36 = *(_QWORD *)(v3 + 72);
      do
      {
        sub_100009204(v35, (uint64_t)v5);
        sub_1000094F4((uint64_t)v5, (uint64_t)&v46);
        sub_1000094B4((uint64_t)v5);
        v37 = v48;
        v38 = v49;
        sub_1000096E4(&v46, v48);
        (*(void (**)(NSObject *, uint64_t, uint64_t))(v38 + 8))(v15, v37, v38);
        sub_100002D78(&v46);
        v35 += v36;
        --v34;
      }
      while (v34);
    }

    return swift_bridgeObjectRelease(v33);
  }
  else
  {
    v25 = sub_100030710();
    v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v25, v6);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalid message Token", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1000091DC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100007BE8(*(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_100009204(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C((uint64_t *)&unk_10007A950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000924C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = sub_10000215C((uint64_t *)&unk_10007A950);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  v7 = (_QWORD *)(v0 + v4);
  sub_100002D78(v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000092F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C((uint64_t *)&unk_10007A950);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000933C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000215C((uint64_t *)&unk_10007A950) - 8) + 80);
  v2 = *(_QWORD **)(v0 + 16);
  v3 = v0 + ((v1 + 24) & ~v1);
  v4 = (*(uint64_t (**)(void))((swift_isaMask & *v2) + 0x90))();
  v7[2] = v3;
  v5 = sub_100007FE0((uint64_t (*)(char *))sub_100009430, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *v2) + 0x98))(v5);
}

uint64_t sub_1000093D8(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_1000093EC(result, a2);
  return result;
}

uint64_t sub_1000093EC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

BOOL sub_100009430(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_10000215C((uint64_t *)&unk_10007A950);
  v5 = sub_1000021DC(&qword_10007AA30, (uint64_t *)&unk_10007A950, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_1000094B4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000215C((uint64_t *)&unk_10007A950);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000094F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100009538()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10000955C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  _BYTE v6[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    sub_100007D8C(a1);

  }
}

uint64_t sub_1000095C8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_10000215C((uint64_t *)&unk_10007A950) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_1000096E4(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100009708(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000971C(result, a2);
  return result;
}

uint64_t sub_10000971C(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100009760@<X0>(uint64_t a1@<X8>)
{
  return sub_1000091DC(a1);
}

uint64_t sub_100009774()
{
  char v0;
  char v1;
  char v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  uint64_t v18;

  v9 = UUID.uuid.getter();
  v10 = v0;
  v11 = v1;
  v12 = v2;
  v13 = v3;
  v14 = v4;
  v15 = v5;
  v16 = v6;
  v17 = v7;
  return sub_100009844((uint64_t)&v9, (uint64_t)&v18);
}

uint64_t sub_100009844(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  v2 = sub_1000096E4(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_1000098FC(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_100009A3C((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_1000099BC((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  sub_100002D78(v8);
  return v6;
}

uint64_t sub_1000098FC(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1000099BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100009A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

unint64_t sub_100009AB4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  BOOL v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::String v7;
  Swift::String v8;

  _StringGuts.grow(_:)(35);
  v1 = swift_bridgeObjectRelease(0xE000000000000000);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 112))(v1);
  v3 = (v2 & 1) == 0;
  if ((v2 & 1) != 0)
    v4 = 1702195828;
  else
    v4 = 0x65736C6166;
  if (v3)
    v5 = 0xE500000000000000;
  else
    v5 = 0xE400000000000000;
  v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v5);
  v7._countAndFlagsBits = 0xD000000000000021;
  v7._object = (void *)0x80000001000668B0;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(0x80000001000668B0);
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  return 0xD00000000000001DLL;
}

uint64_t sub_100009BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _BYTE v21[16];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  OS_dispatch_queue.sync<A>(execute:)(sub_100009D9C, v0, &type metadata for Bool);
  v10 = v21[15];
  sub_10000EC9C(0, 1);
  if ((_DWORD)v10 == 1)
  {
    v12 = v11;
    if (v11 > 0.0)
    {
      v13 = static Date.now.getter();
      v14 = Date.timeIntervalSince1970.getter(v13);
      (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
      if (v12 >= v14)
      {
        return 1;
      }
      else
      {
        v15 = sub_100030754();
        v16 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v15, v2);
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Audio accessory limited logging expired", v19, 2u);
          swift_slowDealloc(v19, -1, -1);
        }

        (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
        (*(void (**)(_QWORD))(*(_QWORD *)v1 + 120))(0);
        return 0;
      }
    }
  }
  return v10;
}

void sub_100009D9C(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled);
}

uint64_t sub_100009DB0(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  v11 = swift_allocObject(&unk_100071878, 32, 7);
  *(_BYTE *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v1;
  aBlock[4] = sub_10000B704;
  v21 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100071890;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10000215C((uint64_t *)&unk_10007A960);
  v16 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v21);
}

uint64_t sub_100009FA4(char a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  __int128 v43;

  v4 = a1 & 1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v40 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  result = __chkstk_darwin(v12);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(unsigned __int8 *)(a2 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) != v4)
  {
    v41 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled;
    sub_10000EC9C(0, 1);
    if ((a1 & 1) != 0
      && ((v19 = v18, v18 <= 0.0)
       || (v20 = static Date.now.getter(v17),
           v21 = Date.timeIntervalSince1970.getter(v20),
           (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12),
           v19 >= v21)))
    {
      v32 = sub_100030754();
      v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v11, v32, v5);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Start audio accessory limited logging", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      *((_QWORD *)&v43 + 1) = &type metadata for Bool;
      LOBYTE(v42) = 1;
      sub_10000F4B8((uint64_t)&off_100071818, (uint64_t)&v42, 0);
      sub_10000BCBC((uint64_t)&v42, &qword_10007BE80);
      if (v19 <= 0.0)
      {
        v37 = sub_10000A388((uint64_t)v16);
        v19 = Date.timeIntervalSince1970.getter(v37);
        (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      }
      *((_QWORD *)&v43 + 1) = &type metadata for Double;
      *(double *)&v42 = v19;
      v31 = 1;
      sub_10000F5CC(0, (uint64_t)&v42, 1);
      sub_10000BCBC((uint64_t)&v42, &qword_10007BE80);
      v27 = *sub_1000524D0();
      swift_retain(v27);
      v38 = sub_10000C6C4(0);
      v30 = v39;
      (*(void (**)(uint64_t, double))(*(_QWORD *)v27 + 168))(v38, v19);
    }
    else
    {
      v22 = sub_100030754();
      v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v22, v5);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v26 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v26 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Stop Audio Accessory Limited Logging", v26, 2u);
        swift_slowDealloc(v26, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      *((_QWORD *)&v43 + 1) = &type metadata for Bool;
      LOBYTE(v42) = 0;
      sub_10000F4B8((uint64_t)&off_100071840, (uint64_t)&v42, 0);
      sub_10000BCBC((uint64_t)&v42, &qword_10007BE80);
      v42 = 0u;
      v43 = 0u;
      sub_10000F5CC(0, (uint64_t)&v42, 1);
      sub_10000BCBC((uint64_t)&v42, &qword_10007BE80);
      v27 = *sub_1000524D0();
      swift_retain(v27);
      v28 = sub_10000C6C4(0);
      v30 = v29;
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 176))(v28);
      v31 = 0;
    }
    swift_release(v27);
    swift_bridgeObjectRelease(v30);
    *(_BYTE *)(a2 + v41) = v31;
    return notify_post("com.apple.bluetoothuser.settingsChanged");
  }
  return result;
}

uint64_t sub_10000A388@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000EC9C(2, 2);
  v11 = v10;
  v12 = sub_100030754();
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = a1;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v26 = swift_slowAlloc(32, -1);
    v30 = v26;
    *(_DWORD *)v16 = 136315138;
    if (v11 <= 0.0)
    {
      v19 = 0xE700000000000000;
      v18 = 0x746C7561666564;
    }
    else
    {
      v28 = 0;
      v29 = 0xE000000000000000;
      v17._countAndFlagsBits = 0x656469727265766FLL;
      v17._object = (void *)0xE900000000000020;
      String.append(_:)(v17);
      Double.write<A>(to:)(&v28, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v11);
      v18 = v28;
      v19 = v29;
    }
    v25 = v6;
    v28 = sub_100002CA8(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Requesting %s expiration interval", v16, 0xCu);
    v21 = v26;
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v25);
  }
  else
  {

    v20 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v22 = static Date.now.getter(v20);
  v23.n128_u64[0] = 0x4115180000000000;
  if (v11 > 0.0)
    v23.n128_f64[0] = v11;
  Date.advanced(by:)(v22, v23);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t (*sub_10000A63C(uint64_t a1))(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = sub_100009BA8() & 1;
  return sub_10000A674;
}

uint64_t sub_10000A674(uint64_t a1)
{
  return sub_100009DB0(*(_BYTE *)(a1 + 8));
}

uint64_t sub_10000A698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD aBlock[3];
  void *v39;
  uint64_t (*v40)();
  uint64_t v41;

  v1 = v0;
  v2 = sub_10000215C(&qword_10007AAB8);
  v3 = __chkstk_darwin(v2);
  v36 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v35 = (char *)&v32 - v5;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v9 - 8);
  v33 = v9;
  __chkstk_darwin(v9);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100030754();
  v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, v16, v12);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Activate Debug Manager", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v40 = sub_10000B710;
  v41 = v1;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  v39 = &unk_1000718B8;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v22);
  v37 = _swiftEmptyArrayStorage;
  v23 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_10000215C((uint64_t *)&unk_10007A960);
  v25 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v6, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v33);
  swift_release(v41);
  v26 = *sub_1000524D0();
  v39 = (void *)type metadata accessor for DebugManager(0);
  v40 = (uint64_t (*)())&off_100071918;
  aBlock[0] = v1;
  swift_retain(v1);
  swift_retain(v26);
  v27 = (uint64_t)v35;
  sub_100053EB8((uint64_t)aBlock);
  swift_release(v26);
  sub_100002D78(aBlock);
  v28 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 0, 1, v28);
  v29 = v36;
  sub_100004064(v27, v36, &qword_10007AAB8);
  v30 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess(v30, aBlock, 33, 0);
  sub_10000B750(v29, v30);
  return swift_endAccess(aBlock);
}

uint64_t sub_10000AA58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  char *v27;
  char v28[24];

  v1 = v0;
  v2 = sub_10000215C(&qword_10007AAB8);
  __chkstk_darwin(v2);
  v4 = &v28[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = sub_10000215C(&qword_10007AAB0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_100030754();
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v13, v9);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v27 = v8;
    v18 = v6;
    v19 = v5;
    v20 = v1;
    v21 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalidate Debug Manager", v17, 2u);
    v22 = v21;
    v1 = v20;
    v5 = v19;
    v6 = v18;
    v8 = v27;
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v23 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription, v28, 0, 0);
  sub_10000B798(v23, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v24 = &qword_10007AAB8;
    v25 = (uint64_t)v4;
  }
  else
  {
    sub_100004064((uint64_t)v4, (uint64_t)v8, &qword_10007AAB0);
    Subscription.unsubscribe(completion:)((uint64_t)Transaction.capture(), 0, v5);
    v25 = (uint64_t)v8;
    v24 = &qword_10007AAB0;
  }
  return sub_10000BCBC(v25, v24);
}

uint64_t sub_10000AC94()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue);
  aBlock[4] = sub_10000B710;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_1000718E0;
  v9 = _Block_copy(aBlock);
  v10 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10000215C((uint64_t *)&unk_10007A960);
  v13 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_10000AE68()
{
  uint64_t v0;

  sub_10000BCBC(v0 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription, &qword_10007AAB8);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000AEB0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  sub_10000AEE4();
  return v1;
}

uint64_t sub_10000AEE4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v1 = v0;
  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager_systemNotificationSubscription;
  v12 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v20 = OBJC_IVAR____TtC14bluetoothuserd12DebugManager_serialQueue;
  v13 = sub_100004FBC();
  static DispatchQoS.unspecified.getter(v13);
  v22 = _swiftEmptyArrayStorage;
  v14 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_10000215C((uint64_t *)&unk_10007A910);
  v16 = sub_10000221C((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v15, v16, v5, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v21);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000027, 0x80000001000668E0, v10, v7, v4, 0);
  *(_QWORD *)(v1 + v20) = v17;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd12DebugManager__audioAccessoryLimitedLoggingEnabled) = 0;
  return v1;
}

uint64_t sub_10000B0F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t sub_10000B120(int a1)
{
  return sub_10000B7E0(a1);
}

uint64_t sub_10000B140(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  char *v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t (*v58)(char *, uint64_t);
  os_log_t v59;
  os_log_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;

  v66 = a3;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v67 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v10 = (char *)&v60 - v9;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v60 - v16;
  v18 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BB30(a1, (uint64_t)v20);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 2, v11))
  {
    v67 = v15;
    v64 = v5;
    v30 = v17;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v20, v11);
    v32 = sub_10000C6C4(0);
    v33 = v31;
    v34 = v11;
    v35 = v66;
    v36 = a2;
    if (v32 == a2 && v31 == v66)
    {
      v37 = v12;
      swift_bridgeObjectRelease(v66);
    }
    else
    {
      v37 = v12;
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v66, v32, v31, 0);
      swift_bridgeObjectRelease(v33);
      if ((v39 & 1) == 0)
      {
        v58 = *(uint64_t (**)(char *, uint64_t))(v37 + 8);
        return v58(v30, v34);
      }
    }
    v40 = sub_100030754();
    v41 = v6;
    v42 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    v43 = v10;
    v44 = v64;
    v42(v10, v40, v64);
    v45 = v37;
    v46 = *(void (**)(char *, char *, uint64_t))(v37 + 16);
    v47 = v67;
    v46(v67, v30, v34);
    v48 = swift_bridgeObjectRetain_n(v35, 2);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.default.getter();
    v63 = v50;
    if (os_log_type_enabled(v49, v50))
    {
      v51 = swift_slowAlloc(22, -1);
      v61 = v45;
      v52 = v51;
      v53 = swift_slowAlloc(64, -1);
      v69 = v53;
      *(_DWORD *)v52 = 136315394;
      v60 = v49;
      swift_bridgeObjectRetain(v35);
      v68 = sub_100002CA8(v36, v35, &v69);
      v62 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease_n(v35, 3);
      *(_WORD *)(v52 + 12) = 2080;
      v54 = sub_10000219C(&qword_10007AAC0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v34, v54);
      v57 = v56;
      v68 = sub_100002CA8(v55, v56, &v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease(v57);
      v58 = *(uint64_t (**)(char *, uint64_t))(v61 + 8);
      v58(v47, v34);
      v59 = v60;
      _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v63, "Received alarm from name: %s at %s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v43, v64);
    }
    else
    {
      swift_bridgeObjectRelease_n(v35, 2);
      v58 = *(uint64_t (**)(char *, uint64_t))(v45 + 8);
      v58(v47, v34);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v43, v44);
    }
    (*(void (**)(_QWORD))(*(_QWORD *)v65 + 120))(0);
    return v58(v30, v34);
  }
  v65 = a2;
  v21 = sub_100030754();
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v67, v21, v5);
  v22 = v66;
  v23 = swift_bridgeObjectRetain_n(v66, 2);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = v5;
    v27 = v6;
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v69 = v29;
    *(_DWORD *)v28 = 136315138;
    swift_bridgeObjectRetain(v22);
    v68 = sub_100002CA8(v65, v22, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Received notification from name: %s", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    (*(void (**)(char *, uint64_t))(v27 + 8))(v67, v26);
  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v67, v5);
  }
  return sub_10000BB74((uint64_t)v20);
}

uint64_t sub_10000B6C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return sub_10000B140(a1, a2, a3);
}

uint64_t sub_10000B6E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000B704()
{
  uint64_t v0;

  return sub_100009FA4(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for DebugManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10007D3E0;
  if (!qword_10007D3E0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DebugManager);
  return result;
}

uint64_t sub_10000B750(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007AAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007AAB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000B7E0(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t aBlock[5];
  uint64_t v44;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  __chkstk_darwin(v8);
  v39 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100030754();
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v14, v10);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    LODWORD(v35) = a1;
    v18 = swift_slowAlloc(12, -1);
    v38 = v4;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v37 = v5;
    v21 = v20;
    aBlock[0] = v20;
    v36 = v7;
    *(_DWORD *)v19 = 136315138;
    v22 = sub_10000BD10(v35);
    v35 = v2;
    v24 = v23;
    v42 = (_QWORD *)sub_100002CA8(v22, v23, aBlock);
    v7 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, aBlock, v19 + 4, v19 + 12);
    v25 = v24;
    v2 = v35;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "keyValueChanged source: %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v26 = v21;
    v5 = v37;
    swift_slowDealloc(v26, -1, -1);
    v27 = v19;
    v4 = v38;
    swift_slowDealloc(v27, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  aBlock[4] = (uint64_t)sub_10000B710;
  v44 = v2;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100001DDC;
  aBlock[3] = (uint64_t)&unk_100071928;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain(v2);
  v30 = v39;
  static DispatchQoS.unspecified.getter(v29);
  v42 = _swiftEmptyArrayStorage;
  v31 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_10000215C((uint64_t *)&unk_10007A960);
  v33 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v32, v33, v4, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v30, v7, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v30, v41);
  return swift_release(v44);
}

uint64_t sub_10000BB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for SystemNotificationSource(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000BB74(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for SystemNotificationSource(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000BBB0()
{
  return type metadata accessor for DebugManager(0);
}

void sub_10000BBB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_10000BC3C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[2] = &unk_100060980;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10000BC3C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10007AEC0)
  {
    v2 = sub_100006DD0(&qword_10007AAB0);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10007AEC0);
  }
}

uint64_t sub_10000BC94()
{
  uint64_t v0;
  char v1;

  sub_10000E484(0, 0);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v0 + 120))(v1 & 1);
}

uint64_t sub_10000BCBC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000215C(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000BD10(char a1)
{
  return *(_QWORD *)&aCloud_1[8 * a1];
}

uint64_t sub_10000BD30(char *a1, char *a2)
{
  return sub_10000BEBC(*a1, *a2);
}

void sub_10000BD3C(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10000BD88(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10000BE08 + 4 * byte_1000609A7[a2]))(a3 + 10);
}

uint64_t sub_10000BE08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v4 = a3 + 10;
  v5 = 0x8000000100066A30;
  if (a1 == v4 && v3 == 0x8000000100066A30)
  {
    v6 = 1;
    v5 = v3;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v3, v4, 0x8000000100066A30, 0);
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v5);
  return v6 & 1;
}

uint64_t sub_10000BEBC(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v9;

  v2 = a1;
  v3 = *(_QWORD *)&aCloud_1[v2 * 8];
  v4 = qword_100060CC8[v2];
  v5 = a2;
  v6 = *(_QWORD *)&aCloud_1[v5 * 8];
  v7 = qword_100060CC8[v5];
  if (v3 == v6 && v4 == v7)
    v9 = 1;
  else
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v6, qword_100060CC8[a2], 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v7);
  return v9 & 1;
}

unint64_t sub_10000BF40@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10000FEF8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000BF6C@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10000BD10(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

Swift::Int sub_10000BF94()
{
  char *v0;

  return sub_10000BF9C(*v0);
}

Swift::Int sub_10000BF9C(char a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, 0);
  v2 = a1;
  v3 = qword_100060CC8[v2];
  String.hash(into:)(v5, *(_QWORD *)&aCloud_1[v2 * 8], v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10000C004(uint64_t a1)
{
  char *v1;

  return sub_10000C0C8(a1, *v1);
}

void sub_10000C00C(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10000C050(uint64_t a1, uint64_t a2)
{
  String.hash(into:)(a1, a2 + 10, 0x8000000100066A30);
  return swift_bridgeObjectRelease(0x8000000100066A30);
}

uint64_t sub_10000C0C8(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2;
  v3 = qword_100060CC8[v2];
  String.hash(into:)(a1, *(_QWORD *)&aCloud_1[v2 * 8], v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10000C108(uint64_t a1)
{
  char *v1;

  return sub_10000C110(a1, *v1);
}

Swift::Int sub_10000C110(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6, a1);
  v3 = a2;
  v4 = qword_100060CC8[v3];
  String.hash(into:)(v6, *(_QWORD *)&aCloud_1[v3 * 8], v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

void sub_10000C174(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X10 }
}

Swift::Int sub_10000C1C8()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, v0 + 10, 0x8000000100066A30);
  swift_bridgeObjectRelease(0x8000000100066A30);
  return Hasher._finalize()();
}

uint64_t sub_10000C25C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100011210();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10000C2B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100011210();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10000C304(_QWORD *a1@<X8>)
{
  *a1 = &off_1000719E8;
}

void *sub_10000C314()
{
  return &unk_100071970;
}

id sub_10000C320()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 16, v2, 0, 0);
  return *(id *)(v0 + 16);
}

void sub_10000C350(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  _BYTE v4[24];

  swift_beginAccess(v1 + 16, v4, 1, 0);
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*sub_10000C394(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 16, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10000C3D0()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 32, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10000C404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 32, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_10000C448(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 32, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10000C484()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  id v3;

  v1 = (void *)v0[6];
  if (!v1)
  {
    (*(void (**)(void))(*v0 + 120))();
    sub_10000FB70(0, 7, 0);
    __asm { BR              X9 }
  }
  v2 = v0[6];
  v3 = v1;
  return v2;
}

uint64_t sub_10000C6C4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10000C6FC + 4 * byte_1000609C3[a1]))(0xD00000000000001BLL, 0x8000000100066A10);
}

uint64_t sub_10000C6FC(uint64_t a1)
{
  return a1 + 10;
}

uint64_t sub_10000C760(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD aBlock[5];
  uint64_t v45;
  char v46[32];

  v40 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v5 - 8);
  v39 = v5;
  __chkstk_darwin(v5);
  v37 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v7 - 8);
  v36 = v7;
  __chkstk_darwin(v7);
  v34 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a3 + 16;
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    swift_bridgeObjectRetain(a2);
    swift_beginAccess(v9, v46, 0, 0);
    v32 = a2;
    v11 = (uint64_t *)(a2 + 40);
    v33 = v9;
    v12 = v34;
    v13 = v39;
    do
    {
      v14 = *(v11 - 1);
      v15 = *v11;
      Strong = swift_weakLoadStrong(v9);
      if (Strong)
      {
        v17 = Strong;
        v18 = *(uint64_t (**)(uint64_t))(*(_QWORD *)Strong + 120);
        v19 = swift_bridgeObjectRetain(v15);
        v42 = v18(v19);
        v20 = swift_allocObject(&unk_100071CF8, 24, 7);
        swift_weakInit(v20 + 16, v17);
        v21 = swift_allocObject(&unk_100071D70, 48, 7);
        *(_QWORD *)(v21 + 16) = v20;
        *(_BYTE *)(v21 + 24) = v40;
        *(_QWORD *)(v21 + 32) = v14;
        *(_QWORD *)(v21 + 40) = v15;
        v41 = v15;
        aBlock[4] = sub_100011400;
        v45 = v21;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_100001DDC;
        aBlock[3] = &unk_100071D88;
        v22 = _Block_copy(aBlock);
        swift_bridgeObjectRetain(v15);
        v23 = swift_retain(v20);
        static DispatchQoS.unspecified.getter(v23);
        v43 = _swiftEmptyArrayStorage;
        v24 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v25 = sub_10000215C((uint64_t *)&unk_10007A960);
        v26 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
        v27 = v37;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v25, v26, v13, v24);
        v28 = (void *)v42;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v27, v22);
        _Block_release(v22);

        (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v13);
        (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v36);
        swift_release(v45);
        v29 = v20;
        v9 = v33;
        swift_release(v29);
        swift_bridgeObjectRelease(v41);
        swift_release(v17);
      }
      v11 += 2;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease(v32);
    return notify_post("com.apple.bluetoothuser.prefsChanged");
  }
  else
  {
    swift_beginAccess(v9, aBlock, 0, 0);
    result = swift_weakLoadStrong(v9);
    if (result)
    {
      v31 = result;
      sub_10000CD20(v40, 0, 0);
      return swift_release(v31);
    }
  }
  return result;
}

void sub_10000CAA0(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = a1;

}

void (*sub_10000CAAC(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_10000C484();
  return sub_10000CAE0;
}

void sub_10000CAE0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v2;

}

void sub_10000CAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000306DC();
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activate KeyValueStoreManager", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 192))(v11);
  (*(void (**)(void))((swift_isaMask & *v12) + 0xD8))();

}

void sub_10000CC28(char a1)
{
  _BYTE *v1;
  _BYTE *v2;
  char v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v1;
  if ((a1 & 1) != 0)
  {
    if ((v1[40] & 1) != 0)
      return;
    v3 = 1;
    v4 = 29;
  }
  else
  {
    if (!v1[40])
      return;
    v3 = 0;
    v4 = 30;
  }
  v5 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 192))();
  (*(void (**)(void))((swift_isaMask & *v5) + 8 * v4))();

  v2[40] = v3;
}

uint64_t sub_10000CCA8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = v0;
  v2 = (_QWORD *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
  (*(void (**)(void))((swift_isaMask & *v2) + 0xE0))();

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return swift_deallocClassInstance(v1, 56, 7);
}

uint64_t sub_10000CD20(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  uint64_t v28;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v24 - 8);
  v11 = __chkstk_darwin(v24);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120))(v11);
  v15 = swift_allocObject(&unk_100071CF8, 24, 7);
  swift_weakInit(v15 + 16, v3);
  v16 = swift_allocObject(&unk_100071D20, 48, 7);
  *(_QWORD *)(v16 + 16) = v15;
  *(_BYTE *)(v16 + 24) = a1;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(v16 + 40) = a3;
  aBlock[4] = sub_100011200;
  v28 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100071D38;
  v17 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a3);
  v18 = swift_retain(v15);
  static DispatchQoS.unspecified.getter(v18);
  v26 = _swiftEmptyArrayStorage;
  v19 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10000215C((uint64_t *)&unk_10007A960);
  v21 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v24);
  swift_release(v28);
  return swift_release(v15);
}

uint64_t sub_10000CF60(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  _BYTE v10[24];

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_10000CFD8(a2, a3, a4);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_10000CFD8(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t isEscapingClosureAtFileLocation;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t (*v23)();
  void (*v24)(uint64_t, uint64_t, void *, uint64_t (*)());
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD aBlock[3];
  void *v33;
  uint64_t (*v34)();
  uint64_t v35;
  uint64_t v36;

  v4 = v3;
  v29 = a1;
  v7 = sub_10000215C(&qword_10007ABE0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = 0;
  v11 = *(NSObject **)(v4 + 24);
  v12 = swift_allocObject(&unk_100071C80, 32, 7);
  *(_QWORD *)(v12 + 16) = &v36;
  *(_QWORD *)(v12 + 24) = v4;
  v13 = swift_allocObject(&unk_100071CA8, 32, 7);
  *(_QWORD *)(v13 + 16) = sub_100011174;
  *(_QWORD *)(v13 + 24) = v12;
  v34 = sub_1000111B8;
  v35 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000D2B0;
  v33 = &unk_100071CC0;
  v14 = _Block_copy(aBlock);
  v15 = v35;
  swift_retain(v4);
  swift_retain(v13);
  swift_release(v15);
  dispatch_sync(v11, v14);
  _Block_release(v14);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v13, "", 122, 83, 32, 1);
  swift_release(v13);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    goto LABEL_12;
  v30 = v12;
  if (a3)
  {
    swift_bridgeObjectRetain(a3);
    isEscapingClosureAtFileLocation = (uint64_t)sub_10000F854(0, 1, 1, _swiftEmptyArrayStorage);
    v12 = *(_QWORD *)(isEscapingClosureAtFileLocation + 16);
    v17 = *(_QWORD *)(isEscapingClosureAtFileLocation + 24);
    v11 = (v12 + 1);
    if (v12 >= v17 >> 1)
      goto LABEL_13;
    while (1)
    {
      *(_QWORD *)(isEscapingClosureAtFileLocation + 16) = v11;
      v17 = isEscapingClosureAtFileLocation + 16 * v12;
      *(_QWORD *)(v17 + 32) = a2;
      *(_QWORD *)(v17 + 40) = a3;
      v18 = v36;
      if (v36)
        break;
LABEL_11:
      __break(1u);
LABEL_12:
      __break(1u);
LABEL_13:
      isEscapingClosureAtFileLocation = (uint64_t)sub_10000F854((_QWORD *)(v17 > 1), (int64_t)v11, 1, (_QWORD *)isEscapingClosureAtFileLocation);
    }
  }
  else
  {
    isEscapingClosureAtFileLocation = (uint64_t)_swiftEmptyArrayStorage;
    v18 = v36;
    if (!v36)
      goto LABEL_11;
  }
  v19 = *(_QWORD *)(v18 + 16);
  if (v19)
  {
    v20 = v18 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v31 = *(_QWORD *)(v8 + 72);
    v28 = v18;
    swift_bridgeObjectRetain(v18);
    v21 = v29;
    do
    {
      sub_10001128C(v20, (uint64_t)v10, &qword_10007ABE0);
      sub_1000094F4((uint64_t)v10, (uint64_t)aBlock);
      sub_10000BCBC((uint64_t)v10, &qword_10007ABE0);
      v22 = v33;
      v23 = v34;
      sub_1000096E4(aBlock, (uint64_t)v33);
      v24 = (void (*)(uint64_t, uint64_t, void *, uint64_t (*)()))*((_QWORD *)v23 + 1);
      swift_bridgeObjectRetain(isEscapingClosureAtFileLocation);
      v24(v21, isEscapingClosureAtFileLocation, v22, v23);
      swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
      sub_100002D78(aBlock);
      v20 += v31;
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease(v28);
  }
  swift_bridgeObjectRelease(isEscapingClosureAtFileLocation);
  v25 = v36;
  swift_release(v30);
  return swift_bridgeObjectRelease(v25);
}

uint64_t sub_10000D2B0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t sub_10000D2D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 56, 7);
  sub_10000D304();
  return v1;
}

uint64_t sub_10000D304()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v23 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v0 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v2 = (char *)&v20 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100011254(0, (unint64_t *)&qword_10007A900, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v25 = _swiftEmptyArrayStorage;
  v9 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = v9;
  v10 = sub_10000215C((uint64_t *)&unk_10007A910);
  v21 = v10;
  v11 = sub_1000021DC((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v10, v11, v3, v9);
  v12 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 104);
  v14 = v2;
  v15 = v2;
  v16 = v23;
  v13(v15, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v23);
  v17 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x8000000100066B30, v8, v5, v14, 0);
  v18 = v24;
  *(_QWORD *)(v24 + 16) = v17;
  static DispatchQoS.unspecified.getter(v17);
  v25 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v11, v3, v22);
  v13(v14, v12, v16);
  *(_QWORD *)(v18 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000028, 0x8000000100066B60, v8, v5, v14, 0);
  *(_QWORD *)(v18 + 32) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 0;
  return v18;
}

uint64_t sub_10000D590(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v1 = sub_10000215C(&qword_10007ABE0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10000FF40, v3, v1);
}

uint64_t sub_10000D5F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _BYTE v21[40];

  v6 = sub_10000215C(&qword_10007ABE0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000094F4(a1, (uint64_t)v21);
  v10 = swift_allocObject(&unk_100071CF8, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = sub_10000215C((uint64_t *)&unk_10007ADB0);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100011354, v10, v11, a3);
  sub_10001128C(a3, (uint64_t)v9, &qword_10007ABE0);
  v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 160))(v21);
  v14 = v13;
  v15 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_10000F960(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_10000F960(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_100010010((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_10000D78C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000215C(&qword_10007ABE0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21 = *(_QWORD *)(v1 + 24);
  sub_10001128C(a1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10007ABE0);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_100071B10, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  sub_100010010((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13);
  aBlock[4] = sub_100010058;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100071B28;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10000215C((uint64_t *)&unk_10007A960);
  v19 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  return swift_release(v26);
}

uint64_t sub_10000D9E8(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = sub_10000215C(&qword_10007ABE0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_10001128C(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12, &qword_10007ABE0);
      v17 = a1(v12);
      if (v3)
      {
        sub_10000BCBC((uint64_t)v12, &qword_10007ABE0);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_100010010((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_10000FB8C(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_10000FB8C(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_100010010(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_10000BCBC((uint64_t)v12, &qword_10007ABE0);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_10000DBF4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_10000DC1C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

void (*sub_10000DC44(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 160))();
  return sub_1000082A4;
}

uint64_t sub_10000DC94(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10000215C(&qword_10007ABE0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10001141C, v5, v3);
}

void sub_10000DCF4(uint64_t a1, char a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10000DD3C@<X0>(uint64_t a1@<X0>, char a2@<W2>, uint64_t a3@<X3>, char *a4@<X8>)
{
  sub_10000DDB4(a1 + 10, 0x8000000100066A30, a2, a3, a4);
  return swift_bridgeObjectRelease(0x8000000100066A30);
}

uint64_t sub_10000DDB4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  Class isa;
  id v23;
  void *v24;
  uint64_t v25;
  id v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t *v32;
  id v33;
  NSString v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  void (*v60)(char *, uint64_t, uint64_t, uint64_t);
  void (*v61)(char *, char *, uint64_t);
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[3];
  char v73[16];
  char v74[24];
  _OWORD v75[3];
  __int128 v76;
  __int128 v77;

  v10 = type metadata accessor for Logger(0);
  v70 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v69 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Optional(0, a4);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v64 - v15;
  v71 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(v14);
  v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    if (a3 == 1)
    {
      v66 = v10;
      v68 = a5;
      v67 = a4;
      v19 = (void *)objc_opt_self(CBController);
      v20 = sub_10000215C((uint64_t *)&unk_10007B630);
      v21 = swift_allocObject(v20, 48, 7);
      *(_OWORD *)(v21 + 16) = xmmword_1000606F0;
      *(_QWORD *)(v21 + 32) = a1;
      *(_QWORD *)(v21 + 40) = a2;
      swift_bridgeObjectRetain(a2);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v21);
      *(_QWORD *)&v75[0] = 0;
      v23 = objc_msgSend(v19, "readPrefKeys:error:", isa, v75);

      v24 = *(void **)&v75[0];
      if (v23)
      {
        v25 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
        v26 = v24;

        *(_QWORD *)&v76 = a1;
        *((_QWORD *)&v76 + 1) = a2;
        swift_bridgeObjectRetain(a2);
        AnyHashable.init<A>(_:)(&v76, &type metadata for String, &protocol witness table for String);
        v27 = v68;
        if (*(_QWORD *)(v25 + 16))
        {
          v28 = sub_1000069E8((uint64_t)v75);
          v29 = v67;
          v30 = v71;
          if ((v31 & 1) != 0)
          {
            sub_100002D98(*(_QWORD *)(v25 + 56) + 32 * v28, (uint64_t)&v76);
          }
          else
          {
            v76 = 0u;
            v77 = 0u;
          }
        }
        else
        {
          v76 = 0u;
          v77 = 0u;
          v29 = v67;
          v30 = v71;
        }
        swift_bridgeObjectRelease(v25);
        sub_100006C18((uint64_t)v75);
        v58 = sub_10000215C(&qword_10007BE80);
        v59 = swift_dynamicCast(v16, &v76, v58, v29, 6);
        v60 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
        if ((v59 & 1) != 0)
        {
          v60(v16, 0, 1, v29);
          v61 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
          v61(v18, v16, v29);
          v61(v27, v18, v29);
          v62 = v27;
          v63 = 0;
        }
        else
        {
          v60(v16, 1, 1, v29);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
          v62 = v27;
          v63 = 1;
        }
        return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v62, v63, 1, v29);
      }
      else
      {
        v41 = *(id *)&v75[0];
        v42 = _convertNSErrorToError(_:)(v24);

        swift_willThrow();
        v43 = sub_1000308B4();
        v44 = v70;
        v45 = v69;
        v46 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v43, v66);
        swift_bridgeObjectRetain(a2);
        swift_errorRetain(v42);
        swift_bridgeObjectRetain(a2);
        v47 = swift_errorRetain(v42);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.error.getter();
        v50 = os_log_type_enabled(v48, v49);
        v51 = v68;
        if (v50)
        {
          v52 = swift_slowAlloc(22, -1);
          v65 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v75[0] = v65;
          *(_DWORD *)v52 = 136315394;
          swift_bridgeObjectRetain(a2);
          *(_QWORD *)&v76 = sub_100002CA8(a1, a2, (uint64_t *)v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, (char *)&v76 + 8, v52 + 4, v52 + 12);
          swift_bridgeObjectRelease_n(a2, 3);
          *(_WORD *)(v52 + 12) = 2080;
          swift_getErrorValue(v42, v73, v72);
          v53 = Error.localizedDescription.getter(v72[1], v72[2]);
          v55 = v54;
          *(_QWORD *)&v76 = sub_100002CA8(v53, v54, (uint64_t *)v75);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, (char *)&v76 + 8, v52 + 14, v52 + 22);
          v56 = v55;
          v51 = v68;
          swift_bridgeObjectRelease(v56);
          swift_errorRelease(v42);
          swift_errorRelease(v42);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to get value for key: %s due to: %s", (uint8_t *)v52, 0x16u);
          v57 = v65;
          swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1, -1);
          swift_slowDealloc(v52, -1, -1);

          swift_errorRelease(v42);
        }
        else
        {
          swift_errorRelease(v42);
          swift_bridgeObjectRelease_n(a2, 2);
          swift_errorRelease(v42);
          swift_errorRelease(v42);

        }
        (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
        return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56))(v51, 1, 1, v67);
      }
    }
    v33 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "valueForKey:", v34);
  }
  else
  {
    v32 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess(v32, v74, 0, 0);
    v33 = (id)*v32;
    v34 = String._bridgeToObjectiveC()();
    v35 = objc_msgSend(v33, "objectForKey:", v34);
  }
  v36 = v35;

  if (v36)
  {
    _bridgeAnyObjectToAny(_:)(&v76, v36);
    swift_unknownObjectRelease(v36);
    sub_100006C4C(&v76, v75);
  }
  else
  {
    memset(v75, 0, 32);
  }
  v37 = v71;
  v38 = sub_10000215C(&qword_10007BE80);
  v39 = swift_dynamicCast(a5, v75, v38, a4, 6);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(a5, v39 ^ 1u, 1, a4);
}

void sub_10000E484(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  _QWORD v8[9];

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  if (a1)
  {
    if (a1 == 1)
    {
      v5 = sub_10000215C((uint64_t *)&unk_10007B630);
      *(_OWORD *)(swift_allocObject(v5, 48, 7) + 16) = xmmword_1000606F0;
      __asm { BR              X10 }
    }
    v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    __asm { BR              X10 }
  }
  v6 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v6, v8, 0, 0);
  __asm { BR              X11 }
}

void sub_10000E634()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A30);
  objc_msgSend(v0, "BOOLForKey:", v1);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 19;
  *(_QWORD *)(v0 + 40) = 0x8000000100066A60;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 168) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 168);

  v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000E758);
}

void sub_10000E654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 7;
  *(_QWORD *)(v0 + 40) = 0x8000000100066A90;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 168) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 168);

  v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000E758);
}

void sub_10000E664()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = 0x8000000100066AC0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 168) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 168);

  v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000E758);
}

void sub_10000E670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 7;
  *(_QWORD *)(v0 + 40) = 0x8000000100066AE0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 168) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 168);

  v7 = *(void **)(v3 - 168);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000E758);
}

void sub_10000E680()
{
  JUMPOUT(0x10000E68CLL);
}

void sub_10000E748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 224) = v2 + 10;
  *(_QWORD *)(v3 - 216) = 0x8000000100066A30;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 168), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 128);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 168);
  if (*(_QWORD *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6) & 1) != 0)
      JUMPOUT(0x10000EBD0);
  }
  else
  {
    sub_10000BCBC(v3 - 128, &qword_10007BE80);
  }
  JUMPOUT(0x10000EBCCLL);
}

void sub_10000E818()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 128) = sub_100002CA8(v1 + 10, 0x8000000100066A30, (uint64_t *)(v4 - 168));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A30);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  v7 = v6;
  *(_QWORD *)(v4 - 128) = sub_100002CA8(v5, v6, (uint64_t *)(v4 - 168));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 228), "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 240);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBBCLL);
}

void sub_10000E848(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A60);
  objc_msgSend(v1, "BOOLForKey:", v2);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E858(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A90);
  objc_msgSend(v1, "BOOLForKey:", v2);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E868(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AC0);
  objc_msgSend(v1, "BOOLForKey:", v2);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E874(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AE0);
  objc_msgSend(v1, "BOOLForKey:", v2);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E884()
{
  JUMPOUT(0x10000E890);
}

void sub_10000E8DC()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A60);
  objc_msgSend(v0, "BOOLForKey:", v1);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E8EC()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A90);
  objc_msgSend(v0, "BOOLForKey:", v1);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E8FC()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AC0);
  objc_msgSend(v0, "BOOLForKey:", v1);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E908()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AE0);
  objc_msgSend(v0, "BOOLForKey:", v1);

  JUMPOUT(0x10000EBD0);
}

void sub_10000E918()
{
  JUMPOUT(0x10000E924);
}

void sub_10000E968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 224) = v2 + 19;
  *(_QWORD *)(v3 - 216) = 0x8000000100066A60;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 168), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 128);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 168);
  if (*(_QWORD *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6) & 1) != 0)
      JUMPOUT(0x10000EBD0);
  }
  else
  {
    sub_10000BCBC(v3 - 128, &unk_10007BE80);
  }
  JUMPOUT(0x10000EBCCLL);
}

void sub_10000E978()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 224) = v2 + 7;
  *(_QWORD *)(v3 - 216) = 0x8000000100066A90;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 168), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 128);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 168);
  if (*(_QWORD *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6) & 1) != 0)
      JUMPOUT(0x10000EBD0);
  }
  else
  {
    sub_10000BCBC(v3 - 128, &unk_10007BE80);
  }
  JUMPOUT(0x10000EBCCLL);
}

void sub_10000E988()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 224) = v2;
  *(_QWORD *)(v3 - 216) = 0x8000000100066AC0;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 168), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 128);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 168);
  if (*(_QWORD *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6) & 1) != 0)
      JUMPOUT(0x10000EBD0);
  }
  else
  {
    sub_10000BCBC(v3 - 128, &unk_10007BE80);
  }
  JUMPOUT(0x10000EBCCLL);
}

void sub_10000E994()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 224) = v2 + 7;
  *(_QWORD *)(v3 - 216) = 0x8000000100066AE0;
  AnyHashable.init<A>(_:)(v3 - 224, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 168), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 128);
  }
  else
  {
    *(_OWORD *)(v3 - 128) = 0u;
    *(_OWORD *)(v3 - 112) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 168);
  if (*(_QWORD *)(v3 - 104))
  {
    if ((swift_dynamicCast(v3 - 224, v3 - 128, v0 + 8, &type metadata for Bool, 6) & 1) != 0)
      JUMPOUT(0x10000EBD0);
  }
  else
  {
    sub_10000BCBC(v3 - 128, &unk_10007BE80);
  }
  JUMPOUT(0x10000EBCCLL);
}

void sub_10000E9A4()
{
  JUMPOUT(0x10000E9B0);
}

void sub_10000EA5C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 128) = sub_100002CA8(v1 + 19, 0x8000000100066A60, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A60);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  v7 = v6;
  *(_QWORD *)(v4 - 128) = sub_100002CA8(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 228), "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 240);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBBCLL);
}

void sub_10000EA6C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 128) = sub_100002CA8(v1 + 7, 0x8000000100066A90, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A90);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  v7 = v6;
  *(_QWORD *)(v4 - 128) = sub_100002CA8(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 228), "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 240);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBBCLL);
}

void sub_10000EA7C()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 128) = sub_100002CA8(v1, 0x8000000100066AC0, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066AC0);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  v7 = v6;
  *(_QWORD *)(v4 - 128) = sub_100002CA8(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 228), "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 240);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBBCLL);
}

void sub_10000EA88()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 128) = sub_100002CA8(v1 + 7, 0x8000000100066AE0, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066AE0);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 184, v4 - 208);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 200), *(_QWORD *)(v4 - 192));
  v7 = v6;
  *(_QWORD *)(v4 - 128) = sub_100002CA8(v5, v6, v4 - 168);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 128, v4 - 120, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 228), "Unable to get BOOL for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 240);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000EBBCLL);
}

void sub_10000EA98()
{
  JUMPOUT(0x10000EAA4);
}

void sub_10000EC9C(char a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  _QWORD v8[9];

  v4 = type metadata accessor for Logger(0);
  __chkstk_darwin(v4);
  if (a1)
  {
    if (a1 == 1)
    {
      v5 = sub_10000215C((uint64_t *)&unk_10007B630);
      *(_OWORD *)(swift_allocObject(v5, 48, 7) + 16) = xmmword_1000606F0;
      __asm { BR              X10 }
    }
    v7 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    __asm { BR              X10 }
  }
  v6 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
  swift_beginAccess(v6, v8, 0, 0);
  __asm { BR              X11 }
}

void sub_10000EE50()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A30);
  objc_msgSend(v0, "doubleForKey:", v1);

  JUMPOUT(0x10000F178);
}

void sub_10000EE60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 19;
  *(_QWORD *)(v0 + 40) = 0x8000000100066A60;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 184) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 184);

  v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000EF74);
}

void sub_10000EE70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 7;
  *(_QWORD *)(v0 + 40) = 0x8000000100066A90;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 184) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 184);

  v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000EF74);
}

void sub_10000EE80()
{
  uint64_t v0;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v2;
  *(_QWORD *)(v0 + 40) = 0x8000000100066AC0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 184) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 184);

  v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000EF74);
}

void sub_10000EE8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  void *v4;
  Class isa;
  id v6;
  void *v7;
  id v8;

  v4 = (void *)objc_opt_self(CBController);
  *(_QWORD *)(v0 + 32) = v1 + 7;
  *(_QWORD *)(v0 + 40) = 0x8000000100066AE0;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v0);
  *(_QWORD *)(v3 - 184) = 0;
  v6 = objc_msgSend(v4, "readPrefKeys:error:", isa, v3 - 184);

  v7 = *(void **)(v3 - 184);
  if (v6)
  {
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v6, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v8 = v7;

    __asm { BR              X11 }
  }
  JUMPOUT(0x10000EF74);
}

void sub_10000EE9C()
{
  JUMPOUT(0x10000EEA8);
}

void sub_10000EF64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 240) = v2 + 10;
  *(_QWORD *)(v3 - 232) = 0x8000000100066A30;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 184), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 144);
  }
  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 184);
  if (*(_QWORD *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6) & 1) != 0)
      JUMPOUT(0x10000F3E8);
  }
  else
  {
    sub_10000BCBC(v3 - 144, &qword_10007BE80);
  }
  JUMPOUT(0x10000F3E4);
}

void sub_10000F034()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 144) = sub_100002CA8(v1 + 10, 0x8000000100066A30, (uint64_t *)(v4 - 184));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A30);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208));
  v7 = v6;
  *(_QWORD *)(v4 - 144) = sub_100002CA8(v5, v6, (uint64_t *)(v4 - 184));
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 244), "Unable to get double for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 256);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000F3D4);
}

void sub_10000F064(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A60);
  objc_msgSend(v1, "doubleForKey:", v2);

  JUMPOUT(0x10000F178);
}

void sub_10000F074(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A90);
  objc_msgSend(v1, "doubleForKey:", v2);

  JUMPOUT(0x10000F178);
}

void sub_10000F084(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AC0);
  objc_msgSend(v1, "doubleForKey:", v2);

  JUMPOUT(0x10000F178);
}

void sub_10000F090(void *a1@<X8>)
{
  id v1;
  NSString v2;

  v1 = a1;
  v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AE0);
  objc_msgSend(v1, "doubleForKey:", v2);

  JUMPOUT(0x10000F178);
}

void sub_10000F0A0()
{
  JUMPOUT(0x10000F0ACLL);
}

void sub_10000F0F4()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A60);
  objc_msgSend(v0, "doubleForKey:", v1);

  JUMPOUT(0x10000F178);
}

void sub_10000F104()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066A90);
  objc_msgSend(v0, "doubleForKey:", v1);

  JUMPOUT(0x10000F178);
}

void sub_10000F114()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AC0);
  objc_msgSend(v0, "doubleForKey:", v1);

  JUMPOUT(0x10000F178);
}

void sub_10000F120()
{
  void *v0;
  NSString v1;

  v1 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(0x8000000100066AE0);
  objc_msgSend(v0, "doubleForKey:", v1);

  JUMPOUT(0x10000F178);
}

void sub_10000F130()
{
  JUMPOUT(0x10000F13CLL);
}

void sub_10000F180()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 240) = v2 + 19;
  *(_QWORD *)(v3 - 232) = 0x8000000100066A60;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 184), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 144);
  }
  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 184);
  if (*(_QWORD *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6) & 1) != 0)
      JUMPOUT(0x10000F3E8);
  }
  else
  {
    sub_10000BCBC(v3 - 144, &unk_10007BE80);
  }
  JUMPOUT(0x10000F3E4);
}

void sub_10000F190()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 240) = v2 + 7;
  *(_QWORD *)(v3 - 232) = 0x8000000100066A90;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 184), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 144);
  }
  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 184);
  if (*(_QWORD *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6) & 1) != 0)
      JUMPOUT(0x10000F3E8);
  }
  else
  {
    sub_10000BCBC(v3 - 144, &unk_10007BE80);
  }
  JUMPOUT(0x10000F3E4);
}

void sub_10000F1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 240) = v2;
  *(_QWORD *)(v3 - 232) = 0x8000000100066AC0;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 184), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 144);
  }
  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 184);
  if (*(_QWORD *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6) & 1) != 0)
      JUMPOUT(0x10000F3E8);
  }
  else
  {
    sub_10000BCBC(v3 - 144, &unk_10007BE80);
  }
  JUMPOUT(0x10000F3E4);
}

void sub_10000F1AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  *(_QWORD *)(v3 - 240) = v2 + 7;
  *(_QWORD *)(v3 - 232) = 0x8000000100066AE0;
  AnyHashable.init<A>(_:)(v3 - 240, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v1 + 16) && (v4 = sub_1000069E8(v3 - 184), (v5 & 1) != 0))
  {
    sub_100002D98(*(_QWORD *)(v1 + 56) + 32 * v4, v3 - 144);
  }
  else
  {
    *(_OWORD *)(v3 - 144) = 0u;
    *(_OWORD *)(v3 - 128) = 0u;
  }
  swift_bridgeObjectRelease(v1);
  sub_100006C18(v3 - 184);
  if (*(_QWORD *)(v3 - 120))
  {
    if ((swift_dynamicCast(v3 - 240, v3 - 144, v0 + 8, &type metadata for Double, 6) & 1) != 0)
      JUMPOUT(0x10000F3E8);
  }
  else
  {
    sub_10000BCBC(v3 - 144, &unk_10007BE80);
  }
  JUMPOUT(0x10000F3E4);
}

void sub_10000F1BC()
{
  JUMPOUT(0x10000F1C8);
}

void sub_10000F274()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 144) = sub_100002CA8(v1 + 19, 0x8000000100066A60, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A60);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208));
  v7 = v6;
  *(_QWORD *)(v4 - 144) = sub_100002CA8(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 244), "Unable to get double for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 256);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000F3D4);
}

void sub_10000F284()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 144) = sub_100002CA8(v1 + 7, 0x8000000100066A90, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066A90);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208));
  v7 = v6;
  *(_QWORD *)(v4 - 144) = sub_100002CA8(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 244), "Unable to get double for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 256);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000F3D4);
}

void sub_10000F294()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 144) = sub_100002CA8(v1, 0x8000000100066AC0, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066AC0);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208));
  v7 = v6;
  *(_QWORD *)(v4 - 144) = sub_100002CA8(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 244), "Unable to get double for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 256);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000F3D4);
}

void sub_10000F2A0()
{
  NSObject *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 144) = sub_100002CA8(v1 + 7, 0x8000000100066AE0, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 4, v3 + 12);
  swift_bridgeObjectRelease(0x8000000100066AE0);
  *(_WORD *)(v3 + 12) = 2080;
  swift_getErrorValue(v2, v4 - 200, v4 - 224);
  v5 = Error.localizedDescription.getter(*(_QWORD *)(v4 - 216), *(_QWORD *)(v4 - 208));
  v7 = v6;
  *(_QWORD *)(v4 - 144) = sub_100002CA8(v5, v6, v4 - 184);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v4 - 144, v4 - 136, v3 + 14, v3 + 22);
  swift_bridgeObjectRelease(v7);
  swift_errorRelease(v2);
  swift_errorRelease(v2);
  _os_log_impl((void *)&_mh_execute_header, v0, (os_log_type_t)*(_DWORD *)(v4 - 244), "Unable to get double for key: %s due to: %s", (uint8_t *)v3, 0x16u);
  v8 = *(_QWORD *)(v4 - 256);
  swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v8, -1, -1);
  swift_slowDealloc(v3, -1, -1);

  swift_errorRelease(v2);
  JUMPOUT(0x10000F3D4);
}

void sub_10000F2B0()
{
  JUMPOUT(0x10000F2BCLL);
}

void sub_10000F4B8(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10000F508()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;

  v3 = v2 + 10;
  v4 = *(_QWORD *)(v0 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain(v0);
    for (i = 0; i != v4; ++i)
    {
      v6 = v0 + i;
      sub_1000102E8(*(_BYTE *)(v6 + 32), v3, 0x8000000100066A30, v1);
    }
    swift_bridgeObjectRelease(0x8000000100066A30);
    v7 = v0;
  }
  else
  {
    v7 = 0x8000000100066A30;
  }
  return swift_bridgeObjectRelease(v7);
}

void sub_10000F5CC(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10000F610(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1000102E8(a1, a2 + 10, 0x8000000100066A30, a4);
  return swift_bridgeObjectRelease(0x8000000100066A30);
}

unint64_t sub_10000F688(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000215C(&qword_10007C150);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001128C(v7, (uint64_t)v16, &qword_10007C1C0);
    result = sub_1000069E8((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_100006C4C(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10000F7C8(char *a1)
{
  sub_10000BD3C(*a1);
}

void sub_10000F7D4()
{
  char *v0;

  sub_10000C174(0, *v0);
}

void sub_10000F7E0(uint64_t a1)
{
  char *v1;

  sub_10000C00C(a1, *v1);
}

void sub_10000F7E8(uint64_t a1)
{
  char *v1;

  sub_10000C174(a1, *v1);
}

unint64_t sub_10000F7F0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100010D28(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10000F81C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10000C6C4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10000F844(_QWORD *a1@<X8>)
{
  *a1 = &off_100071A10;
}

_QWORD *sub_10000F854(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000215C((uint64_t *)&unk_10007B630);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000100DC(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_10000F960(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007ADA0);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007ABE0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007ABE0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000101CC(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

uint64_t sub_10000FB70(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10000FBA8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10000FB8C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10000FD10(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10000FBA8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000215C((uint64_t *)&unk_10007B630);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10000FD10(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007ADA0);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007ABE0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007ABE0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unint64_t sub_10000FEF8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071980, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10000FF40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10000D5F0(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10000FF68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = sub_10000215C(&qword_10007ABE0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = (_QWORD *)(v0 + v4);
  sub_100002D78(v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100010010(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007ABE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100010058()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000215C(&qword_10007ABE0) - 8) + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = v0 + ((v1 + 24) & ~v1);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 144))();
  v7[2] = v3;
  v5 = sub_10000D9E8((uint64_t (*)(char *))sub_1000112D0, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 152))(v5);
}

uint64_t sub_1000100DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000101CC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_10000215C(&qword_10007ABE0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_1000102E8(char a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  NSString v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  id v24;
  uint64_t v25;
  _BYTE *v26;
  void *v27;
  id v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  uint64_t v34;
  id v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  id v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  id v55;
  NSString v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  id *v70;
  uint64_t v71;
  id v72;
  NSString v73;
  uint64_t v74;
  uint64_t inited;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  Class isa;
  NSString v81;
  id v82;
  _BYTE v83[4];
  int v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  __int128 v88;
  unsigned int v89;
  _BYTE v90[8];
  uint64_t v91;
  uint64_t v92;
  _BYTE v93[16];
  uint64_t v94;
  _BYTE v95[104];
  _BYTE v96[24];
  __int128 v97;
  uint64_t v98;
  __int128 v99;
  uint64_t v100;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = &v83[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  v14 = &v83[-v13];
  if (a1)
  {
    if (a1 == 1)
    {
      v15 = String._bridgeToObjectiveC()();
      sub_10001128C(a4, (uint64_t)&v97, &qword_10007BE80);
      if (v98)
      {
        sub_100006C4C(&v97, &v99);
      }
      else
      {
        v35 = objc_msgSend(objc_allocWithZone((Class)NSNull), "init");
        v100 = sub_100011254(0, &qword_10007AD90, NSNull_ptr);
        *(_QWORD *)&v99 = v35;
        sub_10000BCBC((uint64_t)&v97, &qword_10007BE80);
      }
      v36 = (void *)objc_opt_self(CBController);
      v37 = v100;
      v38 = sub_1000096E4(&v99, v100);
      v39 = _bridgeAnythingToObjectiveC<A>(_:)(v38, v37);
      sub_100002D78(&v99);
      *(_QWORD *)&v99 = 0;
      LODWORD(v36) = objc_msgSend(v36, "writePrefKey:value:error:", v15, v39, &v99);

      swift_unknownObjectRelease(v39);
      v40 = (id)v99;
      if ((_DWORD)v36)
      {
        notify_post("com.apple.bluetooth.prefsChanged");
      }
      else
      {
        v41 = v40;
        v42 = _convertNSErrorToError(_:)(v40);

        swift_willThrow();
        v43 = sub_1000308B4();
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, v43, v8);
        swift_bridgeObjectRetain(a3);
        swift_errorRetain(v42);
        swift_bridgeObjectRetain(a3);
        v44 = swift_errorRetain(v42);
        v45 = Logger.logObject.getter(v44);
        v46 = v9;
        v47 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v45, v47))
        {
          v48 = swift_slowAlloc(22, -1);
          *(_QWORD *)&v88 = v8;
          v49 = v48;
          v50 = a2;
          v51 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v99 = v51;
          *(_DWORD *)v49 = 136315394;
          v87 = v46;
          swift_bridgeObjectRetain(a3);
          *(_QWORD *)&v97 = sub_100002CA8(v50, a3, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v49 + 4, v49 + 12);
          swift_bridgeObjectRelease_n(a3, 3);
          *(_WORD *)(v49 + 12) = 2080;
          swift_getErrorValue(v42, v93, v90);
          v52 = Error.localizedDescription.getter(v91, v92);
          v54 = v53;
          *(_QWORD *)&v97 = sub_100002CA8(v52, v53, (uint64_t *)&v99);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v49 + 14, v49 + 22);
          swift_bridgeObjectRelease(v54);
          swift_errorRelease(v42);
          swift_errorRelease(v42);
          _os_log_impl((void *)&_mh_execute_header, v45, v47, "Unable to get value for key: %s due to: %s", (uint8_t *)v49, 0x16u);
          swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1, -1);
          swift_slowDealloc(v49, -1, -1);

          swift_errorRelease(v42);
          (*(void (**)(_BYTE *, _QWORD))(v87 + 8))(v12, v88);
        }
        else
        {
          swift_errorRelease(v42);
          swift_bridgeObjectRelease_n(a3, 2);
          swift_errorRelease(v42);
          swift_errorRelease(v42);

          (*(void (**)(_BYTE *, uint64_t))(v46 + 8))(v12, v8);
        }
      }
    }
    else
    {
      v27 = (void *)objc_opt_self(NSUserDefaults);
      v28 = objc_msgSend(v27, "standardUserDefaults");
      sub_10001128C(a4, (uint64_t)&v99, &qword_10007BE80);
      v29 = v100;
      if (v100)
      {
        v30 = sub_1000096E4(&v99, v100);
        v31 = *(_QWORD *)(v29 - 8);
        __chkstk_darwin(v30);
        v33 = &v83[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(_BYTE *))(v31 + 16))(v33);
        v34 = _bridgeAnythingToObjectiveC<A>(_:)(v33, v29);
        (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v33, v29);
        sub_100002D78(&v99);
      }
      else
      {
        v34 = 0;
      }
      v81 = String._bridgeToObjectiveC()();
      objc_msgSend(v28, "setValue:forKey:", v34, v81);

      swift_unknownObjectRelease(v34);
      v82 = objc_msgSend(v27, "standardUserDefaults");
      objc_msgSend(v82, "synchronize");

    }
  }
  else
  {
    v87 = v9;
    *(_QWORD *)&v88 = v8;
    v16 = NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor();
    swift_beginAccess(v16, v96, 0, 0);
    v86 = v16;
    v17 = (void *)*v16;
    sub_10001128C(a4, (uint64_t)&v99, &qword_10007BE80);
    v18 = v100;
    if (v100)
    {
      v19 = sub_1000096E4(&v99, v100);
      v20 = *(_QWORD *)(v18 - 8);
      __chkstk_darwin(v19);
      v22 = a2;
      v23 = &v83[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
      (*(void (**)(_BYTE *))(v20 + 16))(v23);
      v24 = v17;
      v25 = _bridgeAnythingToObjectiveC<A>(_:)(v23, v18);
      v26 = v23;
      a2 = v22;
      (*(void (**)(_BYTE *, uint64_t))(v20 + 8))(v26, v18);
      sub_100002D78(&v99);
    }
    else
    {
      v55 = v17;
      v25 = 0;
    }
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v17, "setObject:forKey:", v25, v56);

    swift_unknownObjectRelease(v25);
    v57 = sub_1000308B4();
    v58 = v87;
    v59 = v88;
    (*(void (**)(_BYTE *, uint64_t, _QWORD))(v87 + 16))(v14, v57, v88);
    sub_10001128C(a4, (uint64_t)&v99, &qword_10007BE80);
    v60 = swift_bridgeObjectRetain_n(a3, 2);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.default.getter();
    v63 = v62;
    if (os_log_type_enabled(v61, v62))
    {
      v64 = swift_slowAlloc(28, -1);
      v84 = v63;
      v65 = v64;
      v85 = swift_slowAlloc(64, -1);
      v94 = v85;
      *(_DWORD *)v65 = 136315650;
      swift_bridgeObjectRetain(a3);
      *(_QWORD *)&v97 = sub_100002CA8(a2, a3, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v65 + 12) = 2080;
      sub_10001128C((uint64_t)&v99, (uint64_t)&v97, &qword_10007BE80);
      v66 = sub_10000215C(&qword_10007BE80);
      v67 = String.init<A>(describing:)(&v97, v66);
      v69 = v68;
      *(_QWORD *)&v97 = sub_100002CA8(v67, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease(v69);
      sub_10000BCBC((uint64_t)&v99, &qword_10007BE80);
      *(_WORD *)(v65 + 22) = 1024;
      v70 = (id *)v86;
      swift_beginAccess(v86, &v97, 0, 0);
      v89 = objc_msgSend(*v70, "synchronize");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v65 + 24, v65 + 28);
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v84, "Cloud defaults update %s: %s, synchronized: %{BOOL}d", (uint8_t *)v65, 0x1Cu);
      v71 = v85;
      swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      (*(void (**)(_BYTE *, _QWORD))(v87 + 8))(v14, v88);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      sub_10000BCBC((uint64_t)&v99, &qword_10007BE80);

      (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v14, v59);
    }
    v72 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v73 = String._bridgeToObjectiveC()();
    v74 = sub_10000215C(&qword_10007AD98);
    inited = swift_initStackObject(v74, v95);
    v88 = xmmword_1000606F0;
    *(_OWORD *)(inited + 16) = xmmword_1000606F0;
    *(_QWORD *)&v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUbiquitousKeyValueStoreChangedKeysKey);
    *((_QWORD *)&v99 + 1) = v76;
    AnyHashable.init<A>(_:)(&v99, &type metadata for String, &protocol witness table for String);
    v77 = sub_10000215C((uint64_t *)&unk_10007B630);
    v78 = swift_allocObject(v77, 48, 7);
    *(_OWORD *)(v78 + 16) = v88;
    *(_QWORD *)(v78 + 32) = a2;
    *(_QWORD *)(v78 + 40) = a3;
    *(_QWORD *)(inited + 96) = sub_10000215C(&qword_10007BDD0);
    *(_QWORD *)(inited + 72) = v78;
    swift_bridgeObjectRetain(a3);
    v79 = sub_10000F688(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v79);
    objc_msgSend(v72, "postNotificationName:object:userInfo:", v73, 0, isa);

  }
}

unint64_t sub_100010D28(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100071A38, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

unint64_t sub_100010D74()
{
  unint64_t result;

  result = qword_10007ABE8;
  if (!qword_10007ABE8)
  {
    result = swift_getWitnessTable(&unk_1000609F4, &type metadata for KeyValueSource);
    atomic_store(result, (unint64_t *)&qword_10007ABE8);
  }
  return result;
}

uint64_t sub_100010DB8()
{
  return sub_1000021DC(&qword_10007ABF0, &qword_10007ABF8, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100010DE8()
{
  unint64_t result;

  result = qword_10007AC30;
  if (!qword_10007AC30)
  {
    result = swift_getWitnessTable(&unk_100060B2C, &type metadata for KeyValueStoreManager.Defaults);
    atomic_store(result, (unint64_t *)&qword_10007AC30);
  }
  return result;
}

uint64_t sub_100010E2C()
{
  return sub_1000021DC(&qword_10007AC38, &qword_10007AC40, (uint64_t)&protocol conformance descriptor for [A]);
}

_BYTE *initializeBufferWithCopyOfBuffer for KeyValueSource(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for KeyValueSource(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyValueSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100010F44 + 4 * byte_1000609E4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100010F78 + 4 * byte_1000609DF[v4]))();
}

uint64_t sub_100010F78(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010F80(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100010F88);
  return result;
}

uint64_t sub_100010F94(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100010F9CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100010FA0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010FA8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100010FB4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_100010FBC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueSource()
{
  return &type metadata for KeyValueSource;
}

uint64_t type metadata accessor for KeyValueStoreManager()
{
  return objc_opt_self(_TtC14bluetoothuserd20KeyValueStoreManager);
}

uint64_t getEnumTagSinglePayload for KeyValueStoreManager.Defaults(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyValueStoreManager.Defaults(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000110D0 + 4 * byte_1000609EE[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100011104 + 4 * byte_1000609E9[v4]))();
}

uint64_t sub_100011104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001110C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100011114);
  return result;
}

uint64_t sub_100011120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100011128);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10001112C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100011134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeyValueStoreManager.Defaults()
{
  return &type metadata for KeyValueStoreManager.Defaults;
}

uint64_t sub_100011150()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100011174()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(v0 + 16);
  v2 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 24) + 144))();
  v3 = *v1;
  *v1 = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_1000111A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000111B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1000111D8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100011200()
{
  uint64_t v0;

  return sub_10000CF60(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_100011210()
{
  unint64_t result;

  result = qword_10007AD88;
  if (!qword_10007AD88)
  {
    result = swift_getWitnessTable(&unk_100060A1C, &type metadata for KeyValueSource);
    atomic_store(result, (unint64_t *)&qword_10007AD88);
  }
  return result;
}

uint64_t sub_100011254(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001128C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000215C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

BOOL sub_1000112D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_10000215C(&qword_10007ABE0);
  v5 = sub_1000021DC(&qword_10007ADA8, &qword_10007ABE0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_100011354(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10000D78C(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_1000113C4(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10000C760(a1, a2, v2);
}

uint64_t sub_1000113D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001141C@<X0>(uint64_t a1@<X8>)
{
  return sub_10000FF40(a1);
}

void *sub_100011438()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for URL(0);
  sub_10002F864(v0, qword_1000809C0);
  v1 = sub_10000255C(v0, (uint64_t)qword_1000809C0);
  type metadata accessor for UserFileManager();
  return sub_100036A3C(v1);
}

uint64_t sub_100011490()
{
  uint64_t *v0;
  Swift::String v1;
  uint64_t v2;
  void *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  Swift::String v12;
  void *object;

  _StringGuts.grow(_:)(78);
  v1._countAndFlagsBits = 0xD000000000000025;
  v1._object = (void *)0x8000000100066C40;
  String.append(_:)(v1);
  v2 = *v0;
  v3 = (void *)v0[1];
  swift_bridgeObjectRetain(v3);
  v4._countAndFlagsBits = v2;
  v4._object = v3;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5._object = (void *)0x8000000100066C70;
  v5._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v5);
  v6 = v0[2];
  v7 = (void *)v0[3];
  swift_bridgeObjectRetain(v7);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 0x4449656E6F7A202CLL;
  v9._object = (void *)0xEB00000000203A73;
  String.append(_:)(v9);
  v10 = v0[4];
  v11 = swift_bridgeObjectRetain(v10);
  v12._countAndFlagsBits = Array.description.getter(v11, &type metadata for String);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(v10);
  swift_bridgeObjectRelease(object);
  return 0;
}

uint64_t sub_1000115C0(char a1)
{
  if (!a1)
    return 0x696669746E656469;
  if (a1 == 1)
    return 0xD000000000000013;
  return 0x734449656E6F7ALL;
}

uint64_t sub_100011628()
{
  char *v0;

  return sub_1000115C0(*v0);
}

uint64_t sub_100011630@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000299CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100011654()
{
  return 0;
}

void sub_100011660(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10001166C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100011834();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100011694(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100011834();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000116BC(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  char v22;
  char v23;

  v3 = v1;
  v5 = sub_10000215C((uint64_t *)&unk_10007ADC0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000096E4(a1, v9);
  v11 = sub_100011834();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudStorageCoordinatorConfiguration.CodingKeys, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys, v11, v9, v10);
  v12 = *v3;
  v13 = v3[1];
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    v14 = v3[2];
    v15 = v3[3];
    v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v22, v5);
    v21 = v3[4];
    v20 = 2;
    v16 = sub_10000215C(&qword_10007BDD0);
    v17 = sub_10002F804((unint64_t *)&unk_10007ADD0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100011834()
{
  unint64_t result;

  result = qword_10007D8F8;
  if (!qword_10007D8F8)
  {
    result = swift_getWitnessTable(&unk_100061190, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007D8F8);
  }
  return result;
}

uint64_t sub_100011878@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t sub_100011888@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[24];

  if (qword_10007D8F0 != -1)
    swift_once(&qword_10007D8F0, sub_100011438);
  v2 = type metadata accessor for URL(0);
  v3 = sub_10000255C(v2, (uint64_t)qword_1000809C0);
  swift_beginAccess(v3, v5, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

double sub_100011924@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_100029B18(a1, (uint64_t *)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100011968(_QWORD *a1)
{
  return sub_1000116BC(a1);
}

BOOL sub_10001198C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_1000119A0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000119E4()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100011A0C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100011A4C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  swift_beginAccess(v1 + 2, v9, 0, 0);
  v4 = v1[2];
  v3 = v1[3];
  v5 = v1[4];
  v6 = v1[5];
  v7 = v1[6];
  *a1 = v4;
  a1[1] = v3;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v6);
  return swift_bridgeObjectRetain(v7);
}

_QWORD *sub_100011AB8(__int128 *a1)
{
  uint64_t v1;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  v3 = *a1;
  v11 = a1[1];
  v12 = v3;
  v10 = *((_QWORD *)a1 + 4);
  swift_beginAccess(v1 + 16, &v9, 1, 0);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = *(_QWORD *)(v1 + 48);
  v7 = a1[1];
  *(_OWORD *)(v1 + 16) = *a1;
  *(_OWORD *)(v1 + 32) = v7;
  *(_QWORD *)(v1 + 48) = *((_QWORD *)a1 + 4);
  sub_100004458((uint64_t)&v12);
  sub_100004458((uint64_t)&v11);
  sub_100029D8C(&v10);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  sub_100029DB4((uint64_t)&v12);
  sub_100029DB4((uint64_t)&v11);
  return sub_100029DDC(&v10);
}

uint64_t sub_100011B70()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 80));
}

uint64_t sub_100011BA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 80, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100011BE8(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_100011C24()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  NSString v5;
  id v6;
  void *v7;
  id v8;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v1 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v0 + 256))(&v10);
    v4 = v11;
    v14 = v10;
    sub_100029DB4((uint64_t)&v14);
    v13 = v12;
    sub_100029DDC(&v13);
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v6 = objc_msgSend((id)objc_opt_self(CKContainer), "containerWithIdentifier:", v5);

    v7 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v8 = v2;
  return v3;
}

id sub_100011D04()
{
  return sub_100011DB8(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup);
}

id sub_100011D28()
{
  return sub_100011DB8(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup);
}

id sub_100011D4C()
{
  return sub_100011DB8(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup);
}

id sub_100011D70()
{
  return sub_100011DB8(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup);
}

id sub_100011D94()
{
  return sub_100011DB8(&OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup);
}

id sub_100011DB8(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  id v5;
  NSString v6;
  void *v7;
  id v8;

  v2 = *a1;
  v3 = *(void **)(v1 + *a1);
  if (v3)
  {
    v4 = *(id *)(v1 + *a1);
  }
  else
  {
    v5 = objc_msgSend(objc_allocWithZone((Class)CKOperationGroup), "init");
    v6 = String._bridgeToObjectiveC()();
    objc_msgSend(v5, "setName:", v6);

    v7 = *(void **)(v1 + v2);
    *(_QWORD *)(v1 + v2) = v5;
    v4 = v5;

    v3 = 0;
  }
  v8 = v3;
  return v4;
}

uint64_t sub_100011E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *v5;
  char v6;
  uint64_t result;
  _BYTE v8[16];

  v1 = type metadata accessor for DispatchPredicate(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = *(void **)(v0 + 56);
  *v4 = v5;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.notOnQueue(_:), v1);
  v5;
  v6 = _dispatchPreconditionTest(_:)(v4);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v1);
  if ((v6 & 1) != 0)
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_100029E04, v0, &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState);
    return v8[15];
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100011F40(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  char isEscapingClosureAtFileLocation;
  _QWORD aBlock[5];
  uint64_t v17;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = *(void **)(v1 + 56);
  *v6 = v7;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  v8 = v7;
  v9 = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v11 = swift_allocObject(&unk_100071E60, 25, 7);
  *(_QWORD *)(v11 + 16) = v1;
  *(_BYTE *)(v11 + 24) = a1;
  v12 = swift_allocObject(&unk_100071E88, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100029E5C;
  *(_QWORD *)(v12 + 24) = v11;
  aBlock[4] = sub_1000111B8;
  v17 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000D2B0;
  aBlock[3] = &unk_100071EA0;
  v13 = _Block_copy(aBlock);
  v14 = v17;
  swift_retain(v1);
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v8, v13);
  _Block_release(v13);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v12, "", 119, 106, 30, 1);
  swift_release(v11);
  result = swift_release(v12);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
LABEL_5:
    __break(1u);
  return result;
}

uint64_t sub_1000120F8(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_100012134(a1);
  return v3;
}

uint64_t sub_100012134(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _QWORD *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  __int128 *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(char *);
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  _OWORD v72[2];

  v55 = a1;
  v61 = type metadata accessor for URL.DirectoryHint(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61);
  v58 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v62 - 8);
  v2 = __chkstk_darwin(v62);
  v56 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  v57 = (char *)&v51 - v4;
  v5 = type metadata accessor for Logger(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5);
  v65 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7);
  v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v14 = *(_QWORD *)(v13 - 8);
  v64 = v13;
  __chkstk_darwin(v13);
  v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011254(0, (unint64_t *)&qword_10007A900, OS_dispatch_queue_ptr);
  v53 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  v63 = *(uint64_t (**)(char *))(v14 + 104);
  v17 = v63(v16);
  static DispatchQoS.unspecified.getter(v17);
  *(_QWORD *)&v72[0] = _swiftEmptyArrayStorage;
  v18 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v19 = sub_10000215C((uint64_t *)&unk_10007A910);
  v20 = sub_1000021DC((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910, (uint64_t)&protocol conformance descriptor for [A]);
  v52 = v18;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v18);
  v21 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000036, 0x8000000100066C90, v12, v9, v16, 0);
  v22 = v54;
  *(_QWORD *)(v54 + 56) = v21;
  v23 = ((uint64_t (*)(char *, _QWORD, uint64_t))v63)(v16, v53, v64);
  static DispatchQoS.unspecified.getter(v23);
  *(_QWORD *)&v72[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v18);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000038, 0x8000000100066CD0, v12, v9, v16, 0);
  *(_QWORD *)(v22 + 64) = v24;
  static DispatchQoS.unspecified.getter(v24);
  *(_QWORD *)&v72[0] = _swiftEmptyArrayStorage;
  v25 = v22;
  v26 = v55;
  dispatch thunk of SetAlgebra.init<A>(_:)(v72, v19, v20, v7, v52);
  ((void (*)(char *, _QWORD, uint64_t))v63)(v16, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v64);
  *(_QWORD *)(v25 + 72) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x8000000100066D10, v12, v9, v16, 0);
  *(_QWORD *)(v25 + 80) = _swiftEmptyArrayStorage;
  v27 = v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  v28 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
  v29 = v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  v30 = sub_10000215C((uint64_t *)&unk_10007A950);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v29, 1, 1, v30);
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___container) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup) = 0;
  *(_QWORD *)(v25
            + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup) = 0;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus) = 0;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) = 0;
  *(_BYTE *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords) = &_swiftEmptyDictionarySingleton;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = 0;
  *(_QWORD *)(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = 0;
  v31 = sub_100030814();
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v65, v31, v67);
  v32 = *v26;
  v71 = v26[1];
  v72[0] = v32;
  v70 = *((_QWORD *)v26 + 4);
  sub_100004458((uint64_t)v72);
  sub_100004458((uint64_t)&v71);
  sub_100029D8C(&v70);
  sub_100004458((uint64_t)v72);
  sub_100004458((uint64_t)&v71);
  v33 = sub_100029D8C(&v70);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v34, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v69 = v37;
    *(_DWORD *)v36 = 136315138;
    sub_100004458((uint64_t)v72);
    sub_100004458((uint64_t)&v71);
    sub_100029D8C(&v70);
    v38 = sub_100011490();
    v40 = v39;
    sub_100029DB4((uint64_t)v72);
    sub_100029DB4((uint64_t)&v71);
    sub_100029DDC(&v70);
    v68 = sub_100002CA8(v38, v40, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease(v40);
    sub_100029DB4((uint64_t)v72);
    sub_100029DB4((uint64_t)&v71);
    sub_100029DDC(&v70);
    sub_100029DB4((uint64_t)v72);
    sub_100029DB4((uint64_t)&v71);
    sub_100029DDC(&v70);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Initializing CloudStorageCoordinator with %s", v36, 0xCu);
    swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    sub_100029DB4((uint64_t)v72);
    sub_100029DB4((uint64_t)&v71);
    sub_100029DDC(&v70);
    sub_100029DB4((uint64_t)v72);
    sub_100029DB4((uint64_t)&v71);
    sub_100029DDC(&v70);
  }

  (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
  v41 = v26[1];
  *(_OWORD *)(v25 + 16) = *v26;
  *(_OWORD *)(v25 + 32) = v41;
  *(_QWORD *)(v25 + 48) = *((_QWORD *)v26 + 4);
  type metadata accessor for UserFileManager();
  sub_100004458((uint64_t)v72);
  sub_100004458((uint64_t)&v71);
  sub_100029D8C(&v70);
  v42 = v56;
  sub_100036A3C(v56);
  v69 = v72[0];
  v44 = v58;
  v43 = v59;
  v45 = v61;
  (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, enum case for URL.DirectoryHint.isDirectory(_:), v61);
  v46 = sub_100029E94();
  v47 = v57;
  URL.appending<A>(path:directoryHint:)(&v69, v44, &type metadata for String, v46);
  sub_100029DB4((uint64_t)&v71);
  sub_100029DDC(&v70);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  swift_bridgeObjectRelease(*((_QWORD *)&v69 + 1));
  v48 = v60;
  v49 = v62;
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v42, v62);
  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v25 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory, v47, v49);
  return v25;
}

uint64_t sub_100012954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34[6];
  _OWORD v35[2];
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;

  v1 = v0;
  v2 = sub_10000215C((uint64_t *)&unk_10007AE00);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v7 = (char *)&v28 - v6;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = OS_dispatch_queue.sync<A>(execute:)(sub_100029ED8, v0, &type metadata for Bool);
  if ((v35[0] & 1) == 0)
  {
    v13 = sub_100030814();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
    v14 = swift_retain_n(v0, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v34[0] = v31;
      v30 = v17;
      *(_DWORD *)v17 = 136315138;
      v29 = v17 + 4;
      (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v0 + 256))(v35);
      v38 = v35[1];
      v39 = v35[0];
      v37 = v36;
      v18 = sub_100011490();
      v32 = v5;
      v20 = v19;
      sub_100029DB4((uint64_t)&v39);
      sub_100029DB4((uint64_t)&v38);
      sub_100029DDC(&v37);
      v33 = sub_100002CA8(v18, v20, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v29, v17 + 12);
      swift_release_n(v1, 2);
      v21 = v20;
      v5 = v32;
      swift_bridgeObjectRelease(v21);
      v22 = v30;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Activating CloudStorageCoordinator with %s", v30, 0xCu);
      v23 = v31;
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

      swift_release_n(v0, 2);
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    sub_100012F74();
    v24 = (void *)*sub_100006F64();
    v34[3] = type metadata accessor for CloudStorageCoordinator(0);
    v34[4] = (uint64_t)&off_1000720B8;
    v34[0] = v1;
    swift_retain(v1);
    v25 = v24;
    sub_100007B80((uint64_t)v34);

    sub_100002D78(v34);
    v26 = sub_10000215C((uint64_t *)&unk_10007A950);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v7, 0, 1, v26);
    sub_100004064((uint64_t)v7, (uint64_t)v5, (uint64_t *)&unk_10007AE00);
    v27 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
    swift_beginAccess(v27, v34, 33, 0);
    sub_10002F7C0((uint64_t)v5, v27, (uint64_t *)&unk_10007AE00);
    return swift_endAccess(v34);
  }
  return result;
}

uint64_t sub_100012CCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  id v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  id v24;
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = v0;
  v2 = sub_10000215C((uint64_t *)&unk_10007AE00);
  __chkstk_darwin(v2);
  v4 = &v26[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v5 = sub_10000215C((uint64_t *)&unk_10007A950);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = &v26[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10000215C(&qword_10007AAB8);
  __chkstk_darwin(v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = sub_10000215C(&qword_10007AAB0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v16, "removeObserver:", v1);

  v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription, v27, 0, 0);
  sub_10001128C(v17, (uint64_t)v11, &qword_10007AAB8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    v18 = &qword_10007AAB8;
    v19 = (uint64_t)v11;
  }
  else
  {
    sub_100004064((uint64_t)v11, (uint64_t)v15, &qword_10007AAB0);
    v20 = *sub_1000524D0();
    swift_retain(v20);
    sub_1000540AC((uint64_t)v15);
    swift_release(v20);
    v19 = (uint64_t)v15;
    v18 = &qword_10007AAB0;
  }
  sub_10000BCBC(v19, v18);
  v21 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription, v26, 0, 0);
  sub_10001128C(v21, (uint64_t)v4, (uint64_t *)&unk_10007AE00);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    v22 = (uint64_t *)&unk_10007AE00;
    v23 = (uint64_t)v4;
  }
  else
  {
    sub_100004064((uint64_t)v4, (uint64_t)v8, (uint64_t *)&unk_10007A950);
    v24 = (id)*sub_100006F64();
    sub_100007D8C((uint64_t)v8);

    v23 = (uint64_t)v8;
    v22 = (uint64_t *)&unk_10007A950;
  }
  return sub_10000BCBC(v23, v22);
}

uint64_t sub_100012F74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  _QWORD v36[5];

  v1 = v0;
  v2 = sub_10000215C(&qword_10007AAB8);
  v3 = __chkstk_darwin(v2);
  v34 = (uint64_t)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  v33 = (char *)&v32 - v5;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v32 - v11;
  v35 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v13 = sub_10003078C();
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v15 = v14(v12, v13, v6);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Add listener for account change", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  objc_msgSend(v35, "addObserver:selector:name:object:", v1, "accountDidChange:", CKAccountChangedNotification, 0);
  v20 = v14(v10, v13, v6);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Add listener for CKIdentityUpdate", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v19(v10, v6);
  v24 = v35;
  objc_msgSend(v35, "addObserver:selector:name:object:", v1, "accountDidChange:", CKIdentityUpdateNotification, 0);
  v25 = *sub_1000524D0();
  v36[3] = type metadata accessor for CloudStorageCoordinator(0);
  v36[4] = &off_1000720A8;
  v36[0] = v1;
  swift_retain(v25);
  swift_retain(v1);
  v26 = (uint64_t)v33;
  sub_100053EB8((uint64_t)v36);
  swift_release(v25);
  sub_100002D78(v36);
  v27 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 0, 1, v27);
  v28 = v34;
  sub_100004064(v26, v34, &qword_10007AAB8);
  v29 = v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription, v36, 33, 0);
  sub_10002F7C0(v28, v29, &qword_10007AAB8);
  swift_endAccess(v36);
  v30 = type metadata accessor for Transaction();
  __chkstk_darwin(v30);
  *(&v32 - 4) = v1;
  *(&v32 - 3) = (uint64_t)sub_10002E72C;
  *(&v32 - 2) = v1;
  swift_retain(v1);
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37, 2, sub_10002FBF0);

  return swift_release(v1);
}

void sub_100013358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t inited;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(_OWORD *__return_ptr);
  id v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void *v18;
  void *v19;
  uint64_t v20;
  Swift::String v21;
  void *object;
  uint64_t v23;
  void *v24;
  void *v25;
  Swift::String v26;
  Swift::String v27;
  Class isa;
  objc_class *v29;
  Swift::String v30;
  Class v31;
  objc_class *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  Class v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  objc_class *v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  NSString *v70;
  Swift::String v71;
  char v72;
  char v73[40];
  _OWORD v74[2];
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  _QWORD v78[2];
  Swift::OpaquePointer_optional v79;
  Swift::OpaquePointer_optional v80;

  v64 = type metadata accessor for Logger(0);
  v63 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000215C(&qword_10007B2F0);
  inited = swift_initStackObject(v6, v73);
  *(_OWORD *)(inited + 16) = xmmword_100060D20;
  v8 = sub_100011C24();
  v9 = objc_msgSend(v8, "privateCloudDatabase");

  *(_QWORD *)(inited + 32) = v9;
  *(_QWORD *)&v74[0] = inited;
  specialized Array._endMutation()(v10);
  v11 = *(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a2 + 256);
  v62 = a1;
  v67 = *(_QWORD *)&v74[0];
  v60 = v5;
  if ((*(_QWORD *)&v74[0] & 0xC000000000000001) != 0)
  {
    v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, *(_QWORD *)&v74[0]);
  }
  else
  {
    if (!*(_QWORD *)((*(_QWORD *)&v74[0] & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    v12 = *(id *)(*(_QWORD *)&v74[0] + 32);
  }
  v66 = v12;
  v13 = swift_allocObject(&unk_100072620, 24, 7);
  v65 = v13;
  *(_QWORD *)(v13 + 16) = _swiftEmptyArrayStorage;
  v14 = (uint64_t *)(v13 + 16);
  v61 = a2;
  v11(v74);
  v15 = v75;
  v78[0] = v75;
  v77 = v74[0];
  swift_bridgeObjectRetain(v75);
  sub_100029DB4((uint64_t)&v77);
  v76 = v74[1];
  sub_100029DB4((uint64_t)&v76);
  sub_100029DDC(v78);
  v16 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v17 = (void **)(v15 + 40);
    v69 = (unint64_t)"rageCoordinator.subscription";
    v70 = CKCurrentUserDefaultName;
    v18 = (void *)0x8000000100066D50;
    v68 = 0x8000000100066D50;
    do
    {
      v20 = (uint64_t)*(v17 - 1);
      v19 = *v17;
      v71._countAndFlagsBits = 0;
      v71._object = (void *)0xE000000000000000;
      swift_bridgeObjectRetain(v19);
      _StringGuts.grow(_:)(38);
      swift_bridgeObjectRelease(v71._object);
      v71._countAndFlagsBits = 0xD000000000000024;
      v71._object = v18;
      v21._countAndFlagsBits = v20;
      v21._object = v19;
      String.append(_:)(v21);
      object = v71._object;
      sub_10000DDB4(v71._countAndFlagsBits, (unint64_t)v71._object, 2, (uint64_t)&type metadata for Bool, &v72);
      swift_bridgeObjectRelease(object);
      if (v72 == 2 || (v72 & 1) != 0)
      {
        swift_bridgeObjectRelease(v19);
      }
      else
      {
        sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
        v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
        v25 = v24;
        swift_bridgeObjectRetain(v19);
        v26._countAndFlagsBits = v20;
        v26._object = v19;
        v27._countAndFlagsBits = v23;
        v27._object = v25;
        isa = CKRecordZoneID.init(zoneName:ownerName:)(v26, v27).super.isa;
        sub_100011254(0, &qword_10007B340, CKRecordZoneSubscription_ptr);
        v71._countAndFlagsBits = 0;
        v71._object = (void *)0xE000000000000000;
        v29 = isa;
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease(v71._object);
        v71._countAndFlagsBits = 0xD000000000000024;
        v71._object = (void *)(v69 | 0x8000000000000000);
        v30._countAndFlagsBits = v20;
        v30._object = v19;
        String.append(_:)(v30);
        swift_bridgeObjectRelease(v19);
        v31 = CKRecordZoneSubscription.init(zoneID:subscriptionID:)((CKRecordZoneID)v29, v71).super.super.isa;
        swift_beginAccess(v14, &v71, 33, 0);
        v32 = v31;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v32);
        v34 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v33 = *(_QWORD *)((*v14 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v34 >= v33 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v35 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v32);
        specialized Array._endMutation()(v35);
        swift_endAccess(&v71);

        v18 = (void *)v68;
      }
      v17 += 2;
      --v16;
    }
    while (v16);
  }
  sub_100029DDC(v78);
  swift_beginAccess(v14, &v71, 0, 0);
  v36 = *v14;
  if ((unint64_t)*v14 >> 62)
  {
    if (v36 < 0)
      v58 = *v14;
    else
      v58 = v36 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v14);
    v37 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v38 = v66;
  v39 = v65;
  v40 = v67;
  if (v37 <= 0)
  {
    swift_bridgeObjectRelease(v67);
    v52 = sub_10003078C();
    v53 = v60;
    v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 16))(v60, v52, v64);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Already subscribed cloud notifications", v57, 2u);
      swift_slowDealloc(v57, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v63 + 8))(v53, v64);
    swift_release(v39);
  }
  else
  {
    sub_100011254(0, (unint64_t *)&unk_10007B330, CKModifySubscriptionsOperation_ptr);
    v41 = *(void **)(v39 + 16);
    v42 = sub_10000215C((uint64_t *)&unk_10007B630);
    v43 = swift_allocObject(v42, 48, 7);
    *(_OWORD *)(v43 + 16) = xmmword_1000606F0;
    swift_bridgeObjectRetain(v41);
    v44 = sub_1000139A4();
    v45 = CKSubscription.subscriptionID.getter();
    v47 = v46;

    *(_QWORD *)(v43 + 32) = v45;
    *(_QWORD *)(v43 + 40) = v47;
    v79.value._rawValue = v41;
    v79.is_nil = v43;
    v48 = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v79, v80).super.super.super.super.isa;
    v49 = sub_100011D28();
    -[objc_class setGroup:](v48, "setGroup:", v49);

    v50 = swift_allocObject(&unk_100072648, 32, 7);
    v51 = v62;
    *(_QWORD *)(v50 + 16) = v62;
    *(_QWORD *)(v50 + 24) = v39;
    swift_retain(v51);
    swift_retain(v39);
    CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_10002E720, v50);
    objc_msgSend(v38, "addOperation:", v48);
    swift_bridgeObjectRelease(v40);

    swift_release(v39);
  }
}

Class sub_1000139A4()
{
  void *v0;
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Class isa;
  id v7;
  Swift::String v9;

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  sub_100011254(0, &qword_10007AE10, CKDatabaseSubscription_ptr);
  strcpy((char *)&v9, "bluetoothuser-");
  HIBYTE(v9._object) = -18;
  v1 = (id)CKDatabaseScopeString(objc_msgSend(v0, "scope"));
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v4);
  isa = CKDatabaseSubscription.init(subscriptionID:)(v9).super.super.isa;
  v7 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), "init");
  objc_msgSend(v7, "setShouldSendContentAvailable:", 1);
  -[objc_class setNotificationInfo:](isa, "setNotificationInfo:", v7);

  return isa;
}

uint64_t sub_100013AD4(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[24];
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v13 = (char *)&v47 - v12;
  Transaction.capture()();
  if ((a2 & 1) == 0)
  {
    v14 = (uint64_t *)(a4 + 16);
    v15 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, v15, v7);
    v16 = swift_retain_n(a4, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = swift_slowAlloc(32, -1);
      v52 = v50;
      *(_DWORD *)v19 = 136315138;
      v47 = v19 + 4;
      v48 = v19;
      swift_beginAccess(a4 + 16, v51, 0, 0);
      v20 = *(_QWORD *)(a4 + 16);
      v21 = sub_100011254(0, &qword_10007B348, CKSubscription_ptr);
      v22 = swift_bridgeObjectRetain(v20);
      v23 = Array.description.getter(v22, v21);
      v49 = v7;
      v25 = v24;
      v26 = v20;
      v14 = (uint64_t *)(a4 + 16);
      swift_bridgeObjectRelease(v26);
      v54 = sub_100002CA8(v23, v25, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v47, v19 + 12);
      swift_release_n(a4, 2);
      swift_bridgeObjectRelease(v25);
      v27 = v48;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Successfully subscribed to %s", v48, 0xCu);
      v28 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v49);
    }
    else
    {

      swift_release_n(a4, 2);
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
    }
    swift_beginAccess(v14, &v54, 0, 0);
    v37 = *v14;
    if ((unint64_t)*v14 >> 62)
    {
      if (v37 < 0)
        v46 = *v14;
      else
        v46 = v37 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*v14);
      result = _CocoaArrayWrapper.endIndex.getter(v46);
      v38 = result;
      if (result)
        goto LABEL_9;
    }
    else
    {
      v38 = *(_QWORD *)((v37 & 0xFFFFFFFFFFFFF8) + 0x10);
      result = swift_bridgeObjectRetain(*v14);
      if (v38)
      {
LABEL_9:
        if (v38 < 1)
        {
          __break(1u);
          return result;
        }
        v40 = 0;
        do
        {
          if ((v37 & 0xC000000000000001) != 0)
            v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v37);
          else
            v41 = *(id *)(v37 + 8 * v40 + 32);
          v42 = v41;
          ++v40;
          v43 = CKSubscription.subscriptionID.getter();
          v45 = v44;
          v53[2] = &type metadata for Bool;
          LOBYTE(v52) = 1;
          sub_10000F5C8(2, v43, v44, (uint64_t)&v52);

          swift_bridgeObjectRelease(v45);
          sub_10000BCBC((uint64_t)&v52, &qword_10007BE80);
        }
        while (v38 != v40);
      }
    }
    return swift_bridgeObjectRelease(v37);
  }
  swift_errorRetain(a1);
  v29 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v29, v7);
  swift_errorRetain(a1);
  v30 = swift_errorRetain(a1);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    v50 = v8;
    *(_DWORD *)v33 = 138412290;
    swift_errorRetain(a1);
    v35 = _swift_stdlib_bridgeErrorToNSError(a1);
    v52 = v35;
    v8 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53, v33 + 4, v33 + 12);
    *v34 = v35;
    sub_10002E214(a1, 1);
    sub_10002E214(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Subscription error: %@", v33, 0xCu);
    v36 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v34, 1, v36);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

    sub_10002E214(a1, 1);
  }
  else
  {
    sub_10002E214(a1, 1);
    sub_10002E214(a1, 1);
    swift_errorRelease(a1);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_100013FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _BYTE v13[16];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10003078C();
  v7 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "CKAccountChanged notification received", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  v11 = type metadata accessor for Transaction();
  __chkstk_darwin(v11);
  *(_QWORD *)&v13[-32] = v1;
  *(_QWORD *)&v13[-24] = sub_10002E72C;
  *(_QWORD *)&v13[-16] = v1;
  swift_retain(v1);
  static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountStatus", 37, 2, sub_10002E734);
  return swift_release(v1);
}

uint64_t sub_1000141F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  const char *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t result;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  char *v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  void (*v90)(_OWORD *__return_ptr, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void **v93;
  uint64_t v94;
  void *v95;
  Swift::String v96;
  __int128 v97;
  uint64_t v98;
  id v99;
  id v100;
  Class v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  void (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  __int128 aBlock;
  __int128 v129;
  uint64_t (*v130)();
  uint64_t v131;
  char v132[24];
  char v133[24];
  _OWORD v134[2];
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  uint64_t v138;

  v127 = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v124 = (char *)&v113 - v9;
  v10 = __chkstk_darwin(v8);
  v123 = (char *)&v113 - v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v113 - v13;
  v15 = __chkstk_darwin(v12);
  v125 = (char *)&v113 - v16;
  v17 = __chkstk_darwin(v15);
  v121 = (char *)&v113 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v113 - v20;
  v22 = __chkstk_darwin(v19);
  v122 = (char *)&v113 - v23;
  __chkstk_darwin(v22);
  v25 = (char *)&v113 - v24;
  v26 = sub_10003078C();
  v126 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v126(v25, v26, v3);
  v27 = swift_retain_n(a2, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  v30 = v29;
  if (os_log_type_enabled(v28, v29))
  {
    v31 = swift_slowAlloc(22, -1);
    v120 = v3;
    v32 = v31;
    v116 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v116;
    *(_DWORD *)v32 = 136315394;
    v115 = v30;
    v33 = objc_retainAutoreleasedReturnValue((id)CKStringFromAccountStatus(*(_QWORD *)(a2
                                                                                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus)));
    v117 = v4;
    v34 = v33;
    v35 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    v119 = v14;
    v36 = a2;
    v37 = v35;
    v118 = v21;
    v39 = v38;

    *(_QWORD *)&v134[0] = sub_100002CA8(v37, v39, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v32 + 4, v32 + 12);
    swift_release_n(v36, 2);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v32 + 12) = 2080;
    v114 = v32 + 14;
    v40 = (id)CKStringFromAccountStatus(v127);
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
    v42 = v7;
    v43 = v26;
    v45 = v44;

    v46 = v41;
    a2 = v36;
    v14 = v119;
    *(_QWORD *)&v134[0] = sub_100002CA8(v46, v45, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v114, v32 + 22);
    v47 = v45;
    v26 = v43;
    v7 = v42;
    v21 = v118;
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v115, "iCloud Account Changed from %s -> %s", (uint8_t *)v32, 0x16u);
    v48 = v116;
    swift_arrayDestroy(v116, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v49 = v32;
    v3 = v120;
    swift_slowDealloc(v49, -1, -1);

    v50 = *(void (**)(char *, uint64_t))(v117 + 8);
  }
  else
  {

    swift_release_n(a2, 2);
    v50 = *(void (**)(char *, uint64_t))(v4 + 8);
  }
  v50(v25, v3);
  v51 = *(_QWORD *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus);
  v52 = v127;
  *(_QWORD *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_currentAccountStatus) = v127;
  *(_BYTE *)(a2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) = v52 == 1;
  switch(v52)
  {
    case 0:
      v53 = v123;
      v54 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v123, v26, v3);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v55, v56))
        goto LABEL_28;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      v58 = "iCloud Account state cannot be determined!";
      goto LABEL_27;
    case 1:
      v64 = v122;
      v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v122, v26, v3);
      v66 = Logger.logObject.getter(v65);
      v67 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v66, v67))
      {
        v68 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v68 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "iCloud Account Available", v68, 2u);
        swift_slowDealloc(v68, -1, -1);
      }

      result = ((uint64_t (*)(char *, uint64_t))v50)(v64, v3);
      if (v51 != 1)
      {
        sub_1000155C8((_BOOL8)_swiftEmptyArrayStorage);
        v70 = type metadata accessor for Transaction();
        __chkstk_darwin(v70);
        *(&v113 - 4) = a2;
        *(&v113 - 3) = (uint64_t)sub_10002E8A4;
        *(&v113 - 2) = a2;
        swift_retain(a2);
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.accountInfo", 35, 2, sub_10002E8B0);
        return swift_release(a2);
      }
      return result;
    case 2:
      v71 = v26;
      v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v21, v26, v3);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v73, v74))
      {
        v75 = v21;
        v76 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v76 = 0;
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "iCloud Account not available due to restrictions!", v76, 2u);
        v77 = v76;
        v21 = v75;
        swift_slowDealloc(v77, -1, -1);
      }

      v50(v21, v3);
      v26 = v71;
      if (v51 != 2)
        goto LABEL_19;
      v53 = v121;
      v78 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v121, v71, v3);
      v55 = Logger.logObject.getter(v78);
      v56 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v55, v56))
        goto LABEL_28;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      v58 = "Account was already in .restricted state";
      goto LABEL_27;
    case 3:
LABEL_19:
      v79 = v26;
      v80 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v125, v26, v3);
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "iCloud Account not available!", v83, 2u);
        swift_slowDealloc(v83, -1, -1);
      }

      v84 = ((uint64_t (*)(char *, uint64_t))v50)(v125, v3);
      if (v51 == 3)
      {
        v85 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v14, v79, v3);
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v86, v87))
        {
          v88 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v88 = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Account was already in .noAccount state", v88, 2u);
          swift_slowDealloc(v88, -1, -1);
        }

        v63 = v14;
        return ((uint64_t (*)(char *, uint64_t))v50)(v63, v3);
      }
      else
      {
        v90 = *(void (**)(_OWORD *__return_ptr, uint64_t))(*(_QWORD *)a2 + 256);
        v127 = a2;
        v90(v134, v84);
        v91 = v135;
        v138 = v135;
        v137 = v134[0];
        swift_bridgeObjectRetain(v135);
        sub_100029DB4((uint64_t)&v137);
        v136 = v134[1];
        sub_100029DB4((uint64_t)&v136);
        sub_100029DDC(&v138);
        v92 = *(_QWORD *)(v91 + 16);
        if (v92)
        {
          v93 = (void **)(v91 + 40);
          do
          {
            v94 = (uint64_t)*(v93 - 1);
            v95 = *v93;
            *(_QWORD *)&aBlock = 0;
            *((_QWORD *)&aBlock + 1) = 0xE000000000000000;
            swift_bridgeObjectRetain(v95);
            _StringGuts.grow(_:)(38);
            swift_bridgeObjectRelease(*((_QWORD *)&aBlock + 1));
            *(_QWORD *)&aBlock = 0xD000000000000024;
            *((_QWORD *)&aBlock + 1) = 0x8000000100066D50;
            v96._countAndFlagsBits = v94;
            v96._object = v95;
            String.append(_:)(v96);
            swift_bridgeObjectRelease(v95);
            v97 = aBlock;
            *((_QWORD *)&v129 + 1) = &type metadata for Bool;
            LOBYTE(aBlock) = 1;
            sub_10000F5C8(2, v97, *((unint64_t *)&aBlock + 1), (uint64_t)&aBlock);
            swift_bridgeObjectRelease(*((_QWORD *)&v97 + 1));
            sub_10000BCBC((uint64_t)&aBlock, &qword_10007BE80);
            v93 += 2;
            --v92;
          }
          while (v92);
        }
        sub_100029DDC(&v138);
        v98 = v127;
        v99 = sub_100011C24();
        v100 = objc_msgSend(v99, "privateCloudDatabase");

        v101 = sub_1000139A4();
        v102 = CKSubscription.subscriptionID.getter();
        v104 = v103;

        v129 = 0u;
        aBlock = 0u;
        sub_10000F5C8(2, v102, v104, (uint64_t)&aBlock);
        swift_bridgeObjectRelease(v104);
        sub_10000BCBC((uint64_t)&aBlock, &qword_10007BE80);
        *(_BYTE *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
        v105 = (uint64_t *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v133, 1, 0);
        v106 = *v105;
        *v105 = (uint64_t)&_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease(v106);
        v107 = (uint64_t *)(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess(v98 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, v132, 1, 0);
        v108 = *v107;
        *v107 = (uint64_t)&_swiftEmptyDictionarySingleton;
        swift_bridgeObjectRelease(v108);
        v109 = *(NSObject **)(v98 + 72);
        v110 = swift_allocObject(&unk_100072710, 32, 7);
        *(_QWORD *)(v110 + 16) = sub_10002E7EC;
        *(_QWORD *)(v110 + 24) = v98;
        v130 = sub_10002FAE8;
        v131 = v110;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v129 = sub_10000D2B0;
        *((_QWORD *)&v129 + 1) = &unk_100072728;
        v111 = _Block_copy(&aBlock);
        v112 = v131;
        swift_retain(v98);
        swift_retain(v110);
        swift_release(v112);
        dispatch_sync(v109, v111);
        _Block_release(v111);
        LOBYTE(v109) = swift_isEscapingClosureAtFileLocation(v110, "", 119, 254, 45, 1);
        swift_release(v98);
        result = swift_release(v110);
        if ((v109 & 1) != 0)
        {
          __break(1u);
          JUMPOUT(0x100014E7CLL);
        }
      }
      return result;
    case 4:
      v53 = v124;
      v89 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v124, v26, v3);
      v55 = Logger.logObject.getter(v89);
      v56 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v55, v56))
        goto LABEL_28;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      v58 = "iCloud Account temporarily unavailable!";
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v55, v56, v58, v57, 2u);
      swift_slowDealloc(v57, -1, -1);
LABEL_28:

      v63 = v53;
      return ((uint64_t (*)(char *, uint64_t))v50)(v63, v3);
    default:
      v59 = ((uint64_t (*)(char *, uint64_t, uint64_t))v126)(v7, v26, v3);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unknown CKAccountStatus!", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      v63 = v7;
      return ((uint64_t (*)(_QWORD, _QWORD))v50)(v63, v3);
  }
}

void sub_100014E90(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100014F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  _QWORD *v9;
  void *v10;
  _QWORD *v11;
  _QWORD v12[5];
  _QWORD *v13;

  v8 = sub_100011C24();
  v9 = (_QWORD *)swift_allocObject(&unk_100072670, 48, 7);
  v9[2] = a1;
  v9[3] = a2;
  v9[4] = a3;
  v9[5] = a4;
  v12[4] = sub_10002E794;
  v13 = v9;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1107296256;
  v12[2] = sub_100015568;
  v12[3] = &unk_100072688;
  v10 = _Block_copy(v12);
  v11 = v13;
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a4);
  swift_release(v11);
  objc_msgSend(v8, "accountStatusWithCompletionHandler:", v10);
  _Block_release(v10);

}

uint64_t sub_100014FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void **a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void ***v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  uint8_t *v33;
  NSObject *v34;
  _DWORD *v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void **v41;
  _QWORD *v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v53;
  _DWORD *v54;
  uint64_t v55;
  void **v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void **aBlock;
  _QWORD v69[4];
  _QWORD *v70;

  v60 = a4;
  v61 = a5;
  v66 = a1;
  v59 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59);
  v58 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v62 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v53 - v17;
  Transaction.capture()();
  v63 = v10;
  v64 = v9;
  if (a2)
  {
    v56 = a6;
    swift_errorRetain(a2);
    v19 = sub_10003078C();
    v57 = v13;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (void ***)swift_slowAlloc(8, -1);
      v55 = v12;
      *(_DWORD *)v23 = 138412290;
      swift_errorRetain(a2);
      v25 = (void **)_swift_stdlib_bridgeErrorToNSError(a2);
      aBlock = v25;
      v12 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v69, v23 + 4, v23 + 12);
      *v24 = v25;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "error fetching account status: %@", v23, 0xCu);
      v26 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    (*(void (**)(char *, uint64_t))(v57 + 8))(v16, v12);
    a6 = v56;
  }
  else
  {
    v27 = sub_10003078C();
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v27, v12);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      v32 = swift_slowAlloc(12, -1);
      LODWORD(v55) = v31;
      v33 = (uint8_t *)v32;
      v56 = (void **)swift_slowAlloc(32, -1);
      aBlock = v56;
      v57 = v13;
      v34 = v29;
      *(_DWORD *)v33 = 136315138;
      v35 = v33 + 12;
      v54 = v33 + 4;
      v36 = v33;
      v37 = (id)CKStringFromAccountStatus(v66);
      v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(v37);
      v40 = v39;

      v67 = (_QWORD *)sub_100002CA8(v38, v40, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &aBlock, v54, v35);
      swift_bridgeObjectRelease(v40);
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v55, "Fetched CK account status: %s", v36, 0xCu);
      v41 = v56;
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v12);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
    }
  }
  v42 = (_QWORD *)swift_allocObject(&unk_1000726C0, 40, 7);
  v42[2] = v61;
  v42[3] = a6;
  v42[4] = v66;
  v69[3] = sub_10002E7C4;
  v70 = v42;
  aBlock = _NSConcreteStackBlock;
  v69[0] = 1107296256;
  v69[1] = sub_100001DDC;
  v69[2] = &unk_1000726D8;
  v43 = _Block_copy(&aBlock);
  v44 = swift_retain(a6);
  v45 = v62;
  static DispatchQoS.unspecified.getter(v44);
  v67 = _swiftEmptyArrayStorage;
  v46 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v47 = sub_10000215C((uint64_t *)&unk_10007A960);
  v48 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  v49 = v58;
  v50 = v47;
  v51 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v67, v50, v48, v59, v46);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v45, v49, v43);
  _Block_release(v43);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v49, v51);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v45, v64);
  return swift_release(v70);
}

void sub_100015568(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_1000155C8(_BOOL8 a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint8_t *v20;
  _QWORD *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  void *v33;
  _QWORD *v34;
  NSObject *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  NSString v43;
  id v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  Swift::Bool v48;
  Class isa;
  objc_class *v50;
  id v51;
  uint64_t v52;
  NSObject *v53;
  qos_class_t v54;
  char *v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint8_t *v63;
  uint8_t *v64;
  uint64_t v65;
  _QWORD *v66;
  void (*v67)(char *, uint64_t);
  _BOOL8 v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  char *v71;
  uint64_t v72;
  unint64_t v73;
  _OWORD v74[2];
  uint64_t v75;
  _OWORD v76[2];
  uint64_t v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  Swift::OpaquePointer_optional v83;
  Swift::OpaquePointer_optional v84;

  v2 = v1;
  v68 = a1;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (uint8_t **)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD **)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v71 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  v12 = (char *)&v63 - v11;
  v13 = sub_10003078C();
  v14 = (uint64_t (*)(char *, uint64_t, uint64_t))v8[2];
  v69 = v13;
  v70 = v14;
  ((void (*)(char *))v14)(v12);
  v15 = swift_retain_n(v1, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  v18 = os_log_type_enabled(v16, v17);
  v72 = v7;
  if (v18)
  {
    v66 = v8;
    v19 = swift_slowAlloc(12, -1);
    v67 = (void (*)(char *, uint64_t))v3;
    v20 = (uint8_t *)v19;
    v65 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v76[0] = v65;
    v21 = v2;
    v64 = v20;
    *(_DWORD *)v20 = 136315138;
    v22 = v20 + 12;
    v63 = v20 + 4;
    (*(void (**)(_OWORD *__return_ptr))(*v21 + 256))(v74);
    v23 = v75;
    v82 = v74[0];
    swift_bridgeObjectRetain(v75);
    sub_100029DB4((uint64_t)&v82);
    v81 = v74[1];
    sub_100029DB4((uint64_t)&v81);
    swift_bridgeObjectRelease(v23);
    v24 = v4;
    v25 = Array.description.getter(v23, &type metadata for String);
    v27 = v26;
    swift_bridgeObjectRelease(v23);
    v28 = v25;
    v4 = v24;
    *(_QWORD *)&v79 = sub_100002CA8(v28, v27, (uint64_t *)v76);
    v29 = v22;
    v2 = v21;
    v7 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 8, v63, v29);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v27);
    v30 = v64;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "setupZones: %s", v64, 0xCu);
    v31 = v65;
    swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v3 = (uint64_t)v67;
    swift_slowDealloc(v30, -1, -1);

    v32 = (void (*)(char *, uint64_t))v66[1];
  }
  else
  {

    swift_release_n(v1, 2);
    v32 = (void (*)(char *, uint64_t))v8[1];
  }
  v32(v12, v7);
  v33 = (void *)v2[8];
  *v6 = v33;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.notOnQueue(_:), v3);
  v34 = v33;
  LOBYTE(v33) = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v6, v3);
  if ((v33 & 1) != 0)
  {
    v35 = dispatch_group_create();
    (*(void (**)(_OWORD *__return_ptr))(*v2 + 256))(v76);
    v36 = v77;
    v80 = v77;
    v79 = v76[0];
    swift_bridgeObjectRetain(v77);
    sub_100029DB4((uint64_t)&v79);
    v78 = v76[1];
    sub_100029DB4((uint64_t)&v78);
    sub_100029DDC(&v80);
    v37 = _swiftEmptyArrayStorage;
    v73 = (unint64_t)_swiftEmptyArrayStorage;
    v38 = *(_QWORD *)(v36 + 16);
    if (v38)
    {
      v66 = v34;
      v67 = v32;
      swift_bridgeObjectRetain(v36);
      v39 = (uint64_t *)(v36 + 40);
      do
      {
        v41 = *v39;
        v42 = objc_allocWithZone((Class)CKRecordZone);
        swift_bridgeObjectRetain(v41);
        v43 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v41);
        v44 = objc_msgSend(v42, "initWithZoneName:", v43);

        if (v44)
        {
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v45);
          v47 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v46 = *(_QWORD *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v47 >= v46 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v46 > 1, v47 + 1, 1);
          v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v47, v44);
          specialized Array._endMutation()(v40);
        }
        v39 += 2;
        --v38;
      }
      while (v38);
      sub_100029DDC(&v80);
      v37 = (_QWORD *)v73;
      v32 = v67;
      v34 = v66;
    }
    sub_100029DDC(&v80);
    sub_100011254(0, &qword_10007B328, CKModifyRecordZonesOperation_ptr);
    swift_bridgeObjectRetain(v37);
    v48 = v68;
    swift_bridgeObjectRetain(v68);
    v83.value._rawValue = v37;
    v83.is_nil = v48;
    isa = CKModifyRecordZonesOperation.init(recordZonesToSave:recordZoneIDsToDelete:)(v83, v84).super.super.super.super.isa;
    -[objc_class setCallbackQueue:](isa, "setCallbackQueue:", v34);
    v50 = isa;
    v51 = sub_100011D04();
    -[objc_class setGroup:](v50, "setGroup:", v51);

    dispatch_group_enter(v35);
    v52 = swift_allocObject(&unk_1000725F8, 32, 7);
    *(_QWORD *)(v52 + 16) = v37;
    *(_QWORD *)(v52 + 24) = v35;
    v53 = v35;
    CKModifyRecordZonesOperation.modifyRecordZonesResultBlock.setter(sub_10002E6DC, v52);
    v54 = qos_class_self();
    v55 = v71;
    if (v54 >= QOS_CLASS_USER_INITIATED)
      -[objc_class setQualityOfService:](v50, "setQualityOfService:", 25);
    v56 = sub_100011C24();
    v57 = objc_msgSend(v56, "privateCloudDatabase");

    objc_msgSend(v57, "addOperation:", v50);
    v58 = v72;
    v59 = v70(v55, v69, v72);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v62 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Waiting for all zone create tasks to complete.", v62, 2u);
      swift_slowDealloc(v62, -1, -1);
    }

    v32(v55, v58);
    OS_dispatch_group.wait()();
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.setupCloudNotifications", 47, 2, sub_10002E6E8);

  }
  else
  {
    __break(1u);
  }
}

void sub_100015CA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v33;

  v30 = a1 + 64;
  v1 = 1 << *(_BYTE *)(a1 + 32);
  v2 = -1;
  if (v1 < 64)
    v2 = ~(-1 << v1);
  v3 = v2 & *(_QWORD *)(a1 + 64);
  v31 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v4 = 0;
  v29 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v3)
    {
      v5 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      v6 = v5 | (v4 << 6);
      goto LABEL_17;
    }
    if (__OFADD__(v4++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v4 >= v31)
      goto LABEL_31;
    v8 = *(_QWORD *)(v30 + 8 * v4);
    if (!v8)
      break;
LABEL_16:
    v3 = (v8 - 1) & v8;
    v6 = __clz(__rbit64(v8)) + (v4 << 6);
LABEL_17:
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v6 + 8);
    v11 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * v6);
    swift_retain(v10);
    v12 = v11;
    swift_retain(v10);
    v13 = objc_msgSend(v12, "recordID");
    v14 = objc_msgSend(v13, "recordName");

    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    swift_bridgeObjectRetain(v17);
    v18._countAndFlagsBits = 58;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v17);
    v19 = swift_release(v10);
    v20 = v17;
    v21 = CKRecord.recordType.getter(v19);
    v23 = v22;

    swift_bridgeObjectRetain(v20);
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v20);
    if (v33)
    {
      swift_bridgeObjectRelease(v29);
      swift_release(a1);
      swift_release(v10);

      return;
    }
    swift_release(v10);

    if (v20)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0)
        v29 = sub_10000F854(0, v29[2] + 1, 1, v29);
      v26 = v29[2];
      v25 = v29[3];
      if (v26 >= v25 >> 1)
        v29 = sub_10000F854((_QWORD *)(v25 > 1), v26 + 1, 1, v29);
      v29[2] = v26 + 1;
      v27 = &v29[2 * v26];
      v27[4] = v15;
      v27[5] = v20;
    }
  }
  v9 = v4 + 1;
  if (v4 + 1 >= v31)
    goto LABEL_31;
  v8 = *(_QWORD *)(v30 + 8 * v9);
  if (v8)
    goto LABEL_15;
  v9 = v4 + 2;
  if (v4 + 2 >= v31)
    goto LABEL_31;
  v8 = *(_QWORD *)(v30 + 8 * v9);
  if (v8)
    goto LABEL_15;
  v9 = v4 + 3;
  if (v4 + 3 >= v31)
    goto LABEL_31;
  v8 = *(_QWORD *)(v30 + 8 * v9);
  if (v8)
  {
LABEL_15:
    v4 = v9;
    goto LABEL_16;
  }
  v28 = v4 + 4;
  if (v4 + 4 >= v31)
  {
LABEL_31:
    swift_release(a1);
    return;
  }
  v8 = *(_QWORD *)(v30 + 8 * v28);
  v4 += 4;
  if (v8)
    goto LABEL_16;
  while (1)
  {
    v4 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v4 >= v31)
      goto LABEL_31;
    v8 = *(_QWORD *)(v30 + 8 * v4);
    ++v28;
    if (v8)
      goto LABEL_16;
  }
LABEL_33:
  __break(1u);
}

void sub_100015FDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int64_t v22;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v22 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  v6 = _swiftEmptyArrayStorage;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  for (i = v7 | (v5 << 6); ; i = __clz(__rbit64(v10)) + (v5 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    v14 = objc_msgSend(v13, "recordName", swift_retain(v12).n128_f64[0]);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;
    swift_release(v12);

    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_10000F854(0, v6[2] + 1, 1, v6);
    v19 = v6[2];
    v18 = v6[3];
    if (v19 >= v18 >> 1)
      v6 = sub_10000F854((_QWORD *)(v18 > 1), v19 + 1, 1, v6);
    v6[2] = v19 + 1;
    v20 = &v6[2 * v19];
    v20[4] = v15;
    v20[5] = v17;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= v22)
      goto LABEL_27;
    v10 = *(_QWORD *)(v21 + 8 * v9);
    ++v5;
    if (!v10)
    {
      v5 = v9 + 1;
      if (v9 + 1 >= v22)
        goto LABEL_27;
      v10 = *(_QWORD *)(v21 + 8 * v5);
      if (!v10)
      {
        v5 = v9 + 2;
        if (v9 + 2 >= v22)
          goto LABEL_27;
        v10 = *(_QWORD *)(v21 + 8 * v5);
        if (!v10)
        {
          v5 = v9 + 3;
          if (v9 + 3 >= v22)
            goto LABEL_27;
          v10 = *(_QWORD *)(v21 + 8 * v5);
          if (!v10)
            break;
        }
      }
    }
LABEL_20:
    v4 = (v10 - 1) & v10;
  }
  v11 = v9 + 4;
  if (v11 >= v22)
  {
LABEL_27:
    swift_release(a1);
    return;
  }
  v10 = *(_QWORD *)(v21 + 8 * v11);
  if (v10)
  {
    v5 = v11;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v5 >= v22)
      goto LABEL_27;
    v10 = *(_QWORD *)(v21 + 8 * v5);
    ++v11;
    if (v10)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

void sub_100016238(uint64_t a1, char a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint8_t *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v38 - v13;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v28 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v28, v8);
    swift_errorRetain(a1);
    v29 = swift_errorRetain(a1);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(8, -1);
      v41 = v9;
      v34 = (_QWORD *)v33;
      v40 = v8;
      *(_DWORD *)v32 = 138412290;
      swift_errorRetain(a1);
      v35 = _swift_stdlib_bridgeErrorToNSError(a1);
      v43 = v35;
      v8 = (uint64_t)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v32 + 4, v32 + 12);
      *v34 = v35;
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Error creating zone: %@", v32, 0xCu);
      v36 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v34, 1, v36);
      v37 = v34;
      v9 = v41;
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      sub_10002E214(a1, 1);
    }
    else
    {
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
      swift_errorRelease(a1);

    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
  else
  {
    v15 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v15, v8);
    v16 = swift_bridgeObjectRetain_n(a3, 2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v40 = a4;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v41 = v9;
      v21 = v20;
      v43 = v20;
      *(_DWORD *)v19 = 136315138;
      v39 = v19 + 4;
      v22 = sub_100011254(0, &qword_10007B350, CKRecordZone_ptr);
      v23 = swift_bridgeObjectRetain(a3);
      v24 = Array.description.getter(v23, v22);
      v26 = v25;
      swift_bridgeObjectRelease(a3);
      v27 = v24;
      a4 = v40;
      v42 = sub_100002CA8(v27, v26, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v39, v19 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Created Zone: %s", v19, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      (*(void (**)(char *, uint64_t))(v41 + 8))(v14, v8);
    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    }
  }
  dispatch_group_leave(a4);
}

void sub_100016618(void *a1, char a2, char *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void (*v31)(char *);
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  uint8_t *v35;
  _QWORD *v36;
  id v37;
  void *v38;
  uint64_t v39;
  uint8_t *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  void *v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  id v53;
  uint64_t v54;
  char v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  uint8_t *v60;
  uint8_t *v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint8_t *v67;
  uint8_t *v68;
  unsigned __int8 v69;
  char *v70;
  NSObject *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  char *v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)();
  uint64_t v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  Swift::String v92;
  Swift::String v93;
  Class isa;
  uint64_t v95;
  void *v96;
  BOOL v97;
  char *v98;
  uint64_t v99;
  uint64_t (*v100)(char *, uint64_t, uint64_t);
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  void *v105;
  uint8_t *v106;
  uint8_t *v107;
  void *v108;
  char v109;
  char *v110;
  int v111;
  char *v112;
  uint64_t v113;
  NSObject *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint8_t *v117;
  char *v118;
  void (*v119)(uint64_t, _QWORD, uint64_t (*)(uint64_t, char), char *);
  uint64_t v120;
  void (*v121)(char *);
  void *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  id v130;
  char *v131;
  char *v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  char v137[24];
  __int128 aBlock;
  __int128 v139;
  uint64_t (*v140)();
  uint64_t v141;
  __int128 v142;
  __int128 v143;
  _QWORD v144[2];

  v136 = a3;
  v135 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v135 - 8);
  v6 = __chkstk_darwin(v135);
  v134 = (char *)&v120 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v120 - v9;
  __chkstk_darwin(v8);
  v12 = (char *)&v120 - v11;
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v131 = (char *)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v120 - v18;
  v20 = __chkstk_darwin(v17);
  v22 = (char *)&v120 - v21;
  v23 = __chkstk_darwin(v20);
  v132 = (char *)&v120 - v24;
  v25 = __chkstk_darwin(v23);
  v27 = (char *)&v120 - v26;
  __chkstk_darwin(v25);
  if ((a2 & 1) != 0)
  {
    v41 = (char *)&v120 - v28;
    swift_errorRetain(a1);
    v42 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v41, v42, v13);
    swift_errorRetain(a1);
    v43 = swift_errorRetain(a1);
    v136 = v41;
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(12, -1);
      v47 = a1;
      v133 = v13;
      v48 = (uint8_t *)v46;
      v49 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 138412290;
      swift_errorRetain(v47);
      v50 = _swift_stdlib_bridgeErrorToNSError(v47);
      *(_QWORD *)&aBlock = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v48 + 4, v48 + 12);
      *v49 = v50;
      sub_10002EAB4(v47, 1);
      sub_10002EAB4(v47, 1);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "accountInfo error: %@", v48, 0xCu);
      v51 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      v13 = v133;
      swift_slowDealloc(v48, -1, -1);

      sub_10002EAB4(v47, 1);
    }
    else
    {
      sub_10002EAB4(a1, 1);
      sub_10002EAB4(a1, 1);
      swift_errorRelease(a1);

    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v136, v13);
  }
  else
  {
    v126 = v5;
    v29 = a1;
    v30 = sub_10003078C();
    v128 = v14;
    v31 = *(void (**)(char *))(v14 + 16);
    v129 = v30;
    v31(v27);
    v130 = v29;
    v32 = Logger.logObject.getter(v130);
    v33 = static os_log_type_t.default.getter();
    v34 = os_log_type_enabled(v32, v33);
    v133 = v13;
    v123 = v19;
    v127 = v22;
    v125 = v12;
    v124 = v10;
    if (v34)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      *(_QWORD *)&aBlock = v130;
      v37 = v130;
      v38 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v35 + 4, v35 + 12);
      *v36 = a1;
      sub_10002EAB4(a1, 0);
      sub_10002EAB4(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "accountInfo: %@", v35, 0xCu);
      v39 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v36, 1, v39);
      swift_slowDealloc(v36, -1, -1);
      v40 = v35;
      v13 = v133;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      sub_10002EAB4(a1, 0);
      sub_10002EAB4(a1, 0);
      v38 = a1;
    }

    v52 = *(void (**)(char *, uint64_t))(v128 + 8);
    v52(v27, v13);
    v53 = v130;
    if (objc_msgSend(v130, "accountStatus") == (id)1)
    {
      v54 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
      v55 = v136[OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable];
      ((void (*)(char *, uint64_t, uint64_t))v31)(v132, v129, v13);
      v56 = v53;
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter();
      v59 = os_log_type_enabled(v57, v58);
      v122 = v38;
      v121 = v31;
      if (v59)
      {
        v60 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v60 = 67109120;
        LODWORD(aBlock) = objc_msgSend(v56, "supportsDeviceToDeviceEncryption");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v60 + 4, v60 + 8);
        sub_10002EAB4(v38, 0);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Setting manateeAvailable to %{BOOL}d", v60, 8u);
        v61 = v60;
        v13 = v133;
        swift_slowDealloc(v61, -1, -1);
      }
      else
      {
        sub_10002EAB4(v38, 0);
      }

      v52(v132, v13);
      v69 = objc_msgSend(v56, "supportsDeviceToDeviceEncryption");
      v70 = v136;
      v136[v54] = v69;
      v71 = *((_QWORD *)v70 + 9);
      v72 = swift_allocObject(&unk_1000727B0, 32, 7);
      *(_QWORD *)(v72 + 16) = sub_10002EAC0;
      *(_QWORD *)(v72 + 24) = v70;
      v140 = sub_10002FAE8;
      v141 = v72;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v139 = sub_10000D2B0;
      *((_QWORD *)&v139 + 1) = &unk_1000727C8;
      v73 = _Block_copy(&aBlock);
      v74 = v141;
      swift_retain(v70);
      swift_retain(v72);
      swift_release(v74);
      dispatch_sync(v71, v73);
      _Block_release(v73);
      LOBYTE(v71) = swift_isEscapingClosureAtFileLocation(v72, "", 119, 359, 45, 1);
      swift_release(v72);
      if ((v71 & 1) != 0)
      {
        __break(1u);
      }
      else if ((v55 & 1) != 0 || !objc_msgSend(v56, "supportsDeviceToDeviceEncryption"))
      {
        notify_post("com.apple.bluetoothuser.cloudChanged");
        sub_10002EAB4(v122, 0);
        swift_release(v136);
      }
      else
      {
        v75 = v52;
        v76 = v136;
        v77 = v124;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100066D80, 1);
        v78 = (uint64_t)v125;
        URL.appendingPathComponent(_:)(0x2E65746176697250, 0xED00006E656B6F74);
        v79 = *(void (**)(char *, uint64_t))(v126 + 8);
        v80 = v135;
        v79(v77, v135);
        v132 = (char *)sub_10002A2CC(v78);
        v81 = ((uint64_t (*)(uint64_t, uint64_t))v79)(v78, v80);
        (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v76 + 256))(&aBlock, v81);
        v82 = v140;
        v144[0] = v140;
        v143 = aBlock;
        swift_bridgeObjectRetain(v140);
        sub_100029DB4((uint64_t)&v143);
        v142 = v139;
        sub_100029DB4((uint64_t)&v142);
        sub_100029DDC(v144);
        v83 = *((_QWORD *)v82 + 2);
        if (v83)
        {
          sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
          v84 = v83 - 1;
          v85 = (void **)((char *)v82 + 40);
          do
          {
            v86 = v84;
            v88 = (uint64_t)*(v85 - 1);
            v87 = *v85;
            v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
            v91 = v90;
            swift_bridgeObjectRetain(v87);
            v92._countAndFlagsBits = v88;
            v92._object = v87;
            v93._countAndFlagsBits = v89;
            v93._object = v91;
            isa = CKRecordZoneID.init(zoneName:ownerName:)(v92, v93).super.isa;
            v95 = (uint64_t)v134;
            sub_1000173F0(2, isa);

            v96 = (void *)sub_10002A2CC(v95);
            v79((char *)v95, v135);

            v97 = v96 == 0;
            if (!v96)
              break;
            v84 = v86 - 1;
            v85 += 2;
          }
          while (v86);
        }
        else
        {
          v97 = 0;
        }
        sub_100029DDC(v144);
        v98 = v127;
        v99 = v133;
        v100 = (uint64_t (*)(char *, uint64_t, uint64_t))v121;
        v101 = ((uint64_t (*)(char *, uint64_t, uint64_t))v121)(v127, v129, v133);
        v102 = Logger.logObject.getter(v101);
        v103 = static os_log_type_t.default.getter();
        v104 = os_log_type_enabled(v102, v103);
        v105 = v122;
        if (v104)
        {
          v106 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v106 = 0;
          _os_log_impl((void *)&_mh_execute_header, v102, v103, "Manatee PCS keys are now available", v106, 2u);
          v107 = v106;
          v99 = v133;
          swift_slowDealloc(v107, -1, -1);
        }

        v75(v98, v99);
        v108 = v132;
        if (v132)
          v109 = v97;
        else
          v109 = 1;
        if ((v109 & 1) != 0
          || (v110 = sub_100058CA4(),
              swift_beginAccess(v110, v137, 0, 0),
              v111 = *v110,
              v99 = v133,
              v111 == 1))
        {
          v112 = v123;
          v113 = v100(v123, v129, v99);
          v114 = Logger.logObject.getter(v113);
          v115 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v116 = 0;
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Fetching from cloud container", v116, 2u);
            v117 = v116;
            v99 = v133;
            swift_slowDealloc(v117, -1, -1);
          }

          v75(v112, v99);
          v118 = v136;
          v119 = *(void (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t, char), char *))(*(_QWORD *)v136 + 816);
          swift_retain(v136);
          v119(2, 0, sub_10002EB8C, v118);
          sub_10002EAB4(v105, 0);
          swift_release_n(v118, 2);

        }
        else
        {
          notify_post("com.apple.bluetoothuser.cloudChanged");
          sub_10002EAB4(v105, 0);
          swift_release(v136);

        }
      }
    }
    else
    {
      v62 = v131;
      v63 = ((uint64_t (*)(char *, uint64_t, uint64_t))v31)(v131, v129, v13);
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = v13;
        v67 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v67 = 0;
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Account not available", v67, 2u);
        v68 = v67;
        v13 = v66;
        swift_slowDealloc(v68, -1, -1);

        sub_10002EAB4(v38, 0);
      }
      else
      {
        sub_10002EAB4(v38, 0);

      }
      v52(v62, v13);
    }
  }
}

uint64_t sub_1000171D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100066D80, 1);
  if (a1 == 3)
  {
    v10 = 0x646572616853;
    goto LABEL_6;
  }
  if (a1 == 2)
  {
    v11 = 0x2E65746176697250;
LABEL_11:
    v12 = 0xED00006E656B6F74;
    goto LABEL_12;
  }
  if (a1 != 1)
  {
    v13 = sub_10003078C();
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unknown CKDatabase.Scope!", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v11 = 0x2E6E776F6E6B6E55;
    goto LABEL_11;
  }
  v10 = 0x63696C627550;
LABEL_6:
  v11 = v10 & 0xFFFFFFFFFFFFLL | 0x742E000000000000;
  v12 = 0xEC0000006E656B6FLL;
LABEL_12:
  URL.appendingPathComponent(_:)(v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000173F0(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  void *object;
  Swift::String v27;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
  if (a1 == 3)
  {
    v8 = 0x646572616853;
    v9 = 0xE600000000000000;
    goto LABEL_11;
  }
  if (a1 == 2)
  {
    v8 = 0x65746176697250;
LABEL_10:
    v9 = 0xE700000000000000;
    goto LABEL_11;
  }
  if (a1 != 1)
  {
    v10 = sub_10003078C();
    v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v10, v4);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unknown CKDatabase.Scope!", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v8 = 0x6E776F6E6B6E55;
    goto LABEL_10;
  }
  v8 = 0x63696C627550;
  v9 = 0xE600000000000000;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v8);
  v15 = objc_msgSend(a2, "ownerName");
  v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
  v18 = v17;

  v19._countAndFlagsBits = v16;
  v19._object = v18;
  URL.appendPathComponent(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = objc_msgSend(a2, "zoneName");
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

  v27._countAndFlagsBits = v21;
  v27._object = v23;
  v24._countAndFlagsBits = 0x6E656B6F742ELL;
  v24._object = (void *)0xE600000000000000;
  String.append(_:)(v24);
  object = v27._object;
  URL.appendPathComponent(_:)(v27);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_100017650(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v27 - v11;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v19 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v12, v19, v6);
    swift_errorRetain(a1);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v29 = a3;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      swift_errorRetain(a1);
      v24 = _swift_stdlib_bridgeErrorToNSError(a1);
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v23 + 4, v23 + 12);
      v25 = v28;
      *v28 = v24;
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error from fetchChanges: %@", v23, 0xCu);
      v26 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v25, 1, v26);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v12, v6);
    sub_10001DF84(a1, 1);
    return sub_10002E214(a1, 1);
  }
  else
  {
    v13 = sub_10003078C();
    v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v13, v6);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "fetchChanges succeeded", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

void sub_10001791C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;

  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v36 - v13;
  __chkstk_darwin(v12);
  v16 = (char *)&v36 - v15;
  switch(a1)
  {
    case 1:
      v18 = sub_10003078C();
      v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v14, v18, v7);
      v20 = Logger.logObject.getter(v19);
      v21 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "NOT USING PUBLIC DB", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v14, v7);
      break;
    case 3:
      v23 = sub_10003078C();
      v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v16, v23, v7);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "NOT USING SHARED DB", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v16, v7);
      break;
    case 2:
      v17 = sub_100011C24();
      v37 = objc_msgSend(v17, "privateCloudDatabase");

      sub_10002A664(v37, (uint64_t)a3, a4);
      return;
    default:
      v28 = sub_10003078C();
      v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v28, v7);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unknown CKDatabase.Scope!", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      break;
  }
  v33 = sub_10002A620();
  v34 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v33, 0, 0);
  *v35 = 1;
  a3(v34, 1);
  swift_errorRelease(v34);
}

void sub_100017C44(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  id v21;
  uint64_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  id v38;
  _QWORD *v39;
  _QWORD *v40;
  char *v41;
  _QWORD *v42;
  uint64_t v43;
  void **v44;
  void *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  id v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  id v61;
  void **v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  void ***v66;
  void **v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  _QWORD *v71;
  void **v72;
  char *v73;
  _QWORD *v74;
  void (*v75)(char *);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  id v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  void **aBlock;
  uint64_t v87;
  void (*v88)(uint64_t, void *);
  void *v89;
  uint64_t (*v90)(void *);
  uint64_t v91;

  v79 = a4;
  v77 = a3;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v84 = (char *)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v70 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = swift_allocObject(&unk_100072A80, 24, 7);
  *(_QWORD *)(v83 + 16) = _swiftEmptyArrayStorage;
  v82 = swift_allocObject(&unk_100072A80, 24, 7);
  *(_QWORD *)(v82 + 16) = _swiftEmptyArrayStorage;
  v16 = v6;
  sub_1000171D0((uint64_t)objc_msgSend(a2, "scope"));
  v17 = sub_10002A2CC((uint64_t)v15);
  v18 = v15;
  v19 = (void *)v17;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  v20 = objc_msgSend(objc_allocWithZone((Class)CKFetchDatabaseChangesOperation), "initWithPreviousServerChangeToken:", v19);
  v78 = a1;
  v21 = sub_100011D4C();
  objc_msgSend(v20, "setGroup:", v21);

  objc_msgSend(v20, "setFetchAllChanges:", 1);
  v22 = sub_10003078C();
  v75 = (void (*)(char *))v7[2];
  v76 = v22;
  v75(v11);
  v23 = a2;
  v24 = v19;
  v25 = v23;
  v26 = v24;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  v29 = os_log_type_enabled(v27, v28);
  v80 = v6;
  v81 = v26;
  if (v29)
  {
    v73 = v11;
    v74 = v7;
    v30 = swift_slowAlloc(22, -1);
    v71 = (_QWORD *)swift_slowAlloc(8, -1);
    v72 = (void **)swift_slowAlloc(32, -1);
    aBlock = v72;
    *(_DWORD *)v30 = 136315394;
    v31 = (id)CKDatabaseScopeString(objc_msgSend(v25, "scope"));
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v33 = v19;
    v35 = v34;

    v85 = sub_100002CA8(v32, v35, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 4, v30 + 12);

    v36 = v35;
    v19 = v33;
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v30 + 12) = 2112;
    if (v33)
    {
      v37 = v81;
      v85 = (uint64_t)v81;
      v38 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 14, v30 + 22);
      v39 = v74;
    }
    else
    {
      v85 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &aBlock, v30 + 14, v30 + 22);
      v39 = v74;
      v37 = v81;
    }
    v42 = v71;
    *v71 = v19;

    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Old %s database change token: %@", (uint8_t *)v30, 0x16u);
    v43 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v42, 1, v43);
    swift_slowDealloc(v42, -1, -1);
    v44 = v72;
    swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v40 = (_QWORD *)v39[1];
    v41 = v73;
    v16 = v80;
  }
  else
  {

    v40 = (_QWORD *)v7[1];
    v41 = v11;
  }
  v74 = v40;
  ((void (*)(char *, uint64_t))v40)(v41, v16);
  v45 = v19;
  v46 = v83;
  v90 = sub_10002F330;
  v91 = v83;
  aBlock = _NSConcreteStackBlock;
  v87 = 1107296256;
  v88 = sub_100018618;
  v89 = &unk_100072A98;
  v47 = _Block_copy(&aBlock);
  v48 = v91;
  swift_retain(v46);
  swift_release(v48);
  objc_msgSend(v20, "setRecordZoneWithIDChangedBlock:", v47);
  _Block_release(v47);
  v49 = v82;
  v90 = sub_10002F338;
  v91 = v82;
  aBlock = _NSConcreteStackBlock;
  v87 = 1107296256;
  v88 = sub_100018618;
  v89 = &unk_100072AC0;
  v50 = _Block_copy(&aBlock);
  v51 = v91;
  swift_retain(v49);
  swift_release(v51);
  objc_msgSend(v20, "setRecordZoneWithIDWasDeletedBlock:", v50);
  _Block_release(v50);
  v52 = swift_allocObject(&unk_100072AF8, 24, 7);
  *(_QWORD *)(v52 + 16) = v25;
  v90 = sub_10002F3F4;
  v91 = v52;
  aBlock = _NSConcreteStackBlock;
  v87 = 1107296256;
  v88 = sub_100018618;
  v89 = &unk_100072B10;
  v53 = _Block_copy(&aBlock);
  v54 = v91;
  v55 = v25;
  swift_release(v54);
  objc_msgSend(v20, "setChangeTokenUpdatedBlock:", v53);
  _Block_release(v53);
  v56 = (_QWORD *)swift_allocObject(&unk_100072B48, 72, 7);
  v57 = v77;
  v58 = v78;
  v56[2] = v78;
  v56[3] = v57;
  v59 = v79;
  v56[4] = v79;
  v56[5] = v55;
  v56[6] = v49;
  v56[7] = v46;
  v56[8] = v45;
  v60 = v55;
  v61 = v81;
  swift_retain(v46);
  swift_retain(v49);
  swift_retain(v58);
  swift_retain(v59);
  CKFetchDatabaseChangesOperation.fetchDatabaseChangesResultBlock.setter(sub_10002F448, v56);
  ((void (*)(char *, uint64_t, uint64_t))v75)(v84, v76, v16);
  v62 = (void **)v20;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v81 = v61;
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = (void ***)swift_slowAlloc(8, -1);
    *(_DWORD *)v65 = 138412290;
    aBlock = v62;
    v67 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v87, v65 + 4, v65 + 12);
    *v66 = v62;

    v61 = v81;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Adding Cloud operation %@", v65, 0xCu);
    v68 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v66, 1, v68);
    v69 = v66;
    v16 = v80;
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v65, -1, -1);
  }
  else
  {

    v63 = v62;
  }

  ((void (*)(char *, uint64_t))v74)(v84, v16);
  objc_msgSend(v60, "addOperation:", v62);
  swift_release(v83);
  swift_release(v82);

}

uint64_t sub_1000183E4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD *v19;
  NSObject *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2 + 16, &v27, 33, 0);
  v8 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v8);
  v9 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v11 = *(_QWORD *)(v9 + 0x10);
  v10 = *(_QWORD *)(v9 + 24);
  if (v11 >= v10 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1);
  v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v11, v8);
  specialized Array._endMutation()(v12);
  swift_endAccess(&v27);
  v13 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v13, v4);
  v14 = v8;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(8, -1);
    v26 = v4;
    v27 = v14;
    v19 = (_QWORD *)v18;
    v25 = v7;
    *(_DWORD *)v17 = 138412290;
    v20 = v14;
    v7 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 4, v17 + 12);
    *v19 = v14;

    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Record Zone ID Changed: %@", v17, 0xCu);
    v21 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v19, 1, v21);
    v22 = v19;
    v4 = v26;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }
  else
  {

    v15 = v14;
  }

  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10001861C(void *a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  id v16;
  id v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = a2;
  v10 = a1;
  v11 = v9;
  v12 = v10;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v26 = (_QWORD *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v31 = v29;
    *(_DWORD *)v15 = 136315394;
    v16 = (id)CKDatabaseScopeString(objc_msgSend(v11, "scope"));
    v28 = v5;
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v27 = v4;
    v20 = v19;

    v30 = sub_100002CA8(v18, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);

    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v15 + 12) = 2112;
    v30 = (uint64_t)v12;
    v21 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 14, v15 + 22);
    v22 = v26;
    *v26 = v12;

    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Change token updated, database, %s, token, %@", (uint8_t *)v15, 0x16u);
    v23 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v22, 1, v23);
    swift_slowDealloc(v22, -1, -1);
    v24 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v7, v27);
  }
  else
  {

    return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

void sub_1000188B4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100018904(void *a1, uint64_t a2, _QWORD *a3, void (*a4)(void *, uint64_t), uint64_t a5, void *a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  id v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t *v48;
  os_log_t v49;
  uint64_t v50;
  void **v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  void ***v58;
  void **v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)();
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  void **v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  id *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t *v104;
  __n128 v105;
  unint64_t v106;
  uint64_t v107;
  void *v108;
  void *v109;
  uint8_t *v110;
  Swift::String v111;
  Swift::String v112;
  CKRecordZoneID v113;
  id v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  void *v121;
  uint64_t v122;
  id v123;
  uint8_t *v124;
  uint8_t *v125;
  char v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  NSObject *v131;
  os_log_type_t v132;
  uint64_t v133;
  void **v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  objc_class *v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  void (**v160)(void *, uint64_t);
  void (*v161)(void *, uint64_t);
  void (*v162)(id, uint64_t, uint64_t (*)(uint64_t, char), uint64_t);
  _QWORD *v163;
  void *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void *v169;
  uint64_t v170;
  NSObject *v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t (*v180)();
  uint64_t v181;
  void *v182;
  char *v183;
  __n128 v184;
  uint64_t *v185;
  os_log_t v186;
  void (*v187)(void *, uint64_t);
  void (*v188)(void *, uint64_t);
  char *v189;
  uint64_t v190;
  unsigned int v191;
  void **v192;
  void (*v193)(char *);
  uint64_t v194;
  NSString *v195;
  uint64_t v196;
  id v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  _QWORD *v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *v204;
  id v205;
  _QWORD *v206;
  unint64_t v207;
  _QWORD *v208;
  uint8_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  void **aBlock;
  uint64_t v219;
  uint64_t (*v220)(uint64_t);
  void *v221;
  uint64_t (*v222)();
  uint64_t v223;
  char v224[24];
  uint64_t v225;
  _BYTE v226[24];
  uint64_t v227;
  __int128 v228;
  __int128 v229;
  _QWORD v230[3];

  v206 = a3;
  v207 = a8;
  v187 = a4;
  v188 = a5;
  v13 = type metadata accessor for URL(0);
  v198 = *(_QWORD *)(v13 - 8);
  v199 = v13;
  v14 = *(_QWORD *)(v198 + 64);
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v189 = (char *)&v178 - v17;
  __chkstk_darwin(v16);
  v200 = (char *)&v178 - v18;
  v19 = type metadata accessor for Logger(0);
  v209 = *(uint8_t **)(v19 - 8);
  v20 = __chkstk_darwin(v19);
  v21 = __chkstk_darwin(v20);
  v22 = __chkstk_darwin(v21);
  v204 = (uint64_t *)((char *)&v178 - v23);
  v24 = __chkstk_darwin(v22);
  v208 = (uint64_t *)((char *)&v178 - v25);
  v26 = __chkstk_darwin(v24);
  v28 = (char *)&v178 - v27;
  v29 = __chkstk_darwin(v26);
  v33 = (char *)&v178 - v32;
  v191 = a2;
  v196 = v29;
  if ((a2 & 0x100) != 0)
  {
    swift_errorRetain(a1);
    v52 = sub_10003078C();
    v53 = v209;
    (*((void (**)(char *, uint64_t, uint64_t))v209 + 2))(v33, v52, v19);
    swift_errorRetain(a1);
    v54 = swift_errorRetain(a1);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v57 = 138412290;
      swift_errorRetain(a1);
      v59 = (void **)_swift_stdlib_bridgeErrorToNSError(a1);
      aBlock = v59;
      v53 = v209;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v219, v57 + 4, v57 + 12);
      *v58 = v59;
      sub_10002F488(a1, v191, 1);
      sub_10002F488(a1, v191, 1);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error during fetch database changes operation: %@", v57, 0xCu);
      v60 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v58, 1, v60);
      swift_slowDealloc(v58, -1, -1);
      v61 = v57;
      a2 = v191;
      swift_slowDealloc(v61, -1, -1);
    }
    else
    {
      sub_10002F488(a1, a2, 1);
      sub_10002F488(a1, a2, 1);
    }

    (*((void (**)(char *, uint64_t))v53 + 1))(v33, v196);
    sub_10001DF84((uint64_t)a1, 0);
    swift_errorRetain(a1);
    v187(a1, 1);
    sub_10002F488(a1, a2, 1);
    sub_10002F488(a1, a2, 1);
    return;
  }
  v201 = v31;
  v202 = a7;
  v190 = v30;
  v203 = (uint64_t *)(a7 + 16);
  v205 = a1;
  v34 = sub_10003078C();
  v193 = (void (*)(char *))*((_QWORD *)v209 + 2);
  v194 = v34;
  v193(v28);
  sub_10002F47C(a1, a2, 0);
  v35 = a6;
  sub_10002F47C(a1, a2, 0);
  v36 = v35;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  LODWORD(v195) = v38;
  v39 = os_log_type_enabled(v37, v38);
  v182 = a1;
  v178 = v14;
  v179 = (char *)&v178 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = v36;
  if (v39)
  {
    v40 = swift_slowAlloc(28, -1);
    v186 = v37;
    v41 = v40;
    v185 = (uint64_t *)swift_slowAlloc(8, -1);
    v192 = (void **)swift_slowAlloc(32, -1);
    aBlock = v192;
    *(_DWORD *)v41 = 67109634;
    LODWORD(v225) = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, (char *)&v225 + 4, v41 + 4, v41 + 8);
    *(_WORD *)(v41 + 8) = 2080;
    v42 = (id)CKDatabaseScopeString(objc_msgSend(v36, "scope"));
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v225 = sub_100002CA8(v43, v45, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v41 + 10, v41 + 18);

    swift_bridgeObjectRelease(v45);
    *(_WORD *)(v41 + 18) = 2112;
    v225 = (uint64_t)v205;
    v46 = v205;
    v47 = v191;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v41 + 20, v41 + 28);
    v48 = v185;
    *v185 = (uint64_t)a1;
    sub_10002F488(a1, v47, 0);
    sub_10002F488(a1, v47, 0);
    v49 = v186;
    _os_log_impl((void *)&_mh_execute_header, v186, (os_log_type_t)v195, "Fetch database changes complete, moreComing %{BOOL}d, database, %s, token, %@", (uint8_t *)v41, 0x1Cu);
    v50 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v48, 1, v50);
    swift_slowDealloc(v48, -1, -1);
    v51 = v192;
    swift_arrayDestroy(v192, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v41, -1, -1);

  }
  else
  {

    sub_10002F488(a1, a2, 0);
    sub_10002F488(a1, a2, 0);

  }
  v192 = (void **)*((_QWORD *)v209 + 1);
  ((void (*)(char *, uint64_t))v192)(v28, v19);
  v62 = v203;
  swift_beginAccess(v203, v224, 0, 0);
  v63 = *v62;
  v64 = v202;
  v65 = (uint64_t)v208;
  if ((unint64_t)*v62 >> 62)
  {
    if (v63 < 0)
      v94 = *v62;
    else
      v94 = v63 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v62);
    v66 = (uint64_t (*)())_CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(v63);
    v67 = (uint64_t)v205;
    if (v66)
      goto LABEL_9;
  }
  else
  {
    v66 = *(uint64_t (**)())((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    v67 = (uint64_t)v205;
    if (v66)
    {
LABEL_9:
      v68 = v196;
      ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v65, v194, v196);
      v69 = swift_retain_n(v64, 2);
      v70 = Logger.logObject.getter(v69);
      v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        v72 = (uint8_t *)swift_slowAlloc(12, -1);
        v73 = (void **)swift_slowAlloc(32, -1);
        aBlock = v73;
        *(_DWORD *)v72 = 136315138;
        v209 = v72 + 4;
        swift_beginAccess(v62, &v210, 0, 0);
        v74 = *(_QWORD *)(v64 + 16);
        v75 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
        v76 = swift_bridgeObjectRetain(v74);
        v77 = Array.description.getter(v76, v75);
        v78 = v64;
        v80 = v79;
        v81 = v74;
        v67 = (uint64_t)v205;
        swift_bridgeObjectRelease(v81);
        v82 = v77;
        v62 = v203;
        v225 = sub_100002CA8(v82, v80, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v225, v226, v209, v72 + 12);
        swift_release_n(v78, 2);
        swift_bridgeObjectRelease(v80);
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "Cloud zone deleted: %s", v72, 0xCu);
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        v83 = v206;
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v72, -1, -1);

        ((void (*)(_QWORD *, uint64_t))v192)(v208, v196);
      }
      else
      {

        swift_release_n(v64, 2);
        ((void (*)(uint64_t, uint64_t))v192)(v65, v68);
        v83 = v206;
      }
      v84 = v83[9];
      v85 = swift_allocObject(&unk_100072B70, 32, 7);
      *(_QWORD *)(v85 + 16) = v83;
      *(_QWORD *)(v85 + 24) = v62;
      v86 = swift_allocObject(&unk_100072B98, 32, 7);
      *(_QWORD *)(v86 + 16) = sub_10002F4B8;
      *(_QWORD *)(v86 + 24) = v85;
      v181 = v85;
      v222 = sub_10002FAE8;
      v223 = v86;
      aBlock = _NSConcreteStackBlock;
      v219 = 1107296256;
      v220 = sub_10000D2B0;
      v221 = &unk_100072BB0;
      v87 = (id *)_Block_copy(&aBlock);
      v88 = v223;
      swift_retain(v83);
      swift_retain(v86);
      swift_release(v88);
      dispatch_sync(v84, v87);
      _Block_release(v87);
      LOBYTE(v84) = swift_isEscapingClosureAtFileLocation(v86, "", 119, 459, 53, 1);
      swift_release(v86);
      if ((v84 & 1) != 0)
      {
        __break(1u);
        goto LABEL_83;
      }
      v89 = (char *)v204;
      v90 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v193)(v204, v194, v196);
      v91 = Logger.logObject.getter(v90);
      v92 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v93 = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "Re-Setup Zones", v93, 2u);
        swift_slowDealloc(v93, -1, -1);
      }

      ((void (*)(char *, uint64_t))v192)(v89, v196);
      sub_1000155C8((_BOOL8)_swiftEmptyArrayStorage);
      v66 = sub_10002F4B8;
      goto LABEL_23;
    }
  }
  v181 = 0;
  v83 = v206;
LABEL_23:
  v95 = ((uint64_t (*)(uint64_t *, uint64_t *, _QWORD, _QWORD))swift_beginAccess)(v62, &v217, 0, 0);
  v96 = *v62;
  v97 = (unint64_t)*v62 >> 62;
  v180 = v66;
  if (v97)
    goto LABEL_72;
  v98 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    v87 = (id *)&v225;
    v204 = (uint64_t *)(v207 + 16);
    if (!v98)
      goto LABEL_32;
    v99 = v204;
    v95 = ((uint64_t (*)(uint64_t *, uint64_t *, _QWORD, _QWORD))swift_beginAccess)(v204, &v216, 0, 0);
    v86 = *v99;
    if ((unint64_t)v86 >> 62)
    {
LABEL_83:
      if (v86 < 0)
        v176 = v86;
      else
        v176 = v86 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v86);
      v177 = _CocoaArrayWrapper.endIndex.getter(v176);
      v95 = swift_bridgeObjectRelease(v86);
      if (!v177)
        goto LABEL_32;
    }
    else if (!*(_QWORD *)((v86 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_32;
    }
    if (!a9)
    {
      v100 = ((uint64_t (*)(_QWORD *, uint64_t, uint64_t))v193)(v201, v194, v196);
      v101 = Logger.logObject.getter(v100);
      v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v103 = 0;
        _os_log_impl((void *)&_mh_execute_header, v101, v102, "New Account Setup Zones", v103, 2u);
        swift_slowDealloc(v103, -1, -1);
      }

      ((void (*)(_QWORD *, uint64_t))v192)(v201, v196);
      sub_1000155C8((_BOOL8)_swiftEmptyArrayStorage);
    }
LABEL_32:
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*v83 + 256))(&v225, v95);
    v96 = v227;
    v230[0] = v227;
    v229 = *(_OWORD *)v87;
    swift_bridgeObjectRetain(v227);
    sub_100029DB4((uint64_t)&v229);
    v228 = *((_OWORD *)v87 + 1);
    sub_100029DB4((uint64_t)&v228);
    sub_100029DDC(v230);
    v104 = v204;
    v202 = *(_QWORD *)(v96 + 16);
    v203 = (uint64_t *)v96;
    if (!v202)
      break;
    v201 = v203 + 4;
    v105 = swift_beginAccess(v204, &v215, 0, 0);
    v106 = 0;
    v195 = CKCurrentUserDefaultName;
    v185 = &v214;
    v105.n128_u64[0] = 136315138;
    v184 = v105;
    v183 = (char *)&type metadata for Any + 8;
    while (v106 < v203[2])
    {
      v207 = v106;
      v116 = &v201[2 * v106];
      v117 = v116[1];
      v208 = (_QWORD *)*v116;
      v209 = (uint8_t *)v117;
      v96 = *v104;
      if ((unint64_t)*v104 >> 62)
      {
        if (v96 < 0)
          v142 = *v104;
        else
          v142 = v96 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain_n(*v104, 2);
        swift_bridgeObjectRetain(v117);
        v118 = _CocoaArrayWrapper.endIndex.getter(v142);
        if (v118)
        {
LABEL_41:
          v119 = 4;
          while (1)
          {
            v67 = v119 - 4;
            v120 = (v96 & 0xC000000000000001) != 0
                 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v119 - 4, v96)
                 : *(id *)(v96 + 8 * v119);
            v121 = v120;
            v122 = v119 - 3;
            if (__OFADD__(v67, 1))
              break;
            v123 = objc_msgSend(v120, "zoneName");
            v83 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v123);
            v125 = v124;

            if (v83 == v208 && v125 == v209)
            {
              v137 = (uint64_t)v209;
              swift_bridgeObjectRelease_n(v96, 2);

              v96 = v137;
LABEL_57:
              swift_bridgeObjectRelease(v96);
              swift_bridgeObjectRelease(v137);
              v83 = v206;
              goto LABEL_36;
            }
            v127 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v125, v208, v209, 0);

            swift_bridgeObjectRelease(v125);
            if ((v127 & 1) != 0)
            {
              swift_bridgeObjectRelease(v96);
              v137 = (uint64_t)v209;
              goto LABEL_57;
            }
            ++v119;
            if (v122 == v118)
              goto LABEL_34;
          }
          __break(1u);
          break;
        }
      }
      else
      {
        v118 = *(_QWORD *)((v96 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(*v104, 2);
        swift_bridgeObjectRetain(v117);
        if (v118)
          goto LABEL_41;
      }
LABEL_34:
      swift_bridgeObjectRelease_n(v96, 2);
      sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
      v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v195);
      v109 = v108;
      v110 = v209;
      swift_bridgeObjectRetain(v209);
      v111._countAndFlagsBits = (uint64_t)v208;
      v111._object = v110;
      v112._countAndFlagsBits = v107;
      v112._object = v109;
      v113.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v111, v112).super.isa;
      v114 = objc_msgSend(v197, "scope");
      v115 = (uint64_t)v200;
      v83 = v206;
      sub_1000173F0((uint64_t)v114, v113.super.isa);
      v96 = sub_10002A2CC(v115);

      if (v96)
      {
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v115, v199);
        swift_bridgeObjectRelease(v110);

LABEL_36:
        v104 = v204;
        v67 = (uint64_t)v205;
      }
      else
      {
        v128 = v190;
        v129 = v196;
        ((void (*)(uint64_t, uint64_t, uint64_t))v193)(v190, v194, v196);
        v130 = swift_bridgeObjectRetain(v110);
        v131 = Logger.logObject.getter(v130);
        v132 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v131, v132))
        {
          v133 = swift_slowAlloc(12, -1);
          v134 = (void **)swift_slowAlloc(32, -1);
          aBlock = v134;
          *(_DWORD *)v133 = v184.n128_u32[0];
          v186 = (os_log_t)(v133 + 4);
          swift_bridgeObjectRetain(v110);
          v213 = sub_100002CA8((uint64_t)v208, (unint64_t)v110, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, v185, v186, v133 + 12);
          swift_bridgeObjectRelease_n(v110, 3);
          _os_log_impl((void *)&_mh_execute_header, v131, v132, "Adding fetch operation for new zone: %s", (uint8_t *)v133, 0xCu);
          swift_arrayDestroy(v134, 1, v183);
          swift_slowDealloc(v134, -1, -1);
          swift_slowDealloc(v133, -1, -1);

          v135 = v128;
          v136 = v196;
        }
        else
        {

          swift_bridgeObjectRelease_n(v110, 2);
          v135 = v128;
          v136 = v129;
        }
        ((void (*)(uint64_t, uint64_t))v192)(v135, v136);
        v104 = v204;
        swift_beginAccess(v204, &aBlock, 33, 0);
        v138 = v113.super.isa;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v138);
        v140 = *(_QWORD *)((*v104 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v139 = *(_QWORD *)((*v104 & 0xFFFFFFFFFFFFFF8) + 0x18);
        v67 = (uint64_t)v205;
        if (v140 >= v139 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v139 > 1, v140 + 1, 1);
        v96 = (uint64_t)v104;
        v141 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v140, v138);
        specialized Array._endMutation()(v141);
        swift_endAccess(&aBlock);

        (*(void (**)(char *, uint64_t))(v198 + 8))(v200, v199);
      }
      v106 = v207 + 1;
      if (v207 + 1 == v202)
        goto LABEL_67;
    }
    __break(1u);
LABEL_72:
    if (v96 < 0)
      v166 = v96;
    else
      v166 = v96 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v96);
    v98 = _CocoaArrayWrapper.endIndex.getter(v166);
    v95 = swift_bridgeObjectRelease(v96);
  }
LABEL_67:
  sub_100029DDC(v230);
  swift_beginAccess(v104, &v213, 0, 0);
  v143 = *v104;
  swift_retain(v83);
  v144 = swift_bridgeObjectRetain(v143);
  v145 = sub_10002B360(v144, (uint64_t)v83);
  swift_bridgeObjectRelease(v143);
  swift_release(v83);
  swift_beginAccess(v104, &v212, 1, 0);
  v146 = *v104;
  *v104 = (uint64_t)v145;
  swift_bridgeObjectRelease(v146);
  sub_1000171D0((uint64_t)objc_msgSend(v197, "scope"));
  swift_beginAccess(v104, &v211, 0, 0);
  v147 = *v104;
  if ((unint64_t)*v104 >> 62)
  {
    if (v147 < 0)
      v167 = *v104;
    else
      v167 = v147 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v104);
    v168 = _CocoaArrayWrapper.endIndex.getter(v167);
    swift_bridgeObjectRelease(v147);
    v149 = (uint64_t)v189;
    if (!v168)
      goto LABEL_80;
LABEL_69:
    v150 = swift_beginAccess(v104, &aBlock, 0, 0);
    v151 = *v104;
    v152 = v83;
    v154 = v198;
    v153 = v199;
    v155 = v179;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v198 + 16))(v179, v149, v199, v150);
    v156 = *(unsigned __int8 *)(v154 + 80);
    v157 = (v156 + 32) & ~v156;
    v158 = (v178 + v157 + 7) & 0xFFFFFFFFFFFFFFF8;
    v159 = swift_allocObject(&unk_100072BE8, v158 + 16, v156 | 7);
    *(_QWORD *)(v159 + 16) = v152;
    *(_QWORD *)(v159 + 24) = v67;
    (*(void (**)(uint64_t, char *, uint64_t))(v154 + 32))(v159 + v157, v155, v153);
    v160 = (void (**)(void *, uint64_t))(v159 + v158);
    v161 = v188;
    *v160 = v187;
    v160[1] = (void (*)(void *, uint64_t))v161;
    v162 = *(void (**)(id, uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*v152 + 832);
    v163 = v152;
    v164 = v182;
    v165 = v191;
    sub_10002F47C(v182, v191, 0);
    swift_retain(v163);
    swift_bridgeObjectRetain(v151);
    swift_retain((void (*)(void *, uint64_t))v161);
    v162(v197, v151, sub_10002F678, v159);
    swift_bridgeObjectRelease(v151);
    swift_release(v159);
    sub_10002F488(v164, v165, 0);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v189, v153);
    sub_10002F6E0((uint64_t)v180, v181);
  }
  else
  {
    v148 = *(_QWORD *)((v147 & 0xFFFFFFFFFFFFF8) + 0x10);
    v149 = (uint64_t)v189;
    if (v148)
      goto LABEL_69;
LABEL_80:
    v169 = v182;
    v170 = v191;
    sub_10002F47C(v182, v191, 0);
    sub_10002A958(v169, v149);
    sub_10002F488(v169, v170, 0);
    v171 = v83[9];
    v172 = v149;
    v173 = swift_allocObject(&unk_100072C10, 32, 7);
    *(_QWORD *)(v173 + 16) = sub_10002F6F0;
    *(_QWORD *)(v173 + 24) = v83;
    v222 = sub_10002FAE8;
    v223 = v173;
    aBlock = _NSConcreteStackBlock;
    v219 = 1107296256;
    v220 = sub_10000D2B0;
    v221 = &unk_100072C28;
    v174 = _Block_copy(&aBlock);
    v175 = v223;
    swift_retain(v83);
    swift_retain(v173);
    swift_release(v175);
    dispatch_sync(v171, v174);
    _Block_release(v174);
    LOBYTE(v171) = swift_isEscapingClosureAtFileLocation(v173, "", 119, 503, 53, 1);
    swift_release(v173);
    if ((v171 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      v187(0, 0);
      sub_10002F488(v169, v170, 0);
      (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v172, v199);
      sub_10002F6E0((uint64_t)v180, v181);
      swift_release(v83);
    }
  }
}

uint64_t sub_100019CA0(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t *v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;

  v3 = a3[2];
  if (!v3)
    return 0;
  v7 = a3[4];
  v8 = a3[5];
  if (v7 == a1 && v8 == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, a1, a2, 0);
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v11 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v13 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v14 = *(v11 - 1);
    v15 = *v11;
    v16 = v14 == a1 && v15 == a2;
    if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a1, a2, 0) & 1) != 0)
      return 1;
    result = 0;
    v11 += 2;
    if (v13 == v3)
      return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100019D64(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = sub_10000215C(&qword_10007AE48);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_10001128C(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12, &qword_10007AE48);
      v17 = a1(v12);
      if (v3)
      {
        sub_10000BCBC((uint64_t)v12, &qword_10007AE48);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_100004064((uint64_t)v12, v23, &qword_10007AE48);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_1000280E8(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_1000280E8(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_100004064(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13, &qword_10007AE48);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_10000BCBC((uint64_t)v12, &qword_10007AE48);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_100019F80(uint64_t a1, char a2, void *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t), void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t *v38;
  os_log_t v39;
  void *v40;
  uint64_t (*v41)(uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;

  v41 = a5;
  v11 = a2 & 1;
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  v18 = (char *)&v37 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    v25 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, v25, v12);
    swift_errorRetain(a1);
    v26 = swift_errorRetain(a1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v39 = v27;
      v29 = swift_slowAlloc(12, -1);
      v40 = a6;
      v30 = (uint8_t *)v29;
      v38 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 138412290;
      swift_errorRetain(a1);
      v31 = v11;
      v32 = _swift_stdlib_bridgeErrorToNSError(a1);
      v42 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v30 + 4, v30 + 12);
      v33 = v38;
      *v38 = v32;
      v11 = v31;
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
      v34 = v39;
      _os_log_impl((void *)&_mh_execute_header, v39, v28, "Database Error from fetchZoneChanges: %@", v30, 0xCu);
      v35 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v33, 1, v35);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      sub_10002E214(a1, 1);
    }
    else
    {
      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);
      swift_errorRelease(a1);

    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  else
  {
    v19 = sub_10003078C();
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v19, v12);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      v40 = a3;
      v24 = v23;
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Database fetchZoneChanges succeeded", v23, 2u);
      a3 = v40;
      swift_slowDealloc(v24, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    sub_10002A958(a3, a4);
  }
  return v41(a1, v11);
}

uint64_t sub_10001A2A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  _QWORD *v38;

  v5 = v4;
  v31 = a3;
  v32 = a4;
  v30 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v10 - 8);
  v34 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011254(0, (unint64_t *)&qword_10007A900, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v18 = (_QWORD *)swift_allocObject(&unk_100071ED8, 56, 7);
  v18[2] = a2;
  v18[3] = v4;
  v20 = v30;
  v19 = v31;
  v18[4] = v30;
  v18[5] = v19;
  v21 = v32;
  v18[6] = v32;
  aBlock[4] = sub_10002B320;
  v38 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100071EF0;
  v22 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain(v5);
  v23 = v20;
  v24 = swift_retain(v21);
  static DispatchQoS.unspecified.getter(v24);
  v36 = _swiftEmptyArrayStorage;
  v25 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_10000215C((uint64_t *)&unk_10007A960);
  v27 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v12, v34);
  return swift_release(v38);
}

uint64_t sub_10001A550(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void (*v21)(char *);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t (*v34)(char *, _QWORD *);
  uint64_t result;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  _QWORD *v48;
  uint64_t v49;
  id v50;
  _QWORD *v51;
  char isUniquelyReferenced_nonNull_native;
  id v53;
  id v54;
  id v55;
  id v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  uint8_t *v65;
  id v66;
  uint8_t **v67;
  os_log_type_t v68;
  os_log_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t (*v77)(char *, _QWORD *);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BOOL8 v94;
  Class isa;
  _QWORD *v96;
  uint64_t v97;
  id v98;
  id v99;
  _QWORD *v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  void (*v104)(char *);
  _QWORD *v105;
  objc_class *v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  objc_class **v110;
  objc_class *v111;
  void (*v112)(char *, _QWORD *);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  __n128 v122;
  _BYTE *v123;
  char *v124;
  char *v125;
  _QWORD *v126;
  uint64_t v127;
  uint8_t **v128;
  uint64_t v129;
  os_log_t v130;
  id v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t (*v136)(char *, _QWORD *);
  id v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(char *);
  uint8_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _BYTE v146[16];
  uint64_t v147;
  Swift::OpaquePointer_optional v148;
  Swift::OpaquePointer_optional v149;

  v117 = a5;
  v137 = a3;
  v138 = a2;
  v7 = type metadata accessor for URL(0);
  v134 = *(_QWORD *)(v7 - 8);
  v135 = v7;
  __chkstk_darwin(v7);
  v125 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (_QWORD *)type metadata accessor for Logger(0);
  v10 = *(v9 - 1);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v124 = (char *)&v116 - v15;
  v16 = __chkstk_darwin(v14);
  v120 = (char *)&v116 - v17;
  __chkstk_darwin(v16);
  v19 = (char *)&v116 - v18;
  v20 = sub_10003078C();
  v21 = *(void (**)(char *))(v10 + 16);
  v139 = v20;
  v21(v19);
  v22 = swift_bridgeObjectRetain_n(a1, 2);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v126 = v9;
  v127 = a1;
  v140 = v21;
  v119 = v13;
  v118 = a4;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v147 = v27;
    *(_DWORD *)v26 = 136315138;
    v28 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v127);
    v29 = Array.description.getter(v127, v28);
    v31 = v30;
    swift_bridgeObjectRelease(v127);
    v32 = v29;
    v33 = v126;
    v145 = sub_100002CA8(v32, v31, &v147);
    v9 = v33;
    a1 = v127;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v146, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v31);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "zoneIDs changed: %s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v34 = *(uint64_t (**)(char *, _QWORD *))(v10 + 8);
  result = v34(v19, v9);
  v36 = (char *)&type metadata for Any;
  v37 = (uint64_t)v125;
  v38 = v124;
  if ((unint64_t)a1 >> 62)
  {
LABEL_33:
    if (a1 < 0)
      v115 = a1;
    else
      v115 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v39 = _CocoaArrayWrapper.endIndex.getter(v115);
    result = swift_bridgeObjectRelease(a1);
    if (!v39)
      return result;
  }
  else
  {
    v39 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v39)
      return result;
  }
  v144 = (uint64_t)&_swiftEmptyDictionarySingleton;
  if (v39 < 1)
    __break(1u);
  v133 = a1 & 0xC000000000000001;
  v123 = v146;
  v40 = swift_bridgeObjectRetain(a1);
  v41 = 0;
  v40.n128_u64[0] = 136315394;
  v122 = v40;
  v121 = v36 + 8;
  v132 = v39;
  do
  {
    v42 = v9;
    v43 = a1;
    if (v133)
      v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, a1);
    else
      v44 = *(id *)(a1 + 8 * v41 + 32);
    v45 = v44;
    v9 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration), "init");
    sub_1000173F0((uint64_t)objc_msgSend(v137, "scope"), v45);
    a1 = sub_10002A2CC(v37);
    v46 = (void *)sub_10002A2CC(v37);
    objc_msgSend(v9, "setPreviousServerChangeToken:", v46);

    v36 = (char *)v144;
    v142 = v41;
    if ((v144 & 0xC000000000000001) != 0)
    {
      if (v144 >= 0)
        v36 = (char *)(v144 & 0xFFFFFFFFFFFFFF8);
      v47 = v45;
      v48 = v9;
      v49 = __CocoaDictionary.count.getter(v36);
      if (__OFADD__(v49, 1))
      {
        __break(1u);
        goto LABEL_33;
      }
      v36 = (char *)sub_1000283CC((uint64_t)v36, v49 + 1);
    }
    else
    {
      v50 = v45;
      v51 = v9;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
    v147 = (uint64_t)v36;
    sub_100028EB0((uint64_t)v9, v45, isUniquelyReferenced_nonNull_native);
    v144 = v147;

    swift_bridgeObjectRelease(0x8000000000000000);
    ((void (*)(char *, uint64_t, _QWORD *))v140)(v38, v139, v42);
    v141 = (uint8_t *)a1;
    v53 = (id)a1;
    v54 = v45;
    v55 = v53;
    v56 = v54;
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v130 = v57;
      v131 = v9;
      v136 = v34;
      v59 = swift_slowAlloc(22, -1);
      v128 = (uint8_t **)swift_slowAlloc(8, -1);
      v129 = swift_slowAlloc(32, -1);
      v147 = v129;
      *(_DWORD *)v59 = v122.n128_u32[0];
      v60 = objc_msgSend(v56, "zoneName");
      v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
      v63 = v62;

      v145 = sub_100002CA8(v61, v63, &v147);
      v64 = v123;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v123, v59 + 4, v59 + 12);

      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v59 + 12) = 2112;
      v65 = v141;
      if (v141)
      {
        v145 = (uint64_t)v55;
        v66 = v55;
      }
      else
      {
        v145 = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, v64, v59 + 14, v59 + 22);
      v37 = (uint64_t)v125;
      v67 = v128;
      *v128 = v65;

      v68 = v58;
      v69 = v130;
      _os_log_impl((void *)&_mh_execute_header, v130, v68, "Old change token for %s : %@", (uint8_t *)v59, 0x16u);
      v70 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v67, 1, v70);
      swift_slowDealloc(v67, -1, -1);
      v71 = v129;
      swift_arrayDestroy(v129, 1, v121);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      v38 = v124;
      v9 = v126;
      v34 = v136;
      v136(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v37, v135);
      a1 = v127;
    }
    else
    {

      v34(v38, v42);
      (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v37, v135);
      a1 = v43;
      v9 = v42;
    }
    v41 = v142 + 1;
  }
  while (v132 != v142 + 1);
  swift_bridgeObjectRelease(a1);
  v72 = v120;
  v73 = ((uint64_t (*)(char *, uint64_t, _QWORD *))v140)(v120, v139, v9);
  v74 = Logger.logObject.getter(v73);
  v75 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v74, v75))
  {
    v76 = (uint8_t *)swift_slowAlloc(12, -1);
    v142 = swift_slowAlloc(32, -1);
    v147 = v142;
    *(_DWORD *)v76 = 136315138;
    v141 = v76 + 4;
    swift_beginAccess(&v144, &v145, 0, 0);
    v77 = v34;
    v78 = v144;
    v79 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
    v80 = sub_100011254(0, &qword_10007B378, CKFetchRecordZoneChangesConfiguration_ptr);
    v81 = sub_10002E244(&qword_10007B380, &qword_10007B310, CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v78);
    v83 = Dictionary.description.getter(v82, v79, v80, v81);
    v85 = v84;
    swift_bridgeObjectRelease(v78);
    v86 = v83;
    a1 = v127;
    v143 = sub_100002CA8(v86, v85, &v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v141, v76 + 12);
    v87 = v85;
    v88 = v126;
    swift_bridgeObjectRelease(v87);
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "optionsByRecordZoneID: %s", v76, 0xCu);
    v89 = v142;
    swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v89, -1, -1);
    swift_slowDealloc(v76, -1, -1);

    v136 = v77;
    v77(v120, v88);
    v90 = v119;
    v91 = v117;
  }
  else
  {

    v136 = v34;
    v34(v72, v9);
    v90 = v119;
    v91 = v117;
    v88 = v9;
  }
  v92 = swift_allocObject(&unk_100072918, 24, 7);
  *(_QWORD *)(v92 + 16) = _swiftEmptyArrayStorage;
  v93 = swift_allocObject(&unk_100072940, 24, 7);
  *(_QWORD *)(v93 + 16) = _swiftEmptyArrayStorage;
  sub_100011254(0, &qword_10007B370, CKFetchRecordZoneChangesOperation_ptr);
  swift_beginAccess(&v144, &v147, 0, 0);
  v94 = v144;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v94);
  v148.value._rawValue = (void *)a1;
  v148.is_nil = v94;
  isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v148, v149).super.super.super.super.isa;
  -[objc_class setFetchAllChanges:](isa, "setFetchAllChanges:", 1);
  swift_retain(v93);
  CKFetchRecordZoneChangesOperation.recordWasChangedBlock.setter(sub_10002EFF4, v93);
  swift_retain(v92);
  CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10002F000, v92);
  v96 = (_QWORD *)swift_allocObject(&unk_100072968, 48, 7);
  v98 = v137;
  v97 = v138;
  v96[2] = v137;
  v96[3] = v97;
  v96[4] = v93;
  v96[5] = v92;
  v141 = (uint8_t *)v93;
  swift_retain(v93);
  v142 = v92;
  swift_retain(v92);
  v99 = v98;
  swift_retain(v97);
  CKFetchRecordZoneChangesOperation.recordZoneFetchResultBlock.setter(sub_10002F06C, v96);
  v100 = (_QWORD *)swift_allocObject(&unk_100072990, 56, 7);
  v101 = a1;
  v102 = v100;
  v100[2] = v99;
  v100[3] = v101;
  v103 = v118;
  v100[4] = v97;
  v100[5] = v103;
  v100[6] = v91;
  swift_bridgeObjectRetain(v101);
  v104 = (void (*)(char *))v99;
  swift_retain(v97);
  swift_retain(v91);
  CKFetchRecordZoneChangesOperation.fetchRecordZoneChangesResultBlock.setter(sub_10002F0D4, v102);
  v105 = v88;
  ((void (*)(char *, uint64_t, _QWORD *))v140)(v90, v139, v88);
  v106 = isa;
  v107 = Logger.logObject.getter(v106);
  v108 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v107, v108))
  {
    v109 = (uint8_t *)swift_slowAlloc(12, -1);
    v110 = (objc_class **)swift_slowAlloc(8, -1);
    v140 = v104;
    *(_DWORD *)v109 = 138412290;
    v143 = (uint64_t)v106;
    v111 = v106;
    v112 = (void (*)(char *, _QWORD *))v136;
    v104 = v140;
    v113 = v119;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, &v144, v109 + 4, v109 + 12);
    *v110 = v106;

    _os_log_impl((void *)&_mh_execute_header, v107, v108, "Adding Cloud operation %@", v109, 0xCu);
    v114 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v110, 1, v114);
    v105 = v126;
    swift_slowDealloc(v110, -1, -1);
    swift_slowDealloc(v109, -1, -1);
  }
  else
  {
    v113 = v90;

    v107 = v106;
    v112 = (void (*)(char *, _QWORD *))v136;
  }

  v112(v113, v105);
  objc_msgSend(v104, "addOperation:", v106);
  swift_release(v142);
  swift_release(v141);

  return swift_bridgeObjectRelease(v144);
}

uint64_t sub_10001B254(void *a1, void *a2, int a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *);
  NSObject *v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  NSObject *v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  uint8_t *v31;
  void (*v32)(char *, uint64_t);
  _QWORD *v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  NSObject *v40;
  NSObject *v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  void *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  char *v55;
  int v56;
  NSObject *v57;
  NSObject *v58;
  id v59;
  NSObject *v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  id v66;
  id v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSString v75;
  id v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  void *v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  NSObject *v99;
  _BYTE v100[16];

  v92 = a4;
  LODWORD(v96) = a3;
  v6 = type metadata accessor for Logger(0);
  v7 = *(uint64_t **)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v88 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)&v88 - v14;
  v16 = sub_10003078C();
  v17 = (void (*)(char *))v7[2];
  v97 = (void (*)(char *, uint64_t))v16;
  v17(v15);
  v18 = a1;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  v21 = os_log_type_enabled(v19, v20);
  v95 = v6;
  if (v21)
  {
    v22 = swift_slowAlloc(12, -1);
    v94 = a2;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(8, -1);
    v93 = v13;
    v89 = v24;
    v90 = v7;
    *(_DWORD *)v23 = 138412290;
    v99 = v18;
    v25 = v18;
    v91 = (uint64_t)v17;
    v26 = v10;
    v27 = v25;
    v6 = v95;
    v7 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v23 + 4, v23 + 12);
    v28 = v89;
    v89->isa = (Class)v18;

    v10 = v26;
    v17 = (void (*)(char *))v91;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "RecordID changed: %@", v23, 0xCu);
    v29 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v28, 1, v29);
    v30 = v28;
    v13 = v93;
    swift_slowDealloc(v30, -1, -1);
    v31 = v23;
    a2 = v94;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {

    v19 = v18;
  }

  v32 = (void (*)(char *, uint64_t))v7[1];
  v32(v15, v6);
  if ((v96 & 1) != 0)
  {
    ((void (*)(char *, void (*)(char *, uint64_t), uint64_t))v17)(v13, v97, v6);
    sub_10002E284(a2, 1);
    v40 = v18;
    sub_10002E284(a2, 1);
    v41 = v40;
    v42 = sub_10002E284(a2, 1);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v97 = v32;
      v46 = v45;
      v47 = swift_slowAlloc(16, -1);
      v93 = v13;
      v48 = (_QWORD *)v47;
      *(_DWORD *)v46 = 138412546;
      v49 = a2;
      v99 = v41;
      v50 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v46 + 4, v46 + 12);
      *v48 = v41;

      *(_WORD *)(v46 + 12) = 2112;
      swift_errorRetain(a2);
      v51 = _swift_stdlib_bridgeErrorToNSError(a2);
      v99 = v51;
      v6 = v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v46 + 14, v46 + 22);
      v48[1] = v51;
      sub_10002EAB4(v49, 1);
      sub_10002EAB4(v49, 1);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%@ failed to be fetched: %@", (uint8_t *)v46, 0x16u);
      v52 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v48, 2, v52);
      v53 = v48;
      v13 = v93;
      swift_slowDealloc(v53, -1, -1);
      v54 = v46;
      v32 = v97;
      swift_slowDealloc(v54, -1, -1);

      sub_10002EAB4(v49, 1);
    }
    else
    {
      sub_10002EAB4(a2, 1);

      sub_10002EAB4(a2, 1);
      sub_10002EAB4(a2, 1);

    }
    v55 = v13;
    return ((uint64_t (*)(char *, uint64_t))v32)(v55, v6);
  }
  v33 = (_QWORD *)(v92 + 16);
  swift_beginAccess(v92 + 16, &v99, 33, 0);
  v34 = a2;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v34);
  v36 = *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v35 = *(_QWORD *)((*v33 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v36 >= v35 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
  v37 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v36, v34);
  specialized Array._endMutation()(v37);
  swift_endAccess(&v99);
  v38 = ((uint64_t (*)(char *, void (*)(char *, uint64_t), uint64_t))v17)(v10, v97, v6);
  if (IsAppleInternalBuild(v38))
    v39 = static os_log_type_t.default.getter();
  else
    v39 = static os_log_type_t.debug.getter();
  v56 = v39;
  v57 = v18;
  sub_10002E284(a2, 0);
  v58 = v57;
  v59 = sub_10002E284(a2, 0);
  v60 = Logger.logObject.getter(v59);
  if (!os_log_type_enabled(v60, (os_log_type_t)v56))
  {
    sub_10002EAB4(a2, 0);

    sub_10002EAB4(a2, 0);
    sub_10002EAB4(a2, 0);

    v55 = v10;
    return ((uint64_t (*)(char *, uint64_t))v32)(v55, v6);
  }
  LODWORD(v93) = v56;
  v96 = v10;
  v97 = v32;
  v94 = a2;
  v61 = swift_slowAlloc(22, -1);
  v91 = swift_slowAlloc(64, -1);
  v99 = v91;
  *(_DWORD *)v61 = 136315394;
  v62 = -[NSObject recordName](v58, "recordName");
  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
  v65 = v64;

  v98 = sub_100002CA8(v63, v65, (uint64_t *)&v99);
  v90 = (uint64_t *)&v99;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v61 + 4, v61 + 12);

  swift_bridgeObjectRelease(v65);
  v92 = v61;
  *(_WORD *)(v61 + 12) = 2080;
  v66 = objc_msgSend(v34, "encryptedValues");
  v67 = objc_msgSend(v66, "allKeys");
  swift_unknownObjectRelease(v66);
  v68 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v67, &type metadata for String);

  v69 = _swiftEmptyArrayStorage;
  v98 = (uint64_t)_swiftEmptyArrayStorage;
  v70 = *(_QWORD *)(v68 + 16);
  if (v70)
  {
    v89 = v60;
    swift_bridgeObjectRetain(v68);
    v71 = (_QWORD *)(v68 + 40);
    do
    {
      v73 = *v71;
      swift_bridgeObjectRetain(*v71);
      v74 = objc_msgSend(v34, "encryptedValues");
      v75 = String._bridgeToObjectiveC()();
      v76 = objc_msgSend(v74, "objectForKeyedSubscript:", v75);
      swift_bridgeObjectRelease(v73);

      v77 = swift_unknownObjectRelease(v74);
      if (v76)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v77);
        v79 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v78 = *(_QWORD *)((v98 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v79 >= v78 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v78 > 1, v79 + 1, 1);
        v72 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v79, v76);
        specialized Array._endMutation()(v72);
      }
      v71 += 2;
      --v70;
    }
    while (v70);
    swift_bridgeObjectRelease(v68);
    v69 = (_QWORD *)v98;
    v6 = v95;
    v60 = v89;
  }
  swift_bridgeObjectRelease(v68);
  v81 = (uint8_t *)v92;
  v82 = sub_10000215C(&qword_10007B510);
  v83 = Array.description.getter(v69, v82);
  v85 = v84;
  swift_bridgeObjectRelease(v69);
  v98 = sub_100002CA8(v83, v85, (uint64_t *)&v99);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v90, v81 + 14, v81 + 22);
  swift_bridgeObjectRelease(v85);
  v86 = v94;
  sub_10002EAB4(v94, 0);
  sub_10002EAB4(v86, 0);
  _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v93, "CKRecord fetched: %s - %s", v81, 0x16u);
  v87 = v91;
  swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v87, -1, -1);
  swift_slowDealloc(v81, -1, -1);

  sub_10002EAB4(v86, 0);
  return ((uint64_t (*)(char *, uint64_t))v97)(v96, v6);
}

uint64_t sub_10001BA94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD **v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject **v21;
  uint64_t v22;
  uint8_t *v23;
  _QWORD *v24;
  NSObject *v25;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  NSObject **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD **)(a4 + 16);
  v13 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v13, v8);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v33 = v8;
    v17 = swift_slowAlloc(12, -1);
    v35 = a3;
    v18 = (uint8_t *)v17;
    v31 = (NSObject **)swift_slowAlloc(8, -1);
    v34 = a2;
    *(_DWORD *)v18 = 138412290;
    v36 = v14;
    v19 = v14;
    v32 = v9;
    v20 = v19;
    v8 = v33;
    a2 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v18 + 4, v18 + 12);
    v21 = v31;
    *v31 = v14;

    v9 = v32;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Record deleted: %@", v18, 0xCu);
    v22 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v21, 1, v22);
    swift_slowDealloc(v21, -1, -1);
    v23 = v18;
    a3 = v35;
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {

    v15 = v14;
  }

  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_beginAccess(v12, &v36, 33, 0);
  v24 = *v12;
  v25 = v14;
  swift_bridgeObjectRetain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v24);
  *v12 = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v24 = sub_100027BC0(0, v24[2] + 1, 1, v24);
    *v12 = v24;
  }
  v28 = v24[2];
  v27 = v24[3];
  if (v28 >= v27 >> 1)
  {
    v24 = sub_100027BC0((_QWORD *)(v27 > 1), v28 + 1, 1, v24);
    *v12 = v24;
  }
  v24[2] = v28 + 1;
  v29 = &v24[3 * v28];
  v29[4] = v25;
  v29[5] = a2;
  v29[6] = a3;
  return swift_endAccess(&v36);
}

void sub_10001BD28(void *a1, void *a2, uint64_t *a3, unint64_t a4, uint64_t a5, void *a6, _QWORD *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  void (*v23)(uint64_t *, uint64_t *, uint64_t);
  id v24;
  id v25;
  id v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void *v43;
  id v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  void *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  _QWORD *v56;
  uint64_t *v57;
  NSObject *v58;
  BOOL v59;
  void *v60;
  uint64_t isEscapingClosureAtFileLocation;
  uint64_t *v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  os_log_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  void *v85;
  id v86;
  id v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint64_t v91;
  uint64_t *v92;
  id v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t (*v115)();
  id v116;
  id v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  id v121;
  uint64_t v122;
  uint64_t *v123;
  void *v124;
  void *v125;
  uint64_t v126;
  uint64_t v127;
  os_log_t v128;
  id v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  char *v135;
  _QWORD *v136;
  uint64_t *v137;
  void (*v138)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v139;
  _QWORD *v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  void *v144;
  char v145[24];
  char v146[24];
  char v147[24];
  char v148[24];
  __int128 aBlock;
  __int128 v150;
  uint64_t (*v151)();
  uint64_t v152;
  uint64_t v153;
  char v154[8];
  __int128 v155;
  __int128 v156;

  v143 = a8;
  v140 = a7;
  v142 = a3;
  v144 = a2;
  v133 = type metadata accessor for URL(0);
  v132 = *(_QWORD *)(v133 - 8);
  __chkstk_darwin(v133);
  v131 = (char *)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD **)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v135 = (char *)&v127 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v141 = (uint64_t *)((char *)&v127 - v19);
  __chkstk_darwin(v18);
  v21 = (char *)&v127 - v20;
  v22 = (uint64_t *)sub_10003078C();
  v136 = v15;
  v23 = (void (*)(_QWORD))v15[2];
  v137 = v22;
  v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v23;
  v23(v21);
  v24 = a6;
  v25 = a1;
  v26 = v24;
  v27 = v25;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.default.getter();
  v30 = v29;
  v31 = os_log_type_enabled(v28, v29);
  v139 = v14;
  if (v31)
  {
    v32 = swift_slowAlloc(22, -1);
    LODWORD(v128) = v30;
    v33 = v32;
    v129 = (id)swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v129;
    *(_DWORD *)v33 = 136315394;
    v34 = (id)CKDatabaseScopeString(objc_msgSend(v26, "scope"));
    LODWORD(v134) = a5;
    v35 = v34;
    v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
    v130 = a4;
    v38 = v37;

    v153 = sub_100002CA8(v36, v38, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v33 + 4, v33 + 12);

    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v33 + 12) = 2080;
    v39 = objc_msgSend(v27, "zoneName");
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v42 = v41;

    a4 = v130;
    v153 = sub_100002CA8(v40, v42, (uint64_t *)&aBlock);
    a5 = v134;
    v14 = v139;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v33 + 14, v33 + 22);

    v43 = v27;
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v128, "record zone fetch complete, database, %s, zone, %s", (uint8_t *)v33, 0x16u);
    v44 = v129;
    swift_arrayDestroy(v129, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    v43 = v27;
  }
  v45 = (void (*)(char *, uint64_t))v136[1];
  v45(v21, v14);
  v46 = v143;
  v47 = (uint64_t)v142;
  v48 = (char *)v141;
  if ((a5 & 0x100) != 0)
  {
    v138(v141, v137, v14);
    v85 = v144;
    sub_10002F274(v144, v47, a4, a5, 1);
    v86 = v26;
    sub_10002F274(v85, v47, a4, a5, 1);
    v87 = v86;
    v88 = sub_10002F274(v85, v47, a4, a5, 1);
    v89 = Logger.logObject.getter(v88);
    v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = swift_slowAlloc(22, -1);
      v92 = (uint64_t *)swift_slowAlloc(8, -1);
      v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v45;
      v137 = v92;
      v143 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v143;
      *(_DWORD *)v91 = 136315394;
      LODWORD(v134) = a5;
      v93 = (id)CKDatabaseScopeString(objc_msgSend(v87, "scope"));
      v94 = a4;
      v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      v96 = v89;
      v98 = v97;

      v99 = v95;
      a4 = v94;
      v153 = sub_100002CA8(v99, v98, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v91 + 4, v91 + 12);

      v100 = v144;
      v47 = (uint64_t)v142;
      swift_bridgeObjectRelease(v98);
      *(_WORD *)(v91 + 12) = 2112;
      swift_errorRetain(v100);
      v101 = _swift_stdlib_bridgeErrorToNSError(v100);
      v153 = v101;
      a5 = v134;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, v91 + 14, v91 + 22);
      v102 = v137;
      *v137 = v101;
      sub_10002F2A8(v100, v47, a4, a5, 1);
      sub_10002F2A8(v100, v47, a4, a5, 1);
      _os_log_impl((void *)&_mh_execute_header, v96, v90, "Error fetching zone changes for %s database: %@", (uint8_t *)v91, 0x16u);
      v103 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v102, 1, v103);
      swift_slowDealloc(v102, -1, -1);
      v104 = v143;
      swift_arrayDestroy(v143, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v104, -1, -1);
      swift_slowDealloc(v91, -1, -1);

      ((void (*)(uint64_t *, uint64_t))v138)(v141, v139);
    }
    else
    {

      v124 = v144;
      sub_10002F2A8(v144, v47, a4, a5, 1);
      sub_10002F2A8(v124, v47, a4, a5, 1);

      v45(v48, v14);
    }
    v125 = v144;
    sub_10001DF84((uint64_t)v144, 0);
    sub_10002F2A8(v125, v47, a4, a5, 1);
  }
  else
  {
    v49 = a9;
    v141 = (uint64_t *)(v143 + 16);
    v142 = (uint64_t *)(a9 + 16);
    v50 = v135;
    v138((uint64_t *)v135, v137, v14);
    v51 = v144;
    v52 = v26;
    v53 = v43;
    v54 = v51;
    swift_retain_n(v46, 2);
    swift_retain_n(a9, 2);
    v55 = v52;
    v56 = v53;
    v57 = (uint64_t *)v54;
    v58 = Logger.logObject.getter(v57);
    LODWORD(v130) = static os_log_type_t.default.getter();
    v59 = os_log_type_enabled(v58, (os_log_type_t)v130);
    v137 = v57;
    v136 = v56;
    v129 = v55;
    if (!v59)
    {

      swift_release_n(v46, 2);
      swift_release_n(a9, 2);
      v45(v50, v14);
      v84 = v140;
      v78 = v142;
      v73 = v141;
      goto LABEL_12;
    }
    v128 = v58;
    v138 = (void (*)(uint64_t *, uint64_t *, uint64_t))v45;
    v60 = v55;
    isEscapingClosureAtFileLocation = swift_slowAlloc(52, -1);
    v134 = (_QWORD *)swift_slowAlloc(8, -1);
    v127 = swift_slowAlloc(64, -1);
    *(_QWORD *)&aBlock = v127;
    *(_DWORD *)isEscapingClosureAtFileLocation = 136316162;
    v62 = v57;
    v63 = (id)CKDatabaseScopeString(objc_msgSend(v60, "scope"));
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    v153 = sub_100002CA8(v64, v66, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, isEscapingClosureAtFileLocation + 4, isEscapingClosureAtFileLocation + 12);

    swift_bridgeObjectRelease(v66);
    *(_WORD *)(isEscapingClosureAtFileLocation + 12) = 2080;
    v67 = objc_msgSend(v56, "zoneName");
    v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v70 = v69;

    v153 = sub_100002CA8(v68, v70, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, isEscapingClosureAtFileLocation + 14, isEscapingClosureAtFileLocation + 22);

    v71 = v144;
    swift_bridgeObjectRelease(v70);
    *(_WORD *)(isEscapingClosureAtFileLocation + 22) = 2112;
    v153 = (uint64_t)v62;
    v72 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, isEscapingClosureAtFileLocation + 24, isEscapingClosureAtFileLocation + 32);
    *v134 = v71;

    *(_WORD *)(isEscapingClosureAtFileLocation + 32) = 2048;
    v73 = v141;
    swift_beginAccess(v141, v146, 0, 0);
    v74 = *v73;
    if ((unint64_t)*v73 >> 62)
      goto LABEL_20;
    v75 = *(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10);
    v76 = v143;
    swift_release(v143);
    while (1)
    {
      v77 = v139;
      v78 = v142;
      v153 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, isEscapingClosureAtFileLocation + 34, isEscapingClosureAtFileLocation + 42);
      swift_release(v76);
      *(_WORD *)(isEscapingClosureAtFileLocation + 42) = 2048;
      swift_beginAccess(v78, v145, 0, 0);
      v79 = *(_QWORD *)(*(_QWORD *)(v49 + 16) + 16);
      swift_release(v49);
      v153 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, v154, isEscapingClosureAtFileLocation + 44, isEscapingClosureAtFileLocation + 52);
      swift_release(v49);
      v80 = v128;
      _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v130, "record zone fetch database, %s, zone, %s, token: %@, records changed: %ld, deleted: %ld", (uint8_t *)isEscapingClosureAtFileLocation, 0x34u);
      v81 = sub_10000215C((uint64_t *)&unk_10007AA40);
      v82 = v134;
      swift_arrayDestroy(v134, 1, v81);
      swift_slowDealloc(v82, -1, -1);
      v83 = v127;
      swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(isEscapingClosureAtFileLocation, -1, -1);

      ((void (*)(char *, uint64_t))v138)(v135, v77);
      v84 = v140;
LABEL_12:
      v105 = (_QWORD *)((char *)v84
                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
      swift_beginAccess((char *)v84 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v153, 0, 0);
      v106 = *v105;
      __chkstk_darwin(v107);
      *(&v127 - 2) = (uint64_t)v73;
      v108 = swift_bridgeObjectRetain(v106);
      sub_10002A0C4(v108, (void (*)(id, uint64_t (*)(), _OWORD *))sub_10002F0E8);
      swift_bridgeObjectRelease(v106);
      v109 = v84[9];
      v74 = swift_allocObject(&unk_1000729B8, 40, 7);
      *(_QWORD *)(v74 + 16) = v84;
      *(_QWORD *)(v74 + 24) = v78;
      *(_QWORD *)(v74 + 32) = v73;
      v110 = swift_allocObject(&unk_1000729E0, 32, 7);
      *(_QWORD *)(v110 + 16) = sub_10002F114;
      *(_QWORD *)(v110 + 24) = v74;
      v151 = sub_10002FAE8;
      v152 = v110;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      *(_QWORD *)&v150 = sub_10000D2B0;
      *((_QWORD *)&v150 + 1) = &unk_1000729F8;
      v111 = _Block_copy(&aBlock);
      v49 = v152;
      swift_retain(v84);
      swift_retain(v110);
      swift_release(v49);
      dispatch_sync(v109, v111);
      _Block_release(v111);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v110, "", 119, 583, 49, 1);
      swift_release(v110);
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        break;
      __break(1u);
LABEL_20:
      if (v74 < 0)
        v126 = v74;
      else
        v126 = v74 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v74);
      v75 = _CocoaArrayWrapper.endIndex.getter(v126);
      v76 = v143;
      swift_release(v143);
      swift_bridgeObjectRelease(v74);
    }
    swift_beginAccess(v73, v148, 1, 0);
    v112 = *v73;
    *v73 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v112);
    swift_beginAccess(v78, v147, 1, 0);
    v113 = *v78;
    *v78 = (uint64_t)_swiftEmptyArrayStorage;
    v114 = swift_bridgeObjectRelease(v113);
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*v84 + 256))(&aBlock, v114);
    v115 = v151;
    v156 = aBlock;
    swift_bridgeObjectRetain(v151);
    sub_100029DB4((uint64_t)&v156);
    v155 = v150;
    sub_100029DB4((uint64_t)&v155);
    swift_bridgeObjectRelease(v115);
    v116 = v136;
    v117 = objc_msgSend(v136, "zoneName");
    v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v120 = v119;

    LOBYTE(v117) = sub_100019CA0(v118, v120, v115);
    swift_bridgeObjectRelease(v115);
    swift_bridgeObjectRelease(v120);
    if ((v117 & 1) != 0)
    {
      v121 = objc_msgSend(v129, "scope");
      v122 = (uint64_t)v131;
      sub_1000173F0((uint64_t)v121, v116);
      v123 = v137;
      sub_10002A958(v144, v122);

      (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v122, v133);
      swift_release(v74);
    }
    else
    {
      swift_release(v74);

    }
  }
}

void sub_10001CB90(void *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[4];
  _BYTE v35[24];

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a2, v35, 0, 0);
  v8 = *a2;
  v9 = a1;
  v10 = swift_bridgeObjectRetain(v8);
  v11 = (void *)sub_10002B6DC(v10, v9);
  swift_bridgeObjectRelease(v8);

  if (v11)
  {
    swift_beginAccess(a2, v34, 33, 0);
    v12 = v9;
    v13 = sub_10002BA7C(a2, v12);

    v14 = *a2;
    if ((unint64_t)*a2 >> 62)
    {
      if (v14 < 0)
        v28 = *a2;
      else
        v28 = v14 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*a2);
      v15 = _CocoaArrayWrapper.endIndex.getter(v28);
      swift_bridgeObjectRelease(v14);
      if (v15 >= v13)
        goto LABEL_4;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15 >= v13)
      {
LABEL_4:
        sub_10002BE6C(v13, v15);
        swift_endAccess(v34);
        v16 = sub_10003078C();
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v16, v4);
        v17 = v11;
        v18 = Logger.logObject.getter(v17);
        v19 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v18, v19))
        {
          v20 = swift_slowAlloc(22, -1);
          v29 = (_QWORD *)swift_slowAlloc(8, -1);
          v30 = swift_slowAlloc(32, -1);
          v34[0] = v30;
          *(_DWORD *)v20 = 136315394;
          v32 = v4;
          v21 = CKRecord.recordType.getter();
          v23 = v22;
          v33 = sub_100002CA8(v21, v22, v34);
          v31 = v5;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v20 + 4, v20 + 12);

          swift_bridgeObjectRelease(v23);
          *(_WORD *)(v20 + 12) = 2112;
          v33 = (uint64_t)v17;
          v24 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v20 + 14, v20 + 22);
          v25 = v29;
          *v29 = v11;

          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Don't send this record as part of update list as it is in queue for deletion: %s, %@", (uint8_t *)v20, 0x16u);
          v26 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v25, 1, v26);
          swift_slowDealloc(v25, -1, -1);
          v27 = v30;
          swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v27, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
        }
        else
        {

          (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        }
        return;
      }
    }
    __break(1u);
  }
}

uint64_t sub_10001CED8(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t), uint64_t a7)
{
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  id v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  id v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  int v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;

  v83 = a7;
  v84 = a6;
  v78 = a5;
  LODWORD(v9) = a2;
  v11 = type metadata accessor for Logger(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v73 - v17;
  __chkstk_darwin(v16);
  v20 = (char *)&v73 - v19;
  v21 = sub_10003078C();
  v79 = v12;
  v80 = v21;
  v81 = *(void (**)(char *))(v12 + 16);
  v81(v20);
  v22 = a3;
  swift_bridgeObjectRetain_n(a4, 2);
  v23 = v22;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = os_log_type_enabled(v24, v25);
  v82 = v11;
  if (v26)
  {
    v27 = swift_slowAlloc(22, -1);
    v75 = a1;
    v28 = v27;
    v73 = swift_slowAlloc(64, -1);
    v86 = v73;
    *(_DWORD *)v28 = 136315394;
    v29 = (id)CKDatabaseScopeString(objc_msgSend(v23, "scope"));
    v74 = v9;
    v30 = v29;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v76 = v15;
    v77 = v18;
    v32 = v31;
    v34 = v33;

    v85 = sub_100002CA8(v32, v34, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v28 + 12) = 2080;
    v35 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
    v36 = swift_bridgeObjectRetain(a4);
    v37 = Array.description.getter(v36, v35);
    v9 = v38;
    swift_bridgeObjectRelease(a4);
    v39 = v37;
    v15 = v76;
    v85 = sub_100002CA8(v39, v9, &v86);
    v18 = v77;
    v11 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a4, 2);
    v40 = v9;
    LOBYTE(v9) = v74;
    swift_bridgeObjectRelease(v40);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Fetch record zone changes complete, database, %s, zoneIds, %s", (uint8_t *)v28, 0x16u);
    v41 = v73;
    swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v42 = v28;
    a1 = v75;
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v43 = *(void (**)(char *, uint64_t))(v79 + 8);
  v43(v20, v11);
  if ((v9 & 1) != 0)
  {
    ((void (*)(char *, uint64_t, uint64_t))v81)(v18, v80, v11);
    sub_10002E238(a1, 1);
    v54 = v23;
    sub_10002E238(a1, 1);
    v55 = v54;
    v56 = sub_10002E238(a1, 1);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(8, -1);
      v81 = (void (*)(char *))v43;
      v61 = (_QWORD *)v60;
      v80 = swift_slowAlloc(32, -1);
      v86 = v80;
      *(_DWORD *)v59 = 136315394;
      v62 = (id)CKDatabaseScopeString(objc_msgSend(v55, "scope"));
      v77 = v18;
      v63 = v62;
      v64 = a1;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
      v67 = v66;

      v68 = v65;
      a1 = v64;
      v85 = sub_100002CA8(v68, v67, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 4, v59 + 12);

      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v59 + 12) = 2112;
      swift_errorRetain(v64);
      v69 = _swift_stdlib_bridgeErrorToNSError(v64);
      v85 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v59 + 14, v59 + 22);
      *v61 = v69;
      sub_10002E214(v64, 1);
      sub_10002E214(v64, 1);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Error fetching zone changes for %s database: %@", (uint8_t *)v59, 0x16u);
      v70 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v61, 1, v70);
      swift_slowDealloc(v61, -1, -1);
      v71 = v80;
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v59, -1, -1);

      ((void (*)(char *, uint64_t))v81)(v77, v82);
    }
    else
    {

      sub_10002E214(a1, 1);
      sub_10002E214(a1, 1);

      v43(v18, v11);
    }
    sub_10001DF84(a1, 0);
    swift_errorRetain(a1);
    v84(a1, 1);
    sub_10002E214(a1, 1);
    return sub_10002E214(a1, 1);
  }
  else
  {
    ((void (*)(char *, uint64_t, uint64_t))v81)(v15, v80, v11);
    v44 = v23;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v81 = (void (*)(char *))v43;
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v86 = v48;
      *(_DWORD *)v47 = 136315138;
      v49 = (id)CKDatabaseScopeString(objc_msgSend(v44, "scope"));
      v76 = v15;
      v50 = v49;
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
      v53 = v52;

      v85 = sub_100002CA8(v51, v53, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v47 + 4, v47 + 12);

      swift_bridgeObjectRelease(v53);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Successfully fetched zone changes for database: %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      ((void (*)(char *, uint64_t))v81)(v76, v82);
    }
    else
    {

      v43(v15, v11);
    }
    return ((uint64_t (*)(_QWORD, _QWORD))v84)(0, 0);
  }
}

void sub_10001D5FC(double a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  xpc_object_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  id v28;
  double aBlock;
  _QWORD v30[4];
  uint64_t v31;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v30[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  if (!XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY)
  {
    __break(1u);
    goto LABEL_12;
  }
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRE_NETWORK_CONNECTIVITY, 1);
  if (!XPC_ACTIVITY_REQUIRES_CLASS_C)
  {
LABEL_12:
    __break(1u);
    return;
  }
  xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_C, 1);
  sub_100029558(v9, 0.0, 120.0);
  v11 = v10;
  v12 = sub_10003078C();
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v12, v4);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    *(_DWORD *)v16 = 134218240;
    aBlock = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2048;
    aBlock = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v30, v16 + 14, v16 + 22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "checkinRetryFetch %f with random delay: %f", (uint8_t *)v16, 0x16u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v17 = objc_allocWithZone((Class)NSBackgroundActivityScheduler);
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v17, "initWithIdentifier:", v18);

  v20 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
  v21 = *(void **)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity) = v19;

  v22 = *(void **)(v2 + v20);
  if (v22
    && (objc_msgSend(v22, "setQualityOfService:", 25), (v23 = *(void **)(v2 + v20)) != 0)
    && (objc_msgSend(v23, "setInterval:", v11 + a1), (v24 = *(void **)(v2 + v20)) != 0)
    && (objc_msgSend(v24, "_setAdditionalXPCActivityProperties:", v8), (v25 = *(void **)(v2 + v20)) != 0))
  {
    v30[3] = sub_10002E5F0;
    v31 = v2;
    aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
    v30[0] = 1107296256;
    v30[1] = sub_10001DB5C;
    v30[2] = &unk_100072570;
    v26 = _Block_copy(&aBlock);
    v27 = v31;
    v28 = v25;
    swift_retain(v2);
    swift_release(v27);
    objc_msgSend(v28, "scheduleWithBlock:", v26);
    swift_unknownObjectRelease(v8);
    _Block_release(v26);

  }
  else
  {
    swift_unknownObjectRelease(v8);
  }
}

uint64_t sub_10001D920(uint64_t a1, char a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t *v20;
  uint8_t *v21;
  uint64_t (*v22)(uint64_t);
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
    return a3(1);
  swift_errorRetain(a1);
  v11 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v11, v6);
  swift_errorRetain(a1);
  v12 = swift_errorRetain(a1);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v22 = a3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    v21 = v15;
    *(_DWORD *)v15 = 138412290;
    swift_errorRetain(a1);
    v16 = _swift_stdlib_bridgeErrorToNSError(a1);
    v23 = v16;
    a3 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v15 + 4, v15 + 12);
    v17 = v20;
    *v20 = v16;
    sub_10002E214(a1, 1);
    sub_10002E214(a1, 1);
    v18 = v21;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "checkinRetryFetch failed with %@", v21, 0xCu);
    v19 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v17, 1, v19);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_10002E214(a1, 1);
    sub_10002E214(a1, 1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  a3(2);
  return sub_10002E214(a1, 1);
}

uint64_t sub_10001DB5C(uint64_t a1, void *aBlock)
{
  uint64_t v2;
  void (*v3)(uint64_t (*)(), uint64_t);
  void *v4;
  uint64_t v5;

  v3 = *(void (**)(uint64_t (*)(), uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v4 = _Block_copy(aBlock);
  v5 = swift_allocObject(&unk_1000725A8, 24, 7);
  *(_QWORD *)(v5 + 16) = v4;
  swift_retain(v2);
  v3(sub_10002E684, v5);
  swift_release(v2);
  return swift_release(v5);
}

uint64_t sub_10001DBCC(double a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v1 + 56);
  v10 = swift_allocObject(&unk_100072350, 24, 7);
  swift_weakInit(v10 + 16, v1);
  v11 = swift_allocObject(&unk_100072530, 32, 7);
  *(double *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v10;
  aBlock[4] = sub_10002E5E4;
  v23 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100072548;
  v12 = _Block_copy(aBlock);
  v13 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v13);
  v21 = _swiftEmptyArrayStorage;
  v14 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_10000215C((uint64_t *)&unk_10007A960);
  v16 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v3, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v17 = v23;
  swift_release(v10);
  return swift_release(v17);
}

uint64_t sub_10001DE00(uint64_t a1, double a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1 + 16;
  v9 = sub_10003078C();
  v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v9, v4);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134217984;
    v17 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "scheduleRetryFetch for %f", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess(v8, &v17, 0, 0);
  result = swift_weakLoadStrong(v8);
  if (result)
  {
    v15 = result;
    if (!*(_QWORD *)(result + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity))
      sub_10001D5FC(a2);
    return swift_release(v15);
  }
  return result;
}

void sub_10001DF84(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  uint8_t *v49;
  uint64_t *v50;
  NSObject *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint8_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  double v87;
  char v88;
  NSObject *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t *v93;
  uint8_t *v94;
  uint8_t *v95;
  NSObject *v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  uint64_t v99;
  uint8_t *v100;
  uint8_t *v101;
  uint8_t *v102;
  uint64_t v103;
  uint8_t *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t *v108;
  uint8_t *v109;
  uint8_t *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void (*v116)(char *, uint8_t *);
  char *v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  Swift::String v130;
  Swift::String v131;
  Class isa;
  NSObject *v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t *v137;
  uint8_t *v138;
  uint8_t *v139;
  NSObject *v140;
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  uint8_t *v144;
  uint8_t *v145;
  uint8_t *v146;
  uint64_t v147;
  char **v148;
  uint64_t v149;
  void *v150;
  NSObject *v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  NSObject *v155;
  _QWORD *v156;
  uint8_t *v157;
  uint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  uint64_t v163;
  __int128 v164;
  uint64_t *v165;
  char *v166;
  uint64_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint8_t *v170;
  uint8_t *v171;
  uint64_t v172;
  NSObject *v173;
  os_log_type_t v174;
  uint8_t *v175;
  NSObject *v176;
  char *v177;
  uint64_t v178;
  NSObject *v179;
  os_log_type_t v180;
  uint8_t *v181;
  void *v182;
  uint64_t v183;
  char *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  NSObject *v192;
  os_log_type_t v193;
  uint8_t *v194;
  uint64_t *v195;
  NSObject *v196;
  uint64_t v197;
  uint64_t v198;
  uint8_t *v199;
  NSObject *v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  _QWORD *v204;
  NSObject *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  NSObject *v213;
  uint8_t *v214;
  char *v215;
  uint64_t v216;
  char *v217;
  char *v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  char *v223;
  char *v224;
  char *v225;
  char *v226;
  void (*v227)(char *, uint64_t);
  uint64_t v228;
  uint64_t v229;
  void (*v230)(char *, uint64_t, uint64_t);
  _QWORD *v231;
  uint8_t *v232;
  uint8_t *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  __int128 aBlock;
  __int128 v238;
  uint64_t (*v239)();
  _QWORD *v240;
  _OWORD v241[2];
  uint64_t v242;
  uint64_t (*v243)();
  __int128 v244;
  __int128 v245;
  __int128 v246;
  uint64_t v247;
  uint64_t v248;

  LODWORD(v227) = a2;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v206 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)&v206 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = (uint8_t *)type metadata accessor for URL(0);
  v216 = *((_QWORD *)v233 - 1);
  v11 = __chkstk_darwin(v233);
  v217 = (char *)&v206 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11);
  v215 = (char *)&v206 - v14;
  __chkstk_darwin(v13);
  v224 = (char *)&v206 - v15;
  v234 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v234 - 8);
  v17 = __chkstk_darwin(v234);
  v225 = (char *)&v206 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v17);
  v220 = (char *)&v206 - v20;
  v21 = __chkstk_darwin(v19);
  v214 = (uint8_t *)&v206 - v22;
  v23 = __chkstk_darwin(v21);
  v219 = (char *)&v206 - v24;
  v25 = __chkstk_darwin(v23);
  v232 = (uint8_t *)&v206 - v26;
  v27 = __chkstk_darwin(v25);
  v223 = (char *)&v206 - v28;
  v29 = __chkstk_darwin(v27);
  v218 = (char *)&v206 - v30;
  v31 = __chkstk_darwin(v29);
  v222 = (char *)&v206 - v32;
  v33 = __chkstk_darwin(v31);
  v221 = (char *)&v206 - v34;
  v35 = __chkstk_darwin(v33);
  v226 = (char *)&v206 - v36;
  __chkstk_darwin(v35);
  v38 = (char *)&v206 - v37;
  *(_QWORD *)&aBlock = a1;
  swift_errorRetain(a1);
  v39 = sub_10000215C(&qword_10007B2F8);
  type metadata accessor for CKError(0);
  v41 = v40;
  if (swift_dynamicCast(v241, &aBlock, v39, v40, 6))
  {
    v228 = v41;
    v209 = v6;
    v210 = v4;
    v42 = *(void **)&v241[0];
    v43 = sub_10003078C();
    v212 = v16;
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
    v229 = v43;
    v230 = v44;
    ((void (*)(char *))v44)(v38);
    v45 = v42;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    v48 = os_log_type_enabled(v46, v47);
    v213 = v45;
    v211 = v3;
    v208 = v7;
    v207 = v8;
    v206 = v10;
    if (v48)
    {
      v49 = (uint8_t *)swift_slowAlloc(12, -1);
      v50 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v49 = 138412290;
      v51 = v45;
      v52 = _swift_stdlib_bridgeErrorToNSError(v51);
      *(_QWORD *)&aBlock = v52;
      v53 = v231;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v49 + 4, v49 + 12);
      *v50 = v52;

      v45 = v213;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Error with cloud operation %@", v49, 0xCu);
      v54 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v50, 1, v54);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {

      v46 = v45;
      v53 = v231;
    }

    v55 = *(void (**)(char *, uint64_t))(v212 + 8);
    v55(v38, v234);
    *(_QWORD *)&v241[0] = v45;
    v56 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
    v57 = v228;
    v58 = _BridgedStoredNSError.userInfo.getter(v228, v56);
    v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKPartialErrorsByItemIDKey);
    v61 = v60;
    v62 = v232;
    if (*(_QWORD *)(v58 + 16) && (v63 = sub_10002861C(v59, v60), (v64 & 1) != 0))
    {
      sub_100002D98(*(_QWORD *)(v58 + 56) + 32 * v63, (uint64_t)&aBlock);
    }
    else
    {
      aBlock = 0u;
      v238 = 0u;
    }
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v58);
    if (*((_QWORD *)&v238 + 1))
    {
      v65 = sub_10000215C(&qword_10007B318);
      if ((swift_dynamicCast(v241, &aBlock, (char *)&type metadata for Any + 8, v65, 6) & 1) != 0)
      {
        v66 = *(_QWORD *)&v241[0];
        v67 = v226;
        v230(v226, v229, v234);
        v68 = swift_bridgeObjectRetain_n(v66, 2);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          v71 = swift_slowAlloc(12, -1);
          v212 = v56;
          v72 = (uint8_t *)v71;
          v73 = swift_slowAlloc(32, -1);
          *(_QWORD *)&aBlock = v73;
          *(_DWORD *)v72 = 136315138;
          v231 = v72 + 4;
          v74 = swift_bridgeObjectRetain(v66);
          v75 = v53;
          v76 = Dictionary.description.getter(v74, &type metadata for AnyHashable, v228, &protocol witness table for AnyHashable);
          v77 = v55;
          v79 = v78;
          swift_bridgeObjectRelease(v66);
          v80 = v76;
          v53 = v75;
          v62 = v232;
          *(_QWORD *)&v241[0] = sub_100002CA8(v80, v79, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v241, (char *)v241 + 8, v231, v72 + 12);
          swift_bridgeObjectRelease_n(v66, 2);
          v81 = v79;
          v55 = v77;
          v45 = v213;
          v82 = v234;
          swift_bridgeObjectRelease(v81);
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Handling partial internal errors - %s", v72, 0xCu);
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          v83 = v72;
          v56 = v212;
          swift_slowDealloc(v83, -1, -1);

          v84 = v226;
          v85 = v82;
        }
        else
        {

          swift_bridgeObjectRelease_n(v66, 2);
          v84 = v67;
          v85 = v234;
        }
        v86 = ((uint64_t (*)(char *, uint64_t))v55)(v84, v85);
        __chkstk_darwin(v86);
        *(&v206 - 2) = (char *)v53;
        *((_BYTE *)&v206 - 8) = v227 & 1;
        sub_100029F28(v66, (void (*)(_BYTE *, id))sub_10002E5B8);
        swift_bridgeObjectRelease(v66);
        v57 = v228;
      }
    }
    else
    {
      sub_10000BCBC((uint64_t)&aBlock, &qword_10007BE80);
    }
    *(_QWORD *)&aBlock = v45;
    _BridgedStoredNSError.code.getter(&v244, v57, v56);
    switch((uint64_t)v244)
    {
      case 3:
      case 4:
        if ((v227 & 1) == 0)
          goto LABEL_41;
        v87 = 150.0;
        goto LABEL_21;
      case 6:
      case 7:
        v87 = COERCE_DOUBLE(related decl 'e' for CKErrorCode.retryAfterSeconds.getter(v45));
        if ((v88 & 1) != 0)
          v87 = 600.0;
LABEL_21:
        sub_10001DBCC(v87);
        goto LABEL_41;
      case 14:
        v230(v222, v229, v234);
        v104 = v45;
        v105 = Logger.logObject.getter(v104);
        v106 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v105, v106))
        {
          v107 = (uint8_t *)swift_slowAlloc(12, -1);
          v108 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v107 = 138412290;
          v109 = v104;
          v233 = v104;
          v110 = v109;
          v111 = v53;
          v112 = _swift_stdlib_bridgeErrorToNSError(v109);
          *(_QWORD *)&aBlock = v112;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v107 + 4, v107 + 12);
          *v108 = v112;
          v53 = v111;

          v104 = v233;
          _os_log_impl((void *)&_mh_execute_header, v105, v106, "Server Record Changed, We need to Fetch the data again: %@", v107, 0xCu);
          v113 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v108, 1, v113);
          swift_slowDealloc(v108, -1, -1);
          swift_slowDealloc(v107, -1, -1);
        }
        else
        {

          v105 = v104;
        }

        v55(v222, v234);
        v149 = related decl 'e' for CKErrorCode.serverRecord.getter(v104);
        if (v149)
        {
          v150 = (void *)v149;
          v230(v218, v229, v234);
          v151 = v150;
          v152 = Logger.logObject.getter(v151);
          v153 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v152, v153))
          {
            v154 = (uint8_t *)swift_slowAlloc(12, -1);
            v231 = (_QWORD *)swift_slowAlloc(8, -1);
            v233 = v104;
            v232 = v154;
            *(_DWORD *)v154 = 138412290;
            *(_QWORD *)&aBlock = v151;
            v155 = v151;
            v104 = v233;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v154 + 4, v154 + 12);
            v156 = v231;
            *v231 = v150;

            v157 = v232;
            _os_log_impl((void *)&_mh_execute_header, v152, v153, "Resolving with server record - %@", v232, 0xCu);
            v158 = sub_10000215C((uint64_t *)&unk_10007AA40);
            swift_arrayDestroy(v156, 1, v158);
            swift_slowDealloc(v156, -1, -1);
            swift_slowDealloc(v157, -1, -1);
          }
          else
          {

            v152 = v151;
          }

          v55(v218, v234);
          v200 = v53[9];
          v201 = swift_allocObject(&unk_1000724B8, 32, 7);
          *(_QWORD *)(v201 + 16) = v53;
          *(_QWORD *)(v201 + 24) = v151;
          v202 = swift_allocObject(&unk_1000724E0, 32, 7);
          *(_QWORD *)(v202 + 16) = sub_10002E44C;
          *(_QWORD *)(v202 + 24) = v201;
          v239 = sub_10002FAE8;
          v240 = (_QWORD *)v202;
          *(_QWORD *)&aBlock = _NSConcreteStackBlock;
          *((_QWORD *)&aBlock + 1) = 1107296256;
          *(_QWORD *)&v238 = sub_10000D2B0;
          *((_QWORD *)&v238 + 1) = &unk_1000724F8;
          v203 = _Block_copy(&aBlock);
          v204 = v240;
          v205 = v151;
          swift_retain(v53);
          swift_retain(v202);
          swift_release(v204);
          dispatch_sync(v200, v203);

          _Block_release(v203);
          LOBYTE(v203) = swift_isEscapingClosureAtFileLocation(v202, "", 119, 688, 40, 1);
          swift_release(v201);
          swift_release(v202);
          if ((v203 & 1) != 0)
          {
            __break(1u);
            JUMPOUT(0x10001F7DCLL);
          }
        }
        else
        {
          sub_10001DBCC(30.0);

        }
        return;
      case 21:
        v212 = v56;
        v227 = v55;
        v114 = v215;
        URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x8000000100066D80, 1);
        v115 = (uint64_t)v224;
        URL.appendingPathComponent(_:)(0x2E65746176697250, 0xED00006E656B6F74);
        v116 = *(void (**)(char *, uint8_t *))(v216 + 8);
        v117 = v114;
        v118 = v233;
        v116(v117, v233);
        v119 = sub_10002A958(0, v115);
        (*(void (**)(_OWORD *__return_ptr, uint64_t))(*v53 + 256))(v241, v119);
        v120 = v242;
        v247 = v242;
        v246 = v241[0];
        swift_bridgeObjectRetain(v242);
        sub_100029DB4((uint64_t)&v246);
        v245 = v241[1];
        sub_100029DB4((uint64_t)&v245);
        sub_100029DDC(&v247);
        v121 = *(_QWORD *)(v120 + 16);
        v122 = v53;
        v123 = (uint64_t)v217;
        if (v121)
        {
          v231 = (_QWORD *)sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
          v124 = (void **)(v120 + 40);
          do
          {
            v125 = (uint64_t)*(v124 - 1);
            v126 = *v124;
            v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
            v129 = v128;
            swift_bridgeObjectRetain(v126);
            v130._countAndFlagsBits = v125;
            v130._object = v126;
            v131._countAndFlagsBits = v127;
            v131._object = v129;
            isa = CKRecordZoneID.init(zoneName:ownerName:)(v130, v131).super.isa;
            sub_1000173F0(2, isa);

            v118 = v233;
            sub_10002A958(0, v123);
            v116((char *)v123, v118);
            v124 += 2;
            --v121;
          }
          while (v121);
        }
        sub_100029DDC(&v247);
        sub_10001DBCC(30.0);
        v116(v224, v118);
        v53 = v122;
        v55 = v227;
        v45 = v213;
        v62 = v232;
        v57 = v228;
        v56 = v212;
        goto LABEL_41;
      case 26:
        v230(v221, v229, v234);
        v133 = v45;
        v134 = Logger.logObject.getter(v133);
        v135 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v134, v135))
        {
          v136 = (uint8_t *)swift_slowAlloc(12, -1);
          v137 = (uint64_t *)swift_slowAlloc(8, -1);
          v233 = v136;
          *(_DWORD *)v136 = 138412290;
          v138 = v136 + 12;
          v139 = v136 + 4;
          v140 = v133;
          v141 = v55;
          v142 = v56;
          v143 = _swift_stdlib_bridgeErrorToNSError(v140);
          *(_QWORD *)&aBlock = v143;
          v144 = v139;
          v62 = v232;
          v145 = v138;
          v45 = v213;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v144, v145);
          *v137 = v143;
          v56 = v142;
          v55 = v141;

          v146 = v233;
          _os_log_impl((void *)&_mh_execute_header, v134, v135, "Zone not found: %@", v233, 0xCu);
          v147 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v137, 1, v147);
          v57 = v228;
          swift_slowDealloc(v137, -1, -1);
          swift_slowDealloc(v146, -1, -1);
        }
        else
        {

          v134 = v133;
        }

        v148 = (char **)&v245 + 1;
        goto LABEL_40;
      default:
        v230(v223, v229, v234);
        v89 = v45;
        v90 = Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v90, v91))
        {
          v92 = (uint8_t *)swift_slowAlloc(12, -1);
          v93 = (uint64_t *)swift_slowAlloc(8, -1);
          v233 = v92;
          *(_DWORD *)v92 = 138412290;
          v94 = v92 + 12;
          v95 = v92 + 4;
          v96 = v89;
          v97 = v55;
          v98 = v56;
          v99 = _swift_stdlib_bridgeErrorToNSError(v96);
          *(_QWORD *)&aBlock = v99;
          v100 = v95;
          v62 = v232;
          v101 = v94;
          v45 = v213;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v100, v101);
          *v93 = v99;
          v56 = v98;
          v55 = v97;

          v102 = v233;
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Uncaught error: %@", v233, 0xCu);
          v103 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v93, 1, v103);
          v57 = v228;
          swift_slowDealloc(v93, -1, -1);
          swift_slowDealloc(v102, -1, -1);
        }
        else
        {

          v90 = v89;
        }

        v148 = (char **)&v246 + 1;
LABEL_40:
        v55(*(v148 - 32), v234);
LABEL_41:
        *(_QWORD *)&v244 = v45;
        _BridgedStoredNSError.code.getter(&aBlock, v57, v56);
        if ((_QWORD)aBlock == 110)
        {
          v166 = v219;
          v167 = ((uint64_t (*)(char *, uint64_t, uint64_t))v230)(v219, v229, v234);
          v168 = Logger.logObject.getter(v167);
          v169 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v168, v169))
          {
            v170 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v170 = 0;
            _os_log_impl((void *)&_mh_execute_header, v168, v169, "Attempting to use Manatee from a non-HSA2 account!", v170, 2u);
            swift_slowDealloc(v170, -1, -1);
          }

          v55(v166, v234);
          if (*((_BYTE *)v53 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) != 1)
          {

            return;
          }
          *((_BYTE *)v53 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable) = 0;
          v171 = v214;
          v172 = ((uint64_t (*)(uint8_t *, uint64_t, uint64_t))v230)(v214, v229, v234);
          v173 = Logger.logObject.getter(v172);
          v174 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v173, v174))
          {
            v175 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v175 = 0;
            _os_log_impl((void *)&_mh_execute_header, v173, v174, "Manatee was available, but is not available now.", v175, 2u);
            swift_slowDealloc(v175, -1, -1);
            v176 = v45;
          }
          else
          {
            v176 = v173;
            v173 = v45;
          }

          v199 = v171;
          goto LABEL_63;
        }
        if ((_QWORD)aBlock != 112)
        {
          if ((_QWORD)aBlock == 111)
          {
            v230((char *)v62, v229, v234);
            v159 = swift_retain_n(v53, 2);
            v160 = Logger.logObject.getter(v159);
            v161 = static os_log_type_t.default.getter();
            if (!os_log_type_enabled(v160, v161))
            {

              swift_release_n(v53, 2);
              v199 = v62;
LABEL_63:
              v55((char *)v199, v234);
              return;
            }
            v162 = (uint8_t *)swift_slowAlloc(12, -1);
            v163 = swift_slowAlloc(32, -1);
            v236 = v163;
            *(_DWORD *)v162 = 136315138;
            (*(void (**)(__int128 *__return_ptr))(*v53 + 256))(&aBlock);
            v164 = v238;
            v244 = aBlock;
            sub_100029DB4((uint64_t)&v244);
            v243 = v239;
            sub_100029DDC(&v243);
            v235 = sub_100002CA8(v164, *((unint64_t *)&v164 + 1), &v236);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v162 + 4, v162 + 12);
            swift_release_n(v53, 2);
            swift_bridgeObjectRelease(*((_QWORD *)&v164 + 1));
            _os_log_impl((void *)&_mh_execute_header, v160, v161, "PCS Keys for %s are not yet synced.", v162, 0xCu);
            swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v163, -1, -1);
            swift_slowDealloc(v162, -1, -1);

            v165 = &v248;
          }
          else
          {
            v230(v225, v229, v234);
            v191 = v45;
            v192 = Logger.logObject.getter(v191);
            v193 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v192, v193))
            {
              v194 = (uint8_t *)swift_slowAlloc(12, -1);
              v195 = (uint64_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v194 = 138412290;
              v196 = v191;
              v197 = _swift_stdlib_bridgeErrorToNSError(v196);
              *(_QWORD *)&aBlock = v197;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v194 + 4, v194 + 12);
              *v195 = v197;

              _os_log_impl((void *)&_mh_execute_header, v192, v193, "Uncaught private error: %@", v194, 0xCu);
              v198 = sub_10000215C((uint64_t *)&unk_10007AA40);
              swift_arrayDestroy(v195, 1, v198);
              swift_slowDealloc(v195, -1, -1);
              swift_slowDealloc(v194, -1, -1);
            }
            else
            {

              v192 = v191;
            }

            v165 = &v247;
          }
          v199 = (uint8_t *)*(v165 - 32);
          goto LABEL_63;
        }
        v177 = v220;
        v178 = ((uint64_t (*)(char *, uint64_t, uint64_t))v230)(v220, v229, v234);
        v179 = Logger.logObject.getter(v178);
        v180 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v179, v180))
        {
          v181 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v181 = 0;
          _os_log_impl((void *)&_mh_execute_header, v179, v180, "Private Missing Manatee Identity, Reset...", v181, 2u);
          swift_slowDealloc(v181, -1, -1);
        }

        v55(v177, v234);
        v239 = sub_10002E2AC;
        v240 = v53;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v238 = sub_100001DDC;
        *((_QWORD *)&v238 + 1) = &unk_100072480;
        v182 = _Block_copy(&aBlock);
        v183 = swift_retain(v53);
        v184 = v206;
        static DispatchQoS.unspecified.getter(v183);
        *(_QWORD *)&v244 = _swiftEmptyArrayStorage;
        v185 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v186 = sub_10000215C((uint64_t *)&unk_10007A960);
        v187 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
        v188 = v209;
        v189 = v186;
        v190 = v211;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v244, v189, v187, v211, v185);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v184, v188, v182);
        _Block_release(v182);

        (*(void (**)(char *, uint64_t))(v210 + 8))(v188, v190);
        (*(void (**)(char *, uint64_t))(v207 + 8))(v184, v208);
        swift_release(v240);
        break;
    }
  }
}

uint64_t sub_10001F83C()
{
  type metadata accessor for Transaction();
  return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.storeCKRecord", 37, 2, (void (*)(uint64_t))sub_10002B330);
}

uint64_t sub_10001F8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, char a6)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25);
  v17 = (char *)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(a2 + 56);
  v18 = swift_allocObject(&unk_1000728C8, 57, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  *(_QWORD *)(v18 + 32) = a3;
  *(_QWORD *)(v18 + 40) = a4;
  *(_QWORD *)(v18 + 48) = a5;
  *(_BYTE *)(v18 + 56) = a6;
  aBlock[4] = sub_10002EF14;
  v29 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_1000728E0;
  v19 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_retain(a2);
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(a5);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_10000215C((uint64_t *)&unk_10007A960);
  v22 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v12, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v25);
  return swift_release(v29);
}

uint64_t sub_10001FAEC(void *a1, int a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void (*v24)(NSObject *, uint64_t, uint64_t);
  NSObject *v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint8_t *v35;
  uint64_t *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void (*v43)(NSObject **, __n128);
  void (*v44)(NSObject **, __n128);
  NSObject *v45;
  NSObject *v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  _QWORD *v58;
  uint64_t v59;
  uint8_t *v60;
  NSObject *v61;
  NSObject v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char **p_type;
  id v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  id v79;
  NSString v80;
  id v81;
  id v82;
  id v83;
  NSString v84;
  id v85;
  NSString v86;
  id v87;
  _QWORD *v88;
  NSObject *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  NSObject *v95;
  NSObject *v96;
  uint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  uint8_t *v110;
  char *v111;
  uint64_t v112;
  int v113;
  char *v114;
  uint64_t v115;
  int v116;
  int v117;
  NSObject *v118;
  NSObject *v119;
  uint64_t v120;
  _QWORD *v121;
  id v122;
  id v123;
  id v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  NSString v132;
  id v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint8_t *v143;
  uint64_t v144;
  _QWORD *v145;
  char isUniquelyReferenced_nonNull_native;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  NSObject v151;
  char *v152;
  uint64_t v153;
  os_log_type_t v154;
  os_log_type_t v155;
  uint64_t v156;
  NSObject *v157;
  os_log_type_t v158;
  uint64_t v159;
  uint64_t v160;
  NSObject v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  uint64_t v171;
  int v173;
  NSObject *v174;
  NSObject *v175;
  uint64_t v176;
  uint64_t *v177;
  id v178;
  id v179;
  id v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  _QWORD *v184;
  uint64_t v185;
  uint64_t v186;
  id v187;
  NSString v188;
  id v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  NSObject *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char v204;
  uint64_t v205;
  NSObject v206;
  uint64_t *v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  char *v212;
  uint8_t *v213;
  uint64_t v214;
  _QWORD *v215;
  int v216;
  char *v217;
  char *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  void (*v223)(NSObject *, uint64_t, uint64_t);
  NSObject *v224;
  uint64_t isa;
  NSObject *v226;
  _QWORD v227[2];
  NSObject *v228;
  uint64_t v229;
  NSObject *v230;
  uint64_t v231;

  v5 = v4;
  v214 = a4;
  v215 = a3;
  v216 = a2;
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v217 = (char *)&v207 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v9);
  v218 = (char *)&v207 - v12;
  v13 = __chkstk_darwin(v11);
  v15 = (char *)&v207 - v14;
  v16 = __chkstk_darwin(v13);
  v213 = (uint8_t *)&v207 - v17;
  v18 = __chkstk_darwin(v16);
  v20 = ((char *)&v207 - v19);
  __chkstk_darwin(v18);
  v22 = (char *)&v207 - v21;
  v23 = sub_10003078C();
  v24 = *(void (**)(NSObject *, uint64_t, uint64_t))(v8 + 16);
  v222 = v23;
  v223 = v24;
  ((void (*)(char *))v24)(v22);
  v25 = a1;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  v28 = os_log_type_enabled(v26, v27);
  v219 = v5;
  v220 = v7;
  v212 = v15;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(8, -1);
    v224 = v20;
    v221 = (_QWORD *)v30;
    *(_DWORD *)v29 = 138412290;
    v230 = v25;
    v31 = v25;
    v5 = v219;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231, v29 + 4, v29 + 12);
    v32 = v221;
    *v221 = v25;

    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Attempting to store the record: %@", v29, 0xCu);
    v33 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v32, 1, v33);
    v34 = v32;
    v20 = v224;
    swift_slowDealloc(v34, -1, -1);
    v35 = v29;
    v7 = v220;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {

    v26 = v25;
  }

  v221 = *(_QWORD **)(v8 + 8);
  ((void (*)(char *, uint64_t))v221)(v22, v7);
  v36 = (uint64_t *)(v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v230, 0, 0);
  v37 = *v36;
  v38 = v25;
  swift_bridgeObjectRetain(v37);
  v39 = 0;
  sub_10002C148(v40, v38);
  v42 = v41;
  v44 = v43;
  v46 = v45;
  swift_bridgeObjectRelease(v37);

  if (v42)
  {
    v47 = sub_10002A620();
    v48 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v47, 0, 0);
    *v49 = 1;
    v228 = v48;
    v50 = swift_retain(v46);
    v224 = v46;
    v44(&v228, v50);
    swift_errorRelease(v48);
    swift_beginAccess(v36, &v228, 33, 0);
    v51 = sub_1000282EC((uint64_t)v42, (uint64_t (*)(uint64_t, __n128))sub_100028718, &qword_10007B2E0);
    v53 = v52;
    swift_endAccess(&v228);
    if (v51)
      sub_10002F6E0(v51, v53);
    v223(v20, v222, v7);
    v54 = v42;
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v211 = v38;
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = (_QWORD *)swift_slowAlloc(8, -1);
      v210 = 0;
      *(_DWORD *)v57 = 138412290;
      v228 = v54;
      v54 = v54;
      v38 = v211;
      v5 = v219;
      v39 = v210;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, &v229, v57 + 4, v57 + 12);
      *v58 = v42;

      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Updating cancelled pending record deletion for: %@", v57, 0xCu);
      v59 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v58, 1, v59);
      swift_slowDealloc(v58, -1, -1);
      v60 = v57;
      v7 = v220;
      swift_slowDealloc(v60, -1, -1);
      swift_release_n(v224, 2);
    }
    else
    {

      swift_release_n(v224, 2);
      v55 = v54;
    }

    ((void (*)(NSObject *, uint64_t))v221)(v20, v7);
  }
  v61 = (v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  swift_beginAccess(v5 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, &v228, 0, 0);
  v62.isa = v61->isa;
  v63 = v38;
  swift_bridgeObjectRetain(v62.isa);
  sub_10002C894(v64, v63);
  v66 = v65;
  v68 = v67;
  v70 = v69;
  swift_bridgeObjectRelease(v62.isa);

  v224 = v66;
  v209 = v39;
  if (v66)
  {
    v211 = v61;
    v71 = swift_allocObject(&unk_100071F50, 32, 7);
    *(_QWORD *)(v71 + 16) = v68;
    *(_QWORD *)(v71 + 24) = v70;
    v218 = (char *)v71;
    p_type = &stru_100078FF0.type;
    v73 = -[NSObject encryptedValues](v224, "encryptedValues");
    v74 = objc_msgSend(v73, "allKeys");
    swift_unknownObjectRelease(v73);
    v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v74, &type metadata for String);

    v210 = v75;
    v76 = *(_QWORD *)(v75 + 16);
    if (v76)
    {
      v77 = (_QWORD *)(v210 + 40);
      do
      {
        v78 = *v77;
        v79 = objc_msgSend(v63, p_type[433], swift_bridgeObjectRetain(*v77).n128_f64[0]);
        v80 = String._bridgeToObjectiveC()();
        v81 = objc_msgSend(v79, "objectForKeyedSubscript:", v80);
        swift_unknownObjectRelease(v81);
        swift_unknownObjectRelease(v79);

        if (v81)
        {
          v82 = objc_msgSend(v224, p_type[433]);
          v83 = objc_msgSend(v63, p_type[433]);
          v84 = String._bridgeToObjectiveC()();
          v85 = objc_msgSend(v83, "objectForKeyedSubscript:", v84);

          swift_unknownObjectRelease(v83);
          v86 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v78);
          objc_msgSend(v82, "setObject:forKeyedSubscript:", v85, v86);
          v87 = v85;
          p_type = (char **)(&stru_100078FF0 + 16);
          swift_unknownObjectRelease(v87);
          swift_unknownObjectRelease(v82);

        }
        else
        {
          swift_bridgeObjectRelease(v78);
        }
        v77 += 2;
        --v76;
      }
      while (v76);
    }
    swift_bridgeObjectRelease(v210);
    v88 = (_QWORD *)swift_allocObject(&unk_100071F78, 56, 7);
    v89 = v224;
    v88[2] = v224;
    v88[3] = sub_10002CB94;
    v90 = v218;
    v91 = v215;
    v88[4] = v218;
    v88[5] = v91;
    v92 = v214;
    v215 = v88;
    v88[6] = v214;
    v93 = v213;
    v94 = v220;
    v223(v213, v222, v220);
    v95 = v89;
    swift_retain_n(v90, 3);
    v96 = v95;
    swift_retain(v92);
    v98 = Logger.logObject.getter(v97);
    v99 = static os_log_type_t.default.getter();
    v100 = os_log_type_enabled(v98, v99);
    v224 = v96;
    if (v100)
    {
      v101 = (uint8_t *)swift_slowAlloc(12, -1);
      v102 = swift_slowAlloc(32, -1);
      isa = v102;
      *(_DWORD *)v101 = 136315138;
      v103 = swift_allocObject(&unk_100071FC8, 32, 7);
      v104 = v218;
      *(_QWORD *)(v103 + 16) = sub_10002CB94;
      *(_QWORD *)(v103 + 24) = v104;
      v226 = v96;
      v227[0] = sub_10002CB90;
      v227[1] = v103;
      v105 = v96;
      swift_retain(v218);
      v106 = sub_10000215C(&qword_10007AE38);
      v107 = String.init<A>(describing:)(&v226, v106);
      v109 = v108;
      v226 = sub_100002CA8(v107, v108, &isa);
      v90 = v218;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v226, v227, v101 + 4, v101 + 12);
      swift_release_n(v90, 2);

      swift_bridgeObjectRelease(v109);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "Updating existing pending record: %s", v101, 0xCu);
      swift_arrayDestroy(v102, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v102, -1, -1);
      swift_slowDealloc(v101, -1, -1);

      v110 = v213;
    }
    else
    {

      swift_release_n(v90, 2);
      v110 = v93;
    }
    ((void (*)(uint8_t *, uint64_t))v221)(v110, v94);
    v7 = v94;
    v114 = v212;
    v115 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v212, v222, v94);
    if (IsAppleInternalBuild(v115))
      v116 = static os_log_type_t.default.getter();
    else
      v116 = static os_log_type_t.debug.getter();
    v117 = v116;
    v5 = v219;
    v61 = v211;
    v118 = v63;
    v119 = Logger.logObject.getter(v118);
    if (os_log_type_enabled(v119, (os_log_type_t)v117))
    {
      LODWORD(v214) = v117;
      v120 = swift_slowAlloc(22, -1);
      v121 = (_QWORD *)swift_slowAlloc(8, -1);
      v213 = (uint8_t *)swift_slowAlloc(32, -1);
      v226 = v213;
      *(_DWORD *)v120 = 138412546;
      v122 = -[NSObject recordID](v118, "recordID");
      isa = (uint64_t)v122;
      v208 = (uint64_t *)&v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, &v226, v120 + 4, v120 + 12);
      v210 = (uint64_t)v121;
      *v121 = v122;
      *(_WORD *)(v120 + 12) = 2080;
      v123 = -[NSObject encryptedValues](v118, "encryptedValues");
      v124 = objc_msgSend(v123, "allKeys");
      swift_unknownObjectRelease(v123);
      v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v124, &type metadata for String);

      v126 = _swiftEmptyArrayStorage;
      isa = (uint64_t)_swiftEmptyArrayStorage;
      v127 = *(_QWORD *)(v125 + 16);
      if (v127)
      {
        v207 = (uint64_t *)v119;
        swift_bridgeObjectRetain(v125);
        v128 = (_QWORD *)(v125 + 40);
        do
        {
          v130 = *v128;
          v131 = -[NSObject encryptedValues](v118, "encryptedValues", swift_bridgeObjectRetain(*v128).n128_f64[0]);
          v132 = String._bridgeToObjectiveC()();
          v133 = objc_msgSend(v131, "objectForKeyedSubscript:", v132);
          swift_bridgeObjectRelease(v130);

          v134 = swift_unknownObjectRelease(v131);
          if (v133)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v134);
            v136 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFFF8) + 0x10);
            v135 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v136 >= v135 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v135 > 1, v136 + 1, 1);
            v129 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v136, v133);
            specialized Array._endMutation()(v129);
          }
          v128 += 2;
          --v127;
        }
        while (v127);
        swift_bridgeObjectRelease(v125);
        v126 = (_QWORD *)isa;
        v61 = v211;
        v114 = v212;
        v119 = v207;
      }
      swift_bridgeObjectRelease(v125);
      v137 = sub_10000215C(&qword_10007B510);
      v138 = Array.description.getter(v126, v137);
      v140 = v139;
      swift_bridgeObjectRelease(v126);
      isa = sub_100002CA8(v138, v140, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, v208, v120 + 14, v120 + 22);

      swift_bridgeObjectRelease(v140);
      _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v214, "Updating existing pending CKRecord %@ - %s", (uint8_t *)v120, 0x16u);
      v141 = sub_10000215C((uint64_t *)&unk_10007AA40);
      v142 = v210;
      swift_arrayDestroy(v210, 1, v141);
      swift_slowDealloc(v142, -1, -1);
      v143 = v213;
      swift_arrayDestroy(v213, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v143, -1, -1);
      swift_slowDealloc(v120, -1, -1);

      v7 = v220;
      ((void (*)(char *, uint64_t))v221)(v114, v220);
      v90 = v218;
      v5 = v219;
    }
    else
    {

      ((void (*)(char *, uint64_t))v221)(v114, v7);
    }
    v144 = swift_allocObject(&unk_100071FA0, 32, 7);
    v145 = v215;
    *(_QWORD *)(v144 + 16) = sub_10002CBD0;
    *(_QWORD *)(v144 + 24) = v145;
    swift_beginAccess(v61, &v226, 33, 0);
    swift_retain(v145);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61->isa);
    isa = (uint64_t)v61->isa;
    v61->isa = (Class)0x8000000000000000;
    v147 = v224;
    v148 = sub_100029600((uint64_t)sub_10002CB90, v144, v224, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_1000286CC, &qword_10007B2D8, &qword_10007B2B0, CKRecord_ptr);
    v150 = v149;
    v151.isa = v61->isa;
    v61->isa = (Class)isa;
    swift_bridgeObjectRelease(v151.isa);
    swift_endAccess(&v226);
    swift_release(v90);

    swift_release(v145);
    v152 = v217;
    if (v148)
LABEL_38:
      sub_10002F6E0(v148, v150);
  }
  else
  {
    v111 = v218;
    v112 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v218, v222, v7);
    if (IsAppleInternalBuild(v112))
      v113 = static os_log_type_t.default.getter();
    else
      v113 = static os_log_type_t.debug.getter();
    v173 = v113;
    v152 = v217;
    v174 = v63;
    v175 = Logger.logObject.getter(v174);
    if (os_log_type_enabled(v175, (os_log_type_t)v173))
    {
      LODWORD(v212) = v173;
      v224 = v175;
      v211 = v61;
      v176 = swift_slowAlloc(22, -1);
      v177 = (uint64_t *)swift_slowAlloc(8, -1);
      v210 = swift_slowAlloc(32, -1);
      v226 = v210;
      *(_DWORD *)v176 = 138412546;
      v178 = -[NSObject recordID](v174, "recordID");
      isa = (uint64_t)v178;
      v207 = (uint64_t *)&v226;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, &v226, v176 + 4, v176 + 12);
      v208 = v177;
      *v177 = (uint64_t)v178;
      v213 = (uint8_t *)v176;
      *(_WORD *)(v176 + 12) = 2080;
      v179 = -[NSObject encryptedValues](v174, "encryptedValues");
      v180 = objc_msgSend(v179, "allKeys");
      swift_unknownObjectRelease(v179);
      v181 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v180, &type metadata for String);

      v182 = _swiftEmptyArrayStorage;
      isa = (uint64_t)_swiftEmptyArrayStorage;
      v183 = *(_QWORD *)(v181 + 16);
      if (v183)
      {
        swift_bridgeObjectRetain(v181);
        v184 = (_QWORD *)(v181 + 40);
        do
        {
          v186 = *v184;
          v187 = -[NSObject encryptedValues](v174, "encryptedValues", swift_bridgeObjectRetain(*v184).n128_f64[0]);
          v188 = String._bridgeToObjectiveC()();
          v189 = objc_msgSend(v187, "objectForKeyedSubscript:", v188);
          swift_bridgeObjectRelease(v186);

          v190 = swift_unknownObjectRelease(v187);
          if (v189)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v190);
            v192 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFFF8) + 0x10);
            v191 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v192 >= v191 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v191 > 1, v192 + 1, 1);
            v185 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v192, v189);
            specialized Array._endMutation()(v185);
          }
          v184 += 2;
          --v183;
        }
        while (v183);
        swift_bridgeObjectRelease(v181);
        v182 = (_QWORD *)isa;
        v111 = v218;
        v5 = v219;
        v152 = v217;
      }
      swift_bridgeObjectRelease(v181);
      v193 = v213;
      v194 = sub_10000215C(&qword_10007B510);
      v195 = Array.description.getter(v182, v194);
      v197 = v196;
      swift_bridgeObjectRelease(v182);
      isa = sub_100002CA8(v195, v197, (uint64_t *)&v226);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, v207, v193 + 14, v193 + 22);

      swift_bridgeObjectRelease(v197);
      v198 = v224;
      _os_log_impl((void *)&_mh_execute_header, v224, (os_log_type_t)v212, "Staging pending CKRecord %@ - %s", v193, 0x16u);
      v199 = sub_10000215C((uint64_t *)&unk_10007AA40);
      v200 = v208;
      swift_arrayDestroy(v208, 1, v199);
      swift_slowDealloc(v200, -1, -1);
      v201 = v210;
      swift_arrayDestroy(v210, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v201, -1, -1);
      swift_slowDealloc(v193, -1, -1);

      v7 = v220;
      ((void (*)(char *, uint64_t))v221)(v111, v220);
      v61 = v211;
    }
    else
    {

      ((void (*)(char *, uint64_t))v221)(v111, v7);
    }
    v202 = v214;
    v203 = swift_allocObject(&unk_100071F28, 32, 7);
    *(_QWORD *)(v203 + 16) = v215;
    *(_QWORD *)(v203 + 24) = v202;
    swift_beginAccess(v61, &v226, 33, 0);
    swift_retain(v202);
    v204 = swift_isUniquelyReferenced_nonNull_native(v61->isa);
    isa = (uint64_t)v61->isa;
    v61->isa = (Class)0x8000000000000000;
    v148 = sub_100029600((uint64_t)sub_10002CB90, v203, v174, v204, (uint64_t (*)(void *))sub_1000286CC, &qword_10007B2D8, &qword_10007B2B0, CKRecord_ptr);
    v150 = v205;
    v206.isa = v61->isa;
    v61->isa = (Class)isa;
    swift_bridgeObjectRelease(v206.isa);
    swift_endAccess(&v226);
    if (v148)
      goto LABEL_38;
  }
  v153 = ((uint64_t (*)(char *, uint64_t, uint64_t))v223)(v152, v222, v7);
  if (IsAppleInternalBuild(v153))
    v154 = static os_log_type_t.default.getter();
  else
    v154 = static os_log_type_t.debug.getter();
  v155 = v154;
  v156 = swift_retain_n(v5, 2);
  v157 = Logger.logObject.getter(v156);
  v158 = v155;
  if (os_log_type_enabled(v157, v155))
  {
    v159 = swift_slowAlloc(22, -1);
    v160 = swift_slowAlloc(32, -1);
    *(_DWORD *)v159 = 134218242;
    isa = *((_QWORD *)v61->isa + 2);
    v226 = v160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, &v226, v159 + 4, v159 + 12);
    *(_WORD *)(v159 + 12) = 2080;
    v161.isa = v61->isa;
    swift_bridgeObjectRetain(v61->isa);
    sub_100015CA0(v162);
    v164 = v163;
    swift_bridgeObjectRelease(v161.isa);
    v165 = Array.description.getter(v164, &type metadata for String);
    v167 = v166;
    swift_bridgeObjectRelease(v164);
    v168 = v165;
    v169 = v219;
    isa = sub_100002CA8(v168, v167, (uint64_t *)&v226);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&isa, &v226, v159 + 14, v159 + 22);
    swift_release_n(v169, 2);
    swift_bridgeObjectRelease(v167);
    _os_log_impl((void *)&_mh_execute_header, v157, v158, "Pending records[%ld]: %s", (uint8_t *)v159, 0x16u);
    swift_arrayDestroy(v160, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v160, -1, -1);
    swift_slowDealloc(v159, -1, -1);

    v170 = v152;
    v171 = v220;
  }
  else
  {

    swift_release_n(v5, 2);
    v170 = v152;
    v171 = v7;
  }
  ((void (*)(char *, uint64_t))v221)(v170, v171);
  return sub_100021BFC(v216 & 1);
}

uint64_t sub_100020F14(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v5 = v4;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[1] = *(_QWORD *)(v5 + 56);
  v17 = swift_allocObject(&unk_100071FF0, 49, 7);
  *(_QWORD *)(v17 + 16) = v5;
  *(_QWORD *)(v17 + 24) = a1;
  *(_QWORD *)(v17 + 32) = a3;
  *(_QWORD *)(v17 + 40) = a4;
  *(_BYTE *)(v17 + 48) = a2;
  aBlock[4] = sub_10002CC58;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100072008;
  v18 = _Block_copy(aBlock);
  swift_retain(v5);
  v19 = a1;
  swift_retain(a4);
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10000215C((uint64_t *)&unk_10007A960);
  v23 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v10, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release(v29);
}

uint64_t sub_100021128(uint64_t a1, void *a2, uint8_t *a3, NSObject *a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  _QWORD *v34;
  NSObject *v35;
  NSObject *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint8_t *v58;
  NSObject *v59;
  id v60;
  uint64_t v61;
  char *v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  _QWORD *v68;
  NSObject *v69;
  NSObject *v70;
  uint8_t *v71;
  uint8_t *v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t *v84;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  char *v121;
  uint64_t v123;
  uint8_t *v124;
  NSObject *v125;
  uint64_t v126;
  void *v127;
  char *v128;
  uint8_t *v129;
  NSObject *v130;
  int v131;
  uint64_t *v132;
  char *v133;
  uint64_t v134;
  id v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  uint64_t v141;
  NSObject *v142;
  char v143[24];
  char v144[32];

  v131 = a5;
  v129 = a3;
  v130 = a4;
  v138 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v138 - 8);
  v8 = __chkstk_darwin(v138);
  v136 = (char *)&v123 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v123 - v11;
  v13 = __chkstk_darwin(v10);
  v128 = (char *)&v123 - v14;
  __chkstk_darwin(v13);
  v16 = (char *)&v123 - v15;
  v17 = (uint64_t *)(a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  swift_beginAccess(a1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v144, 0, 0);
  v18 = *v17;
  v19 = a2;
  swift_bridgeObjectRetain(v18);
  v20 = 0;
  sub_10002DBBC(v21, v19);
  v23 = v22;
  v132 = v24;
  v26 = v25;
  swift_bridgeObjectRelease(v18);
  v135 = v19;

  v137 = a1;
  v133 = v12;
  v134 = v7;
  if (v23)
  {
    swift_retain(v26);
    v27 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v16, v27, v138);
    v28 = v23;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    v31 = os_log_type_enabled(v29, v30);
    v32 = v26;
    v127 = 0;
    if (v31)
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (_QWORD *)swift_slowAlloc(8, -1);
      v126 = v32;
      v124 = v33;
      *(_DWORD *)v33 = 138412290;
      v142 = v28;
      v35 = v28;
      v125 = v28;
      v36 = v35;
      v32 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v33 + 4, v33 + 12);
      *v34 = v23;

      v28 = v125;
      v37 = v124;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Removing pending update for record: %@", v124, 0xCu);
      v38 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v34, 1, v38);
      swift_slowDealloc(v34, -1, -1);
      v12 = v133;
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {

      v29 = v28;
    }
    v39 = v132;

    v7 = v134;
    (*(void (**)(char *, uint64_t))(v134 + 8))(v16, v138);
    v40 = sub_10002A620();
    v41 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v40, 0, 0);
    *v42 = 1;
    v142 = v41;
    v143[0] = 1;
    ((void (*)(NSObject **))v39)(&v142);
    swift_errorRelease(v41);
    swift_beginAccess(v17, &v142, 33, 0);
    v43 = sub_1000282EC((uint64_t)v28, (uint64_t (*)(uint64_t, __n128))sub_1000286CC, &qword_10007B2D8);
    v45 = v44;
    swift_endAccess(&v142);
    swift_release_n(v32, 2);

    v20 = v127;
    if (v43)
      sub_10002F6E0(v43, v45);
  }
  v46 = (uint64_t *)(v137 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  swift_beginAccess(v137 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v142, 0, 0);
  v47 = *v46;
  v48 = v135;
  swift_bridgeObjectRetain(v47);
  sub_10002C3FC(v49, v48);
  v51 = v50;
  v53 = v52;
  v55 = v54;
  swift_bridgeObjectRelease(v47);

  v132 = v46;
  v135 = v20;
  if (v51)
  {
    v56 = swift_allocObject(&unk_100072850, 32, 7);
    *(_QWORD *)(v56 + 16) = v53;
    *(_QWORD *)(v56 + 24) = v55;
    v57 = (_QWORD *)swift_allocObject(&unk_100072878, 56, 7);
    v57[2] = v51;
    v57[3] = sub_10002EE30;
    v58 = v129;
    v57[4] = v56;
    v57[5] = v58;
    v59 = v130;
    v57[6] = v130;
    swift_retain(v59);
    v60 = v51;
    swift_retain(v56);
    v61 = sub_10003078C();
    v62 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v128, v61, v138);
    v63 = v60;
    swift_retain(v56);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc(12, -1);
      v68 = (_QWORD *)swift_slowAlloc(8, -1);
      v129 = v67;
      *(_DWORD *)v67 = 138412290;
      v140 = v63;
      v69 = v63;
      v130 = v63;
      v70 = v69;
      v71 = v67 + 4;
      v72 = v67 + 12;
      v62 = v128;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v71, v72);
      *v68 = v51;
      swift_release(v56);

      v73 = v129;
      v63 = v130;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "Updating existing pending record: %@", v129, 0xCu);
      v74 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v68, 1, v74);
      swift_slowDealloc(v68, -1, -1);
      v7 = v134;
      swift_slowDealloc(v73, -1, -1);
    }
    else
    {

      swift_release(v56);
      v65 = v63;
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v62, v138);
    v83 = swift_allocObject(&unk_1000728A0, 32, 7);
    *(_QWORD *)(v83 + 16) = sub_10002EE98;
    *(_QWORD *)(v83 + 24) = v57;
    v84 = v132;
    swift_beginAccess(v132, &v140, 33, 0);
    swift_retain(v57);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v84);
    v139 = *v84;
    *v84 = 0x8000000000000000;
    v86 = v83;
    v82 = v84;
    v78 = sub_100029600((uint64_t)sub_10002FAEC, v86, v63, isUniquelyReferenced_nonNull_native, (uint64_t (*)(void *))sub_100028718, &qword_10007B2E0, &qword_10007B298, CKRecordID_ptr);
    v80 = v87;
    v88 = *v82;
    *v82 = v139;
    swift_bridgeObjectRelease(v88);
    swift_endAccess(&v140);
    swift_release(v56);

    swift_release(v57);
    v12 = v133;
    if (v78)
      goto LABEL_14;
  }
  else
  {
    v75 = swift_allocObject(&unk_100072828, 32, 7);
    v76 = v130;
    *(_QWORD *)(v75 + 16) = v129;
    *(_QWORD *)(v75 + 24) = v76;
    swift_beginAccess(v46, &v140, 33, 0);
    swift_retain(v76);
    v77 = swift_isUniquelyReferenced_nonNull_native(*v46);
    v139 = *v46;
    *v46 = 0x8000000000000000;
    v78 = sub_100029600((uint64_t)sub_10002EE0C, v75, v48, v77, (uint64_t (*)(void *))sub_100028718, &qword_10007B2E0, &qword_10007B298, CKRecordID_ptr);
    v80 = v79;
    v81 = *v46;
    *v46 = v139;
    swift_bridgeObjectRelease(v81);
    swift_endAccess(&v140);
    v82 = v46;
    if (v78)
LABEL_14:
      sub_10002F6E0(v78, v80);
  }
  v89 = sub_10003078C();
  v90 = *(NSObject **)(v7 + 16);
  ((void (*)(char *, uint64_t, uint64_t))v90)(v12, v89, v138);
  v91 = swift_retain_n(v137, 2);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = swift_slowAlloc(22, -1);
    v95 = swift_slowAlloc(32, -1);
    v130 = v90;
    v96 = v95;
    *(_DWORD *)v94 = 134218242;
    v139 = *(_QWORD *)(*v82 + 16);
    v140 = v95;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v94 + 4, v94 + 12);
    *(_WORD *)(v94 + 12) = 2080;
    v97 = *v82;
    swift_bridgeObjectRetain(*v82);
    v98 = v135;
    sub_100015FDC(v99);
    v101 = v100;
    v135 = v98;
    swift_bridgeObjectRelease(v97);
    v102 = Array.description.getter(v101, &type metadata for String);
    v104 = v103;
    swift_bridgeObjectRelease(v101);
    v139 = sub_100002CA8(v102, v104, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v94 + 14, v94 + 22);
    swift_release_n(v137, 2);
    swift_bridgeObjectRelease(v104);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Pending deletion for records[%ld] : %s", (uint8_t *)v94, 0x16u);
    swift_arrayDestroy(v96, 1, (char *)&type metadata for Any + 8);
    v105 = v96;
    v90 = v130;
    swift_slowDealloc(v105, -1, -1);
    swift_slowDealloc(v94, -1, -1);

    v106 = *(void (**)(char *, uint64_t))(v134 + 8);
    v106(v133, v138);
  }
  else
  {

    swift_release_n(v137, 2);
    v106 = *(void (**)(char *, uint64_t))(v7 + 8);
    v106(v12, v138);
  }
  v107 = v136;
  ((void (*)(char *, uint64_t, uint64_t))v90)(v136, v89, v138);
  v108 = swift_retain_n(v137, 2);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v109, v110))
  {
    v111 = swift_slowAlloc(22, -1);
    v112 = swift_slowAlloc(32, -1);
    *(_DWORD *)v111 = 134218242;
    v113 = v132;
    v139 = *(_QWORD *)(*v132 + 16);
    v140 = v112;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v111 + 4, v111 + 12);
    *(_WORD *)(v111 + 12) = 2080;
    v114 = *v113;
    swift_bridgeObjectRetain(v114);
    sub_100015FDC(v115);
    v117 = v116;
    swift_bridgeObjectRelease(v114);
    v118 = Array.description.getter(v117, &type metadata for String);
    v120 = v119;
    swift_bridgeObjectRelease(v117);
    v139 = sub_100002CA8(v118, v120, (uint64_t *)&v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v111 + 14, v111 + 22);
    swift_release_n(v137, 2);
    swift_bridgeObjectRelease(v120);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "Pending deletion for records[%ld] : %s", (uint8_t *)v111, 0x16u);
    swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v111, -1, -1);

    v121 = v136;
  }
  else
  {

    swift_release_n(v137, 2);
    v121 = v107;
  }
  v106(v121, v138);
  return sub_100021BFC(v131 & 1);
}

uint64_t sub_100021BFC(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_QWORD);
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t);
  char *v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint8_t *v70;
  uint64_t v71;
  uint8_t *v72;
  char *v73;
  void (*v74)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v75;
  uint64_t (*v76)(char *, void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t));
  char *v77;
  char v78[24];
  uint64_t v79;
  uint64_t v80[3];
  uint64_t v81;
  uint64_t v82;

  v2 = v1;
  LODWORD(v76) = a1;
  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v77 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v70 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v70 - v10;
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (uint8_t **)((char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = *(void **)(v2 + 56);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    v20 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    v21 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    if (v21)
    {
      v22 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity;
      v23 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_retryFetchActivity);
      swift_retain(*(_QWORD *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer));
      if (v23)
      {
        v24 = sub_10003078C();
        v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v11, v24, v3);
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc(2, -1);
          v73 = v9;
          v29 = v4;
          v30 = v28;
          *(_WORD *)v28 = 0;
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Defer fetch until scheduled changes are pushed to cloud", v28, 2u);
          v31 = v30;
          v4 = v29;
          v9 = v73;
          swift_slowDealloc(v31, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v4 + 8))(v11, v3);
        objc_msgSend(*(id *)(v2 + v22), "invalidate");
        v32 = *(void **)(v2 + v22);
        *(_QWORD *)(v2 + v22) = 0;

        (*(void (**)(void))(*(_QWORD *)v21 + 160))();
        v33 = *(_QWORD *)(v2 + v20);
        *(_QWORD *)(v2 + v20) = 0;
        swift_release(v33);
        sub_100022280(v76 & 1, 1);
      }
      v34 = sub_10003078C();
      v35 = *(void (**)(_QWORD))(v4 + 16);
      v76 = (uint64_t (*)(char *, void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t)))v34;
      v74 = (void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t))v35;
      v35(v9);
      v36 = swift_retain_n(v2, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = v4;
      v39 = static os_log_type_t.default.getter();
      v40 = os_log_type_enabled(v37, v39);
      v75 = v21;
      if (v40)
      {
        v72 = (uint8_t *)v38;
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v71 = v42;
        *(_DWORD *)v41 = 136315138;
        v80[0] = v42;
        v70 = v41 + 4;
        v43 = (uint64_t *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v78, 0, 0);
        v44 = *v43;
        v73 = v9;
        v45 = v3;
        v46 = sub_100011254(0, &qword_10007B2B0, CKRecord_ptr);
        swift_bridgeObjectRetain(v44);
        v47 = sub_10000215C(&qword_10007B2B8);
        v48 = sub_10002E244(&qword_10007B2C0, &qword_10007B2B0, CKRecord_ptr);
        v49 = v46;
        v3 = v45;
        v50 = Dictionary.Keys.description.getter(v44, v49, v47, v48);
        v52 = v51;
        swift_bridgeObjectRelease(v44);
        v81 = sub_100002CA8(v50, v52, v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v70, v41 + 12);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease(v52);
        _os_log_impl((void *)&_mh_execute_header, v37, v39, "Already Scheduled changes: %s", v41, 0xCu);
        v53 = v71;
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v53, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        v54 = (void (*)(char *, uint64_t))*((_QWORD *)v72 + 1);
        v54(v73, v3);
      }
      else
      {

        swift_release_n(v2, 2);
        v54 = *(void (**)(char *, uint64_t))(v38 + 8);
        v54(v9, v3);
      }
      v55 = v77;
      v74(v77, (uint64_t (*)(_QWORD, _QWORD))v76, v3);
      v56 = swift_retain_n(v2, 2);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v73 = (char *)v60;
        v76 = (uint64_t (*)(char *, void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t)))v54;
        *(_DWORD *)v59 = 136315138;
        v81 = v60;
        v72 = v59 + 4;
        v61 = (uint64_t *)(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess(v2 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, v80, 0, 0);
        v62 = *v61;
        v74 = (void (*)(char *, uint64_t (*)(_QWORD, _QWORD), uint64_t))v3;
        v63 = sub_100011254(0, &qword_10007B298, CKRecordID_ptr);
        swift_bridgeObjectRetain(v62);
        v64 = sub_10000215C(&qword_10007B2A0);
        v65 = sub_10002E244(&qword_10007B2A8, &qword_10007B298, CKRecordID_ptr);
        v66 = Dictionary.Keys.description.getter(v62, v63, v64, v65);
        v68 = v67;
        swift_bridgeObjectRelease(v62);
        v79 = sub_100002CA8(v66, v68, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v72, v59 + 12);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "Already Scheduled deletion: %s", v59, 0xCu);
        v69 = v73;
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        swift_release(v75);
        return v76(v77, v74);
      }
      else
      {

        swift_release(v75);
        swift_release_n(v2, 2);
        return ((uint64_t (*)(char *, uint64_t))v54)(v55, v3);
      }
    }
    else
    {
      return sub_100022280(v76 & 1, 0);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100022280(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t result;
  double v17;
  uint64_t v18;
  double v19;
  char *v20;
  uint64_t v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  int v32;
  int v33;
  char v34[24];
  double v35;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(void **)(v3 + 56);
  *v13 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v11 + 8))(v13, v10);
  if ((v14 & 1) != 0)
  {
    sub_100029558(result, 0.0, 10.0);
    v35 = v17;
    v18 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone;
    if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_initialUploadDone) & 1) == 0)
    {
      v19 = v17;
      v20 = sub_100058CA4();
      swift_beginAccess(v20, v34, 0, 0);
      v22 = 3.0;
      if (*v20 == 1 && (a1 & 1) == 0)
      {
        sub_100029558(v21, 0.0, 120.0);
        v22 = v19 + v23;
      }
      v35 = v22;
      *(_BYTE *)(v3 + v18) = 1;
    }
    v24 = sub_10003078C();
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v24, v6);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(18, -1);
      *(_DWORD *)v28 = 67109376;
      v32 = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v28 + 4, v28 + 8);
      *(_WORD *)(v28 + 8) = 2048;
      swift_beginAccess(&v35, &v32, 0, 0);
      v31 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 10, v28 + 18);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "checkInPendingCloudUpdates, userInitiated: %{BOOL}d with delay: %f", (uint8_t *)v28, 0x12u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v29 = type metadata accessor for Transaction();
    __chkstk_darwin(v29);
    *(&v30 - 4) = v3;
    *(&v30 - 3) = (uint64_t)&v35;
    *((_BYTE *)&v30 - 16) = a1 & 1;
    *((_BYTE *)&v30 - 15) = a2 & 1;
    return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.checkInPendingCloudUpdates", 50, 2, (void (*)(uint64_t))sub_10002D928);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100022570(uint64_t a1, uint64_t a2, int a3, int a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _QWORD *v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, _QWORD *);
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  NSObject *v43;
  uint8_t *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  BOOL v50;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  id v60;
  NSString v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  _QWORD *v78;
  uint8_t *v79;
  uint64_t v80;
  Swift::Bool v81;
  objc_class *v82;
  char v83;
  uint64_t v84;
  id v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  _QWORD *v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint8_t *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  id v105;
  uint64_t v106;
  int v107;
  int v108;
  uint64_t v109;
  _QWORD *v110;
  void (*v111)(char *, uint64_t, _QWORD *);
  char *v112;
  void (*v113)(char *, _QWORD *);
  char *v114;
  uint64_t v115;
  _QWORD *v116;
  int v117;
  NSObject *v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char v127[24];
  char v128[24];
  char v129[8];
  Swift::OpaquePointer_optional v130;
  Swift::OpaquePointer_optional v131;

  v108 = a4;
  v107 = a3;
  v5 = (_QWORD *)type metadata accessor for Logger(0);
  v6 = *(v5 - 1);
  v7 = __chkstk_darwin(v5);
  v114 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v112 = (char *)&v100 - v10;
  __chkstk_darwin(v9);
  v12 = (char *)&v100 - v11;
  v106 = a2;
  v13 = a2 + 16;
  Transaction.capture()();
  v14 = sub_10003078C();
  v15 = *(uint64_t (**)(_QWORD))(v6 + 16);
  v115 = v14;
  v111 = (void (*)(char *, uint64_t, _QWORD *))v15;
  v16 = v15(v12);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = v5;
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "checkInPendingCloudUpdates timer fired", v20, 2u);
    v21 = v20;
    v5 = v19;
    swift_slowDealloc(v21, -1, -1);
  }

  v113 = *(void (**)(char *, _QWORD *))(v6 + 8);
  v113(v12, v5);
  swift_beginAccess(v13, v129, 0, 0);
  Strong = swift_weakLoadStrong(v13);
  if (Strong)
  {
    v23 = Strong;
    v24 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
    v25 = *(_QWORD *)(Strong + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
    v109 = Strong;
    if (v25)
    {
      v26 = *(void (**)(uint64_t))(*(_QWORD *)v25 + 160);
      v27 = swift_retain(v25);
      v26(v27);
      v23 = v109;
      swift_release(v25);
      v28 = *(_QWORD *)(v23 + v24);
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(v23 + v24) = 0;
    swift_release(v28);
    v29 = *(void **)(v23 + 56);
    v30 = (uint64_t *)(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    swift_beginAccess(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, v128, 0, 0);
    v31 = *v30;
    swift_bridgeObjectRetain_n(v31, 2);
    v32 = v29;
    v110 = sub_100028000(v31);
    v104 = v31;
    swift_bridgeObjectRelease(v31);
    v33 = (uint64_t *)(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
    swift_beginAccess(v23 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v127, 0, 0);
    v34 = *v33;
    swift_bridgeObjectRetain_n(v34, 2);
    v35 = (unint64_t)sub_100028000(v34);
    v103 = v34;
    swift_bridgeObjectRelease(v34);
    v36 = v112;
    v37 = v111;
    v38 = ((uint64_t (*)(char *, uint64_t, _QWORD *))v111)(v112, v115, v5);
    v39 = IsAppleInternalBuild(v38);
    v105 = v32;
    if (v39)
      v40 = static os_log_type_t.default.getter();
    else
      v40 = static os_log_type_t.debug.getter();
    v41 = v40;
    v42 = swift_retain_n(v35, 2);
    v43 = Logger.logObject.getter(v42);
    if (os_log_type_enabled(v43, (os_log_type_t)v41))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v100 = swift_slowAlloc(32, -1);
      v125 = v100;
      v101 = v44;
      *(_DWORD *)v44 = 136315138;
      if ((v35 & 0x8000000000000000) != 0 || (v35 & 0x4000000000000000) != 0)
        goto LABEL_52;
      v45 = *(_QWORD *)(v35 + 16);
      swift_retain(v35);
      while (1)
      {
        v102 = v5;
        v46 = _swiftEmptyArrayStorage;
        if (!v45)
          break;
        v47 = 0;
        v120 = v45;
        v121 = v35 & 0xC000000000000001;
        v116 = (_QWORD *)(v35 + 32);
        v48 = _swiftEmptyArrayStorage;
        v118 = v43;
        v119 = (_QWORD *)v35;
        v117 = v41;
        while (1)
        {
          v49 = v121 ? (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v47, v35) : (id)v116[v47];
          v5 = v49;
          v50 = __OFADD__(v47, 1);
          v51 = v47 + 1;
          if (v50)
            break;
          v122 = v51;
          v123 = v48;
          v52 = objc_msgSend(v49, "encryptedValues");
          v53 = objc_msgSend(v52, "allKeys");
          swift_unknownObjectRelease(v52);
          v54 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v53, &type metadata for String);

          v124 = (uint64_t)v46;
          v55 = v46;
          v56 = *(_QWORD *)(v54 + 16);
          if (v56)
          {
            swift_bridgeObjectRetain(v54);
            v57 = (_QWORD *)(v54 + 40);
            do
            {
              v59 = *v57;
              v60 = objc_msgSend(v5, "encryptedValues", swift_bridgeObjectRetain(*v57).n128_f64[0]);
              v61 = String._bridgeToObjectiveC()();
              v62 = objc_msgSend(v60, "objectForKeyedSubscript:", v61);
              swift_bridgeObjectRelease(v59);

              v63 = swift_unknownObjectRelease(v60);
              if (v62)
              {
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v63);
                v65 = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v64 = *(_QWORD *)((v124 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v65 >= v64 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
                v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v62);
                specialized Array._endMutation()(v58);
              }
              v57 += 2;
              --v56;
            }
            while (v56);
            swift_bridgeObjectRelease(v54);
            v66 = v124;
            v43 = v118;
            v35 = (unint64_t)v119;
            v41 = v117;
            v46 = _swiftEmptyArrayStorage;
          }
          else
          {
            v66 = (uint64_t)v55;
            v46 = v55;
          }

          swift_bridgeObjectRelease(v54);
          v48 = v123;
          if ((swift_isUniquelyReferenced_nonNull_native(v123) & 1) == 0)
            v48 = sub_100027CE4(0, v48[2] + 1, 1, v48);
          v68 = v48[2];
          v67 = v48[3];
          if (v68 >= v67 >> 1)
            v48 = sub_100027CE4((_QWORD *)(v67 > 1), v68 + 1, 1, v48);
          v48[2] = v68 + 1;
          v48[v68 + 4] = v66;
          v47 = v122;
          if (v122 == v120)
            goto LABEL_37;
        }
        __break(1u);
LABEL_52:
        v98 = swift_retain(v35);
        v45 = _CocoaArrayWrapper.endIndex.getter(v98);
      }
      v48 = _swiftEmptyArrayStorage;
LABEL_37:
      swift_release(v35);
      v69 = v101;
      v70 = sub_10000215C(&qword_10007B288);
      v71 = Array.description.getter(v48, v70);
      v73 = v72;
      swift_bridgeObjectRelease(v48);
      v124 = sub_100002CA8(v71, v73, &v125);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, &v125, v69 + 4, v69 + 12);
      swift_release_n(v35, 2);
      swift_bridgeObjectRelease(v73);
      _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v41, "Staged CKRecords - %s", v69, 0xCu);
      v74 = v100;
      swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1, -1);
      swift_slowDealloc(v69, -1, -1);

      v5 = v102;
      v113(v112, v102);
      v37 = v111;
    }
    else
    {

      swift_release_n(v35, 2);
      v113(v36, v5);
    }
    v37(v114, v115, v5);
    v75 = swift_retain_n(v35, 2);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = v5;
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v79 = 134217984;
      if ((v35 & 0x8000000000000000) != 0 || (v35 & 0x4000000000000000) != 0)
      {
        swift_bridgeObjectRetain(v35);
        v80 = _CocoaArrayWrapper.endIndex.getter(v99);
        swift_release(v35);
      }
      else
      {
        v80 = *(_QWORD *)(v35 + 16);
      }
      swift_release(v35);
      v125 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126, v79 + 4, v79 + 12);
      swift_release(v35);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "checkInPendingCloudUpdates count: %ld", v79, 0xCu);
      swift_slowDealloc(v79, -1, -1);

      v5 = v78;
    }
    else
    {

      swift_release_n(v35, 2);
    }
    v113(v114, v5);
    sub_100011254(0, &qword_10007B280, CKModifyRecordsOperation_ptr);
    swift_retain(v35);
    v81 = (char)v110;
    swift_retain(v110);
    v130.value._rawValue = (void *)v35;
    v130.is_nil = v81;
    v82 = CKModifyRecordsOperation.init(recordsToSave:recordIDsToDelete:)(v130, v131).super.super.super.super.isa;
    v83 = v107;
    v84 = v109;
    if ((v107 & 1) != 0)
      v85 = sub_100011D70();
    else
      v85 = sub_100011D94();
    v86 = v85;
    -[objc_class setGroup:](v82, "setGroup:", v85, v100);

    -[objc_class setCallbackQueue:](v82, "setCallbackQueue:", *(_QWORD *)(v84 + 64));
    if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
      -[objc_class setQualityOfService:](v82, "setQualityOfService:", 25);
    v87 = swift_allocObject(&unk_1000723A0, 32, 7);
    *(_QWORD *)(v87 + 16) = v103;
    v88 = v106;
    *(_QWORD *)(v87 + 24) = v106;
    swift_retain(v88);
    CKModifyRecordsOperation.perRecordSaveBlock.setter(sub_10002DAB4, v87);
    v89 = swift_allocObject(&unk_1000723C8, 24, 7);
    *(_QWORD *)(v89 + 16) = v104;
    CKModifyRecordsOperation.perRecordDeleteBlock.setter(sub_10002DAC0, v89);
    v90 = swift_allocObject(&unk_1000723F0, 50, 7);
    v91 = v105;
    *(_QWORD *)(v90 + 16) = v105;
    *(_QWORD *)(v90 + 24) = v84;
    v92 = v110;
    *(_QWORD *)(v90 + 32) = v35;
    *(_QWORD *)(v90 + 40) = v92;
    *(_BYTE *)(v90 + 48) = v83 & 1;
    *(_BYTE *)(v90 + 49) = v108 & 1;
    v93 = v91;
    swift_retain(v84);
    CKModifyRecordsOperation.modifyRecordsResultBlock.setter(sub_10002DADC, v90);
    v94 = type metadata accessor for Transaction();
    __chkstk_darwin(v94);
    *(&v100 - 2) = (uint64_t)v82;
    v95 = v84;
    static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.checkInPendingCloudUpdates.completionBlock", 66, 2, (void (*)(uint64_t))sub_10002DAF4);
    v96 = sub_100011C24();
    v97 = objc_msgSend(v96, "privateCloudDatabase");

    objc_msgSend(v97, "addOperation:", v82);
    swift_release(v95);

  }
}

void sub_100022FF0(void *a1, NSObject *a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  void (*v22)(NSObject **);
  void (*v23)(NSObject **);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  NSObject *v29;
  os_log_type_t v30;
  BOOL v31;
  uint8_t *v32;
  NSObject **v33;
  NSObject *v34;
  uint64_t v35;
  NSObject **v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  NSObject *v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  int v46;
  uint64_t v47;
  NSObject **v48;
  NSObject *v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(NSObject **);
  char *v56;
  Class v57;
  uint64_t v58;
  int v59;
  uint64_t Strong;
  uint64_t v61;
  int v62;
  NSObject *v63;
  NSObject *v64;
  NSObject *v65;
  NSObject *v66;
  id v67;
  id v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  NSString v76;
  id v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  char v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  os_log_t v89;
  uint64_t v90;
  objc_class *v91;
  uint64_t v92;
  NSObject *v93;
  NSObject *v94;
  Class isa;
  void (*v96)(NSObject **);
  uint64_t v97;
  id v98;
  char *v99;
  uint64_t v100;
  os_log_t v101;
  uint64_t v102;
  NSObject *v103;
  _BYTE v104[24];

  v10 = type metadata accessor for Logger(0);
  v11 = *(NSObject **)(v10 - 8);
  v100 = v10;
  v101 = v11;
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v99 = (char *)&v91 - v16;
  __chkstk_darwin(v15);
  v18 = (char *)&v91 - v17;
  v19 = a1;
  sub_10002DBBC(a4, v19);
  v21 = v20;
  v23 = (void (*)(NSObject **))v22;
  v25 = v24;

  if (v21)
  {
    v97 = v25;
    v98 = v21;
    v96 = v23;
    if ((a3 & 1) != 0)
    {
      v38 = a5 + 16;
      swift_errorRetain(a2);
      v39 = sub_10003078C();
      v40 = v100;
      ((void (*)(char *, uint64_t, uint64_t))v101[2].isa)(v14, v39, v100);
      v41 = v19;
      sub_10002E284(a2, 1);
      v42 = v41;
      v43 = sub_10002E284(a2, 1);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter();
      v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        v47 = swift_slowAlloc(22, -1);
        v48 = (NSObject **)swift_slowAlloc(16, -1);
        *(_DWORD *)v47 = 138412546;
        LODWORD(v99) = v46;
        v103 = v42;
        v93 = v104;
        v49 = v42;
        isa = (Class)v44;
        v50 = v38;
        v51 = v49;
        v52 = v97;
        v40 = v100;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v47 + 4, v47 + 12);
        *v48 = v42;

        v38 = v50;
        v44 = isa;
        *(_WORD *)(v47 + 12) = 2112;
        swift_errorRetain(a2);
        v53 = _swift_stdlib_bridgeErrorToNSError(a2);
        v103 = v53;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v93, v47 + 14, v47 + 22);
        v48[1] = v53;
        sub_10002EAB4(a2, 1);
        sub_10002EAB4(a2, 1);
        _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v99, "CheckInPendingCloudUpdates CKRecord save failed %@ with error: %@", (uint8_t *)v47, 0x16u);
        v54 = sub_10000215C((uint64_t *)&unk_10007AA40);
        swift_arrayDestroy(v48, 2, v54);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v47, -1, -1);
        v55 = v96;
      }
      else
      {

        sub_10002EAB4(a2, 1);
        sub_10002EAB4(a2, 1);
        v55 = v96;
        v52 = v97;
      }

      ((void (*)(char *, uint64_t))v101[1].isa)(v14, v40);
      v103 = a2;
      v104[0] = 1;
      swift_errorRetain(a2);
      v55(&v103);
      sub_10002EAB4(a2, 1);
      swift_beginAccess(v38, &v103, 0, 0);
      Strong = swift_weakLoadStrong(v38);
      if (Strong)
      {
        v61 = Strong;
        sub_10001DF84((uint64_t)a2, 0);
        swift_release(v52);

        sub_10002EAB4(a2, 1);
        swift_release(v61);
        return;
      }
      swift_release(v52);

      v82 = a2;
      v83 = 1;
    }
    else
    {
      v93 = a2;
      v26 = sub_10003078C();
      v27 = v100;
      isa = v101[2].isa;
      ((void (*)(char *, uint64_t, uint64_t))isa)(v18, v26, v100);
      v28 = v19;
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      v31 = os_log_type_enabled(v29, v30);
      v94 = a2;
      if (v31)
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = (NSObject **)swift_slowAlloc(8, -1);
        v92 = v26;
        *(_DWORD *)v32 = 138412290;
        v103 = v28;
        v34 = v28;
        v23 = v96;
        v26 = v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, v104, v32 + 4, v32 + 12);
        *v33 = v28;

        a2 = v94;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "CheckInPendingCloudUpdates CKRecord successfully saved (%@.", v32, 0xCu);
        v35 = sub_10000215C((uint64_t *)&unk_10007AA40);
        v36 = v33;
        v27 = v100;
        swift_arrayDestroy(v36, 1, v35);
        swift_slowDealloc(v36, -1, -1);
        v37 = v32;
        v21 = v98;
        swift_slowDealloc(v37, -1, -1);
      }
      else
      {

        v29 = v28;
      }
      v56 = v99;

      v57 = v101[1].isa;
      ((void (*)(char *, uint64_t))v57)(v18, v27);
      v58 = ((uint64_t (*)(char *, uint64_t, uint64_t))isa)(v56, v26, v27);
      if (IsAppleInternalBuild(v58))
        v59 = static os_log_type_t.default.getter();
      else
        v59 = static os_log_type_t.debug.getter();
      v62 = v59;
      v63 = v93;
      sub_10002E284(a2, 0);
      v64 = v63;
      v65 = Logger.logObject.getter(v64);
      if (os_log_type_enabled(v65, (os_log_type_t)v62))
      {
        LODWORD(isa) = v62;
        v101 = v65;
        v66 = swift_slowAlloc(12, -1);
        v92 = swift_slowAlloc(32, -1);
        v103 = v92;
        v93 = v66;
        LODWORD(v66->isa) = 136315138;
        v67 = -[NSObject encryptedValues](v64, "encryptedValues");
        v68 = objc_msgSend(v67, "allKeys");
        swift_unknownObjectRelease(v67);
        v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v68, &type metadata for String);

        v70 = _swiftEmptyArrayStorage;
        v102 = (uint64_t)_swiftEmptyArrayStorage;
        v71 = *(_QWORD *)(v69 + 16);
        if (v71)
        {
          v91 = v57;
          swift_bridgeObjectRetain(v69);
          v72 = (_QWORD *)(v69 + 40);
          do
          {
            v74 = *v72;
            v75 = -[NSObject encryptedValues](v64, "encryptedValues", swift_bridgeObjectRetain(*v72).n128_f64[0]);
            v76 = String._bridgeToObjectiveC()();
            v77 = objc_msgSend(v75, "objectForKeyedSubscript:", v76);
            swift_bridgeObjectRelease(v74);

            v78 = swift_unknownObjectRelease(v75);
            if (v77)
            {
              specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v78);
              v80 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x10);
              v79 = *(_QWORD *)((v102 & 0xFFFFFFFFFFFFFF8) + 0x18);
              if (v80 >= v79 >> 1)
                specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
              v73 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, v77);
              specialized Array._endMutation()(v73);
            }
            v72 += 2;
            --v71;
          }
          while (v71);
          swift_bridgeObjectRelease(v69);
          v70 = (_QWORD *)v102;
          v56 = v99;
          v57 = v91;
        }
        swift_bridgeObjectRelease(v69);
        v84 = (uint8_t *)v93;
        v85 = sub_10000215C(&qword_10007B510);
        v86 = Array.description.getter(v70, v85);
        v88 = v87;
        swift_bridgeObjectRelease(v70);
        v102 = sub_100002CA8(v86, v88, (uint64_t *)&v103);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v88);
        a2 = v94;
        sub_10002EAB4(v94, 0);
        sub_10002EAB4(a2, 0);
        v89 = v101;
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)isa, "CheckInPendingCloudUpdates saved CKRecords values - %s", v84, 0xCu);
        v90 = v92;
        swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v90, -1, -1);
        swift_slowDealloc(v84, -1, -1);

        ((void (*)(char *, uint64_t))v57)(v56, v100);
        v81 = v97;
        v21 = v98;
        v23 = v96;
      }
      else
      {
        sub_10002EAB4(a2, 0);
        sub_10002EAB4(a2, 0);

        ((void (*)(char *, uint64_t))v57)(v56, v27);
        v81 = v97;
      }
      v103 = a2;
      v104[0] = 0;
      sub_10002E284(a2, 0);
      v23(&v103);

      sub_10002EAB4(a2, 0);
      swift_release(v81);
      v82 = a2;
      v83 = 0;
    }
    sub_10002EAB4(v82, v83);
  }
}

void sub_100023858(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  void (*v16)(_QWORD);
  void (*v17)(_QWORD);
  void (*v18)(_QWORD);
  void (*v19)(_QWORD);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;
  NSObject *v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  int v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t *v39;
  uint8_t *v40;
  uint8_t *v41;
  NSObject *v42;
  void (*v43)(_QWORD);
  uint64_t v44;
  uint64_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint8_t *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint8_t *v54;
  void (*v55)(_QWORD);
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;

  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v51 - v13;
  v15 = a1;
  sub_10002C690(a4);
  v17 = v16;
  v19 = v18;
  v21 = v20;

  if (v17)
  {
    if ((a3 & 1) != 0)
    {
      swift_errorRetain(a2);
      v32 = sub_10003078C();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v32, v8);
      swift_errorRetain(a2);
      v33 = swift_errorRetain(a2);
      v34 = Logger.logObject.getter(v33);
      v35 = static os_log_type_t.error.getter();
      v36 = v35;
      if (os_log_type_enabled(v34, v35))
      {
        v55 = v17;
        v37 = swift_slowAlloc(12, -1);
        LODWORD(v54) = v36;
        v38 = (uint8_t *)v37;
        v39 = (uint64_t *)swift_slowAlloc(8, -1);
        v52 = (uint8_t *)v39;
        v56 = v21;
        v53 = v38;
        *(_DWORD *)v38 = 138412290;
        v40 = v38 + 12;
        v41 = v38 + 4;
        swift_errorRetain(a2);
        v42 = v34;
        v43 = v19;
        v44 = v8;
        v45 = _swift_stdlib_bridgeErrorToNSError(a2);
        v57 = v45;
        v46 = v41;
        v47 = v40;
        v17 = v55;
        v21 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v46, v47);
        *v39 = v45;
        v8 = v44;
        v19 = v43;
        v34 = v42;
        sub_10002E214(a2, 1);
        sub_10002E214(a2, 1);
        v48 = v53;
        _os_log_impl((void *)&_mh_execute_header, v42, (os_log_type_t)v54, "CheckInPendingCloudUpdates CKRecord deletion failed with error: %@", v53, 0xCu);
        v49 = sub_10000215C((uint64_t *)&unk_10007AA40);
        v50 = v52;
        swift_arrayDestroy(v52, 1, v49);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v48, -1, -1);
      }
      else
      {
        sub_10002E214(a2, 1);
        sub_10002E214(a2, 1);
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v57 = a2;
      swift_errorRetain(a2);
      v19(&v57);

      sub_10002E214(a2, 1);
      swift_release(v21);
      sub_10002E214(a2, 1);
    }
    else
    {
      v22 = sub_10003078C();
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v14, v22, v8);
      v23 = v15;
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v24, v25))
      {
        v56 = v21;
        v26 = (uint8_t *)swift_slowAlloc(12, -1);
        v53 = (uint8_t *)swift_slowAlloc(8, -1);
        v54 = v26;
        *(_DWORD *)v26 = 138412290;
        v52 = v26 + 4;
        v57 = v23;
        v27 = v23;
        v55 = v19;
        v28 = v27;
        v21 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v52, v26 + 12);
        v29 = v53;
        *(_QWORD *)v53 = v23;

        v30 = v54;
        v19 = v55;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "CheckInPendingCloudUpdates CKRecord deleted: %@", v54, 0xCu);
        v31 = sub_10000215C((uint64_t *)&unk_10007AA40);
        swift_arrayDestroy(v29, 1, v31);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {

        v24 = v23;
      }

      (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
      v57 = 0;
      v19(&v57);
      swift_release(v21);

    }
  }
}

uint64_t sub_100023C88(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, int a8)
{
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v29[4];
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v30 = a8;
  v34 = a3;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v17 - 8);
  v32 = v17;
  __chkstk_darwin(v17);
  v19 = &v29[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v20 = swift_allocObject(&unk_100072350, 24, 7);
  swift_weakInit(v20 + 16, a4);
  v21 = swift_allocObject(&unk_100072440, 58, 7);
  *(_QWORD *)(v21 + 16) = v20;
  *(_QWORD *)(v21 + 24) = a1;
  *(_BYTE *)(v21 + 32) = a2 & 1;
  *(_QWORD *)(v21 + 40) = a5;
  *(_QWORD *)(v21 + 48) = a6;
  *(_BYTE *)(v21 + 56) = a7;
  *(_BYTE *)(v21 + 57) = v30;
  aBlock[4] = sub_10002E220;
  v37 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100072458;
  v22 = _Block_copy(aBlock);
  swift_retain(v20);
  sub_10002E238(a1, a2 & 1);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRetain(a6);
  static DispatchQoS.unspecified.getter(v23);
  v35 = _swiftEmptyArrayStorage;
  v24 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v25 = sub_10000215C((uint64_t *)&unk_10007A960);
  v26 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v25, v26, v14, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v22);
  _Block_release(v22);
  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v16, v14);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v19, v32);
  v27 = v37;
  swift_release(v20);
  return swift_release(v27);
}

void sub_100023EF0(uint64_t a1, void (*a2)(_QWORD, _QWORD), char a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  id v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void (*v63)(_QWORD);
  void (*v64)(_QWORD);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD);
  uint64_t v68;
  unint64_t v69;
  char v70;
  char v71;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  void (*v99)(_QWORD, _QWORD);
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t i;
  id v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  void *v109;
  void *v110;
  void (*v111)(_QWORD);
  void (*v112)(_QWORD);
  uint64_t v113;
  uint64_t v114;
  void (*v115)(_QWORD, _QWORD);
  uint64_t v116;
  unint64_t v117;
  char v118;
  char v119;
  char v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  void (*v136)(_QWORD, _QWORD);
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  id v148;
  void *v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  NSObject *v164;
  os_log_type_t v165;
  uint8_t *v166;
  void (*v167)(_QWORD, _QWORD);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t *v171;
  unint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  __n128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  char v198;
  uint64_t v199;
  _QWORD *v200;
  void (*v201)(_QWORD, _QWORD);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  unint64_t v206;
  uint64_t v207;
  __n128 v208;
  uint64_t v209;
  uint64_t v210;
  NSObject *v211;
  os_log_type_t v212;
  uint8_t *v213;
  uint64_t v214;
  char *v215;
  void (*v216)(_QWORD, _QWORD);
  char *v217;
  uint64_t v218;
  char *v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  void (*v226)(_QWORD, _QWORD);
  uint64_t v227;
  uint64_t v228;
  char v229[24];
  char v230[24];
  _BYTE v231[24];
  _BYTE v232[24];
  uint64_t v233;
  uint64_t v234;
  void (*v235)(_QWORD, _QWORD);
  uint64_t v236;
  void (*v237)(_QWORD, _QWORD);
  char v238[8];
  uint64_t v239;
  char v240[8];

  v220 = a6;
  v228 = a4;
  v226 = a2;
  v11 = type metadata accessor for Logger(0);
  v221 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v219 = (char *)&v214 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v225 = (char *)&v214 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v214 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v214 - v20;
  v22 = __chkstk_darwin(v19);
  v24 = (char *)&v214 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v214 - v25;
  v224 = a1;
  swift_beginAccess(a1 + 16, v240, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (!Strong)
    return;
  v223 = v11;
  v218 = a1 + 16;
  v227 = a5;
  v222 = Strong;
  if ((a3 & 1) != 0)
  {
    v51 = v228;
    if ((unint64_t)v228 >> 62)
    {
      if (v228 < 0)
        v158 = v228;
      else
        v158 = v228 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v228);
      sub_10002E238((uint64_t)v226, 1);
      v52 = _CocoaArrayWrapper.endIndex.getter(v158);
    }
    else
    {
      v52 = *(_QWORD *)((v228 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v228);
      sub_10002E238((uint64_t)v226, 1);
    }
    v53 = v225;
    if (v52)
    {
      if (v52 < 1)
      {
LABEL_118:
        __break(1u);
        goto LABEL_119;
      }
      v54 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      v55 = v51 & 0xC000000000000001;
      swift_beginAccess(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, &v239, 0, 0);
      v56 = 0;
      do
      {
        if (v55)
          v57 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v56, v51);
        else
          v57 = *(id *)(v51 + 8 * v56 + 32);
        v58 = *v54;
        v59 = v57;
        swift_bridgeObjectRetain(v58);
        sub_10002DE70(v60, v59);
        v62 = v61;
        v64 = v63;
        v66 = v65;
        swift_bridgeObjectRelease(v58);

        if (v62)
        {

          v67 = v226;
          v237 = v226;
          v238[0] = 1;
          sub_10002E238((uint64_t)v226, 1);
          v64(&v237);
          swift_release(v66);
          sub_10002E214((uint64_t)v67, 1);
        }
        swift_beginAccess(v54, &v237, 33, 0);
        v68 = *v54;
        swift_bridgeObjectRetain(*v54);
        v69 = sub_1000286CC((uint64_t)v59);
        v71 = v70;
        swift_bridgeObjectRelease(v68);
        if ((v71 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v54);
          v73 = *v54;
          v235 = (void (*)(_QWORD, _QWORD))*v54;
          *v54 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000293A4(&qword_10007B2D8);
            v73 = (uint64_t)v235;
          }

          v74 = *(_QWORD *)(*(_QWORD *)(v73 + 56) + 16 * v69 + 8);
          sub_100028D00(v69, v73);
          v75 = *v54;
          *v54 = v73;
          swift_bridgeObjectRelease(v75);
          swift_endAccess(&v237);
          swift_release(v74);
        }
        else
        {
          swift_endAccess(&v237);
        }
        ++v56;

        v51 = v228;
        v53 = v225;
      }
      while (v52 != v56);
    }
    swift_bridgeObjectRelease(v51);
    v76 = sub_10003078C();
    v77 = v221;
    v78 = *(void (**)(char *))(v221 + 16);
    v217 = (char *)v76;
    v79 = v223;
    v228 = (uint64_t)v78;
    v78(v53);
    v80 = v224;
    v81 = swift_retain_n(v224, 2);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v82, v83))
    {
      v84 = (uint8_t *)swift_slowAlloc(12, -1);
      v216 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
      v237 = v216;
      *(_DWORD *)v84 = 136315138;
      v85 = v218;
      swift_beginAccess(v218, v230, 0, 0);
      v86 = swift_weakLoadStrong(v85);
      if (v86)
      {
        v87 = v86;
        v88 = (unint64_t *)(v86
                                 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
        swift_beginAccess(v86 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v229, 0, 0);
        v89 = *v88;
        swift_bridgeObjectRetain(*v88);
        swift_release(v87);
      }
      else
      {
        v89 = sub_100025344((uint64_t)_swiftEmptyArrayStorage, &qword_10007B2D8, (uint64_t (*)(id))sub_1000286CC);
      }
      v93 = sub_100011254(0, &qword_10007B2B0, CKRecord_ptr);
      v94 = sub_10000215C(&qword_10007B2B8);
      v95 = sub_10002E244(&qword_10007B2C0, &qword_10007B2B0, CKRecord_ptr);
      v96 = Dictionary.description.getter(v89, v93, v94, v95);
      v98 = v97;
      swift_bridgeObjectRelease(v89);
      v235 = (void (*)(_QWORD, _QWORD))sub_100002CA8(v96, v98, (uint64_t *)&v237);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v235, &v236, v84 + 4, v84 + 12);
      swift_release_n(v224, 2);
      swift_bridgeObjectRelease(v98);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Pending changes in queue: %s", v84, 0xCu);
      v99 = v216;
      swift_arrayDestroy(v216, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v84, -1, -1);

      v90 = *(char **)(v221 + 8);
      v91 = v225;
      v92 = v223;
    }
    else
    {

      swift_release_n(v80, 2);
      v90 = *(char **)(v77 + 8);
      v91 = v53;
      v92 = v79;
    }
    v225 = v90;
    ((void (*)(char *, uint64_t))v90)(v91, v92);
    v100 = v227;
    if ((unint64_t)v227 >> 62)
    {
      if (v227 < 0)
        v159 = v227;
      else
        v159 = v227 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v227);
      v101 = _CocoaArrayWrapper.endIndex.getter(v159);
      if (!v101)
        goto LABEL_86;
    }
    else
    {
      v101 = *(_QWORD *)((v227 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v227);
      if (!v101)
        goto LABEL_86;
    }
    if (v101 < 1)
    {
LABEL_119:
      __break(1u);
      goto LABEL_120;
    }
    v102 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
    v103 = v100 & 0xC000000000000001;
    swift_beginAccess(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v237, 0, 0);
    for (i = 0; i != v101; ++i)
    {
      if (v103)
        v105 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v100);
      else
        v105 = *(id *)(v100 + 8 * i + 32);
      v106 = *v102;
      v107 = v105;
      swift_bridgeObjectRetain(v106);
      sub_10002C690(v108);
      v110 = v109;
      v112 = v111;
      v114 = v113;
      swift_bridgeObjectRelease(v106);

      if (v110)
      {

        v115 = v226;
        v235 = v226;
        sub_10002E238((uint64_t)v226, 1);
        v112(&v235);
        swift_release(v114);
        sub_10002E214((uint64_t)v115, 1);
      }
      swift_beginAccess(v102, &v235, 33, 0);
      v116 = *v102;
      swift_bridgeObjectRetain(*v102);
      v117 = sub_100028718((uint64_t)v107);
      v119 = v118;
      swift_bridgeObjectRelease(v116);
      if ((v119 & 1) != 0)
      {
        v120 = swift_isUniquelyReferenced_nonNull_native(*v102);
        v121 = *v102;
        v233 = *v102;
        *v102 = 0x8000000000000000;
        if ((v120 & 1) == 0)
        {
          sub_1000293A4(&qword_10007B2E0);
          v121 = v233;
        }

        v122 = *(_QWORD *)(*(_QWORD *)(v121 + 56) + 16 * v117 + 8);
        sub_100028D00(v117, v121);
        v123 = *v102;
        *v102 = v121;
        swift_bridgeObjectRelease(v123);
        swift_endAccess(&v235);
        swift_release(v122);
      }
      else
      {
        swift_endAccess(&v235);
      }

      v100 = v227;
    }
LABEL_86:
    swift_bridgeObjectRelease(v100);
    v160 = v219;
    v161 = v223;
    ((void (*)(char *, char *, uint64_t))v228)(v219, v217, v223);
    v162 = v224;
    v163 = swift_retain_n(v224, 2);
    v164 = Logger.logObject.getter(v163);
    v165 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v164, v165))
    {
      v166 = (uint8_t *)swift_slowAlloc(12, -1);
      v167 = (void (*)(_QWORD, _QWORD))swift_slowAlloc(32, -1);
      v235 = v167;
      *(_DWORD *)v166 = 136315138;
      v168 = v218;
      swift_beginAccess(v218, v232, 0, 0);
      v169 = swift_weakLoadStrong(v168);
      if (v169)
      {
        v170 = v169;
        v171 = (unint64_t *)(v169
                                  + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
        swift_beginAccess(v169 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, v231, 0, 0);
        v172 = *v171;
        swift_bridgeObjectRetain(v172);
        swift_release(v170);
      }
      else
      {
        v172 = sub_100025344((uint64_t)_swiftEmptyArrayStorage, &qword_10007B2E0, (uint64_t (*)(id))sub_100028718);
      }
      v175 = sub_100011254(0, &qword_10007B298, CKRecordID_ptr);
      v176 = sub_10000215C(&qword_10007B2A0);
      v177 = sub_10002E244(&qword_10007B2A8, &qword_10007B298, CKRecordID_ptr);
      v178 = Dictionary.description.getter(v172, v175, v176, v177);
      v180 = v179;
      swift_bridgeObjectRelease(v172);
      v233 = sub_100002CA8(v178, v180, (uint64_t *)&v235);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v233, &v234, v166 + 4, v166 + 12);
      swift_release_n(v224, 2);
      swift_bridgeObjectRelease(v180);
      _os_log_impl((void *)&_mh_execute_header, v164, v165, "Pending deletion in queue: %s", v166, 0xCu);
      swift_arrayDestroy(v167, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v167, -1, -1);
      swift_slowDealloc(v166, -1, -1);

      v173 = v219;
      v174 = v223;
    }
    else
    {

      swift_release_n(v162, 2);
      v173 = v160;
      v174 = v161;
    }
    ((void (*)(char *, uint64_t))v225)(v173, v174);
    v181 = v222;
    v182 = v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
    v183 = swift_beginAccess(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v235, 0, 0);
    if (*(_QWORD *)(*(_QWORD *)v182 + 16)
      || (v184 = v181 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
          v183 = swift_beginAccess(v181 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, &v233, 0, 0), *(_QWORD *)(*(_QWORD *)v184 + 16)))
    {
      sub_100021BFC(v220 & 1, v183);
    }
    sub_10002E214((uint64_t)v226, 1);
    v185 = v181;
    goto LABEL_113;
  }
  v28 = sub_10003078C();
  v29 = v221;
  v30 = *(char **)(v221 + 16);
  v219 = (char *)v28;
  v225 = v30;
  v31 = ((uint64_t (*)(char *))v30)(v26);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "CKRecords modify operation finished successfully", v34, 2u);
    v35 = v34;
    v29 = v221;
    swift_slowDealloc(v35, -1, -1);
  }

  v226 = *(void (**)(_QWORD, _QWORD))(v29 + 8);
  v226(v26, v11);
  v36 = v228;
  v217 = v18;
  LODWORD(v216) = a7;
  v215 = v21;
  if ((unint64_t)v228 >> 62)
  {
    if (v228 < 0)
      v124 = v228;
    else
      v124 = v228 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v228);
    v37 = _CocoaArrayWrapper.endIndex.getter(v124);
    if (!v37)
      goto LABEL_59;
  }
  else
  {
    v37 = *(_QWORD *)((v228 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v228);
    if (!v37)
      goto LABEL_59;
  }
  if (v37 < 1)
  {
    __break(1u);
    goto LABEL_118;
  }
  v38 = 0;
  v39 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
  v40 = v36 & 0xC000000000000001;
  do
  {
    if (v40)
      v41 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v38, v36);
    else
      v41 = *(id *)(v36 + 8 * v38 + 32);
    v42 = v41;
    swift_beginAccess(v39, &v239, 33, 0);
    v43 = *v39;
    swift_bridgeObjectRetain(*v39);
    v44 = sub_1000286CC((uint64_t)v42);
    v46 = v45;
    swift_bridgeObjectRelease(v43);
    if ((v46 & 1) != 0)
    {
      v47 = swift_isUniquelyReferenced_nonNull_native(*v39);
      v48 = *v39;
      v237 = (void (*)(_QWORD, _QWORD))*v39;
      *v39 = 0x8000000000000000;
      if (!v47)
      {
        sub_1000293A4(&qword_10007B2D8);
        v48 = (uint64_t)v237;
      }

      v49 = *(_QWORD *)(*(_QWORD *)(v48 + 56) + 16 * v44 + 8);
      sub_100028D00(v44, v48);
      v50 = *v39;
      *v39 = v48;
      swift_bridgeObjectRelease(v50);
      swift_endAccess(&v239);
      swift_release(v49);
    }
    else
    {
      swift_endAccess(&v239);
    }
    ++v38;

    v36 = v228;
  }
  while (v37 != v38);
LABEL_59:
  swift_bridgeObjectRelease(v36);
  v125 = v223;
  ((void (*)(char *, char *, uint64_t))v225)(v24, v219, v223);
  v126 = v224;
  v127 = swift_retain_n(v224, 2);
  v128 = Logger.logObject.getter(v127);
  v129 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v128, v129))
  {
    v130 = (uint8_t *)swift_slowAlloc(12, -1);
    v131 = swift_slowAlloc(32, -1);
    v239 = v131;
    *(_DWORD *)v130 = 136315138;
    v132 = v218;
    swift_beginAccess(v218, v232, 0, 0);
    v133 = swift_weakLoadStrong(v132);
    if (v133)
    {
      v134 = v133;
      v135 = (_QWORD *)(v133 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords);
      swift_beginAccess(v133 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, v231, 0, 0);
      v136 = (void (*)(_QWORD, _QWORD))*v135;
      swift_bridgeObjectRetain(v136);
      swift_release(v134);
    }
    else
    {
      v136 = 0;
    }
    v237 = v136;
    v139 = sub_10000215C(&qword_10007B2D0);
    v140 = String.init<A>(describing:)(&v237, v139);
    v142 = v141;
    v237 = (void (*)(_QWORD, _QWORD))sub_100002CA8(v140, v141, &v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v130 + 4, v130 + 12);
    swift_release_n(v224, 2);
    swift_bridgeObjectRelease(v142);
    _os_log_impl((void *)&_mh_execute_header, v128, v129, "Pending changes in queue: %s", v130, 0xCu);
    swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v131, -1, -1);
    swift_slowDealloc(v130, -1, -1);

    v137 = v24;
    v138 = v223;
  }
  else
  {

    swift_release_n(v126, 2);
    v137 = v24;
    v138 = v125;
  }
  v226(v137, v138);
  v143 = v227;
  if ((unint64_t)v227 >> 62)
  {
    if (v227 < 0)
      v186 = v227;
    else
      v186 = v227 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v227);
    v144 = _CocoaArrayWrapper.endIndex.getter(v186);
    if (!v144)
      goto LABEL_100;
  }
  else
  {
    v144 = *(_QWORD *)((v227 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v227);
    if (!v144)
      goto LABEL_100;
  }
  if (v144 < 1)
  {
LABEL_120:
    __break(1u);
    return;
  }
  v145 = 0;
  v146 = (uint64_t *)(v222 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
  v147 = v143 & 0xC000000000000001;
  do
  {
    if (v147)
      v148 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v145, v143);
    else
      v148 = *(id *)(v143 + 8 * v145 + 32);
    v149 = v148;
    swift_beginAccess(v146, &v239, 33, 0);
    v150 = *v146;
    swift_bridgeObjectRetain(*v146);
    v151 = sub_100028718((uint64_t)v149);
    v153 = v152;
    swift_bridgeObjectRelease(v150);
    if ((v153 & 1) != 0)
    {
      v154 = swift_isUniquelyReferenced_nonNull_native(*v146);
      v155 = *v146;
      v237 = (void (*)(_QWORD, _QWORD))*v146;
      *v146 = 0x8000000000000000;
      if (!v154)
      {
        sub_1000293A4(&qword_10007B2E0);
        v155 = (uint64_t)v237;
      }

      v156 = *(_QWORD *)(*(_QWORD *)(v155 + 56) + 16 * v151 + 8);
      sub_100028D00(v151, v155);
      v157 = *v146;
      *v146 = v155;
      swift_bridgeObjectRelease(v157);
      swift_endAccess(&v239);
      swift_release(v156);
    }
    else
    {
      swift_endAccess(&v239);
    }
    ++v145;

    v143 = v227;
  }
  while (v144 != v145);
LABEL_100:
  swift_bridgeObjectRelease(v143);
  v187 = v215;
  v188 = v223;
  ((void (*)(char *, char *, uint64_t))v225)(v215, v219, v223);
  v189 = v224;
  v190 = swift_retain_n(v224, 2);
  v191 = Logger.logObject.getter(v190);
  v192 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v191, v192))
  {
    v193 = (uint8_t *)swift_slowAlloc(12, -1);
    v194 = swift_slowAlloc(32, -1);
    v239 = v194;
    *(_DWORD *)v193 = 136315138;
    v195 = v218;
    swift_beginAccess(v218, &v235, 0, 0);
    v196 = swift_weakLoadStrong(v195);
    v197 = v217;
    v198 = (char)v216;
    if (v196)
    {
      v199 = v196;
      v200 = (_QWORD *)(v196 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords);
      swift_beginAccess(v196 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v233, 0, 0);
      v201 = (void (*)(_QWORD, _QWORD))*v200;
      swift_bridgeObjectRetain(v201);
      swift_release(v199);
    }
    else
    {
      v201 = 0;
    }
    v237 = v201;
    v203 = sub_10000215C(&qword_10007B2C8);
    v204 = String.init<A>(describing:)(&v237, v203);
    v206 = v205;
    v237 = (void (*)(_QWORD, _QWORD))sub_100002CA8(v204, v205, &v239);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, v238, v193 + 4, v193 + 12);
    swift_release_n(v224, 2);
    swift_bridgeObjectRelease(v206);
    _os_log_impl((void *)&_mh_execute_header, v191, v192, "Pending deletion in queue: %s", v193, 0xCu);
    swift_arrayDestroy(v194, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v194, -1, -1);
    swift_slowDealloc(v193, -1, -1);

    v188 = v223;
    v226(v187, v223);
    v202 = v222;
  }
  else
  {

    swift_release_n(v189, 2);
    v226(v187, v188);
    v202 = v222;
    v197 = v217;
    v198 = (char)v216;
  }
  v207 = v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords;
  v208 = swift_beginAccess(v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords, &v239, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v207 + 16)
    || (v209 = v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords,
        v208 = swift_beginAccess(v202 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords, &v237, 0, 0), *(_QWORD *)(*(_QWORD *)v209 + 16)))
  {
    sub_100021BFC(v220 & 1, v208);
  }
  if ((v198 & 1) == 0)
  {
    v185 = v202;
LABEL_113:
    swift_release(v185);
    return;
  }
  sub_10001DBCC(45.0);
  v210 = ((uint64_t (*)(char *, char *, uint64_t))v225)(v197, v219, v188);
  v211 = Logger.logObject.getter(v210);
  v212 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v211, v212))
  {
    v213 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v213 = 0;
    _os_log_impl((void *)&_mh_execute_header, v211, v212, "Cloud update done, continue the fetch...", v213, 2u);
    swift_slowDealloc(v213, -1, -1);
    swift_release(v202);

  }
  else
  {

    swift_release(v202);
  }
  v226(v197, v188);
}

unint64_t sub_100025344(uint64_t a1, uint64_t *a2, uint64_t (*a3)(id))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t result;
  uint64_t v10;
  __int128 *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  char v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;

  v3 = a1;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
    v7 = &_swiftEmptyDictionarySingleton;
    goto LABEL_13;
  }
  sub_10000215C(a2);
  v6 = static _DictionaryStorage.allocate(capacity:)(v4);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(v3 + 16);
  if (!v8)
  {
LABEL_13:
    swift_bridgeObjectRelease(v3);
    return (unint64_t)v7;
  }
  result = swift_retain(v6);
  v10 = 0;
  v20 = v3;
  v11 = (__int128 *)(v3 + 40);
  while (1)
  {
    v12 = v10 + 1;
    if (__OFADD__(v10, 1))
      break;
    v13 = (void *)*((_QWORD *)v11 - 1);
    v14 = *((_QWORD *)v11 + 1);
    if (!v13)
    {
      swift_retain(*((_QWORD *)v11 + 1));
LABEL_12:
      swift_release(v7);
      v3 = v20;
      goto LABEL_13;
    }
    v21 = *v11;
    v15 = v13;
    swift_retain(v14);
    result = a3(v15);
    if ((v16 & 1) != 0)
      goto LABEL_15;
    *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v7[6] + 8 * result) = v15;
    *(_OWORD *)(v7[7] + 16 * result) = v21;
    v17 = v7[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_16;
    v7[2] = v19;
    v11 = (__int128 *)((char *)v11 + 24);
    ++v10;
    if (v12 == v8)
      goto LABEL_12;
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
  return result;
}

uint64_t sub_100025494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 40);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  sub_10000BCBC(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_systemNotificationSubscription, &qword_10007AAB8);
  sub_10000BCBC(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_applePushNotificationSubscription, (uint64_t *)&unk_10007AE00);

  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudZoneSetupGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___susbscriptionSetupGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___fetchDatabaseGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___cloudUserActionExplicitGroup));
  objc_release(*(id *)(v0
                     + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator____lazy_storage___deferredUpdatesGroup));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingUpdateCloudRecords));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_pendingDeletionCloudRecords));

  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer));
  v3 = v0 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_tokenDirectory;
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return v0;
}

uint64_t sub_1000255EC()
{
  uint64_t v0;

  sub_100025494();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_100025610(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  uint64_t v22;
  Class isa;
  NSObject *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  NSObject *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;

  v2 = type metadata accessor for Logger(0);
  v3 = *(NSObject **)(v2 - 8);
  v90 = v2;
  v91 = v3;
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v89 = (char *)&v88 - v8;
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v88 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v88 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v88 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v88 - v18;
  v20 = objc_msgSend(a1, "userInfo");
  if (!v20)
    __break(1u);
  v21 = v20;
  v22 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v20, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v22);
  v24 = objc_msgSend((id)objc_opt_self(CKNotification), "notificationFromRemoteNotificationDictionary:", isa);

  if (v24)
  {
    v25 = -[NSObject notificationType](v24, "notificationType");
    switch((unint64_t)v25)
    {
      case 1uLL:
        v26 = sub_10003078C();
        v27 = v90;
        v28 = v91;
        v29 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v19, v26, v90);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Query notifications are not handled", v32, 2u);
          swift_slowDealloc(v32, -1, -1);
          v33 = v24;
        }
        else
        {
          v33 = v30;
          v30 = v24;
        }

        ((void (*)(char *, uint64_t))v28[1].isa)(v19, v27);
        break;
      case 2uLL:
        v60 = objc_opt_self(CKRecordZoneNotification);
        v61 = swift_dynamicCastObjCClass(v24, v60);
        if (v61)
        {
          v62 = (void *)v61;
          v91 = v24;
          sub_100025DF8(v62);
          goto LABEL_18;
        }
        v73 = sub_10003078C();
        v74 = v91;
        v75 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v17, v73, v90);
        v76 = Logger.logObject.getter(v75);
        v77 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v76, v77))
        {
          v78 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v78 = 0;
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unable to cast to CKRecordZoneNotification", v78, 2u);
          swift_slowDealloc(v78, -1, -1);
          v79 = v24;
        }
        else
        {
          v79 = v76;
          v76 = v24;
        }

        ((void (*)(char *, uint64_t))v74[1].isa)(v17, v90);
        break;
      case 3uLL:
        v63 = sub_10003078C();
        v64 = v90;
        v65 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v14, v63, v90);
        v66 = Logger.logObject.getter(v65);
        v67 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v66, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v66, v67, "Read notifications are not handled", v68, 2u);
          swift_slowDealloc(v68, -1, -1);
          v69 = v24;
        }
        else
        {
          v69 = v66;
          v66 = v24;
        }

        ((void (*)(char *, uint64_t))v91[1].isa)(v14, v64);
        break;
      case 4uLL:
        v70 = objc_opt_self(CKDatabaseNotification);
        v71 = swift_dynamicCastObjCClass(v24, v70);
        if (!v71)
        {
          v80 = sub_10003078C();
          v81 = v90;
          v82 = v91;
          v83 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v11, v80, v90);
          v84 = Logger.logObject.getter(v83);
          v85 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v84, v85))
          {
            v86 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v86 = 0;
            _os_log_impl((void *)&_mh_execute_header, v84, v85, "Unable to cast to CKRecordZoneNotification", v86, 2u);
            swift_slowDealloc(v86, -1, -1);
            v87 = v24;
          }
          else
          {
            v87 = v84;
            v84 = v24;
          }

          v43 = (void (*)(char *, uint64_t))v82[1].isa;
          v44 = v11;
          v45 = v81;
          goto LABEL_32;
        }
        v72 = (void *)v71;
        v91 = v24;
        sub_1000264E0(v72);
LABEL_18:

        break;
      default:
        v46 = (uint64_t)v25;
        v47 = sub_10003078C();
        v35 = v90;
        v48 = v91;
        v49 = v89;
        v50 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v89, v47, v90);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v51, v52))
        {

          v43 = (void (*)(char *, uint64_t))v48[1].isa;
          v44 = v49;
          goto LABEL_9;
        }
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v92 = v46;
        v93 = v54;
        *(_DWORD *)v53 = 136315138;
        type metadata accessor for NotificationType(0);
        v56 = String.init<A>(describing:)(&v92, v55);
        v57 = v48;
        v59 = v58;
        v92 = sub_100002CA8(v56, v58, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease(v59);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unknown notificationType: %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        ((void (*)(char *, uint64_t))v57[1].isa)(v89, v90);
        break;
    }
  }
  else
  {
    v34 = sub_10003078C();
    v35 = v90;
    v36 = v91;
    v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v91[2].isa)(v6, v34, v90);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v40 = 138412290;
      v93 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v40 + 4, v40 + 12);
      *v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unknown notification: %@", v40, 0xCu);
      v42 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v41, 1, v42);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }

    v43 = (void (*)(char *, uint64_t))v36[1].isa;
    v44 = v6;
LABEL_9:
    v45 = v35;
LABEL_32:
    v43(v44, v45);
  }
}

void sub_100025DF8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t (*v20)(char *, uint64_t, uint64_t);
  NSObject *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject **v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  NSObject *v37;
  NSObject **v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  id v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  NSObject **v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject **v66;
  uint8_t *v67;
  char *v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t (*v72)(char *, uint64_t, uint64_t);
  uint64_t v73;
  NSObject **v74;
  id v75;
  uint64_t v76;
  NSObject *v77;
  uint64_t v78;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4);
  v9 = (NSObject **)((char *)&v65 - v8);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v65 - v11;
  v13 = __chkstk_darwin(v10);
  v74 = (NSObject **)((char *)&v65 - v14);
  __chkstk_darwin(v13);
  v16 = (char *)&v65 - v15;
  v17 = objc_msgSend(a1, "recordZoneID");
  if (v17)
  {
    v18 = v17;
    v75 = objc_msgSend(a1, "databaseScope");
    v19 = sub_10003078C();
    v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v71 = v19;
    v72 = v20;
    ((void (*)(char *))v20)(v16);
    v21 = a1;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v68 = v12;
      v24 = swift_slowAlloc(12, -1);
      v70 = v18;
      v25 = (uint8_t *)v24;
      v66 = (NSObject **)swift_slowAlloc(8, -1);
      v67 = v25;
      *(_DWORD *)v25 = 138412290;
      v77 = v21;
      v26 = v21;
      v69 = v3;
      v27 = v26;
      v12 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v25 + 4, v25 + 12);
      v28 = v66;
      *v66 = v21;

      v3 = v69;
      v29 = v67;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "RecordZoneNotification: %@", v67, 0xCu);
      v30 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      v18 = v70;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {

      v22 = v21;
    }

    v40 = *(void (**)(char *, uint64_t))(v3 + 8);
    v40(v16, v2);
    v41 = v75;
    if (v75 == (id)1)
    {
      v43 = v72(v12, v71, v2);
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v46 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Nothing public", v46, 2u);
        swift_slowDealloc(v46, -1, -1);
      }

      v47 = (NSObject **)v12;
    }
    else if (v75 == (id)3)
    {
      v48 = (char *)v74;
      v49 = v72((char *)v74, v71, v2);
      v50 = Logger.logObject.getter(v49);
      v51 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v52 = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, v51, "Nothing shared", v52, 2u);
        swift_slowDealloc(v52, -1, -1);
      }

      v47 = (NSObject **)v48;
    }
    else
    {
      if (v75 == (id)2)
      {
        v42 = type metadata accessor for Transaction();
        __chkstk_darwin(v42);
        *(&v65 - 2) = v73;
        *(&v65 - 1) = (uint64_t)v18;
        static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.recordZoneNotification", 46, 2, sub_10002CC7C);

        return;
      }
      v53 = v72((char *)v9, v71, v2);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc(12, -1);
        v70 = v18;
        v57 = (uint8_t *)v56;
        v58 = swift_slowAlloc(32, -1);
        v77 = v58;
        v74 = v9;
        *(_DWORD *)v57 = 136315138;
        v59 = (id)CKDatabaseScopeString(v41);
        v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v59);
        v75 = (id)v2;
        v61 = v60;
        v63 = v62;

        v76 = sub_100002CA8(v61, v63, (uint64_t *)&v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77, v57 + 4, v57 + 12);
        swift_bridgeObjectRelease(v63);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unknown databaseScope: %s", v57, 0xCu);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);

        v47 = v74;
        v64 = (uint64_t)v75;
LABEL_23:
        v40((char *)v47, v64);
        return;
      }

      v47 = v9;
    }
    v64 = v2;
    goto LABEL_23;
  }
  v31 = sub_10003078C();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v31, v2);
  v32 = a1;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v75 = (id)v2;
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v74 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v35 = 138412290;
    v77 = v32;
    v36 = v3;
    v37 = v32;
    v2 = (uint64_t)v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78, v35 + 4, v35 + 12);
    v38 = v74;
    *v74 = v32;

    v3 = v36;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "No recordZoneID in %@", v35, 0xCu);
    v39 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v38, 1, v39);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {

    v33 = v32;
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_1000264E0(void *a1)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject **v26;
  NSObject *v27;
  uint64_t v28;
  NSObject **v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  id v35;
  void *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _OWORD v41[2];
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  _QWORD v45[2];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(a1, "databaseScope");
  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v1 + 256))(v41);
  v8 = v42;
  v45[0] = v42;
  v44 = v41[0];
  swift_bridgeObjectRetain(v42);
  sub_100029DB4((uint64_t)&v44);
  v43 = v41[1];
  sub_100029DB4((uint64_t)&v43);
  sub_100029DDC(v45);
  v9 = *(_QWORD *)(v8 + 16);
  v37 = v6;
  v38 = v4;
  if (v9)
  {
    v35 = v7;
    v36 = v1;
    v33 = a1;
    v34 = v3;
    v10 = (void **)(v8 + 40);
    swift_bridgeObjectRetain(v8);
    v11 = 0;
    v12 = 1;
    do
    {
      if (v11)
      {
        if (v9 == v12)
        {
          sub_100029DDC(v45);
          sub_100029DDC(v45);
LABEL_13:
          v31 = type metadata accessor for Transaction();
          __chkstk_darwin(v31);
          v32 = v35;
          *(&v33 - 2) = v36;
          *(&v33 - 1) = v32;
          static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.databaseNotification", 44, 2, (void (*)(uint64_t))sub_10002CD8C);
          return;
        }
        v11 = 1;
      }
      else
      {
        v13 = (uint64_t)*(v10 - 1);
        v14 = *v10;
        v39 = 0;
        v40 = 0xE000000000000000;
        swift_bridgeObjectRetain(v14);
        _StringGuts.grow(_:)(38);
        swift_bridgeObjectRelease(v40);
        v39 = 0xD000000000000024;
        v40 = 0x8000000100066D50;
        v15._countAndFlagsBits = v13;
        v15._object = v14;
        String.append(_:)(v15);
        v16 = v39;
        v17 = v40;
        v18 = sub_10000215C(&qword_10007AE40);
        sub_10000DDB4(v16, v17, 2, v18, (char *)&v39);
        swift_bridgeObjectRelease(v17);
        v19 = v39;
        swift_bridgeObjectRelease(v14);
        v11 = v19 == 0;
        if (v9 == v12)
        {
          sub_100029DDC(v45);
          sub_100029DDC(v45);
          a1 = v33;
          v3 = v34;
          v6 = v37;
          v4 = v38;
          if (v19)
            goto LABEL_10;
          goto LABEL_13;
        }
      }
      v10 += 2;
    }
    while (!__OFADD__(v12++, 1));
    __break(1u);
  }
  else
  {
    sub_100029DDC(v45);
LABEL_10:
    v21 = sub_10003078C();
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v21, v3);
    v22 = a1;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v39 = (unint64_t)v22;
      v27 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v25 + 4, v25 + 12);
      *v26 = v22;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Only handle cloud pairing recordZoneNotification, Dropping DatabaseNotification: %@", v25, 0xCu);
      v28 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v26, 1, v28);
      v29 = v26;
      v6 = v37;
      swift_slowDealloc(v29, -1, -1);
      v30 = v25;
      v4 = v38;
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
}

void sub_100026890(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint8_t *v30;
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD v52[2];
  uint8_t *v53;
  _QWORD *v54;
  int v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t, uint64_t);
  void *v61;
  id v62;
  uint64_t v63;

  v58 = a1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)v52 - v11;
  __chkstk_darwin(v10);
  v14 = (char *)v52 - v13;
  v15 = sub_10003078C();
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v59 = v15;
  v60 = v16;
  ((void (*)(char *))v16)(v14);
  v17 = swift_retain_n(a3, 2);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc(12, -1);
    v57 = v12;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(8, -1);
    v56 = v9;
    v54 = (_QWORD *)v22;
    v55 = a2;
    *(_DWORD *)v21 = 138412290;
    v53 = v21 + 4;
    v23 = sub_100011C24();
    v24 = v6;
    v25 = v5;
    v26 = a3;
    v27 = objc_msgSend(v23, "privateCloudDatabase");

    v62 = v27;
    LOBYTE(a2) = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v53, v21 + 12);
    v28 = v54;
    *v54 = v27;
    a3 = v26;
    v5 = v25;
    v6 = v24;
    swift_release_n(a3, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "database: %@ updateCache completed.", v21, 0xCu);
    v29 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v28, 1, v29);
    v9 = v56;
    swift_slowDealloc(v28, -1, -1);
    v30 = v21;
    v12 = v57;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
  }
  v31 = *(void (**)(char *, uint64_t))(v6 + 8);
  v31(v14, v5);
  if ((a2 & 1) != 0)
  {
    v60(v12, v59, v5);
    v36 = v58;
    sub_10002E238(v58, 1);
    swift_errorRetain(v36);
    v37 = swift_errorRetain(v36);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    v40 = os_log_type_enabled(v38, v39);
    v52[1] = a3;
    if (v40)
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(8, -1);
      v60 = (void (*)(char *, uint64_t, uint64_t))v5;
      v43 = (_QWORD *)v42;
      *(_DWORD *)v41 = 138412290;
      swift_errorRetain(v36);
      v44 = _swift_stdlib_bridgeErrorToNSError(v36);
      v62 = (id)v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v41 + 4, v41 + 12);
      *v43 = v44;
      sub_10002E214(v36, 1);
      sub_10002E214(v36, 1);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "APS fetchDatabaseChanges error: %@", v41, 0xCu);
      v45 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v43, 1, v45);
      v46 = v43;
      v5 = (uint64_t)v60;
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_10002E214(v36, 1);
      sub_10002E214(v36, 1);
    }

    v31(v12, v5);
    v62 = (id)v36;
    swift_errorRetain(v36);
    v47 = sub_10000215C(&qword_10007B2F8);
    type metadata accessor for CKError(0);
    v49 = v48;
    if ((swift_dynamicCast(&v61, &v62, v47, v48, 6) & 1) != 0)
    {
      v50 = v61;
      v51 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
      _BridgedStoredNSError.code.getter(&v62, v49, v51);
      if (v62 == (id)4 || (v61 = v50, _BridgedStoredNSError.code.getter(&v62, v49, v51), v62 == (id)3))
        sub_10001DBCC(150.0);
      sub_10002E214(v36, 1);

    }
    else
    {
      sub_10002E214(v36, 1);
    }
  }
  else
  {
    v32 = ((uint64_t (*)(char *, uint64_t, uint64_t))v60)(v9, v59, v5);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "APS fetchDatabaseChanges completed.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v31(v9, v5);
  }
}

void sub_100026DCC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  _QWORD *v29;
  uint64_t v30;
  uint8_t *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD v53[2];
  uint8_t *v54;
  _QWORD *v55;
  int v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  void *v62;
  id v63;
  uint64_t v64;

  v59 = a1;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v53 - v12;
  __chkstk_darwin(v11);
  v15 = (char *)v53 - v14;
  Transaction.capture()();
  v16 = sub_10003078C();
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v60 = v16;
  v61 = v17;
  ((void (*)(char *))v17)(v15);
  v18 = swift_retain_n(a4, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v58 = v13;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(8, -1);
    v57 = v10;
    v55 = (_QWORD *)v23;
    v56 = a2;
    *(_DWORD *)v22 = 138412290;
    v54 = v22 + 4;
    v24 = sub_100011C24();
    v25 = v7;
    v26 = v6;
    v27 = a4;
    v28 = objc_msgSend(v24, "privateCloudDatabase");

    v63 = v28;
    LOBYTE(a2) = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v54, v22 + 12);
    v29 = v55;
    *v55 = v28;
    a4 = v27;
    v6 = v26;
    v7 = v25;
    swift_release_n(a4, 2);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "database: %@ zone updateCache completed.", v22, 0xCu);
    v30 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v29, 1, v30);
    v10 = v57;
    swift_slowDealloc(v29, -1, -1);
    v31 = v22;
    v13 = v58;
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(a4, 2);
  }
  v32 = *(void (**)(char *, uint64_t))(v7 + 8);
  v32(v15, v6);
  if ((a2 & 1) != 0)
  {
    v61(v13, v60, v6);
    v37 = v59;
    sub_10002E238(v59, 1);
    swift_errorRetain(v37);
    v38 = swift_errorRetain(v37);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.error.getter();
    v41 = os_log_type_enabled(v39, v40);
    v53[1] = a4;
    if (v41)
    {
      v42 = (uint8_t *)swift_slowAlloc(12, -1);
      v43 = swift_slowAlloc(8, -1);
      v61 = (void (*)(char *, uint64_t, uint64_t))v6;
      v44 = (_QWORD *)v43;
      *(_DWORD *)v42 = 138412290;
      swift_errorRetain(v37);
      v45 = _swift_stdlib_bridgeErrorToNSError(v37);
      v63 = (id)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v42 + 4, v42 + 12);
      *v44 = v45;
      sub_10002E214(v37, 1);
      sub_10002E214(v37, 1);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "APS fetchZoneChanges error: %@", v42, 0xCu);
      v46 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v44, 1, v46);
      v47 = v44;
      v6 = (uint64_t)v61;
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      sub_10002E214(v37, 1);
      sub_10002E214(v37, 1);
    }

    v32(v13, v6);
    v63 = (id)v37;
    swift_errorRetain(v37);
    v48 = sub_10000215C(&qword_10007B2F8);
    type metadata accessor for CKError(0);
    v50 = v49;
    if ((swift_dynamicCast(&v62, &v63, v48, v49, 6) & 1) != 0)
    {
      v51 = v62;
      v52 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
      _BridgedStoredNSError.code.getter(&v63, v50, v52);
      if (v63 == (id)4 || (v62 = v51, _BridgedStoredNSError.code.getter(&v63, v50, v52), v63 == (id)3))
        sub_10001DBCC(150.0);
      sub_10002E214(v37, 1);

    }
    else
    {
      sub_10002E214(v37, 1);
    }
  }
  else
  {
    v33 = ((uint64_t (*)(char *, uint64_t, uint64_t))v61)(v10, v60, v6);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "APS fetchZoneChanges completed.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    v32(v10, v6);
  }
}

void sub_100027310(void *a1)
{
  sub_100025610(a1);
}

uint64_t sub_100027330(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v1 = sub_10000215C(&qword_10007AE48);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10002CDF4, v3, v1);
}

uint64_t sub_100027390@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _BYTE v21[40];

  v6 = sub_10000215C(&qword_10007AE48);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000094F4(a1, (uint64_t)v21);
  v10 = swift_allocObject(&unk_100072350, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = sub_10000215C(&qword_10007B368);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_10002EC1C, v10, v11, a3);
  sub_10001128C(a3, (uint64_t)v9, &qword_10007AE48);
  v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 296))(v21);
  v14 = v13;
  v15 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_100027DF0(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_100027DF0(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_100004064((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18, &qword_10007AE48);
  return v12(v21, 0);
}

uint64_t sub_100027534(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000215C(&qword_10007AE48);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9);
  v21 = *(_QWORD *)(v1 + 72);
  sub_10001128C(a1, (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), &qword_10007AE48);
  v12 = *(unsigned __int8 *)(v10 + 80);
  v13 = (v12 + 24) & ~v12;
  v14 = swift_allocObject(&unk_100072040, v13 + v11, v12 | 7);
  *(_QWORD *)(v14 + 16) = v1;
  sub_100004064((uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v14 + v13, &qword_10007AE48);
  aBlock[4] = sub_10002CEC4;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100072058;
  v15 = _Block_copy(aBlock);
  swift_retain(v1);
  static DispatchQoS.unspecified.getter(v16);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10000215C((uint64_t *)&unk_10007A960);
  v19 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v22);
  return swift_release(v26);
}

uint64_t sub_100027794()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 280))();
}

uint64_t sub_1000277BC()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 288))();
}

void (*sub_1000277E4(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 296))();
  return sub_1000082A4;
}

uint64_t sub_100027834(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10000215C(&qword_10007AE48);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10002FBDC, v5, v3);
}

uint64_t sub_100027894(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000219C(&qword_10007B3F8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061324);
  return Error<>._domain.getter(a1, v2);
}

uint64_t sub_1000278D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000219C(&qword_10007B3F8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061324);
  return Error<>._code.getter(a1, v2);
}

uint64_t sub_100027914(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return _BridgedStoredNSError._getEmbeddedNSError()(a1, v2);
}

id sub_100027954()
{
  id *v0;

  return *v0;
}

uint64_t sub_10002795C@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

_QWORD *sub_100027964@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100027974(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100027980()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorDomain);
}

uint64_t sub_100027990(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return _BridgedStoredNSError.errorCode.getter(a1, v2);
}

uint64_t sub_1000279D0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return _BridgedStoredNSError.errorUserInfo.getter(a1, v2);
}

uint64_t sub_100027A10(void *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return _BridgedStoredNSError.init(_bridgedNSError:)(a1, a2, v4);
}

uint64_t sub_100027A74()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t sub_100027AA8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return _BridgedStoredNSError.hash(into:)(a1, a2, v4);
}

Swift::Int sub_100027AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD v7[10];

  v7[9] = *v3;
  Hasher.init(_seed:)(v7, a1);
  dispatch thunk of Hashable.hash(into:)(v7, a2, a3);
  return Hasher._finalize()();
}

uint64_t sub_100027B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
  return static _BridgedStoredNSError.== infix(_:_:)(a1, a2, a3, v6);
}

BOOL sub_100027BAC(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100027BC0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000215C(&qword_10007B388);
      v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[3 * v8 + 4])
          memmove(v13, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_10002B5D0(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_100027CE4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000215C(&qword_10007B290);
      v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 3);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[v8 + 4])
          memmove(v14, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10002E0B8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100027DF0(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007B358);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007AE48);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_10002EC8C(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

_QWORD *sub_100028000(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_10000215C(&qword_10007B2F0);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = (2 * (v6 >> 3)) | 1;
  v7 = sub_10002976C(&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_10002E290(v8);
  if (v7 != (_QWORD *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1000280E8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100028104(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100028104(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007B358);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007AE48);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000282EC(uint64_t a1, uint64_t (*a2)(uint64_t, __n128), uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v6;
  uint64_t v8;
  __n128 v9;
  unint64_t v10;
  char v11;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = v3;
  v8 = *v6;
  v9 = swift_bridgeObjectRetain(*v6);
  v10 = a2(a1, v9);
  LOBYTE(a1) = v11;
  swift_bridgeObjectRelease(v8);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
  v13 = *v6;
  v17 = *v6;
  *v6 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000293A4(a3);
    v13 = v17;
  }

  v14 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 16 * v10);
  sub_100028D00(v10, v13);
  v15 = *v6;
  *v6 = v13;
  swift_bridgeObjectRelease(v15);
  return v14;
}

Swift::Int sub_1000283CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_10000215C(&qword_10007B398);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_100011254(0, &qword_10007B378, CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_100028764(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

unint64_t sub_10002861C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100029010(a1, a2, v5);
}

unint64_t sub_100028680(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000290F0(a1, v4, &qword_10007B310, CKRecordZoneID_ptr);
}

unint64_t sub_1000286CC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000290F0(a1, v4, &qword_10007B2B0, CKRecord_ptr);
}

unint64_t sub_100028718(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_1000290F0(a1, v4, &qword_10007B298, CKRecordID_ptr);
}

Swift::Int sub_100028764(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000215C(&qword_10007B398);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v3;
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v38 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v38 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v38 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
    {
      v34 = v32;
      v35 = v33;
    }
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v24, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_100028A34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  int64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t *v34;
  __int128 v35;

  v4 = v3;
  v6 = *v3;
  if (*(_QWORD *)(*v3 + 24) <= a1)
    v7 = a1;
  else
    v7 = *(_QWORD *)(*v3 + 24);
  sub_10000215C(a3);
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v6, v7, a2);
  v9 = v8;
  if (*(_QWORD *)(v6 + 16))
  {
    v34 = v4;
    v10 = 1 << *(_BYTE *)(v6 + 32);
    v11 = (_QWORD *)(v6 + 64);
    if (v10 < 64)
      v12 = ~(-1 << v10);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v6 + 64);
    v14 = (unint64_t)(v10 + 63) >> 6;
    v15 = v8 + 64;
    swift_retain(v6);
    v16 = 0;
    while (1)
    {
      if (v13)
      {
        v22 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v23 = v22 | (v16 << 6);
      }
      else
      {
        v24 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return;
        }
        if (v24 >= v14)
          goto LABEL_36;
        v25 = v11[v24];
        ++v16;
        if (!v25)
        {
          v16 = v24 + 1;
          if (v24 + 1 >= v14)
            goto LABEL_36;
          v25 = v11[v16];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v14)
            {
LABEL_36:
              swift_release(v6);
              if ((a2 & 1) == 0)
              {
                swift_release(v6);
                v4 = v34;
                goto LABEL_43;
              }
              v33 = 1 << *(_BYTE *)(v6 + 32);
              if (v33 >= 64)
                bzero((void *)(v6 + 64), ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v11 = -1 << v33;
              v4 = v34;
              *(_QWORD *)(v6 + 16) = 0;
              break;
            }
            v25 = v11[v26];
            if (!v25)
            {
              while (1)
              {
                v16 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_45;
                if (v16 >= v14)
                  goto LABEL_36;
                v25 = v11[v16];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v16 = v26;
          }
        }
LABEL_33:
        v13 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v16 << 6);
      }
      v31 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * v23);
      v35 = *(_OWORD *)(*(_QWORD *)(v6 + 56) + 16 * v23);
      if ((a2 & 1) == 0)
      {
        v32 = v31;
        swift_retain(*((_QWORD *)&v35 + 1));
      }
      v17 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v9 + 40));
      v18 = -1 << *(_BYTE *)(v9 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      if (((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6))) != 0)
      {
        v21 = __clz(__rbit64((-1 << v19) & ~*(_QWORD *)(v15 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v18) >> 6;
        do
        {
          if (++v20 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v29 = v20 == v28;
          if (v20 == v28)
            v20 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v15 + 8 * v20);
        }
        while (v30 == -1);
        v21 = __clz(__rbit64(~v30)) + (v20 << 6);
      }
      *(_QWORD *)(v15 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
      *(_QWORD *)(*(_QWORD *)(v9 + 48) + 8 * v21) = v31;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + 16 * v21) = v35;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  swift_release(v6);
LABEL_43:
  *v4 = v9;
}

void sub_100028D00(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_OWORD *)(v19 + 16 * v3);
            v21 = (_OWORD *)(v19 + 16 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

void sub_100028EB0(uint64_t a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  id v23;
  uint64_t v24;

  v4 = v3;
  v7 = *v3;
  v9 = sub_100028680((uint64_t)a2);
  v10 = *(_QWORD *)(v7 + 16);
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v13 = v8;
  v14 = *(_QWORD *)(v7 + 24);
  if (v14 >= v12 && (a3 & 1) != 0)
    goto LABEL_7;
  if (v14 >= v12 && (a3 & 1) == 0)
  {
    sub_100029200();
LABEL_7:
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
    {
LABEL_8:
      v16 = v15[7];

      *(_QWORD *)(v16 + 8 * v9) = a1;
      return;
    }
LABEL_11:
    v15[(v9 >> 6) + 8] |= 1 << v9;
    v19 = 8 * v9;
    *(_QWORD *)(v15[6] + v19) = a2;
    *(_QWORD *)(v15[7] + v19) = a1;
    v20 = v15[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (!v21)
    {
      v15[2] = v22;
      v23 = a2;
      return;
    }
    goto LABEL_14;
  }
  sub_100028764(v12, a3 & 1);
  v17 = sub_100028680((uint64_t)a2);
  if ((v13 & 1) == (v18 & 1))
  {
    v9 = v17;
    v15 = (_QWORD *)*v4;
    if ((v13 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v24 = sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v24);
  __break(1u);
}

unint64_t sub_100029010(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1000290F0(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v8;
  char v9;
  uint64_t v10;
  id v11;
  char v12;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_100011254(0, a3, a4);
    v8 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      v10 = ~v6;
      for (i = (i + 1) & v10; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v10)
      {
        v11 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v12 = static NSObject.== infix(_:_:)();

        if ((v12 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

id sub_100029200()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;

  v1 = v0;
  sub_10000215C(&qword_10007B398);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(void **)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    v19 = v17;
    result = v18;
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_1000293A4(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *result;
  uint64_t v7;
  unint64_t v8;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v2 = v1;
  sub_10000215C(a1);
  v3 = *v1;
  v4 = static _DictionaryStorage.copy(original:)(*v1);
  v5 = v4;
  if (!*(_QWORD *)(v3 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v3);
    *v2 = v5;
    return result;
  }
  result = (void *)(v4 + 64);
  v7 = v3 + 64;
  v8 = (unint64_t)((1 << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  if (v5 != v3 || (unint64_t)result >= v3 + 64 + 8 * v8)
    result = memmove(result, (const void *)(v3 + 64), 8 * v8);
  v10 = 0;
  *(_QWORD *)(v5 + 16) = *(_QWORD *)(v3 + 16);
  v11 = 1 << *(_BYTE *)(v3 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(v3 + 64);
  v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }
    v21 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v21);
    ++v10;
    if (!v22)
    {
      v10 = v21 + 1;
      if (v21 + 1 >= v14)
        goto LABEL_26;
      v22 = *(_QWORD *)(v7 + 8 * v10);
      if (!v22)
        break;
    }
LABEL_25:
    v13 = (v22 - 1) & v22;
    v16 = __clz(__rbit64(v22)) + (v10 << 6);
LABEL_12:
    v17 = 8 * v16;
    v18 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v16);
    v19 = 16 * v16;
    v24 = *(_OWORD *)(*(_QWORD *)(v3 + 56) + v19);
    *(_QWORD *)(*(_QWORD *)(v5 + 48) + v17) = v18;
    *(_OWORD *)(*(_QWORD *)(v5 + 56) + v19) = v24;
    v20 = v18;
    result = (void *)swift_retain(*((_QWORD *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v14)
    goto LABEL_26;
  v22 = *(_QWORD *)(v7 + 8 * v23);
  if (v22)
  {
    v10 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v10 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v10 >= v14)
      goto LABEL_26;
    v22 = *(_QWORD *)(v7 + 8 * v10);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_100029558(uint64_t result, double a2, double a3)
{
  double v5;
  uint64_t v6;
  uint64_t v7;

  if (a2 == a3)
  {
    __break(1u);
    goto LABEL_7;
  }
  v5 = a3 - a2;
  if ((~COERCE__INT64(a3 - a2) & 0x7FF0000000000000) == 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v6 = result;
  v7 = 0;
  result = swift_stdlib_random(&v7, 8);
  if (v5 * ((double)(v7 & 0x1FFFFFFFFFFFFFLL) * 1.11022302e-16) + a2 == a3)
    return sub_100029558(v6, a2, a3);
  return result;
}

uint64_t sub_100029600(uint64_t a1, uint64_t a2, void *a3, char a4, uint64_t (*a5)(void *), uint64_t *a6, unint64_t *a7, _QWORD *a8)
{
  _QWORD *v8;
  _QWORD *v11;
  uint64_t v16;
  char v17;
  unint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  id v33;
  uint64_t v34;

  v11 = v8;
  v16 = *v8;
  v18 = a5(a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v22 = v17;
  v23 = *(_QWORD *)(v16 + 24);
  if (v23 >= v21 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v23 >= v21 && (a4 & 1) == 0)
  {
    sub_1000293A4(a6);
LABEL_7:
    v24 = (_QWORD *)*v11;
    if ((v22 & 1) != 0)
    {
LABEL_8:
      v25 = (uint64_t *)(v24[7] + 16 * v18);
      result = *v25;
      *v25 = a1;
      v25[1] = a2;
      return result;
    }
LABEL_11:
    v24[(v18 >> 6) + 8] |= 1 << v18;
    *(_QWORD *)(v24[6] + 8 * v18) = a3;
    v29 = (uint64_t *)(v24[7] + 16 * v18);
    *v29 = a1;
    v29[1] = a2;
    v30 = v24[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (!v31)
    {
      v24[2] = v32;
      v33 = a3;
      return 0;
    }
    goto LABEL_14;
  }
  sub_100028A34(v21, a4 & 1, a6);
  v27 = a5(a3);
  if ((v22 & 1) == (v28 & 1))
  {
    v18 = v27;
    v24 = (_QWORD *)*v11;
    if ((v22 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  v34 = sub_100011254(0, a7, a8);
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v34);
  __break(1u);
  return result;
}

_QWORD *sub_10002976C(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  void *v20;
  id v21;

  v5 = result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (_QWORD *)v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(void **)(*(_QWORD *)(a4 + 48) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    result = v20;
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100029964(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

uint64_t sub_1000299CC(uint64_t a1, unint64_t a2)
{
  BOOL v3;
  unint64_t v6;
  char v7;

  v3 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v3
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if (a1 == 0xD000000000000013)
  {
    v6 = 0x80000001000670C0;
    if (a2 == 0x80000001000670C0)
      goto LABEL_11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x80000001000670C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x734449656E6F7ALL && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x734449656E6F7ALL, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100029B18@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;

  v5 = sub_10000215C(&qword_10007B3C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000096E4(a1, v9);
  v11 = sub_100011834();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudStorageCoordinatorConfiguration.CodingKeys, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100002D78(a1);
  v28 = 0;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  v14 = v13;
  v24 = v12;
  v27 = 1;
  swift_bridgeObjectRetain(v13);
  v22 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  v16 = v15;
  v17 = sub_10000215C(&qword_10007BDD0);
  v26 = 2;
  v18 = sub_10002F804(&qword_10007B3D0, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v23 = v16;
  swift_bridgeObjectRetain(v16);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, v17, &v26, v5, v17, v18);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v19 = v25;
  swift_bridgeObjectRetain(v25);
  sub_100002D78(a1);
  swift_bridgeObjectRelease(v19);
  v20 = v23;
  swift_bridgeObjectRelease(v23);
  result = swift_bridgeObjectRelease(v14);
  *a2 = v24;
  a2[1] = v14;
  a2[2] = v22;
  a2[3] = v20;
  a2[4] = v19;
  return result;
}

_QWORD *sub_100029D8C(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100029DB4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

_QWORD *sub_100029DDC(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

uint64_t sub_100029E04@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 512))();
  *a1 = result;
  return result;
}

uint64_t sub_100029E38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100029E5C()
{
  uint64_t v0;

  return sub_100011F40(*(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_100029E84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100029E94()
{
  unint64_t result;

  result = qword_10007ADF8;
  if (!qword_10007ADF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_10007ADF8);
  }
  return result;
}

void sub_100029ED8(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable);
}

uint64_t type metadata accessor for CloudStorageCoordinator(uint64_t a1)
{
  uint64_t result;

  result = qword_10007DD90;
  if (!qword_10007DD90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudStorageCoordinator);
  return result;
}

uint64_t sub_100029F28(uint64_t a1, void (*a2)(_BYTE *, id))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _BYTE v16[40];
  id v17;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v13 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v10;
    if (!v14)
    {
      v10 = v13 + 1;
      if (v13 + 1 >= v8)
        return swift_release(a1);
      v14 = *(_QWORD *)(v4 + 8 * v10);
      if (!v14)
      {
        v10 = v13 + 2;
        if (v13 + 2 >= v8)
          return swift_release(a1);
        v14 = *(_QWORD *)(v4 + 8 * v10);
        if (!v14)
        {
          v10 = v13 + 3;
          if (v13 + 3 >= v8)
            return swift_release(a1);
          v14 = *(_QWORD *)(v4 + 8 * v10);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v10 << 6);
LABEL_5:
    sub_100006E70(*(_QWORD *)(a1 + 48) + 40 * v12, (uint64_t)v16);
    v17 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v12);
    a2(v16, v17);
    result = sub_10000BCBC((uint64_t)v16, &qword_10007B320);
  }
  v15 = v13 + 4;
  if (v15 >= v8)
    return swift_release(a1);
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
    v10 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v14 = *(_QWORD *)(v4 + 8 * v10);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_10002A0C4(uint64_t a1, void (*a2)(id, uint64_t (*)(), _OWORD *))
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  int64_t v19;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  while (1)
  {
    if (v6)
    {
      v8 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v9 = v8 | (v7 << 6);
      goto LABEL_5;
    }
    v13 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v13 >= v19)
      goto LABEL_23;
    v14 = *(_QWORD *)(v17 + 8 * v13);
    ++v7;
    if (!v14)
    {
      v7 = v13 + 1;
      if (v13 + 1 >= v19)
        goto LABEL_23;
      v14 = *(_QWORD *)(v17 + 8 * v7);
      if (!v14)
      {
        v7 = v13 + 2;
        if (v13 + 2 >= v19)
          goto LABEL_23;
        v14 = *(_QWORD *)(v17 + 8 * v7);
        if (!v14)
        {
          v7 = v13 + 3;
          if (v13 + 3 >= v19)
            goto LABEL_23;
          v14 = *(_QWORD *)(v17 + 8 * v7);
          if (!v14)
            break;
        }
      }
    }
LABEL_22:
    v6 = (v14 - 1) & v14;
    v9 = __clz(__rbit64(v14)) + (v7 << 6);
LABEL_5:
    v18 = *(_OWORD *)(*(_QWORD *)(a1 + 56) + 16 * v9);
    __chkstk_darwin();
    v16[1] = v18;
    v11 = v10;
    v12 = *((_QWORD *)&v18 + 1);
    swift_retain(*((_QWORD *)&v18 + 1));
    a2(v11, sub_10002FB24, v16);
    swift_release(v12);

  }
  v15 = v13 + 4;
  if (v15 >= v19)
  {
LABEL_23:
    swift_release(a1);
    return;
  }
  v14 = *(_QWORD *)(v17 + 8 * v15);
  if (v14)
  {
    v7 = v15;
    goto LABEL_22;
  }
  while (1)
  {
    v7 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v7 >= v19)
      goto LABEL_23;
    v14 = *(_QWORD *)(v17 + 8 * v7);
    ++v15;
    if (v14)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
}

uint64_t sub_10002A2CC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v2 = type metadata accessor for Logger(0);
  __chkstk_darwin(v2);
  v3 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  LODWORD(v5) = objc_msgSend(v3, "fileExistsAtPath:", v6);

  result = 0;
  if ((_DWORD)v5)
  {
    v8 = Data.init(contentsOf:options:)(a1, 0);
    v10 = v9;
    sub_100011254(0, &qword_10007B3A8, NSKeyedUnarchiver_ptr);
    v11 = sub_10000215C(&qword_10007B3B0);
    v12 = swift_allocObject(v11, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_1000606F0;
    v13 = sub_100011254(0, &qword_10007B3B8, CKServerChangeToken_ptr);
    *(_QWORD *)(v12 + 32) = v13;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v15, v12, v8, v10);
    sub_1000093EC(v8, v10);
    swift_bridgeObjectRelease(v12);
    if (v15[3])
    {
      if (swift_dynamicCast(&v14, v15, (char *)&type metadata for Any + 8, v13, 6))
        return v14;
      else
        return 0;
    }
    else
    {
      sub_10000BCBC((uint64_t)v15, &qword_10007BE80);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10002A620()
{
  unint64_t result;

  result = qword_10007AE18;
  if (!qword_10007AE18)
  {
    result = swift_getWitnessTable(&unk_100060E0C, &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError);
    atomic_store(result, (unint64_t *)&qword_10007AE18);
  }
  return result;
}

uint64_t sub_10002A664(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  _QWORD *v26;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22[1] = *(_QWORD *)(v3 + 56);
  v14 = (_QWORD *)swift_allocObject(&unk_100072A30, 48, 7);
  v14[2] = v3;
  v14[3] = a1;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_10002F324;
  v26 = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100072A48;
  v15 = _Block_copy(aBlock);
  swift_retain(v3);
  v16 = a1;
  v17 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v17);
  v24 = _swiftEmptyArrayStorage;
  v18 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_10000215C((uint64_t *)&unk_10007A960);
  v20 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v19, v20, v7, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v26);
}

id sub_10002A874()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  id v8;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v8 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v8);

  v5 = v8;
  if (v4)
    return v8;
  v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

uint64_t sub_10002A958(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  id v25;
  id v26;
  NSURL *v27;
  void *v28;
  void *v29;
  void (*v30)(char *, uint64_t);
  unsigned int v31;
  uint64_t *v32;
  unint64_t v33;
  void *v34;
  id v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint8_t *v47;
  void *v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t (*v54)(char *, uint64_t);
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  char *v75;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  NSObject *v81;
  os_log_type_t v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  id v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  _QWORD *v94;
  uint64_t *v95;
  char *v96;
  void *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;

  v4 = type metadata accessor for Logger(0);
  v100 = *(_QWORD *)(v4 - 8);
  v101 = v4;
  v5 = __chkstk_darwin(v4);
  v99 = (unint64_t)&v94 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v94 - v8;
  __chkstk_darwin(v7);
  v11 = (char *)&v94 - v10;
  v12 = type metadata accessor for URL(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v98 = (uint64_t)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v94 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v94 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v94 - v22;
  v97 = a1;
  if (!a1)
  {
    sub_10002A874();
    v42 = sub_10003078C();
    v43 = v100;
    (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v9, v42, v101);
    v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v18, a2, v12);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, (os_log_type_t)v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = (void *)swift_slowAlloc(32, -1);
      v99 = v13;
      v49 = v48;
      v104 = (uint64_t *)v48;
      *(_DWORD *)v47 = 136315138;
      v50 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
      v53 = v52;
      v102 = sub_100002CA8(v51, v52, (uint64_t *)&v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v47 + 4, v47 + 12);
      swift_bridgeObjectRelease(v53);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v18, v12);
      _os_log_impl((void *)&_mh_execute_header, v45, (os_log_type_t)v46, "Deleted change token, URL, %s", v47, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v47, -1, -1);

      v54 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v12);

      v54 = *(uint64_t (**)(char *, uint64_t))(v43 + 8);
    }
    v93 = v9;
    return v54(v93, v101);
  }
  v96 = v11;
  v24 = (void *)objc_opt_self(NSFileManager);
  v25 = a1;
  v26 = objc_msgSend(v24, "defaultManager");
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v27);
  v29 = v28;
  v30 = *(void (**)(char *, uint64_t))(v13 + 8);
  v30(v23, v12);
  v104 = 0;
  v31 = objc_msgSend(v26, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v29, 1, 0, &v104);

  v32 = v104;
  if (v31)
  {
    v33 = v13;
    v34 = (void *)objc_opt_self(NSKeyedArchiver);
    v104 = 0;
    v35 = objc_msgSend(v34, "archivedDataWithRootObject:requiringSecureCoding:error:", v25, 1, &v104);
    v36 = v104;
    if (v35)
    {
      v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
      v39 = v38;

      Data.write(to:excludeFromBackup:options:)(a2, 1, 0, 1, v37, v39);
      v98 = v37;
      v99 = v39;
      v77 = sub_10003078C();
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v96, v77, v101);
      v78 = a2;
      v79 = v12;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v21, v78, v12);
      v80 = v25;
      v81 = Logger.logObject.getter(v80);
      v82 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v84 = swift_slowAlloc(22, -1);
        v94 = (_QWORD *)swift_slowAlloc(8, -1);
        v95 = (uint64_t *)swift_slowAlloc(32, -1);
        v104 = v95;
        *(_DWORD *)v84 = 136315394;
        v85 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v86 = dispatch thunk of CustomStringConvertible.description.getter(v79, v85);
        v88 = v87;
        v102 = sub_100002CA8(v86, v87, (uint64_t *)&v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 4, v84 + 12);
        swift_bridgeObjectRelease(v88);
        v30(v21, v79);
        *(_WORD *)(v84 + 12) = 2112;
        v102 = (uint64_t)v80;
        v89 = v80;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v84 + 14, v84 + 22);
        v90 = v94;
        *v94 = v97;

        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Updated change token, URL, %s, token, %@", (uint8_t *)v84, 0x16u);
        v91 = sub_10000215C((uint64_t *)&unk_10007AA40);
        swift_arrayDestroy(v90, 1, v91);
        swift_slowDealloc(v90, -1, -1);
        v92 = v95;
        swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v84, -1, -1);
        sub_1000093EC(v98, v99);

      }
      else
      {

        v30(v21, v79);
        sub_1000093EC(v98, v99);
      }

      v54 = *(uint64_t (**)(char *, uint64_t))(v100 + 8);
      v93 = v96;
      return v54(v93, v101);
    }
    v55 = v36;
    v41 = _convertNSErrorToError(_:)(v36);

  }
  else
  {
    v40 = v32;
    v33 = v13;
    v41 = _convertNSErrorToError(_:)(v32);

  }
  swift_willThrow();

  v56 = v100;
  v57 = sub_10003078C();
  v58 = v99;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v56 + 16))(v99, v57, v101);
  v59 = v33;
  v60 = v98;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v98, a2, v12);
  v61 = v25;
  swift_errorRetain(v41);
  v62 = v61;
  v63 = swift_errorRetain(v41);
  v64 = Logger.logObject.getter(v63);
  v65 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(32, -1);
    v95 = (uint64_t *)swift_slowAlloc(8, -1);
    v96 = (char *)swift_slowAlloc(64, -1);
    v104 = (uint64_t *)v96;
    *(_DWORD *)v66 = 136315650;
    if (v97)
      v67 = 0x657461647075;
    else
      v67 = 0x6574656C6564;
    v102 = sub_100002CA8(v67, 0xE600000000000000, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 4, v66 + 12);

    swift_bridgeObjectRelease(0xE600000000000000);
    *(_WORD *)(v66 + 12) = 2080;
    v68 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v69 = dispatch thunk of CustomStringConvertible.description.getter(v12, v68);
    v71 = v70;
    v102 = sub_100002CA8(v69, v70, (uint64_t *)&v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 14, v66 + 22);
    swift_bridgeObjectRelease(v71);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v12);
    *(_WORD *)(v66 + 22) = 2112;
    swift_errorRetain(v41);
    v72 = _swift_stdlib_bridgeErrorToNSError(v41);
    v102 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, &v103, v66 + 24, v66 + 32);
    v73 = v95;
    *v95 = v72;
    swift_errorRelease(v41);
    swift_errorRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "Unable to %s change token, URL, %s, error, %@ ", (uint8_t *)v66, 0x20u);
    v74 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v73, 1, v74);
    swift_slowDealloc(v73, -1, -1);
    v75 = v96;
    swift_arrayDestroy(v96, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1, -1);
    swift_slowDealloc(v66, -1, -1);

    swift_errorRelease(v41);
    return (*(uint64_t (**)(unint64_t, uint64_t))(v100 + 8))(v99, v101);
  }
  else
  {
    swift_errorRelease(v41);

    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v60, v12);
    swift_errorRelease(v41);
    swift_errorRelease(v41);

    return (*(uint64_t (**)(unint64_t, uint64_t))(v56 + 8))(v58, v101);
  }
}

uint64_t sub_10002B2E4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002B320()
{
  uint64_t v0;

  return sub_10001A550(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_10002B330(uint64_t a1)
{
  uint64_t v1;

  return sub_10001F8C8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_BYTE *)(v1 + 48));
}

_QWORD *sub_10002B360(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  unint64_t v4;
  id v5;
  void *v6;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v31;
  _OWORD v32[2];
  _QWORD *v33;
  __int128 v34;
  __int128 v35;
  _QWORD *v36;

  v2 = a1;
  v31 = _swiftEmptyArrayStorage;
  if (a1 >> 62)
    goto LABEL_30;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v25))
  {
    v26 = v2;
    v4 = 0;
    v28 = v2 & 0xFFFFFFFFFFFFFF8;
    v29 = v2 & 0xC000000000000001;
    v27 = v2 + 32;
    while (1)
    {
      if (v29)
      {
        v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v4, v26);
      }
      else
      {
        if (v4 >= *(_QWORD *)(v28 + 16))
        {
          __break(1u);
LABEL_28:
          __break(1u);
          goto LABEL_29;
        }
        v5 = *(id *)(v27 + 8 * v4);
      }
      v6 = v5;
      if (__OFADD__(v4++, 1))
        goto LABEL_28;
      (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)a2 + 256))(v32);
      v8 = v33;
      v36 = v33;
      v35 = v32[0];
      swift_bridgeObjectRetain(v33);
      sub_100029DB4((uint64_t)&v35);
      v34 = v32[1];
      sub_100029DB4((uint64_t)&v34);
      sub_100029DDC(&v36);
      v9 = objc_msgSend(v6, "zoneName");
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v2 = v11;

      v12 = v8[2];
      if (v12)
      {
        v13 = v8[4];
        v14 = v8[5];
        if (v13 == v10 && v14 == v2 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v10, v2, 0) & 1) != 0)
        {
LABEL_14:
          swift_bridgeObjectRelease(v2);
          v15 = sub_100029DDC(&v36);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v15);
          v16 = v31[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v16);
          v17 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v6);
          v2 = (uint64_t)&v31;
          specialized ContiguousArray._endMutation()(v17);
          goto LABEL_5;
        }
        if (v12 != 1)
          break;
      }
LABEL_4:
      swift_bridgeObjectRelease(v2);
      sub_100029DDC(&v36);

LABEL_5:
      if (v4 == i)
        return v31;
    }
    v18 = v8 + 7;
    v19 = 1;
    while (1)
    {
      v20 = v19 + 1;
      if (__OFADD__(v19, 1))
        break;
      v21 = *(v18 - 1);
      v22 = *v18;
      v23 = v21 == v10 && v22 == v2;
      if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v10, v2, 0) & 1) != 0)
        goto LABEL_14;
      v18 += 2;
      ++v19;
      if (v20 == v12)
        goto LABEL_4;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    if (v2 < 0)
      v25 = v2;
    else
      v25 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10002B5D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_10000215C(&qword_10007B390);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10002B6DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  void *v22;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v3)
  {
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, a1);
      v7 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_19;
LABEL_9:
      v22 = v6;
      v8 = objc_msgSend(v6, "recordID");
      v9 = objc_msgSend(v8, "recordName");

      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      v12 = v11;

      v13 = objc_msgSend(a2, "recordName");
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      if (v10 == v14 && v12 == v16)
      {
        swift_bridgeObjectRelease(a1);
        swift_bridgeObjectRelease(v12);
LABEL_18:
        v3 = (uint64_t)v22;
        swift_bridgeObjectRelease(v12);
        return v3;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v14, v16, 0);
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {
        v12 = a1;
        goto LABEL_18;
      }

      if (v7 == v3)
      {
        swift_bridgeObjectRelease(a1);
        return 0;
      }
    }
    v6 = *(id *)(a1 + 8 * i);
    v7 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_9;
LABEL_19:
    __break(1u);
LABEL_20:
    if (a1 < 0)
      v19 = a1;
    else
      v19 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  swift_bridgeObjectRelease(a1);
  return v3;
}

uint64_t sub_10002B8BC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v3 = v2;
  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v5)
  {
    v6 = 0;
    v22 = v3;
    while (1)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      v9 = objc_msgSend(v7, "recordID", v22);
      v10 = objc_msgSend(v9, "recordName");

      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v14 = objc_msgSend(a2, "recordName");
      v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v16 = v15;

      if (v11 == v3 && v13 == v16)
      {

        swift_bridgeObjectRelease_n(v13, 2);
        return v6;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v3, v16, 0);

      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
        return v6;
      v19 = v6 + 1;
      if (__OFADD__(v6, 1))
        break;
      ++v6;
      if (v19 == v5)
        return 0;
    }
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v5 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  return 0;
}

uint64_t sub_10002BA7C(uint64_t *a1, void *a2)
{
  uint64_t v2;
  unint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  unint64_t i;
  unint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  id v25;
  id v26;
  int isUniquelyReferenced_nonNull_bridgeObject;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  unint64_t v46;

  v5 = *a1;
  v6 = swift_bridgeObjectRetain(*a1);
  v45 = a2;
  v46 = sub_10002B8BC(v6, a2);
  v8 = v7;
  swift_bridgeObjectRelease(v5);
  v44 = v2;
  if (v2)
    return v46;
  if ((v8 & 1) == 0)
  {
    v9 = (id)(v46 + 1);
    if (__OFADD__(v46, 1))
      goto LABEL_63;
    v5 = *a1;
    if ((unint64_t)*a1 >> 62)
    {
LABEL_64:
      if ((v5 & 0x8000000000000000) != 0)
        v40 = v5;
      else
        v40 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v41 = _CocoaArrayWrapper.endIndex.getter(v40);
      swift_bridgeObjectRelease(v5);
      if (v9 != (id)v41)
        goto LABEL_6;
    }
    else if (v9 != *(id *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      for (i = v46 + 5; ; ++i)
      {
        v5 = i - 4;
        v11 = *a1;
        if ((*a1 & 0xC000000000000001) != 0)
        {
          v12 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v11);
        }
        else
        {
          if ((v5 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
LABEL_58:
            __break(1u);
LABEL_59:
            __break(1u);
LABEL_60:
            __break(1u);
LABEL_61:
            __break(1u);
LABEL_62:
            __break(1u);
LABEL_63:
            __break(1u);
            goto LABEL_64;
          }
          if (v5 >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v12 = *(id *)(v11 + 8 * i);
        }
        v13 = v12;
        v14 = objc_msgSend(v12, "recordID", v44);
        v15 = objc_msgSend(v14, "recordName");

        v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v18 = v17;

        v9 = objc_msgSend(v45, "recordName");
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
        v21 = v20;

        if (v16 == v19 && v18 == v21)
        {

          swift_bridgeObjectRelease_n(v18, 2);
          goto LABEL_38;
        }
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v21, 0);

        swift_bridgeObjectRelease(v18);
        swift_bridgeObjectRelease(v21);
        if ((v23 & 1) != 0)
          goto LABEL_38;
        if (v5 != v46)
          break;
LABEL_35:
        if (__OFADD__(v46, 1))
          goto LABEL_56;
        ++v46;
LABEL_38:
        v9 = (id)(i - 3);
        if (__OFADD__(v5, 1))
          goto LABEL_55;
        v35 = *a1;
        if ((unint64_t)*a1 >> 62)
        {
          if (v35 < 0)
            v37 = *a1;
          else
            v37 = v35 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*a1);
          v36 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v35);
        }
        else
        {
          v36 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        if (v9 == (id)v36)
          return v46;
      }
      v24 = *a1;
      if ((*a1 & 0xC000000000000001) != 0)
      {
        v25 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v46, *a1);
        v24 = *a1;
        if ((*a1 & 0xC000000000000001) == 0)
        {
LABEL_21:
          if ((v5 & 0x8000000000000000) != 0)
            goto LABEL_59;
          if (v5 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_60;
          v26 = *(id *)(v24 + 8 * i);
          goto LABEL_24;
        }
      }
      else
      {
        if ((v46 & 0x8000000000000000) != 0)
          goto LABEL_57;
        if (v46 >= *(_QWORD *)((v24 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_58;
        v25 = *(id *)(v24 + 8 * v46 + 32);
        if ((v24 & 0xC000000000000001) == 0)
          goto LABEL_21;
      }
      v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i - 4, v24);
      v24 = *a1;
LABEL_24:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v24);
      *a1 = v24;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v24 < 0 || (v24 & 0x4000000000000000) != 0)
      {
        v24 = sub_100029964(v24);
        *a1 = v24;
      }
      v28 = *(void **)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20);
      *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 8 * v46 + 0x20) = v26;

      specialized Array._endMutation()(v29);
      v30 = *a1;
      v31 = swift_isUniquelyReferenced_nonNull_bridgeObject(*a1);
      *a1 = v30;
      if (!v31 || v30 < 0 || (v30 & 0x4000000000000000) != 0)
      {
        v30 = sub_100029964(v30);
        *a1 = v30;
      }
      if ((v5 & 0x8000000000000000) != 0)
        goto LABEL_61;
      v32 = v30 & 0xFFFFFFFFFFFFFF8;
      if (v5 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_62;
      v33 = *(void **)(v32 + 8 * i);
      *(_QWORD *)(v32 + 8 * i) = v25;

      specialized Array._endMutation()(v34);
      goto LABEL_35;
    }
    return v46;
  }
  v38 = *a1;
  if (!((unint64_t)v38 >> 62))
    return *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v38 < 0)
    v42 = v38;
  else
    v42 = v38 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v38);
  v43 = _CocoaArrayWrapper.endIndex.getter(v42);
  swift_bridgeObjectRelease(v38);
  return v43;
}

uint64_t sub_10002BE6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = sub_100011254(0, &qword_10007B2B0, CKRecord_ptr);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  v14 = (void *)swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    v14 = (void *)swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_10002C148(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  int64_t v26;
  int64_t v29;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v29 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = objc_msgSend(a2, "recordID");
    v19 = objc_msgSend(v18, "recordName");

    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    if (v15 == v20 && v17 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2);
      return;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v20, v22, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v29;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v26)
        goto LABEL_28;
      v9 = *(_QWORD *)(v25 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v26)
          goto LABEL_28;
        v9 = *(_QWORD *)(v25 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v26)
            goto LABEL_28;
          v9 = *(_QWORD *)(v25 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v26)
              goto LABEL_28;
            v9 = *(_QWORD *)(v25 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v29 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_10002C3FC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  int64_t v25;
  int64_t v28;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v28 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordName");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v18 = objc_msgSend(a2, "recordName");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    if (v15 == v19 && v17 == v21)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v17, 2);
      return;
    }
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v17, v19, v21, 0);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v21);
    if ((v23 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v28;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v25)
      goto LABEL_28;
    v9 = *(_QWORD *)(v24 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v25)
        goto LABEL_28;
      v9 = *(_QWORD *)(v24 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v25)
          goto LABEL_28;
        v9 = *(_QWORD *)(v24 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v25)
            goto LABEL_28;
          v9 = *(_QWORD *)(v24 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v25)
              goto LABEL_28;
            v9 = *(_QWORD *)(v24 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v28 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v25)
      goto LABEL_28;
    v9 = *(_QWORD *)(v24 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_10002C690(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  char v16;
  int64_t v17;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v17 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    sub_100011254(0, &qword_10007B2E8, NSObject_ptr);
    v14 = v12;
    swift_retain_n(v13, 2);
    v15 = v14;
    v16 = static NSObject.== infix(_:_:)();
    swift_release(v13);

    if ((v16 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }
    swift_release(v13);

    if (v5)
      goto LABEL_4;
LABEL_5:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v17)
      goto LABEL_23;
    v10 = *(_QWORD *)(v2 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v17)
        goto LABEL_23;
      v10 = *(_QWORD *)(v2 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v17)
          goto LABEL_23;
        v10 = *(_QWORD *)(v2 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v17)
            goto LABEL_23;
          v10 = *(_QWORD *)(v2 + 8 * v6);
          if (!v10)
          {
            v11 = v9 + 4;
            if (v11 >= v17)
              goto LABEL_23;
            v10 = *(_QWORD *)(v2 + 8 * v11);
            v6 = v11;
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_19:
    v5 = (v10 - 1) & v10;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v17)
      goto LABEL_23;
    v10 = *(_QWORD *)(v2 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

void sub_10002C894(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  uint64_t v26;
  int64_t v27;
  int64_t v30;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v27 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v30 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordID");
    v15 = objc_msgSend(v14, "recordName");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = objc_msgSend(a2, "recordID");
    v20 = objc_msgSend(v19, "recordName");

    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    if (v16 == v21 && v18 == v23)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2);
      return;
    }
    v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v21, v23, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v23);
    if ((v25 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v30;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v27)
      goto LABEL_28;
    v9 = *(_QWORD *)(v26 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v27)
        goto LABEL_28;
      v9 = *(_QWORD *)(v26 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v27)
          goto LABEL_28;
        v9 = *(_QWORD *)(v26 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v27)
            goto LABEL_28;
          v9 = *(_QWORD *)(v26 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v27)
              goto LABEL_28;
            v9 = *(_QWORD *)(v26 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v30 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v27)
      goto LABEL_28;
    v9 = *(_QWORD *)(v26 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

uint64_t sub_10002CB6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002CB94(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_10002CBD0(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t);

  v4 = a2 & 1;
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(v2 + 40);
  (*(void (**)(uint64_t, uint64_t))(v2 + 24))(a1, v4);
  return v5(a1, v4);
}

uint64_t sub_10002CC24(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 16))(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_10002CC50()
{
  return sub_10002F2E4(49);
}

uint64_t sub_10002CC58()
{
  uint64_t v0;

  return sub_100021128(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(uint8_t **)(v0 + 32), *(NSObject **)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

void type metadata accessor for NotificationType(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B278, (uint64_t)&unk_1000722A0);
}

void sub_10002CC7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(id, uint64_t, void (*)(uint64_t, char), uint64_t, __n128);
  id v11;
  __n128 v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  v5 = sub_100011C24();
  v6 = objc_msgSend(v5, "privateCloudDatabase");

  v7 = sub_10000215C(&qword_10007B2F0);
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_100060D20;
  *(_QWORD *)(v8 + 32) = v4;
  v13 = v8;
  specialized Array._endMutation()(v8);
  v9 = swift_allocObject(&unk_100072800, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = v3;
  v10 = *(void (**)(id, uint64_t, void (*)(uint64_t, char), uint64_t, __n128))(*(_QWORD *)v3 + 832);
  v11 = v4;
  swift_retain(a1);
  v12 = swift_retain(v3);
  v10(v6, v13, sub_10002EE00, v9, v12);
  swift_release(v9);
  swift_bridgeObjectRelease(v13);

}

uint64_t sub_10002CD8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, _QWORD, void (*)(uint64_t, char), uint64_t, __n128);
  __n128 v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  Transaction.capture()();
  v3 = *(void (**)(uint64_t, _QWORD, void (*)(uint64_t, char), uint64_t, __n128))(*(_QWORD *)v1 + 816);
  v4 = swift_retain(v1);
  v3(v2, 0, sub_10002EDA8, v1, v4);
  return swift_release(v1);
}

uint64_t sub_10002CDF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100027390(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10002CE1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = sub_10000215C(&qword_10007AE48);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = (_QWORD *)(v0 + v4);
  sub_100002D78(v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002CEC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8) + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = v0 + ((v1 + 24) & ~v1);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 280))();
  v7[2] = v3;
  v5 = sub_100019D64((uint64_t (*)(char *))sub_10002EB98, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 288))(v5);
}

unint64_t sub_10002CF48(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10002CF74();
  result = sub_10002CFB8();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10002CF74()
{
  unint64_t result;

  result = qword_10007AE50;
  if (!qword_10007AE50)
  {
    result = swift_getWitnessTable(&unk_100060DBC, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007AE50);
  }
  return result;
}

unint64_t sub_10002CFB8()
{
  unint64_t result;

  result = qword_10007AE58;
  if (!qword_10007AE58)
  {
    result = swift_getWitnessTable(&unk_100060DE4, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007AE58);
  }
  return result;
}

unint64_t sub_10002D000()
{
  unint64_t result;

  result = qword_10007AE60;
  if (!qword_10007AE60)
  {
    result = swift_getWitnessTable(&unk_100060E4C, &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState);
    atomic_store(result, (unint64_t *)&qword_10007AE60);
  }
  return result;
}

uint64_t destroy for CloudStorageCoordinatorConfiguration(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for CloudStorageCoordinatorConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  a1[4] = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *assignWithCopy for CloudStorageCoordinatorConfiguration(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

__n128 initializeWithTake for CloudStorageCoordinatorConfiguration(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

_QWORD *assignWithTake for CloudStorageCoordinatorConfiguration(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration()
{
  return &type metadata for CloudStorageCoordinatorConfiguration;
}

uint64_t sub_10002D254()
{
  return type metadata accessor for CloudStorageCoordinator(0);
}

void sub_10002D25C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[22];

  v8[0] = "(";
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10002D384(319, (unint64_t *)&qword_10007AEC0, &qword_10007AAB0);
  if (v3 <= 0x3F)
  {
    v8[5] = *(_QWORD *)(v2 - 8) + 64;
    sub_10002D384(319, (unint64_t *)&unk_10007AEC8, (uint64_t *)&unk_10007A950);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      v8[7] = &unk_100060FA0;
      v8[8] = &unk_100060FA0;
      v8[9] = &unk_100060FA0;
      v8[10] = &unk_100060FA0;
      v8[11] = &unk_100060FA0;
      v8[12] = &unk_100060FA0;
      v8[13] = &unk_100060FB8;
      v8[14] = (char *)&value witness table for Builtin.Int64 + 64;
      v8[15] = &unk_100060FB8;
      v8[16] = &unk_100060FB8;
      v8[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[18] = (char *)&value witness table for Builtin.BridgeObject + 64;
      v8[19] = &unk_100060FA0;
      v8[20] = &unk_100060FA0;
      v6 = type metadata accessor for URL(319);
      if (v7 <= 0x3F)
      {
        v8[21] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 22, v8, a1 + 80);
      }
    }
  }
}

void sub_10002D384(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = sub_100006DD0(a3);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

_QWORD *initializeBufferWithCopyOfBuffer for CloudStorageCoordinator.CloudStorageCoordinatorError(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = *a2;
  if (*a2 >= 0xFFFFFFFFuLL)
    swift_errorRetain(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1)
{
  unint64_t result;

  result = *a1;
  if (result >= 0xFFFFFFFF)
    return swift_errorRelease(result);
  return result;
}

unint64_t *assignWithCopy for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
  {
    if (v4 >= 0xFFFFFFFF)
      swift_errorRetain(*a2);
    *a1 = v4;
  }
  else if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
    *a1 = *a2;
  }
  else
  {
    swift_errorRetain(*a2);
    v5 = *a1;
    *a1 = v4;
    swift_errorRelease(v5);
  }
  return a1;
}

_QWORD *initializeWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

unint64_t *assignWithTake for CloudStorageCoordinator.CloudStorageCoordinatorError(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = *a2;
  if (v3 < 0xFFFFFFFF)
    goto LABEL_6;
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_6:
    *a1 = v4;
    return a1;
  }
  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFE && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 1;
  if (v4 >= 3)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFE)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2 + 1;
  }
  return result;
}

uint64_t sub_10002D5CC(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_10002D5E4(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorError()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError;
}

uint64_t getEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinator.CloudStorageCoordinatorState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10002D6F0 + 4 * byte_100060D35[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10002D724 + 4 * byte_100060D30[v4]))();
}

uint64_t sub_10002D724(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D72C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002D734);
  return result;
}

uint64_t sub_10002D740(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002D748);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10002D74C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D754(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinator.CloudStorageCoordinatorState()
{
  return &type metadata for CloudStorageCoordinator.CloudStorageCoordinatorState;
}

void type metadata accessor for CKAccountStatus(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B270, (uint64_t)&unk_100072280);
}

uint64_t storeEnumTagSinglePayload for CloudStorageCoordinatorConfiguration.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10002D7D0 + 4 * byte_100060D3F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10002D804 + 4 * byte_100060D3A[v4]))();
}

uint64_t sub_10002D804(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D80C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10002D814);
  return result;
}

uint64_t sub_10002D820(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10002D828);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10002D82C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10002D834(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudStorageCoordinatorConfiguration.CodingKeys()
{
  return &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys;
}

unint64_t sub_10002D854()
{
  unint64_t result;

  result = qword_10007DEA0[0];
  if (!qword_10007DEA0[0])
  {
    result = swift_getWitnessTable(&unk_1000610F4, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, qword_10007DEA0);
  }
  return result;
}

unint64_t sub_10002D89C()
{
  unint64_t result;

  result = qword_10007E0B0;
  if (!qword_10007E0B0)
  {
    result = swift_getWitnessTable(&unk_100061064, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007E0B0);
  }
  return result;
}

unint64_t sub_10002D8E4()
{
  unint64_t result;

  result = qword_10007E0B8[0];
  if (!qword_10007E0B8[0])
  {
    result = swift_getWitnessTable(&unk_10006108C, &type metadata for CloudStorageCoordinatorConfiguration.CodingKeys);
    atomic_store(result, qword_10007E0B8);
  }
  return result;
}

uint64_t sub_10002D928(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double *v4;
  char v5;
  char v6;
  double v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  void (*v17)(__n128);
  __n128 v18;
  _BYTE v19[24];

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(double **)(v1 + 24);
  v5 = *(_BYTE *)(v1 + 32);
  v6 = *(_BYTE *)(v1 + 33);
  type metadata accessor for LocalDispatchTimer();
  swift_beginAccess(v4, v19, 0, 0);
  v7 = *v4;
  v8 = *(void **)(v3 + 56);
  v9 = swift_allocObject(&unk_100072350, 24, 7);
  swift_weakInit(v9 + 16, v3);
  v10 = swift_allocObject(&unk_100072378, 34, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = v9;
  *(_BYTE *)(v10 + 32) = v5;
  *(_BYTE *)(v10 + 33) = v6;
  v11 = v8;
  swift_retain(a1);
  v12 = LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(v8, (uint64_t)sub_10002DA94, v10, v7, 0.0, 1.0);
  v13 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer;
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_updateTimer) = v12;
  result = swift_release(v14);
  v16 = *(_QWORD *)(v3 + v13);
  if (v16)
  {
    v17 = *(void (**)(__n128))(*(_QWORD *)v16 + 152);
    v18 = swift_retain(v16);
    v17(v18);
    return swift_release(v16);
  }
  return result;
}

uint64_t sub_10002DA60()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002DA84()
{
  return sub_10002EDC4((void (*)(_QWORD))&_swift_release, 34);
}

void sub_10002DA94()
{
  uint64_t v0;

  sub_100022570(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t sub_10002DAA4()
{
  return sub_10002EDC4((void (*)(_QWORD))&_swift_bridgeObjectRelease, 32);
}

void sub_10002DAB4(void *a1, NSObject *a2, char a3)
{
  uint64_t v3;

  sub_100022FF0(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
}

void sub_10002DAC0(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_100023858(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16));
}

uint64_t sub_10002DACC()
{
  return sub_10002F018((void (*)(_QWORD))&_swift_bridgeObjectRelease, 50);
}

uint64_t sub_10002DADC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100023C88(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_BYTE *)(v2 + 48), *(unsigned __int8 *)(v2 + 49));
}

uint64_t sub_10002DAF4(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  void *v4;
  uint64_t v5;
  _QWORD v7[5];
  uint64_t v8;

  v3 = *(void **)(v1 + 16);
  v7[4] = j___s14bluetoothuserd11TransactionC7captureyyF;
  v8 = a1;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100001DDC;
  v7[3] = &unk_100072408;
  v4 = _Block_copy(v7);
  v5 = v8;
  swift_retain(a1);
  sub_10002E1C4((uint64_t)j___s14bluetoothuserd11TransactionC7captureyyF, a1);
  swift_release(v5);
  objc_msgSend(v3, "setCompletionBlock:", v4);
  _Block_release(v4);
  return swift_release(a1);
}

void sub_10002DBBC(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  unint64_t v6;
  unint64_t i;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  int64_t v26;
  int64_t v29;

  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v26 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v5 = 0;
  if (!v4)
    goto LABEL_5;
LABEL_4:
  v6 = __clz(__rbit64(v4));
  v4 &= v4 - 1;
  v29 = v5;
  for (i = v6 | (v5 << 6); ; i = __clz(__rbit64(v9)) + (v10 << 6))
  {
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    v13 = *(id *)(*(_QWORD *)(a1 + 48) + 8 * i);
    swift_retain(v12);
    v14 = objc_msgSend(v13, "recordID");
    v15 = objc_msgSend(v14, "recordName");

    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v19 = objc_msgSend(a2, "recordName");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    if (v16 == v20 && v18 == v22)
    {
      swift_release(a1);
      swift_bridgeObjectRelease_n(v18, 2);
      return;
    }
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v20, v22, 0);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v22);
    if ((v24 & 1) != 0)
    {
LABEL_28:
      swift_release(a1);
      return;
    }
    swift_release(v12);

    v5 = v29;
    if (v4)
      goto LABEL_4;
LABEL_5:
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v8);
    v10 = v5 + 1;
    if (!v9)
    {
      v10 = v5 + 2;
      if (v5 + 2 >= v26)
        goto LABEL_28;
      v9 = *(_QWORD *)(v25 + 8 * v10);
      if (!v9)
      {
        v10 = v5 + 3;
        if (v5 + 3 >= v26)
          goto LABEL_28;
        v9 = *(_QWORD *)(v25 + 8 * v10);
        if (!v9)
        {
          v10 = v5 + 4;
          if (v5 + 4 >= v26)
            goto LABEL_28;
          v9 = *(_QWORD *)(v25 + 8 * v10);
          if (!v9)
          {
            v11 = v5 + 5;
            if (v5 + 5 >= v26)
              goto LABEL_28;
            v9 = *(_QWORD *)(v25 + 8 * v11);
            v10 = v5 + 5;
            if (!v9)
              break;
          }
        }
      }
    }
LABEL_19:
    v4 = (v9 - 1) & v9;
    v29 = v10;
  }
  while (1)
  {
    v10 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v10 >= v26)
      goto LABEL_28;
    v9 = *(_QWORD *)(v25 + 8 * v10);
    ++v11;
    if (v9)
      goto LABEL_19;
  }
LABEL_31:
  __break(1u);
}

void sub_10002DE70(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  unint64_t v7;
  unint64_t i;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  int64_t v19;

  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v19 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v6 = 0;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v7 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v7 | (v6 << 6); ; i = __clz(__rbit64(v10)) + (v6 << 6))
  {
    v12 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * i);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * i + 8);
    sub_100011254(0, &qword_10007B2E8, NSObject_ptr);
    v14 = v12;
    swift_retain(v13);
    v15 = objc_msgSend(v14, "recordID");
    v16 = objc_msgSend(a2, "recordID");
    v17 = static NSObject.== infix(_:_:)(v15, v16);

    if ((v17 & 1) != 0)
    {
LABEL_23:
      swift_release(a1);
      return;
    }
    swift_release(v13);

    if (v5)
      goto LABEL_4;
LABEL_5:
    v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v9 >= v19)
      goto LABEL_23;
    v10 = *(_QWORD *)(v18 + 8 * v9);
    ++v6;
    if (!v10)
    {
      v6 = v9 + 1;
      if (v9 + 1 >= v19)
        goto LABEL_23;
      v10 = *(_QWORD *)(v18 + 8 * v6);
      if (!v10)
      {
        v6 = v9 + 2;
        if (v9 + 2 >= v19)
          goto LABEL_23;
        v10 = *(_QWORD *)(v18 + 8 * v6);
        if (!v10)
        {
          v6 = v9 + 3;
          if (v9 + 3 >= v19)
            goto LABEL_23;
          v10 = *(_QWORD *)(v18 + 8 * v6);
          if (!v10)
          {
            v11 = v9 + 4;
            if (v11 >= v19)
              goto LABEL_23;
            v10 = *(_QWORD *)(v18 + 8 * v11);
            v6 = v11;
            if (!v10)
              break;
          }
        }
      }
    }
LABEL_19:
    v5 = (v10 - 1) & v10;
  }
  while (1)
  {
    v6 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v6 >= v19)
      goto LABEL_23;
    v10 = *(_QWORD *)(v18 + 8 * v6);
    ++v11;
    if (v10)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
}

uint64_t sub_10002E0B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_10000215C(&qword_10007B288);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10002E1C4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_10002E1D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_10002E214(*(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 58, 7);
}

uint64_t sub_10002E214(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRelease(result);
  return result;
}

void sub_10002E220()
{
  uint64_t v0;

  sub_100023EF0(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD, _QWORD))(v0 + 24), *(_BYTE *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(unsigned __int8 *)(v0 + 56), *(unsigned __int8 *)(v0 + 57));
}

uint64_t sub_10002E238(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_10002E244(unint64_t *a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = sub_100011254(255, a2, a3);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v5);
    atomic_store(result, a1);
  }
  return result;
}

id sub_10002E284(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

uint64_t sub_10002E290(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void type metadata accessor for CKError(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B3E0, (uint64_t)&unk_100072C80);
}

uint64_t sub_10002E2AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  Swift::String v9;
  Swift::String v10;
  CKRecordZoneID v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  (*(void (**)(_OWORD *__return_ptr))(*(_QWORD *)v0 + 256))(v16);
  v1 = v17;
  v20 = v17;
  v19 = v16[0];
  swift_bridgeObjectRetain(v17);
  sub_100029DB4((uint64_t)&v19);
  v18 = v16[1];
  sub_100029DB4((uint64_t)&v18);
  sub_100029DDC(&v20);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
    swift_bridgeObjectRetain(v1);
    v3 = (void **)(v1 + 40);
    do
    {
      v4 = (uint64_t)*(v3 - 1);
      v5 = *v3;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
      v8 = v7;
      swift_bridgeObjectRetain(v5);
      v9._countAndFlagsBits = v4;
      v9._object = v5;
      v10._countAndFlagsBits = v6;
      v10._object = v8;
      v11.super.isa = CKRecordZoneID.init(zoneName:ownerName:)(v9, v10).super.isa;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11.super.isa);
      v13 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v12 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v13 >= v12 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
      v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11.super.isa);
      specialized Array._endMutation()(v14);
      v3 += 2;
      --v2;
    }
    while (v2);
    sub_100029DDC(&v20);
  }
  sub_100029DDC(&v20);
  sub_1000155C8((_BOOL8)_swiftEmptyArrayStorage);
  return swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
}

uint64_t sub_10002E440()
{
  return sub_10002E6AC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10002E44C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t);
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  v15 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 280))();
  v3 = *(_QWORD *)(v15 + 16);
  if (v3)
  {
    v4 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
    v5 = (_QWORD *)(v15 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)));
    v16 = *(_QWORD *)(v4 + 72);
    v17 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    do
    {
      v6 = v5[3];
      v7 = v5[4];
      sub_1000096E4(v5, v6);
      v8 = sub_10000215C(&qword_10007B2F0);
      v9 = swift_allocObject(v8, 40, 7);
      *(_OWORD *)(v9 + 16) = xmmword_100060D20;
      *(_QWORD *)(v9 + 32) = v2;
      v18 = v9;
      specialized Array._endMutation()(v9);
      v10 = *(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t, uint64_t))(v7 + 8);
      v11 = v2;
      v10(v1, _swiftEmptyArrayStorage, v18, v6, v7);
      swift_bridgeObjectRelease(v18);
      v12 = v5[3];
      v13 = v5[4];
      sub_1000096E4(v5, v12);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 24))(v1, *(unsigned __int8 *)(v1 + v17), v12, v13);
      v5 = (_QWORD *)((char *)v5 + v16);
      --v3;
    }
    while (v3);
  }
  return swift_bridgeObjectRelease(v15);
}

uint64_t sub_10002E5A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001DF84(a2, *(unsigned __int8 *)(v2 + 24));
}

uint64_t sub_10002E5E4()
{
  uint64_t v0;

  return sub_10001DE00(*(_QWORD *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_10002E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t, _QWORD, uint64_t (*)(uint64_t, char), uint64_t);

  v5 = swift_allocObject(&unk_1000725D0, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v6 = *(void (**)(uint64_t, _QWORD, uint64_t (*)(uint64_t, char), uint64_t))(*(_QWORD *)v2 + 816);
  swift_retain(a2);
  v6(2, 0, sub_10002E694, v5);
  return swift_release(v5);
}

uint64_t sub_10002E660()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002E684()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_10002E694(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10001D920(a1, a2 & 1, *(uint64_t (**)(uint64_t))(v2 + 16));
}

uint64_t sub_10002E6A0()
{
  return sub_10002E6AC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10002E6AC(void (*a1)(_QWORD))
{
  uint64_t v1;

  a1(*(_QWORD *)(v1 + 16));

  return swift_deallocObject(v1, 32, 7);
}

void sub_10002E6DC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100016238(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(NSObject **)(v2 + 24));
}

void sub_10002E6E8(uint64_t a1)
{
  uint64_t v1;

  sub_100013358(a1, v1);
}

uint64_t sub_10002E710()
{
  return sub_10002EDC4((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_10002E720(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100013AD4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10002E72C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000141F8(a1, v1);
}

void sub_10002E734(uint64_t a1)
{
  uint64_t *v1;

  sub_100014F04(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10002E760()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002E794(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100014FF0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void ***)(v2 + 40));
}

uint64_t sub_10002E7A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002E7C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10002E7EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
    v4 = (_QWORD *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_1000096E4(v4, v6);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v0, v6, v7);
      v4 = (_QWORD *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002E894()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10002E8A4(void *a1, char a2)
{
  char *v2;

  sub_100016618(a1, a2 & 1, v2);
}

void sub_10002E8B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  id v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD v9[5];
  _QWORD *v10;

  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = sub_100011C24();
  v6 = (_QWORD *)swift_allocObject(&unk_100072760, 40, 7);
  v6[2] = a1;
  v6[3] = v3;
  v6[4] = v4;
  v9[4] = sub_10002E9C8;
  v10 = v6;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  v9[2] = sub_100014E90;
  v9[3] = &unk_100072778;
  v7 = _Block_copy(v9);
  v8 = v10;
  swift_retain(a1);
  swift_retain(v4);
  swift_release(v8);
  objc_msgSend(v5, "accountInfoWithCompletionHandler:", v7);
  _Block_release(v7);

}

uint64_t sub_10002E99C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10002E9C8(void *a1, void *a2)
{
  uint64_t v2;
  void (*v5)(void *, uint64_t);
  id v6;

  v5 = *(void (**)(void *, uint64_t))(v2 + 24);
  Transaction.capture()();
  if (a2)
  {
    swift_errorRetain(a2);
    v5(a2, 1);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v6 = a1;
    v5(a1, 0);

  }
  else
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001000672C0, "bluetoothuserd/CloudStorageCoordinator.swift", 44, 2, 280, 0);
    __break(1u);
  }
}

void sub_10002EAB4(void *a1, char a2)
{
  if ((a2 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_10002EAC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
    v4 = (_QWORD *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v5 = OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_manateeAvailable;
    v6 = *(_QWORD *)(v3 + 72);
    do
    {
      v7 = v4[3];
      v8 = v4[4];
      sub_1000096E4(v4, v7);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 24))(v0, *(unsigned __int8 *)(v0 + v5), v7, v8);
      v4 = (_QWORD *)((char *)v4 + v6);
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002EB7C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002EB8C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100017650(a1, a2 & 1, v2);
}

BOOL sub_10002EB98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_10000215C(&qword_10007AE48);
  v5 = sub_1000021DC(&qword_10007B360, &qword_10007AE48, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_10002EC1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100027534(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10002EC8C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10002EDA8(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100026890(a1, a2 & 1, v2);
}

uint64_t sub_10002EDB4()
{
  return sub_10002EDC4((void (*)(_QWORD))&_swift_release, 32);
}

uint64_t sub_10002EDC4(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  a1(*(_QWORD *)(v2 + 16));
  swift_release(*(_QWORD *)(v2 + 24));
  return swift_deallocObject(v2, a2, 7);
}

void sub_10002EE00(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100026DCC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10002EE0C(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10002EE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *);
  uint64_t v4;

  v2 = *(uint64_t (**)(uint64_t *))(v1 + 16);
  v4 = a1;
  return v2(&v4);
}

uint64_t sub_10002EE64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002EE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(v1 + 40);
  (*(void (**)(void))(v1 + 24))();
  return v3(a1);
}

uint64_t sub_10002EED8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));

  return swift_deallocObject(v0, 57, 7);
}

uint64_t sub_10002EF14()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(void (**)(uint64_t, uint64_t))(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 48);
  v5 = *(unsigned __int8 *)(v0 + 56);
  Transaction.capture()();
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd23CloudStorageCoordinator_accountAvailable) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, void (*)(uint64_t, uint64_t), uint64_t))(*(_QWORD *)v1 + 872))(v4, v5, v2, v3);
  v7 = sub_10002A620();
  v8 = swift_allocError(&type metadata for CloudStorageCoordinator.CloudStorageCoordinatorError, v7, 0, 0);
  *v9 = 0;
  v2(v8, 1);
  return swift_errorRelease(v8);
}

uint64_t sub_10002EFD0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002EFF4(void *a1, void *a2, char a3)
{
  uint64_t v3;

  return sub_10001B254(a1, a2, a3 & 1, v3);
}

uint64_t sub_10002F000(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_10001BA94(a1, a2, a3, v3);
}

uint64_t sub_10002F008()
{
  return sub_10002F018((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_10002F018(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 24));
  a1(*(_QWORD *)(v2 + 32));
  a1(*(_QWORD *)(v2 + 40));
  return swift_deallocObject(v2, a2, 7);
}

void sub_10002F06C(void *a1, void *a2, uint64_t *a3, unint64_t a4, __int16 a5)
{
  uint64_t v5;

  sub_10001BD28(a1, a2, a3, a4, a5 & 0x1FF, *(void **)(v5 + 16), *(_QWORD **)(v5 + 24), *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40));
}

uint64_t sub_10002F098()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002F0D4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10001CED8(a1, a2 & 1, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(void (**)(uint64_t, uint64_t))(v2 + 40), *(_QWORD *)(v2 + 48));
}

void sub_10002F0E8(void *a1)
{
  uint64_t v1;

  sub_10001CB90(a1, *(uint64_t **)(v1 + 16));
}

uint64_t sub_10002F0F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002F114()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  char v17[24];
  char v18[24];

  v1 = v0[2];
  v15 = (uint64_t *)v0[4];
  v16 = (_QWORD *)v0[3];
  v2 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 280))();
  v3 = v2;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
    return swift_bridgeObjectRelease(v2);
  v5 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
  v14 = v3;
  v6 = (_QWORD *)(v3 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
  swift_beginAccess(v16, v18, 0, 0);
  swift_beginAccess(v15, v17, 0, 0);
  v7 = *(_QWORD *)(v5 + 72);
  do
  {
    v8 = v6[3];
    v9 = v6[4];
    sub_1000096E4(v6, v8);
    v10 = *v16;
    v11 = *v15;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain(*v16);
    swift_bridgeObjectRetain(v11);
    v12(v1, v10, v11, v8, v9);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v10);
    v6 = (_QWORD *)((char *)v6 + v7);
    --v4;
  }
  while (v4);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10002F264()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F274(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  id v8;

  if ((a5 & 1) != 0)
    return swift_errorRetain(a1);
  v8 = a1;
  return sub_100009708(a2, a3);
}

uint64_t sub_10002F2A8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, char a5)
{
  if ((a5 & 1) != 0)
    return swift_errorRelease(a1);

  return sub_1000093D8(a2, a3);
}

uint64_t sub_10002F2DC()
{
  return sub_10002F2E4(48);
}

uint64_t sub_10002F2E4(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));

  swift_release(*(_QWORD *)(v1 + 40));
  return swift_deallocObject(v1, a1, 7);
}

void sub_10002F324()
{
  uint64_t v0;

  sub_100017C44(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_10002F330(void *a1)
{
  uint64_t v1;

  return sub_1000183E4(a1, v1);
}

uint64_t sub_10002F338(void *a1)
{
  uint64_t v1;
  id v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(v1 + 16, v8, 33, 0);
  v3 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v3);
  v5 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x10);
  v4 = *(_QWORD *)((*(_QWORD *)(v1 + 16) & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v5 >= v4 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v4 > 1, v5 + 1, 1);
  v6 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v5, v3);
  specialized Array._endMutation()(v6);
  return swift_endAccess(v8);
}

uint64_t sub_10002F3D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002F3F4(void *a1)
{
  uint64_t v1;

  return sub_10001861C(a1, *(void **)(v1 + 16));
}

uint64_t sub_10002F3FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

void sub_10002F448(void *a1, __int16 a2)
{
  uint64_t v2;

  sub_100018904(a1, a2 & 0x1FF, *(_QWORD **)(v2 + 16), *(void (**)(void *, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

id sub_10002F47C(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return (id)swift_errorRetain(a1);
  else
    return a1;
}

void sub_10002F488(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    swift_errorRelease(a1);
  else

}

uint64_t sub_10002F494()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F4B8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  char v15[24];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD **)(v0 + 24);
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 280))();
  v4 = v3;
  v5 = *(_QWORD *)(v3 + 16);
  if (!v5)
    return swift_bridgeObjectRelease(v3);
  v6 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
  v14 = v4;
  v7 = (_QWORD *)(v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)));
  swift_beginAccess(v2, v15, 0, 0);
  v8 = *(_QWORD *)(v6 + 72);
  do
  {
    v9 = v7[3];
    v10 = v7[4];
    sub_1000096E4(v7, v9);
    v11 = *v2;
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 16);
    swift_bridgeObjectRetain(*v2);
    v12(v1, v11, v9, v10);
    swift_bridgeObjectRelease(v11);
    v7 = (_QWORD *)((char *)v7 + v8);
    --v5;
  }
  while (v5);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_10002F5CC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F5DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10002F678(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_100019F80(a1, v4, *(void **)(v2 + 24), v2 + v6, *(uint64_t (**)(uint64_t, uint64_t))v7, *(void **)(v7 + 8));
}

uint64_t sub_10002F6E0(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10002F6F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(sub_10000215C(&qword_10007AE48) - 8);
    v4 = (_QWORD *)(v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = v4[3];
      v7 = v4[4];
      sub_1000096E4(v4, v6);
      (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))(v7 + 8))(v0, _swiftEmptyArrayStorage, _swiftEmptyArrayStorage, v6, v7);
      v4 = (_QWORD *)((char *)v4 + v5);
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10002F7B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002F7C0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000215C(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_10002F804(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006DD0(&qword_10007BDD0);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *sub_10002F864(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

void type metadata accessor for Result(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B3D8, (uint64_t)&unk_100072C60);
}

uint64_t sub_10002F8B8()
{
  return sub_10000219C(&qword_10007B3E8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_10006123C);
}

uint64_t sub_10002F8E4()
{
  return sub_10000219C(&qword_10007B3F0, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061268);
}

uint64_t sub_10002F910()
{
  return sub_10000219C(&qword_10007B3F8, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061324);
}

uint64_t sub_10002F93C()
{
  return sub_10000219C(&qword_10007B400, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1000612F0);
}

uint64_t sub_10002F968()
{
  return sub_10000219C(&qword_10007B408, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_1000612AC);
}

uint64_t sub_10002F994()
{
  return sub_10000219C(&qword_10007B410, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_100061410);
}

void type metadata accessor for Code(uint64_t a1)
{
  sub_10002F9D4(a1, (unint64_t *)&unk_10007B430, (uint64_t)&unk_100072CA8);
}

void sub_10002F9D4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t sub_10002FA18()
{
  return sub_10000219C(&qword_10007B418, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_1000613D4);
}

unint64_t sub_10002FA48()
{
  unint64_t result;

  result = qword_10007B420;
  if (!qword_10007B420)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10007B420);
  }
  return result;
}

uint64_t sub_10002FA8C()
{
  return sub_10000219C(&qword_10007B428, (uint64_t (*)(uint64_t))type metadata accessor for Code, (uint64_t)&unk_10006144C);
}

uint64_t sub_10002FAB8()
{
  return sub_10000219C((unint64_t *)&unk_10007B300, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100061368);
}

uint64_t sub_10002FBDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10002CDF4(a1);
}

void sub_10002FBF0(uint64_t a1)
{
  sub_10002E734(a1);
}

uint64_t sub_10002FC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v8 = objc_autoreleasePoolPush();
  v9 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = PropertyListEncoder.init()();
  v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a3, *(_QWORD *)(*(_QWORD *)(a5 + 8) + 16));
  swift_release(v10);
  objc_autoreleasePoolPop(v8);
  return v11;
}

uint64_t sub_10002FCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  uint64_t v5;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = objc_autoreleasePoolPush();
  v12 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, a1, a2, a3, *(_QWORD *)(*(_QWORD *)(a4 + 8) + 8));
  swift_release(v13);
  objc_autoreleasePoolPop(v11);
  if (v5)
  {
    swift_errorRelease(v5);
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 56))(a5, v14, 1, a3);
}

Class sub_10002FDAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  Class v7;

  v5 = objc_autoreleasePoolPush();
  sub_10002FE04(v2, a1, a2, &v7);
  objc_autoreleasePoolPop(v5);
  return v7;
}

uint64_t sub_10002FE04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, Class *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  objc_class *v16;
  Class isa;
  uint64_t result;
  uint64_t v19;
  Class v20;

  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1);
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 32))(v12, v11);
  v15 = v14;
  sub_10003033C(v13, v14);
  isa = v16;
  sub_1000093EC(v13, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, a2);
  if (!isa)
    isa = sub_10002FF08((uint64_t)v10, a2, a3).super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  v20 = isa;
  result = (*(uint64_t (**)(Class *, uint64_t, uint64_t))(a3 + 64))(&v20, a2, a3);
  *a4 = v20;
  return result;
}

CKRecord sub_10002FF08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  Class isa;
  Swift::String v20;
  CKRecordID v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  Swift::String v34;
  uint64_t v36;
  objc_class *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100011254(0, &qword_10007B298, CKRecordID_ptr);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 8) + 32))(a2);
  v11 = v10;
  sub_100011254(0, &qword_10007B310, CKRecordZoneID_ptr);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a3 + 24);
  v38 = a3;
  v13 = v12(a2, a3);
  v15 = v14;
  v16._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v16._object = v17;
  v18._countAndFlagsBits = v13;
  v18._object = v15;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v18, v16).super.isa;
  v20._countAndFlagsBits = v9;
  v20._object = v11;
  v21.super.isa = CKRecordID.init(recordName:zoneID:)(v20, (CKRecordZoneID)isa).super.isa;
  v22 = sub_10003078C();
  v39 = v6;
  v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v22, v5);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v37 = v21.super.isa;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v41 = v28;
    *(_DWORD *)v27 = 136315138;
    v36 = v5;
    v29 = v38;
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 16))(a2, v38);
    v32 = v31;
    v40 = sub_100002CA8(v30, v31, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to unarchive record -- creating new %s record", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v33 = v27;
    v21.super.isa = v37;
    swift_slowDealloc(v33, -1, -1);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v36);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v5);
    v29 = v38;
  }
  sub_100011254(0, &qword_10007B2B0, CKRecord_ptr);
  v34._countAndFlagsBits = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 16))(a2, v29);
  return CKRecord.init(recordType:recordID:)(v34, v21);
}

uint64_t sub_1000301E4()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;

  v1 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v0, "encodeSystemFieldsWithCoder:", v1);
  objc_msgSend(v1, "finishEncoding");
  v2 = objc_msgSend(v1, "encodedData");
  v3 = static Data._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

id sub_100030280()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "initForReadingFromData:error:", isa, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = v7;
  }
  else
  {
    v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v2;
}

void sub_10003033C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = type metadata accessor for Logger(0);
  v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  __asm { BR              X10 }
}

id sub_1000303D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  id v20;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject *v27;

  if ((v4 & 0xFF000000000000) == 0)
    return 0;
  v8 = objc_allocWithZone((Class)NSKeyedUnarchiver);
  sub_10000971C(v5, v4);
  v9 = sub_100030280();
  if (v1)
  {
    sub_1000093EC(v5, v4);
    v10 = sub_10003078C();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v2, v10, v0);
    swift_errorRetain(v1);
    v11 = swift_errorRetain(v1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_QWORD *)(v7 - 104) = swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      swift_errorRetain(v1);
      v15 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(_QWORD *)(v7 - 96) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v7 - 96, v7 - 88, v14 + 4, v14 + 12);
      v16 = *(uint64_t **)(v7 - 104);
      *v16 = v15;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to create unarchiver: %@", v14, 0xCu);
      v17 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v16, 1, v17);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
    return 0;
  }
  v18 = v9;
  sub_1000093EC(v5, v4);
  v19 = objc_msgSend(objc_allocWithZone((Class)CKRecord), "initWithCoder:", v18);
  if (!v19)
  {
    v22 = sub_10003078C();
    v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v22, v0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to extract CKRecord from cloudKitMetadata", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
      v27 = v18;
    }
    else
    {
      v27 = v24;
      v24 = v18;
    }

    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v3, v0);
    return 0;
  }
  v20 = v19;

  return v20;
}

void *sub_1000306B4()
{
  return &unk_100072E88;
}

uint64_t sub_1000306C0(uint64_t a1)
{
  return sub_100030970(a1, qword_1000809D8, 0x6E6F6D656164, 0xE600000000000000);
}

uint64_t sub_1000306DC()
{
  return sub_100002F8C(&qword_10007E5C0, (uint64_t)qword_1000809D8);
}

uint64_t sub_1000306F8(uint64_t a1)
{
  return sub_100030970(a1, qword_1000809F0, 7565409, 0xE300000000000000);
}

uint64_t sub_100030710()
{
  return sub_100002F8C(&qword_10007E5C8, (uint64_t)qword_1000809F0);
}

uint64_t sub_10003072C(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A08, 0x6E614D6775626564, 0xEC00000072656761);
}

uint64_t sub_100030754()
{
  return sub_100002F8C(&qword_10007E5D0, (uint64_t)qword_100080A08);
}

uint64_t sub_100030770(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A20, 0x64756F6C63, 0xE500000000000000);
}

uint64_t sub_10003078C()
{
  return sub_100002F8C(&qword_10007E5D8, (uint64_t)qword_100080A20);
}

uint64_t sub_1000307A8(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A38, 0x69617064756F6C63, 0xEC000000676E6972);
}

uint64_t sub_1000307D0()
{
  return sub_100002F8C(&qword_10007E5E0, (uint64_t)qword_100080A38);
}

uint64_t sub_1000307EC(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A50, 0x6F745364756F6C63, 0xEC00000065676172);
}

uint64_t sub_100030814()
{
  return sub_100002F8C(&qword_10007E5E8, (uint64_t)qword_100080A50);
}

uint64_t sub_100030830(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A68, 0x616E614D656C6966, 0xEB00000000726567);
}

uint64_t sub_100030858()
{
  return sub_100002F8C(&qword_10007E5F0, (uint64_t)qword_100080A68);
}

uint64_t sub_100030874(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A80, 0x67696C6C65746E69, 0xEC00000065636E65);
}

uint64_t sub_10003089C(uint64_t a1)
{
  return sub_100030970(a1, qword_100080A98, 7566955, 0xE300000000000000);
}

uint64_t sub_1000308B4()
{
  return sub_100002F8C(&qword_10007E600, (uint64_t)qword_100080A98);
}

uint64_t sub_1000308D0(uint64_t a1)
{
  return sub_100030970(a1, qword_100080AB0, 0x6163696669746F6ELL, 0xEC0000006E6F6974);
}

uint64_t sub_1000308F8()
{
  return sub_100002F8C(&qword_10007E608, (uint64_t)qword_100080AB0);
}

uint64_t sub_100030914(uint64_t a1)
{
  return sub_100030970(a1, qword_100080AC8, 0x746361736E617274, 0xEB000000006E6F69);
}

uint64_t sub_10003093C()
{
  return sub_100002F8C(&qword_10007E610, (uint64_t)qword_100080AC8);
}

uint64_t sub_100030958(uint64_t a1)
{
  return sub_100030970(a1, qword_100080AE0, 6516856, 0xE300000000000000);
}

uint64_t sub_100030970(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;

  v7 = type metadata accessor for Logger(0);
  sub_10002F864(v7, a2);
  sub_10000255C(v7, (uint64_t)a2);
  return Logger.init(subsystem:category:)(0xD000000000000017, 0x8000000100067420, a3, a4);
}

uint64_t sub_1000309E4()
{
  return sub_100002F8C(&qword_10007E618, (uint64_t)qword_100080AE0);
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for Log()
{
  return &type metadata for Log;
}

BOOL sub_100030A20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

_QWORD *sub_100030A38@<X0>(_QWORD *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

void sub_100030A58(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

uint64_t sub_100030A64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10003618C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100030AC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10003618C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100030B0C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6F636341656D6153;
  else
    return 0x6E776F6E6B6E55;
}

void *sub_100030B50()
{
  return &unk_10007B450;
}

uint64_t type metadata accessor for CloudPairedDeviceRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_10007EEB0;
  if (!qword_10007EEB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudPairedDeviceRecord);
  return result;
}

uint64_t sub_100030B98()
{
  uint64_t v0;

  v0 = type metadata accessor for URL(0);
  sub_10002F864(v0, qword_100080AF8);
  sub_10000255C(v0, (uint64_t)qword_100080AF8);
  return URL.init(fileURLWithPath:isDirectory:)(0xD000000000000018, 0x8000000100067520, 1);
}

uint64_t sub_100030BFC()
{
  uint64_t v0;

  if (qword_10007E620 != -1)
    swift_once(&qword_10007E620, sub_100030B98);
  v0 = type metadata accessor for URL(0);
  return sub_10000255C(v0, (uint64_t)qword_100080AF8);
}

unint64_t sub_100030C44(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  Class v17;
  uint64_t *v18;
  void *v19;
  Swift::String v20;
  void *object;
  void *v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  void *v27;
  void *v28;
  Swift::String v29;
  void *v30;
  Swift::String v31;
  int *v32;
  void *v33;
  Swift::String v34;
  void *v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  Swift::String v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  void *v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t *v91;
  char *v92;
  uint64_t v93;
  void *v94;
  Swift::String v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  _QWORD *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  _QWORD *v109;
  Swift::String v110;
  void *v111;
  Swift::String v112;
  void *v113;
  Swift::String v114;
  void *v115;
  Swift::String v116;
  id v117;
  void *v118;
  uint64_t v119;
  void *v120;
  void *v121;
  Swift::String v122;
  Swift::String v123;
  void *v124;
  id v125;
  void *v126;
  uint64_t v127;
  void *v128;
  void *v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  Swift::String v133;
  Swift::String v134;
  void *v135;
  id v136;
  void *v137;
  uint64_t v138;
  uint64_t v139;
  void (*v140)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  void *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  void *v147;
  Swift::String v148;
  Swift::String v149;
  void *v150;
  id v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  unint64_t v160;
  void *v161;
  uint64_t v163;
  uint64_t v164;
  objc_class *v165;
  uint64_t v166;
  char *v167;
  char *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  int *v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t *v176;
  uint64_t v177;
  Swift::String v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  Swift::String v183;
  unint64_t v184;
  unint64_t v185;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v172 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v167 = (char *)&v163 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000215C((uint64_t *)&unk_10007B460);
  v7 = __chkstk_darwin(v6);
  v170 = (char *)&v163 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v163 - v10;
  v12 = __chkstk_darwin(v9);
  v168 = (char *)&v163 - v13;
  __chkstk_darwin(v12);
  v169 = (uint64_t)&v163 - v14;
  v15 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  v16 = sub_10000219C(&qword_10007BD90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000616E0);
  v17 = sub_10002FDAC((uint64_t)v15, v16);
  v184 = 0xD000000000000019;
  v185 = 0x80000001000674E0;
  v18 = (uint64_t *)(v1 + v15[6]);
  v19 = (void *)v18[1];
  v178._countAndFlagsBits = *v18;
  v178._object = v19;
  swift_bridgeObjectRetain(v19);
  v20._countAndFlagsBits = 8236;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  object = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(object);
  v183._countAndFlagsBits = *(_QWORD *)(v1 + v15[10]);
  v178._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v178._object = v22;
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  v24 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v24);
  v173 = v15;
  if (*(_BYTE *)(v1 + v15[11]) == 1)
  {
    v178._countAndFlagsBits = 0;
    v178._object = (void *)0xE000000000000000;
    v25._countAndFlagsBits = 0x6F636341656D6153;
    v25._object = (void *)0xEB00000000746E75;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(0xEB00000000746E75);
    v26._countAndFlagsBits = 8236;
    v26._object = (void *)0xE200000000000000;
    String.append(_:)(v26);
    v27 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v27);
  }
  if (*(_QWORD *)(v1 + v173[12]))
  {
    v183._countAndFlagsBits = *(_QWORD *)(v1 + v173[12]);
    v178._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v178._object = v28;
    v29._countAndFlagsBits = 8236;
    v29._object = (void *)0xE200000000000000;
    String.append(_:)(v29);
    v30 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v30);
  }
  v31._countAndFlagsBits = 0x203A454C66;
  v31._object = (void *)0xE500000000000000;
  String.append(_:)(v31);
  v32 = v173;
  v183._countAndFlagsBits = *(_QWORD *)(v1 + v173[7]);
  v178._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v178._object = v33;
  v34._countAndFlagsBits = 8236;
  v34._object = (void *)0xE200000000000000;
  String.append(_:)(v34);
  v35 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v35);
  v171 = v11;
  if (a1 >= 20)
  {
    Data.hexString.getter(*(_QWORD *)(v1 + v32[8]), *(_QWORD *)(v1 + v32[8] + 8));
    v178._countAndFlagsBits = v93;
    v178._object = v94;
    v95._countAndFlagsBits = 8236;
    v95._object = (void *)0xE200000000000000;
    String.append(_:)(v95);
    v96 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v96);
    v178._countAndFlagsBits = 0;
    v178._object = (void *)0xE000000000000000;
    v97 = *(_QWORD *)(v1 + v32[9]);
    v98 = *(_QWORD *)(v97 + 16);
    if (v98)
    {
      v166 = v2;
      swift_bridgeObjectRetain(v97);
      v99 = (unint64_t *)(v97 + 40);
      v100 = _swiftEmptyArrayStorage;
      do
      {
        v101 = *(v99 - 1);
        v102 = *v99;
        sub_10000971C(v101, *v99);
        Data.hexString.getter(v101, v102);
        v104 = v103;
        v106 = v105;
        sub_1000093EC(v101, v102);
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_10000F854(0, v100[2] + 1, 1, v100);
        v108 = v100[2];
        v107 = v100[3];
        if (v108 >= v107 >> 1)
          v100 = sub_10000F854((_QWORD *)(v107 > 1), v108 + 1, 1, v100);
        v99 += 2;
        v100[2] = v108 + 1;
        v109 = &v100[2 * v108];
        v109[4] = v104;
        v109[5] = v106;
        --v98;
      }
      while (v98);
      swift_bridgeObjectRelease(v97);
    }
    else
    {
      v100 = _swiftEmptyArrayStorage;
    }
    v114._countAndFlagsBits = Array.description.getter(v100, &type metadata for String);
    v115 = v114._object;
    String.append(_:)(v114);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v115);
    v116._countAndFlagsBits = 8236;
    v116._object = (void *)0xE200000000000000;
    String.append(_:)(v116);
    v113 = v178._object;
    String.append(_:)(v178);
  }
  else
  {
    v36 = (uint64_t *)(v1 + v32[8]);
    v37 = *v36;
    v38 = v36[1];
    sub_10000971C(*v36, v38);
    v39 = Data.description.getter(v37, v38);
    v41 = v40;
    sub_1000093EC(v37, v38);
    v178._countAndFlagsBits = v39;
    v178._object = v41;
    v42._countAndFlagsBits = 8236;
    v42._object = (void *)0xE200000000000000;
    String.append(_:)(v42);
    v43 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v43);
    v183._countAndFlagsBits = 0;
    v183._object = (void *)0xE000000000000000;
    v44 = *(_QWORD *)(v2 + v32[9]);
    v45 = *(_QWORD *)(v44 + 16);
    if (v45)
    {
      v166 = v2;
      v164 = v4;
      v165 = v17;
      swift_bridgeObjectRetain_n(v44, 2);
      v163 = v44;
      v46 = (unint64_t *)(v44 + 40);
      v47 = (char *)_swiftEmptyArrayStorage;
      do
      {
        v176 = v46;
        v177 = v45;
        v48 = *(v46 - 1);
        v49 = *v46;
        sub_10000971C(v48, *v46);
        v174 = v49;
        v175 = v48;
        Data.hexString.getter(v48, v49);
        v51 = v50;
        v53 = sub_10003485C(8, v52, v50);
        v55 = v54;
        v57 = v56;
        v59 = v58;
        swift_bridgeObjectRelease(v51);
        v178._countAndFlagsBits = 3026478;
        v178._object = (void *)0xE300000000000000;
        v181 = static String._fromSubstring(_:)(v53, v55, v57, v59);
        v182 = v60;
        String.append<A>(contentsOf:)(&v178, &type metadata for String, &protocol witness table for String);
        v61 = Substring.init(_:)(v181, v182);
        v63 = v62;
        v65 = v64;
        v67 = v66;
        swift_bridgeObjectRelease(v59);
        Data.hexString.getter(v48, v49);
        v69 = v68;
        v71 = sub_1000348E4(5uLL, v70, v68);
        v73 = v72;
        v75 = v74;
        v77 = v76;
        swift_bridgeObjectRelease(v69);
        v178._countAndFlagsBits = v71;
        v178._object = v73;
        v179 = v75;
        v180 = v77;
        swift_bridgeObjectRetain(v67);
        v78 = static String._fromSubstring(_:)(v61, v63, v65, v67);
        v80 = v79;
        swift_bridgeObjectRelease(v67);
        v181 = v78;
        v182 = v80;
        v81 = sub_10003498C();
        String.append<A>(contentsOf:)(&v178, &type metadata for Substring, v81);
        v82 = Substring.init(_:)(v181, v182);
        v84 = v83;
        v86 = v85;
        v88 = v87;
        swift_bridgeObjectRelease(v67);
        swift_bridgeObjectRelease(v77);
        sub_1000093EC(v175, v174);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v47 = sub_1000346A0(0, *((_QWORD *)v47 + 2) + 1, 1, v47);
        v90 = *((_QWORD *)v47 + 2);
        v89 = *((_QWORD *)v47 + 3);
        v91 = v176;
        if (v90 >= v89 >> 1)
          v47 = sub_1000346A0((char *)(v89 > 1), v90 + 1, 1, v47);
        v46 = v91 + 2;
        *((_QWORD *)v47 + 2) = v90 + 1;
        v92 = &v47[32 * v90];
        *((_QWORD *)v92 + 4) = v82;
        *((_QWORD *)v92 + 5) = v84;
        *((_QWORD *)v92 + 6) = v86;
        *((_QWORD *)v92 + 7) = v88;
        v45 = v177 - 1;
      }
      while (v177 != 1);
      swift_bridgeObjectRelease_n(v163, 2);
      v17 = v165;
      v4 = v164;
    }
    else
    {
      v47 = (char *)_swiftEmptyArrayStorage;
    }
    v110._countAndFlagsBits = Array.description.getter(v47, &type metadata for Substring);
    v111 = v110._object;
    String.append(_:)(v110);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v111);
    v112._countAndFlagsBits = 8236;
    v112._object = (void *)0xE200000000000000;
    String.append(_:)(v112);
    v113 = v183._object;
    String.append(_:)(v183);
  }
  swift_bridgeObjectRelease(v113);
  v117 = -[objc_class recordChangeTag](v17, "recordChangeTag");
  if (v117)
  {
    v118 = v117;
    v119 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
    v121 = v120;

    v122._countAndFlagsBits = 540691267;
    v122._object = (void *)0xE400000000000000;
    String.append(_:)(v122);
    v178._countAndFlagsBits = v119;
    v178._object = v121;
    v123._countAndFlagsBits = 8236;
    v123._object = (void *)0xE200000000000000;
    String.append(_:)(v123);
    v124 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v124);
    v178._countAndFlagsBits = 0;
    v178._object = (void *)0xE000000000000000;
    v125 = -[objc_class modifiedByDevice](v17, "modifiedByDevice");
    if (v125)
    {
      v126 = v125;
      v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v125);
      v129 = v128;

    }
    else
    {
      v129 = (void *)0xE100000000000000;
      v127 = 45;
    }
    v133._countAndFlagsBits = v127;
    v133._object = v129;
    String.append(_:)(v133);
    swift_bridgeObjectRelease(v129);
    v134._countAndFlagsBits = 8236;
    v134._object = (void *)0xE200000000000000;
    String.append(_:)(v134);
    v135 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v135);
    v178._countAndFlagsBits = 544490595;
    v178._object = (void *)0xE400000000000000;
    v136 = -[objc_class creationDate](v17, "creationDate");
    if (v136)
    {
      v137 = v136;
      v138 = (uint64_t)v168;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v139 = v172;
      v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      v140(v138, 0, 1, v4);
    }
    else
    {
      v139 = v172;
      v140 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v172 + 56);
      v138 = (uint64_t)v168;
      v140((uint64_t)v168, 1, 1, v4);
    }
    v141 = v169;
    sub_1000347A0(v138, v169);
    v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v139 + 48);
    if (v142(v141, 1, v4))
    {
      sub_10000BCBC(v141, (uint64_t *)&unk_10007B460);
      v143 = (void *)0xE100000000000000;
      v144 = 45;
    }
    else
    {
      v145 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v139 + 16))(v167, v141, v4);
      sub_10000BCBC(v141, (uint64_t *)&unk_10007B460);
      v144 = sub_1000361D4();
      v146 = v139;
      v143 = v147;
      (*(void (**)(char *, uint64_t))(v146 + 8))(v145, v4);
    }
    v148._countAndFlagsBits = v144;
    v148._object = v143;
    String.append(_:)(v148);
    swift_bridgeObjectRelease(v143);
    v149._countAndFlagsBits = 8236;
    v149._object = (void *)0xE200000000000000;
    String.append(_:)(v149);
    v150 = v178._object;
    String.append(_:)(v178);
    swift_bridgeObjectRelease(v150);
    v178._countAndFlagsBits = 544490605;
    v178._object = (void *)0xE400000000000000;
    v151 = -[objc_class modificationDate](v17, "modificationDate");
    if (v151)
    {
      v152 = v151;
      v153 = (uint64_t)v170;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v154 = 0;
      v156 = (uint64_t)v171;
      v155 = v172;
    }
    else
    {
      v154 = 1;
      v156 = (uint64_t)v171;
      v155 = v172;
      v153 = (uint64_t)v170;
    }
    v140(v153, v154, 1, v4);
    sub_1000347A0(v153, v156);
    if (v142(v156, 1, v4))
    {
      sub_10000BCBC(v156, (uint64_t *)&unk_10007B460);
      v132 = 0xE100000000000000;
      v157 = 45;
    }
    else
    {
      v158 = v167;
      (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v167, v156, v4);
      sub_10000BCBC(v156, (uint64_t *)&unk_10007B460);
      v157 = sub_1000361D4();
      v159 = v155;
      v132 = v160;
      (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v4);
    }
    v130 = v157;
    v131 = v132;
  }
  else
  {
    v178._countAndFlagsBits = 544490605;
    v178._object = (void *)0xE400000000000000;
    v130 = sub_1000361D4();
    v132 = v131;
  }
  String.append(_:)(*(Swift::String *)&v130);
  swift_bridgeObjectRelease(v132);
  v161 = v178._object;
  String.append(_:)(v178);
  swift_bridgeObjectRelease(v161);

  return v184;
}

void sub_1000317B0(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  int *v9;
  _QWORD *v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  id v17;

  v9 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  *(_QWORD *)((char *)a5 + v9[10]) = 0;
  v10 = (_QWORD *)((char *)a5 + v9[6]);
  *v10 = a1;
  v10[1] = a2;
  *(_QWORD *)((char *)a5 + v9[7]) = objc_msgSend(a3, "fastLEConnectionInfoVersion");
  v11 = objc_msgSend(a3, "fastLEConnectionInfoData");
  if (v11)
  {
    v12 = v11;
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v15 = v14;

  }
  else
  {
    v13 = 0;
    v15 = 0xC000000000000000;
  }
  v16 = (uint64_t *)((char *)a5 + v9[8]);
  *v16 = v13;
  v16[1] = v15;
  *(_QWORD *)((char *)a5 + v9[9]) = a4;
  *((_BYTE *)a5 + v9[11]) = 1;
  v17 = objc_msgSend(a3, "supportedServices");
  *(_QWORD *)((char *)a5 + v9[12]) = v17;
  *a5 = xmmword_1000614C0;
  static Date.now.getter(v17);

}

uint64_t sub_1000318C4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  Class v52;
  id v53;
  char *v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t, uint64_t, uint64_t, uint64_t);
  Class v61;
  id v62;
  char *v63;
  void (*v64)(uint64_t, char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  _QWORD *v82;
  uint64_t v83;
  _QWORD *v84;
  __int128 v85;
  char v86;

  v77 = a2;
  v3 = sub_10000215C((uint64_t *)&unk_10007B460);
  v4 = __chkstk_darwin(v3);
  v75 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v4);
  v76 = (char *)&v69 - v7;
  __chkstk_darwin(v6);
  v78 = (uint64_t *)((char *)&v69 - v8);
  v9 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v9 - 8);
  v80 = v9;
  v10 = __chkstk_darwin(v9);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v69 - v13;
  v15 = sub_10000215C(&qword_10007B478);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  v21 = (char *)&v69 - v20;
  v81 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  __chkstk_darwin(v81);
  v82 = (uint64_t *)((char *)&v69 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = a1[3];
  v24 = a1[4];
  v84 = a1;
  sub_1000096E4(a1, v23);
  v25 = sub_1000349D0();
  v26 = v83;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudPairedDeviceRecord.CodingKeys, &type metadata for CloudPairedDeviceRecord.CodingKeys, v25, v23, v24);
  if (v26)
    return sub_100002D78(v84);
  v73 = v14;
  v74 = v19;
  v83 = v16;
  v72 = v12;
  v86 = 0;
  v28 = sub_100034A14();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for Data, &v86, v15, &type metadata for Data, v28);
  v29 = v82;
  v30 = *((_QWORD *)&v85 + 1);
  *v82 = v85;
  v29[1] = v30;
  LOBYTE(v85) = 2;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v15);
  v32 = v81;
  v33 = (_QWORD *)((char *)v29 + v81[6]);
  *v33 = v31;
  v33[1] = v34;
  LOBYTE(v85) = 3;
  v35 = (uint64_t)v29;
  *(_QWORD *)((char *)v29 + v32[7]) = KeyedDecodingContainer.decode(_:forKey:)(&v85, v15);
  v86 = 4;
  v71 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for Data, &v86, v15, &type metadata for Data, v28);
  *(_OWORD *)((char *)v29 + v32[8]) = v85;
  v36 = v74;
  v37 = v71;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v74, v21, v71);
  v38 = sub_10000215C(&qword_10007B488);
  v86 = 5;
  v39 = sub_100035118(&qword_10007B490, (void (*)(void))sub_100034A14, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&v85, v38, &v86, v37, v38, v39);
  v40 = (_QWORD *)v85;
  v41 = *(void (**)(char *, uint64_t))(v83 + 8);
  v42 = v71;
  v41(v36, v71);
  v43 = _swiftEmptyArrayStorage;
  if (v40)
    v43 = v40;
  *(_QWORD *)(v35 + v32[9]) = v43;
  LOBYTE(v85) = 6;
  *(_QWORD *)(v35 + v32[10]) = KeyedDecodingContainer.decode(_:forKey:)(&v85, v42);
  v86 = 7;
  v44 = sub_100034A58();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v85, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType, &v86, v71, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType, v44);
  *(_BYTE *)(v35 + v32[11]) = v85;
  LOBYTE(v85) = 8;
  v45 = KeyedDecodingContainer.decode(_:forKey:)(&v85, v71);
  *(_QWORD *)(v35 + v32[12]) = v45;
  v83 = v35 + v32[5];
  static Date.now.getter(v45);
  LOBYTE(v85) = 1;
  v46 = sub_10000219C(&qword_10007B4A0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v47 = v78;
  v48 = v80;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v78, v80, &v85, v71, v80, v46);
  v70 = v21;
  v74 = 0;
  v49 = v35;
  v50 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v79 + 48);
  if (v50((uint64_t)v47, 1, v48) == 1)
  {
    v51 = sub_10000219C(&qword_10007BD90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000616E0);
    v52 = sub_10002FDAC((uint64_t)v81, v51);
    v53 = -[objc_class modificationDate](v52, "modificationDate");

    if (v53)
    {
      v54 = v72;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v53);

      v55 = v79;
      v56 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
      v57 = (uint64_t)v76;
      v58 = v54;
      v59 = v80;
      v56((uint64_t)v76, v58, v80);
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56);
      v60(v57, 0, 1, v59);
      if (v50(v57, 1, v59) != 1)
      {
        v41(v70, v71);
        v56((uint64_t)v73, v76, v80);
LABEL_17:
        sub_10000BCBC((uint64_t)v78, (uint64_t *)&unk_10007B460);
        goto LABEL_18;
      }
    }
    else
    {
      v60 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
      v60((uint64_t)v76, 1, 1, v80);
    }
    v61 = sub_10002FDAC((uint64_t)v81, v51);
    v62 = -[objc_class creationDate](v61, "creationDate");

    if (v62)
    {
      v63 = v72;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

      v64 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
      v65 = (uint64_t)v75;
      v66 = v63;
      v67 = v80;
      v64((uint64_t)v75, v66, v80);
      v60(v65, 0, 1, v67);
      v68 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v50)(v65, 1, v67);
      if ((_DWORD)v68 != 1)
      {
        v41(v70, v71);
        v64((uint64_t)v73, v75, v80);
LABEL_16:
        sub_10000BCBC((uint64_t)v76, (uint64_t *)&unk_10007B460);
        goto LABEL_17;
      }
    }
    else
    {
      v68 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v60)(v75, 1, 1, v80);
    }
    static Date.now.getter(v68);
    v41(v70, v71);
    sub_10000BCBC((uint64_t)v75, (uint64_t *)&unk_10007B460);
    goto LABEL_16;
  }
  v41(v70, v71);
  (*(void (**)(char *, _QWORD *, uint64_t))(v79 + 32))(v73, v78, v80);
LABEL_18:
  (*(void (**)(uint64_t, char *, uint64_t))(v79 + 40))(v83, v73, v80);
  sub_100034A9C(v49, v77);
  sub_100002D78(v84);
  return sub_100034AE0(v49);
}

void sub_10003218C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  __chkstk_darwin(v6);
  v3 = type metadata accessor for CloudPairedDeviceRecord(0);
  v4 = *(int *)(v3 + 28);
  v5 = *(_QWORD *)(a1 + v4);
  if (!v5)
    v5 = *(_QWORD *)(v1 + v4);
  *(_QWORD *)(v1 + v4) = v5;
  __asm { BR              X11 }
}

uint64_t sub_100032230@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;

  if ((v6 & 0xFF000000000000) == 0)
  {
    v5 = *(_QWORD *)(v1 + a1);
    v6 = *(_QWORD *)(v1 + a1 + 8);
  }
  v9 = (uint64_t *)(v1 + a1);
  v10 = *(_QWORD *)(v1 + a1);
  v11 = *(_QWORD *)(v1 + a1 + 8);
  sub_10000971C(v5, v6);
  sub_1000093EC(v10, v11);
  *v9 = v5;
  v9[1] = v6;
  v12 = v4[9];
  v13 = *(_QWORD *)(v3 + v12);
  v14 = *(_QWORD *)(v1 + v12);
  swift_bridgeObjectRetain(v13);
  v15 = swift_bridgeObjectRelease(v14);
  *(_QWORD *)(v1 + v12) = v13;
  v16 = v4[10];
  v17 = *(_QWORD *)(v3 + v16);
  if (!v17)
    v17 = *(_QWORD *)(v1 + v16);
  *(_QWORD *)(v1 + v16) = v17;
  v18 = v4[11];
  if ((*(_BYTE *)(v3 + v18) & 1) != 0)
    v19 = 1;
  else
    v19 = *(_BYTE *)(v1 + v18);
  *(_BYTE *)(v1 + v18) = v19;
  v20 = v4[12];
  v21 = *(_QWORD *)(v3 + v20);
  if (!v21)
    v21 = *(_QWORD *)(v1 + v20);
  *(_QWORD *)(v1 + v20) = v21;
  static Date.now.getter(v15);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v7 + 40))(v1 + v4[5], v2, *(_QWORD *)(v8 - 88));
}

void sub_10003232C(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  char v20;
  unint64_t v21;
  _BYTE *v22;
  id v23;
  id v24;
  uint64_t ObjectType;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  id v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  NSString v36;
  id v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSString v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  NSString v47;
  id v48;
  char *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  id v53;
  void *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(uint64_t, char *, uint64_t);
  void (*v58)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v59;
  void *v60;
  int *v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t (*v69)(uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  __int128 v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  char *v77;
  char *v78;
  uint64_t v79;
  id v80;
  __int128 v81;
  char v82[24];
  unint64_t v83;

  v5 = sub_10000215C((uint64_t *)&unk_10007B460);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v71 - v9;
  v11 = type metadata accessor for Date(0);
  v79 = *(_QWORD *)(v11 - 8);
  v12 = __chkstk_darwin(v11);
  v78 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v77 = (char *)&v71 - v15;
  v80 = a1;
  v16 = CKRecord.recordType.getter(v14);
  v18 = v17;
  swift_beginAccess(&qword_10007B440, v82, 0, 0);
  if (v16 == qword_10007B440 && v18 == off_10007B448)
  {
    swift_bridgeObjectRelease(v18);
  }
  else
  {
    v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, qword_10007B440, off_10007B448, 0);
    swift_bridgeObjectRelease(v18);
    if ((v20 & 1) == 0)
    {
      v21 = sub_100034B1C();
      swift_allocError(&type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError, v21, 0, 0);
      *v22 = 0;
      swift_willThrow();

      return;
    }
  }
  v72 = v8;
  v73 = v10;
  v74 = v11;
  v75 = v2;
  v23 = v80;
  v24 = objc_msgSend(v80, "encryptedValues");
  ObjectType = swift_getObjectType(v24);
  *a2 = sub_1000301E4();
  a2[1] = v26;
  CKRecordKeyValueSetting.subscript.getter(&v81, 0x7954656369766564, 0xEA00000000006570, ObjectType, &type metadata for Int, &protocol witness table for Int);
  if (BYTE8(v81))
    v27 = 0;
  else
    v27 = v81;
  v28 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  *(uint64_t *)((char *)a2 + v28[10]) = v27;
  v29 = objc_msgSend(v23, "recordID");
  v30 = objc_msgSend(v29, "recordName");

  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  v34 = (uint64_t *)((char *)a2 + v28[6]);
  *v34 = v31;
  v34[1] = v33;
  v76 = (id)ObjectType;
  CKRecordKeyValueSetting.subscript.getter(&v81, 0xD00000000000001BLL, 0x8000000100067460, ObjectType, &type metadata for Int, &protocol witness table for Int);
  v35 = v81;
  if (BYTE8(v81))
    v35 = 0;
  *(uint64_t *)((char *)a2 + v28[7]) = v35;
  v36 = String._bridgeToObjectiveC()();
  v37 = objc_msgSend(v24, "objectForKeyedSubscript:", v36);

  v38 = xmmword_1000614C0;
  if (v37)
  {
    v71 = xmmword_1000614C0;
    v83 = (unint64_t)v37;
    v39 = sub_10000215C(&qword_10007B510);
    if (!swift_dynamicCast(&v81, &v83, v39, &type metadata for Data, 6))
    {
      v41 = (uint64_t)v73;
      v40 = v74;
      v38 = v71;
      goto LABEL_18;
    }
    v38 = v81;
  }
  v41 = (uint64_t)v73;
  v40 = v74;
LABEL_18:
  *(_OWORD *)((char *)a2 + v28[8]) = v38;
  v42 = String._bridgeToObjectiveC()();
  v43 = objc_msgSend(v24, "objectForKeyedSubscript:", v42);

  if (v43
    && (*(_QWORD *)&v81 = v43,
        v44 = sub_10000215C(&qword_10007B510),
        v45 = sub_10000215C(&qword_10007B488),
        swift_dynamicCast(&v83, &v81, v44, v45, 6)))
  {
    v46 = (_QWORD *)v83;
  }
  else
  {
    v46 = _swiftEmptyArrayStorage;
  }
  *(uint64_t *)((char *)a2 + v28[9]) = (uint64_t)v46;
  v47 = String._bridgeToObjectiveC()();
  v48 = objc_msgSend(v24, "objectForKeyedSubscript:", v47);

  v49 = v77;
  if (v48
    && (*(_QWORD *)&v81 = v48,
        v50 = sub_10000215C(&qword_10007B510),
        (swift_dynamicCast(&v83, &v81, v50, &type metadata for Int, 6) & 1) != 0)
    && v83 <= 1)
  {
    *((_BYTE *)a2 + v28[11]) = v83;
  }
  else
  {
    *((_BYTE *)a2 + v28[11]) = 0;
  }
  CKRecordKeyValueSetting.subscript.getter(&v81, 0xD000000000000011, 0x80000001000674C0, v76, &type metadata for Int, &protocol witness table for Int);
  v51 = v80;
  v52 = v81;
  if (BYTE8(v81))
    v52 = 0;
  *(uint64_t *)((char *)a2 + v28[12]) = v52;
  v53 = objc_msgSend(v51, "modificationDate");
  if (!v53)
  {
    v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56);
    v58(v41, 1, 1, v40);
LABEL_33:
    v59 = objc_msgSend(v80, "creationDate");
    if (v59)
    {
      v60 = v59;
      v76 = v24;
      v61 = v28;
      v62 = a2;
      v63 = v49;
      v64 = v78;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v65 = v41;
      v66 = v79;
      v67 = (uint64_t)v72;
      v68 = v64;
      v49 = v63;
      a2 = v62;
      v28 = v61;
      v24 = v76;
      v78 = *(char **)(v79 + 32);
      ((void (*)(char *, char *, uint64_t))v78)(v72, v68, v40);
      v58(v67, 0, 1, v40);
      v69 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v66 + 48);
      v41 = v65;
      v70 = v69(v67, 1, v40);
      if ((_DWORD)v70 != 1)
      {
        swift_unknownObjectRelease(v24);

        ((void (*)(char *, uint64_t, uint64_t))v78)(v49, v67, v40);
LABEL_38:
        sub_10000BCBC(v41, (uint64_t *)&unk_10007B460);
        v57 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
        goto LABEL_39;
      }
    }
    else
    {
      v67 = (uint64_t)v72;
      v70 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v58)(v72, 1, 1, v40);
    }
    static Date.now.getter(v70);
    swift_unknownObjectRelease(v24);

    sub_10000BCBC(v67, (uint64_t *)&unk_10007B460);
    goto LABEL_38;
  }
  v54 = v53;
  v55 = v78;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v56 = v79;
  v57 = *(void (**)(uint64_t, char *, uint64_t))(v79 + 32);
  v57(v41, v55, v40);
  v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v56 + 56);
  v58(v41, 0, 1, v40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v41, 1, v40) == 1)
    goto LABEL_33;
  swift_unknownObjectRelease(v24);

  v57((uint64_t)v49, (char *)v41, v40);
LABEL_39:
  v57((uint64_t)a2 + v28[5], v49, v40);
}

uint64_t sub_100032A44(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  char v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  void *v28;
  void *v29;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValues");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v26, 0xD00000000000001BLL, 0x8000000100067460, ObjectType, &type metadata for Int, &protocol witness table for Int);
  v5 = v27;
  v6 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  v7 = *(_QWORD *)(v2 + v6[7]);
  if ((v5 & 1) != 0 || v26 != v7)
  {
    v28 = &type metadata for Int;
    v29 = &protocol witness table for Int;
    v26 = v7;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD00000000000001BLL, 0x8000000100067460, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v26, 0xD000000000000018, 0x8000000100067480, ObjectType, &type metadata for Data, &protocol witness table for Data);
  v8 = v26;
  v9 = v27;
  v10 = (uint64_t *)(v2 + v6[8]);
  v11 = *v10;
  v12 = v10[1];
  sub_10000971C(*v10, v12);
  if (v9 >> 60 == 15)
  {
    sub_1000093D8(v8, v9);
    sub_1000093D8(v11, v12);
LABEL_7:
    v28 = &type metadata for Data;
    v29 = &protocol witness table for Data;
    v26 = v11;
    v27 = v12;
    sub_10000971C(v11, v12);
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD000000000000018, 0x8000000100067480, ObjectType);
    goto LABEL_8;
  }
  sub_100009708(v8, v9);
  sub_100034D44(v8, v9);
  v14 = v13;
  sub_1000093EC(v11, v12);
  sub_1000093D8(v8, v9);
  sub_1000093D8(v8, v9);
  if ((v14 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v15 = sub_10000215C(&qword_10007B488);
  v16 = sub_100034B60();
  CKRecordKeyValueSetting.subscript.getter(&v26, 0xD00000000000001ALL, 0x80000001000674A0, ObjectType, v15, v16);
  v17 = v26;
  v18 = v6[9];
  v19 = *(_QWORD *)(v2 + v18);
  if (!v26
    || (swift_bridgeObjectRetain(*(_QWORD *)(v2 + v18)),
        swift_bridgeObjectRetain(v17),
        v21 = sub_100032F94(v20, v19),
        swift_bridgeObjectRelease_n(v17, 2),
        swift_bridgeObjectRelease(v19),
        (v21 & 1) == 0))
  {
    v28 = (void *)v15;
    v29 = (void *)v16;
    v26 = v19;
    swift_bridgeObjectRetain(v19);
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD00000000000001ALL, 0x80000001000674A0, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v26, 0x7954656369766564, 0xEA00000000006570, ObjectType, &type metadata for Int, &protocol witness table for Int);
  v22 = *(_QWORD *)(v2 + v6[10]);
  if ((v27 & 1) != 0 || v26 != v22)
  {
    v28 = &type metadata for Int;
    v29 = &protocol witness table for Int;
    v26 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0x7954656369766564, 0xEA00000000006570, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v26, 0x69687372656E776FLL, 0xED00006570795470, ObjectType, &type metadata for Int, &protocol witness table for Int);
  v23 = *(unsigned __int8 *)(v2 + v6[11]);
  if ((v27 & 1) != 0 || v26 != v23)
  {
    v28 = &type metadata for Int;
    v29 = &protocol witness table for Int;
    v26 = v23;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0x69687372656E776FLL, 0xED00006570795470, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v26, 0xD000000000000011, 0x80000001000674C0, ObjectType, &type metadata for Int, &protocol witness table for Int);
  v24 = *(_QWORD *)(v2 + v6[12]);
  if ((v27 & 1) != 0 || v26 != v24)
  {
    v28 = &type metadata for Int;
    v29 = &protocol witness table for Int;
    v26 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v26, 0xD000000000000011, 0x80000001000674C0, ObjectType);
  }
  return swift_unknownObjectRelease(v3);
}

void sub_100032E68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v2 = v1;
  v4 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  v5 = (uint64_t *)(v2 + v4[6]);
  v6 = *v5;
  v7 = v5[1];
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[7]));
  v8 = (uint64_t *)(v2 + v4[8]);
  v9 = *v8;
  v10 = v8[1];
  sub_10000971C(*v8, v10);
  Data.hash(into:)(a1, v9, v10);
  sub_1000093EC(v9, v10);
  v11 = *(_QWORD *)(v2 + v4[9]);
  Hasher._combine(_:)(*(_QWORD *)(v11 + 16));
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    swift_bridgeObjectRetain(v11);
    v13 = (unint64_t *)(v11 + 40);
    do
    {
      v14 = *(v13 - 1);
      v15 = *v13;
      sub_10000971C(v14, *v13);
      Data.hash(into:)(a1, v14, v15);
      sub_1000093EC(v14, v15);
      v13 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v11);
  }
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[10]));
  Hasher._combine(_:)(*(_QWORD *)(v2 + v4[12]));
}

uint64_t sub_100032F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_1000338A8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000338E8 + 4 * byte_1000614D4[a1]))(0x74654D64756F6C63, 0xED00006174616461);
}

unint64_t sub_1000338E8()
{
  return 0xD000000000000010;
}

uint64_t sub_100033904()
{
  return 0x696669746E656469;
}

unint64_t sub_100033924()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000339D4()
{
  unsigned __int8 *v0;

  return sub_1000338A8(*v0);
}

uint64_t sub_1000339DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100035DC0(a1, a2);
  *a3 = result;
  return result;
}

void sub_100033A00(_BYTE *a1@<X8>)
{
  *a1 = 9;
}

uint64_t sub_100033A0C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000349D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100033A34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000349D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100033A5C(_QWORD *a1)
{
  _OWORD *v1;
  uint64_t v2;
  _OWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v27;
  char v28;

  v3 = v1;
  v5 = sub_10000215C(&qword_10007B520);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_1000096E4(a1, v9);
  v11 = sub_1000349D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudPairedDeviceRecord.CodingKeys, &type metadata for CloudPairedDeviceRecord.CodingKeys, v11, v9, v10);
  v27 = *v3;
  v28 = 0;
  v12 = sub_1000350D4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, &type metadata for Data, v12);
  if (!v2)
  {
    v13 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
    v14 = (char *)v3 + v13[5];
    LOBYTE(v27) = 1;
    v15 = type metadata accessor for Date(0);
    v16 = sub_10000219C(&qword_10007B530, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v27, v5, v15, v16);
    v17 = (uint64_t *)((char *)v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v27) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v27, v5);
    v20 = *(_QWORD *)((char *)v3 + v13[7]);
    LOBYTE(v27) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v27, v5);
    v27 = *(_OWORD *)((char *)v3 + v13[8]);
    v28 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, &type metadata for Data, v12);
    *(_QWORD *)&v27 = *(_QWORD *)((char *)v3 + v13[9]);
    v28 = 5;
    v21 = sub_10000215C(&qword_10007B488);
    v22 = sub_100035118(&qword_10007B538, (void (*)(void))sub_1000350D4, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, v21, v22);
    v23 = *(_QWORD *)((char *)v3 + v13[10]);
    LOBYTE(v27) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v23, &v27, v5);
    LOBYTE(v27) = *((_BYTE *)v3 + v13[11]);
    v28 = 7;
    v24 = sub_100035180();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v5, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType, v24);
    v25 = *(_QWORD *)((char *)v3 + v13[12]);
    LOBYTE(v27) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v25, &v27, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_100033D78()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_100032E68((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100033DB4(uint64_t a1, uint64_t a2)
{
  return sub_100033DD4(a1, a2, &qword_10007B440, &off_10007B448);
}

uint64_t sub_100033DC4(uint64_t a1, uint64_t a2)
{
  return sub_100033DD4(a1, a2, &qword_10007B450, &off_10007B458);
}

uint64_t sub_100033DD4(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  _BYTE v8[24];

  swift_beginAccess(a3, v8, 0, 0);
  v6 = *a3;
  swift_bridgeObjectRetain(*a4);
  return v6;
}

uint64_t sub_100033E28()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10000971C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_100033E58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

void sub_100033E98(void *a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10003232C(a1, a2);
}

uint64_t sub_100033EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_10002FC10(a1, a4, a2, a5, a3);
}

uint64_t sub_100033EDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return sub_10002FCBC(a1, a2, a3, a4, a5);
}

Swift::Int sub_100033F08(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_100032E68((uint64_t)v2);
  return Hasher._finalize()();
}

unint64_t sub_100033F44()
{
  return sub_100030C44(50);
}

unint64_t sub_100033F4C()
{
  return sub_100030C44(20);
}

uint64_t sub_100033F54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  _BYTE v6[24];

  if (qword_10007E620 != -1)
    swift_once(&qword_10007E620, sub_100030B98);
  v2 = type metadata accessor for URL(0);
  v3 = sub_10000255C(v2, (uint64_t)qword_100080AF8);
  v4 = swift_beginAccess(v3, v6, 0, 0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2, v4);
}

uint64_t sub_100033FEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 24));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_100034020@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000318C4(a1, a2);
}

uint64_t sub_100034034(_QWORD *a1)
{
  return sub_100033A5C(a1);
}

uint64_t sub_100034048()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v1 = v0;
  v2 = sub_10000215C(&qword_10007B548);
  __chkstk_darwin(v2);
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for CloudPairedDeviceRecord(0);
  UUID.init(uuidString:)(*(_QWORD *)(v1 + *(int *)(v9 + 24)), *(_QWORD *)(v1 + *(int *)(v9 + 24) + 8));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_10000BCBC((uint64_t)v4, &qword_10007B548);
    return 0;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v4, v5);
    v11 = sub_100009774();
    sub_100034190(v11, v12);
    v15[0] = v13;
    v15[1] = v14;
    Data.append(_:)(*(_QWORD *)(v1 + *(int *)(v9 + 32)), *(_QWORD *)(v1 + *(int *)(v9 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    return v15[0];
  }
}

void sub_100034190(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1000341F4
     + *((int *)qword_100034428 + (sub_1000096E4(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }
}

uint64_t sub_100034204()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_10000971C(v1, v0);
  sub_1000347E8(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_1000093EC(v1, v0);
  v4 = v12;
  sub_100002D78(&v13);
  return v4;
}

void sub_100034438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_100034498(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10003467CLL);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

char *sub_1000346A0(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000215C(&qword_10007B628);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy(v14);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

uint64_t sub_1000347A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C((uint64_t *)&unk_10007B460);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *sub_1000347E8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1000098FC(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_100009A3C((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1000099BC((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_10003485C(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = HIBYTE(a3) & 0xF;
    if ((a3 & 0x2000000000000000) == 0)
      v5 = a2;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    v8 = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v9 & 1) != 0)
      v10 = v7;
    else
      v10 = v8;
    return String.subscript.getter(15, v10, a2, a3);
  }
  return result;
}

unint64_t sub_1000348E4(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    result = String.index(_:offsetBy:limitedBy:)(v7, -(uint64_t)result, 15, a2, a3);
    if ((v8 & 1) != 0)
      result = 15;
    if (4 * v5 >= result >> 14)
      return String.subscript.getter(result, v7, a2, a3);
  }
  __break(1u);
  return result;
}

unint64_t sub_10003498C()
{
  unint64_t result;

  result = qword_10007B470;
  if (!qword_10007B470)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Substring, &type metadata for Substring);
    atomic_store(result, (unint64_t *)&qword_10007B470);
  }
  return result;
}

unint64_t sub_1000349D0()
{
  unint64_t result;

  result = qword_10007E628[0];
  if (!qword_10007E628[0])
  {
    result = swift_getWitnessTable(&unk_100061968, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007E628);
  }
  return result;
}

unint64_t sub_100034A14()
{
  unint64_t result;

  result = qword_10007B480;
  if (!qword_10007B480)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007B480);
  }
  return result;
}

unint64_t sub_100034A58()
{
  unint64_t result;

  result = qword_10007B498;
  if (!qword_10007B498)
  {
    result = swift_getWitnessTable(&unk_100061668, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B498);
  }
  return result;
}

uint64_t sub_100034A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudPairedDeviceRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100034AE0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudPairedDeviceRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100034B1C()
{
  unint64_t result;

  result = qword_10007B4A8;
  if (!qword_10007B4A8)
  {
    result = swift_getWitnessTable(&unk_100061588, &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_10007B4A8);
  }
  return result;
}

unint64_t sub_100034B60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007B518;
  if (!qword_10007B518)
  {
    v1 = sub_100006DD0(&qword_10007B488);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007B518);
  }
  return result;
}

uint64_t sub_100034BBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_100034438((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100034C90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_100034438(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_100034D44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100034D90()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_100034DC4 + dword_100034F9C[v0 >> 62]))();
}

uint64_t sub_100034DD4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL sub_100034FBC(uint64_t *a1, uint64_t a2)
{
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  _BOOL8 result;
  char v14;

  sub_100034D44(*a1, a1[1]);
  if ((v4 & 1) == 0)
    return 0;
  v5 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  if ((static Date.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0)
    return 0;
  v6 = v5[6];
  v7 = *(uint64_t *)((char *)a1 + v6);
  v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  v9 = (_QWORD *)(a2 + v6);
  v10 = v9[1];
  v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0), result = 0, (v12 & 1) != 0))
  {
    if (*(uint64_t *)((char *)a1 + v5[7]) == *(_QWORD *)(a2 + v5[7]))
    {
      sub_100034D44(*(uint64_t *)((char *)a1 + v5[8]), *(uint64_t *)((char *)a1 + v5[8] + 8));
      if ((v14 & 1) != 0
        && (sub_100032F94(*(uint64_t *)((char *)a1 + v5[9]), *(_QWORD *)(a2 + v5[9])) & 1) != 0
        && *(uint64_t *)((char *)a1 + v5[10]) == *(_QWORD *)(a2 + v5[10])
        && *((unsigned __int8 *)a1 + v5[11]) == *(unsigned __int8 *)(a2 + v5[11]))
      {
        return *(uint64_t *)((char *)a1 + v5[12]) == *(_QWORD *)(a2 + v5[12]);
      }
    }
    return 0;
  }
  return result;
}

unint64_t sub_1000350D4()
{
  unint64_t result;

  result = qword_10007B528;
  if (!qword_10007B528)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007B528);
  }
  return result;
}

uint64_t sub_100035118(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_100006DD0(&qword_10007B488);
    a2();
    result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100035180()
{
  unint64_t result;

  result = qword_10007B540;
  if (!qword_10007B540)
  {
    result = swift_getWitnessTable(&unk_100061690, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B540);
  }
  return result;
}

unint64_t sub_1000351C8()
{
  unint64_t result;

  result = qword_10007B550;
  if (!qword_10007B550)
  {
    result = swift_getWitnessTable(&unk_100061520, &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError);
    atomic_store(result, (unint64_t *)&qword_10007B550);
  }
  return result;
}

unint64_t sub_100035210()
{
  unint64_t result;

  result = qword_10007B558;
  if (!qword_10007B558)
  {
    result = swift_getWitnessTable(&unk_1000615C8, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B558);
  }
  return result;
}

uint64_t sub_100035254(uint64_t a1)
{
  uint64_t result;

  result = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100035290()
{
  return sub_10000219C(&qword_10007B568, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_10006173C);
}

uint64_t sub_1000352BC(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10000219C(&qword_10007B570, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617D0);
  result = sub_10000219C(&qword_10007B578, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617F8);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t *sub_100035318(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v27);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10000971C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = a3[7];
    v15 = (uint64_t *)((char *)a1 + v13);
    v16 = (uint64_t *)((char *)a2 + v13);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    v18 = a3[8];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v17);
    sub_10000971C(v21, v22);
    *v19 = v21;
    v19[1] = v22;
    v23 = a3[9];
    v24 = a3[10];
    v25 = *(uint64_t *)((char *)a2 + v23);
    *(uint64_t *)((char *)a1 + v23) = v25;
    *(uint64_t *)((char *)a1 + v24) = *(uint64_t *)((char *)a2 + v24);
    v26 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    *(uint64_t *)((char *)a1 + v26) = *(uint64_t *)((char *)a2 + v26);
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_100035428(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_1000093EC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  sub_1000093EC(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9]));
}

uint64_t *sub_1000354A8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_10000971C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = a3[7];
  v14 = (uint64_t *)((char *)a1 + v12);
  v15 = (uint64_t *)((char *)a2 + v12);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  v17 = a3[8];
  v18 = (uint64_t *)((char *)a1 + v17);
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  swift_bridgeObjectRetain(v16);
  sub_10000971C(v20, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = a3[9];
  v23 = a3[10];
  v24 = *(uint64_t *)((char *)a2 + v22);
  *(uint64_t *)((char *)a1 + v22) = v24;
  *(uint64_t *)((char *)a1 + v23) = *(uint64_t *)((char *)a2 + v23);
  v25 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + v25) = *(uint64_t *)((char *)a2 + v25);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_10003558C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a2;
  v7 = a2[1];
  sub_10000971C(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_1000093EC(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[6];
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  v19 = a3[8];
  v20 = (uint64_t *)((char *)a1 + v19);
  v21 = (uint64_t *)((char *)a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_10000971C(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_1000093EC(v24, v25);
  v26 = a3[9];
  v27 = *(uint64_t *)((char *)a2 + v26);
  v28 = *(uint64_t *)((char *)a1 + v26);
  *(uint64_t *)((char *)a1 + v26) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_1000356AC(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
  v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_QWORD *)((char *)a1 + v11) = *(_QWORD *)((char *)a2 + v11);
  v12 = a3[11];
  *(_QWORD *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v12) = *((_BYTE *)a2 + v12);
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100035760(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1000093EC(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (uint64_t *)((char *)a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  v19 = *(uint64_t *)((char *)a1 + v18);
  v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)((char *)a2 + v18);
  sub_1000093EC(v19, v20);
  v21 = a3[9];
  v22 = *(uint64_t *)((char *)a1 + v21);
  *(uint64_t *)((char *)a1 + v21) = *(_QWORD *)((char *)a2 + v21);
  swift_bridgeObjectRelease(v22);
  v23 = a3[11];
  *(uint64_t *)((char *)a1 + a3[10]) = *(_QWORD *)((char *)a2 + a3[10]);
  *((_BYTE *)a1 + v23) = *((_BYTE *)a2 + v23);
  *(uint64_t *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_100035848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100035854);
}

uint64_t sub_100035854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000358D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000358E4);
}

uint64_t sub_1000358E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_100035964(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  v4[0] = &unk_100061820;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_100061838;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100061820;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = &unk_100061850;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 9, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CloudPairedDeviceRecordError()
{
  return &type metadata for CloudPairedDeviceRecord.CloudPairedDeviceRecordError;
}

uint64_t _s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14bluetoothuserd23CloudPairedDeviceRecordV19DeviceOwnershipTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100035B00 + 4 * byte_1000614E2[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100035B34 + 4 * byte_1000614DD[v4]))();
}

uint64_t sub_100035B34(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035B3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100035B44);
  return result;
}

uint64_t sub_100035B50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100035B58);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100035B5C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035B64(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100035B70(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.DeviceOwnershipType()
{
  return &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType;
}

uint64_t getEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CloudPairedDeviceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_100035C68 + 4 * byte_1000614EC[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100035C9C + 4 * byte_1000614E7[v4]))();
}

uint64_t sub_100035C9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035CA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100035CACLL);
  return result;
}

uint64_t sub_100035CB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100035CC0);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100035CC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100035CCC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairedDeviceRecord.CodingKeys()
{
  return &type metadata for CloudPairedDeviceRecord.CodingKeys;
}

unint64_t sub_100035CEC()
{
  unint64_t result;

  result = qword_10007EFC0[0];
  if (!qword_10007EFC0[0])
  {
    result = swift_getWitnessTable(&unk_100061940, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007EFC0);
  }
  return result;
}

unint64_t sub_100035D34()
{
  unint64_t result;

  result = qword_10007F0D0;
  if (!qword_10007F0D0)
  {
    result = swift_getWitnessTable(&unk_1000618B0, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10007F0D0);
  }
  return result;
}

unint64_t sub_100035D7C()
{
  unint64_t result;

  result = qword_10007F0D8[0];
  if (!qword_10007F0D8[0])
  {
    result = swift_getWitnessTable(&unk_1000618D8, &type metadata for CloudPairedDeviceRecord.CodingKeys);
    atomic_store(result, qword_10007F0D8);
  }
  return result;
}

uint64_t sub_100035DC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char v14;

  if (a1 == 0x74654D64756F6C63 && a2 == 0xED00006174616461)
  {
    v5 = 0xED00006174616461;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x74654D64756F6C63, 0xED00006174616461, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000010)
  {
    v7 = 0x8000000100067500;
    if (a2 == 0x8000000100067500)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100067500, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265)
  {
    v8 = 0xEA00000000007265;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469, 0xEA00000000007265, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100067460)
  {
    v9 = 0x8000000100067460;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100067460, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100067480)
  {
    v10 = 0x8000000100067480;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100067480, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0xD00000000000001ALL && a2 == 0x80000001000674A0)
  {
    v11 = 0x80000001000674A0;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001000674A0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x7954656369766564 && a2 == 0xEA00000000006570)
  {
    v12 = 0xEA00000000006570;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7954656369766564, 0xEA00000000006570, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x69687372656E776FLL && a2 == 0xED00006570795470)
  {
    v13 = 0xED00006570795470;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69687372656E776FLL, 0xED00006570795470, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x80000001000674C0)
  {
    swift_bridgeObjectRelease(0x80000001000674C0);
    return 8;
  }
  else
  {
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001000674C0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v14 & 1) != 0)
      return 8;
    else
      return 9;
  }
}

unint64_t sub_10003618C()
{
  unint64_t result;

  result = qword_10007B620;
  if (!qword_10007B620)
  {
    result = swift_getWitnessTable(&unk_100061630, &type metadata for CloudPairedDeviceRecord.DeviceOwnershipType);
    atomic_store(result, (unint64_t *)&qword_10007B620);
  }
  return result;
}

uint64_t sub_1000361D4()
{
  void *v0;
  Class isa;
  id v2;
  uint64_t v3;

  v0 = (void *)objc_opt_self(NSDateFormatter);
  isa = Date._bridgeToObjectiveC()().super.isa;
  v2 = objc_msgSend(v0, "localizedStringFromDate:dateStyle:timeStyle:", isa, 2, 2);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  return v3;
}

void *sub_100036254()
{
  return &unk_1000619E0;
}

void *sub_100036260()
{
  return &unk_1000619F0;
}

_QWORD *sub_10003626C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_100036278(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100036280@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_100036294@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_1000362A8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000362BC(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000362EC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_100036318@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_10003633C(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100036350(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

_QWORD *sub_100036364(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100036378@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10003638C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_1000363A0(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_1000363B4(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_1000363C8()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_1000363D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_1000363F0(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100036404@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_10003D5B0(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_100036440()
{
  return 1;
}

Swift::Int sub_100036448()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_100036488()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1000364AC(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_1000364E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for UserFileManager();
  v1 = swift_allocObject(v0, 32, 7);
  result = sub_10003C4D0();
  qword_100080B10 = v1;
  return result;
}

uint64_t sub_100036520()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 32, 7);
  sub_10003C4D0();
  return v1;
}

uint64_t *sub_100036554()
{
  if (qword_10007F160 != -1)
    swift_once(&qword_10007F160, sub_1000364E8);
  return &qword_100080B10;
}

void *sub_100036594()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(void **)(v0 + 16);
  }
  else
  {
    v2 = &_swiftEmptyDictionarySingleton;
    *(_QWORD *)(v0 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(0);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1000365D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*sub_1000365E8(void **a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100036594();
  return sub_10003661C;
}

uint64_t sub_10003661C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10003662C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  id v15;
  id v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSString *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t v36;

  v36 = a1;
  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_10000215C(&qword_10007B640);
  __chkstk_darwin(v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v14 = (char *)&v35 - v13;
  v15 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v16 = objc_msgSend(v15, "environment");

  v17 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v16, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v17 + 16))
  {
    sub_10002861C(0xD00000000000001BLL, 0x8000000100067590);
    v19 = v18;
    swift_bridgeObjectRelease(v17);
    if ((v19 & 1) != 0)
    {
      v20 = sub_1000306DC();
      v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v20, v1);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Under test appContainerURL to tmp", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      v25 = NSTemporaryDirectory();
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      URL.init(fileURLWithPath:isDirectory:)(v26, v28, 1);
      return swift_bridgeObjectRelease(v28);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v17);
  }
  v30 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v31 = 1;
  v32 = objc_msgSend(v30, "URLsForDirectory:inDomains:", 5, 1);

  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, v8);
  if (*(_QWORD *)(v33 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v9 + 16))(v7, v33 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)), v8);
    v31 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v31, 1, v8);
  swift_bridgeObjectRelease(v33);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_10000BCBC((uint64_t)v7, &qword_10007B640);
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000031, 0x80000001000675E0, "bluetoothuserd/UserFileManager.swift", 36, 2, 48, 0);
    __break(1u);
  }
  else
  {
    v34 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    v34(v14, v7, v8);
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100067420, 1);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
    return ((uint64_t (*)(uint64_t, char *, uint64_t))v34)(v36, v12, v8);
  }
  return result;
}

void *sub_100036A3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *result;
  void *v7;
  const char *string_ptr;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v13[2];

  v2 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10003662C(a1);
  result = (void *)xpc_copy_entitlement_for_self("com.apple.developer.icloud-container-environment");
  if (result)
  {
    v7 = result;
    string_ptr = xpc_string_get_string_ptr(result);
    if (string_ptr)
    {
      v9 = String.init(cString:)(string_ptr);
      v11 = v10;
      v13[0] = v9;
      v13[1] = v10;
      (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.inferFromPath(_:), v2);
      v12 = sub_100029E94();
      URL.append<A>(path:directoryHint:)(v13, v5, &type metadata for String, v12);
      swift_unknownObjectRelease(v7);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return (void *)swift_bridgeObjectRelease(v11);
    }
    else
    {
      return (void *)swift_unknownObjectRelease(v7);
    }
  }
  return result;
}

void sub_100036B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;

  v8 = objc_autoreleasePoolPush();
  sub_100036BC8(a1, a2, a3, a4);
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_100036BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PropertyListDecoder(0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = PropertyListDecoder.init()();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a3, a1, a2, a3, a4);
  if (!v4)
    return swift_release(v13);
  swift_release(v13);
  v14 = sub_100030858();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14, v30);
  swift_errorRetain(v4);
  v15 = swift_errorRetain(v4);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v28 = (uint64_t *)swift_slowAlloc(8, -1);
    v29 = swift_slowAlloc(32, -1);
    v33 = v29;
    *(_DWORD *)v18 = 136315394;
    v19 = _typeName(_:qualified:)(a3, 0);
    v21 = v20;
    v31 = sub_100002CA8(v19, v20, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v18 + 12) = 2112;
    swift_errorRetain(v4);
    v22 = _swift_stdlib_bridgeErrorToNSError(v4);
    v31 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v18 + 14, v18 + 22);
    v23 = v28;
    *v28 = v22;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error decoding %s: %@", (uint8_t *)v18, 0x16u);
    v24 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v23, 1, v24);
    swift_slowDealloc(v23, -1, -1);
    v25 = v29;
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  v27 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v30);
  return swift_willThrow(v27);
}

uint64_t sub_100036E94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7 = objc_autoreleasePoolPush();
  v8 = type metadata accessor for PropertyListEncoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = PropertyListEncoder.init()();
  v10 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a2, a4);
  swift_release(v9);
  objc_autoreleasePoolPop(v7);
  return v10;
}

uint64_t sub_100036F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[7];
  unsigned __int8 v5;

  v4[3] = a1;
  v4[4] = a2;
  v4[5] = a3;
  OS_dispatch_queue.sync<A>(execute:)(sub_10003C808, v4, &type metadata for Bool);
  return v5;
}

uint64_t sub_100036F98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  NSURL *v28;
  void *v29;
  void *v30;
  unsigned int v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  void (*v39)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  os_log_type_t v50;
  uint64_t (*v51)(uint64_t *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  os_log_t v58;
  _BYTE *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(os_log_t, uint64_t *, uint64_t);
  os_log_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(os_log_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _BYTE *v84;
  NSObject *v85;
  uint64_t v86;
  void (*v87)(uint64_t *, uint64_t);
  _BYTE v89[12];
  int v90;
  os_log_t v91;
  uint64_t *v92;
  _BYTE *v93;
  _BYTE *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;

  v7 = type metadata accessor for Logger(0);
  v95 = *(_QWORD *)(v7 - 8);
  v96 = v7;
  v8 = __chkstk_darwin(v7);
  v94 = &v89[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v93 = &v89[-v10];
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11);
  v91 = (os_log_t)&v89[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = __chkstk_darwin(v13);
  v92 = (uint64_t *)&v89[-v16];
  v17 = __chkstk_darwin(v15);
  v19 = (uint64_t *)&v89[-v18];
  __chkstk_darwin(v17);
  v21 = (uint64_t *)&v89[-v20];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 224))(a1, a2, a3);
  v22 = (void *)objc_opt_self(NSFileManager);
  v23 = objc_msgSend(v22, "defaultManager");
  URL.path.getter();
  v25 = v24;
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v25);
  LODWORD(v25) = objc_msgSend(v23, "fileExistsAtPath:", v26);

  if (!(_DWORD)v25)
  {
    (*(void (**)(uint64_t *, uint64_t))(v12 + 8))(v21, v11);
    return 1;
  }
  v27 = objc_msgSend(v22, "defaultManager");
  URL._bridgeToObjectiveC()(v28);
  v30 = v29;
  v99 = 0;
  v31 = objc_msgSend(v27, "removeItemAtURL:error:", v29, &v99);

  v32 = v99;
  if (v31)
  {
    v33 = v99;
    v34 = sub_100030858();
    v35 = v96;
    v36 = v93;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v95 + 16))(v93, v34, v96);
    v37 = v12;
    v38 = v36;
    v39 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v37 + 16);
    v40 = v11;
    v39(v19, v21, v11);
    v41 = v92;
    v42 = ((uint64_t (*)(uint64_t *, uint64_t, uint64_t))v39)(v92, a3, v40);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v94 = (_BYTE *)swift_slowAlloc(64, -1);
      v99 = v94;
      *(_DWORD *)v45 = 136315394;
      v46 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v91 = v43;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v40, v46);
      v49 = v48;
      v97 = sub_100002CA8(v47, v48, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      v50 = v44;
      v51 = *(uint64_t (**)(uint64_t *, uint64_t))(v37 + 8);
      v52 = v40;
      v53 = v51(v19, v40);
      *(_WORD *)(v45 + 12) = 2080;
      v54 = v92;
      v55 = URL.lastPathComponent.getter(v53);
      v57 = v56;
      v97 = sub_100002CA8(v55, v56, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v45 + 14, v45 + 22);
      swift_bridgeObjectRelease(v57);
      v51(v54, v52);
      v58 = v91;
      _os_log_impl((void *)&_mh_execute_header, v91, v50, "Deleted record %s from %s", (uint8_t *)v45, 0x16u);
      v59 = v94;
      swift_arrayDestroy(v94, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v93, v96);
      v51(v21, v52);
    }
    else
    {

      v87 = *(void (**)(uint64_t *, uint64_t))(v37 + 8);
      v87(v41, v40);
      v87(v19, v40);
      (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v38, v35);
      v87(v21, v40);
    }
    return 1;
  }
  v60 = v99;
  v61 = _convertNSErrorToError(_:)(v32);

  swift_willThrow(v62);
  v63 = sub_100030858();
  v64 = v94;
  v65 = v95;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v95 + 16))(v94, v63, v96);
  v66 = v12;
  v67 = *(void (**)(os_log_t, uint64_t *, uint64_t))(v12 + 16);
  v68 = v91;
  v69 = v11;
  v67(v91, v21, v11);
  swift_errorRetain(v61);
  v70 = swift_errorRetain(v61);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.error.getter();
  v73 = v72;
  if (os_log_type_enabled(v71, v72))
  {
    v74 = swift_slowAlloc(22, -1);
    v92 = (uint64_t *)swift_slowAlloc(8, -1);
    v93 = (_BYTE *)swift_slowAlloc(32, -1);
    v99 = v93;
    *(_DWORD *)v74 = 136315394;
    v90 = v73;
    v75 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v76 = dispatch thunk of CustomStringConvertible.description.getter(v69, v75);
    v78 = v77;
    v97 = sub_100002CA8(v76, v77, (uint64_t *)&v99);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v74 + 4, v74 + 12);
    swift_bridgeObjectRelease(v78);
    v79 = *(void (**)(os_log_t, uint64_t))(v66 + 8);
    v80 = v69;
    v79(v68, v69);
    *(_WORD *)(v74 + 12) = 2112;
    swift_errorRetain(v61);
    v81 = _swift_stdlib_bridgeErrorToNSError(v61);
    v97 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v74 + 14, v74 + 22);
    v82 = v92;
    *v92 = v81;
    swift_errorRelease(v61);
    swift_errorRelease(v61);
    _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v90, "Could not delete record %s due to %@", (uint8_t *)v74, 0x16u);
    v83 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v82, 1, v83);
    swift_slowDealloc(v82, -1, -1);
    v84 = v93;
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v74, -1, -1);

    swift_errorRelease(v61);
    (*(void (**)(_BYTE *, uint64_t))(v95 + 8))(v94, v96);
    v85 = v21;
    v86 = v80;
  }
  else
  {

    swift_errorRelease(v61);
    swift_errorRelease(v61);
    v79 = *(void (**)(os_log_t, uint64_t))(v66 + 8);
    v79(v68, v69);
    swift_errorRelease(v61);
    (*(void (**)(_BYTE *, uint64_t))(v65 + 8))(v64, v96);
    v85 = v21;
    v86 = v69;
  }
  v79(v85, v86);
  return 0;
}

uint64_t sub_1000376CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  dispatch_queue_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v28 = a2;
  v29 = a4;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v10 = __chkstk_darwin(v7);
  v11 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a3 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v10);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(dispatch_queue_t *)(v4 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a3);
  v15 = v7;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v28, v7);
  v16 = *(unsigned __int8 *)(v12 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = *(unsigned __int8 *)(v8 + 80);
  v19 = (v13 + v18 + v17) & ~v18;
  v20 = (char *)swift_allocObject(&unk_100073260, v19 + v9, v16 | v18 | 7);
  v21 = v29;
  *((_QWORD *)v20 + 2) = a3;
  *((_QWORD *)v20 + 3) = v21;
  v22 = v27;
  *((_QWORD *)v20 + 4) = v27;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&v20[v17], v14, a3);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v19], v11, v15);
  v23 = swift_allocObject(&unk_100073288, 32, 7);
  *(_QWORD *)(v23 + 16) = sub_10003C920;
  *(_QWORD *)(v23 + 24) = v20;
  aBlock[4] = sub_1000111B8;
  v32 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000D2B0;
  aBlock[3] = &unk_1000732A0;
  v24 = _Block_copy(aBlock);
  v25 = v32;
  swift_retain(v22);
  swift_retain(v23);
  swift_release(v25);
  dispatch_sync(v30, v24);
  _Block_release(v24);
  LOBYTE(v24) = swift_isEscapingClosureAtFileLocation(v23, "", 111, 114, 33, 1);
  swift_release(v20);
  result = swift_release(v23);
  if ((v24 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1000378F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD *, uint64_t, uint64_t (*)(uint64_t), uint64_t, __n128);
  __n128 v53;
  void *v54;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;

  v71 = a5;
  v61 = a2;
  v62 = a3;
  v64 = a1;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 - 8) + 64);
  v68 = *(_QWORD *)(a4 - 8);
  v69 = v7;
  __chkstk_darwin(a1);
  v67 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = (_QWORD *)type metadata accessor for URL.DirectoryHint(0);
  v9 = *(v60 - 1);
  __chkstk_darwin(v60);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for URL(0);
  v63 = *(_QWORD *)(v58 - 8);
  v12 = v63;
  v13 = __chkstk_darwin(v58);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = v14;
  v16 = __chkstk_darwin(v13);
  v18 = (char *)&v56 - v17;
  __chkstk_darwin(v16);
  v70 = (uint64_t)&v56 - v19;
  v20 = *(_QWORD *)(a5 + 8);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 32))(a4, v20);
  v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v20 + 24))(a4, v20);
  v23 = URL.path(percentEncoded:)(1);
  v24 = *(void (**)(char *, uint64_t))(v12 + 8);
  v25 = v58;
  v24(v15, v58);
  v65 = (void (*)(uint64_t, uint64_t))v24;
  v72 = v23;
  v26 = v60;
  (*(void (**)(char *, _QWORD, _QWORD *))(v9 + 104))(v11, enum case for URL.DirectoryHint.isDirectory(_:), v60);
  v27 = sub_100029E94();
  URL.appending<A>(path:directoryHint:)(&v72, v11, &type metadata for String, v27);
  (*(void (**)(char *, _QWORD *))(v9 + 8))(v11, v26);
  swift_bridgeObjectRelease(v72._object);
  v28 = v70;
  sub_100038290(v59, v22, v70);
  swift_bridgeObjectRelease(v22);
  v29 = v18;
  v57 = v18;
  v30 = ((uint64_t (*)(char *, uint64_t))v24)(v18, v25);
  v31 = URL.lastPathComponent.getter(v30);
  v33 = v32;
  v34 = v64;
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v64 + 240))(v31);
  swift_bridgeObjectRelease(v33);
  v35 = v61;
  v36 = (void *)(*(uint64_t (**)(uint64_t))(v71 + 56))(a4);
  v60 = objc_msgSend(v36, "recordID");

  v37 = swift_allocObject(&unk_100073450, 24, 7);
  swift_weakInit(v37 + 16, v34);
  v39 = v67;
  v38 = v68;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v35, a4);
  v40 = v63;
  v41 = v29;
  v42 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v41, v28, v25);
  v43 = *(unsigned __int8 *)(v38 + 80);
  v44 = v38;
  v45 = (v43 + 32) & ~v43;
  v46 = (v69 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = *(unsigned __int8 *)(v40 + 80);
  v48 = (v47 + v46 + 8) & ~v47;
  v49 = swift_allocObject(&unk_100073478, v48 + v66, v43 | v47 | 7);
  v50 = v71;
  *(_QWORD *)(v49 + 16) = a4;
  *(_QWORD *)(v49 + 24) = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v49 + v45, v39, a4);
  *(_QWORD *)(v49 + v46) = v37;
  (*(void (**)(uint64_t, char *, uint64_t))(v40 + 32))(v49 + v48, v57, v42);
  v51 = v62;
  v52 = *(void (**)(_QWORD *, uint64_t, uint64_t (*)(uint64_t), uint64_t, __n128))(*(_QWORD *)v62 + 880);
  v53 = swift_retain(v37);
  v54 = v60;
  v52(v60, 1, sub_10003D8E4, v49, v53);
  swift_release(v51);

  swift_release(v49);
  v65(v70, v42);
  return swift_release(v37);
}

uint64_t sub_100037CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[3];

  v11 = *(_QWORD *)(a5 - 8);
  v61 = a6;
  v62 = v11;
  v12 = __chkstk_darwin(a1);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v16 = (char *)&v55 - v15;
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  if (a1)
  {
    swift_errorRetain(a1);
    v23 = sub_100030858();
    v60 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v23, v17);
    (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v14, a2, a5);
    swift_errorRetain(a1);
    v24 = swift_errorRetain(a1);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v57 = (uint64_t *)swift_slowAlloc(8, -1);
      v58 = swift_slowAlloc(32, -1);
      v64[0] = v58;
      *(_DWORD *)v27 = 136315394;
      v59 = v17;
      v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 32))(a5);
      v30 = v29;
      v63 = sub_100002CA8(v28, v29, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v14, a5);
      *(_WORD *)(v27 + 12) = 2112;
      swift_errorRetain(a1);
      v31 = _swift_stdlib_bridgeErrorToNSError(a1);
      v63 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v27 + 14, v27 + 22);
      v32 = v57;
      *v57 = v31;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error removing record %s from cloud %@", (uint8_t *)v27, 0x16u);
      v33 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v58;
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      swift_errorRelease(a1);
      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v21, v59);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v14, a5);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

      return (*(uint64_t (**)(char *, uint64_t))(v60 + 8))(v21, v17);
    }
  }
  else
  {
    v58 = a4;
    v36 = a3 + 16;
    v37 = (char *)&v55 - v22;
    v38 = sub_100030858();
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v37, v38, v17);
    v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v62 + 16))(v16, a2, a5);
    v57 = (uint64_t *)v37;
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(12, -1);
      v60 = v18;
      v43 = (uint8_t *)v42;
      v44 = swift_slowAlloc(32, -1);
      v64[0] = v44;
      v59 = v17;
      *(_DWORD *)v43 = 136315138;
      v56 = v43 + 4;
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 32))(a5);
      v47 = v46;
      v63 = sub_100002CA8(v45, v46, v64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v56, v43 + 12);
      swift_bridgeObjectRelease(v47);
      v48 = v16;
      v49 = a5;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v48, a5);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Removed record %s from cloud", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      (*(void (**)(uint64_t *, uint64_t))(v60 + 8))(v57, v59);
    }
    else
    {
      v50 = v16;
      v49 = a5;
      (*(void (**)(char *, uint64_t))(v62 + 8))(v50, a5);

      (*(void (**)(uint64_t *, uint64_t))(v18 + 8))(v57, v17);
    }
    swift_beginAccess(v36, v64, 0, 0);
    result = swift_weakLoadStrong(v36);
    if (result)
    {
      v51 = result;
      v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v61 + 8) + 32))(v49);
      v54 = v53;
      (*(void (**)(uint64_t))(*(_QWORD *)v51 + 144))(v52);
      swift_release(v51);
      return swift_bridgeObjectRelease(v54);
    }
  }
  return result;
}

uint64_t sub_100038230(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[8];

  v5[3] = a1;
  v5[4] = a2;
  v5[5] = a3;
  v3 = type metadata accessor for URL(0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_10003C9A0, v5, v3);
}

uint64_t sub_100038290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *object;
  NSString v30;
  NSURL *v31;
  id v32;
  void *v33;
  void *v34;
  NSURL *v35;
  void *v36;
  void *v37;
  unsigned __int8 v38;
  void *v39;
  char *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  void *v65;
  void *v66;
  NSURL *v67;
  void *v68;
  void *v69;
  unsigned int v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  char *v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t (*v87)(char *, uint64_t);
  uint64_t (*v88)(char *, uint64_t);
  char *v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  void (*v95)(char *, uint64_t);
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;

  v6 = type metadata accessor for Logger(0);
  v96 = *(_QWORD *)(v6 - 8);
  v97 = v6;
  v7 = __chkstk_darwin(v6);
  v94 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v93 = (char *)&v90 - v9;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v92 = (char *)&v90 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v91 = (char *)&v90 - v15;
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v90 - v17;
  v19 = __chkstk_darwin(v16);
  v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  v23 = (char *)&v90 - v22;
  URL.appendingPathComponent(_:)(a1, a2);
  URL.appendingPathComponent(_:)(0x646574656C6544, 0xE700000000000000);
  URL.appendingPathComponent(_:)(a1, a2);
  v24 = *(void (**)(char *, uint64_t))(v11 + 8);
  v24(v18, v10);
  URL.appendingPathExtension(_:)(0x646574656C6564, 0xE700000000000000);
  v95 = v24;
  v24(v21, v10);
  sub_100011254(0, &qword_10007B7B0, NSFileManager_ptr);
  sub_100047A00();
  v26 = v25;
  sub_100047A6C(a3);
  swift_bridgeObjectRelease(v26);
  v27 = (void *)objc_opt_self(NSFileManager);
  v28 = objc_msgSend(v27, "defaultManager");
  object = URL.path(percentEncoded:)(1)._object;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  LODWORD(object) = objc_msgSend(v28, "fileExistsAtPath:", v30);

  v32 = objc_msgSend(v27, "defaultManager");
  if ((_DWORD)object)
  {
    URL._bridgeToObjectiveC()(v31);
    v34 = v33;
    URL._bridgeToObjectiveC()(v35);
    v37 = v36;
    v100 = 0;
    v38 = objc_msgSend(v32, "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", v34, v36, 0, 0, 0, &v100);

    v39 = v100;
    v40 = v23;
    if ((v38 & 1) == 0)
    {
LABEL_3:
      v41 = v39;
      v42 = _convertNSErrorToError(_:)(v39);

      swift_willThrow(v43);
      v44 = sub_100030858();
      v45 = v96;
      v46 = v97;
      v47 = v94;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v94, v44, v97);
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      v49 = v92;
      v48(v92, a3, v10);
      swift_errorRetain(v42);
      v50 = swift_errorRetain(v42);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v51, v52))
      {
        v53 = swift_slowAlloc(22, -1);
        v54 = (uint64_t *)swift_slowAlloc(8, -1);
        v93 = (char *)swift_slowAlloc(32, -1);
        v100 = v93;
        *(_DWORD *)v53 = 136315394;
        v55 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v56 = dispatch thunk of CustomStringConvertible.description.getter(v10, v55);
        v58 = v57;
        v98 = sub_100002CA8(v56, v57, (uint64_t *)&v100);
        v90 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease(v58);
        v59 = v49;
        v60 = (uint64_t (*)(char *, uint64_t))v95;
        v95(v59, v10);
        *(_WORD *)(v53 + 12) = 2112;
        swift_errorRetain(v42);
        v61 = _swift_stdlib_bridgeErrorToNSError(v42);
        v98 = v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v53 + 14, v53 + 22);
        *v54 = v61;
        swift_errorRelease(v42);
        swift_errorRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unable to tombstone record to %s due to %@", (uint8_t *)v53, 0x16u);
        v62 = sub_10000215C((uint64_t *)&unk_10007AA40);
        swift_arrayDestroy(v54, 1, v62);
        swift_slowDealloc(v54, -1, -1);
        v63 = v93;
        swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v63, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        swift_errorRelease(v42);
        (*(void (**)(char *, uint64_t))(v96 + 8))(v94, v97);
        return v60(v90, v10);
      }

      swift_errorRelease(v42);
      swift_errorRelease(v42);
      v88 = (uint64_t (*)(char *, uint64_t))v95;
      v95(v49, v10);
      swift_errorRelease(v42);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v47, v46);
      return v88(v40, v10);
    }
  }
  else
  {
    URL._bridgeToObjectiveC()(v31);
    v66 = v65;
    URL._bridgeToObjectiveC()(v67);
    v69 = v68;
    v100 = 0;
    v70 = objc_msgSend(v32, "moveItemAtURL:toURL:error:", v66, v68, &v100);

    v39 = v100;
    v40 = v23;
    if (!v70)
      goto LABEL_3;
  }
  v71 = v39;
  v72 = sub_100030858();
  v74 = v96;
  v73 = v97;
  v75 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v93, v72, v97);
  v76 = v91;
  v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v91, a3, v10);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = v76;
    v81 = (uint8_t *)swift_slowAlloc(12, -1);
    v82 = swift_slowAlloc(32, -1);
    v100 = (char *)v82;
    *(_DWORD *)v81 = 136315138;
    v90 = v40;
    v83 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v84 = dispatch thunk of CustomStringConvertible.description.getter(v10, v83);
    v86 = v85;
    v98 = sub_100002CA8(v84, v85, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v81 + 4, v81 + 12);
    swift_bridgeObjectRelease(v86);
    v87 = (uint64_t (*)(char *, uint64_t))v95;
    v95(v80, v10);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Tombstoned record to %s", v81, 0xCu);
    swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1, -1);
    swift_slowDealloc(v81, -1, -1);

    (*(void (**)(char *, uint64_t))(v96 + 8))(v75, v97);
    return v87(v90, v10);
  }

  v89 = v76;
  v88 = (uint64_t (*)(char *, uint64_t))v95;
  v95(v89, v10);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v73);
  return v88(v40, v10);
}

uint64_t sub_100038A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(char *, uint64_t);
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  id v75;
  id v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  char *v116;
  uint64_t v118;
  uint8_t *v119;
  char *v120;
  char *v121;
  __n128 v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  char *v127;
  uint64_t v128;
  void (*v129)(char *, uint64_t, uint64_t);
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  id v144;
  uint64_t v145;
  void (*v146)(char *, uint64_t);
  _OWORD v147[2];
  uint64_t v148[4];
  uint64_t v149;

  v142 = a3;
  v3 = a2;
  v5 = type metadata accessor for Optional(0, a2);
  v135 = *(_QWORD *)(v5 - 8);
  v136 = v5;
  v6 = __chkstk_darwin(v5);
  v141 = (char *)&v118 - v7;
  v140 = *(_QWORD *)(v3 - 8);
  v8 = __chkstk_darwin(v6);
  v134 = (char *)&v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v133 = (char *)&v118 - v10;
  v11 = sub_10000215C(&qword_10007B640);
  __chkstk_darwin(v11);
  v13 = (char *)&v118 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v143 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v118 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v20 = (char *)&v118 - v19;
  v21 = __chkstk_darwin(v18);
  v126 = (char *)&v118 - v22;
  v23 = __chkstk_darwin(v21);
  v25 = (char *)&v118 - v24;
  v26 = __chkstk_darwin(v23);
  v131 = (char *)&v118 - v27;
  __chkstk_darwin(v26);
  v127 = (char *)&v118 - v28;
  v137 = type metadata accessor for Logger(0);
  v146 = *(void (**)(char *, uint64_t))(v137 - 8);
  v29 = __chkstk_darwin(v137);
  v130 = (char *)&v118 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29);
  v33 = (char *)&v118 - v32;
  v34 = __chkstk_darwin(v31);
  v125 = (char *)&v118 - v35;
  __chkstk_darwin(v34);
  v139 = (char *)&v118 - v36;
  v149 = Array.init()(v3);
  v37 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v38 = a1;
  v39 = (void *)sub_100047FB4(a1, 0);

  v144 = v39;
  if (v39)
  {
    v40 = sub_100030858();
    v41 = (void (*)(char *, uint64_t, uint64_t))*((_QWORD *)v146 + 2);
    v128 = v40;
    v129 = v41;
    ((void (*)(char *))v41)(v139);
    v42 = v143;
    v43 = v38;
    v130 = *(char **)(v143 + 16);
    v44 = ((uint64_t (*)(char *, uint64_t, uint64_t))v130)(v127, v38, v14);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.default.getter();
    v122.n128_u64[0] = (unint64_t)v45;
    v47 = os_log_type_enabled(v45, v46);
    v121 = v33;
    v120 = v20;
    v123 = v3;
    v145 = v43;
    if (v47)
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v148[0] = v49;
      *(_DWORD *)v48 = 136315138;
      v119 = v48 + 4;
      v50 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v51 = v127;
      v52 = dispatch thunk of CustomStringConvertible.description.getter(v14, v50);
      v54 = v53;
      *(_QWORD *)&v147[0] = sub_100002CA8(v52, v53, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v119, v48 + 12);
      swift_bridgeObjectRelease(v54);
      v55 = *(void (**)(char *, uint64_t))(v42 + 8);
      v55(v51, v14);
      v56 = (void *)v122.n128_u64[0];
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v122.n128_u64[0], v46, "Enumerate: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      v57 = v49;
      v3 = v123;
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {
      v55 = *(void (**)(char *, uint64_t))(v42 + 8);
      v55(v127, v14);

    }
    v127 = (char *)*((_QWORD *)v146 + 1);
    v69 = ((__n128 (*)(char *, uint64_t))v127)(v139, v137);
    v70 = v132;
    v71 = v131;
    v146 = v55;
    v139 = (char *)&type metadata for Any + 8;
    v69.n128_u64[0] = 136315394;
    v122 = v69;
    v124 = v25;
    v138 = v13;
    while (1)
    {
      v75 = objc_msgSend(v144, "nextObject");
      if (v75)
      {
        v76 = v75;
        _bridgeAnyObjectToAny(_:)(v147, v75);
        swift_unknownObjectRelease(v76);
      }
      else
      {
        memset(v147, 0, sizeof(v147));
      }
      sub_10003C9CC((uint64_t)v147, (uint64_t)v148);
      if (!v148[3])
        break;
      v77 = swift_dynamicCast(v13, v148, v139, v14, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v13, v77 ^ 1u, 1, v14);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v13, 1, v14) == 1)
        goto LABEL_22;
      v78 = (*(uint64_t (**)(char *, char *, uint64_t))(v42 + 32))(v71, v13, v14);
      v79 = URL.deletingPathExtension()(v78);
      v80 = URL.lastPathComponent.getter(v79);
      v82 = v81;
      v83 = v146;
      v146(v25, v14);
      v84 = v71;
      v85 = v141;
      (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v70 + 192))(v80, v82, v145, v3, v142);
      v86 = v85;
      v87 = v140;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v140 + 48))(v86, 1, v3) == 1)
      {
        v88 = (*(uint64_t (**)(char *, uint64_t))(v135 + 8))(v86, v136);
        if ((URL.hasDirectoryPath.getter(v88) & 1) != 0)
        {
          v71 = v84;
          v146(v84, v14);
          swift_bridgeObjectRelease(v82);
          v42 = v143;
          v13 = v138;
        }
        else
        {
          v89 = v125;
          v129(v125, v128, v137);
          v90 = v126;
          ((void (*)(char *, uint64_t, uint64_t))v130)(v126, v145, v14);
          swift_bridgeObjectRetain(v82);
          v92 = Logger.logObject.getter(v91);
          v93 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v92, v93))
          {
            v94 = swift_slowAlloc(22, -1);
            v95 = swift_slowAlloc(64, -1);
            v148[0] = v95;
            *(_DWORD *)v94 = v122.n128_u32[0];
            swift_bridgeObjectRetain(v82);
            *(_QWORD *)(v94 + 4) = sub_100002CA8(v80, v82, v148);
            swift_bridgeObjectRelease_n(v82, 3);
            *(_WORD *)(v94 + 12) = 2080;
            v96 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
            v97 = dispatch thunk of CustomStringConvertible.description.getter(v14, v96);
            v99 = v98;
            *(_QWORD *)(v94 + 14) = sub_100002CA8(v97, v98, v148);
            swift_bridgeObjectRelease(v99);
            v100 = v89;
            v101 = v146;
            v146(v90, v14);
            _os_log_impl((void *)&_mh_execute_header, v92, v93, "Could not read item %s for records at %s", (uint8_t *)v94, 0x16u);
            swift_arrayDestroy(v95, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v95, -1, -1);
            v102 = v94;
            v3 = v123;
            swift_slowDealloc(v102, -1, -1);

          }
          else
          {

            v100 = v89;
            v101 = v146;
            v146(v90, v14);
            swift_bridgeObjectRelease_n(v82, 2);
          }
          ((void (*)(char *, uint64_t))v127)(v100, v137);
          v71 = v131;
          v101(v131, v14);
          v42 = v143;
          v70 = v132;
          v25 = v124;
          v13 = v138;
        }
      }
      else
      {
        swift_bridgeObjectRelease(v82);
        v72 = v133;
        (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v133, v86, v3);
        v73 = v134;
        (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v134, v72, v3);
        v74 = type metadata accessor for Array(0, v3);
        Array.append(_:)(v73, v74);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v72, v3);
        v83(v84, v14);
        v42 = v143;
        v71 = v84;
        v13 = v138;
      }
    }
    sub_10000BCBC((uint64_t)v148, &qword_10007BE80);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v42 + 56))(v13, 1, 1, v14);
LABEL_22:
    sub_10000BCBC((uint64_t)v13, &qword_10007B640);
    v103 = v121;
    v129(v121, v128, v137);
    v104 = v149;
    v105 = v120;
    ((void (*)(char *, uint64_t, uint64_t))v130)(v120, v145, v14);
    swift_bridgeObjectRetain(v104);
    v107 = Logger.logObject.getter(v106);
    v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = v3;
      v110 = swift_slowAlloc(22, -1);
      v111 = swift_slowAlloc(32, -1);
      v148[0] = v111;
      *(_DWORD *)v110 = 134218242;
      *(_QWORD *)&v147[0] = Array.count.getter(v104, v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v110 + 4, v110 + 12);
      swift_bridgeObjectRelease(v104);
      *(_WORD *)(v110 + 12) = 2080;
      v112 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v113 = dispatch thunk of CustomStringConvertible.description.getter(v14, v112);
      v115 = v114;
      *(_QWORD *)&v147[0] = sub_100002CA8(v113, v114, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v110 + 14, v110 + 22);
      swift_bridgeObjectRelease(v115);
      v146(v105, v14);
      _os_log_impl((void *)&_mh_execute_header, v107, v108, "Found %ld records at %s", (uint8_t *)v110, 0x16u);
      swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v111, -1, -1);
      swift_slowDealloc(v110, -1, -1);

      v116 = v121;
    }
    else
    {
      swift_bridgeObjectRelease(v104);
      v146(v105, v14);

      v116 = v103;
    }
    ((void (*)(char *, uint64_t))v127)(v116, v137);
    swift_beginAccess(&v149, v148, 0, 0);
  }
  else
  {
    v58 = sub_100030858();
    (*((void (**)(char *, uint64_t, uint64_t))v146 + 2))(v130, v58, v137);
    v59 = v143;
    v60 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v143 + 16))(v17, v38, v14);
    v61 = Logger.logObject.getter(v60);
    v62 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v61, v62))
    {
      v63 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = swift_slowAlloc(32, -1);
      v148[0] = v64;
      *(_DWORD *)v63 = 136315138;
      v65 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v14, v65);
      v68 = v67;
      *(_QWORD *)&v147[0] = sub_100002CA8(v66, v67, v148);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v147, (char *)v147 + 8, v63 + 4, v63 + 12);
      swift_bridgeObjectRelease(v68);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v14);
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Could not enumerate %s", v63, 0xCu);
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v63, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v14);
    }

    (*((void (**)(char *, uint64_t))v146 + 1))(v130, v137);
  }
  return v149;
}

uint64_t sub_100039760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v16;

  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 224))(a1, a2, a3);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(v14, a3, a4, a5);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_100039838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v8;
  uint64_t v9;
  _BYTE v10[16];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v8 = objc_autoreleasePoolPush();
  v11 = a3;
  v12 = a4;
  v13 = v4;
  v14 = a1;
  v9 = type metadata accessor for Optional(0, a3);
  OS_dispatch_queue.sync<A>(execute:)(sub_10003D7E4, v10, v9);
  objc_autoreleasePoolPop(v8);
}

uint64_t sub_1000398C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[5];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v31 = a4;
  v32 = a3;
  v30 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)v29 - v14;
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    v16 = Data.init(contentsOf:options:)(a2, 0);
    if (v4)
    {
      swift_errorRelease(v4);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1, 1, v32);
    }
    else
    {
      v29[4] = v13;
      v24 = v16;
      v25 = v17;
      v26 = v32;
      (*(void (**)(void))(*(_QWORD *)a1 + 128))();
      sub_1000093EC(v24, v25);
      v28 = v30;
      v27 = v31;
      (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v31, v8, v26);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v27, 0, 1, v26);
    }
  }
  else
  {
    v19 = sub_100030858();
    v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v15, v19, v9);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "record call failed because in device is in beforeFirstUnlock state", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v31, 1, 1, v32);
  }
}

uint64_t sub_100039CB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[8];

  v6[7] = a3;
  v6[2] = a4;
  v6[3] = a5;
  v6[5] = a1;
  v6[6] = a2;
  return OS_dispatch_queue.sync<A>(execute:)(sub_10003CA14, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100039D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  uint64_t result;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  Swift::String v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  NSURL *v75;
  void *v76;
  void *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t inited;
  char *v94;
  NSString *v95;
  NSString *v96;
  unint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  Class v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSString v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  void *v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t);
  uint64_t (*v113)(char *, uint64_t);
  void (*v114)(char *, uint64_t, uint64_t);
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  unint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(char *, uint64_t);
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  char *v160;
  void (*v161)(char *, _QWORD, void (*)(void *, char), char *, __n128);
  __n128 v162;
  void *v163;
  uint64_t (*v164)(char *, uint64_t);
  uint64_t v165;
  uint8_t *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t (*v169)(char *, uint64_t, uint64_t);
  uint64_t v170;
  void (*v171)(char *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  uint64_t v191;
  Class isa;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  __int128 v199;
  __int128 v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  __int128 v204;
  __int128 v205;
  uint64_t v206;
  Swift::String v207;
  uint64_t v208;
  uint64_t v209;
  char v210[48];
  char v211[24];

  v193 = a6;
  v181 = a4;
  v186 = a3;
  v194 = a1;
  v195 = a2;
  v180 = *(_QWORD *)(a5 - 8);
  v7 = __chkstk_darwin(a1);
  v179 = (char *)&v165 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = v8;
  __chkstk_darwin(v7);
  v178 = (char *)&v165 - v9;
  v10 = type metadata accessor for URLResourceValues(0);
  v182 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v188 = (char *)&v165 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v16 = (char *)&v165 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14);
  v177 = (char *)&v165 - v18;
  v19 = __chkstk_darwin(v17);
  v187 = (char *)&v165 - v20;
  __chkstk_darwin(v19);
  v189 = (char *)&v165 - v21;
  v22 = type metadata accessor for URL.DirectoryHint(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22);
  v25 = (char *)&v165 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for URL(0);
  v184 = *(_QWORD *)(v191 - 8);
  v26 = __chkstk_darwin(v191);
  v185 = (char *)&v165 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v26);
  v183 = (char *)&v165 - v29;
  v175 = v30;
  __chkstk_darwin(v28);
  v190 = (char *)&v165 - v31;
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    v173 = v12;
    v174 = (uint8_t *)v13;
    v172 = v10;
    v32 = v193;
    v33 = isa;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v194 + 136))(v195, a5, *(_QWORD *)(v193 + 8), *(_QWORD *)(v193 + 16));
    if (!v33)
    {
      v36 = result;
      v37 = v35;
      v170 = 0;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_1000093EC(v36, v37);
      v38 = v183;
      (*(void (**)(uint64_t, uint64_t))(v32 + 24))(a5, v32);
      v39 = URL.path(percentEncoded:)(1);
      v171 = *(void (**)(char *, uint64_t))(v184 + 8);
      v171(v38, v191);
      v207 = v39;
      (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, enum case for URL.DirectoryHint.isDirectory(_:), v22);
      v40 = sub_100029E94();
      v41 = (uint64_t)v190;
      URL.appending<A>(path:directoryHint:)(&v207, v25, &type metadata for String, v40);
      (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
      swift_bridgeObjectRelease(v207._object);
      sub_100011254(0, &qword_10007B7B0, NSFileManager_ptr);
      sub_100047A00();
      v43 = v42;
      sub_100047A6C(v41);
      swift_bridgeObjectRelease(v43);
      v44 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 32);
      v167 = a5;
      v45 = v44(a5, v32);
      v47 = v46;
      v48 = v185;
      (*(void (**)(uint64_t))(*(_QWORD *)v194 + 224))(v45);
      swift_bridgeObjectRelease(v47);
      v49 = sub_100030858();
      v51 = v173;
      v50 = v174;
      v52 = (uint64_t (*)(char *, uint64_t, uint64_t))*((_QWORD *)v174 + 2);
      v53 = v189;
      v168 = v49;
      v169 = v52;
      v54 = ((uint64_t (*)(char *))v52)(v189);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc(12, -1);
        v58 = swift_slowAlloc(32, -1);
        v207._countAndFlagsBits = v58;
        *(_DWORD *)v57 = 136315138;
        v166 = v57 + 4;
        swift_beginAccess(v48, &v202, 0, 0);
        v59 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v60 = dispatch thunk of CustomStringConvertible.description.getter(v191, v59);
        v62 = v61;
        *(_QWORD *)&v204 = sub_100002CA8(v60, v61, &v207._countAndFlagsBits);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v166, v57 + 12);
        swift_bridgeObjectRelease(v62);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Writing record to file: %s", v57, 0xCu);
        swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v58, -1, -1);
        swift_slowDealloc(v57, -1, -1);

        v63 = v189;
        v189 = (char *)*((_QWORD *)v174 + 1);
        v64 = ((uint64_t (*)(char *, uint64_t))v189)(v63, v51);
      }
      else
      {

        v189 = (char *)*((_QWORD *)v50 + 1);
        v64 = ((uint64_t (*)(char *, uint64_t))v189)(v53, v51);
      }
      v65 = v188;
      v66 = v51;
      v74 = v187;
      URLResourceValues.init()(v64);
      URLResourceValues.isExcludedFromBackup.setter(1);
      swift_beginAccess(v48, v211, 0, 0);
      URL._bridgeToObjectiveC()(v75);
      v77 = v76;
      v78 = -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v76, 1);

      v79 = v191;
      if (v78)
      {
        v80 = v169(v74, v168, v66);
        v81 = v74;
        v82 = Logger.logObject.getter(v80);
        v83 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v82, v83))
        {
          v84 = (uint8_t *)swift_slowAlloc(12, -1);
          v85 = swift_slowAlloc(32, -1);
          v207._countAndFlagsBits = v85;
          *(_DWORD *)v84 = 136315138;
          v174 = v84 + 4;
          v86 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v87 = dispatch thunk of CustomStringConvertible.description.getter(v79, v86);
          v89 = v88;
          *(_QWORD *)&v204 = sub_100002CA8(v87, v88, &v207._countAndFlagsBits);
          v66 = v173;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v174, v84 + 12);
          swift_bridgeObjectRelease(v89);
          _os_log_impl((void *)&_mh_execute_header, v82, v83, "Wrote record to file: %s", v84, 0xCu);
          swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
          v90 = v85;
          v65 = v188;
          swift_slowDealloc(v90, -1, -1);
          swift_slowDealloc(v84, -1, -1);

          v91 = v187;
        }
        else
        {

          v91 = v81;
        }
        ((void (*)(char *, uint64_t))v189)(v91, v66);
      }
      v92 = sub_10000215C(&qword_10007B7C8);
      inited = swift_initStackObject(v92, v210);
      *(_OWORD *)(inited + 16) = xmmword_1000606F0;
      v94 = v48;
      *(_QWORD *)(inited + 32) = NSFileProtectionKey;
      *(_QWORD *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v95 = NSFileProtectionKey;
      v96 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      v97 = sub_10003AB54(inited);
      v98 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
      sub_10003AC5C(v97);
      v100 = v99;
      swift_bridgeObjectRelease(v97);
      type metadata accessor for FileAttributeKey(0);
      sub_10000219C(&qword_10007B7D0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061FA0);
      v101 = Dictionary._bridgeToObjectiveC()().super.isa;
      v102 = swift_bridgeObjectRelease(v100);
      URL.path.getter(v102);
      v104 = v103;
      v105 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v104);
      v207._countAndFlagsBits = 0;
      LODWORD(v104) = objc_msgSend(v98, "setAttributes:ofItemAtPath:error:", v101, v105, &v207);

      v106 = (id)v207._countAndFlagsBits;
      if (!(_DWORD)v104)
      {
        v110 = v106;
        _convertNSErrorToError(_:)(v106);

        swift_willThrow(v111);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v172);
        v112 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v79);
        return v112(v94, v79);
      }
      swift_beginAccess(v94, &v207, 33, 0);
      v107 = v170;
      URL.setResourceValues(_:)(v65);
      v108 = v172;
      v109 = v94;
      if (v107)
      {
        swift_endAccess(&v207);
LABEL_20:

        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v108);
        v113 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v79);
        return v113(v109, v79);
      }
      swift_endAccess(&v207);
      if ((v181 & 2) == 0)
        goto LABEL_20;
      v170 = 0;
      v114 = *(void (**)(char *, uint64_t, uint64_t))(v180 + 16);
      v115 = v178;
      v116 = v167;
      v114(v178, v195, v167);
      v117 = sub_10000215C(&qword_10007B7D8);
      if ((swift_dynamicCast(&v204, v115, v116, v117, 6) & 1) != 0)
      {
        v118 = sub_10003D640(&v204, (uint64_t)&v207);
        v119 = URL.lastPathComponent.getter(v118);
        v121 = v120;
        v122 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v194 + 240))(v119);
        swift_bridgeObjectRelease(v121);
        v123 = v177;
        v169(v177, v168, v66);
        v187 = (char *)v122;
        v124 = swift_retain_n(v122, 2);
        v125 = v66;
        v126 = Logger.logObject.getter(v124);
        v127 = static os_log_type_t.default.getter();
        v128 = v127;
        if (os_log_type_enabled(v126, v127))
        {
          v129 = swift_slowAlloc(22, -1);
          v130 = swift_slowAlloc(64, -1);
          LODWORD(v181) = v128;
          v131 = v130;
          v203 = v130;
          *(_DWORD *)v129 = 136315394;
          v132 = URL.lastPathComponent.getter(v130);
          v134 = v133;
          *(_QWORD *)&v204 = sub_100002CA8(v132, v133, &v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v129 + 4, v129 + 12);
          v135 = swift_bridgeObjectRelease(v134);
          *(_WORD *)(v129 + 12) = 2080;
          v136 = v187;
          (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v187 + 256))(&v196, v135);
          v201 = v198;
          v199 = v196;
          v200 = v197;
          v204 = v196;
          v205 = v197;
          v206 = v198;
          v137 = sub_10003D78C();
          v138 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for CloudStorageCoordinatorConfiguration, v137);
          v140 = v139;
          sub_100029DB4((uint64_t)&v199);
          sub_100029DB4((uint64_t)&v200);
          sub_100029DDC(&v201);
          *(_QWORD *)&v204 = sub_100002CA8(v138, v140, &v203);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v204, (char *)&v204 + 8, v129 + 14, v129 + 22);
          swift_release_n(v136, 2);
          swift_bridgeObjectRelease(v140);
          _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v181, "Uploading record to cloud: %s for %s", (uint8_t *)v129, 0x16u);
          swift_arrayDestroy(v131, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v131, -1, -1);
          swift_slowDealloc(v129, -1, -1);

          v141 = v177;
          v142 = v173;
        }
        else
        {

          swift_release_n(v187, 2);
          v141 = v123;
          v142 = v125;
        }
        ((void (*)(char *, uint64_t))v189)(v141, v142);
        v145 = v208;
        v146 = v209;
        sub_1000096E4(&v207, v208);
        v189 = (char *)(*(uint64_t (**)(uint64_t, uint64_t))(v146 + 56))(v145, v146);
        v147 = v183;
        v148 = v184;
        (*(void (**)(char *, uint64_t, uint64_t))(v184 + 16))(v183, v186, v191);
        v149 = v167;
        v114(v179, v195, v167);
        v150 = *(unsigned __int8 *)(v148 + 80);
        v151 = (v150 + 40) & ~v150;
        v152 = v180;
        v153 = *(unsigned __int8 *)(v180 + 80);
        v154 = (v175 + v153 + v151) & ~v153;
        v155 = (char *)swift_allocObject(&unk_100073428, v154 + v176, v150 | v153 | 7);
        v156 = v193;
        v157 = v194;
        *((_QWORD *)v155 + 2) = v149;
        *((_QWORD *)v155 + 3) = v156;
        *((_QWORD *)v155 + 4) = v157;
        v158 = v147;
        v159 = v191;
        (*(void (**)(char *, char *, uint64_t))(v148 + 32))(&v155[v151], v158, v191);
        (*(void (**)(char *, char *, uint64_t))(v152 + 32))(&v155[v154], v179, v149);
        v160 = v187;
        v161 = *(void (**)(char *, _QWORD, void (*)(void *, char), char *, __n128))(*(_QWORD *)v187 + 864);
        v162 = swift_retain(v157);
        v163 = v189;
        v161(v189, 0, sub_10003D70C, v155, v162);
        swift_release(v160);

        swift_release(v155);
        (*(void (**)(char *, uint64_t))(v182 + 8))(v188, v172);
        v164 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v159);
        sub_100002D78(&v207);
        return v164(v185, v159);
      }
      else
      {
        v206 = 0;
        v205 = 0u;
        v204 = 0u;

        (*(void (**)(char *, uint64_t))(v182 + 8))(v65, v108);
        v143 = v191;
        v144 = (uint64_t (*)(char *, uint64_t))v171;
        v171(v190, v191);
        sub_10000BCBC((uint64_t)&v204, &qword_10007B7E0);
        return v144(v109, v143);
      }
    }
  }
  else
  {
    v67 = sub_100030858();
    v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v67, v12);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "store call failed because in device is in beforeFirstUnlock state", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
    v72 = sub_10003D5E8();
    v73 = swift_allocError(&type metadata for UserFileManager.UserFileManagerError, v72, 0, 0);
    return swift_willThrow(v73);
  }
  return result;
}

unint64_t sub_10003AB54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  void *v7;
  id v8;
  id v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000215C(&qword_10007B7F8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 40);
  while (1)
  {
    v7 = *v6;
    v8 = *(v6 - 1);
    v9 = v7;
    result = sub_10003CB18((uint64_t)v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = 8 * result;
    *(_QWORD *)(v4[6] + v12) = v8;
    *(_QWORD *)(v4[7] + v12) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v6 += 2;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

void sub_10003AC5C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  int64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  _OWORD v38[4];
  _OWORD v39[2];
  _OWORD v40[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000215C(&qword_10007B7F0);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = &_swiftEmptyDictionarySingleton;
  }
  v35 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v34 = (unint64_t)(63 - v4) >> 6;
  v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v36 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v36 << 6);
      goto LABEL_28;
    }
    v11 = v36 + 1;
    if (__OFADD__(v36, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v11 >= v34)
      goto LABEL_37;
    v12 = *(_QWORD *)(v35 + 8 * v11);
    v13 = v36 + 1;
    if (!v12)
    {
      v13 = v36 + 2;
      if (v36 + 2 >= v34)
        goto LABEL_37;
      v12 = *(_QWORD *)(v35 + 8 * v13);
      if (!v12)
      {
        v13 = v36 + 3;
        if (v36 + 3 >= v34)
          goto LABEL_37;
        v12 = *(_QWORD *)(v35 + 8 * v13);
        if (!v12)
        {
          v13 = v36 + 4;
          if (v36 + 4 >= v34)
            goto LABEL_37;
          v12 = *(_QWORD *)(v35 + 8 * v13);
          if (!v12)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v13 << 6);
    v36 = v13;
LABEL_28:
    v16 = *(void **)(*(_QWORD *)(a1 + 56) + 8 * v10);
    *(_QWORD *)&v40[0] = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8 * v10);
    v15 = *(void **)&v40[0];
    *(_QWORD *)&v39[0] = v16;
    type metadata accessor for FileProtectionType(0);
    v18 = v17;
    v19 = v15;
    v20 = v16;
    swift_dynamicCast((char *)v40 + 8, v39, v18, (char *)&type metadata for Any + 8, 7);
    v21 = *(_QWORD *)&v40[0];
    sub_100006C4C((_OWORD *)((char *)v40 + 8), v38);
    sub_100006C4C(v38, v40);
    sub_100006C4C(v40, v39);
    v22 = v3[5];
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;
    Hasher.init(_seed:)(&v37, v22);
    String.hash(into:)(&v37, v23, v25);
    v26 = Hasher._finalize()();
    swift_bridgeObjectRelease(v25);
    v27 = -1 << *((_BYTE *)v3 + 32);
    v28 = v26 & ~v27;
    v29 = v28 >> 6;
    if (((-1 << v28) & ~*(_QWORD *)&v7[8 * (v28 >> 6)]) != 0)
    {
      v8 = __clz(__rbit64((-1 << v28) & ~*(_QWORD *)&v7[8 * (v28 >> 6)])) | v28 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v30 = 0;
      v31 = (unint64_t)(63 - v27) >> 6;
      do
      {
        if (++v29 == v31 && (v30 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v32 = v29 == v31;
        if (v29 == v31)
          v29 = 0;
        v30 |= v32;
        v33 = *(_QWORD *)&v7[8 * v29];
      }
      while (v33 == -1);
      v8 = __clz(__rbit64(~v33)) + (v29 << 6);
    }
    *(_QWORD *)&v7[(v8 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v8;
    *(_QWORD *)(v3[6] + 8 * v8) = v21;
    sub_100006C4C(v39, (_OWORD *)(v3[7] + 32 * v8));
    ++v3[2];
  }
  v14 = v36 + 5;
  if (v36 + 5 >= v34)
  {
LABEL_37:
    swift_release(v3);
    sub_10002E290(a1);
    return;
  }
  v12 = *(_QWORD *)(v35 + 8 * v14);
  if (v12)
  {
    v13 = v36 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v13 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v13 >= v34)
      goto LABEL_37;
    v12 = *(_QWORD *)(v35 + 8 * v13);
    ++v14;
    if (v12)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

void sub_10003AFFC(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  void *v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint8_t *v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  uint64_t v55;
  id v56;
  uint64_t *v57;
  uint64_t v58;
  void (*v59)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v60;
  void *v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t *v76;

  v70 = a5;
  v71 = a6;
  v74 = a1;
  v72 = *(_QWORD *)(a6 - 8);
  __chkstk_darwin(a1);
  v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CloudPairedDeviceRecord(0);
  __chkstk_darwin(v13);
  v15 = (uint64_t *)((char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for Logger(0);
  v73 = *(_QWORD *)(v16 - 8);
  v17 = __chkstk_darwin(v16);
  v18 = __chkstk_darwin(v17);
  v20 = (char *)&v62 - v19;
  __chkstk_darwin(v18);
  v23 = (char *)&v62 - v22;
  if ((a2 & 1) != 0)
  {
    v39 = v74;
    swift_errorRetain(v74);
    v40 = sub_100030858();
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v20, v40, v16);
    v41 = v71;
    (*(void (**)(char *, uint64_t *, uint64_t))(v72 + 16))(v12, v70, v71);
    swift_errorRetain(v39);
    v42 = swift_errorRetain(v39);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v68 = (uint64_t *)swift_slowAlloc(8, -1);
      v70 = (uint64_t *)swift_slowAlloc(32, -1);
      v76 = v70;
      *(_DWORD *)v45 = 136315394;
      v69 = v16;
      v46 = v74;
      v47 = (*(uint64_t (**)(uint64_t, uint64_t))(a7 + 32))(v41, a7);
      v49 = v48;
      v75 = sub_100002CA8(v47, v48, (uint64_t *)&v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 4, v45 + 12);
      swift_bridgeObjectRelease(v49);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v12, v41);
      *(_WORD *)(v45 + 12) = 2112;
      swift_errorRetain(v46);
      v50 = _swift_stdlib_bridgeErrorToNSError(v46);
      v75 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v45 + 14, v45 + 22);
      v51 = v68;
      *v68 = v50;
      sub_10002EAB4(v46, 1);
      sub_10002EAB4(v46, 1);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Error updating cloud with record %s: %@", (uint8_t *)v45, 0x16u);
      v52 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v51, 1, v52);
      swift_slowDealloc(v51, -1, -1);
      v53 = v70;
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v45, -1, -1);

      sub_10002EAB4(v46, 1);
      (*(void (**)(char *, uint64_t))(v73 + 8))(v20, v69);
    }
    else
    {
      v61 = v74;
      sub_10002EAB4(v74, 1);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v12, v41);
      sub_10002EAB4(v61, 1);
      sub_10002EAB4(v61, 1);

      (*(void (**)(char *, uint64_t))(v73 + 8))(v20, v16);
    }
  }
  else
  {
    v67 = v13;
    v68 = v21;
    v70 = v15;
    v71 = a3;
    v72 = a4;
    v24 = v74;
    v25 = sub_100030858();
    v26 = *(void (**)(_QWORD))(v73 + 16);
    v65 = v25;
    v66 = v26;
    v26(v23);
    v27 = v24;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    v30 = os_log_type_enabled(v28, v29);
    v69 = v16;
    if (v30)
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v64 = swift_slowAlloc(32, -1);
      v76 = (uint64_t *)v64;
      *(_DWORD *)v31 = 136315138;
      v63 = v31 + 4;
      v32 = objc_msgSend(v27, "recordID");
      v33 = objc_msgSend(v32, "recordName");

      v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v36 = v35;

      v37 = v74;
      v75 = sub_100002CA8(v34, v36, (uint64_t *)&v76);
      v16 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v63, v31 + 12);
      swift_bridgeObjectRelease(v36);
      sub_10002EAB4(v37, 0);
      sub_10002EAB4(v37, 0);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Updating cloud record file: %s", v31, 0xCu);
      v38 = v64;
      swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      v54 = v74;
      sub_10002EAB4(v74, 0);
      sub_10002EAB4(v54, 0);
    }

    (*(void (**)(char *, uint64_t))(v73 + 8))(v23, v16);
    v55 = v67;
    v56 = v27;
    v57 = v70;
    sub_10003232C(v56, v70);
    v58 = v72;
    v59 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v71 + 208);
    v60 = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
    v59(v57, v58, 1, v55, v60);
    sub_100034AE0((uint64_t)v57);
    notify_post("com.apple.bluetoothuser.cloudChanged");
    sub_10002EAB4(v74, 0);
  }
}

uint64_t sub_10003B8B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t result;
  _QWORD aBlock[5];
  uint64_t v15;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3);
  v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = (v7 + 16) & ~v7;
  v9 = swift_allocObject(&unk_1000732D8, v8 + v5, v7 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  v10 = swift_allocObject(&unk_100073300, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_10003CA94;
  *(_QWORD *)(v10 + 24) = v9;
  aBlock[4] = sub_10002FAE8;
  v15 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10000D2B0;
  aBlock[3] = &unk_100073318;
  v11 = _Block_copy(aBlock);
  v12 = v15;
  swift_retain(v10);
  swift_release(v12);
  dispatch_sync(v6, v11);
  _Block_release(v11);
  LOBYTE(v6) = swift_isEscapingClosureAtFileLocation(v10, "", 111, 251, 26, 1);
  swift_release(v9);
  result = swift_release(v10);
  if ((v6 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10003BA48(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  id v36;
  void *v37;
  __int128 v38;
  char *v39;
  id v40;
  id v41;
  int v42;
  id v43;
  NSURL *v44;
  void *v45;
  void *v46;
  unsigned int v47;
  id v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  __int128 v76;
  __int128 v77;
  char *v78;
  uint8_t *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  char *v82;
  char *v83;
  NSObject *v84;
  void (*v85)(char *, uint64_t);
  void (*v86)(char *);
  uint64_t v87;
  char *v88;
  _QWORD *v89;
  id v90;
  _OWORD v91[2];
  id v92[4];

  v2 = sub_10000215C(&qword_10007B640);
  __chkstk_darwin(v2);
  v4 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v81 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v76 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v76 - v12;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD **)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v88 = (char *)&v76 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v82 = (char *)&v76 - v19;
  __chkstk_darwin(v18);
  v21 = (char *)&v76 - v20;
  v22 = sub_100030858();
  v89 = v15;
  v86 = (void (*)(char *))v15[2];
  v87 = v22;
  v86(v21);
  v23 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v90 = a1;
  v80 = v23;
  v24 = ((uint64_t (*)(char *, void *, uint64_t))v23)(v13, a1, v5);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v84 = v25;
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v83 = (char *)swift_slowAlloc(32, -1);
    v92[0] = v83;
    v79 = v27;
    *(_DWORD *)v27 = 136315138;
    v85 = (void (*)(char *, uint64_t))(v27 + 4);
    v28 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v5, v28);
    v31 = v30;
    *(_QWORD *)&v91[0] = sub_100002CA8(v29, v30, (uint64_t *)v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v91, (char *)v91 + 8, v85, v27 + 12);
    swift_bridgeObjectRelease(v31);
    v85 = *(void (**)(char *, uint64_t))(v6 + 8);
    v85(v13, v5);
    v32 = v84;
    v33 = v26;
    v34 = v79;
    _os_log_impl((void *)&_mh_execute_header, v84, v33, "Obliterating all user's local storage from %s", v79, 0xCu);
    v35 = v83;
    swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

  }
  else
  {
    v85 = *(void (**)(char *, uint64_t))(v6 + 8);
    v85(v13, v5);

  }
  v84 = v89[1];
  ((void (*)(char *, uint64_t))v84)(v21, v14);
  v89 = (_QWORD *)objc_opt_self(NSFileManager);
  v36 = objc_msgSend(v89, "defaultManager");
  v37 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(v90, 0, 0, 0, 0);

  v39 = v82;
  v90 = v37;
  if (v37)
  {
    v79 = 0;
    v83 = (char *)&type metadata for Any + 8;
    *(_QWORD *)&v38 = 136315138;
    v77 = v38;
    *(_QWORD *)&v38 = 138412290;
    v76 = v38;
    v78 = v4;
    while (1)
    {
      v40 = objc_msgSend(v90, "nextObject", (_QWORD)v76, *((_QWORD *)&v76 + 1));
      if (v40)
      {
        v41 = v40;
        _bridgeAnyObjectToAny(_:)(v91, v40);
        swift_unknownObjectRelease(v41);
      }
      else
      {
        memset(v91, 0, sizeof(v91));
      }
      sub_10003C9CC((uint64_t)v91, (uint64_t)v92);
      if (!v92[3])
        break;
      v42 = swift_dynamicCast(v4, v92, v83, v5, 6);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v4, v42 ^ 1u, 1, v5);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        goto LABEL_21;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v11, v4, v5);
      v43 = objc_msgSend(v89, "defaultManager");
      URL._bridgeToObjectiveC()(v44);
      v46 = v45;
      v92[0] = 0;
      v47 = objc_msgSend(v43, "removeItemAtURL:error:", v45, v92);

      v48 = v92[0];
      if (v47)
      {
        ((void (*)(char *, uint64_t, uint64_t))v86)(v39, v87, v14);
        v49 = v81;
        v80(v81, v11, v5);
        v50 = Logger.logObject.getter(v48);
        v51 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v50, v51))
        {
          v52 = v11;
          v53 = v6;
          v54 = v14;
          v55 = v49;
          v56 = swift_slowAlloc(12, -1);
          v57 = (void *)swift_slowAlloc(32, -1);
          v92[0] = v57;
          *(_DWORD *)v56 = v77;
          v58 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
          v59 = dispatch thunk of CustomStringConvertible.description.getter(v5, v58);
          v61 = v60;
          *(_QWORD *)(v56 + 4) = sub_100002CA8(v59, v60, (uint64_t *)v92);
          swift_bridgeObjectRelease(v61);
          v62 = v55;
          v14 = v54;
          v6 = v53;
          v11 = v52;
          v4 = v78;
          v63 = v85;
          v85(v62, v5);
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Deleted iCloud user file: %s", (uint8_t *)v56, 0xCu);
          swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
          v64 = v57;
          v39 = v82;
          swift_slowDealloc(v64, -1, -1);
          swift_slowDealloc(v56, -1, -1);

        }
        else
        {

          v63 = v85;
          v85(v49, v5);
        }
        ((void (*)(char *, uint64_t))v84)(v39, v14);
        v63(v11, v5);
      }
      else
      {
        v65 = v92[0];
        v66 = _convertNSErrorToError(_:)(v48);

        swift_willThrow(v67);
        ((void (*)(char *, uint64_t, uint64_t))v86)(v88, v87, v14);
        swift_errorRetain(v66);
        v68 = swift_errorRetain(v66);
        v69 = Logger.logObject.getter(v68);
        v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          v71 = swift_slowAlloc(12, -1);
          v72 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v71 = v76;
          swift_errorRetain(v66);
          v73 = _swift_stdlib_bridgeErrorToNSError(v66);
          *(_QWORD *)(v71 + 4) = v73;
          *v72 = v73;
          swift_errorRelease(v66);
          swift_errorRelease(v66);
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Could not delete iCloud user file: %@", (uint8_t *)v71, 0xCu);
          v74 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v72, 1, v74);
          v75 = v72;
          v39 = v82;
          swift_slowDealloc(v75, -1, -1);
          swift_slowDealloc(v71, -1, -1);

        }
        else
        {

          swift_errorRelease(v66);
          swift_errorRelease(v66);
        }
        swift_errorRelease(v66);
        ((void (*)(char *, uint64_t))v84)(v88, v14);
        v85(v11, v5);
        v79 = 0;
      }
    }
    sub_10000BCBC((uint64_t)v92, &qword_10007BE80);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
LABEL_21:

    sub_10000BCBC((uint64_t)v4, &qword_10007B640);
  }
}

void sub_10003C278(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = objc_autoreleasePoolPush();
  URL.appendingPathComponent(_:)(a1, a2);
  objc_autoreleasePoolPop(v4);
}

uint64_t sub_10003C2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD v4[8];

  v4[3] = a1;
  v4[4] = a2;
  v2 = type metadata accessor for CloudStorageCoordinator(0);
  OS_dispatch_queue.sync<A>(execute:)(sub_10003CAD0, v4, v2);
  return v4[7];
}

uint64_t sub_10003C32C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v6)(__n128);
  __n128 v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, __n128);
  __n128 v13;
  void (*v14)(_BYTE *, _QWORD);
  uint64_t *v15;
  uint64_t *v16;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[32];
  __int128 v22[2];

  v3 = v2;
  v6 = *(uint64_t (**)(__n128))(*(_QWORD *)v2 + 104);
  v7 = swift_bridgeObjectRetain(a2);
  v8 = v6(v7);
  if (*(_QWORD *)(v8 + 16) && (v9 = sub_10002861C(a1, a2), (v10 & 1) != 0))
  {
    v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
    swift_retain(v11);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v8);
    swift_bridgeObjectRetain(a2);
    sub_100011878(a1, a2, 0xD00000000000001CLL, 0x8000000100067540, (uint64_t)&off_100073220, v22);
    type metadata accessor for CloudStorageCoordinator(0);
    v11 = sub_1000120F8(v22);
    v12 = *(uint64_t (**)(_BYTE *, __n128))(*(_QWORD *)v3 + 120);
    swift_bridgeObjectRetain(a2);
    v13 = swift_retain(v11);
    v14 = (void (*)(_BYTE *, _QWORD))v12(v21, v13);
    v16 = v15;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v20 = *v16;
    *v16 = 0x8000000000000000;
    sub_10003D020(v11, a1, a2, isUniquelyReferenced_nonNull_native);
    v18 = *v16;
    *v16 = v20;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v18);
    v14(v21, 0);
  }
  return v11;
}

uint64_t sub_10003C4A4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t sub_10003C4D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + 16) = 0;
  Transaction.capture()();
  sub_100011254(0, (unint64_t *)&qword_10007A900, OS_dispatch_queue_ptr);
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10000215C((uint64_t *)&unk_10007A910);
  v15 = sub_10003C698();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x8000000100067560, v7, v4, v11, 0);
  return v1;
}

unint64_t sub_10003C698()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007ADF0;
  if (!qword_10007ADF0)
  {
    v1 = sub_100006DD0((uint64_t *)&unk_10007A910);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007ADF0);
  }
  return result;
}

uint64_t sub_10003C700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000219C(&qword_10007B7D0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061FA0);
  v3 = sub_10000219C(&qword_10007B850, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061D9C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10003C784(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_10000219C(&qword_10007B840, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100061F10);
  v3 = sub_10000219C(&qword_10007B848, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100061EB0);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10003C808@<X0>(_BYTE *a1@<X8>)
{
  uint64_t *v1;
  uint64_t result;

  result = sub_100036F98(v1[3], v1[4], v1[5]);
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for UserFileManager()
{
  return objc_opt_self(_TtC14bluetoothuserd15UserFileManager);
}

uint64_t sub_10003C86C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10003C920()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0[2];
  v2 = v0[3];
  v3 = *(_QWORD *)(v1 - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_1000378F8(v0[4], (uint64_t)v0 + v4, (uint64_t)v0 + ((v4 + v5 + v6) & ~v6), v1, v2);
}

uint64_t sub_10003C990()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003C9A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100038290(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_10003C9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007BE80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003CA14()
{
  uint64_t *v0;

  return sub_100039D04(v0[4], v0[5], v0[6], v0[7], v0[2], v0[3]);
}

uint64_t sub_10003CA34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10003CA94()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  sub_10003BA48((void *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_10003CAC0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003CAD0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v1 + 16) + 240))(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
  *a1 = result;
  return result;
}

unint64_t sub_10003CB18(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v3 = *(_QWORD *)(v1 + 40);
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v6 = v5;
  Hasher.init(_seed:)(v9, v3);
  String.hash(into:)(v9, v4, v6);
  v7 = Hasher._finalize()();
  swift_bridgeObjectRelease(v6);
  return sub_10003CB98(a1, v7);
}

unint64_t sub_10003CB98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

void sub_10003CD0C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000215C(&qword_10007B7B8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_10003D020(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10002861C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10003D3FC();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      swift_release(*(_QWORD *)(v19 + 8 * v12));
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v22 = (uint64_t *)(v18[6] + 16 * v12);
    *v22 = a2;
    v22[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v23 = v18[2];
    v24 = __OFADD__(v23, 1);
    v25 = v23 + 1;
    if (!v24)
    {
      v18[2] = v25;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10003CD0C(v15, a4 & 1);
  v20 = sub_10002861C(a2, a3);
  if ((v16 & 1) == (v21 & 1))
  {
    v12 = v20;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

unint64_t sub_10003D180()
{
  unint64_t result;

  result = qword_10007B648;
  if (!qword_10007B648)
  {
    result = swift_getWitnessTable(&unk_100061AF8, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B648);
  }
  return result;
}

unint64_t sub_10003D1C8()
{
  unint64_t result;

  result = qword_10007B650;
  if (!qword_10007B650)
  {
    result = swift_getWitnessTable(&unk_100061A30, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B650);
  }
  return result;
}

unint64_t sub_10003D210()
{
  unint64_t result;

  result = qword_10007B658;
  if (!qword_10007B658)
  {
    result = swift_getWitnessTable(&unk_100061B30, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B658);
  }
  return result;
}

unint64_t sub_10003D258()
{
  unint64_t result;

  result = qword_10007B660;
  if (!qword_10007B660)
  {
    result = swift_getWitnessTable(&unk_100061B58, &type metadata for UserFileManager.UserFileManagerFileType);
    atomic_store(result, (unint64_t *)&qword_10007B660);
  }
  return result;
}

unint64_t sub_10003D2A0()
{
  unint64_t result;

  result = qword_10007B668;
  if (!qword_10007B668)
  {
    result = swift_getWitnessTable(&unk_100061B88, &type metadata for UserFileManager.UserFileManagerError);
    atomic_store(result, (unint64_t *)&qword_10007B668);
  }
  return result;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerFileType()
{
  return &type metadata for UserFileManager.UserFileManagerFileType;
}

uint64_t getEnumTagSinglePayload for UserFileManager.UserFileManagerError(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for UserFileManager.UserFileManagerError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003D388 + 4 * asc_1000619D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003D3A8 + 4 * byte_1000619D5[v4]))();
}

_BYTE *sub_10003D388(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003D3A8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003D3B0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003D3B8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003D3C0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003D3C8(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10003D3D4()
{
  return 0;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerError()
{
  return &type metadata for UserFileManager.UserFileManagerError;
}

ValueMetadata *type metadata accessor for UserFileManager.UserFileManagerCloudConstants()
{
  return &type metadata for UserFileManager.UserFileManagerCloudConstants;
}

void sub_10003D3FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000215C(&qword_10007B7B8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_10003D5B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

unint64_t sub_10003D5E8()
{
  unint64_t result;

  result = qword_10007B7C0;
  if (!qword_10007B7C0)
  {
    result = swift_getWitnessTable(&unk_100061BF0, &type metadata for UserFileManager.UserFileManagerError);
    atomic_store(result, (unint64_t *)&qword_10007B7C0);
  }
  return result;
}

void type metadata accessor for FileAttributeKey(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B808, (uint64_t)&unk_1000734C8);
}

uint64_t sub_10003D640(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_10003D658()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 40) & ~v4;
  v6 = *(_QWORD *)(v1 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + *(_QWORD *)(v3 + 64) + v7) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v4 | v7 | 7;
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v5, v2);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v10);
}

void sub_10003D70C(void *a1, char a2)
{
  _QWORD *v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = a2 & 1;
  v5 = v2[2];
  v6 = v2[3];
  v7 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v5 - 8) + 80);
  sub_10003AFFC(a1, v4, v2[4], (uint64_t)v2 + v8, (_QWORD *)((char *)v2 + ((v8 + *(_QWORD *)(v7 + 64) + v9) & ~v9)), v5, v6);
}

unint64_t sub_10003D78C()
{
  unint64_t result;

  result = qword_10007B7E8;
  if (!qword_10007B7E8)
  {
    result = swift_getWitnessTable(&unk_100060D6C, &type metadata for CloudStorageCoordinatorConfiguration);
    atomic_store(result, (unint64_t *)&qword_10007B7E8);
  }
  return result;
}

void type metadata accessor for FileProtectionType(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007B800, (uint64_t)&unk_1000734A0);
}

uint64_t sub_10003D7E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000398C8(v1[4], v1[5], v1[2], a1);
}

uint64_t sub_10003D800()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003D824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8 + 8) & ~v8;
  v10 = v9 + *(_QWORD *)(v7 + 64);
  v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_10003D8E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v3 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for URL(0) - 8) + 80);
  return sub_100037CCC(a1, v1 + v6, *(_QWORD *)(v1 + v7), v1 + ((v7 + v8 + 8) & ~v8), v3, v4);
}

uint64_t sub_10003D968()
{
  return sub_10000219C(&qword_10007B810, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061D60);
}

uint64_t sub_10003D994()
{
  return sub_10000219C(&qword_10007B818, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061D34);
}

uint64_t sub_10003D9C0()
{
  return sub_10000219C(&qword_10007B820, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100061E74);
}

uint64_t sub_10003D9EC()
{
  return sub_10000219C(&qword_10007B828, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100061E48);
}

uint64_t sub_10003DA18()
{
  return sub_10000219C(&qword_10007B830, (uint64_t (*)(uint64_t))type metadata accessor for FileProtectionType, (uint64_t)&unk_100061EE4);
}

uint64_t sub_10003DA44()
{
  return sub_10000219C(&qword_10007B838, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061DD0);
}

int main(int argc, const char **argv, const char **envp)
{
  void *v3;
  id v4;

  v3 = objc_autoreleasePoolPush();
  sub_10003DAE8();
  objc_autoreleasePoolPop(v3);
  v4 = objc_msgSend((id)objc_opt_self(NSRunLoop), "currentRunLoop");
  objc_msgSend(v4, "run");

  return 0;
}

uint64_t sub_10003DAE8()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void (*v18)(__n128);
  __n128 v19;
  uint64_t v21;
  _QWORD *v22;

  v0 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v0);
  v2 = (char *)&v21 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for BluetoothUserDaemon(0);
  sub_100058A88();
  sub_100004FBC();
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter(v10);
  v22 = _swiftEmptyArrayStorage;
  v11 = sub_10003DD04();
  v12 = sub_10000215C((uint64_t *)&unk_10007A910);
  v13 = sub_10003C698();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v12, v13, v0, v11);
  v14 = (id)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000013, 0x80000001000676E0, v5, v2, v9, 0);
  v15 = sub_1000592BC((uint64_t)v14);
  (*(void (**)(void))(*(_QWORD *)v15 + 400))();
  v16 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  v17 = *v16;
  v18 = *(void (**)(__n128))(*(_QWORD *)*v16 + 136);
  v19 = swift_retain(*v16);
  v18(v19);

  swift_release(v15);
  return swift_release(v17);
}

unint64_t sub_10003DD04()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007ADE0;
  if (!qword_10007ADE0)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10007ADE0);
  }
  return result;
}

uint64_t Data.init(hexString:)(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  uint64_t result;
  uint64_t v6;
  size_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;
  _QWORD *v22;

  if ((((uint64_t (*)(void))String.count.getter)() & 1) != 0)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  v4 = String.uppercased()();
  v22 = sub_100004B40(v4._countAndFlagsBits, (unint64_t)v4._object);
  swift_bridgeObjectRelease(v4._object);
  result = String.count.getter(a1, a2);
  if (result >= 0)
    v6 = result;
  else
    v6 = result + 1;
  if (result >= -1)
  {
    if (result <= 1)
    {
      v8 = _swiftEmptyArrayStorage;
    }
    else
    {
      v7 = v6 >> 1;
      v8 = (_QWORD *)static Array._allocateBufferUninitialized(minimumCapacity:)(v6 >> 1, &type metadata for UInt8);
      v8[2] = v7;
      bzero(v8 + 4, v7);
    }
    v9 = String.count.getter(a1, a2);
    result = swift_bridgeObjectRelease(a2);
    if (v9 >= 1)
    {
      v10 = 0;
      v11 = v22 + 4;
      v12 = v22[2];
      while (1)
      {
        v13 = __OFADD__(v10, 2) ? 0x7FFFFFFFFFFFFFFFLL : v10 + 2;
        if (v10 >= v12)
          break;
        if (v10 + 1 >= v12)
          goto LABEL_36;
        v14 = *((unsigned __int8 *)v11 + v10);
        v15 = *((unsigned __int8 *)v11 + v10 + 1);
        if (!isxdigit(v14) || (result = isxdigit(v15), !(_DWORD)result))
        {
          swift_bridgeObjectRelease(v8);
          swift_release(v22);
          return 0;
        }
        if (v14 >= 0x41)
          v16 = 55;
        else
          v16 = 48;
        v17 = v14 - v16;
        if ((v17 & 0xFFFFFF00) != 0)
          goto LABEL_37;
        if (v15 >= 0x41)
          v18 = 55;
        else
          v18 = 48;
        v19 = v15 - v18;
        if ((v19 & 0xFFFFFF00) != 0)
          goto LABEL_38;
        if (v17 > 0xFu)
          goto LABEL_39;
        v20 = 16 * (v17 & 0xF) + v19;
        if ((v20 & 0x100) != 0)
          goto LABEL_40;
        if (v10 >> 1 >= v8[2])
          goto LABEL_41;
        *((_BYTE *)v8 + (v10 >> 1) + 32) = v20;
        v10 = v13;
        if (v13 >= v9)
          goto LABEL_31;
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
LABEL_31:
    swift_release(v22);
    v21 = sub_10003F3B4((uint64_t)v8);
    swift_bridgeObjectRelease(v8);
    return v21;
  }
LABEL_42:
  __break(1u);
  return result;
}

void Data.hexString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Data.Iterator(0);
  __chkstk_darwin(v3);
  sub_10003EF34(0xD000000000000010, 0x8000000100067700);
  __asm { BR              X9 }
}

uint64_t sub_10003E000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  Swift::UInt8_optional v9;
  Swift::UInt8 value;
  uint64_t v11;
  unint64_t v12;
  __int16 v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __int16 v17;
  unint64_t v18;
  Swift::UInt8_optional v19;
  uint64_t v20;

  if (BYTE6(v3) + 0x4000000000000000 < 0)
    goto LABEL_20;
  v7 = sub_10003E5AC(0, (2 * BYTE6(v3)) & ~((2 * BYTE6(v3)) >> 63), 0, (char *)_swiftEmptyArrayStorage);
  if (v5)
  {
    if (v5 == 1)
      v8 = (int)v4;
    else
      v8 = *(_QWORD *)(v4 + 16);
    sub_10000971C(v4, v3);
  }
  else
  {
    v8 = 0;
  }
  ((void (*)(uint64_t, unint64_t, uint64_t))Data.Iterator.init(_:at:))(v4, v3, v8);
  v9 = Data.Iterator.next()();
  if ((*(_WORD *)&v9 & 0x100) == 0)
  {
    value = v9.value;
    v11 = v2 + 32;
    while (1)
    {
      v12 = value >> 4;
      if (v12 >= *(_QWORD *)(v2 + 16))
        break;
      v13 = *(_WORD *)(v11 + 2 * v12);
      v15 = *((_QWORD *)v7 + 2);
      v14 = *((_QWORD *)v7 + 3);
      v16 = v15 + 1;
      if (v15 >= v14 >> 1)
        v7 = sub_10003E5AC((char *)(v14 > 1), v15 + 1, 1, v7);
      *((_QWORD *)v7 + 2) = v16;
      *(_WORD *)&v7[2 * v15 + 32] = v13;
      if ((unint64_t)(value & 0xF) >= *(_QWORD *)(v2 + 16))
        goto LABEL_19;
      v17 = *(_WORD *)(v11 + 2 * (value & 0xF));
      v18 = *((_QWORD *)v7 + 3);
      if ((uint64_t)(v15 + 2) > (uint64_t)(v18 >> 1))
        v7 = sub_10003E5AC((char *)(v18 > 1), v15 + 2, 1, v7);
      *((_QWORD *)v7 + 2) = v15 + 2;
      *(_WORD *)&v7[2 * v16 + 32] = v17;
      v19 = Data.Iterator.next()();
      value = v19.value;
      if ((*(_WORD *)&v19 & 0x100) != 0)
        goto LABEL_17;
    }
    __break(1u);
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    JUMPOUT(0x10003E1E0);
  }
LABEL_17:
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v1, v0);
  swift_release(v2);
  v20 = ((uint64_t (*)(char *, _QWORD))String.init(utf16CodeUnits:count:))(v7 + 32, *((_QWORD *)v7 + 2));
  swift_bridgeObjectRelease(v7);
  return v20;
}

void Data.intValue.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  unsigned __int8 v23;
  _QWORD v24[3];

  Data.hexString.getter(a1, a2);
  v4 = v3;
  v5 = HIBYTE(v3) & 0xF;
  v6 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v4 & 0x2000000000000000) != 0)
    v7 = v5;
  else
    v7 = v2 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    if ((v4 & 0x1000000000000000) != 0)
    {
      sub_10003E6A0(v2, v4, 16);
LABEL_46:
      swift_bridgeObjectRelease(v4);
      return;
    }
    if ((v4 & 0x2000000000000000) == 0)
    {
      if ((v2 & 0x1000000000000000) != 0)
        v8 = (unsigned __int8 *)((v4 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v2, v4);
      sub_10003E784(v8, v6, 16);
      goto LABEL_46;
    }
    v24[0] = v2;
    v24[1] = v4 & 0xFFFFFFFFFFFFFFLL;
    if (v2 == 43)
    {
      if (v5)
      {
        v15 = v5 - 1;
        if (v15)
        {
          v16 = 0;
          v17 = (unsigned __int8 *)v24 + 1;
          do
          {
            v18 = *v17;
            v19 = v18 - 48;
            if ((v18 - 48) >= 0xA)
            {
              if ((v18 - 65) < 6)
              {
                v19 = v18 - 55;
              }
              else
              {
                if ((v18 - 97) > 5)
                  goto LABEL_46;
                v19 = v18 - 87;
              }
            }
            if ((unint64_t)(v16 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFADD__(16 * v16, v19);
            v16 = 16 * v16 + v19;
            if (v14)
              break;
            ++v17;
            --v15;
          }
          while (v15);
        }
        goto LABEL_46;
      }
    }
    else
    {
      if (v2 != 45)
      {
        if (v5)
        {
          v20 = 0;
          v21 = (unsigned __int8 *)v24;
          do
          {
            v22 = *v21;
            v23 = v22 - 48;
            if ((v22 - 48) >= 0xA)
            {
              if ((v22 - 65) < 6)
              {
                v23 = v22 - 55;
              }
              else
              {
                if ((v22 - 97) > 5)
                  goto LABEL_46;
                v23 = v22 - 87;
              }
            }
            if ((unint64_t)(v20 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFADD__(16 * v20, v23);
            v20 = 16 * v20 + v23;
            if (v14)
              break;
            ++v21;
            --v5;
          }
          while (v5);
        }
        goto LABEL_46;
      }
      if (v5)
      {
        v9 = v5 - 1;
        if (v9)
        {
          v10 = 0;
          v11 = (unsigned __int8 *)v24 + 1;
          do
          {
            v12 = *v11;
            v13 = v12 - 48;
            if ((v12 - 48) >= 0xA)
            {
              if ((v12 - 65) < 6)
              {
                v13 = v12 - 55;
              }
              else
              {
                if ((v12 - 97) > 5)
                  goto LABEL_46;
                v13 = v12 - 87;
              }
            }
            if ((unint64_t)(v10 - 0x800000000000000) >> 60 != 15)
              break;
            v14 = __OFSUB__(16 * v10, v13);
            v10 = 16 * v10 - v13;
            if (v14)
              break;
            ++v11;
            --v9;
          }
          while (v9);
        }
        goto LABEL_46;
      }
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(v4);
  }
}

uint64_t Data.write(to:excludeFromBackup:options:)(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[12];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v25 = a2;
  v11 = type metadata accessor for URL(0);
  v26 = *(_QWORD *)(v11 - 8);
  v27 = v11;
  __chkstk_darwin();
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for URLResourceValues(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = &v24[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a4 & 1) != 0)
    v18 = 1073741825;
  else
    v18 = a3 | 1;
  v19 = v28;
  result = Data.write(to:options:)(a1, v18, a5, a6);
  if (!v19)
  {
    URLResourceValues.init()(result);
    URLResourceValues.isExcludedFromBackup.setter(v25 & 1);
    v21 = v26;
    v22 = a1;
    v23 = v27;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16))(v13, v22, v27);
    URL.setResourceValues(_:)(v17);
    (*(void (**)(_BYTE *, uint64_t))(v21 + 8))(v13, v23);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v15 + 8))(v17, v14);
  }
  return result;
}

char *sub_10003E5AC(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000215C(&qword_10007B858);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 2 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

unsigned __int8 *sub_10003E6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_10003EA00(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_10003E784(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_10003E784(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  uint64_t v26;
  unsigned int v27;
  char v28;
  uint64_t v29;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  v13 = 0;
                  if (v11 < 0x61 || v11 >= v8)
                    return (unsigned __int8 *)v13;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v14 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v14 - (v11 + v12);
              if (__OFSUB__(v14, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v23 = a3 + 48;
      v24 = a3 + 55;
      v25 = a3 + 87;
      if (a3 > 10)
      {
        v23 = 58;
      }
      else
      {
        v25 = 97;
        v24 = 65;
      }
      if (result)
      {
        v26 = 0;
        do
        {
          v27 = *result;
          if (v27 < 0x30 || v27 >= v23)
          {
            if (v27 < 0x41 || v27 >= v24)
            {
              v13 = 0;
              if (v27 < 0x61 || v27 >= v25)
                return (unsigned __int8 *)v13;
              v28 = -87;
            }
            else
            {
              v28 = -55;
            }
          }
          else
          {
            v28 = -48;
          }
          v29 = v26 * a3;
          if ((unsigned __int128)(v26 * (__int128)a3) >> 64 != (v26 * a3) >> 63)
            return 0;
          v26 = v29 + (v27 + v28);
          if (__OFADD__(v29, (v27 + v28)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v29 + (v27 + v28));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v15 = a2 - 1;
  if (a2 == 1)
    return 0;
  v16 = a3 + 48;
  v17 = a3 + 55;
  v18 = a3 + 87;
  if (a3 > 10)
  {
    v16 = 58;
  }
  else
  {
    v18 = 97;
    v17 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v19 = result + 1;
  do
  {
    v20 = *v19;
    if (v20 < 0x30 || v20 >= v16)
    {
      if (v20 < 0x41 || v20 >= v17)
      {
        v13 = 0;
        if (v20 < 0x61 || v20 >= v18)
          return (unsigned __int8 *)v13;
        v21 = -87;
      }
      else
      {
        v21 = -55;
      }
    }
    else
    {
      v21 = -48;
    }
    v22 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v22 + (v20 + v21);
    if (__OFADD__(v22, (v20 + v21)))
      return 0;
    ++v19;
    --v15;
  }
  while (v15);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10003EA00(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10003EA7C(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10003EA7C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10003EBC0(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_100004CB4(v12, 0);
      v5 = sub_10003ECAC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10003EBC0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_10003EEBC(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_10003EEBC(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10003ECAC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_10003EEBC(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_10003EEBC(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10003EEBC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

_QWORD *sub_10003EF34(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  Swift::Int v5;
  _QWORD *v6;
  _BYTE v8[8];
  uint64_t v9;

  v2 = a2;
  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_7;
  v4 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v4 = a1;
  v5 = String.UTF16View._nativeGetOffset(for:)((v4 << 16) | 7, a1, a2);
  if (!v5)
    return _swiftEmptyArrayStorage;
  while (1)
  {
    v6 = sub_10003F344(v5, 0);
    swift_bridgeObjectRetain(v2);
    v2 = sub_10003F004((uint64_t)v8, (uint64_t)(v6 + 4), v5, a1, v2);
    swift_bridgeObjectRelease(v9);
    if (v2 == v5)
      break;
    __break(1u);
LABEL_7:
    v5 = String.UTF16View._foreignCount()();
    if (!v5)
      return _swiftEmptyArrayStorage;
  }
  return v6;
}

uint64_t sub_10003F004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int *v16;
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int *v24;
  __int16 v25;
  uint64_t v26;
  int *v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[2];

  if ((a5 & 0x2000000000000000) != 0)
    v8 = HIBYTE(a5) & 0xF;
  else
    v8 = a4 & 0xFFFFFFFFFFFFLL;
  if (!a2)
  {
    v11 = 0;
    v12 = 0;
    a3 = 0;
    v15 = 1;
    goto LABEL_31;
  }
  swift_bridgeObjectRetain(a5);
  if (!a3)
  {
    v11 = 0;
    v12 = 0;
    v15 = 1;
    goto LABEL_30;
  }
  if (a3 < 0)
  {
    __break(1u);
    JUMPOUT(0x10003F324);
  }
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = a5 & 0xFFFFFFFFFFFFFFLL;
  v30 = a1;
  v15 = 1;
  v16 = &dword_10003F334;
  v17 = &dword_10003F324;
  while (1)
  {
    if ((v15 & 1) == 0)
    {
      v15 = 1;
      LOWORD(v18) = v12;
      v12 = 0;
      goto LABEL_9;
    }
    if (v11 >= v8)
      break;
    if ((a5 & 0x1000000000000000) != 0)
    {
      v21 = v14;
      v22 = v16;
      v23 = _StringGuts.foreignErrorCorrectedScalar(startingAt:)(v11 << 16, a4, a5);
      v17 = &dword_10003F324;
      v16 = v22;
      v14 = v21;
      v18 = v23;
    }
    else
    {
      if ((a5 & 0x2000000000000000) == 0)
      {
        v19 = (a5 & 0xFFFFFFFFFFFFFFFLL) + 32;
        if ((a4 & 0x1000000000000000) == 0)
        {
          v26 = v14;
          v27 = v16;
          v19 = _StringObject.sharedUTF8.getter(a4, a5);
          v17 = &dword_10003F324;
          v16 = v27;
          v14 = v26;
        }
        LODWORD(v18) = *(unsigned __int8 *)(v19 + v11);
        if (*(char *)(v19 + v11) < 0)
          __asm { BR              X9 }
        ++v11;
        v15 = 1;
        goto LABEL_9;
      }
      v31[0] = a4;
      v31[1] = v14;
      v18 = *((unsigned __int8 *)v31 + v11);
      if (*((char *)v31 + v11) < 0)
        __asm { BR              X9 }
      v20 = 1;
    }
    v11 += v20;
    if (WORD1(v18))
    {
      v29 = v14;
      v24 = v17;
      v12 = Unicode.Scalar.UTF16View.subscript.getter(1, v18);
      v25 = Unicode.Scalar.UTF16View.subscript.getter(0, v18);
      v17 = v24;
      v16 = &dword_10003F334;
      v14 = v29;
      LOWORD(v18) = v25;
      v15 = 0;
    }
    else
    {
      v15 = 1;
    }
LABEL_9:
    *(_WORD *)(a2 + 2 * v13++) = v18;
    if (a3 == v13)
      goto LABEL_29;
  }
  v15 = 1;
  a3 = v13;
LABEL_29:
  a1 = v30;
LABEL_30:
  swift_bridgeObjectRelease(a5);
LABEL_31:
  *(_QWORD *)a1 = a4;
  *(_QWORD *)(a1 + 8) = a5;
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 24) = v8;
  *(_WORD *)(a1 + 32) = v12;
  *(_BYTE *)(a1 + 34) = v15;
  return a3;
}

_QWORD *sub_10003F344(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  int64_t v6;
  int64_t v7;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10000215C(&qword_10007B858);
  v5 = (_QWORD *)swift_allocObject(v4, 2 * v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v7 = v6 - 32;
  if (v6 < 32)
    v7 = v6 - 31;
  v5[2] = a1;
  v5[3] = v7 & 0xFFFFFFFFFFFFFFFELL;
  return v5;
}

uint64_t sub_10003F3B4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  unint64_t v10;

  v9 = sub_10000215C(&qword_10007B860);
  v10 = sub_10003F44C();
  v8[0] = a1;
  v2 = sub_1000096E4(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_1000347E8(v3, v4, &v7);
  v5 = v7;
  sub_100002D78(v8);
  return v5;
}

unint64_t sub_10003F44C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007B868;
  if (!qword_10007B868)
  {
    v1 = sub_100006DD0(&qword_10007B860);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_10007B868);
  }
  return result;
}

uint64_t sub_10003F498()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v0 = type metadata accessor for Logger(0);
  sub_10002F864(v0, qword_100080B18);
  sub_10000255C(v0, (uint64_t)qword_100080B18);
  v1 = (uint64_t *)sub_1000306B4();
  v2 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  return Logger.init(subsystem:category:)(v2, v3, 0xD000000000000012, 0x80000001000677D0);
}

double variable initialization expression of LocalDispatchTimer.millisecondsPerSecond()
{
  return 1000.0;
}

uint64_t LocalDispatchTimer.isCancelled.getter()
{
  uint64_t v0;
  uint64_t ObjectType;

  ObjectType = swift_getObjectType(*(_QWORD *)(v0 + 40));
  return OS_dispatch_source.isCancelled.getter(ObjectType) & 1;
}

uint64_t LocalDispatchTimer.__allocating_init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v13;

  v13 = swift_allocObject(v6, 72, 7);
  LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(a1, a2, a3, a4, a5, a6);
  return v13;
}

uint64_t LocalDispatchTimer.init(deadline:repeating:leeway:queue:block:)(void *a1, uint64_t a2, uint64_t a3, double a4, double a5, double a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _DWORD *v41;
  _DWORD *v42;
  _DWORD *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(_QWORD *, uint64_t, uint64_t);
  uint64_t v65;
  void (*v66)(_QWORD *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t ObjectType;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  _QWORD *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  double aBlock;
  _QWORD v103[4];
  uint64_t v104;

  v7 = v6;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v95 = *(_QWORD *)(v14 - 8);
  v96 = v14;
  __chkstk_darwin(v14);
  v94 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DispatchTimeInterval(0);
  v91 = *(_QWORD *)(v99 - 8);
  v16 = __chkstk_darwin(v99);
  v90 = (uint64_t *)((char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  v19 = (uint64_t *)((char *)&v81 - v18);
  v100 = type metadata accessor for DispatchTime(0);
  v93 = *(_QWORD *)(v100 - 8);
  v20 = __chkstk_darwin(v100);
  v92 = (char *)&v81 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  v101 = (char *)&v81 - v22;
  v23 = type metadata accessor for OS_dispatch_source.TimerFlags(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23);
  v26 = (char *)&v81 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = (_QWORD *)type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v85 = *(v86 - 1);
  __chkstk_darwin(v86);
  v87 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v83);
  v84 = (char *)&v81 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchQoS(0);
  v30 = __chkstk_darwin(v29);
  v98 = (char *)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v6 + 16) = 0x408F400000000000;
  v33 = a4 * 1000.0;
  v34 = fmin(v33, 2147483650.0);
  if ((~*(_QWORD *)&v34 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v34 <= -2147483650.0)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v34 >= 2147483650.0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  a5 = a5 * 1000.0;
  *(_DWORD *)(v6 + 24) = (int)v34;
  v35 = fmin(a5, 2147483650.0);
  if ((~*(_QWORD *)&v35 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v35 <= -2147483650.0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v35 >= 2147483650.0)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  a6 = a6 * 1000.0;
  *(_DWORD *)(v6 + 28) = (int)v35;
  v36 = fmin(a6, 2147483650.0);
  if ((~*(_QWORD *)&v36 & 0x7FF0000000000000) == 0)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (v36 <= -2147483650.0)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (v36 >= 2147483650.0)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once(&qword_10007FB70, sub_10003F498);
    goto LABEL_14;
  }
  v88 = v31;
  v89 = v30;
  *(_DWORD *)(v6 + 32) = (int)v36;
  v97 = a3;
  if (v33 <= 2147483650.0 && a5 <= 2147483650.0 && a6 <= 2147483650.0)
    goto LABEL_17;
  if (qword_10007FB70 != -1)
    goto LABEL_33;
LABEL_14:
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10000255C(v37, (uint64_t)qword_100080B18);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (_DWORD *)swift_slowAlloc(42, -1);
    v81 = a2;
    v42 = v41;
    *v41 = 134218752;
    aBlock = 2147483650.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v41 + 1, v41 + 3);
    v82 = (void *)v23;
    *((_WORD *)v42 + 6) = 2048;
    aBlock = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, (char *)v42 + 14, (char *)v42 + 22);
    *((_WORD *)v42 + 11) = 2048;
    aBlock = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v42 + 6, v42 + 8);
    *((_WORD *)v42 + 16) = 2048;
    v23 = (uint64_t)v82;
    aBlock = a6;
    a3 = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, (char *)v42 + 34, (char *)v42 + 42);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "LocalDispatchTimer: Exceeded maximum value of %f: deadline: %f, repeating: %f, leeway: %f", (uint8_t *)v42, 0x2Au);
    v43 = v42;
    a2 = v81;
    swift_slowDealloc(v43, -1, -1);
  }

LABEL_17:
  *(_QWORD *)(v7 + 48) = a2;
  *(_QWORD *)(v7 + 56) = a3;
  if (a1)
  {
    swift_retain(a3);
    v44 = a1;
  }
  else
  {
    v81 = sub_100011254(0, (unint64_t *)&qword_10007A900, OS_dispatch_queue_ptr);
    v45 = swift_retain(a3);
    v82 = 0;
    v46 = v24;
    v47 = v19;
    v48 = v7;
    v49 = v98;
    static DispatchQoS.unspecified.getter(v45);
    aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    v50 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v51 = sub_10000215C((uint64_t *)&unk_10007A910);
    v52 = sub_10000221C((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910);
    v53 = v84;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v51, v52, v83, v50);
    v54 = v87;
    (*(void (**)(char *, _QWORD, _QWORD *))(v85 + 104))(v87, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v86);
    v55 = v49;
    v7 = v48;
    v19 = v47;
    v24 = v46;
    a1 = v82;
    v44 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000037, 0x8000000100067720, v55, v53, v54, 0);
  }
  *(_QWORD *)(v7 + 64) = v44;
  sub_100011254(0, &qword_10007B870, OS_dispatch_source_ptr);
  aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
  v56 = sub_10000219C(&qword_10007B878, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_source.TimerFlags, (uint64_t)&protocol conformance descriptor for OS_dispatch_source.TimerFlags);
  v87 = a1;
  v86 = v44;
  v57 = sub_10000215C(&qword_10007B880);
  v58 = sub_10000221C(&qword_10007B888, &qword_10007B880);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v57, v58, v23, v56);
  v59 = static OS_dispatch_source.makeTimerSource(flags:queue:)(v26, v44);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  *(_QWORD *)(v7 + 40) = v59;
  v61 = v92;
  static DispatchTime.now()(v60);
  *v19 = *(int *)(v7 + 24);
  v62 = enum case for DispatchTimeInterval.milliseconds(_:);
  v63 = v91;
  v64 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v91 + 104);
  v65 = v99;
  v64(v19, enum case for DispatchTimeInterval.milliseconds(_:), v99);
  + infix(_:_:)(v61, v19);
  v66 = *(void (**)(_QWORD *, uint64_t))(v63 + 8);
  v66(v19, v65);
  v93 = *(_QWORD *)(v93 + 8);
  ((void (*)(char *, uint64_t))v93)(v61, v100);
  v67 = v7;
  v68 = *(unsigned int *)(v7 + 28);
  if ((int)v68 < 1)
  {
    v70 = enum case for DispatchTimeInterval.never(_:);
    v69 = v90;
  }
  else
  {
    v69 = v90;
    *v90 = v68;
    v70 = v62;
  }
  v71 = v99;
  v64(v69, v70, v99);
  ObjectType = swift_getObjectType(*(_QWORD *)(v67 + 40));
  *v19 = *(int *)(v67 + 32);
  v64(v19, v62, v71);
  OS_dispatch_source_timer.schedule(deadline:repeating:leeway:)(v101, v69, v19, ObjectType);
  v66(v19, v71);
  v73 = swift_getObjectType(*(_QWORD *)(v67 + 40));
  v74 = swift_allocObject(&unk_1000736B0, 24, 7);
  swift_weakInit(v74 + 16, v67);
  v103[3] = sub_10003FF88;
  v104 = v74;
  aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
  v103[0] = 1107296256;
  v103[1] = sub_100001DDC;
  v103[2] = &unk_1000736C8;
  v75 = _Block_copy(&aBlock);
  v76 = swift_retain(v74);
  v77 = v98;
  static DispatchQoS.unspecified.getter(v76);
  v78 = v94;
  sub_10003FFF8();
  OS_dispatch_source.setEventHandler(qos:flags:handler:)(v77, v78, v75, v73);
  _Block_release(v75);

  swift_release(v97);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v78, v96);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v77, v89);
  v66(v69, v71);
  ((void (*)(char *, uint64_t))v93)(v101, v100);
  v79 = v104;
  swift_release(v74);
  swift_release(v79);
  return v67;
}

uint64_t sub_10003FF64()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003FF88()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;
  _BYTE v6[24];

  swift_beginAccess(v0 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v0 + 16);
  if (result)
  {
    v2 = result;
    v4 = *(void (**)(uint64_t))(result + 48);
    v3 = *(_QWORD *)(result + 56);
    swift_retain(v3);
    v5 = swift_release(v2);
    v4(v5);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_10003FFF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = _swiftEmptyArrayStorage;
  v1 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v2 = sub_10000215C((uint64_t *)&unk_10007A960);
  v3 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  return dispatch thunk of SetAlgebra.init<A>(_:)(&v5, v2, v3, v0, v1);
}

Swift::Void __swiftcall LocalDispatchTimer.resume()()
{
  uint64_t v0;

  swift_getObjectType(*(_QWORD *)(v0 + 40));
  OS_dispatch_source.resume()();
}

Swift::Void __swiftcall LocalDispatchTimer.cancel()()
{
  uint64_t v0;

  swift_getObjectType(*(_QWORD *)(v0 + 40));
  OS_dispatch_source.cancel()();
}

uint64_t LocalDispatchTimer.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return v0;
}

uint64_t LocalDispatchTimer.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for LocalDispatchTimer()
{
  return objc_opt_self(_TtC14bluetoothuserd18LocalDispatchTimer);
}

uint64_t sub_100040174()
{
  uint64_t v0;
  unint64_t v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  Swift::String v17;
  Swift::String v19;

  v1 = 0xE100000000000000;
  v2._object = (void *)0x80000001000677F0;
  v2._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v2);
  v3._object = (void *)0x8000000100067810;
  v3._countAndFlagsBits = 0xD000000000000017;
  String.append(_:)(v3);
  _StringGuts.grow(_:)(18);
  v4 = swift_bridgeObjectRelease(0xE000000000000000);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 144))(v4);
  if (v6)
    v1 = v6;
  else
    v5 = 45;
  v7 = v1;
  String.append(_:)(*(Swift::String *)&v5);
  swift_bridgeObjectRelease(v1);
  v8._countAndFlagsBits = 10;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x71696E5520534449;
  v9._object = (void *)0xEF203A4449206575;
  String.append(_:)(v9);
  v10 = swift_bridgeObjectRelease(0xEF203A4449206575);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 200))(v10);
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(type metadata accessor for CloudPairedDeviceRecord(0) - 8);
    v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    do
    {
      v19._countAndFlagsBits = sub_100030C44(20);
      v19._object = v16;
      v17._countAndFlagsBits = 10;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      String.append(_:)(v19);
      swift_bridgeObjectRelease(v19._object);
      v14 += v15;
      --v12;
    }
    while (v12);
  }
  swift_bridgeObjectRelease(v11);
  return 10;
}

uint64_t sub_10004031C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 16, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t sub_100040364(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 16, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_1000403B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v21;

  v3 = type metadata accessor for CloudPairedDeviceRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = __chkstk_darwin(v3);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 144))(v5);
  if (!v9)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  v10 = v8;
  v11 = v9;
  v12 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 200))();
  v13 = v12;
  v14 = *(_QWORD *)(v12 + 16);
  if (v14)
  {
    v15 = v12 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v16 = *(_QWORD *)(v4 + 72);
    while (1)
    {
      sub_100034A9C(v15, (uint64_t)v7);
      v17 = &v7[*(int *)(v3 + 24)];
      v18 = *((_QWORD *)v17 + 1);
      v19 = *(_QWORD *)v17 == v10 && v11 == v18;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v17, v18, v10, v11, 0) & 1) != 0)
        break;
      sub_100034AE0((uint64_t)v7);
      v15 += v16;
      if (!--v14)
        goto LABEL_10;
    }
    sub_100040534((uint64_t)v7, a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
  }
  else
  {
LABEL_10:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1, 1, v3);
  }
  swift_bridgeObjectRelease(v11);
  return swift_bridgeObjectRelease(v13);
}

uint64_t sub_100040534(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudPairedDeviceRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

char *sub_100040578()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *countAndFlagsBits;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  Swift::String v24;
  void (*v25)(char *, uint64_t);
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, __n128);
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  _QWORD *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v44;
  dispatch_queue_t v45;
  char *v46;
  uint64_t v47;
  Swift::String aBlock;
  uint64_t (*v49)(uint64_t);
  void *v50;
  uint64_t (*v51)();
  uint64_t v52;
  char v53[32];

  v1 = v0;
  v2 = type metadata accessor for URL.DirectoryHint(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v47 - 8);
  v7 = __chkstk_darwin(v47);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v44 - v11;
  __chkstk_darwin(v10);
  v46 = (char *)&v44 - v13;
  v14 = type metadata accessor for Logger(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14);
  countAndFlagsBits = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (SystemInfo.deviceFirstUnlocked.getter())
  {
    v18 = v1[4];
    v19 = sub_10000215C(&qword_10007BA40);
    v45 = v18;
    v20 = OS_dispatch_queue.sync<A>(execute:)(sub_100042AA4, v1, v19);
    countAndFlagsBits = (char *)aBlock._countAndFlagsBits;
    if (aBlock._countAndFlagsBits)
      return countAndFlagsBits;
    (*(void (**)(uint64_t))(*v1 + 232))(v20);
    v21 = sub_100030BFC();
    v22 = swift_beginAccess(v21, v53, 0, 0);
    v23 = v47;
    (*(void (**)(char *, uint64_t, uint64_t, __n128))(v6 + 16))(v9, v21, v47, v22);
    v24 = URL.path(percentEncoded:)(1);
    v44 = v1;
    v25 = *(void (**)(char *, uint64_t))(v6 + 8);
    v25(v9, v23);
    aBlock = v24;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for URL.DirectoryHint.isDirectory(_:), v2);
    v26 = sub_100029E94();
    v27 = v46;
    URL.appending<A>(path:directoryHint:)(&aBlock, v5, &type metadata for String, v26);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    swift_bridgeObjectRelease(aBlock._object);
    v28 = v23;
    v25(v12, v23);
    v29 = sub_100036554();
    v30 = *v29;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(*(_QWORD *)*v29 + 184);
    v32 = type metadata accessor for CloudPairedDeviceRecord(0);
    v33 = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
    v34 = swift_retain(v30);
    countAndFlagsBits = (char *)v31(v27, v32, v33, v34);
    swift_release(v30);
    v14 = swift_allocObject(&unk_100073700, 32, 7);
    v35 = v44;
    *(_QWORD *)(v14 + 16) = v44;
    *(_QWORD *)(v14 + 24) = countAndFlagsBits;
    v15 = swift_allocObject(&unk_100073728, 32, 7);
    *(_QWORD *)(v15 + 16) = sub_100042AEC;
    *(_QWORD *)(v15 + 24) = v14;
    v51 = sub_1000111B8;
    v52 = v15;
    aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
    aBlock._object = (void *)1107296256;
    v49 = sub_10000D2B0;
    v50 = &unk_100073740;
    v36 = _Block_copy(&aBlock);
    v37 = v52;
    swift_retain(v35);
    swift_bridgeObjectRetain(countAndFlagsBits);
    swift_retain(v15);
    swift_release(v37);
    dispatch_sync(v45, v36);
    _Block_release(v36);
    v25(v27, v28);
    LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v15, "", 115, 57, 49, 1);
    swift_release(v14);
    swift_release(v15);
    if ((v35 & 1) == 0)
      return countAndFlagsBits;
    __break(1u);
  }
  v38 = sub_1000307D0();
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 16))(countAndFlagsBits, v38, v14);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Cloud Paired Devices read failed because device is in before first unlock state", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v15 + 8))(countAndFlagsBits, v14);
  return (char *)_swiftEmptyArrayStorage;
}

uint64_t sub_1000409CC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 48, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 56));
  return v1;
}

uint64_t sub_100040A14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v2 + 48, v7, 1, 0);
  v5 = *(_QWORD *)(v2 + 56);
  *(_QWORD *)(v2 + 48) = a1;
  *(_QWORD *)(v2 + 56) = a2;
  return swift_bridgeObjectRelease(v5);
}

uint64_t sub_100040A64@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess(v3, v6, 0, 0);
  v4 = type metadata accessor for URL(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_100040AC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL;
  swift_beginAccess(v3, v6, 33, 0);
  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess(v6);
}

uint64_t sub_100040B34()
{
  uint64_t v0;
  _QWORD *v1;
  _BYTE v3[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator, v3, 0, 0);
  return swift_retain(*v1);
}

uint64_t sub_100040B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t sub_100040BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  sub_100040C18(a1, a2);
  return v5;
}

_QWORD *sub_100040C18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  uint64_t *v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t (*v76)(uint64_t, uint64_t, __n128);
  __n128 v77;
  uint64_t v78;
  uint64_t v80;
  void (*v81)(char *, uint64_t, uint64_t);
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98[5];
  uint64_t v99;
  _BYTE v100[16];
  char v101[32];

  v3 = v2;
  v96 = a2;
  v97 = a1;
  v4 = sub_10000215C(&qword_10007BA48);
  __chkstk_darwin(v4);
  v84 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v94 = *(_QWORD *)(v6 - 8);
  v95 = v6;
  __chkstk_darwin(v6);
  v93 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL.DirectoryHint(0);
  v88 = *(_QWORD *)(v8 - 8);
  v89 = v8;
  __chkstk_darwin(v8);
  v86 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v90 = *(_QWORD *)(v10 - 8);
  v91 = v10;
  v11 = __chkstk_darwin(v10);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v85 = (char *)&v80 - v14;
  v15 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v15);
  v17 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v18);
  v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21);
  v24 = (char *)&v80 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FBC();
  v3[2] = 0;
  v87 = v3 + 2;
  v3[3] = 0;
  v25 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v22 + 104))(v24, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v21);
  static DispatchQoS.unspecified.getter(v25);
  v98[0] = (uint64_t)_swiftEmptyArrayStorage;
  v26 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v27 = sub_10000215C((uint64_t *)&unk_10007A910);
  v28 = sub_10000221C((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910);
  dispatch thunk of SetAlgebra.init<A>(_:)(v98, v27, v28, v15, v26);
  v29 = v96;
  v3[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000002ALL, 0x8000000100067830, v20, v17, v24, 0);
  v3[5] = 0;
  v92 = (_QWORD *)((char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator) = 0;
  v30 = (char *)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  v31 = sub_10000215C(&qword_10007AE48);
  v32 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56);
  v83 = (uint64_t)v30;
  v82 = v31;
  v32(v30, 1, 1);
  v33 = v97;
  v3[6] = v97;
  v3[7] = v29;
  type metadata accessor for UserFileManager();
  swift_bridgeObjectRetain(v29);
  sub_100036A3C((uint64_t)v13);
  v98[0] = v33;
  v98[1] = v29;
  v35 = v88;
  v34 = v89;
  v36 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v86, enum case for URL.DirectoryHint.isDirectory(_:), v89);
  v37 = sub_100029E94();
  v38 = v85;
  URL.appending<A>(path:directoryHint:)(v98, v36, &type metadata for String, v37);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v34);
  v40 = v90;
  v39 = v91;
  (*(void (**)(char *, uint64_t))(v90 + 8))(v13, v91);
  v41 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v40 + 32))((uint64_t)v3 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL, v38, v39);
  v42 = IDSCopyLocalDeviceUniqueID(v41);
  v81 = v32;
  if (v42)
  {
    v43 = (void *)v42;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  swift_beginAccess(v87, v101, 1, 0);
  v47 = v3[3];
  v3[2] = v44;
  v3[3] = v46;
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRelease(v47);
  v48 = sub_1000307D0();
  v50 = v93;
  v49 = v94;
  v51 = v95;
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 16))(v93, v48, v95);
  swift_retain_n(v3, 2);
  swift_bridgeObjectRetain(v46);
  v53 = Logger.logObject.getter(v52);
  v54 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v53, v54))
  {
    v55 = swift_slowAlloc(22, -1);
    v56 = swift_slowAlloc(32, -1);
    v98[0] = v56;
    *(_DWORD *)v55 = 136315394;
    if (v46)
      v57 = v44;
    else
      v57 = 45;
    if (v46)
      v58 = v46;
    else
      v58 = 0xE100000000000000;
    swift_bridgeObjectRetain(v46);
    v99 = sub_100002CA8(v57, v58, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease_n(v46, 2);
    v59 = swift_bridgeObjectRelease(v58);
    *(_WORD *)(v55 + 12) = 2048;
    v60 = (*(uint64_t (**)(uint64_t))(*v3 + 200))(v59);
    v61 = *(_QWORD *)(v60 + 16);
    swift_release(v3);
    swift_bridgeObjectRelease(v60);
    v99 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v55 + 14, v55 + 22);
    swift_release(v3);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Start Cloud Pairing Manager (IDS ID: %s) with cached records count: %ld", (uint8_t *)v55, 0x16u);
    swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    v62 = v55;
    v29 = v96;
    swift_slowDealloc(v62, -1, -1);

    (*(void (**)(char *, uint64_t))(v94 + 8))(v93, v95);
  }
  else
  {

    swift_bridgeObjectRelease_n(v46, 2);
    swift_release_n(v3, 2);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
  }
  v63 = (uint64_t)v84;
  v64 = v97;
  v65 = v83;
  v66 = v82;
  v67 = v81;
  v68 = sub_100036554();
  v69 = *v68;
  v70 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)*v68 + 232);
  v71 = swift_retain(*v68);
  v72 = v70(v64, v29, v71);
  swift_release(v69);
  v73 = v92;
  swift_beginAccess(v92, &v99, 1, 0);
  v74 = *v73;
  *v73 = v72;
  swift_release(v74);
  v75 = *v68;
  v76 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)*v68 + 232);
  v77 = swift_retain(v75);
  v78 = v76(v64, v29, v77);
  swift_release(v75);
  swift_bridgeObjectRelease(v29);
  v98[3] = type metadata accessor for CloudPairingManager(0);
  v98[4] = (uint64_t)&off_100073768;
  v98[0] = (uint64_t)v3;
  swift_retain(v3);
  sub_100027330((uint64_t)v98);
  swift_release(v78);
  sub_100002D78(v98);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v67)(v63, 0, 1, v66);
  swift_beginAccess(v65, v98, 33, 0);
  sub_100042B64(v63, v65);
  swift_endAccess(v98);
  return v3;
}

uint64_t sub_10004138C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  __n128 v24;
  void (*v25)(_BYTE *, __n128);
  __n128 v26;
  void (*v27)(_BYTE *, uint64_t);
  _QWORD *v28;
  uint64_t v29;
  void (*v30)(__n128);
  __n128 v31;
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];

  v1 = v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v33[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_10000215C(&qword_10007BA48);
  __chkstk_darwin(v6);
  v8 = &v33[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_10000215C(&qword_10007AE48);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v33[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageNotificationSubscription, v36, 0, 0);
  sub_100042BAC(v13, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v14 = &qword_10007BA48;
    v15 = (uint64_t)v8;
  }
  else
  {
    sub_100042BF4((uint64_t)v8, (uint64_t)v12);
    v16 = *sub_100036554();
    swift_beginAccess(v1 + 48, v33, 0, 0);
    v17 = *(_QWORD *)(v1 + 48);
    v18 = *(_QWORD *)(v1 + 56);
    v19 = *(uint64_t (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)v16 + 232);
    swift_retain(v16);
    v20 = swift_bridgeObjectRetain(v18);
    v21 = v19(v17, v18, v20);
    swift_release(v16);
    swift_bridgeObjectRelease(v18);
    sub_100027534((uint64_t)v12);
    swift_release(v21);
    v14 = &qword_10007AE48;
    v15 = (uint64_t)v12;
  }
  sub_10000BCBC(v15, v14);
  v22 = *sub_100036554();
  v23 = (_BYTE *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL);
  v24 = swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_baseURL, v35, 0, 0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t, __n128))(v3 + 16))(v5, v23, v2, v24);
  v25 = *(void (**)(_BYTE *, __n128))(*(_QWORD *)v22 + 216);
  v26 = swift_retain(v22);
  v25(v5, v26);
  swift_release(v22);
  v27 = *(void (**)(_BYTE *, uint64_t))(v3 + 8);
  v27(v5, v2);
  v28 = (_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator);
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19CloudPairingManager_cloudStorageCoordinator, v34, 0, 0);
  v29 = *v28;
  if (*v28)
  {
    v30 = *(void (**)(__n128))(*(_QWORD *)v29 + 744);
    v31 = swift_retain(*v28);
    v30(v31);
    swift_release(v29);
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  v27(v23, v2);
  swift_release(*v28);
  sub_10000BCBC(v13, &qword_10007BA48);
  return v1;
}

uint64_t sub_100041654()
{
  uint64_t v0;

  sub_10004138C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100041678()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  if (result)
  {
    v2 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 736))(result);
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_1000416C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
  if (result)
  {
    v2 = result;
    (*(void (**)(uint64_t))(*(_QWORD *)result + 744))(result);
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_100041708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v0 + 32);
  aBlock[4] = sub_1000444E8;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100073898;
  v9 = _Block_copy(aBlock);
  swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v12 = sub_10000215C((uint64_t *)&unk_10007A960);
  v13 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_1000418D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(__n128);
  __n128 v67;
  uint64_t v68;
  void (*v69)(uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t *v82;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;

  v2 = v1;
  v4 = type metadata accessor for URL(0);
  v94 = *(_QWORD *)(v4 - 8);
  v95 = v4;
  __chkstk_darwin(v4);
  v93 = (char *)&v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v98 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v91 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v88 = (char *)&v84 - v9;
  v10 = sub_10000215C(&qword_10007BA50);
  __chkstk_darwin(v10);
  v12 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CloudPairedDeviceRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13);
  v87 = (uint64_t)&v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v85 = (uint64_t)&v84 - v18;
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v84 - v20;
  v22 = __chkstk_darwin(v19);
  v90 = (uint64_t)&v84 - v23;
  v24 = __chkstk_darwin(v22);
  v96 = (uint64_t)&v84 - v25;
  v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 200))(v24);
  v27 = v26;
  v28 = *(_QWORD *)(v26 + 16);
  if (v28)
  {
    v92 = v2;
    v89 = v6;
    v29 = v26 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v30 = *(int *)(v13 + 24);
    v86 = a1;
    v31 = (_QWORD *)(a1 + v30);
    v32 = *(_QWORD *)(v14 + 72);
    while (1)
    {
      sub_100034A9C(v29, (uint64_t)v21);
      v33 = &v21[*(int *)(v13 + 24)];
      v34 = *((_QWORD *)v33 + 1);
      v35 = v31[1];
      v36 = *(_QWORD *)v33 == *v31 && v34 == v35;
      if (v36 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v33, v34, *v31, v35, 0) & 1) != 0)
        break;
      sub_100034AE0((uint64_t)v21);
      v29 += v32;
      if (!--v28)
      {
        v37 = 1;
        goto LABEL_11;
      }
    }
    sub_100040534((uint64_t)v21, (uint64_t)v12);
    v37 = 0;
LABEL_11:
    v6 = v89;
    v2 = v92;
    a1 = v86;
  }
  else
  {
    v37 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, v37, 1, v13);
  swift_bridgeObjectRelease(v27);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10000BCBC((uint64_t)v12, &qword_10007BA50);
    v38 = v96;
    sub_100034A9C(a1, v96);
  }
  else
  {
    v39 = v90;
    sub_100040534((uint64_t)v12, v90);
    v40 = sub_100033D78();
    if (v40 == sub_100033D78())
    {
      v92 = v2;
      v41 = sub_100030858();
      v42 = v98;
      v43 = v88;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v88, v41, v6);
      v44 = v85;
      sub_100034A9C(v39, v85);
      v45 = v87;
      v46 = sub_100034A9C(a1, v87);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.default.getter();
      LODWORD(v96) = v48;
      if (os_log_type_enabled(v47, v48))
      {
        v49 = v44;
        v50 = swift_slowAlloc(22, -1);
        v95 = swift_slowAlloc(64, -1);
        v101 = v95;
        *(_DWORD *)v50 = 136315394;
        v51 = sub_10000219C(&qword_10007BA58, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061764);
        v52 = dispatch thunk of CustomStringConvertible.description.getter(v13, v51);
        v54 = v53;
        v99 = sub_100002CA8(v52, v53, &v101);
        v89 = v6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v50 + 4, v50 + 12);
        swift_bridgeObjectRelease(v54);
        sub_100034AE0(v49);
        *(_WORD *)(v50 + 12) = 2080;
        v55 = v87;
        v56 = v51;
        v39 = v90;
        v57 = dispatch thunk of CustomStringConvertible.description.getter(v13, v56);
        v59 = v58;
        v99 = sub_100002CA8(v57, v58, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease(v59);
        sub_100034AE0(v55);
        _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v96, "Dropping same record update: %s for %s", (uint8_t *)v50, 0x16u);
        v60 = v95;
        swift_arrayDestroy(v95, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v50, -1, -1);

        v61 = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v88, v89);
      }
      else
      {
        sub_100034AE0(v44);
        sub_100034AE0(v45);

        v61 = (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v43, v6);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v92 + 352))(v61);
      return sub_100034AE0(v39);
    }
    v38 = v96;
    sub_100034A9C(v39, v96);
    sub_10003218C(a1);
    sub_100034AE0(v39);
  }
  v62 = v93;
  v63 = v6;
  v64 = v97;
  sub_100041708();
  v65 = *sub_100036554();
  v66 = *(void (**)(__n128))(*(_QWORD *)v2 + 232);
  v67 = swift_retain(v65);
  v66(v67);
  v68 = *(_QWORD *)sub_100036260();
  v69 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 208);
  v70 = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
  v69(v38, v62, v68, v13, v70);
  v71 = v64;
  if (v64)
  {
    (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v95);
    swift_release(v65);
    v72 = sub_100030858();
    v73 = v98;
    v74 = v91;
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 16))(v91, v72, v63);
    swift_errorRetain(v64);
    v75 = swift_errorRetain(v64);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v78 = 138412290;
      swift_errorRetain(v64);
      v80 = _swift_stdlib_bridgeErrorToNSError(v64);
      v101 = v80;
      v74 = v91;
      v38 = v96;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v78 + 4, v78 + 12);
      *v79 = v80;
      v71 = v64;
      swift_errorRelease(v64);
      swift_errorRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Unable to store device record with error: %@", v78, 0xCu);
      v81 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v79, 1, v81);
      swift_slowDealloc(v79, -1, -1);
      v82 = v78;
      v73 = v98;
      swift_slowDealloc(v82, -1, -1);

    }
    else
    {

      swift_errorRelease(v64);
      swift_errorRelease(v64);
    }
    swift_errorRelease(v71);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v63);
  }
  else
  {
    swift_release(v65);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v62, v95);
  }
  v39 = v38;
  return sub_100034AE0(v39);
}

uint64_t sub_100042074(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(__n128);
  __n128 v9;
  void (*v10)(uint64_t, char *, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for URL(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100041708();
  v7 = *sub_100036554();
  v8 = *(void (**)(__n128))(*(_QWORD *)v1 + 232);
  v9 = swift_retain(v7);
  v8(v9);
  v10 = *(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)v7 + 160);
  v11 = type metadata accessor for CloudPairedDeviceRecord(0);
  v12 = sub_10000219C(&qword_10007BD90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000616E0);
  v10(a1, v6, v11, v12);
  swift_release(v7);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return notify_post("com.apple.bluetoothuser.cloudChanged");
}

uint64_t sub_100042174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(type metadata accessor for CloudPairedDeviceRecord(0) - 8);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      sub_1000421FC(v4, v0);
      v4 += v5;
      --v2;
    }
    while (v2);
  }
  return swift_bridgeObjectRelease(v1);
}

void sub_1000421FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  void *v35;
  void (*v36)(char *, char *, uint64_t);
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  char *v38;
  id v39;
  void *v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  void (*v49)(__n128);
  __n128 v50;
  char *v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  Class v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v3 = v2;
  v84 = a2;
  v5 = type metadata accessor for Logger(0);
  v79 = *(_QWORD *)(v5 - 8);
  v80 = v5;
  __chkstk_darwin(v5);
  v78 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v82 = *(_QWORD *)(v7 - 8);
  v83 = v7;
  __chkstk_darwin(v7);
  v85 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000215C((uint64_t *)&unk_10007B460);
  v10 = __chkstk_darwin(v9);
  v75 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  v13 = (char *)&v74 - v12;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16);
  v76 = (char *)&v74 - v20;
  __chkstk_darwin(v19);
  v81 = (char *)&v74 - v21;
  v22 = type metadata accessor for CloudPairedDeviceRecord(0);
  v23 = __chkstk_darwin(v22);
  v25 = (char *)&v74 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  v27 = (char *)&v74 - v26;
  v29 = sub_10000219C(&qword_10007BD90, v28, (uint64_t)&unk_1000616E0);
  v87 = v22;
  v88 = sub_10002FDAC(v22, v29);
  v30 = -[objc_class recordChangeTag](v88, "recordChangeTag");
  v77 = v25;
  v86 = a1;
  if (!v30)
  {
    sub_100034A9C(a1, (uint64_t)v27);
    goto LABEL_7;
  }
  v31 = v30;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v33 = v32;

  swift_bridgeObjectRelease(v33);
  sub_100034A9C(a1, (uint64_t)v27);
  if (!v33)
  {
LABEL_7:
    sub_100034AE0((uint64_t)v27);
    goto LABEL_16;
  }
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v81, &v27[*(int *)(v87 + 20)], v14);
  v34 = -[objc_class modificationDate](v88, "modificationDate");
  if (v34)
  {
    v35 = v34;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v34);

    v36 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v36(v13, v18, v14);
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v37(v13, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      v38 = v76;
      v36(v76, v13, v14);
      goto LABEL_15;
    }
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v37(v13, 1, 1, v14);
  }
  v39 = -[objc_class creationDate](v88, "creationDate");
  if (!v39)
  {
    v42 = (uint64_t)v75;
    v43 = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v37)(v75, 1, 1, v14);
    v38 = v76;
    goto LABEL_13;
  }
  v40 = v39;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v39);

  v41 = *(void (**)(void))(v15 + 32);
  v42 = (uint64_t)v75;
  v41();
  v37((char *)v42, 0, 1, v14);
  v43 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v42, 1, v14);
  v38 = v76;
  if ((_DWORD)v43 == 1)
  {
LABEL_13:
    static Date.now.getter(v43);
    sub_10000BCBC(v42, (uint64_t *)&unk_10007B460);
    goto LABEL_14;
  }
  ((void (*)(char *, uint64_t, uint64_t))v41)(v76, v42, v14);
LABEL_14:
  sub_10000BCBC((uint64_t)v13, (uint64_t *)&unk_10007B460);
LABEL_15:
  v44 = v81;
  v45 = static Date.> infix(_:_:)(v81, v38);
  v46 = *(void (**)(char *, uint64_t))(v15 + 8);
  v46(v38, v14);
  v46(v44, v14);
  sub_100034AE0((uint64_t)v27);
  if ((v45 & 1) == 0)
  {
LABEL_20:

    return;
  }
LABEL_16:
  v47 = v84;
  sub_100041708();
  v48 = *sub_100036554();
  v49 = *(void (**)(__n128))(*(_QWORD *)v47 + 232);
  v50 = swift_retain(v48);
  v51 = v85;
  v49(v50);
  v52 = *(_QWORD *)sub_100036260();
  v53 = *(void (**)(uint64_t, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 208);
  v54 = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
  v55 = v86;
  v53(v86, v51, v52, v87, v54);
  if (!v3)
  {
    (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
    swift_release(v48);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v82 + 8))(v51, v83);
  swift_release(v48);
  v56 = sub_100030858();
  v58 = v78;
  v57 = v79;
  v59 = v80;
  (*(void (**)(char *, uint64_t, uint64_t))(v79 + 16))(v78, v56, v80);
  v60 = v55;
  v61 = (uint64_t)v77;
  sub_100034A9C(v60, (uint64_t)v77);
  swift_errorRetain(v3);
  v62 = swift_errorRetain(v3);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = swift_slowAlloc(22, -1);
    v66 = (uint64_t *)swift_slowAlloc(8, -1);
    v86 = swift_slowAlloc(32, -1);
    v91 = v86;
    *(_DWORD *)v65 = 136315394;
    v67 = sub_10000219C(&qword_10007BA58, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_100061764);
    v68 = dispatch thunk of CustomStringConvertible.description.getter(v87, v67);
    v70 = v69;
    v89 = sub_100002CA8(v68, v69, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease(v70);
    sub_100034AE0(v61);
    *(_WORD *)(v65 + 12) = 2112;
    swift_errorRetain(v3);
    v71 = _swift_stdlib_bridgeErrorToNSError(v3);
    v89 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90, v65 + 14, v65 + 22);
    *v66 = v71;
    swift_errorRelease(v3);
    swift_errorRelease(v3);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Error saving cloud record to cloud: %s due to %@", (uint8_t *)v65, 0x16u);
    v72 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v66, 1, v72);
    swift_slowDealloc(v66, -1, -1);
    v73 = v86;
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v73, -1, -1);
    swift_slowDealloc(v65, -1, -1);

    swift_errorRelease(v3);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v78, v80);
  }
  else
  {

    swift_errorRelease(v3);
    sub_100034AE0(v61);
    swift_errorRelease(v3);
    swift_errorRelease(v3);

    (*(void (**)(char *, uint64_t))(v57 + 8))(v58, v59);
  }
}

uint64_t sub_100042950()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

void sub_100042978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100042C3C(a2, a3);
}

void sub_1000429A0(uint64_t a1, uint64_t a2)
{
  sub_100043EA4(a2);
}

uint64_t sub_1000429C4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 352))();
}

uint64_t sub_1000429EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(__n128);
  __n128 v8;
  uint64_t v10;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *v0;
  sub_100041708();
  v6 = *sub_100036554();
  v7 = *(void (**)(__n128))(*(_QWORD *)v5 + 232);
  v8 = swift_retain(v6);
  v7(v8);
  (*(void (**)(char *))(*(_QWORD *)v6 + 216))(v4);
  swift_release(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_100042AA4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 40);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100042AC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100042AEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v2 + 40);
  *(_QWORD *)(v2 + 40) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_100042B18()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t type metadata accessor for CloudPairingManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10007FD90;
  if (!qword_10007FD90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudPairingManager);
  return result;
}

uint64_t sub_100042B64(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007BA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042BAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007BA48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100042BF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007AE48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100042C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  __n128 v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(unint64_t, uint64_t);
  id v48;
  id v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  char v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject **v64;
  uint64_t v65;
  NSObject **v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  id v82;
  id v83;
  NSObject *v84;
  os_log_type_t v85;
  int v86;
  _BOOL4 v87;
  uint64_t v88;
  _QWORD *v89;
  id v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  NSObject *v103;
  id v104;
  void *v105;
  id v106;
  id v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t *v114;
  char v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  id v120;
  NSObject *v121;
  os_log_type_t v122;
  uint64_t v123;
  _QWORD *v124;
  void **v125;
  id v126;
  id v127;
  id v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  id v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  void (*v150)(__n128);
  __n128 v151;
  char *v152;
  uint64_t v153;
  void (*v154)(uint64_t *, char *, uint64_t, uint64_t, uint64_t);
  uint64_t v155;
  uint64_t v156;
  id v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint64_t v161;
  NSObject **v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __n128 v166;
  char *v167;
  uint64_t v168;
  char *v169;
  __n128 v170;
  char *v171;
  char *v172;
  char *v173;
  _QWORD *v174;
  int v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char *v179;
  __n128 v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  __n128 v185;
  id v186;
  unint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199[8];
  _QWORD *v200;
  void **aBlock;
  uint64_t v202;
  uint64_t (*v203)(uint64_t);
  void *v204;
  uint64_t (*v205)();
  uint64_t v206;
  _QWORD *v207;
  char v208;
  char v209[8];

  v168 = type metadata accessor for CloudPairedDeviceRecord(0);
  __chkstk_darwin(v168);
  v5 = (uint64_t *)((char *)&v166 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for URL(0);
  v183 = *(_QWORD *)(v6 - 8);
  v7 = __chkstk_darwin(v6);
  v167 = (char *)&v166 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v180.n128_u64[0] = (unint64_t)v166.n128_u64 - v10;
  v11 = __chkstk_darwin(v9);
  v179 = (char *)&v166 - v12;
  __chkstk_darwin(v11);
  v178 = (char *)&v166 - v13;
  v14 = type metadata accessor for Logger(0);
  v197 = *(_QWORD *)(v14 - 8);
  v15 = __chkstk_darwin(v14);
  v17 = (char *)&v166 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15);
  v172 = (char *)&v166 - v19;
  v20 = __chkstk_darwin(v18);
  v173 = (char *)&v166 - v21;
  __chkstk_darwin(v20);
  v177 = (char *)&v166 - v22;
  v194 = type metadata accessor for DispatchWorkItemFlags(0);
  v193 = *(_QWORD *)(v194 - 8);
  __chkstk_darwin(v194);
  v192 = (char *)&v166 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = type metadata accessor for DispatchQoS(0);
  v190 = *(_QWORD *)(v191 - 8);
  __chkstk_darwin(v191);
  v189 = (char *)&v166 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *(_QWORD *)(a1 + 16);
  v182 = a2;
  v181 = v5;
  v195 = v6;
  v196 = v14;
  v184 = v17;
  if (v25)
  {
    v26 = v25;
    v171 = &v208;
    v27 = swift_bridgeObjectRetain(a1);
    v28 = 32;
    v27.n128_u64[0] = 138412290;
    v166 = v27;
    v27.n128_u64[0] = 138412546;
    v170 = v27;
    v169 = (char *)&type metadata for Any + 8;
    v29 = v26;
    v176 = a1;
    while (1)
    {
      v48 = *(id *)(a1 + v28);
      v49 = objc_msgSend(v48, "zoneID");
      v50 = objc_msgSend(v49, "zoneName");

      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v54 = sub_100030B50();
      swift_beginAccess(v54, v209, 0, 0);
      v55 = v54[1];
      if (*v54 == v51 && v55 == v53)
        break;
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(*v54, v55, v51, v53, 0);
      swift_bridgeObjectRelease(v53);
      if ((v57 & 1) != 0)
        goto LABEL_14;
      v58 = sub_100030858();
      (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v173, v58, v14);
      v59 = v48;
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = swift_slowAlloc(12, -1);
        v63 = v28;
        v64 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v62 = v166.n128_u32[0];
        *(_QWORD *)(v62 + 4) = v59;
        *v64 = v59;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "Ignoring deleted record from unknown zone: %@", (uint8_t *)v62, 0xCu);
        v65 = sub_10000215C((uint64_t *)&unk_10007AA40);
        swift_arrayDestroy(v64, 1, v65);
        v66 = v64;
        v28 = v63;
        swift_slowDealloc(v66, -1, -1);
        v14 = v196;
        swift_slowDealloc(v62, -1, -1);
      }
      else
      {

        v60 = v59;
      }

      (*(void (**)(char *, uint64_t))(v197 + 8))(v173, v14);
LABEL_5:
      v28 += 24;
      if (!--v29)
      {
        swift_bridgeObjectRelease(a1);
        a2 = v182;
        goto LABEL_19;
      }
    }
    swift_bridgeObjectRelease(v53);
LABEL_14:
    v187 = v28;
    v188 = v29;
    v67 = v198;
    v205 = sub_1000444E8;
    v206 = v198;
    aBlock = _NSConcreteStackBlock;
    v202 = 1107296256;
    v203 = sub_100001DDC;
    v204 = &unk_100073870;
    v68 = _Block_copy(&aBlock);
    swift_retain(v67);
    v69 = v14;
    v70 = v189;
    static DispatchQoS.unspecified.getter(v71);
    v207 = _swiftEmptyArrayStorage;
    v72 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v73 = sub_10000215C((uint64_t *)&unk_10007A960);
    v74 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
    v75 = v192;
    v76 = v194;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v207, v73, v74, v194, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v70, v75, v68);
    _Block_release(v68);
    (*(void (**)(char *, uint64_t))(v193 + 8))(v75, v76);
    v77 = v70;
    v78 = v69;
    (*(void (**)(char *, uint64_t))(v190 + 8))(v77, v191);
    swift_release(v206);
    v79 = sub_100030858();
    v80 = v197;
    v81 = v177;
    (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v177, v79, v78);
    v82 = v48;
    swift_retain_n(v67, 2);
    v83 = v82;
    v84 = Logger.logObject.getter(v83);
    v85 = static os_log_type_t.info.getter();
    v86 = v85;
    v87 = os_log_type_enabled(v84, v85);
    v186 = v83;
    if (v87)
    {
      v88 = swift_slowAlloc(22, -1);
      v89 = (_QWORD *)swift_slowAlloc(8, -1);
      v174 = v89;
      v185.n128_u64[0] = swift_slowAlloc(32, -1);
      aBlock = (void **)v185.n128_u64[0];
      *(_DWORD *)v88 = v170.n128_u32[0];
      v175 = v86;
      v207 = v83;
      v90 = v83;
      v91 = v171;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v171, v88 + 4, v88 + 12);
      *v89 = v83;

      *(_WORD *)(v88 + 12) = 2080;
      v31 = v178;
      (*(void (**)(void))(*(_QWORD *)v198 + 232))();
      v92 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v195, v92);
      v95 = v94;
      v96 = v81;
      v30 = v183;
      (*(void (**)(char *, uint64_t))(v183 + 8))(v31, v195);
      v207 = (_QWORD *)sub_100002CA8(v93, v95, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v207, v91, v88 + 14, v88 + 22);
      swift_release_n(v198, 2);
      swift_bridgeObjectRelease(v95);
      _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v175, "Deleting record: %@ from %s", (uint8_t *)v88, 0x16u);
      v97 = sub_10000215C((uint64_t *)&unk_10007AA40);
      v98 = v174;
      swift_arrayDestroy(v174, 1, v97);
      swift_slowDealloc(v98, -1, -1);
      v99 = v185.n128_u64[0];
      swift_arrayDestroy(v185.n128_u64[0], 1, v169);
      v32 = v195;
      swift_slowDealloc(v99, -1, -1);
      swift_slowDealloc(v88, -1, -1);

      (*(void (**)(char *, uint64_t))(v197 + 8))(v96, v196);
    }
    else
    {

      swift_release_n(v198, 2);
      (*(void (**)(char *, uint64_t))(v80 + 8))(v81, v78);
      v30 = v183;
      v31 = v178;
      v32 = v195;
    }
    v33 = *sub_100036554();
    *(_QWORD *)&v34 = swift_retain(v33).n128_u64[0];
    v35 = v186;
    v36 = objc_msgSend(v186, "recordName", v34);
    v185.n128_u64[0] = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v38 = v37;

    v39 = v179;
    (*(void (**)(void))(*(_QWORD *)v198 + 232))();
    v40 = sub_100030BFC();
    v41 = swift_beginAccess(v40, v199, 0, 0);
    v42 = v180.n128_u64[0];
    v43 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, __n128))(v30 + 16))(v180.n128_u64[0], v40, v32, v41);
    v44 = URL.path.getter(v43);
    v46 = v45;
    v47 = *(void (**)(unint64_t, uint64_t))(v30 + 8);
    v47(v42, v32);
    URL.appendingPathComponent(_:)(v44, v46);
    swift_bridgeObjectRelease(v46);
    v47((unint64_t)v39, v32);
    (*(void (**)(unint64_t, uint64_t, char *))(*(_QWORD *)v33 + 144))(v185.n128_u64[0], v38, v31);

    swift_release(v33);
    swift_bridgeObjectRelease(v38);
    v47((unint64_t)v31, v32);
    v5 = v181;
    v14 = v196;
    a1 = v176;
    v29 = v188;
    v28 = v187;
    goto LABEL_5;
  }
LABEL_19:
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v165 = a2;
    else
      v165 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v100 = _CocoaArrayWrapper.endIndex.getter(v165);
    if (v100)
      goto LABEL_21;
LABEL_48:
    swift_bridgeObjectRelease(a2);
    notify_post("com.apple.bluetoothuser.cloudChanged");
    return;
  }
  v100 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  v101 = swift_bridgeObjectRetain(a2);
  if (!v100)
    goto LABEL_48;
LABEL_21:
  if (v100 >= 1)
  {
    v102 = 0;
    v188 = 0;
    v187 = a2 & 0xC000000000000001;
    v101.n128_u64[0] = 136315394;
    v180 = v101;
    v179 = (char *)&type metadata for Any + 8;
    v101.n128_u64[0] = 138412546;
    v185 = v101;
    v186 = (id)v100;
    while (1)
    {
      if (v187)
        v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v102, a2);
      else
        v104 = *(id *)(a2 + 8 * v102 + 32);
      v105 = v104;
      v106 = objc_msgSend(v104, "recordID", v166.n128_u64[0], v166.n128_u64[1]);
      v107 = objc_msgSend(v106, "zoneID");

      v108 = objc_msgSend(v107, "zoneName");
      v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v108);
      v111 = v110;

      v112 = sub_100030B50();
      swift_beginAccess(v112, &v207, 0, 0);
      v113 = v112[1];
      v114 = v5;
      if (*v112 == v109 && v113 == v111)
      {
        swift_bridgeObjectRelease(v111);
      }
      else
      {
        v116 = _stringCompareWithSmolCheck(_:_:expecting:)(*v112, v113, v109, v111, 0);
        swift_bridgeObjectRelease(v111);
        if ((v116 & 1) == 0)
        {
          v117 = sub_100030858();
          v118 = v197;
          v119 = v172;
          (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v172, v117, v14);
          v120 = v105;
          v121 = Logger.logObject.getter(v120);
          v122 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v121, v122))
          {
            v123 = swift_slowAlloc(22, -1);
            v124 = (_QWORD *)swift_slowAlloc(8, -1);
            v125 = (void **)swift_slowAlloc(32, -1);
            aBlock = v125;
            *(_DWORD *)v123 = v180.n128_u32[0];
            v126 = objc_msgSend(v120, "recordID");
            v127 = objc_msgSend(v126, "zoneID");

            v128 = objc_msgSend(v127, "zoneName");
            v129 = static String._unconditionallyBridgeFromObjectiveC(_:)(v128);
            v131 = v130;

            *(_QWORD *)(v123 + 4) = sub_100002CA8(v129, v131, (uint64_t *)&aBlock);
            v132 = v131;
            v133 = v196;
            swift_bridgeObjectRelease(v132);
            *(_WORD *)(v123 + 12) = 2112;
            *(_QWORD *)(v123 + 14) = v120;
            *v124 = v120;

            _os_log_impl((void *)&_mh_execute_header, v121, v122, "Ignoring updated record from %s zone: %@", (uint8_t *)v123, 0x16u);
            v134 = sub_10000215C((uint64_t *)&unk_10007AA40);
            swift_arrayDestroy(v124, 1, v134);
            v135 = v124;
            v5 = v181;
            swift_slowDealloc(v135, -1, -1);
            swift_arrayDestroy(v125, 1, v179);
            swift_slowDealloc(v125, -1, -1);
            v136 = v123;
            v14 = v133;
            v100 = (uint64_t)v186;
            swift_slowDealloc(v136, -1, -1);

            (*(void (**)(char *, uint64_t))(v197 + 8))(v172, v14);
          }
          else
          {

            (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v14);
          }
          a2 = v182;
          goto LABEL_25;
        }
      }
      v137 = v198;
      v205 = sub_1000444E8;
      v206 = v198;
      aBlock = _NSConcreteStackBlock;
      v202 = 1107296256;
      v203 = sub_100001DDC;
      v204 = &unk_100073848;
      v138 = _Block_copy(&aBlock);
      swift_retain(v137);
      v139 = v189;
      static DispatchQoS.unspecified.getter(v140);
      v200 = _swiftEmptyArrayStorage;
      v141 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v142 = sub_10000215C((uint64_t *)&unk_10007A960);
      v143 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
      v144 = v192;
      v145 = v194;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v200, v142, v143, v194, v141);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v139, v144, v138);
      _Block_release(v138);
      (*(void (**)(char *, uint64_t))(v193 + 8))(v144, v145);
      (*(void (**)(char *, uint64_t))(v190 + 8))(v139, v191);
      swift_release(v206);
      v146 = v105;
      v5 = v114;
      v147 = v188;
      sub_10003232C(v146, v114);
      v148 = v147;
      if (v147)
      {
        v14 = v196;
        a2 = v182;
        v188 = 0;
        v156 = sub_100030858();
        (*(void (**)(char *, uint64_t, uint64_t))(v197 + 16))(v184, v156, v14);
        v157 = v146;
        swift_errorRetain(v147);
        v103 = v157;
        v158 = swift_errorRetain(v147);
        v159 = Logger.logObject.getter(v158);
        v160 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v159, v160))
        {
          v161 = swift_slowAlloc(22, -1);
          v162 = (NSObject **)swift_slowAlloc(16, -1);
          *(_DWORD *)v161 = v185.n128_u32[0];
          *(_QWORD *)(v161 + 4) = v103;
          *v162 = v103;

          *(_WORD *)(v161 + 12) = 2112;
          swift_errorRetain(v148);
          v163 = _swift_stdlib_bridgeErrorToNSError(v148);
          *(_QWORD *)(v161 + 14) = v163;
          v162[1] = v163;
          swift_errorRelease(v148);
          swift_errorRelease(v148);
          _os_log_impl((void *)&_mh_execute_header, v159, v160, "Error saving cloud record to disk: %@ due to %@", (uint8_t *)v161, 0x16u);
          v164 = sub_10000215C((uint64_t *)&unk_10007AA40);
          swift_arrayDestroy(v162, 2, v164);
          v14 = v196;
          swift_slowDealloc(v162, -1, -1);
          swift_slowDealloc(v161, -1, -1);

        }
        else
        {

          swift_errorRelease(v147);
          swift_errorRelease(v147);
          v103 = v159;
        }
        v100 = (uint64_t)v186;
        swift_errorRelease(v148);

        (*(void (**)(char *, uint64_t))(v197 + 8))(v184, v14);
      }
      else
      {
        v149 = *sub_100036554();
        v150 = *(void (**)(__n128))(*(_QWORD *)v198 + 232);
        v151 = swift_retain(v149);
        v152 = v167;
        v150(v151);
        v153 = *(_QWORD *)sub_100036254();
        v154 = *(void (**)(uint64_t *, char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v149 + 208);
        v155 = sub_10000219C(&qword_10007B560, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000617B4);
        v154(v5, v152, v153, v168, v155);
        v188 = 0;

        swift_release(v149);
        (*(void (**)(char *, uint64_t))(v183 + 8))(v152, v195);
        sub_100034AE0((uint64_t)v5);
        a2 = v182;
        v14 = v196;
        v100 = (uint64_t)v186;
      }
LABEL_25:
      if (v100 == ++v102)
        goto LABEL_48;
    }
  }
  __break(1u);
}

void sub_100043EA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char v20;
  void *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void (*v31)(__n128);
  __n128 v32;
  char *v33;
  uint64_t v34;
  _QWORD v35[2];
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  id v46;
  _QWORD *v47;
  _QWORD aBlock[5];
  uint64_t v49;
  char v50[32];

  v2 = type metadata accessor for URL(0);
  v43 = *(_QWORD *)(v2 - 8);
  v44 = v2;
  __chkstk_darwin(v2);
  v42 = (char *)v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  __chkstk_darwin(v4);
  v39 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchQoS(0);
  v37 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38);
  v36 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v34 = a1;
    else
      v34 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v34);
    if (v7)
      goto LABEL_3;
LABEL_23:
    swift_bridgeObjectRelease(a1);
    return;
  }
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (!v7)
    goto LABEL_23;
LABEL_3:
  if (v7 >= 1)
  {
    v8 = 0;
    v45 = a1 & 0xC000000000000001;
    v35[0] = a1;
    v9 = v35[1];
    v10 = v39;
    while (1)
    {
      v11 = v45 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a1) : *(id *)(a1 + 8 * v8 + 32);
      v12 = v11;
      v13 = objc_msgSend(v11, "zoneName", v35[0]);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = sub_100030B50();
      swift_beginAccess(v17, v50, 0, 0);
      v18 = v17[1];
      if (v14 == *v17 && v16 == v18)
        break;
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, *v17, v18, 0);
      swift_bridgeObjectRelease(v16);
      if ((v20 & 1) != 0)
        goto LABEL_17;

LABEL_6:
      if (v7 == ++v8)
        goto LABEL_23;
    }
    swift_bridgeObjectRelease(v16);
LABEL_17:
    aBlock[4] = sub_1000444D0;
    v49 = v9;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100001DDC;
    aBlock[3] = &unk_100073820;
    v21 = _Block_copy(aBlock);
    swift_retain(v9);
    v46 = v12;
    v22 = v7;
    v23 = v36;
    static DispatchQoS.unspecified.getter(v24);
    v47 = _swiftEmptyArrayStorage;
    v25 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v26 = sub_10000215C((uint64_t *)&unk_10007A960);
    v27 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
    v28 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v26, v27, v41, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v23, v10, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v28);
    v29 = v23;
    v7 = v22;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v29, v38);
    swift_release(v49);
    v30 = *sub_100036554();
    v31 = *(void (**)(__n128))(*(_QWORD *)v9 + 232);
    v32 = swift_retain(v30);
    v33 = v42;
    v31(v32);
    a1 = v35[0];
    (*(void (**)(char *))(*(_QWORD *)v30 + 216))(v33);
    swift_release(v30);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v44);
    goto LABEL_6;
  }
  __break(1u);
}

unint64_t sub_1000442AC()
{
  unint64_t result;

  result = qword_10007BA60;
  if (!qword_10007BA60)
  {
    result = swift_getWitnessTable(&unk_10006206C, &type metadata for CloudPairingManager.CloudPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_10007BA60);
  }
  return result;
}

uint64_t sub_1000442F0()
{
  return type metadata accessor for CloudPairingManager(0);
}

void sub_1000442F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v6[0] = &unk_100062188;
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v6[2] = &unk_1000621A0;
  v6[3] = &unk_1000621B8;
  v2 = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v6[4] = *(_QWORD *)(v2 - 8) + 64;
    v6[5] = &unk_1000621A0;
    sub_1000443AC(319);
    if (v5 <= 0x3F)
    {
      v6[6] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

void sub_1000443AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10007BA90)
  {
    v2 = sub_100006DD0(&qword_10007AE48);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10007BA90);
  }
}

uint64_t storeEnumTagSinglePayload for CloudPairingManager.CloudPairingManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100044450 + 4 * byte_100062065[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100044484 + 4 * byte_100062060[v4]))();
}

uint64_t sub_100044484(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004448C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100044494);
  return result;
}

uint64_t sub_1000444A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000444A8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000444AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000444B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudPairingManager.CloudPairingManagerError()
{
  return &type metadata for CloudPairingManager.CloudPairingManagerError;
}

uint64_t sub_1000444D0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 40) = 0;
  return swift_bridgeObjectRelease(v1);
}

void sub_1000444F8()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUbiquitousKeyValueStore);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithStoreIdentifier:type:", v1, 2);

  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = (uint64_t)v2;
}

uint64_t *NSUbiquitousKeyValueStore.bluetoothCloudDefaults.unsafeMutableAddressor()
{
  if (qword_10007FDA0 != -1)
    swift_once(&qword_10007FDA0, sub_1000444F8);
  return &static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
}

id static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.getter()
{
  _BYTE v1[24];

  if (qword_10007FDA0 != -1)
    swift_once(&qword_10007FDA0, sub_1000444F8);
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, v1, 0, 0);
  return (id)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
}

void static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.setter(uint64_t a1)
{
  void *v2;
  _BYTE v3[24];

  if (qword_10007FDA0 != -1)
    swift_once(&qword_10007FDA0, sub_1000444F8);
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, v3, 1, 0);
  v2 = (void *)static NSUbiquitousKeyValueStore.bluetoothCloudDefaults;
  static NSUbiquitousKeyValueStore.bluetoothCloudDefaults = a1;

}

uint64_t (*static NSUbiquitousKeyValueStore.bluetoothCloudDefaults.modify(uint64_t a1))(_QWORD)
{
  if (qword_10007FDA0 != -1)
    swift_once(&qword_10007FDA0, sub_1000444F8);
  swift_beginAccess(&static NSUbiquitousKeyValueStore.bluetoothCloudDefaults, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t Subscription.subscriber.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t Subscription.init(subscriber:unsubscribeBlock:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t result;
  _QWORD *v12;

  v10 = type metadata accessor for Subscription(0, a4, a3, a4);
  UUID.init()();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(a5, a1, a4);
  v12 = (_QWORD *)(a5 + *(int *)(v10 + 32));
  *v12 = a2;
  v12[1] = a3;
  return result;
}

uint64_t type metadata accessor for Subscription(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100045490(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Subscription);
}

uint64_t Subscription.unsubscribe(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void *v29;
  _QWORD v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD aBlock[5];
  uint64_t v41;

  v33 = a1;
  v34 = a2;
  v35 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35);
  v5 = (char *)v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  v7 = __chkstk_darwin(v6);
  v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v7);
  v12 = (char *)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FBC();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v13);
  v32 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 16))(v12, v31[1], a3);
  v17 = *(unsigned __int8 *)(v10 + 80);
  v18 = (v17 + 24) & ~v17;
  v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = swift_allocObject(&unk_100073948, v19 + 16, v17 | 7);
  *(_QWORD *)(v20 + 16) = *(_QWORD *)(a3 + 16);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v20 + v18, v12, a3);
  v21 = (_QWORD *)(v20 + v19);
  v22 = v34;
  *v21 = v33;
  v21[1] = v22;
  aBlock[4] = sub_100044B28;
  v41 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100073960;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain(v22);
  static DispatchQoS.unspecified.getter(v24);
  v39 = _swiftEmptyArrayStorage;
  v25 = sub_100044BE4();
  v26 = sub_10000215C((uint64_t *)&unk_10007A960);
  v27 = sub_100006D84();
  v28 = v35;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v26, v27, v35, v25);
  v29 = (void *)v32;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v28);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return swift_release(v41);
}

uint64_t sub_100044A58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *(_QWORD *)(v4 + 16);
  v6 = type metadata accessor for Subscription(0, v5, a3, a4);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v8 + 24) & ~v8;
  v10 = v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = v4 + v9;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4 + v9, v5);
  v13 = v12 + *(int *)(v6 + 28);
  v14 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  swift_release(*(_QWORD *)(v12 + *(int *)(v6 + 32) + 8));
  swift_release(*(_QWORD *)(v4 + v11 + 8));
  return swift_deallocObject(v4, v11 + 16, v10);
}

uint64_t sub_100044B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t (*v8)(_QWORD);

  v5 = type metadata accessor for Subscription(0, *(_QWORD *)(v4 + 16), a3, a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(uint64_t (**)(_QWORD))(v4 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8));
  (*(void (**)(unint64_t))(v4 + v7 + *(int *)(v5 + 32)))(v4 + v7);
  return v8(0);
}

unint64_t sub_100044BE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007AE20;
  if (!qword_10007AE20)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10007AE20);
  }
  return result;
}

uint64_t static Subscription.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  v6 = *(int *)(type metadata accessor for Subscription(0, a3, a3, a4) + 28);
  return static UUID.== infix(_:_:)(a1 + v6, a2 + v6);
}

uint64_t sub_100044C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Subscription.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), a4);
}

uint64_t sub_100044C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100044C74(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for UUID(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for () + 64;
      swift_initStructMetadata(a1, 0, 3, v5, a1 + 24);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100044D08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = v7 + v10;
  v12 = (v7 + v10) & ~v10;
  v13 = *(_QWORD *)(v9 + 64) + 7;
  v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 16;
  v15 = v10 | *(_DWORD *)(v6 + 80) & 0xF8;
  if (v15 > 7 || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + (((v15 | 7) + 16) & ~(unint64_t)(v15 | 7)));
  }
  else
  {
    v18 = v8;
    v19 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    v20 = ((unint64_t)a2 + v11) & v19;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))(((unint64_t)a1 + v11) & v19, v20, v18);
    v21 = (_QWORD *)((v13 + v20) & 0xFFFFFFFFFFFFFFF8);
    v22 = v21[1];
    v23 = (_QWORD *)((v13 + (((unint64_t)a1 + v11) & v19)) & 0xFFFFFFFFFFFFFFF8);
    *v23 = *v21;
    v23[1] = v22;
  }
  swift_retain(v22);
  return a1;
}

uint64_t sub_100044E24(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = *(_QWORD *)(v3 + 64);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  return swift_release(*(_QWORD *)(((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100044E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  return a1;
}

uint64_t sub_100044F38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (_QWORD *)((v13 + v11) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)((v13 + v12) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[1];
  v17 = v14[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  swift_release(v17);
  return a1;
}

uint64_t sub_100044FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v11, v12, v7);
  *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v11) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v8 + 64) + 7 + v12) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_100045078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = v6 + v9;
  v11 = (v6 + v9 + a1) & ~v9;
  v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v11, v12, v7);
  v13 = *(_QWORD *)(v8 + 64) + 7;
  v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(v14 + 8);
  *(_OWORD *)v14 = *(_OWORD *)((v13 + v12) & 0xFFFFFFFFFFFFF8);
  swift_release(v15);
  return a1;
}

uint64_t sub_100045118(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int *)(v6 + 84);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned int *)(v9 + 84);
  if (v10 <= v7)
    v11 = v7;
  else
    v11 = *(_DWORD *)(v9 + 84);
  if (v11 <= 0x7FFFFFFF)
    v11 = 0x7FFFFFFF;
  if (!a2)
    return 0;
  v12 = v8;
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = *(_QWORD *)(v6 + 64) + v13;
  v15 = *(_QWORD *)(v9 + 64) + 7;
  if (v11 < a2)
  {
    if (((((v15 + (v14 & ~v13)) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v16 = 2;
    else
      v16 = a2 - v11 + 1;
    if (v16 >= 0x10000)
      v17 = 4;
    else
      v17 = 2;
    if (v16 < 0x100)
      v17 = 1;
    if (v16 >= 2)
      v18 = v17;
    else
      v18 = 0;
    __asm { BR              X17 }
  }
  if ((_DWORD)v7 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
    v21 = a1;
    v10 = v7;
    v12 = v5;
    return v20(v21, v10, v12);
  }
  v21 = (v14 + a1) & ~v13;
  if ((_DWORD)v10 == v11)
  {
    v20 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
    return v20(v21, v10, v12);
  }
  v22 = *(_QWORD *)((v15 + v21) & 0xFFFFFFFFFFFFF8);
  if (v22 >= 0xFFFFFFFF)
    LODWORD(v22) = -1;
  return (v22 + 1);
}

void sub_1000452A8(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  int v13;
  unsigned int v14;

  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  v9 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8)
    v10 = v8;
  else
    v10 = *(_DWORD *)(v9 + 84);
  if (v10 <= 0x7FFFFFFF)
    v10 = 0x7FFFFFFF;
  if (v10 >= a3)
  {
    v13 = 0;
    if (a2 <= v10)
      goto LABEL_19;
  }
  else
  {
    if (((*(_DWORD *)(v9 + 64)
         + 7
         + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v11 = a3 - v10 + 1;
    else
      v11 = 2;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    if (a2 <= v10)
LABEL_19:
      __asm { BR              X15 }
  }
  if (((*(_DWORD *)(v9 + 64)
       + 7
       + ((*(_DWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v14 = ~v10 + a2;
    bzero(a1, ((*(_QWORD *)(v9 + 64)+ 7+ ((*(_QWORD *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 16);
    *a1 = v14;
  }
  __asm { BR              X10 }
}

void sub_1000453D8()
{
  uint64_t v0;
  char v1;
  uint64_t v2;

  *(_BYTE *)(v0 + v2) = v1;
  JUMPOUT(0x100045474);
}

void sub_1000453E0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = 0;
  if (v1)
    JUMPOUT(0x1000453E8);
  JUMPOUT(0x100045474);
}

void sub_100045438()
{
  uint64_t v0;
  __int16 v1;
  uint64_t v2;

  *(_WORD *)(v0 + v2) = v1;
  JUMPOUT(0x100045474);
}

void sub_100045440()
{
  uint64_t v0;
  int v1;
  uint64_t v2;

  *(_DWORD *)(v0 + v2) = v1;
  JUMPOUT(0x100045474);
}

uint64_t sub_100045448@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t (*v3)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v4;
  uint64_t v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_WORD *)(v10 + v14) = 0;
  if (!(_DWORD)v11)
    JUMPOUT(0x100045474);
  if ((_DWORD)v13 == v7)
  {
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v4 = v10;
    v5 = v11;
    a1 = v13;
    a2 = v12;
  }
  else
  {
    v4 = (v8 + v10) & v9;
    if ((_DWORD)a1 != v7)
      JUMPOUT(0x100045454);
    v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a3 + 56);
    v5 = v11;
  }
  return v3(v4, v5, a1, a2);
}

uint64_t sub_100045490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t DarwinNotificationHelper.__allocating_init(notificationHandlers:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, 24, 7);
  DarwinNotificationHelper.init(notificationHandlers:)(a1);
  return v3;
}

{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t (**v5)();
  unint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  uint64_t v17;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  unint64_t v25;
  char v26;
  uint64_t (**v27)();
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  id v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  int64_t v38;
  __int128 v39;

  v1 = 0;
  v35 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v36 = (unint64_t)(v2 + 63) >> 6;
  while (1)
  {
    if (v4)
    {
      v6 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      v38 = v1;
      v7 = v6 | (v1 << 6);
    }
    else
    {
      v8 = v1 + 1;
      if (__OFADD__(v1, 1))
        goto LABEL_36;
      if (v8 >= v36)
      {
LABEL_33:
        swift_release(a1);
        return (*(uint64_t (**)(void *))(v34 + 112))(&_swiftEmptyDictionarySingleton);
      }
      v9 = *(_QWORD *)(v35 + 8 * v8);
      v10 = v1 + 1;
      if (!v9)
      {
        v10 = v1 + 2;
        if (v1 + 2 >= v36)
          goto LABEL_33;
        v9 = *(_QWORD *)(v35 + 8 * v10);
        if (!v9)
        {
          v10 = v1 + 3;
          if (v1 + 3 >= v36)
            goto LABEL_33;
          v9 = *(_QWORD *)(v35 + 8 * v10);
          if (!v9)
          {
            v11 = v1 + 4;
            if (v1 + 4 >= v36)
              goto LABEL_33;
            v9 = *(_QWORD *)(v35 + 8 * v11);
            if (!v9)
            {
              while (1)
              {
                v10 = v11 + 1;
                if (__OFADD__(v11, 1))
                  goto LABEL_37;
                if (v10 >= v36)
                  goto LABEL_33;
                v9 = *(_QWORD *)(v35 + 8 * v10);
                ++v11;
                if (v9)
                  goto LABEL_21;
              }
            }
            v10 = v1 + 4;
          }
        }
      }
LABEL_21:
      v4 = (v9 - 1) & v9;
      v38 = v10;
      v7 = __clz(__rbit64(v9)) + (v10 << 6);
    }
    v12 = 16 * v7;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v7 + 8);
    v15 = swift_allocObject(&unk_100073A00, 32, 7);
    v39 = *(_OWORD *)(v13 + v12);
    *(_OWORD *)(v15 + 16) = v39;
    swift_bridgeObjectRetain(v14);
    swift_retain(*((_QWORD *)&v39 + 1));
    v16 = String._bridgeToObjectiveC()();
    v17 = swift_allocObject(&unk_100073A28, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_1000111B8;
    *(_QWORD *)(v17 + 24) = v15;
    swift_retain(v15);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v20 = sub_1000464C0((uint64_t)v16);
    v21 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v22 = (v19 & 1) == 0;
    v23 = v21 + v22;
    if (__OFADD__(v21, v22))
      break;
    v24 = v19;
    if (*((_QWORD *)&_swiftEmptyDictionarySingleton + 3) >= v23)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v19 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_100046990();
        if ((v24 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100046540(v23, isUniquelyReferenced_nonNull_native);
      v25 = sub_1000464C0((uint64_t)v16);
      if ((v24 & 1) != (v26 & 1))
        goto LABEL_38;
      v20 = v25;
      if ((v24 & 1) != 0)
      {
LABEL_4:
        v5 = (uint64_t (**)())(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v20);
        swift_release(v5[1]);
        *v5 = sub_1000111B8;
        v5[1] = (uint64_t (*)())v17;
        goto LABEL_5;
      }
    }
    *((_QWORD *)&_swiftEmptyDictionarySingleton + (v20 >> 6) + 8) |= 1 << v20;
    *(_QWORD *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 6) + 8 * v20) = v16;
    v27 = (uint64_t (**)())(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v20);
    *v27 = sub_1000111B8;
    v27[1] = (uint64_t (*)())v17;
    v28 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (v29)
      goto LABEL_35;
    *((_QWORD *)&_swiftEmptyDictionarySingleton + 2) = v30;
    v31 = v16;
LABEL_5:
    swift_release(v15);
    swift_bridgeObjectRelease(v14);

    swift_bridgeObjectRelease(0x8000000000000000);
    v1 = v38;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  type metadata accessor for CFString();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v33);
  __break(1u);
  return result;
}

uint64_t DarwinNotificationHelper.init(notificationHandlers:)(uint64_t a1)
{
  _QWORD *v1;
  const void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  void (*v12)(const void *, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  __int128 v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  int64_t v28;
  unint64_t v29;
  int64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  __CFString *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t result;
  uint64_t v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  void (*v55)(char *, uint64_t);
  uint64_t (*v56)(char *);
  uint64_t v57;
  CFNotificationCenterRef v58;
  int64_t v59;
  uint64_t v60;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v52 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v9 = (char *)&v48 - v8;
  v58 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v58)
    goto LABEL_30;
  v1[2] = a1;
  swift_bridgeObjectRetain(a1);
  v10 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  v11 = *v10;
  v12 = *(void (**)(const void *, __n128))(*(_QWORD *)*v10 + 120);
  v13 = swift_retain(*v10);
  v12(v2, v13);
  swift_release(v11);
  v14 = sub_1000306DC();
  v56 = *(uint64_t (**)(char *))(v5 + 16);
  v57 = v14;
  v15 = v56(v9);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Setup darwin callback handlers", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v55 = *(void (**)(char *, uint64_t))(v5 + 8);
  v55(v9, v4);
  v20 = 0;
  v21 = *(_QWORD *)(a1 + 64);
  v53 = a1 + 64;
  v22 = 1 << *(_BYTE *)(a1 + 32);
  v23 = -1;
  if (v22 < 64)
    v23 = ~(-1 << v22);
  v24 = v23 & v21;
  v54 = (unint64_t)(v22 + 63) >> 6;
  *(_QWORD *)&v19 = 136315138;
  v50 = v19;
  v49 = (char *)&type metadata for Any + 8;
  v25 = v52;
  v51 = a1;
  while (1)
  {
    if (v24)
    {
      v26 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      v59 = v20;
      v27 = v26 | (v20 << 6);
      goto LABEL_25;
    }
    v28 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v28 >= v54)
      goto LABEL_27;
    v29 = *(_QWORD *)(v53 + 8 * v28);
    v30 = v20 + 1;
    if (!v29)
    {
      v30 = v20 + 2;
      if (v20 + 2 >= v54)
        goto LABEL_27;
      v29 = *(_QWORD *)(v53 + 8 * v30);
      if (!v29)
      {
        v30 = v20 + 3;
        if (v20 + 3 >= v54)
          goto LABEL_27;
        v29 = *(_QWORD *)(v53 + 8 * v30);
        if (!v29)
          break;
      }
    }
LABEL_24:
    v24 = (v29 - 1) & v29;
    v59 = v30;
    v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_25:
    v32 = *(void **)(*(_QWORD *)(a1 + 48) + 8 * v27);
    v33 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 16 * v27 + 8);
    ((void (*)(char *, uint64_t, uint64_t))v56)(v25, v57, v4);
    v34 = v32;
    swift_retain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(12, -1);
      v39 = v2;
      v40 = swift_slowAlloc(32, -1);
      v60 = v40;
      *(_DWORD *)v38 = v50;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v34);
      v42 = v4;
      v44 = v43;
      *(_QWORD *)(v38 + 4) = sub_100002CA8(v41, v43, &v60);

      v45 = v44;
      v4 = v42;
      v25 = v52;
      swift_bridgeObjectRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Setting up darwin callback handler for %s", (uint8_t *)v38, 0xCu);
      swift_arrayDestroy(v40, 1, v49);
      v46 = v40;
      v2 = v39;
      a1 = v51;
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
    v55(v25, v4);
    CFNotificationCenterAddObserver(v58, v2, (CFNotificationCallback)sub_1000459A0, v34, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    swift_release(v33);

    v20 = v59;
  }
  v31 = v20 + 4;
  if (v20 + 4 >= v54)
  {
LABEL_27:
    swift_release(a1);

    return (uint64_t)v2;
  }
  v29 = *(_QWORD *)(v53 + 8 * v31);
  if (v29)
  {
    v30 = v20 + 4;
    goto LABEL_24;
  }
  while (1)
  {
    v30 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v30 >= v54)
      goto LABEL_27;
    v29 = *(_QWORD *)(v53 + 8 * v30);
    ++v31;
    if (v29)
      goto LABEL_24;
  }
LABEL_29:
  __break(1u);
LABEL_30:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ALL, 0x80000001000679C0, "bluetoothuserd/DarwinNotificationHelper.swift", 45, 2, 16, 0);
  __break(1u);
  return result;
}

void sub_1000459A0(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v8;
  id v9;
  id v10;

  v8 = a1;
  v9 = a3;
  v10 = a5;
  sub_100046C48(a2, a3);

}

void DarwinNotificationHelper.deinit()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  void (*v8)(_QWORD *, __n128);
  __n128 v9;
  __CFNotificationCenter *v10;
  __CFNotificationCenter *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  __CFString *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  __n128 v44;
  uint64_t v45;
  __CFNotificationCenter *v46;
  uint64_t v47;
  int64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = DarwinNotificationManager.shared.unsafeMutableAddressor();
  v7 = *v6;
  v8 = *(void (**)(_QWORD *, __n128))(*(_QWORD *)*v6 + 128);
  v9 = swift_retain(*v6);
  v8(v1, v9);
  swift_release(v7);
  v10 = CFNotificationCenterGetDarwinNotifyCenter();
  if (!v10)
  {
LABEL_26:
    swift_bridgeObjectRelease(v1[2]);
    return;
  }
  v11 = v10;
  v12 = v1[2];
  v13 = *(_QWORD *)(v12 + 64);
  v47 = v12 + 64;
  v14 = 1 << *(_BYTE *)(v12 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & v13;
  v48 = (unint64_t)(v14 + 63) >> 6;
  v17 = swift_bridgeObjectRetain(v12);
  v18 = 0;
  v17.n128_u64[0] = 136315138;
  v44 = v17;
  v43 = (char *)&type metadata for Any + 8;
  v45 = v12;
  v46 = v11;
  while (1)
  {
    if (v16)
    {
      v51 = (v16 - 1) & v16;
      v20 = __clz(__rbit64(v16)) | (v18 << 6);
      goto LABEL_23;
    }
    v21 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v48)
      goto LABEL_25;
    v22 = *(_QWORD *)(v47 + 8 * v21);
    ++v18;
    if (!v22)
    {
      v18 = v21 + 1;
      if (v21 + 1 >= v48)
        goto LABEL_25;
      v22 = *(_QWORD *)(v47 + 8 * v18);
      if (!v22)
      {
        v18 = v21 + 2;
        if (v21 + 2 >= v48)
          goto LABEL_25;
        v22 = *(_QWORD *)(v47 + 8 * v18);
        if (!v22)
          break;
      }
    }
LABEL_22:
    v51 = (v22 - 1) & v22;
    v20 = __clz(__rbit64(v22)) + (v18 << 6);
LABEL_23:
    v24 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 16 * v20 + 8);
    v25 = *(id *)(*(_QWORD *)(v12 + 48) + 8 * v20);
    v50 = v24;
    swift_retain(v24);
    v26 = sub_1000306DC();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v26, v2);
    v27 = (__CFString *)v25;
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v52 = v31;
      *(_DWORD *)v30 = v44.n128_u32[0];
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v49 = v18;
      v33 = v5;
      v34 = v3;
      v35 = v2;
      v36 = v1;
      v38 = v37;
      *(_QWORD *)(v30 + 4) = sub_100002CA8(v32, v37, &v52);

      v39 = v38;
      v1 = v36;
      v2 = v35;
      v3 = v34;
      v5 = v33;
      v18 = v49;
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Remove darwin callback handler for %s", (uint8_t *)v30, 0xCu);
      swift_arrayDestroy(v31, 1, v43);
      v40 = v31;
      v11 = v46;
      swift_slowDealloc(v40, -1, -1);
      v41 = v30;
      v12 = v45;
      swift_slowDealloc(v41, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v19 = v50;
    v16 = v51;
    CFNotificationCenterRemoveObserver(v11, v1, v27, 0);
    swift_release(v19);

  }
  v23 = v21 + 3;
  if (v23 >= v48)
  {
LABEL_25:
    swift_release(v12);

    goto LABEL_26;
  }
  v22 = *(_QWORD *)(v47 + 8 * v23);
  if (v22)
  {
    v18 = v23;
    goto LABEL_22;
  }
  while (1)
  {
    v18 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v18 >= v48)
      goto LABEL_25;
    v22 = *(_QWORD *)(v47 + 8 * v18);
    ++v23;
    if (v22)
      goto LABEL_22;
  }
LABEL_28:
  __break(1u);
}

uint64_t DarwinNotificationHelper.__deallocating_deinit()
{
  uint64_t v0;

  DarwinNotificationHelper.deinit();
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Void __swiftcall DarwinNotificationHelper.onNotification(notificationName:)(CFStringRef notificationName)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __CFString *v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD);
  uint64_t v14;
  __CFString *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint8_t *v28;
  void (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 16);
  if (*(_QWORD *)(v7 + 16))
  {
    v8 = (id)notificationName;
    swift_bridgeObjectRetain(v7);
    v9 = sub_1000464C0((uint64_t)v8);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(v7 + 56) + 16 * v9;
      v13 = *(void (**)(_QWORD))v11;
      v12 = *(_QWORD *)(v11 + 8);
      swift_retain(v12);

      swift_bridgeObjectRelease(v7);
      v14 = sub_1000306DC();
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
      v15 = v8;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v30 = v12;
        v18 = swift_slowAlloc(12, -1);
        v29 = v13;
        v19 = (uint8_t *)v18;
        v20 = swift_slowAlloc(32, -1);
        v32 = v20;
        *(_DWORD *)v19 = 136315138;
        v28 = v19 + 4;
        v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
        v23 = v22;
        v31 = sub_100002CA8(v21, v22, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28, v19 + 12);

        v24 = v23;
        v12 = v30;
        swift_bridgeObjectRelease(v24);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invoking callback, notification, %s", v19, 0xCu);
        swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v20, -1, -1);
        v25 = v19;
        v13 = v29;
        swift_slowDealloc(v25, -1, -1);

      }
      else
      {

      }
      v26 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
      v13(v26);
      swift_release(v12);
    }
    else
    {

      swift_bridgeObjectRelease(v7);
    }
  }
}

uint64_t sub_100046374(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006233C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000463B0(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_10006233C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_1000463F8(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;
  _QWORD v5[9];

  Hasher.init(_seed:)(v5, a1);
  WitnessTable = swift_getWitnessTable(&unk_10006233C, a2);
  _CFObject.hash(into:)(v5, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100046450(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_10006233C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_10004649C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1000464C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, *(_QWORD *)(v1 + 40));
  type metadata accessor for CFString();
  v4 = v3;
  v5 = sub_100046C08(&qword_10007BCF8, (uint64_t)&unk_10006233C);
  _CFObject.hash(into:)(v8, v4, v5);
  v6 = Hasher._finalize()();
  return sub_100046858(a1, v6);
}

void sub_100046540(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::Int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int64_t v25;
  _QWORD *v26;
  unint64_t v27;
  int64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000215C(&qword_10007BCF0);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  swift_retain(v5);
  v14 = 0;
  while (1)
  {
    if (v11)
    {
      v23 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v24 = v23 | (v14 << 6);
      goto LABEL_34;
    }
    v25 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v25 >= v12)
      break;
    v26 = (_QWORD *)(v5 + 64);
    v27 = *(_QWORD *)(v36 + 8 * v25);
    ++v14;
    if (!v27)
    {
      v14 = v25 + 1;
      if (v25 + 1 >= v12)
        goto LABEL_36;
      v27 = *(_QWORD *)(v36 + 8 * v14);
      if (!v27)
      {
        v28 = v25 + 2;
        if (v28 >= v12)
        {
LABEL_36:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v27 = *(_QWORD *)(v36 + 8 * v28);
        if (!v27)
        {
          while (1)
          {
            v14 = v28 + 1;
            if (__OFADD__(v28, 1))
              goto LABEL_45;
            if (v14 >= v12)
              goto LABEL_36;
            v27 = *(_QWORD *)(v36 + 8 * v14);
            ++v28;
            if (v27)
              goto LABEL_33;
          }
        }
        v14 = v28;
      }
    }
LABEL_33:
    v11 = (v27 - 1) & v27;
    v24 = __clz(__rbit64(v27)) + (v14 << 6);
LABEL_34:
    v33 = *(void **)(*(_QWORD *)(v5 + 48) + 8 * v24);
    v37 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v24);
    if ((a2 & 1) == 0)
    {
      v34 = v33;
      swift_retain(*((_QWORD *)&v37 + 1));
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    type metadata accessor for CFString();
    v16 = v15;
    v17 = sub_100046C08(&qword_10007BCF8, (uint64_t)&unk_10006233C);
    _CFObject.hash(into:)(v38, v16, v17);
    v18 = Hasher._finalize()();
    v19 = -1 << *(_BYTE *)(v8 + 32);
    v20 = v18 & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v13 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v31 = v21 == v30;
        if (v21 == v30)
          v21 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v13 + 8 * v21);
      }
      while (v32 == -1);
      v22 = __clz(__rbit64(~v32)) + (v21 << 6);
    }
    *(_QWORD *)(v13 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v22) = v33;
    *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v22) = v37;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v26 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v26, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v26 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_100046858(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString();
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100046C08(&qword_10007BCF8, (uint64_t)&unk_10006233C);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

void sub_100046990()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  __int128 v23;

  v1 = v0;
  sub_10000215C(&qword_10007BCF0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v20 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v20 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      v9 = v20 + 1;
      if (v20 + 1 >= v13)
        goto LABEL_26;
      v21 = *(_QWORD *)(v6 + 8 * v9);
      if (!v21)
        break;
    }
LABEL_25:
    v12 = (v21 - 1) & v21;
    v15 = __clz(__rbit64(v21)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v23 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v23;
    v19 = v17;
    swift_retain(*((_QWORD *)&v23 + 1));
  }
  v22 = v20 + 2;
  if (v22 >= v13)
    goto LABEL_26;
  v21 = *(_QWORD *)(v6 + 8 * v22);
  if (v21)
  {
    v9 = v22;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v21 = *(_QWORD *)(v6 + 8 * v9);
    ++v22;
    if (v21)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void type metadata accessor for CFString()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10007BCD8)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100073A50);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007BCD8);
  }
}

uint64_t type metadata accessor for DarwinNotificationHelper()
{
  return objc_opt_self(_TtC14bluetoothuserd24DarwinNotificationHelper);
}

uint64_t sub_100046BC0()
{
  return sub_100046C08(&qword_10007BCE0, (uint64_t)&unk_1000622CC);
}

uint64_t sub_100046BE4()
{
  return sub_100046C08(&qword_10007BCE8, (uint64_t)&unk_1000622F8);
}

uint64_t sub_100046C08(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    type metadata accessor for CFString();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

void sub_100046C48(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  void (*v34)(id, __n128);
  id v35;
  __n128 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  v13 = (char *)&v37 - v12;
  if (a1)
  {
    if (a2)
    {
      v14 = a2;
      v15 = sub_1000306DC();
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v15, v4);
      v16 = v14;
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v38 = swift_slowAlloc(32, -1);
        v40 = v38;
        *(_DWORD *)v19 = 136315138;
        v37 = v19 + 4;
        v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        v22 = v21;
        v39 = sub_100002CA8(v20, v21, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v37, v19 + 12);

        swift_bridgeObjectRelease(v22);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got darwin notification, %s", v19, 0xCu);
        v23 = v38;
        swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      v34 = *(void (**)(id, __n128))(*(_QWORD *)a1 + 120);
      v35 = v16;
      v36 = swift_retain(a1);
      v34(v35, v36);
      swift_release(a1);

    }
    else
    {
      v29 = sub_1000306DC();
      v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v29, v4);
      v31 = Logger.logObject.getter(v30);
      v32 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "cfNotificationName for darwin callback handler not found", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
    }
  }
  else
  {
    v24 = sub_1000306DC();
    v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v13, v24, v4);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, (os_log_type_t)v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, (os_log_type_t)v27, "Observer for darwin callback handler not found", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
  }
}

BOOL static DeviceLockState.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DeviceLockState.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int DeviceLockState.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

void sub_100047038(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  NSString v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  HIDWORD(v26) = 0;
  v10 = String._bridgeToObjectiveC()();
  v11 = MGCopyAnswerWithError(v10, 0, (char *)&v26 + 4);

  if (v11)
  {
    if (HIDWORD(v26))
    {
      v12 = sub_1000306DC();
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v12, v6);
      v13 = swift_bridgeObjectRetain_n(a2, 2);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter();
      v16 = v15;
      if (os_log_type_enabled(v14, v15))
      {
        v17 = swift_slowAlloc(22, -1);
        v24 = swift_slowAlloc(64, -1);
        v29 = v24;
        *(_DWORD *)v17 = 136315394;
        v23 = v16;
        swift_bridgeObjectRetain(a2);
        v27 = sub_100002CA8(a1, a2, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        *(_WORD *)(v17 + 12) = 2080;
        swift_beginAccess((char *)&v26 + 4, &v27, 0, 0);
        LODWORD(v25) = HIDWORD(v26);
        v18 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
        v20 = v19;
        v25 = sub_100002CA8(v18, v19, &v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v17 + 14, v17 + 22);
        swift_bridgeObjectRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v23, "MGCopyAnswerWithError error for key: %s -> %s", (uint8_t *)v17, 0x16u);
        v21 = v24;
        swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v17, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }
    *(_QWORD *)(a3 + 24) = swift_getObjectType(v11);
    *(_QWORD *)a3 = v11;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
}

uint64_t SystemInfo.deviceName.getter()
{
  return sub_10004764C(0xD000000000000016, 0x8000000100067A30);
}

uint64_t SystemInfo.productType.getter()
{
  return sub_10004764C(0x54746375646F7250, 0xEB00000000657079);
}

uint64_t SystemInfo.buildVersion.getter()
{
  return sub_10004764C(0x726556646C697542, 0xEC0000006E6F6973);
}

uint64_t SystemInfo.osVersion.getter()
{
  return sub_10004764C(0x56746375646F7250, 0xEE006E6F69737265);
}

uint64_t SystemInfo.uniqueDeviceID.getter()
{
  return sub_10004764C(0x6544657571696E55, 0xEE00444965636976);
}

uint64_t SystemInfo.ecid.getter()
{
  return sub_1000473D8(0x6843657571696E55, 0xEC00000044497069, (uint64_t)&type metadata for Int64);
}

uint64_t SystemInfo.chipID.getter()
{
  return sub_1000473D8(0x444970696843, 0xE600000000000000, (uint64_t)&type metadata for Int);
}

uint64_t sub_1000473D8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v6[24];
  uint64_t v7;

  sub_100047038(a1, a2, (uint64_t)v6);
  if (v7)
  {
    if (swift_dynamicCast(&v5, v6, (char *)&type metadata for Any + 8, a3, 6))
      return v5;
    else
      return 0;
  }
  else
  {
    sub_100006C5C((uint64_t)v6);
    return 0;
  }
}

BOOL SystemInfo.internalBuild.getter()
{
  return IsAppleInternalBuild() != 0;
}

uint64_t SystemInfo.underTest.getter(uint64_t a1)
{
  id v1;
  id v2;
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;

  if (!IsAppleInternalBuild(a1))
    return 0;
  v1 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v2 = objc_msgSend(v1, "environment");

  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v3 + 16) && (v4 = sub_10002861C(0xD00000000000001BLL, 0x8000000100067590), (v5 & 1) != 0))
  {
    v6 = *(_QWORD *)(*(_QWORD *)(v3 + 56) + 16 * v4 + 8);
    swift_bridgeObjectRetain(v6);
    v7 = 1;
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v6);
  return v7;
}

BOOL SystemInfo.deviceFirstUnlocked.getter()
{
  return MKBDeviceUnlockedSinceBoot() == 1;
}

uint64_t SystemInfo.lockState.getter()
{
  int v0;
  uint64_t result;

  v0 = MKBGetDeviceLockState(0);
  result = 5;
  switch(v0)
  {
    case 0:
      result = 3;
      break;
    case 1:
      if (MKBDeviceUnlockedSinceBoot(5))
        result = 2;
      else
        result = 1;
      break;
    case 2:
      result = 4;
      break;
    case 3:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t SystemInfo.regionCode.getter()
{
  return sub_10004764C(0xD000000000000016, 0x8000000100067A50);
}

uint64_t SystemInfo.hardwareModel.getter()
{
  return sub_10004764C(0xD000000000000016, 0x8000000100067A70);
}

uint64_t SystemInfo.architecture.getter()
{
  return sub_10004764C(0xD000000000000016, 0x8000000100067A90);
}

uint64_t sub_10004764C(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  sub_100047038(a1, a2, (uint64_t)v4);
  if (v5)
  {
    if (swift_dynamicCast(&v3, v4, (char *)&type metadata for Any + 8, &type metadata for String, 6))
      return v3;
  }
  else
  {
    sub_100006C5C((uint64_t)v4);
  }
  return 0;
}

unint64_t sub_1000476C0()
{
  unint64_t result;

  result = qword_10007BD00;
  if (!qword_10007BD00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DeviceLockState, &type metadata for DeviceLockState);
    atomic_store(result, (unint64_t *)&qword_10007BD00);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for DeviceLockState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceLockState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000477E0 + 4 * byte_100062379[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100047814 + 4 * byte_100062374[v4]))();
}

uint64_t sub_100047814(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10004781C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100047824);
  return result;
}

uint64_t sub_100047830(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100047838);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10004783C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100047844(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DeviceLockState()
{
  return &type metadata for DeviceLockState;
}

ValueMetadata *type metadata accessor for SystemInfo()
{
  return &type metadata for SystemInfo;
}

unint64_t sub_100047870()
{
  uint64_t v0;
  uint64_t inited;
  NSString *v2;
  unint64_t result;
  _BYTE v4[72];

  v0 = sub_10000215C(&qword_10007BD08);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_1000606F0;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
  *(_QWORD *)(inited + 40) = 492;
  v2 = NSFilePosixPermissions;
  result = sub_1000478E8(inited);
  qword_100080B48 = result;
  return result;
}

unint64_t sub_1000478E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000215C(&qword_10007B7F0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_100048028(v7, (uint64_t)&v14);
    v8 = v14;
    result = sub_10003CB18(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100006C4C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

double sub_100047A00()
{
  double result;
  _BYTE v1[24];

  if (qword_100080130 != -1)
    swift_once(&qword_100080130, sub_100047870);
  swift_beginAccess(&qword_100080B48, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(qword_100080B48).n128_u64[0];
  return result;
}

uint64_t sub_100047A6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  unsigned int v17;
  NSURL *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  _QWORD *v31;
  void *v32;
  void *v33;
  Class isa;
  unsigned int v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  void *v48;
  _QWORD *v49;
  uint64_t v50;
  uint8_t *v51;
  uint8_t *v53;
  uint8_t *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  id v61;
  uint64_t v62;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v56 = v6;
  v57 = v7;
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v12 = (char *)&v53 - v11;
  v13 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v60 = 0;
  URL.path.getter();
  v15 = v14;
  v16 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v15);
  v17 = objc_msgSend(v13, "fileExistsAtPath:isDirectory:", v16, &v60);

  if (v17)
  {
    if ((v60 & 1) == 0)
    {
      v19 = sub_100030858();
      v20 = v56;
      (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v12, v19, v56);
      v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = (_QWORD *)swift_slowAlloc(32, -1);
        v61 = v55;
        *(_DWORD *)v24 = 136315138;
        v25 = v24 + 12;
        v53 = v24 + 4;
        v54 = v24;
        v26 = sub_10000219C(&qword_10007B3A0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v27 = dispatch thunk of CustomStringConvertible.description.getter(v2, v26);
        v29 = v28;
        v58 = sub_100002CA8(v27, v28, (uint64_t *)&v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v53, v25);
        swift_bridgeObjectRelease(v29);
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        v30 = v54;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Expected a directory, but is a file: %s", v54, 0xCu);
        v31 = v55;
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v56);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);

        (*(void (**)(char *, uint64_t))(v57 + 8))(v12, v20);
      }
      return v17 ^ 1;
    }
LABEL_7:

    return v17 ^ 1;
  }
  URL._bridgeToObjectiveC()(v18);
  v33 = v32;
  type metadata accessor for FileAttributeKey(0);
  sub_10000219C(&qword_10007B7D0, (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey, (uint64_t)&unk_100061FA0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v61 = 0;
  v35 = objc_msgSend(v13, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v33, 1, isa, &v61);

  v36 = v61;
  if (v35)
  {
    v37 = v61;
    goto LABEL_7;
  }
  v38 = v61;
  v39 = _convertNSErrorToError(_:)(v36);

  swift_willThrow(v40);
  v41 = sub_100030858();
  v42 = v56;
  v43 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v10, v41, v56);
  swift_errorRetain(v39);
  v44 = swift_errorRetain(v39);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v47 = 138412290;
    swift_errorRetain(v39);
    v48 = (void *)_swift_stdlib_bridgeErrorToNSError(v39);
    v61 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v47 + 4, v47 + 12);
    v49 = v55;
    v42 = v56;
    *v55 = v48;
    swift_errorRelease(v39);
    swift_errorRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "createDirectory error: %@", v47, 0xCu);
    v50 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v49, 1, v50);
    swift_slowDealloc(v49, -1, -1);
    v51 = v47;
    v43 = v57;
    swift_slowDealloc(v51, -1, -1);

    swift_errorRelease(v39);
  }
  else
  {

    swift_errorRelease(v39);
    swift_errorRelease(v39);
    swift_errorRelease(v39);

  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v42);
  return v17 ^ 1;
}

uint64_t sub_100047FB4(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v5 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, 1, 0, 0);

  return v5;
}

uint64_t sub_100048028(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C((uint64_t *)&unk_10007BD10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

id sub_100048070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  char *v7;
  objc_super v9;

  v7 = (char *)objc_allocWithZone(v3);
  *(_QWORD *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

uint64_t type metadata accessor for XPCConnection()
{
  return objc_opt_self(_TtC14bluetoothuserd13XPCConnection);
}

id sub_100048104()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection), "invalidate");
}

id sub_100048148()
{
  return sub_10004D4FC(type metadata accessor for XPCConnection);
}

uint64_t sub_1000482CC(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t (*v10)(void);

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  if (a1)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  v3[4] = v6;
  v7 = unk_10007BD44;
  v10 = (uint64_t (*)(void))((char *)&dword_10007BD40 + dword_10007BD40);
  a3;
  v8 = (_QWORD *)swift_task_alloc(v7);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_100051844;
  return v10();
}

uint64_t sub_100048380()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[4] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[5] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[6] = v3;
  v1[7] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004840C, 0, 0);
}

uint64_t sub_10004840C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *log;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 32)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
  {
    v12 = sub_10004F8F8();
    v13 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v12, 0, 0);
    *v14 = 1;
    swift_willThrow(v13);
LABEL_7:
    swift_task_dealloc(*(_QWORD *)(v0 + 56));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v2 = v1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 440))();
  if (!v3)
  {
    v15 = sub_10004F8F8();
    v16 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v15, 0, 0);
    *v17 = 1;
    swift_willThrow(v16);
    swift_release(v2);
    goto LABEL_7;
  }
  v4 = v3;
  v5 = (void *)objc_opt_self(CBDiscovery);
  *(_QWORD *)(v0 + 16) = 0;
  v6 = objc_msgSend(v5, "devicesWithDiscoveryFlags:error:", 0x800000, v0 + 16);
  v7 = *(void **)(v0 + 16);
  if (v6)
  {
    v8 = v6;
    v9 = sub_100011254(0, &qword_10007BD58, CBDevice_ptr);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v8, v9);
    v11 = v7;

  }
  else
  {
    v19 = v7;
    v20 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v21);
    swift_errorRelease(v20);
    v10 = 0;
  }
  v23 = *(_QWORD *)(v0 + 48);
  v22 = *(_QWORD *)(v0 + 56);
  v24 = *(_QWORD *)(v0 + 40);
  v25 = (*(uint64_t (**)(void))(*(_QWORD *)v4 + 200))();
  swift_bridgeObjectRetain(v10);
  swift_retain(v4);
  v26 = sub_10004FACC(v25, v10, v4);
  swift_release(v4);
  swift_bridgeObjectRelease_n(v10, 2);
  swift_bridgeObjectRelease(v25);
  v27 = sub_1000309E4();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16))(v22, v27, v24);
  v28 = swift_bridgeObjectRetain_n(v26, 2);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.default.getter();
  v31 = os_log_type_enabled(v29, v30);
  v33 = *(_QWORD *)(v0 + 48);
  v32 = *(_QWORD *)(v0 + 56);
  v34 = *(_QWORD *)(v0 + 40);
  if (v31)
  {
    log = v29;
    v44 = *(_QWORD *)(v0 + 40);
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = swift_slowAlloc(32, -1);
    v45 = v41;
    *(_DWORD *)v35 = 136315138;
    v43 = v32;
    v36 = sub_100011254(0, &qword_10007BD58, CBDevice_ptr);
    swift_bridgeObjectRetain(v26);
    v38 = Array.description.getter(v37, v36);
    v40 = v39;
    swift_bridgeObjectRelease(v26);
    *(_QWORD *)(v0 + 24) = sub_100002CA8(v38, v40, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v35 + 4, v35 + 12);
    swift_bridgeObjectRelease(v40);
    swift_bridgeObjectRelease_n(v26, 2);
    _os_log_impl((void *)&_mh_execute_header, log, v30, "Cloud Paired Devices Metadata: %s", v35, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v35, -1, -1);
    swift_release(v4);
    swift_release(v2);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v43, v44);
  }
  else
  {
    swift_bridgeObjectRelease_n(v26, 2);
    swift_release(v4);
    swift_release(v2);

    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v32, v34);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 56));
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(v26);
}

void sub_100048864(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  id v34;
  NSString v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Class v40;
  id v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v44;
  void *v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  int v48;
  char *v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  char **p_type;
  uint64_t v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  Class isa;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  _QWORD *v95;
  id v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  Class v100;

  v93 = a3;
  v95 = a4;
  v6 = sub_10000215C(&qword_10007BA50);
  __chkstk_darwin(v6);
  v8 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_10000215C((uint64_t *)&unk_10007BD80);
  __chkstk_darwin(v89);
  v90 = (uint64_t)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date(0);
  v92 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v87 = (char *)&v86 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10000215C((uint64_t *)&unk_10007B460);
  v13 = __chkstk_darwin(v12);
  v86 = (uint64_t)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v88 = (char *)&v86 - v16;
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v86 - v18;
  v20 = __chkstk_darwin(v17);
  v91 = (char *)&v86 - v21;
  __chkstk_darwin(v20);
  v99 = (uint64_t)&v86 - v22;
  v23 = (int *)type metadata accessor for CloudPairedDeviceRecord(0);
  v24 = v23[6];
  v98 = a1;
  v25 = (uint64_t *)(a1 + v24);
  v27 = *v25;
  v26 = v25[1];
  v97 = objc_msgSend(objc_allocWithZone((Class)CBDevice), "init");
  v94 = v8;
  if (a2
    && (swift_bridgeObjectRetain(v26),
        swift_bridgeObjectRetain(a2),
        v29 = sub_10004F93C(v28, v27, v26),
        swift_bridgeObjectRelease(a2),
        swift_bridgeObjectRelease(v26),
        v29)
    && (v30 = objc_msgSend(v29, "identifier"), v29, v30))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v32 = v31;

  }
  else
  {
    swift_bridgeObjectRetain(v26);
    v32 = v26;
  }
  v33 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v34 = v97;
  objc_msgSend(v97, "setIdentifier:", v33);

  v35 = String._bridgeToObjectiveC()();
  objc_msgSend(v34, "setIdsDeviceID:", v35);

  v36 = v98;
  v37 = *(_QWORD *)(v98 + v23[10]);
  if ((v37 & 0x8000000000000000) != 0)
    goto LABEL_43;
  v38 = v99;
  if (v37 >= 0x100)
  {
LABEL_44:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    goto LABEL_45;
  }
  objc_msgSend(v34, "setDeviceType:", *(_QWORD *)(v98 + v23[10]));
  v39 = sub_10000219C(&qword_10007BD90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000616E0);
  v40 = sub_10002FDAC((uint64_t)v23, v39);
  v96 = objc_msgSend(objc_allocWithZone((Class)CBControllerInfo), "init");
  objc_msgSend(v96, "setCloudSyncStatus:", 1);
  v100 = v40;
  v41 = -[objc_class recordChangeTag](v40, "recordChangeTag");
  if (v41)
  {

    v42 = v92;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16))(v38, v36 + v23[5], v10);
    v43 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56);
    v43(v38, 0, 1, v10);
    v44 = -[objc_class modificationDate](v100, "modificationDate");
    if (v44)
    {
      v45 = v44;
      v46 = v87;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v44);

      v47 = *(void (**)(char *, char *, uint64_t))(v42 + 32);
      v47(v19, v46, v10);
      v43((uint64_t)v19, 0, 1, v10);
      v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 48))(v19, 1, v10);
      v49 = v88;
      if (v48 != 1)
      {
        v50 = (uint64_t)v91;
        v47(v91, v19, v10);
        v43(v50, 0, 1, v10);
        goto LABEL_17;
      }
    }
    else
    {
      v43((uint64_t)v19, 1, 1, v10);
      v49 = v88;
    }
    v51 = -[objc_class creationDate](v100, "creationDate");
    if (v51)
    {
      v52 = v51;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

      v53 = 0;
    }
    else
    {
      v53 = 1;
    }
    v43((uint64_t)v49, v53, 1, v10);
    v54 = (uint64_t)v49;
    v50 = (uint64_t)v91;
    sub_100004064(v54, (uint64_t)v91, (uint64_t *)&unk_10007B460);
    sub_10000BCBC((uint64_t)v19, (uint64_t *)&unk_10007B460);
LABEL_17:
    v55 = v90;
    v56 = v90 + *(int *)(v89 + 48);
    v57 = v99;
    sub_10001128C(v99, v90, (uint64_t *)&unk_10007B460);
    sub_10001128C(v50, v56, (uint64_t *)&unk_10007B460);
    v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (v58(v55, 1, v10) == 1)
    {
      sub_10000BCBC(v50, (uint64_t *)&unk_10007B460);
      sub_10000BCBC(v57, (uint64_t *)&unk_10007B460);
      v59 = v58(v56, 1, v10);
      v34 = v97;
      v36 = v98;
      if (v59 == 1)
      {
        sub_10000BCBC(v55, (uint64_t *)&unk_10007B460);
        v60 = 3;
        p_type = (char **)(&stru_100078FF0 + 16);
LABEL_24:
        v41 = objc_msgSend(v96, p_type[504], v60);
        goto LABEL_25;
      }
    }
    else
    {
      v62 = v86;
      sub_10001128C(v55, v86, (uint64_t *)&unk_10007B460);
      if (v58(v56, 1, v10) != 1)
      {
        v78 = v92;
        v79 = v87;
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 32))(v87, v56, v10);
        v80 = sub_10000219C(&qword_10007BD98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v89) = dispatch thunk of static Equatable.== infix(_:_:)(v62, v79, v10, v80);
        v81 = *(void (**)(char *, uint64_t))(v78 + 8);
        v81(v79, v10);
        sub_10000BCBC((uint64_t)v91, (uint64_t *)&unk_10007B460);
        sub_10000BCBC(v99, (uint64_t *)&unk_10007B460);
        v81((char *)v62, v10);
        sub_10000BCBC(v55, (uint64_t *)&unk_10007B460);
        v34 = v97;
        v36 = v98;
        p_type = (char **)(&stru_100078FF0 + 16);
        if ((v89 & 1) != 0)
        {
          v60 = 3;
          goto LABEL_24;
        }
        goto LABEL_23;
      }
      sub_10000BCBC((uint64_t)v91, (uint64_t *)&unk_10007B460);
      sub_10000BCBC(v99, (uint64_t *)&unk_10007B460);
      (*(void (**)(uint64_t, uint64_t))(v92 + 8))(v62, v10);
      v34 = v97;
      v36 = v98;
    }
    sub_10000BCBC(v55, (uint64_t *)&unk_10007BD80);
    p_type = &stru_100078FF0.type;
LABEL_23:
    v60 = 2;
    goto LABEL_24;
  }
LABEL_25:
  v63 = (uint64_t)v94;
  (*(void (**)(id))(*(_QWORD *)v93 + 168))(v41);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((_QWORD *)v23 - 1) + 48))(v63, 1, v23) == 1)
  {
    sub_10000BCBC(v63, &qword_10007BA50);
    v64 = v96;
  }
  else
  {
    v65 = sub_100034048();
    v67 = v66;
    sub_100034AE0(v63);
    if (v67 >> 60 == 15)
    {
      v64 = v96;
    }
    else
    {
      v68 = *(_QWORD *)(v36 + v23[9]);
      v69 = *(_QWORD *)(v68 + 16);
      if (v69)
      {
        swift_bridgeObjectRetain(v68);
        v70 = v69 - 1;
        v99 = v71;
        v72 = (unint64_t *)(v71 + 40);
        do
        {
          v73 = v70;
          v75 = *(v72 - 1);
          v74 = *v72;
          sub_10000971C(v75, *v72);
          sub_10004E848(v75, v74);
          v77 = v76;
          sub_1000093EC(v75, v74);
          if ((v77 & 1) != 0)
            break;
          v70 = v73 - 1;
          v72 += 2;
        }
        while (v73);
        swift_bridgeObjectRelease(v99);
        v34 = v97;
        v36 = v98;
      }
      else
      {
        v77 = 0;
      }
      v64 = v96;
      objc_msgSend(v96, "setFastLEConnectionAllowed:", v77 & 1);
      sub_1000093D8(v65, v67);
    }
  }
  isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v64, "setFastLEConnectionInfoData:", isa);

  v83 = *(_QWORD *)(v36 + v23[7]);
  if ((v83 & 0x8000000000000000) != 0)
    goto LABEL_43;
  if (v83 >= 0x100)
    goto LABEL_44;
  objc_msgSend(v64, "setFastLEConnectionInfoVersion:", *(_QWORD *)(v36 + v23[7]));
  v84 = *(_QWORD *)(v36 + v23[12]);
  if ((v84 & 0x8000000000000000) == 0)
  {
    if (!HIDWORD(v84))
    {
      objc_msgSend(v64, "setSupportedServices:");
      v85 = v64;
      objc_msgSend(v34, "setControllerInfo:", v85);

      *v95 = v34;
      return;
    }
    goto LABEL_44;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
LABEL_45:
  __break(1u);
}

uint64_t sub_1000492C0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10007BD4C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100049320;
  return sub_100048380();
}

uint64_t sub_100049320(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  void (**v12)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v6 = *(_QWORD *)(*v2 + 32);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v6);

  if (v3)
  {
    v9 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v11 = (void *)v9;
  }
  else
  {
    sub_100011254(0, &qword_10007BD58, CBDevice_ptr);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v9 = 0;
    v11 = isa;
  }
  v12 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v12)[2](v12, isa, v9);

  _Block_release(v12);
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_1000493FC(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10000215C(&qword_10007BA50);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CloudPairedDeviceRecord(0);
  v2[5] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[6] = v5;
  v6 = (*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v6);
  v2[8] = swift_task_alloc(v6);
  return swift_task_switch(sub_100049490, 0, 0);
}

uint64_t sub_100049490()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(*(id *)(v0 + 16), "idsDeviceID");
    if (v3)
    {
      v4 = v3;
      v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
      v7 = v6;

      v8 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 440))();
      if (v8)
      {
        v9 = v8;
        v10 = (*(uint64_t (**)(void))(*(_QWORD *)v8 + 200))();
        v11 = v10;
        v12 = *(_QWORD *)(v10 + 16);
        if (v12)
        {
          v14 = *(_QWORD *)(v0 + 40);
          v13 = *(_QWORD *)(v0 + 48);
          v43 = v10;
          v15 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          v16 = *(_QWORD *)(v13 + 72);
          while (1)
          {
            v17 = *(_QWORD *)(v0 + 56);
            sub_100034A9C(v15, v17);
            v18 = (_QWORD *)(v17 + *(int *)(v14 + 24));
            v19 = v18[1];
            v20 = *v18 == v5 && v19 == v7;
            if (v20 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, v5, v7, 0) & 1) != 0)
              break;
            sub_100034AE0(*(_QWORD *)(v0 + 56));
            v15 += v16;
            if (!--v12)
            {
              v21 = 1;
              v11 = v43;
              goto LABEL_19;
            }
          }
          sub_100040534(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 32));
          v21 = 0;
          v11 = v43;
        }
        else
        {
          v21 = 1;
        }
LABEL_19:
        v30 = *(_QWORD *)(v0 + 40);
        v31 = *(_QWORD *)(v0 + 48);
        v32 = *(_QWORD *)(v0 + 32);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v31 + 56))(v32, v21, 1, v30);
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v7);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) != 1)
        {
          v41 = *(_QWORD *)(v0 + 56);
          v40 = *(_QWORD *)(v0 + 64);
          v42 = *(_QWORD *)(v0 + 32);
          sub_100040534(v42, v40);
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 344))(v40);
          swift_release(v9);
          swift_release(v2);
          sub_100034AE0(v40);
          swift_task_dealloc(v40);
          swift_task_dealloc(v41);
          swift_task_dealloc(v42);
          v38 = *(uint64_t (**)(void))(v0 + 8);
          return v38();
        }
        sub_10000BCBC(*(_QWORD *)(v0 + 32), &qword_10007BA50);
        v33 = sub_10004F8F8();
        v34 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v33, 0, 0);
        *v35 = 2;
        swift_willThrow(v34);
        swift_release(v9);
        goto LABEL_21;
      }
      swift_bridgeObjectRelease(v7);
      v29 = sub_10004F8F8();
      v26 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v29, 0, 0);
      v28 = 1;
    }
    else
    {
      v25 = sub_10004F8F8();
      v26 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v25, 0, 0);
      v28 = 3;
    }
    *v27 = v28;
    swift_willThrow(v26);
LABEL_21:
    swift_release(v2);
    goto LABEL_22;
  }
  v22 = sub_10004F8F8();
  v23 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v22, 0, 0);
  *v24 = 1;
  swift_willThrow(v23);
LABEL_22:
  v36 = *(_QWORD *)(v0 + 56);
  v37 = *(_QWORD *)(v0 + 32);
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  v38 = *(uint64_t (**)(void))(v0 + 8);
  return v38();
}

uint64_t sub_1000498E4(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10007BD64;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_100049960;
  return sub_1000493FC((uint64_t)v7);
}

uint64_t sub_100049960()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(_QWORD *)(*v1 + 40);
  v4 = *(void **)(*v1 + 16);
  v3 = *(void **)(*v1 + 24);
  v5 = *v1;
  swift_task_dealloc(v2);

  v6 = *(_QWORD *)(v5 + 32);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 32), 0);
  }
  _Block_release(*(const void **)(v5 + 32));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_100049A04(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  v2[2] = a1;
  v2[3] = v1;
  v3 = type metadata accessor for CloudPairedDeviceRecord(0);
  v2[4] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100049A5C, 0, 0);
}

uint64_t sub_100049A5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2 = v1;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 440))();
    if (v3)
    {
      v4 = v3;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 144))(v3);
      if (v5)
      {
        v6 = v5;
        if (objc_msgSend(*(id *)(v0 + 16), "fastLEConnectionInfoVersion"))
        {
          v7 = objc_msgSend(*(id *)(v0 + 16), "fastLEConnectionInfoData");
          if (v7)
          {
            v8 = v7;
            static Data._unconditionallyBridgeFromObjectiveC(_:)(v7);
            v10 = v9;

            __asm { BR              X10 }
          }
        }
        swift_bridgeObjectRelease(v6);
        v17 = sub_10004F8F8();
        v18 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v17, 0, 0);
        *v19 = 0;
        swift_willThrow(v18);
        swift_release(v4);
        goto LABEL_11;
      }
      swift_release(v4);
    }
    v14 = sub_10004F8F8();
    v15 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v14, 0, 0);
    *v16 = 1;
    swift_willThrow(v15);
LABEL_11:
    swift_release(v2);
    goto LABEL_12;
  }
  v11 = sub_10004F8F8();
  v12 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v11, 0, 0);
  *v13 = 1;
  swift_willThrow(v12);
LABEL_12:
  swift_task_dealloc(*(_QWORD *)(v0 + 32));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100049E58(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10007BD74;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_100051818;
  return sub_100049A04((uint64_t)v7);
}

uint64_t sub_100049ED4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v2[2] = a1;
  v2[3] = v1;
  v3 = sub_10000215C((uint64_t *)&unk_10007BD80);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Date(0);
  v2[6] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (*(_QWORD *)(*(_QWORD *)(sub_10000215C((uint64_t *)&unk_10007B460) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[9] = swift_task_alloc(v6);
  v2[10] = swift_task_alloc(v6);
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  v2[13] = swift_task_alloc(v6);
  v7 = (*(_QWORD *)(*(_QWORD *)(sub_10000215C(&qword_10007BA50) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[14] = swift_task_alloc(v7);
  v2[15] = swift_task_alloc(v7);
  v8 = type metadata accessor for CloudPairedDeviceRecord(0);
  v2[16] = v8;
  v9 = *(_QWORD *)(v8 - 8);
  v2[17] = v9;
  v10 = (*(_QWORD *)(v9 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[18] = swift_task_alloc(v10);
  v2[19] = swift_task_alloc(v10);
  v2[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_10004A02C, 0, 0);
}

uint64_t sub_10004A02C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  unint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  Class v67;
  id v68;
  id v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t, uint64_t);
  uint64_t v84;
  uint64_t v85;
  id v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t (*v97)(uint64_t, uint64_t, uint64_t);
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t *v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  unint64_t v136;
  Class isa;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  id v160;
  uint64_t v161;
  uint64_t v162;
  id v163;
  id v164;
  Class v165;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
  {
    v38 = sub_10004F8F8();
    v39 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v38, 0, 0);
    *v40 = 1;
    swift_willThrow(v39);
    goto LABEL_34;
  }
  v2 = v1;
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 440))(v1);
  if (!v3)
  {
    v41 = sub_10004F8F8();
    v42 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v41, 0, 0);
    *v43 = 1;
    swift_willThrow(v42);
    v44 = v2;
    goto LABEL_33;
  }
  v4 = v3;
  v158 = v2;
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 200))();
  v6 = v5;
  v7 = *(_QWORD *)(v5 + 16);
  v161 = v4;
  if (!v7)
  {
    v45 = 1;
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(v0 + 128);
  v8 = *(_QWORD *)(v0 + 136);
  v10 = v5 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v163 = *(id *)(v8 + 72);
  v159 = (id)v5;
  swift_bridgeObjectRetain(v5);
  while (1)
  {
    v11 = *(_QWORD *)(v0 + 152);
    v12 = *(void **)(v0 + 16);
    sub_100034A9C(v10, v11);
    v13 = (uint64_t *)(v11 + *(int *)(v9 + 24));
    v15 = *v13;
    v14 = v13[1];
    v16 = objc_msgSend(v12, "idsDeviceID", swift_bridgeObjectRetain(v14).n128_f64[0]);
    if (v16)
    {
      v17 = v16;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
      v20 = v19;

      v22 = *(_QWORD *)(v0 + 144);
      v21 = *(_QWORD *)(v0 + 152);
      if (v15 == v18 && v14 == v20)
      {
        swift_bridgeObjectRelease_n(v14, 2);
        sub_100034A9C(v21, v22);
LABEL_27:
        sub_100034AE0(*(_QWORD *)(v0 + 144));
        goto LABEL_29;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v18, v20, 0);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v14);
      sub_100034A9C(v21, v22);
      if ((v24 & 1) != 0)
        goto LABEL_27;
    }
    else
    {
      v26 = *(_QWORD *)(v0 + 144);
      v25 = *(_QWORD *)(v0 + 152);
      swift_bridgeObjectRelease(v14);
      sub_100034A9C(v25, v26);
    }
    v27 = (uint64_t *)(*(_QWORD *)(v0 + 144) + *(int *)(v9 + 24));
    v29 = *v27;
    v28 = v27[1];
    v30 = objc_msgSend(*(id *)(v0 + 16), "identifier", swift_bridgeObjectRetain(v28).n128_f64[0]);
    if (!v30)
    {
      sub_100034AE0(*(_QWORD *)(v0 + 144));
      swift_bridgeObjectRelease(v28);
      goto LABEL_6;
    }
    v31 = v30;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v34 = v33;

    v35 = *(_QWORD *)(v0 + 144);
    if (v29 == v32 && v28 == v34)
      break;
    v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, v32, v34, 0);
    swift_bridgeObjectRelease(v34);
    sub_100034AE0(v35);
    swift_bridgeObjectRelease(v28);
    if ((v37 & 1) != 0)
      goto LABEL_29;
LABEL_6:
    sub_100034AE0(*(_QWORD *)(v0 + 152));
    v10 += (uint64_t)v163;
    if (!--v7)
    {
      v6 = (uint64_t)v159;
      swift_bridgeObjectRelease(v159);
      v45 = 1;
      goto LABEL_30;
    }
  }
  swift_bridgeObjectRelease(v28);
  sub_100034AE0(v35);
  swift_bridgeObjectRelease(v28);
LABEL_29:
  v46 = *(_QWORD *)(v0 + 152);
  v47 = *(_QWORD *)(v0 + 120);
  v6 = (uint64_t)v159;
  swift_bridgeObjectRelease(v159);
  sub_100040534(v46, v47);
  v45 = 0;
LABEL_30:
  v4 = v161;
LABEL_31:
  v49 = *(_QWORD *)(v0 + 128);
  v48 = *(_QWORD *)(v0 + 136);
  v50 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v50, v45, 1, v49);
  swift_bridgeObjectRelease(v6);
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v51(v50, 1, v49) != 1)
  {
    v65 = *(_QWORD *)(v0 + 128);
    sub_100040534(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 160));
    v66 = sub_10000219C(&qword_10007BD90, type metadata accessor for CloudPairedDeviceRecord, (uint64_t)&unk_1000616E0);
    v67 = sub_10002FDAC(v65, v66);
    v68 = objc_msgSend(objc_allocWithZone((Class)CBControllerInfo), "init");
    objc_msgSend(v68, "setCloudSyncStatus:", 1);
    v165 = v67;
    v69 = -[objc_class recordChangeTag](v67, "recordChangeTag");
    v160 = v68;
    if (!v69)
      goto LABEL_52;
    v70 = v4;
    v71 = *(_QWORD *)(v0 + 160);
    v72 = *(_QWORD *)(v0 + 128);
    v73 = *(_QWORD *)(v0 + 104);
    v74 = *(_QWORD *)(v0 + 48);
    v75 = *(_QWORD *)(v0 + 56);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v75 + 16))(v73, v71 + *(int *)(v72 + 20), v74);
    v76 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v75 + 56);
    v76(v73, 0, 1, v74);
    v77 = -[objc_class modificationDate](v165, "modificationDate");
    v78 = *(_QWORD *)(v0 + 88);
    if (v77)
    {
      v79 = v77;
      v81 = *(_QWORD *)(v0 + 56);
      v80 = *(_QWORD *)(v0 + 64);
      v82 = *(_QWORD *)(v0 + 48);
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v77);

      v83 = *(void (**)(uint64_t, uint64_t, uint64_t))(v81 + 32);
      v83(v78, v80, v82);
      v76(v78, 0, 1, v82);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v81 + 48))(v78, 1, v82) != 1)
      {
        v84 = *(_QWORD *)(v0 + 96);
        v85 = *(_QWORD *)(v0 + 48);
        v83(v84, *(_QWORD *)(v0 + 88), v85);
        v76(v84, 0, 1, v85);
        goto LABEL_44;
      }
    }
    else
    {
      v76(*(_QWORD *)(v0 + 88), 1, 1, *(_QWORD *)(v0 + 48));
    }
    v86 = -[objc_class creationDate](v165, "creationDate");
    if (v86)
    {
      v87 = v86;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v86);

      v88 = 0;
    }
    else
    {
      v88 = 1;
    }
    v90 = *(_QWORD *)(v0 + 88);
    v89 = *(_QWORD *)(v0 + 96);
    v91 = *(_QWORD *)(v0 + 80);
    v76(v91, v88, 1, *(_QWORD *)(v0 + 48));
    sub_100004064(v91, v89, (uint64_t *)&unk_10007B460);
    sub_10000BCBC(v90, (uint64_t *)&unk_10007B460);
LABEL_44:
    v92 = *(_QWORD *)(v0 + 96);
    v93 = *(_QWORD *)(v0 + 48);
    v94 = *(_QWORD *)(v0 + 56);
    v95 = *(_QWORD *)(v0 + 40);
    v96 = v95 + *(int *)(*(_QWORD *)(v0 + 32) + 48);
    sub_10001128C(*(_QWORD *)(v0 + 104), v95, (uint64_t *)&unk_10007B460);
    sub_10001128C(v92, v96, (uint64_t *)&unk_10007B460);
    v97 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v94 + 48);
    v98 = v97(v95, 1, v93);
    v99 = *(_QWORD *)(v0 + 48);
    if (v98 == 1)
    {
      v100 = *(_QWORD *)(v0 + 104);
      sub_10000BCBC(*(_QWORD *)(v0 + 96), (uint64_t *)&unk_10007B460);
      sub_10000BCBC(v100, (uint64_t *)&unk_10007B460);
      if (v97(v96, 1, v99) == 1)
      {
        sub_10000BCBC(*(_QWORD *)(v0 + 40), (uint64_t *)&unk_10007B460);
        v101 = 3;
        v4 = v70;
        v68 = v160;
LABEL_51:
        v69 = objc_msgSend(v68, "setCloudSyncStatus:", v101);
LABEL_52:
        v108 = *(_QWORD *)(v0 + 128);
        v109 = *(_QWORD *)(v0 + 112);
        (*(void (**)(id))(*(_QWORD *)v4 + 168))(v69);
        v110 = v51(v109, 1, v108);
        v111 = *(_QWORD *)(v0 + 112);
        if (v110 == 1)
        {
          sub_10000BCBC(*(_QWORD *)(v0 + 112), &qword_10007BA50);
        }
        else
        {
          v112 = sub_100034048();
          v114 = v113;
          sub_100034AE0(v111);
          if (v114 >> 60 != 15)
          {
            v115 = *(_QWORD *)(v0 + 160);
            v116 = *(int *)(*(_QWORD *)(v0 + 128) + 36);
            v117 = *(_QWORD *)(v115 + v116);
            v118 = *(_QWORD *)(v117 + 16);
            if (v118)
            {
              swift_bridgeObjectRetain(*(_QWORD *)(v115 + v116));
              v119 = v118 - 1;
              v120 = (unint64_t *)(v117 + 40);
              do
              {
                v121 = v119;
                v123 = *(v120 - 1);
                v122 = *v120;
                sub_10000971C(v123, *v120);
                sub_10004E848(v123, v122);
                v125 = v124;
                sub_1000093EC(v123, v122);
                if ((v125 & 1) != 0)
                  break;
                v119 = v121 - 1;
                v120 += 2;
              }
              while (v121);
              swift_bridgeObjectRelease(v117);
            }
            else
            {
              v125 = 0;
            }
            v68 = v160;
            objc_msgSend(v160, "setFastLEConnectionAllowed:", v125 & 1);
            sub_1000093D8(v112, v114);
          }
        }
        v132 = *(_QWORD *)(v0 + 160);
        v133 = *(_QWORD *)(v0 + 128);
        v134 = (uint64_t *)(v132 + *(int *)(v133 + 32));
        v135 = *v134;
        v136 = v134[1];
        sub_10000971C(*v134, v136);
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_1000093EC(v135, v136);
        objc_msgSend(v68, "setFastLEConnectionInfoData:", isa);

        v138 = *(_QWORD *)(v132 + *(int *)(v133 + 28));
        if ((v138 & 0x8000000000000000) == 0)
        {
          if (v138 > 0xFF)
          {
LABEL_70:
            v150 = "Not enough bits to represent the passed value";
            v151 = 45;
            v152 = 3455;
            return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v150, v151, 2, "Swift/Integers.swift", 20, 2, v152, 0);
          }
          v139 = *(_QWORD *)(v0 + 160);
          v140 = *(_QWORD *)(v0 + 128);
          objc_msgSend(v68, "setFastLEConnectionInfoVersion:", v138);
          v141 = *(_QWORD *)(v139 + *(int *)(v140 + 48));
          if ((v141 & 0x8000000000000000) == 0)
          {
            if (!HIDWORD(v141))
            {
              v143 = *(_QWORD *)(v0 + 152);
              v142 = *(_QWORD *)(v0 + 160);
              v144 = *(_QWORD *)(v0 + 144);
              v146 = *(_QWORD *)(v0 + 112);
              v145 = *(_QWORD *)(v0 + 120);
              v148 = *(_QWORD *)(v0 + 96);
              v147 = *(_QWORD *)(v0 + 104);
              v149 = *(_QWORD *)(v0 + 88);
              v153 = *(_QWORD *)(v0 + 80);
              v154 = *(_QWORD *)(v0 + 72);
              v155 = *(_QWORD *)(v0 + 64);
              v157 = *(_QWORD *)(v0 + 40);
              objc_msgSend(v160, "setSupportedServices:");

              swift_release(v161);
              swift_release(v158);
              sub_100034AE0(v142);
              swift_task_dealloc(v142);
              swift_task_dealloc(v143);
              swift_task_dealloc(v144);
              swift_task_dealloc(v145);
              swift_task_dealloc(v146);
              swift_task_dealloc(v147);
              swift_task_dealloc(v148);
              swift_task_dealloc(v149);
              swift_task_dealloc(v153);
              swift_task_dealloc(v154);
              swift_task_dealloc(v155);
              swift_task_dealloc(v157);
              return (*(uint64_t (**)(id))(v0 + 8))(v160);
            }
            goto LABEL_70;
          }
        }
        v150 = "Negative value is not representable";
        v151 = 35;
        v152 = 3451;
        return _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v150, v151, 2, "Swift/Integers.swift", 20, 2, v152, 0);
      }
    }
    else
    {
      sub_10001128C(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 72), (uint64_t *)&unk_10007B460);
      v102 = v97(v96, 1, v99);
      v104 = *(_QWORD *)(v0 + 96);
      v103 = *(_QWORD *)(v0 + 104);
      v105 = *(_QWORD *)(v0 + 72);
      if (v102 != 1)
      {
        v127 = *(_QWORD *)(v0 + 56);
        v126 = *(_QWORD *)(v0 + 64);
        v128 = *(_QWORD *)(v0 + 48);
        v156 = *(_QWORD *)(v0 + 40);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v127 + 32))(v126, v96, v128);
        v129 = sub_10000219C(&qword_10007BD98, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v130 = dispatch thunk of static Equatable.== infix(_:_:)(v105, v126, v128, v129);
        v131 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
        v131(v126, v128);
        sub_10000BCBC(v104, (uint64_t *)&unk_10007B460);
        sub_10000BCBC(v103, (uint64_t *)&unk_10007B460);
        v131(v105, v128);
        sub_10000BCBC(v156, (uint64_t *)&unk_10007B460);
        v4 = v70;
        v68 = v160;
        if ((v130 & 1) != 0)
        {
          v101 = 3;
          goto LABEL_51;
        }
        goto LABEL_50;
      }
      v106 = *(_QWORD *)(v0 + 48);
      v107 = *(_QWORD *)(v0 + 56);
      sub_10000BCBC(*(_QWORD *)(v0 + 96), (uint64_t *)&unk_10007B460);
      sub_10000BCBC(v103, (uint64_t *)&unk_10007B460);
      (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v105, v106);
    }
    sub_10000BCBC(*(_QWORD *)(v0 + 40), (uint64_t *)&unk_10007BD80);
    v4 = v70;
    v68 = v160;
LABEL_50:
    v101 = 2;
    goto LABEL_51;
  }
  sub_10000BCBC(*(_QWORD *)(v0 + 120), &qword_10007BA50);
  v52 = sub_10004F8F8();
  v53 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v52, 0, 0);
  *v54 = 2;
  swift_willThrow(v53);
  swift_release(v4);
  v44 = v158;
LABEL_33:
  swift_release(v44);
LABEL_34:
  v55 = *(_QWORD *)(v0 + 152);
  v56 = *(_QWORD *)(v0 + 144);
  v58 = *(_QWORD *)(v0 + 112);
  v57 = *(_QWORD *)(v0 + 120);
  v60 = *(_QWORD *)(v0 + 96);
  v59 = *(_QWORD *)(v0 + 104);
  v62 = *(_QWORD *)(v0 + 80);
  v61 = *(_QWORD *)(v0 + 88);
  v63 = *(_QWORD *)(v0 + 72);
  v162 = *(_QWORD *)(v0 + 64);
  v164 = *(id *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 160));
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v63);
  swift_task_dealloc(v162);
  swift_task_dealloc(v164);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004ACC4(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_10007BD7C;
  v7 = a1;
  a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v8;
  *v8 = v3;
  v8[1] = sub_10004AD40;
  return sub_100049ED4((uint64_t)v7);
}

uint64_t sub_10004AD40(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 40);
  v7 = *(void **)(*v2 + 16);
  v6 = *(void **)(*v2 + 24);
  v8 = *v2;
  swift_task_dealloc(v5);

  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 32);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_10004AE08()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[5] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[6] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004AE68, 0, 0);
}

uint64_t sub_10004AE68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;

  *(_DWORD *)(v0 + 72) = 0;
  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 40)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2 = v1;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 480))();
    if (v3)
    {
      v4 = v3;
      if (((*(uint64_t (**)(void))(*(_QWORD *)v3 + 112))() & 1) != 0)
      {
        v5 = 1;
        *(_DWORD *)(v0 + 72) = 1;
      }
      else
      {
        v5 = 0;
      }
      v8 = *(_QWORD *)(v0 + 56);
      v7 = *(_QWORD *)(v0 + 64);
      v9 = *(_QWORD *)(v0 + 48);
      v10 = sub_1000309E4();
      v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10, v9);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 67109120;
        *(_DWORD *)(v0 + 76) = v5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 76, v0 + 80, v14 + 4, v14 + 8);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Distributed logging status: %u", v14, 8u);
        swift_slowDealloc(v14, -1, -1);
      }
      swift_release(v2);
      swift_release(v4);

      (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 56) + 8))(*(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 48));
      swift_beginAccess(v0 + 72, v0 + 16, 0, 0);
      v6 = *(unsigned int *)(v0 + 72);
    }
    else
    {
      swift_release(v2);
      v6 = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v6);
}

uint64_t sub_10004B15C(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10007BDA4;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004B1BC;
  return sub_10004AE08();
}

uint64_t sub_10004B1BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);

  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t))(v7 + 16))(v7);

  }
  else
  {
    (*(void (**)(_QWORD, uint64_t, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004B264(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 16) = v1;
  *(_DWORD *)(v2 + 52) = a1;
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 24) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 32) = v4;
  *(_QWORD *)(v2 + 40) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B2C8, 0, 0);
}

uint64_t sub_10004B2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t (*v15)(void);
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
    goto LABEL_7;
  v2 = v1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 480))();
  if (!v3)
  {
    swift_release(v2);
LABEL_7:
    v16 = *(_QWORD *)(v0 + 40);
    v17 = sub_10004FEC8();
    v18 = swift_allocError(&type metadata for XPCConnection.XPCConnectionError, v17, 0, 0);
    swift_willThrow(v18);
    swift_task_dealloc(v16);
    v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  v4 = v3;
  v5 = *(_QWORD *)(v0 + 40);
  v6 = *(_QWORD *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 24);
  (*(void (**)(_QWORD))(*(_QWORD *)v3 + 120))(*(_DWORD *)(v0 + 52) & 1);
  v8 = sub_1000309E4();
  v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = *(_DWORD *)(v0 + 52);
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    *(_DWORD *)(v0 + 48) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 52, v13 + 4, v13 + 8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Distributed logging status changed: %u", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }
  swift_release(v2);
  swift_release(v4);

  v14 = *(_QWORD *)(v0 + 40);
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(v14, *(_QWORD *)(v0 + 24));
  swift_task_dealloc(v14);
  v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_10004B5DC(int a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_10007BDAC;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_10004B650;
  return sub_10004B264(a1);
}

uint64_t sub_10004B650()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_10004B6F0()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004B750, 0, 0);
}

uint64_t sub_10004B750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 16)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (!v1)
    goto LABEL_7;
  v2 = v1;
  v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 480))();
  if (!v3)
  {
    swift_release(v2);
LABEL_7:
    v8 = 0;
    goto LABEL_8;
  }
  v4 = v3;
  v6 = *(_QWORD *)(v0 + 32);
  v5 = *(_QWORD *)(v0 + 40);
  v7 = *(_QWORD *)(v0 + 24);
  v8 = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 112))();
  v9 = sub_1000309E4();
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v9, v7);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v13 = 67109120;
    *(_DWORD *)(v0 + 48) = v8 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 52, v13 + 4, v13 + 8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Apple audio accessory limited logging enabled: %{BOOL}d", v13, 8u);
    swift_slowDealloc(v13, -1, -1);
  }
  swift_release(v2);
  swift_release(v4);

  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
LABEL_8:
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(v8 & 1);
}

uint64_t sub_10004BA08(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_10007BDBC;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10004BA68;
  return sub_10004B6F0();
}

uint64_t sub_10004BA68(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);

  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10004BB14(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v2 + 24) = v1;
  *(_BYTE *)(v2 + 56) = a1;
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 32) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 40) = v4;
  *(_QWORD *)(v2 + 48) = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10004BB78, 0, 0);
}

uint64_t sub_10004BB78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 24)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2 = v1;
    v3 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 480))();
    if (v3)
    {
      v4 = v3;
      v6 = *(_QWORD *)(v0 + 40);
      v5 = *(_QWORD *)(v0 + 48);
      v7 = *(_QWORD *)(v0 + 32);
      v8 = sub_1000309E4();
      v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.default.getter();
      v12 = os_log_type_enabled(v10, v11);
      v14 = *(_QWORD *)(v0 + 40);
      v13 = *(_QWORD *)(v0 + 48);
      v15 = *(_QWORD *)(v0 + 32);
      if (v12)
      {
        v23 = *(_QWORD *)(v0 + 32);
        v16 = *(unsigned __int8 *)(v0 + 56);
        v22 = *(_QWORD *)(v0 + 48);
        v17 = (uint8_t *)swift_slowAlloc(12, -1);
        v21 = swift_slowAlloc(32, -1);
        *(_DWORD *)v17 = 136315138;
        v24 = v21;
        if (v16)
          v18 = 7562585;
        else
          v18 = 28494;
        if (v16)
          v19 = 0xE300000000000000;
        else
          v19 = 0xE200000000000000;
        *(_QWORD *)(v0 + 16) = sub_100002CA8(v18, v19, &v24);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v17 + 4, v17 + 12);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Enable Apple audio accessory limited logging: %s", v17, 0xCu);
        swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v21, -1, -1);
        swift_slowDealloc(v17, -1, -1);

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v22, v23);
      }
      else
      {

        (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)v4 + 120))(*(unsigned __int8 *)(v0 + 56));
      swift_release(v4);
    }
    swift_release(v2);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10004BEDC(char a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_10007BDC4;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_100051834;
  return sub_10004BB14(a1);
}

uint64_t sub_10004C0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  __int128 v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;
  _OWORD v12[2];
  uint64_t v13;

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    v7 = *(_OWORD *)(a1 + 16);
    v12[0] = *(_OWORD *)a1;
    v12[1] = v7;
    v13 = *(_QWORD *)(a1 + 32);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v11 = *v3;
    *v3 = 0x8000000000000000;
    sub_10004F414((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
    v9 = *v3;
    *v4 = v11;
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(v9);
  }
  else
  {
    sub_10000BCBC(a1, &qword_10007C1A8);
    sub_10004EDF8(a2, a3, (uint64_t)v12);
    swift_bridgeObjectRelease(a3);
    return sub_10000BCBC((uint64_t)v12, &qword_10007C1A8);
  }
}

void sub_10004C19C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::Int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  _OWORD v30[2];
  uint64_t v31;
  _QWORD v32[2];
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  _OWORD v40[2];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD v46[2];
  uint64_t v47;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000215C(&qword_10007C150);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  swift_retain(v3);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v11 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v12 = v11 | (v8 << 6);
      goto LABEL_28;
    }
    v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v13 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v13);
    v15 = v8 + 1;
    if (!v14)
    {
      v15 = v8 + 2;
      if (v8 + 2 >= v28)
        goto LABEL_37;
      v14 = *(_QWORD *)(v29 + 8 * v15);
      if (!v14)
      {
        v15 = v8 + 3;
        if (v8 + 3 >= v28)
          goto LABEL_37;
        v14 = *(_QWORD *)(v29 + 8 * v15);
        if (!v14)
        {
          v15 = v8 + 4;
          if (v8 + 4 >= v28)
            goto LABEL_37;
          v14 = *(_QWORD *)(v29 + 8 * v15);
          if (!v14)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v15 << 6);
    v8 = v15;
LABEL_28:
    v17 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v19 = *v17;
    v18 = v17[1];
    sub_100006E70(*(_QWORD *)(a1 + 56) + 40 * v12, (uint64_t)v46);
    v44 = v19;
    v45 = v18;
    v41 = v46[0];
    v42 = v46[1];
    v43 = v47;
    v32[0] = v19;
    v32[1] = v18;
    swift_bridgeObjectRetain(v18);
    swift_dynamicCast(&v33, v32, &type metadata for String, &type metadata for AnyHashable, 7);
    v30[0] = v41;
    v30[1] = v42;
    v31 = v43;
    swift_dynamicCast(v36, v30, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, 7);
    v37 = v33;
    v38 = v34;
    v39 = v35;
    sub_100006C4C(v36, v40);
    v33 = v37;
    v34 = v38;
    v35 = v39;
    sub_100006C4C(v40, v30);
    sub_100006C4C(v30, &v37);
    v20 = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = v20 & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v9 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v9 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
    v10 = v3[6] + 40 * v9;
    *(_OWORD *)v10 = v33;
    *(_OWORD *)(v10 + 16) = v34;
    *(_QWORD *)(v10 + 32) = v35;
    sub_100006C4C(&v37, (_OWORD *)(v3[7] + 32 * v9));
    ++v3[2];
  }
  v16 = v8 + 5;
  if (v8 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10002E290(a1);
    return;
  }
  v14 = *(_QWORD *)(v29 + 8 * v16);
  if (v14)
  {
    v15 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v15 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v15 >= v28)
      goto LABEL_37;
    v14 = *(_QWORD *)(v29 + 8 * v15);
    ++v16;
    if (v14)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
}

uint64_t sub_10004C6B8(uint64_t a1, uint64_t a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  id v10;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t);

  v4[2] = a4;
  v4[3] = _Block_copy(aBlock);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a1, &type metadata for String);
  v4[4] = v8;
  v9 = unk_10007BE4C;
  v13 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10007BE48 + dword_10007BE48);
  v10 = a4;
  v11 = (_QWORD *)swift_task_alloc(v9);
  v4[5] = v11;
  *v11 = v4;
  v11[1] = sub_10004C760;
  return v13(v8, a2);
}

uint64_t sub_10004C760(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  Class isa;
  void *v12;
  void (**v13)(_QWORD, _QWORD, _QWORD);

  v3 = v1;
  v5 = *v2;
  v7 = *(_QWORD *)(*v2 + 32);
  v6 = *(_QWORD *)(*v2 + 40);
  v8 = *(void **)(*v2 + 16);
  v9 = *v2;
  swift_task_dealloc(v6);

  swift_bridgeObjectRelease(v7);
  if (v3)
  {
    v10 = _convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    isa = 0;
    v12 = (void *)v10;
  }
  else
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(a1);
    v10 = 0;
    v12 = isa;
  }
  v13 = *(void (***)(_QWORD, _QWORD, _QWORD))(v5 + 24);
  ((void (**)(_QWORD, Class, uint64_t))v13)[2](v13, isa, v10);

  _Block_release(v13);
  return (*(uint64_t (**)(void))(v9 + 8))();
}

uint64_t sub_10004C998(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  char *v16;

  v5[6] = a5;
  v5[7] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v12 = v11;
  v5[8] = v11;
  swift_unknownObjectRetain(a2);
  v13 = a5;
  _bridgeAnyObjectToAny(_:)(v5 + 2, a2);
  swift_unknownObjectRelease(a2);
  v16 = (char *)&dword_10007BE58 + dword_10007BE58;
  v14 = (_QWORD *)swift_task_alloc(unk_10007BE5C);
  v5[9] = v14;
  *v14 = v5;
  v14[1] = sub_10004CA6C;
  return ((uint64_t (*)(uint64_t, uint64_t, _QWORD *, uint64_t))v16)(v10, v12, v5 + 2, a3);
}

uint64_t sub_10004CA6C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v3 = *(_QWORD *)(*v1 + 64);
  v2 = *(_QWORD *)(*v1 + 72);
  v4 = *(void **)(*v1 + 48);
  v5 = *v1;
  swift_task_dealloc(v2);
  sub_100002D78((_QWORD *)(v5 + 16));

  swift_bridgeObjectRelease(v3);
  v6 = *(_QWORD *)(v5 + 56);
  if (v0)
  {
    v7 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v6 + 16))(v6, v7);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v6 + 16))(*(_QWORD *)(v5 + 56), 0);
  }
  _Block_release(*(const void **)(v5 + 56));
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t sub_10004CB28(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  _BYTE v6[24];

  v3 = (uint64_t *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon);
  swift_beginAccess(v3, v6, 1, 0);
  v4 = *v3;
  *v3 = a1;
  return swift_release(v4);
}

uint64_t (*sub_10004CB78(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon, a1, 33, 0);
  return j__swift_endAccess;
}

id sub_10004CBBC()
{
  uint64_t v0;
  id *v1;
  _BYTE v3[24];

  v1 = (id *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue, v3, 0, 0);
  return *v1;
}

void sub_10004CC00(void *a1)
{
  uint64_t v1;
  void **v3;
  void *v4;
  _BYTE v5[24];

  v3 = (void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue);
  swift_beginAccess(v3, v5, 1, 0);
  v4 = *v3;
  *v3 = a1;

}

_QWORD *sub_10004CC50()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  if (v1)
  {
    v2 = *(_QWORD **)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  }
  else
  {
    v2 = _swiftEmptyArrayStorage;
    *(_QWORD *)(v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(0);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_10004CC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = a1;
  return swift_bridgeObjectRelease(v2);
}

id sub_10004CCB4()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  id v3;
  id v4;
  NSString v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;

  v1 = OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener;
  v2 = *(void **)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  if (v2)
  {
    v3 = *(id *)((char *)v0 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  }
  else
  {
    v4 = objc_allocWithZone((Class)NSXPCListener);
    v5 = String._bridgeToObjectiveC()();
    v6 = objc_msgSend(v4, "initWithMachServiceName:", v5);

    v7 = objc_msgSend(v6, "setDelegate:", v0);
    v8 = (void *)(*(uint64_t (**)(id))((swift_isaMask & *v0) + 0x88))(v7);
    objc_msgSend(v6, "_setQueue:", v8);

    v9 = *(void **)((char *)v0 + v1);
    *(_QWORD *)((char *)v0 + v1) = v6;
    v3 = v6;

    v2 = 0;
  }
  v10 = v2;
  return v3;
}

void sub_10004CDA4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = a1;

}

void (*sub_10004CDB8(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_10004CCB4();
  return sub_10004CDEC;
}

void sub_10004CDEC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener) = v2;

}

id sub_10004CE04(uint64_t a1)
{
  objc_class *v1;
  char *v3;
  objc_super v5;

  v3 = (char *)objc_allocWithZone(v1);
  *(_QWORD *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_daemon] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___xpcListener] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer_dispatchQueue] = a1;
  v5.receiver = v3;
  v5.super_class = v1;
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t sub_10004CE74()
{
  return sub_10004D018((uint64_t)&unk_100073BD0, (uint64_t)sub_100050A8C, (uint64_t)&unk_100073BE8);
}

uint64_t sub_10004CE90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000309E4();
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Activate Bluetooth User Controller XPC Service", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xE0))(v11);
}

void sub_10004CFB4()
{
  _QWORD *v0;
  id v1;

  v1 = (id)(*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xB8))();
  objc_msgSend(v1, "resume");

}

uint64_t sub_10004CFFC()
{
  return sub_10004D018((uint64_t)&unk_100073C20, (uint64_t)sub_100050A94, (uint64_t)&unk_100073C38);
}

uint64_t sub_10004D018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v22 - 8);
  v11 = __chkstk_darwin(v22);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (void *)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v3) + 0x88))(v11);
  v15 = swift_allocObject(a1, 24, 7);
  *(_QWORD *)(v15 + 16) = v3;
  aBlock[4] = a2;
  v26 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = a3;
  v16 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v3);
  v24 = _swiftEmptyArrayStorage;
  v17 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_10000215C((uint64_t *)&unk_10007A960);
  v19 = sub_100006D84();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v22);
  return swift_release(v26);
}

uint64_t sub_10004D200(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v13;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000309E4();
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v6, v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Invalidate Bluetooth User Controller XPC Service", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(uint64_t))((swift_isaMask & *a1) + 0xF0))(v11);
}

void sub_10004D324()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t i;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  id v9;

  v1 = v0;
  v2 = (*(uint64_t (**)(void))((swift_isaMask & *v0) + 0xA0))();
  v3 = v2;
  if ((unint64_t)v2 >> 62)
  {
    if (v2 >= 0)
      v2 &= 0xFFFFFFFFFFFFFF8uLL;
    v4 = _CocoaArrayWrapper.endIndex.getter(v2);
    if (!v4)
      goto LABEL_12;
  }
  else
  {
    v4 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v4)
    {
LABEL_12:
      v8 = swift_bridgeObjectRelease(v3);
      v9 = (id)(*(uint64_t (**)(uint64_t))((swift_isaMask & *v1) + 0xB8))(v8);
      objc_msgSend(v9, "invalidate");

      return;
    }
  }
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v6 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v6 = *(id *)(v3 + 8 * i + 32);
      v7 = v6;
      (*(void (**)(void))((swift_isaMask & *v6) + 0x70))();

    }
    goto LABEL_12;
  }
  __break(1u);
}

uint64_t sub_10004D440(void *a1)
{
  _QWORD *v1;
  unint64_t v3;
  id v4;
  _QWORD *v5;
  uint64_t v6;

  v3 = (*(uint64_t (**)(void))((swift_isaMask & *v1) + 0xA0))();
  v4 = a1;
  v5 = sub_100050A9C(v3, (uint64_t)v4);
  swift_bridgeObjectRelease(v3);

  v6 = *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(_QWORD *)((char *)v1 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = v5;
  return swift_bridgeObjectRelease(v6);
}

id sub_10004D4F0()
{
  return sub_10004D4FC(type metadata accessor for BluetoothUserXPCServer);
}

id sub_10004D4FC(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t sub_10004D584(uint64_t a1, void *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t (*v24)(void);
  _QWORD *v25;
  uint64_t v26;
  objc_class *v27;
  char *v28;
  id v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t, uint64_t);
  id v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  NSObject *v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  objc_super v94;
  uint64_t aBlock[5];
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v86 - v12;
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v86 - v15;
  v17 = __chkstk_darwin(v14);
  v19 = (char *)&v86 - v18;
  __chkstk_darwin(v17);
  v91 = (char *)&v86 - v20;
  v21 = sub_10004DFDC();
  if ((v21 & 1) == 0)
  {
    v61 = IsAppleInternalBuild(v21);
    v62 = sub_1000309E4();
    v63 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    if (v61)
    {
      v63(v13, v62, v6);
      v64 = a2;
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = swift_slowAlloc(18, -1);
        v68 = swift_slowAlloc(32, -1);
        aBlock[0] = v68;
        *(_DWORD *)v67 = 67109378;
        LODWORD(v97) = objc_msgSend(v64, "processIdentifier");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v67 + 4, v67 + 8);

        *(_WORD *)(v67 + 8) = 2080;
        v97 = sub_100002CA8(0xD00000000000001ALL, 0x8000000100067BA0, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v67 + 10, v67 + 18);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "XPC connection denied, %d, add %s entitlement", (uint8_t *)v67, 0x12u);
        swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
    }
    else
    {
      v63(v10, v62, v6);
      v76 = a2;
      v77 = Logger.logObject.getter(v76);
      v78 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v77, v78))
      {
        v79 = (uint8_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v79 = 67109120;
        LODWORD(aBlock[0]) = -[NSObject processIdentifier](v76, "processIdentifier");
        UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v79 + 4, v79 + 8);

        _os_log_impl((void *)&_mh_execute_header, v77, v78, "XPC connection denied, %d", v79, 8u);
        swift_slowDealloc(v79, -1, -1);
      }
      else
      {

        v77 = v76;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    return 0;
  }
  v90 = v7;
  v92 = v6;
  sub_100011254(0, &qword_10007B2E8, NSObject_ptr);
  v22 = (void *)(*(uint64_t (**)(void))((swift_isaMask & *v2) + 0xB8))();
  v23 = static NSObject.== infix(_:_:)(a1, v22);

  if ((v23 & 1) == 0)
  {
    v69 = sub_1000309E4();
    v70 = v90;
    v71 = v92;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v16, v69, v92);
    v72 = a2;
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v75 = 67109120;
      v71 = v92;
      LODWORD(aBlock[0]) = -[NSObject processIdentifier](v72, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(aBlock, (char *)aBlock + 4, v75 + 4, v75 + 8);

      _os_log_impl((void *)&_mh_execute_header, v73, v74, "XPC connection denied bad listener, %d", v75, 8u);
      swift_slowDealloc(v75, -1, -1);
    }
    else
    {

      v73 = v72;
    }

    (*(void (**)(char *, uint64_t))(v70 + 8))(v16, v71);
    return 0;
  }
  v24 = *(uint64_t (**)(void))((swift_isaMask & *v3) + 0x88);
  v25 = v3;
  v26 = v24();
  v27 = (objc_class *)type metadata accessor for XPCConnection();
  v28 = (char *)objc_allocWithZone(v27);
  *(_QWORD *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener] = v25;
  *(_QWORD *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_dispatchQueue] = v26;
  *(_QWORD *)&v28[OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_xpcConnection] = a2;
  v94.receiver = v28;
  v94.super_class = v27;
  v29 = a2;
  v30 = objc_msgSendSuper2(&v94, "init");
  aBlock[0] = (uint64_t)sub_10004CC50();
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(aBlock[0]);
  v32 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
  v31 = *(_QWORD *)((aBlock[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v32 >= v31 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
  v33 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v32, v30);
  specialized Array._endMutation()(v33);
  v34 = *(_QWORD *)((char *)v25 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections);
  *(_QWORD *)((char *)v25 + OBJC_IVAR____TtC14bluetoothuserd22BluetoothUserXPCServer____lazy_storage___connections) = aBlock[0];
  v35 = swift_bridgeObjectRelease(v34);
  v36 = (id)CBUserControllerXPCInterface(v35);
  objc_msgSend(v29, "setExportedInterface:", v36);

  v37 = (void *)v24();
  objc_msgSend(v29, "_setQueue:", v37);

  objc_msgSend(v29, "setExportedObject:", v30);
  v38 = swift_allocObject(&unk_100073C70, 24, 7);
  swift_unknownObjectWeakInit(v38 + 16, v25);
  v39 = swift_allocObject(&unk_100073C98, 32, 7);
  *(_QWORD *)(v39 + 16) = v38;
  *(_QWORD *)(v39 + 24) = v30;
  aBlock[4] = (uint64_t)sub_100050C44;
  v96 = v39;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100001DDC;
  aBlock[3] = (uint64_t)&unk_100073CB0;
  v40 = _Block_copy(aBlock);
  v41 = v96;
  v42 = v30;
  swift_release(v41);
  objc_msgSend(v29, "setInvalidationHandler:", v40);
  _Block_release(v40);
  v44 = (id)CBUserControllerXPCInterface(v43);
  objc_msgSend(v29, "setRemoteObjectInterface:", v44);

  objc_msgSend(v29, "resume");
  objc_msgSend(v29, "auditToken");
  v45 = xpc_copy_code_signing_identity_for_token(aBlock);
  v47 = v91;
  v46 = v92;
  if (v45)
  {
    v48 = v45;
    v89 = String.init(cString:)(v45);
    v50 = v49;
    v51 = sub_1000309E4();
    v52 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v47, v51, v46);
    v53 = v29;
    swift_bridgeObjectRetain(v50);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(18, -1);
      v87 = swift_slowAlloc(32, -1);
      v97 = v87;
      *(_DWORD *)v57 = 67109378;
      v88 = v42;
      v58 = objc_msgSend(v53, "processIdentifier");

      LODWORD(v93) = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 4, v57 + 4, v57 + 8);

      *(_WORD *)(v57 + 8) = 2080;
      swift_bridgeObjectRetain(v50);
      v93 = sub_100002CA8(v89, v50, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v57 + 10, v57 + 18);
      swift_bridgeObjectRelease_n(v50, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "XPC connection started: %d, %s", (uint8_t *)v57, 0x12u);
      v59 = v87;
      swift_arrayDestroy(v87, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      (*(void (**)(char *, uint64_t))(v90 + 8))(v47, v92);
      swift_slowDealloc(v48, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v50, 2);
      (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v46);
      swift_slowDealloc(v48, -1, -1);

    }
    return 1;
  }
  else
  {
    v80 = sub_1000309E4();
    v81 = v90;
    (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v19, v80, v46);
    v82 = v29;
    v83 = Logger.logObject.getter(v82);
    v84 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v83, v84))
    {
      v85 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v85 = 67109120;
      v46 = v92;
      LODWORD(v97) = -[NSObject processIdentifier](v82, "processIdentifier");
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 4, v85 + 4, v85 + 8);

      _os_log_impl((void *)&_mh_execute_header, v83, v84, "XPC connection started: %d", v85, 8u);
      swift_slowDealloc(v85, -1, -1);
      v82 = v42;
    }
    else
    {

      v83 = v42;
    }

    (*(void (**)(char *, uint64_t))(v81 + 8))(v19, v46);
    return 1;
  }
}

uint64_t sub_10004DFDC()
{
  void *v0;
  NSString v1;
  id v2;
  NSString v4;
  id v5;
  unsigned __int8 v6;
  __int128 v7;
  __int128 v8;
  _BYTE v9[24];
  uint64_t v10;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "valueForEntitlement:", v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(&v7, v2);
    swift_unknownObjectRelease(v2);
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  sub_100004064((uint64_t)&v7, (uint64_t)v9, &qword_10007BE80);
  if (v10)
  {
    if ((swift_dynamicCast(&v6, v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0
      && (v6 & 1) != 0)
    {
      return 1;
    }
  }
  else
  {
    sub_10000BCBC((uint64_t)v9, &qword_10007BE80);
  }
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v0, "valueForEntitlement:", v4);

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)(&v7, v5);
    swift_unknownObjectRelease(v5);
  }
  else
  {
    v7 = 0u;
    v8 = 0u;
  }
  sub_100004064((uint64_t)&v7, (uint64_t)v9, &qword_10007BE80);
  if (v10)
  {
    if ((swift_dynamicCast(&v6, v9, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) != 0)
      return v6;
  }
  else
  {
    sub_10000BCBC((uint64_t)v9, &qword_10007BE80);
  }
  return 0;
}

uint64_t CBDistributedDebugLogging.description.getter(char a1)
{
  Swift::String v2;

  if ((a1 & 1) != 0)
  {
    v2._object = (void *)0x8000000100067BE0;
    v2._countAndFlagsBits = 0xD000000000000015;
    String.append(contentsOf:)(v2);
  }
  return 0;
}

uint64_t sub_10004E250()
{
  _DWORD *v0;
  Swift::String v2;

  if ((*v0 & 1) != 0)
  {
    v2._object = (void *)0x8000000100067BE0;
    v2._countAndFlagsBits = 0xD000000000000015;
    String.append(contentsOf:)(v2);
  }
  return 0;
}

void sub_10004E2AC(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

_DWORD *sub_10004E2B4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_10004E2C8@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_10004E2DC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_10004E2F0(_DWORD *a1, int *a2)
{
  _DWORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_10004E320@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_DWORD *)a2 = v3;
  *(_BYTE *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_10004E34C@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(_BYTE *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_10004E370(_DWORD *result)
{
  _DWORD *v1;

  *v1 |= *result;
  return result;
}

_DWORD *sub_10004E384(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= *result;
  return result;
}

_DWORD *sub_10004E398(_DWORD *result)
{
  _DWORD *v1;

  *v1 ^= *result;
  return result;
}

_DWORD *sub_10004E3AC@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  _DWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10004E3C0(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10004E3D4(_DWORD *a1)
{
  _DWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_10004E3E8(_DWORD *a1)
{
  _DWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_10004E3FC()
{
  _DWORD *v0;

  return *v0 == 0;
}

_DWORD *sub_10004E40C(_DWORD *result)
{
  _DWORD *v1;

  *v1 &= ~*result;
  return result;
}

_DWORD *sub_10004E420@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_10004E42C@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_10004E43C(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_10004E448(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_10004E45C@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  int v4;
  uint64_t result;

  v4 = sub_10004FF0C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t sub_10004E498(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100051824;
  return v6();
}

uint64_t sub_10004E4EC(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100051824;
  return v7();
}

uint64_t sub_10004E540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10000BCBC(a1, &qword_10007C620);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100073E18, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10007C008, v16);
}

uint64_t sub_10004E68C(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10004E6F0;
  return v6(a1);
}

uint64_t sub_10004E6F0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

_QWORD *sub_10004E73C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000215C(&qword_10007C1B8);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10004FC08(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

void sub_10004E848(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10004E8A8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10004E8DC + *((int *)qword_10004EDD8 + (v0 >> 62))))();
}

double sub_10004EDF8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  double result;
  uint64_t v17;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10002861C(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v17 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10004F580();
      v12 = v17;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56) + 40 * v9;
    v14 = *(_OWORD *)(v13 + 16);
    *(_OWORD *)a3 = *(_OWORD *)v13;
    *(_OWORD *)(a3 + 16) = v14;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(v13 + 32);
    sub_10004F22C(v9, v12);
    v15 = *v4;
    *v4 = v12;
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
  }
  return result;
}

void sub_10004EEF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  _QWORD *v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int64_t v41;
  uint64_t v42;
  char v43;
  _QWORD v44[9];
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000215C(&qword_10007C1B0);
  v43 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v42 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v40 = v3;
  v41 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v19 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v20 = v19 | (v13 << 6);
      goto LABEL_25;
    }
    v21 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return;
    }
    if (v21 >= v41)
      break;
    v22 = (_QWORD *)(v5 + 64);
    v23 = *(_QWORD *)(v42 + 8 * v21);
    ++v13;
    if (!v23)
    {
      v13 = v21 + 1;
      if (v21 + 1 >= v41)
        goto LABEL_37;
      v23 = *(_QWORD *)(v42 + 8 * v13);
      if (!v23)
      {
        v24 = v21 + 2;
        if (v24 >= v41)
        {
LABEL_37:
          swift_release(v5);
          v3 = v40;
          if ((v43 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v23 = *(_QWORD *)(v42 + 8 * v24);
        if (!v23)
        {
          while (1)
          {
            v13 = v24 + 1;
            if (__OFADD__(v24, 1))
              goto LABEL_46;
            if (v13 >= v41)
              goto LABEL_37;
            v23 = *(_QWORD *)(v42 + 8 * v13);
            ++v24;
            if (v23)
              goto LABEL_24;
          }
        }
        v13 = v24;
      }
    }
LABEL_24:
    v11 = (v23 - 1) & v23;
    v20 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_25:
    v25 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v20);
    v27 = *v25;
    v26 = v25[1];
    v28 = *(_QWORD *)(v5 + 56) + 40 * v20;
    if ((v43 & 1) != 0)
    {
      v29 = *(_OWORD *)v28;
      v30 = *(_OWORD *)(v28 + 16);
      v47 = *(_QWORD *)(v28 + 32);
      v45 = v29;
      v46 = v30;
    }
    else
    {
      sub_100006E70(v28, (uint64_t)&v45);
      swift_bridgeObjectRetain(v26);
    }
    Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v44, v27, v26);
    v31 = Hasher._finalize()();
    v32 = -1 << *(_BYTE *)(v8 + 32);
    v33 = v31 & ~v32;
    v34 = v33 >> 6;
    if (((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6))) != 0)
    {
      v14 = __clz(__rbit64((-1 << v33) & ~*(_QWORD *)(v12 + 8 * (v33 >> 6)))) | v33 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v35 = 0;
      v36 = (unint64_t)(63 - v32) >> 6;
      do
      {
        if (++v34 == v36 && (v35 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v37 = v34 == v36;
        if (v34 == v36)
          v34 = 0;
        v35 |= v37;
        v38 = *(_QWORD *)(v12 + 8 * v34);
      }
      while (v38 == -1);
      v14 = __clz(__rbit64(~v38)) + (v34 << 6);
    }
    *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
    v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
    *v15 = v27;
    v15[1] = v26;
    v16 = *(_QWORD *)(v8 + 56) + 40 * v14;
    v17 = v45;
    v18 = v46;
    *(_QWORD *)(v16 + 32) = v47;
    *(_OWORD *)v16 = v17;
    *(_OWORD *)(v16 + 16) = v18;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v40;
  v22 = (_QWORD *)(v5 + 64);
  if ((v43 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v39 = 1 << *(_BYTE *)(v5 + 32);
  if (v39 >= 64)
    bzero(v22, ((unint64_t)(v39 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v22 = -1 << v39;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  swift_release(v5);
  *v3 = v8;
}

unint64_t sub_10004F22C(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  Swift::Int v14;
  unint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  _OWORD *v18;
  uint64_t v19;
  unint64_t v20;
  __int128 *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD v28[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v11 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v12 = *v11;
        v13 = v11[1];
        Hasher.init(_seed:)(v28, *(_QWORD *)(a2 + 40));
        swift_bridgeObjectRetain(v13);
        String.hash(into:)(v28, v12, v13);
        v14 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v13);
        v15 = v14 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v15 < v8)
            goto LABEL_5;
        }
        else if (v15 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v15)
        {
LABEL_11:
          v16 = *(_QWORD *)(a2 + 48);
          v17 = (_OWORD *)(v16 + 16 * v3);
          v18 = (_OWORD *)(v16 + 16 * v6);
          if (v3 != v6 || v17 >= v18 + 1)
            *v17 = *v18;
          v19 = *(_QWORD *)(a2 + 56);
          v20 = v19 + 40 * v3;
          v21 = (__int128 *)(v19 + 40 * v6);
          if (v3 != v6 || (v3 = v6, v20 >= (unint64_t)v21 + 40))
          {
            v9 = *v21;
            v10 = v21[1];
            *(_QWORD *)(v20 + 32) = *((_QWORD *)v21 + 4);
            *(_OWORD *)v20 = v9;
            *(_OWORD *)(v20 + 16) = v10;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (result >> 6));
    v24 = *v22;
    v23 = (-1 << result) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

void sub_10004F414(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10002861C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_10004F580();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      sub_1000517C8(a1, v18[7] + 40 * v12);
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    v22 = v18[7] + 40 * v12;
    v23 = *(_OWORD *)a1;
    v24 = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v22 + 32) = *(_QWORD *)(a1 + 32);
    *(_OWORD *)v22 = v23;
    *(_OWORD *)(v22 + 16) = v24;
    v25 = v18[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v18[2] = v27;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_10004EEF8(v15, a4 & 1);
  v19 = sub_10002861C(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_10004F580()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  uint64_t *v28;
  _OWORD v29[2];
  uint64_t v30;

  v1 = v0;
  sub_10000215C(&qword_10007C1B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    swift_release(v2);
LABEL_28:
    *v1 = v4;
    return;
  }
  v28 = v1;
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v25 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v25 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      v9 = v25 + 1;
      if (v25 + 1 >= v13)
        goto LABEL_26;
      v26 = *(_QWORD *)(v6 + 8 * v9);
      if (!v26)
        break;
    }
LABEL_25:
    v12 = (v26 - 1) & v26;
    v15 = __clz(__rbit64(v26)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 40 * v15;
    sub_100006E70(*(_QWORD *)(v2 + 56) + 40 * v15, (uint64_t)v29);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    v22 = *(_QWORD *)(v4 + 56) + v20;
    v23 = v30;
    v24 = v29[1];
    *(_OWORD *)v22 = v29[0];
    *(_OWORD *)(v22 + 16) = v24;
    *(_QWORD *)(v22 + 32) = v23;
    swift_bridgeObjectRetain(v18);
  }
  v27 = v25 + 2;
  if (v27 >= v13)
  {
LABEL_26:
    swift_release(v2);
    v1 = v28;
    goto LABEL_28;
  }
  v26 = *(_QWORD *)(v6 + 8 * v27);
  if (v26)
  {
    v9 = v27;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v26 = *(_QWORD *)(v6 + 8 * v9);
    ++v27;
    if (v26)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
}

uint64_t sub_10004F774()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 136) = v0;
  return swift_task_switch(sub_10004F78C, 0, 0);
}

uint64_t sub_10004F78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  Swift::String v3;
  void *object;
  uint64_t v5;
  uint64_t inited;
  unint64_t v7;
  unint64_t v9;
  uint64_t v10;
  _BYTE *v11;

  v1 = (*(uint64_t (**)(void))((swift_isaMask & **(_QWORD **)(*(_QWORD *)(v0 + 136)
                                                           + OBJC_IVAR____TtC14bluetoothuserd13XPCConnection_listener))
                            + 0x70))();
  if (v1)
  {
    v2 = v1;
    v3._countAndFlagsBits = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 392))();
    object = v3._object;
    String.append(_:)(v3);
    swift_bridgeObjectRelease(object);
    v5 = sub_10000215C(&qword_10007AD98);
    inited = swift_initStackObject(v5, v0 + 16);
    *(_OWORD *)(inited + 16) = xmmword_1000606F0;
    *(_QWORD *)(v0 + 120) = 1920226159;
    *(_QWORD *)(v0 + 128) = 0xE400000000000000;
    AnyHashable.init<A>(_:)(v0 + 120, &type metadata for String, &protocol witness table for String);
    *(_QWORD *)(inited + 96) = &type metadata for String;
    *(_QWORD *)(inited + 72) = 10;
    *(_QWORD *)(inited + 80) = 0xE100000000000000;
    v7 = sub_10000F688(inited);
    swift_release(v2);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v7);
  }
  else
  {
    v9 = sub_10004F8F8();
    v10 = swift_allocError(&type metadata for CloudPairingManager.CloudPairingManagerError, v9, 0, 0);
    *v11 = 1;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

unint64_t sub_10004F8F8()
{
  unint64_t result;

  result = qword_10007BD50;
  if (!qword_10007BD50)
  {
    result = swift_getWitnessTable(&unk_1000620D4, &type metadata for CloudPairingManager.CloudPairingManagerError);
    atomic_store(result, (unint64_t *)&qword_10007BD50);
  }
  return result;
}

void *sub_10004F93C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_20;
  v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v5)
  {
    do
    {
      v6 = 4;
      while (1)
      {
        v7 = (a1 & 0xC000000000000001) != 0
           ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1)
           : *(id *)(a1 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
          break;
        v10 = objc_msgSend(v7, "idsDeviceID");
        if (v10)
        {
          v11 = v10;
          v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
          v14 = v13;

          if (v12 == a2 && v14 == a3)
          {
            swift_bridgeObjectRelease(a1);
            v17 = a3;
            goto LABEL_18;
          }
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, a2, a3, 0);
          swift_bridgeObjectRelease(v14);
          if ((v16 & 1) != 0)
          {
            v17 = a1;
LABEL_18:
            swift_bridgeObjectRelease(v17);
            return v8;
          }
        }

        ++v6;
        if (v9 == v5)
          goto LABEL_24;
      }
      __break(1u);
LABEL_20:
      v18 = a3;
      if (a1 < 0)
        v19 = a1;
      else
        v19 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v20 = _CocoaArrayWrapper.endIndex.getter(v19);
      a3 = v18;
      v5 = v20;
    }
    while (v20);
  }
LABEL_24:
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_10004FACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;

  result = _swiftEmptyArrayStorage;
  v18 = (unint64_t)_swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v9 = *(_QWORD *)(type metadata accessor for CloudPairedDeviceRecord(0) - 8);
    v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_100048864(v10, a2, a3, &v17);
      if (v3)
      {
        swift_bridgeObjectRelease(a1);
        return (_QWORD *)swift_bridgeObjectRelease(v18);
      }
      v14 = v17;
      if (v17)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v13);
        v16 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v15 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v16 >= v15 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v12 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v16, v14);
        specialized Array._endMutation()(v12);
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(a1);
    return (_QWORD *)v18;
  }
  return result;
}

uint64_t sub_10004FC08(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

_QWORD *sub_10004FCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(__n128);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return _swiftEmptyArrayStorage;
  v28 = type metadata accessor for CloudPairedDeviceRecord(0);
  v5 = *(_QWORD *)(v28 - 8);
  v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  v7 = *(uint64_t (**)(__n128))(*(_QWORD *)a2 + 144);
  v8 = *(_QWORD *)(v5 + 72);
  v27 = a1;
  swift_bridgeObjectRetain(a1);
  v9 = _swiftEmptyArrayStorage;
  do
  {
    v10 = (uint64_t *)(v6 + *(int *)(v28 + 24));
    v12 = *v10;
    v11 = v10[1];
    v13 = swift_bridgeObjectRetain(v11);
    v14 = v7(v13);
    if (!v15)
    {
      swift_bridgeObjectRelease(v11);
LABEL_13:
      v19 = sub_100034048();
      if (v20 >> 60 != 15)
      {
        v21 = v19;
        v22 = v20;
        if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
          v9 = sub_10004E73C(0, v9[2] + 1, 1, v9);
        v24 = v9[2];
        v23 = v9[3];
        if (v24 >= v23 >> 1)
          v9 = sub_10004E73C((_QWORD *)(v23 > 1), v24 + 1, 1, v9);
        v9[2] = v24 + 1;
        v25 = &v9[2 * v24];
        v25[4] = v21;
        v25[5] = v22;
      }
      goto LABEL_4;
    }
    v16 = v15;
    if (v12 == v14 && v15 == v11)
    {
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v16);
      goto LABEL_4;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v14, v15, 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v16);
    if ((v18 & 1) == 0)
      goto LABEL_13;
LABEL_4:
    v6 += v8;
    --v2;
  }
  while (v2);
  swift_bridgeObjectRelease(v27);
  return v9;
}

unint64_t sub_10004FEC8()
{
  unint64_t result;

  result = qword_10007BDB0;
  if (!qword_10007BDB0)
  {
    result = swift_getWitnessTable(&unk_1000624C0, &type metadata for XPCConnection.XPCConnectionError);
    atomic_store(result, &qword_10007BDB0);
  }
  return result;
}

uint64_t sub_10004FF0C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

void sub_10004FF44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  id v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  void *v32;
  void *v33;
  unint64_t v34;
  NSString v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint8_t *v44;
  _QWORD *v45;
  uint8_t *v46;
  uint8_t *v47;
  NSObject *v48;
  uint64_t v49;
  void *v50;
  uint8_t *v51;
  uint8_t *v52;
  NSObject *v53;
  uint8_t *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  uint64_t v65;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v57 - v7;
  v62 = 0;
  v63 = 0xE000000000000000;
  v9 = objc_msgSend(objc_allocWithZone((Class)CNContactStore), "init");
  v10 = sub_10000215C((uint64_t *)&unk_10007B630);
  v11 = swift_allocObject(v10, 48, 7);
  *(_OWORD *)(v11 + 16) = xmmword_1000606F0;
  *(_QWORD *)(v11 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CNContactGivenNameKey);
  *(_QWORD *)(v11 + 40) = v12;
  v64 = (id)v11;
  v13 = sub_10000215C(&qword_10007BDD0);
  v14 = sub_10000215C(&qword_10007BE38);
  if (!swift_dynamicCast(&v61, &v64, v13, v14, 6))
  {
LABEL_4:
    v24 = sub_1000309E4();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v24, v2);
    v26 = v62;
    v25 = v63;
    v27 = swift_bridgeObjectRetain_n(v63, 2);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v60 = v9;
      v30 = swift_slowAlloc(12, -1);
      v59 = v2;
      v31 = (uint8_t *)v30;
      v32 = (void *)swift_slowAlloc(32, -1);
      v58 = (uint8_t *)v3;
      v33 = v32;
      v64 = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain(v25);
      v61 = sub_100002CA8(v26, v25, (uint64_t *)&v64);
      v9 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Users first name returned from Bluetoothuserd: (%s)", v31, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      (*((void (**)(char *, uint64_t))v58 + 1))(v6, v59);
    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    }
    swift_beginAccess(&v62, &v64, 0, 0);
    v34 = v63;
    v35 = String._bridgeToObjectiveC()();
    (*(void (**)(uint64_t, NSString, _QWORD))(a1 + 16))(a1, v35, 0);

    swift_bridgeObjectRelease(v34);
    v9 = v35;
    goto LABEL_8;
  }
  v15 = v61;
  swift_bridgeObjectRelease(0xE000000000000000);
  sub_10000215C(&qword_10007BE40);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  v64 = 0;
  v17 = objc_msgSend(v9, "_crossPlatformUnifiedMeContactWithKeysToFetch:error:", isa, &v64);

  v18 = v64;
  if (v17)
  {
    v19 = v64;
    v20 = objc_msgSend(v17, "givenName");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v62 = v21;
    v63 = v23;
    goto LABEL_4;
  }
  v36 = v64;
  v37 = _convertNSErrorToError(_:)(v18);

  swift_willThrow(v38);
  v39 = sub_1000309E4();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v39, v2);
  swift_errorRetain(v37);
  v40 = swift_errorRetain(v37);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v60 = v9;
    v43 = a1;
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (_QWORD *)swift_slowAlloc(8, -1);
    v58 = v44;
    v59 = v2;
    *(_DWORD *)v44 = 138412290;
    v46 = v44 + 12;
    v47 = v44 + 4;
    swift_errorRetain(v37);
    v48 = v41;
    v49 = v3;
    v50 = (void *)_swift_stdlib_bridgeErrorToNSError(v37);
    v64 = v50;
    v51 = v47;
    a1 = v43;
    v52 = v46;
    v2 = v59;
    v9 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v51, v52);
    *v45 = v50;
    v3 = v49;
    v41 = v48;
    swift_errorRelease(v37);
    swift_errorRelease(v37);
    v53 = v48;
    v54 = v58;
    _os_log_impl((void *)&_mh_execute_header, v53, v42, "Error trying to access contact store for users first name %@", v58, 0xCu);
    v55 = sub_10000215C((uint64_t *)&unk_10007AA40);
    swift_arrayDestroy(v45, 1, v55);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    swift_errorRelease(v37);
    swift_errorRelease(v37);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  swift_errorRetain(v37);
  v56 = (void *)_convertErrorToNSError(_:)(v37);
  (*(void (**)(uint64_t, _QWORD, void *))(a1 + 16))(a1, 0, v56);

  swift_errorRelease(v37);
  swift_errorRelease(v37);
LABEL_8:

}

uint64_t sub_1000504D0(uint64_t a1, int a2)
{
  uint64_t v2;

  *(_DWORD *)(v2 + 40) = a2;
  *(_QWORD *)(v2 + 32) = a1;
  return swift_task_switch(sub_1000504EC, 0, 0);
}

uint64_t sub_1000504EC()
{
  uint64_t v0;
  BOOL v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  char v33;
  _BYTE v34[40];
  _QWORD *v35;

  v1 = *(_DWORD *)(v0 + 40) != 8;
  v2 = *(_QWORD *)(v0 + 32);
  v3 = _swiftEmptyDictionarySingleton;
  v35 = _swiftEmptyDictionarySingleton;
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = (char *)(v32 + 16);
    v33 = 2 * v1;
    swift_bridgeObjectRetain(v2);
    v7 = (unint64_t *)(v6 + 40);
    while (1)
    {
      v8 = *(v7 - 1);
      v9 = *v7;
      v10 = sub_10000215C(&qword_10007BDD0);
      sub_10000DDB4(v8, v9, v33, v10, v5);
      if (*(_QWORD *)v5)
        break;
      v10 = sub_10000215C(&qword_10007C158);
      sub_10000DDB4(v8, v9, v33, v10, v5);
      if (*(_QWORD *)v5)
      {
        *(_QWORD *)v5 = *(_QWORD *)v5;
        v11 = sub_100051710(&qword_10007C198, &qword_10007C158, (uint64_t)&protocol conformance descriptor for <A> [A]);
        goto LABEL_7;
      }
      sub_10000DDB4(v8, v9, v33, (uint64_t)&type metadata for Bool, v5);
      v16 = *v5;
      if (v16 != 2)
      {
        *v5 = v16 & 1;
        swift_bridgeObjectRetain(v9);
        v13 = v32 + 16;
        v14 = &type metadata for Bool;
        v15 = &protocol witness table for Bool;
        goto LABEL_8;
      }
      sub_10000DDB4(v8, v9, v33, (uint64_t)&type metadata for Data, v5);
      v17 = *(_QWORD *)(v32 + 24);
      if (v17 >> 60 == 15)
      {
        v18 = sub_10000215C(&qword_10007C160);
        sub_10000DDB4(v8, v9, v33, v18, v5);
        if (*(_QWORD *)v5)
        {
          *(_QWORD *)v5 = *(_QWORD *)v5;
          v19 = sub_100051770(&qword_10007C188, &qword_10007C160, (uint64_t)&protocol conformance descriptor for <> [A : B]);
        }
        else
        {
          v18 = sub_10000215C(&qword_10007C168);
          sub_10000DDB4(v8, v9, v33, v18, v5);
          if (!*(_QWORD *)v5)
          {
            v23 = sub_100011254(0, &qword_10007C170, NSNumber_ptr);
            sub_10000DDB4(v8, v9, v33, v23, v5);
            v24 = *(void **)v5;
            if (*(_QWORD *)v5)
            {
              *(_QWORD *)v5 = v24;
              v25 = sub_100051674();
              swift_bridgeObjectRetain(v9);
              v26 = v24;
              AnyHashable.init<A>(_:)(v5, v23, v25);
              sub_10004C0C0((uint64_t)v34, v8, v9);

            }
            else
            {
              sub_10000DDB4(v8, v9, v33, (uint64_t)&type metadata for String, v5);
              v27 = *(_QWORD *)(v32 + 24);
              if (v27)
              {
                *(_QWORD *)(v32 + 16) = *(_QWORD *)(v32 + 16);
                *(_QWORD *)(v32 + 24) = v27;
                swift_bridgeObjectRetain(v9);
                AnyHashable.init<A>(_:)(v5, &type metadata for String, &protocol witness table for String);
                sub_10004C0C0((uint64_t)v34, v8, v9);
              }
            }
            goto LABEL_9;
          }
          *(_QWORD *)v5 = *(_QWORD *)v5;
          v19 = sub_100051710(&qword_10007C180, &qword_10007C168, (uint64_t)&protocol conformance descriptor for <> [A : B]);
        }
        v22 = v19;
        swift_bridgeObjectRetain(v9);
        AnyHashable.init<A>(_:)(v5, v18, v22);
        sub_10004C0C0((uint64_t)v34, v8, v9);
      }
      else
      {
        v20 = *(_QWORD *)(v32 + 16);
        *(_QWORD *)(v32 + 16) = v20;
        *(_QWORD *)(v32 + 24) = v17;
        swift_bridgeObjectRetain(v9);
        sub_100009708(v20, v17);
        v21 = sub_1000516CC();
        AnyHashable.init<A>(_:)(v5, &type metadata for Data, v21);
        sub_10004C0C0((uint64_t)v34, v8, v9);
        sub_1000093D8(v20, v17);
      }
LABEL_9:
      v7 += 2;
      if (!--v4)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v32 + 32));
        v3 = v35;
        goto LABEL_26;
      }
    }
    *(_QWORD *)v5 = *(_QWORD *)v5;
    v11 = sub_100051770(&qword_10007C1A0, &qword_10007BDD0, (uint64_t)&protocol conformance descriptor for <A> [A]);
LABEL_7:
    v12 = (void *)v11;
    swift_bridgeObjectRetain(v9);
    v13 = v32 + 16;
    v14 = (void *)v10;
    v15 = v12;
LABEL_8:
    AnyHashable.init<A>(_:)(v13, v14, v15);
    sub_10004C0C0((uint64_t)v34, v8, v9);
    goto LABEL_9;
  }
LABEL_26:
  swift_bridgeObjectRetain(v3);
  sub_10004C19C(v28);
  v30 = v29;
  swift_bridgeObjectRelease_n(v3, 2);
  return (*(uint64_t (**)(uint64_t))(v32 + 8))(v30);
}

uint64_t sub_100050978(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  *(_DWORD *)(v4 + 72) = a4;
  *(_QWORD *)(v4 + 56) = a2;
  *(_QWORD *)(v4 + 64) = a3;
  *(_QWORD *)(v4 + 48) = a1;
  return swift_task_switch(sub_100050998, 0, 0);
}

uint64_t sub_100050998()
{
  uint64_t v0;
  int v1;
  BOOL v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;

  v1 = *(_DWORD *)(v0 + 72);
  v2 = v1 != 8;
  v3 = v1 == 8;
  v4 = *(_QWORD *)(v0 + 56);
  v5 = *(_QWORD *)(v0 + 48);
  sub_100002D98(*(_QWORD *)(v0 + 64), v0 + 16);
  sub_10000F5C8(2 * v2, v5, v4, v0 + 16);
  sub_10000BCBC(v0 + 16, &qword_10007BE80);
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  sub_10000F5C8(2 * v3, v5, v4, v0 + 16);
  sub_10000BCBC(v0 + 16, &qword_10007BE80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for BluetoothUserXPCServer()
{
  return objc_opt_self(_TtC14bluetoothuserd22BluetoothUserXPCServer);
}

uint64_t sub_100050A68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100050A8C()
{
  uint64_t v0;

  return sub_10004CE90(*(_QWORD **)(v0 + 16));
}

uint64_t sub_100050A94()
{
  uint64_t v0;

  return sub_10004D200(*(_QWORD **)(v0 + 16));
}

_QWORD *sub_100050A9C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_16;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v6 = v3 & 0xC000000000000001;
      v7 = v3 & 0xFFFFFFFFFFFFFF8;
      v21 = v3 & 0xFFFFFFFFFFFFFF8;
      while (v6)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
LABEL_9:
        v16 = v15;
        v17 = v5 + 1;
        if (__OFADD__(v5, 1))
          goto LABEL_15;
        type metadata accessor for XPCConnection();
        v18 = static NSObject.== infix(_:_:)(v16, a2);
        if ((v18 & 1) != 0)
        {

        }
        else
        {
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
          v8 = v6;
          v9 = v4;
          v10 = v3;
          v11 = a2;
          v12 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
          v13 = v12;
          a2 = v11;
          v3 = v10;
          v4 = v9;
          v6 = v8;
          v7 = v21;
          v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v16);
          specialized ContiguousArray._endMutation()(v14);
        }
        ++v5;
        if (v17 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)(v7 + 16))
        break;
      __break(1u);
LABEL_15:
      __break(1u);
LABEL_16:
      if (v3 < 0)
        v20 = v3;
      else
        v20 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v20);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v15 = *(id *)(v3 + 8 * v5 + 32);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100050C14()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100050C38()
{
  return sub_10002E6AC((void (*)(_QWORD))&_swift_release);
}

void sub_100050C44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *Strong;
  void *v4;
  _BYTE v5[24];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16) + 16;
  swift_beginAccess(v2, v5, 0, 0);
  Strong = (_QWORD *)swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    (*(void (**)(uint64_t))((swift_isaMask & *Strong) + 0xF8))(v1);

  }
}

unint64_t sub_100050CB8()
{
  unint64_t result;

  result = qword_10007BE88;
  if (!qword_10007BE88)
  {
    result = swift_getWitnessTable(&unk_100062458, &type metadata for XPCConnection.XPCConnectionError);
    atomic_store(result, (unint64_t *)&qword_10007BE88);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for XPCConnection.XPCConnectionError(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100050D3C + 4 * byte_100062440[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100050D5C + 4 * byte_100062445[v4]))();
}

_BYTE *sub_100050D3C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100050D5C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100050D64(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100050D6C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100050D74(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100050D7C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for XPCConnection.XPCConnectionError()
{
  return &type metadata for XPCConnection.XPCConnectionError;
}

void type metadata accessor for CBDistributedDebugLogging(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007BFA0, (uint64_t)&unk_100073D78);
}

uint64_t sub_100050DAC()
{
  return sub_10000219C(&qword_10007BFA8, (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging, (uint64_t)&unk_1000625DC);
}

uint64_t sub_100050DD8()
{
  return sub_10000219C(&qword_10007BFB0, (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging, (uint64_t)&unk_1000625AC);
}

uint64_t sub_100050E04()
{
  return sub_10000219C(&qword_10007BFB8, (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging, (uint64_t)&unk_100062604);
}

uint64_t sub_100050E30()
{
  return sub_10000219C((unint64_t *)&unk_10007BFC0, (uint64_t (*)(uint64_t))type metadata accessor for CBDistributedDebugLogging, (uint64_t)&unk_10006263C);
}

uint64_t sub_100050E5C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  _Block_release(*(const void **)(v0 + 40));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100050E98()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned int *)(v0 + 32);
  v6 = *(void **)(v0 + 40);
  v5 = *(void **)(v0 + 48);
  v7 = (_QWORD *)swift_task_alloc(dword_10007BFD4);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100051824;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *))((char *)&dword_10007BFD0 + dword_10007BFD0))(v2, v3, v4, v6, v5);
}

uint64_t sub_100050F1C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10007BFE4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_10007BFE0 + dword_10007BFE0))(v2, v3, v4);
}

uint64_t sub_100050F98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_10007BFF4);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100051824;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_10007BFF0 + dword_10007BFF0))(a1, v4, v5, v6);
}

uint64_t sub_10005101C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100051040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10007C004);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000510B0;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10007C000 + dword_10007C000))(a1, v4);
}

uint64_t sub_1000510B0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000510F8()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10005112C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(unsigned int *)(v0 + 24);
  v5 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 40);
  v6 = (_QWORD *)swift_task_alloc(dword_10007C014);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000510B0;
  return ((uint64_t (*)(uint64_t, uint64_t, void *, void *))((char *)&dword_10007C010 + dword_10007C010))(v2, v3, v5, v4);
}

uint64_t sub_1000511B4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10007C034);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_10007C030 + dword_10007C030))(v2, v4, v3);
}

uint64_t sub_100051228()
{
  return sub_10002E6AC((void (*)(_QWORD))&__Block_release);
}

uint64_t sub_100051234()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10007C054);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100051824;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007C050 + dword_10007C050))(v2, v3);
}

uint64_t sub_1000512A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000512D0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(_DWORD *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_10007C074);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(int, void *, void *))((char *)&dword_10007C070 + dword_10007C070))(v2, v4, v3);
}

uint64_t sub_100051344()
{
  return sub_10002E6AC((void (*)(_QWORD))&__Block_release);
}

uint64_t sub_100051350()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10007C094);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100051824;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007C090 + dword_10007C090))(v2, v3);
}

uint64_t sub_1000513C0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10007C0B4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007C0B0 + dword_10007C0B0))(v2, v3, v4);
}

uint64_t sub_100051438()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10007C0D4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007C0D0 + dword_10007C0D0))(v2, v3, v4);
}

uint64_t sub_1000514B0()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10007C0F4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_10007C0F0 + dword_10007C0F0))(v2, v3, v4);
}

uint64_t sub_100051524()
{
  return sub_10002E6AC((void (*)(_QWORD))&__Block_release);
}

uint64_t sub_100051530()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_10007C114);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100051824;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_10007C110 + dword_10007C110))(v2, v3);
}

uint64_t sub_1000515A0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000515D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_10007C134);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_10007C130 + dword_10007C130))(v2, v3, v4);
}

uint64_t sub_100051648()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_100051674()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007C178;
  if (!qword_10007C178)
  {
    v1 = sub_100011254(255, &qword_10007C170, NSNumber_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10007C178);
  }
  return result;
}

unint64_t sub_1000516CC()
{
  unint64_t result;

  result = qword_10007C190;
  if (!qword_10007C190)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_10007C190);
  }
  return result;
}

uint64_t sub_100051710(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006DD0(a2);
    sub_100051674();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100051770(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100006DD0(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000517C8(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 40))(a2, a1);
  return a2;
}

void type metadata accessor for CBKeyValueSource(uint64_t a1)
{
  sub_10002F9D4(a1, &qword_10007C1C8, (uint64_t)&unk_1000742F0);
}

id sub_100051848()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = (id)BiomeLibrary();
    v4 = objc_msgSend(v3, "Device");
    swift_unknownObjectRelease(v3);
    v5 = objc_msgSend(v4, "Wireless");
    swift_unknownObjectRelease(v4);
    v6 = objc_msgSend(v5, "BluetoothNearbyDevice");
    swift_unknownObjectRelease(v5);
    v7 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v6;
    v2 = v6;

    v1 = 0;
  }
  v8 = v1;
  return v2;
}

void sub_100051910(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

void (*sub_10005191C(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100051848();
  return sub_100051950;
}

void sub_100051950(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v2;

}

id sub_100051960()
{
  _QWORD *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = (void *)v0[4];
  if (v1)
  {
    v2 = (id)v0[4];
  }
  else
  {
    v3 = (void *)(*(uint64_t (**)(void))(*v0 + 120))();
    v4 = objc_msgSend(v3, "source");

    v5 = (void *)v0[4];
    v0[4] = v4;
    v2 = v4;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

void sub_1000519DC(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = a1;

}

void (*sub_1000519E8(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100051960();
  return sub_100051A1C;
}

void sub_100051A1C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v2;

}

void sub_100051A2C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = a1;

}

void (*sub_100051A38(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100002FE8();
  return sub_100051A6C;
}

void sub_100051A6C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v2;

}

id sub_100051A7C()
{
  _QWORD *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;

  v1 = (void *)v0[6];
  if (v1)
  {
    v2 = (id)v0[6];
  }
  else
  {
    v3 = (void *)(*(uint64_t (**)(void))(*v0 + 168))();
    v4 = objc_msgSend(v3, "source");

    v5 = (void *)v0[6];
    v0[6] = v4;
    v2 = v4;

    v1 = 0;
  }
  v6 = v1;
  return v2;
}

void (*sub_100051AF8(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100051A7C();
  return sub_10000CAE0;
}

uint64_t sub_100051B2C(uint64_t a1, uint64_t a2, char a3, char a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[2];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v13 = (char *)v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v14 - 8);
  v28 = v14;
  __chkstk_darwin(v14);
  v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[1] = *(_QWORD *)(v5 + 16);
  v17 = swift_allocObject(&unk_100074488, 24, 7);
  swift_weakInit(v17 + 16, v5);
  v18 = swift_allocObject(&unk_1000744B0, 56, 7);
  *(_QWORD *)(v18 + 16) = v17;
  *(_BYTE *)(v18 + 24) = a3;
  *(_QWORD *)(v18 + 32) = a1;
  *(_QWORD *)(v18 + 40) = a2;
  *(_BYTE *)(v18 + 48) = a4;
  *(_DWORD *)(v18 + 52) = a5;
  aBlock[4] = sub_100052110;
  v32 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_1000744C8;
  v19 = _Block_copy(aBlock);
  swift_retain(v17);
  swift_bridgeObjectRetain(a2);
  static DispatchQoS.unspecified.getter(v20);
  v30 = _swiftEmptyArrayStorage;
  v21 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v22 = sub_10000215C((uint64_t *)&unk_10007A960);
  v23 = sub_10000221C((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v22, v23, v11, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v13, v19);
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v28);
  v24 = v32;
  swift_release(v17);
  return swift_release(v24);
}

uint64_t sub_100051D6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100051D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  Class isa;
  Class v16;
  Class v17;
  id v18;
  NSString v19;
  id v20;
  void *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v42, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v14 = result;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v16 = Bool._bridgeToObjectiveC()().super.super.isa;
    LODWORD(v39) = a6;
    v17 = UInt32._bridgeToObjectiveC()().super.super.isa;
    v18 = objc_allocWithZone((Class)BMDeviceBluetoothNearbyDevice);
    swift_bridgeObjectRetain(a4);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
    v20 = objc_msgSend(v18, "initWithInitiator:localIdentifier:starting:useCase:", isa, v19, v16, v17);

    v21 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v14 + 144))();
    objc_msgSend(v21, "sendEvent:", v20);

    v22 = sub_100002FCC();
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v22, v9);
    v23 = v20;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v36 = (_QWORD *)swift_slowAlloc(8, -1);
      v37 = swift_slowAlloc(32, -1);
      v41 = v37;
      *(_DWORD *)v26 = 136315394;
      v38 = v10;
      v27 = sub_100002574(v39);
      v28 = String.init(cString:)(v27);
      v39 = v9;
      v30 = v29;
      v40 = sub_100002CA8(v28, v29, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v26 + 12) = 2112;
      v40 = (uint64_t)v23;
      v31 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v26 + 14, v26 + 22);
      v32 = v36;
      *v36 = v23;

      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Send nearby device event %s for %@", (uint8_t *)v26, 0x16u);
      v33 = sub_10000215C((uint64_t *)&unk_10007AA40);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_release(v14);
      return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v39);
    }
    else
    {

      swift_release(v14);
      return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    }
  }
  return result;
}

uint64_t sub_1000520E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100052110()
{
  uint64_t v0;

  return sub_100051D90(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(unsigned __int8 *)(v0 + 48), *(_DWORD *)(v0 + 52));
}

uint64_t sub_100052128()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005214C()
{
  id *v0;

  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t sub_100052190()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_allocObject(v0, 56, 7);
  sub_1000521C4();
  return v1;
}

uint64_t sub_1000521C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100004FBC();
  v12 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v8);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v14 = sub_10000215C((uint64_t *)&unk_10007A910);
  v15 = sub_10000221C((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v2, v13);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000024, 0x8000000100067F20, v7, v4, v11, 0);
  *(_OWORD *)(v1 + 24) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  return v1;
}

uint64_t type metadata accessor for IntelligenceManager()
{
  return objc_opt_self(_TtC14bluetoothuserd19IntelligenceManager);
}

void type metadata accessor for CBUseCase()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10007C420)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_100074550);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007C420);
  }
}

uint64_t sub_100052414@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100074560, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

uint64_t sub_100052464@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = sub_100054FE4();
  *a1 = result;
  a1[1] = v3;
  return result;
}

void sub_100052488(_QWORD *a1@<X8>)
{
  *a1 = &off_100074598;
}

_QWORD *sub_100052498()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *result;

  v0 = type metadata accessor for SystemNotificationManager();
  v1 = swift_allocObject(v0, 40, 7);
  result = sub_1000525C4();
  qword_100080B50 = v1;
  return result;
}

uint64_t *sub_1000524D0()
{
  if (qword_100080640 != -1)
    swift_once(&qword_100080640, sub_100052498);
  return &qword_100080B50;
}

uint64_t sub_100052510()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 24, v2, 0, 0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 24));
}

uint64_t sub_100052544(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 24, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;
  return swift_bridgeObjectRelease(v3);
}

uint64_t (*sub_100052588(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 24, a1, 33, 0);
  return j__swift_endAccess;
}

_QWORD *sub_1000525C4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  void *v16;
  _QWORD *v17;
  NSObject *v18;
  void *v19;
  _QWORD *v20;
  uint64_t v22;
  unint64_t v23;
  void **aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t);
  void *v27;
  const char *(*v28)(void *);
  _QWORD *v29;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100004FBC();
  static DispatchQoS.unspecified.getter(v23);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v12 = sub_10000219C((unint64_t *)&qword_10007ADE0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v13 = sub_10000215C((uint64_t *)&unk_10007A910);
  v14 = sub_1000021DC((unint64_t *)&qword_10007ADF0, (uint64_t *)&unk_10007A910, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v13, v14, v6, v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
  v15 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000037, 0x8000000100068990, v11, v8, v5, 0);
  v1[2] = v15;
  v1[3] = _swiftEmptyArrayStorage;
  v1[4] = &_swiftEmptyDictionarySingleton;
  v28 = sub_100055CCC;
  v29 = v1;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100004A24;
  v27 = &unk_100074788;
  v16 = _Block_copy(&aBlock);
  v17 = v29;
  swift_retain(v1);
  swift_release(v17);
  xpc_set_event_stream_handler("com.apple.alarm", v15, v16);
  _Block_release(v16);
  v18 = v1[2];
  v28 = sub_100055CD4;
  v29 = v1;
  aBlock = _NSConcreteStackBlock;
  v25 = 1107296256;
  v26 = sub_100004A24;
  v27 = &unk_1000747B0;
  v19 = _Block_copy(&aBlock);
  v20 = v29;
  swift_retain(v1);
  swift_release(v20);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v18, v19);
  _Block_release(v19);
  return v1;
}

uint64_t sub_100052880(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  Date.timeIntervalSince1970.getter();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 168))(a1, a2);
}

xpc_object_t sub_1000528C4(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t result;
  int64_t v18;
  xpc_object_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  uint64_t v24;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000308F8();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(32, -1);
    v24 = v15;
    *(_DWORD *)v14 = 136315394;
    swift_bridgeObjectRetain(a2);
    v16 = sub_100002CA8(a1, a2, &v24);
    v22 = v6;
    v23 = *(double *)&v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v14 + 12) = 2048;
    v23 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v14 + 14, v14 + 22);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Scheduling alarm: %s for %f", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v22);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  result = xpc_dictionary_create(0, 0, 0);
  if ((~*(_QWORD *)&a3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (a3 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a3 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v18 = 1000000000 * (uint64_t)a3;
  if ((unsigned __int128)((uint64_t)a3 * (__int128)1000000000) >> 64 == v18 >> 63)
  {
    v19 = result;
    xpc_dictionary_set_date(result, "Date", v18);
    v20 = String.utf8CString.getter(a1, a2);
    swift_unknownObjectRetain(v19);
    xpc_set_event("com.apple.alarm", v20 + 32, v19);
    swift_unknownObjectRelease_n(v19, 2);
    return (xpc_object_t)swift_release(v20);
  }
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_100052B88(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000308F8();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9 = swift_bridgeObjectRetain_n(a2, 2);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(12, -1);
    v19 = a1;
    v13 = (uint8_t *)v12;
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain(a2);
    v20 = sub_100002CA8(v19, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Canceling alarm: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    v15 = v13;
    a1 = v19;
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v16 = String.utf8CString.getter(a1, a2);
  xpc_set_event("com.apple.alarm", v16 + 32, 0);
  return swift_release(v16);
}

void sub_100052D80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  NSObject *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  uint64_t v20;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v22;
  id v23;
  NSString v24;
  _QWORD *v25;
  void *v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  int out_token;
  void **aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  void *v35;
  void *v36;
  _QWORD *v37;

  v4 = v3;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000BB30(a3, (uint64_t)v14);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v14, 2, v8);
  if (v15)
  {
    if (v15 == 1)
    {
      out_token = -1;
      v16 = v4[2];
      v17 = (_QWORD *)swift_allocObject(&unk_100074620, 40, 7);
      v17[2] = v4;
      v17[3] = a1;
      v17[4] = a2;
      v36 = sub_100055084;
      v37 = v17;
      aBlock = _NSConcreteStackBlock;
      v33 = 1107296256;
      v34 = sub_1000065D4;
      v35 = &unk_100074638;
      v18 = _Block_copy(&aBlock);
      v19 = v37;
      swift_retain(v4);
      swift_bridgeObjectRetain(a2);
      swift_release(v19);
      v20 = String.utf8CString.getter(a1, a2);
      notify_register_dispatch((const char *)(v20 + 32), &out_token, v16, v18);
      swift_release(v20);
      _Block_release(v18);
      if (!out_token)
      {
        swift_beginAccess(v4 + 4, &aBlock, 33, 0);
        swift_bridgeObjectRetain(a2);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4[4]);
        v30 = v4[4];
        v4[4] = 0x8000000000000000;
        sub_100054AE4(0, a1, a2, isUniquelyReferenced_nonNull_native);
        v22 = v4[4];
        v4[4] = v30;
        swift_bridgeObjectRelease(a2);
        swift_bridgeObjectRelease(v22);
        swift_endAccess(&aBlock);
      }
    }
    else
    {
      v23 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
      v24 = String._bridgeToObjectiveC()();
      v25 = (_QWORD *)swift_allocObject(&unk_1000745D0, 40, 7);
      v25[2] = v4;
      v25[3] = a1;
      v25[4] = a2;
      v36 = sub_100055048;
      v37 = v25;
      aBlock = _NSConcreteStackBlock;
      v33 = 1107296256;
      v34 = sub_10005364C;
      v35 = &unk_1000745E8;
      v26 = _Block_copy(&aBlock);
      v27 = v37;
      swift_retain(v4);
      swift_bridgeObjectRetain(a2);
      swift_release(v27);
      v28 = objc_msgSend(v23, "addObserverForName:object:queue:usingBlock:", v24, v4, 0, v26);
      _Block_release(v26);
      swift_unknownObjectRelease(v28);

    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v14, v8);
    (*(void (**)(uint64_t, uint64_t, char *))(*v4 + 160))(a1, a2, v11);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
}

uint64_t sub_1000530FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000215C(&qword_10007AAB0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v24[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(v11);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
    return swift_bridgeObjectRelease(v14);
  v16 = *(unsigned __int8 *)(v10 + 80);
  v23 = v14;
  v17 = v14 + ((v16 + 32) & ~v16);
  v18 = *(_QWORD *)(v10 + 72);
  do
  {
    sub_1000550B8(v17, (uint64_t)v13);
    sub_1000094F4((uint64_t)v13, (uint64_t)v24);
    sub_100055ADC((uint64_t)v13);
    v19 = v25;
    v20 = v26;
    sub_1000096E4(v24, v25);
    v21 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 2, v21);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 8))(v8, a2, a3, v19, v20);
    sub_10000BB74((uint64_t)v8);
    sub_100002D78(v24);
    v17 += v18;
    --v15;
  }
  while (v15);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_100053298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  int v26;
  uint64_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  int v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60[3];
  uint64_t v61;
  uint64_t v62;

  v57 = a1;
  v58 = a2;
  v6 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v6);
  v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10000215C(&qword_10007AAB0);
  v54 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Notification(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Logger(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16);
  v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000308F8();
  v56 = v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v20, v16);
  v55 = v13;
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22 = v57;
  v57 = v12;
  v23 = v21(v15, v22, v12);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  v26 = v25;
  if (os_log_type_enabled(v24, v25))
  {
    v52 = v24;
    v27 = swift_slowAlloc(12, -1);
    v50 = v26;
    v28 = (uint8_t *)v27;
    v51 = swift_slowAlloc(32, -1);
    v60[0] = v51;
    v49 = v28;
    *(_DWORD *)v28 = 136315138;
    v48 = v28 + 4;
    v29 = (void *)Notification.name.getter();
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v53 = v16;
    v31 = v30;
    v33 = v32;

    v59 = sub_100002CA8(v31, v33, v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, v60, v48, v28 + 12);
    swift_bridgeObjectRelease(v33);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v57);
    v34 = v52;
    v35 = v49;
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v50, "Local notification received: %s", v49, 0xCu);
    v36 = v51;
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    v37 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v19, v53);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v15, v57);

    v37 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v19, v16);
  }
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v58 + 104))(v37);
  v39 = *(_QWORD *)(v38 + 16);
  if (v39)
  {
    v40 = *(unsigned __int8 *)(v54 + 80);
    v58 = v38;
    v41 = v38 + ((v40 + 32) & ~v40);
    v42 = *(_QWORD *)(v54 + 72);
    do
    {
      sub_1000550B8(v41, (uint64_t)v11);
      sub_1000094F4((uint64_t)v11, (uint64_t)v60);
      sub_100055ADC((uint64_t)v11);
      v43 = v61;
      v44 = v62;
      sub_1000096E4(v60, v61);
      v45 = type metadata accessor for Date(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v8, 2, 2, v45);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v44 + 8))(v8, a3, a4, v43, v44);
      sub_10000BB74((uint64_t)v8);
      sub_100002D78(v60);
      v41 += v42;
      --v39;
    }
    while (v39);
    v38 = v58;
  }
  return swift_bridgeObjectRelease(v38);
}

uint64_t sub_10005364C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

void sub_1000536F0(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int v9;
  id v10;
  _BYTE v11[24];

  v3 = v2;
  (*(void (**)(void))(*v2 + 176))();
  swift_beginAccess(v2 + 4, v11, 0, 0);
  v6 = v2[4];
  if (*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v6);
    v7 = sub_10002861C(a1, a2);
    if ((v8 & 1) != 0)
    {
      v9 = *(_DWORD *)(*(_QWORD *)(v6 + 56) + 4 * v7);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v6);
      notify_cancel(v9);
    }
    else
    {
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v6);
    }
  }
  v10 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v10, "removeObserver:", v3);

}

const char *sub_1000537DC(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  uint64_t v44;
  uint64_t v45;

  v41 = a2;
  v3 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000215C(&qword_10007AAB0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v40 = v7;
    v15 = String.init(cString:)(result);
    v17 = v16;
    v18 = sub_1000308F8();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    v19 = swift_bridgeObjectRetain_n(v17, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v43[0] = v39;
      v38 = v22;
      *(_DWORD *)v22 = 136315138;
      v37 = v22 + 4;
      swift_bridgeObjectRetain(v17);
      v42 = sub_100002CA8(v15, v17, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v37, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      v23 = v38;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "On xpc event stream, com.apple.notifyd.matching, notification %s", v38, 0xCu);
      v24 = v39;
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 104))(v25);
    v27 = v26;
    v28 = *(_QWORD *)(v26 + 16);
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v40 + 80);
      v41 = v26;
      v30 = v26 + ((v29 + 32) & ~v29);
      v31 = *(_QWORD *)(v40 + 72);
      do
      {
        sub_1000550B8(v30, (uint64_t)v9);
        sub_1000094F4((uint64_t)v9, (uint64_t)v43);
        sub_100055ADC((uint64_t)v9);
        v32 = v44;
        v33 = v45;
        sub_1000096E4(v43, v44);
        v34 = type metadata accessor for Date(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v5, 1, 2, v34);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v33 + 8))(v5, v15, v17, v32, v33);
        sub_10000BB74((uint64_t)v5);
        sub_100002D78(v43);
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease(v17);
      v35 = v41;
    }
    else
    {
      swift_bridgeObjectRelease(v17);
      v35 = v27;
    }
    return (const char *)swift_bridgeObjectRelease(v35);
  }
  return result;
}

const char *sub_100053B2C(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  const char *result;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[3];
  uint64_t v45;
  uint64_t v46;

  v42 = a2;
  v3 = type metadata accessor for SystemNotificationSource(0);
  __chkstk_darwin(v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000215C(&qword_10007AAB0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Logger(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (result)
  {
    v41 = v7;
    v15 = String.init(cString:)(result);
    v17 = v16;
    v18 = sub_1000308F8();
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v18, v10);
    v19 = swift_bridgeObjectRetain_n(v17, 2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v44[0] = v40;
      v39 = v22;
      *(_DWORD *)v22 = 136315138;
      v38 = v22 + 4;
      swift_bridgeObjectRetain(v17);
      v43 = sub_100002CA8(v15, v17, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v38, v22 + 12);
      swift_bridgeObjectRelease_n(v17, 3);
      v23 = v39;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "On xpc event stream, com.apple.alarm, notification %s", v39, 0xCu);
      v24 = v40;
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v17, 2);
    }
    v25 = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 104))(v25);
    v27 = v26;
    v28 = *(_QWORD *)(v26 + 16);
    if (v28)
    {
      v29 = *(unsigned __int8 *)(v41 + 80);
      v42 = v26;
      v30 = v26 + ((v29 + 32) & ~v29);
      v31 = *(_QWORD *)(v41 + 72);
      do
      {
        sub_1000550B8(v30, (uint64_t)v9);
        sub_1000094F4((uint64_t)v9, (uint64_t)v44);
        sub_100055ADC((uint64_t)v9);
        v32 = v45;
        v33 = v46;
        v34 = sub_1000096E4(v44, v45);
        static Date.now.getter(v34);
        v35 = type metadata accessor for Date(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v5, 0, 2, v35);
        (*(void (**)(char *, uint64_t, unint64_t, uint64_t, uint64_t))(v33 + 8))(v5, v15, v17, v32, v33);
        sub_10000BB74((uint64_t)v5);
        sub_100002D78(v44);
        v30 += v31;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease(v17);
      v36 = v42;
    }
    else
    {
      swift_bridgeObjectRelease(v17);
      v36 = v27;
    }
    return (const char *)swift_bridgeObjectRelease(v36);
  }
  return result;
}

uint64_t sub_100053E84()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100053EB8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v1 = sub_10000215C(&qword_10007AAB0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100055090, v3, v1);
}

uint64_t sub_100053F18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(_BYTE *, _QWORD);
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v17;
  unint64_t v18;
  _BYTE v21[40];

  v6 = sub_10000215C(&qword_10007AAB0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = &v21[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_1000094F4(a1, (uint64_t)v21);
  v10 = swift_allocObject(&unk_100074770, 24, 7);
  swift_weakInit(v10 + 16, a2);
  v11 = sub_10000215C(&qword_10007C608);
  Subscription.init(subscriber:unsubscribeBlock:)((uint64_t)v21, (uint64_t)sub_100055B40, v10, v11, a3);
  sub_1000550B8(a3, (uint64_t)v9);
  v12 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a2 + 120))(v21);
  v14 = v13;
  v15 = *v13;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v13);
  *v14 = v15;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v15 = sub_1000545CC(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
    *v14 = v15;
  }
  v18 = *(_QWORD *)(v15 + 16);
  v17 = *(_QWORD *)(v15 + 24);
  if (v18 >= v17 >> 1)
  {
    v15 = sub_1000545CC(v17 > 1, v18 + 1, 1, v15);
    *v14 = v15;
  }
  *(_QWORD *)(v15 + 16) = v18 + 1;
  sub_1000551A8((uint64_t)v9, v15+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v18);
  return v12(v21, 0);
}

uint64_t sub_1000540AC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_10000215C(&qword_10007AAB0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11);
  v23[1] = *(_QWORD *)(v2 + 16);
  sub_1000550B8(a1, (uint64_t)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = *(unsigned __int8 *)(v12 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_100074670, v15 + v13, v14 | 7);
  *(_QWORD *)(v16 + 16) = v2;
  sub_1000551A8((uint64_t)v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15);
  aBlock[4] = sub_1000551F0;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100074688;
  v17 = _Block_copy(aBlock);
  v18 = swift_retain(v2);
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_10000219C((unint64_t *)&qword_10007AE20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_10000215C((uint64_t *)&unk_10007A960);
  v21 = sub_1000021DC((unint64_t *)&qword_10007AE30, (uint64_t *)&unk_10007A960, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release(v27);
}

uint64_t sub_100054300(uint64_t (*a1)(char *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;

  v7 = sub_10000215C(&qword_10007AAB0);
  v24 = *(_QWORD *)(v7 - 8);
  v8 = __chkstk_darwin(v7);
  v23 = (uint64_t)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v8);
  v12 = (char *)v20 - v11;
  v13 = _swiftEmptyArrayStorage;
  v25 = _swiftEmptyArrayStorage;
  v22 = *(_QWORD *)(a3 + 16);
  if (v22)
  {
    v14 = 0;
    v15 = _swiftEmptyArrayStorage;
    v20[1] = a2;
    v21 = a3;
    v20[0] = a1;
    while (v14 < *(_QWORD *)(a3 + 16))
    {
      v16 = (*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
      v13 = *(_QWORD **)(v24 + 72);
      sub_1000550B8(a3 + v16 + (_QWORD)v13 * v14, (uint64_t)v12);
      v17 = a1(v12);
      if (v3)
      {
        sub_100055ADC((uint64_t)v12);
        swift_release(v15);
        swift_bridgeObjectRelease(a3);
        return (uint64_t)v13;
      }
      if ((v17 & 1) != 0)
      {
        sub_1000551A8((uint64_t)v12, v23);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_100054DE0(0, v15[2] + 1, 1);
        v15 = v25;
        v19 = v25[2];
        v18 = v25[3];
        if (v19 >= v18 >> 1)
        {
          sub_100054DE0(v18 > 1, v19 + 1, 1);
          v15 = v25;
        }
        v15[2] = v19 + 1;
        result = sub_1000551A8(v23, (uint64_t)v15 + v16 + v19 * (_QWORD)v13);
        a3 = v21;
        a1 = (uint64_t (*)(char *))v20[0];
      }
      else
      {
        result = sub_100055ADC((uint64_t)v12);
      }
      if (v22 == ++v14)
      {
        v13 = v25;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease(a3);
    return (uint64_t)v13;
  }
  return result;
}

uint64_t sub_1000544F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

void (*sub_10005451C(_QWORD *a1))(_QWORD *a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 120))();
  return sub_1000082A4;
}

uint64_t sub_10005456C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[6];

  v2 = *v1;
  v5[2] = a1;
  v5[3] = v2;
  v3 = sub_10000215C(&qword_10007AAB0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_100055CFC, v5, v3);
}

uint64_t sub_1000545CC(char a1, int64_t a2, char a3, unint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007C5F8);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007AAB0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
    goto LABEL_29;
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007AAB0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v15 + v20;
  if ((a1 & 1) != 0)
  {
    v22 = a4 + v20;
    if ((unint64_t)v15 < a4 || v21 >= v22 + *(_QWORD *)(v19 + 72) * v8)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v15 + v20, v22, v8, v18);
    }
    else if (v15 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v15 + v20);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100055BB0(0, v8, v21, a4);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v15;
}

void sub_1000547DC(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000215C((uint64_t *)&unk_10007C610);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = v3;
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v36)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v36)
        goto LABEL_36;
      v24 = *(_QWORD *)(v37 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v36)
        {
LABEL_36:
          swift_release(v5);
          v3 = v35;
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v24 = *(_QWORD *)(v37 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_DWORD *)(*(_QWORD *)(v5 + 56) + 4 * v21);
    if ((v38 & 1) == 0)
      swift_bridgeObjectRetain(v30[1]);
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v39, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_DWORD *)(*(_QWORD *)(v8 + 56) + 4 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v35;
  v23 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100054AE4(int a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = sub_10002861C(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100054C34();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_DWORD *)(v18[7] + 4 * v12) = a1;
      return;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v18[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_DWORD *)(v18[7] + 4 * v12) = a1;
    v22 = v18[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v18[2] = v24;
      swift_bridgeObjectRetain(a3);
      return;
    }
    goto LABEL_14;
  }
  sub_1000547DC(v15, a4 & 1);
  v19 = sub_10002861C(a2, a3);
  if ((v16 & 1) == (v20 & 1))
  {
    v12 = v19;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_100054C34()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_10000215C((uint64_t *)&unk_10007C610);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 4 * v15;
    LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(v2 + 56) + v20);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    *(_DWORD *)(*(_QWORD *)(v4 + 56) + v20) = (_DWORD)v17;
    swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

uint64_t sub_100054DE0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100054DFC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100054DFC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_10000215C(&qword_10007C5F8);
  v11 = *(_QWORD *)(sub_10000215C(&qword_10007AAB0) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_10000215C(&qword_10007AAB0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100054FE4()
{
  return 0x6C7070612E6D6F63;
}

uint64_t type metadata accessor for SystemNotificationSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100080850;
  if (!qword_100080850)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SystemNotificationSource);
  return result;
}

uint64_t sub_100055048(uint64_t a1)
{
  uint64_t *v1;

  return sub_100053298(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100055058()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100055084()
{
  uint64_t *v0;

  return sub_1000530FC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100055090@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100053F18(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000550B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100055100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;

  v1 = sub_10000215C(&qword_10007AAB0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = (_QWORD *)(v0 + v4);
  sub_100002D78(v7);
  v8 = (char *)v7 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_release(*(_QWORD *)((char *)v7 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000551A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000551F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[4];

  v1 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000215C(&qword_10007AAB0) - 8) + 80);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = v0 + ((v1 + 24) & ~v1);
  v4 = (*(uint64_t (**)(void))(*(_QWORD *)v2 + 104))();
  v7[2] = v3;
  v5 = sub_100054300((uint64_t (*)(char *))sub_100055A58, (uint64_t)v7, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 112))(v5);
}

unint64_t sub_100055278()
{
  unint64_t result;

  result = qword_10007C428;
  if (!qword_10007C428)
  {
    result = swift_getWitnessTable(&unk_1000628BC, &type metadata for SystemNotificationManager.Constants);
    atomic_store(result, (unint64_t *)&qword_10007C428);
  }
  return result;
}

uint64_t sub_1000552BC()
{
  return sub_1000021DC(&qword_10007C430, &qword_10007C438, (uint64_t)&protocol conformance descriptor for [A]);
}

uint64_t *sub_1000552E8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_1000553B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(a1, 2, v2);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return result;
}

void *sub_100055418(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_1000554BC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_1000555AC(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100055650(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void *, uint64_t, uint64_t);
  int v9;
  int v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  v9 = v8(a1, 2, v6);
  v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100055740(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10005574C);
}

uint64_t sub_10005574C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;

  v4 = type metadata accessor for Date(0);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3)
    return v5 - 2;
  else
    return 0;
}

uint64_t sub_100055798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000557A4);
}

uint64_t sub_1000557A4(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  if (a2)
    v5 = (a2 + 2);
  else
    v5 = 0;
  v6 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(a1, v5, a3, v6);
}

uint64_t sub_1000557F8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 48))(a1, 2, v2);
}

uint64_t sub_100055830(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, 2, v4);
}

uint64_t sub_100055870(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload(a1, 256, *(_QWORD *)(result - 8) + 64, 2);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for SystemNotificationManager()
{
  return objc_opt_self(_TtC14bluetoothuserd25SystemNotificationManager);
}

uint64_t storeEnumTagSinglePayload for SystemNotificationManager.Constants(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100055924 + 4 * asc_1000628B0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100055944 + 4 * byte_1000628B5[v4]))();
}

_BYTE *sub_100055924(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100055944(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10005594C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100055954(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10005595C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100055964(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SystemNotificationManager.Constants()
{
  return &type metadata for SystemNotificationManager.Constants;
}

Swift::Int sub_100055980()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x6C7070612E6D6F63, 0xEF6D72616C612E65);
  return Hasher._finalize()();
}

uint64_t sub_1000559DC(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6C7070612E6D6F63, 0xEF6D72616C612E65);
}

Swift::Int sub_100055A00(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x6C7070612E6D6F63, 0xEF6D72616C612E65);
  return Hasher._finalize()();
}

BOOL sub_100055A58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = sub_10000215C(&qword_10007AAB0);
  v5 = sub_1000021DC(&qword_10007C600, &qword_10007AAB0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1) == 0;
}

uint64_t sub_100055ADC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000215C(&qword_10007AAB0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100055B1C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100055B40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = v1 + 16;
  swift_beginAccess(v3, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_1000540AC(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100055BB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(sub_10000215C(&qword_10007AAB0) - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = *(_QWORD *)(v8 + 72);
  v11 = a4 + ((v9 + 32) & ~v9) + v10 * a1;
  v12 = v10 * v4;
  v13 = a3 + v12;
  v14 = v11 + v12;
  if (v11 >= v13 || v14 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v13;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

const char *sub_100055CCC(void *a1)
{
  uint64_t v1;

  return sub_100053B2C(a1, v1);
}

const char *sub_100055CD4(void *a1)
{
  uint64_t v1;

  return sub_1000537DC(a1, v1);
}

uint64_t sub_100055CFC@<X0>(uint64_t a1@<X8>)
{
  return sub_100055090(a1);
}

uint64_t sub_100055D10()
{
  qword_100080868 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_100080868);
}

uint64_t sub_100055D38(uint64_t a1)
{
  return sub_100055DD8(a1, &qword_10007C818, &static Transaction.$current);
}

uint64_t *Transaction.$current.unsafeMutableAddressor()
{
  if (qword_100080870 != -1)
    swift_once(&qword_100080870, sub_100055D38);
  return &static Transaction.$current;
}

uint64_t static Transaction.$current.getter()
{
  return sub_100055E80(&qword_100080870, &static Transaction.$current);
}

uint64_t static Transaction.current.getter()
{
  return sub_100055ED4(&qword_100080870);
}

uint64_t sub_100055DC4(uint64_t a1)
{
  return sub_100055DD8(a1, &qword_10007C810, &static Transaction.$currentNSXPCConnection);
}

uint64_t sub_100055DD8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = 0;
  v4 = sub_10000215C(a2);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = TaskLocal.init(wrappedValue:)(&v6);
  *a3 = result;
  return result;
}

uint64_t *Transaction.$currentNSXPCConnection.unsafeMutableAddressor()
{
  if (qword_100080878 != -1)
    swift_once(&qword_100080878, sub_100055DC4);
  return &static Transaction.$currentNSXPCConnection;
}

uint64_t static Transaction.$currentNSXPCConnection.getter()
{
  return sub_100055E80(&qword_100080878, &static Transaction.$currentNSXPCConnection);
}

uint64_t sub_100055E80(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_retain(*a2);
}

uint64_t static Transaction.currentNSXPCConnection.getter()
{
  return sub_100055ED4(&qword_100080878);
}

uint64_t sub_100055ED4(_QWORD *a1)
{
  uint64_t v2;

  if (*a1 != -1)
    swift_once();
  TaskLocal.get()(&v2);
  return v2;
}

uint64_t variable initialization expression of Transaction.underlyingTransaction()
{
  return 0;
}

uint64_t variable initialization expression of Transaction.activityState()
{
  return 0;
}

uint64_t static Transaction.asyncTask(name:block:)(char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v20;

  v11 = sub_10000215C(&qword_10007C620);
  __chkstk_darwin(v11);
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(v5, 64, 7);
  sub_100056590(a1, a2, a3);
  v15 = objc_msgSend((id)objc_opt_self(NSXPCConnection), "currentConnection");
  v16 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 1, 1, v16);
  v17 = (_QWORD *)swift_allocObject(&unk_100074868, 64, 7);
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v14;
  v17[5] = v15;
  v17[6] = a4;
  v17[7] = a5;
  swift_retain(v14);
  swift_retain(a5);
  v18 = sub_1000563AC((uint64_t)v13, (uint64_t)&unk_10007C630, (uint64_t)v17);
  swift_release(v14);
  return swift_release(v18);
}

uint64_t sub_10005607C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[6] = a6;
  v7[7] = a7;
  v7[4] = a4;
  v7[5] = a5;
  v7[3] = a1;
  return swift_task_switch(sub_10005609C, 0, 0);
}

uint64_t sub_10005609C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  _QWORD *v6;

  if (qword_100080870 != -1)
    swift_once(&qword_100080870, sub_100055D38);
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  *(_QWORD *)(v0 + 16) = v1;
  v3 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 64) = v3;
  v4 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v3 + 16) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  v5 = async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1];
  swift_retain(v1);
  v6 = (_QWORD *)swift_task_alloc(v5);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_1000561A4;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(*(_QWORD *)(v0 + 24), v0 + 16, &unk_10007C7F8, v3, 0, 0, 0xD000000000000020, 0x8000000100068AC0);
}

uint64_t sub_1000561A4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 64);
  v4 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 72));
  swift_task_dealloc(v2);
  swift_release(*(_QWORD *)(v1 + 16));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1000561F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_100056214, 0, 0);
}

uint64_t sub_100056214()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  if (qword_100080878 != -1)
    swift_once(&qword_100080878, sub_100055DC4);
  *(_QWORD *)(v0 + 16) = *(_QWORD *)(v0 + 32);
  v1 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 40);
  v2 = (_QWORD *)swift_task_alloc(async function pointer to TaskLocal.withValue<A>(_:operation:isolation:file:line:)[1]);
  *(_QWORD *)(v0 + 64) = v2;
  *v2 = v0;
  v2[1] = sub_100056304;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(*(_QWORD *)(v0 + 24), v0 + 16, &unk_10007C808, v1, 0, 0, 0xD000000000000020, 0x8000000100068AC0);
}

uint64_t sub_100056304()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(*v0 + 56);
  v3 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100056358(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(void);

  v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v3;
  *v3 = v2;
  v3[1] = sub_10004E6F0;
  return v5();
}

uint64_t sub_1000563AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100057538(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_100074910, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_10007C7E8, v16);
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, int a3, void (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 64, 7);
  sub_100056590(a1, a2, a3);
  a4(v9);
  return swift_release(v9);
}

os_activity_scope_state_s *sub_100056590(char *a1, uint64_t a2, int a3)
{
  os_activity_scope_state_s *v3;
  os_activity_scope_state_s *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  Swift::String v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  unsigned int v39;
  os_activity_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  int v55;
  unsigned int v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char description[8];
  unint64_t v69;

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12);
  v15 = &v61;
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = (char *)&v61 - v17;
  v4[3].opaque[0] = 0;
  v4[2].opaque[0] = 0;
  v4[3].opaque[1] = 0;
  v64 = v8;
  v65 = v11;
  v66 = v9;
  v63 = a3;
  v62 = v14;
  if ((a3 & 1) != 0)
  {
    v17 = (unint64_t)a1 >> 32;
    if (!((unint64_t)a1 >> 32))
    {
      LODWORD(v17) = a1 >> 11;
      if (a1 >> 11 == 27)
        goto LABEL_45;
      LODWORD(v17) = a1 >> 16;
      if (a1 >> 16 <= 0x10)
      {
        if ((a1 & 0xFFFFFF80) != 0)
          goto LABEL_34;
        if (a1 <= 0xFF)
        {
          v21 = ((_BYTE)a1 + 1);
          goto LABEL_10;
        }
        __break(1u);
        goto LABEL_41;
      }
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_30;
  }
  v19 = a1;
  v20 = a2;
  while (1)
  {
    v23 = static String._fromUTF8Repairing(_:)(v19, v20);
    v25 = v24;
    *(_QWORD *)description = v23;
    v69 = v24;
    swift_bridgeObjectRetain(v24);
    v26._countAndFlagsBits = 46;
    v26._object = (void *)0xE100000000000000;
    String.append(_:)(v26);
    v27 = swift_bridgeObjectRelease(v25);
    v11 = *(char **)description;
    v28 = v69;
    v29 = UUID.init()(v27);
    v30 = UUID.uuidString.getter(v29);
    v9 = v31;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v18, v62);
    *(_QWORD *)description = v11;
    v69 = v28;
    swift_bridgeObjectRetain(v28);
    v32._countAndFlagsBits = v30;
    v32._object = (void *)v9;
    String.append(_:)(v32);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v28);
    v33 = v69;
    v4[1].opaque[0] = *(_QWORD *)description;
    v4[1].opaque[1] = v33;
    v34 = String.utf8CString.getter();
    v35 = os_transaction_create(v34 + 32);
    swift_release(v34);
    v36 = v4[2].opaque[0];
    v4[2].opaque[0] = v35;
    swift_unknownObjectRelease(v36);
    LODWORD(v17) = v63;
    if ((v63 & 1) != 0)
      break;
    v11 = v65;
    v9 = v66;
    if (a1)
    {
      if (qword_100080860 != -1)
        swift_once(&qword_100080860, sub_100055D10);
      v37 = qword_100080868;
      v38 = a1;
      goto LABEL_25;
    }
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    v55 = (a1 & 0x3F) << 8;
    v56 = (v55 | (a1 >> 6)) + 33217;
    v57 = (v55 | (a1 >> 6) & 0x3F) << 8;
    v58 = (((v57 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v59 = (v57 | (a1 >> 12)) + 8487393;
    if ((_DWORD)v17)
      v21 = v58;
    else
      v21 = v59;
    if (a1 < 0x800)
      v21 = v56;
LABEL_10:
    v22 = __clz(v21);
    v20 = 4 - (v22 >> 3);
    *(_QWORD *)description = (v21 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v22 >> 3)) & 7)));
    v19 = description;
  }
  v17 = (unint64_t)a1 >> 32;
  if ((unint64_t)a1 >> 32)
    goto LABEL_33;
  LODWORD(v17) = a1 >> 11;
  if (a1 >> 11 == 27)
    goto LABEL_46;
  LODWORD(v17) = a1 >> 16;
  if (a1 >> 16 <= 0x10)
  {
    if ((a1 & 0xFFFFFF80) != 0)
      goto LABEL_42;
    v11 = v65;
    v9 = v66;
    if (a1 <= 0xFF)
    {
      v39 = ((_BYTE)a1 + 1);
      goto LABEL_22;
    }
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
LABEL_47:
    v60 = (v15 | (a1 >> 6) & 0x3F) << 8;
    if ((_DWORD)v17)
      v39 = (((v60 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    else
      v39 = (v60 | (a1 >> 12)) + 8487393;
    goto LABEL_22;
  }
LABEL_41:
  __break(1u);
LABEL_42:
  LODWORD(v15) = (a1 & 0x3F) << 8;
  v11 = v65;
  v9 = v66;
  if (a1 >= 0x800)
    goto LABEL_47;
  v39 = (v15 | (a1 >> 6)) + 33217;
LABEL_22:
  *(_QWORD *)description = (v39 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v39) & 0x38)) & 0x38));
  if (qword_100080860 != -1)
    swift_once(&qword_100080860, sub_100055D10);
  v37 = qword_100080868;
  v38 = description;
LABEL_25:
  v40 = _os_activity_create((void *)&_mh_execute_header, v38, v37, OS_ACTIVITY_FLAG_DEFAULT);
  v4[2].opaque[1] = (uint64_t)v40;
  swift_beginAccess(&v4[3], description, 33, 0);
  v41 = swift_unknownObjectRetain(v40);
  os_activity_scope_enter(v41, v4 + 3);
  swift_endAccess(description);
  swift_unknownObjectRelease(v40);
  v42 = sub_10003093C();
  v43 = v64;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v42, v64);
  v44 = swift_retain_n(v4, 2);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    *(_DWORD *)v47 = 136315138;
    v67 = v48;
    *(_QWORD *)description = 0x3A4E58545BLL;
    v69 = 0xE500000000000000;
    v49 = v4[1].opaque[0];
    v50 = (void *)v4[1].opaque[1];
    swift_retain(v4);
    v51._countAndFlagsBits = v49;
    v51._object = v50;
    String.append(_:)(v51);
    v52._countAndFlagsBits = 93;
    v52._object = (void *)0xE100000000000000;
    String.append(_:)(v52);
    swift_release(v4);
    v53 = v69;
    *(_QWORD *)description = sub_100002CA8(*(uint64_t *)description, v69, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(description, &v69, v47 + 4, v47 + 12);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v53);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Opened %s", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

    (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v64);
  }
  else
  {

    swift_release_n(v4, 2);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v43);
  }
  return v4;
}

uint64_t sub_100056B80()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100056BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v4 = *(_QWORD *)(v1 + 32);
  v5 = *(_QWORD *)(v1 + 40);
  v6 = swift_task_alloc(dword_10007C62C);
  v7 = *(_OWORD *)(v1 + 48);
  *(_QWORD *)(v2 + 16) = v6;
  *(_QWORD *)v6 = v2;
  *(_QWORD *)(v6 + 8) = sub_1000510B0;
  *(_OWORD *)(v6 + 48) = v7;
  *(_QWORD *)(v6 + 32) = v4;
  *(_QWORD *)(v6 + 40) = v5;
  *(_QWORD *)(v6 + 24) = a1;
  return swift_task_switch(sub_10005609C, 0, 0);
}

_QWORD *Transaction.deinit()
{
  _QWORD *v0;

  sub_100056C64();
  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return v0;
}

uint64_t sub_100056C64()
{
  os_activity_scope_state_s *v0;
  os_activity_scope_state_s *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  uint8_t *v12;
  void *v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v0[2].opaque[0])
  {
    v7 = sub_10003093C();
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
    v8 = swift_retain_n(v0, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.info.getter();
    v11 = v10;
    if (os_log_type_enabled(v9, v10))
    {
      HIDWORD(v20) = v11;
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v22 = v21;
      *(_DWORD *)v12 = 136315138;
      v23 = 0x3A4E58545BLL;
      v24 = 0xE500000000000000;
      v14 = v1[1].opaque[0];
      v13 = (void *)v1[1].opaque[1];
      swift_retain(v1);
      v15._countAndFlagsBits = v14;
      v15._object = v13;
      String.append(_:)(v15);
      v16._countAndFlagsBits = 93;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      swift_release(v1);
      v17 = v24;
      v23 = sub_100002CA8(v23, v24, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v12 + 4, v12 + 12);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v9, BYTE4(v20), "Closed %s", v12, 0xCu);
      v18 = v21;
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v1, 2);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_beginAccess(&v1[3], &v23, 33, 0);
    os_activity_scope_leave(v1 + 3);
    swift_endAccess(&v23);
    v19 = v1[2].opaque[0];
    v1[2].opaque[0] = 0;
    return swift_unknownObjectRelease(v19);
  }
  return result;
}

uint64_t Transaction.__deallocating_deinit()
{
  _QWORD *v0;

  sub_100056C64();
  swift_bridgeObjectRelease(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t static Transaction.named<A>(_:with:)(char *a1, uint64_t a2, int a3, void (*a4)(os_activity_scope_state_s *))
{
  uint64_t v4;
  uint64_t v9;
  os_activity_scope_state_s *v10;

  v9 = swift_allocObject(v4, 64, 7);
  v10 = sub_100056590(a1, a2, a3);
  a4(v10);
  return swift_release(v9);
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v7 + 48) = a6;
  *(_QWORD *)(v7 + 56) = v6;
  *(_BYTE *)(v7 + 88) = a4;
  *(_QWORD *)(v7 + 32) = a3;
  *(_QWORD *)(v7 + 40) = a5;
  *(_QWORD *)(v7 + 16) = a1;
  *(_QWORD *)(v7 + 24) = a2;
  return swift_task_switch(sub_100056FA4, 0, 0);
}

uint64_t sub_100056FA4()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  char *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  int *v8;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(int **)(v0 + 40);
  v3 = *(char **)(v0 + 24);
  v4 = *(unsigned __int8 *)(v0 + 88);
  v5 = swift_allocObject(*(_QWORD *)(v0 + 56), 64, 7);
  *(_QWORD *)(v0 + 64) = v5;
  sub_100056590(v3, v1, v4);
  v8 = (int *)((char *)v2 + *v2);
  v6 = (_QWORD *)swift_task_alloc(v2[1]);
  *(_QWORD *)(v0 + 72) = v6;
  *v6 = v0;
  v6[1] = sub_10005704C;
  return ((uint64_t (*)(_QWORD, uint64_t))v8)(*(_QWORD *)(v0 + 16), v5);
}

uint64_t sub_10005704C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  *(_QWORD *)(*(_QWORD *)v1 + 80) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000570E4;
  else
    v3 = sub_1000570B0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000570B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000570E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t static Transaction.named<A>(_:with:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 + 56) = a7;
  *(_QWORD *)(v8 + 64) = v7;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_BYTE *)(v8 + 96) = a4;
  *(_QWORD *)(v8 + 24) = a2;
  *(_QWORD *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 16) = a1;
  return swift_task_switch(sub_100057140, 0, 0);
}

uint64_t sub_100057140()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 56);
  v2 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 72) = v2;
  v3 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v2 + 16) = v1;
  *(_OWORD *)(v2 + 24) = v3;
  v4 = swift_task_alloc(dword_10007C63C);
  *(_QWORD *)(v0 + 80) = v4;
  *(_QWORD *)v4 = v0;
  *(_QWORD *)(v4 + 8) = sub_1000571E4;
  v5 = *(_QWORD *)(v0 + 64);
  v6 = *(_BYTE *)(v0 + 96);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v4 + 48) = v2;
  *(_QWORD *)(v4 + 56) = v5;
  *(_QWORD *)(v4 + 40) = &unk_10007C650;
  *(_BYTE *)(v4 + 88) = v6;
  *(_OWORD *)(v4 + 24) = v8;
  *(_QWORD *)(v4 + 16) = v7;
  return swift_task_switch(sub_100056FA4, 0, 0);
}

uint64_t sub_1000571E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100057258, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100057258()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10005728C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t (*v7)(uint64_t);

  v7 = (uint64_t (*)(uint64_t))((char *)a3 + *a3);
  v5 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = v3;
  v5[1] = sub_1000510B0;
  return v7(a1);
}

uint64_t sub_1000572F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t);

  v4 = *(int **)(v1 + 24);
  v5 = (_QWORD *)swift_task_alloc(dword_10007C64C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000510B0;
  v8 = (uint64_t (*)(uint64_t))((char *)v4 + *v4);
  v6 = (_QWORD *)swift_task_alloc(v4[1]);
  v5[2] = v6;
  *v6 = v5;
  v6[1] = sub_1000510B0;
  return v8(a1);
}

uint64_t Transaction.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return 0x3A4E58545BLL;
}

uint64_t sub_1000573EC()
{
  return Transaction.description.getter();
}

uint64_t type metadata accessor for Transaction()
{
  return objc_opt_self(_TtC14bluetoothuserd11Transaction);
}

__n128 sub_10005742C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_100057438(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100057458(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for os_activity_scope_state_s()
{
  unint64_t ForeignTypeMetadata;
  uint64_t v1;

  if (!qword_10007C7D0)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, &unk_1000748E8);
    if (!v1)
      atomic_store(ForeignTypeMetadata, (unint64_t *)&qword_10007C7D0);
  }
}

uint64_t sub_1000574D4(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1000576FC;
  return v6(a1);
}

uint64_t sub_100057538(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000215C(&qword_10007C620);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100057578()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005759C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_10007C7E4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100051824;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10007C7E0 + dword_10007C7E0))(a1, v4);
}

uint64_t sub_10005760C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  v4 = *(_QWORD *)(v1 + 16);
  v5 = swift_task_alloc(dword_10007C7F4);
  v6 = *(_OWORD *)(v1 + 24);
  *(_QWORD *)(v2 + 16) = v5;
  *(_QWORD *)v5 = v2;
  *(_QWORD *)(v5 + 8) = sub_100051824;
  *(_OWORD *)(v5 + 40) = v6;
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = v4;
  return swift_task_switch(sub_100056214, 0, 0);
}

uint64_t sub_100057680()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v2 = *(int **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_10007C804);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_100051824;
  v6 = (uint64_t (*)(void))((char *)v2 + *v2);
  v4 = (_QWORD *)swift_task_alloc(v2[1]);
  v3[2] = v4;
  *v4 = v3;
  v4[1] = sub_10004E6F0;
  return v6();
}

void sub_100057700(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v7;
  uint64_t v8;
  char v9;
  Swift::Int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  Swift::Int v30;
  void *object;
  uint64_t countAndFlagsBits;
  Swift::Int baseNumber;
  uint64_t v34;
  void *v35;
  Swift::Int value;
  Swift::Int buildNumber;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSString v56;
  NSString v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  NSString v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  char *v81;
  unint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  Swift::String v94;
  unsigned __int8 v95;
  NSString v96;
  id v97;
  uint64_t v98;
  void *v99;
  void *v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int v107;
  void *v108;
  uint64_t v109;
  Swift::Int v110;
  void *v111;
  uint64_t v112;
  Swift::Int v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  char *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Swift::Int v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _OWORD v140[5];
  bluetoothuserd::SystemVersionNumber_optional v141;
  bluetoothuserd::SystemVersionNumber_optional v142;
  _QWORD v143[6];
  uint64_t v144;
  Swift::Int v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD v148[10];
  uint64_t v149;
  void *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned __int8 v155;
  Swift::Int v156;
  uint64_t v157;
  uint64_t v158;
  unsigned __int8 v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  char v166;
  Swift::Int v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[10];
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;

  v123 = a4;
  sub_100058174((uint64_t)a1, (uint64_t)v148);
  v114 = (void *)v148[1];
  v115 = v148[0];
  v112 = v148[3];
  v113 = v148[2];
  v110 = v148[5];
  v111 = (void *)v148[4];
  v134 = v148[7];
  v135 = v148[6];
  v108 = (void *)v148[9];
  v109 = v148[8];
  sub_100058174(a2, (uint64_t)v143);
  v7 = (void *)v143[1];
  v137 = v143[2];
  v138 = v143[0];
  v136 = v143[3];
  v139 = v143[4];
  v8 = v143[5];
  v9 = v144;
  v10 = v145;
  v11 = v146;
  v12 = v147;
  v106 = type metadata accessor for Logger(0);
  v120 = *(_QWORD *)(v106 - 8);
  v13 = __chkstk_darwin(v106);
  v119 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v13);
  v104 = (char *)&v102 - v16;
  v126 = a3;
  v124 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(v15);
  v131 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v128 = *(_QWORD *)(v18 - 8);
  v19 = __chkstk_darwin(v18);
  v105 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19);
  v130 = (uint64_t)&v102 - v22;
  __chkstk_darwin(v21);
  v122 = (uint64_t)&v102 - v23;
  v24 = sub_10000215C(&qword_10007B548);
  v25 = __chkstk_darwin(v24);
  v117 = (uint64_t)&v102 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25);
  v121 = (char *)&v102 - v27;
  v118 = (id)objc_opt_self(NSUserDefaults);
  v129 = objc_msgSend(v118, "standardUserDefaults");
  sub_100058174((uint64_t)a1, (uint64_t)v170);
  v116 = v18;
  if (v170[1])
  {
    sub_100058174(a2, (uint64_t)&v160);
    v28 = v161;
    if (!v161)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000016, 0x8000000100068B70, "bluetoothuserd/Daemon.swift", 27, 2, 36, 0);
      __break(1u);
      return;
    }
    v29 = (uint64_t *)a2;
    v137 = v162;
    v138 = v160;
    v136 = v163;
    v139 = v164;
    v30 = v167;
    v11 = v168;
    v132 = v165;
    v133 = v169;
    v127 = v166 & 1;
    goto LABEL_6;
  }
  v132 = v8;
  v133 = v12;
  v103 = (uint64_t *)a2;
  sub_100058174(a2, (uint64_t)&v160);
  if (v161)
  {
    v127 = v9 & 1;
    v30 = v10;
    v28 = v7;
    v29 = v103;
LABEL_6:
    sub_100058B5C(a1);
    v107 = 1;
    object = v114;
    countAndFlagsBits = v115;
    v34 = v112;
    baseNumber = v113;
    value = v110;
    v35 = v111;
    buildNumber = v134;
    v38 = v135;
    v40 = v108;
    v39 = v109;
    goto LABEL_7;
  }
  Transaction.capture()();
  v94._countAndFlagsBits = SystemInfo.buildVersion.getter();
  SystemVersionNumber.init(rawValue:)(&v141, v94);
  sub_100058174((uint64_t)&v141, (uint64_t)&v149);
  v28 = v150;
  if (!v150)
  {

    return;
  }
  v137 = v151;
  v138 = v149;
  v136 = v152;
  v139 = v153;
  v95 = v155;
  v159 = v155;
  v30 = v156;
  v11 = v157;
  v132 = v154;
  v133 = v158;
  v96 = String._bridgeToObjectiveC()();
  v97 = objc_msgSend(v129, "stringForKey:", v96);

  if (!v97)
  {
    v115 = v11;
    v127 = v95 & 1;
    v49 = v137;
    v48 = v138;
    v50 = v136;
    v51 = v139;
    v52 = v132;
    v53 = v133;
    goto LABEL_15;
  }
  v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v97);
  v100 = v99;

  v101._countAndFlagsBits = v98;
  v101._object = v100;
  SystemVersionNumber.init(rawValue:)(&v142, v101);
  v107 = 0;
  countAndFlagsBits = v142.value.rawValue._countAndFlagsBits;
  object = v142.value.rawValue._object;
  baseNumber = v142.value.baseNumber;
  v34 = v142.value.baseLetter._countAndFlagsBits;
  v35 = v142.value.baseLetter._object;
  value = v142.value.childType.value;
  v38 = *(_QWORD *)&v142.value.childType.is_nil;
  buildNumber = v142.value.buildNumber;
  v39 = v142.value.suffix.value._countAndFlagsBits;
  v40 = v142.value.suffix.value._object;
  v127 = v159;
  v29 = v103;
LABEL_7:
  *(_QWORD *)&v181 = v138;
  *((_QWORD *)&v181 + 1) = v28;
  *(_QWORD *)&v182 = v137;
  *((_QWORD *)&v182 + 1) = v136;
  *(_QWORD *)&v183 = v139;
  *((_QWORD *)&v183 + 1) = v132;
  LOBYTE(v184) = v127;
  *((_QWORD *)&v184 + 1) = v30;
  *(_QWORD *)&v185 = v11;
  *((_QWORD *)&v185 + 1) = v133;
  v115 = v11;
  if (object)
  {
    v113 = v30;
    v114 = v28;
    *(_QWORD *)&v176 = countAndFlagsBits;
    *((_QWORD *)&v176 + 1) = object;
    *(_QWORD *)&v177 = baseNumber;
    *((_QWORD *)&v177 + 1) = v34;
    *(_QWORD *)&v178 = v35;
    *((_QWORD *)&v178 + 1) = value;
    LOBYTE(v179) = v38 & 1;
    *((_QWORD *)&v179 + 1) = buildNumber;
    *(_QWORD *)&v180 = v39;
    *((_QWORD *)&v180 + 1) = v40;
    v173 = v178;
    v174 = v179;
    v175 = v180;
    v171 = v176;
    v172 = v177;
    v140[2] = v183;
    v140[3] = v184;
    v140[4] = v185;
    v140[0] = v181;
    v140[1] = v182;
    v41 = v29;
    v42 = (uint64_t)object;
    v43 = (uint64_t)v35;
    v44 = value;
    v134 = buildNumber;
    v135 = v38;
    v45 = v39;
    v46 = (uint64_t)v40;
    sub_100058B5C(v41);
    v47 = sub_100004160();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v171, v140, &type metadata for SystemVersionNumber, v47) & 1) == 0)
      (*(void (**)(__int128 *, __int128 *, uint64_t))(v123 + 16))(&v176, &v181, v126);
    sub_100058BE0(countAndFlagsBits, v42, baseNumber, v34, v43, v44, v135, v134, v45, v46);
    v49 = v137;
    v48 = v138;
    v50 = v136;
    v30 = v113;
    v28 = v114;
  }
  else
  {
    sub_100058B5C(v29);
    v49 = v137;
    v48 = v138;
    v50 = v136;
  }
  v51 = v139;
  v52 = v132;
  v18 = v116;
  if ((v107 & 1) != 0)
  {
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v133);
    goto LABEL_16;
  }
  v53 = v133;
LABEL_15:
  *(_QWORD *)&v171 = v48;
  *((_QWORD *)&v171 + 1) = v28;
  *(_QWORD *)&v172 = v49;
  *((_QWORD *)&v172 + 1) = v50;
  *(_QWORD *)&v173 = v51;
  *((_QWORD *)&v173 + 1) = v52;
  LOBYTE(v174) = v127;
  *((_QWORD *)&v174 + 1) = v30;
  *(_QWORD *)&v175 = v115;
  *((_QWORD *)&v175 + 1) = v53;
  SystemVersionNumber.description.getter();
  v55 = v54;
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease(v53);
  v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(v129, "setValue:forKey:", v56, v57);

LABEL_16:
  v59 = (uint64_t)v121;
  v58 = v122;
  v60 = v126;
  sub_1000581BC(v122);
  v61 = objc_msgSend(v118, "standardUserDefaults");
  v62 = String._bridgeToObjectiveC()();
  v63 = objc_msgSend(v61, "stringForKey:", v62);

  if (v63)
  {
    v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
    v66 = v65;

    UUID.init(uuidString:)(v64, v66);
    swift_bridgeObjectRelease(v66);
    v67 = v128;
  }
  else
  {
    v67 = v128;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v59, 1, 1, v18);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16))(v130, v58, v18);
  v68 = v124;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v124 + 16))(v131, v125, v60);
  v69 = v117;
  sub_100058768(v59, v117);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v69, 1, v18) == 1)
  {
    sub_1000587B0(v69);
    v70 = sub_1000306DC();
    v71 = v120;
    v72 = v106;
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v119, v70, v106);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v76 = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "No lastLaunchBootSessionUUID on record", v76, 2u);
      v77 = v76;
      v68 = v124;
      swift_slowDealloc(v77, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v71 + 8))(v119, v72);
    v79 = v130;
    v78 = v131;
    sub_1000585B8(v130, v131, v60, v123);

    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v78, v60);
    v80 = *(void (**)(uint64_t, uint64_t))(v128 + 8);
    v80(v79, v18);
  }
  else
  {
    v81 = v105;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 32))(v105, v69, v18);
    v82 = sub_100058B14();
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v81, v58, v18, v82) & 1) != 0)
    {
      (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v131, v60);
      v83 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
      v83(v130, v18);
      v84 = sub_1000306DC();
      v85 = v104;
      v86 = v106;
      v87 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v120 + 16))(v104, v84, v106);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "This is *NOT* the first run since reboot", v90, 2u);
        swift_slowDealloc(v90, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v120 + 8))(v85, v86);
      v83((uint64_t)v105, v18);
      v83(v58, v18);
      goto LABEL_29;
    }
    v91 = v67;
    v93 = v130;
    v92 = v131;
    sub_1000585B8(v130, v131, v60, v123);

    v80 = *(void (**)(uint64_t, uint64_t))(v91 + 8);
    v80((uint64_t)v81, v18);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v92, v60);
    v80(v93, v18);
  }
  v80(v58, v18);
LABEL_29:
  sub_1000587B0(v59);
}

uint64_t sub_100058174(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007A760);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000581BC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  size_t v32;
  uint64_t v33;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10000215C(&qword_10007B548);
  __chkstk_darwin(v6);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v9);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = 37;
  v12 = static Array._allocateBufferUninitialized(minimumCapacity:)(37, &type metadata for Int8);
  *(_QWORD *)(v12 + 16) = 37;
  *(_OWORD *)(v12 + 48) = 0u;
  *(_QWORD *)(v12 + 61) = 0;
  *(_OWORD *)(v12 + 32) = 0u;
  if (sysctlbyname("kern.bootsessionuuid", (void *)(v12 + 32), &v32, 0, 0))
  {
    v18 = ((uint64_t (*)(void))errno.getter)();
    if (!strerror(v18))
      __break(1u);
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(v12);
  static String.Encoding.ascii.getter(v13);
  v14 = sub_1000587F0(v12, v11);
  if (!v15)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100068BB0, "bluetoothuserd/Daemon.swift", 27, 2, 110, 0);
    goto LABEL_9;
  }
  v16 = v15;
  UUID.init(uuidString:)(v14, v15);
  swift_bridgeObjectRelease(v16);
  v2 = type metadata accessor for UUID(0);
  v5 = *(char **)(v2 - 8);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v5 + 6))(v8, 1, v2) == 1)
  {
    sub_1000587B0((uint64_t)v8);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100068BB0, "bluetoothuserd/Daemon.swift", 27, 2, 114, 0);
    while (1)
    {
LABEL_9:
      __break(1u);
LABEL_10:
      v20 = String.init(utf8String:)();
      v21 = v19;
      if (v19)
        v22 = v19;
      else
        v22 = 0xE700000000000000;
      v23 = sub_1000306DC();
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v23, v2);
      swift_bridgeObjectRetain(v22);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        if (v21)
          v27 = v20;
        else
          v27 = 0x6E776F6E6B6E55;
        v28 = swift_slowAlloc(18, -1);
        v29 = swift_slowAlloc(32, -1);
        v33 = v29;
        *(_DWORD *)v28 = 136315394;
        swift_bridgeObjectRetain(v22);
        v31 = sub_100002CA8(v27, v22, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28 + 4, v28 + 12);
        v30 = swift_bridgeObjectRelease_n(v22, 3);
        *(_WORD *)(v28 + 12) = 1024;
        LODWORD(v31) = errno.getter(v30);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 4, v28 + 14, v28 + 18);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error from sysctlbyname: %s(%d", (uint8_t *)v28, 0x12u);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v22, 2);
      }
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000023, 0x8000000100068BB0, "bluetoothuserd/Daemon.swift", 27, 2, 106, 0);
    }
  }
  swift_bridgeObjectRelease(v12);
  return (*((uint64_t (**)(uint64_t, char *, uint64_t))v5 + 4))(a1, v8, v2);
}

uint64_t sub_1000585B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  NSString v18;
  NSString v19;
  uint64_t v21;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000306DC();
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "This is the first run since reboot", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v15 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  UUID.uuidString.getter(v15);
  v17 = v16;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v15, "setObject:forKey:", v18, v19);

  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
}

uint64_t sub_100058768(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007B548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000587B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000215C(&qword_10007B548);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000587F0(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  void (*v13)(char *, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  id v28;
  uint64_t result;
  uint64_t v30;

  v4 = type metadata accessor for String.Encoding(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v30 - v10;
  static String.Encoding.utf8.getter(v9);
  v12 = static String.Encoding.== infix(_:_:)(a2, v11);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v11, v4);
  v14 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 16))(v8, a2, v4);
  if ((v12 & 1) != 0)
  {
    v13(v8, v4);
    goto LABEL_4;
  }
  static String.Encoding.ascii.getter(v14);
  v15 = static String.Encoding.== infix(_:_:)(v8, v11);
  v13(v11, v4);
  v13(v8, v4);
  if ((v15 & 1) != 0)
  {
LABEL_4:
    v16 = sub_100058C1C(0, a1);
    if ((v17 & 1) == 0)
    {
      if ((v16 & 0x8000000000000000) == 0)
      {
        v18 = *(_QWORD *)(a1 + 16);
        if (v18 >= v16)
          v18 = v16;
        if (v16)
          v19 = v18;
        else
          v19 = 0;
        v20 = swift_bridgeObjectRetain(a1);
        v21 = static String._tryFromUTF8(_:)(a1 + 32, v19, v20);
        v23 = v22;
        v24 = swift_unknownObjectRelease(a1);
        if (v23)
        {
          static String.Encoding.utf8.getter(v24);
          v25 = static String.Encoding.== infix(_:_:)(a2, v11);
          v13(v11, v4);
          if ((v25 & 1) != 0 || (_StringGuts._isContiguousASCII.getter(v21, v23) & 1) != 0)
          {
            swift_bridgeObjectRelease(a1);
LABEL_20:
            v13(a2, v4);
            return v21;
          }
          swift_bridgeObjectRelease(v23);
        }
        goto LABEL_16;
      }
      __break(1u);
    }
    __break(1u);
    goto LABEL_23;
  }
LABEL_16:
  v26 = sub_100058C1C(0, a1);
  if ((v27 & 1) == 0)
  {
    v28 = objc_msgSend(objc_allocWithZone((Class)NSString), "initWithBytes:length:encoding:", a1 + 32, v26, String.Encoding.rawValue.getter());
    swift_bridgeObjectRelease(a1);
    if (v28)
    {
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);

    }
    else
    {
      v21 = 0;
    }
    goto LABEL_20;
  }
LABEL_23:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003FLL, 0x8000000100068C40, "Foundation/arm64-apple-ios.private.swiftinterface", 49, 2, 11726, 0);
  __break(1u);
  return result;
}

uint64_t sub_100058A88()
{
  uint64_t v0;
  int v1;
  uint64_t result;

  v0 = String.utf8CString.getter();
  v1 = _set_user_dir_suffix(v0 + 32);
  result = swift_release(v0);
  if (!v1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ELL, 0x8000000100068BE0, "bluetoothuserd/Daemon.swift", 27, 2, 161, 0);
    __break(1u);
  }
  return result;
}

unint64_t sub_100058B14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10007C820;
  if (!qword_10007C820)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10007C820);
  }
  return result;
}

uint64_t *sub_100058B5C(uint64_t *a1)
{
  sub_100058BA4(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9]);
  return a1;
}

uint64_t sub_100058BA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a5);
  }
  return result;
}

uint64_t sub_100058BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a5);
    return swift_bridgeObjectRelease(a10);
  }
  return result;
}

uint64_t sub_100058C1C(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(unsigned __int8 *)(a2 + 32) == a1)
    return 0;
  if (v2 == 1)
    return 0;
  if (*(unsigned __int8 *)(a2 + 33) == a1)
    return 1;
  v4 = 0;
  v5 = v2 - 2;
  while (v5 != v4)
  {
    v6 = *(unsigned __int8 *)(a2 + 34 + v4++);
    if (v6 == a1)
      return v4 + 1;
  }
  return 0;
}

char *sub_100058CA4()
{
  return &byte_100080B68;
}

id sub_100058CB0()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    v2 = *(id *)(v0 + 48);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
    v4 = *(void **)(v0 + 48);
    *(_QWORD *)(v0 + 48) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void (*sub_100058D18(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100058CB0();
  return sub_10000CAE0;
}

uint64_t sub_100058D4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 56);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 56);
  }
  else
  {
    v3 = v0;
    type metadata accessor for KeyValueStoreManager();
    v2 = sub_10000D2D0();
    (*(void (**)(id))(*(_QWORD *)v2 + 128))(*(id *)(v3 + 16));
    v4 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)(v3 + 56) = v2;
    swift_retain(v2);
    swift_release(v4);
    v1 = 0;
  }
  swift_retain(v1);
  return v2;
}

uint64_t sub_100058DC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = a1;
  return swift_release(v2);
}

uint64_t (*sub_100058DD8(uint64_t *a1))(uint64_t *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = sub_100058D4C();
  return sub_100058E0C;
}

uint64_t sub_100058E0C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(_QWORD *)(v1 + 56);
  *(_QWORD *)(v1 + 56) = v2;
  return swift_release(v3);
}

void sub_100058E1C()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 64) == 1)
  {
    Transaction.capture()();
    *(_BYTE *)(v0 + 64) = 0;
  }
}

void sub_100058E40()
{
  uint64_t v0;

  *(_BYTE *)(v0 + 64) = 0;
}

uint64_t (*sub_100058E48(_QWORD *a1))(uint64_t result)
{
  uint64_t v1;

  *a1 = v1;
  sub_100058E1C();
  return sub_100058E68;
}

uint64_t sub_100058E68(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)result + 64) = 0;
  return result;
}

id sub_100058E74()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void **v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;

  v1 = *(void **)(v0 + 72);
  if (v1)
  {
    v2 = *(id *)(v0 + 72);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)CUSystemMonitor), "init");
    objc_msgSend(v3, "setDispatchQueue:", *(_QWORD *)(v0 + 16));
    v15 = sub_10005C6C0;
    v16 = v0;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_100001DDC;
    v14 = &unk_100074A58;
    v4 = _Block_copy(&v11);
    v5 = v16;
    swift_retain(v0);
    swift_release(v5);
    objc_msgSend(v3, "setFirstUnlockHandler:", v4);
    _Block_release(v4);
    v15 = sub_10005C6C0;
    v16 = v0;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_100001DDC;
    v14 = &unk_100074A80;
    v6 = _Block_copy(&v11);
    v7 = v16;
    swift_retain(v0);
    swift_release(v7);
    objc_msgSend(v3, "activateWithCompletion:", v6);
    _Block_release(v6);
    v8 = *(void **)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v3;
    v2 = v3;

    v1 = 0;
  }
  v9 = v1;
  return v2;
}

void sub_100058FD8(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = a1;

}

void (*sub_100058FE4(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100058E74();
  return sub_100059018;
}

void sub_100059018(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v2;

}

id sub_100059028()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void **v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t);
  void *v14;
  uint64_t (*v15)();
  uint64_t v16;

  v1 = *(void **)(v0 + 80);
  if (v1)
  {
    v2 = *(id *)(v0 + 80);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)CUSystemMonitor), "init");
    objc_msgSend(v3, "setDispatchQueue:", *(_QWORD *)(v0 + 16));
    v15 = sub_10005C758;
    v16 = v0;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_100001DDC;
    v14 = &unk_100074A08;
    v4 = _Block_copy(&v11);
    v5 = v16;
    swift_retain(v0);
    swift_release(v5);
    objc_msgSend(v3, "setPrimaryAppleIDChangedHandler:", v4);
    _Block_release(v4);
    v15 = sub_10005C6BC;
    v16 = v0;
    v11 = _NSConcreteStackBlock;
    v12 = 1107296256;
    v13 = sub_100001DDC;
    v14 = &unk_100074A30;
    v6 = _Block_copy(&v11);
    v7 = v16;
    swift_retain(v0);
    swift_release(v7);
    objc_msgSend(v3, "activateWithCompletion:", v6);
    _Block_release(v6);
    v8 = *(void **)(v0 + 80);
    *(_QWORD *)(v0 + 80) = v3;
    v2 = v3;

    v1 = 0;
  }
  v9 = v1;
  return v2;
}

void sub_10005918C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = a1;

}

void (*sub_100059198(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = sub_100059028();
  return sub_1000591CC;
}

void sub_1000591CC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 80);
  *(_QWORD *)(v1 + 80) = v2;

}

uint64_t sub_1000591DC()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10002861C(0xD000000000000010, 0x8000000100069010), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v7 = *v5;
    v6 = v5[1];
    swift_bridgeObjectRetain(v6);
  }
  else
  {
    v7 = 0;
    v6 = 0;
  }
  result = swift_bridgeObjectRelease(v2);
  qword_100080B70 = v7;
  qword_100080B78 = v6;
  return result;
}

uint64_t sub_1000592BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  sub_1000592F8(a1);
  return v3;
}

uint64_t sub_1000592F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v1 + 56) = 0;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 64) = 1;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 99) = 0u;
  v3 = v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  v4 = sub_10000215C(&qword_10007ABE0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer) = 0;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

Swift::UInt64 sub_100059394()
{
  uint64_t v0;
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;
  BOOL v8;
  Swift::UInt64 result;
  Swift::UInt64 v10;
  Swift::String v11;
  unint64_t v12;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  Swift::String v32;
  __int128 v33;
  Swift::String v34;
  uint64_t v35;
  unint64_t v36;

  v1 = (_OWORD *)v0;
  v2 = type metadata accessor for DefaultStringInterpolation.PrintUtilsTimeDuration(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = 0;
  v36 = 0xE000000000000000;
  v6 = UpTicks()();
  v7 = *(_QWORD *)(v0 + 24);
  v8 = v6 >= v7;
  result = v6 - v7;
  if (v8)
  {
    v10 = UpTicksToSeconds(_:)(result);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v11._object = (void *)0x8000000100068C80;
    v11._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v11);
    *(_QWORD *)&v33 = v10;
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DefaultStringInterpolation.PrintUtilsTimeDuration.duration(_:), v2);
    v12 = sub_100059660();
    DefaultStringInterpolation.appendInterpolation<A>(_:_:)(&v33, v5, &type metadata for UInt64, v12);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    countAndFlagsBits = v34._countAndFlagsBits;
    object = v34._object;
    v15 = swift_bridgeObjectRelease(v36);
    v35 = countAndFlagsBits;
    v36 = (unint64_t)object;
    if (IsAppleInternalBuild(v15))
    {
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v16._countAndFlagsBits = 0x20656C707041202CLL;
      v16._object = (void *)0xEC000000203A4449;
      String.append(_:)(v16);
      v33 = v1[2];
      DefaultStringInterpolation.appendInterpolation<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
      v17 = v34._object;
      String.append(_:)(v34);
      swift_bridgeObjectRelease(v17);
    }
    v18._countAndFlagsBits = 10;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v19 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 440))();
    if (v19)
    {
      v20 = v19;
      v21 = (*(uint64_t (**)(void))(*(_QWORD *)v19 + 136))();
      v23 = v22;
      swift_release(v20);
    }
    else
    {
      v21 = 0;
      v23 = 0;
    }
    *(_QWORD *)&v33 = v21;
    *((_QWORD *)&v33 + 1) = v23;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v23);
    v24 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v24);
    v25._countAndFlagsBits = 10;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    v34._countAndFlagsBits = 0;
    v34._object = (void *)0xE000000000000000;
    v26 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 480))();
    if (v26)
    {
      v27 = v26;
      v28 = (*(uint64_t (**)(void))(*(_QWORD *)v26 + 104))();
      v30 = v29;
      swift_release(v27);
    }
    else
    {
      v28 = 0;
      v30 = 0;
    }
    *(_QWORD *)&v33 = v28;
    *((_QWORD *)&v33 + 1) = v30;
    DefaultStringInterpolation.appendInterpolation<A>(_:)(&v33, &type metadata for String, &protocol witness table for String);
    swift_bridgeObjectRelease(v30);
    v31 = v34._object;
    String.append(_:)(v34);
    swift_bridgeObjectRelease(v31);
    v32._countAndFlagsBits = 10;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    return v35;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100059660()
{
  unint64_t result;

  result = qword_10007C828;
  if (!qword_10007C828)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt64, &type metadata for UInt64);
    atomic_store(result, (unint64_t *)&qword_10007C828);
  }
  return result;
}

uint64_t sub_1000596A4()
{
  type metadata accessor for Transaction();
  return static Transaction.named<A>(_:with:)("com.apple.bluetoothuser.activate", 32, 2, (void (*)(uint64_t))sub_1000598CC);
}

uint64_t sub_10005970C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_1000749C8, 32, 7);
  *(_QWORD *)(v12 + 16) = a1;
  *(_QWORD *)(v12 + 24) = a2;
  aBlock[4] = sub_10005C6B4;
  v22 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_1000749E0;
  v13 = _Block_copy(aBlock);
  swift_retain(a1);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v14);
  v20 = _swiftEmptyArrayStorage;
  v15 = sub_100044BE4();
  v16 = sub_10000215C((uint64_t *)&unk_10007A960);
  v17 = sub_100006D84();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v4, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v22);
}

uint64_t sub_1000598CC(uint64_t a1)
{
  uint64_t v1;

  return sub_10005970C(a1, v1);
}

uint64_t sub_1000598F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  v7 = sub_1000306DC();
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Activate", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(v12);
}

uint64_t sub_100059A14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v28 - v7;
  if (!*(_QWORD *)(v1 + 24))
    *(_QWORD *)(v1 + 24) = UpTicks()();
  if (qword_100080900 != -1)
    swift_once(&qword_100080900, sub_1000591DC);
  v9 = swift_beginAccess(&qword_100080B70, v35, 0, 0);
  v10 = qword_100080B78;
  if (qword_100080B78)
  {
    v11 = qword_100080B70;
    swift_bridgeObjectRetain(qword_100080B78);
    v12 = sub_1000306DC();
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32(v8, v12, v2);
    swift_bridgeObjectRetain(v10);
    v14 = Logger.logObject.getter(v13);
    v31 = v2;
    v15 = v14;
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v29 = v12;
      v17 = swift_slowAlloc(12, -1);
      v30 = v1;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v28 = v3;
      v20 = v19;
      v34 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(v10);
      v33 = sub_100002CA8(v11, v10, &v34);
      v12 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease_n(v10, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Launching bluetoothuserd (%s)", v18, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v21 = *(void (**)(char *, uint64_t))(v28 + 8);
    }
    else
    {

      swift_bridgeObjectRelease_n(v10, 2);
      v21 = *(void (**)(char *, uint64_t))(v3 + 8);
    }
    v22 = v31;
    v21(v8, v31);
    v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v32)(v6, v12, v22);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Activate bluetoothuserd services", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v21(v6, v22);
    sub_10005B1D8();
    return notify_post("com.apple.bluetoothuser.daemonStarted");
  }
  else
  {
    result = fatalError(_:file:line:)(sub_100059D54, 0, "bluetoothuserd/BluetoothUserDaemon.swift", 40, 2, 104, v9);
    __break(1u);
  }
  return result;
}

unint64_t sub_100059D54()
{
  return 0xD000000000000027;
}

uint64_t sub_100059D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  aBlock[4] = sub_10005C114;
  v18 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100001DDC;
  aBlock[3] = &unk_100074938;
  v9 = _Block_copy(aBlock);
  swift_retain(v0);
  static DispatchQoS.unspecified.getter(v10);
  v16 = _swiftEmptyArrayStorage;
  v11 = sub_100044BE4();
  v12 = sub_10000215C((uint64_t *)&unk_10007A960);
  v13 = sub_100006D84();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v16, v12, v13, v1, v11);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v9);
  _Block_release(v9);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release(v18);
}

uint64_t sub_100059F08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v10;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000306DC();
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalidate", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return sub_10005A014();
}

uint64_t sub_10005A014()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void (*v23)(void);
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  _BYTE v32[24];

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_10000215C(&qword_10007C830);
  __chkstk_darwin(v6);
  v8 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_10000215C(&qword_10007ABE0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = &v32[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_10005AB6C();
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 440))(v13);
  if (v14)
  {
    v15 = v14;
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 320))(v14);
    swift_release(v15);
  }
  v16 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 448))(0);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 552))(v16);
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler))
    os_state_remove_handler();
  v17 = v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription, v32, 0, 0);
  sub_10005C5F8(v17, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    v18 = &qword_10007C830;
    v19 = (uint64_t)v8;
  }
  else
  {
    v20 = sub_100004064((uint64_t)v8, (uint64_t)v12, &qword_10007ABE0);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 288))(v20);
    sub_10000D78C((uint64_t)v12);
    swift_release(v21);
    v19 = (uint64_t)v12;
    v18 = &qword_10007ABE0;
  }
  sub_10000BCBC(v19, v18);
  v22 = *(_QWORD **)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer);
  if (v22)
  {
    v23 = *(void (**)(void))((swift_isaMask & *v22) + 0xE8);
    v24 = v22;
    v23();

  }
  v25 = sub_1000306DC();
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v25, v2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Invalidated", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_10005A2D4()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 88, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 88));
}

uint64_t sub_10005A308(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 88, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 88);
  *(_QWORD *)(v1 + 88) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005A34C(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 88, a1, 33, 0);
  return j_j__swift_endAccess;
}

void sub_10005A388()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t *v19;
  char v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  unint64_t v53;
  uint8_t *v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t (*v57)(__n128);
  __n128 v58;
  uint64_t v59;
  _BYTE v60[4];
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v60[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = &v60[-v8];
  v10 = (void *)(*(uint64_t (**)(uint64_t))(*v0 + 360))(v7);
  v11 = objc_msgSend(v10, "primaryAppleID");

  if (!v11)
  {
    v19 = v1 + 5;
    v18 = v1[5];
    v17 = v1 + 4;
LABEL_11:
    if (!v18)
      return;
    goto LABEL_14;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v15 = v14;

  v17 = v1 + 4;
  v16 = v1[4];
  v19 = v1 + 5;
  v18 = v1[5];
  if (!v15)
    goto LABEL_11;
  if (!v18)
  {
    v12 = swift_bridgeObjectRelease(v15);
LABEL_14:
    v22 = (void *)(*(uint64_t (**)(uint64_t))(*v1 + 264))(v12);
    v66 = objc_msgSend(v22, "aa_primaryAppleAccount");

    if (!v66)
      return;
    v23 = objc_msgSend(v66, "aa_altDSID");
    if (v23)
    {
      v24 = v23;
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v27 = v26;

      v28 = objc_msgSend(v66, "username");
      if (v28)
      {
        v29 = v28;
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
        v65 = v30;

        v31 = (*(uint64_t (**)(void))(*v1 + 440))();
        if (!v31)
          goto LABEL_26;
        v32 = v31;
        v62 = v3;
        v63 = v2;
        v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v31 + 208))(v31);
        v34 = v27;
        v36 = v35;
        swift_release(v32);
        if (v33 == v25 && v36 == v34)
        {

          swift_bridgeObjectRelease(v65);
          swift_bridgeObjectRelease_n(v34, 2);
          return;
        }
        v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v36, v25, v34, 0);
        swift_bridgeObjectRelease(v36);
        v27 = v34;
        v3 = v62;
        v2 = v63;
        if ((v61 & 1) != 0)
        {

          swift_bridgeObjectRelease(v27);
          swift_bridgeObjectRelease(v65);
        }
        else
        {
LABEL_26:
          v37 = *v19;
          *v17 = v64;
          v38 = v65;
          *v19 = v65;
          v39 = v38;
          swift_bridgeObjectRetain(v38);
          v40 = swift_bridgeObjectRelease(v37);
          if (IsAppleInternalBuild(v40))
          {
            v41 = sub_1000306DC();
            (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v9, v41, v2);
            swift_bridgeObjectRetain_n(v27, 2);
            swift_bridgeObjectRetain(v39);
            v43 = Logger.logObject.getter(v42);
            v44 = static os_log_type_t.default.getter();
            v45 = v44;
            if (os_log_type_enabled(v43, v44))
            {
              v46 = swift_slowAlloc(22, -1);
              v61 = v45;
              v47 = v46;
              v62 = swift_slowAlloc(64, -1);
              v68 = v62;
              *(_DWORD *)v47 = 136315394;
              swift_bridgeObjectRetain(v39);
              v67 = sub_100002CA8(v64, v39, &v68);
              v63 = v2;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 4, v47 + 12);
              swift_bridgeObjectRelease_n(v39, 3);
              *(_WORD *)(v47 + 12) = 2080;
              swift_bridgeObjectRetain(v27);
              v67 = sub_100002CA8(v25, v27, &v68);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 14, v47 + 22);
              swift_bridgeObjectRelease_n(v27, 3);
              _os_log_impl((void *)&_mh_execute_header, v43, (os_log_type_t)v61, "Apple Account %s) updated for %s", (uint8_t *)v47, 0x16u);
              v48 = v62;
              swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v48, -1, -1);
              swift_slowDealloc(v47, -1, -1);

              (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v63);
            }
            else
            {

              swift_bridgeObjectRelease_n(v27, 2);
              swift_bridgeObjectRelease_n(v39, 2);
              (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v9, v2);
            }
          }
          else
          {
            swift_bridgeObjectRelease(v39);
            v49 = sub_1000306DC();
            v50 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v6, v49, v2);
            v51 = Logger.logObject.getter(v50);
            v52 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v51, v52))
            {
              v53 = v27;
              v54 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v54 = 0;
              _os_log_impl((void *)&_mh_execute_header, v51, v52, "Apple Account found", v54, 2u);
              v55 = v54;
              v27 = v53;
              swift_slowDealloc(v55, -1, -1);
            }

            (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v6, v2);
          }
          type metadata accessor for CloudPairingManager(0);
          v56 = sub_100040BCC(v25, v27);
          v57 = *(uint64_t (**)(__n128))(*v1 + 448);
          v58 = swift_retain(v56);
          v59 = v57(v58);
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 312))(v59);

          swift_release(v56);
        }
      }
      else
      {

        swift_bridgeObjectRelease(v27);
      }
    }
    else
    {

    }
    return;
  }
  if (v13 == v16 && v18 == v15)
  {
    swift_bridgeObjectRelease(v15);
    return;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v15, v16, v18, 0);
  v12 = swift_bridgeObjectRelease(v15);
  if ((v21 & 1) == 0)
    goto LABEL_14;
}

uint64_t sub_10005A954()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 96, v2, 0, 0);
  return swift_retain(*(_QWORD *)(v0 + 96));
}

uint64_t sub_10005A988(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 96, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 96);
  *(_QWORD *)(v1 + 96) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005A9CC(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 96, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10005AA08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void (*v15)(__n128);
  __n128 v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 480))(v4);
  result = swift_release(v7);
  if (!v7)
  {
    v9 = sub_1000306DC();
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Debug manager started", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for DebugManager(0);
    v14 = sub_10000AEB0();
    (*(void (**)(void))(*(_QWORD *)v14 + 184))();
    v15 = *(void (**)(__n128))(*(_QWORD *)v1 + 488);
    v16 = swift_retain(v14);
    v15(v16);
    return swift_release(v14);
  }
  return result;
}

uint64_t sub_10005AB6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = __chkstk_darwin(v1);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 480))(v3);
  if (result)
  {
    v7 = result;
    v8 = sub_1000306DC();
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v8, v1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Debug manager stopped", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 192))(v13);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_10005AC9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  swift_beginAccess(v1 + 104, v5, 1, 0);
  v3 = *(_QWORD *)(v1 + 104);
  *(_QWORD *)(v1 + 104) = a1;
  return swift_release(v3);
}

uint64_t (*sub_10005ACE0(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 104, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t sub_10005AD1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 520))(v4);
  result = swift_release(v7);
  if (!v7)
  {
    v9 = sub_1000306DC();
    v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Intelligence manager started", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    type metadata accessor for IntelligenceManager();
    v14 = sub_100052190();
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 528))(v14);
  }
  return result;
}

uint64_t sub_10005AE5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 520))(v4);
  swift_release(v7);
  if (v7)
  {
    v8 = sub_1000306DC();
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v8, v2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Intelligence manager stopped", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1 + 528))(0);
}

uint64_t sub_10005AF90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v22;
  id v23;
  _QWORD v24[5];
  _BYTE v25[24];

  v1 = v0;
  v2 = sub_10000215C(&qword_10007C830);
  v3 = __chkstk_darwin(v2);
  v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3);
  v8 = (char *)v24 - v7;
  __chkstk_darwin(v6);
  v10 = (char *)v24 - v9;
  v11 = v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription;
  swift_beginAccess(v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription, v25, 0, 0);
  sub_10005C5F8(v11, (uint64_t)v10);
  v12 = sub_10000215C(&qword_10007ABE0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v10, 1, v12);
  v15 = sub_10000BCBC((uint64_t)v10, &qword_10007C830);
  v16 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 288);
  v17 = v16(v15);
  v18 = v17;
  if (v14 == 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 216))(v17);
    v19 = swift_release(v18);
    v20 = v16(v19);
    v24[3] = type metadata accessor for BluetoothUserDaemon(0);
    v24[4] = &off_100074980;
    v24[0] = v1;
    swift_retain(v1);
    sub_10000D590((uint64_t)v24);
    swift_release(v20);
    sub_100002D78(v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v8, 0, 1, v12);
    sub_100004064((uint64_t)v8, (uint64_t)v5, &qword_10007C830);
    swift_beginAccess(v11, v24, 33, 0);
    sub_10005C640((uint64_t)v5, v11);
    return swift_endAccess(v24);
  }
  else
  {
    v22 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
    v23 = objc_msgSend(v22, "primaryAppleID");

    if (v23)
    (*(void (**)(BOOL))(*(_QWORD *)v18 + 224))(v23 != 0);
    return swift_release(v18);
  }
}

void sub_10005B1D8()
{
  unsigned __int8 *v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int v12;
  void *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  int v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  int v28;
  void *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  char v37[24];
  char v38[28];
  int v39;
  _BYTE v40[24];
  char v41[24];
  int v42;
  _BYTE v43[26];
  unsigned __int8 v44;
  unsigned __int8 v45;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = &v37[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = __chkstk_darwin(v4);
  v9 = &v37[-v8 - 8];
  __chkstk_darwin(v7);
  v11 = &v37[-v10 - 8];
  v12 = v0[112];
  v45 = v0[112];
  sub_10000DCF4(2, 3);
  if (v42 == 2)
  {
    v13 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
    v14 = objc_msgSend(v13, "firstUnlocked");

  }
  else
  {
    v14 = v42 & 1;
  }
  v44 = v14;
  if (v12 != v14)
  {
    v15 = sub_1000306DC();
    v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, v15, v2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(14, -1);
      *(_DWORD *)v19 = 67109376;
      swift_beginAccess(&v45, v38, 0, 0);
      v42 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 4, v19 + 8);
      *(_WORD *)(v19 + 8) = 1024;
      swift_beginAccess(&v44, v37, 0, 0);
      v42 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v19 + 10, v19 + 14);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Cloud Pairing Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v19, 0xEu);
      swift_slowDealloc(v19, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
    swift_beginAccess(&v44, &v42, 0, 0);
    v1[112] = v44;
  }
  v20 = v1[113];
  swift_beginAccess(&v45, v41, 1, 0);
  v45 = v20;
  sub_10000DCF4(2, 4);
  if (v40[0] == 2)
  {
    v21 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 336))();
    v22 = objc_msgSend(v21, "firstUnlocked");

  }
  else
  {
    v22 = v40[0] & 1;
  }
  swift_beginAccess(&v44, v40, 1, 0);
  v44 = v22;
  if (v20 != v22)
  {
    v23 = sub_1000306DC();
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v9, v23, v2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(14, -1);
      *(_DWORD *)v27 = 67109376;
      v39 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v27 + 4, v27 + 8);
      *(_WORD *)(v27 + 8) = 1024;
      v39 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v27 + 10, v27 + 14);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Debug Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v27, 0xEu);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v9, v2);
    v1[113] = v44;
  }
  v28 = v1[114];
  v45 = v1[114];
  sub_10000DCF4(2, 5);
  if (v39 == 2)
  {
    v29 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 336))();
    v30 = objc_msgSend(v29, "firstUnlocked");

  }
  else
  {
    v30 = v39 & 1;
  }
  v44 = v30;
  if (v28 != v30)
  {
    v31 = sub_1000306DC();
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v31, v2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(14, -1);
      *(_DWORD *)v35 = 67109376;
      v39 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v35 + 4, v35 + 8);
      *(_WORD *)(v35 + 8) = 1024;
      v39 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v35 + 10, v35 + 14);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Intelligence Manager Enabled: %{BOOL}d -> %{BOOL}d", (uint8_t *)v35, 0xEu);
      swift_slowDealloc(v35, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v1[114] = v44;
  }
  sub_10005B6F8();
}

void sub_10005B6F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  unsigned int v8;
  id *v9;
  void (*v10)(void);
  id v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  void (*v28)(__n128);
  __n128 v29;
  void *v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 336))(v4);
  v8 = objc_msgSend(v7, "firstUnlocked");

  if (v8)
  {
    v9 = (id *)sub_100006F64();
    v10 = *(void (**)(void))((swift_isaMask & *(_QWORD *)*v9) + 0xD8);
    v11 = *v9;
    v10();

    if (*(_BYTE *)(v1 + 112) == 1)
    {
      sub_10005A388();
    }
    else
    {
      v17 = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 440))();
      if (v17)
      {
        v18 = v17;
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 320))(v17);
        swift_release(v18);
      }
      (*(void (**)(_QWORD))(*(_QWORD *)v1 + 448))(0);
    }
    if (*(_BYTE *)(v1 + 113) == 1)
      v19 = sub_10005AA08();
    else
      v19 = sub_10005AB6C();
    v20 = 552;
    if (*(_BYTE *)(v1 + 114))
      v20 = 544;
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + v20))(v19);
    v21 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler;
    if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__osStateHandler))
    {
      v22 = *(_QWORD *)(v1 + 16);
      aBlock[4] = sub_10005C314;
      v33 = v1;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10005B9F4;
      aBlock[3] = &unk_100074990;
      v23 = _Block_copy(aBlock);
      v24 = v33;
      swift_retain(v1);
      swift_release(v24);
      v25 = os_state_add_handler(v22, v23);
      _Block_release(v23);
      *(_QWORD *)(v1 + v21) = v25;
    }
    sub_10005AF90();
    v26 = OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer;
    if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon__xpcServer))
    {
      type metadata accessor for BluetoothUserXPCServer();
      v27 = sub_10004CE04((uint64_t)*(id *)(v1 + 16));
      v28 = *(void (**)(__n128))((swift_isaMask & *v27) + 0x78);
      v29 = swift_retain(v1);
      v28(v29);
      v30 = *(void **)(v1 + v26);
      *(_QWORD *)(v1 + v26) = v27;
      v31 = v27;

      (*(void (**)(void))((swift_isaMask & *v31) + 0xD8))();
    }
  }
  else
  {
    v12 = sub_1000306DC();
    v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v12, v2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Bluetooth User Daemon waiting for first unlock...", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
}

uint64_t sub_10005B9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = v4(a2);
  swift_release(v3);
  return v5;
}

uint64_t sub_10005BA3C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t);
  _QWORD *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v35 - v9;
  v11 = static SystemVersionNumber.< infix(_:_:)(a1, a2);
  v12 = sub_1000306DC();
  v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  if ((v11 & 1) != 0)
  {
    v13(v10, v12, v4);
    sub_10005C11C(a1);
    v14 = sub_10005C11C(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v38 = v35;
      *(_DWORD *)v17 = 136315394;
      v36 = v4;
      v19 = *a1;
      v18 = a1[1];
      swift_bridgeObjectRetain(v18);
      v37 = sub_100002CA8(v19, v18, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v18);
      sub_10005C164(a1);
      *(_WORD *)(v17 + 12) = 2080;
      v20 = *a2;
      v21 = a2[1];
      swift_bridgeObjectRetain(v21);
      v37 = sub_100002CA8(v20, v21, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease(v21);
      sub_10005C164(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Migrating from %s to %s", (uint8_t *)v17, 0x16u);
      v22 = v35;
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, v36);
    }
    sub_10005C164(a1);
    sub_10005C164(a2);

    v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v34 = v10;
  }
  else
  {
    v13(v8, v12, v4);
    sub_10005C11C(a1);
    v24 = sub_10005C11C(a2);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v38 = v35;
      *(_DWORD *)v27 = 136315394;
      v36 = v4;
      v29 = *a1;
      v28 = a1[1];
      swift_bridgeObjectRetain(v28);
      v37 = sub_100002CA8(v29, v28, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v28);
      sub_10005C164(a1);
      *(_WORD *)(v27 + 12) = 2080;
      v30 = *a2;
      v31 = a2[1];
      swift_bridgeObjectRetain(v31);
      v37 = sub_100002CA8(v30, v31, &v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease(v31);
      sub_10005C164(a2);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Back-migrating from %s to %s", (uint8_t *)v27, 0x16u);
      v32 = v35;
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v36);
    }
    sub_10005C164(a1);
    sub_10005C164(a2);

    v33 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
    v34 = v8;
  }
  return v33(v34, v4);
}

void sub_10005BE48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _BYTE v10[24];

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = sub_1000306DC();
  v5 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v4, v0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "First launch since boot...", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  swift_beginAccess(&byte_100080B68, v10, 1, 0);
  byte_100080B68 = 1;
}

uint64_t sub_10005BF68()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 96));
  swift_release(*(_QWORD *)(v0 + 104));
  sub_10000BCBC(v0 + OBJC_IVAR____TtC14bluetoothuserd19BluetoothUserDaemon_keyValueStoreChangeSubscription, &qword_10007C830);

  return v0;
}

uint64_t sub_10005BFEC()
{
  uint64_t v0;

  sub_10005BF68();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10005C010()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 400))();
}

uint64_t sub_10005C038()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 736))();
}

uint64_t sub_10005C060()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 744))();
}

uint64_t sub_10005C088()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 392))();
}

uint64_t sub_10005C0B0(int a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v3 = *v1;
  sub_10005B1D8();
  result = (*(uint64_t (**)(void))(*(_QWORD *)v3 + 480))();
  if (result)
  {
    v5 = result;
    sub_10000B11C(a1);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10005C114()
{
  return sub_100059F08();
}

_QWORD *sub_10005C11C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[4];
  swift_bridgeObjectRetain(a1[9]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_10005C164(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[9];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t sub_10005C1AC()
{
  return type metadata accessor for BluetoothUserDaemon(0);
}

uint64_t type metadata accessor for BluetoothUserDaemon(uint64_t a1)
{
  uint64_t result;

  result = qword_1000809A0;
  if (!qword_1000809A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BluetoothUserDaemon);
  return result;
}

void sub_10005C1F0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[2] = &unk_100062BC8;
  v4[3] = &unk_100062BE0;
  v4[4] = &unk_100062BE0;
  v4[5] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[6] = &unk_100062BE0;
  v4[7] = &unk_100062BE0;
  v4[8] = &unk_100062BE0;
  v4[9] = &unk_100062BE0;
  v4[10] = &unk_100062BE0;
  v4[11] = &unk_100062BF8;
  v4[12] = &unk_100062BF8;
  v4[13] = &unk_100062BF8;
  sub_10005C2BC(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(v2 - 8) + 64;
    v4[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[16] = &unk_100062BE0;
    swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
}

void sub_10005C2BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10007C860)
  {
    v2 = sub_100006DD0(&qword_10007ABE0);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10007C860);
  }
}

uint64_t sub_10005C314()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  NSString v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v13;

  (*(void (**)(void))(*(_QWORD *)v0 + 392))();
  v2 = v1;
  v3 = (void *)objc_opt_self(NSPropertyListSerialization);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v13 = 0;
  v5 = objc_msgSend(v3, "dataWithPropertyList:format:options:error:", v4, 200, 0, &v13);

  v6 = v13;
  if (v5)
  {
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v5);
    v8 = v7;

    __asm { BR              X10 }
  }
  v9 = v6;
  v10 = _convertNSErrorToError(_:)(v6);

  swift_willThrow(v11);
  swift_errorRelease(v10);
  return 0;
}

uint64_t sub_10005C5F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007C830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C640(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000215C(&qword_10007C830);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10005C688()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10005C6B4()
{
  uint64_t v0;

  return sub_1000598F4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10005C6C4()
{
  uint64_t v0;
  _OWORD v1[5];

  v0 = type metadata accessor for BluetoothUserDaemon(0);
  memset(v1, 0, sizeof(v1));
  sub_100057700((uint64_t *)v1, (uint64_t)v1, v0, (uint64_t)&off_100074960);
  sub_10005B1D8();
}
