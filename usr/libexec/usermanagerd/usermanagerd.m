id sub_1000042B4(uint64_t a1, void *a2)
{
  void *v2;
  void *v3;
  id v4;
  void *v5;

  v2 = 0;
  if (a1 && a2)
  {
    v3 = *(void **)(a1 + 32);
    v4 = a2;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userPersonas"));
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v4));

  }
  return v2;
}

uint64_t sub_100004318(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  unsigned int valuePtr;

  v2 = 0xFFFFFFFFLL;
  valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberIntType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return 0xFFFFFFFFLL;
    }
  }
  return v2;
}

id sub_100004400(uint64_t a1, int a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  uint64_t v10;
  id v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (!a1)
    return 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  v3 = *(id *)(a1 + 24);
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v14;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", kUMUserSessionIDKey, (_QWORD)v13));
        if (v9)
        {
          v10 = objc_opt_class(NSNumber);
          if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0 && objc_msgSend(v9, "unsignedIntValue") == a2)
          {
            v11 = v8;

            goto LABEL_14;
          }
        }

      }
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
      if (v5)
        continue;
      break;
    }
  }
  v11 = 0;
LABEL_14:

  return v11;
}

void sub_100004700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100004BCC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  id v16;
  int v17;
  int v18;
  __int16 v19;
  id v20;

  v2 = sub_100007EF0(qword_1000E0040);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);

  if (!v3)
    return 0xFFFFFFFFLL;
  v4 = sub_100007EE4(qword_1000E0318);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v16 = 0;
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "infoForProcessWithPID:error:", a1, &v16));
  v7 = v16;

  if (v6)
  {
    v8 = sub_100007ECC((uint64_t)v6);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        v17 = 67109378;
        v18 = a1;
        v19 = 2112;
        v20 = v7;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, &v15, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    v8 = 0xFFFFFFFFLL;
  }

  return v8;
}

id sub_10000530C(uint64_t a1, int a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  if (a1)
  {
    v2 = sub_100004400(a1, a2);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = v3;
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kUMUserSessionUUIDKey));
      if (v5 && (v6 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
        v7 = v5;
      else
        v7 = 0;

    }
    else
    {
      v7 = 0;
    }

  }
  else
  {
    v7 = 0;
  }
  return v7;
}

__CFString *sub_1000053A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  int v11;
  id v12;
  __CFString *v13;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  id v21;
  int v22;
  int v23;
  __int16 v24;
  id v25;

  v4 = sub_100007EF0(qword_1000E0040);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);

  if (!v5)
    return (__CFString *)0;
  v6 = sub_100007EE4(qword_1000E0318);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v21 = 0;
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "infoForPersonaWithID:error:", a3, &v21));
  v9 = v21;

  if (v8)
  {
    if (sub_1000055AC((uint64_t)v8) == -1)
    {
      v13 = CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF");
    }
    else
    {
      v10 = qword_1000E0038;
      v11 = sub_1000055AC((uint64_t)v8);
      v12 = sub_10000530C(v10, v11);
      v13 = (__CFString *)objc_claimAutoreleasedReturnValue(v12);
    }
  }
  else
  {
    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v15 = (id)qword_1000E0080;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v16 = sub_100007750(0);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        v22 = 67109378;
        v23 = a3;
        v24 = 2112;
        v25 = v9;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, &v20, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }

    v13 = 0;
  }

  return v13;
}

uint64_t sub_1000055AC(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

void sub_100005884(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  __CFString *v19;
  kern_return_t v20;
  kern_return_t v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  UMPersonaMachPort *v44;
  uint64_t v45;
  void *v46;
  unsigned int v47;
  const char *v48;
  char *v49;
  uint64_t v50;
  int v51;
  unsigned int v52;

  v2 = *(void **)(a1 + 32);
  if (!v2)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      goto LABEL_32;
    v50 = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      v11 = *(_DWORD *)(a1 + 88);
      v51 = 67109120;
      v52 = v11;
      goto LABEL_28;
    }
LABEL_30:
    v15 = 0;
LABEL_31:
    free(v15);
LABEL_32:

    v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v18 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;
    goto LABEL_80;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      goto LABEL_32;
    v50 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      v10 = v12;
    else
      v10 = v12 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      v13 = *(_DWORD *)(a1 + 88);
      v51 = 67109120;
      v52 = v13;
LABEL_28:
      v14 = (const char *)_os_log_send_and_compose_impl(v10, &v50, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = objc_msgSend(v2, "machPort");
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v3 = (id)qword_1000E0158;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v50 = 0;
    LODWORD(v4) = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v4 = v4;
    else
      v4 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = v3;
      v51 = 67109120;
      v52 = objc_msgSend(v5, "machPort");
      v7 = (char *)_os_log_send_and_compose_impl(v4, &v50, 0, 0);

      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v19 = sub_1000053A8(0xFFFFFFFFLL, 0xFFFFFFFFLL, *(unsigned int *)(a1 + 92));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v19);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = sub_1000069A0(*(void **)(a1 + 40), *(unsigned int *)(a1 + 88), (uint64_t)objc_msgSend(*(id *)(a1 + 32), "machPort"), v18, *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  v20 = mach_port_deallocate(mach_task_self_, (mach_port_name_t)objc_msgSend(*(id *)(a1 + 32), "machPort"));
  if (v20)
  {
    v21 = v20;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v22 = (id)qword_1000E0158;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v50 = 0;
      v23 = sub_100007750(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        v51 = 67109120;
        v52 = v21;
        v25 = (const char *)_os_log_send_and_compose_impl(v24, &v50, 0, 0);
        v26 = (char *)v25;
        if (v25)
          sub_100007780(v25);
      }
      else
      {
        v26 = 0;
      }
      free(v26);
    }

  }
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v27 = (id)qword_1000E0158;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      v50 = 0;
      v28 = sub_100007750(1);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        v29 = v28;
      else
        v29 = v28 & 0xFFFFFFFE;
      if ((_DWORD)v29)
      {
        v30 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
        v51 = 67109120;
        v52 = v30;
        v31 = (const char *)_os_log_send_and_compose_impl(v29, &v50, 0, 0);
        v32 = (char *)v31;
        if (v31)
          sub_100007780(v31);
      }
      else
      {
        v32 = 0;
      }
      free(v32);
    }

    v42 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24), 0));
    v43 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v39 = *(NSObject **)(v43 + 40);
    *(_QWORD *)(v43 + 40) = v42;
    goto LABEL_79;
  }
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v39 = (id)qword_1000E0158;
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_79;
    v50 = 0;
    v40 = sub_100007750(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      v41 = v40;
    else
      v41 = v40 & 0xFFFFFFFE;
    if ((_DWORD)v41)
    {
      LOWORD(v51) = 0;
      goto LABEL_92;
    }
LABEL_94:
    v49 = 0;
LABEL_95:
    free(v49);
LABEL_79:

    goto LABEL_80;
  }
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v33 = (id)qword_1000E0158;
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    v50 = 0;
    v34 = sub_100007750(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
      v35 = v34;
    else
      v35 = v34 & 0xFFFFFFFE;
    if ((_DWORD)v35)
    {
      v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      v51 = 67109120;
      v52 = v36;
      v37 = (const char *)_os_log_send_and_compose_impl(v35, &v50, 0, 0);
      v38 = (char *)v37;
      if (v37)
        sub_100007780(v37);
    }
    else
    {
      v38 = 0;
    }
    free(v38);
  }

  v44 = -[UMPersonaMachPort initWithMachPort:options:]([UMPersonaMachPort alloc], "initWithMachPort:options:", *(unsigned int *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), 1);
  v45 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
  v46 = *(void **)(v45 + 40);
  *(_QWORD *)(v45 + 40) = v44;

  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v39 = (id)qword_1000E0158;
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      goto LABEL_79;
    v50 = 0;
    v47 = sub_100007750(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      v41 = v47;
    else
      v41 = v47 & 0xFFFFFFFE;
    if ((_DWORD)v41)
    {
      LOWORD(v51) = 0;
LABEL_92:
      v48 = (const char *)_os_log_send_and_compose_impl(v41, &v50, 0, 0);
      v49 = (char *)v48;
      if (v48)
        sub_100007780(v48);
      goto LABEL_95;
    }
    goto LABEL_94;
  }
LABEL_80:

}

id sub_100006150(uint64_t a1, int *a2)
{
  objc_class *v3;
  id v4;
  void *v5;
  int v6;
  char *v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  int v14;
  const char *v15;
  char *v16;
  uint64_t v18;
  int v19;
  int v20;

  v3 = (objc_class *)objc_opt_self();
  v4 = objc_alloc_init(v3);
  v5 = v4;
  if (*a2 != 2)
  {
    if (qword_1000E01C0 != -1)
      dispatch_once(&qword_1000E01C0, &stru_1000D1C50);
    v9 = (id)qword_1000E01B8;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v18 = 0;
    v10 = sub_100007750(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v12 = *a2;
      v19 = 67109120;
      v20 = v12;
      goto LABEL_20;
    }
LABEL_22:
    v16 = 0;
LABEL_23:
    free(v16);
LABEL_24:

    v8 = 0;
    goto LABEL_25;
  }
  sub_100006404((uint64_t)v4, a2[1]);
  v6 = sub_100006488((uint64_t)v3, a2[2]);
  sub_1000063E4((uint64_t)v5, v6);
  if (sub_1000063CC((uint64_t)v5) == -1)
  {
    if (qword_1000E01C0 != -1)
      dispatch_once(&qword_1000E01C0, &stru_1000D1C50);
    v9 = (id)qword_1000E01B8;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      goto LABEL_24;
    v18 = 0;
    v13 = sub_100007750(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      v11 = v13;
    else
      v11 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v14 = a2[2];
      v19 = 67109120;
      v20 = v14;
LABEL_20:
      v15 = (const char *)_os_log_send_and_compose_impl(v11, &v18, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  v7 = (char *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2 + 22));
  sub_1000063F0(v5, v7);

  sub_1000063D8((uint64_t)v5, a2[86]);
  v8 = v5;
LABEL_25:

  return v8;
}

uint64_t sub_1000063CC(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 12);
  return result;
}

uint64_t sub_1000063D8(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t sub_1000063E4(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 12) = a2;
  return result;
}

void sub_1000063F0(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_atomic_copy(a1, newValue, newValue, 24);
}

uint64_t sub_100006404(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 8) = a2;
  return result;
}

uint64_t sub_100006488(uint64_t a1, unsigned int a2)
{
  objc_opt_self();
  if (a2 >= 9)
    return 0xFFFFFFFFLL;
  else
    return a2;
}

void sub_100006938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose(&a31, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose((const void *)(v35 - 160), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000069A0(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  id v9;
  void *v10;
  const void *v11;
  id v12;
  const __CFDictionary *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  int v38;
  int v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  unsigned int v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  id v56;
  int v57;
  _BYTE v58[24];
  uint64_t v59;

  v57 = 0;
  v9 = sub_1000042B4(qword_1000E0040, a4);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v10
    && (v11 = v10,
        v12 = sub_100007154(qword_1000E0040, a1, v10),
        v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v12),
        CFRelease(v11),
        v13))
  {
    v14 = sub_100004318(v13, kUMUserPersonaIDKey);
    if (CFDictionaryContainsKey(v13, kUMUserPersonaDisabledKey)
      && sub_1000866F8(v13, kUMUserPersonaDisabledKey))
    {
      v15 = 0;
      a5 = 36;
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v59 = 0;
        v21 = sub_100007750(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          v22 = v21;
        else
          v22 = v21 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          *(_DWORD *)v58 = 67109634;
          *(_DWORD *)&v58[4] = v14;
          *(_WORD *)&v58[8] = 1024;
          *(_DWORD *)&v58[10] = a2;
          *(_WORD *)&v58[14] = 2112;
          *(_QWORD *)&v58[16] = a1;
          v23 = (const char *)_os_log_send_and_compose_impl(v22, &v59, 0, 0);
          v24 = (char *)v23;
          if (v23)
            sub_100007780(v23);
        }
        else
        {
          v24 = 0;
        }
        free(v24);
      }

      v25 = sub_100007ED8(qword_1000E0318);
      v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
      v56 = 0;
      v27 = objc_msgSend(v26, "uniquePIDForPID:error:", a2, &v56);
      v15 = v56;

      if (v27)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v28 = (id)qword_1000E0060;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          v59 = 0;
          v29 = sub_100007750(1);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            v30 = v29;
          else
            v30 = v29 & 0xFFFFFFFE;
          if ((_DWORD)v30)
          {
            *(_DWORD *)v58 = 67109632;
            *(_DWORD *)&v58[4] = v14;
            *(_WORD *)&v58[8] = 1024;
            *(_DWORD *)&v58[10] = a3;
            *(_WORD *)&v58[14] = 2048;
            *(_QWORD *)&v58[16] = v27;
            v31 = (const char *)_os_log_send_and_compose_impl(v30, &v59, 0, 0);
            v32 = (char *)v31;
            if (v31)
              sub_100007780(v31);
          }
          else
          {
            v32 = 0;
          }
          free(v32);
        }

        v38 = mach_voucher_persona_for_originator(v14, a3, v27, &v57);
        if (v38)
        {
          v39 = v38;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v40 = (id)qword_1000E0060;
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)v58 = 0;
            v41 = sub_100007750(1);
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
              v42 = v41;
            else
              v42 = v41 & 0xFFFFFFFE;
            if ((_DWORD)v42)
            {
              LODWORD(v59) = 67109120;
              HIDWORD(v59) = v39;
              v43 = (const char *)_os_log_send_and_compose_impl(v42, v58, 0, 0);
              v44 = (char *)v43;
              if (v43)
                sub_100007780(v43);
            }
            else
            {
              v44 = 0;
            }
            free(v44);
          }

          a5 = 22;
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v45 = (id)qword_1000E0060;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
          {
            *(_QWORD *)v58 = 0;
            v46 = sub_100007750(1);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              v47 = v46;
            else
              v47 = v46 & 0xFFFFFFFE;
            if ((_DWORD)v47)
            {
              LODWORD(v59) = 67109120;
              HIDWORD(v59) = v57;
              v48 = (const char *)_os_log_send_and_compose_impl(v47, v58, 0, 0);
              v49 = (char *)v48;
              if (v48)
                sub_100007780(v48);
            }
            else
            {
              v49 = 0;
            }
            free(v49);
          }

          if (a5)
          {
            *(_DWORD *)a5 = v57;
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v50 = (id)qword_1000E0060;
            if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
            {
              *(_QWORD *)v58 = 0;
              v51 = sub_100007750(1);
              if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
                v52 = v51;
              else
                v52 = v51 & 0xFFFFFFFE;
              if ((_DWORD)v52)
              {
                LODWORD(v59) = 67109120;
                HIDWORD(v59) = v57;
                v53 = (const char *)_os_log_send_and_compose_impl(v52, v58, 0, 0);
                v54 = (char *)v53;
                if (v53)
                  sub_100007780(v53);
              }
              else
              {
                v54 = 0;
              }
              free(v54);
            }

            a5 = 0;
          }
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v33 = (id)qword_1000E0060;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          v59 = 0;
          v34 = sub_100007750(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            v35 = v34;
          else
            v35 = v34 & 0xFFFFFFFE;
          if ((_DWORD)v35)
          {
            *(_DWORD *)v58 = 67109378;
            *(_DWORD *)&v58[4] = a2;
            *(_WORD *)&v58[8] = 2114;
            *(_QWORD *)&v58[10] = v15;
            v36 = (const char *)_os_log_send_and_compose_impl(v35, &v59, 0, 0);
            v37 = (char *)v36;
            if (v36)
              sub_100007780(v36);
          }
          else
          {
            v37 = 0;
          }
          free(v37);
        }

        a5 = (uint64_t)-[NSObject code](v15, "code");
      }
    }
    CFRelease(v13);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v15 = (id)qword_1000E0060;
    a5 = 2;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v59 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        *(_DWORD *)v58 = 138412290;
        *(_QWORD *)&v58[4] = a1;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, &v59, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
      a5 = 2;
    }
  }

  return a5;
}

id sub_100007154(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  id v30;
  unsigned __int8 v31;
  NSObject *v32;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (a1 && v5)
  {
    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v9 = v6;
    v8 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
    if (v8)
    {
      v30 = v5;
      v10 = *(_QWORD *)v35;
      do
      {
        v11 = 0;
        do
        {
          if (*(_QWORD *)v35 != v10)
            objc_enumerationMutation(v9);
          v12 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)v11);
          v13 = objc_opt_class(NSMutableDictionary);
          if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
          {
            v14 = objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UserPersonaUniqueString")));
            v15 = objc_opt_class(NSString);
            v32 = v14;
            if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0)
            {
              v16 = sub_1000074C8(v12, (uint64_t)CFSTR("UserPersonaUniqueString"));
              v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
              v31 = objc_msgSend(v17, "isEqualToString:", v30);

              if ((v31 & 1) != 0)
              {
                v8 = v12;

                goto LABEL_38;
              }
            }
            else
            {
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v24 = (id)qword_1000E0128;
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                v33 = 0;
                v25 = sub_100007750(1);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  v26 = v25;
                else
                  v26 = v25 & 0xFFFFFFFE;
                if ((_DWORD)v26)
                {
                  v27 = (const char *)_os_log_send_and_compose_impl(v26, &v33, 0, 0);
                  v28 = (char *)v27;
                  if (v27)
                    sub_100007780(v27);
                }
                else
                {
                  v28 = 0;
                }
                free(v28);
              }

            }
            v18 = v32;
          }
          else
          {
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v18 = (id)qword_1000E0128;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              v33 = 0;
              v19 = sub_100007750(1);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                v20 = v19;
              else
                v20 = v19 & 0xFFFFFFFE;
              if ((_DWORD)v20)
              {
                v21 = v18;
                v22 = (const char *)_os_log_send_and_compose_impl(v20, &v33, 0, 0);
                v23 = (char *)v22;
                if (v22)
                  sub_100007780(v22);
              }
              else
              {
                v21 = v18;
                v23 = 0;
              }
              free(v23);
              v18 = v21;
            }
          }

          v11 = (char *)v11 + 1;
        }
        while (v8 != v11);
        v8 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v38, 16);
      }
      while (v8);
LABEL_38:
      v5 = v30;
    }

  }
  return v8;
}

id sub_1000074C8(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  int *v5;
  id v6;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
    v3 = objc_opt_class(NSString);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
    v5 = __error();
    if ((isKindOfClass & 1) != 0)
    {
      *v5 = 0;
      v6 = v2;
    }
    else
    {
      v6 = 0;
      *v5 = 2;
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

void sub_100007550(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString *v12;
  void *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  tm v21;
  timespec ts;
  char v23[100];

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_9;
  if (*(_DWORD *)(v2 + 12) == -1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s.0"), *(_QWORD *)(v2 + 40)));
    v4 = *(_QWORD **)(a1 + 32);
    if (v4)
      v4 = (_QWORD *)v4[3];
    v5 = v4;
    v6 = sub_100007EF0((uint64_t)v5);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_msgSend(v7, "openFileForAppendingAtPath:error:", v3, 0);
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
      *(_DWORD *)(v9 + 12) = v8;

    v2 = *(_QWORD *)(a1 + 32);
    if (!v2)
      goto LABEL_9;
  }
  if (*(_DWORD *)(v2 + 12) != -1)
  {
LABEL_9:
    ts.tv_sec = 0;
    ts.tv_nsec = 0;
    timespec_get(&ts, 1);
    memset(&v21, 0, sizeof(v21));
    gmtime_r(&ts.tv_sec, &v21);
    strftime(v23, 0x64uLL, "%F %T", &v21);
    v10 = *(_QWORD *)(a1 + 32);
    if (v10)
      v11 = *(unsigned int *)(v10 + 8);
    else
      v11 = 0;
    v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s.%06ldZ [%d] (%p) %s\n"), v23, ts.tv_nsec / 1000, v11, pthread_self(), *(_QWORD *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = *(_QWORD **)(a1 + 32);
    if (v14)
      v14 = (_QWORD *)v14[3];
    v15 = v14;
    v16 = sub_100007EF0((uint64_t)v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    v18 = v17;
    v19 = *(_QWORD *)(a1 + 32);
    if (v19)
      v20 = *(unsigned int *)(v19 + 12);
    else
      v20 = 0;
    objc_msgSend(v17, "writeToFileWithDescriptor:string:error:", v20, v13, 0);

    if (sub_100007EFC(*(_QWORD *)(a1 + 32)))
      sub_100068204(*(_QWORD *)(a1 + 32));

  }
}

uint64_t sub_100007750(int a1)
{
  unsigned int v1;
  BOOL v2;

  if (a1)
    v1 = 3;
  else
    v1 = 1;
  if (byte_1000E0311)
    v2 = byte_1000E0310 == 0;
  else
    v2 = 0;
  if (v2)
    return v1;
  else
    return 2;
}

void sub_100007780(const char *a1)
{
  if (byte_1000E0310)
    fprintf(__stdoutp, "UMD_INIT: %s\n", a1);
  sub_100007F60(qword_1000E00C0, (uint64_t)a1);
}

void sub_100007BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100007ECC(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t sub_100007ED8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 64);
  return result;
}

uint64_t sub_100007EE4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 48);
  return result;
}

uint64_t sub_100007EF0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 32);
  return result;
}

BOOL sub_100007EFC(_BOOL8 result)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = sub_100007EF0(*(_QWORD *)(result + 24));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = (uint64_t)objc_msgSend(v3, "sizeOfFileWithDescriptor:error:", *(unsigned int *)(v1 + 12), 0);

    return (v4 & 0x8000000000000000) == 0 && v4 >= *(_QWORD *)(v1 + 48);
  }
  return result;
}

void sub_100007F60(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  _QWORD v3[6];

  if (a1)
  {
    v2 = *(NSObject **)(a1 + 32);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100007550;
    v3[3] = &unk_1000D17B0;
    v3[4] = a1;
    v3[5] = a2;
    dispatch_sync(v2, v3);
  }
}

id sub_1000080B4(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1000DFF90;
  qword_1000DFF90 = v1;

  return objc_msgSend((id)qword_1000DFF90, "setSwitchState:", 0);
}

void sub_10000812C(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___RDServer));
  v2 = (void *)qword_1000DFFA0;
  qword_1000DFFA0 = v1;

}

void sub_1000081A0(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___BDKeybagd));
  v2 = (void *)qword_1000DFFB0;
  qword_1000DFFB0 = v1;

}

void sub_100008348(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pid");
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v7));

  if (v4)
  {
    NSLog(CFSTR("We already have a client for pid: %d"), v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  }
}

void sub_100008480(uint64_t a1)
{
  id v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  void *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  void *v10;
  void *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  __int16 v17;
  int v18;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pid");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_clientForPID:", v2));

  if (v3)
  {
    if (objc_msgSend(*(id *)(a1 + 32), "hasUserSwitchTasks"))
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v4 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        v14 = 0;
        LODWORD(v5) = sub_100007750(1);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
          v5 = v5;
        else
          v5 = v5 & 0xFFFFFFFE;
        if ((_DWORD)v5)
        {
          v6 = *(void **)(a1 + 32);
          v7 = v4;
          v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userSwitchTasks"));
          v15 = 138412546;
          v16 = v8;
          v17 = 1024;
          v18 = (int)v2;
          LODWORD(v13) = 18;
          v12 = &v15;
          v9 = (char *)_os_log_send_and_compose_impl(v5, &v14, 0, 0);

          if (v9)
            sub_100007780(v9);
        }
        else
        {
          v9 = 0;
        }
        free(v9);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients", v12, v13));
    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
    objc_msgSend(v10, "setObject:forKeyedSubscript:", 0, v11);

    if (objc_msgSend(*(id *)(a1 + 40), "switchState") == 1)
      objc_msgSend(*(id *)(a1 + 40), "_checkIfWeShouldSwitchUser:", dword_1000E02C8 == 3);
  }
}

void sub_100008714(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pid");
  v7 = (id)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients"));
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", v7));

  if (v4)
  {
    NSLog(CFSTR("We already have a client for pid: %d"), v2);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients"));
    objc_msgSend(v6, "setObject:forKeyedSubscript:", v5, v7);

  }
}

void sub_10000884C(uint64_t a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "pid");
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "_clientForPID:", v2));

  if (v3)
  {
    v5 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "pidsToClients"));
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v2));
    objc_msgSend(v5, "setObject:forKeyedSubscript:", 0, v4);

  }
}

void sub_100008DB8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  __int16 v20;
  void *v21;
  uint64_t v22;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  v3 = sub_100007ED8(qword_1000E0318);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v6 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD *)(a1 + 48);
      LODWORD(v19) = 67109378;
      HIDWORD(v19) = v9;
      v20 = 2114;
      v21 = v5;
      v10 = (const char *)_os_log_send_and_compose_impl(v8, &v22, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (!v2)
    goto LABEL_29;
  if (objc_msgSend(*(id *)(a1 + 32), "switchState"))
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 16, 0));
  else
    v12 = 0;
  (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v12);
  if (!v12)
  {
    objc_msgSend(v2, "setStakeholderIsRegistered:", 1);
    objc_msgSend(v2, "setSwitchStakeHolderKind:", 0);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v13 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v16 = *(_DWORD *)(a1 + 48);
        LODWORD(v22) = 67109120;
        HIDWORD(v22) = v16;
        v17 = (const char *)_os_log_send_and_compose_impl(v15, &v19, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

LABEL_29:
    v12 = 0;
  }

}

void sub_100009138(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  uint64_t v13;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  char *v17;
  void *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  void *v29;
  uint64_t v30;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (v2)
  {
    v3 = sub_100007ED8(qword_1000E0318);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v6 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v30 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(_DWORD *)(a1 + 48);
        LODWORD(v27) = 67109378;
        HIDWORD(v27) = v9;
        v28 = 2114;
        v29 = v5;
        LODWORD(v26) = 18;
        v25 = &v27;
        v10 = (const char *)_os_log_send_and_compose_impl(v8, &v30, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }

    if (!objc_msgSend(*(id *)(a1 + 32), "switchState") || dword_1000E02C8 == 3)
    {
      objc_msgSend(v2, "setCriticalStakeHolder:", 1, v25, v26);
      objc_msgSend(v2, "setSwitchStakeHolderKind:", 1);
      v18 = 0;
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v12 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v27 = 0;
        LODWORD(v13) = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v13 = v13;
        else
          v13 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v13)
        {
          v14 = *(void **)(a1 + 32);
          v15 = v12;
          v16 = objc_msgSend(v14, "switchState");
          LODWORD(v30) = 67109120;
          HIDWORD(v30) = v16;
          v17 = (char *)_os_log_send_and_compose_impl(v13, &v27, 0, 0);

          if (v17)
            sub_100007780(v17);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 16, 0));
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    if (!v18)
    {
      objc_msgSend(v2, "setStakeholderIsRegistered:", 1);
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v19 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v27 = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          v22 = *(_DWORD *)(a1 + 48);
          LODWORD(v30) = 67109120;
          HIDWORD(v30) = v22;
          v23 = (const char *)_os_log_send_and_compose_impl(v21, &v27, 0, 0);
          v24 = (char *)v23;
          if (v23)
            sub_100007780(v23);
        }
        else
        {
          v24 = 0;
        }
        free(v24);
      }

    }
  }

}

void sub_1000095D4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (!v2)
    goto LABEL_35;
  v3 = sub_100007ED8(qword_1000E0318);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v6 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v28 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD *)(a1 + 48);
      LODWORD(v25) = 67109378;
      HIDWORD(v25) = v9;
      v26 = 2114;
      v27 = v5;
      LODWORD(v24) = 18;
      v23 = &v25;
      v10 = (const char *)_os_log_send_and_compose_impl(v8, &v28, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mobile.keybagd.UserManager.bubblepop")))
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "switchState"))
    {
      v13 = 0;
      goto LABEL_18;
    }
    v12 = 16;
  }
  else
  {
    v12 = 1;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v12, 0, v23, v24));
LABEL_18:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (!v13)
  {
    objc_msgSend(v2, "setStakeholderIsRegistered:", 1);
    objc_msgSend(v2, "setBubblePopstakeholderIsRegistered:", 1);
    objc_msgSend(v2, "setSwitchStakeHolderKind:", 3);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v17 = *(_DWORD *)(a1 + 48);
        LODWORD(v28) = 67109120;
        HIDWORD(v28) = v17;
        v18 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bubbleStakeHolder"));
    v21 = *(void **)(a1 + 32);
    if (v20)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "bubbleStakeHolder"));
      objc_msgSend(v22, "bubbleShouldPop");

    }
    else
    {
      objc_msgSend(v21, "_broadcastBubbleDidPop");
    }
  }

LABEL_35:
}

void sub_100009C64(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSErrorDomain v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  unsigned __int8 v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  const char *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  if (v2)
  {
    v3 = sub_100007ED8(qword_1000E0318);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 56), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v6 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(_DWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 40);
        LODWORD(v35) = 67109634;
        HIDWORD(v35) = v9;
        v36 = 2114;
        v37 = v5;
        v38 = 2114;
        v39 = v10;
        LODWORD(v34) = 28;
        v33 = &v35;
        v11 = (const char *)_os_log_send_and_compose_impl(v8, &v40, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mobile.keybagd.UserManager.sync")) & 1) == 0)
    {
      v13 = NSPOSIXErrorDomain;
      v14 = 1;
      goto LABEL_17;
    }
    if (objc_msgSend(*(id *)(a1 + 32), "switchState"))
    {
LABEL_15:
      v13 = NSPOSIXErrorDomain;
      v14 = 16;
LABEL_17:
      v15 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v13, v14, 0, v33, v34));
LABEL_18:
      (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), v15);

      goto LABEL_19;
    }
    v16 = sub_10001BE1C(qword_1000E0318);
    v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
    if (sub_10001CA60((uint64_t)v17))
    {
      v18 = sub_10001BE1C(qword_1000E0318);
      v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
      if (sub_10001CAE4((uint64_t)v19) == 502)
      {

LABEL_34:
        objc_msgSend(v2, "setMachServiceName:", *(_QWORD *)(a1 + 40), v33, v34);
        sub_10003819C(*(const __CFString **)(a1 + 40));
        objc_msgSend(v2, "setStakeholderIsRegistered:", 1);
        objc_msgSend(v2, "setSwitchStakeHolderKind:", 2);
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v27 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v35 = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            v30 = *(_DWORD *)(a1 + 56);
            LODWORD(v40) = 67109120;
            HIDWORD(v40) = v30;
            v31 = (const char *)_os_log_send_and_compose_impl(v29, &v35, 0, 0);
            v32 = (char *)v31;
            if (v31)
              sub_100007780(v31);
          }
          else
          {
            v32 = 0;
          }
          free(v32);
        }

        v15 = 0;
        goto LABEL_18;
      }
      v26 = objc_msgSend(*(id *)(a1 + 32), "inLoginSession");

      if ((v26 & 1) == 0)
        goto LABEL_34;
    }
    else
    {
      v20 = objc_msgSend(*(id *)(a1 + 32), "inLoginSession");

      if (!v20)
        goto LABEL_34;
    }
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v21 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v35 = 0;
      v22 = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LOWORD(v40) = 0;
        LODWORD(v34) = 2;
        v33 = &v40;
        v24 = (const char *)_os_log_send_and_compose_impl(v23, &v35, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    goto LABEL_15;
  }
LABEL_19:

}

void sub_10000A13C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  __CFString *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  __CFString *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  const char *v34;
  char *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int16 v39;
  void *v40;
  uint64_t v41;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  v3 = sub_100007ED8(qword_1000E0318);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v6 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v41 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD *)(a1 + 48);
      LODWORD(v38) = 67109378;
      HIDWORD(v38) = v9;
      v39 = 2114;
      v40 = v5;
      LODWORD(v37) = 18;
      v36 = &v38;
      v10 = (const char *)_os_log_send_and_compose_impl(v8, &v41, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (v2)
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "machServiceName"));

    if (v12)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v13 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v38 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          LOWORD(v41) = 0;
          LODWORD(v37) = 2;
          v36 = &v41;
          v16 = (const char *)_os_log_send_and_compose_impl(v15, &v38, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      if ((*(_QWORD *)(a1 + 40) | 2) == 2)
      {
        v18 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "machServiceName"));
        sub_100038C28(v18);

        v12 = 0;
      }
      else
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v19 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v38 = 0;
          v20 = sub_100007750(1);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            v21 = v20;
          else
            v21 = v20 & 0xFFFFFFFE;
          if ((_DWORD)v21)
          {
            LOWORD(v41) = 0;
            LODWORD(v37) = 2;
            v36 = &v41;
            v22 = (const char *)_os_log_send_and_compose_impl(v21, &v38, 0, 0);
            v23 = (char *)v22;
            if (v22)
              sub_100007780(v22);
          }
          else
          {
            v23 = 0;
          }
          free(v23);
        }

        v24 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "machServiceName"));
        sub_10003819C(v24);

        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fetchUserSyncTaskList"));
        if (objc_msgSend(v12, "count"))
          sub_100039234(v12);
      }
    }
    if (objc_msgSend(v2, "bubblePopstakeholderIsRegistered", v36, v37))
      sub_10001F560();
    objc_msgSend(v2, "setStakeholderIsRegistered:", 0);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v25 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v26 = sub_100007750(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        LOWORD(v41) = 0;
        v28 = (const char *)_os_log_send_and_compose_impl(v27, &v38, 0, 0);
        v29 = (char *)v28;
        if (v28)
          sub_100007780(v28);
      }
      else
      {
        v29 = 0;
      }
      free(v29);
    }

    objc_msgSend(*(id *)(a1 + 32), "_checkIfWeShouldSwitchUser:", 0);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v30 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v31 = sub_100007750(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if ((_DWORD)v32)
      {
        v33 = *(_DWORD *)(a1 + 48);
        LODWORD(v41) = 67109120;
        HIDWORD(v41) = v33;
        v34 = (const char *)_os_log_send_and_compose_impl(v32, &v38, 0, 0);
        v35 = (char *)v34;
        if (v34)
          sub_100007780(v34);
      }
      else
      {
        v35 = 0;
      }
      free(v35);
    }

  }
}

void sub_10000A704(id a1)
{
  void *v1;

  v1 = (void *)qword_1000DFFC0;
  qword_1000DFFC0 = (uint64_t)&off_1000D5360;

}

void sub_10000A854(uint64_t a1)
{
  void *v2;
  __CFString **v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  void *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  char *v25;
  int v26;
  int v27;
  uint64_t v28;
  void (*v29)(uint64_t, void *);
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  uint64_t v35;
  NSMutableDictionary *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  void *i;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  __CFString *v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  _QWORD *v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  _QWORD v69[2];
  _BYTE v70[128];
  uint64_t v71;
  __int16 v72;
  int v73;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 80)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = &kUMUserSessionShortNameKey;
  v4 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v71 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      LOWORD(v69[0]) = 0;
      LODWORD(v63) = 2;
      v61 = v69;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v71, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mkb.usersession.switch")) & 1) != 0
    || (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment") & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  }
  if (objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess", v61, v63))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v10 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v71 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        LOWORD(v69[0]) = 0;
        LODWORD(v64) = 2;
        v62 = v69;
        v13 = (const char *)_os_log_send_and_compose_impl(v12, &v71, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

    v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 16, 0));
    v9 = (void *)v20;
    goto LABEL_39;
  }
  if (!sub_10001FBAC())
  {
LABEL_39:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v21 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v69[0] = 0;
      LODWORD(v22) = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v22 = v22;
      else
        v22 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        v23 = v21;
        v24 = sub_100020898();
        LODWORD(v71) = 67109376;
        HIDWORD(v71) = v24;
        v72 = 1024;
        v73 = dword_1000E02C8;
        LODWORD(v64) = 14;
        v62 = &v71;
        v25 = (char *)_os_log_send_and_compose_impl(v22, v69, 0, 0);

        if (v25)
          sub_100007780(v25);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    v26 = sub_100020898();
    v27 = sub_100004318(*(const __CFDictionary **)(a1 + 40), kUMUserSessionIDKey);
    v28 = *(_QWORD *)(a1 + 72);
    v29 = *(void (**)(uint64_t, void *))(v28 + 16);
    if (v26 != v27 || dword_1000E02C8 == 1)
    {
      v29(v28, v9);
      if (!v9)
      {
        if (*(_QWORD *)(a1 + 48))
        {
          if (qword_1000DFFD8 != -1)
            dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
          v30 = (id)qword_1000DFFD0;
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v71 = 0;
            v31 = sub_100007750(1);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              v32 = v31;
            else
              v32 = v31 & 0xFFFFFFFE;
            if ((_DWORD)v32)
            {
              LOWORD(v69[0]) = 0;
              LODWORD(v64) = 2;
              v62 = v69;
              v33 = (const char *)_os_log_send_and_compose_impl(v32, &v71, 0, 0);
              v34 = (char *)v33;
              if (v33)
                sub_100007780(v33);
            }
            else
            {
              v34 = 0;
            }
            free(v34);
          }

          v36 = objc_opt_new(NSMutableDictionary);
          v37 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_allowlistedPreferencesKeys"));
          v65 = 0u;
          v66 = 0u;
          v67 = 0u;
          v68 = 0u;
          v38 = *(id *)(a1 + 48);
          v39 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
          if (v39)
          {
            v40 = v39;
            v41 = *(_QWORD *)v66;
            do
            {
              for (i = 0; i != v40; i = (char *)i + 1)
              {
                if (*(_QWORD *)v66 != v41)
                  objc_enumerationMutation(v38);
                v43 = *(_QWORD *)(*((_QWORD *)&v65 + 1) + 8 * (_QWORD)i);
                if (objc_msgSend(v37, "containsObject:", v43, v62, v64, (_QWORD)v65))
                {
                  v44 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", v43));
                  -[NSMutableDictionary setObject:forKeyedSubscript:](v36, "setObject:forKeyedSubscript:", v44, v43);

                }
              }
              v40 = objc_msgSend(v38, "countByEnumeratingWithState:objects:count:", &v65, v70, 16);
            }
            while (v40);
          }

          if (-[NSMutableDictionary count](v36, "count"))
          {
            v45 = sub_100025800(*(const __CFDictionary **)(a1 + 40));
            v46 = (__CFString *)objc_claimAutoreleasedReturnValue(v45);
            if (v46)
            {
              _CFPreferencesWriteUserPreferencesWithCorrectOwner();
              CFPreferencesSetMultiple((CFDictionaryRef)v36, 0, kCFPreferencesAnyApplication, v46, kCFPreferencesAnyHost);
              v3 = &kUMUserSessionShortNameKey;
            }
            else
            {
              v3 = &kUMUserSessionShortNameKey;
              if (qword_1000DFFD8 != -1)
                dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
              v51 = (id)qword_1000DFFD0;
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                v71 = 0;
                v52 = sub_100007750(1);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                  v53 = v52;
                else
                  v53 = v52 & 0xFFFFFFFE;
                if ((_DWORD)v53)
                {
                  LOWORD(v69[0]) = 0;
                  v54 = (const char *)_os_log_send_and_compose_impl(v53, &v71, 0, 0);
                  v55 = (char *)v54;
                  if (v54)
                    sub_100007780(v54);
                }
                else
                {
                  v55 = 0;
                }
                free(v55);
              }

            }
          }
          else
          {
            v3 = &kUMUserSessionShortNameKey;
            if (qword_1000DFFD8 != -1)
              dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
            v46 = (__CFString *)(id)qword_1000DFFD0;
            if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_DEFAULT))
            {
              v71 = 0;
              v47 = sub_100007750(1);
              if (os_log_type_enabled((os_log_t)v46, OS_LOG_TYPE_DEFAULT))
                v48 = v47;
              else
                v48 = v47 & 0xFFFFFFFE;
              if ((_DWORD)v48)
              {
                LOWORD(v69[0]) = 0;
                v49 = (const char *)_os_log_send_and_compose_impl(v48, &v71, 0, 0);
                v50 = (char *)v49;
                if (v49)
                  sub_100007780(v49);
              }
              else
              {
                v50 = 0;
              }
              free(v50);
            }
          }

        }
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v56 = v3[506];
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v71 = 0;
          v57 = sub_100007750(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            v58 = v57;
          else
            v58 = v57 & 0xFFFFFFFE;
          if ((_DWORD)v58)
          {
            LOWORD(v69[0]) = 0;
            v59 = (const char *)_os_log_send_and_compose_impl(v58, &v71, 0, 0);
            v60 = (char *)v59;
            if (v59)
              sub_100007780(v59);
          }
          else
          {
            v60 = 0;
          }
          free(v60);
        }

        sub_10003223C(*(const __CFDictionary **)(a1 + 40), *(_QWORD *)(a1 + 56), *(const __CFData **)(a1 + 64));
        v9 = 0;
      }
    }
    else
    {
      v29(v28, 0);
    }
    goto LABEL_117;
  }
  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v15 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v71 = 0;
    v16 = sub_100007750(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      LOWORD(v69[0]) = 0;
      v18 = (const char *)_os_log_send_and_compose_impl(v17, &v71, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    free(v19);
  }

  v35 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, 0));
  v9 = (void *)v35;
LABEL_117:

}

void sub_10000B29C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void (*v22)(uint64_t, void *);
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v32[2];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v31 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v32[0]) = 0;
      LODWORD(v30) = 2;
      v29 = v32;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v31, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mkb.usersession.loginwindow")) & 1) != 0)
    v8 = 0;
  else
    v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  if (objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess", v29, v30) && dword_1000E02C8 != 1)
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v9 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        v32[0] = 67109120;
        v32[1] = dword_1000E02C8;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, &v31, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    v19 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 16, 0));
    v8 = (void *)v19;
    goto LABEL_39;
  }
  if (!sub_10001FBAC())
  {
LABEL_39:
    v20 = sub_100020898();
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(void (**)(uint64_t, void *))(v21 + 16);
    if (v20 == 502)
    {
      v22(v21, 0);
    }
    else
    {
      v22(v21, v8);
      if (!v8)
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v23 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        {
          v31 = 0;
          v24 = sub_100007750(1);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            v25 = v24;
          else
            v25 = v24 & 0xFFFFFFFE;
          if ((_DWORD)v25)
          {
            LOWORD(v32[0]) = 0;
            v26 = (const char *)_os_log_send_and_compose_impl(v25, &v31, 0, 0);
            v27 = (char *)v26;
            if (v26)
              sub_100007780(v26);
          }
          else
          {
            v27 = 0;
          }
          free(v27);
        }

        sub_1000328D8();
        v8 = 0;
      }
    }
    goto LABEL_57;
  }
  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v14 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    v31 = 0;
    v15 = sub_100007750(0);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v16)
    {
      LOWORD(v32[0]) = 0;
      v17 = (const char *)_os_log_send_and_compose_impl(v16, &v31, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  v28 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, 0));
  v8 = (void *)v28;
LABEL_57:

}

void sub_10000B7FC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  void *v20;
  void (*v21)(void);
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v39 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v40) = 0;
      LODWORD(v38) = 2;
      v37 = &v40;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v39, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if (!objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mkb.usersession.loginwindow")))
  {
    v14 = 1;
    goto LABEL_38;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess") & 1) != 0
    || sub_100020898() == 502)
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v8 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v39 = 0;
      LODWORD(v9) = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v9 = v9;
      else
        v9 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = *(void **)(a1 + 32);
        v11 = v8;
        v12 = objc_msgSend(v10, "inLogoutProcess");
        v40 = 67109120;
        v41 = v12;
        LODWORD(v38) = 8;
        v37 = &v40;
        v13 = (char *)_os_log_send_and_compose_impl(v9, &v39, 0, 0);

        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    v14 = 16;
LABEL_38:
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v14, 0, v37, v38));
    if (v20)
      goto LABEL_41;
    goto LABEL_39;
  }
  if (!sub_10001FBAC())
  {
LABEL_39:
    if (sub_100020898() != 502)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v22 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v39 = 0;
        v23 = sub_100007750(1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          v24 = v23;
        else
          v24 = v23 & 0xFFFFFFFE;
        if ((_DWORD)v24)
        {
          LOWORD(v40) = 0;
          v25 = (const char *)_os_log_send_and_compose_impl(v24, &v39, 0, 0);
          v26 = (char *)v25;
          if (v25)
            sub_100007780(v25);
        }
        else
        {
          v26 = 0;
        }
        free(v26);
      }

      if (sub_100032924())
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v27 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v39 = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            v40 = 67109120;
            v41 = dword_1000E02C8;
            v30 = (const char *)_os_log_send_and_compose_impl(v29, &v39, 0, 0);
            v31 = (char *)v30;
            if (v30)
              sub_100007780(v30);
          }
          else
          {
            v31 = 0;
          }
          free(v31);
        }

        v20 = 0;
      }
      else
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v32 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v39 = 0;
          v33 = sub_100007750(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            v34 = v33;
          else
            v34 = v33 & 0xFFFFFFFE;
          if ((_DWORD)v34)
          {
            v40 = 67109120;
            v41 = dword_1000E02C8;
            v35 = (const char *)_os_log_send_and_compose_impl(v34, &v39, 0, 0);
            v36 = (char *)v35;
            if (v35)
              sub_100007780(v35);
          }
          else
          {
            v36 = 0;
          }
          free(v36);
        }

        v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
      }
      v21 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
      goto LABEL_79;
    }
    v20 = 0;
LABEL_41:
    v21 = *(void (**)(void))(*(_QWORD *)(a1 + 40) + 16);
LABEL_79:
    v21();
    goto LABEL_80;
  }
  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v15 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    v39 = 0;
    v16 = sub_100007750(0);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      LOWORD(v40) = 0;
      v18 = (const char *)_os_log_send_and_compose_impl(v17, &v39, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    free(v19);
  }

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, 0));
LABEL_80:

}

void sub_10000C338(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v12, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (objc_msgSend(*(id *)(a1 + 32), "inLogoutProcess"))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v7 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v12, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }

  }
  else
  {
    sub_10002DE14();
  }
}

void sub_10000C5D4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  int v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  int v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  unsigned int v27;
  void *v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  unsigned int v34;
  const char *v35;
  char *v36;
  const __CFDictionary *v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  __int16 v47;
  int v48;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v46 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v45[0]) = 0;
      LODWORD(v44) = 2;
      v43 = v45;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v46, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mkb.usersession.loginwindow")) & 1) != 0)
  {
    v8 = sub_10001BE1C(qword_1000E0318);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if ((sub_10001CA60((uint64_t)v9) & 1) != 0)
    {
      v10 = sub_10001BE1C(qword_1000E0318);
      v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
      v12 = sub_10001CAE4((uint64_t)v11);

      if (v12 == 502)
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v13 = (id)qword_1000DFFD0;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_78;
        v46 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          LOWORD(v45[0]) = 0;
          goto LABEL_74;
        }
LABEL_76:
        v36 = 0;
LABEL_77:
        free(v36);
        goto LABEL_78;
      }
    }
    else
    {

    }
    if (objc_msgSend(*(id *)(a1 + 32), "inLoginSession", v43, v44))
    {
      v21 = dword_1000E02CC;
      dword_1000E02CC = 1;
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v22 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v45[0] = 0;
        v23 = sub_100007750(1);
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          v24 = v23;
        else
          v24 = v23 & 0xFFFFFFFE;
        if ((_DWORD)v24)
        {
          LODWORD(v46) = 67109376;
          HIDWORD(v46) = v21;
          v47 = 1024;
          v48 = dword_1000E02CC;
          v25 = (const char *)_os_log_send_and_compose_impl(v24, v45, 0, 0);
          v26 = (char *)v25;
          if (v25)
            sub_100007780(v25);
        }
        else
        {
          v26 = 0;
        }
        free(v26);
      }

      sub_10001DE7C();
      if (v21 == dword_1000E02CC)
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v29 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v46 = 0;
          v30 = sub_100007750(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            v31 = v30;
          else
            v31 = v30 & 0xFFFFFFFE;
          if ((_DWORD)v31)
          {
            LOWORD(v45[0]) = 0;
            v32 = (const char *)_os_log_send_and_compose_impl(v31, &v46, 0, 0);
            v33 = (char *)v32;
            if (v32)
              sub_100007780(v32);
          }
          else
          {
            v33 = 0;
          }
          free(v33);
        }

        v37 = (const __CFDictionary *)sub_10001D248(502);
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v38 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        {
          v46 = 0;
          v39 = sub_100007750(1);
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            v40 = v39;
          else
            v40 = v39 & 0xFFFFFFFE;
          if ((_DWORD)v40)
          {
            LOWORD(v45[0]) = 0;
            v41 = (const char *)_os_log_send_and_compose_impl(v40, &v46, 0, 0);
            v42 = (char *)v41;
            if (v41)
              sub_100007780(v41);
          }
          else
          {
            v42 = 0;
          }
          free(v42);
        }

        sub_1000329B8(v37, 0);
        goto LABEL_79;
      }
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v13 = (id)qword_1000DFFD0;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
LABEL_78:

LABEL_79:
        v28 = 0;
        goto LABEL_80;
      }
      v46 = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v34;
      else
        v15 = v34 & 0xFFFFFFFE;
      if (!(_DWORD)v15)
        goto LABEL_76;
      LOWORD(v45[0]) = 0;
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v13 = (id)qword_1000DFFD0;
      if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        goto LABEL_78;
      v46 = 0;
      v27 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v27;
      else
        v15 = v27 & 0xFFFFFFFE;
      if (!(_DWORD)v15)
        goto LABEL_76;
      LOWORD(v45[0]) = 0;
    }
LABEL_74:
    v35 = (const char *)_os_log_send_and_compose_impl(v15, &v46, 0, 0);
    v36 = (char *)v35;
    if (v35)
      sub_100007780(v35);
    goto LABEL_77;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v16 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v46 = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      LOWORD(v45[0]) = 0;
      v19 = (const char *)_os_log_send_and_compose_impl(v18, &v46, 0, 0);
      v20 = (char *)v19;
      if (v19)
        sub_100007780(v19);
    }
    else
    {
      v20 = 0;
    }
    free(v20);
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
LABEL_80:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_10000CDC8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  uint64_t v28;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (!v2)
    goto LABEL_35;
  v3 = sub_100007ED8(qword_1000E0318);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v6 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v28 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD *)(a1 + 48);
      LODWORD(v25) = 67109378;
      HIDWORD(v25) = v9;
      v26 = 2114;
      v27 = v5;
      LODWORD(v24) = 18;
      v23 = &v25;
      v10 = (const char *)_os_log_send_and_compose_impl(v8, &v28, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mobile.keybagd.UserManager.bubblepop")))
  {
    if (!objc_msgSend(*(id *)(a1 + 32), "switchState"))
    {
      v13 = 0;
      goto LABEL_18;
    }
    v12 = 16;
  }
  else
  {
    v12 = 1;
  }
  v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v12, 0, v23, v24));
LABEL_18:
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  if (!v13)
  {
    objc_msgSend(v2, "setBubblePopstakeholderIsRegistered:", 1);
    objc_msgSend(v2, "setSwitchStakeHolderKind:", 3);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v17 = *(_DWORD *)(a1 + 48);
        LODWORD(v28) = 67109120;
        HIDWORD(v28) = v17;
        v18 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }

    v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "bubbleStakeHolder"));
    v21 = *(void **)(a1 + 32);
    if (v20)
    {
      v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "bubbleStakeHolder"));
      objc_msgSend(v22, "bubbleShouldPop");

    }
    else
    {
      objc_msgSend(v21, "_broadcastBubbleDidPop");
    }
  }

LABEL_35:
}

void sub_10000D198(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  int v14;
  __int16 v15;
  void *v16;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  v3 = sub_100007ED8(qword_1000E0318);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 48), 0));

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v6 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v12 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(_DWORD *)(a1 + 48);
      v13 = 67109378;
      v14 = v9;
      v15 = 2114;
      v16 = v5;
      v10 = (const char *)_os_log_send_and_compose_impl(v8, &v12, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (v2)
  {
    objc_msgSend(v2, "setBubblePopstakeholderIsRegistered:", 0);
    sub_10001F560();
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);

}

void sub_10000D3EC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  CFArrayRef v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  _QWORD v16[2];
  uint64_t v17;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  objc_msgSend(v2, "setBubbleStakeHolder:", 1);
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 52);
      LODWORD(v17) = 67109120;
      HIDWORD(v17) = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v16, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = sub_100034CB4(*(_DWORD *)(a1 + 52));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v11 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    v17 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      LODWORD(v16[0]) = 138412290;
      *(_QWORD *)((char *)v16 + 4) = v10;
      v14 = (const char *)_os_log_send_and_compose_impl(v13, &v17, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }

  (*(void (**)(_QWORD, void *))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v10);
}

void sub_10000D6DC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  objc_msgSend(v2, "setBubbleStakeHolder:", 1);
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v8, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  sub_1000391E4(*(_DWORD *)(a1 + 52), *(const __CFString **)(a1 + 40));
}

void sub_10000D868(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD v11[2];

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 48);
      v11[0] = 67109120;
      v11[1] = v5;
      LODWORD(v9) = 8;
      v8 = v11;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v10, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  sub_1000306FC(*(unsigned int *)(a1 + 48), 1);
  if (*(_QWORD *)(a1 + 40) == 1)
    sub_100021344(*(_DWORD *)(a1 + 48));
  objc_msgSend(*(id *)(a1 + 32), "_broadcastBubbleDidPop", v8, v9);
  sub_10001F560();
}

void sub_10000D9D8(id a1, RDClient *a2, BOOL *a3)
{
  RDClient *v3;

  v3 = a2;
  if (-[RDClient bubblePopstakeholderIsRegistered](v3, "bubblePopstakeholderIsRegistered"))
    -[RDClient bubbleDidPop](v3, "bubbleDidPop");

}

void sub_10000E61C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  _BYTE v19[12];
  uint64_t v20;

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v2 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    LODWORD(v3) = sub_100007750(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      *(_DWORD *)v19 = 134217984;
      *(_QWORD *)&v19[4] = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "logoutTimer"));
      v6 = (char *)_os_log_send_and_compose_impl(v3, &v20, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logoutTimer"));
  dispatch_source_cancel(v7);

  objc_msgSend(*(id *)(a1 + 32), "setLogoutTimer:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "switchState") == 1
    && objc_msgSend(*(id *)(a1 + 32), "switchState") != 2)
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v19 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        LOWORD(v20) = 0;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v19, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    objc_msgSend(*(id *)(a1 + 32), "_reallySwitchUser:", 0);
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v8 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v19 = 0;
      LODWORD(v9) = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v9 = v9;
      else
        v9 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = *(void **)(a1 + 32);
        v11 = v8;
        v12 = objc_msgSend(v10, "switchState");
        LODWORD(v20) = 67109120;
        HIDWORD(v20) = v12;
        v13 = (char *)_os_log_send_and_compose_impl(v9, v19, 0, 0);

        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

  }
}

void sub_10000E99C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[5];

  v3 = a2;
  if (objc_msgSend(v3, "stakeholderIsRegistered"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10000EA14;
    v5[3] = &unk_1000D0F50;
    v4 = *(_QWORD *)(a1 + 32);
    v5[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "willSwitchToUser:completionHandler:", v4, v5);
  }

}

void sub_10000EA14(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000EA78;
  block[3] = &unk_1000D0F50;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_1000E0320, block);
}

id sub_10000EA78(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v8;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v8, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_checkIfWeShouldSwitchUser:", 0);
}

void sub_10000F31C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  _BYTE v20[24];

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v2 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0;
    LODWORD(v3) = sub_100007750(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "logoutTimer"));
      *(_DWORD *)v20 = 134217984;
      *(_QWORD *)&v20[4] = v6;
      v7 = (char *)_os_log_send_and_compose_impl(v3, &v19, 0, 0);

      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "logoutTimer"));
  dispatch_source_cancel(v8);

  objc_msgSend(*(id *)(a1 + 32), "setLogoutTimer:", 0);
  if (objc_msgSend(*(id *)(a1 + 32), "switchState") == 1)
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v9 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v20 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v19) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, v20, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    objc_msgSend(*(id *)(a1 + 32), "_reallySwitchUser:", 1);
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v20 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        LOWORD(v19) = 0;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v20, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
}

void sub_10000F65C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  _QWORD v5[5];

  v3 = a2;
  if (objc_msgSend(v3, "stakeholderIsRegistered"))
  {
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10000F6D4;
    v5[3] = &unk_1000D0F50;
    v4 = *(_QWORD *)(a1 + 32);
    v5[4] = *(_QWORD *)(a1 + 40);
    objc_msgSend(v3, "willSwitchToUser:completionHandler:", v4, v5);
  }

}

void sub_10000F6D4(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10000F738;
  block[3] = &unk_1000D0F50;
  block[4] = *(_QWORD *)(a1 + 32);
  dispatch_async((dispatch_queue_t)qword_1000E0320, block);
}

id sub_10000F738(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v8;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v8, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  return objc_msgSend(*(id *)(a1 + 32), "_checkIfWeShouldSwitchUser:", 1);
}

void sub_10000FBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10000FBF4(uint64_t a1, void *a2, _BYTE *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  NSObject *v17;
  char *v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  __int16 v22;
  unsigned int v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  unsigned int v27;
  __int16 v28;
  void *v29;

  v5 = a2;
  v6 = sub_100007ED8(qword_1000E0318);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "pathForPID:error:", objc_msgSend(v5, "pid"), 0));

  if (objc_msgSend(v5, "stakeholderIsRegistered")
    && ((objc_msgSend(v5, "hasUserSwitchTasks") & 1) != 0
     || (objc_msgSend(v5, "wasToldWillSwitchUser") & 1) == 0))
  {
    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v14 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v15 = sub_100007750(0);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v17 = v14;
        v20 = 67110146;
        v21 = objc_msgSend(v5, "stakeholderIsRegistered");
        v22 = 1024;
        v23 = objc_msgSend(v5, "wasToldWillSwitchUser");
        v24 = 1024;
        v25 = objc_msgSend(v5, "hasUserSwitchTasks");
        v26 = 1024;
        v27 = objc_msgSend(v5, "pid");
        v28 = 2114;
        v29 = v8;
        v18 = (char *)_os_log_send_and_compose_impl(v16, &v19, 0, 0);

        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    *a3 = 1;
  }
  else
  {
    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v9 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v10 = sub_100007750(0);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        v12 = v9;
        v20 = 67110146;
        v21 = objc_msgSend(v5, "stakeholderIsRegistered");
        v22 = 1024;
        v23 = objc_msgSend(v5, "wasToldWillSwitchUser");
        v24 = 1024;
        v25 = objc_msgSend(v5, "hasUserSwitchTasks");
        v26 = 1024;
        v27 = objc_msgSend(v5, "pid");
        v28 = 2114;
        v29 = v8;
        v13 = (char *)_os_log_send_and_compose_impl(v11, &v19, 0, 0);

        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

  }
}

void sub_100010D48(id a1, RDClient *a2, BOOL *a3)
{
  RDClient *v4;
  void *v5;
  void *v6;
  id v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  char *v18;
  __CFString *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  unsigned int v26;
  char *v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  _BYTE v32[18];

  v4 = a2;
  v5 = (void *)objc_claimAutoreleasedReturnValue(-[RDClient machServiceName](v4, "machServiceName"));

  if (v5)
  {
    v6 = (void *)objc_claimAutoreleasedReturnValue(-[RDClient userSyncTasks](v4, "userSyncTasks"));
    v7 = objc_msgSend(v6, "count");

    if (v7)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v8 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v30 = 0;
        LODWORD(v9) = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v9 = v9;
        else
          v9 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          v10 = v8;
          v11 = (void *)objc_claimAutoreleasedReturnValue(-[RDClient machServiceName](v4, "machServiceName"));
          v12 = (void *)objc_claimAutoreleasedReturnValue(-[RDClient userSyncTasks](v4, "userSyncTasks"));
          v31 = 138412546;
          *(_QWORD *)v32 = v11;
          *(_WORD *)&v32[8] = 2112;
          *(_QWORD *)&v32[10] = v12;
          LODWORD(v29) = 22;
          v28 = &v31;
          v13 = (char *)_os_log_send_and_compose_impl(v9, &v30, 0, 0);

          if (v13)
            sub_100007780(v13);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

      v19 = (__CFString *)objc_claimAutoreleasedReturnValue(-[RDClient machServiceName](v4, "machServiceName"));
      sub_10003819C(v19);
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v14 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v30 = 0;
        LODWORD(v15) = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          v15 = v15;
        else
          v15 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          v16 = v14;
          v17 = (void *)objc_claimAutoreleasedReturnValue(-[RDClient machServiceName](v4, "machServiceName"));
          v31 = 138412290;
          *(_QWORD *)v32 = v17;
          LODWORD(v29) = 12;
          v28 = &v31;
          v18 = (char *)_os_log_send_and_compose_impl(v15, &v30, 0, 0);

          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }

      v19 = (__CFString *)objc_claimAutoreleasedReturnValue(-[RDClient machServiceName](v4, "machServiceName"));
      sub_100038C28(v19);
    }

    sub_10002DFC4();
  }
  if (-[RDClient stakeholderIsRegistered](v4, "stakeholderIsRegistered", v28, v29)
    && -[RDClient hasUserSwitchTasks](v4, "hasUserSwitchTasks")
    && -[RDClient wasToldWillSwitchUser](v4, "wasToldWillSwitchUser"))
  {
    v20 = sub_100007ED8(qword_1000E0318);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v21, "pathForPID:error:", -[RDClient pid](v4, "pid"), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v23 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v30 = 0;
      LODWORD(v24) = sub_100007750(0);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v24 = v24;
      else
        v24 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        v25 = v23;
        v26 = -[RDClient pid](v4, "pid");
        v31 = 67109378;
        *(_DWORD *)v32 = v26;
        *(_WORD *)&v32[4] = 2114;
        *(_QWORD *)&v32[6] = v22;
        v27 = (char *)_os_log_send_and_compose_impl(v24, &v30, 0, 0);

        if (v27)
          sub_100007780(v27);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

    *a3 = 0;
  }

}

void sub_1000111A0(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  void *v12;
  NSObject *v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  dispatch_source_t v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  char *v30;
  NSObject *v31;
  dispatch_time_t v32;
  NSObject *v33;
  NSObject *v34;
  _QWORD handler[5];
  _QWORD v36[2];
  _BYTE v37[24];

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v37 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LOWORD(v36[0]) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, v37, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v7 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v37 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LOWORD(v36[0]) = 0;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, v37, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  objc_msgSend(*(id *)(a1 + 32), "setSwitchState:", 0);
  dword_1000E02C8 = 1;
  sub_10001DE7C();
  objc_msgSend(*(id *)(a1 + 32), "_broadcastDeviceLoginSessionStateDidUpdate");
  v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastLogoutTimer"));

  if (v12)
  {
    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v13 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v36[0] = 0;
      LODWORD(v14) = sub_100007750(0);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v14 = v14;
      else
        v14 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        v15 = *(void **)(a1 + 32);
        v16 = v13;
        v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "fastLogoutTimer"));
        *(_DWORD *)v37 = 134217984;
        *(_QWORD *)&v37[4] = v17;
        v18 = (char *)_os_log_send_and_compose_impl(v14, v36, 0, 0);

        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v19 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v37 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        LOWORD(v36[0]) = 0;
        v22 = (const char *)_os_log_send_and_compose_impl(v21, v37, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
      }
      else
      {
        v23 = 0;
      }
      free(v23);
    }

    v24 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000E0320);
    objc_msgSend(*(id *)(a1 + 32), "setFastLogoutTimer:", v24);

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v25 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v36[0] = 0;
      LODWORD(v26) = sub_100007750(0);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v26 = v26;
      else
        v26 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        v27 = *(void **)(a1 + 32);
        v28 = v25;
        v29 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v27, "fastLogoutTimer"));
        *(_DWORD *)v37 = 134217984;
        *(_QWORD *)&v37[4] = v29;
        v30 = (char *)_os_log_send_and_compose_impl(v26, v36, 0, 0);

        if (v30)
          sub_100007780(v30);
      }
      else
      {
        v30 = 0;
      }
      free(v30);
    }

    v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastLogoutTimer"));
    v32 = dispatch_time(0, 300000000000);
    dispatch_source_set_timer(v31, v32, 0xFFFFFFFFFFFFFFFFLL, 0);

    v33 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastLogoutTimer"));
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100011784;
    handler[3] = &unk_1000D0F50;
    handler[4] = *(_QWORD *)(a1 + 32);
    dispatch_source_set_event_handler(v33, handler);

    v34 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastLogoutTimer"));
    dispatch_activate(v34);

  }
}

void sub_100011784(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int v21;
  _BYTE v22[12];
  uint64_t v23;

  if (qword_1000DFFE8 != -1)
    dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
  v2 = (id)qword_1000DFFE0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 0;
    LODWORD(v3) = sub_100007750(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      *(_DWORD *)v22 = 134217984;
      *(_QWORD *)&v22[4] = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "fastLogoutTimer"));
      v6 = (char *)_os_log_send_and_compose_impl(v3, &v23, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "fastLogoutTimer"));
  dispatch_source_cancel(v7);

  objc_msgSend(*(id *)(a1 + 32), "setFastLogoutTimer:", 0);
  if (!objc_msgSend(*(id *)(a1 + 32), "switchState"))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v22 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        LOWORD(v23) = 0;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v22, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    if (sub_1000328D8() == 1)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v8 = (id)qword_1000DFFD0;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_QWORD *)v22 = 0;
      v19 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v20 = v19;
      else
        v20 = v19 & 0xFFFFFFFE;
      if (!(_DWORD)v20)
        goto LABEL_52;
      LOWORD(v23) = 0;
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v8 = (id)qword_1000DFFD0;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_QWORD *)v22 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v20 = v21;
      else
        v20 = v21 & 0xFFFFFFFE;
      if (!(_DWORD)v20)
        goto LABEL_52;
      LOWORD(v23) = 0;
    }
    v13 = (void *)_os_log_send_and_compose_impl(v20, v22, 0, 0);
    if (!v13)
    {
LABEL_53:
      free(v13);
      goto LABEL_54;
    }
LABEL_51:
    sub_100007780((const char *)v13);
    goto LABEL_53;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v8 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v22 = 0;
    LODWORD(v9) = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v9 = v9;
    else
      v9 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      v10 = *(void **)(a1 + 32);
      v11 = v8;
      v12 = objc_msgSend(v10, "switchState");
      LODWORD(v23) = 67109120;
      HIDWORD(v23) = v12;
      v13 = (void *)_os_log_send_and_compose_impl(v9, v22, 0, 0);

      if (!v13)
        goto LABEL_53;
      goto LABEL_51;
    }
LABEL_52:
    v13 = 0;
    goto LABEL_53;
  }
LABEL_54:

}

uint64_t sub_100011C1C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  const __CFDictionary *v7;
  const void *Value;
  const __CFData *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v16;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v16, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = *(const __CFDictionary **)(a1 + 32);
  if (CFDictionaryContainsKey(v7, CFSTR("UserSwitchTaskOpqueData")))
  {
    Value = CFDictionaryGetValue(v7, CFSTR("UserSwitchTaskOpqueData"));
    v9 = (const __CFData *)CFRetain(Value);
    CFDictionaryRemoveValue(v7, CFSTR("UserSwitchTaskOpqueData"));
  }
  else
  {
    v9 = 0;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v10 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v13 = (const char *)_os_log_send_and_compose_impl(v12, &v16, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  return sub_1000329B8(v7, v9);
}

void sub_100011F04(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  __int16 v23;
  void *v24;
  __int16 v25;
  uint64_t v26;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  if (v2)
  {
    v3 = sub_100007ED8(qword_1000E0318);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 56), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v6 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(_DWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 40);
        v21 = 67109634;
        v22 = v9;
        v23 = 2114;
        v24 = v5;
        v25 = 2114;
        v26 = v10;
        v11 = (const char *)_os_log_send_and_compose_impl(v8, &v20, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    objc_msgSend(v2, "addUserSwitchTask:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "_broadcastUserSwitchTaskListDidUpdate");
    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v13 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v14 = sub_100007750(0);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v16 = *(_DWORD *)(a1 + 56);
        v21 = 67109378;
        v22 = v16;
        v23 = 2114;
        v24 = v5;
        v17 = (const char *)_os_log_send_and_compose_impl(v15, &v20, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
  v19 = *(_QWORD *)(a1 + 48);
  if (v19)
    (*(void (**)(uint64_t, _QWORD))(v19 + 16))(v19, 0);

}

void sub_100012278(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  uint64_t v32;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  if (v2)
  {
    v3 = sub_100007ED8(qword_1000E0318);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 56), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v6 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v27[0] = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(_DWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 40);
        LODWORD(v28) = 67109634;
        HIDWORD(v28) = v9;
        v29 = 2114;
        v30 = v5;
        v31 = 2112;
        v32 = v10;
        LODWORD(v26) = 28;
        v25 = &v28;
        v11 = (const char *)_os_log_send_and_compose_impl(v8, v27, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    if (objc_msgSend(v2, "removeUserSwitchTask:", *(_QWORD *)(a1 + 40)))
    {
      objc_msgSend(*(id *)(a1 + 32), "_broadcastUserSwitchTaskListDidUpdate");
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v13 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v28 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          LOWORD(v27[0]) = 0;
          LODWORD(v26) = 2;
          v25 = v27;
          v16 = (const char *)_os_log_send_and_compose_impl(v15, &v28, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      objc_msgSend(*(id *)(a1 + 32), "_checkIfWeShouldSwitchUser:", dword_1000E02C8 == 3, v25, v26, v27[0]);
      if (qword_1000DFFE8 != -1)
        dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
      v18 = (id)qword_1000DFFE0;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v27[0] = 0;
        v19 = sub_100007750(0);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if ((_DWORD)v20)
        {
          v21 = *(_DWORD *)(a1 + 56);
          LODWORD(v28) = 67109378;
          HIDWORD(v28) = v21;
          v29 = 2114;
          v30 = v5;
          v22 = (const char *)_os_log_send_and_compose_impl(v20, v27, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }

    }
  }
  v24 = *(_QWORD *)(a1 + 48);
  if (v24)
    (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, 0);

}

void sub_100012634(id a1, RDClient *a2, BOOL *a3)
{
  RDClient *v3;

  v3 = a2;
  if (-[RDClient stakeholderIsRegistered](v3, "stakeholderIsRegistered")
    && -[RDClient criticalStakeHolder](v3, "criticalStakeHolder"))
  {
    -[RDClient userSwitchTaskListDidUpdate](v3, "userSwitchTaskListDidUpdate");
  }

}

void sub_100012680(id a1, RDClient *a2, BOOL *a3)
{
  RDClient *v3;

  v3 = a2;
  if (-[RDClient stakeholderIsRegistered](v3, "stakeholderIsRegistered")
    && -[RDClient criticalStakeHolder](v3, "criticalStakeHolder"))
  {
    -[RDClient deviceLoginSessionStateDidUpdate](v3, "deviceLoginSessionStateDidUpdate");
  }

}

void sub_100012744(uint64_t a1)
{
  NSMutableArray *v2;
  void *v3;
  NSMutableArray *v4;
  _QWORD v5[4];
  NSMutableArray *v6;

  v2 = objc_opt_new(NSMutableArray);
  v3 = *(void **)(a1 + 32);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000127E0;
  v5[3] = &unk_1000D10B8;
  v6 = v2;
  v4 = v2;
  objc_msgSend(v3, "_enumerateClientsWithBlock:", v5);
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();

}

void sub_1000127E0(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userSwitchTasks"));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_1000128A4(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userSyncTasks"));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_100012968(uint64_t a1, void *a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 32);
  v3 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "userSwitchTasks"));
  objc_msgSend(v2, "addObjectsFromArray:", v3);

}

void sub_100012A74(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  void *v15;
  id v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  __CFString *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  void *v27;
  __int16 v28;
  uint64_t v29;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v3 = v2;
  if (v2)
  {
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "machServiceName"));

    if (v4)
    {
      v5 = sub_100007ED8(qword_1000E0318);
      v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
      v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "pathForPID:error:", *(unsigned int *)(a1 + 56), 0));

      if (qword_1000DFFE8 != -1)
        dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
      v8 = (id)qword_1000DFFE0;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v24 = 0;
        v9 = sub_100007750(0);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          v11 = *(_DWORD *)(a1 + 56);
          v12 = *(_QWORD *)(a1 + 40);
          LODWORD(v25) = 67109634;
          HIDWORD(v25) = v11;
          v26 = 2114;
          v27 = v7;
          v28 = 2114;
          v29 = v12;
          v13 = (const char *)_os_log_send_and_compose_impl(v10, &v24, 0, 0);
          v14 = (char *)v13;
          if (v13)
            sub_100007780(v13);
        }
        else
        {
          v14 = 0;
        }
        free(v14);
      }

      objc_msgSend(v3, "addUserSyncTask:", *(_QWORD *)(a1 + 40));
      v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "userSyncTasks"));
      v16 = objc_msgSend(v15, "count");

      if (v16 == (id)1)
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v17 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v25 = 0;
          v18 = sub_100007750(1);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            v19 = v18;
          else
            v19 = v18 & 0xFFFFFFFE;
          if ((_DWORD)v19)
          {
            LOWORD(v24) = 0;
            v20 = (const char *)_os_log_send_and_compose_impl(v19, &v25, 0, 0);
            v21 = (char *)v20;
            if (v20)
              sub_100007780(v20);
          }
          else
          {
            v21 = 0;
          }
          free(v21);
        }

        v22 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "machServiceName"));
        sub_10003819C(v22);

      }
    }
  }
  v23 = *(_QWORD *)(a1 + 48);
  if (v23)
    (*(void (**)(uint64_t, _QWORD))(v23 + 16))(v23, 0);

}

void sub_100012E18(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  void *v13;
  id v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  __CFString *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;
  void *v25;
  __int16 v26;
  uint64_t v27;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  if (v2)
  {
    v3 = sub_100007ED8(qword_1000E0318);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "pathForPID:error:", *(unsigned int *)(a1 + 56), 0));

    if (qword_1000DFFE8 != -1)
      dispatch_once(&qword_1000DFFE8, &stru_1000D1250);
    v6 = (id)qword_1000DFFE0;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v22 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(_DWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 40);
        LODWORD(v23) = 67109634;
        HIDWORD(v23) = v9;
        v24 = 2114;
        v25 = v5;
        v26 = 2114;
        v27 = v10;
        v11 = (const char *)_os_log_send_and_compose_impl(v8, &v22, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    objc_msgSend(v2, "removeUserSyncTask:", *(_QWORD *)(a1 + 40));
    v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "userSyncTasks"));
    v14 = objc_msgSend(v13, "count");

    if (!v14)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v15 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        v16 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LOWORD(v22) = 0;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, &v23, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

      v20 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "machServiceName"));
      sub_100038C28(v20);

    }
  }
  v21 = *(_QWORD *)(a1 + 48);
  if (v21)
    (*(void (**)(uint64_t, _QWORD))(v21 + 16))(v21, 0);

}

void sub_100013168(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 45, 0));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    v2 = v4;
  }

}

void sub_10001324C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 45, 0));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v4 = v2;
    (*(void (**)(void))(v3 + 16))();
    v2 = v4;
  }

}

void sub_100013518(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  void *v8;
  void *v9;
  unsigned __int8 v10;
  id v11;
  __n128 *v12;
  __n128 *v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  unsigned int v44;
  uint64_t v45;
  int v46;
  const char *v47;
  char *v48;
  void *v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  const char *v57;
  char *v58;
  __CFString *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  NSObject *v63;
  unsigned int v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  NSObject *v68;
  unsigned int v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  unsigned int *v76;
  uint64_t v77;
  _QWORD v78[6];
  uint64_t v79;
  unsigned int v80;
  int v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[24];
  uint64_t (*v87)(uint64_t, uint64_t);
  void (*v88)(uint64_t);
  id v89;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v86 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 72);
      LODWORD(v82) = 67109120;
      HIDWORD(v82) = v5;
      LODWORD(v77) = 8;
      v76 = (unsigned int *)&v82;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, v86, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 72)));
  v9 = v8;
  if (v8)
    v10 = objc_msgSend(v8, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.create"));
  else
    v10 = objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.create"));
  if ((v10 & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 40))
    {
      if (*(_QWORD *)(a1 + 64) < 2uLL)
      {
        v11 = *(id *)(a1 + 48);
        if (*(_QWORD *)(a1 + 64) != 1)
        {
LABEL_103:
          LODWORD(v79) = 0;
          v80 = -1;
          v51 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v9, &v80, *(unsigned int *)(a1 + 72), v76, v77);
          if (qword_1000DFFD8 != -1)
            dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
          v52 = (id)qword_1000DFFD0;
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
          {
            v82 = 0;
            v53 = sub_100007750(1);
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
              v54 = v53;
            else
              v54 = v53 & 0xFFFFFFFE;
            if ((_DWORD)v54)
            {
              v55 = *(_QWORD *)(a1 + 40);
              v56 = *(_DWORD *)(a1 + 72);
              *(_DWORD *)v86 = 138412802;
              *(_QWORD *)&v86[4] = v55;
              *(_WORD *)&v86[12] = 1024;
              *(_DWORD *)&v86[14] = v56;
              *(_WORD *)&v86[18] = 1024;
              *(_DWORD *)&v86[20] = (_DWORD)v51;
              v57 = (const char *)_os_log_send_and_compose_impl(v54, &v82, 0, 0);
              v58 = (char *)v57;
              if (v57)
                sub_100007780(v57);
            }
            else
            {
              v58 = 0;
            }
            free(v58);
          }

          v59 = sub_1000053A8((uint64_t)v51, v80, *(unsigned int *)(a1 + 76));
          v60 = (void *)objc_claimAutoreleasedReturnValue(v59);
          v61 = sub_100049E6C(*(_QWORD *)(a1 + 40), v11, v60, 1, (unsigned int *)&v79);
          v62 = (void *)v61;
          if (v61 || !(_DWORD)v79)
          {
            if (v61)
            {
              if (qword_1000DFFD8 != -1)
                dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
              v68 = (id)qword_1000DFFD0;
              if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
              {
                v82 = 0;
                v69 = sub_100007750(1);
                if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
                  v70 = v69;
                else
                  v70 = v69 & 0xFFFFFFFE;
                if ((_DWORD)v70)
                {
                  *(_DWORD *)v86 = 138412290;
                  *(_QWORD *)&v86[4] = v62;
                  v71 = (const char *)_os_log_send_and_compose_impl(v70, &v82, 0, 0);
                  v72 = (char *)v71;
                  if (v71)
                    sub_100007780(v71);
                }
                else
                {
                  v72 = 0;
                }
                free(v72);
              }

              objc_msgSend(*(id *)(a1 + 32), "_broadcastPersonaUpdates:withAuid:", v60, v80);
            }
            v75 = *(_QWORD *)(a1 + 56);
            if (v75)
              (*(void (**)(uint64_t, void *, _QWORD))(v75 + 16))(v75, v62, 0);
          }
          else
          {
            if (qword_1000DFFD8 != -1)
              dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
            v63 = (id)qword_1000DFFD0;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v86 = 0;
              v64 = sub_100007750(1);
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
                v65 = v64;
              else
                v65 = v64 & 0xFFFFFFFE;
              if ((_DWORD)v65)
              {
                LOWORD(v82) = 0;
                v66 = (const char *)_os_log_send_and_compose_impl(v65, v86, 0, 0);
                v67 = (char *)v66;
                if (v66)
                  sub_100007780(v66);
              }
              else
              {
                v67 = 0;
              }
              free(v67);
            }

            v73 = *(_QWORD *)(a1 + 56);
            if (v73)
            {
              v74 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, (int)v79, 0));
              (*(void (**)(uint64_t, _QWORD, void *))(v73 + 16))(v73, 0, v74);

            }
          }

          goto LABEL_145;
        }
        *(_QWORD *)v86 = 0;
        *(_QWORD *)&v86[8] = v86;
        *(_QWORD *)&v86[16] = 0x3032000000;
        v87 = sub_10001420C;
        v88 = sub_10001421C;
        v89 = 0;
        v82 = 0;
        v83 = &v82;
        v84 = 0x2020000000;
        v85 = 0;
        v12 = (__n128 *)ACMContextCreateWithExternalForm(objc_msgSend(objc_retainAutorelease(*(id *)(a1 + 48)), "bytes"), (uint64_t)objc_msgSend(*(id *)(a1 + 48), "length"));
        v13 = v12;
        if (v12)
        {
          v78[0] = _NSConcreteStackBlock;
          v78[1] = 3221225472;
          v78[2] = sub_100014224;
          v78[3] = &unk_1000D1130;
          v78[4] = &v82;
          v78[5] = v86;
          ACMContextCredentialGetProperty(v12, 0xDu, 0x2BDu, (uint64_t)v78);
          v14 = ACMContextDelete(v13, 0);
          if (v14)
          {
            if (qword_1000DFFD8 != -1)
              dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
            v15 = (id)qword_1000DFFD0;
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              v79 = 0;
              v16 = sub_100007750(1);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                v17 = v16;
              else
                v17 = v16 & 0xFFFFFFFE;
              if ((_DWORD)v17)
              {
                v80 = 67109120;
                v81 = v14;
                LODWORD(v77) = 8;
                v76 = &v80;
                v18 = (const char *)_os_log_send_and_compose_impl(v17, &v79, 0, 0);
                v19 = (char *)v18;
                if (v18)
                  sub_100007780(v18);
              }
              else
              {
                v19 = 0;
              }
              free(v19);
            }

          }
          if (!*((_DWORD *)v83 + 6))
          {
            v49 = v11;
            LOBYTE(v50) = 1;
            v11 = *(id *)(*(_QWORD *)&v86[8] + 40);
LABEL_101:

            goto LABEL_102;
          }
          if (qword_1000DFFD8 != -1)
            dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
          v43 = (id)qword_1000DFFD0;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          {
            v79 = 0;
            v44 = sub_100007750(1);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              v45 = v44;
            else
              v45 = v44 & 0xFFFFFFFE;
            if ((_DWORD)v45)
            {
              v46 = *((_DWORD *)v83 + 6);
              v80 = 67109120;
              v81 = v46;
              LODWORD(v77) = 8;
              v76 = &v80;
              v47 = (const char *)_os_log_send_and_compose_impl(v45, &v79, 0, 0);
              v48 = (char *)v47;
              if (v47)
                sub_100007780(v47);
            }
            else
            {
              v48 = 0;
            }
            free(v48);
          }

          v50 = *(_QWORD *)(a1 + 56);
          if (v50)
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
            (*(void (**)(uint64_t, _QWORD, void *))(v50 + 16))(v50, 0, v49);
LABEL_100:
            LOBYTE(v50) = 0;
            goto LABEL_101;
          }
        }
        else
        {
          if (qword_1000DFFD8 != -1)
            dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
          v38 = (id)qword_1000DFFD0;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            v79 = 0;
            v39 = sub_100007750(1);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              v40 = v39;
            else
              v40 = v39 & 0xFFFFFFFE;
            if ((_DWORD)v40)
            {
              LOWORD(v80) = 0;
              LODWORD(v77) = 2;
              v76 = &v80;
              v41 = (const char *)_os_log_send_and_compose_impl(v40, &v79, 0, 0);
              v42 = (char *)v41;
              if (v41)
                sub_100007780(v41);
            }
            else
            {
              v42 = 0;
            }
            free(v42);
          }

          v50 = *(_QWORD *)(a1 + 56);
          if (v50)
          {
            v49 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
            (*(void (**)(uint64_t, _QWORD, void *))(v50 + 16))(v50, 0, v49);
            goto LABEL_100;
          }
        }
LABEL_102:
        _Block_object_dispose(&v82, 8);
        _Block_object_dispose(v86, 8);

        if ((v50 & 1) != 0)
          goto LABEL_103;
LABEL_145:

        goto LABEL_146;
      }
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v31 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v86 = 0;
        v32 = sub_100007750(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          v33 = v32;
        else
          v33 = v32 & 0xFFFFFFFE;
        if ((_DWORD)v33)
        {
          LOWORD(v82) = 0;
          v34 = (const char *)_os_log_send_and_compose_impl(v33, v86, 0, 0);
          v35 = (char *)v34;
          if (v34)
            sub_100007780(v34);
        }
        else
        {
          v35 = 0;
        }
        free(v35);
      }

      v37 = *(_QWORD *)(a1 + 56);
      if (v37)
      {
LABEL_64:
        v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
        (*(void (**)(uint64_t, _QWORD, id))(v37 + 16))(v37, 0, v11);
        goto LABEL_145;
      }
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v26 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v86 = 0;
        v27 = sub_100007750(1);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          v28 = v27;
        else
          v28 = v27 & 0xFFFFFFFE;
        if ((_DWORD)v28)
        {
          LOWORD(v82) = 0;
          v29 = (const char *)_os_log_send_and_compose_impl(v28, v86, 0, 0);
          v30 = (char *)v29;
          if (v29)
            sub_100007780(v29);
        }
        else
        {
          v30 = 0;
        }
        free(v30);
      }

      v37 = *(_QWORD *)(a1 + 56);
      if (v37)
        goto LABEL_64;
    }
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v20 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v86 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        v23 = *(_DWORD *)(a1 + 72);
        LODWORD(v82) = 67109120;
        HIDWORD(v82) = v23;
        v24 = (const char *)_os_log_send_and_compose_impl(v22, v86, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    v36 = *(_QWORD *)(a1 + 56);
    if (v36)
    {
      v11 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
      (*(void (**)(uint64_t, _QWORD, id))(v36 + 16))(v36, 0, v11);
      goto LABEL_145;
    }
  }
LABEL_146:

}

void sub_1000141C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001420C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10001421C(uint64_t a1)
{

}

void sub_100014224(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  if (!*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:"));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

void sub_1000144B0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  __CFString *v10;
  void *v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  NSErrorDomain v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v42 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v41 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      v43 = 67109120;
      v44 = v6;
      LODWORD(v40) = 8;
      v39 = &v43;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v41, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.delete")) & 1) != 0)
      goto LABEL_14;
LABEL_26:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v19 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        v22 = *(_DWORD *)(a1 + 56);
        v43 = 67109120;
        v44 = v22;
        LODWORD(v40) = 8;
        v39 = &v43;
        v23 = (const char *)_os_log_send_and_compose_impl(v21, &v41, 0, 0);
        v24 = (char *)v23;
        if (v23)
          sub_100007780(v23);
      }
      else
      {
        v24 = 0;
      }
      free(v24);
    }

    v35 = NSPOSIXErrorDomain;
    v36 = 1;
    goto LABEL_62;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.delete")) & 1) == 0)goto LABEL_26;
LABEL_14:
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v25 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v26 = sub_100007750(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        LOWORD(v43) = 0;
        LODWORD(v40) = 2;
        v39 = &v43;
        v28 = (const char *)_os_log_send_and_compose_impl(v27, &v41, 0, 0);
        v29 = (char *)v28;
        if (v28)
          sub_100007780(v28);
      }
      else
      {
        v29 = 0;
      }
      free(v29);
    }

    v35 = NSPOSIXErrorDomain;
    v36 = 22;
LABEL_62:
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v35, v36, 0, v39, v40, v41));
    goto LABEL_67;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v42, *(unsigned int *)(a1 + 56));
  v10 = sub_1000053A8((uint64_t)v9, v42, *(unsigned int *)(a1 + 60));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = sub_10004A020(*(const __CFDictionary **)(a1 + 40), v11);
  if (v12)
  {
    v13 = v12;
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v43 = 67109120;
        v44 = v13;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, &v41, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v13, 0));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_broadcastPersonaUpdates:withAuid:", v11, v42);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v30 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v31 = sub_100007750(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if ((_DWORD)v32)
      {
        LOWORD(v43) = 0;
        v33 = (const char *)_os_log_send_and_compose_impl(v32, &v41, 0, 0);
        v34 = (char *)v33;
        if (v33)
          sub_100007780(v33);
      }
      else
      {
        v34 = 0;
      }
      free(v34);
    }

    v37 = 0;
  }

LABEL_67:
  v38 = *(_QWORD *)(a1 + 48);
  if (v38)
    (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v37);

}

void sub_100014C88(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  __CFString *v10;
  void *v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  NSErrorDomain v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;
  int v43;
  int v44;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v42 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v41 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      v43 = 67109120;
      v44 = v6;
      LODWORD(v40) = 8;
      v39 = &v43;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v41, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.delete")) & 1) != 0)
      goto LABEL_14;
LABEL_26:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v19 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        v22 = *(_DWORD *)(a1 + 56);
        v43 = 67109120;
        v44 = v22;
        LODWORD(v40) = 8;
        v39 = &v43;
        v23 = (const char *)_os_log_send_and_compose_impl(v21, &v41, 0, 0);
        v24 = (char *)v23;
        if (v23)
          sub_100007780(v23);
      }
      else
      {
        v24 = 0;
      }
      free(v24);
    }

    v35 = NSPOSIXErrorDomain;
    v36 = 1;
    goto LABEL_62;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.delete")) & 1) == 0)goto LABEL_26;
LABEL_14:
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v25 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v26 = sub_100007750(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        LOWORD(v43) = 0;
        LODWORD(v40) = 2;
        v39 = &v43;
        v28 = (const char *)_os_log_send_and_compose_impl(v27, &v41, 0, 0);
        v29 = (char *)v28;
        if (v28)
          sub_100007780(v28);
      }
      else
      {
        v29 = 0;
      }
      free(v29);
    }

    v35 = NSPOSIXErrorDomain;
    v36 = 22;
LABEL_62:
    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v35, v36, 0, v39, v40, v41));
    goto LABEL_67;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v42, *(unsigned int *)(a1 + 56));
  v10 = sub_1000053A8((uint64_t)v9, v42, *(unsigned int *)(a1 + 60));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = sub_10004C56C(*(const __CFDictionary **)(a1 + 40), v11);
  if (v12)
  {
    v13 = v12;
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v14 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v43 = 67109120;
        v44 = v13;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, &v41, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    v37 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v13, 0));
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_broadcastPersonaUpdates:withAuid:", v11, v42);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v30 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v41 = 0;
      v31 = sub_100007750(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if ((_DWORD)v32)
      {
        LOWORD(v43) = 0;
        v33 = (const char *)_os_log_send_and_compose_impl(v32, &v41, 0, 0);
        v34 = (char *)v33;
        if (v33)
          sub_100007780(v33);
      }
      else
      {
        v34 = 0;
      }
      free(v34);
    }

    v37 = 0;
  }

LABEL_67:
  v38 = *(_QWORD *)(a1 + 48);
  if (v38)
    (*(void (**)(uint64_t, void *))(v38 + 16))(v38, v37);

}

void sub_1000152FC(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  char *v21;
  __CFString *v22;
  void *v23;
  id v24;
  void *v25;
  void *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  int v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v36 = -1;
  v37 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v38 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v43) = 67109120;
      HIDWORD(v43) = v6;
      LODWORD(v35) = 8;
      v34 = &v43;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v38, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)
    {
LABEL_14:
      v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v36, *(unsigned int *)(a1 + 48), v34, v35);
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v10 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v43 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD *)(a1 + 48);
          LODWORD(v38) = 67109376;
          HIDWORD(v38) = v13;
          v39 = 1024;
          v40 = (int)v9;
          v14 = (const char *)_os_log_send_and_compose_impl(v12, &v43, 0, 0);
          v15 = (char *)v14;
          if (v14)
            sub_100007780(v14);
        }
        else
        {
          v15 = 0;
        }
        free(v15);
      }

      v22 = sub_1000053A8((uint64_t)v9, v36, *(unsigned int *)(a1 + 52));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = sub_10004CAE0(v23, &v37);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      if (v25)
      {
        v26 = 0;
      }
      else
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v37, 0));
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v27 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v43 = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            v30 = *(_DWORD *)(a1 + 48);
            LODWORD(v38) = 67109632;
            HIDWORD(v38) = v30;
            v39 = 1024;
            v40 = (int)v9;
            v41 = 1024;
            v42 = v37;
            v31 = (const char *)_os_log_send_and_compose_impl(v29, &v43, 0, 0);
            v32 = (char *)v31;
            if (v31)
              sub_100007780(v31);
          }
          else
          {
            v32 = 0;
          }
          free(v32);
        }

      }
      goto LABEL_53;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v16 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v38 = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD *)(a1 + 48);
      LODWORD(v43) = 67109120;
      HIDWORD(v43) = v19;
      v20 = (const char *)_os_log_send_and_compose_impl(v18, &v38, 0, 0);
      v21 = (char *)v20;
      if (v20)
        sub_100007780(v20);
    }
    else
    {
      v21 = 0;
    }
    free(v21);
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  v25 = 0;
LABEL_53:
  v33 = *(_QWORD *)(a1 + 40);
  if (v33)
    (*(void (**)(uint64_t, void *, void *))(v33 + 16))(v33, v25, v26);

}

void sub_100015898(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  const char *v19;
  char *v20;
  id *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  int v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  int v35;
  uint64_t v36;

  v32 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v33 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v33, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (!v2)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)goto LABEL_14;
LABEL_24:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v15 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v33 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        v18 = *(_DWORD *)(a1 + 48);
        LODWORD(v36) = 67109120;
        HIDWORD(v36) = v18;
        v19 = (const char *)_os_log_send_and_compose_impl(v17, &v33, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

    v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
    goto LABEL_52;
  }
  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) == 0)
    goto LABEL_24;
LABEL_14:
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v9 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v33 = 0;
    v10 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v12 = *(_DWORD *)(a1 + 48);
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v12;
      v13 = (const char *)_os_log_send_and_compose_impl(v11, &v33, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  v21 = sub_10004CAF4(&v32);
  v22 = objc_claimAutoreleasedReturnValue(v21);
  if (v22)
  {
    v23 = (void *)v22;
    v24 = 0;
    goto LABEL_53;
  }
  v24 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v32, 0));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v25 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    v36 = 0;
    v26 = sub_100007750(1);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      v27 = v26;
    else
      v27 = v26 & 0xFFFFFFFE;
    if ((_DWORD)v27)
    {
      v28 = *(_DWORD *)(a1 + 48);
      LODWORD(v33) = 67109376;
      HIDWORD(v33) = v28;
      v34 = 1024;
      v35 = v32;
      v29 = (const char *)_os_log_send_and_compose_impl(v27, &v36, 0, 0);
      v30 = (char *)v29;
      if (v29)
        sub_100007780(v29);
    }
    else
    {
      v30 = 0;
    }
    free(v30);
  }

LABEL_52:
  v23 = 0;
LABEL_53:
  v31 = *(_QWORD *)(a1 + 40);
  if (v31)
    (*(void (**)(uint64_t, void *, void *))(v31 + 16))(v31, v23, v24);

}

void sub_100015DE0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v22 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      v23 = 67109120;
      v24 = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v22, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)
    {
LABEL_14:
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v9 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v22 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LOWORD(v23) = 0;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v22, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }
      v19 = 45;
      goto LABEL_39;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v9 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      v16 = *(_DWORD *)(a1 + 48);
      v23 = 67109120;
      v24 = v16;
      v17 = (const char *)_os_log_send_and_compose_impl(v15, &v22, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }
  v19 = 1;
LABEL_39:

  v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v19, 0));
  v21 = *(_QWORD *)(a1 + 40);
  if (v21)
    (*(void (**)(uint64_t, _QWORD, void *))(v21 + 16))(v21, 0, v20);

}

void sub_100016238(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  NSErrorDomain v28;
  uint64_t v29;
  __CFString *v30;
  void *v31;
  id v32;
  void *v33;
  NSObject *v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  int v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  _BYTE v50[12];
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  uint64_t v55;

  v49 = 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v48 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v50 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v55) = 67109120;
      HIDWORD(v55) = v6;
      LODWORD(v47) = 8;
      v46 = &v55;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v50, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) != 0)
      goto LABEL_14;
LABEL_25:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v17 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v50 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v55) = 67109120;
        HIDWORD(v55) = v20;
        LODWORD(v47) = 8;
        v46 = &v55;
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v50, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 1;
    goto LABEL_73;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetch")) & 1) == 0)goto LABEL_25;
LABEL_14:
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v23 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v50 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        LOWORD(v55) = 0;
        LODWORD(v47) = 2;
        v46 = &v55;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, v50, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 22;
LABEL_73:
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v46, v47));
    v33 = 0;
    goto LABEL_77;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v48, *(unsigned int *)(a1 + 56));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v10 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v55 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)v50 = 138412802;
      *(_QWORD *)&v50[4] = v13;
      v51 = 1024;
      v52 = v14;
      v53 = 1024;
      v54 = (int)v9;
      v15 = (const char *)_os_log_send_and_compose_impl(v12, &v55, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  v30 = sub_1000053A8((uint64_t)v9, v48, *(unsigned int *)(a1 + 60));
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v32 = sub_10004CB04(*(void **)(a1 + 40), v31, &v49);
  v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  if (v33)
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v55 = 0;
      v35 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v36)
      {
        *(_DWORD *)v50 = 138412290;
        *(_QWORD *)&v50[4] = v33;
        v37 = (const char *)_os_log_send_and_compose_impl(v36, &v55, 0, 0);
        v38 = (char *)v37;
        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v38 = 0;
      }
      free(v38);
    }
    v39 = 0;
  }
  else
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v49, 0));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v55 = 0;
      v40 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        v42 = *(_DWORD *)(a1 + 56);
        *(_DWORD *)v50 = 138412802;
        *(_QWORD *)&v50[4] = v39;
        v51 = 1024;
        v52 = v42;
        v53 = 1024;
        v54 = (int)v9;
        v43 = (const char *)_os_log_send_and_compose_impl(v41, &v55, 0, 0);
        v44 = (char *)v43;
        if (v43)
          sub_100007780(v43);
      }
      else
      {
        v44 = 0;
      }
      free(v44);
    }
  }

LABEL_77:
  v45 = *(_QWORD *)(a1 + 48);
  if (v45)
    (*(void (**)(uint64_t, void *, void *))(v45 + 16))(v45, v33, v39);

}

void sub_100016B60(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  NSErrorDomain v28;
  uint64_t v29;
  __CFString *v30;
  void *v31;
  int v32;
  void *v33;
  NSObject *v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  _BYTE v46[18];
  __int16 v47;
  int v48;
  uint64_t v49;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 64)));
  HIDWORD(v45) = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v46 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 64);
      LODWORD(v49) = 67109120;
      HIDWORD(v49) = v6;
      LODWORD(v45) = 8;
      v44 = &v49;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v46, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.setbundle")) & 1) != 0)
      goto LABEL_14;
LABEL_25:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v17 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v46 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        v20 = *(_DWORD *)(a1 + 64);
        LODWORD(v49) = 67109120;
        HIDWORD(v49) = v20;
        LODWORD(v45) = 8;
        v44 = &v49;
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v46, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 1;
    goto LABEL_72;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.setbundle")) & 1) == 0)goto LABEL_25;
LABEL_14:
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v23 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v46 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        LOWORD(v49) = 0;
        LODWORD(v45) = 2;
        v44 = &v49;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, v46, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 22;
LABEL_72:
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v44, v45, *(_QWORD *)v46));
    goto LABEL_77;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, (char *)&v45 + 4, *(unsigned int *)(a1 + 64));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v10 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v49 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v13 = *(_DWORD *)(a1 + 64);
      v14 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)v46 = 67109634;
      *(_DWORD *)&v46[4] = v13;
      *(_WORD *)&v46[8] = 2112;
      *(_QWORD *)&v46[10] = v14;
      v47 = 1024;
      v48 = (int)v9;
      v15 = (const char *)_os_log_send_and_compose_impl(v12, &v49, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  v30 = sub_1000053A8((uint64_t)v9, HIDWORD(v45), *(unsigned int *)(a1 + 68));
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v32 = sub_10004CB70(*(const __CFDictionary **)(a1 + 40), *(const __CFArray **)(a1 + 48), v31);
  if (v32)
  {
    v33 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v32, 0));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v49 = 0;
      v35 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v36)
      {
        *(_DWORD *)v46 = 138412290;
        *(_QWORD *)&v46[4] = v33;
        v37 = (const char *)_os_log_send_and_compose_impl(v36, &v49, 0, 0);
        v38 = (char *)v37;
        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v38 = 0;
      }
      free(v38);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "_broadcastPersonaUpdates:withAuid:", v31, HIDWORD(v45));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v46 = 0;
      v39 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v40 = v39;
      else
        v40 = v39 & 0xFFFFFFFE;
      if ((_DWORD)v40)
      {
        LOWORD(v49) = 0;
        v41 = (const char *)_os_log_send_and_compose_impl(v40, v46, 0, 0);
        v42 = (char *)v41;
        if (v41)
          sub_100007780(v41);
      }
      else
      {
        v42 = 0;
      }
      free(v42);
    }
    v33 = 0;
  }

LABEL_77:
  v43 = *(_QWORD *)(a1 + 56);
  if (v43)
    (*(void (**)(uint64_t, void *))(v43 + 16))(v43, v33);

}

void sub_1000172F8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  NSErrorDomain v28;
  uint64_t v29;
  __CFString *v30;
  void *v31;
  id v32;
  void *v33;
  NSObject *v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  _BYTE v49[12];
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  uint64_t v54;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v47 = -1;
  v48 = 2;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v49 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v54) = 67109120;
      HIDWORD(v54) = v6;
      LODWORD(v46) = 8;
      v45 = &v54;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v49, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetchbundle")) & 1) != 0)
      goto LABEL_14;
LABEL_25:
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v17 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v49 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v54) = 67109120;
        HIDWORD(v54) = v20;
        LODWORD(v46) = 8;
        v45 = &v54;
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v49, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 1;
    goto LABEL_73;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetchbundle")) & 1) == 0)goto LABEL_25;
LABEL_14:
  if (!*(_QWORD *)(a1 + 40))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v23 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v49 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        LOWORD(v54) = 0;
        LODWORD(v46) = 2;
        v45 = &v54;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, v49, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

    v28 = NSPOSIXErrorDomain;
    v29 = 22;
LABEL_73:
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v28, v29, 0, v45, v46));
    v33 = 0;
    goto LABEL_77;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v47, *(unsigned int *)(a1 + 56));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v10 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
  {
    v54 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)v49 = 138412802;
      *(_QWORD *)&v49[4] = v13;
      v50 = 1024;
      v51 = v14;
      v52 = 1024;
      v53 = (int)v9;
      v15 = (const char *)_os_log_send_and_compose_impl(v12, &v54, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  v30 = sub_1000053A8((uint64_t)v9, v47, *(unsigned int *)(a1 + 60));
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v32 = sub_10004D1F0(*(void **)(a1 + 40), v31, &v48);
  v33 = (void *)objc_claimAutoreleasedReturnValue(v32);
  if (v33)
  {
    v48 = 0;
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v54 = 0;
      v35 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v36)
      {
        *(_DWORD *)v49 = 138412290;
        *(_QWORD *)&v49[4] = v33;
        v37 = (const char *)_os_log_send_and_compose_impl(v36, &v54, 0, 0);
        v38 = (char *)v37;
        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v38 = 0;
      }
      free(v38);
    }
    v39 = 0;
  }
  else
  {
    v39 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v48, 0));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v34 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      v54 = 0;
      v40 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v49 = 138412290;
        *(_QWORD *)&v49[4] = v39;
        v42 = (const char *)_os_log_send_and_compose_impl(v41, &v54, 0, 0);
        v43 = (char *)v42;
        if (v42)
          sub_100007780(v42);
      }
      else
      {
        v43 = 0;
      }
      free(v43);
    }
  }

LABEL_77:
  v44 = *(_QWORD *)(a1 + 48);
  if (v44)
    (*(void (**)(uint64_t, void *, void *))(v44 + 16))(v44, v33, v39);

}

void sub_100017BE4(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  __CFString *v23;
  void *v24;
  int v25;
  void *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  _BYTE v39[18];
  __int16 v40;
  int v41;
  uint64_t v42;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  HIDWORD(v38) = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v39 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      LODWORD(v42) = 67109120;
      HIDWORD(v42) = v6;
      LODWORD(v38) = 8;
      v37 = &v42;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v39, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.setbundle")) & 1) != 0)
    {
LABEL_14:
      v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, (char *)&v38 + 4, *(unsigned int *)(a1 + 56), v37, v38);
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v10 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v42 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD *)(a1 + 56);
          v14 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v39 = 67109634;
          *(_DWORD *)&v39[4] = v13;
          *(_WORD *)&v39[8] = 2112;
          *(_QWORD *)&v39[10] = v14;
          v40 = 1024;
          v41 = (int)v9;
          v15 = (const char *)_os_log_send_and_compose_impl(v12, &v42, 0, 0);
          v16 = (char *)v15;
          if (v15)
            sub_100007780(v15);
        }
        else
        {
          v16 = 0;
        }
        free(v16);
      }

      v23 = sub_1000053A8((uint64_t)v9, HIDWORD(v38), *(unsigned int *)(a1 + 60));
      v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
      v25 = sub_10004D208(*(const __CFArray **)(a1 + 40), v24);
      if (v25)
      {
        v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v25, 0));
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v27 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v42 = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            *(_DWORD *)v39 = 138412290;
            *(_QWORD *)&v39[4] = v26;
            v30 = (const char *)_os_log_send_and_compose_impl(v29, &v42, 0, 0);
            v31 = (char *)v30;
            if (v30)
              sub_100007780(v30);
          }
          else
          {
            v31 = 0;
          }
          free(v31);
        }
      }
      else
      {
        objc_msgSend(*(id *)(a1 + 32), "_broadcastPersonaUpdates:withAuid:", v24, HIDWORD(v38));
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v27 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          *(_QWORD *)v39 = 0;
          v32 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            v33 = v32;
          else
            v33 = v32 & 0xFFFFFFFE;
          if ((_DWORD)v33)
          {
            LOWORD(v42) = 0;
            v34 = (const char *)_os_log_send_and_compose_impl(v33, v39, 0, 0);
            v35 = (char *)v34;
            if (v34)
              sub_100007780(v34);
          }
          else
          {
            v35 = 0;
          }
          free(v35);
        }
        v26 = 0;
      }

      goto LABEL_63;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.setbundle")) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v17 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v39 = 0;
    v18 = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v19)
    {
      v20 = *(_DWORD *)(a1 + 56);
      LODWORD(v42) = 67109120;
      HIDWORD(v42) = v20;
      v21 = (const char *)_os_log_send_and_compose_impl(v19, v39, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
LABEL_63:
  v36 = *(_QWORD *)(a1 + 48);
  if (v36)
    (*(void (**)(uint64_t, void *))(v36 + 16))(v36, v26);

}

void sub_10001826C(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  const char *v20;
  char *v21;
  __CFString *v22;
  void *v23;
  id v24;
  void *v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  void *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  _BYTE v42[14];
  uint64_t v43;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  v40 = 2;
  v41 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v42 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      LODWORD(v43) = 67109120;
      HIDWORD(v43) = v6;
      LODWORD(v39) = 8;
      v38 = &v43;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, v42, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (v2)
  {
    if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetchbundle")) & 1) != 0)
    {
LABEL_14:
      v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v41, *(unsigned int *)(a1 + 48), v38, v39);
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v10 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v43 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          v13 = *(_DWORD *)(a1 + 48);
          *(_DWORD *)v42 = 67109376;
          *(_DWORD *)&v42[4] = v13;
          *(_WORD *)&v42[8] = 1024;
          *(_DWORD *)&v42[10] = (_DWORD)v9;
          v14 = (const char *)_os_log_send_and_compose_impl(v12, &v43, 0, 0);
          v15 = (char *)v14;
          if (v14)
            sub_100007780(v14);
        }
        else
        {
          v15 = 0;
        }
        free(v15);
      }

      v22 = sub_1000053A8((uint64_t)v9, v41, *(unsigned int *)(a1 + 52));
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = sub_10004D854(v23, &v40);
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      if (v25)
      {
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v26 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          v43 = 0;
          v27 = sub_100007750(1);
          if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            v28 = v27;
          else
            v28 = v27 & 0xFFFFFFFE;
          if ((_DWORD)v28)
          {
            *(_DWORD *)v42 = 138412290;
            *(_QWORD *)&v42[4] = v25;
            v29 = (const char *)_os_log_send_and_compose_impl(v28, &v43, 0, 0);
            v30 = (char *)v29;
            if (v29)
              sub_100007780(v29);
          }
          else
          {
            v30 = 0;
          }
          free(v30);
        }

        v31 = 0;
        v40 = 0;
      }
      else
      {
        v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v40, 0));
        if (qword_1000DFFD8 != -1)
          dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
        v32 = (id)qword_1000DFFD0;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v43 = 0;
          v33 = sub_100007750(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            v34 = v33;
          else
            v34 = v33 & 0xFFFFFFFE;
          if ((_DWORD)v34)
          {
            *(_DWORD *)v42 = 138412290;
            *(_QWORD *)&v42[4] = v31;
            v35 = (const char *)_os_log_send_and_compose_impl(v34, &v43, 0, 0);
            v36 = (char *)v35;
            if (v35)
              sub_100007780(v35);
          }
          else
          {
            v36 = 0;
          }
          free(v36);
        }

      }
      goto LABEL_64;
    }
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "remoteProcessHasBooleanEntitlement:", CFSTR("com.apple.usermanagerd.persona.fetchbundle")) & 1) != 0)
  {
    goto LABEL_14;
  }
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v16 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v42 = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      v19 = *(_DWORD *)(a1 + 48);
      LODWORD(v43) = 67109120;
      HIDWORD(v43) = v19;
      v20 = (const char *)_os_log_send_and_compose_impl(v18, v42, 0, 0);
      v21 = (char *)v20;
      if (v20)
        sub_100007780(v20);
    }
    else
    {
      v21 = 0;
    }
    free(v21);
  }

  v31 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  v25 = 0;
LABEL_64:
  v37 = *(_QWORD *)(a1 + 40);
  if (v37)
    (*(void (**)(uint64_t, void *, void *))(v37 + 16))(v37, v25, v31);

}

void sub_100018AA4(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  id v12;

  v3 = a2;
  if (objc_msgSend(*(id *)(a1 + 32), "notifyNextPersonaObserver:withUser:", v3, *(unsigned int *)(a1 + 40)))
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v4 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v11 = 138412290;
        v12 = v3;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v4 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v7;
      else
        v6 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v11 = 138412290;
        v12 = v3;
LABEL_18:
        v8 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
        goto LABEL_21;
      }
LABEL_20:
      v9 = 0;
LABEL_21:
      free(v9);
    }
  }

}

void sub_10001908C(id a1)
{
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v1 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0;
    v2 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = (const char *)_os_log_send_and_compose_impl(v3, &v6, 0, 0);
      v5 = (char *)v4;
      if (v4)
        sub_100007780(v4);
    }
    else
    {
      v5 = 0;
    }
    free(v5);
  }

}

void sub_10001917C(id a1)
{
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v1 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v6 = 0;
    v2 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = (const char *)_os_log_send_and_compose_impl(v3, &v6, 0, 0);
      v5 = (char *)v4;
      if (v4)
        sub_100007780(v4);
    }
    else
    {
      v5 = 0;
    }
    free(v5);
  }

}

id sub_10001926C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  int v10;
  uint64_t v11;

  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v2 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v10 = 138412290;
      v11 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  return objc_msgSend(*(id *)(a1 + 40), "invalidate");
}

void sub_100019440(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  char *v8;
  unsigned int v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 48)));
  v29 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v28 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 48);
      v30 = 67109120;
      v31 = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v5, &v28, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.observer")) & 1) != 0)
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v29, *(unsigned int *)(a1 + 48));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v10 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        v30 = 67109120;
        v31 = v9;
        v13 = (const char *)_os_log_send_and_compose_impl(v12, &v28, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

    objc_msgSend(v2, "setPersonaStakeHolderIsRegistered:", 1);
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v21 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 0;
      v22 = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LOWORD(v30) = 0;
        v24 = (const char *)_os_log_send_and_compose_impl(v23, &v28, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    v26 = 0;
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v15 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v28 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        v18 = *(_DWORD *)(a1 + 48);
        v30 = 67109120;
        v31 = v18;
        v19 = (const char *)_os_log_send_and_compose_impl(v17, &v28, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

    v26 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  }
  v27 = *(_QWORD *)(a1 + 40);
  if (v27)
    (*(void (**)(uint64_t, void *))(v27 + 16))(v27, v26);

}

void sub_100019984(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  id v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  __CFString *v23;
  void *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  void *v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE v39[18];
  uint64_t v40;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  v38 = -1;
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v40 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v39 = 67109378;
      *(_DWORD *)&v39[4] = v6;
      *(_WORD *)&v39[8] = 2112;
      *(_QWORD *)&v39[10] = v7;
      v8 = (const char *)_os_log_send_and_compose_impl(v5, &v40, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.usermanagerd.persona.observer")) & 1) != 0)
  {
    v10 = objc_msgSend(*(id *)(a1 + 32), "asidForClient:withAuid:withPid:", v2, &v38, *(unsigned int *)(a1 + 56));
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v11 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v14 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)v39 = 138412546;
        *(_QWORD *)&v39[4] = v14;
        *(_WORD *)&v39[12] = 1024;
        *(_DWORD *)&v39[14] = (_DWORD)v10;
        v15 = (const char *)_os_log_send_and_compose_impl(v13, &v40, 0, 0);
        v16 = (char *)v15;
        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v16 = 0;
      }
      free(v16);
    }

    v23 = sub_1000053A8((uint64_t)v10, v38, *(unsigned int *)(a1 + 60));
    v24 = (void *)objc_claimAutoreleasedReturnValue(v23);
    if (sub_10004F3B0(*(const __CFString **)(a1 + 40), v24))
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v25 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v39 = 0;
        v26 = sub_100007750(1);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if ((_DWORD)v27)
        {
          LOWORD(v40) = 0;
          v28 = (const char *)_os_log_send_and_compose_impl(v27, v39, 0, 0);
          v29 = (char *)v28;
          if (v28)
            sub_100007780(v28);
        }
        else
        {
          v29 = 0;
        }
        free(v29);
      }

      v36 = 0;
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v30 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        v40 = 0;
        v31 = sub_100007750(1);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          v32 = v31;
        else
          v32 = v31 & 0xFFFFFFFE;
        if ((_DWORD)v32)
        {
          v33 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)v39 = 138412290;
          *(_QWORD *)&v39[4] = v33;
          v34 = (const char *)_os_log_send_and_compose_impl(v32, &v40, 0, 0);
          v35 = (char *)v34;
          if (v34)
            sub_100007780(v34);
        }
        else
        {
          v35 = 0;
        }
        free(v35);
      }

      v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    }

  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v17 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v39 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v40) = 67109120;
        HIDWORD(v40) = v20;
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v39, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    v36 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
  }
  v37 = *(_QWORD *)(a1 + 48);
  if (v37)
    (*(void (**)(uint64_t, void *))(v37 + 16))(v37, v36);

}

void sub_100019FE8(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  __CFDictionary *v10;
  void *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  int v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  int v30;
  _BYTE v31[18];
  uint64_t v32;

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "_clientForPID:", *(unsigned int *)(a1 + 56)));
  if (qword_1000DFFD8 != -1)
    dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
  v3 = (id)qword_1000DFFD0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v32 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      v6 = *(_DWORD *)(a1 + 56);
      v7 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v31 = 67109378;
      *(_DWORD *)&v31[4] = v6;
      *(_WORD *)&v31[8] = 2112;
      *(_QWORD *)&v31[10] = v7;
      v8 = (const char *)_os_log_send_and_compose_impl(v5, &v32, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  if ((objc_msgSend(v2, "hasEntitlement:", CFSTR("com.apple.mkb.usersession.loginwindow")) & 1) != 0)
  {
    v30 = 0;
    v10 = sub_10004DDE8(*(const __CFDictionary **)(a1 + 40), &v30);
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (v30)
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v12 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v31 = 0;
        v13 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v14)
        {
          LODWORD(v32) = 67109120;
          HIDWORD(v32) = v30;
          v15 = (const char *)_os_log_send_and_compose_impl(v14, v31, 0, 0);
          v16 = (char *)v15;
          if (v15)
            sub_100007780(v15);
        }
        else
        {
          v16 = 0;
        }
        free(v16);
      }

      v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v30, 0));
    }
    else
    {
      if (qword_1000DFFD8 != -1)
        dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
      v23 = (id)qword_1000DFFD0;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v32 = 0;
        v24 = sub_100007750(1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if ((_DWORD)v25)
        {
          *(_DWORD *)v31 = 138412290;
          *(_QWORD *)&v31[4] = v11;
          v26 = (const char *)_os_log_send_and_compose_impl(v25, &v32, 0, 0);
          v27 = (char *)v26;
          if (v26)
            sub_100007780(v26);
        }
        else
        {
          v27 = 0;
        }
        free(v27);
      }

      v28 = 0;
    }
  }
  else
  {
    if (qword_1000DFFD8 != -1)
      dispatch_once(&qword_1000DFFD8, &stru_1000D1230);
    v17 = (id)qword_1000DFFD0;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v31 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        v20 = *(_DWORD *)(a1 + 56);
        LODWORD(v32) = 67109120;
        HIDWORD(v32) = v20;
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v31, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }

    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 1, 0));
    v11 = 0;
  }
  v29 = *(_QWORD *)(a1 + 48);
  if (v29)
    (*(void (**)(uint64_t, void *, void *))(v29 + 16))(v29, v11, v28);

}

void sub_10001A828(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000DFFD0;
  qword_1000DFFD0 = (uint64_t)v1;

}

void sub_10001A85C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "user");
  v2 = (void *)qword_1000DFFE0;
  qword_1000DFFE0 = (uint64_t)v1;

}

BOOL sub_10001A900(id a1, unsigned int *a2)
{
  mach_port_t v3;
  kern_return_t multiuser_config_flags;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v11;
  int v12;
  kern_return_t v13;

  if (!a2)
    _os_assumes_log(0);
  *a2 = 0;
  v3 = mach_host_self();
  multiuser_config_flags = host_get_multiuser_config_flags(v3, a2);
  if (multiuser_config_flags)
  {
    if (qword_1000DFFF8 != -1)
      dispatch_once(&qword_1000DFFF8, &stru_1000D12F0);
    v5 = (id)qword_1000DFFF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v6 = sub_100007750(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v12 = 67109120;
        v13 = multiuser_config_flags;
        v8 = (const char *)_os_log_send_and_compose_impl(v7, &v11, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

  }
  return multiuser_config_flags == 0;
}

BOOL sub_10001AA64(id a1, unsigned int a2)
{
  mach_port_t v3;
  kern_return_t v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  const char *v10;
  char *v11;
  uint64_t v13;
  __int16 v14;
  kern_return_t v15;
  uint64_t v16;

  v3 = mach_host_self();
  v4 = host_set_multiuser_config_flags(v3, a2);
  if (v4)
  {
    if (qword_1000DFFF8 != -1)
      dispatch_once(&qword_1000DFFF8, &stru_1000D12F0);
    v5 = (id)qword_1000DFFF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v16 = 0;
      v6 = sub_100007750(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        LODWORD(v13) = 67109376;
        HIDWORD(v13) = a2;
        v14 = 1024;
        v15 = v4;
        v8 = &v16;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1000DFFF8 != -1)
      dispatch_once(&qword_1000DFFF8, &stru_1000D12F0);
    v5 = (id)qword_1000DFFF0;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v13 = 0;
      v9 = sub_100007750(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
        v7 = v9;
      else
        v7 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        LODWORD(v16) = 67109120;
        HIDWORD(v16) = a2;
        v8 = &v13;
LABEL_18:
        v10 = (const char *)_os_log_send_and_compose_impl(v7, v8, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
        goto LABEL_21;
      }
LABEL_20:
      v11 = 0;
LABEL_21:
      free(v11);
    }
  }

  return v4 == 0;
}

void sub_10001AC70(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000DFFF0;
  qword_1000DFFF0 = (uint64_t)v1;

}

id sub_10001ACA4(uint64_t a1, void *a2)
{
  id v3;
  id v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v3);

  return v4;
}

id sub_10001ACF0(uint64_t a1, const __CFUUID *a2)
{
  __CFString *v3;
  __CFString *v4;
  id v5;
  void *v6;

  objc_opt_self(a1);
  if (a2)
  {
    v3 = (__CFString *)CFUUIDCreateString(kCFAllocatorDefault, a2);
    if (!v3)
      sub_1000ACE0C();
    v4 = v3;
    v5 = sub_10001ACA4((uint64_t)NSUUID, v3);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    CFRelease(v4);
  }
  else
  {
    v6 = 0;
  }
  return v6;
}

CFUUIDRef sub_10001AD60(void *a1)
{
  __CFString *v1;
  CFUUIDRef v2;

  if (!a1)
    return 0;
  v1 = (__CFString *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "UUIDString"));
  v2 = CFUUIDCreateFromString(kCFAllocatorDefault, v1);

  if (!v2)
    sub_1000ACE0C();
  return v2;
}

void sub_10001BB94(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E0000;
  qword_1000E0000 = (uint64_t)v1;

}

id sub_10001BBC8(uint64_t a1)
{
  void *v2;
  id v3;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("encrypt"), "dataUsingEncoding:", 4));
    v3 = objc_msgSend(v2, "mutableCopy");

    objc_msgSend(v3, "appendData:", a1);
  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id sub_10001BC2C(void *a1)
{
  void *v1;
  _BYTE *v2;
  id v3;

  if (a1)
  {
    v1 = a1;
    v2 = objc_msgSend(CFSTR("encrypt"), "length");
    v3 = objc_retainAutorelease(v1);
    a1 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", &v2[(_QWORD)objc_msgSend(v3, "bytes")], (_BYTE *)objc_msgSend(v3, "length") - v2));
  }
  return a1;
}

uint64_t sub_10001BE1C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 16);
  return result;
}

uint64_t sub_10001BEE8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 56);
  return result;
}

uint64_t sub_10001BFB4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 72);
  return result;
}

uint64_t sub_10001BFC0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 80);
  return result;
}

uint64_t sub_10001C028(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

uint64_t sub_10001C090(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

BOOL sub_10001C0B0(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 9) != 0;
  return result;
}

uint64_t sub_10001C120(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 104);
  return result;
}

uint64_t sub_10001C188(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 112);
  return result;
}

uint64_t sub_10001C1F0(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 120);
  return result;
}

uint64_t sub_10001C258(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 128);
  return result;
}

uint64_t sub_10001C3B8(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 136);
  return result;
}

uint64_t sub_10001C3C4(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 24);
  return result;
}

uint64_t sub_10001C524(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 144);
  return result;
}

uint64_t sub_10001C724(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 152);
  return result;
}

uint64_t sub_10001C730(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 40);
  return result;
}

uint64_t sub_10001C80C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 160);
  return result;
}

void sub_10001C828(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 16), a2);
}

void sub_10001C838(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 24), a2);
}

void sub_10001C848(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 32), a2);
}

void sub_10001C858(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 40), a2);
}

void sub_10001C868(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 48), a2);
}

void sub_10001C878(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 56), a2);
}

void sub_10001C888(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 64), a2);
}

void sub_10001C898(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 72), a2);
}

void sub_10001C8A8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 80), a2);
}

void sub_10001C8B8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 88), a2);
}

void sub_10001C8C8(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 96), a2);
}

uint64_t sub_10001C8D8(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 9) = a2;
  return result;
}

void sub_10001C8E4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 104), a2);
}

void sub_10001C8F4(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 112), a2);
}

void sub_10001C904(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 120), a2);
}

void sub_10001C914(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 128), a2);
}

void sub_10001C924(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 136), a2);
}

void sub_10001C934(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 144), a2);
}

void sub_10001C944(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 152), a2);
}

void sub_10001C954(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 160), a2);
}

uint64_t sub_10001CA60(uint64_t result)
{
  if (result)
  {
    (*(void (**)(void))(*(_QWORD *)(result + 8) + 16))();
    return 0;
  }
  return result;
}

uint64_t sub_10001CA9C(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 8);
  return result;
}

uint64_t sub_10001CAA8(uint64_t result)
{
  if (result)
  {
    (*(uint64_t (**)(void))(*(_QWORD *)(result + 8) + 16))();
    return 0;
  }
  return result;
}

uint64_t sub_10001CAE4(uint64_t result)
{
  int v1;

  if (result)
  {
    v1 = 0;
    if ((*(unsigned int (**)(void))(*(_QWORD *)(result + 8) + 16))())
      return v1 & 0x3FFFFFFF;
    else
      return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_10001CB24(uint64_t a1, unsigned int a2, int a3, int a4)
{
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  unsigned int v10;
  int v11;
  uint64_t v13;
  int v14;
  unsigned int v15;

  if (!a1)
    return 0;
  if (a2 >> 30)
  {
    if (qword_1000E0018 != -1)
      dispatch_once(&qword_1000E0018, &stru_1000D1340);
    v5 = (id)qword_1000E0010;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v6 = sub_100007750(0);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v14 = 67109120;
        v15 = a2;
        v8 = (const char *)_os_log_send_and_compose_impl(v7, &v13, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

    return 0;
  }
  if (a3)
    v10 = 0x80000000;
  else
    v10 = 0;
  if (a4)
    v11 = 0x40000000;
  else
    v11 = 0;
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v10 | v11 | a2);
}

void sub_10001CCBC(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 8);
}

void sub_10001CCD0(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 16);
}

void sub_10001CD14(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E0010;
  qword_1000E0010 = (uint64_t)v1;

}

void sub_10001CD88(id a1)
{
  UMDProviderSideEffects *v1;
  void *v2;

  v1 = objc_alloc_init(UMDProviderSideEffects);
  v2 = (void *)qword_1000E0020;
  qword_1000E0020 = (uint64_t)v1;

}

uint64_t sub_10001CF20(char *a1, ...)
{
  uint64_t v2;
  char *message[2];
  va_list va;

  va_start(va, a1);
  message[0] = 0;
  va_copy((va_list)&message[1], va);
  vasprintf(message, a1, va);
  if (!message[0])
    message[0] = a1;
  reboot_np(3072, message[0]);
  v2 = abort_with_reason(2, 6, message[0], 0);
  return sub_10001CF78(v2);
}

uint64_t sub_10001CF78(const char *a1, int a2)
{
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  unsigned int v6;
  const char *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  const char *v18;
  char *v19;
  int v20;
  _BYTE v21[12];
  int v22;
  int *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  size_t v28;
  int v29;
  int v30;

  v20 = a2;
  *(_QWORD *)v21 = 0;
  v3 = getmntinfo((statfs **)v21, 2);
  if (v3)
  {
    v4 = v3;
    v5 = (const char *)(*(_QWORD *)v21 + 2168 * v3 - 2080);
    v6 = v4 + 1;
    while ((int)--v6 >= 1)
    {
      v7 = v5 - 2168;
      v8 = strcmp(v5, a1);
      v5 = v7;
      if (!v8)
      {
        v9 = *((_QWORD *)v7 + 266);
        v28 = 14;
        if (sysctlnametomib("vfs.generic.ctlbyfsid", &v29, &v28) != -1)
        {
          v10 = v28;
          *(&v29 + v28) = 65538;
          v22 = 0;
          v25 = 0u;
          v26 = 0u;
          v27 = 0;
          *(_DWORD *)v21 = 1;
          *(_QWORD *)&v21[4] = v9;
          v23 = &v20;
          v24 = 4uLL;
          if ((sysctl(&v29, v10 + 1, 0, 0, v21, 0x50uLL) & 0x80000000) == 0)
            return 0;
        }
        v16 = *__error();
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v13 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_28;
        *(_QWORD *)v21 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v17;
        else
          v15 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          v29 = 67109120;
          v30 = v16;
          goto LABEL_24;
        }
        goto LABEL_26;
      }
    }
  }
  v12 = *__error();
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = (id)qword_1000E0060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v21 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      v29 = 67109120;
      v30 = v12;
LABEL_24:
      v18 = (const char *)_os_log_send_and_compose_impl(v15, v21, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
LABEL_26:
      v19 = 0;
    }
    free(v19);
  }
LABEL_28:

  return 0xFFFFFFFFLL;
}

uint64_t sub_10001D248(int a1)
{
  id v1;

  v1 = sub_100004400(qword_1000E0038, a1);
  return objc_claimAutoreleasedReturnValue(v1);
}

uint64_t sub_10001D26C(void *a1)
{
  id v1;

  v1 = sub_100058A18(qword_1000E0038, a1);
  return objc_claimAutoreleasedReturnValue(v1);
}

CFTypeRef sub_10001D290(const __CFString *a1)
{
  CFTypeRef result;
  CFIndex v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  CFTypeID v6;
  const __CFString *Value;
  const __CFString *v8;
  CFTypeID v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;

  result = (CFTypeRef)qword_1000E02B0;
  if (qword_1000E02B0)
  {
    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
    {
      v3 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v3);
        if (!ValueAtIndex)
          break;
        v5 = ValueAtIndex;
        v6 = CFGetTypeID(ValueAtIndex);
        if (v6 != CFDictionaryGetTypeID())
          break;
        Value = (const __CFString *)CFDictionaryGetValue(v5, kUMUserSessionVolumeUUIDKey);
        if (!Value || (v8 = Value, v9 = CFGetTypeID(Value), v9 != CFStringGetTypeID()))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v10 = (id)qword_1000E0060;
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            v16 = 0;
            v13 = sub_100007750(1);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
              v12 = v13;
            else
              v12 = v13 & 0xFFFFFFFE;
            if ((_DWORD)v12)
            {
              v17 = 67109120;
              v18 = v3;
              goto LABEL_26;
            }
LABEL_28:
            v15 = 0;
            goto LABEL_29;
          }
          goto LABEL_30;
        }
        if (CFStringCompare(v8, a1, 0) == kCFCompareEqualTo)
          return CFRetain(v5);
LABEL_31:
        if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) <= ++v3)
          return 0;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if (!(_DWORD)v12)
          goto LABEL_28;
        LOWORD(v17) = 0;
LABEL_26:
        v14 = (const char *)_os_log_send_and_compose_impl(v12, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
LABEL_29:
        free(v15);
      }
LABEL_30:

      goto LABEL_31;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10001D538()
{
  int v0;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  id v7;
  uint64_t v8;
  int v9;
  int v10;

  if (!qword_1000E02B0)
    return 0;
  v0 = sub_100058C2C(qword_1000E0038);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v1 = (id)qword_1000E0060;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 0;
    v2 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v9 = 67109120;
      v10 = v0;
      v4 = (const char *)_os_log_send_and_compose_impl(v3, &v8, 0, 0);
      v5 = (char *)v4;
      if (v4)
        sub_100007780(v4);
    }
    else
    {
      v5 = 0;
    }
    free(v5);
  }

  v7 = sub_100004400(qword_1000E0038, v0);
  return objc_claimAutoreleasedReturnValue(v7);
}

CFTypeRef sub_10001D69C()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  CFTypeRef v14;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  int v22;
  int v23;

  if (!qword_1000E02B0)
    return 0;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v0 = (id)qword_1000E0060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 0;
    v1 = sub_100007750(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      v2 = v1;
    else
      v2 = v1 & 0xFFFFFFFE;
    if ((_DWORD)v2)
    {
      LOWORD(v22) = 0;
      v3 = (const char *)_os_log_send_and_compose_impl(v2, &v21, 0, 0);
      v4 = (char *)v3;
      if (v3)
        sub_100007780(v3);
    }
    else
    {
      v4 = 0;
    }
    free(v4);
  }

  if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v5);
    if (!ValueAtIndex || (v7 = ValueAtIndex, v8 = CFGetTypeID(ValueAtIndex), v8 != CFDictionaryGetTypeID()))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v9 = (id)qword_1000E0060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v21 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          v22 = 67109120;
          v23 = v5;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v21, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

      goto LABEL_31;
    }
    if (sub_1000866F8(v7, kUMUserSessionisPrimaryKey))
      break;
LABEL_31:
    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) <= ++v5)
      return 0;
  }
  v14 = CFRetain(v7);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v16 = (id)qword_1000E0060;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      LOWORD(v22) = 0;
      v19 = (const char *)_os_log_send_and_compose_impl(v18, &v21, 0, 0);
      v20 = (char *)v19;
      if (v19)
        sub_100007780(v19);
    }
    else
    {
      v20 = 0;
    }
    free(v20);
  }

  return v14;
}

CFTypeRef sub_10001DA18(const __CFString *a1)
{
  CFIndex v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;

  if (!qword_1000E02B0 || CFArrayGetCount((CFArrayRef)qword_1000E02B0) < 1)
    return 0;
  v2 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v2);
    if (ValueAtIndex)
    {
      v4 = ValueAtIndex;
      v5 = CFGetTypeID(ValueAtIndex);
      if (v5 == CFDictionaryGetTypeID())
      {
        Value = (const __CFString *)CFDictionaryGetValue(v4, kUMUserSessionNameKey);
        if (Value)
        {
          v7 = Value;
          v8 = CFGetTypeID(Value);
          if (v8 == CFStringGetTypeID() && CFStringCompare(v7, a1, 0) == kCFCompareEqualTo)
            break;
        }
      }
    }
    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) <= ++v2)
      return 0;
  }
  return CFRetain(v4);
}

uint64_t sub_10001DB08()
{
  uint64_t v0;
  _QWORD v2[6];
  _QWORD v3[4];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2020000000;
  v3[3] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10001DBB8;
  v2[3] = &unk_1000D1388;
  v2[4] = v3;
  v2[5] = &v4;
  dispatch_sync((dispatch_queue_t)qword_1000E0320, v2);
  v0 = v5[3];
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_10001DBB8(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  int Count;
  __CFArray *v8;
  CFIndex v9;
  uint64_t v10;
  const void *v11;
  CFTypeID v12;
  CFNumberRef v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  int valuePtr;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  valuePtr = 0;
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v19, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (qword_1000E02B0 && (Count = CFArrayGetCount((CFArrayRef)qword_1000E02B0), Count >= 1))
  {
    v8 = sub_100086C90();
    v9 = 0;
    v10 = Count;
    do
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v9);
      valuePtr = -1;
      v11 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      if (v11)
      {
        v12 = CFGetTypeID(v11);
        if (v12 == CFDictionaryGetTypeID())
          valuePtr = sub_100004318(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), kUMUserSessionIDKey);
      }
      v13 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
      CFArrayAppendValue(v8, v13);
      if (v13)
        CFRelease(v13);
      ++v9;
    }
    while (v10 != v9);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v14 = (id)qword_1000E0060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v17 = (const char *)_os_log_send_and_compose_impl(v16, &v19, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
}

uint64_t sub_10001DE7C()
{
  uint64_t result;
  __CFDictionary *v1;
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  CFNumberRef v12;
  CFTypeRef v13;
  const void *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  CFNumberRef v30;
  CFNumberRef v31;
  CFNumberRef v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  CFNumberRef v38;
  CFNumberRef v39;
  CFNumberRef v40;
  CFNumberRef v41;
  CFNumberRef v42;
  CFNumberRef v43;
  CFTypeRef v44;
  NSObject *v45;
  unsigned int v46;
  uint64_t v47;
  unsigned int v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  CFNumberRef v59;
  CFTypeRef v60;
  unsigned int v61;
  const char *v62;
  char *v63;
  CFTypeRef v64;
  const void *v65;
  uint64_t v66;
  void *v67;
  unsigned int v68;
  NSObject *v69;
  unsigned int v70;
  uint64_t v71;
  NSObject *v72;
  unsigned int v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  unsigned int v77;
  const char *v78;
  char *v79;
  uint64_t v80;
  uint64_t valuePtr;
  int Count;
  int v83;
  int v84;

  result = qword_1000E02B0;
  if (qword_1000E02B0)
  {
    Count = 0;
    valuePtr = CFArrayGetCount((CFArrayRef)qword_1000E02B0);
    if ((_DWORD)valuePtr)
    {
      v1 = sub_100086BFC();
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v2 = (id)qword_1000E0060;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
        v80 = 0;
        v3 = sub_100007750(1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          v4 = v3;
        else
          v4 = v3 & 0xFFFFFFFE;
        if ((_DWORD)v4)
        {
          LOWORD(v83) = 0;
          v5 = (const char *)_os_log_send_and_compose_impl(v4, &v80, 0, 0);
          v6 = (char *)v5;
          if (v5)
            sub_100007780(v5);
        }
        else
        {
          v6 = 0;
        }
        free(v6);
      }

      v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
      CFDictionaryAddValue(v1, CFSTR("NUMENT"), v12);
      CFRelease(v12);
      v13 = sub_100086820((const void *)qword_1000E02B0);
      if (v13)
      {
        v14 = v13;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v15 = (id)qword_1000E0060;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          v80 = 0;
          v16 = sub_100007750(1);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            v17 = v16;
          else
            v17 = v16 & 0xFFFFFFFE;
          if ((_DWORD)v17)
          {
            LOWORD(v83) = 0;
            v18 = (const char *)_os_log_send_and_compose_impl(v17, &v80, 0, 0);
            v19 = (char *)v18;
            if (v18)
              sub_100007780(v18);
          }
          else
          {
            v19 = 0;
          }
          free(v19);
        }

        CFDictionaryAddValue(v1, CFSTR("BLOB"), v14);
        CFRelease(v14);
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v20 = (id)qword_1000E0060;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          v80 = 0;
          v21 = sub_100007750(1);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            v22 = v21;
          else
            v22 = v21 & 0xFFFFFFFE;
          if ((_DWORD)v22)
          {
            LOWORD(v83) = 0;
            v23 = (const char *)_os_log_send_and_compose_impl(v22, &v80, 0, 0);
            v24 = (char *)v23;
            if (v23)
              sub_100007780(v23);
          }
          else
          {
            v24 = 0;
          }
          free(v24);
        }

        CFDictionaryAddValue(v1, CFSTR("BLOB"), 0);
      }
      v30 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E02C0);
      CFDictionaryAddValue(v1, CFSTR("DEVICECONFIG"), v30);
      CFRelease(v30);
      v31 = CFNumberCreate(0, kCFNumberIntType, &dword_1000DF218);
      CFDictionaryAddValue(v1, CFSTR("BOOTEDUSER"), v31);
      CFRelease(v31);
      if (dword_1000DF21C != -1 || qword_1000E02E8)
      {
        v32 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000DF228);
        CFDictionaryAddValue(v1, CFSTR("APNSID"), v32);
        CFRelease(v32);
        if (qword_1000E0050)
        {
          CFDictionaryAddValue(v1, CFSTR("VOLUMETYPE"), (const void *)qword_1000E0050);
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v33 = (id)qword_1000E0060;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          {
            v80 = 0;
            v34 = sub_100007750(1);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              v35 = v34;
            else
              v35 = v34 & 0xFFFFFFFE;
            if ((_DWORD)v35)
            {
              LOWORD(v83) = 0;
              v36 = (const char *)_os_log_send_and_compose_impl(v35, &v80, 0, 0);
              v37 = (char *)v36;
              if (v36)
                sub_100007780(v36);
            }
            else
            {
              v37 = 0;
            }
            free(v37);
          }

        }
        v38 = CFNumberCreate(0, kCFNumberIntType, &dword_1000DF21C);
        CFDictionaryAddValue(v1, CFSTR("MAXUSER"), v38);
        CFRelease(v38);
        v39 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000E02E8);
        CFDictionaryAddValue(v1, CFSTR("MAXUSERSIZE"), v39);
        CFRelease(v39);
      }
      if (dword_1000E02C0 != 1)
      {
LABEL_104:
        if (qword_1000E02D8
          && (HIDWORD(valuePtr) = CFArrayGetCount((CFArrayRef)qword_1000E02D8), SHIDWORD(valuePtr) >= 1))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v51 = (id)qword_1000E0060;
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            v80 = 0;
            v52 = sub_100007750(1);
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              v53 = v52;
            else
              v53 = v52 & 0xFFFFFFFE;
            if ((_DWORD)v53)
            {
              v83 = 67109120;
              v84 = HIDWORD(valuePtr);
              v54 = (const char *)_os_log_send_and_compose_impl(v53, &v80, 0, 0);
              v55 = (char *)v54;
              if (v54)
                sub_100007780(v54);
            }
            else
            {
              v55 = 0;
            }
            free(v55);
          }

          v59 = CFNumberCreate(0, kCFNumberIntType, (char *)&valuePtr + 4);
          CFDictionaryAddValue(v1, CFSTR("LRUENT"), v59);
          CFRelease(v59);
          v60 = sub_100086820((const void *)qword_1000E02D8);
          CFDictionaryAddValue(v1, CFSTR("LRUBLOB"), v60);
          CFRelease(v60);
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v56 = (id)qword_1000E0060;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            v80 = 0;
            v61 = sub_100007750(1);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              v58 = v61;
            else
              v58 = v61 & 0xFFFFFFFE;
            if ((_DWORD)v58)
            {
              v83 = 67109120;
              v84 = HIDWORD(valuePtr);
LABEL_133:
              v62 = (const char *)_os_log_send_and_compose_impl(v58, &v80, 0, 0);
              v63 = (char *)v62;
              if (v62)
                sub_100007780(v62);
              goto LABEL_136;
            }
            goto LABEL_135;
          }
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v56 = (id)qword_1000E0060;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            v80 = 0;
            v57 = sub_100007750(1);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              v58 = v57;
            else
              v58 = v57 & 0xFFFFFFFE;
            if ((_DWORD)v58)
            {
              LOWORD(v83) = 0;
              goto LABEL_133;
            }
LABEL_135:
            v63 = 0;
LABEL_136:
            free(v63);
          }
        }

        v64 = sub_100086820(v1);
        if (!v64)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v72 = (id)qword_1000E0060;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
          {
            v80 = 0;
            v73 = sub_100007750(1);
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
              v74 = v73;
            else
              v74 = v73 & 0xFFFFFFFE;
            if ((_DWORD)v74)
            {
              LOWORD(v83) = 0;
              v75 = (const char *)_os_log_send_and_compose_impl(v74, &v80, 0, 0);
              v76 = (char *)v75;
              if (v75)
                sub_100007780(v75);
            }
            else
            {
              v76 = 0;
            }
            free(v76);
          }

          goto LABEL_172;
        }
        v65 = v64;
        v66 = sub_100007EF0(qword_1000E0318);
        v67 = (void *)objc_claimAutoreleasedReturnValue(v66);
        v68 = objc_msgSend(v67, "atomicallyWriteData:toPath:error:", v65, CFSTR("/private/var//keybags/usersession.kb"), 0);

        if (v68)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v69 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            goto LABEL_168;
          v80 = 0;
          v70 = sub_100007750(1);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            v71 = v70;
          else
            v71 = v70 & 0xFFFFFFFE;
          if ((_DWORD)v71)
          {
            LOWORD(v83) = 0;
            goto LABEL_164;
          }
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v69 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            goto LABEL_168;
          v80 = 0;
          v77 = sub_100007750(1);
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
            v71 = v77;
          else
            v71 = v77 & 0xFFFFFFFE;
          if ((_DWORD)v71)
          {
            LOWORD(v83) = 0;
LABEL_164:
            v78 = (const char *)_os_log_send_and_compose_impl(v71, &v80, 0, 0);
            v79 = (char *)v78;
            if (v78)
              sub_100007780(v78);
            goto LABEL_167;
          }
        }
        v79 = 0;
LABEL_167:
        free(v79);
LABEL_168:

        CFRelease(v65);
LABEL_172:
        CFRelease(v1);
        return 1;
      }
      v40 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E02C8);
      CFDictionaryAddValue(v1, CFSTR("USESSTYPE"), v40);
      CFRelease(v40);
      v41 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E02CC);
      CFDictionaryAddValue(v1, CFSTR("LOGINCHECKIN"), v41);
      CFRelease(v41);
      if (dword_1000E02F0 >= 1)
      {
        v42 = CFNumberCreate(0, kCFNumberIntType, &dword_1000E02F0);
        CFDictionaryAddValue(v1, CFSTR("DEVICENETWORKBG"), v42);
        CFRelease(v42);
      }
      if (qword_1000E02D0 && (Count = CFArrayGetCount((CFArrayRef)qword_1000E02D0), Count >= 1))
      {
        v43 = CFNumberCreate(0, kCFNumberIntType, &Count);
        CFDictionaryAddValue(v1, CFSTR("SYNCENT"), v43);
        CFRelease(v43);
        v44 = sub_100086820((const void *)qword_1000E02D0);
        CFDictionaryAddValue(v1, CFSTR("SYNCBLOB"), v44);
        CFRelease(v44);
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v45 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          goto LABEL_103;
        v80 = 0;
        v46 = sub_100007750(1);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          v47 = v46;
        else
          v47 = v46 & 0xFFFFFFFE;
        if ((_DWORD)v47)
        {
          v83 = 67109120;
          v84 = Count;
          goto LABEL_99;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v45 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          goto LABEL_103;
        v80 = 0;
        v48 = sub_100007750(1);
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
          v47 = v48;
        else
          v47 = v48 & 0xFFFFFFFE;
        if ((_DWORD)v47)
        {
          LOWORD(v83) = 0;
LABEL_99:
          v49 = (const char *)_os_log_send_and_compose_impl(v47, &v80, 0, 0);
          v50 = (char *)v49;
          if (v49)
            sub_100007780(v49);
          goto LABEL_102;
        }
      }
      v50 = 0;
LABEL_102:
      free(v50);
LABEL_103:

      goto LABEL_104;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v80 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        LOWORD(v83) = 0;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v80, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }

    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v25 = (id)qword_1000E0060;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v80 = 0;
      v26 = sub_100007750(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        LOWORD(v83) = 0;
        v28 = (const char *)_os_log_send_and_compose_impl(v27, &v80, 0, 0);
        v29 = (char *)v28;
        if (v28)
          sub_100007780(v28);
      }
      else
      {
        v29 = 0;
      }
      free(v29);
    }

    return 0;
  }
  return result;
}

void sub_10001ED2C()
{
  id *v0;
  uint64_t v1;
  void *v2;
  id *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  void *v17;
  uint64_t Count;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const __CFArray *v22;
  NSObject *v23;
  CFIndex v24;
  char *v25;
  int v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  char *v42;
  uint64_t v43;
  void *v44;
  NSObject *v45;
  unsigned int v46;
  uint64_t v47;
  const char *v48;
  char *v49;
  int v50;
  int v51[4];
  int v52[4];
  _BYTE v53[14];

  v0 = sub_10005BCE4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E0318, byte_1000E0312);
  v1 = objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)qword_1000E0030;
  qword_1000E0030 = v1;

  v3 = sub_1000587C8((uint64_t)UMDUserManager, (void *)qword_1000E0030);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)qword_1000E0038;
  qword_1000E0038 = v4;

  if (MGGetBoolAnswer(CFSTR("InternalBuild")))
  {
    LOBYTE(v50) = 1;
    v51[0] = 0;
    if (sub_100080010(v51, &v50))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v6 = (id)qword_1000E0060;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v53 = 0;
        v7 = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v8 = v7;
        else
          v8 = v7 & 0xFFFFFFFE;
        if ((_DWORD)v8)
        {
          LOWORD(v52[0]) = 0;
          v9 = (const char *)_os_log_send_and_compose_impl(v8, v53, 0, 0);
          v10 = (char *)v9;
          if (v9)
            sub_100007780(v9);
        }
        else
        {
          v10 = 0;
        }
        free(v10);
      }

    }
    if (!(_BYTE)v50)
    {
      byte_1000E0313 = 1;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v11 = (id)qword_1000E0060;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v53 = 0;
        v12 = sub_100007750(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          v13 = v12;
        else
          v13 = v12 & 0xFFFFFFFE;
        if ((_DWORD)v13)
        {
          LOWORD(v52[0]) = 0;
          v14 = (const char *)_os_log_send_and_compose_impl(v13, v53, 0, 0);
          v15 = (char *)v14;
          if (v14)
            sub_100007780(v14);
        }
        else
        {
          v15 = 0;
        }
        free(v15);
      }

      v16 = sub_10001CA9C(qword_1000E0318);
      v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
      objc_msgSend(v17, "setIgnoreIdentityMethods:", byte_1000E0313);

    }
  }
  Count = sub_100043404(1);
  if (!(_DWORD)Count)
    goto LABEL_49;
  sub_10001C838(qword_1000E0038, (void *)qword_1000E02B0);
  Count = qword_1000E02B0;
  if (qword_1000E02B0)
  {
    Count = CFArrayGetCount((CFArrayRef)qword_1000E02B0);
    if (Count >= 1)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v51 = 0;
        LODWORD(v21) = sub_100007750(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v21 = v21;
        else
          v21 = v21 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          v22 = (const __CFArray *)qword_1000E02B0;
          v23 = v20;
          v24 = CFArrayGetCount(v22);
          *(_DWORD *)v53 = 134217984;
          *(_QWORD *)&v53[4] = v24;
          v25 = (char *)_os_log_send_and_compose_impl(v21, v51, 0, 0);

          if (v25)
            sub_100007780(v25);
        }
        else
        {
          v25 = 0;
        }
        free(v25);
      }

    }
  }
  v26 = dword_1000E02C0;
  if (dword_1000E02C0 == 1 && !dword_1000E02C8)
  {
    Count = sub_100058C2C(qword_1000E0038);
    if ((_DWORD)Count == 502)
      v27 = 1;
    else
      v27 = 2;
    dword_1000E02C8 = v27;
LABEL_49:
    v26 = dword_1000E02C0;
  }
  if (v26 != 1)
  {
    if (qword_1000E0040)
      sub_1000ACF2C(Count, v19);
    v28 = sub_10005BEDC((uint64_t)UMDPersonaManager, (void *)qword_1000E0038);
    v29 = objc_claimAutoreleasedReturnValue(v28);
    v30 = (void *)qword_1000E0040;
    qword_1000E0040 = v29;

    v52[0] = 0;
    if (!sub_10004378C(v52))
      sub_1000ACE24(qword_1000E0088 == -1, (const char *)v52);
    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v31 = (id)qword_1000E0080;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v53 = 0;
      v32 = sub_100007750(0);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        v33 = v32;
      else
        v33 = v32 & 0xFFFFFFFE;
      if ((_DWORD)v33)
      {
        LOWORD(v51[0]) = 0;
        v34 = (const char *)_os_log_send_and_compose_impl(v33, v53, 0, 0);
        v35 = (char *)v34;
        if (v34)
          sub_100007780(v34);
      }
      else
      {
        v35 = 0;
      }
      free(v35);
    }

    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v36 = (id)qword_1000E0080;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v51 = 0;
      LODWORD(v37) = sub_100007750(0);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        v37 = v37;
      else
        v37 = v37 & 0xFFFFFFFE;
      if ((_DWORD)v37)
      {
        v38 = qword_1000E0040;
        v39 = v36;
        v40 = sub_100007EF0(v38);
        v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
        *(_DWORD *)v53 = 138412290;
        *(_QWORD *)&v53[4] = v41;
        v42 = (char *)_os_log_send_and_compose_impl(v37, v51, 0, 0);

        if (v42)
          sub_100007780(v42);
      }
      else
      {
        v42 = 0;
      }
      free(v42);
    }

    v43 = sub_10001C730(qword_1000E0040);
    v44 = (void *)objc_claimAutoreleasedReturnValue(v43);
    sub_10005AAE0((uint64_t)v44);

  }
  v52[0] = -1;
  v50 = -1;
  if (sub_100059798(qword_1000E0038, v52, &v50))
  {
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v45 = (id)qword_1000E0070;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v51 = 0;
      v46 = sub_100007750(0);
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
        v47 = v46;
      else
        v47 = v46 & 0xFFFFFFFE;
      if ((_DWORD)v47)
      {
        *(_DWORD *)v53 = 67109376;
        *(_DWORD *)&v53[4] = v52[0];
        *(_WORD *)&v53[8] = 1024;
        *(_DWORD *)&v53[10] = v50;
        v48 = (const char *)_os_log_send_and_compose_impl(v47, v51, 0, 0);
        v49 = (char *)v48;
        if (v48)
          sub_100007780(v48);
      }
      else
      {
        v49 = 0;
      }
      free(v49);
    }

    sub_10001F4B4(v52[0], v50);
  }
  else if (dword_1000E02C0 == 1)
  {
    sub_10001F560();
  }
}

void sub_10001F4B4(int a1, int a2)
{
  _QWORD block[4];
  int v5;
  int v6;

  if (!xpc_user_sessions_enabled() || xpc_user_sessions_get_session_uid())
  {
    sub_10001CF20("UserManagement user switch failed: usermanagerd is not running in the system session");
  }
  else if (byte_1000E0048 != 1)
  {
    byte_1000E0048 = 1;
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100050B08;
    block[3] = &unk_1000D0DE0;
    v5 = a1;
    v6 = a2;
    dispatch_async((dispatch_queue_t)qword_1000E0330, block);
    return;
  }
  sub_10001CF20("UserManagement user switch failed: attempt to perform a user switch while already performing a user switch");
  sub_10001F560();
}

void sub_10001F560()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  unsigned int v14;
  const char *v15;
  char *v16;
  int v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  unsigned int v23;
  dispatch_source_t v24;
  void *v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  dispatch_time_t v32;
  _BYTE v33[12];
  uint64_t v34;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v0 = (id)qword_1000E0060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v33 = 0;
    v1 = sub_100007750(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      v2 = v1;
    else
      v2 = v1 & 0xFFFFFFFE;
    if ((_DWORD)v2)
    {
      LOWORD(v34) = 0;
      v3 = (const char *)_os_log_send_and_compose_impl(v2, v33, 0, 0);
      v4 = (char *)v3;
      if (v3)
        sub_100007780(v3);
    }
    else
    {
      v4 = 0;
    }
    free(v4);
  }

  if (sub_100020BC4())
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_65;
    *(_QWORD *)v33 = 0;
    v6 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      LOWORD(v34) = 0;
LABEL_21:
      v8 = (uint64_t *)v33;
      goto LABEL_42;
    }
    goto LABEL_63;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v9 = (id)qword_1000E0060;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v33 = 0;
    v10 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      LOWORD(v34) = 0;
      v12 = (const char *)_os_log_send_and_compose_impl(v11, v33, 0, 0);
      v13 = (char *)v12;
      if (v12)
        sub_100007780(v12);
    }
    else
    {
      v13 = 0;
    }
    free(v13);
  }

  if (qword_1000E0308)
  {
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v5 = (id)qword_1000E0070;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_65;
    v34 = 0;
    v14 = sub_100007750(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v14;
    else
      v7 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      *(_DWORD *)v33 = 134217984;
      *(_QWORD *)&v33[4] = qword_1000E0308;
      v8 = &v34;
LABEL_42:
      v15 = (const char *)_os_log_send_and_compose_impl(v7, v8, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
      goto LABEL_64;
    }
    goto LABEL_63;
  }
  if (!qword_1000E02D0)
    return;
  if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) < 1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_65;
    *(_QWORD *)v33 = 0;
    v23 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v23;
    else
      v7 = v23 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      LOWORD(v34) = 0;
      goto LABEL_21;
    }
LABEL_63:
    v16 = 0;
LABEL_64:
    free(v16);
LABEL_65:

    return;
  }
  v17 = sub_100020C68();
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v18 = (id)qword_1000E0060;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v33 = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v20)
    {
      LODWORD(v34) = 67109120;
      HIDWORD(v34) = v17;
      v21 = (const char *)_os_log_send_and_compose_impl(v20, v33, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

  v24 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)qword_1000E0320);
  v25 = (void *)qword_1000E0308;
  qword_1000E0308 = (uint64_t)v24;

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v26 = (id)qword_1000E0070;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v34 = 0;
    v27 = sub_100007750(0);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      v28 = v27;
    else
      v28 = v27 & 0xFFFFFFFE;
    if ((_DWORD)v28)
    {
      *(_DWORD *)v33 = 134217984;
      *(_QWORD *)&v33[4] = qword_1000E0308;
      v29 = (const char *)_os_log_send_and_compose_impl(v28, &v34, 0, 0);
      v30 = (char *)v29;
      if (v29)
        sub_100007780(v29);
    }
    else
    {
      v30 = 0;
    }
    free(v30);
  }

  v31 = qword_1000E0308;
  v32 = dispatch_time(0, 1000000000 * v17);
  dispatch_source_set_timer(v31, v32, 0xFFFFFFFFFFFFFFFFLL, 0);
  dispatch_source_set_event_handler((dispatch_source_t)qword_1000E0308, &stru_1000D14A0);
  dispatch_activate((dispatch_object_t)qword_1000E0308);
}

uint64_t sub_10001FBAC()
{
  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000E0320);
  return byte_1000E0048;
}

uint64_t sub_10001FBD4(uint64_t a1, uid_t a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  v16 = 0;
  if (!a1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    v15 = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      LOWORD(v17) = 0;
      goto LABEL_28;
    }
LABEL_30:
    v13 = 0;
LABEL_31:
    free(v13);
LABEL_32:

    return 0;
  }
  if ((objc_msgSend((id)qword_1000E0030, "mountVolumeWithSession:mountPath:error:forPersona:", a1, CFSTR("/private/var/mobile"), &v16, 0) & 1) == 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    v15 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v11;
    else
      v10 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      v17 = 67109120;
      v18 = v16;
LABEL_28:
      v12 = (const char *)_os_log_send_and_compose_impl(v10, &v15, 0, 0);
      v13 = (char *)v12;
      if (v12)
        sub_100007780(v12);
      goto LABEL_31;
    }
    goto LABEL_30;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v3 = (id)qword_1000E0060;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v17) = 0;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v15, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  sub_10001FEB4((uint64_t)"/private/var/mobile", a2, a2);
  return 1;
}

uint64_t sub_10001FEB4(uint64_t a1, uid_t a2, gid_t a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  void *v20;
  NSObject *v21;
  uint64_t v22;
  NSObject *v23;
  int *v24;
  char *v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  int *v35;
  char *v36;
  char *v37;
  int v38;
  int v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  char *v43;
  char *v44;
  NSObject *v45;
  uint64_t v46;
  NSObject *v47;
  char *v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  int *v53;
  int v54;
  stat v55;
  uint64_t v56;
  int v57;
  _BYTE v58[10];
  _BYTE v59[10];
  char path[1024];

  memset(&v55, 0, sizeof(v55));
  bzero(path, 0x400uLL);
  __strlcpy_chk(path, a1, 1024, 1024);
  __strlcat_chk(path, "/tmp", 1024, 1024);
  if (!stat(path, &v55))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v56 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v57 = 136315138;
        *(_QWORD *)v58 = path;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, &v56, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }
    v16 = 0;
    goto LABEL_114;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v56 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v57 = 136315138;
      *(_QWORD *)v58 = path;
      v54 = 12;
      v53 = &v57;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v56, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if (mkpath_np(path, 0x3FFu))
  {
    v16 = *__error();
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_114;
    v56 = 0;
    LODWORD(v17) = sub_100007750(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v17 = v17;
    else
      v17 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      v18 = v11;
      v19 = strerror(v16);
      v57 = 136315394;
      *(_QWORD *)v58 = path;
      *(_WORD *)&v58[8] = 2080;
      *(_QWORD *)v59 = v19;
      v20 = (void *)_os_log_send_and_compose_impl(v17, &v56, 0, 0);

      if (!v20)
        goto LABEL_113;
      goto LABEL_111;
    }
    goto LABEL_112;
  }
  if (chmod(path, 0x3FFu))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v21 = (id)qword_1000E0060;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v56 = 0;
      LODWORD(v22) = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v22 = v22;
      else
        v22 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        v23 = v21;
        v24 = __error();
        v25 = strerror(*v24);
        v57 = 136315394;
        *(_QWORD *)v58 = path;
        *(_WORD *)&v58[8] = 2080;
        *(_QWORD *)v59 = v25;
        v54 = 22;
        v53 = &v57;
        v26 = (char *)_os_log_send_and_compose_impl(v22, &v56, 0, 0);

        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v26 = 0;
      }
      free(v26);
    }

  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v27 = (id)qword_1000E0060;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    v56 = 0;
    v28 = sub_100007750(1);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      v29 = v28;
    else
      v29 = v28 & 0xFFFFFFFE;
    if ((_DWORD)v29)
    {
      v57 = 67109376;
      *(_DWORD *)v58 = a2;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&v58[6] = a3;
      v54 = 14;
      v53 = &v57;
      v30 = (const char *)_os_log_send_and_compose_impl(v29, &v56, 0, 0);
      v31 = (char *)v30;
      if (v30)
        sub_100007780(v30);
    }
    else
    {
      v31 = 0;
    }
    free(v31);
  }

  if (chown(path, a2, a3))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v32 = (id)qword_1000E0060;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      v56 = 0;
      LODWORD(v33) = sub_100007750(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        v33 = v33;
      else
        v33 = v33 & 0xFFFFFFFE;
      if ((_DWORD)v33)
      {
        v34 = v32;
        v35 = __error();
        v36 = strerror(*v35);
        v57 = 136315394;
        *(_QWORD *)v58 = path;
        *(_WORD *)&v58[8] = 2080;
        *(_QWORD *)v59 = v36;
        v54 = 22;
        v53 = &v57;
        v37 = (char *)_os_log_send_and_compose_impl(v33, &v56, 0, 0);

        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v37 = 0;
      }
      free(v37);
    }

  }
  v38 = open_dprotected_np(path, 0, 0, 1, v53, v54, *(_QWORD *)&v55.st_dev, v55.st_ino, *(_QWORD *)&v55.st_uid, *(_QWORD *)&v55.st_rdev, v55.st_atimespec.tv_sec, v55.st_atimespec.tv_nsec, v55.st_mtimespec.tv_sec, v55.st_mtimespec.tv_nsec, v55.st_ctimespec.tv_sec, v55.st_ctimespec.tv_nsec, v55.st_birthtimespec.tv_sec, v55.st_birthtimespec.tv_nsec, v55.st_size,
          v55.st_blocks,
          *(_QWORD *)&v55.st_blksize,
          *(_QWORD *)&v55.st_gen,
          v55.st_qspare[0],
          v55.st_qspare[1]);
  if (v38 != -1)
  {
    v39 = v38;
    if (fcntl(v38, 64, 4))
    {
      v16 = *__error();
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v56 = 0;
        LODWORD(v41) = sub_100007750(1);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          v41 = v41;
        else
          v41 = v41 & 0xFFFFFFFE;
        if ((_DWORD)v41)
        {
          v42 = v40;
          v43 = strerror(v16);
          v57 = 136315394;
          *(_QWORD *)v58 = v43;
          *(_WORD *)&v58[8] = 2080;
          *(_QWORD *)v59 = path;
          v44 = (char *)_os_log_send_and_compose_impl(v41, &v56, 0, 0);

          if (v44)
            sub_100007780(v44);
        }
        else
        {
          v44 = 0;
        }
        free(v44);
      }

      if ((v39 & 0x80000000) == 0)
        goto LABEL_97;
    }
    else
    {
      v16 = 0;
      if ((v39 & 0x80000000) == 0)
LABEL_97:
        close(v39);
    }
    if (!(_DWORD)v16)
      return v16;
LABEL_103:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      goto LABEL_114;
    v56 = 0;
    v50 = sub_100007750(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v51 = v50;
    else
      v51 = v50 & 0xFFFFFFFE;
    if ((_DWORD)v51)
    {
      v57 = 136315650;
      *(_QWORD *)v58 = path;
      *(_WORD *)&v58[8] = 1024;
      *(_DWORD *)v59 = 4;
      *(_WORD *)&v59[4] = 1024;
      *(_DWORD *)&v59[6] = v16;
      v20 = (void *)_os_log_send_and_compose_impl(v51, &v56, 0, 0);
      if (!v20)
      {
LABEL_113:
        free(v20);
LABEL_114:

        return v16;
      }
LABEL_111:
      sub_100007780((const char *)v20);
      goto LABEL_113;
    }
LABEL_112:
    v20 = 0;
    goto LABEL_113;
  }
  v16 = *__error();
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v45 = (id)qword_1000E0060;
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    v56 = 0;
    LODWORD(v46) = sub_100007750(1);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      v46 = v46;
    else
      v46 = v46 & 0xFFFFFFFE;
    if ((_DWORD)v46)
    {
      v47 = v45;
      v48 = strerror(v16);
      v57 = 136315394;
      *(_QWORD *)v58 = v48;
      *(_WORD *)&v58[8] = 2080;
      *(_QWORD *)v59 = path;
      v49 = (char *)_os_log_send_and_compose_impl(v46, &v56, 0, 0);

      if (v49)
        sub_100007780(v49);
    }
    else
    {
      v49 = 0;
    }
    free(v49);
  }

  if ((_DWORD)v16)
    goto LABEL_103;
  return v16;
}

uint64_t sub_100020898()
{
  return sub_100058C2C(qword_1000E0038);
}

uint64_t sub_1000208A4(const char **__argv)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  int *v11;
  char *v12;
  char *v13;
  uint64_t v15;
  pid_t v16[2];
  int v17;
  void *v18;

  *(_QWORD *)v16 = 0;
  if (posix_spawn(&v16[1], *__argv, 0, 0, (char *const *)__argv, 0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v5 = *__argv;
        v17 = 136315138;
        v18 = (void *)v5;
        v6 = (const char *)_os_log_send_and_compose_impl(v4, &v15, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

  }
  if (waitpid(v16[1], v16, 0) == -1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      LODWORD(v9) = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v9 = v9;
      else
        v9 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = v8;
        v11 = __error();
        v12 = strerror(*v11);
        v17 = 136315138;
        v18 = v12;
        v13 = (char *)_os_log_send_and_compose_impl(v9, &v15, 0, 0);

        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

  }
  if ((v16[0] & 0x7F) != 0)
    return 0xFFFFFFFFLL;
  else
    return BYTE1(v16[0]);
}

BOOL sub_100020B20()
{
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  return !sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "usersession_enable", __len) != 0;
}

BOOL sub_100020BC4()
{
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  return !sysctlbyname("kern.bootargs", __big, &__len, 0, 0)
      && strnstr(__big, "stop_auto_bubblelaunch", __len) != 0;
}

uint64_t sub_100020C68()
{
  uint64_t v0;
  char *v1;
  unsigned int v3;
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0))
    return 120;
  v3 = 0;
  __big[1023] = 0;
  v1 = strnstr(__big, "bubblelaunch_delay=", __len);
  v0 = 120;
  if (v1)
  {
    if (sscanf(v1, "bubblelaunch_delay=%d", &v3) == 1)
      return v3;
    else
      return 120;
  }
  return v0;
}

char *sub_100020D38()
{
  char *result;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0))
    return 0;
  result = strnstr(__big, "eds_debug", __len);
  if (result)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v1 = (id)qword_1000E0060;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 0;
      v2 = sub_100007750(1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
        v3 = v2;
      else
        v3 = v2 & 0xFFFFFFFE;
      if ((_DWORD)v3)
      {
        v4 = (const char *)_os_log_send_and_compose_impl(v3, &v6, 0, 0);
        v5 = (char *)v4;
        if (v4)
          sub_100007780(v4);
      }
      else
      {
        v5 = 0;
      }
      free(v5);
    }

    return (char *)1;
  }
  return result;
}

uint64_t sub_100020EB4()
{
  int v0;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  int v10;
  size_t v11;
  int v12;
  int v13;
  int v14;

  v12 = 0;
  v11 = 4;
  v10 = 544;
  if (sysctlbyname("security.mac.sandbox.debug_mode", &v12, &v11, &v10, 4uLL))
  {
    v0 = *__error();
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v1 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      goto LABEL_23;
    v9 = 0;
    v2 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v13 = 67109120;
      v14 = v0;
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  v10 = v12 | 0x220;
  if (sysctlbyname("security.mac.sandbox.debug_mode", 0, 0, &v10, 4uLL))
  {
    v4 = *__error();
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v1 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      goto LABEL_23;
    v9 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v5;
    else
      v3 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v13 = 67109120;
      v14 = v4;
LABEL_19:
      v6 = (const char *)_os_log_send_and_compose_impl(v3, &v9, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
      goto LABEL_22;
    }
LABEL_21:
    v7 = 0;
LABEL_22:
    free(v7);
LABEL_23:

    return 0;
  }
  return 1;
}

void sub_100021104()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;
  const char *v5;
  char *v6;
  uint64_t v7;

  if (sub_100020D38())
  {
    if (sub_100020EB4())
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v0 = (id)qword_1000E0060;
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 0;
        v1 = sub_100007750(1);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
          v2 = v1;
        else
          v2 = v1 & 0xFFFFFFFE;
        if ((_DWORD)v2)
        {
LABEL_26:
          v5 = (const char *)_os_log_send_and_compose_impl(v2, &v7, 0, 0);
          v6 = (char *)v5;
          if (v5)
            sub_100007780(v5);
          goto LABEL_29;
        }
LABEL_28:
        v6 = 0;
LABEL_29:
        free(v6);
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v0 = (id)qword_1000E0060;
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      {
        v7 = 0;
        v4 = sub_100007750(1);
        if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
          v2 = v4;
        else
          v2 = v4 & 0xFFFFFFFE;
        if ((_DWORD)v2)
          goto LABEL_26;
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v0 = (id)qword_1000E0060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
    {
      v7 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEBUG))
        v2 = v3;
      else
        v2 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v2)
        goto LABEL_26;
      goto LABEL_28;
    }
  }

}

CFNumberRef sub_100021344(int a1)
{
  CFNumberRef result;
  const void *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v9;
  _DWORD valuePtr[3];
  __int16 v11;
  uint64_t v12;

  valuePtr[0] = a1;
  if (qword_1000E02D0)
    sub_1000214F4(a1);
  else
    qword_1000E02D0 = (uint64_t)sub_100086C90();
  result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, valuePtr);
  if (result)
  {
    v3 = result;
    CFArrayAppendValue((CFMutableArrayRef)qword_1000E02D0, result);
    qword_1000E02F8 = CFArrayGetCount((CFArrayRef)qword_1000E02D0);
    CFRelease(v3);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        valuePtr[1] = 67109378;
        valuePtr[2] = a1;
        v11 = 2112;
        v12 = qword_1000E02D0;
        v7 = (const char *)_os_log_send_and_compose_impl(v6, &v9, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
      }
      else
      {
        v8 = 0;
      }
      free(v8);
    }

    return (CFNumberRef)1;
  }
  return result;
}

uint64_t sub_1000214F4(int a1)
{
  uint64_t result;
  CFIndex v3;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v5;
  CFTypeID v6;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  _DWORD valuePtr[3];

  result = qword_1000E02D0;
  if (qword_1000E02D0)
  {
    valuePtr[0] = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) < 1)
    {
      return 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02D0, v3);
        if (ValueAtIndex)
        {
          v5 = ValueAtIndex;
          v6 = CFGetTypeID(ValueAtIndex);
          if (v6 == CFNumberGetTypeID() && CFNumberGetValue(v5, kCFNumberIntType, valuePtr) && valuePtr[0] == a1)
            break;
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) <= ++v3)
          return 0;
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E02D0, v3);
      qword_1000E02F8 = CFArrayGetCount((CFArrayRef)qword_1000E02D0);
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v8 = (id)qword_1000E0060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = 0;
        v9 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          valuePtr[1] = 67109120;
          valuePtr[2] = a1;
          v11 = (const char *)_os_log_send_and_compose_impl(v10, &v13, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v12 = 0;
        }
        free(v12);
      }

      return 1;
    }
  }
  return result;
}

uint64_t sub_1000216D4(CFDictionaryRef theDict, int a2)
{
  __CFDictionary *v3;
  id v4;
  uint64_t result;
  int v6;

  v3 = theDict;
  if (theDict
    || (v4 = sub_100004400(qword_1000E0038, a2),
        result = objc_claimAutoreleasedReturnValue(v4),
        (v3 = (__CFDictionary *)result) != 0))
  {
    if (CFDictionaryContainsKey(v3, kUMUserSessionSyncMachServicesKey))
      CFDictionaryRemoveValue(v3, kUMUserSessionSyncMachServicesKey);
    if (CFDictionaryContainsKey(v3, kUMUserSessionSyncTasksKey))
      CFDictionaryRemoveValue(v3, kUMUserSessionSyncTasksKey);
    if (CFDictionaryContainsKey(v3, kUMUserSessionDirtyKey))
      CFDictionarySetValue(v3, kUMUserSessionDirtyKey, kCFBooleanFalse);
    v6 = sub_100004318(v3, kUMUserSessionIDKey);
    sub_1000214F4(v6);
    if (!theDict)
      CFRelease(v3);
    return 1;
  }
  return result;
}

CFNumberRef sub_1000217B8(int a1)
{
  CFNumberRef result;
  const void *v2;
  int valuePtr;

  valuePtr = a1;
  if (qword_1000E02D8)
    sub_100021840(a1);
  else
    qword_1000E02D8 = (uint64_t)sub_100086C90();
  result = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (result)
  {
    v2 = result;
    CFArrayAppendValue((CFMutableArrayRef)qword_1000E02D8, result);
    qword_1000E0300 = CFArrayGetCount((CFArrayRef)qword_1000E02D8);
    CFRelease(v2);
    return (CFNumberRef)1;
  }
  return result;
}

uint64_t sub_100021840(int a1)
{
  uint64_t result;
  CFIndex v3;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v5;
  CFTypeID v6;
  int valuePtr;

  result = qword_1000E02D8;
  if (qword_1000E02D8)
  {
    valuePtr = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E02D8) < 1)
    {
      return 0;
    }
    else
    {
      v3 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02D8, v3);
        if (ValueAtIndex)
        {
          v5 = ValueAtIndex;
          v6 = CFGetTypeID(ValueAtIndex);
          if (v6 == CFNumberGetTypeID() && CFNumberGetValue(v5, kCFNumberIntType, &valuePtr) && valuePtr == a1)
            break;
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E02D8) <= ++v3)
          return 0;
      }
      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E02D8, v3);
      qword_1000E0300 = CFArrayGetCount((CFArrayRef)qword_1000E02D8);
      return 1;
    }
  }
  return result;
}

uint64_t sub_100021918()
{
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v1;
  CFTypeID v2;
  unsigned int valuePtr;

  if (!qword_1000E02D8)
    return 0xFFFFFFFFLL;
  ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02D8, 0);
  if (!ValueAtIndex)
    return 0xFFFFFFFFLL;
  v1 = ValueAtIndex;
  v2 = CFGetTypeID(ValueAtIndex);
  if (v2 != CFNumberGetTypeID())
    return 0xFFFFFFFFLL;
  valuePtr = 0;
  if (CFNumberGetValue(v1, kCFNumberIntType, &valuePtr))
    return valuePtr;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_100021990(uint64_t a1, char *a2, gid_t a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  unsigned __int8 v20;
  id v21;
  void *v22;
  NSObject *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  int v28;
  unsigned int v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  id v37;
  _BYTE v38[12];
  __int16 v39;
  void *v40;
  uint64_t v41;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v38 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      LOWORD(v41) = 0;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, v38, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  v11 = (void *)objc_claimAutoreleasedReturnValue(+[UMLManager sharedManager](UMLManager, "sharedManager"));
  v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", a1, 4));
  v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "stringByAppendingString:", CFSTR("/")));
  v36 = a1;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v14 = (id)qword_1000E0060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v15 = a2;
    v41 = 0;
    v16 = sub_100007750(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      *(_DWORD *)v38 = 138412546;
      *(_QWORD *)&v38[4] = CFSTR("/");
      v39 = 2112;
      v40 = v13;
      v18 = (const char *)_os_log_send_and_compose_impl(v17, &v41, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    a2 = v15;
    free(v19);
  }

  v37 = 0;
  v20 = objc_msgSend(v11, "createUserLayoutForUserwithUserID:withAKSSetup:onUserVolumePath:fromSystemVolumePath:withError:", a2, 1, v13, CFSTR("/"), &v37);
  v21 = v37;
  v22 = v21;
  if ((v20 & 1) != 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v23 = (id)qword_1000E0060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v24 = (int)a2;
      *(_QWORD *)v38 = 0;
      v25 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        LOWORD(v41) = 0;
        v27 = (const char *)_os_log_send_and_compose_impl(v26, v38, 0, 0);
        a2 = (char *)v27;
        if (v27)
          sub_100007780(v27);
      }
      else
      {
        a2 = 0;
      }
      free(a2);
      LODWORD(a2) = v24;
    }
  }
  else
  {
    v28 = (int)a2;
    v29 = objc_msgSend(v21, "code");
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v23 = (id)qword_1000E0060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v38 = 0;
      v30 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v31 = v30;
      else
        v31 = v30 & 0xFFFFFFFE;
      if ((_DWORD)v31)
      {
        LODWORD(v41) = 67109120;
        HIDWORD(v41) = v29;
        v32 = (const char *)_os_log_send_and_compose_impl(v31, v38, 0, 0);
        v33 = (char *)v32;
        if (v32)
          sub_100007780(v32);
      }
      else
      {
        v33 = 0;
      }
      free(v33);
    }
    LODWORD(a2) = v28;
  }

  v34 = sub_10001FEB4(v36, (uid_t)a2, a3);
  return v34;
}

uint64_t sub_100021E24(char *a1, int a2)
{
  _QWORD *v3;
  _QWORD *v4;
  FTS *v5;
  FTS *v6;
  FTSENT *v7;
  FTSENT *v8;
  int fts_info;
  _QWORD v11[2];
  uint64_t (*v12)(uint64_t, uint64_t);
  void *v13;
  int v14;
  _QWORD v15[2];
  uint64_t (*v16)(uint64_t, uint64_t);
  void *v17;
  int v18;
  char *v19[2];

  if (!a1)
    return 22;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v16 = sub_100021F88;
  v17 = &unk_1000D1438;
  v18 = a2;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v12 = sub_100021FB0;
  v13 = &unk_1000D1458;
  v14 = a2;
  v3 = v15;
  v4 = v11;
  v19[0] = a1;
  v19[1] = 0;
  v5 = fts_open(v19, 84, 0);
  if (v5)
  {
    v6 = v5;
    v7 = fts_read(v5);
    if (v7)
    {
      v8 = v7;
      do
      {
        fts_info = v8->fts_info;
        if (fts_info == 8)
        {
          v12((uint64_t)v4, (uint64_t)v8);
        }
        else if (fts_info == 1 && (v16((uint64_t)v3, (uint64_t)v8) & 1) == 0)
        {
          fts_set(v6, v8, 4);
        }
        v8 = fts_read(v6);
      }
      while (v8);
    }
    fts_close(v6);
  }

  return 0;
}

uint64_t sub_100021F88(uint64_t a1, uint64_t a2)
{
  lchown(*(const char **)(a2 + 48), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 32));
  return 1;
}

uint64_t sub_100021FB0(uint64_t a1, uint64_t a2)
{
  return lchown(*(const char **)(a2 + 48), *(_DWORD *)(a1 + 32), *(_DWORD *)(a1 + 32));
}

BOOL sub_100021FC4(int a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  int v16;
  int v17;
  int v18;

  v16 = a1;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v17 = 67109120;
      v18 = a1;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v15, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = sysctlbyname("net.inet.tcp.recvbg", 0, 0, &v16, 4uLL);
  if (v7)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v17 = 67109120;
        v18 = v7;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v11;
      else
        v10 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v17 = 67109120;
        v18 = v16;
LABEL_29:
        v12 = (const char *)_os_log_send_and_compose_impl(v10, &v15, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
        goto LABEL_32;
      }
LABEL_31:
      v13 = 0;
LABEL_32:
      free(v13);
    }
  }

  return v7 == 0;
}

const __CFDictionary *sub_1000222A0()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  const __CFDictionary *v16;

  v0 = (const __CFDictionary *)MGCopyAnswer(CFSTR("DiskUsage"), 0);
  v1 = v0;
  if (v0)
  {
    v2 = sub_100086690(v0, kMGQDiskUsageTotalDiskCapacity);
    v3 = sub_100086690(v1, kMGQDiskUsageTotalSystemCapacity);
    v1 = (const __CFDictionary *)sub_100086690(v1, kMGQDiskUsageTotalDataCapacity);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v11 = 134218496;
        v12 = v2;
        v13 = 2048;
        v14 = v3;
        v15 = 2048;
        v16 = v1;
        v7 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
      }
      else
      {
        v8 = 0;
      }
      free(v8);
    }

  }
  return v1;
}

uint64_t sub_100022450()
{
  char v1[16];
  statfs v2;

  memset(&v2, 0, 512);
  strcpy(v1, "/private/var");
  if (statfs(v1, &v2))
    return 0;
  else
    return v2.f_bfree * v2.f_bsize;
}

unint64_t sub_100022518(unint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  unint64_t v27;
  NSObject *v28;
  unint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  uint64_t v45;
  _BYTE v47[22];
  __int16 v48;
  unint64_t v49;
  uint64_t v50;

  v7 = (uint64_t)sub_1000222A0() / 0x100000;
  if (!(v7 >> 14))
  {
    v8 = v7 - 4096;
    v9 = (v7 - 4096) >> 10;
    v10 = 4096;
LABEL_5:
    v45 = v10;
    v11 = 1024;
    goto LABEL_7;
  }
  if (!(v7 >> 15))
  {
    v8 = v7 - 0x2000;
    v9 = (v7 - 0x2000) >> 10;
    v10 = 0x2000;
    goto LABEL_5;
  }
  v8 = v7 - 0x4000;
  v9 = (v7 - 0x4000) >> 11;
  v45 = 0x4000;
  v11 = 2048;
LABEL_7:
  if ((int)v9 >= 16)
  {
    if (v8 / 0xF >= v11)
    {
      v9 = 15;
      v11 = v8 / 0xF;
    }
    else
    {
      v9 = v8 / v11;
    }
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v12 = (id)qword_1000E0060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v50 = 0;
    v13 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      *(_DWORD *)v47 = 67109376;
      *(_DWORD *)&v47[4] = a1;
      *(_WORD *)&v47[8] = 1024;
      *(_DWORD *)&v47[10] = v9;
      v15 = (const char *)_os_log_send_and_compose_impl(v14, &v50, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v17 = (id)qword_1000E0060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v50 = 0;
    v18 = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v19)
    {
      *(_DWORD *)v47 = 134218496;
      *(_QWORD *)&v47[4] = v7;
      *(_WORD *)&v47[12] = 2048;
      *(_QWORD *)&v47[14] = v45;
      v48 = 2048;
      v49 = v8;
      v20 = (const char *)_os_log_send_and_compose_impl(v19, &v50, 0, 0);
      v21 = (char *)v20;
      if (v20)
        sub_100007780(v20);
    }
    else
    {
      v21 = 0;
    }
    free(v21);
  }

  if ((_DWORD)a1 == -1)
  {
    v27 = v8 / 0x3E8;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = 100 * v27;
    v28 = (id)qword_1000E0060;
    v29 = a2;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v47 = 0;
      v30 = sub_100007750(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        v31 = v30;
      else
        v31 = v30 & 0xFFFFFFFE;
      if ((_DWORD)v31)
      {
        v50 = 0xA04000100;
        v32 = (const char *)_os_log_send_and_compose_impl(v31, v47, 0, 0);
        v33 = (char *)v32;
        if (v32)
          sub_100007780(v32);
      }
      else
      {
        v33 = 0;
      }
      free(v33);
    }

    v9 = 10;
  }
  else if ((int)v9 <= (int)a1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = a2;
    v34 = (id)qword_1000E0060;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v47 = 0;
      v35 = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        v36 = v35;
      else
        v36 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v36)
      {
        LOWORD(v50) = 0;
        v37 = (const char *)_os_log_send_and_compose_impl(v36, v47, 0, 0);
        v38 = (char *)v37;
        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v38 = 0;
      }
      free(v38);
    }

  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v22 = (id)qword_1000E0060;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v47 = 0;
      v23 = sub_100007750(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        LOWORD(v50) = 0;
        v25 = (const char *)_os_log_send_and_compose_impl(v24, v47, 0, 0);
        v26 = (char *)v25;
        if (v25)
          sub_100007780(v25);
      }
      else
      {
        v26 = 0;
      }
      free(v26);
    }

    v9 = a1;
    v11 = v8 / (int)a1;
    v29 = a2;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v39 = (id)qword_1000E0060;
  if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
  {
    v50 = 0;
    v40 = sub_100007750(1);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      v41 = v40;
    else
      v41 = v40 & 0xFFFFFFFE;
    if ((_DWORD)v41)
    {
      *(_DWORD *)v47 = 67109376;
      *(_DWORD *)&v47[4] = v9;
      *(_WORD *)&v47[8] = 2048;
      *(_QWORD *)&v47[10] = v11;
      v42 = (const char *)_os_log_send_and_compose_impl(v41, &v50, 0, 0);
      v43 = (char *)v42;
      if (v42)
        sub_100007780(v42);
    }
    else
    {
      v43 = 0;
    }
    free(v43);
  }

  if (v29)
    *v29 = v11;
  if (a3)
    *a3 = v7;
  if (a4)
    *a4 = v45;
  return v9;
}

__CFDictionary *sub_100022BC0(int a1, uint64_t a2)
{
  int v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  int v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  __CFDictionary *v20;
  CFNumberRef v21;
  CFNumberRef v22;
  CFBooleanRef v23;
  int v24;
  CFStringRef v25;
  CFStringRef v26;
  const __CFUUID *v27;
  id v28;
  CFStringRef v29;
  const __CFUUID *v30;
  CFStringRef v31;
  CFAbsoluteTime Current;
  CFDateRef v33;
  CFNumberRef v34;
  const __CFUUID *v35;
  const __CFString *v36;
  CFStringRef v37;
  CFStringRef v38;
  NSObject *v39;
  unsigned int v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  uid_t v49;
  void *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  vm_size_t v55;
  void *v56;
  NSObject *v57;
  unsigned int v58;
  uint64_t v59;
  const char *v60;
  char *v61;
  int v62;
  NSObject *v63;
  uint64_t v64;
  void *v65;
  NSObject *v66;
  char *v67;
  char *v68;
  int v69;
  NSObject *v70;
  uint64_t v71;
  void *v72;
  NSObject *v73;
  char *v74;
  char *v75;
  NSObject *v76;
  unsigned int v77;
  uint64_t v78;
  off_t i;
  ssize_t v80;
  ssize_t v81;
  ssize_t v82;
  char *v83;
  void *v84;
  NSObject *v85;
  unsigned int v86;
  uint64_t v87;
  const char *v88;
  char *v89;
  NSObject *v90;
  uint64_t v91;
  NSObject *v92;
  int *v93;
  char *v94;
  char *v95;
  unsigned int v96;
  uint64_t v97;
  const char *v98;
  NSObject *v99;
  uint64_t v100;
  NSObject *v101;
  int *v102;
  char *v103;
  char *v104;
  int v105;
  unsigned int v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  unsigned int v110;
  char *v111;
  uint64_t v112;
  void *v113;
  unsigned __int8 v114;
  NSObject *v115;
  NSObject *v116;
  unsigned int v117;
  NSObject *v118;
  uint64_t v119;
  char *v120;
  int KeybagForUser;
  int v122;
  NSObject *v123;
  unsigned int v124;
  NSObject *v125;
  uint64_t v126;
  char *v127;
  NSObject *v128;
  uint64_t v129;
  NSObject *v130;
  id v131;
  char *v132;
  unsigned int v133;
  uint64_t v134;
  char *v135;
  NSObject *v136;
  unsigned int v137;
  NSObject *v138;
  uint64_t v139;
  char *v140;
  NSObject *v141;
  unsigned int v142;
  NSObject *v143;
  uint64_t v144;
  char *v145;
  CFNumberRef v146;
  CFNumberRef v147;
  CFNumberRef v148;
  __CFString *v149;
  CFNumberRef v150;
  CFNumberRef v151;
  CFNumberRef v152;
  CFNumberRef v153;
  CFNumberRef v154;
  CFNumberRef v155;
  CFNumberRef v156;
  NSObject *v157;
  unsigned int v158;
  NSObject *v159;
  uint64_t v160;
  char *v161;
  NSObject *v162;
  unsigned int v163;
  uint64_t v164;
  unsigned int v165;
  const char *v166;
  char *v167;
  void *v169;
  gid_t v170;
  NSObject *v171;
  uint64_t v172;
  id v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  gid_t v178;
  int valuePtr;
  unsigned int v180;
  _QWORD v181[2];
  char buffer[1024];
  char __str[4];
  int v184;
  _QWORD v185[10];
  _BYTE v186[1008];
  _BYTE v187[14];
  char *v188;

  valuePtr = 502;
  v180 = a1;
  v178 = 502;
  v176 = 0;
  v177 = 0;
  v175 = 0;
  v174 = a1;
  if (!a2)
  {
    v3 = MKBGetDeviceLockState(0);
    if (v3 != 3)
    {
      v9 = v3;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v186 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          *(_DWORD *)__str = 67109120;
          v184 = v9;
          v13 = (const char *)_os_log_send_and_compose_impl(v12, v186, 0, 0);
          v14 = (char *)v13;
          if (v13)
            sub_100007780(v13);
        }
        else
        {
          v14 = 0;
        }
        free(v14);
      }
      goto LABEL_282;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v186 = 0;
      v5 = sub_100007750(1);
      v6 = v4;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v7 = v5;
      else
        v7 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        *(_DWORD *)__str = 67109120;
        v184 = 3;
        v8 = (char *)_os_log_send_and_compose_impl(v7, v186, 0, 0);

        if (v8)
          sub_100007780(v8);
      }
      else
      {

        v8 = 0;
      }
      free(v8);
    }

  }
  byte_1000DF220 = 1;
  qword_1000E0050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v15 = (id)qword_1000E0060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v186 = 0;
    v16 = sub_100007750(1);
    v17 = v15;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v16;
    else
      v18 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      *(_WORD *)__str = 0;
      v19 = (char *)_os_log_send_and_compose_impl(v18, v186, 0, 0);

      if (v19)
        sub_100007780(v19);
    }
    else
    {

      v19 = 0;
    }
    free(v19);
  }

  v20 = sub_100086BFC();
  if (v20)
  {
    v21 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
    CFDictionarySetValue(v20, kUMUserSessionIDKey, v21);
    if (v21)
      CFRelease(v21);
    v22 = CFNumberCreate(0, kCFNumberIntType, &v178);
    CFDictionarySetValue(v20, kUMUserSessionGroupIDKey, v22);
    if (v22)
      CFRelease(v22);
    CFDictionarySetValue(v20, kUMUserSessionNeedsMountKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionTypeKey, kUMUserSessionManagedDevice);
    CFDictionarySetValue(v20, kUMUserSessionForegroundKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionDirtyKey, kCFBooleanFalse);
    CFDictionarySetValue(v20, kUMUserSessionDisabledKey, kCFBooleanFalse);
    v23 = kCFBooleanTrue;
    CFDictionarySetValue(v20, kUMUserSessionLoginUserKey, kCFBooleanTrue);
    CFDictionarySetValue(v20, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E0050);
    CFDictionarySetValue(v20, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
    CFDictionarySetValue(v20, kUMUserSessionisAdminKey, kCFBooleanTrue);
    bzero(__str, 0x400uLL);
    if (valuePtr <= 501)
      v24 = valuePtr;
    else
      v24 = valuePtr - 501;
    snprintf(__str, 0x400uLL, "euser%d", v24);
    v25 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionShortNameKey, v25);
    if (v25)
      CFRelease(v25);
    v172 = a2;
    v26 = CFStringCreateWithCString(0, "Loginwindow", 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionFirstNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionLastNameKey, v26);
    CFDictionarySetValue(v20, kUMUserSessionDisplayNameKey, v26);
    if (v26)
      CFRelease(v26);
    objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled");
    v27 = CFUUIDCreate(0);
    v28 = sub_10001ACF0((uint64_t)NSUUID, v27);
    v10 = objc_claimAutoreleasedReturnValue(v28);
    v29 = CFUUIDCreateString(0, v27);
    CFDictionarySetValue(v20, kUMUserSessionUUIDKey, v29);
    if (v27)
      CFRelease(v27);
    if (v29)
      CFRelease(v29);
    v30 = CFUUIDCreate(0);
    v31 = CFUUIDCreateString(0, v30);
    CFDictionarySetValue(v20, kUMUserSessionAlternateDSIDKey, v31);
    if (v30)
      CFRelease(v30);
    if (v31)
      CFRelease(v31);
    Current = CFAbsoluteTimeGetCurrent();
    v33 = CFDateCreate(kCFAllocatorDefault, Current);
    CFDictionarySetValue(v20, kUMUserSessionCreateTimeStampKey, v33);
    CFDictionarySetValue(v20, kUMUserSessionLoginTimeStampKey, v33);
    if (v33)
      CFRelease(v33);
    qword_1000DF228 = 1001;
    v34 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000DF228);
    CFDictionarySetValue(v20, kUMUserSessionAPNSIDKey, v34);
    CFRelease(v34);
    v35 = CFUUIDCreate(0);
    v36 = CFUUIDCreateString(0, v35);
    if (v35)
      CFRelease(v35);
    bzero(buffer, 0x400uLL);
    CFStringGetCString(v36, buffer, 1024, 0x8000100u);
    if (v36)
      CFRelease(v36);
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/var/%s", buffer);
    v37 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionLibinfoHomeDirKey, v37);
    if (v37)
      CFRelease(v37);
    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/private/var/%s", buffer);
    v38 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(v20, kUMUserSessionHomeDirKey, v38);
    if (v38)
      CFRelease(v38);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v39 = (id)qword_1000E0060;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v186 = 0;
      v40 = sub_100007750(1);
      v41 = v39;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        v42 = v40;
      else
        v42 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v42)
      {
        LOWORD(v185[0]) = 0;
        v43 = (char *)_os_log_send_and_compose_impl(v42, v186, 0, 0);

        if (v43)
          sub_100007780(v43);
      }
      else
      {

        v43 = 0;
      }
      free(v43);
    }

    objc_msgSend((id)qword_1000E0030, "createVolumeMountsDir:", CFSTR("/var/Users"));
    if (sub_100024D68(__str, (char *)valuePtr, v178))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v44 = (id)qword_1000E0060;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v186 = 0;
        v45 = sub_100007750(1);
        v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if ((_DWORD)v46)
        {
          LOWORD(v185[0]) = 0;
          goto LABEL_93;
        }
        goto LABEL_95;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v44 = (id)qword_1000E0060;
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v186 = 0;
        v47 = sub_100007750(1);
        v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v47;
        else
          v46 = v47 & 0xFFFFFFFE;
        if ((_DWORD)v46)
        {
          LOWORD(v185[0]) = 0;
LABEL_93:
          v48 = (char *)_os_log_send_and_compose_impl(v46, v186, 0, 0);

          if (v48)
            sub_100007780(v48);
          goto LABEL_96;
        }
LABEL_95:

        v48 = 0;
LABEL_96:
        free(v48);
      }
    }

    bzero(__str, 0x400uLL);
    snprintf(__str, 0x400uLL, "/private/var/%s/Library/Preferences", buffer);
    v49 = valuePtr;
    v170 = v178;
    v50 = objc_autoreleasePoolPush();
    strcpy((char *)v185, "/private/var/mobile/Library/Preferences/.GlobalPreferences.plist");
    bzero(v186, 0x400uLL);
    snprintf(v186, 0x400uLL, "%s/.GlobalPreferences.plist", __str);
    v51 = open((const char *)v185, 0);
    if (v51 == -1)
    {
      v62 = *__error();
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v63 = (id)qword_1000E0060;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        v181[0] = 0;
        LODWORD(v64) = sub_100007750(1);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          v64 = v64;
        else
          v64 = v64 & 0xFFFFFFFE;
        if ((_DWORD)v64)
        {
          v65 = v50;
          v66 = v63;
          v67 = strerror(v62);
          *(_DWORD *)v187 = 136315394;
          *(_QWORD *)&v187[4] = v185;
          *(_WORD *)&v187[12] = 2080;
          v188 = v67;
          v68 = (char *)_os_log_send_and_compose_impl(v64, v181, 0, 0);

          if (v68)
            sub_100007780(v68);
          v50 = v65;
        }
        else
        {
          v68 = 0;
        }
        free(v68);
      }

    }
    else
    {
      v52 = v51;
      bzero(v186, 0x400uLL);
      snprintf(v186, 0x400uLL, "%s/.GlobalPreferences.plist", __str);
      v53 = open(v186, 514, 384);
      if (v53 != -1)
      {
        v54 = v53;
        v169 = v50;
        v55 = vm_page_size;
        v56 = malloc_type_malloc(vm_page_size, 0x3E5EBCBuLL);
        if (!v56)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v57 = (id)qword_1000E0060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v187 = 0;
            v58 = sub_100007750(1);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              v59 = v58;
            else
              v59 = v58 & 0xFFFFFFFE;
            if ((_DWORD)v59)
            {
              LOWORD(v181[0]) = 0;
              v60 = (const char *)_os_log_send_and_compose_impl(v59, v187, 0, 0);
              v61 = (char *)v60;
              if (v60)
                sub_100007780(v60);
            }
            else
            {
              v61 = 0;
            }
            free(v61);
          }

        }
        for (i = 0; ; i += v81)
        {
          v80 = pread(v52, v56, v55, i);
          if (!v80)
            break;
          v81 = v80;
          if (v80 == -1)
          {
            __error();
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v84 = v169;
            v90 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              goto LABEL_208;
            v181[0] = 0;
            LODWORD(v91) = sub_100007750(1);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              v91 = v91;
            else
              v91 = v91 & 0xFFFFFFFE;
            if ((_DWORD)v91)
            {
LABEL_179:
              v92 = v90;
              v93 = __error();
              v94 = strerror(*v93);
              *(_DWORD *)v187 = 136315138;
              *(_QWORD *)&v187[4] = v94;
              v95 = (char *)_os_log_send_and_compose_impl(v91, v181, 0, 0);

              if (v95)
                sub_100007780(v95);
LABEL_207:
              free(v95);
              goto LABEL_208;
            }
LABEL_191:
            v95 = 0;
            goto LABEL_207;
          }
          v82 = pwrite(v54, v56, v80, i);
          if (v82 == -1)
          {
            __error();
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v84 = v169;
            v90 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              goto LABEL_208;
            v181[0] = 0;
            LODWORD(v91) = sub_100007750(1);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              v91 = v91;
            else
              v91 = v91 & 0xFFFFFFFE;
            if ((_DWORD)v91)
              goto LABEL_179;
            goto LABEL_191;
          }
          v83 = (char *)v82;
          if (v81 != v82)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v90 = (id)qword_1000E0060;
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
            {
              v181[0] = 0;
              v96 = sub_100007750(1);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                v97 = v96;
              else
                v97 = v96 & 0xFFFFFFFE;
              if ((_DWORD)v97)
              {
                *(_DWORD *)v187 = 134218240;
                *(_QWORD *)&v187[4] = v81;
                *(_WORD *)&v187[12] = 2048;
                v188 = v83;
                v98 = (const char *)_os_log_send_and_compose_impl(v97, v181, 0, 0);
                v95 = (char *)v98;
                if (v98)
                  sub_100007780(v98);
              }
              else
              {
                v95 = 0;
              }
              v84 = v169;
              goto LABEL_207;
            }
            v84 = v169;
LABEL_208:

            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v99 = (id)qword_1000E0060;
            if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
            {
              v181[0] = 0;
              v106 = sub_100007750(1);
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                v107 = v106;
              else
                v107 = v106 & 0xFFFFFFFE;
              if ((_DWORD)v107)
              {
                *(_DWORD *)v187 = 136315394;
                *(_QWORD *)&v187[4] = v185;
                *(_WORD *)&v187[12] = 2080;
                v188 = v186;
                v108 = (const char *)_os_log_send_and_compose_impl(v107, v181, 0, 0);
                v109 = (char *)v108;
                if (v108)
                  sub_100007780(v108);
              }
              else
              {
                v109 = 0;
              }
              free(v109);
            }
            v105 = 0;
            goto LABEL_220;
          }
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v84 = v169;
        v85 = (id)qword_1000E0060;
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
        {
          v181[0] = 0;
          v86 = sub_100007750(1);
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
            v87 = v86;
          else
            v87 = v86 & 0xFFFFFFFE;
          if ((_DWORD)v87)
          {
            *(_DWORD *)v187 = 67109376;
            *(_DWORD *)&v187[4] = v49;
            *(_WORD *)&v187[8] = 1024;
            *(_DWORD *)&v187[10] = v170;
            v88 = (const char *)_os_log_send_and_compose_impl(v87, v181, 0, 0);
            v89 = (char *)v88;
            if (v88)
              sub_100007780(v88);
          }
          else
          {
            v89 = 0;
          }
          free(v89);
        }

        if (!chown(v186, v49, v170))
        {
          v105 = 1;
          goto LABEL_221;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v99 = (id)qword_1000E0060;
        if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
        {
          v181[0] = 0;
          LODWORD(v100) = sub_100007750(1);
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
            v100 = v100;
          else
            v100 = v100 & 0xFFFFFFFE;
          if ((_DWORD)v100)
          {
            v101 = v99;
            v102 = __error();
            v103 = strerror(*v102);
            *(_DWORD *)v187 = 136315394;
            *(_QWORD *)&v187[4] = v186;
            *(_WORD *)&v187[12] = 2080;
            v188 = v103;
            v104 = (char *)_os_log_send_and_compose_impl(v100, v181, 0, 0);

            if (v104)
              sub_100007780(v104);
          }
          else
          {
            v104 = 0;
          }
          free(v104);
        }
        v105 = 1;
LABEL_220:

LABEL_221:
        close(v52);
        close(v54);
        objc_autoreleasePoolPop(v84);
        v23 = kCFBooleanTrue;
        if (v105)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v76 = (id)qword_1000E0060;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v186 = 0;
            v110 = sub_100007750(1);
            v76 = v76;
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              v78 = v110;
            else
              v78 = v110 & 0xFFFFFFFE;
            if ((_DWORD)v78)
            {
              LOWORD(v185[0]) = 0;
LABEL_230:
              v111 = (char *)_os_log_send_and_compose_impl(v78, v186, 0, 0);

              if (v111)
                sub_100007780(v111);
              goto LABEL_233;
            }
            goto LABEL_232;
          }
          goto LABEL_234;
        }
LABEL_138:
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v76 = (id)qword_1000E0060;
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v186 = 0;
          v77 = sub_100007750(1);
          v76 = v76;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            v78 = v77;
          else
            v78 = v77 & 0xFFFFFFFE;
          if ((_DWORD)v78)
          {
            LOWORD(v185[0]) = 0;
            goto LABEL_230;
          }
LABEL_232:

          v111 = 0;
LABEL_233:
          free(v111);
        }
LABEL_234:

        if (objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
        {
          v112 = sub_10001CA9C(qword_1000E0318);
          v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
          v173 = 0;
          v114 = objc_msgSend(v113, "createIdentityWithUUID:passcode:existingSession:existingSessionPasscode:error:", v10, 0, 501, 0, &v173);
          v115 = v173;

          if ((v114 & 1) != 0)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v116 = (id)qword_1000E0060;
            if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v186 = 0;
              v117 = sub_100007750(1);
              v118 = v116;
              if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
                v119 = v117;
              else
                v119 = v117 & 0xFFFFFFFE;
              if ((_DWORD)v119)
              {
                LOWORD(v185[0]) = 0;
                v120 = (char *)_os_log_send_and_compose_impl(v119, v186, 0, 0);

                if (v120)
                  sub_100007780(v120);
              }
              else
              {

                v120 = 0;
              }
              free(v120);
            }

            CFDictionarySetValue(v20, kUMUserSessionNeedsCryptoSetupKey, v23);
            goto LABEL_285;
          }
          CFRelease(v20);
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v128 = (id)qword_1000E0060;
          if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
          {
            v185[0] = 0;
            LODWORD(v129) = sub_100007750(1);
            v130 = v128;
            if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
              v129 = v129;
            else
              v129 = v129 & 0xFFFFFFFE;
            if ((_DWORD)v129)
            {
              v131 = -[NSObject code](v115, "code");
              *(_DWORD *)v186 = 134217984;
              *(_QWORD *)&v186[4] = v131;
              v132 = (char *)_os_log_send_and_compose_impl(v129, v185, 0, 0);

              if (v132)
                sub_100007780(v132);
            }
            else
            {

              v132 = 0;
            }
            free(v132);
          }

        }
        else
        {
          KeybagForUser = MKBUserSessionCreateKeybagForUser(0, valuePtr, 0, 0, 0);
          if (!KeybagForUser)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v115 = (id)qword_1000E0060;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v186 = 0;
              v133 = sub_100007750(1);
              v115 = v115;
              if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                v134 = v133;
              else
                v134 = v133 & 0xFFFFFFFE;
              if ((_DWORD)v134)
              {
                LOWORD(v185[0]) = 0;
                v135 = (char *)_os_log_send_and_compose_impl(v134, v186, 0, 0);

                if (v135)
                  sub_100007780(v135);
              }
              else
              {

                v135 = 0;
              }
              free(v135);
            }
LABEL_285:

            CFDictionarySetValue(v20, CFSTR("MKBUserSessionFileSystemSet"), v23);
            if (v172)
            {
              dword_1000DF21C = -1;
              qword_1000E02E8 = v172;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v136 = (id)qword_1000E0060;
              if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
              {
                v185[0] = 0;
                v137 = sub_100007750(1);
                v138 = v136;
                if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
                  v139 = v137;
                else
                  v139 = v137 & 0xFFFFFFFE;
                if ((_DWORD)v139)
                {
                  *(_DWORD *)v186 = 67109376;
                  *(_DWORD *)&v186[4] = v174;
                  *(_WORD *)&v186[8] = 2048;
                  *(_QWORD *)&v186[10] = v172;
                  v140 = (char *)_os_log_send_and_compose_impl(v139, v185, 0, 0);

                  if (v140)
                    sub_100007780(v140);
                }
                else
                {

                  v140 = 0;
                }
                free(v140);
              }

              *(_QWORD *)v186 = v172 << 20;
              v146 = CFNumberCreate(0, kCFNumberLongLongType, v186);
              CFDictionarySetValue(v20, kUMUserSessionQuotaLimitKey, v146);
              if (v146)
                CFRelease(v146);
              v147 = CFNumberCreate(0, kCFNumberLongLongType, v186);
              CFDictionarySetValue(v20, kUMUserSessionEachUserSize, v147);
              if (v147)
                CFRelease(v147);
              v148 = CFNumberCreate(0, kCFNumberIntType, &v174);
              v149 = kUMUserSessionTotalUsers;
            }
            else
            {
              v174 = sub_100022518(v180, &v177, &v176, &v175);
              dword_1000DF21C = v174;
              qword_1000E02E8 = v177;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v141 = (id)qword_1000E0060;
              if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
              {
                v185[0] = 0;
                v142 = sub_100007750(1);
                v143 = v141;
                if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                  v144 = v142;
                else
                  v144 = v142 & 0xFFFFFFFE;
                if ((_DWORD)v144)
                {
                  *(_DWORD *)v186 = 67109376;
                  *(_DWORD *)&v186[4] = v174;
                  *(_WORD *)&v186[8] = 2048;
                  *(_QWORD *)&v186[10] = v177;
                  v145 = (char *)_os_log_send_and_compose_impl(v144, v185, 0, 0);

                  if (v145)
                    sub_100007780(v145);
                }
                else
                {

                  v145 = 0;
                }
                free(v145);
              }

              *(_QWORD *)v186 = 0;
              v150 = CFNumberCreate(0, kCFNumberLongLongType, v186);
              CFDictionarySetValue(v20, kUMUserSessionQuotaLimitKey, v150);
              if (v150)
                CFRelease(v150);
              *(_QWORD *)v186 = 0;
              v151 = CFNumberCreate(0, kCFNumberLongLongType, v186);
              CFDictionarySetValue(v20, kUMUserSessionQuotaSoftLimitKey, v151);
              if (v151)
                CFRelease(v151);
              *(_QWORD *)v186 = 0;
              v152 = CFNumberCreate(0, kCFNumberLongLongType, v186);
              CFDictionarySetValue(v20, kUMUserSessionQuotaUsedKey, v152);
              if (v152)
                CFRelease(v152);
              v153 = CFNumberCreate(0, kCFNumberIntType, &v180);
              CFDictionarySetValue(v20, kUMUserSessionReqTotalUsers, v153);
              if (v153)
                CFRelease(v153);
              v154 = CFNumberCreate(0, kCFNumberIntType, &v174);
              CFDictionarySetValue(v20, kUMUserSessionTotalUsers, v154);
              if (v154)
                CFRelease(v154);
              v155 = CFNumberCreate(0, kCFNumberLongLongType, &v177);
              CFDictionarySetValue(v20, kUMUserSessionEachUserSize, v155);
              if (v155)
                CFRelease(v155);
              v156 = CFNumberCreate(0, kCFNumberLongLongType, &v176);
              CFDictionarySetValue(v20, kUMUserSessionTotalDataSize, v156);
              if (v156)
                CFRelease(v156);
              v148 = CFNumberCreate(0, kCFNumberLongLongType, &v175);
              v149 = kUMUserSessionSystemLoginSize;
            }
            CFDictionarySetValue(v20, v149, v148);
            if (v148)
              CFRelease(v148);
            sub_1000254F0(v20, 1);
            sub_100025574();
            sub_10001DE7C();
            if (qword_1000E0078 != -1)
              dispatch_once(&qword_1000E0078, &stru_1000D1570);
            v157 = (id)qword_1000E0070;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v186 = 0;
              v158 = sub_100007750(1);
              v159 = v157;
              if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
                v160 = v158;
              else
                v160 = v158 & 0xFFFFFFFE;
              if ((_DWORD)v160)
              {
                LODWORD(v185[0]) = 67109120;
                HIDWORD(v185[0]) = valuePtr;
                v161 = (char *)_os_log_send_and_compose_impl(v160, v186, 0, 0);

                if (v161)
                  sub_100007780(v161);
              }
              else
              {

                v161 = 0;
              }
              free(v161);
            }

            if (_SecSystemKeychainTransfer(0))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v162 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                goto LABEL_362;
              *(_QWORD *)v186 = 0;
              v163 = sub_100007750(1);
              if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                v164 = v163;
              else
                v164 = v163 & 0xFFFFFFFE;
              if ((_DWORD)v164)
              {
                LOWORD(v185[0]) = 0;
                goto LABEL_358;
              }
            }
            else
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v162 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                goto LABEL_362;
              *(_QWORD *)v186 = 0;
              v165 = sub_100007750(1);
              if (os_log_type_enabled(v162, OS_LOG_TYPE_DEFAULT))
                v164 = v165;
              else
                v164 = v165 & 0xFFFFFFFE;
              if ((_DWORD)v164)
              {
                LOWORD(v185[0]) = 0;
LABEL_358:
                v166 = (const char *)_os_log_send_and_compose_impl(v164, v186, 0, 0);
                v167 = (char *)v166;
                if (v166)
                  sub_100007780(v166);
                goto LABEL_361;
              }
            }
            v167 = 0;
LABEL_361:
            free(v167);
LABEL_362:

            goto LABEL_363;
          }
          v122 = KeybagForUser;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v123 = (id)qword_1000E0060;
          if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v186 = 0;
            v124 = sub_100007750(1);
            v125 = v123;
            if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
              v126 = v124;
            else
              v126 = v124 & 0xFFFFFFFE;
            if ((_DWORD)v126)
            {
              LODWORD(v185[0]) = 67109120;
              HIDWORD(v185[0]) = v122;
              v127 = (char *)_os_log_send_and_compose_impl(v126, v186, 0, 0);

              if (v127)
                sub_100007780(v127);
            }
            else
            {

              v127 = 0;
            }
            free(v127);
          }

          CFRelease(v20);
        }
LABEL_282:
        v20 = 0;
LABEL_363:

        return v20;
      }
      v69 = *__error();
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v23 = kCFBooleanTrue;
      v70 = (id)qword_1000E0060;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
      {
        v181[0] = 0;
        LODWORD(v71) = sub_100007750(1);
        if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
          v71 = v71;
        else
          v71 = v71 & 0xFFFFFFFE;
        if ((_DWORD)v71)
        {
          v171 = v10;
          v72 = v50;
          v73 = v70;
          v74 = strerror(v69);
          *(_DWORD *)v187 = 136315394;
          *(_QWORD *)&v187[4] = v186;
          *(_WORD *)&v187[12] = 2080;
          v188 = v74;
          v75 = (char *)_os_log_send_and_compose_impl(v71, v181, 0, 0);

          if (v75)
            sub_100007780(v75);
          v50 = v72;
          v10 = v171;
        }
        else
        {
          v75 = 0;
        }
        free(v75);
      }

      close(v52);
    }
    objc_autoreleasePoolPop(v50);
    goto LABEL_138;
  }
  return v20;
}

uint64_t sub_100024D68(const char *a1, char *a2, gid_t a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  char *v20;
  void *v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  char *v26;
  char *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  unsigned int v31;
  id v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  id v41;
  stat v42;
  _BYTE v43[12];
  __int16 v44;
  _BYTE v45[10];
  __int16 v46;
  char *v47;
  uint64_t v48;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  memset(&v42, 0, sizeof(v42));
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v48 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      *(_DWORD *)v43 = 136315138;
      *(_QWORD *)&v43[4] = a1;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v48, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if (!stat(a1, &v42))
    goto LABEL_46;
  v11 = *__error();
  if (v11 != 2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v17 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_75;
    v48 = 0;
    LODWORD(v18) = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v18;
    else
      v18 = v18 & 0xFFFFFFFE;
    if (!(_DWORD)v18)
      goto LABEL_73;
    goto LABEL_30;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v12 = (id)qword_1000E0060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v48 = 0;
    v13 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      *(_DWORD *)v43 = 136315138;
      *(_QWORD *)&v43[4] = a1;
      v15 = (const char *)_os_log_send_and_compose_impl(v14, &v48, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  if ((mkdir(a1, 0x1C0u) & 0x80000000) == 0 || (v11 = *__error(), v11 == 17))
  {
    if (chown(a1, (uid_t)a2, a3))
    {
      v22 = *__error();
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v23 = (id)qword_1000E0060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v48 = 0;
        LODWORD(v24) = sub_100007750(1);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v24 = v24;
        else
          v24 = v24 & 0xFFFFFFFE;
        if ((_DWORD)v24)
        {
          v25 = v23;
          v26 = strerror(v22);
          *(_DWORD *)v43 = 136315906;
          *(_QWORD *)&v43[4] = a1;
          v44 = 1024;
          *(_DWORD *)v45 = (_DWORD)a2;
          *(_WORD *)&v45[4] = 1024;
          *(_DWORD *)&v45[6] = a3;
          v46 = 2080;
          v47 = v26;
          v27 = (char *)_os_log_send_and_compose_impl(v24, &v48, 0, 0);

          if (v27)
            sub_100007780(v27);
        }
        else
        {
          v27 = 0;
        }
        free(v27);
      }

      rmdir(a1);
      return 0;
    }
LABEL_46:
    sub_100021990((uint64_t)a1, a2, a3);
    if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
      return 1;
    v28 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1));
    v29 = sub_10001CA9C(qword_1000E0318);
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    v41 = 0;
    v31 = objc_msgSend(v30, "bootstrapVolumeWithMountPoint:user:error:", v28, a2, &v41);
    v32 = v41;

    if (v31)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v33 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_78;
      *(_QWORD *)v43 = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        LOWORD(v48) = 0;
        v36 = (void *)_os_log_send_and_compose_impl(v35, v43, 0, 0);
        if (!v36)
          goto LABEL_77;
        goto LABEL_65;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v33 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_78;
      *(_QWORD *)v43 = 0;
      LODWORD(v37) = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        v37 = v37;
      else
        v37 = v37 & 0xFFFFFFFE;
      if ((_DWORD)v37)
      {
        v38 = v33;
        v39 = objc_msgSend(v32, "code");
        LODWORD(v48) = 67109120;
        HIDWORD(v48) = v39;
        v36 = (void *)_os_log_send_and_compose_impl(v37, v43, 0, 0);

        if (!v36)
        {
LABEL_77:
          free(v36);
LABEL_78:

          return 1;
        }
LABEL_65:
        sub_100007780((const char *)v36);
        goto LABEL_77;
      }
    }
    v36 = 0;
    goto LABEL_77;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v17 = (id)qword_1000E0060;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v48 = 0;
    LODWORD(v18) = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v18;
    else
      v18 = v18 & 0xFFFFFFFE;
    if (!(_DWORD)v18)
    {
LABEL_73:
      v21 = 0;
LABEL_74:
      free(v21);
      goto LABEL_75;
    }
LABEL_30:
    v19 = v17;
    v20 = strerror(v11);
    *(_DWORD *)v43 = 136315394;
    *(_QWORD *)&v43[4] = a1;
    v44 = 2080;
    *(_QWORD *)v45 = v20;
    v21 = (void *)_os_log_send_and_compose_impl(v18, &v48, 0, 0);

    if (v21)
      sub_100007780((const char *)v21);
    goto LABEL_74;
  }
LABEL_75:

  return 0;
}

void sub_1000254F0(void *value, int a2)
{
  __CFArray *v4;
  __CFDictionary *v5;
  __CFDictionary *v6;

  v4 = (__CFArray *)qword_1000E02B0;
  if (!qword_1000E02B0)
  {
    v4 = sub_100086C90();
    qword_1000E02B0 = (uint64_t)v4;
  }
  CFArrayAppendValue(v4, value);
  qword_1000E02B8 = CFArrayGetCount((CFArrayRef)qword_1000E02B0);
  if (a2 == 1)
  {
    v5 = sub_100039CF0((const __CFDictionary *)value);
    if (v5)
    {
      v6 = v5;
      sub_10003A134((uint64_t)v5);
      CFRelease(v6);
    }
  }
}

void sub_100025574()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  CFIndex v5;
  const void *ValueAtIndex;
  const void *v7;
  CFTypeID v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  const void *v17;

  if (qword_1000E02B0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v0 = (id)qword_1000E0060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v1 = sub_100007750(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
        v2 = v1;
      else
        v2 = v1 & 0xFFFFFFFE;
      if ((_DWORD)v2)
      {
        LOWORD(v14) = 0;
        v3 = (const char *)_os_log_send_and_compose_impl(v2, &v15, 0, 0);
        v4 = (char *)v3;
        if (v3)
          sub_100007780(v3);
      }
      else
      {
        v4 = 0;
      }
      free(v4);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v5);
        if (ValueAtIndex)
        {
          v7 = ValueAtIndex;
          v8 = CFGetTypeID(ValueAtIndex);
          if (v8 == CFDictionaryGetTypeID())
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v9 = (id)qword_1000E0060;
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              v14 = 0;
              v10 = sub_100007750(1);
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
                v11 = v10;
              else
                v11 = v10 & 0xFFFFFFFE;
              if ((_DWORD)v11)
              {
                LODWORD(v15) = 67109378;
                HIDWORD(v15) = v5;
                v16 = 2112;
                v17 = v7;
                v12 = (const char *)_os_log_send_and_compose_impl(v11, &v14, 0, 0);
                v13 = (char *)v12;
                if (v12)
                  sub_100007780(v12);
              }
              else
              {
                v13 = 0;
              }
              free(v13);
            }

          }
        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E02B0) > v5);
    }
  }
}

NSObject *sub_100025800(const __CFDictionary *a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v10;

  v1 = (void *)sub_100025934(a1);
  v2 = v1;
  if (v1)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", kUMUserSessionShortNameKey));
    v4 = v3;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v7 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
      }
      else
      {
        v8 = 0;
      }
      free(v8);
    }
    v4 = 0;
  }

  return v4;
}

CFTypeRef sub_100025934(const __CFDictionary *a1)
{
  int v2;
  id v3;
  void *v5;
  id v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  id v11;
  unsigned int v12;
  const __CFString *v13;
  unsigned int v14;
  unsigned int v15;
  const char *v16;
  char *v17;
  uint64_t v18;

  if (CFDictionaryContainsKey(a1, kUMUserSessionIDKey))
  {
    v2 = sub_100004318(a1, kUMUserSessionIDKey);
    if (v2 != -1)
    {
      v3 = sub_100004400(qword_1000E0038, v2);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue(v3);
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    v18 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
      goto LABEL_44;
LABEL_46:
    v17 = 0;
LABEL_47:
    free(v17);
LABEL_48:

    return 0;
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionAlternateDSIDKey))
  {
    v5 = (void *)sub_100086748(a1, kUMUserSessionAlternateDSIDKey);
    if (v5)
    {
      v6 = sub_1000588A4(qword_1000E0038, v5);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue(v6);
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    v18 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v12;
    else
      v9 = v12 & 0xFFFFFFFE;
    if (!(_DWORD)v9)
      goto LABEL_46;
    goto LABEL_44;
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionUUIDKey))
  {
    v10 = (void *)sub_100086748(a1, kUMUserSessionUUIDKey);
    if (v10)
    {
      v11 = sub_100058A18(qword_1000E0038, v10);
      return (CFTypeRef)objc_claimAutoreleasedReturnValue(v11);
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    v18 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v14;
    else
      v9 = v14 & 0xFFFFFFFE;
    if (!(_DWORD)v9)
      goto LABEL_46;
    goto LABEL_44;
  }
  if (CFDictionaryContainsKey(a1, kUMUserSessionNameKey))
  {
    v13 = (const __CFString *)sub_100086748(a1, kUMUserSessionNameKey);
    if (v13)
      return sub_10001DA18(v13);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_48;
    v18 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v15;
    else
      v9 = v15 & 0xFFFFFFFE;
    if (!(_DWORD)v9)
      goto LABEL_46;
LABEL_44:
    v16 = (const char *)_os_log_send_and_compose_impl(v9, &v18, 0, 0);
    v17 = (char *)v16;
    if (v16)
      sub_100007780(v16);
    goto LABEL_47;
  }
  return 0;
}

uint64_t sub_100025CEC(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  if (a4)
    *a4 = 45;
  return 0;
}

uint64_t sub_100025D00(const __CFString *a1, _DWORD *a2)
{
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  int v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  NSObject *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  NSObject *v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  unsigned int v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  int v36;
  BOOL v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  NSObject *v43;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  char *v47;
  CFDataRef v48;
  NSObject *v49;
  unsigned int v50;
  NSObject *v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  unsigned int v55;
  NSObject *v56;
  uint64_t v57;
  unsigned int v58;
  int v60;
  BOOL v61;
  unsigned int v62;
  char *v63;
  NSObject *v64;
  unsigned int v65;
  NSObject *v66;
  uint64_t v67;
  char *v68;
  NSObject *v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  unsigned int v75;
  NSObject *v76;
  uint64_t v77;
  unsigned int v78;
  NSObject *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  NSObject *v84;
  unsigned int v85;
  NSObject *v86;
  uint64_t v87;
  char *v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  char *v92;
  NSObject *v93;
  unsigned int v94;
  NSObject *v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  unsigned int v99;
  NSObject *v100;
  uint64_t v101;
  char *v102;
  NSObject *v103;
  _BOOL4 v104;
  NSObject *v105;
  uint64_t v106;
  const char *v107;
  NSObject *v108;
  _BOOL4 v109;
  NSObject *v110;
  uint64_t v111;
  const char *v112;
  NSObject *v113;
  unsigned int v114;
  uint64_t v115;
  char *v116;
  unsigned int v117;
  uint64_t v118;
  char *v119;
  const char *v120;
  const char *v121;
  int *v122;
  uint64_t v123;
  char v124;
  UInt8 bytes[4];
  uint64_t v126;
  char v127;
  int v128;
  int v129;
  int v130;

  v128 = 0;
  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v129) = 0;
        goto LABEL_19;
      }
LABEL_149:
      v13 = 0;
LABEL_150:
      free(v13);
    }
LABEL_151:

    v128 = 0;
    if (!a2)
      return 1;
LABEL_152:
    *a2 = v128;
    return 1;
  }
  v127 = 1;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v4 = (id)qword_1000E0060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v5 = sub_100007750(1);
    v6 = v4;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v7 = v5;
    else
      v7 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      v8 = (char *)_os_log_send_and_compose_impl(v7, &v126, 0, 0);

      if (v8)
        sub_100007780(v8);
    }
    else
    {

      v8 = 0;
    }
    free(v8);
  }

  v14 = sub_100080010(&v128, &v127);
  if (v14)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v15 = (id)qword_1000E0060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v16 = sub_100007750(1);
      v15 = v15;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        goto LABEL_41;
      }
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  if (!sub_100027584())
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v58 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v58;
      else
        v11 = v58 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v129) = 0;
LABEL_19:
        v12 = (const char *)_os_log_send_and_compose_impl(v11, &v126, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
        goto LABEL_150;
      }
      goto LABEL_149;
    }
    goto LABEL_151;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v15 = (id)qword_1000E0060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v18 = sub_100007750(1);
    v15 = v15;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      v17 = v18;
    else
      v17 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
LABEL_41:
      v19 = (char *)_os_log_send_and_compose_impl(v17, &v126, 0, 0);

      if (v19)
        sub_100007780(v19);
      goto LABEL_44;
    }
LABEL_43:

    v19 = 0;
LABEL_44:
    free(v19);
  }
LABEL_45:

  v20 = sub_100086E7C();
  if (((_DWORD)v20 - 1) > 4)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v21 = (id)qword_1000E0060;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v24 = sub_100007750(1);
      v21 = v21;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v24;
      else
        v23 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
LABEL_62:
        v25 = (char *)_os_log_send_and_compose_impl(v23, &v126, 0, 0);

        if (v25)
          sub_100007780(v25);
        goto LABEL_65;
      }
LABEL_64:

      v25 = 0;
LABEL_65:
      free(v25);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v21 = (id)qword_1000E0060;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v22 = sub_100007750(1);
      v21 = v21;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        v129 = 67109120;
        v130 = (int)v20;
        LODWORD(v123) = 8;
        v122 = &v129;
        goto LABEL_62;
      }
      goto LABEL_64;
    }
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v26 = (id)qword_1000E0060;
  if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v27 = sub_100007750(1);
    v28 = v26;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      v29 = v27;
    else
      v29 = v27 & 0xFFFFFFFE;
    if ((_DWORD)v29)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      v30 = (char *)_os_log_send_and_compose_impl(v29, &v126, 0, 0);

      if (v30)
        sub_100007780(v30);
    }
    else
    {

      v30 = 0;
    }
    free(v30);
  }

  if ((_DWORD)v20 == 1)
  {
    sub_10001CF20("debug panic boot arg umd-migration-debug=1 (before calling transcribe)");
    goto LABEL_285;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v31 = (id)qword_1000E0060;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v32 = sub_100007750(1);
    v33 = v31;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      v34 = v32;
    else
      v34 = v32 & 0xFFFFFFFE;
    if ((_DWORD)v34)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      v35 = (char *)_os_log_send_and_compose_impl(v34, &v126, 0, 0);

      if (v35)
        sub_100007780(v35);
    }
    else
    {

      v35 = 0;
    }
    free(v35);
  }

  if (v14)
  {
    v128 = 0;
    v36 = sub_100080088(&v128);
    v37 = qword_1000E0068 == -1;
    if (!v36)
      goto LABEL_288;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v38 = (id)qword_1000E0060;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v39 = sub_100007750(1);
      v38 = v38;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        v40 = v39;
      else
        v40 = v39 & 0xFFFFFFFE;
      if ((_DWORD)v40)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        goto LABEL_107;
      }
      goto LABEL_109;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v38 = (id)qword_1000E0060;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v41 = sub_100007750(1);
      v38 = v38;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
        v40 = v41;
      else
        v40 = v41 & 0xFFFFFFFE;
      if ((_DWORD)v40)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
LABEL_107:
        v42 = (char *)_os_log_send_and_compose_impl(v40, &v126, 0, 0);

        if (v42)
          sub_100007780(v42);
        goto LABEL_110;
      }
LABEL_109:

      v42 = 0;
LABEL_110:
      free(v42);
    }
  }

  if ((_DWORD)v20 == 2)
  {
LABEL_285:
    sub_10001CF20("debug panic boot arg umd-migration-debug=2 (after calling transcribe)", v122, v123);
    goto LABEL_286;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v43 = (id)qword_1000E0060;
  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v44 = sub_100007750(1);
    v45 = v43;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      v46 = v44;
    else
      v46 = v44 & 0xFFFFFFFE;
    if ((_DWORD)v46)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      v47 = (char *)_os_log_send_and_compose_impl(v46, &v126, 0, 0);

      if (v47)
        sub_100007780(v47);
    }
    else
    {

      v47 = 0;
    }
    free(v47);
  }

  if (sub_10007E870())
  {
    bytes[0] = 0;
    v48 = CFDataCreate(kCFAllocatorDefault, bytes, 1);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v49 = (id)qword_1000E0060;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v50 = sub_100007750(1);
      v51 = v49;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        v52 = v50;
      else
        v52 = v50 & 0xFFFFFFFE;
      if ((_DWORD)v52)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        v53 = (char *)_os_log_send_and_compose_impl(v52, &v126, 0, 0);

        if (v53)
          sub_100007780(v53);
      }
      else
      {

        v53 = 0;
      }
      free(v53);
    }

    v128 = 0;
    v60 = sub_10007EDFC(a1, (uint64_t)v48, 1, &v128);
    if (v48)
      CFRelease(v48);
    v61 = qword_1000E0068 == -1;
    if (!v60)
      goto LABEL_299;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v54 = (id)qword_1000E0060;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v62 = sub_100007750(1);
      v56 = v54;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        v57 = v62;
      else
        v57 = v62 & 0xFFFFFFFE;
      if ((_DWORD)v57)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
LABEL_167:
        v63 = (char *)_os_log_send_and_compose_impl(v57, &v126, 0, 0);

        if (v63)
          sub_100007780(v63);
        goto LABEL_170;
      }
      goto LABEL_169;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v54 = (id)qword_1000E0060;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v55 = sub_100007750(1);
      v56 = v54;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        v57 = v55;
      else
        v57 = v55 & 0xFFFFFFFE;
      if ((_DWORD)v57)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        goto LABEL_167;
      }
LABEL_169:

      v63 = 0;
LABEL_170:
      free(v63);
    }
  }

  if ((_DWORD)v20 == 3)
  {
LABEL_286:
    sub_10001CF20("debug panic boot arg umd-migration-debug=3 (after calling bind of SDV)", v122, v123);
    goto LABEL_287;
  }
  if (dword_1000E02C0 != 1)
  {
    *(_DWORD *)bytes = 0;
    v124 = 1;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v69 = (id)qword_1000E0060;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v70 = sub_100007750(1);
      v71 = v69;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        v72 = v70;
      else
        v72 = v70 & 0xFFFFFFFE;
      if ((_DWORD)v72)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        v73 = (char *)_os_log_send_and_compose_impl(v72, &v126, 0, 0);

        if (v73)
          sub_100007780(v73);
      }
      else
      {

        v73 = 0;
      }
      free(v73);
    }

    if (sub_10008004C((int *)bytes, &v124))
    {
      v128 = 0;
      if (!sub_100080468(0, &v128))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v113 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
          goto LABEL_334;
        v126 = 0;
        v117 = sub_100007750(1);
        v20 = v113;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v118 = v117;
        else
          v118 = v117 & 0xFFFFFFFE;
        if ((_DWORD)v118)
          goto LABEL_331;

        v119 = 0;
        goto LABEL_333;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v79 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        goto LABEL_234;
      v126 = 0;
      v80 = sub_100007750(1);
      v79 = v79;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        v81 = v80;
      else
        v81 = v80 & 0xFFFFFFFE;
      if ((_DWORD)v81)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        goto LABEL_230;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v79 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        goto LABEL_234;
      v126 = 0;
      v82 = sub_100007750(1);
      v79 = v79;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        v81 = v82;
      else
        v81 = v82 & 0xFFFFFFFE;
      if ((_DWORD)v81)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
LABEL_230:
        v83 = (char *)_os_log_send_and_compose_impl(v81, &v126, 0, 0);

        if (v83)
          sub_100007780(v83);
        goto LABEL_233;
      }
    }

    v83 = 0;
LABEL_233:
    free(v83);
LABEL_234:

    if ((_DWORD)v20 == 4)
      goto LABEL_310;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v84 = (id)qword_1000E0060;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
    {
      v126 = 0;
      v85 = sub_100007750(1);
      v86 = v84;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
        v87 = v85;
      else
        v87 = v85 & 0xFFFFFFFE;
      if ((_DWORD)v87)
      {
        LOWORD(v129) = 0;
        LODWORD(v123) = 2;
        v122 = &v129;
        v88 = (char *)_os_log_send_and_compose_impl(v87, &v126, 0, 0);

        if (v88)
          sub_100007780(v88);
      }
      else
      {

        v88 = 0;
      }
      free(v88);
    }

    v128 = 0;
    v89 = sub_100080D6C("/var/mobile", &v128);
    v90 = qword_1000E0068 == -1;
    if (!v89)
      goto LABEL_311;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v74 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      goto LABEL_259;
    v126 = 0;
    v91 = sub_100007750(1);
    v76 = v74;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      v77 = v91;
    else
      v77 = v91 & 0xFFFFFFFE;
    if (!(_DWORD)v77)
      goto LABEL_257;
    LOWORD(v129) = 0;
    LODWORD(v123) = 2;
    v122 = &v129;
LABEL_255:
    v92 = (char *)_os_log_send_and_compose_impl(v77, &v126, 0, 0);

    if (v92)
      sub_100007780(v92);
    goto LABEL_258;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v64 = (id)qword_1000E0060;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v65 = sub_100007750(1);
    v66 = v64;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      v67 = v65;
    else
      v67 = v65 & 0xFFFFFFFE;
    if ((_DWORD)v67)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      v68 = (char *)_os_log_send_and_compose_impl(v67, &v126, 0, 0);

      if (v68)
        sub_100007780(v68);
    }
    else
    {

      v68 = 0;
    }
    free(v68);
  }

  if (!sub_10008143C(1, &v128))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v74 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
      goto LABEL_259;
    v126 = 0;
    v78 = sub_100007750(1);
    v76 = v74;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      v77 = v78;
    else
      v77 = v78 & 0xFFFFFFFE;
    if (!(_DWORD)v77)
      goto LABEL_257;
    v129 = 67109120;
    v130 = v128;
    LODWORD(v123) = 8;
    v122 = &v129;
    goto LABEL_255;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v74 = (id)qword_1000E0060;
  if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v75 = sub_100007750(1);
    v76 = v74;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
      v77 = v75;
    else
      v77 = v75 & 0xFFFFFFFE;
    if ((_DWORD)v77)
    {
      LOWORD(v129) = 0;
      LODWORD(v123) = 2;
      v122 = &v129;
      goto LABEL_255;
    }
LABEL_257:

    v92 = 0;
LABEL_258:
    free(v92);
  }
LABEL_259:

  v128 = 0;
  if ((_DWORD)v20 == 5)
  {
LABEL_287:
    sub_10001CF20("debug panic boot arg umd-migration-debug=5 (after calling setLastUserOnVolume)", v122, v123);
LABEL_288:
    if (v37)
      goto LABEL_290;
    while (1)
    {
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
LABEL_290:
      v103 = (id)qword_1000E0060;
      if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      {
        v126 = 0;
        v20 = sub_100007750(1);
        v104 = os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT);
        v105 = 0;
        if (v104)
          v106 = v20;
        else
          v106 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v106)
        {
          v129 = 67109120;
          v130 = v128;
          LODWORD(v123) = 8;
          v107 = (const char *)_os_log_send_and_compose_impl(v106, &v126, 0, 0);
          v105 = 0;
          if (v107)
          {
            v20 = v107;
            sub_100007780(v107);
            v105 = v20;
          }
        }
        free(v105);
      }

      sub_10001CF20("VolumeMigration-Step1: APFSVolumeTranscribePFK failed with error:%d, bailing", v128);
LABEL_299:
      if (!v61)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v108 = (id)qword_1000E0060;
      if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
      {
        v126 = 0;
        v20 = sub_100007750(1);
        v109 = os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT);
        v110 = 0;
        if (v109)
          v111 = v20;
        else
          v111 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v111)
        {
          v129 = 67109120;
          v130 = v128;
          LODWORD(v123) = 8;
          v112 = (const char *)_os_log_send_and_compose_impl(v111, &v126, 0, 0);
          v110 = 0;
          if (v112)
          {
            v20 = v112;
            sub_100007780(v112);
            v110 = v20;
          }
        }
        free(v110);
      }

      sub_10001CF20("VolumeMigration-Step2: APFSVolumeEnableUserProtectionWithOptions failed with %d, bailing", v128);
LABEL_310:
      sub_10001CF20("debug panic boot arg umd-migration-debug=4 (after calling UserVolume MigrateMediaKey)", v122, v123);
LABEL_311:
      if (!v90)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v113 = (id)qword_1000E0060;
      if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
      {
        v126 = 0;
        v114 = sub_100007750(1);
        v20 = v113;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v115 = v114;
        else
          v115 = v114 & 0xFFFFFFFE;
        if ((_DWORD)v115)
        {
          v129 = 67109120;
          v130 = v128;
          v120 = (const char *)_os_log_send_and_compose_impl(v115, &v126, 0, 0);

          v116 = 0;
          if (v120)
          {
            sub_100007780(v120);
            v116 = (char *)v120;
          }
        }
        else
        {

          v116 = 0;
        }
        free(v116);
      }

      v118 = sub_10001CF20("VolumeMigration-Step4: Setting Last booted User as Primary User failed with error:%d", v128);
LABEL_331:
      v129 = 67109120;
      v130 = v128;
      LODWORD(v123) = 8;
      v121 = (const char *)_os_log_send_and_compose_impl(v118, &v126, 0, 0);

      v119 = 0;
      if (v121)
      {
        sub_100007780(v121);
        v119 = (char *)v121;
      }
LABEL_333:
      free(v119);
LABEL_334:

      sub_10001CF20("VolumeMigration-Step3: Migrating UserVolume Media Key failed with error:%d, bailing", v128);
    }
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v93 = (id)qword_1000E0060;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v94 = sub_100007750(1);
    v95 = v93;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      v96 = v94;
    else
      v96 = v94 & 0xFFFFFFFE;
    if ((_DWORD)v96)
    {
      LOWORD(v129) = 0;
      v97 = (char *)_os_log_send_and_compose_impl(v96, &v126, 0, 0);

      if (v97)
        sub_100007780(v97);
    }
    else
    {

      v97 = 0;
    }
    free(v97);
  }

  sub_100027740();
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v98 = (id)qword_1000E0060;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
  {
    v126 = 0;
    v99 = sub_100007750(1);
    v100 = v98;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
      v101 = v99;
    else
      v101 = v99 & 0xFFFFFFFE;
    if ((_DWORD)v101)
    {
      LOWORD(v129) = 0;
      v102 = (char *)_os_log_send_and_compose_impl(v101, &v126, 0, 0);

      if (v102)
        sub_100007780(v102);
    }
    else
    {

      v102 = 0;
    }
    free(v102);
  }

  if (a2)
    goto LABEL_152;
  return 1;
}

id sub_100027584()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  char *v8;
  uint64_t v10;

  v0 = sub_100007EF0(qword_1000E0318);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = objc_msgSend(v1, "fileExistsAtPath:isDirectory:", CFSTR("/private/var//keybags/umVolumeMigration-inprogress.kb"), 0);

  if ((_DWORD)v2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
LABEL_17:
        v7 = (const char *)_os_log_send_and_compose_impl(v5, &v10, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
        goto LABEL_20;
      }
LABEL_19:
      v8 = 0;
LABEL_20:
      free(v8);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v6;
      else
        v5 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v5)
        goto LABEL_17;
      goto LABEL_19;
    }
  }

  return v2;
}

id sub_100027740()
{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  char *v8;
  uint64_t v10;

  v0 = sub_100007EF0(qword_1000E0318);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  v2 = objc_msgSend(v1, "removeFileAtPath:error:", CFSTR("/private/var//keybags/umVolumeMigration-inprogress.kb"), 0);

  if ((_DWORD)v2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
LABEL_17:
        v7 = (const char *)_os_log_send_and_compose_impl(v5, &v10, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
        goto LABEL_20;
      }
LABEL_19:
      v8 = 0;
LABEL_20:
      free(v8);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v6;
      else
        v5 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v5)
        goto LABEL_17;
      goto LABEL_19;
    }
  }

  return v2;
}

BOOL sub_1000278FC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  int v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  int v20;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v15 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v17 = 136315138;
      v18 = a1;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v15, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v16 = 0;
  v7 = sub_10007FDCC(a1, &v16);
  if (v7)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v17 = 136315138;
        v18 = a1;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v11;
      else
        v10 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v17 = 136315394;
        v18 = a1;
        v19 = 1024;
        v20 = v16;
LABEL_29:
        v12 = (const char *)_os_log_send_and_compose_impl(v10, &v15, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
        goto LABEL_32;
      }
LABEL_31:
      v13 = 0;
LABEL_32:
      free(v13);
    }
  }

  return v7 != 0;
}

__CFDictionary *sub_100027BD4(const __CFDictionary *a1, UInt8 *a2, CFIndex a3, int *a4)
{
  const __CFDictionary *v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  int v12;
  NSObject *v13;
  const __CFDictionary *v14;
  int *v15;
  const __CFDictionary *v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  char *v25;
  int v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  int v37;
  __CFString *v38;
  CFTypeID v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  NSObject *v47;
  unsigned int v48;
  NSObject *v49;
  uint64_t v50;
  char *v51;
  __CFDictionary *v52;
  NSObject *v53;
  unsigned int v54;
  NSObject *v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unsigned int v59;
  char *v60;
  NSObject *v61;
  unsigned int v62;
  NSObject *v63;
  uint64_t v64;
  unsigned int v65;
  const char *v66;
  char *v67;
  NSObject *v68;
  unsigned int v69;
  NSObject *v70;
  uint64_t v71;
  char *v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  unsigned int v76;
  unsigned int v77;
  char *v78;
  NSObject *v79;
  unsigned int v80;
  NSObject *v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  unsigned int v85;
  NSObject *v86;
  uint64_t v87;
  char *v88;
  int v89;
  int v90;
  CFIndex v91;
  char v92;
  const void *ValueAtIndex;
  CFTypeID v94;
  const __CFNumber *Value;
  const __CFNumber *v96;
  CFTypeID v97;
  NSObject *v98;
  unsigned int v99;
  uint64_t v100;
  const char *v101;
  char *v102;
  NSObject *v103;
  unsigned int v104;
  NSObject *v105;
  uint64_t v106;
  char *v107;
  CFNumberRef v108;
  CFNumberRef v109;
  CFNumberRef v110;
  NSObject *v111;
  unsigned int v112;
  NSObject *v113;
  uint64_t v114;
  char *v115;
  CFStringRef v116;
  __CFString *v117;
  CFTypeID TypeID;
  __CFString *v119;
  CFTypeID v120;
  __CFString *v121;
  CFTypeID v122;
  __CFString *v123;
  CFTypeID v124;
  int v125;
  __CFString *v126;
  CFTypeID v127;
  __CFString *v128;
  CFTypeID v129;
  NSObject *v130;
  const __CFDictionary *v131;
  unsigned int v132;
  NSObject *v133;
  uint64_t v134;
  char *v135;
  const __CFUUID *v136;
  CFStringRef v137;
  __CFString *v138;
  CFTypeID v139;
  NSObject *v140;
  const __CFDictionary *v141;
  unsigned int v142;
  NSObject *v143;
  uint64_t v144;
  char *v145;
  const __CFUUID *v146;
  CFStringRef v147;
  __CFString *v148;
  CFTypeID v149;
  __CFString *v150;
  CFTypeID v151;
  CFAbsoluteTime Current;
  CFDateRef v153;
  CFBooleanRef v154;
  uint64_t v155;
  void *v156;
  int v157;
  int v158;
  int v159;
  int *v160;
  CFNumberRef v161;
  int v162;
  const __CFUUID *v163;
  const __CFString *v164;
  NSObject *v165;
  unsigned int v166;
  NSObject *v167;
  uint64_t v168;
  char *v169;
  NSObject *v170;
  unsigned int v171;
  NSObject *v172;
  uint64_t v173;
  char *v174;
  NSObject *v175;
  unsigned int v176;
  NSObject *v177;
  uint64_t v178;
  const char *v179;
  BOOL v180;
  char *v181;
  const __CFDictionary *v182;
  CFDataRef v183;
  int v184;
  NSObject *v185;
  unsigned int v186;
  NSObject *v187;
  uint64_t v188;
  char *v189;
  NSObject *v190;
  unsigned int v191;
  NSObject *v192;
  uint64_t v193;
  const char *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  void *v198;
  int v199;
  int v200;
  NSObject *v201;
  unsigned int v202;
  NSObject *v203;
  uint64_t v204;
  char *v205;
  int v206;
  uint64_t *v207;
  NSObject *v208;
  unsigned int v209;
  NSObject *v210;
  uint64_t v211;
  CFStringRef v212;
  CFStringRef v213;
  CFDataRef v214;
  _BOOL4 v215;
  NSObject *v216;
  unsigned int v217;
  NSObject *v218;
  uint64_t v219;
  char *v220;
  NSObject *v221;
  unsigned int v222;
  NSObject *v223;
  uint64_t v224;
  char *v225;
  NSObject *v226;
  unsigned int v227;
  uint64_t v228;
  unsigned int v229;
  char *v230;
  char *v231;
  unsigned int v232;
  char *v233;
  CFNumberRef v234;
  CFNumberRef v235;
  __CFDictionary *v236;
  CFNumberRef v237;
  CFNumberRef v238;
  int v239;
  NSObject *v240;
  const __CFDictionary *v241;
  unsigned int v242;
  uint64_t v243;
  char *v244;
  unsigned int v245;
  uint64_t v246;
  unsigned int v247;
  uint64_t v248;
  unsigned int v249;
  const char *v250;
  const __CFString *v252;
  NSObject *v253;
  const __CFDictionary *v254;
  unsigned int v255;
  NSObject *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  void *v260;
  int v261;
  int v262;
  NSObject *v263;
  unsigned int v264;
  uint64_t v265;
  unsigned int v266;
  char *v267;
  uint64_t v268;
  NSObject *v269;
  const __CFDictionary *v270;
  unsigned int v271;
  NSObject *v272;
  uint64_t v273;
  char *v274;
  NSObject *v275;
  unsigned int v276;
  uint64_t v277;
  const char *v278;
  char *v279;
  NSObject *v280;
  const __CFDictionary *v281;
  unsigned int v282;
  NSObject *v283;
  uint64_t v284;
  char *v285;
  const __CFDictionary *v286;
  NSObject *v287;
  int v288;
  unsigned int v289;
  char *v290;
  NSObject *v291;
  unsigned int v292;
  NSObject *v293;
  uint64_t v294;
  char *v295;
  NSObject *v296;
  const __CFDictionary *v297;
  unsigned int v298;
  NSObject *v299;
  uint64_t v300;
  char *v301;
  NSObject *v302;
  unsigned int v303;
  NSObject *v304;
  uint64_t v305;
  char *v306;
  uint64_t v307;
  void *v308;
  void *v309;
  const __CFDictionary *v310;
  unsigned int v311;
  NSObject *v312;
  uint64_t v313;
  char *v314;
  NSObject *v315;
  const __CFDictionary *v316;
  unsigned int v317;
  NSObject *v318;
  uint64_t v319;
  char *v320;
  char *v321;
  uint64_t v322;
  int *v323;
  const __CFDictionary *v324;
  UInt8 *bytes;
  CFIndex v326;
  _QWORD v327[2];
  int v328;
  uint64_t v329;
  _BYTE valuePtr[14];
  uint64_t v331;
  _QWORD v332[2];
  char buffer[779];
  statfs v334;

  v329 = 0;
  v328 = 0;
  if (dword_1000E02C0 != 1 && !_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
  {
    v26 = 45;
LABEL_573:
    v52 = 0;
    if (a4 && v26)
    {
      v52 = 0;
      *a4 = v26;
    }
    return v52;
  }
  v8 = (const __CFDictionary *)sub_100025934(a1);
  v9 = (unint64_t)v8;
  bytes = a2;
  v326 = a3;
  if (!v8)
  {
    if (dword_1000E02C0 == 1)
    {
      v324 = a1;
      if (dword_1000DF21C != -1)
      {
        if (!dword_1000DF21C || !qword_1000E02B8 || qword_1000E02B8 != dword_1000DF21C + 1)
          goto LABEL_227;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v21 = (id)qword_1000E0060;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)buffer = 0;
          v22 = sub_100007750(1);
          v23 = v21;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            v24 = v22;
          else
            v24 = v22 & 0xFFFFFFFE;
          if ((_DWORD)v24)
          {
            v334.f_bsize = 67109376;
            v334.f_iosize = dword_1000DF21C;
            LOWORD(v334.f_blocks) = 2048;
            *(uint64_t *)((char *)&v334.f_blocks + 2) = qword_1000E02B8;
            v25 = (char *)_os_log_send_and_compose_impl(v24, buffer, 0, 0);

            if (v25)
              sub_100007780(v25);
          }
          else
          {

            v25 = 0;
          }
          free(v25);
        }

        if (sub_10002B944() == 1)
        {
          if (qword_1000E02B8 == dword_1000DF21C + 1)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v32 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              goto LABEL_188;
            *(_QWORD *)&v334.f_bsize = 0;
            v75 = sub_100007750(1);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
              v34 = v75;
            else
              v34 = v75 & 0xFFFFFFFE;
            if (!(_DWORD)v34)
              goto LABEL_186;
            *(_WORD *)buffer = 0;
            goto LABEL_50;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v9 = 0;
          v61 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            goto LABEL_201;
          *(_QWORD *)&v334.f_bsize = 0;
          v77 = sub_100007750(1);
          v63 = v61;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            v64 = v77;
          else
            v64 = v77 & 0xFFFFFFFE;
          if ((_DWORD)v64)
          {
            *(_WORD *)buffer = 0;
LABEL_197:
            v78 = (char *)_os_log_send_and_compose_impl(v64, &v334, 0, 0);

            if (v78)
              sub_100007780(v78);
            goto LABEL_200;
          }
          goto LABEL_199;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v32 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          goto LABEL_188;
        *(_QWORD *)&v334.f_bsize = 0;
        v76 = sub_100007750(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          v34 = v76;
        else
          v34 = v76 & 0xFFFFFFFE;
        if (!(_DWORD)v34)
          goto LABEL_186;
        *(_WORD *)buffer = 0;
        goto LABEL_50;
      }
      if (!qword_1000E02E8)
        goto LABEL_227;
      memset(&v334, 0, 512);
      strcpy(buffer, "/private/var");
      v43 = statfs(buffer, &v334);
      if (qword_1000E02B8 == 16)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v44 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          goto LABEL_149;
        *(_QWORD *)&v334.f_bsize = 0;
        v45 = sub_100007750(1);
        v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v45;
        else
          v46 = v45 & 0xFFFFFFFE;
        if ((_DWORD)v46)
        {
          *(_WORD *)buffer = 0;
          goto LABEL_106;
        }
      }
      else
      {
        if (v43)
          v58 = 0;
        else
          v58 = (int64_t)(v334.f_bfree * v334.f_bsize) / 0x100000;
        if (qword_1000E02E8 <= v58)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v61 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
            goto LABEL_201;
          *(_QWORD *)&v334.f_bsize = 0;
          v62 = sub_100007750(1);
          v63 = v61;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            v64 = v62;
          else
            v64 = v62 & 0xFFFFFFFE;
          if ((_DWORD)v64)
          {
            *(_WORD *)buffer = 0;
            goto LABEL_197;
          }
          goto LABEL_199;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v44 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          goto LABEL_149;
        *(_QWORD *)&v334.f_bsize = 0;
        v59 = sub_100007750(1);
        v44 = v44;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
          v46 = v59;
        else
          v46 = v59 & 0xFFFFFFFE;
        if ((_DWORD)v46)
        {
          *(_WORD *)buffer = 0;
LABEL_106:
          v60 = (char *)_os_log_send_and_compose_impl(v46, &v334, 0, 0);

          if (v60)
            sub_100007780(v60);
          goto LABEL_148;
        }
      }

      v60 = 0;
LABEL_148:
      free(v60);
LABEL_149:

      if (sub_10002B944())
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v61 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
          goto LABEL_201;
        *(_QWORD *)&v334.f_bsize = 0;
        v73 = sub_100007750(1);
        v63 = v61;
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          v64 = v73;
        else
          v64 = v73 & 0xFFFFFFFE;
        if ((_DWORD)v64)
        {
          *(_WORD *)buffer = 0;
          goto LABEL_197;
        }
LABEL_199:

        v78 = 0;
LABEL_200:
        free(v78);
LABEL_201:

        goto LABEL_227;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v32 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        goto LABEL_188;
      *(_QWORD *)&v334.f_bsize = 0;
      v74 = sub_100007750(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        v34 = v74;
      else
        v34 = v74 & 0xFFFFFFFE;
      if (!(_DWORD)v34)
        goto LABEL_186;
      *(_WORD *)buffer = 0;
LABEL_50:
      v35 = (const char *)_os_log_send_and_compose_impl(v34, &v334, 0, 0);
      v36 = (char *)v35;
      if (v35)
        sub_100007780(v35);
      goto LABEL_187;
    }
    if (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
    {
      if (qword_1000E02B8 < 15)
      {
        v324 = a1;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v47 = (id)qword_1000E0060;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v334.f_bsize = 0;
          v48 = sub_100007750(1);
          v49 = v47;
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
            v50 = v48;
          else
            v50 = v48 & 0xFFFFFFFE;
          if ((_DWORD)v50)
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = qword_1000E02B8 + 1;
            v51 = (char *)_os_log_send_and_compose_impl(v50, &v334, 0, 0);

            if (v51)
              sub_100007780(v51);
          }
          else
          {

            v51 = 0;
          }
          free(v51);
        }

        if (!dword_1000E02C0)
        {
          dword_1000E02C0 = 2;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v68 = (id)qword_1000E0060;
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)&v334.f_bsize = 0;
            v69 = sub_100007750(1);
            v70 = v68;
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              v71 = v69;
            else
              v71 = v69 & 0xFFFFFFFE;
            if ((_DWORD)v71)
            {
              *(_WORD *)buffer = 0;
              v72 = (char *)_os_log_send_and_compose_impl(v71, &v334, 0, 0);

              if (v72)
                sub_100007780(v72);
            }
            else
            {

              v72 = 0;
            }
            free(v72);
          }

          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v79 = (id)qword_1000E0060;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)&v334.f_bsize = 0;
            v80 = sub_100007750(1);
            v81 = v79;
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
              v82 = v80;
            else
              v82 = v80 & 0xFFFFFFFE;
            if ((_DWORD)v82)
            {
              *(_WORD *)buffer = 0;
              v83 = (char *)_os_log_send_and_compose_impl(v82, &v334, 0, 0);

              if (v83)
                sub_100007780(v83);
            }
            else
            {

              v83 = 0;
            }
            free(v83);
          }

          objc_msgSend((id)qword_1000E0030, "createVolumeMountsDir:", CFSTR("/var/Users"));
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v84 = (id)qword_1000E0060;
          if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)&v334.f_bsize = 0;
            v85 = sub_100007750(1);
            v86 = v84;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
              v87 = v85;
            else
              v87 = v85 & 0xFFFFFFFE;
            if ((_DWORD)v87)
            {
              *(_WORD *)buffer = 0;
              v88 = (char *)_os_log_send_and_compose_impl(v87, &v334, 0, 0);

              if (v88)
                sub_100007780(v88);
            }
            else
            {

              v88 = 0;
            }
            free(v88);
          }

          UMLSetInternalLogHandlers(sub_100007750, sub_100007780);
        }
LABEL_227:
        v323 = a4;
        if (dword_1000E02C0 == 2)
          v89 = 503;
        else
          v89 = 502;
        if (qword_1000E02B0)
        {
          *(_DWORD *)valuePtr = 0;
          do
          {
            v90 = v89;
            if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) < 1)
              break;
            v91 = 0;
            v92 = 0;
            do
            {
              ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v91);
              v94 = CFGetTypeID(ValueAtIndex);
              if (v94 == CFDictionaryGetTypeID())
              {
                Value = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, kUMUserSessionIDKey);
                if (Value
                  && (v96 = Value, v97 = CFGetTypeID(Value), v97 == CFNumberGetTypeID())
                  && CFNumberGetValue(v96, kCFNumberIntType, valuePtr))
                {
                  if (*(_DWORD *)valuePtr == v90)
                    v92 = 1;
                }
                else
                {
                  if (qword_1000E0068 != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v98 = (id)qword_1000E0060;
                  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)&v334.f_bsize = 0;
                    v99 = sub_100007750(1);
                    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
                      v100 = v99;
                    else
                      v100 = v99 & 0xFFFFFFFE;
                    if ((_DWORD)v100)
                    {
                      *(_DWORD *)buffer = 67109120;
                      *(_DWORD *)&buffer[4] = v90;
                      v101 = (const char *)_os_log_send_and_compose_impl(v100, &v334, 0, 0);
                      v102 = (char *)v101;
                      if (v101)
                        sub_100007780(v101);
                    }
                    else
                    {
                      v102 = 0;
                    }
                    free(v102);
                  }

                }
              }
              ++v91;
            }
            while (CFArrayGetCount((CFArrayRef)qword_1000E02B0) > v91);
            v89 = v90 + 1;
          }
          while (v92);
        }
        else
        {
          v90 = v89;
        }
        HIDWORD(v329) = v90;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        a4 = v323;
        a1 = v324;
        v103 = (id)qword_1000E0060;
        if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v334.f_bsize = 0;
          v104 = sub_100007750(1);
          v105 = v103;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
            v106 = v104;
          else
            v106 = v104 & 0xFFFFFFFE;
          if ((_DWORD)v106)
          {
            *(_DWORD *)buffer = 67109120;
            *(_DWORD *)&buffer[4] = HIDWORD(v329);
            v107 = (char *)_os_log_send_and_compose_impl(v106, &v334, 0, 0);

            if (v107)
              sub_100007780(v107);
          }
          else
          {

            v107 = 0;
          }
          free(v107);
        }

        v52 = sub_100086BFC();
        v108 = CFNumberCreate(0, kCFNumberIntType, (char *)&v329 + 4);
        CFDictionarySetValue(v52, kUMUserSessionIDKey, v108);
        CFRelease(v108);
        LODWORD(v329) = HIDWORD(v329);
        v109 = CFNumberCreate(0, kCFNumberIntType, &v329);
        CFDictionarySetValue(v52, kUMUserSessionGroupIDKey, v109);
        CFRelease(v109);
        CFDictionarySetValue(v52, kUMUserSessionTypeKey, kUMUserSessionManagedDevice);
        ++qword_1000DF228;
        v110 = CFNumberCreate(0, kCFNumberLongLongType, &qword_1000DF228);
        CFDictionarySetValue(v52, kUMUserSessionAPNSIDKey, v110);
        CFRelease(v110);
        if (dword_1000E02C0 == 1)
          snprintf((char *)&v334, 0x400uLL, "euser%d");
        else
          snprintf((char *)&v334, 0x400uLL, "user%d");
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v111 = (id)qword_1000E0060;
        if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)valuePtr = 0;
          v112 = sub_100007750(1);
          v113 = v111;
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            v114 = v112;
          else
            v114 = v112 & 0xFFFFFFFE;
          if ((_DWORD)v114)
          {
            *(_DWORD *)buffer = 136315138;
            *(_QWORD *)&buffer[4] = &v334;
            LODWORD(v322) = 12;
            v321 = buffer;
            v115 = (char *)_os_log_send_and_compose_impl(v114, valuePtr, 0, 0);

            if (v115)
              sub_100007780(v115);
          }
          else
          {

            v115 = 0;
          }
          free(v115);
          a1 = v324;
        }

        v116 = CFStringCreateWithCString(0, (const char *)&v334, 0x8000100u);
        CFDictionarySetValue(v52, kUMUserSessionShortNameKey, v116);
        v117 = kUMUserSessionNameKey;
        TypeID = CFStringGetTypeID();
        if (!sub_10002B798(v52, a1, v117, TypeID))
          CFDictionarySetValue(v52, kUMUserSessionNameKey, v116);
        v119 = kUMUserSessionFirstNameKey;
        v120 = CFStringGetTypeID();
        sub_10002B798(v52, a1, v119, v120);
        v121 = kUMUserSessionLastNameKey;
        v122 = CFStringGetTypeID();
        sub_10002B798(v52, a1, v121, v122);
        v123 = kUMUserSessionDisplayNameKey;
        v124 = CFStringGetTypeID();
        sub_10002B798(v52, a1, v123, v124);
        if (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
        {
          if (!CFDictionaryContainsKey(v52, kUMUserSessionNameKey))
            CFDictionarySetValue(v52, kUMUserSessionNameKey, v116);
          if (!CFDictionaryContainsKey(v52, kUMUserSessionDisplayNameKey))
            CFDictionarySetValue(v52, kUMUserSessionDisplayNameKey, v116);
        }
        v125 = CFDictionaryContainsKey(a1, kUMUserSessionLanguageKey);
        v126 = kUMUserSessionLanguageKey;
        if (v125)
        {
          v127 = CFStringGetTypeID();
          sub_10002B798(v52, a1, v126, v127);
          if (!v116)
            goto LABEL_291;
        }
        else
        {
          CFDictionarySetValue(v52, kUMUserSessionLanguageKey, CFSTR("en_US"));
          if (!v116)
          {
LABEL_291:
            if ((_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment") & 1) != 0
              || (v128 = kUMUserSessionUUIDKey,
                  v129 = CFStringGetTypeID(),
                  !sub_10002B798(v52, a1, v128, v129)))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v130 = (id)qword_1000E0060;
              if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
              {
                v131 = a1;
                *(_QWORD *)buffer = 0;
                v132 = sub_100007750(1);
                v133 = v130;
                if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
                  v134 = v132;
                else
                  v134 = v132 & 0xFFFFFFFE;
                if ((_DWORD)v134)
                {
                  *(_WORD *)valuePtr = 0;
                  LODWORD(v322) = 2;
                  v321 = valuePtr;
                  v135 = (char *)_os_log_send_and_compose_impl(v134, buffer, 0, 0);

                  if (v135)
                    sub_100007780(v135);
                }
                else
                {

                  v135 = 0;
                }
                free(v135);
                a1 = v131;
              }

              v136 = CFUUIDCreate(0);
              v137 = CFUUIDCreateString(0, v136);
              CFDictionarySetValue(v52, kUMUserSessionUUIDKey, v137);
            }
            if (!CFDictionaryContainsKey(a1, kUMUserSessionAlternateDSIDKey)
              || (v138 = kUMUserSessionAlternateDSIDKey,
                  v139 = CFStringGetTypeID(),
                  !sub_10002B798(v52, a1, v138, v139)))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v140 = (id)qword_1000E0060;
              if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
              {
                v141 = a1;
                *(_QWORD *)buffer = 0;
                v142 = sub_100007750(1);
                v143 = v140;
                if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
                  v144 = v142;
                else
                  v144 = v142 & 0xFFFFFFFE;
                if ((_DWORD)v144)
                {
                  *(_WORD *)valuePtr = 0;
                  LODWORD(v322) = 2;
                  v321 = valuePtr;
                  v145 = (char *)_os_log_send_and_compose_impl(v144, buffer, 0, 0);

                  if (v145)
                    sub_100007780(v145);
                }
                else
                {

                  v145 = 0;
                }
                free(v145);
                a1 = v141;
              }

              v146 = CFUUIDCreate(0);
              v147 = CFUUIDCreateString(0, v146);
              CFDictionarySetValue(v52, kUMUserSessionAlternateDSIDKey, v147);
              if (v146)
                CFRelease(v146);
              if (v147)
                CFRelease(v147);
            }
            if (CFDictionaryContainsKey(a1, kUMUserSessionFileInfoKey))
            {
              v148 = kUMUserSessionFileInfoKey;
              v149 = CFStringGetTypeID();
              sub_10002B798(v52, a1, v148, v149);
            }
            if (CFDictionaryContainsKey(a1, kUMUserSessionOpaqueDataKey))
            {
              v150 = kUMUserSessionOpaqueDataKey;
              v151 = CFDataGetTypeID();
              sub_10002B798(v52, a1, v150, v151);
            }
            Current = CFAbsoluteTimeGetCurrent();
            v153 = CFDateCreate(kCFAllocatorDefault, Current);
            CFDictionarySetValue(v52, kUMUserSessionCreateTimeStampKey, v153);
            CFDictionarySetValue(v52, kUMUserSessionLoginTimeStampKey, v153);
            if (v153)
              CFRelease(v153);
            CFDictionarySetValue(v52, kUMUserSessionForegroundKey, kCFBooleanFalse);
            if (HIDWORD(v329) == 502)
              v154 = kCFBooleanTrue;
            else
              v154 = kCFBooleanFalse;
            CFDictionarySetValue(v52, kUMUserSessionLoginUserKey, v154);
            CFDictionarySetValue(v52, kUMUserSessionDirtyKey, kCFBooleanFalse);
            CFDictionarySetValue(v52, kUMUserSessionDisabledKey, kCFBooleanFalse);
            v11 = 0;
            goto LABEL_334;
          }
        }
        CFRelease(v116);
        goto LABEL_291;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v27 = (id)qword_1000E0060;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v334.f_bsize = 0;
        v28 = sub_100007750(1);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if ((_DWORD)v29)
        {
          *(_WORD *)buffer = 0;
          v30 = (const char *)_os_log_send_and_compose_impl(v29, &v334, 0, 0);
          v31 = (char *)v30;
          if (v30)
            sub_100007780(v30);
        }
        else
        {
          v31 = 0;
        }
        free(v31);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_134;
      *(_QWORD *)&v334.f_bsize = 0;
      v65 = sub_100007750(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        v42 = v65;
      else
        v42 = v65 & 0xFFFFFFFE;
      if ((_DWORD)v42)
      {
        *(_WORD *)buffer = 0;
LABEL_130:
        v66 = (const char *)_os_log_send_and_compose_impl(v42, &v334, 0, 0);
        v67 = (char *)v66;
        if (v66)
          sub_100007780(v66);
        goto LABEL_133;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_134;
      *(_QWORD *)&v334.f_bsize = 0;
      v41 = sub_100007750(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        v42 = v41;
      else
        v42 = v41 & 0xFFFFFFFE;
      if ((_DWORD)v42)
      {
        *(_WORD *)buffer = 0;
        goto LABEL_130;
      }
    }
    v67 = 0;
LABEL_133:
    free(v67);
LABEL_134:

    v26 = -12;
    goto LABEL_573;
  }
  v10 = sub_1000866F8(v8, CFSTR("MKBUserSessionFileSystemSet"));
  v11 = v10 != 0;
  v12 = sub_100004318((const __CFDictionary *)v9, kUMUserSessionIDKey);
  HIDWORD(v329) = v12;
  LODWORD(v329) = sub_100004318((const __CFDictionary *)v9, kUMUserSessionGroupIDKey);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = (id)qword_1000E0060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    v14 = (const __CFDictionary *)v9;
    v15 = a4;
    v16 = a1;
    *(_QWORD *)&v334.f_bsize = 0;
    v17 = sub_100007750(1);
    v18 = v13;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v19 = v17;
    else
      v19 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v19)
    {
      *(_DWORD *)buffer = 67109120;
      *(_DWORD *)&buffer[4] = v12;
      LODWORD(v322) = 8;
      v321 = buffer;
      v20 = (char *)_os_log_send_and_compose_impl(v19, &v334, 0, 0);

      if (v20)
        sub_100007780(v20);
    }
    else
    {

      v20 = 0;
    }
    a1 = v16;
    free(v20);
    a4 = v15;
    v9 = (unint64_t)v14;
  }

  if (sub_1000866F8((const __CFDictionary *)v9, kUMUserSessionDisabledKey))
  {
    CFRelease((CFTypeRef)v9);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v32 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      goto LABEL_188;
    *(_QWORD *)&v334.f_bsize = 0;
    v33 = sub_100007750(1);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      v34 = v33;
    else
      v34 = v33 & 0xFFFFFFFE;
    if ((_DWORD)v34)
    {
      *(_DWORD *)buffer = 67109120;
      *(_DWORD *)&buffer[4] = HIDWORD(v329);
      goto LABEL_50;
    }
LABEL_186:
    v36 = 0;
LABEL_187:
    free(v36);
LABEL_188:

    v26 = -4;
    goto LABEL_573;
  }
  if (!CFDictionaryContainsKey((CFDictionaryRef)v9, kUMUserSessionLanguageKey))
  {
    v37 = CFDictionaryContainsKey(a1, kUMUserSessionLanguageKey);
    v38 = kUMUserSessionLanguageKey;
    if (v37)
    {
      v39 = CFStringGetTypeID();
      sub_10002B798((__CFDictionary *)v9, a1, v38, v39);
    }
    else
    {
      CFDictionarySetValue((CFMutableDictionaryRef)v9, kUMUserSessionLanguageKey, CFSTR("en_US"));
    }
  }
  if (HIDWORD(v329) == 501)
  {
    v52 = (__CFDictionary *)v9;
    if (v10)
      goto LABEL_334;
    CFDictionarySetValue((CFMutableDictionaryRef)v9, CFSTR("MKBUserSessionFileSystemSet"), kCFBooleanTrue);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v53 = (id)qword_1000E0060;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v334.f_bsize = 0;
      v54 = sub_100007750(1);
      v55 = v53;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        v56 = v54;
      else
        v56 = v54 & 0xFFFFFFFE;
      if ((_DWORD)v56)
      {
        *(_WORD *)buffer = 0;
        LODWORD(v322) = 2;
        v321 = buffer;
        v57 = (char *)_os_log_send_and_compose_impl(v56, &v334, 0, 0);

        if (v57)
          sub_100007780(v57);
      }
      else
      {

        v57 = 0;
      }
      free(v57);
    }

    v11 = 1;
  }
  v52 = (__CFDictionary *)v9;
LABEL_334:
  v155 = sub_10001BE1C(qword_1000E0318);
  v156 = (void *)objc_claimAutoreleasedReturnValue(v155);
  v157 = sub_10001CAE4((uint64_t)v156);
  v158 = HIDWORD(v329);

  if (v157 != v158)
    CFDictionarySetValue(v52, kUMUserSessionForegroundKey, kCFBooleanFalse);
  if (CFDictionaryContainsKey(a1, kUMUserSessionRequiresPasscodeKey))
    v159 = sub_100004318(a1, kUMUserSessionRequiresPasscodeKey);
  else
    v159 = 60;
  v160 = a4;
  v328 = v159;
  if (!v11)
  {
    v163 = CFUUIDCreate(0);
    v164 = CFUUIDCreateString(0, v163);
    if (v163)
      CFRelease(v163);
    bzero(buffer, 0x400uLL);
    CFStringGetCString(v164, buffer, 1024, 0x8000100u);
    if ((_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment") & 1) != 0
      || dword_1000E02C0 == 1 && HIDWORD(v329) != 502)
    {
      LODWORD(v327[0]) = 0;
      if (!objc_msgSend((id)qword_1000E0030, "createVolumeWithSession:size:userName:error:forPersona:userDataVolume:", v52, qword_1000E02E8 << 20, v164, v327, 0, 1, v321, v322))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v170 = (id)qword_1000E0060;
        if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)valuePtr = 0;
          v171 = sub_100007750(1);
          v172 = v170;
          if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
            v173 = v171;
          else
            v173 = v171 & 0xFFFFFFFE;
          if ((_DWORD)v173)
          {
            LODWORD(v332[0]) = 67109120;
            HIDWORD(v332[0]) = v327[0];
            v174 = (char *)_os_log_send_and_compose_impl(v173, valuePtr, 0, 0);

            if (v174)
              sub_100007780(v174);
          }
          else
          {

            v174 = 0;
          }
          free(v174);
        }

        v26 = v327[0];
        if (v52)
          CFRelease(v52);
        if (v164)
          CFRelease(v164);
        a4 = v160;
        goto LABEL_573;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v165 = (id)qword_1000E0060;
      if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)valuePtr = 0;
        v166 = sub_100007750(1);
        v167 = v165;
        if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
          v168 = v166;
        else
          v168 = v166 & 0xFFFFFFFE;
        if ((_DWORD)v168)
        {
          LOWORD(v332[0]) = 0;
          v169 = (char *)_os_log_send_and_compose_impl(v168, valuePtr, 0, 0);

          if (v169)
            sub_100007780(v169);
        }
        else
        {

          v169 = 0;
        }
        free(v169);
      }

      bzero(&v334, 0x400uLL);
      if ((_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment") & 1) != 0)
        strcpy((char *)&v334, "/var/mobile");
      else
        snprintf((char *)&v334, 0x400uLL, "/var/Users/%s", buffer);
      v212 = CFStringCreateWithCString(0, (const char *)&v334, 0x8000100u);
      CFDictionarySetValue(v52, kUMUserSessionLibinfoHomeDirKey, v212);
      if (v212)
        CFRelease(v212);
      bzero(&v334, 0x400uLL);
      snprintf((char *)&v334, 0x400uLL, "/private/var/Users/%s", buffer);
      v213 = CFStringCreateWithCString(0, (const char *)&v334, 0x8000100u);
      CFDictionarySetValue(v52, kUMUserSessionHomeDirKey, v213);
      if (v213)
        CFRelease(v213);
    }
    if (!CFDictionaryContainsKey(v52, kUMUserSessionUserVolumeTypeKey))
      CFDictionarySetValue(v52, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E0050);
    if (v164)
      CFRelease(v164);
    v214 = CFDataCreate(kCFAllocatorDefault, bytes, v326);
    v215 = sub_10002BF74(v52, (uint64_t)v214);
    if (v214)
      CFRelease(v214);
    if (v215)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v216 = (id)qword_1000E0060;
      if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)valuePtr = 0;
        v217 = sub_100007750(1);
        v218 = v216;
        if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
          v219 = v217;
        else
          v219 = v217 & 0xFFFFFFFE;
        if ((_DWORD)v219)
        {
          LOWORD(v332[0]) = 0;
          v220 = (char *)_os_log_send_and_compose_impl(v219, valuePtr, 0, 0);

          if (v220)
            sub_100007780(v220);
        }
        else
        {

          v220 = 0;
        }
        free(v220);
      }

      if (!CFDictionaryContainsKey(v52, kUMUserSessionVolumeDeviceNodeKey))
      {
LABEL_518:
        v207 = &qword_1000E0000;
        if (dword_1000E02C0 != 1)
        {
LABEL_581:
          sub_100024D68((const char *)&v334, (char *)HIDWORD(v329), v329);
          CFDictionarySetValue(v52, CFSTR("MKBUserSessionFileSystemSet"), kCFBooleanTrue);
          goto LABEL_585;
        }
        if (v328 >= 1 && (v234 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v328)) != 0)
        {
          v235 = v234;
          CFDictionarySetValue(v52, kUMUserSessionRequiresPasscodeKey, v234);
          CFRelease(v235);
        }
        else
        {
          v328 = 0;
        }
        v236 = sub_100086BFC();
        v332[0] = v328;
        v237 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, v332);
        if (v237)
        {
          v238 = v237;
          CFDictionarySetValue(v236, CFSTR("GracePeriod"), v237);
          CFRelease(v238);
        }
        v239 = sub_1000A04B4(-HIDWORD(v329), (uint64_t)bytes, v326, v236);
        if (v236)
          CFRelease(v236);
        if (v239)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v240 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
            goto LABEL_580;
          v241 = (const __CFDictionary *)v9;
          v327[0] = 0;
          v242 = sub_100007750(1);
          v240 = v240;
          if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
            v243 = v242;
          else
            v243 = v242 & 0xFFFFFFFE;
          if ((_DWORD)v243)
          {
            *(_DWORD *)valuePtr = 67109632;
            *(_DWORD *)&valuePtr[4] = v328;
            *(_WORD *)&valuePtr[8] = 1024;
            *(_DWORD *)&valuePtr[10] = HIDWORD(v329);
            LOWORD(v331) = 1024;
            *(_DWORD *)((char *)&v331 + 2) = v239;
            v244 = (char *)_os_log_send_and_compose_impl(v243, v327, 0, 0);

            if (v244)
              sub_100007780(v244);
          }
          else
          {

            v244 = 0;
          }
          v9 = (unint64_t)v241;
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v240 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
            goto LABEL_580;
          v327[0] = 0;
          v245 = sub_100007750(1);
          v240 = v240;
          if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
            v246 = v245;
          else
            v246 = v245 & 0xFFFFFFFE;
          if ((_DWORD)v246)
          {
            *(_DWORD *)valuePtr = 67109376;
            *(_DWORD *)&valuePtr[4] = HIDWORD(v329);
            *(_WORD *)&valuePtr[8] = 1024;
            *(_DWORD *)&valuePtr[10] = v328;
            v244 = (char *)_os_log_send_and_compose_impl(v246, v327, 0, 0);

            if (v244)
              sub_100007780(v244);
          }
          else
          {

            v244 = 0;
          }
        }
        free(v244);
LABEL_580:

        v207 = &qword_1000E0000;
        goto LABEL_581;
      }
      if (objc_msgSend((id)qword_1000E0030, "mountVolumeWithSession:mountPath:error:forPersona:", v52, 0, 0, 0))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v226 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          goto LABEL_517;
        *(_QWORD *)valuePtr = 0;
        v227 = sub_100007750(1);
        v226 = v226;
        if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          v228 = v227;
        else
          v228 = v227 & 0xFFFFFFFE;
        if ((_DWORD)v228)
        {
          LOWORD(v332[0]) = 0;
          goto LABEL_494;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v226 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          goto LABEL_517;
        *(_QWORD *)valuePtr = 0;
        v229 = sub_100007750(1);
        v226 = v226;
        if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          v228 = v229;
        else
          v228 = v229 & 0xFFFFFFFE;
        if ((_DWORD)v228)
        {
          LOWORD(v332[0]) = 0;
LABEL_494:
          v230 = (char *)_os_log_send_and_compose_impl(v228, valuePtr, 0, 0);

          if (v230)
            sub_100007780(v230);
          goto LABEL_516;
        }
      }

      v230 = 0;
LABEL_516:
      free(v230);
LABEL_517:

      goto LABEL_518;
    }
    LODWORD(v327[0]) = 0;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v221 = (id)qword_1000E0060;
    if (os_log_type_enabled(v221, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)valuePtr = 0;
      v222 = sub_100007750(1);
      v223 = v221;
      if (os_log_type_enabled(v223, OS_LOG_TYPE_DEFAULT))
        v224 = v222;
      else
        v224 = v222 & 0xFFFFFFFE;
      if ((_DWORD)v224)
      {
        LOWORD(v332[0]) = 0;
        v225 = (char *)_os_log_send_and_compose_impl(v224, valuePtr, 0, 0);

        if (v225)
          sub_100007780(v225);
      }
      else
      {

        v225 = 0;
      }
      free(v225);
    }

    a4 = v160;
    if ((objc_msgSend((id)qword_1000E0030, "deleteVolumeWithSession:error:", v52, v327) & 1) != 0)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v190 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        goto LABEL_570;
      *(_QWORD *)valuePtr = 0;
      v247 = sub_100007750(1);
      v190 = v190;
      if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        v248 = v247;
      else
        v248 = v247 & 0xFFFFFFFE;
      if ((_DWORD)v248)
      {
        LOWORD(v332[0]) = 0;
        goto LABEL_565;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v190 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        goto LABEL_570;
      *(_QWORD *)valuePtr = 0;
      v249 = sub_100007750(1);
      v190 = v190;
      if (os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
        v248 = v249;
      else
        v248 = v249 & 0xFFFFFFFE;
      if ((_DWORD)v248)
      {
        LODWORD(v332[0]) = 67109120;
        HIDWORD(v332[0]) = v327[0];
LABEL_565:
        v250 = (const char *)_os_log_send_and_compose_impl(v248, valuePtr, 0, 0);

        if (v250)
          sub_100007780(v250);
        goto LABEL_568;
      }
    }

    v250 = 0;
LABEL_568:
    v231 = (char *)v250;
    goto LABEL_569;
  }
  if (bytes)
  {
    v161 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v328);
    if (CFDictionaryContainsKey(v52, kUMUserSessionRequiresPasscodeKey))
    {
      v162 = sub_100004318(v52, kUMUserSessionRequiresPasscodeKey);
      if (v162 != v328)
      {
        if (v328)
          CFDictionaryReplaceValue(v52, kUMUserSessionRequiresPasscodeKey, v161);
        else
          CFDictionaryRemoveValue(v52, kUMUserSessionRequiresPasscodeKey);
      }
    }
    else if (v328 >= 1)
    {
      CFDictionarySetValue(v52, kUMUserSessionRequiresPasscodeKey, v161);
    }
    if (v161)
      CFRelease(v161);
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v175 = (id)qword_1000E0060;
  if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)valuePtr = 0;
    v176 = sub_100007750(1);
    v177 = v175;
    if (os_log_type_enabled(v177, OS_LOG_TYPE_DEFAULT))
      v178 = v176;
    else
      v178 = v176 & 0xFFFFFFFE;
    if ((_DWORD)v178)
    {
      v179 = "NULL";
      if (v326)
        v180 = bytes == 0;
      else
        v180 = 1;
      if (!v180)
        v179 = "SECRET";
      *(_DWORD *)buffer = 136315138;
      *(_QWORD *)&buffer[4] = v179;
      v181 = (char *)_os_log_send_and_compose_impl(v178, valuePtr, 0, 0);

      if (v181)
        sub_100007780(v181);
    }
    else
    {

      v181 = 0;
    }
    free(v181);
  }
  v182 = (const __CFDictionary *)v9;

  v183 = CFDataCreate(kCFAllocatorDefault, bytes, v326);
  v184 = sub_10002C7F0(v52, (uint64_t)v183);
  if (v183)
    CFRelease(v183);
  if (!v184)
  {
    a4 = v160;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v190 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v190, OS_LOG_TYPE_DEFAULT))
      goto LABEL_570;
    *(_QWORD *)buffer = 0;
    v191 = sub_100007750(1);
    v192 = v190;
    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
      v193 = v191;
    else
      v193 = v191 & 0xFFFFFFFE;
    if ((_DWORD)v193)
    {
      *(_WORD *)valuePtr = 0;
      v194 = (const char *)_os_log_send_and_compose_impl(v193, buffer, 0, 0);

      if (v194)
        sub_100007780(v194);
    }
    else
    {

      v194 = 0;
    }
    v231 = (char *)v194;
LABEL_569:
    free(v231);
LABEL_570:

    if (v52)
      CFRelease(v52);
    v26 = 22;
    goto LABEL_573;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v185 = (id)qword_1000E0060;
  if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buffer = 0;
    v186 = sub_100007750(1);
    v187 = v185;
    if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
      v188 = v186;
    else
      v188 = v186 & 0xFFFFFFFE;
    if ((_DWORD)v188)
    {
      *(_WORD *)valuePtr = 0;
      v189 = (char *)_os_log_send_and_compose_impl(v188, buffer, 0, 0);

      if (v189)
        sub_100007780(v189);
    }
    else
    {

      v189 = 0;
    }
    free(v189);
  }

  v195 = sub_10001BE1C(qword_1000E0318);
  v196 = (void *)objc_claimAutoreleasedReturnValue(v195);
  if ((sub_10001CA60((uint64_t)v196) & 1) != 0 || HIDWORD(v329) != -1)
  {
    v197 = sub_10001BE1C(qword_1000E0318);
    v198 = (void *)objc_claimAutoreleasedReturnValue(v197);
    v199 = sub_10001CAE4((uint64_t)v198);
    v200 = HIDWORD(v329);

    v180 = v199 == v200;
    v9 = (unint64_t)v182;
    if (v180)
      goto LABEL_418;
    v206 = CFDictionaryContainsKey(v52, kUMUserSessionVolumeDeviceNodeKey);
    v207 = &qword_1000E0000;
    if (!v206)
      goto LABEL_585;
    if (objc_msgSend((id)qword_1000E0030, "mountVolumeWithSession:mountPath:error:forPersona:", v52, 0, 0, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v208 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
        goto LABEL_584;
      *(_QWORD *)buffer = 0;
      v209 = sub_100007750(1);
      v210 = v208;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
        v211 = v209;
      else
        v211 = v209 & 0xFFFFFFFE;
      if ((_DWORD)v211)
      {
        *(_WORD *)valuePtr = 0;
        goto LABEL_513;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v208 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
        goto LABEL_584;
      *(_QWORD *)buffer = 0;
      v232 = sub_100007750(1);
      v210 = v208;
      if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
        v211 = v232;
      else
        v211 = v232 & 0xFFFFFFFE;
      if ((_DWORD)v211)
      {
        *(_WORD *)valuePtr = 0;
LABEL_513:
        v233 = (char *)_os_log_send_and_compose_impl(v211, buffer, 0, 0);

        if (v233)
          sub_100007780(v233);
        goto LABEL_583;
      }
    }

    v233 = 0;
LABEL_583:
    free(v233);
    v9 = (unint64_t)v182;
LABEL_584:

    goto LABEL_585;
  }

  v9 = (unint64_t)v182;
LABEL_418:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v201 = (id)qword_1000E0060;
  if (os_log_type_enabled(v201, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buffer = 0;
    v202 = sub_100007750(1);
    v203 = v201;
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
      v204 = v202;
    else
      v204 = v202 & 0xFFFFFFFE;
    if ((_DWORD)v204)
    {
      *(_WORD *)valuePtr = 0;
      v205 = (char *)_os_log_send_and_compose_impl(v204, buffer, 0, 0);

      if (v205)
        sub_100007780(v205);
    }
    else
    {

      v205 = 0;
    }
    free(v205);
    v9 = (unint64_t)v182;
  }

  v207 = &qword_1000E0000;
LABEL_585:
  v252 = (const __CFString *)sub_100086748(v52, kUMUserSessionHomeDirKey);
  sub_10007E108(v252, HIDWORD(v329), v329);
  if (*((_DWORD *)v207 + 176) != 1)
  {
    if (!_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment")
      || (v259 = sub_10001BE1C(qword_1000E0318),
          v260 = (void *)objc_claimAutoreleasedReturnValue(v259),
          v261 = sub_10001CAE4((uint64_t)v260),
          v262 = HIDWORD(v329),
          v260,
          v261 == v262))
    {
LABEL_675:
      if (v9)
        return v52;
      goto LABEL_676;
    }
    LODWORD(v332[0]) = 0;
    if (objc_msgSend((id)qword_1000E0030, "unmountVolumeWithSession:mountPath:error:force:", v52, 0, v332, 1))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v263 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
        goto LABEL_674;
      *(_QWORD *)valuePtr = 0;
      v264 = sub_100007750(1);
      v263 = v263;
      if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
        v265 = v264;
      else
        v265 = v264 & 0xFFFFFFFE;
      if ((_DWORD)v265)
      {
        LOWORD(v327[0]) = 0;
        goto LABEL_616;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v263 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
        goto LABEL_674;
      *(_QWORD *)valuePtr = 0;
      v266 = sub_100007750(1);
      v263 = v263;
      if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
        v265 = v266;
      else
        v265 = v266 & 0xFFFFFFFE;
      if ((_DWORD)v265)
      {
        LOWORD(v327[0]) = 0;
LABEL_616:
        v267 = (char *)_os_log_send_and_compose_impl(v265, valuePtr, 0, 0);

        if (v267)
          sub_100007780(v267);
        goto LABEL_641;
      }
    }

    v267 = 0;
LABEL_641:
    free(v267);
LABEL_674:

    goto LABEL_675;
  }
  if (!byte_1000DF220)
  {
LABEL_663:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v263 = (id)qword_1000E0060;
    if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
    {
      v286 = (const __CFDictionary *)v9;
      v332[0] = 0;
      LODWORD(v9) = sub_100007750(1);
      v287 = v263;
      if (os_log_type_enabled(v287, OS_LOG_TYPE_DEFAULT))
        v9 = v9;
      else
        v9 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v288 = byte_1000DF220;
        v289 = sub_1000866F8(v52, kUMUserSessionHasSyncBagKey);
        *(_DWORD *)valuePtr = 67109376;
        *(_DWORD *)&valuePtr[4] = v288;
        *(_WORD *)&valuePtr[8] = 1024;
        *(_DWORD *)&valuePtr[10] = v289;
        v290 = (char *)_os_log_send_and_compose_impl(v9, v332, 0, 0);

        if (v290)
          sub_100007780(v290);
      }
      else
      {

        v290 = 0;
      }
      free(v290);
      v9 = (unint64_t)v286;
    }
    goto LABEL_674;
  }
  if (sub_1000866F8(v52, kUMUserSessionHasSyncBagKey) == 1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v253 = (id)qword_1000E0060;
    if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
    {
      v254 = (const __CFDictionary *)v9;
      *(_QWORD *)valuePtr = 0;
      v255 = sub_100007750(1);
      v256 = v253;
      if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
        v257 = v255;
      else
        v257 = v255 & 0xFFFFFFFE;
      if ((_DWORD)v257)
      {
        LOWORD(v332[0]) = 0;
        v258 = (char *)_os_log_send_and_compose_impl(v257, valuePtr, 0, 0);

        if (v258)
          sub_100007780(v258);
      }
      else
      {

        v258 = 0;
      }
      free(v258);
      v9 = (unint64_t)v254;
    }

    v268 = HIDWORD(v329);
    if (sub_1000866F8(v52, kUMUserSessionHasSyncBagKey))
    {
      if (MKBUserSessionVerifySyncBagForUser(v52, v268))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v269 = (id)qword_1000E0060;
        if (os_log_type_enabled(v269, OS_LOG_TYPE_DEFAULT))
        {
          v270 = (const __CFDictionary *)v9;
          *(_QWORD *)valuePtr = 0;
          v271 = sub_100007750(1);
          v272 = v269;
          if (os_log_type_enabled(v272, OS_LOG_TYPE_DEFAULT))
            v273 = v271;
          else
            v273 = v271 & 0xFFFFFFFE;
          if ((_DWORD)v273)
          {
            LODWORD(v332[0]) = 67109120;
            HIDWORD(v332[0]) = HIDWORD(v329);
            v274 = (char *)_os_log_send_and_compose_impl(v273, valuePtr, 0, 0);

            if (v274)
              sub_100007780(v274);
          }
          else
          {

            v274 = 0;
          }
          free(v274);
          v9 = (unint64_t)v270;
        }

        CFDictionarySetValue(v52, kUMUserSessionHasSyncBagKey, kCFBooleanFalse);
        goto LABEL_661;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v275 = (id)qword_1000E0060;
      if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)valuePtr = 0;
        v276 = sub_100007750(1);
        if (os_log_type_enabled(v275, OS_LOG_TYPE_DEFAULT))
          v277 = v276;
        else
          v277 = v276 & 0xFFFFFFFE;
        if ((_DWORD)v277)
        {
          LOWORD(v332[0]) = 0;
          v278 = (const char *)_os_log_send_and_compose_impl(v277, valuePtr, 0, 0);
          v279 = (char *)v278;
          if (v278)
            sub_100007780(v278);
        }
        else
        {
          v279 = 0;
        }
        free(v279);
      }

    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v280 = (id)qword_1000E0060;
    if (os_log_type_enabled(v280, OS_LOG_TYPE_DEFAULT))
    {
      v281 = (const __CFDictionary *)v9;
      *(_QWORD *)valuePtr = 0;
      v282 = sub_100007750(1);
      v283 = v280;
      if (os_log_type_enabled(v283, OS_LOG_TYPE_DEFAULT))
        v284 = v282;
      else
        v284 = v282 & 0xFFFFFFFE;
      if ((_DWORD)v284)
      {
        LODWORD(v332[0]) = 67109120;
        HIDWORD(v332[0]) = HIDWORD(v329);
        v285 = (char *)_os_log_send_and_compose_impl(v284, valuePtr, 0, 0);

        if (v285)
          sub_100007780(v285);
      }
      else
      {

        v285 = 0;
      }
      free(v285);
      v9 = (unint64_t)v281;
    }

  }
LABEL_661:
  if (!byte_1000DF220 || sub_1000866F8(v52, kUMUserSessionHasSyncBagKey))
    goto LABEL_663;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v296 = (id)qword_1000E0060;
  if (os_log_type_enabled(v296, OS_LOG_TYPE_DEFAULT))
  {
    v297 = (const __CFDictionary *)v9;
    *(_QWORD *)valuePtr = 0;
    v298 = sub_100007750(1);
    v299 = v296;
    if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
      v300 = v298;
    else
      v300 = v298 & 0xFFFFFFFE;
    if ((_DWORD)v300)
    {
      LODWORD(v332[0]) = 67109120;
      HIDWORD(v332[0]) = HIDWORD(v329);
      v301 = (char *)_os_log_send_and_compose_impl(v300, valuePtr, 0, 0);

      if (v301)
        sub_100007780(v301);
    }
    else
    {

      v301 = 0;
    }
    free(v301);
    v9 = (unint64_t)v297;
  }

  if (sub_10002D534(v52, HIDWORD(v329)))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v263 = (id)qword_1000E0060;
    if (os_log_type_enabled(v263, OS_LOG_TYPE_DEFAULT))
    {
      v310 = (const __CFDictionary *)v9;
      *(_QWORD *)valuePtr = 0;
      v311 = sub_100007750(1);
      v312 = v263;
      if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
        v313 = v311;
      else
        v313 = v311 & 0xFFFFFFFE;
      if ((_DWORD)v313)
      {
        LODWORD(v332[0]) = 67109120;
        HIDWORD(v332[0]) = HIDWORD(v329);
        v314 = (char *)_os_log_send_and_compose_impl(v313, valuePtr, 0, 0);

        if (v314)
          sub_100007780(v314);
      }
      else
      {

        v314 = 0;
      }
      free(v314);
      v9 = (unint64_t)v310;
    }
    goto LABEL_674;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v315 = (id)qword_1000E0060;
  if (os_log_type_enabled(v315, OS_LOG_TYPE_DEFAULT))
  {
    v316 = (const __CFDictionary *)v9;
    *(_QWORD *)valuePtr = 0;
    v317 = sub_100007750(1);
    v318 = v315;
    if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
      v319 = v317;
    else
      v319 = v317 & 0xFFFFFFFE;
    if ((_DWORD)v319)
    {
      LODWORD(v332[0]) = 67109120;
      HIDWORD(v332[0]) = HIDWORD(v329);
      v320 = (char *)_os_log_send_and_compose_impl(v319, valuePtr, 0, 0);

      if (v320)
        sub_100007780(v320);
    }
    else
    {

      v320 = 0;
    }
    free(v320);
    v9 = (unint64_t)v316;
  }

  CFDictionarySetValue(v52, kUMUserSessionHasSyncBagKey, kCFBooleanTrue);
  if (!v9)
  {
LABEL_676:
    sub_1000254F0(v52, 1);
    sub_10005A0A8(qword_1000E0038, v52);
    sub_100025574();
    sub_10001DE7C();
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v291 = (id)qword_1000E0070;
    if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)valuePtr = 0;
      v292 = sub_100007750(1);
      v293 = v291;
      if (os_log_type_enabled(v293, OS_LOG_TYPE_DEFAULT))
        v294 = v292;
      else
        v294 = v292 & 0xFFFFFFFE;
      if ((_DWORD)v294)
      {
        LODWORD(v332[0]) = 67109120;
        HIDWORD(v332[0]) = HIDWORD(v329);
        v295 = (char *)_os_log_send_and_compose_impl(v294, valuePtr, 0, 0);

        if (v295)
          sub_100007780(v295);
      }
      else
      {

        v295 = 0;
      }
      free(v295);
    }

    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v302 = (id)qword_1000E0060;
    if (os_log_type_enabled(v302, OS_LOG_TYPE_DEFAULT))
    {
      v332[0] = 0;
      v303 = sub_100007750(1);
      v304 = v302;
      if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
        v305 = v303;
      else
        v305 = v303 & 0xFFFFFFFE;
      if ((_DWORD)v305)
      {
        *(_DWORD *)valuePtr = 136315394;
        *(_QWORD *)&valuePtr[4] = "loadUserSession";
        *(_WORD *)&valuePtr[12] = 2080;
        v331 = kMobileKeyBagUserChangedNotificationToken;
        v306 = (char *)_os_log_send_and_compose_impl(v305, v332, 0, 0);

        if (v306)
          sub_100007780(v306);
      }
      else
      {

        v306 = 0;
      }
      free(v306);
    }

    v307 = sub_10001BEE8(qword_1000E0318);
    v308 = (void *)objc_claimAutoreleasedReturnValue(v307);
    v309 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", kMobileKeyBagUserChangedNotificationToken));
    objc_msgSend(v308, "post:", v309);

  }
  return v52;
}

uint64_t sub_10002B798(__CFDictionary *a1, CFDictionaryRef theDict, void *key, uint64_t a4)
{
  uint64_t result;
  const void *Value;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  int v16;
  void *v17;

  result = CFDictionaryContainsKey(theDict, key);
  if ((_DWORD)result)
  {
    Value = CFDictionaryGetValue(theDict, key);
    if (CFGetTypeID(Value) == a4)
    {
      if (CFDictionaryContainsKey(a1, key))
        CFDictionaryReplaceValue(a1, key, Value);
      else
        CFDictionarySetValue(a1, key, Value);
      return 1;
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          v16 = 138412290;
          v17 = key;
          v13 = (const char *)_os_log_send_and_compose_impl(v12, &v15, 0, 0);
          v14 = (char *)v13;
          if (v13)
            sub_100007780(v13);
        }
        else
        {
          v14 = 0;
        }
        free(v14);
      }

      return 0;
    }
  }
  return result;
}

uint64_t sub_10002B944()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  CFIndex v5;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v7;
  CFTypeID v8;
  id v9;
  const __CFDictionary *v10;
  const __CFDictionary *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  int valuePtr;
  int v40;
  int v41;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  valuePtr = 0;
  v0 = (id)qword_1000E0060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v38 = 0;
    v1 = sub_100007750(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      v2 = v1;
    else
      v2 = v1 & 0xFFFFFFFE;
    if ((_DWORD)v2)
    {
      LOWORD(v40) = 0;
      v3 = (const char *)_os_log_send_and_compose_impl(v2, &v38, 0, 0);
      v4 = (char *)v3;
      if (v3)
        sub_100007780(v3);
    }
    else
    {
      v4 = 0;
    }
    free(v4);
  }

  if (!qword_1000E02D8)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(v40) = 0;
        v15 = (const char *)_os_log_send_and_compose_impl(v14, &v38, 0, 0);
        v16 = (char *)v15;
        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v16 = 0;
      }
      free(v16);
    }

    return 0;
  }
  if (CFArrayGetCount((CFArrayRef)qword_1000E02D8) < 1)
    return 0;
  v5 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02D8, v5);
    if (!ValueAtIndex)
      goto LABEL_21;
    v7 = ValueAtIndex;
    v8 = CFGetTypeID(ValueAtIndex);
    if (v8 != CFNumberGetTypeID())
      goto LABEL_21;
    if (!CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
      goto LABEL_21;
    v9 = sub_100004400(qword_1000E0038, valuePtr);
    v10 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v9);
    if (!v10)
      goto LABEL_21;
    v11 = v10;
    if (!sub_1000866F8(v10, kUMUserSessionDirtyKey))
      break;
    CFRelease(v11);
LABEL_21:
    if (CFArrayGetCount((CFArrayRef)qword_1000E02D8) <= ++v5)
      return 0;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v19 = (id)qword_1000E0060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v38 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      v40 = 67109120;
      v41 = valuePtr;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, &v38, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v24 = (id)qword_1000E0060;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v38 = 0;
    v25 = sub_100007750(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if ((_DWORD)v26)
    {
      v40 = 67109120;
      v41 = valuePtr;
      v27 = (const char *)_os_log_send_and_compose_impl(v26, &v38, 0, 0);
      v28 = (char *)v27;
      if (v27)
        sub_100007780(v27);
    }
    else
    {
      v28 = 0;
    }
    free(v28);
  }

  if (sub_10002E778((uint64_t)v11) == 1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v30 = sub_100007750(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v31 = v30;
      else
        v31 = v30 & 0xFFFFFFFE;
      if ((_DWORD)v31)
      {
        v40 = 67109120;
        v41 = valuePtr;
        v32 = (const char *)_os_log_send_and_compose_impl(v31, &v38, 0, 0);
        v33 = (char *)v32;
        if (v32)
          sub_100007780(v32);
      }
      else
      {
        v33 = 0;
      }
      free(v33);
    }
    v17 = 1;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      v38 = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        v40 = 67109120;
        v41 = valuePtr;
        v36 = (const char *)_os_log_send_and_compose_impl(v35, &v38, 0, 0);
        v37 = (char *)v36;
        if (v36)
          sub_100007780(v36);
      }
      else
      {
        v37 = 0;
      }
      free(v37);
    }
    v17 = 0;
  }

  CFRelease(v11);
  return v17;
}

BOOL sub_10002BF74(const __CFDictionary *a1, uint64_t a2)
{
  void *v4;
  int v5;
  int v6;
  id v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  int v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned __int8 v33;
  void *v34;
  NSObject *v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  id v43;
  char *v44;
  _BOOL8 v45;
  uint64_t v46;
  int v47;
  NSObject *v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  NSObject *v53;
  unsigned int v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v61;
  void *v62;
  void *v63;
  _QWORD v64[2];
  _BYTE v65[12];
  __int16 v66;
  int v67;
  __int16 v68;
  id v69;

  v4 = (void *)sub_100086748(a1, kUMUserSessionUUIDKey);
  v5 = sub_100004318(a1, kMKBUserSessionIDKey);
  if (v4)
  {
    v6 = v5;
    v7 = sub_10001ACA4((uint64_t)NSUUID, v4);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (v8)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v9 = (id)qword_1000E0060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v65 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LOWORD(v64[0]) = 0;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, v65, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v24 = (id)qword_1000E0060;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v64[0] = 0;
        v25 = sub_100007750(1);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          v26 = v25;
        else
          v26 = v25 & 0xFFFFFFFE;
        if ((_DWORD)v26)
        {
          *(_DWORD *)v65 = 138412546;
          *(_QWORD *)&v65[4] = v8;
          v66 = 1024;
          v67 = v6;
          v27 = (const char *)_os_log_send_and_compose_impl(v26, v64, 0, 0);
          v28 = (char *)v27;
          if (v27)
            sub_100007780(v27);
        }
        else
        {
          v28 = 0;
        }
        free(v28);
      }

      v29 = _os_feature_enabled_impl("UserManagement", "LocalUserEnrollment");
      v30 = sub_10001CA9C(qword_1000E0318);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v32 = v31;
      if (v29)
      {
        v63 = 0;
        v33 = objc_msgSend(v31, "createIdentityWithUUID:passcode:existingSession:existingSessionPasscode:error:", v8, 0, sub_100058C2C(qword_1000E0038), a2, &v63);
        v34 = v63;
      }
      else
      {
        v62 = 0;
        v33 = objc_msgSend(v31, "createIdentityWithUUID:passcode:existingSession:existingSessionPasscode:error:", v8, a2, 502, 0, &v62);
        v34 = v62;
      }
      v14 = v34;

      if ((v33 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v35 = (id)qword_1000E0060;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v65 = 0;
          v36 = sub_100007750(1);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            v37 = v36;
          else
            v37 = v36 & 0xFFFFFFFE;
          if ((_DWORD)v37)
          {
            LOWORD(v64[0]) = 0;
            v38 = (const char *)_os_log_send_and_compose_impl(v37, v65, 0, 0);
            v39 = (char *)v38;
            if (v38)
              sub_100007780(v38);
          }
          else
          {
            v39 = 0;
          }
          free(v39);
        }

        if (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
          v46 = 0;
        else
          v46 = a2;
        v47 = sub_10002C7F0(a1, v46);
        if (v47)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v48 = (id)qword_1000E0060;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v65 = 0;
            v49 = sub_100007750(1);
            if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
              v50 = v49;
            else
              v50 = v49 & 0xFFFFFFFE;
            if ((_DWORD)v50)
            {
              LOWORD(v64[0]) = 0;
              v51 = (const char *)_os_log_send_and_compose_impl(v50, v65, 0, 0);
              v52 = (char *)v51;
              if (v51)
                sub_100007780(v51);
            }
            else
            {
              v52 = 0;
            }
            free(v52);
          }
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v53 = (id)qword_1000E0060;
          if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v65 = 0;
            v54 = sub_100007750(1);
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
              v55 = v54;
            else
              v55 = v54 & 0xFFFFFFFE;
            if ((_DWORD)v55)
            {
              LOWORD(v64[0]) = 0;
              v56 = (const char *)_os_log_send_and_compose_impl(v55, v65, 0, 0);
              v57 = (char *)v56;
              if (v56)
                sub_100007780(v56);
            }
            else
            {
              v57 = 0;
            }
            free(v57);
          }

          v58 = sub_10001CA9C(qword_1000E0318);
          v48 = objc_claimAutoreleasedReturnValue(v58);
          v61 = v14;
          -[NSObject deleteIdentity:error:](v48, "deleteIdentity:error:", v8, &v61);
          v59 = v61;

          v14 = v59;
        }
        v45 = v47 != 0;

        goto LABEL_105;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        v64[0] = 0;
        LODWORD(v41) = sub_100007750(1);
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          v41 = v41;
        else
          v41 = v41 & 0xFFFFFFFE;
        if ((_DWORD)v41)
        {
          v42 = v40;
          v43 = -[NSObject code](v14, "code");
          *(_DWORD *)v65 = 138412802;
          *(_QWORD *)&v65[4] = v8;
          v66 = 1024;
          v67 = v6;
          v68 = 2048;
          v69 = v43;
          v44 = (char *)_os_log_send_and_compose_impl(v41, v64, 0, 0);

          if (v44)
            sub_100007780(v44);
        }
        else
        {
          v44 = 0;
        }
        free(v44);
      }

    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v65 = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LOWORD(v64[0]) = 0;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, v65, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }

      v14 = 0;
    }
    v45 = 0;
LABEL_105:

    goto LABEL_106;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v14 = (id)qword_1000E0060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v65 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v16)
    {
      LOWORD(v64[0]) = 0;
      v17 = (const char *)_os_log_send_and_compose_impl(v16, v65, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }
  v45 = 0;
LABEL_106:

  return v45;
}

uint64_t sub_10002C7F0(const __CFDictionary *a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  const void *v11;
  const void *v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  void *v25;
  unsigned __int8 v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  char *v32;
  unsigned int v33;
  const char *v34;
  char *v35;
  NSObject *v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  void *v43;
  unsigned int v44;
  id v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  uint64_t v52;
  NSObject *v53;
  id v54;
  char *v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  uint64_t v61;
  void *v62;
  unsigned int v63;
  NSObject *v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  uint64_t v70;
  NSObject *v71;
  id v72;
  char *v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  NSObject *v77;
  unsigned int v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  NSObject *v82;
  id v83;
  id v84;
  id v85;
  id v86;
  id v87;
  _BYTE v88[18];
  uint64_t v89;

  v4 = (void *)sub_100086748(a1, kUMUserSessionUUIDKey);
  v5 = sub_100004318(a1, kMKBUserSessionIDKey);
  if ((_DWORD)v5 != sub_100058C2C(qword_1000E0038))
  {
    if (v4)
    {
      v11 = sub_100086748(a1, kUMUserSessionVolumeDeviceNodeKey);
      if (v11)
      {
        v12 = v11;
        v13 = sub_10001ACA4((uint64_t)NSUUID, v4);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        if (v14)
        {
          v15 = v14;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v16 = (id)qword_1000E0060;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v88 = 0;
            v17 = sub_100007750(1);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              v18 = v17;
            else
              v18 = v17 & 0xFFFFFFFE;
            if ((_DWORD)v18)
            {
              LOWORD(v89) = 0;
              v19 = (const char *)_os_log_send_and_compose_impl(v18, v88, 0, 0);
              v20 = (char *)v19;
              if (v19)
                sub_100007780(v19);
            }
            else
            {
              v20 = 0;
            }
            free(v20);
          }

          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v37 = (id)qword_1000E0060;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v88 = 0;
            v38 = sub_100007750(1);
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              v39 = v38;
            else
              v39 = v38 & 0xFFFFFFFE;
            if ((_DWORD)v39)
            {
              LODWORD(v89) = 67109120;
              HIDWORD(v89) = v5;
              v40 = (const char *)_os_log_send_and_compose_impl(v39, v88, 0, 0);
              v41 = (char *)v40;
              if (v40)
                sub_100007780(v40);
            }
            else
            {
              v41 = 0;
            }
            free(v41);
          }

          v42 = sub_10001CA9C(qword_1000E0318);
          v43 = (void *)objc_claimAutoreleasedReturnValue(v42);
          v86 = 0;
          v44 = objc_msgSend(v43, "loginIdentity:intoSession:passcode:error:", v15, v5, a2, &v86);
          v45 = v86;

          if (!v44)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v51 = (id)qword_1000E0060;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            {
              v89 = 0;
              LODWORD(v52) = sub_100007750(1);
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                v52 = v52;
              else
                v52 = v52 & 0xFFFFFFFE;
              if ((_DWORD)v52)
              {
                v53 = v51;
                v54 = objc_msgSend(v45, "code");
                *(_DWORD *)v88 = 134217984;
                *(_QWORD *)&v88[4] = v54;
                v55 = (char *)_os_log_send_and_compose_impl(v52, &v89, 0, 0);

                if (v55)
                  sub_100007780(v55);
              }
              else
              {
                v55 = 0;
              }
              free(v55);
            }

            v28 = 0;
            v27 = v45;
            goto LABEL_68;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v46 = (id)qword_1000E0060;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v88 = 0;
            v47 = sub_100007750(1);
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              v48 = v47;
            else
              v48 = v47 & 0xFFFFFFFE;
            if ((_DWORD)v48)
            {
              LOWORD(v89) = 0;
              v49 = (const char *)_os_log_send_and_compose_impl(v48, v88, 0, 0);
              v50 = (char *)v49;
              if (v49)
                sub_100007780(v49);
            }
            else
            {
              v50 = 0;
            }
            free(v50);
          }

          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v56 = (id)qword_1000E0060;
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
          {
            v89 = 0;
            v57 = sub_100007750(1);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
              v58 = v57;
            else
              v58 = v57 & 0xFFFFFFFE;
            if ((_DWORD)v58)
            {
              *(_DWORD *)v88 = 138412546;
              *(_QWORD *)&v88[4] = v12;
              *(_WORD *)&v88[12] = 1024;
              *(_DWORD *)&v88[14] = v5;
              v59 = (const char *)_os_log_send_and_compose_impl(v58, &v89, 0, 0);
              v60 = (char *)v59;
              if (v59)
                sub_100007780(v59);
            }
            else
            {
              v60 = 0;
            }
            free(v60);
          }

          v61 = sub_10001CA9C(qword_1000E0318);
          v62 = (void *)objc_claimAutoreleasedReturnValue(v61);
          v85 = v45;
          v63 = objc_msgSend(v62, "mapVolume:toSession:withPersona:error:", v12, v5, 0, &v85);
          v27 = v85;

          if (v63)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v64 = (id)qword_1000E0060;
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v88 = 0;
              v65 = sub_100007750(1);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                v66 = v65;
              else
                v66 = v65 & 0xFFFFFFFE;
              if ((_DWORD)v66)
              {
                LOWORD(v89) = 0;
                v67 = (const char *)_os_log_send_and_compose_impl(v66, v88, 0, 0);
                v68 = (char *)v67;
                if (v67)
                  sub_100007780(v67);
              }
              else
              {
                v68 = 0;
              }
              free(v68);
            }

            v28 = 1;
            goto LABEL_68;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v69 = (id)qword_1000E0060;
          if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          {
            v89 = 0;
            LODWORD(v70) = sub_100007750(1);
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              v70 = v70;
            else
              v70 = v70 & 0xFFFFFFFE;
            if ((_DWORD)v70)
            {
              v71 = v69;
              v72 = objc_msgSend(v27, "code");
              *(_DWORD *)v88 = 134217984;
              *(_QWORD *)&v88[4] = v72;
              v73 = (char *)_os_log_send_and_compose_impl(v70, &v89, 0, 0);

              if (v73)
                sub_100007780(v73);
            }
            else
            {
              v73 = 0;
            }
            free(v73);
          }

          v74 = sub_10001CA9C(qword_1000E0318);
          v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
          v84 = 0;
          v76 = objc_msgSend(v75, "unloadIdentityFromSession:error:", v5, &v84);
          v27 = v84;

          if (v76)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v77 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              goto LABEL_163;
            *(_QWORD *)v88 = 0;
            v78 = sub_100007750(1);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              v79 = v78;
            else
              v79 = v78 & 0xFFFFFFFE;
            if ((_DWORD)v79)
            {
              LOWORD(v89) = 0;
              v80 = (void *)_os_log_send_and_compose_impl(v79, v88, 0, 0);
              if (!v80)
                goto LABEL_162;
              goto LABEL_160;
            }
          }
          else
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v77 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              goto LABEL_163;
            v89 = 0;
            LODWORD(v81) = sub_100007750(1);
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
              v81 = v81;
            else
              v81 = v81 & 0xFFFFFFFE;
            if ((_DWORD)v81)
            {
              v82 = v77;
              v83 = objc_msgSend(v27, "code");
              *(_DWORD *)v88 = 134217984;
              *(_QWORD *)&v88[4] = v83;
              v80 = (void *)_os_log_send_and_compose_impl(v81, &v89, 0, 0);

              if (!v80)
              {
LABEL_162:
                free(v80);
LABEL_163:

                goto LABEL_67;
              }
LABEL_160:
              sub_100007780((const char *)v80);
              goto LABEL_162;
            }
          }
          v80 = 0;
          goto LABEL_162;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v15 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
LABEL_64:
          v27 = 0;
LABEL_67:
          v28 = 0;
LABEL_68:

          goto LABEL_69;
        }
        *(_QWORD *)v88 = 0;
        v33 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v22 = v33;
        else
          v22 = v33 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          LOWORD(v89) = 0;
LABEL_60:
          v34 = (const char *)_os_log_send_and_compose_impl(v22, v88, 0, 0);
          v35 = (char *)v34;
          if (v34)
            sub_100007780(v34);
          goto LABEL_63;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v15 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_64;
        *(_QWORD *)v88 = 0;
        v23 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v22 = v23;
        else
          v22 = v23 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          LOWORD(v89) = 0;
          goto LABEL_60;
        }
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v15 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      *(_QWORD *)v88 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        LOWORD(v89) = 0;
        goto LABEL_60;
      }
    }
    v35 = 0;
LABEL_63:
    free(v35);
    goto LABEL_64;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v88 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      LOWORD(v89) = 0;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, v88, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  v24 = sub_10001CA9C(qword_1000E0318);
  v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
  v87 = 0;
  v26 = objc_msgSend(v25, "unlockIdentityInSession:passcode:error:", v5, a2, &v87);
  v27 = v87;

  if ((v26 & 1) == 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v15 = (id)qword_1000E0060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v89 = 0;
      LODWORD(v29) = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v29 = v29;
      else
        v29 = v29 & 0xFFFFFFFE;
      if ((_DWORD)v29)
      {
        v30 = v15;
        v31 = objc_msgSend(v27, "code");
        *(_DWORD *)v88 = 67109376;
        *(_DWORD *)&v88[4] = -(int)v5;
        *(_WORD *)&v88[8] = 2048;
        *(_QWORD *)&v88[10] = v31;
        v32 = (char *)_os_log_send_and_compose_impl(v29, &v89, 0, 0);

        if (v32)
          sub_100007780(v32);
      }
      else
      {
        v32 = 0;
      }
      free(v32);
    }
    goto LABEL_67;
  }
  v28 = 1;
LABEL_69:

  return v28;
}

uint64_t sub_10002D534(const __CFDictionary *a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int SyncBagForUser;
  int v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  __int16 v20;
  int v21;

  if (sub_1000866F8(a1, kUMUserSessionHasSyncBagKey))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    v19 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      LOWORD(v18) = 0;
      goto LABEL_10;
    }
    goto LABEL_30;
  }
  SyncBagForUser = MKBUserSessionCreateSyncBagForUser(a1, a2);
  if (!SyncBagForUser)
  {
    CFDictionarySetValue(a1, kUMUserSessionHasSyncBagKey, kCFBooleanTrue);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_32;
    v19 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v15;
    else
      v6 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      LOWORD(v18) = 0;
LABEL_10:
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v19, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
      goto LABEL_31;
    }
LABEL_30:
    v8 = 0;
LABEL_31:
    free(v8);
LABEL_32:
    v16 = 0;
    goto LABEL_36;
  }
  v10 = SyncBagForUser;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v4 = (id)qword_1000E0060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      LODWORD(v19) = 67109376;
      HIDWORD(v19) = a2;
      v20 = 1024;
      v21 = v10;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, &v18, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }
  v16 = 0xFFFFFFFFLL;
LABEL_36:

  return v16;
}

uint64_t sub_10002D82C()
{
  uint64_t v0;
  _QWORD v2[6];
  _QWORD v3[4];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = -1;
  v3[0] = 0;
  v3[1] = v3;
  v3[2] = 0x2020000000;
  v3[3] = 0;
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_10002D8E0;
  v2[3] = &unk_1000D1388;
  v2[4] = v3;
  v2[5] = &v4;
  dispatch_sync((dispatch_queue_t)qword_1000E0320, v2);
  v0 = *((unsigned int *)v5 + 6);
  _Block_object_dispose(v3, 8);
  _Block_object_dispose(&v4, 8);
  return v0;
}

void sub_10002D8E0(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  unsigned int v25;
  const char *v26;
  char *v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  _BYTE v31[24];

  dispatch_assert_queue_V2((dispatch_queue_t)qword_1000E0320);
  if (byte_1000E0048 == 1)
  {
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v2 = (id)qword_1000E0070;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      goto LABEL_56;
    *(_QWORD *)v31 = 0;
    v3 = sub_100007750(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
      goto LABEL_52;
    goto LABEL_54;
  }
  v5 = sub_100004400(qword_1000E0038, 502);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6;
  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (dword_1000E02C0 == 1)
  {
    if (!v8)
      sub_1000ACF40(v6, v7);
    goto LABEL_14;
  }
  if (v8)
  {
LABEL_14:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v31 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v30) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, v31, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    goto LABEL_35;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v14 = (id)qword_1000E0060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v31 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v16)
    {
      LOWORD(v30) = 0;
      v17 = (const char *)_os_log_send_and_compose_impl(v16, v31, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = sub_100022BC0(-1, 0);
LABEL_35:
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      goto LABEL_56;
    *(_QWORD *)v31 = 0;
    v25 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v25;
    else
      v4 = v25 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
LABEL_52:
      LOWORD(v30) = 0;
      v26 = (const char *)_os_log_send_and_compose_impl(v4, v31, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
      goto LABEL_55;
    }
LABEL_54:
    v27 = 0;
LABEL_55:
    free(v27);
LABEL_56:

    return;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v19 = (id)qword_1000E0060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      *(_DWORD *)v31 = 138412290;
      *(_QWORD *)&v31[4] = v22;
      v23 = (const char *)_os_log_send_and_compose_impl(v21, &v30, 0, 0);
      v24 = (char *)v23;
      if (v23)
        sub_100007780(v23);
    }
    else
    {
      v24 = 0;
    }
    free(v24);
  }

  v28 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v28, "switchToUser:", *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  v29 = *(const void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  if (v29)
  {
    CFRelease(v29);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_10002DE14()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  int v2;
  CFAbsoluteTime Current;
  CFDateRef v4;
  CFDateRef v5;
  int v6;
  id v7;
  __CFDictionary *v8;
  __CFDictionary *v9;
  __CFString *v10;

  v0 = (const __CFDictionary *)sub_10001D538();
  if (v0)
  {
    v1 = v0;
    v2 = sub_100004318(v0, kUMUserSessionIDKey);
    Current = CFAbsoluteTimeGetCurrent();
    v4 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v4)
    {
      v5 = v4;
      if (v2 == 502)
      {
        v6 = sub_100004318(v1, kUMUserSessionPreviousLoggedinIDKey);
        if (v6 != -1)
        {
          v7 = sub_100004400(qword_1000E0038, v6);
          v8 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(v7);
          if (v8)
          {
            v9 = v8;
            CFDictionarySetValue(v8, kUMUserSessionLogoutEndTimeKey, v5);
            CFRelease(v9);
          }
        }
      }
      else
      {
        if (CFDictionaryContainsKey(v1, kUMUserSessionFirstLoginEndTimeKey))
          v10 = kUMUserSessionCachedLoginEndTimeKey;
        else
          v10 = kUMUserSessionFirstLoginEndTimeKey;
        CFDictionarySetValue(v1, v10, v5);
      }
      CFRelease(v5);
    }
    CFRelease(v1);
  }
}

void sub_10002DF24()
{
  uint64_t v0;
  __CFDictionary *v1;
  CFAbsoluteTime Current;
  CFDateRef v3;
  CFDateRef v4;

  v0 = sub_10001D538();
  if (v0)
  {
    v1 = (__CFDictionary *)v0;
    Current = CFAbsoluteTimeGetCurrent();
    v3 = CFDateCreate(kCFAllocatorDefault, Current);
    if (v3)
    {
      v4 = v3;
      CFDictionarySetValue(v1, kUMUserSessionLogoutStartTimeKey, v3);
      if (CFDictionaryContainsKey(v1, kUMUserSessionLogoutEndTimeKey))
        CFDictionaryRemoveValue(v1, kUMUserSessionLogoutEndTimeKey);
      CFRelease(v4);
    }
    CFRelease(v1);
  }
}

void sub_10002DFC4()
{
  uint64_t v0;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  uint64_t v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  const __CFDictionary *v12;
  const __CFDictionary *v13;
  int v14;
  int v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint64_t v26;

  v0 = sub_100058C2C(qword_1000E0038);
  if ((_DWORD)v0 == 502)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v1 = (id)qword_1000E0060;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 0;
      v2 = sub_100007750(1);
      if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
        v3 = v2;
      else
        v3 = v2 & 0xFFFFFFFE;
      if ((_DWORD)v3)
      {
        LOWORD(v26) = 0;
        v4 = (const char *)_os_log_send_and_compose_impl(v3, &v23, 0, 0);
        v5 = (char *)v4;
        if (v4)
          sub_100007780(v4);
      }
      else
      {
        v5 = 0;
      }
      free(v5);
    }

    return;
  }
  v6 = v0;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v7 = (id)qword_1000E0060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LODWORD(v26) = 67109120;
      HIDWORD(v26) = v6;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, &v23, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  v12 = (const __CFDictionary *)sub_10001D538();
  if (v12)
  {
    v13 = v12;
    if (CFDictionaryContainsKey(v12, kUMUserSessionSyncMachServicesKey)
      || CFDictionaryContainsKey(v13, kUMUserSessionHasSyncBagKey) != 1)
    {
      goto LABEL_50;
    }
    v14 = sub_10002E3AC(v13, v6, 0);
    if (v14)
    {
      v15 = v14;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v16 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_49;
      v26 = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        LODWORD(v23) = 67109376;
        HIDWORD(v23) = v6;
        v24 = 1024;
        v25 = v15;
        v19 = &v26;
        goto LABEL_45;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v16 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_49;
      v23 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v20;
      else
        v18 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        LOWORD(v26) = 0;
        v19 = &v23;
LABEL_45:
        v21 = (const char *)_os_log_send_and_compose_impl(v18, v19, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
        goto LABEL_48;
      }
    }
    v22 = 0;
LABEL_48:
    free(v22);
LABEL_49:

LABEL_50:
    CFRelease(v13);
  }
}

uint64_t sub_10002E3AC(const __CFDictionary *a1, uint64_t a2, int a3)
{
  int v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  const char *v16;
  char *v17;
  uint64_t result;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  int v26;

  if (sub_1000866F8(a1, kUMUserSessionHasSyncBagKey))
  {
    if (a3)
    {
      v6 = sub_100037430(a1, a2);
      if (!v6)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v7 = (id)qword_1000E0060;
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          v24 = 0;
          v8 = sub_100007750(1);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
            v9 = v8;
          else
            v9 = v8 & 0xFFFFFFFE;
          if ((_DWORD)v9)
          {
            LOWORD(v25) = 0;
            goto LABEL_30;
          }
          goto LABEL_32;
        }
        goto LABEL_34;
      }
    }
    else
    {
      v6 = 5;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v7 = (id)qword_1000E0060;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v24 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v15;
      else
        v9 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v25 = 67109120;
        v26 = v6;
LABEL_30:
        v16 = (const char *)_os_log_send_and_compose_impl(v9, &v24, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
        goto LABEL_33;
      }
LABEL_32:
      v17 = 0;
LABEL_33:
      free(v17);
    }
LABEL_34:

    result = MKBUserSessionRemoveSyncBagForUser(a1, a2);
    if ((_DWORD)result)
      return result;
    goto LABEL_39;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v10 = (id)qword_1000E0060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      LOWORD(v25) = 0;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, &v24, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

LABEL_39:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v19 = (id)qword_1000E0060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      LOWORD(v25) = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, &v24, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

  CFDictionarySetValue(a1, kUMUserSessionHasSyncBagKey, kCFBooleanFalse);
  return 0;
}

uint64_t sub_10002E778(uint64_t result)
{
  const __CFDictionary *v1;
  NSObject *v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  void *v17;
  int v18;
  unsigned int v19;
  std::__fs::filesystem::path *v20;
  unsigned int v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  unsigned int v35;
  NSObject *v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  int v44;
  int v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  char *v49;
  unsigned int v50;
  uint64_t v51;
  char *v52;
  NSObject *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  const char *v57;
  char *v58;
  void *v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  NSObject *v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  NSObject *v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  char *v73;
  NSObject *v74;
  unsigned int v75;
  NSObject *v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  unsigned int v80;
  NSObject *v81;
  uint64_t v82;
  char *v83;
  std::error_code *v84;
  int v85;
  uint64_t v86;
  int *v87;
  char *v88;
  uint64_t v89;
  unsigned int v90;
  char *v91;
  NSObject *v92;
  unsigned int v93;
  uint64_t v94;
  const char *v95;
  char *v96;
  NSObject *v97;
  unsigned int v98;
  uint64_t v99;
  const char *v100;
  char *v101;
  NSObject *v102;
  unsigned int v103;
  uint64_t v104;
  unsigned int v105;
  char *v106;
  NSObject *v107;
  unsigned int v108;
  NSObject *v109;
  uint64_t v110;
  char *v111;
  int v112;
  int v113;
  NSObject *v114;
  unsigned int v115;
  uint64_t v116;
  std::__fs::filesystem::path *v117;
  unsigned int v118;
  char *v119;
  NSObject *v120;
  unsigned int v121;
  NSObject *v122;
  uint64_t v123;
  const char *v124;
  char *v125;
  NSObject *v126;
  unsigned int v127;
  uint64_t v128;
  const char *v129;
  char *v130;
  int v131;
  int v132;
  NSObject *v133;
  unsigned int v134;
  uint64_t v135;
  NSObject *v136;
  char *v137;
  char *v138;
  uint64_t v139;
  void *v140;
  void *v141;
  void *v142;
  NSObject *v143;
  unsigned int v144;
  NSObject *v145;
  uint64_t v146;
  char *v147;
  NSObject *v148;
  unsigned int v149;
  NSObject *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  void *v154;
  void *v155;
  unsigned int v156;
  uint64_t v157;
  const char *v158;
  const char *v159;
  std::__fs::filesystem::path *p_from;
  uint64_t v161;
  _BYTE v162[12];
  __int16 v163;
  std::__fs::filesystem::path *v164;
  __int16 v165;
  char *v166;
  _QWORD v167[2];
  std::__fs::filesystem::path __str[42];
  std::__fs::filesystem::path __from;

  if (!result)
    return result;
  v1 = (const __CFDictionary *)result;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
    v3 = sub_100007750(1);
    v4 = v2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = v3;
    else
      v5 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
      *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v1;
      LODWORD(v161) = 12;
      p_from = &__from;
      v6 = (char *)_os_log_send_and_compose_impl(v5, __str, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {

      v6 = 0;
    }
    free(v6);
  }

  v7 = sub_1000866F8(v1, kUMUserSessionForegroundKey);
  v8 = sub_1000866F8(v1, CFSTR("MKBUserSessionFileSystemSet"));
  v9 = sub_100004318(v1, kUMUserSessionIDKey);
  v10 = sub_1000866F8(v1, kUMUserSessionDirtyKey);
  v11 = sub_1000866F8(v1, kUMUserSessionisPrimaryKey);
  if (dword_1000E02C0 == 1)
  {
    if ((_DWORD)v9 == 502)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v12 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        goto LABEL_57;
      __from.__pn_.__r_.__value_.__r.__words[0] = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
LABEL_41:
        v20 = &__from;
        goto LABEL_53;
      }
      goto LABEL_55;
    }
LABEL_44:
    bzero(&__from, 0x400uLL);
    sub_100086788(v1, kUMUserSessionHomeDirKey, (char *)&__from, 1024);
    if (v7)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v12 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        goto LABEL_57;
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v21;
      else
        v14 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        *(_WORD *)v162 = 0;
        v20 = __str;
LABEL_53:
        v22 = (const char *)_os_log_send_and_compose_impl(v14, v20, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
        goto LABEL_56;
      }
      goto LABEL_55;
    }
    if (v10)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v24 = (id)qword_1000E0060;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        v25 = sub_100007750(1);
        v24 = v24;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          v26 = v25;
        else
          v26 = v25 & 0xFFFFFFFE;
        if ((_DWORD)v26)
        {
          *(_DWORD *)v162 = 67109120;
          *(_DWORD *)&v162[4] = v9;
          LODWORD(v161) = 8;
          p_from = (std::__fs::filesystem::path *)v162;
          goto LABEL_77;
        }
        goto LABEL_88;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v24 = (id)qword_1000E0060;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        v27 = sub_100007750(1);
        v24 = v24;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          v26 = v27;
        else
          v26 = v27 & 0xFFFFFFFE;
        if ((_DWORD)v26)
        {
          *(_DWORD *)v162 = 67109120;
          *(_DWORD *)&v162[4] = v9;
          LODWORD(v161) = 8;
          p_from = (std::__fs::filesystem::path *)v162;
LABEL_77:
          v28 = (char *)_os_log_send_and_compose_impl(v26, __str, 0, 0);

          if (v28)
            sub_100007780(v28);
          goto LABEL_89;
        }
LABEL_88:

        v28 = 0;
LABEL_89:
        free(v28);
      }
    }

    sub_1000214F4(v9);
    sub_100021840(v9);
    sub_1000306FC(v9, 0);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v34 = (id)qword_1000E0060;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v35 = sub_100007750(1);
      v36 = v34;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        v37 = v35;
      else
        v37 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v37)
      {
        *(_WORD *)v162 = 0;
        LODWORD(v161) = 2;
        p_from = (std::__fs::filesystem::path *)v162;
        v38 = (char *)_os_log_send_and_compose_impl(v37, __str, 0, 0);

        if (v38)
          sub_100007780(v38);
      }
      else
      {

        v38 = 0;
      }
      free(v38);
    }

    sleep(1u);
    CFDictionarySetValue(v1, kUMUserSessionForegroundKey, kCFBooleanFalse);
    if (!byte_1000DF220 || (_DWORD)v9 == 502)
    {
LABEL_184:
      if (!v8)
        goto LABEL_241;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v69 = (id)qword_1000E0060;
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v162 = 0;
        v70 = sub_100007750(1);
        v71 = v69;
        if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
          v72 = v70;
        else
          v72 = v70 & 0xFFFFFFFE;
        if ((_DWORD)v72)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 136315394;
          *(std::string::size_type *)((char *)__str[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)&__from;
          WORD2(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 6) = v9;
          v73 = (char *)_os_log_send_and_compose_impl(v72, v162, 0, 0);

          if (v73)
            sub_100007780(v73);
        }
        else
        {

          v73 = 0;
        }
        free(v73);
      }

      if (sub_100031520((const char *)&__from))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v74 = (id)qword_1000E0060;
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v75 = sub_100007750(1);
          v76 = v74;
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
            v77 = v75;
          else
            v77 = v75 & 0xFFFFFFFE;
          if ((_DWORD)v77)
          {
            *(_WORD *)v162 = 0;
            v78 = (char *)_os_log_send_and_compose_impl(v77, __str, 0, 0);

            if (v78)
              sub_100007780(v78);
          }
          else
          {

            v78 = 0;
          }
          free(v78);
        }
        goto LABEL_240;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v79 = (id)qword_1000E0060;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        v80 = sub_100007750(1);
        v81 = v79;
        if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
          v82 = v80;
        else
          v82 = v80 & 0xFFFFFFFE;
        if ((_DWORD)v82)
        {
          *(_WORD *)v162 = 0;
          v83 = (char *)_os_log_send_and_compose_impl(v82, __str, 0, 0);

          if (v83)
            sub_100007780(v83);
        }
        else
        {

          v83 = 0;
        }
        free(v83);
      }

      mkpath_np("/private/var/DELETED", 0x1C0u);
      snprintf((char *)__str, 0x400uLL, "/private/var/DELETED/euser_%d", v9);
      rename(&__from, __str, v84);
      if (v85)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v74 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          goto LABEL_240;
        v167[0] = 0;
        LODWORD(v86) = sub_100007750(1);
        v74 = v74;
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          v86 = v86;
        else
          v86 = v86 & 0xFFFFFFFE;
        if ((_DWORD)v86)
        {
          v87 = __error();
          v88 = strerror(*v87);
          *(_DWORD *)v162 = 136315650;
          *(_QWORD *)&v162[4] = &__from;
          v163 = 2080;
          v164 = __str;
          v165 = 2080;
          v166 = v88;
          v89 = v86;
          goto LABEL_236;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v74 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          goto LABEL_240;
        v167[0] = 0;
        v90 = sub_100007750(1);
        v74 = v74;
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
          v89 = v90;
        else
          v89 = v90 & 0xFFFFFFFE;
        if ((_DWORD)v89)
        {
          *(_DWORD *)v162 = 136315394;
          *(_QWORD *)&v162[4] = &__from;
          v163 = 2080;
          v164 = __str;
LABEL_236:
          v91 = (char *)_os_log_send_and_compose_impl(v89, v167, 0, 0);

          if (v91)
            sub_100007780(v91);
          goto LABEL_239;
        }
      }

      v91 = 0;
LABEL_239:
      free(v91);
LABEL_240:

      CFDictionarySetValue(v1, CFSTR("MKBUserSessionFileSystemSet"), kCFBooleanFalse);
LABEL_241:
      if (_SecSyncDeleteUserViews(v9, 0))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v92 = (id)qword_1000E0060;
        if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v93 = sub_100007750(1);
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
            v94 = v93;
          else
            v94 = v93 & 0xFFFFFFFE;
          if ((_DWORD)v94)
          {
            *(_WORD *)v162 = 0;
            v95 = (const char *)_os_log_send_and_compose_impl(v94, __str, 0, 0);
            v96 = (char *)v95;
            if (v95)
              sub_100007780(v95);
          }
          else
          {
            v96 = 0;
          }
          free(v96);
        }

        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v102 = (id)qword_1000E0060;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v103 = sub_100007750(1);
          v102 = v102;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
            v104 = v103;
          else
            v104 = v103 & 0xFFFFFFFE;
          if ((_DWORD)v104)
          {
            *(_WORD *)v162 = 0;
            goto LABEL_280;
          }
          goto LABEL_282;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v97 = (id)qword_1000E0060;
        if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v98 = sub_100007750(1);
          if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
            v99 = v98;
          else
            v99 = v98 & 0xFFFFFFFE;
          if ((_DWORD)v99)
          {
            *(_WORD *)v162 = 0;
            v100 = (const char *)_os_log_send_and_compose_impl(v99, __str, 0, 0);
            v101 = (char *)v100;
            if (v100)
              sub_100007780(v100);
          }
          else
          {
            v101 = 0;
          }
          free(v101);
        }

        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v102 = (id)qword_1000E0060;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v105 = sub_100007750(1);
          v102 = v102;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
            v104 = v105;
          else
            v104 = v105 & 0xFFFFFFFE;
          if ((_DWORD)v104)
          {
            *(_WORD *)v162 = 0;
LABEL_280:
            v106 = (char *)_os_log_send_and_compose_impl(v104, __str, 0, 0);

            if (v106)
              sub_100007780(v106);
            goto LABEL_283;
          }
LABEL_282:

          v106 = 0;
LABEL_283:
          free(v106);
        }
      }

      *(_QWORD *)v162 = 0;
      if (objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
      {
        if ((sub_1000319A8(v1) & 1) != 0)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v107 = (id)qword_1000E0060;
          if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          {
            __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
            v108 = sub_100007750(1);
            v109 = v107;
            if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
              v110 = v108;
            else
              v110 = v108 & 0xFFFFFFFE;
            if ((_DWORD)v110)
            {
              LODWORD(v167[0]) = 67109120;
              HIDWORD(v167[0]) = v9;
              v111 = (char *)_os_log_send_and_compose_impl(v110, __str, 0, 0);

              if (v111)
                sub_100007780(v111);
            }
            else
            {

              v111 = 0;
            }
            free(v111);
          }

          goto LABEL_320;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v114 = (id)qword_1000E0060;
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v118 = sub_100007750(1);
          v114 = v114;
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
            v116 = v118;
          else
            v116 = v118 & 0xFFFFFFFE;
          if ((_DWORD)v116)
          {
            LODWORD(v167[0]) = 67109120;
            HIDWORD(v167[0]) = v9;
            v117 = __str;
LABEL_312:
            v119 = (char *)_os_log_send_and_compose_impl(v116, v117, 0, 0);

            if (v119)
              sub_100007780(v119);
            goto LABEL_315;
          }
          goto LABEL_314;
        }
      }
      else
      {
        v112 = MKBUserSessionDeleteKeybagForUser(v9, v162);
        if (!v112)
        {
LABEL_320:
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v120 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
            goto LABEL_332;
          __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
          v121 = sub_100007750(1);
          v122 = v120;
          if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
            v123 = v121;
          else
            v123 = v121 & 0xFFFFFFFE;
          if ((_DWORD)v123)
          {
            LOWORD(v167[0]) = 0;
            v124 = (const char *)_os_log_send_and_compose_impl(v123, __str, 0, 0);

            if (v124)
              sub_100007780(v124);
          }
          else
          {

            v124 = 0;
          }
          v125 = (char *)v124;
LABEL_331:
          free(v125);
LABEL_332:

          goto LABEL_359;
        }
        v113 = v112;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v114 = (id)qword_1000E0060;
        if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
        {
          v167[0] = 0;
          v115 = sub_100007750(1);
          v114 = v114;
          if (os_log_type_enabled(v114, OS_LOG_TYPE_DEFAULT))
            v116 = v115;
          else
            v116 = v115 & 0xFFFFFFFE;
          if ((_DWORD)v116)
          {
            LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109376;
            HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
            LOWORD(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 2) = v113;
            v117 = (std::__fs::filesystem::path *)v167;
            goto LABEL_312;
          }
LABEL_314:

          v119 = 0;
LABEL_315:
          free(v119);
        }
      }

      return 0;
    }
    if ((objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled") & 1) == 0)
      MKBUserSessionUnloadKeybagForUser(v9, 0);
    if (objc_msgSend((id)qword_1000E0030, "deleteVolumeWithSession:error:", v1, 0, p_from, v161, *(_QWORD *)v162))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v39 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        goto LABEL_126;
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v40 = sub_100007750(1);
      v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v162 = 67109120;
        *(_DWORD *)&v162[4] = v9;
        goto LABEL_122;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v39 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        goto LABEL_126;
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v42 = sub_100007750(1);
      v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        v41 = v42;
      else
        v41 = v42 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v162 = 67109120;
        *(_DWORD *)&v162[4] = v9;
LABEL_122:
        v43 = (char *)_os_log_send_and_compose_impl(v41, __str, 0, 0);

        if (v43)
          sub_100007780(v43);
        goto LABEL_125;
      }
    }

    v43 = 0;
LABEL_125:
    free(v43);
LABEL_126:

    v44 = sub_10002E3AC(v1, v9, 1);
    if (v44)
    {
      v45 = v44;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v46 = (id)qword_1000E0060;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v162 = 0;
        v47 = sub_100007750(1);
        v46 = v46;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          v48 = v47;
        else
          v48 = v47 & 0xFFFFFFFE;
        if ((_DWORD)v48)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109376;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
          LOWORD(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 1024;
          *(_DWORD *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 2) = v45;
          v49 = (char *)_os_log_send_and_compose_impl(v48, v162, 0, 0);

          if (v49)
            sub_100007780(v49);
        }
        else
        {

          v49 = 0;
        }
        free(v49);
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v46 = (id)qword_1000E0060;
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        v50 = sub_100007750(1);
        v46 = v46;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          v51 = v50;
        else
          v51 = v50 & 0xFFFFFFFE;
        if ((_DWORD)v51)
        {
          *(_WORD *)v162 = 0;
          v52 = (char *)_os_log_send_and_compose_impl(v51, __str, 0, 0);

          if (v52)
            sub_100007780(v52);
        }
        else
        {

          v52 = 0;
        }
        free(v52);
      }
    }

    goto LABEL_184;
  }
  if (v11)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v15;
    else
      v14 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
      goto LABEL_41;
    }
LABEL_55:
    v23 = 0;
LABEL_56:
    free(v23);
LABEL_57:

    return 0;
  }
  v16 = sub_10001BE1C(qword_1000E0318);
  v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
  v18 = sub_10001CAE4((uint64_t)v17);

  if (v18 == (_DWORD)v9)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_57;
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v19;
    else
      v14 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
      goto LABEL_41;
    }
    goto LABEL_55;
  }
  if (dword_1000E02C0 == 2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      __from.__pn_.__r_.__value_.__r.__words[0] = 0;
      v30 = sub_100007750(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v31 = v30;
      else
        v31 = v30 & 0xFFFFFFFE;
      if ((_DWORD)v31)
      {
        LOWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 0;
        v32 = (const char *)_os_log_send_and_compose_impl(v31, &__from, 0, 0);
        v33 = (char *)v32;
        if (v32)
          sub_100007780(v32);
      }
      else
      {
        v33 = 0;
      }
      free(v33);
    }

    if (objc_msgSend((id)qword_1000E0030, "deleteVolumeWithSession:error:", v1, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v53 = (id)qword_1000E0060;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        __from.__pn_.__r_.__value_.__r.__words[0] = 0;
        v54 = sub_100007750(1);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          v55 = v54;
        else
          v55 = v54 & 0xFFFFFFFE;
        if ((_DWORD)v55)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
          goto LABEL_167;
        }
        goto LABEL_169;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v53 = (id)qword_1000E0060;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
      {
        __from.__pn_.__r_.__value_.__r.__words[0] = 0;
        v56 = sub_100007750(1);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
          v55 = v56;
        else
          v55 = v56 & 0xFFFFFFFE;
        if ((_DWORD)v55)
        {
          LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
LABEL_167:
          v57 = (const char *)_os_log_send_and_compose_impl(v55, &__from, 0, 0);
          v58 = (char *)v57;
          if (v57)
            sub_100007780(v57);
          goto LABEL_170;
        }
LABEL_169:
        v58 = 0;
LABEL_170:
        free(v58);
      }
    }

    v59 = (id)sub_100086748(v1, kUMUserSessionUUIDKey);
    v60 = sub_100007EF0(qword_1000E0040);
    v61 = (void *)objc_claimAutoreleasedReturnValue(v60);
    v62 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v61, "userPersonas"));
    v63 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v62, "objectForKeyedSubscript:", v59));

    if (!v63)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v64 = (id)qword_1000E0060;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      {
        __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
        v65 = sub_100007750(1);
        if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
          v66 = v65;
        else
          v66 = v65 & 0xFFFFFFFE;
        if ((_DWORD)v66)
        {
          LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
          *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
          v67 = (const char *)_os_log_send_and_compose_impl(v66, __str, 0, 0);
          v68 = (char *)v67;
          if (v67)
            sub_100007780(v67);
        }
        else
        {
          v68 = 0;
        }
        free(v68);
      }

    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v126 = (id)qword_1000E0060;
    if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v127 = sub_100007750(1);
      if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
        v128 = v127;
      else
        v128 = v127 & 0xFFFFFFFE;
      if ((_DWORD)v128)
      {
        LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412290;
        *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        v129 = (const char *)_os_log_send_and_compose_impl(v128, __str, 0, 0);
        v130 = (char *)v129;
        if (v129)
          sub_100007780(v129);
      }
      else
      {
        v130 = 0;
      }
      free(v130);
    }
    do
    {

      if (!objc_msgSend(v63, "count"))
      {
        v139 = sub_100007EF0(qword_1000E0040);
        v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
        v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v140, "userPersonas"));
        objc_msgSend(v141, "setObject:forKeyedSubscript:", 0, v59);

        sub_10005F5C8(qword_1000E0040);
        goto LABEL_359;
      }
      v126 = objc_claimAutoreleasedReturnValue(objc_msgSend(v63, "objectAtIndexedSubscript:", 0));
      v131 = sub_10004A1EC(v63, (const __CFDictionary *)v126, 1);
    }
    while (!v131);
    v132 = v131;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v133 = (id)qword_1000E0060;
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
    {
      __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
      v134 = sub_100007750(1);
      if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
        v135 = v134;
      else
        v135 = v134 & 0xFFFFFFFE;
      if ((_DWORD)v135)
      {
        v136 = v133;
        v137 = strerror(v132);
        LODWORD(__from.__pn_.__r_.__value_.__l.__data_) = 138412546;
        *(std::string::size_type *)((char *)__from.__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)v59;
        WORD2(__from.__pn_.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__from.__pn_.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v137;
        v138 = (char *)_os_log_send_and_compose_impl(v135, __str, 0, 0);

        if (v138)
          sub_100007780(v138);
      }
      else
      {
        v138 = 0;
      }
      free(v138);
    }

    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v120 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      goto LABEL_332;
    __from.__pn_.__r_.__value_.__r.__words[0] = 0;
    v156 = sub_100007750(1);
    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      v157 = v156;
    else
      v157 = v156 & 0xFFFFFFFE;
    if ((_DWORD)v157)
    {
      LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 67109120;
      HIDWORD(__str[0].__pn_.__r_.__value_.__r.__words[0]) = v9;
      v158 = (const char *)_os_log_send_and_compose_impl(v157, &__from, 0, 0);
      v159 = v158;
      if (v158)
        sub_100007780(v158);
    }
    else
    {
      v159 = 0;
    }
    v125 = (char *)v159;
    goto LABEL_331;
  }
  if (dword_1000E02C0 == 1)
    goto LABEL_44;
LABEL_359:
  v142 = (void *)sub_100086748(v1, kUMUserSessionShortNameKey);
  sub_10005A40C(qword_1000E0038, v142);
  sub_100031FA8(v9, 1);
  sub_10001DE7C();
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v143 = (id)qword_1000E0070;
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    __str[0].__pn_.__r_.__value_.__r.__words[0] = 0;
    v144 = sub_100007750(1);
    v145 = v143;
    if (os_log_type_enabled(v145, OS_LOG_TYPE_DEFAULT))
      v146 = v144;
    else
      v146 = v144 & 0xFFFFFFFE;
    if ((_DWORD)v146)
    {
      *(_DWORD *)v162 = 67109120;
      *(_DWORD *)&v162[4] = v9;
      v147 = (char *)_os_log_send_and_compose_impl(v146, __str, 0, 0);

      if (v147)
        sub_100007780(v147);
    }
    else
    {

      v147 = 0;
    }
    free(v147);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v148 = (id)qword_1000E0060;
  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v162 = 0;
    v149 = sub_100007750(1);
    v150 = v148;
    if (os_log_type_enabled(v150, OS_LOG_TYPE_DEFAULT))
      v151 = v149;
    else
      v151 = v149 & 0xFFFFFFFE;
    if ((_DWORD)v151)
    {
      LODWORD(__str[0].__pn_.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__str[0].__pn_.__r_.__value_.__r.__words + 4) = (std::string::size_type)"removeUserSessionInternal";
      WORD2(__str[0].__pn_.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&__str[0].__pn_.__r_.__value_.__r.__words[1] + 6) = kMobileKeyBagUserChangedNotificationToken;
      v152 = (char *)_os_log_send_and_compose_impl(v151, v162, 0, 0);

      if (v152)
        sub_100007780(v152);
    }
    else
    {

      v152 = 0;
    }
    free(v152);
  }

  v153 = sub_10001BEE8(qword_1000E0318);
  v154 = (void *)objc_claimAutoreleasedReturnValue(v153);
  v155 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", kMobileKeyBagUserChangedNotificationToken));
  objc_msgSend(v154, "post:", v155);

  return 1;
}

uint64_t sub_1000306FC(uint64_t a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned int v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  id v17;
  const __CFDictionary *v18;
  const __CFDictionary *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  char *v25;
  const void *v26;
  const void *v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  unsigned int v38;
  id v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  id v46;
  NSObject *v47;
  unsigned int v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  unsigned int v53;
  uint64_t v54;
  const char *v55;
  char *v56;
  unsigned int v57;
  unsigned int v58;
  unsigned int v59;
  unsigned int v60;
  const char *v61;
  char *v62;
  unsigned int v63;
  unsigned int v64;
  NSObject *v65;
  unsigned int v66;
  uint64_t v67;
  const char *v68;
  char *v69;
  uint64_t v70;
  void *v71;
  void *v72;
  id v74;
  _BYTE v75[22];
  uint64_t v76;

  v4 = launch_destroy_persona(a1, 0);
  if ((_DWORD)v4)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v76 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        *(_DWORD *)v75 = 67109376;
        *(_DWORD *)&v75[4] = a1;
        *(_WORD *)&v75[8] = 1024;
        *(_DWORD *)&v75[10] = v4;
        v8 = &v76;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    dword_1000DF224 = -1;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v75 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v9;
      else
        v7 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        LODWORD(v76) = 67109120;
        HIDWORD(v76) = a1;
        v8 = (uint64_t *)v75;
LABEL_18:
        v10 = (const char *)_os_log_send_and_compose_impl(v7, v8, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
        goto LABEL_21;
      }
LABEL_20:
      v11 = 0;
LABEL_21:
      free(v11);
    }
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v12 = (id)qword_1000E0060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v75 = 0;
    v13 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      LODWORD(v76) = 67109120;
      HIDWORD(v76) = a1;
      v15 = (const char *)_os_log_send_and_compose_impl(v14, v75, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v16 = 0;
    }
    free(v16);
  }

  sub_10003777C(a1);
  v17 = sub_100004400(qword_1000E0038, a1);
  v18 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v17);
  if (v18)
  {
    v19 = v18;
    if (!CFDictionaryContainsKey(v18, kUMUserSessionVolumeDeviceNodeKey))
      goto LABEL_161;
    sub_1000338CC(v19);
    if (objc_msgSend((id)qword_1000E0030, "unmountVolumeWithSession:mountPath:error:", v19, 0, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v75 = 0;
        v21 = sub_100007750(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v22 = v21;
        else
          v22 = v21 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          LOWORD(v76) = 0;
          goto LABEL_52;
        }
        goto LABEL_54;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v75 = 0;
        v23 = sub_100007750(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v22 = v23;
        else
          v22 = v23 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          LOWORD(v76) = 0;
LABEL_52:
          v24 = (const char *)_os_log_send_and_compose_impl(v22, v75, 0, 0);
          v25 = (char *)v24;
          if (v24)
            sub_100007780(v24);
          goto LABEL_55;
        }
LABEL_54:
        v25 = 0;
LABEL_55:
        free(v25);
      }
    }

    if (sub_1000866F8(v19, kUMUserSessionHasSyncBagKey) != 1)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v33 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        goto LABEL_160;
      *(_QWORD *)v75 = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        LODWORD(v76) = 67109120;
        HIDWORD(v76) = a1;
        goto LABEL_156;
      }
      goto LABEL_158;
    }
    v26 = sub_100086748(v19, kUMUserSessionVolumeDeviceNodeKey);
    if (!v26)
    {
LABEL_99:
      if (CFDictionaryContainsKey(v19, kUMUserSessionSyncMachServicesKey))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v47 = (id)qword_1000E0060;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v75 = 0;
          v48 = sub_100007750(1);
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            v49 = v48;
          else
            v49 = v48 & 0xFFFFFFFE;
          if ((_DWORD)v49)
          {
            LODWORD(v76) = 67109120;
            HIDWORD(v76) = a1;
            v50 = (const char *)_os_log_send_and_compose_impl(v49, v75, 0, 0);
            v51 = (char *)v50;
            if (v50)
              sub_100007780(v50);
          }
          else
          {
            v51 = 0;
          }
          free(v51);
        }

        if (sub_100037430(v19, a1))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v33 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            goto LABEL_160;
          *(_QWORD *)v75 = 0;
          v57 = sub_100007750(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v35 = v57;
          else
            v35 = v57 & 0xFFFFFFFE;
          if ((_DWORD)v35)
          {
            LODWORD(v76) = 67109120;
            HIDWORD(v76) = a1;
            goto LABEL_156;
          }
LABEL_158:
          v62 = 0;
LABEL_159:
          free(v62);
LABEL_160:

LABEL_161:
          if (a2)
          {
            v63 = sub_1000866F8(v19, kUMUserSessionDisabledKey);
            v64 = sub_1000866F8(v19, kUMUserSessionDirtyKey);
            if (v63)
            {
              if (!v64)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v65 = (id)qword_1000E0060;
                if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                {
                  v76 = 0;
                  v66 = sub_100007750(1);
                  if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
                    v67 = v66;
                  else
                    v67 = v66 & 0xFFFFFFFE;
                  if ((_DWORD)v67)
                  {
                    *(_DWORD *)v75 = 136315394;
                    *(_QWORD *)&v75[4] = "unload_syncdomain";
                    *(_WORD *)&v75[12] = 2080;
                    *(_QWORD *)&v75[14] = kMobileKeyBagUserChangedNotificationToken;
                    v68 = (const char *)_os_log_send_and_compose_impl(v67, &v76, 0, 0);
                    v69 = (char *)v68;
                    if (v68)
                      sub_100007780(v68);
                  }
                  else
                  {
                    v69 = 0;
                  }
                  free(v69);
                }

                v70 = sub_10001BEE8(qword_1000E0318);
                v71 = (void *)objc_claimAutoreleasedReturnValue(v70);
                v72 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", kMobileKeyBagUserChangedNotificationToken));
                objc_msgSend(v71, "post:", v72);

              }
            }
          }
          CFRelease(v19);
          return v4;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v33 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          goto LABEL_160;
        *(_QWORD *)v75 = 0;
        v58 = sub_100007750(1);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
          v35 = v58;
        else
          v35 = v58 & 0xFFFFFFFE;
        if (!(_DWORD)v35)
          goto LABEL_158;
        LODWORD(v76) = 67109120;
        HIDWORD(v76) = a1;
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v52 = (id)qword_1000E0060;
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v75 = 0;
          v53 = sub_100007750(1);
          if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
            v54 = v53;
          else
            v54 = v53 & 0xFFFFFFFE;
          if ((_DWORD)v54)
          {
            LODWORD(v76) = 67109120;
            HIDWORD(v76) = a1;
            v55 = (const char *)_os_log_send_and_compose_impl(v54, v75, 0, 0);
            v56 = (char *)v55;
            if (v55)
              sub_100007780(v55);
          }
          else
          {
            v56 = 0;
          }
          free(v56);
        }

        if (sub_10002E3AC(v19, a1, 1))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v33 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            goto LABEL_160;
          *(_QWORD *)v75 = 0;
          v59 = sub_100007750(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v35 = v59;
          else
            v35 = v59 & 0xFFFFFFFE;
          if (!(_DWORD)v35)
            goto LABEL_158;
          LODWORD(v76) = 67109120;
          HIDWORD(v76) = a1;
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v33 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            goto LABEL_160;
          *(_QWORD *)v75 = 0;
          v60 = sub_100007750(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v35 = v60;
          else
            v35 = v60 & 0xFFFFFFFE;
          if (!(_DWORD)v35)
            goto LABEL_158;
          LODWORD(v76) = 67109120;
          HIDWORD(v76) = a1;
        }
      }
LABEL_156:
      v61 = (const char *)_os_log_send_and_compose_impl(v35, v75, 0, 0);
      v62 = (char *)v61;
      if (v61)
        sub_100007780(v61);
      goto LABEL_159;
    }
    v27 = v26;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v28 = (id)qword_1000E0060;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v76 = 0;
      v29 = sub_100007750(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        *(_DWORD *)v75 = 138412546;
        *(_QWORD *)&v75[4] = v27;
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = a1;
        v31 = (const char *)_os_log_send_and_compose_impl(v30, &v76, 0, 0);
        v32 = (char *)v31;
        if (v31)
          sub_100007780(v31);
      }
      else
      {
        v32 = 0;
      }
      free(v32);
    }

    v36 = sub_10001CA9C(qword_1000E0318);
    v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
    v74 = 0;
    v38 = objc_msgSend(v37, "unmapVolume:error:", v27, &v74);
    v39 = v74;

    if (v38)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_98;
      *(_QWORD *)v75 = 0;
      v41 = sub_100007750(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        v42 = v41;
      else
        v42 = v41 & 0xFFFFFFFE;
      if ((_DWORD)v42)
      {
        LODWORD(v76) = 67109120;
        HIDWORD(v76) = a1;
        v43 = (void *)_os_log_send_and_compose_impl(v42, v75, 0, 0);
        if (!v43)
          goto LABEL_97;
        goto LABEL_95;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v40 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        goto LABEL_98;
      v76 = 0;
      LODWORD(v44) = sub_100007750(1);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
        v44 = v44;
      else
        v44 = v44 & 0xFFFFFFFE;
      if ((_DWORD)v44)
      {
        v45 = v40;
        v46 = objc_msgSend(v39, "code");
        *(_DWORD *)v75 = 67109376;
        *(_DWORD *)&v75[4] = a1;
        *(_WORD *)&v75[8] = 2048;
        *(_QWORD *)&v75[10] = v46;
        v43 = (void *)_os_log_send_and_compose_impl(v44, &v76, 0, 0);

        if (!v43)
        {
LABEL_97:
          free(v43);
LABEL_98:

          goto LABEL_99;
        }
LABEL_95:
        sub_100007780((const char *)v43);
        goto LABEL_97;
      }
    }
    v43 = 0;
    goto LABEL_97;
  }
  return v4;
}

uint64_t sub_100031520(const char *a1)
{
  _removefile_state *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  int *v6;
  char *v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  int *v12;
  char *v13;
  char *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  int value;
  int v29;
  void *v30;
  __int16 v31;
  char *v32;

  v2 = removefile_state_alloc();
  value = 0;
  if (removefile_state_set(v2, 3u, sub_100048EB0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 0;
      LODWORD(v4) = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v4 = v4;
      else
        v4 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v5 = v3;
        v6 = __error();
        v7 = strerror(*v6);
        v29 = 136315138;
        v30 = v7;
        v8 = (char *)_os_log_send_and_compose_impl(v4, &v27, 0, 0);

        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v8 = 0;
      }
      free(v8);
    }

  }
  if (removefile_state_set(v2, 4u, &value))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 0;
      LODWORD(v10) = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v10 = v10;
      else
        v10 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = v9;
        v12 = __error();
        v13 = strerror(*v12);
        v29 = 136315138;
        v30 = v13;
        v14 = (char *)_os_log_send_and_compose_impl(v10, &v27, 0, 0);

        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

  }
  if (removefile(a1, v2, 1u))
  {
    v15 = *__error();
    if (v15 != 2)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v16 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      v27 = 0;
      LODWORD(v22) = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v22 = v22;
      else
        v22 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        v19 = v16;
        v23 = strerror(v15);
        v29 = 136315394;
        v30 = (void *)a1;
        v31 = 2080;
        v32 = v23;
        v21 = v22;
LABEL_46:
        v24 = (char *)_os_log_send_and_compose_impl(v21, &v27, 0, 0);

        if (v24)
          sub_100007780(v24);
        goto LABEL_50;
      }
LABEL_49:
      v24 = 0;
LABEL_50:
      free(v24);
LABEL_51:

      v25 = 0;
      goto LABEL_52;
    }
  }
  if ((value & 0xFFFFFFFD) != 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v16 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      goto LABEL_51;
    v27 = 0;
    LODWORD(v17) = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      v17 = v17;
    else
      v17 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      v18 = value;
      v19 = v16;
      v20 = strerror(v18);
      v29 = 136315394;
      v30 = (void *)a1;
      v31 = 2080;
      v32 = v20;
      v21 = v17;
      goto LABEL_46;
    }
    goto LABEL_49;
  }
  v25 = 1;
LABEL_52:
  removefile_state_free(v2);
  return v25;
}

uint64_t sub_1000319A8(const __CFDictionary *a1)
{
  void *v2;
  int v3;
  int v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  unsigned __int8 v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  char *v38;
  uint64_t v39;
  id v41;
  uint64_t v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v2 = (void *)sub_100086748(a1, kUMUserSessionUUIDKey);
  v3 = sub_100004318(a1, kMKBUserSessionIDKey);
  if (v2)
  {
    v4 = v3;
    v5 = sub_10001ACA4((uint64_t)NSUUID, v2);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v7 = (id)qword_1000E0060;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v8 = sub_100007750(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          LOWORD(v45) = 0;
          v10 = (const char *)_os_log_send_and_compose_impl(v9, &v42, 0, 0);
          v11 = (char *)v10;
          if (v10)
            sub_100007780(v10);
        }
        else
        {
          v11 = 0;
        }
        free(v11);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v21 = (id)qword_1000E0060;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v22 = sub_100007750(1);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          v23 = v22;
        else
          v23 = v22 & 0xFFFFFFFE;
        if ((_DWORD)v23)
        {
          LODWORD(v45) = 67109120;
          HIDWORD(v45) = v4;
          v24 = (const char *)_os_log_send_and_compose_impl(v23, &v42, 0, 0);
          v25 = (char *)v24;
          if (v24)
            sub_100007780(v24);
        }
        else
        {
          v25 = 0;
        }
        free(v25);
      }

      v26 = sub_10001CA9C(qword_1000E0318);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v41 = 0;
      v28 = objc_msgSend(v27, "deleteIdentity:error:", v6, &v41);
      v16 = v41;

      if ((v28 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v29 = (id)qword_1000E0060;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v42 = 0;
          v30 = sub_100007750(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            v31 = v30;
          else
            v31 = v30 & 0xFFFFFFFE;
          if ((_DWORD)v31)
          {
            LODWORD(v45) = 67109120;
            HIDWORD(v45) = v4;
            v32 = (const char *)_os_log_send_and_compose_impl(v31, &v42, 0, 0);
            v33 = (char *)v32;
            if (v32)
              sub_100007780(v32);
          }
          else
          {
            v33 = 0;
          }
          free(v33);
        }

        v39 = 1;
        goto LABEL_74;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v34 = (id)qword_1000E0060;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v45 = 0;
        LODWORD(v35) = sub_100007750(1);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          v35 = v35;
        else
          v35 = v35 & 0xFFFFFFFE;
        if ((_DWORD)v35)
        {
          v36 = v34;
          v37 = -[NSObject code](v16, "code");
          LODWORD(v42) = 67109376;
          HIDWORD(v42) = v4;
          v43 = 2048;
          v44 = v37;
          v38 = (char *)_os_log_send_and_compose_impl(v35, &v45, 0, 0);

          if (v38)
            sub_100007780(v38);
        }
        else
        {
          v38 = 0;
        }
        free(v38);
      }

    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v16 = (id)qword_1000E0060;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v18)
        {
          LOWORD(v45) = 0;
          v19 = (const char *)_os_log_send_and_compose_impl(v18, &v42, 0, 0);
          v20 = (char *)v19;
          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v20 = 0;
        }
        free(v20);
      }
    }
    v39 = 0;
LABEL_74:

    goto LABEL_75;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v42 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      LOWORD(v45) = 0;
      v14 = (const char *)_os_log_send_and_compose_impl(v13, &v42, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }
  v39 = 0;
LABEL_75:

  return v39;
}

uint64_t sub_100031FA8(int a1, int a2)
{
  uint64_t result;
  CFIndex v5;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v7;
  CFTypeID v8;
  const __CFNumber *Value;
  const __CFNumber *v10;
  CFTypeID v11;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  CFIndex Count;
  uint64_t v19;
  _DWORD valuePtr[3];

  result = qword_1000E02B0;
  if (qword_1000E02B0)
  {
    valuePtr[0] = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) < 1)
    {
      return 0;
    }
    else
    {
      v5 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v5);
        if (ValueAtIndex)
        {
          v7 = ValueAtIndex;
          v8 = CFGetTypeID(ValueAtIndex);
          if (v8 == CFDictionaryGetTypeID())
          {
            Value = (const __CFNumber *)CFDictionaryGetValue(v7, kUMUserSessionIDKey);
            if (Value)
            {
              v10 = Value;
              v11 = CFGetTypeID(Value);
              if (v11 == CFNumberGetTypeID() && CFNumberGetValue(v10, kCFNumberIntType, valuePtr) && valuePtr[0] == a1)
                break;
            }
          }
        }
        if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) <= ++v5)
          return 0;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v13 = (id)qword_1000E0060;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v19 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          valuePtr[1] = 67109120;
          valuePtr[2] = a1;
          v16 = (const char *)_os_log_send_and_compose_impl(v15, &v19, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E02B0, v5);
      Count = CFArrayGetCount((CFArrayRef)qword_1000E02B0);
      qword_1000E02B8 = Count;
      if (!byte_1000DF220 && Count == 1)
      {
        qword_1000E0050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
        byte_1000DF220 = 1;
      }
      if (a2)
        sub_10003A214(a1);
      return 1;
    }
  }
  return result;
}

BOOL sub_100032200(const __CFDictionary *a1)
{
  CFTypeRef v1;
  int v2;

  v1 = sub_100025934(a1);
  v2 = sub_10002E778((uint64_t)v1);
  if (v1)
    CFRelease(v1);
  return v2 != 0;
}

uint64_t sub_10003223C(const __CFDictionary *a1, uint64_t a2, const __CFData *a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[3];

  if (a3)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v6 = (id)qword_1000E0060;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      LODWORD(v7) = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v7 = v7;
      else
        v7 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v8 = v6;
        LODWORD(v14[0]) = 134217984;
        *(_QWORD *)((char *)v14 + 4) = CFDataGetLength(a3);
        v9 = (void *)_os_log_send_and_compose_impl(v7, &v13, 0, 0);

        if (!v9)
          goto LABEL_21;
        goto LABEL_19;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v6 = (id)qword_1000E0060;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v13) = 0;
        v9 = (void *)_os_log_send_and_compose_impl(v11, v14, 0, 0);
        if (!v9)
        {
LABEL_21:
          free(v9);
          goto LABEL_22;
        }
LABEL_19:
        sub_100007780((const char *)v9);
        goto LABEL_21;
      }
LABEL_20:
      v9 = 0;
      goto LABEL_21;
    }
  }
LABEL_22:

  sub_10003245C(a1, a2, a3);
  return 0;
}

uint64_t sub_10003245C(const __CFDictionary *a1, uint64_t a2, const __CFData *a3)
{
  const __CFDictionary *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  int v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  CFIndex Length;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  _BYTE *v29;
  uint64_t v30;
  _QWORD v31[2];
  _BYTE v32[24];

  v6 = (const __CFDictionary *)sub_100025934(a1);
  if (v6)
    goto LABEL_14;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v7 = (id)qword_1000E0060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v32 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      v29 = v31;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, v32, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  v6 = sub_100027BD4(a1, 0, 0, 0);
  if (v6)
  {
LABEL_14:
    v12 = sub_100004318(v6, kUMUserSessionIDKey);
    if (dword_1000E02C0 == 1 && v12 == 502)
      sub_10002DF24();
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v13 = (id)qword_1000E0060;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v32 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v31[0]) = 0;
        LODWORD(v30) = 2;
        v29 = v31;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, v32, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }

    if (a3)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v18 = (id)qword_1000E0060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v31[0] = 0;
        LODWORD(v19) = sub_100007750(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          v19 = v19;
        else
          v19 = v19 & 0xFFFFFFFE;
        if ((_DWORD)v19)
        {
          v20 = v18;
          Length = CFDataGetLength(a3);
          *(_DWORD *)v32 = 134217984;
          *(_QWORD *)&v32[4] = Length;
          LODWORD(v30) = 12;
          v29 = v32;
          v22 = (char *)_os_log_send_and_compose_impl(v19, v31, 0, 0);

          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v22 = 0;
        }
        free(v22);
      }

      CFDictionarySetValue(v6, CFSTR("UserSwitchTaskOpqueData"), a3);
    }
    else if (CFDictionaryContainsKey(v6, CFSTR("UserSwitchTaskOpqueData")))
    {
      CFDictionaryRemoveValue(v6, CFSTR("UserSwitchTaskOpqueData"));
    }
    v23 = objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer", v29, v30));
    -[NSObject switchToUser:passcodeData:](v23, "switchToUser:passcodeData:", v6, a2);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v23 = (id)qword_1000E0060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v32 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        LOWORD(v31[0]) = 0;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, v32, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }
  }

  return 0;
}

uint64_t sub_1000328D8()
{
  id v0;
  const __CFDictionary *v1;

  v0 = sub_100004400(qword_1000E0038, 502);
  v1 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v0);
  sub_10003245C(v1, 0, 0);
  if (v1)
    CFRelease(v1);
  return 0;
}

id sub_100032924()
{
  id v0;
  uint64_t v1;
  void *v2;
  id v3;

  v0 = sub_100004400(qword_1000E0038, 502);
  v1 = objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  v3 = objc_msgSend(v2, "LogoutToUser:", v1);

  return v3;
}

id sub_10003297C()
{
  void *v0;
  id v1;

  v0 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  v1 = objc_msgSend(v0, "inLoginSession");

  return v1;
}

uint64_t sub_1000329B8(const __CFDictionary *a1, const __CFData *a2)
{
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  void *v8;
  void *v9;
  const __CFDictionary *v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  CFAbsoluteTime Current;
  CFDateRef v27;
  CFDateRef v28;
  __CFString **v29;
  NSObject *v30;
  uint64_t v31;
  CFIndex Length;
  uint64_t *v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  uint64_t v37;
  int v38;
  char v39;
  NSObject *v40;
  uint64_t v41;
  NSObject *v42;
  CFIndex v43;
  char *v44;
  NSObject *v45;
  unsigned int v46;
  NSObject *v47;
  uint64_t v48;
  char *v49;
  NSObject *v50;
  unsigned int v51;
  NSObject *v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  unsigned int v56;
  uint64_t v57;
  const char *v58;
  char *v59;
  int v60;
  NSObject *v61;
  unsigned int v62;
  NSObject *v63;
  uint64_t v64;
  char *v65;
  NSObject *v67;
  unsigned int v68;
  NSObject *v69;
  uint64_t v70;
  char *v71;
  void *v72;
  NSObject *v73;
  unsigned int v74;
  NSObject *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void *v79;
  char v80;
  int v81;
  int v82;
  NSObject *v83;
  unsigned int v84;
  NSObject *v85;
  uint64_t v86;
  char *v87;
  _BYTE cf[12];
  uint64_t v89;

  v4 = sub_100058C2C(qword_1000E0038);
  v5 = sub_100004318(a1, kUMUserSessionIDKey);
  v6 = sub_1000866F8(a1, kUMUserSessionNeedsMountKey);
  v7 = sub_10001BEE8(qword_1000E0318);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.mobile.usermanagerd.foregrounduser_willchange"));
  objc_msgSend(v8, "post:", v9);

  if (dword_1000E02C0 == 1 && v4 != 502 && byte_1000DF220 == 1)
  {
    v10 = (const __CFDictionary *)sub_10001D538();
    if (v10)
      sub_1000338CC(v10);
    if (!v6 || v5 == 502)
    {
LABEL_55:
      Current = CFAbsoluteTimeGetCurrent();
      v27 = CFDateCreate(kCFAllocatorDefault, Current);
      if (!v27)
        goto LABEL_64;
      v28 = v27;
      if (CFDictionaryContainsKey(a1, kUMUserSessionFirstLoginStartTimeKey))
      {
        if (!CFDictionaryContainsKey(a1, kUMUserSessionFirstLoginEndTimeKey))
        {
          CFDictionarySetValue(a1, kUMUserSessionFirstLoginStartTimeKey, v28);
LABEL_63:
          CFRelease(v28);
          goto LABEL_64;
        }
        CFDictionarySetValue(a1, kUMUserSessionCachedLoginStartTimeKey, v28);
        v29 = &kUMUserSessionCachedLoginEndTimeKey;
      }
      else
      {
        CFDictionarySetValue(a1, kUMUserSessionFirstLoginStartTimeKey, v28);
        v29 = &kUMUserSessionFirstLoginEndTimeKey;
      }
      if (CFDictionaryContainsKey(a1, *v29))
        CFDictionaryRemoveValue(a1, *v29);
      goto LABEL_63;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v12 = sub_100007750(1);
      v13 = v11;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v14 = v12;
      else
        v14 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LODWORD(v89) = 67109120;
        HIDWORD(v89) = v5;
        v15 = (char *)_os_log_send_and_compose_impl(v14, cf, 0, 0);

        if (v15)
          sub_100007780(v15);
      }
      else
      {

        v15 = 0;
      }
      free(v15);
    }

    if (objc_msgSend((id)qword_1000E0030, "mountVolumeWithSession:mountPath:error:forPersona:", a1, 0, 0, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v21 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_QWORD *)cf = 0;
      v22 = sub_100007750(1);
      v21 = v21;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LODWORD(v89) = 67109120;
        HIDWORD(v89) = v5;
        goto LABEL_49;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v21 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        goto LABEL_54;
      *(_QWORD *)cf = 0;
      v24 = sub_100007750(1);
      v21 = v21;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v24;
      else
        v23 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LODWORD(v89) = 67109120;
        HIDWORD(v89) = v5;
LABEL_49:
        v25 = (char *)_os_log_send_and_compose_impl(v23, cf, 0, 0);

        if (v25)
          sub_100007780(v25);
        goto LABEL_53;
      }
    }

    v25 = 0;
LABEL_53:
    free(v25);
LABEL_54:

    goto LABEL_55;
  }
  if (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v16 = (id)qword_1000E0060;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        LODWORD(v89) = 67109120;
        HIDWORD(v89) = v5;
        v19 = (const char *)_os_log_send_and_compose_impl(v18, cf, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

  }
LABEL_64:
  sub_10001DE7C();
  if (a2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v30 = (id)qword_1000E0060;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      v89 = 0;
      LODWORD(v31) = sub_100007750(1);
      v30 = v30;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v31 = v31;
      else
        v31 = v31 & 0xFFFFFFFE;
      if ((_DWORD)v31)
      {
        Length = CFDataGetLength(a2);
        *(_DWORD *)cf = 134217984;
        *(_QWORD *)&cf[4] = Length;
        v33 = &v89;
        v34 = v31;
        goto LABEL_81;
      }
      goto LABEL_83;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v30 = (id)qword_1000E0060;
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v35 = sub_100007750(1);
      v30 = v30;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v34 = v35;
      else
        v34 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v34)
      {
        LOWORD(v89) = 0;
        v33 = (uint64_t *)cf;
LABEL_81:
        v36 = (char *)_os_log_send_and_compose_impl(v34, v33, 0, 0);

        if (v36)
          sub_100007780(v36);
        goto LABEL_84;
      }
LABEL_83:

      v36 = 0;
LABEL_84:
      free(v36);
    }
  }

  v37 = qword_1000E0038;
  v38 = sub_100058C2C(qword_1000E0038);
  v39 = sub_100059348(v37, v38, v5);
  if (a2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v40 = (id)qword_1000E0060;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      v89 = 0;
      LODWORD(v41) = sub_100007750(1);
      v42 = v40;
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        v41 = v41;
      else
        v41 = v41 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        v43 = CFDataGetLength(a2);
        *(_DWORD *)cf = 134217984;
        *(_QWORD *)&cf[4] = v43;
        v44 = (char *)_os_log_send_and_compose_impl(v41, &v89, 0, 0);

        if (v44)
          sub_100007780(v44);
      }
      else
      {

        v44 = 0;
      }
      free(v44);
    }

    if (sub_100033BA8(a2, (uint64_t)"/private/var//keybags/nextsession_opaque.kb"))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v45 = (id)qword_1000E0060;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)cf = 0;
        v46 = sub_100007750(1);
        v47 = v45;
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          v48 = v46;
        else
          v48 = v46 & 0xFFFFFFFE;
        if ((_DWORD)v48)
        {
          LOWORD(v89) = 0;
          v49 = (char *)_os_log_send_and_compose_impl(v48, cf, 0, 0);

          if (v49)
            sub_100007780(v49);
        }
        else
        {

          v49 = 0;
        }
        free(v49);
      }

    }
  }
  if ((v39 & 1) != 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v50 = (id)qword_1000E0060;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v51 = sub_100007750(1);
      v52 = v50;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        v53 = v51;
      else
        v53 = v51 & 0xFFFFFFFE;
      if ((_DWORD)v53)
      {
        LOWORD(v89) = 0;
        v54 = (char *)_os_log_send_and_compose_impl(v53, cf, 0, 0);

        if (v54)
          sub_100007780(v54);
      }
      else
      {

        v54 = 0;
      }
      free(v54);
    }

    if ((_os_feature_enabled_impl("UserManagement", "USBSurvivesUserSwitch") & 1) == 0)
    {
      *(_QWORD *)cf = 0;
      v60 = IOUSBDeviceControllerCreate(0, cf);
      if (!v60 && *(_QWORD *)cf)
        v60 = IOUSBDeviceControllerForceOffBus(*(_QWORD *)cf, 1);
      if (v60)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v61 = (id)qword_1000E0060;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          v89 = 0;
          v62 = sub_100007750(1);
          v63 = v61;
          if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            v64 = v62;
          else
            v64 = v62 & 0xFFFFFFFE;
          if ((_DWORD)v64)
          {
            v65 = (char *)_os_log_send_and_compose_impl(v64, &v89, 0, 0);

            if (v65)
              sub_100007780(v65);
          }
          else
          {

            v65 = 0;
          }
          free(v65);
        }

      }
      if (*(_QWORD *)cf)
        CFRelease(*(CFTypeRef *)cf);
    }
    if (qword_1000E0308)
    {
      if (qword_1000E0078 != -1)
        dispatch_once(&qword_1000E0078, &stru_1000D1570);
      v67 = (id)qword_1000E0070;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      {
        v89 = 0;
        v68 = sub_100007750(0);
        v69 = v67;
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
          v70 = v68;
        else
          v70 = v68 & 0xFFFFFFFE;
        if ((_DWORD)v70)
        {
          *(_DWORD *)cf = 134217984;
          *(_QWORD *)&cf[4] = qword_1000E0308;
          v71 = (char *)_os_log_send_and_compose_impl(v70, &v89, 0, 0);

          if (v71)
            sub_100007780(v71);
        }
        else
        {

          v71 = 0;
        }
        free(v71);
      }

      dispatch_source_cancel((dispatch_source_t)qword_1000E0308);
      v72 = (void *)qword_1000E0308;
      qword_1000E0308 = 0;

    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v73 = (id)qword_1000E0060;
    if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v74 = sub_100007750(1);
      v75 = v73;
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
        v76 = v74;
      else
        v76 = v74 & 0xFFFFFFFE;
      if ((_DWORD)v76)
      {
        LOWORD(v89) = 0;
        v77 = (char *)_os_log_send_and_compose_impl(v76, cf, 0, 0);

        if (v77)
          sub_100007780(v77);
      }
      else
      {

        v77 = 0;
      }
      free(v77);
    }

    v78 = sub_10001BE1C(qword_1000E0318);
    v79 = (void *)objc_claimAutoreleasedReturnValue(v78);
    v80 = sub_10001CA60((uint64_t)v79);
    v81 = dword_1000E02C0;

    if ((v80 & 1) != 0 || v81 == 2)
    {
      sub_10001F4B4(v4, v5);
    }
    else
    {
      v82 = reboot3(0x2100000000000000);
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v83 = (id)qword_1000E0060;
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)cf = 0;
        v84 = sub_100007750(1);
        v85 = v83;
        if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
          v86 = v84;
        else
          v86 = v84 & 0xFFFFFFFE;
        if ((_DWORD)v86)
        {
          LODWORD(v89) = 67109120;
          HIDWORD(v89) = v82;
          v87 = (char *)_os_log_send_and_compose_impl(v86, cf, 0, 0);

          if (v87)
            sub_100007780(v87);
        }
        else
        {

          v87 = 0;
        }
        free(v87);
      }

    }
    return 1;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v55 = (id)qword_1000E0060;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)cf = 0;
      v56 = sub_100007750(1);
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
        v57 = v56;
      else
        v57 = v56 & 0xFFFFFFFE;
      if ((_DWORD)v57)
      {
        LOWORD(v89) = 0;
        v58 = (const char *)_os_log_send_and_compose_impl(v57, cf, 0, 0);
        v59 = (char *)v58;
        if (v58)
          sub_100007780(v58);
      }
      else
      {
        v59 = 0;
      }
      free(v59);
    }

    return 0;
  }
}

void sub_1000338CC(const __CFDictionary *a1)
{
  int v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  CFNumberRef v10;
  CFNumberRef v11;
  CFNumberRef v12;
  CFNumberRef v13;
  CFNumberRef v14;
  CFNumberRef v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t valuePtr;
  int v20;
  int v21;
  char v22[1024];
  statfs v23;

  memset(&v23, 0, 512);
  v18 = 0;
  valuePtr = 0;
  v17 = 0;
  v2 = sub_100004318(a1, kUMUserSessionIDKey);
  sub_100086788(a1, kUMUserSessionHomeDirKey, v22, 1024);
  if (statfs(v22, &v23))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v20 = 67109120;
        v21 = v2;
        v6 = (const char *)_os_log_send_and_compose_impl(v5, &v16, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

  }
  else
  {
    v8 = v23.f_blocks * v23.f_bsize;
    v9 = v23.f_bfree * v23.f_bsize;
    v18 = v8;
    valuePtr = v8;
    if (v8 <= v9)
      v9 = 0;
    v17 = v8 - v9;
  }
  v10 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (v10)
  {
    v11 = v10;
    CFDictionarySetValue(a1, kUMUserSessionQuotaLimitKey, v10);
    CFRelease(v11);
  }
  v12 = CFNumberCreate(0, kCFNumberLongLongType, &v18);
  if (v12)
  {
    v13 = v12;
    CFDictionarySetValue(a1, kUMUserSessionQuotaSoftLimitKey, v12);
    CFRelease(v13);
  }
  v14 = CFNumberCreate(0, kCFNumberLongLongType, &v17);
  if (v14)
  {
    v15 = v14;
    CFDictionarySetValue(a1, kUMUserSessionQuotaUsedKey, v14);
    CFRelease(v15);
  }
}

uint64_t sub_100033BA8(const __CFData *a1, uint64_t a2)
{
  int Length;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  __CFDictionary *v11;
  CFNumberRef v12;
  CFTypeRef v13;
  const void *v14;
  uint64_t v15;
  void *v16;
  void *v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v34;
  int valuePtr;
  int v36;
  int v37;

  if (!a1)
    return 0;
  Length = CFDataGetLength(a1);
  valuePtr = Length;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v5 = (id)qword_1000E0060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v34 = 0;
    v6 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      v36 = 67109120;
      v37 = Length;
      v8 = (const char *)_os_log_send_and_compose_impl(v7, &v34, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  v11 = sub_100086BFC();
  v12 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionaryAddValue(v11, CFSTR("BLOBLEN"), v12);
  CFRelease(v12);
  CFDictionaryAddValue(v11, CFSTR("BLOB"), a1);
  v13 = sub_100086820(v11);
  if (v13)
  {
    v14 = v13;
    v15 = sub_100007EF0(qword_1000E0318);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
    v18 = objc_msgSend(v16, "atomicallyWriteData:toPath:error:", v14, v17, 0);

    if (v18)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LOWORD(v36) = 0;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, &v34, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }
      v10 = 1;
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v29 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v30 = v29;
        else
          v30 = v29 & 0xFFFFFFFE;
        if ((_DWORD)v30)
        {
          LOWORD(v36) = 0;
          v31 = (const char *)_os_log_send_and_compose_impl(v30, &v34, 0, 0);
          v32 = (char *)v31;
          if (v31)
            sub_100007780(v31);
        }
        else
        {
          v32 = 0;
        }
        free(v32);
      }
      v10 = 0;
    }

    CFRelease(v14);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v24 = (id)qword_1000E0060;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v34 = 0;
      v25 = sub_100007750(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        LOWORD(v36) = 0;
        v27 = (const char *)_os_log_send_and_compose_impl(v26, &v34, 0, 0);
        v28 = (char *)v27;
        if (v27)
          sub_100007780(v27);
      }
      else
      {
        v28 = 0;
      }
      free(v28);
    }

    v10 = 0;
  }
  CFRelease(v11);
  return v10;
}

const __CFDictionary *sub_10003402C(const __CFDictionary *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  int v3;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  CFNumberRef v26;
  CFNumberRef v27;
  CFNumberRef v28;
  CFNumberRef v29;
  CFNumberRef v30;
  CFNumberRef v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t valuePtr;
  int v39;
  int v40;
  char v41[1024];

  v1 = (const __CFDictionary *)sub_100025934(a1);
  v2 = v1;
  if (v1)
  {
    if (sub_100004318(v1, kUMUserSessionIDKey) != 502)
    {
      v37 = 0;
      valuePtr = 0;
      v36 = 0;
      v3 = sub_100004318(v2, kUMUserSessionIDKey);
      sub_100086788(v2, kUMUserSessionHomeDirKey, v41, 1024);
      if (byte_1000DF220)
      {
        if (v3 == sub_100058C2C(qword_1000E0038) || v3 == dword_1000DF224)
          sub_1000338CC(v2);
      }
      else
      {
        v33 = 0;
        v34 = 0;
        v35 = 0;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v10 = (id)qword_1000E0060;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v32 = 0;
          v11 = sub_100007750(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            v12 = v11;
          else
            v12 = v11 & 0xFFFFFFFE;
          if ((_DWORD)v12)
          {
            v39 = 67109120;
            v40 = v3;
            v13 = (const char *)_os_log_send_and_compose_impl(v12, &v32, 0, 0);
            v14 = (char *)v13;
            if (v13)
              sub_100007780(v13);
          }
          else
          {
            v14 = 0;
          }
          free(v14);
        }

        if (fsctl(v41, 0x40184A03uLL, &v33, 0))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v16 = (id)qword_1000E0060;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            v32 = 0;
            v17 = sub_100007750(1);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              v18 = v17;
            else
              v18 = v17 & 0xFFFFFFFE;
            if ((_DWORD)v18)
            {
              v39 = 67109120;
              v40 = v3;
              v19 = (const char *)_os_log_send_and_compose_impl(v18, &v32, 0, 0);
              v20 = (char *)v19;
              if (v19)
                sub_100007780(v19);
            }
            else
            {
              v20 = 0;
            }
            free(v20);
          }

        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v21 = (id)qword_1000E0060;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            v32 = 0;
            v22 = sub_100007750(1);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              v23 = v22;
            else
              v23 = v22 & 0xFFFFFFFE;
            if ((_DWORD)v23)
            {
              v39 = 67109120;
              v40 = v3;
              v24 = (const char *)_os_log_send_and_compose_impl(v23, &v32, 0, 0);
              v25 = (char *)v24;
              if (v24)
                sub_100007780(v24);
            }
            else
            {
              v25 = 0;
            }
            free(v25);
          }

          v37 = 0;
          valuePtr = 0;
          v36 = v34;
        }
        v26 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
        if (v26)
        {
          v27 = v26;
          CFDictionarySetValue(v2, kUMUserSessionQuotaLimitKey, v26);
          CFRelease(v27);
        }
        v28 = CFNumberCreate(0, kCFNumberLongLongType, &v37);
        if (v28)
        {
          v29 = v28;
          CFDictionarySetValue(v2, kUMUserSessionQuotaSoftLimitKey, v28);
          CFRelease(v29);
        }
        v30 = CFNumberCreate(0, kCFNumberLongLongType, &v36);
        if (v30)
        {
          v31 = v30;
          CFDictionarySetValue(v2, kUMUserSessionQuotaUsedKey, v30);
          CFRelease(v31);
        }
      }
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v41 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        LOWORD(v33) = 0;
        v8 = (const char *)_os_log_send_and_compose_impl(v7, v41, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

  }
  return v2;
}

const void *sub_100034554(const __CFDictionary *a1, _DWORD *a2)
{
  const __CFDictionary *v3;
  const __CFDictionary *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  const void *Value;
  const void *v16;
  uint64_t v18;
  _QWORD v19[3];

  v3 = (const __CFDictionary *)sub_100025934(a1);
  if (!v3)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v10 = (id)qword_1000E0060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v19[0] = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        LOWORD(v18) = 0;
        v13 = (const char *)_os_log_send_and_compose_impl(v12, v19, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

    if (a2)
    {
      v16 = 0;
      *a2 = 2;
      return v16;
    }
    return 0;
  }
  v4 = v3;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v5 = (id)qword_1000E0060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v18 = 0;
    v6 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      LODWORD(v19[0]) = 138412290;
      *(_QWORD *)((char *)v19 + 4) = v4;
      v8 = (const char *)_os_log_send_and_compose_impl(v7, &v18, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  if (!CFDictionaryContainsKey(v4, kUMUserSessionKeybagOpaqueDataKey))
    return 0;
  Value = CFDictionaryGetValue(v4, kUMUserSessionKeybagOpaqueDataKey);
  v16 = Value;
  if (Value)
    CFRetain(Value);
  return v16;
}

uint64_t sub_1000347B0(const __CFDictionary *a1, const void *a2, _DWORD *a3)
{
  const __CFDictionary *v5;
  __CFDictionary *v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  uint64_t v34;
  int v35;
  int v36;

  v5 = (const __CFDictionary *)sub_100025934(a1);
  if (v5)
  {
    v6 = v5;
    v7 = sub_100004318(v5, kUMUserSessionIDKey);
    if (a2)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v8 = (id)qword_1000E0060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v9 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          v35 = 67109120;
          v36 = v7;
          v11 = (const char *)_os_log_send_and_compose_impl(v10, &v34, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v12 = 0;
        }
        free(v12);
      }

      CFDictionarySetValue(v6, kUMUserSessionKeybagOpaqueDataKey, a2);
LABEL_50:
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v28 = (id)qword_1000E0060;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v29 = sub_100007750(1);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
          v30 = v29;
        else
          v30 = v29 & 0xFFFFFFFE;
        if ((_DWORD)v30)
        {
          v35 = 67109120;
          v36 = v7;
          v31 = (const char *)_os_log_send_and_compose_impl(v30, &v34, 0, 0);
          v32 = (char *)v31;
          if (v31)
            sub_100007780(v31);
        }
        else
        {
          v32 = 0;
        }
        free(v32);
      }

      sub_10001DE7C();
      return 1;
    }
    if (CFDictionaryContainsKey(v6, kUMUserSessionKeybagOpaqueDataKey))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v18 = (id)qword_1000E0060;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v19 = sub_100007750(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if ((_DWORD)v20)
        {
          v35 = 67109120;
          v36 = v7;
          v21 = (const char *)_os_log_send_and_compose_impl(v20, &v34, 0, 0);
          v22 = (char *)v21;
          if (v21)
            sub_100007780(v21);
        }
        else
        {
          v22 = 0;
        }
        free(v22);
      }

      CFDictionaryRemoveValue(v6, kUMUserSessionKeybagOpaqueDataKey);
      goto LABEL_50;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v23 = (id)qword_1000E0060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      v34 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        v35 = 67109120;
        v36 = v7;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, &v34, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v13 = (id)qword_1000E0060;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v34 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v35) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, &v34, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }

    if (a3)
      *a3 = 2;
  }
  return 1;
}

CFArrayRef sub_100034CB4(int a1)
{
  id v1;
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const void *v4;
  CFTypeID v5;
  const __CFArray *Value;
  CFArrayRef Copy;

  v1 = sub_100004400(qword_1000E0038, a1);
  v2 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v1);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFDictionaryContainsKey(v2, kUMUserSessionSyncMachServicesKey)
    && (v4 = CFDictionaryGetValue(v3, kUMUserSessionSyncMachServicesKey), v5 = CFGetTypeID(v4), v5 == CFArrayGetTypeID()))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(v3, kUMUserSessionSyncMachServicesKey);
    Copy = CFArrayCreateCopy(kCFAllocatorDefault, Value);
  }
  else
  {
    Copy = 0;
  }
  CFRelease(v3);
  return Copy;
}

__CFDictionary *sub_100034D68(const __CFDictionary *a1)
{
  __CFDictionary *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t i;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  _QWORD v22[2];
  _BYTE v23[12];
  __int16 v24;
  uint64_t v25;
  _QWORD v26[22];

  v26[0] = kUMUserSessionNameKey;
  v26[1] = CFStringGetTypeID();
  v26[2] = kUMUserSessionFirstNameKey;
  v26[3] = CFStringGetTypeID();
  v26[4] = kUMUserSessionLastNameKey;
  v26[5] = CFStringGetTypeID();
  v26[6] = kUMUserSessionDisplayNameKey;
  v26[7] = CFStringGetTypeID();
  v26[8] = kUMUserSessionOpaqueDataKey;
  v26[9] = CFDataGetTypeID();
  v26[10] = kUMUserSessionFileInfoKey;
  v26[11] = CFStringGetTypeID();
  v26[12] = kUMUserSessionAuditorKey;
  v26[13] = CFBooleanGetTypeID();
  v26[14] = kUMUserSessionisTransientKey;
  v26[15] = CFBooleanGetTypeID();
  v26[16] = kUMUserSessionCloudLoginTimeStampKey;
  v26[17] = CFDateGetTypeID();
  v26[18] = kUMUserSessionDisabledKey;
  v26[19] = CFBooleanGetTypeID();
  v26[20] = kUMUserSessionLanguageKey;
  v26[21] = CFStringGetTypeID();
  v2 = (__CFDictionary *)sub_100025934(a1);
  if (v2)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v3 = (id)qword_1000E0060;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v22[0] = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        *(_DWORD *)v23 = 138412290;
        *(_QWORD *)&v23[4] = v2;
        v6 = (const char *)_os_log_send_and_compose_impl(v5, v22, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

    for (i = 0; i != 22; i += 2)
      sub_10002B798(v2, a1, (void *)v26[i], v26[i + 1]);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v14 = (id)qword_1000E0060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v22[0] = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        *(_DWORD *)v23 = 136315394;
        *(_QWORD *)&v23[4] = "setUserSessionAttributes";
        v24 = 2080;
        v25 = kMobileKeyBagUserChangedNotificationToken;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v22, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    v19 = sub_10001BEE8(qword_1000E0318);
    v8 = objc_claimAutoreleasedReturnValue(v19);
    v20 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", kMobileKeyBagUserChangedNotificationToken));
    -[NSObject post:](v8, "post:", v20);

  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v23 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        LOWORD(v22[0]) = 0;
        v11 = (const char *)_os_log_send_and_compose_impl(v10, v23, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }
  }

  return v2;
}

const void *sub_1000351C4(const char *a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  const void *v8;
  int v9;
  int v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v21;
  int v22;
  int v23;

  v1 = (const __CFDictionary *)sub_100086AB4(a1);
  if (!v1)
    return 0;
  v2 = v1;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v3 = (id)qword_1000E0060;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v21 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v22) = 0;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, &v21, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v8 = sub_1000865B8(v2, CFSTR("BLOB"));
  v9 = sub_100004318(v2, CFSTR("BLOBLEN"));
  if (v8)
  {
    v10 = v9;
    CFRetain(v8);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v22 = 67109120;
        v23 = v10;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, &v21, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        LOWORD(v22) = 0;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, &v21, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }
    v8 = 0;
  }

  CFRelease(v2);
  return v8;
}

uint64_t sub_1000354E4(int a1)
{
  uint64_t v1;
  _QWORD v3[5];
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = -1;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100035584;
  v3[3] = &unk_1000D1480;
  v4 = a1;
  v3[4] = &v5;
  dispatch_sync((dispatch_queue_t)qword_1000E0320, v3);
  v1 = *((unsigned int *)v6 + 6);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_100035584(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  int v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  int v21;
  const char *v22;
  char *v23;
  unsigned int v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  uint64_t v30;

  if (dword_1000DF21C == -1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      goto LABEL_54;
    v27 = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      LOWORD(v30) = 0;
      goto LABEL_50;
    }
LABEL_52:
    v26 = 0;
LABEL_53:
    free(v26);
    goto LABEL_54;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 40);
      LODWORD(v27) = 67109376;
      HIDWORD(v27) = v5;
      v28 = 1024;
      v29 = dword_1000DF21C;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v30, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v11 = *(_DWORD *)(a1 + 40);
  if (v11 != -1)
  {
    if (v11 >= 1 && v11 <= dword_1000DF21C)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v12 = (id)qword_1000E0060;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v27 = 0;
        v13 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v14)
        {
          v15 = *(_DWORD *)(a1 + 40);
          LODWORD(v30) = 67109120;
          HIDWORD(v30) = v15;
          v16 = (const char *)_os_log_send_and_compose_impl(v14, &v27, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      dword_1000DF21C = *(_DWORD *)(a1 + 40);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dword_1000DF21C;
      sub_10001DE7C();
      return;
    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = -1;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v8 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_54:

      return;
    }
    v27 = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v24;
    else
      v10 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      LOWORD(v30) = 0;
LABEL_50:
      v25 = (const char *)_os_log_send_and_compose_impl(v10, &v27, 0, 0);
      v26 = (char *)v25;
      if (v25)
        sub_100007780(v25);
      goto LABEL_53;
    }
    goto LABEL_52;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dword_1000DF21C;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v18 = (id)qword_1000E0060;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    v27 = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v20)
    {
      v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      LODWORD(v30) = 67109120;
      HIDWORD(v30) = v21;
      v22 = (const char *)_os_log_send_and_compose_impl(v20, &v27, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

}

uint64_t sub_100035A4C()
{
  return MGGetBoolAnswer(CFSTR("InternalBuild"));
}

uint64_t sub_100035A58(uint64_t a1)
{
  id v2;
  uint64_t v3;
  const __CFDictionary *v4;
  NSObject *v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t *v26;
  NSObject *v27;
  unsigned int v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  const void *v32;
  char v33;
  uint64_t persona;
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  NSObject *v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  _BYTE *v59;
  NSObject *v60;
  unsigned int v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  void *v65;
  unsigned int v66;
  NSObject *v67;
  unsigned int v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  id v73;
  char *v74;
  unsigned int v75;
  const char *v76;
  char *v77;
  NSObject *v78;
  unsigned int v79;
  NSObject *v80;
  uint64_t v81;
  unsigned int v82;
  char *v83;
  int SyncBagForUser;
  unsigned int v85;
  const char *v86;
  char *v87;
  NSObject *v88;
  unsigned int v89;
  NSObject *v90;
  uint64_t v91;
  unsigned int v92;
  char *v93;
  NSObject *v94;
  unsigned int v95;
  NSObject *v96;
  uint64_t v97;
  char *v98;
  NSObject *v100;
  unsigned int v101;
  NSObject *v102;
  uint64_t v103;
  char *v104;
  NSObject *v105;
  unsigned int v106;
  NSObject *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  NSObject *v113;
  unsigned int v114;
  NSObject *v115;
  uint64_t v116;
  char *v117;
  NSObject *v118;
  uint64_t v119;
  NSObject *v120;
  id v121;
  char *v122;
  uint64_t *v123;
  uint64_t v124;
  BOOL v125;
  id v126;
  id v127;
  _BYTE v128[18];
  _QWORD v129[2];
  uint64_t v130;
  __int16 v131;
  id v132;

  v2 = sub_100004400(qword_1000E0038, a1);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  if (v3)
  {
    v4 = (const __CFDictionary *)v3;
    bzero(&v130, 0x400uLL);
    sub_100086788(v4, kUMUserSessionHomeDirKey, (char *)&v130, 1024);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v129[0] = 0;
      v6 = sub_100007750(1);
      v7 = v5;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v8 = v6;
      else
        v8 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        *(_DWORD *)v128 = 67109378;
        *(_DWORD *)&v128[4] = a1;
        *(_WORD *)&v128[8] = 2080;
        *(_QWORD *)&v128[10] = &v130;
        LODWORD(v124) = 18;
        v123 = (uint64_t *)v128;
        v9 = (char *)_os_log_send_and_compose_impl(v8, v129, 0, 0);

        if (v9)
          sub_100007780(v9);
      }
      else
      {

        v9 = 0;
      }
      free(v9);
    }

    if (sub_100037148(a1, (const char *)&v130, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v15 = (id)qword_1000E0060;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v128 = 0;
        v16 = sub_100007750(1);
        v15 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LODWORD(v129[0]) = 67109120;
          HIDWORD(v129[0]) = a1;
          LODWORD(v124) = 8;
          v123 = v129;
          goto LABEL_39;
        }
        goto LABEL_41;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v15 = (id)qword_1000E0060;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v128 = 0;
        v18 = sub_100007750(1);
        v15 = v15;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v18;
        else
          v17 = v18 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LODWORD(v129[0]) = 67109120;
          HIDWORD(v129[0]) = a1;
          LODWORD(v124) = 8;
          v123 = v129;
LABEL_39:
          v19 = (char *)_os_log_send_and_compose_impl(v17, v128, 0, 0);

          if (v19)
            sub_100007780(v19);
          goto LABEL_42;
        }
LABEL_41:

        v19 = 0;
LABEL_42:
        free(v19);
      }
    }

    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v20 = (id)qword_1000E0060;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v128 = 0;
      v21 = sub_100007750(1);
      v22 = v20;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v23 = v21;
      else
        v23 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LODWORD(v129[0]) = 67109120;
        HIDWORD(v129[0]) = a1;
        LODWORD(v124) = 8;
        v123 = v129;
        v24 = (char *)_os_log_send_and_compose_impl(v23, v128, 0, 0);

        if (v24)
          sub_100007780(v24);
      }
      else
      {

        v24 = 0;
      }
      free(v24);
    }

    v25 = CFDictionaryContainsKey(v4, kUMUserSessionVolumeDeviceNodeKey);
    v26 = &qword_1000E0000;
    if (!v25)
    {
      v125 = 0;
      v10 = 0;
      v32 = 0;
      goto LABEL_66;
    }
    if (!objc_msgSend((id)qword_1000E0030, "mountVolumeWithSession:mountPath:error:forPersona:", v4, 0, 0, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v41 = (id)qword_1000E0060;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v128 = 0;
        v42 = sub_100007750(1);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          v43 = v42;
        else
          v43 = v42 & 0xFFFFFFFE;
        if ((_DWORD)v43)
        {
          LOWORD(v129[0]) = 0;
          v44 = (const char *)_os_log_send_and_compose_impl(v43, v128, 0, 0);
          v45 = (char *)v44;
          if (v44)
            sub_100007780(v44);
        }
        else
        {
          v45 = 0;
        }
        free(v45);
      }

      v10 = 0;
      v35 = 0xFFFFFFFFLL;
      goto LABEL_239;
    }
    v125 = v25 != 0;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v27 = (id)qword_1000E0060;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v128 = 0;
      v28 = sub_100007750(1);
      v29 = v27;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v30 = v28;
      else
        v30 = v28 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        v123 = v129;
        v31 = (char *)_os_log_send_and_compose_impl(v30, v128, 0, 0);

        if (v31)
          sub_100007780(v31);
      }
      else
      {

        v31 = 0;
      }
      free(v31);
    }

    if (sub_1000866F8(v4, kUMUserSessionHasSyncBagKey) != 1)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v56 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        goto LABEL_216;
      *(_QWORD *)v128 = 0;
      v57 = sub_100007750(1);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        v58 = v57;
      else
        v58 = v57 & 0xFFFFFFFE;
      if ((_DWORD)v58)
      {
        LODWORD(v129[0]) = 67109120;
        HIDWORD(v129[0]) = a1;
        LODWORD(v124) = 8;
        v123 = v129;
        v59 = v128;
        goto LABEL_212;
      }
LABEL_214:
      v87 = 0;
LABEL_215:
      free(v87);
LABEL_216:

      v10 = 0;
      v35 = 0xFFFFFFFFLL;
      goto LABEL_217;
    }
    if (sub_1000866F8(v4, kUMUserSessionHasSyncBagKey))
    {
      if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
      {
LABEL_203:
        SyncBagForUser = MKBUserSessionLoadSyncBagForUser(v4, a1);
        if (SyncBagForUser)
        {
LABEL_204:
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v56 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            goto LABEL_216;
          v129[0] = 0;
          v85 = sub_100007750(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            v58 = v85;
          else
            v58 = v85 & 0xFFFFFFFE;
          if ((_DWORD)v58)
          {
            *(_DWORD *)v128 = 67109376;
            *(_DWORD *)&v128[4] = a1;
            *(_WORD *)&v128[8] = 1024;
            *(_DWORD *)&v128[10] = SyncBagForUser;
            LODWORD(v124) = 14;
            v123 = (uint64_t *)v128;
            v59 = v129;
LABEL_212:
            v86 = (const char *)_os_log_send_and_compose_impl(v58, v59, 0, 0);
            v87 = (char *)v86;
            if (v86)
              sub_100007780(v86);
            goto LABEL_215;
          }
          goto LABEL_214;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v100 = (id)qword_1000E0060;
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v128 = 0;
          v101 = sub_100007750(1);
          v102 = v100;
          if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
            v103 = v101;
          else
            v103 = v101 & 0xFFFFFFFE;
          if ((_DWORD)v103)
          {
            LODWORD(v129[0]) = 67109120;
            HIDWORD(v129[0]) = a1;
            LODWORD(v124) = 8;
            v123 = v129;
            v104 = (char *)_os_log_send_and_compose_impl(v103, v128, 0, 0);

            if (v104)
              sub_100007780(v104);
          }
          else
          {

            v104 = 0;
          }
          free(v104);
        }

        v32 = sub_100086748(v4, kUMUserSessionVolumeDeviceNodeKey);
        if (v32)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v105 = (id)qword_1000E0060;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            v129[0] = 0;
            v106 = sub_100007750(1);
            v107 = v105;
            if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
              v108 = v106;
            else
              v108 = v106 & 0xFFFFFFFE;
            if ((_DWORD)v108)
            {
              *(_DWORD *)v128 = 138412546;
              *(_QWORD *)&v128[4] = v32;
              *(_WORD *)&v128[12] = 1024;
              *(_DWORD *)&v128[14] = a1;
              LODWORD(v124) = 18;
              v123 = (uint64_t *)v128;
              v109 = (char *)_os_log_send_and_compose_impl(v108, v129, 0, 0);

              if (v109)
                sub_100007780(v109);
            }
            else
            {

              v109 = 0;
            }
            free(v109);
          }

          v110 = sub_10001CA9C(qword_1000E0318);
          v111 = (void *)objc_claimAutoreleasedReturnValue(v110);
          v127 = 0;
          v112 = objc_msgSend(v111, "mapVolume:toSession:withPersona:error:", v32, a1, 0, &v127);
          v10 = v127;

          if (!v112)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v118 = (id)qword_1000E0060;
            if (os_log_type_enabled(v118, OS_LOG_TYPE_DEFAULT))
            {
              v129[0] = 0;
              LODWORD(v119) = sub_100007750(1);
              v120 = v118;
              if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
                v119 = v119;
              else
                v119 = v119 & 0xFFFFFFFE;
              if ((_DWORD)v119)
              {
                v121 = -[NSObject code](v10, "code");
                *(_DWORD *)v128 = 134217984;
                *(_QWORD *)&v128[4] = v121;
                LODWORD(v124) = 12;
                v123 = (uint64_t *)v128;
                v122 = (char *)_os_log_send_and_compose_impl(v119, v129, 0, 0);

                if (v122)
                  sub_100007780(v122);
              }
              else
              {

                v122 = 0;
              }
              free(v122);
            }

            v125 = 1;
            v35 = 0xFFFFFFFFLL;
            goto LABEL_173;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v113 = (id)qword_1000E0060;
          if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v128 = 0;
            v114 = sub_100007750(1);
            v115 = v113;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
              v116 = v114;
            else
              v116 = v114 & 0xFFFFFFFE;
            if ((_DWORD)v116)
            {
              LOWORD(v129[0]) = 0;
              LODWORD(v124) = 2;
              v123 = v129;
              v117 = (char *)_os_log_send_and_compose_impl(v116, v128, 0, 0);

              if (v117)
                sub_100007780(v117);
            }
            else
            {

              v117 = 0;
            }
            free(v117);
          }

          v33 = 1;
LABEL_67:
          persona = launch_create_persona(a1, 0);
          if (!(_DWORD)persona)
          {
            dword_1000DF224 = a1;
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v46 = (id)qword_1000E0060;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              v130 = 0;
              v47 = sub_100007750(1);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
                v48 = v47;
              else
                v48 = v47 & 0xFFFFFFFE;
              if ((_DWORD)v48)
              {
                *(_DWORD *)v128 = 67109120;
                *(_DWORD *)&v128[4] = a1;
                v49 = (const char *)_os_log_send_and_compose_impl(v48, &v130, 0, 0);
                v50 = (char *)v49;
                if (v49)
                  sub_100007780(v49);
              }
              else
              {
                v50 = 0;
              }
              free(v50);
            }

            v35 = 0;
            goto LABEL_251;
          }
          v35 = persona;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v36 = (id)qword_1000E0060;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v128 = 0;
            v37 = sub_100007750(1);
            v38 = v36;
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              v39 = v37;
            else
              v39 = v37 & 0xFFFFFFFE;
            if ((_DWORD)v39)
            {
              LODWORD(v130) = 67109376;
              HIDWORD(v130) = a1;
              v131 = 1024;
              LODWORD(v132) = v35;
              LODWORD(v124) = 14;
              v123 = &v130;
              v40 = (char *)_os_log_send_and_compose_impl(v39, v128, 0, 0);

              if (v40)
                sub_100007780(v40);
            }
            else
            {

              v40 = 0;
            }
            free(v40);
          }

          v63 = v33 ^ 1;
          if (!v32)
            v63 = 1;
          if ((v63 & 1) != 0)
          {
LABEL_172:
            v26 = &qword_1000E0000;
            if (!v25)
              goto LABEL_239;
LABEL_173:
            if (sub_100037430(v4, a1))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v78 = (id)qword_1000E0060;
              if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                v130 = 0;
                v79 = sub_100007750(1);
                v80 = v78;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  v81 = v79;
                else
                  v81 = v79 & 0xFFFFFFFE;
                if ((_DWORD)v81)
                {
                  *(_DWORD *)v128 = 67109120;
                  *(_DWORD *)&v128[4] = a1;
                  LODWORD(v124) = 8;
                  v123 = (uint64_t *)v128;
                  goto LABEL_191;
                }
                goto LABEL_193;
              }
            }
            else
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v78 = (id)qword_1000E0060;
              if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
              {
                v130 = 0;
                v82 = sub_100007750(1);
                v80 = v78;
                if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
                  v81 = v82;
                else
                  v81 = v82 & 0xFFFFFFFE;
                if ((_DWORD)v81)
                {
                  *(_DWORD *)v128 = 67109120;
                  *(_DWORD *)&v128[4] = a1;
                  LODWORD(v124) = 8;
                  v123 = (uint64_t *)v128;
LABEL_191:
                  v83 = (char *)_os_log_send_and_compose_impl(v81, &v130, 0, 0);

                  if (v83)
                    sub_100007780(v83);
                  goto LABEL_194;
                }
LABEL_193:

                v83 = 0;
LABEL_194:
                free(v83);
              }
            }

            if (!v125)
              goto LABEL_239;
LABEL_217:
            if (objc_msgSend((id)v26[6], "unmountVolumeWithSession:mountPath:error:", v4, 0, 0, v123, v124))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v88 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                goto LABEL_238;
              v130 = 0;
              v89 = sub_100007750(1);
              v90 = v88;
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                v91 = v89;
              else
                v91 = v89 & 0xFFFFFFFE;
              if ((_DWORD)v91)
              {
                *(_WORD *)v128 = 0;
                goto LABEL_234;
              }
            }
            else
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v88 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
                goto LABEL_238;
              v130 = 0;
              v92 = sub_100007750(1);
              v90 = v88;
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                v91 = v92;
              else
                v91 = v92 & 0xFFFFFFFE;
              if ((_DWORD)v91)
              {
                *(_WORD *)v128 = 0;
LABEL_234:
                v93 = (char *)_os_log_send_and_compose_impl(v91, &v130, 0, 0);

                if (v93)
                  sub_100007780(v93);
                goto LABEL_237;
              }
            }

            v93 = 0;
LABEL_237:
            free(v93);
LABEL_238:

LABEL_239:
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v94 = (id)qword_1000E0060;
            if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            {
              v130 = 0;
              v95 = sub_100007750(1);
              v96 = v94;
              if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
                v97 = v95;
              else
                v97 = v95 & 0xFFFFFFFE;
              if ((_DWORD)v97)
              {
                *(_DWORD *)v128 = 67109120;
                *(_DWORD *)&v128[4] = a1;
                v98 = (char *)_os_log_send_and_compose_impl(v97, &v130, 0, 0);

                if (v98)
                  sub_100007780(v98);
              }
              else
              {

                v98 = 0;
              }
              free(v98);
            }

            sub_10003777C(a1);
LABEL_251:
            CFRelease(v4);
            goto LABEL_252;
          }

          v64 = sub_10001CA9C(qword_1000E0318);
          v65 = (void *)objc_claimAutoreleasedReturnValue(v64);
          v126 = 0;
          v66 = objc_msgSend(v65, "unmapVolume:error:", v32, &v126);
          v10 = v126;

          if (v66)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v67 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              goto LABEL_171;
            v130 = 0;
            v68 = sub_100007750(1);
            v69 = v67;
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              v70 = v68;
            else
              v70 = v68 & 0xFFFFFFFE;
            if ((_DWORD)v70)
            {
              *(_DWORD *)v128 = 67109120;
              *(_DWORD *)&v128[4] = a1;
              LODWORD(v124) = 8;
              v123 = (uint64_t *)v128;
              v71 = &v130;
              goto LABEL_154;
            }
          }
          else
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v67 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              goto LABEL_171;
            *(_QWORD *)v128 = 0;
            LODWORD(v72) = sub_100007750(1);
            v69 = v67;
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
              v72 = v72;
            else
              v72 = v72 & 0xFFFFFFFE;
            if ((_DWORD)v72)
            {
              v73 = -[NSObject code](v10, "code");
              LODWORD(v130) = 67109376;
              HIDWORD(v130) = a1;
              v131 = 2048;
              v132 = v73;
              LODWORD(v124) = 18;
              v123 = &v130;
              v71 = (uint64_t *)v128;
              v70 = v72;
LABEL_154:
              v74 = (char *)_os_log_send_and_compose_impl(v70, v71, 0, 0);

              if (v74)
                sub_100007780(v74);
              goto LABEL_170;
            }
          }

          v74 = 0;
LABEL_170:
          free(v74);
LABEL_171:

          goto LABEL_172;
        }
        v10 = 0;
LABEL_66:
        v33 = 0;
        goto LABEL_67;
      }
      if ((sub_10004946C(v4) & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v51 = (id)qword_1000E0060;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v128 = 0;
          v52 = sub_100007750(1);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
            v53 = v52;
          else
            v53 = v52 & 0xFFFFFFFE;
          if ((_DWORD)v53)
          {
            LOWORD(v129[0]) = 0;
            LODWORD(v124) = 2;
            v123 = v129;
            v54 = (const char *)_os_log_send_and_compose_impl(v53, v128, 0, 0);
            v55 = (char *)v54;
            if (v54)
              sub_100007780(v54);
          }
          else
          {
            v55 = 0;
          }
          free(v55);
        }

        goto LABEL_203;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v60 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
LABEL_199:

        SyncBagForUser = -1;
        goto LABEL_204;
      }
      *(_QWORD *)v128 = 0;
      v75 = sub_100007750(1);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        v62 = v75;
      else
        v62 = v75 & 0xFFFFFFFE;
      if ((_DWORD)v62)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        v123 = v129;
LABEL_167:
        v76 = (const char *)_os_log_send_and_compose_impl(v62, v128, 0, 0);
        v77 = (char *)v76;
        if (v76)
          sub_100007780(v76);
        goto LABEL_198;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v60 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        goto LABEL_199;
      *(_QWORD *)v128 = 0;
      v61 = sub_100007750(1);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        v62 = v61;
      else
        v62 = v61 & 0xFFFFFFFE;
      if ((_DWORD)v62)
      {
        LOWORD(v129[0]) = 0;
        LODWORD(v124) = 2;
        v123 = v129;
        goto LABEL_167;
      }
    }
    v77 = 0;
LABEL_198:
    free(v77);
    goto LABEL_199;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v10 = (id)qword_1000E0060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v130 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      *(_DWORD *)v128 = 67109120;
      *(_DWORD *)&v128[4] = a1;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, &v130, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }
  v35 = 0xFFFFFFFFLL;
LABEL_252:

  return v35;
}

uint64_t sub_100037148(uint64_t a1, const char *a2, int a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  char *v17;
  uint64_t v19;
  _BYTE v20[12];
  __int16 v21;
  char *v22;
  char __str[1024];

  snprintf(__str, 0x400uLL, "%s/tmp", a2);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      *(_DWORD *)v20 = 136315394;
      *(_QWORD *)&v20[4] = a2;
      v21 = 2080;
      v22 = __str;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v19, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  v11 = sub_100050568(a1, a3, (uint64_t)a2, (uint64_t)__str, 0);
  if ((_DWORD)v11)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v20 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(v19) = 0;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v20 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v15;
      else
        v14 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(v19) = 0;
LABEL_29:
        v16 = (const char *)_os_log_send_and_compose_impl(v14, v20, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
        goto LABEL_32;
      }
LABEL_31:
      v17 = 0;
LABEL_32:
      free(v17);
    }
  }

  return v11;
}

uint64_t sub_100037430(const __CFDictionary *a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;

  if (!sub_1000866F8(a1, kUMUserSessionHasSyncBagKey))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v21) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, &v20, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    return 0;
  }
  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
    return MKBUserSessionUnLoadSyncBagForUser(a1, a2);
  if (sub_100049A70(a1))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v21 = 67109120;
        v22 = a2;
        v7 = (const char *)_os_log_send_and_compose_impl(v6, &v20, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
      }
      else
      {
        v8 = 0;
      }
      free(v8);
    }

    return 0;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v15 = (id)qword_1000E0060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v16 = sub_100007750(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      v21 = 67109120;
      v22 = a2;
      v18 = (const char *)_os_log_send_and_compose_impl(v17, &v20, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    free(v19);
  }

  return 0xFFFFFFFFLL;
}

uint64_t sub_10003777C(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  uint64_t v9;

  v1 = sub_100050568(a1, 0, 0, 0, 1);
  if ((_DWORD)v1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
LABEL_17:
        v6 = (const char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
        goto LABEL_20;
      }
LABEL_19:
      v7 = 0;
LABEL_20:
      free(v7);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v5;
      else
        v4 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v4)
        goto LABEL_17;
      goto LABEL_19;
    }
  }

  return v1;
}

uint64_t sub_100037920(int a1)
{
  uint64_t v2;
  CFNumberRef v3;
  __CFDictionary *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  int *v8;
  char *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  unsigned __int8 v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  unsigned int v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  unsigned __int8 v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  unsigned __int8 v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  void *v39;
  void *v40;
  unsigned __int8 v41;
  NSObject *v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  unsigned int v47;
  unsigned int v48;
  _QWORD v50[2];
  int valuePtr[4];
  char __str[1032];

  v2 = MGGetBoolAnswer(CFSTR("InternalBuild"));
  if ((_DWORD)v2)
  {
    if (a1)
    {
      byte_1000DF220 = 1;
      qword_1000E0050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
      valuePtr[0] = 502;
      v3 = CFNumberCreate(0, kCFNumberIntType, valuePtr);
      v4 = sub_100086BFC();
      CFDictionarySetValue(v4, kUMUserSessionIDKey, v3);
      sub_1000254F0(v4, 0);
      if (v3)
        CFRelease(v3);
      if (mkpath_np("/var/Users", 0x1FFu))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v5 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_103;
        v50[0] = 0;
        LODWORD(v6) = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v6 = v6;
        else
          v6 = v6 & 0xFFFFFFFE;
        if ((_DWORD)v6)
        {
          v7 = v5;
          v8 = __error();
          v9 = strerror(*v8);
          *(_DWORD *)__str = 136315138;
          *(_QWORD *)&__str[4] = v9;
          v10 = (void *)_os_log_send_and_compose_impl(v6, v50, 0, 0);

          if (!v10)
            goto LABEL_102;
          goto LABEL_100;
        }
LABEL_101:
        v10 = 0;
        goto LABEL_102;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v5 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        goto LABEL_103;
      *(_QWORD *)__str = 0;
      v19 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v20 = v19;
      else
        v20 = v19 & 0xFFFFFFFE;
      if (!(_DWORD)v20)
        goto LABEL_101;
      LOWORD(v50[0]) = 0;
      v21 = __str;
    }
    else
    {
      byte_1000DF220 = 0;
      qword_1000E0050 = 0;
      if (qword_1000E02B0)
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02B0);
      if (qword_1000E02D0)
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02D0);
      if (qword_1000E02D8)
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02D8);
      v11 = sub_100007EF0(qword_1000E0318);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = objc_msgSend(v12, "removeFileAtPath:error:", CFSTR("/private/var//keybags/usersession.kb"), 0);

      if ((v13 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v14 = (id)qword_1000E0060;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__str = 0;
          v15 = sub_100007750(1);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            v16 = v15;
          else
            v16 = v15 & 0xFFFFFFFE;
          if ((_DWORD)v16)
          {
            LOWORD(v50[0]) = 0;
            v17 = (const char *)_os_log_send_and_compose_impl(v16, __str, 0, 0);
            v18 = (char *)v17;
            if (v17)
              sub_100007780(v17);
          }
          else
          {
            v18 = 0;
          }
          free(v18);
        }

      }
      else
      {
        perror("unlink of USER_SESSION_BAG_PATH failed with error");
      }
      v22 = sub_100007EF0(qword_1000E0318);
      v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
      v24 = objc_msgSend(v23, "removeFileAtPath:error:", CFSTR("/private/var//keybags/usersyncbag.kb"), 0);

      if ((v24 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v25 = (id)qword_1000E0060;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__str = 0;
          v26 = sub_100007750(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            v27 = v26;
          else
            v27 = v26 & 0xFFFFFFFE;
          if ((_DWORD)v27)
          {
            LOWORD(v50[0]) = 0;
            v28 = (const char *)_os_log_send_and_compose_impl(v27, __str, 0, 0);
            v29 = (char *)v28;
            if (v28)
              sub_100007780(v28);
          }
          else
          {
            v29 = 0;
          }
          free(v29);
        }

      }
      else
      {
        perror("unlink of USER_SYNC_BAG_PATH failed with error");
      }
      v30 = sub_100007EF0(qword_1000E0318);
      v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
      v32 = objc_msgSend(v31, "removeFileAtPath:error:", CFSTR("/private/var/keybags/LockoutState.plist"), 0);

      if ((v32 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v33 = (id)qword_1000E0060;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)__str = 0;
          v34 = sub_100007750(1);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v35 = v34;
          else
            v35 = v34 & 0xFFFFFFFE;
          if ((_DWORD)v35)
          {
            LOWORD(v50[0]) = 0;
            v36 = (const char *)_os_log_send_and_compose_impl(v35, __str, 0, 0);
            v37 = (char *)v36;
            if (v36)
              sub_100007780(v36);
          }
          else
          {
            v37 = 0;
          }
          free(v37);
        }

      }
      else
      {
        perror("unlink of /private/var/keybags/LockoutState.plist failed with error");
      }
      snprintf(__str, 0x400uLL, "%s%s/%s.kb", "/private/var/", "keybags", "userbag");
      v38 = sub_100007EF0(qword_1000E0318);
      v39 = (void *)objc_claimAutoreleasedReturnValue(v38);
      v40 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __str));
      v41 = objc_msgSend(v39, "removeFileAtPath:error:", v40, 0);

      if ((v41 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v42 = (id)qword_1000E0060;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          v50[0] = 0;
          v43 = sub_100007750(1);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            v44 = v43;
          else
            v44 = v43 & 0xFFFFFFFE;
          if ((_DWORD)v44)
          {
            LOWORD(valuePtr[0]) = 0;
            v45 = (const char *)_os_log_send_and_compose_impl(v44, v50, 0, 0);
            v46 = (char *)v45;
            if (v45)
              sub_100007780(v45);
          }
          else
          {
            v46 = 0;
          }
          free(v46);
        }

      }
      else
      {
        perror("unlink of userBagPath failed with error");
      }
      if (sub_100031520("/var/Users"))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v5 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_103;
        v50[0] = 0;
        v47 = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v20 = v47;
        else
          v20 = v47 & 0xFFFFFFFE;
        if (!(_DWORD)v20)
          goto LABEL_101;
        LOWORD(valuePtr[0]) = 0;
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v5 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          goto LABEL_103;
        v50[0] = 0;
        v48 = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v20 = v48;
        else
          v20 = v48 & 0xFFFFFFFE;
        if (!(_DWORD)v20)
          goto LABEL_101;
        LOWORD(valuePtr[0]) = 0;
      }
      v21 = (char *)v50;
    }
    v10 = (void *)_os_log_send_and_compose_impl(v20, v21, 0, 0);
    if (!v10)
    {
LABEL_102:
      free(v10);
LABEL_103:

      return v2;
    }
LABEL_100:
    sub_100007780((const char *)v10);
    goto LABEL_102;
  }
  return v2;
}

void sub_10003819C(const __CFString *a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  const __CFDictionary *v7;
  const __CFDictionary *v8;
  uint64_t v9;
  int v10;
  const __CFString *v11;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v10 = 138412290;
      v11 = a1;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = (const __CFDictionary *)sub_10001D538();
  if (v7)
  {
    v8 = v7;
    sub_1000382EC(v7, a1);
    CFRelease(v8);
  }
}

void sub_1000382EC(const __CFDictionary *a1, const __CFString *a2)
{
  uint64_t v4;
  const void *v5;
  CFTypeID v6;
  const __CFArray *Value;
  __CFArray *MutableCopy;
  char v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  CFIndex v15;
  const __CFString *ValueAtIndex;
  const __CFString *v17;
  CFTypeID v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  int v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  _QWORD *v34;
  const char *v35;
  char *v36;
  unsigned int v37;
  _QWORD v38[2];
  _QWORD v39[3];

  v4 = sub_100004318(a1, kUMUserSessionIDKey);
  if (CFDictionaryContainsKey(a1, kUMUserSessionSyncMachServicesKey)
    && (v5 = CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey), v6 = CFGetTypeID(v5), v6 == CFArrayGetTypeID()))
  {
    Value = (const __CFArray *)CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey);
    MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, Value);
    v9 = 1;
  }
  else
  {
    MutableCopy = sub_100086C90();
    v9 = 0;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v10 = (id)qword_1000E0060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v38[0] = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      LODWORD(v39[0]) = 138412290;
      *(_QWORD *)((char *)v39 + 4) = a2;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, v38, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  if (CFArrayGetCount(MutableCopy) < 1)
  {
LABEL_22:
    CFArrayAppendValue(MutableCopy, a2);
    if ((v9 & 1) != 0)
      CFDictionaryReplaceValue(a1, kUMUserSessionSyncMachServicesKey, MutableCopy);
    else
      CFDictionarySetValue(a1, kUMUserSessionSyncMachServicesKey, MutableCopy);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v19 = (id)qword_1000E0060;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v38[0] = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        LODWORD(v39[0]) = 138412290;
        *(_QWORD *)((char *)v39 + 4) = MutableCopy;
        v22 = (const char *)_os_log_send_and_compose_impl(v21, v38, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
      }
      else
      {
        v23 = 0;
      }
      free(v23);
    }

    if (CFArrayGetCount(MutableCopy) >= 1)
    {
      CFDictionarySetValue(a1, kUMUserSessionDirtyKey, kCFBooleanTrue);
      v24 = sub_100004318(a1, kUMUserSessionIDKey);
      sub_100021344(v24);
    }
    sub_10001DE7C();
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v25 = (id)qword_1000E0060;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v38[0] = 0;
      v26 = sub_100007750(1);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        v27 = v26;
      else
        v27 = v26 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        LODWORD(v39[0]) = 67109378;
        HIDWORD(v39[0]) = v4;
        LOWORD(v39[1]) = 2112;
        *(_QWORD *)((char *)&v39[1] + 2) = MutableCopy;
        v28 = (const char *)_os_log_send_and_compose_impl(v27, v38, 0, 0);
        v29 = (char *)v28;
        if (v28)
          sub_100007780(v28);
      }
      else
      {
        v29 = 0;
      }
      free(v29);
    }

    if (_SecSyncBubbleTransfer(MutableCopy, v4, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v30 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        goto LABEL_79;
      v39[0] = 0;
      v31 = sub_100007750(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v32 = v31;
      else
        v32 = v31 & 0xFFFFFFFE;
      if (!(_DWORD)v32)
        goto LABEL_77;
      LOWORD(v38[0]) = 0;
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v30 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        goto LABEL_79;
      v39[0] = 0;
      v33 = sub_100007750(1);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
        v32 = v33;
      else
        v32 = v33 & 0xFFFFFFFE;
      if (!(_DWORD)v32)
        goto LABEL_77;
      LOWORD(v38[0]) = 0;
    }
    v34 = v39;
    goto LABEL_67;
  }
  v15 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v15);
    if (ValueAtIndex)
    {
      v17 = ValueAtIndex;
      v18 = CFGetTypeID(ValueAtIndex);
      if (v18 == CFStringGetTypeID() && CFStringCompare(v17, a2, 0) == kCFCompareEqualTo)
        break;
    }
    if (CFArrayGetCount(MutableCopy) <= ++v15)
      goto LABEL_22;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v30 = (id)qword_1000E0060;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    v38[0] = 0;
    v37 = sub_100007750(1);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      v32 = v37;
    else
      v32 = v37 & 0xFFFFFFFE;
    if ((_DWORD)v32)
    {
      LODWORD(v39[0]) = 138412290;
      *(_QWORD *)((char *)v39 + 4) = a2;
      v34 = v38;
LABEL_67:
      v35 = (const char *)_os_log_send_and_compose_impl(v32, v34, 0, 0);
      v36 = (char *)v35;
      if (v35)
        sub_100007780(v35);
      goto LABEL_78;
    }
LABEL_77:
    v36 = 0;
LABEL_78:
    free(v36);
  }
LABEL_79:

  if (MutableCopy)
    CFRelease(MutableCopy);
}

void sub_100038968()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  uint64_t v2;
  const void *Value;
  const void *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;

  v0 = (const __CFDictionary *)sub_10001D538();
  if (v0)
  {
    v1 = v0;
    if (!CFDictionaryContainsKey(v0, kUMUserSessionSyncMachServicesKey))
      goto LABEL_36;
    v2 = sub_100004318(v1, kUMUserSessionIDKey);
    Value = CFDictionaryGetValue(v1, kUMUserSessionSyncMachServicesKey);
    if (!Value)
      goto LABEL_36;
    v4 = Value;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v8 = (const char *)_os_log_send_and_compose_impl(v7, &v16, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

    if (_SecSyncBubbleTransfer(v4, v2, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      v16 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
        goto LABEL_31;
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_35;
      v16 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v13;
      else
        v12 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
LABEL_31:
        v14 = (const char *)_os_log_send_and_compose_impl(v12, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
        goto LABEL_34;
      }
    }
    v15 = 0;
LABEL_34:
    free(v15);
LABEL_35:

LABEL_36:
    CFRelease(v1);
  }
}

void sub_100038C28(const __CFString *a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;

  v2 = (const __CFDictionary *)sub_10001D538();
  if (v2)
  {
    v3 = v2;
    sub_100038C68(v2, a1);
    CFRelease(v3);
  }
}

void sub_100038C68(const __CFDictionary *a1, const __CFString *a2)
{
  uint64_t v4;
  void *Value;
  CFTypeID v6;
  CFIndex v7;
  const __CFString *ValueAtIndex;
  const __CFString *v9;
  CFTypeID v10;
  char v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  const char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  void *v36;

  v4 = sub_100004318(a1, kUMUserSessionIDKey);
  if (CFDictionaryContainsKey(a1, kUMUserSessionSyncMachServicesKey))
  {
    Value = (void *)CFDictionaryGetValue(a1, kUMUserSessionSyncMachServicesKey);
    v6 = CFGetTypeID(Value);
    if (v6 == CFArrayGetTypeID() && CFArrayGetCount((CFArrayRef)Value))
    {
      if (CFArrayGetCount((CFArrayRef)Value) < 1)
      {
LABEL_10:
        if (CFArrayGetCount((CFArrayRef)Value))
          return;
        v11 = 0;
      }
      else
      {
        v7 = 0;
        while (1)
        {
          ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)Value, v7);
          if (ValueAtIndex)
          {
            v9 = ValueAtIndex;
            v10 = CFGetTypeID(ValueAtIndex);
            if (v10 == CFStringGetTypeID() && CFStringCompare(v9, a2, 0) == kCFCompareEqualTo)
              break;
          }
          if (CFArrayGetCount((CFArrayRef)Value) <= ++v7)
            goto LABEL_10;
        }
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)Value, v7);
        CFRetain(Value);
        if (CFArrayGetCount((CFArrayRef)Value))
        {
LABEL_41:
          sub_10001DE7C();
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v22 = (id)qword_1000E0060;
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            v33 = 0;
            v23 = sub_100007750(1);
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              v24 = v23;
            else
              v24 = v23 & 0xFFFFFFFE;
            if ((_DWORD)v24)
            {
              LODWORD(v34) = 67109378;
              HIDWORD(v34) = v4;
              v35 = 2112;
              v36 = Value;
              v25 = (const char *)_os_log_send_and_compose_impl(v24, &v33, 0, 0);
              v26 = (char *)v25;
              if (v25)
                sub_100007780(v25);
            }
            else
            {
              v26 = 0;
            }
            free(v26);
          }

          if (_SecSyncBubbleTransfer(Value, v4, 0))
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v27 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              goto LABEL_73;
            v34 = 0;
            v28 = sub_100007750(1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              v29 = v28;
            else
              v29 = v28 & 0xFFFFFFFE;
            if ((_DWORD)v29)
            {
              LOWORD(v33) = 0;
              goto LABEL_69;
            }
          }
          else
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v27 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              goto LABEL_73;
            v34 = 0;
            v30 = sub_100007750(1);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              v29 = v30;
            else
              v29 = v30 & 0xFFFFFFFE;
            if ((_DWORD)v29)
            {
              LOWORD(v33) = 0;
LABEL_69:
              v31 = (const char *)_os_log_send_and_compose_impl(v29, &v34, 0, 0);
              v32 = (char *)v31;
              if (v31)
                sub_100007780(v31);
              goto LABEL_72;
            }
          }
          v32 = 0;
LABEL_72:
          free(v32);
LABEL_73:

          if (Value)
            CFRelease(Value);
          return;
        }
        v11 = 1;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v12 = (id)qword_1000E0060;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v34 = 0;
        v13 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v14)
        {
          LOWORD(v33) = 0;
          v15 = (const char *)_os_log_send_and_compose_impl(v14, &v34, 0, 0);
          v16 = (char *)v15;
          if (v15)
            sub_100007780(v15);
        }
        else
        {
          v16 = 0;
        }
        free(v16);
      }

      if ((v11 & 1) == 0)
        CFRetain(Value);
      sub_1000216D4(a1, v4);
      goto LABEL_41;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v17 = (id)qword_1000E0060;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v34 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LOWORD(v33) = 0;
        v20 = (const char *)_os_log_send_and_compose_impl(v19, &v34, 0, 0);
        v21 = (char *)v20;
        if (v20)
          sub_100007780(v20);
      }
      else
      {
        v21 = 0;
      }
      free(v21);
    }

  }
}

void sub_1000391E4(int a1, const __CFString *a2)
{
  id v3;
  const __CFDictionary *v4;
  const __CFDictionary *v5;

  v3 = sub_100004400(qword_1000E0038, a1);
  v4 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v5 = v4;
    sub_100038C68(v4, a2);
    CFRelease(v5);
  }
}

void sub_100039234(const void *a1)
{
  __CFDictionary *v2;

  v2 = (__CFDictionary *)sub_10001D538();
  if (CFDictionaryContainsKey(v2, kUMUserSessionSyncTasksKey))
  {
    CFDictionaryReplaceValue(v2, kUMUserSessionSyncTasksKey, a1);
    if (!v2)
      return;
    goto LABEL_3;
  }
  CFDictionarySetValue(v2, kUMUserSessionSyncTasksKey, a1);
  if (v2)
LABEL_3:
    CFRelease(v2);
}

const void *sub_1000392AC()
{
  const __CFDictionary *v0;
  const __CFDictionary *v1;
  const void *Value;

  v0 = (const __CFDictionary *)sub_10001D538();
  if (!v0)
    return 0;
  v1 = v0;
  if (CFDictionaryContainsKey(v0, CFSTR("UserSwitchTaskOpqueData")))
    Value = CFDictionaryGetValue(v1, CFSTR("UserSwitchTaskOpqueData"));
  else
    Value = 0;
  CFRelease(v1);
  return Value;
}

void sub_100039310(id a1)
{
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v1 = (id)qword_1000E0070;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0;
    v2 = sub_100007750(0);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v8 = 134217984;
      v9 = qword_1000E0308;
      v4 = (const char *)_os_log_send_and_compose_impl(v3, &v7, 0, 0);
      v5 = (char *)v4;
      if (v4)
        sub_100007780(v4);
    }
    else
    {
      v5 = 0;
    }
    free(v5);
  }

  dispatch_source_cancel((dispatch_source_t)qword_1000E0308);
  v6 = (void *)qword_1000E0308;
  qword_1000E0308 = 0;

  sub_100039460();
}

void sub_100039460()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  void *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  CFIndex i;
  const __CFNumber *ValueAtIndex;
  const __CFNumber *v28;
  CFTypeID v29;
  NSObject *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  unsigned int valuePtr;
  uint64_t v46;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v0 = (id)qword_1000E0060;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v46 = 0;
    v1 = sub_100007750(1);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
      v2 = v1;
    else
      v2 = v1 & 0xFFFFFFFE;
    if ((_DWORD)v2)
    {
      LOWORD(valuePtr) = 0;
      v3 = (const char *)_os_log_send_and_compose_impl(v2, &v46, 0, 0);
      v4 = (char *)v3;
      if (v3)
        sub_100007780(v3);
    }
    else
    {
      v4 = 0;
    }
    free(v4);
  }

  valuePtr = -1;
  if (sub_100020BC4())
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v6 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
      goto LABEL_20;
LABEL_69:
    v9 = 0;
LABEL_70:
    free(v9);
LABEL_71:

    return;
  }
  if (!qword_1000E02D0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v13 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v13;
    else
      v7 = v13 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_69;
LABEL_20:
    v8 = (const char *)_os_log_send_and_compose_impl(v7, &v46, 0, 0);
    v9 = (char *)v8;
    if (v8)
      sub_100007780(v8);
    goto LABEL_70;
  }
  if (!CFArrayGetCount((CFArrayRef)qword_1000E02D0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v14;
    else
      v7 = v14 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_69;
    goto LABEL_20;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  v11 = objc_msgSend(v10, "anyBubblePopClients");

  if (v11)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v12;
    else
      v7 = v12 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_69;
    goto LABEL_20;
  }
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  v16 = objc_msgSend(v15, "inLogoutProcess");

  if (v16)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v17;
    else
      v7 = v17 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_69;
    goto LABEL_20;
  }
  v18 = sub_10001BE1C(qword_1000E0318);
  v19 = (void *)objc_claimAutoreleasedReturnValue(v18);
  if (!sub_10001CA60((uint64_t)v19))
  {
    v22 = dword_1000E02C8;

    if (v22 != 1)
      goto LABEL_74;
    goto LABEL_62;
  }
  v20 = sub_10001BE1C(qword_1000E0318);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  if (sub_10001CAE4((uint64_t)v21) == 502)
  {

    goto LABEL_74;
  }
  v24 = dword_1000E02C8;

  if (v24 == 1)
  {
LABEL_62:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      goto LABEL_71;
    v46 = 0;
    v23 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v23;
    else
      v7 = v23 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_69;
    goto LABEL_20;
  }
LABEL_74:
  v25 = sub_100058C2C(qword_1000E0038);
  if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) >= 1)
  {
    for (i = 0; CFArrayGetCount((CFArrayRef)qword_1000E02D0) > i; ++i)
    {
      ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02D0, i);
      if (ValueAtIndex)
      {
        v28 = ValueAtIndex;
        v29 = CFGetTypeID(ValueAtIndex);
        if (v29 == CFNumberGetTypeID())
        {
          if (CFNumberGetValue(v28, kCFNumberIntType, &valuePtr))
          {
            if (valuePtr == v25)
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v30 = (id)qword_1000E0060;
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
              {
                v46 = 0;
                v31 = sub_100007750(1);
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                  v32 = v31;
                else
                  v32 = v31 & 0xFFFFFFFE;
                if ((_DWORD)v32)
                {
                  v33 = (const char *)_os_log_send_and_compose_impl(v32, &v46, 0, 0);
                  v34 = (char *)v33;
                  if (v33)
                    sub_100007780(v33);
                }
                else
                {
                  v34 = 0;
                }
                free(v34);
              }

            }
            else
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v35 = (id)qword_1000E0060;
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
              {
                v46 = 0;
                v36 = sub_100007750(1);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
                  v37 = v36;
                else
                  v37 = v36 & 0xFFFFFFFE;
                if ((_DWORD)v37)
                {
                  v38 = (const char *)_os_log_send_and_compose_impl(v37, &v46, 0, 0);
                  v39 = (char *)v38;
                  if (v38)
                    sub_100007780(v38);
                }
                else
                {
                  v39 = 0;
                }
                free(v39);
              }

              if (!sub_100035A58(valuePtr))
                return;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v40 = (id)qword_1000E0060;
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                v46 = 0;
                v41 = sub_100007750(1);
                if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  v42 = v41;
                else
                  v42 = v41 & 0xFFFFFFFE;
                if ((_DWORD)v42)
                {
                  v43 = (const char *)_os_log_send_and_compose_impl(v42, &v46, 0, 0);
                  v44 = (char *)v43;
                  if (v43)
                    sub_100007780(v43);
                }
                else
                {
                  v44 = 0;
                }
                free(v44);
              }

              sub_1000214F4(valuePtr);
              sub_100021344(valuePtr);
              if (qword_1000E02D0)
              {
                if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) == 1)
                  return;
              }
            }
          }
        }
      }
    }
  }
}

void sub_100039CDC()
{
  dword_1000DF224 = -1;
}

__CFDictionary *sub_100039CF0(const __CFDictionary *a1)
{
  __CFDictionary *v2;
  const void *Value;
  const void *v4;
  CFStringRef v5;
  const void *v6;
  const void *v7;
  char __str[1024];

  if (!a1)
    return 0;
  v2 = sub_100086BFC();
  Value = CFDictionaryGetValue(a1, kUMUserSessionIDKey);
  CFDictionarySetValue(v2, kUMUserSessionIDKey, Value);
  v4 = CFDictionaryGetValue(a1, kUMUserSessionGroupIDKey);
  CFDictionarySetValue(v2, kUMUserSessionGroupIDKey, v4);
  if (!CFDictionaryContainsKey(a1, kUMUserSessionLibinfoHomeDirKey))
  {
    sub_100004318(a1, kUMUserSessionIDKey);
    bzero(__str, 0x400uLL);
    if (dword_1000E02C0 == 1)
      snprintf(__str, 0x400uLL, "/var/euser%d");
    else
      snprintf(__str, 0x400uLL, "/var/user%d");
    v5 = CFStringCreateWithCString(0, __str, 0x8000100u);
    CFDictionarySetValue(a1, kUMUserSessionLibinfoHomeDirKey, v5);
    if (v5)
      CFRelease(v5);
  }
  v6 = CFDictionaryGetValue(a1, kUMUserSessionLibinfoHomeDirKey);
  CFDictionarySetValue(v2, kUMUserSessionLibinfoHomeDirKey, v6);
  v7 = CFDictionaryGetValue(a1, kUMUserSessionShortNameKey);
  CFDictionarySetValue(v2, kUMUserSessionShortNameKey, v7);
  return v2;
}

uint64_t sub_100039E98(const __CFDictionary *a1, void *a2, int a3)
{
  id v5;
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  char string[1024];

  v5 = a2;
  if (a1)
  {
    v6 = sub_100004318(a1, kUMUserSessionIDKey);
    v7 = sub_100004318(a1, kUMUserSessionGroupIDKey);
    xpc_dictionary_set_int64(v5, "pw_uid", v6);
    xpc_dictionary_set_int64(v5, "pw_gid", v7);
    bzero(string, 0x400uLL);
    sub_100086788(a1, kUMUserSessionLibinfoHomeDirKey, string, 1024);
    xpc_dictionary_set_string(v5, "pw_dir", string);
    bzero(string, 0x400uLL);
    sub_100086788(a1, kUMUserSessionShortNameKey, string, 255);
    xpc_dictionary_set_string(v5, "pw_name", string);
    xpc_dictionary_set_string(v5, "pw_shell", "/bin/bash");
    if (a3)
      v8 = "/smx7MYTQIi2M";
    else
      v8 = "*";
    xpc_dictionary_set_string(v5, "pw_passwd", v8);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t sub_10003A02C(uint64_t result, void *a2)
{
  const __CFDictionary *v2;
  __CFString *v3;
  id v4;
  int v5;
  xpc_object_t v6;
  char string[1024];

  if (result)
  {
    v2 = (const __CFDictionary *)result;
    v3 = kUMUserSessionGroupIDKey;
    v4 = a2;
    v5 = sub_100004318(v2, v3);
    xpc_dictionary_set_int64(v4, "gr_gid", v5);
    bzero(string, 0x400uLL);
    sub_100086788(v2, kUMUserSessionShortNameKey, string, 255);
    xpc_dictionary_set_string(v4, "gr_name", string);
    v6 = xpc_array_create(0, 0);
    xpc_array_set_string(v6, 0xFFFFFFFFFFFFFFFFLL, string);
    xpc_dictionary_set_value(v4, "gr_members", v6);

    return 1;
  }
  return result;
}

uint64_t sub_10003A134(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[6];
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char v7;

  v4 = 0;
  v5 = &v4;
  v6 = 0x2020000000;
  v7 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003A1CC;
  v3[3] = &unk_1000D14C8;
  v3[4] = &v4;
  v3[5] = a1;
  dispatch_sync((dispatch_queue_t)qword_1000E0328, v3);
  v1 = *((unsigned __int8 *)v5 + 24);
  _Block_object_dispose(&v4, 8);
  return v1;
}

void sub_10003A1CC(uint64_t a1)
{
  __CFArray *v2;

  v2 = (__CFArray *)qword_1000E02E0;
  if (!qword_1000E02E0)
  {
    v2 = sub_100086C90();
    qword_1000E02E0 = (uint64_t)v2;
  }
  CFArrayAppendValue(v2, *(const void **)(a1 + 40));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
}

uint64_t sub_10003A214(int a1)
{
  uint64_t v1;
  _QWORD v3[5];
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10003A2B0;
  v3[3] = &unk_1000D1480;
  v4 = a1;
  v3[4] = &v5;
  dispatch_sync((dispatch_queue_t)qword_1000E0328, v3);
  v1 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v1;
}

void sub_10003A2B0(uint64_t a1)
{
  CFIndex v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  int valuePtr;
  int v17;
  int v18;

  valuePtr = 0;
  if (qword_1000E02E0 && CFArrayGetCount((CFArrayRef)qword_1000E02E0) >= 1)
  {
    v2 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v2);
      if (!ValueAtIndex)
        break;
      v4 = ValueAtIndex;
      v5 = CFGetTypeID(ValueAtIndex);
      if (v5 != CFDictionaryGetTypeID())
        break;
      Value = (const __CFNumber *)CFDictionaryGetValue(v4, kUMUserSessionIDKey);
      if (!Value
        || (v7 = Value, v8 = CFGetTypeID(Value), v8 != CFNumberGetTypeID())
        || !CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v9 = (id)qword_1000E0060;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          v15 = 0;
          v12 = sub_100007750(1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            v11 = v12;
          else
            v11 = v12 & 0xFFFFFFFE;
          if ((_DWORD)v11)
          {
            v17 = 67109120;
            v18 = v2;
            goto LABEL_27;
          }
LABEL_29:
          v14 = 0;
          goto LABEL_30;
        }
        goto LABEL_31;
      }
      if (valuePtr == *(_DWORD *)(a1 + 40))
      {
        CFArrayRemoveValueAtIndex((CFMutableArrayRef)qword_1000E02E0, v2);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
        return;
      }
LABEL_32:
      if (CFArrayGetCount((CFArrayRef)qword_1000E02E0) <= ++v2)
        return;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v15 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if (!(_DWORD)v11)
        goto LABEL_29;
      LOWORD(v17) = 0;
LABEL_27:
      v13 = (const char *)_os_log_send_and_compose_impl(v11, &v15, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
LABEL_30:
      free(v14);
    }
LABEL_31:

    goto LABEL_32;
  }
}

CFTypeRef sub_10003A578(int a1)
{
  CFTypeRef result;
  CFIndex v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFNumber *Value;
  const __CFNumber *v7;
  CFTypeID v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  char *v14;
  uint64_t v16;
  int valuePtr;
  int v18;
  int v19;

  result = (CFTypeRef)qword_1000E02E0;
  if (qword_1000E02E0)
  {
    valuePtr = 0;
    if (CFArrayGetCount((CFArrayRef)qword_1000E02E0) >= 1)
    {
      v2 = 0;
      while (1)
      {
        ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v2);
        if (!ValueAtIndex)
          break;
        v4 = ValueAtIndex;
        v5 = CFGetTypeID(ValueAtIndex);
        if (v5 != CFDictionaryGetTypeID())
          break;
        Value = (const __CFNumber *)CFDictionaryGetValue(v4, kUMUserSessionIDKey);
        if (!Value
          || (v7 = Value, v8 = CFGetTypeID(Value), v8 != CFNumberGetTypeID())
          || !CFNumberGetValue(v7, kCFNumberIntType, &valuePtr))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v9 = (id)qword_1000E0060;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v16 = 0;
            v12 = sub_100007750(1);
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
              v11 = v12;
            else
              v11 = v12 & 0xFFFFFFFE;
            if ((_DWORD)v11)
            {
              v18 = 67109120;
              v19 = v2;
              goto LABEL_27;
            }
LABEL_29:
            v14 = 0;
            goto LABEL_30;
          }
          goto LABEL_31;
        }
        if (valuePtr == a1)
          return CFRetain(v4);
LABEL_32:
        if (CFArrayGetCount((CFArrayRef)qword_1000E02E0) <= ++v2)
          return 0;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v9 = (id)qword_1000E0060;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if (!(_DWORD)v11)
          goto LABEL_29;
        LOWORD(v18) = 0;
LABEL_27:
        v13 = (const char *)_os_log_send_and_compose_impl(v11, &v16, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
LABEL_30:
        free(v14);
      }
LABEL_31:

      goto LABEL_32;
    }
    return 0;
  }
  return result;
}

CFTypeRef sub_10003A834(const __CFString *a1)
{
  CFIndex v2;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v4;
  CFTypeID v5;
  const __CFString *Value;
  const __CFString *v7;
  CFTypeID v8;

  if (!qword_1000E02E0 || CFArrayGetCount((CFArrayRef)qword_1000E02E0) < 1)
    return 0;
  v2 = 0;
  while (1)
  {
    ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v2);
    if (ValueAtIndex)
    {
      v4 = ValueAtIndex;
      v5 = CFGetTypeID(ValueAtIndex);
      if (v5 == CFDictionaryGetTypeID())
      {
        Value = (const __CFString *)CFDictionaryGetValue(v4, kUMUserSessionShortNameKey);
        if (Value)
        {
          v7 = Value;
          v8 = CFGetTypeID(Value);
          if (v8 == CFStringGetTypeID() && CFStringCompare(v7, a1, 0) == kCFCompareEqualTo)
            break;
        }
      }
    }
    if (CFArrayGetCount((CFArrayRef)qword_1000E02E0) <= ++v2)
      return 0;
  }
  return CFRetain(v4);
}

void sub_10003A924(void *a1)
{
  CFIndex v1;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v3;
  CFTypeID v4;
  int v5;
  xpc_object_t xarray;

  xarray = a1;
  if (qword_1000E02E0 && CFArrayGetCount((CFArrayRef)qword_1000E02E0) >= 1)
  {
    v1 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v1);
      if (ValueAtIndex)
      {
        v3 = ValueAtIndex;
        v4 = CFGetTypeID(ValueAtIndex);
        if (v4 == CFDictionaryGetTypeID())
        {
          v5 = sub_100004318(v3, kUMUserSessionGroupIDKey);
          if (v5 != -1)
            xpc_array_set_int64(xarray, 0xFFFFFFFFFFFFFFFFLL, v5);
        }
      }
      ++v1;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E02E0) > v1);
  }

}

uint64_t sub_10003A9E4(void *a1)
{
  id v1;
  xpc_object_t v2;
  CFIndex v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v8[1024];
  char string[16];

  v1 = a1;
  strcpy(string, "systemusers");
  xpc_dictionary_set_int64(v1, "gr_gid", 299);
  xpc_dictionary_set_string(v1, "gr_name", string);
  v2 = xpc_array_create(0, 0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aMobile_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aIfccd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNetworkd_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aWireless_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aInstalld_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aSecurityd_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aReportmemoryex);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aAnalyticsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aTimed);
  if (qword_1000E02E0 && CFArrayGetCount((CFArrayRef)qword_1000E02E0) >= 1)
  {
    v3 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v3);
      if (ValueAtIndex)
      {
        v5 = ValueAtIndex;
        v6 = CFGetTypeID(ValueAtIndex);
        if (v6 == CFDictionaryGetTypeID())
        {
          bzero(v8, 0x400uLL);
          sub_100086788(v5, kUMUserSessionShortNameKey, v8, 1024);
          xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, v8);
        }
      }
      ++v3;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E02E0) > v3);
  }
  xpc_dictionary_set_value(v1, "gr_members", v2);

  return 1;
}

uint64_t sub_10003AC00(void *a1)
{
  id v1;
  xpc_object_t v2;
  CFIndex v3;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v5;
  CFTypeID v6;
  char v8[1024];
  char string[24];

  v1 = a1;
  strcpy(string, "_analyticsusers");
  xpc_dictionary_set_int64(v1, "gr_gid", 250);
  xpc_dictionary_set_string(v1, "gr_name", string);
  v2 = xpc_array_create(0, 0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aMobile_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aAnalyticsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aWireless_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNetworkd_1);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aTimed);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aGpsd);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aReportmemoryex);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aSecurityd_0);
  xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, aNearbyd);
  if (qword_1000E02E0 && CFArrayGetCount((CFArrayRef)qword_1000E02E0) >= 1)
  {
    v3 = 0;
    do
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02E0, v3);
      if (ValueAtIndex)
      {
        v5 = ValueAtIndex;
        v6 = CFGetTypeID(ValueAtIndex);
        if (v6 == CFDictionaryGetTypeID())
        {
          bzero(v8, 0x400uLL);
          sub_100086788(v5, kUMUserSessionShortNameKey, v8, 1024);
          xpc_array_set_string(v2, 0xFFFFFFFFFFFFFFFFLL, v8);
        }
      }
      ++v3;
    }
    while (CFArrayGetCount((CFArrayRef)qword_1000E02E0) > v3);
  }
  xpc_dictionary_set_value(v1, "gr_members", v2);

  return 1;
}

void sub_10003AE10()
{
  xpc_connection_t mach_service;
  void *v1;

  mach_service = xpc_connection_create_mach_service("com.apple.system.libinfo.muser", (dispatch_queue_t)qword_1000E0328, 1uLL);
  v1 = (void *)qword_1000E0058;
  qword_1000E0058 = (uint64_t)mach_service;

  __xpc_connection_set_logging(qword_1000E0058, 0);
  xpc_connection_set_event_handler((xpc_connection_t)qword_1000E0058, &stru_1000D1508);
  xpc_connection_resume((xpc_connection_t)qword_1000E0058);
}

void sub_10003AE74(id a1, OS_xpc_object *a2)
{
  OS_xpc_object *v2;
  _xpc_connection_s *v3;
  _QWORD handler[4];
  OS_xpc_object *v5;

  v2 = a2;
  __xpc_connection_set_logging(v2, 0);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10003AEF8;
  handler[3] = &unk_1000D1530;
  v5 = v2;
  v3 = v2;
  xpc_connection_set_event_handler(v3, handler);
  xpc_connection_resume(v3);

}

void sub_10003AEF8(uint64_t a1, void *a2)
{
  char *v3;
  xpc_object_t reply;
  const char *string;
  uint64_t v6;
  void *v7;
  const char *v8;
  const __CFString *v9;
  const __CFDictionary *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  int int64;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  int v26;
  const char *v27;
  const __CFString *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  const __CFString *v34;
  const __CFDictionary *v35;
  int v36;
  xpc_object_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  int v42;
  const __CFDictionary *v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  const __CFDictionary *v49;
  xpc_object_t object;

  object = a2;
  v3 = xpc_copy_description(object);
  free(v3);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_error)
  {
    reply = xpc_dictionary_create_reply(object);
    string = xpc_dictionary_get_string(object, "reqtype");
    if (!strcmp(string, "username"))
    {
      v8 = xpc_dictionary_get_string(object, "query");
      if (!strcmp(v8, "mobile"))
      {
        v22 = dword_1000E02C0;
        v23 = sub_10001BE1C(qword_1000E0318);
        v24 = objc_claimAutoreleasedReturnValue(v23);
        v25 = (void *)v24;
        if (v22 == 2)
        {
          v26 = sub_10001CAE4(v24);
        }
        else if (sub_10001CA60(v24))
        {
          v29 = sub_10001BE1C(qword_1000E0318);
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          v26 = sub_10001CAE4((uint64_t)v30);

        }
        else
        {
          v26 = -1;
        }

        if (v26 == -1)
          goto LABEL_52;
        v10 = (const __CFDictionary *)sub_10003A578(v26);
        if (!v10)
          goto LABEL_52;
      }
      else
      {
        v9 = CFStringCreateWithCString(kCFAllocatorDefault, v8, 0x8000100u);
        v10 = (const __CFDictionary *)sub_10003A834(v9);
        if (v9)
          CFRelease(v9);
        if (!v10)
          goto LABEL_52;
      }
    }
    else
    {
      if (strcmp(string, "uid"))
      {
        if (!strcmp(string, "gid"))
        {
          int64 = xpc_dictionary_get_int64(object, "query");
          v17 = int64;
          if (int64 == 250)
          {
            sub_10003AC00(reply);
            goto LABEL_52;
          }
          if (int64 != 299)
          {
            if (int64 == 501)
            {
              v18 = dword_1000E02C0;
              v19 = sub_10001BE1C(qword_1000E0318);
              v20 = objc_claimAutoreleasedReturnValue(v19);
              v21 = (void *)v20;
              if (v18 == 2)
              {
                v17 = sub_10001CAE4(v20);
              }
              else if (sub_10001CA60(v20))
              {
                v45 = sub_10001BE1C(qword_1000E0318);
                v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
                v17 = sub_10001CAE4((uint64_t)v46);

              }
              else
              {
                v17 = -1;
              }

            }
            if (v17 == -1)
              goto LABEL_52;
            v49 = (const __CFDictionary *)sub_10003A578(v17);
            if (!v49)
              goto LABEL_52;
            v10 = v49;
LABEL_67:
            sub_10003A02C((uint64_t)v10, reply);
            goto LABEL_51;
          }
        }
        else
        {
          if (strcmp(string, "groupname"))
          {
            if (!strcmp(string, "grouplist"))
            {
              v33 = xpc_dictionary_get_string(object, "query");
              if (v33)
              {
                v34 = CFStringCreateWithCString(kCFAllocatorDefault, v33, 0x8000100u);
                v35 = (const __CFDictionary *)sub_10003A834(v34);
                if (v34)
                  CFRelease(v34);
                if (v35)
                {
                  v36 = sub_100004318(v35, kUMUserSessionGroupIDKey);
                  v37 = xpc_array_create(0, 0);
                  xpc_array_set_int64(v37, 0xFFFFFFFFFFFFFFFFLL, v36);
                  xpc_array_set_int64(v37, 0xFFFFFFFFFFFFFFFFLL, 250);
                  xpc_array_set_int64(v37, 0xFFFFFFFFFFFFFFFFLL, 299);
                  xpc_dictionary_set_value(reply, "grouplist", v37);
                  CFRelease(v35);

                }
              }
            }
            else if (!strcmp(string, "available"))
            {
              v6 = sub_10001BE1C(qword_1000E0318);
              v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
              sub_10001CA60((uint64_t)v7);

              xpc_dictionary_set_BOOL(reply, "available", 1);
            }
            goto LABEL_52;
          }
          v27 = xpc_dictionary_get_string(object, "query");
          if (!strcmp(v27, "mobile"))
          {
            v38 = dword_1000E02C0;
            v39 = sub_10001BE1C(qword_1000E0318);
            v40 = objc_claimAutoreleasedReturnValue(v39);
            v41 = (void *)v40;
            if (v38 == 2)
            {
              v42 = sub_10001CAE4(v40);
            }
            else if (sub_10001CA60(v40))
            {
              v47 = sub_10001BE1C(qword_1000E0318);
              v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
              v42 = sub_10001CAE4((uint64_t)v48);

            }
            else
            {
              v42 = -1;
            }

            if (v42 == -1)
              goto LABEL_52;
            v10 = (const __CFDictionary *)sub_10003A578(v42);
LABEL_66:
            if (!v10)
              goto LABEL_52;
            goto LABEL_67;
          }
          if (strcmp(v27, "systemusers"))
          {
            v28 = CFStringCreateWithCString(kCFAllocatorDefault, v27, 0x8000100u);
            v10 = (const __CFDictionary *)sub_10003A834(v28);
            if (v28)
              CFRelease(v28);
            goto LABEL_66;
          }
        }
        sub_10003A9E4(reply);
LABEL_52:
        v44 = xpc_copy_description(reply);
        free(v44);
        xpc_connection_send_message(*(xpc_connection_t *)(a1 + 32), reply);

        goto LABEL_53;
      }
      v11 = xpc_dictionary_get_int64(object, "query");
      if (v11 == 501)
      {
        v12 = dword_1000E02C0;
        v13 = sub_10001BE1C(qword_1000E0318);
        v14 = objc_claimAutoreleasedReturnValue(v13);
        v15 = (void *)v14;
        if (v12 == 2)
        {
          v11 = sub_10001CAE4(v14);
        }
        else if (sub_10001CA60(v14))
        {
          v31 = sub_10001BE1C(qword_1000E0318);
          v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
          v11 = sub_10001CAE4((uint64_t)v32);

        }
        else
        {
          v11 = -1;
        }

      }
      if (v11 == -1)
        goto LABEL_52;
      v43 = (const __CFDictionary *)sub_10003A578(v11);
      if (!v43)
        goto LABEL_52;
      v10 = v43;
    }
    sub_100039E98(v10, reply, 1);
LABEL_51:
    CFRelease(v10);
    goto LABEL_52;
  }
LABEL_53:

}

void sub_10003B454(char *__format, ...)
{
  NSObject *v1;
  unsigned int v2;
  _BOOL4 v3;
  char *v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  NSObject *v8;
  unsigned int v9;
  _BOOL4 v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  const char *v14;
  _QWORD v15[2];
  _QWORD v16[2];
  char __str[16];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  va_list va;

  va_start(va, __format);
  va_copy((va_list)&v15[1], va);
  v23 = 0u;
  v24 = 0u;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)__str = 0u;
  v18 = 0u;
  vsnprintf(__str, 0x80uLL, __format, va);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v1 = (id)qword_1000E0060;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v15[0] = 0;
    v2 = sub_100007750(1);
    v3 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    v4 = 0;
    if (v3)
      v5 = v2;
    else
      v5 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LODWORD(v16[0]) = 136315138;
      *(_QWORD *)((char *)v16 + 4) = __str;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, v15, 0, 0);
      v4 = 0;
      if (v6)
      {
        v7 = v6;
        sub_100007780(v6);
        v4 = (char *)v7;
      }
    }
    free(v4);
  }

  sub_10003B6BC("usermanagerd", __str);
  sub_10003B6BC("auto-boot", "false");
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v8 = (id)qword_1000E0060;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 0;
    v9 = sub_100007750(1);
    v10 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    v11 = 0;
    if (v10)
      v12 = v9;
    else
      v12 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      LOWORD(v15[0]) = 0;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, v16, 0, 0);
      v11 = 0;
      if (v13)
      {
        v14 = v13;
        sub_100007780(v13);
        v11 = (char *)v14;
      }
    }
    free(v11);
  }

  fprintf(__stdoutp, "UMD:FATAL OTI LOAD ERROR: %s\n", __str);
  fwrite("UMD:REBOOTING INTO RECOVERY MODE.\n", 0x22uLL, 1uLL, __stdoutp);
  reboot(0);
  exit(71);
}

uint64_t sub_10003B6BC(char *cStr, const char *a2)
{
  const __CFString *v3;
  io_registry_entry_t v4;
  io_registry_entry_t v5;
  CFStringRef v6;
  CFStringRef v7;
  kern_return_t v8;
  kern_return_t v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  kern_return_t v29;

  v3 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  v4 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/options");
  if (v4)
  {
    v5 = v4;
    v6 = CFStringCreateWithCString(0, a2, 0x8000100u);
    if (v6)
    {
      v7 = v6;
      v8 = IORegistryEntrySetCFProperty(v5, v3, v6);
      if (v8)
      {
        v9 = v8;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v10 = (id)qword_1000E0060;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v27 = 0;
          v11 = sub_100007750(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            v12 = v11;
          else
            v12 = v11 & 0xFFFFFFFE;
          if ((_DWORD)v12)
          {
            v28 = 67109120;
            v29 = v9;
            v13 = (const char *)_os_log_send_and_compose_impl(v12, &v27, 0, 0);
            v14 = (char *)v13;
            if (v13)
              sub_100007780(v13);
          }
          else
          {
            v14 = 0;
          }
          free(v14);
        }

        v25 = 0xFFFFFFFFLL;
      }
      else
      {
        v25 = 0;
      }
      CFRelease(v7);
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v27 = 0;
        v21 = sub_100007750(1);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          v22 = v21;
        else
          v22 = v21 & 0xFFFFFFFE;
        if ((_DWORD)v22)
        {
          LOWORD(v28) = 0;
          v23 = (const char *)_os_log_send_and_compose_impl(v22, &v27, 0, 0);
          v24 = (char *)v23;
          if (v23)
            sub_100007780(v23);
        }
        else
        {
          v24 = 0;
        }
        free(v24);
      }

      v25 = 0xFFFFFFFFLL;
    }
    IOObjectRelease(v5);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v15 = (id)qword_1000E0060;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v27 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        LOWORD(v28) = 0;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, &v27, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }

    v25 = 0xFFFFFFFFLL;
  }
  CFRelease(v3);
  return v25;
}

uint64_t sub_10003BA3C()
{
  return sub_10003B6BC("IONVRAM-DELETE-PROPERTY", "usermanagerd");
}

const void *sub_10003BA50(int a1, int a2)
{
  NSObject *v3;
  id v4;
  __CFDictionary *v5;
  const __CFDictionary *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  const void *v12;
  const void *result;
  unsigned int v14;
  _BOOL4 v15;
  char *v16;
  uint64_t v17;
  const char *v18;
  const char *v19;
  NSObject *v20;
  unsigned int v21;
  _BOOL4 v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  NSObject *v26;
  unsigned int v27;
  _BOOL4 v28;
  char *v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  NSObject *v33;
  unsigned int v34;
  _BOOL4 v35;
  char *v36;
  uint64_t v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  int v41;
  int v42;

  LODWORD(v3) = a1;
  v4 = sub_100004400(qword_1000E0038, a1);
  v5 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(v4);
  if (!v5)
  {
    if (qword_1000E0068 == -1)
    {
LABEL_20:
      v3 = (id)qword_1000E0060;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v40 = 0;
        v14 = sub_100007750(1);
        v15 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
        v16 = 0;
        if (v15)
          v17 = v14;
        else
          v17 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LOWORD(v41) = 0;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, &v40, 0, 0);
          v16 = 0;
          if (v18)
          {
            v19 = v18;
            sub_100007780(v18);
            v16 = (char *)v19;
          }
        }
        free(v16);
      }

      sleep(2u);
      sub_10001CF20("UserManagement early boot task could not Locate primary user session of Update install user");
      goto LABEL_29;
    }
LABEL_62:
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
    goto LABEL_20;
  }
  v6 = v5;
  if (!a2)
    goto LABEL_16;
  if (!sub_10007AA94(v5))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v33 = (id)qword_1000E0060;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v34 = sub_100007750(1);
      v35 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
      v36 = 0;
      if (v35)
        v37 = v34;
      else
        v37 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v37)
      {
        LOWORD(v41) = 0;
        v38 = (const char *)_os_log_send_and_compose_impl(v37, &v40, 0, 0);
        v36 = 0;
        if (v38)
        {
          v39 = v38;
          sub_100007780(v38);
          v36 = (char *)v39;
        }
      }
      free(v36);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task failed to find device Node or volume uuid of UserVolume during update install");
    goto LABEL_62;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v7 = (id)qword_1000E0060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v40 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LOWORD(v41) = 0;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, &v40, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  sub_10001DE7C();
LABEL_16:
  v12 = sub_100086748(v6, kUMUserSessionVolumeDeviceNodeKey);
  result = sub_100086748(v6, kUMUserSessionVolumeUUIDKey);
  if (!v12)
  {
LABEL_29:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v20 = (id)qword_1000E0060;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v21 = sub_100007750(1);
      v22 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
      v23 = 0;
      if (v22)
        v24 = v21;
      else
        v24 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        v41 = 67109120;
        v42 = (int)v3;
        v25 = (const char *)_os_log_send_and_compose_impl(v24, &v40, 0, 0);
        v23 = 0;
        if (v25)
        {
          v3 = v25;
          sub_100007780(v25);
          v23 = v3;
        }
      }
      free(v23);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task missing disknode for the booted user..");
LABEL_40:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v26 = (id)qword_1000E0060;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v27 = sub_100007750(1);
      v28 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
      v29 = 0;
      if (v28)
        v30 = v27;
      else
        v30 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        v41 = 67109120;
        v42 = (int)v3;
        v31 = (const char *)_os_log_send_and_compose_impl(v30, &v40, 0, 0);
        v29 = 0;
        if (v31)
        {
          v32 = v31;
          sub_100007780(v31);
          v29 = (char *)v32;
        }
      }
      free(v29);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task missing volumeUUID for the booted user..");
  }
  if (!result)
    goto LABEL_40;
  return result;
}

id sub_10003BF7C()
{
  void *v0;
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  char *v9;
  uint64_t v11;

  v0 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(CFSTR("VolumeMigrationInProgress"), "dataUsingEncoding:", 4));
  v1 = sub_100007EF0(qword_1000E0318);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "atomicallyWriteData:toPath:error:", v0, CFSTR("/private/var//keybags/umVolumeMigration-inprogress.kb"), 0);

  if ((_DWORD)v3)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
LABEL_17:
        v8 = (const char *)_os_log_send_and_compose_impl(v6, &v11, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
        goto LABEL_20;
      }
LABEL_19:
      v9 = 0;
LABEL_20:
      free(v9);
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v4 = (id)qword_1000E0060;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v7;
      else
        v6 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v6)
        goto LABEL_17;
      goto LABEL_19;
    }
  }

  return v3;
}

void sub_10003C158()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  uint64_t v3;
  void *v4;
  id *v5;
  uint64_t v6;
  void *v7;
  uint64_t *v8;
  const __CFUUID *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  NSObject *v16;
  unsigned int v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  unsigned int v37;
  int v38;
  int v39;
  NSObject *v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t *v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  NSObject *v49;
  unsigned int v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  unsigned int v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  id v64;
  char v65;
  NSObject *v66;
  unsigned int v67;
  uint64_t v68;
  const char *v69;
  char *v70;
  unsigned int v71;
  uint64_t v72;
  const char *v73;
  char *v74;
  __CFDictionary *v75;
  unsigned int v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  const char *v80;
  unsigned int v81;
  _BOOL4 v82;
  char *v83;
  uint64_t v84;
  const char *v85;
  const char *v86;
  __CFDictionary *v87;
  unsigned int v88;
  const char *v89;
  NSObject *v90;
  unsigned int v91;
  uint64_t v92;
  const char *v93;
  CFIndex v94;
  const void *ValueAtIndex;
  NSObject *v96;
  unsigned int v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  void *v101;
  NSObject *v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  NSObject *v107;
  unsigned int v108;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  uint64_t v114;
  BOOL v115;
  NSObject *v116;
  unsigned int v117;
  uint64_t v118;
  const char *v119;
  char *v120;
  uint64_t v121;
  id v122;
  void *v123;
  NSObject *v124;
  unsigned int v125;
  uint64_t v126;
  const char *v127;
  char *v128;
  NSObject *v129;
  unsigned int v130;
  uint64_t v131;
  const char *v132;
  NSObject *v133;
  unsigned int v134;
  uint64_t v135;
  const char *v136;
  char *v137;
  NSObject *v138;
  uint64_t v139;
  __CFError *v140;
  NSObject *v141;
  int Code;
  NSObject *v143;
  unsigned int v144;
  uint64_t v145;
  const char *v146;
  char *v147;
  NSObject *v148;
  unsigned int v149;
  uint64_t v150;
  CFTypeRef v151;
  void *v152;
  NSObject *v153;
  unsigned int v154;
  uint64_t v155;
  const char *v156;
  char *v157;
  unsigned int v158;
  const char *v159;
  char *v160;
  NSObject *v161;
  unsigned int v162;
  uint64_t v163;
  const char *v164;
  char *v165;
  uint64_t v166;
  void *v167;
  NSObject *v168;
  unsigned int v169;
  uint64_t v170;
  unsigned int v171;
  uint64_t v172;
  const char *v173;
  char *v174;
  NSObject *v175;
  unsigned int v176;
  uint64_t v177;
  const char *v178;
  int v179;
  int v180;
  unsigned int v181;
  uint64_t v182;
  char v183;
  unsigned int v184;
  NSObject *v185;
  uint64_t v186;
  uint64_t *v187;
  unsigned int v188;
  uint64_t v189;
  unsigned int v190;
  uint64_t v191;
  unsigned int v192;
  char *v193;
  id v194;
  const __CFDictionary *v195;
  const __CFString *v196;
  const __CFString *v197;
  id v198;
  uint64_t v199;
  uint64_t v200;
  unsigned int v201;
  NSObject *v202;
  uint64_t v203;
  char *v204;
  NSObject *v205;
  unsigned int v206;
  NSObject *v207;
  uint64_t v208;
  char *v209;
  char v210;
  NSObject *v211;
  unsigned int v212;
  NSObject *v213;
  uint64_t v214;
  char *v215;
  char v216;
  BOOL v217;
  NSObject *v218;
  unsigned int v219;
  NSObject *v220;
  uint64_t v221;
  char *v222;
  int v223;
  NSObject *v224;
  unsigned int v225;
  NSObject *v226;
  uint64_t v227;
  char *v228;
  NSObject *v229;
  unsigned int v230;
  NSObject *v231;
  uint64_t v232;
  char *v233;
  int v234;
  BOOL v235;
  NSObject *v236;
  unsigned int v237;
  NSObject *v238;
  uint64_t v239;
  char *v240;
  int v241;
  id v242;
  NSObject *v243;
  unsigned int v244;
  NSObject *v245;
  uint64_t v246;
  char *v247;
  int v248;
  char v249;
  unsigned int v250;
  NSObject *v251;
  uint64_t v252;
  char *v253;
  id v254;
  uint64_t v255;
  const __CFDictionary *v256;
  CFDataRef v257;
  const __CFString *v258;
  const __CFUUID *v259;
  id v260;
  void *v261;
  NSObject *v262;
  unsigned int v263;
  NSObject *v264;
  uint64_t v265;
  char *v266;
  id v267;
  NSObject *v268;
  unsigned int v269;
  NSObject *v270;
  uint64_t v271;
  char *v272;
  NSObject *v273;
  unsigned int v274;
  uint64_t v275;
  char *v276;
  NSObject *v277;
  unsigned int v278;
  NSObject *v279;
  uint64_t v280;
  char *v281;
  NSObject *v282;
  unsigned int v283;
  uint64_t v284;
  char *v285;
  uint64_t v286;
  void *v287;
  unsigned int v288;
  NSObject *v289;
  unsigned int v290;
  NSObject *v291;
  uint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  id v295;
  char *v296;
  id v297;
  void *v298;
  NSObject *v299;
  unsigned int v300;
  uint64_t v301;
  char *v302;
  const __CFDictionary *v303;
  NSObject *v304;
  unsigned int v305;
  NSObject *v306;
  uint64_t v307;
  NSObject *v308;
  unsigned int v309;
  uint64_t v310;
  char *v311;
  NSObject *v312;
  unsigned int v313;
  uint64_t v314;
  char *v315;
  void *v316;
  void *v317;
  NSObject *v318;
  unsigned int v319;
  NSObject *v320;
  uint64_t v321;
  char *v322;
  NSObject *v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  unsigned int v327;
  NSObject *v328;
  unsigned int v329;
  uint64_t v330;
  void **v331;
  uint64_t v332;
  id v333;
  NSObject *v334;
  unsigned int v335;
  NSObject *v336;
  uint64_t v337;
  char *v338;
  int v339;
  int v340;
  NSObject *v341;
  unsigned int v342;
  NSObject *v343;
  uint64_t v344;
  char *v345;
  NSObject *v346;
  unsigned int v347;
  NSObject *v348;
  uint64_t v349;
  char *v350;
  NSObject *v351;
  unsigned int v352;
  NSObject *v353;
  uint64_t v354;
  char *v355;
  NSObject *v356;
  unsigned int v357;
  uint64_t v358;
  char *v359;
  NSObject *v360;
  unsigned int v361;
  uint64_t v362;
  unsigned int v363;
  BOOL v364;
  unsigned int v365;
  NSObject *v366;
  unsigned int v367;
  uint64_t v368;
  char *v369;
  NSObject *v370;
  unsigned int v371;
  NSObject *v372;
  uint64_t v373;
  char *v374;
  NSObject *v375;
  unsigned int v376;
  NSObject *v377;
  uint64_t v378;
  char *v379;
  NSObject *v380;
  unsigned int v381;
  NSObject *v382;
  uint64_t v383;
  char *v384;
  NSObject *v385;
  unsigned int v386;
  uint64_t v387;
  unsigned int v388;
  char *v389;
  NSObject *v390;
  unsigned int v391;
  NSObject *v392;
  uint64_t v393;
  char *v394;
  uint64_t v395;
  unsigned int v396;
  id v397;
  NSObject *v398;
  unsigned int v399;
  uint64_t v400;
  void **v401;
  uint64_t v402;
  id v403;
  NSObject *v404;
  unsigned int v405;
  uint64_t v406;
  char *v407;
  void *v408;
  void *v409;
  NSObject *v410;
  unsigned int v411;
  NSObject *v412;
  uint64_t v413;
  char *v414;
  id v415;
  void *v416;
  uint64_t v417;
  void *v418;
  unsigned int v419;
  NSObject *v420;
  unsigned int v421;
  uint64_t v422;
  NSObject *v423;
  uint64_t v424;
  NSObject *v425;
  id v426;
  char *v427;
  unsigned int v428;
  char *v429;
  NSObject *v430;
  unsigned int v431;
  NSObject *v432;
  uint64_t v433;
  char *v434;
  NSObject *v435;
  unsigned int v436;
  NSObject *v437;
  uint64_t v438;
  char *v439;
  NSObject *v440;
  unsigned int v441;
  uint64_t v442;
  NSObject *v443;
  unsigned int v444;
  NSObject *v445;
  uint64_t v446;
  char *v447;
  unsigned int v448;
  char *v449;
  int v450;
  int v451;
  NSObject *v452;
  unsigned int v453;
  NSObject *v454;
  uint64_t v455;
  uint64_t v456;
  void *v457;
  uint64_t v458;
  NSObject *v459;
  unsigned int v460;
  uint64_t v461;
  unsigned int v462;
  int v463;
  uint64_t v464;
  NSObject *v465;
  unsigned int v466;
  NSObject *v467;
  uint64_t v468;
  char *v469;
  NSObject *v470;
  _BOOL4 v471;
  void *v472;
  uint64_t v473;
  const char *v474;
  NSObject *v475;
  uint64_t v476;
  void *v477;
  NSObject *v478;
  unsigned int v479;
  uint64_t v480;
  char *v481;
  NSObject *v482;
  uint64_t v483;
  void *v484;
  NSObject *v485;
  _BOOL4 v486;
  void *v487;
  uint64_t v488;
  const char *v489;
  _BOOL4 v490;
  void *v491;
  uint64_t v492;
  const char *v493;
  void *v494;
  char *v495;
  _BOOL4 v496;
  void *v497;
  uint64_t v498;
  const char *v499;
  const char *v500;
  NSObject *v501;
  uint64_t v502;
  NSObject *v503;
  char *v504;
  NSObject *v505;
  uint64_t v506;
  NSObject *v507;
  char *v508;
  NSObject *v509;
  uint64_t v510;
  void *v511;
  int v512;
  id v513;
  const char *v514;
  int v515;
  id v516;
  NSObject *v517;
  unsigned int v518;
  uint64_t v519;
  char *v520;
  unsigned int v521;
  uint64_t v522;
  char *v523;
  unsigned int v524;
  uint64_t v525;
  char *v526;
  uint64_t v527;
  void *v528;
  char *v529;
  unsigned int v530;
  uint64_t v531;
  char *v532;
  unsigned int v533;
  uint64_t v534;
  char *v535;
  unsigned int v536;
  uint64_t v537;
  char *v538;
  id v539;
  const char *v540;
  int v541;
  id v542;
  id v543;
  const char *v544;
  int v545;
  id v546;
  NSObject *v547;
  uint64_t v548;
  void *v549;
  uint64_t v550;
  void *v551;
  const char *v552;
  const char *v553;
  const char *v554;
  void *v555;
  const char *v556;
  CFIndex v557;
  const char *v558;
  CFIndex v559;
  const char *v560;
  const char *v561;
  CFUUIDRef *v562;
  void **v563;
  void **v564;
  uint64_t v565;
  CFDataRef v566;
  const __CFString *v567;
  const __CFDictionary *v568;
  char v569;
  const __CFUUID *cf;
  int v571;
  id v572;
  id v573;
  id v574;
  id v575;
  UInt8 bytes;
  id v577;
  id v578;
  id v579;
  id v580;
  char v581;
  CFUUIDRef uuid[2];
  _BYTE err[12];
  __int16 v584;
  int v585;
  void *value[4];
  __int128 v587;
  __int128 v588;
  __int128 v589;
  __int128 v590;
  __int128 v591;
  __int128 v592;
  __int128 v593;
  __int128 v594;
  __int128 v595;
  __int128 v596;
  __int128 v597;
  __int128 v598;
  __int128 v599;
  __int128 v600;
  uint64_t v601;

  v581 = 1;
  v2 = sub_10005BCE4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E0318, byte_1000E0312);
  v3 = objc_claimAutoreleasedReturnValue(v2);
  v4 = (void *)qword_1000E0030;
  qword_1000E0030 = v3;

  v5 = sub_1000587C8((uint64_t)UMDUserManager, (void *)qword_1000E0030);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)qword_1000E0038;
  qword_1000E0038 = v6;

  v8 = &qword_1000E0000;
  v9 = (const __CFUUID *)&byte_1000E0313;
  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    goto LABEL_95;
  }
  *(_DWORD *)err = 0;
  if (sub_100086E7C() == 100)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v10 = (id)qword_1000E0060;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v11 = sub_100007750(1);
      v0 = v10;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        v1 = _os_log_send_and_compose_impl(v12, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    sub_10003BF7C();
  }
  if (sub_100086E7C() == 101)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v16 = (id)qword_1000E0060;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v17 = sub_100007750(1);
      v18 = v16;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        v19 = v17;
      else
        v19 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        v1 = _os_log_send_and_compose_impl(v19, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    v20 = sub_100007EF0(qword_1000E0318);
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v0 = (uint64_t)objc_msgSend(v21, "removeFileAtPath:error:", CFSTR("/private/var//keybags/usersession.kb"), 0);

    if ((v0 & 1) != 0)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v22 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        goto LABEL_49;
      value[0] = 0;
      v23 = sub_100007750(1);
      v22 = v22;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        goto LABEL_45;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v22 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        goto LABEL_49;
      value[0] = 0;
      v25 = sub_100007750(1);
      v22 = v22;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v25;
      else
        v24 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
LABEL_45:
        v0 = _os_log_send_and_compose_impl(v24, value, 0, 0);

        if (v0)
          sub_100007780((const char *)v0);
        goto LABEL_48;
      }
    }

    v0 = 0;
LABEL_48:
    free((void *)v0);
LABEL_49:

  }
  if (sub_100080010((int *)err, &v581))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v26 = (id)qword_1000E0060;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v27 = sub_100007750(1);
      v0 = v26;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        v1 = _os_log_send_and_compose_impl(v28, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    v35 = sub_10003BF7C();
    v36 = qword_1000E0068 == -1;
    if (!v35)
      goto LABEL_1264;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      goto LABEL_94;
    value[0] = 0;
    v37 = sub_100007750(1);
    v0 = v29;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v31 = v37;
    else
      v31 = v37 & 0xFFFFFFFE;
    if ((_DWORD)v31)
    {
      LOWORD(uuid[0]) = 0;
      LODWORD(v565) = 2;
      v562 = uuid;
LABEL_90:
      v1 = _os_log_send_and_compose_impl(v31, value, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
      goto LABEL_93;
    }
    goto LABEL_92;
  }
  if (sub_100027584())
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      goto LABEL_94;
    value[0] = 0;
    v30 = sub_100007750(1);
    v0 = v29;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v31 = v30;
    else
      v31 = v30 & 0xFFFFFFFE;
    if ((_DWORD)v31)
    {
      LOWORD(uuid[0]) = 0;
      LODWORD(v565) = 2;
      v562 = uuid;
      goto LABEL_90;
    }
LABEL_92:

    v1 = 0;
LABEL_93:
    free((void *)v1);
LABEL_94:

    v13 = 0;
    v14 = 0;
    v15 = 1;
    goto LABEL_95;
  }
  if (!v581)
  {
    byte_1000E0313 = 1;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v32 = (id)qword_1000E0060;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v33 = sub_100007750(1);
      v0 = v32;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v34 = v33;
      else
        v34 = v33 & 0xFFFFFFFE;
      if ((_DWORD)v34)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        v1 = _os_log_send_and_compose_impl(v34, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    v166 = sub_10001CA9C(qword_1000E0318);
    v167 = (void *)objc_claimAutoreleasedReturnValue(v166);
    objc_msgSend(v167, "setIgnoreIdentityMethods:", byte_1000E0313);

  }
  v581 = 1;
  if (sub_10008004C((int *)err, &v581))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v168 = (id)qword_1000E0060;
    if (os_log_type_enabled(v168, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v169 = sub_100007750(1);
      v0 = v168;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v170 = v169;
      else
        v170 = v169 & 0xFFFFFFFE;
      if ((_DWORD)v170)
      {
        LOWORD(uuid[0]) = 0;
        LODWORD(v565) = 2;
        v562 = uuid;
        v1 = _os_log_send_and_compose_impl(v170, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    v13 = 0;
    v15 = 0;
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v15 = 0;
    v13 = *(_DWORD *)err == 2;
  }
LABEL_95:
  if (byte_1000E0313)
    v38 = 0;
  else
    v38 = v14;
  v571 = v38;
  if (byte_1000E0313)
    v39 = 0;
  else
    v39 = v15;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v40 = (id)qword_1000E0060;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v41 = sub_100007750(1);
    v0 = v40;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v42 = v41;
    else
      v42 = v41 & 0xFFFFFFFE;
    if ((_DWORD)v42)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v562 = (CFUUIDRef *)err;
      v1 = _os_log_send_and_compose_impl(v42, value, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
    }
    else
    {

      v1 = 0;
    }
    free((void *)v1);
  }

  v9 = (const __CFUUID *)&qword_1000E0000;
  if (sub_100043404(0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v43 = &qword_1000E0000;
    v44 = (id)qword_1000E0060;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v45 = sub_100007750(1);
      v0 = v44;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v46 = v45;
      else
        v46 = v45 & 0xFFFFFFFE;
      if ((_DWORD)v46)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v562 = (CFUUIDRef *)err;
        v1 = _os_log_send_and_compose_impl(v46, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    goto LABEL_142;
  }
  v47 = objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled");
  if ((v14 | v39 ^ 1) == 1 && v47 != 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v485 = (id)qword_1000E0060;
    if (os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v0 = sub_100007750(1);
      v486 = os_log_type_enabled(v485, OS_LOG_TYPE_DEFAULT);
      v487 = 0;
      if (v486)
        v488 = v0;
      else
        v488 = v0 & 0xFFFFFFFE;
      if ((_DWORD)v488)
      {
        *(_WORD *)err = 0;
        v489 = (const char *)_os_log_send_and_compose_impl(v488, value, 0, 0);
        v487 = 0;
        if (v489)
        {
          v0 = (uint64_t)v489;
          sub_100007780(v489);
          v487 = (void *)v0;
        }
      }
      free(v487);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task Erase Install or normal boot, no UserSessions to Load...");
LABEL_1264:
    if (!v36)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v475 = (id)qword_1000E0060;
    if (os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v0 = sub_100007750(1);
      v490 = os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT);
      v491 = 0;
      if (v490)
        v492 = v0;
      else
        v492 = v0 & 0xFFFFFFFE;
      if ((_DWORD)v492)
      {
        LOWORD(uuid[0]) = 0;
        v493 = (const char *)_os_log_send_and_compose_impl(v492, value, 0, 0);
        v491 = 0;
        if (v493)
        {
          v0 = (uint64_t)v493;
          sub_100007780(v493);
          v491 = (void *)v0;
        }
      }
      free(v491);
    }

    v476 = sub_10001CF20("Creating classD marker file in /var/keybags in early boot task failed");
    goto LABEL_1275;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v43 = &qword_1000E0000;
  v49 = (id)qword_1000E0060;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v50 = sub_100007750(1);
    v0 = v49;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v51 = v50;
    else
      v51 = v50 & 0xFFFFFFFE;
    if ((_DWORD)v51)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v562 = (CFUUIDRef *)err;
      v1 = _os_log_send_and_compose_impl(v51, value, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
    }
    else
    {

      v1 = 0;
    }
    free((void *)v1);
  }

  dword_1000E02C0 = 0;
  dword_1000DF218 = 501;
  qword_1000E02B0 = (uint64_t)sub_100086C90();
  sub_10001DE7C();
LABEL_142:
  if (objc_msgSend((id)v43[6], "splitUserVolumeEnabled", v562, v565)
    && dword_1000E02C0 != 1
    && ((v13 ^ 1) & 1) == 0)
  {
    if (qword_1000E0068 == -1)
    {
LABEL_1219:
      v470 = (id)qword_1000E0060;
      if (os_log_type_enabled(v470, OS_LOG_TYPE_DEFAULT))
      {
        value[0] = 0;
        v0 = sub_100007750(1);
        v471 = os_log_type_enabled(v470, OS_LOG_TYPE_DEFAULT);
        v472 = 0;
        if (v471)
          v473 = v0;
        else
          v473 = v0 & 0xFFFFFFFE;
        if ((_DWORD)v473)
        {
          *(_WORD *)err = 0;
          LODWORD(v565) = 2;
          v563 = (void **)err;
          v474 = (const char *)_os_log_send_and_compose_impl(v473, value, 0, 0);
          v472 = 0;
          if (v474)
          {
            v0 = (uint64_t)v474;
            sub_100007780(v474);
            v472 = (void *)v0;
          }
        }
        free(v472);
      }

      sleep(2u);
      sub_10001CF20("Not shared iPad, missing User Volume cannot be located...");
      goto LABEL_1228;
    }
LABEL_1483:
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
    goto LABEL_1219;
  }
  sub_10001C838(qword_1000E0038, (void *)qword_1000E02B0);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v52 = (id)qword_1000E0060;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)err = 0;
    LODWORD(v53) = sub_100007750(1);
    v0 = v52;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v53 = v53;
    else
      v53 = v53 & 0xFFFFFFFE;
    if ((_DWORD)v53)
    {
      v54 = sub_10001C3C4(qword_1000E0038);
      v13 = objc_claimAutoreleasedReturnValue(v54);
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = (void *)v13;
      LODWORD(v565) = 12;
      v563 = value;
      v1 = _os_log_send_and_compose_impl(v53, err, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
    }
    else
    {

      v1 = 0;
    }
    free((void *)v1);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v55 = (id)qword_1000E0060;
  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v56 = sub_100007750(1);
    v0 = v55;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v57 = v56;
    else
      v57 = v56 & 0xFFFFFFFE;
    if ((_DWORD)v57)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v563 = (void **)err;
      v1 = _os_log_send_and_compose_impl(v57, value, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
    }
    else
    {

      v1 = 0;
    }
    free((void *)v1);
  }

  if (dword_1000E02C0 == 1)
  {
    v58 = sub_100004400(qword_1000E0038, 502);
    v59 = objc_claimAutoreleasedReturnValue(v58);
    if (v59)
      goto LABEL_252;
    v1 = (uint64_t)&qword_1000E0000;
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v13 = (uint64_t)&qword_1000E0000;
    v59 = (id)qword_1000E0070;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
      value[0] = 0;
      v60 = sub_100007750(0);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
        v61 = v60;
      else
        v61 = v60 & 0xFFFFFFFE;
      if ((_DWORD)v61)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v62 = (const char *)_os_log_send_and_compose_impl(v61, value, 0, 0);
        v63 = (char *)v62;
        if (v62)
          sub_100007780(v62);
      }
      else
      {
        v63 = 0;
      }
      free(v63);
    }

    v75 = sub_100022BC0(-1, 0);
    if (v75)
    {
      v59 = v75;
      if (qword_1000E0078 == -1)
        goto LABEL_205;
    }
    else
    {
      sub_10001CF20("UserManagement early boot task failed assertion: loginwindowSession != ((void *)0)");
    }
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
LABEL_205:
    v0 = (uint64_t)(id)qword_1000E0070;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v76 = sub_100007750(0);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v77 = v76;
      else
        v77 = v76 & 0xFFFFFFFE;
      if ((_DWORD)v77)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        goto LABEL_247;
      }
      goto LABEL_249;
    }
    goto LABEL_251;
  }
  v64 = sub_100004400(qword_1000E0038, 501);
  v59 = objc_claimAutoreleasedReturnValue(v64);
  if (!objc_msgSend((id)v43[6], "splitUserVolumeEnabled"))
  {
    if (v59)
      goto LABEL_252;
    v1 = (uint64_t)&qword_1000E0000;
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v13 = (uint64_t)&qword_1000E0000;
    v59 = (id)qword_1000E0070;
    if (!os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
    {
LABEL_239:

      v87 = sub_1000539C4(0);
      if (v87)
      {
        v59 = v87;
        if (*(_QWORD *)(v1 + 120) == -1)
          goto LABEL_241;
      }
      else
      {
        sub_10001CF20("UserManagement early boot task failed assertion: mobileSession != ((void *)0)");
      }
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
LABEL_241:
      v0 = (uint64_t)*(id *)(v13 + 112);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      {
        value[0] = 0;
        v88 = sub_100007750(0);
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
          v77 = v88;
        else
          v77 = v88 & 0xFFFFFFFE;
        if ((_DWORD)v77)
        {
          *(_WORD *)err = 0;
          LODWORD(v565) = 2;
          v563 = (void **)err;
LABEL_247:
          v89 = (const char *)_os_log_send_and_compose_impl(v77, value, 0, 0);
          v1 = (uint64_t)v89;
          if (v89)
            sub_100007780(v89);
          goto LABEL_250;
        }
LABEL_249:
        v1 = 0;
LABEL_250:
        free((void *)v1);
      }
LABEL_251:

      goto LABEL_252;
    }
    value[0] = 0;
    v71 = sub_100007750(0);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
      v72 = v71;
    else
      v72 = v71 & 0xFFFFFFFE;
    if ((_DWORD)v72)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v563 = (void **)err;
      v73 = (const char *)_os_log_send_and_compose_impl(v72, value, 0, 0);
      v74 = (char *)v73;
      if (v73)
        sub_100007780(v73);
      goto LABEL_238;
    }
LABEL_237:
    v74 = 0;
LABEL_238:
    free(v74);
    goto LABEL_239;
  }
  v65 = v39 ^ 1;
  if (v59)
    v65 = 1;
  if ((v65 & 1) == 0)
  {
    v1 = (uint64_t)&qword_1000E0000;
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v13 = (uint64_t)&qword_1000E0000;
    v66 = (id)qword_1000E0070;
    if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v67 = sub_100007750(0);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
        v68 = v67;
      else
        v68 = v67 & 0xFFFFFFFE;
      if ((_DWORD)v68)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v69 = (const char *)_os_log_send_and_compose_impl(v68, value, 0, 0);
        v70 = (char *)v69;
        if (v69)
          sub_100007780(v69);
      }
      else
      {
        v70 = 0;
      }
      free(v70);
    }

    v59 = sub_1000539C4(1);
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v0 = (uint64_t)(id)qword_1000E0070;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v78 = sub_100007750(0);
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v79 = v78;
      else
        v79 = v78 & 0xFFFFFFFE;
      if ((_DWORD)v79)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v80 = (const char *)_os_log_send_and_compose_impl(v79, value, 0, 0);
        v1 = (uint64_t)v80;
        if (v80)
          sub_100007780(v80);
      }
      else
      {
        v1 = 0;
      }
      free((void *)v1);
    }

  }
  if (!v59)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v59 = (id)qword_1000E0060;
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v81 = sub_100007750(1);
      v82 = os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT);
      v83 = 0;
      if (v82)
        v84 = v81;
      else
        v84 = v81 & 0xFFFFFFFE;
      if ((_DWORD)v84)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v85 = (const char *)_os_log_send_and_compose_impl(v84, value, 0, 0);
        v83 = 0;
        if (v85)
        {
          v86 = v85;
          sub_100007780(v85);
          v83 = (char *)v86;
        }
      }
      free(v83);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task unable to locate Primary user..");
    goto LABEL_237;
  }
LABEL_252:
  CFRelease(v59);
  if ((sub_1000599BC(qword_1000E0038) & 1) == 0)
  {
LABEL_1228:
    sub_10001CF20("UserManagement early boot task failed to remove nextSession file", v563, v565);
    goto LABEL_1229;
  }
  if (dword_1000E02C0 != 1)
    goto LABEL_275;
  if (byte_1000DF220 && qword_1000E02B0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v90 = (id)qword_1000E0060;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v91 = sub_100007750(1);
      if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
        v92 = v91;
      else
        v92 = v91 & 0xFFFFFFFE;
      if ((_DWORD)v92)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v93 = (const char *)_os_log_send_and_compose_impl(v92, value, 0, 0);
        v0 = (uint64_t)v93;
        if (v93)
          sub_100007780(v93);
      }
      else
      {
        v0 = 0;
      }
      free((void *)v0);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
    {
      v94 = 0;
      v0 = (uint64_t)kCFBooleanFalse;
      do
      {
        ValueAtIndex = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v94);
        if (ValueAtIndex)
        {
          v1 = (uint64_t)ValueAtIndex;
          v13 = CFGetTypeID(ValueAtIndex);
          if (v13 == CFDictionaryGetTypeID())
          {
            if (CFDictionaryContainsKey((CFDictionaryRef)v1, kUMUserSessionVolumeMountedKey))
              CFDictionarySetValue((CFMutableDictionaryRef)v1, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
          }
        }
        ++v94;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E02B0) > v94);
    }
  }
  sub_10004360C();
  if (dword_1000E02C0 != 1)
  {
LABEL_275:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v96 = (id)qword_1000E0060;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v97 = sub_100007750(1);
      v0 = v96;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v98 = v97;
      else
        v98 = v97 & 0xFFFFFFFE;
      if ((_DWORD)v98)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v1 = _os_log_send_and_compose_impl(v98, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    if (qword_1000E0040)
    {
      sub_10001CF20("UserManagement early boot task failed assertion: _gPersonaManager == ((void *)0)");
    }
    else
    {
      v99 = sub_10005BEDC((uint64_t)UMDPersonaManager, (void *)qword_1000E0038);
      v100 = objc_claimAutoreleasedReturnValue(v99);
      v101 = (void *)qword_1000E0040;
      qword_1000E0040 = v100;

      LODWORD(uuid[0]) = 0;
      v13 = (uint64_t)&qword_1000E0000;
      if (!sub_10004378C(uuid))
      {
        if (qword_1000E0088 != -1)
          dispatch_once(&qword_1000E0088, &stru_1000D1590);
        v102 = (id)qword_1000E0080;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          value[0] = 0;
          v103 = sub_100007750(0);
          v0 = v102;
          if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
            v104 = v103;
          else
            v104 = v103 & 0xFFFFFFFE;
          if ((_DWORD)v104)
          {
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = uuid[0];
            LODWORD(v565) = 8;
            v563 = (void **)err;
            v1 = _os_log_send_and_compose_impl(v104, value, 0, 0);

            if (v1)
              sub_100007780((const char *)v1);
          }
          else
          {

            v1 = 0;
          }
          free((void *)v1);
        }

        v105 = sub_10001C730(qword_1000E0040);
        v106 = (void *)objc_claimAutoreleasedReturnValue(v105);
        sub_10005A984((uint64_t)v106, 1);

      }
      if (qword_1000E0088 == -1)
        goto LABEL_301;
    }
    dispatch_once(&qword_1000E0088, &stru_1000D1590);
LABEL_301:
    v107 = *(id *)(v13 + 128);
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v108 = sub_100007750(0);
      v0 = v107;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v109 = v108;
      else
        v109 = v108 & 0xFFFFFFFE;
      if ((_DWORD)v109)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v563 = (void **)err;
        v1 = _os_log_send_and_compose_impl(v109, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v8 = &qword_1000E0000;
    v110 = *(id *)(v13 + 128);
    if (os_log_type_enabled(v110, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)err = 0;
      LODWORD(v111) = sub_100007750(0);
      v0 = v110;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEBUG))
        v111 = v111;
      else
        v111 = v111 & 0xFFFFFFFE;
      if ((_DWORD)v111)
      {
        v112 = sub_100007EF0(qword_1000E0040);
        v113 = (void *)objc_claimAutoreleasedReturnValue(v112);
        LODWORD(value[0]) = 138412290;
        *(void **)((char *)value + 4) = v113;
        LODWORD(v565) = 12;
        v563 = value;
        v1 = _os_log_send_and_compose_impl(v111, err, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    if (sub_10005BEC4())
    {
      if (sub_100066F88(qword_1000E0040))
        sub_100067404((id *)qword_1000E0040);
      sub_100067874(qword_1000E0040);
    }
  }
  LODWORD(v114) = v39 | v571;
  if (((v39 | v571) & 1) != 0)
  {
    v115 = 1;
    v9 = (const __CFUUID *)&byte_1000E0313;
  }
  else
  {
    v9 = (const __CFUUID *)&byte_1000E0313;
    v115 = byte_1000E0313 != 0;
  }
  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled", v563, v565))
  {
    if (dword_1000E02C0 != 1)
    {
      v1 = (uint64_t)&kUMUserSessionShortNameKey;
      if ((dword_1000DF218 - 501) <= 0x36
        && (v122 = sub_100004400(qword_1000E0038, dword_1000DF218),
            v123 = (void *)objc_claimAutoreleasedReturnValue(v122),
            v123,
            v123))
      {
        v121 = dword_1000DF218;
      }
      else
      {
        if (qword_1000E0078 != -1)
          dispatch_once(&qword_1000E0078, &stru_1000D1570);
        v124 = (id)qword_1000E0070;
        if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
        {
          value[0] = 0;
          v125 = sub_100007750(0);
          if (os_log_type_enabled(v124, OS_LOG_TYPE_ERROR))
            v126 = v125;
          else
            v126 = v125 & 0xFFFFFFFE;
          if ((_DWORD)v126)
          {
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = dword_1000DF218;
            LODWORD(v565) = 8;
            v564 = (void **)err;
            v127 = (const char *)_os_log_send_and_compose_impl(v126, value, 0, 0);
            v128 = (char *)v127;
            if (v127)
              sub_100007780(v127);
          }
          else
          {
            v128 = 0;
          }
          free(v128);
        }

        v121 = 501;
        dword_1000DF218 = 501;
      }
      goto LABEL_498;
    }
LABEL_341:
    v121 = 502;
    goto LABEL_498;
  }
  if (dword_1000E02C0 == 1)
    goto LABEL_341;
  if (v115)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v116 = (id)qword_1000E0060;
    if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v117 = sub_100007750(1);
      if (os_log_type_enabled(v116, OS_LOG_TYPE_DEFAULT))
        v118 = v117;
      else
        v118 = v117 & 0xFFFFFFFE;
      if ((_DWORD)v118)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
        v119 = (const char *)_os_log_send_and_compose_impl(v118, value, 0, 0);
        v120 = (char *)v119;
        if (v119)
          sub_100007780(v119);
      }
      else
      {
        v120 = 0;
      }
      free(v120);
    }

    v121 = 501;
    goto LABEL_498;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v129 = (id)qword_1000E0060;
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v130 = sub_100007750(1);
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
      v131 = v130;
    else
      v131 = v130 & 0xFFFFFFFE;
    if ((_DWORD)v131)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v564 = (void **)err;
      v132 = (const char *)_os_log_send_and_compose_impl(v131, value, 0, 0);
      v0 = (uint64_t)v132;
      if (v132)
        sub_100007780(v132);
    }
    else
    {
      v0 = 0;
    }
    free((void *)v0);
  }

  *(_QWORD *)err = 0;
  uuid[0] = 0;
  if (!AKSGetLastUser(uuid))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v138 = (id)qword_1000E0060;
    if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
    {
      v601 = 0;
      LODWORD(v139) = sub_100007750(1);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
        v139 = v139;
      else
        v139 = v139 & 0xFFFFFFFE;
      if ((_DWORD)v139)
      {
        v140 = *(__CFError **)err;
        v141 = v138;
        Code = CFErrorGetCode(v140);
        LODWORD(value[0]) = 67109378;
        HIDWORD(value[0]) = Code;
        LOWORD(value[1]) = 2112;
        *(void **)((char *)&value[1] + 2) = *(void **)err;
        LODWORD(v565) = 18;
        v564 = value;
        v0 = _os_log_send_and_compose_impl(v139, &v601, 0, 0);

        if (v0)
          sub_100007780((const char *)v0);
        LODWORD(v114) = v39 | v571;
      }
      else
      {
        v0 = 0;
      }
      free((void *)v0);
    }

    v1 = CFErrorGetCode(*(CFErrorRef *)err);
    v121 = 0xFFFFFFFFLL;
    goto LABEL_483;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v133 = (id)qword_1000E0060;
  if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
  {
    v601 = 0;
    v134 = sub_100007750(1);
    if (os_log_type_enabled(v133, OS_LOG_TYPE_DEFAULT))
      v135 = v134;
    else
      v135 = v134 & 0xFFFFFFFE;
    if ((_DWORD)v135)
    {
      LODWORD(value[0]) = 138412290;
      *(CFUUIDRef *)((char *)value + 4) = uuid[0];
      LODWORD(v565) = 12;
      v564 = value;
      v136 = (const char *)_os_log_send_and_compose_impl(v135, &v601, 0, 0);
      v137 = (char *)v136;
      if (v136)
        sub_100007780(v136);
    }
    else
    {
      v137 = 0;
    }
    free(v137);
  }

  v0 = (uint64_t)CFUUIDCreateString(kCFAllocatorDefault, uuid[0]);
  if (!v0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v148 = (id)qword_1000E0060;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v149 = sub_100007750(1);
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
        v150 = v149;
      else
        v150 = v149 & 0xFFFFFFFE;
      if ((_DWORD)v150)
      {
        LOWORD(v601) = 0;
        LODWORD(v565) = 2;
        v564 = (void **)&v601;
        goto LABEL_434;
      }
LABEL_436:
      v160 = 0;
LABEL_437:
      free(v160);
    }
LABEL_438:

    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v161 = (id)qword_1000E0060;
    if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v162 = sub_100007750(1);
      if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
        v163 = v162;
      else
        v163 = v162 & 0xFFFFFFFE;
      if ((_DWORD)v163)
      {
        LOWORD(v601) = 0;
        LODWORD(v565) = 2;
        v564 = (void **)&v601;
        v164 = (const char *)_os_log_send_and_compose_impl(v163, value, 0, 0);
        v165 = (char *)v164;
        if (v164)
          sub_100007780(v164);
      }
      else
      {
        v165 = 0;
      }
      free(v165);
    }

    v121 = 0xFFFFFFFFLL;
    v1 = 2;
    if (!v0)
      goto LABEL_483;
    goto LABEL_482;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v143 = (id)qword_1000E0060;
  if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
  {
    v601 = 0;
    v144 = sub_100007750(1);
    if (os_log_type_enabled(v143, OS_LOG_TYPE_DEFAULT))
      v145 = v144;
    else
      v145 = v144 & 0xFFFFFFFE;
    if ((_DWORD)v145)
    {
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = (void *)v0;
      LODWORD(v565) = 12;
      v564 = value;
      v146 = (const char *)_os_log_send_and_compose_impl(v145, &v601, 0, 0);
      v147 = (char *)v146;
      if (v146)
        sub_100007780(v146);
    }
    else
    {
      v147 = 0;
    }
    free(v147);
  }

  v151 = sub_10001D290((const __CFString *)v0);
  if (!v151)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v148 = (id)qword_1000E0060;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v158 = sub_100007750(1);
      if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
        v150 = v158;
      else
        v150 = v158 & 0xFFFFFFFE;
      if ((_DWORD)v150)
      {
        LOWORD(v601) = 0;
        LODWORD(v565) = 2;
        v564 = (void **)&v601;
LABEL_434:
        v159 = (const char *)_os_log_send_and_compose_impl(v150, value, 0, 0);
        v160 = (char *)v159;
        if (v159)
          sub_100007780(v159);
        goto LABEL_437;
      }
      goto LABEL_436;
    }
    goto LABEL_438;
  }
  v152 = (void *)v151;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v153 = (id)qword_1000E0060;
  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
  {
    v601 = 0;
    v154 = sub_100007750(1);
    if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
      v155 = v154;
    else
      v155 = v154 & 0xFFFFFFFE;
    if ((_DWORD)v155)
    {
      LODWORD(value[0]) = 138412290;
      *(void **)((char *)value + 4) = v152;
      LODWORD(v565) = 12;
      v564 = value;
      v156 = (const char *)_os_log_send_and_compose_impl(v155, &v601, 0, 0);
      v157 = (char *)v156;
      if (v156)
        sub_100007780(v156);
    }
    else
    {
      v157 = 0;
    }
    free(v157);
  }

  v121 = sub_100004318((const __CFDictionary *)v152, kUMUserSessionIDKey);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v114 = (uint64_t)(id)qword_1000E0060;
  if (os_log_type_enabled((os_log_t)v114, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v171 = sub_100007750(1);
    if (os_log_type_enabled((os_log_t)v114, OS_LOG_TYPE_DEFAULT))
      v172 = v171;
    else
      v172 = v171 & 0xFFFFFFFE;
    if ((_DWORD)v172)
    {
      LODWORD(v601) = 67109120;
      HIDWORD(v601) = v121;
      LODWORD(v565) = 8;
      v564 = (void **)&v601;
      v173 = (const char *)_os_log_send_and_compose_impl(v172, value, 0, 0);
      v174 = (char *)v173;
      if (v173)
        sub_100007780(v173);
    }
    else
    {
      v174 = 0;
    }
    free(v174);
    v9 = (const __CFUUID *)&byte_1000E0313;
  }

  CFRelease(v152);
  v1 = 0;
  LODWORD(v114) = v39 | v571;
LABEL_482:
  CFRelease((CFTypeRef)v0);
LABEL_483:
  if (uuid[0])
    CFRelease(uuid[0]);
  if ((_DWORD)v121 == -1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v478 = (id)qword_1000E0060;
    if (os_log_type_enabled(v478, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v0 = sub_100007750(1);
      v496 = os_log_type_enabled(v478, OS_LOG_TYPE_DEFAULT);
      v497 = 0;
      if (v496)
        v498 = v0;
      else
        v498 = v0 & 0xFFFFFFFE;
      if ((_DWORD)v498)
      {
        *(_DWORD *)err = 67109120;
        *(_DWORD *)&err[4] = v1;
        v499 = (const char *)_os_log_send_and_compose_impl(v498, value, 0, 0);
        v497 = 0;
        if (v499)
        {
          v0 = (uint64_t)v499;
          sub_100007780(v499);
          v497 = (void *)v0;
        }
      }
      free(v497);
    }

    sleep(2u);
    v480 = sub_10001CF20("UserManagement early boot taskfailed to find last booted user with error");
    goto LABEL_1306;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v175 = (id)qword_1000E0060;
  if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v176 = sub_100007750(1);
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
      v177 = v176;
    else
      v177 = v176 & 0xFFFFFFFE;
    if ((_DWORD)v177)
    {
      *(_DWORD *)err = 67109120;
      *(_DWORD *)&err[4] = v121;
      LODWORD(v565) = 8;
      v564 = (void **)err;
      v178 = (const char *)_os_log_send_and_compose_impl(v177, value, 0, 0);
      v1 = (uint64_t)v178;
      if (v178)
        sub_100007780(v178);
    }
    else
    {
      v1 = 0;
    }
    free((void *)v1);
  }

LABEL_498:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v0 = (uint64_t)(id)qword_1000E0060;
  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
  {
    v179 = v39;
    v180 = v114;
    value[0] = 0;
    v181 = sub_100007750(1);
    v1 = (uint64_t)(id)v0;
    if (os_log_type_enabled((os_log_t)v1, OS_LOG_TYPE_DEFAULT))
      v182 = v181;
    else
      v182 = v181 & 0xFFFFFFFE;
    if ((_DWORD)v182)
    {
      *(_DWORD *)err = 67109120;
      *(_DWORD *)&err[4] = v121;
      LODWORD(v565) = 8;
      v564 = (void **)err;
      v114 = _os_log_send_and_compose_impl(v182, value, 0, 0);

      if (v114)
        sub_100007780((const char *)v114);
    }
    else
    {

      v114 = 0;
    }
    free((void *)v114);
    LODWORD(v114) = v180;
    v39 = v179;
  }

  if (objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
  {
    uuid[0] = 0;
    if ((_DWORD)v114)
    {
      if (v39)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v0 = (uint64_t)(id)qword_1000E0060;
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        {
          v9 = (const __CFUUID *)v121;
          v183 = v114;
          value[0] = 0;
          v184 = sub_100007750(1);
          v185 = (id)v0;
          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
            v186 = v184;
          else
            v186 = v184 & 0xFFFFFFFE;
          if ((_DWORD)v186)
          {
            *(_WORD *)err = 0;
            LODWORD(v565) = 2;
            v564 = (void **)err;
            v114 = _os_log_send_and_compose_impl(v186, value, 0, 0);

            if (v114)
              sub_100007780((const char *)v114);
          }
          else
          {

            v114 = 0;
          }
          free((void *)v114);
          LOBYTE(v114) = v183;
          v121 = (uint64_t)v9;
        }

      }
      if (!v571)
      {
LABEL_557:
        v194 = sub_100004400(qword_1000E0038, v121);
        v195 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v194);
        if (v195)
        {
          v1 = (uint64_t)v195;
          v196 = (const __CFString *)sub_100086748(v195, kUMUserSessionUUIDKey);
          if (!v196
            || (v197 = v196,
                v9 = CFUUIDCreateFromString(kCFAllocatorDefault, v196),
                v198 = sub_10001ACF0((uint64_t)NSUUID, v9),
                v199 = objc_claimAutoreleasedReturnValue(v198),
                (cf = v9) == 0))
          {
LABEL_1229:
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v475 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v475, OS_LOG_TYPE_DEFAULT))
              goto LABEL_1278;
            value[0] = 0;
            v1 = sub_100007750(1);
            v0 = v475;
            if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
              v476 = v1;
            else
              v476 = v1 & 0xFFFFFFFE;
            if (!(_DWORD)v476)
            {

              v477 = 0;
LABEL_1277:
              free(v477);
LABEL_1278:

              sleep(2u);
              sub_10001CF20("UserManagement early boot task unable to find uuid or create CFUUID of Update install user");
              goto LABEL_1279;
            }
LABEL_1275:
            *(_WORD *)err = 0;
            LODWORD(v565) = 2;
            v564 = (void **)err;
            v1 = _os_log_send_and_compose_impl(v476, value, 0, 0);

            v477 = 0;
            if (v1)
            {
              sub_100007780((const char *)v1);
              v477 = (void *)v1;
            }
            goto LABEL_1277;
          }
          v0 = v199;
          if (v39)
          {
            v569 = v114;
            v200 = v1;
            v1 = (uint64_t)&qword_1000E0000;
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v9 = (const __CFUUID *)(id)qword_1000E0060;
            if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)err = 0;
              v201 = sub_100007750(1);
              v202 = v9;
              if (os_log_type_enabled(v202, OS_LOG_TYPE_DEFAULT))
                v203 = v201;
              else
                v203 = v201 & 0xFFFFFFFE;
              if ((_DWORD)v203)
              {
                LODWORD(value[0]) = 138412290;
                *(void **)((char *)value + 4) = cf;
                LODWORD(v565) = 12;
                v564 = value;
                v204 = (char *)_os_log_send_and_compose_impl(v203, err, 0, 0);

                if (v204)
                  sub_100007780(v204);
              }
              else
              {

                v204 = 0;
              }
              free(v204);
            }

            v216 = AKSIdentityMigrateFirst(cf, uuid);
            v217 = qword_1000E0068 == -1;
            if ((v216 & 1) != 0)
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v218 = (id)qword_1000E0060;
              if (os_log_type_enabled(v218, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)err = 0;
                v219 = sub_100007750(1);
                v220 = v218;
                if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
                  v221 = v219;
                else
                  v221 = v219 & 0xFFFFFFFE;
                if ((_DWORD)v221)
                {
                  LODWORD(value[0]) = 67109378;
                  HIDWORD(value[0]) = v121;
                  LOWORD(value[1]) = 2112;
                  *(void **)((char *)&value[1] + 2) = cf;
                  LODWORD(v565) = 18;
                  v564 = value;
                  v222 = (char *)_os_log_send_and_compose_impl(v221, err, 0, 0);

                  if (v222)
                    sub_100007780(v222);
                }
                else
                {

                  v222 = 0;
                }
                free(v222);
              }

              v580 = 0;
              v223 = sub_100044C10((void *)v0, v121, &v580);
              v9 = (const __CFUUID *)v580;
              if (!v223)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v482 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1345:

                  v515 = MGGetBoolAnswer(CFSTR("InternalBuild"));
                  v516 = -[__CFUUID code](v9, "code");
                  if (v515)
                    v516 = (id)sub_10001CF20("UpdateInstall-FATAL OTI LOAD ERROR:%ld", v516);
                  sub_10003B454("UpdateInstall-FATAL OTI LOAD ERROR:%ld", v516);
                }
                *(_QWORD *)err = 0;
                LODWORD(v1) = sub_100007750(1);
                v0 = v482;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                  v1 = v1;
                else
                  v1 = v1 & 0xFFFFFFFE;
                if (!(_DWORD)v1)
                {

                  v495 = 0;
LABEL_1344:
                  free(v495);
                  goto LABEL_1345;
                }
LABEL_1342:
                v513 = -[__CFUUID code](v9, "code", v564, v565);
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v513;
                v514 = (const char *)_os_log_send_and_compose_impl(v1, err, 0, 0);

                v495 = 0;
                if (v514)
                {
                  sub_100007780(v514);
                  v495 = (char *)v514;
                }
                goto LABEL_1344;
              }
              v1 = v200;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v224 = (id)qword_1000E0060;
              if (os_log_type_enabled(v224, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                v225 = sub_100007750(1);
                v226 = v224;
                if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
                  v227 = v225;
                else
                  v227 = v225 & 0xFFFFFFFE;
                if ((_DWORD)v227)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)err;
                  v228 = (char *)_os_log_send_and_compose_impl(v227, value, 0, 0);

                  if (v228)
                    sub_100007780(v228);
                }
                else
                {

                  v228 = 0;
                }
                free(v228);
              }

              sub_10003B6BC("IONVRAM-DELETE-PROPERTY", "usermanagerd");
              v187 = &qword_1000E0000;
              v9 = (const __CFUUID *)&byte_1000E0313;
              if (dword_1000E02C0 != 1)
                goto LABEL_847;
              v599 = 0u;
              v600 = 0u;
              v597 = 0u;
              v598 = 0u;
              v595 = 0u;
              v596 = 0u;
              v593 = 0u;
              v594 = 0u;
              v591 = 0u;
              v592 = 0u;
              v589 = 0u;
              v590 = 0u;
              v587 = 0u;
              v588 = 0u;
              memset(value, 0, sizeof(value));
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v229 = (id)qword_1000E0060;
              if (os_log_type_enabled(v229, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)err = 0;
                v230 = sub_100007750(1);
                v231 = v229;
                if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
                  v232 = v230;
                else
                  v232 = v230 & 0xFFFFFFFE;
                if ((_DWORD)v232)
                {
                  LOWORD(v601) = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)&v601;
                  v233 = (char *)_os_log_send_and_compose_impl(v232, err, 0, 0);

                  if (v233)
                    sub_100007780(v233);
                }
                else
                {

                  v233 = 0;
                }
                v187 = &qword_1000E0000;
                free(v233);
              }

              if (!sub_10007A7F4((char *)value, 256))
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v1 = v200;
                v273 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
                {
LABEL_846:

                  v9 = (const __CFUUID *)&byte_1000E0313;
                  if (*((_DWORD *)v187 + 176) == 1)
                  {
LABEL_892:
                    CFRelease(cf);
                    CFRelease((CFTypeRef)v1);
                    if (uuid[0])
                    {
                      CFRelease(uuid[0]);
                      v267 = 0;
                      uuid[0] = 0;
                    }
                    else
                    {
                      v267 = 0;
                    }
                    v8 = &qword_1000E0000;
                    LOBYTE(v114) = v569;
                    goto LABEL_1147;
                  }
LABEL_847:
                  if (!CFDictionaryContainsValue((CFDictionaryRef)v1, kUMUserSessionKeybagOpaqueDataKey))
                  {
                    value[0] = 0;
                    if (qword_1000E0068 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v334 = (id)qword_1000E0060;
                    if (os_log_type_enabled(v334, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_QWORD *)err = 0;
                      v335 = sub_100007750(1);
                      v336 = v334;
                      if (os_log_type_enabled(v336, OS_LOG_TYPE_DEFAULT))
                        v337 = v335;
                      else
                        v337 = v335 & 0xFFFFFFFE;
                      if ((_DWORD)v337)
                      {
                        LOWORD(v601) = 0;
                        LODWORD(v565) = 2;
                        v564 = (void **)&v601;
                        v338 = (char *)_os_log_send_and_compose_impl(v337, err, 0, 0);

                        if (v338)
                          sub_100007780(v338);
                      }
                      else
                      {

                        v338 = 0;
                      }
                      free(v338);
                    }

                    v339 = MKBKeyBagCopySystemOpaqueBlob(value);
                    if (v339)
                    {
                      v340 = v339;
                      if (qword_1000E0068 != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v341 = (id)qword_1000E0060;
                      if (os_log_type_enabled(v341, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)err = 0;
                        v342 = sub_100007750(1);
                        v343 = v341;
                        if (os_log_type_enabled(v343, OS_LOG_TYPE_DEFAULT))
                          v344 = v342;
                        else
                          v344 = v342 & 0xFFFFFFFE;
                        if ((_DWORD)v344)
                        {
                          LODWORD(v601) = 67109120;
                          HIDWORD(v601) = v340;
                          LODWORD(v565) = 8;
                          v564 = (void **)&v601;
                          v345 = (char *)_os_log_send_and_compose_impl(v344, err, 0, 0);

                          if (v345)
                            sub_100007780(v345);
                        }
                        else
                        {

                          v345 = 0;
                        }
                        free(v345);
                      }

                      v187 = &qword_1000E0000;
                    }
                    else if (value[0])
                    {
                      CFDictionarySetValue((CFMutableDictionaryRef)v1, kUMUserSessionKeybagOpaqueDataKey, value[0]);
                      v187 = &qword_1000E0000;
                      if (qword_1000E0068 != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v346 = (id)qword_1000E0060;
                      if (os_log_type_enabled(v346, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)err = 0;
                        v347 = sub_100007750(1);
                        v348 = v346;
                        if (os_log_type_enabled(v348, OS_LOG_TYPE_DEFAULT))
                          v349 = v347;
                        else
                          v349 = v347 & 0xFFFFFFFE;
                        if ((_DWORD)v349)
                        {
                          LODWORD(v601) = 67109120;
                          HIDWORD(v601) = v121;
                          LODWORD(v565) = 8;
                          v564 = (void **)&v601;
                          v350 = (char *)_os_log_send_and_compose_impl(v349, err, 0, 0);

                          if (v350)
                            sub_100007780(v350);
                        }
                        else
                        {

                          v350 = 0;
                        }
                        v187 = &qword_1000E0000;
                        free(v350);
                      }

                      sub_10001DE7C();
                      if (value[0])
                        CFRelease(value[0]);
                    }
                    else
                    {
                      v187 = &qword_1000E0000;
                      if (qword_1000E0068 != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v351 = (id)qword_1000E0060;
                      if (os_log_type_enabled(v351, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)err = 0;
                        v352 = sub_100007750(1);
                        v353 = v351;
                        if (os_log_type_enabled(v353, OS_LOG_TYPE_DEFAULT))
                          v354 = v352;
                        else
                          v354 = v352 & 0xFFFFFFFE;
                        if ((_DWORD)v354)
                        {
                          LOWORD(v601) = 0;
                          LODWORD(v565) = 2;
                          v564 = (void **)&v601;
                          v355 = (char *)_os_log_send_and_compose_impl(v354, err, 0, 0);

                          if (v355)
                            sub_100007780(v355);
                        }
                        else
                        {

                          v355 = 0;
                        }
                        v187 = &qword_1000E0000;
                        free(v355);
                      }

                    }
                    v9 = (const __CFUUID *)&byte_1000E0313;
                  }
                  goto LABEL_892;
                }
                *(_QWORD *)err = 0;
                v274 = sub_100007750(1);
                v273 = v273;
                if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
                  v275 = v274;
                else
                  v275 = v274 & 0xFFFFFFFE;
                if ((_DWORD)v275)
                {
                  LOWORD(v601) = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)&v601;
                  v276 = (char *)_os_log_send_and_compose_impl(v275, err, 0, 0);

                  if (v276)
                    sub_100007780(v276);
                }
                else
                {

                  v276 = 0;
                }
                free(v276);
LABEL_845:
                v187 = &qword_1000E0000;
                goto LABEL_846;
              }
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v268 = (id)qword_1000E0060;
              if (os_log_type_enabled(v268, OS_LOG_TYPE_DEFAULT))
              {
                v601 = 0;
                v269 = sub_100007750(1);
                v270 = v268;
                if (os_log_type_enabled(v270, OS_LOG_TYPE_DEFAULT))
                  v271 = v269;
                else
                  v271 = v269 & 0xFFFFFFFE;
                if ((_DWORD)v271)
                {
                  *(_DWORD *)err = 136315138;
                  *(_QWORD *)&err[4] = value;
                  LODWORD(v565) = 12;
                  v564 = (void **)err;
                  v272 = (char *)_os_log_send_and_compose_impl(v271, &v601, 0, 0);

                  if (v272)
                    sub_100007780(v272);
                }
                else
                {

                  v272 = 0;
                }
                free(v272);
              }

              v273 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", value));
              if (!v273)
              {
                v1 = v200;
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v282 = (id)qword_1000E0060;
                if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)err = 0;
                  v283 = sub_100007750(1);
                  v282 = v282;
                  if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
                    v284 = v283;
                  else
                    v284 = v283 & 0xFFFFFFFE;
                  if ((_DWORD)v284)
                  {
                    LOWORD(v601) = 0;
                    LODWORD(v565) = 2;
                    v564 = (void **)&v601;
                    v285 = (char *)_os_log_send_and_compose_impl(v284, err, 0, 0);

                    if (v285)
                      sub_100007780(v285);
                  }
                  else
                  {

                    v285 = 0;
                  }
                  free(v285);
                }
                goto LABEL_844;
              }
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v277 = (id)qword_1000E0060;
              if (os_log_type_enabled(v277, OS_LOG_TYPE_DEFAULT))
              {
                v601 = 0;
                v278 = sub_100007750(1);
                v279 = v277;
                if (os_log_type_enabled(v279, OS_LOG_TYPE_DEFAULT))
                  v280 = v278;
                else
                  v280 = v278 & 0xFFFFFFFE;
                if ((_DWORD)v280)
                {
                  *(_DWORD *)err = 138412546;
                  *(_QWORD *)&err[4] = v273;
                  v584 = 1024;
                  v585 = v121;
                  LODWORD(v565) = 18;
                  v564 = (void **)err;
                  v281 = (char *)_os_log_send_and_compose_impl(v280, &v601, 0, 0);

                  if (v281)
                    sub_100007780(v281);
                }
                else
                {

                  v281 = 0;
                }
                free(v281);
              }

              v286 = sub_10001CA9C(qword_1000E0318);
              v287 = (void *)objc_claimAutoreleasedReturnValue(v286);
              v579 = 0;
              v288 = objc_msgSend(v287, "mapVolume:toSession:withPersona:error:", v273, v121, 0, &v579);
              v282 = v579;

              if (v288)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v289 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_750;
                *(_QWORD *)err = 0;
                v290 = sub_100007750(1);
                v291 = v289;
                if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
                  v292 = v290;
                else
                  v292 = v290 & 0xFFFFFFFE;
                if ((_DWORD)v292)
                {
                  LOWORD(v601) = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)&v601;
                  v293 = (uint64_t *)err;
                  goto LABEL_746;
                }
              }
              else
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v289 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v289, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_750;
                v601 = 0;
                LODWORD(v294) = sub_100007750(1);
                v291 = v289;
                if (os_log_type_enabled(v291, OS_LOG_TYPE_DEFAULT))
                  v294 = v294;
                else
                  v294 = v294 & 0xFFFFFFFE;
                if ((_DWORD)v294)
                {
                  v295 = -[NSObject code](v282, "code");
                  *(_DWORD *)err = 134217984;
                  *(_QWORD *)&err[4] = v295;
                  LODWORD(v565) = 12;
                  v564 = (void **)err;
                  v293 = &v601;
                  v292 = v294;
LABEL_746:
                  v296 = (char *)_os_log_send_and_compose_impl(v292, v293, 0, 0);

                  if (v296)
                    sub_100007780(v296);
                  goto LABEL_749;
                }
              }

              v296 = 0;
LABEL_749:
              free(v296);
LABEL_750:

              v1 = v200;
LABEL_844:

              goto LABEL_845;
            }
LABEL_1279:
            if (!v217)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v482 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
              goto LABEL_1341;
            value[0] = 0;
            LODWORD(v1) = sub_100007750(1);
            v0 = v482;
            if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
              v1 = v1;
            else
              v1 = v1 & 0xFFFFFFFE;
            if (!(_DWORD)v1)
            {

              v494 = 0;
LABEL_1340:
              free(v494);
LABEL_1341:

              sleep(2u);
              sub_10001CF20("UserManagement early boot task failed to migrate Primary User AKSIdentity during update install");
              goto LABEL_1342;
            }
LABEL_1338:
            v512 = CFErrorGetCode(uuid[0]);
            *(_DWORD *)err = 67109120;
            *(_DWORD *)&err[4] = v512;
            LODWORD(v565) = 8;
            v564 = (void **)err;
            v1 = _os_log_send_and_compose_impl(v1, value, 0, 0);

            v494 = 0;
            if (v1)
            {
              sub_100007780((const char *)v1);
              v494 = (void *)v1;
            }
            goto LABEL_1340;
          }
          if (v571)
          {
            LODWORD(v601) = 0;
            v8 = &qword_1000E0000;
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v205 = (id)qword_1000E0060;
            if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)err = 0;
              v206 = sub_100007750(1);
              v207 = v205;
              if (os_log_type_enabled(v207, OS_LOG_TYPE_DEFAULT))
                v208 = v206;
              else
                v208 = v206 & 0xFFFFFFFE;
              if ((_DWORD)v208)
              {
                LODWORD(value[0]) = 67109378;
                HIDWORD(value[0]) = v121;
                LOWORD(value[1]) = 2112;
                *(void **)((char *)&value[1] + 2) = cf;
                LODWORD(v565) = 18;
                v564 = value;
                v209 = (char *)_os_log_send_and_compose_impl(v208, err, 0, 0);

                if (v209)
                  sub_100007780(v209);
              }
              else
              {

                v209 = 0;
              }
              free(v209);
            }

            v578 = 0;
            v234 = sub_100044C10((void *)v0, v121, &v578);
            v9 = (const __CFUUID *)v578;
            v235 = qword_1000E0068 == -1;
            if (v234)
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v236 = (id)qword_1000E0060;
              if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                v237 = sub_100007750(1);
                v238 = v236;
                if (os_log_type_enabled(v238, OS_LOG_TYPE_DEFAULT))
                  v239 = v237;
                else
                  v239 = v237 & 0xFFFFFFFE;
                if ((_DWORD)v239)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)err;
                  v240 = (char *)_os_log_send_and_compose_impl(v239, value, 0, 0);

                  if (v240)
                    sub_100007780(v240);
                }
                else
                {

                  v240 = 0;
                }
                free(v240);
                v8 = &qword_1000E0000;
              }

              sub_10003B6BC("IONVRAM-DELETE-PROPERTY", "usermanagerd");
              CFRelease((CFTypeRef)v1);
              CFRelease(cf);

              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v187 = &qword_1000E0000;
              v1 = (uint64_t)(id)qword_1000E0060;
              if (os_log_type_enabled((os_log_t)v1, OS_LOG_TYPE_DEFAULT))
              {
                v248 = v121;
                v249 = v114;
                value[0] = 0;
                v250 = sub_100007750(1);
                v251 = (id)v1;
                if (os_log_type_enabled(v251, OS_LOG_TYPE_DEFAULT))
                  v252 = v250;
                else
                  v252 = v250 & 0xFFFFFFFE;
                if ((_DWORD)v252)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v565) = 2;
                  v564 = (void **)err;
                  v253 = (char *)_os_log_send_and_compose_impl(v252, value, 0, 0);

                  if (v253)
                    sub_100007780(v253);
                }
                else
                {

                  v253 = 0;
                }
                LOBYTE(v114) = v249;
                free(v253);
                LODWORD(v121) = v248;
              }

              v9 = (const __CFUUID *)&byte_1000E0313;
              if (sub_100080468(1, &v601))
              {
                v267 = 0;
LABEL_1147:
                if (*((_DWORD *)v187 + 176) != 1)
                {
                  v450 = (v114 & 1) != 0 || byte_1000E0313 != 0;
                  sub_10003BA50(v121, v450);
                }

                goto LABEL_1153;
              }
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v509 = (id)qword_1000E0060;
              if (os_log_type_enabled(v509, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                v1 = sub_100007750(1);
                v0 = v509;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                  v510 = v1;
                else
                  v510 = v1 & 0xFFFFFFFE;
                if ((_DWORD)v510)
                {
                  *(_DWORD *)err = 67109120;
                  *(_DWORD *)&err[4] = v601;
                  LODWORD(v565) = 8;
                  v1 = _os_log_send_and_compose_impl(v510, value, 0, 0);

                  v511 = 0;
                  if (v1)
                  {
                    sub_100007780((const char *)v1);
                    v511 = (void *)v1;
                  }
                }
                else
                {

                  v511 = 0;
                }
                free(v511);
              }

              sleep(2u);
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v547 = (id)qword_1000E0060;
              if (os_log_type_enabled(v547, OS_LOG_TYPE_DEFAULT))
              {
                value[0] = 0;
                v1 = sub_100007750(1);
                v0 = v547;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                  v548 = v1;
                else
                  v548 = v1 & 0xFFFFFFFE;
                if ((_DWORD)v548)
                {
                  *(_WORD *)err = 0;
                  LODWORD(v565) = 2;
                  v1 = _os_log_send_and_compose_impl(v548, value, 0, 0);

                  v549 = 0;
                  if (v1)
                  {
                    sub_100007780((const char *)v1);
                    v549 = (void *)v1;
                  }
                }
                else
                {

                  v549 = 0;
                }
                free(v549);
              }

              sub_10001CF20("UserManagement early boot task APFSVolumeMigrateMediaKey Failed with Error:%d", v601);
LABEL_1439:
              if (!v364)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v517 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                goto LABEL_1482;
              value[0] = 0;
              v1 = sub_100007750(1);
              v0 = v517;
              if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                v550 = v1;
              else
                v550 = v1 & 0xFFFFFFFE;
              if (!(_DWORD)v550)
              {

                v551 = 0;
LABEL_1481:
                free(v551);
LABEL_1482:

                sleep(2u);
                sub_10001CF20("Failed to unmount 501 User Volume error:%d", v601);
                goto LABEL_1483;
              }
LABEL_1479:
              *(_DWORD *)err = 67109120;
              *(_DWORD *)&err[4] = v601;
              LODWORD(v565) = 8;
              v1 = _os_log_send_and_compose_impl(v550, value, 0, 0);

              v551 = 0;
              if (v1)
              {
                sub_100007780((const char *)v1);
                v551 = (void *)v1;
              }
              goto LABEL_1481;
            }
LABEL_1310:
            if (!v235)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v501 = (id)qword_1000E0060;
            if (os_log_type_enabled(v501, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)err = 0;
              LODWORD(v502) = sub_100007750(1);
              v503 = v501;
              if (os_log_type_enabled(v503, OS_LOG_TYPE_DEFAULT))
                v502 = v502;
              else
                v502 = v502 & 0xFFFFFFFE;
              if ((_DWORD)v502)
              {
                v539 = -[__CFUUID code](v9, "code");
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v539;
                v540 = (const char *)_os_log_send_and_compose_impl(v502, err, 0, 0);

                v504 = 0;
                if (v540)
                {
                  sub_100007780(v540);
                  v504 = (char *)v540;
                }
              }
              else
              {

                v504 = 0;
              }
              free(v504);
            }

            v541 = MGGetBoolAnswer(CFSTR("InternalBuild"));
            v542 = -[__CFUUID code](v9, "code");
            if (v541)
              v542 = (id)sub_10001CF20("EraseInstall-FATAL OTI LOAD ERROR:%ld", v542);
            sub_10003B454("EraseInstall-FATAL OTI LOAD ERROR:%ld", v542);
          }
          v210 = v114;
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v211 = (id)qword_1000E0060;
          v567 = v197;
          if (os_log_type_enabled(v211, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)err = 0;
            v212 = sub_100007750(1);
            v213 = v211;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
              v214 = v212;
            else
              v214 = v212 & 0xFFFFFFFE;
            if ((_DWORD)v214)
            {
              LODWORD(value[0]) = 67109378;
              HIDWORD(value[0]) = v121;
              LOWORD(value[1]) = 2112;
              *(void **)((char *)&value[1] + 2) = cf;
              LODWORD(v565) = 18;
              v564 = value;
              v215 = (char *)_os_log_send_and_compose_impl(v214, err, 0, 0);

              if (v215)
                sub_100007780(v215);
            }
            else
            {

              v215 = 0;
            }
            free(v215);
            v210 = v114;
          }

          v577 = 0;
          v241 = sub_100044C10((void *)v0, v121, &v577);
          v242 = v577;
          if (!v241)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v505 = (id)qword_1000E0060;
            if (os_log_type_enabled(v505, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)err = 0;
              LODWORD(v506) = sub_100007750(1);
              v507 = v505;
              if (os_log_type_enabled(v507, OS_LOG_TYPE_DEFAULT))
                v506 = v506;
              else
                v506 = v506 & 0xFFFFFFFE;
              if ((_DWORD)v506)
              {
                v543 = objc_msgSend(v242, "code");
                LODWORD(value[0]) = 134217984;
                *(void **)((char *)value + 4) = v543;
                v544 = (const char *)_os_log_send_and_compose_impl(v506, err, 0, 0);

                v508 = 0;
                if (v544)
                {
                  sub_100007780(v544);
                  v508 = (char *)v544;
                }
              }
              else
              {

                v508 = 0;
              }
              free(v508);
            }

            v545 = MGGetBoolAnswer(CFSTR("InternalBuild"));
            v546 = objc_msgSend(v242, "code");
            if (v545)
              v546 = (id)sub_10001CF20("RegularBoot-FATAL OTI LOAD ERROR:%ld", v546);
            sub_10003B454("RegularBoot-FATAL OTI LOAD ERROR:%ld", v546);
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          LOBYTE(v114) = v210;
          v243 = (id)qword_1000E0060;
          if (os_log_type_enabled(v243, OS_LOG_TYPE_DEFAULT))
          {
            value[0] = 0;
            v244 = sub_100007750(1);
            v245 = v243;
            if (os_log_type_enabled(v245, OS_LOG_TYPE_DEFAULT))
              v246 = v244;
            else
              v246 = v244 & 0xFFFFFFFE;
            if ((_DWORD)v246)
            {
              *(_WORD *)err = 0;
              LODWORD(v565) = 2;
              v564 = (void **)err;
              v247 = (char *)_os_log_send_and_compose_impl(v246, value, 0, 0);

              if (v247)
                sub_100007780(v247);
            }
            else
            {

              v247 = 0;
            }
            free(v247);
          }

          sub_10003B6BC("IONVRAM-DELETE-PROPERTY", "usermanagerd");
          v187 = &qword_1000E0000;
          if (dword_1000E02C0 == 1)
          {
            v9 = (const __CFUUID *)&byte_1000E0313;
            if (sub_1000866F8((const __CFDictionary *)v1, kUMUserSessionNeedsCryptoSetupKey))
            {
              v254 = sub_100004400(qword_1000E0038, 501);
              v255 = objc_claimAutoreleasedReturnValue(v254);
              if (v255)
              {
                v256 = (const __CFDictionary *)v255;
                bytes = 0;
                LODWORD(v601) = 0;
                v257 = CFDataCreate(kCFAllocatorDefault, &bytes, 1);
                v258 = (const __CFString *)sub_100086748(v256, kUMUserSessionUUIDKey);
                if (v258)
                {
                  v259 = CFUUIDCreateFromString(kCFAllocatorDefault, v258);
                  if (v259)
                  {
                    v9 = v259;
                    v260 = sub_10001ACF0((uint64_t)NSUUID, v259);
                    v261 = (void *)objc_claimAutoreleasedReturnValue(v260);
                    CFRelease(v9);
                    if (v261)
                    {
                      v568 = v256;
                      if (qword_1000E0068 != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v262 = (id)qword_1000E0060;
                      if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
                      {
                        value[0] = 0;
                        v263 = sub_100007750(1);
                        v264 = v262;
                        if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
                          v265 = v263;
                        else
                          v265 = v263 & 0xFFFFFFFE;
                        if ((_DWORD)v265)
                        {
                          *(_WORD *)err = 0;
                          LODWORD(v565) = 2;
                          v564 = (void **)err;
                          v266 = (char *)_os_log_send_and_compose_impl(v265, value, 0, 0);

                          if (v266)
                            sub_100007780(v266);
                        }
                        else
                        {

                          v266 = 0;
                        }
                        free(v266);
                      }

                      v575 = 0;
                      v9 = (const __CFUUID *)sub_100044C10(v261, 501, &v575);
                      v297 = v575;
                      if ((_DWORD)v9)
                      {
                        v298 = v297;
                        if (qword_1000E0068 != -1)
                          dispatch_once(&qword_1000E0068, &stru_1000D1550);
                        v299 = (id)qword_1000E0060;
                        if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
                        {
                          value[0] = 0;
                          v300 = sub_100007750(1);
                          v9 = v299;
                          if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                            v301 = v300;
                          else
                            v301 = v300 & 0xFFFFFFFE;
                          if ((_DWORD)v301)
                          {
                            *(_WORD *)err = 0;
                            LODWORD(v565) = 2;
                            v564 = (void **)err;
                            v302 = (char *)_os_log_send_and_compose_impl(v301, value, 0, 0);

                            if (v302)
                              sub_100007780(v302);
                          }
                          else
                          {

                            v302 = 0;
                          }
                          free(v302);
                        }

                        if (qword_1000E0068 != -1)
                          dispatch_once(&qword_1000E0068, &stru_1000D1550);
                        v303 = v568;
                        v304 = (id)qword_1000E0060;
                        if (os_log_type_enabled(v304, OS_LOG_TYPE_DEFAULT))
                        {
                          value[0] = 0;
                          v305 = sub_100007750(1);
                          v306 = v304;
                          if (os_log_type_enabled(v306, OS_LOG_TYPE_DEFAULT))
                            v307 = v305;
                          else
                            v307 = v305 & 0xFFFFFFFE;
                          if ((_DWORD)v307)
                          {
                            *(_DWORD *)err = 67109120;
                            *(_DWORD *)&err[4] = v121;
                            LODWORD(v565) = 8;
                            v564 = (void **)err;
                            v9 = (const __CFUUID *)_os_log_send_and_compose_impl(v307, value, 0, 0);

                            if (v9)
                              sub_100007780((const char *)v9);
                          }
                          else
                          {

                            v9 = 0;
                          }
                          v303 = v568;
                          free(v9);
                        }

                        if ((AKSIdentityTransferPrimary(501, v257, v121, v257, uuid) & 1) != 0)
                        {
                          if (qword_1000E0068 != -1)
                            dispatch_once(&qword_1000E0068, &stru_1000D1550);
                          v308 = (id)qword_1000E0060;
                          if (os_log_type_enabled(v308, OS_LOG_TYPE_DEFAULT))
                          {
                            value[0] = 0;
                            v309 = sub_100007750(1);
                            v9 = v308;
                            if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                              v310 = v309;
                            else
                              v310 = v309 & 0xFFFFFFFE;
                            if ((_DWORD)v310)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v565) = 2;
                              v564 = (void **)err;
                              v311 = (char *)_os_log_send_and_compose_impl(v310, value, 0, 0);

                              if (v311)
                                sub_100007780(v311);
                            }
                            else
                            {

                              v311 = 0;
                            }
                            free(v311);
                          }

                          if (qword_1000E0068 != -1)
                            dispatch_once(&qword_1000E0068, &stru_1000D1550);
                          v312 = (id)qword_1000E0060;
                          if (os_log_type_enabled(v312, OS_LOG_TYPE_DEFAULT))
                          {
                            value[0] = 0;
                            v313 = sub_100007750(1);
                            v9 = v312;
                            if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                              v314 = v313;
                            else
                              v314 = v313 & 0xFFFFFFFE;
                            if ((_DWORD)v314)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v565) = 2;
                              v564 = (void **)err;
                              v315 = (char *)_os_log_send_and_compose_impl(v314, value, 0, 0);

                              if (v315)
                                sub_100007780(v315);
                            }
                            else
                            {

                              v315 = 0;
                            }
                            free(v315);
                          }

                          v316 = (void *)sub_100086748(v303, kUMUserSessionVolumeDeviceNodeKey);
                          if (!v316)
                          {
                            if (qword_1000E0068 != -1)
                              dispatch_once(&qword_1000E0068, &stru_1000D1550);
                            v323 = (id)qword_1000E0060;
                            if (os_log_type_enabled(v323, OS_LOG_TYPE_DEFAULT))
                            {
                              value[0] = 0;
                              v324 = sub_100007750(1);
                              v323 = v323;
                              if (os_log_type_enabled(v323, OS_LOG_TYPE_DEFAULT))
                                v325 = v324;
                              else
                                v325 = v324 & 0xFFFFFFFE;
                              if ((_DWORD)v325)
                              {
                                *(_WORD *)err = 0;
                                LODWORD(v565) = 2;
                                v564 = (void **)err;
                                v9 = (const __CFUUID *)_os_log_send_and_compose_impl(v325, value, 0, 0);

                                if (v9)
                                  sub_100007780((const char *)v9);
                              }
                              else
                              {

                                v9 = 0;
                              }
                              free(v9);
                            }
LABEL_902:

                            if (objc_msgSend((id)qword_1000E0030, "isVolumeMountedWithSession:fsid:", v303, 0))
                            {
                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v356 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v356, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v357 = sub_100007750(1);
                                v9 = v356;
                                if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                                  v358 = v357;
                                else
                                  v358 = v357 & 0xFFFFFFFE;
                                if ((_DWORD)v358)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  v359 = (char *)_os_log_send_and_compose_impl(v358, value, 0, 0);

                                  if (v359)
                                    sub_100007780(v359);
                                }
                                else
                                {

                                  v359 = 0;
                                }
                                free(v359);
                              }

                              v363 = objc_msgSend((id)qword_1000E0030, "unmountVolumeWithSession:mountPath:error:", v303, CFSTR("/private/var/mobile"), &v601);
                              v364 = qword_1000E0068 == -1;
                              if (!v363)
                                goto LABEL_1439;
                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v360 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v360, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v365 = sub_100007750(1);
                                v360 = v360;
                                if (os_log_type_enabled(v360, OS_LOG_TYPE_DEFAULT))
                                  v362 = v365;
                                else
                                  v362 = v365 & 0xFFFFFFFE;
                                if ((_DWORD)v362)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
LABEL_931:
                                  v9 = (const __CFUUID *)_os_log_send_and_compose_impl(v362, value, 0, 0);

                                  if (v9)
                                    sub_100007780((const char *)v9);
                                  goto LABEL_934;
                                }
                                goto LABEL_933;
                              }
                            }
                            else
                            {
                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v360 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v360, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v361 = sub_100007750(1);
                                v360 = v360;
                                if (os_log_type_enabled(v360, OS_LOG_TYPE_DEFAULT))
                                  v362 = v361;
                                else
                                  v362 = v361 & 0xFFFFFFFE;
                                if ((_DWORD)v362)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  goto LABEL_931;
                                }
LABEL_933:

                                v9 = 0;
LABEL_934:
                                free(v9);
                              }
                            }

                            if (qword_1000E0068 != -1)
                              dispatch_once(&qword_1000E0068, &stru_1000D1550);
                            v366 = (id)qword_1000E0060;
                            if (os_log_type_enabled(v366, OS_LOG_TYPE_DEFAULT))
                            {
                              value[0] = 0;
                              v367 = sub_100007750(1);
                              v9 = v366;
                              if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                                v368 = v367;
                              else
                                v368 = v367 & 0xFFFFFFFE;
                              if ((_DWORD)v368)
                              {
                                *(_WORD *)err = 0;
                                LODWORD(v565) = 2;
                                v564 = (void **)err;
                                v369 = (char *)_os_log_send_and_compose_impl(v368, value, 0, 0);

                                if (v369)
                                  sub_100007780(v369);
                              }
                              else
                              {

                                v369 = 0;
                              }
                              free(v369);
                            }

                            if (objc_msgSend((id)qword_1000E0030, "deleteVolumeWithSession:error:", v303, &v601))
                            {
                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v370 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v370, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v371 = sub_100007750(1);
                                v372 = v370;
                                if (os_log_type_enabled(v372, OS_LOG_TYPE_DEFAULT))
                                  v373 = v371;
                                else
                                  v373 = v371 & 0xFFFFFFFE;
                                if ((_DWORD)v373)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  v374 = (char *)_os_log_send_and_compose_impl(v373, value, 0, 0);

                                  if (v374)
                                    sub_100007780(v374);
                                }
                                else
                                {

                                  v374 = 0;
                                }
                                free(v374);
                              }

                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v375 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v375, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v376 = sub_100007750(1);
                                v377 = v375;
                                if (os_log_type_enabled(v377, OS_LOG_TYPE_DEFAULT))
                                  v378 = v376;
                                else
                                  v378 = v376 & 0xFFFFFFFE;
                                if ((_DWORD)v378)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  v379 = (char *)_os_log_send_and_compose_impl(v378, value, 0, 0);

                                  if (v379)
                                    sub_100007780(v379);
                                }
                                else
                                {

                                  v379 = 0;
                                }
                                free(v379);
                              }

                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v380 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v380, OS_LOG_TYPE_DEFAULT))
                              {
                                *(_QWORD *)err = 0;
                                v381 = sub_100007750(1);
                                v382 = v380;
                                if (os_log_type_enabled(v382, OS_LOG_TYPE_DEFAULT))
                                  v383 = v381;
                                else
                                  v383 = v381 & 0xFFFFFFFE;
                                if ((_DWORD)v383)
                                {
                                  LODWORD(value[0]) = 138412290;
                                  *(void **)((char *)value + 4) = (void *)v567;
                                  LODWORD(v565) = 12;
                                  v564 = value;
                                  v384 = (char *)_os_log_send_and_compose_impl(v383, err, 0, 0);

                                  if (v384)
                                    sub_100007780(v384);
                                }
                                else
                                {

                                  v384 = 0;
                                }
                                v303 = v568;
                                free(v384);
                              }

                              v566 = v257;
                              if (sub_10007EDFC(v567, (uint64_t)v257, 0, (int *)&v601))
                              {
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v385 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  v386 = sub_100007750(1);
                                  v385 = v385;
                                  if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
                                    v387 = v386;
                                  else
                                    v387 = v386 & 0xFFFFFFFE;
                                  if ((_DWORD)v387)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
                                    goto LABEL_997;
                                  }
                                  goto LABEL_999;
                                }
                              }
                              else
                              {
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v385 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  v388 = sub_100007750(1);
                                  v385 = v385;
                                  if (os_log_type_enabled(v385, OS_LOG_TYPE_DEFAULT))
                                    v387 = v388;
                                  else
                                    v387 = v388 & 0xFFFFFFFE;
                                  if ((_DWORD)v387)
                                  {
                                    *(_DWORD *)err = 67109120;
                                    *(_DWORD *)&err[4] = v601;
                                    LODWORD(v565) = 8;
                                    v564 = (void **)err;
LABEL_997:
                                    v389 = (char *)_os_log_send_and_compose_impl(v387, value, 0, 0);

                                    if (v389)
                                      sub_100007780(v389);
                                    goto LABEL_1000;
                                  }
LABEL_999:

                                  v389 = 0;
LABEL_1000:
                                  free(v389);
                                }
                              }

                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v390 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v390, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v391 = sub_100007750(1);
                                v392 = v390;
                                if (os_log_type_enabled(v392, OS_LOG_TYPE_DEFAULT))
                                  v393 = v391;
                                else
                                  v393 = v391 & 0xFFFFFFFE;
                                if ((_DWORD)v393)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  v394 = (char *)_os_log_send_and_compose_impl(v393, value, 0, 0);

                                  if (v394)
                                    sub_100007780(v394);
                                }
                                else
                                {

                                  v394 = 0;
                                }
                                free(v394);
                              }

                              v395 = sub_10001CA9C(qword_1000E0318);
                              v9 = (const __CFUUID *)objc_claimAutoreleasedReturnValue(v395);
                              v573 = 0;
                              v396 = -[__CFUUID unloadIdentityFromSession:error:](v9, "unloadIdentityFromSession:error:", 501, &v573);
                              v397 = v573;

                              if (v396)
                              {
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v398 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  v399 = sub_100007750(1);
                                  v398 = v398;
                                  if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
                                    v400 = v399;
                                  else
                                    v400 = v399 & 0xFFFFFFFE;
                                  if ((_DWORD)v400)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
                                    v401 = value;
                                    goto LABEL_1029;
                                  }
                                  goto LABEL_1031;
                                }
                              }
                              else
                              {
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v398 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_QWORD *)err = 0;
                                  LODWORD(v402) = sub_100007750(1);
                                  v398 = v398;
                                  if (os_log_type_enabled(v398, OS_LOG_TYPE_DEFAULT))
                                    v402 = v402;
                                  else
                                    v402 = v402 & 0xFFFFFFFE;
                                  if ((_DWORD)v402)
                                  {
                                    v403 = objc_msgSend(v397, "code");
                                    LODWORD(value[0]) = 134217984;
                                    *(void **)((char *)value + 4) = v403;
                                    LODWORD(v565) = 12;
                                    v564 = value;
                                    v401 = (void **)err;
                                    v400 = v402;
LABEL_1029:
                                    v9 = (const __CFUUID *)_os_log_send_and_compose_impl(v400, v401, 0, 0);

                                    if (v9)
                                      sub_100007780((const char *)v9);
                                    goto LABEL_1032;
                                  }
LABEL_1031:

                                  v9 = 0;
LABEL_1032:
                                  free(v9);
                                }
                              }

                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v404 = (id)qword_1000E0060;
                              if (os_log_type_enabled(v404, OS_LOG_TYPE_DEFAULT))
                              {
                                value[0] = 0;
                                v405 = sub_100007750(1);
                                v9 = v404;
                                if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
                                  v406 = v405;
                                else
                                  v406 = v405 & 0xFFFFFFFE;
                                if ((_DWORD)v406)
                                {
                                  *(_WORD *)err = 0;
                                  LODWORD(v565) = 2;
                                  v564 = (void **)err;
                                  v407 = (char *)_os_log_send_and_compose_impl(v406, value, 0, 0);

                                  if (v407)
                                    sub_100007780(v407);
                                }
                                else
                                {

                                  v407 = 0;
                                }
                                free(v407);
                              }

                              v408 = (void *)sub_100086748(v303, kUMUserSessionUUIDKey);
                              if (v408)
                              {
                                v409 = v408;
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v410 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v410, OS_LOG_TYPE_DEFAULT))
                                {
                                  *(_QWORD *)err = 0;
                                  v411 = sub_100007750(1);
                                  v412 = v410;
                                  if (os_log_type_enabled(v412, OS_LOG_TYPE_DEFAULT))
                                    v413 = v411;
                                  else
                                    v413 = v411 & 0xFFFFFFFE;
                                  if ((_DWORD)v413)
                                  {
                                    LODWORD(value[0]) = 138412290;
                                    *(void **)((char *)value + 4) = v409;
                                    LODWORD(v565) = 12;
                                    v564 = value;
                                    v414 = (char *)_os_log_send_and_compose_impl(v413, err, 0, 0);

                                    if (v414)
                                      sub_100007780(v414);
                                  }
                                  else
                                  {

                                    v414 = 0;
                                  }
                                  free(v414);
                                }

                                v415 = sub_10001ACA4((uint64_t)NSUUID, v409);
                                v416 = (void *)objc_claimAutoreleasedReturnValue(v415);
                                v417 = sub_10001CA9C(qword_1000E0318);
                                v418 = (void *)objc_claimAutoreleasedReturnValue(v417);
                                v572 = 0;
                                v419 = objc_msgSend(v418, "deleteIdentity:error:", v416, &v572);
                                v267 = v572;

                                if (v419)
                                {
                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v420 = (id)qword_1000E0060;
                                  if (os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    v421 = sub_100007750(1);
                                    v420 = v420;
                                    if (os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT))
                                      v422 = v421;
                                    else
                                      v422 = v421 & 0xFFFFFFFE;
                                    if ((_DWORD)v422)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v565) = 2;
                                      v564 = (void **)err;
                                      goto LABEL_1084;
                                    }
                                    goto LABEL_1086;
                                  }
                                }
                                else
                                {
                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v423 = (id)qword_1000E0060;
                                  if (os_log_type_enabled(v423, OS_LOG_TYPE_DEFAULT))
                                  {
                                    *(_QWORD *)err = 0;
                                    LODWORD(v424) = sub_100007750(1);
                                    v425 = v423;
                                    if (os_log_type_enabled(v425, OS_LOG_TYPE_DEFAULT))
                                      v424 = v424;
                                    else
                                      v424 = v424 & 0xFFFFFFFE;
                                    if ((_DWORD)v424)
                                    {
                                      v426 = objc_msgSend(v267, "code");
                                      LODWORD(value[0]) = 134217984;
                                      *(void **)((char *)value + 4) = v426;
                                      LODWORD(v565) = 12;
                                      v564 = value;
                                      v427 = (char *)_os_log_send_and_compose_impl(v424, err, 0, 0);

                                      if (v427)
                                        sub_100007780(v427);
                                    }
                                    else
                                    {

                                      v427 = 0;
                                    }
                                    free(v427);
                                  }

                                  sleep(2u);
                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v420 = (id)qword_1000E0060;
                                  if (os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    v428 = sub_100007750(1);
                                    v420 = v420;
                                    if (os_log_type_enabled(v420, OS_LOG_TYPE_DEFAULT))
                                      v422 = v428;
                                    else
                                      v422 = v428 & 0xFFFFFFFE;
                                    if ((_DWORD)v422)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v565) = 2;
                                      v564 = (void **)err;
LABEL_1084:
                                      v429 = (char *)_os_log_send_and_compose_impl(v422, value, 0, 0);

                                      if (v429)
                                        sub_100007780(v429);
                                      goto LABEL_1087;
                                    }
LABEL_1086:

                                    v429 = 0;
LABEL_1087:
                                    free(v429);
                                  }
                                }

                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v430 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v430, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  v431 = sub_100007750(1);
                                  v432 = v430;
                                  if (os_log_type_enabled(v432, OS_LOG_TYPE_DEFAULT))
                                    v433 = v431;
                                  else
                                    v433 = v431 & 0xFFFFFFFE;
                                  if ((_DWORD)v433)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
                                    v434 = (char *)_os_log_send_and_compose_impl(v433, value, 0, 0);

                                    if (v434)
                                      sub_100007780(v434);
                                  }
                                  else
                                  {

                                    v434 = 0;
                                  }
                                  free(v434);
                                }

                                CFRelease(v568);
                                sub_100031FA8(501, 0);
                                sub_10001DE7C();
                                if (qword_1000E0068 != -1)
                                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                v435 = (id)qword_1000E0060;
                                if (os_log_type_enabled(v435, OS_LOG_TYPE_DEFAULT))
                                {
                                  value[0] = 0;
                                  v436 = sub_100007750(1);
                                  v437 = v435;
                                  if (os_log_type_enabled(v437, OS_LOG_TYPE_DEFAULT))
                                    v438 = v436;
                                  else
                                    v438 = v436 & 0xFFFFFFFE;
                                  if ((_DWORD)v438)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
                                    v439 = (char *)_os_log_send_and_compose_impl(v438, value, 0, 0);

                                    if (v439)
                                      sub_100007780(v439);
                                  }
                                  else
                                  {

                                    v439 = 0;
                                  }
                                  free(v439);
                                }

                                if (sub_100080D6C("/var/Users", (int *)&v601))
                                {
                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v440 = (id)qword_1000E0060;
                                  if (!os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT))
                                    goto LABEL_1142;
                                  value[0] = 0;
                                  v441 = sub_100007750(1);
                                  v440 = v440;
                                  if (os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT))
                                    v442 = v441;
                                  else
                                    v442 = v441 & 0xFFFFFFFE;
                                  if ((_DWORD)v442)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
                                    goto LABEL_1138;
                                  }
                                }
                                else
                                {
                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v443 = (id)qword_1000E0060;
                                  if (os_log_type_enabled(v443, OS_LOG_TYPE_DEFAULT))
                                  {
                                    value[0] = 0;
                                    v444 = sub_100007750(1);
                                    v445 = v443;
                                    if (os_log_type_enabled(v445, OS_LOG_TYPE_DEFAULT))
                                      v446 = v444;
                                    else
                                      v446 = v444 & 0xFFFFFFFE;
                                    if ((_DWORD)v446)
                                    {
                                      *(_WORD *)err = 0;
                                      LODWORD(v565) = 2;
                                      v564 = (void **)err;
                                      v447 = (char *)_os_log_send_and_compose_impl(v446, value, 0, 0);

                                      if (v447)
                                        sub_100007780(v447);
                                    }
                                    else
                                    {

                                      v447 = 0;
                                    }
                                    free(v447);
                                  }

                                  if (qword_1000E0068 != -1)
                                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                                  v440 = (id)qword_1000E0060;
                                  if (!os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT))
                                    goto LABEL_1142;
                                  value[0] = 0;
                                  v448 = sub_100007750(1);
                                  v440 = v440;
                                  if (os_log_type_enabled(v440, OS_LOG_TYPE_DEFAULT))
                                    v442 = v448;
                                  else
                                    v442 = v448 & 0xFFFFFFFE;
                                  if ((_DWORD)v442)
                                  {
                                    *(_WORD *)err = 0;
                                    LODWORD(v565) = 2;
                                    v564 = (void **)err;
LABEL_1138:
                                    v449 = (char *)_os_log_send_and_compose_impl(v442, value, 0, 0);

                                    if (v449)
                                      sub_100007780(v449);
                                    goto LABEL_1141;
                                  }
                                }

                                v449 = 0;
LABEL_1141:
                                free(v449);
LABEL_1142:
                                v9 = (const __CFUUID *)&byte_1000E0313;

                                if (v566)
                                  CFRelease(v566);

                                CFDictionarySetValue((CFMutableDictionaryRef)v1, kUMUserSessionNeedsCryptoSetupKey, kCFBooleanFalse);
                                v187 = &qword_1000E0000;
                                goto LABEL_1145;
                              }
                              if (qword_1000E0068 != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v517 = (id)qword_1000E0060;
                              if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                              {
LABEL_1478:

                                sleep(2u);
                                v550 = sub_10001CF20("UserManagement early boot task Unable to find 501 uuid");
                                goto LABEL_1479;
                              }
                              value[0] = 0;
                              v536 = sub_100007750(1);
                              v0 = v517;
                              if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                                v537 = v536;
                              else
                                v537 = v536 & 0xFFFFFFFE;
                              if (!(_DWORD)v537)
                              {

                                v538 = 0;
LABEL_1477:
                                free(v538);
                                goto LABEL_1478;
                              }
LABEL_1475:
                              *(_WORD *)err = 0;
                              v561 = (const char *)_os_log_send_and_compose_impl(v537, value, 0, 0);

                              v538 = 0;
                              if (v561)
                              {
                                sub_100007780(v561);
                                v538 = (char *)v561;
                              }
                              goto LABEL_1477;
                            }
                            if (qword_1000E0068 != -1)
                              dispatch_once(&qword_1000E0068, &stru_1000D1550);
                            v517 = (id)qword_1000E0060;
                            if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                            {
LABEL_1474:

                              sleep(2u);
                              v537 = sub_10001CF20("Failed deletion of 501 User Volume error:%d", v601);
                              goto LABEL_1475;
                            }
                            value[0] = 0;
                            v533 = sub_100007750(1);
                            v0 = v517;
                            if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                              v534 = v533;
                            else
                              v534 = v533 & 0xFFFFFFFE;
                            if (!(_DWORD)v534)
                            {

                              v535 = 0;
LABEL_1473:
                              free(v535);
                              goto LABEL_1474;
                            }
LABEL_1471:
                            *(_DWORD *)err = 67109120;
                            *(_DWORD *)&err[4] = v601;
                            v560 = (const char *)_os_log_send_and_compose_impl(v534, value, 0, 0);

                            v535 = 0;
                            if (v560)
                            {
                              sub_100007780(v560);
                              v535 = (char *)v560;
                            }
                            goto LABEL_1473;
                          }
                          v317 = v316;
                          if (qword_1000E0068 != -1)
                            dispatch_once(&qword_1000E0068, &stru_1000D1550);
                          v318 = (id)qword_1000E0060;
                          if (os_log_type_enabled(v318, OS_LOG_TYPE_DEFAULT))
                          {
                            *(_QWORD *)err = 0;
                            v319 = sub_100007750(1);
                            v320 = v318;
                            if (os_log_type_enabled(v320, OS_LOG_TYPE_DEFAULT))
                              v321 = v319;
                            else
                              v321 = v319 & 0xFFFFFFFE;
                            if ((_DWORD)v321)
                            {
                              LODWORD(value[0]) = 138412290;
                              *(void **)((char *)value + 4) = v317;
                              LODWORD(v565) = 12;
                              v564 = value;
                              v322 = (char *)_os_log_send_and_compose_impl(v321, err, 0, 0);

                              if (v322)
                                sub_100007780(v322);
                            }
                            else
                            {

                              v322 = 0;
                            }
                            free(v322);
                          }

                          v326 = sub_10001CA9C(qword_1000E0318);
                          v9 = (const __CFUUID *)objc_claimAutoreleasedReturnValue(v326);
                          v574 = 0;
                          v327 = -[__CFUUID unmapVolume:error:](v9, "unmapVolume:error:", v317, &v574);
                          v323 = v574;

                          if (v327)
                          {
                            if (qword_1000E0068 != -1)
                              dispatch_once(&qword_1000E0068, &stru_1000D1550);
                            v328 = (id)qword_1000E0060;
                            if (!os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                              goto LABEL_841;
                            value[0] = 0;
                            v329 = sub_100007750(1);
                            v328 = v328;
                            if (os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                              v330 = v329;
                            else
                              v330 = v329 & 0xFFFFFFFE;
                            if ((_DWORD)v330)
                            {
                              *(_WORD *)err = 0;
                              LODWORD(v565) = 2;
                              v564 = (void **)err;
                              v331 = value;
                              goto LABEL_837;
                            }
                          }
                          else
                          {
                            if (qword_1000E0068 != -1)
                              dispatch_once(&qword_1000E0068, &stru_1000D1550);
                            v328 = (id)qword_1000E0060;
                            if (!os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                              goto LABEL_841;
                            *(_QWORD *)err = 0;
                            LODWORD(v332) = sub_100007750(1);
                            v328 = v328;
                            if (os_log_type_enabled(v328, OS_LOG_TYPE_DEFAULT))
                              v332 = v332;
                            else
                              v332 = v332 & 0xFFFFFFFE;
                            if ((_DWORD)v332)
                            {
                              v333 = -[NSObject code](v323, "code");
                              LODWORD(value[0]) = 134217984;
                              *(void **)((char *)value + 4) = v333;
                              LODWORD(v565) = 12;
                              v564 = value;
                              v331 = (void **)err;
                              v330 = v332;
LABEL_837:
                              v9 = (const __CFUUID *)_os_log_send_and_compose_impl(v330, v331, 0, 0);

                              if (v9)
                                sub_100007780((const char *)v9);
                              goto LABEL_840;
                            }
                          }

                          v9 = 0;
LABEL_840:
                          free(v9);
LABEL_841:

                          v303 = v568;
                          goto LABEL_902;
                        }
                        if (qword_1000E0068 != -1)
                          dispatch_once(&qword_1000E0068, &stru_1000D1550);
                        v517 = (id)qword_1000E0060;
                        if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                        {
LABEL_1470:

                          sleep(2u);
                          v559 = CFErrorGetCode(uuid[0]);
                          v534 = sub_10001CF20("FAILED to transfer Primary from 501 -> 502:with error:%ld", v559);
                          goto LABEL_1471;
                        }
                        value[0] = 0;
                        v530 = sub_100007750(1);
                        v0 = v517;
                        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                          v531 = v530;
                        else
                          v531 = v530 & 0xFFFFFFFE;
                        if (!(_DWORD)v531)
                        {

                          v532 = 0;
LABEL_1469:
                          free(v532);
                          goto LABEL_1470;
                        }
LABEL_1467:
                        *(_WORD *)err = 0;
                        v558 = (const char *)_os_log_send_and_compose_impl(v531, value, 0, 0);

                        v532 = 0;
                        if (v558)
                        {
                          sub_100007780(v558);
                          v532 = (char *)v558;
                        }
                        goto LABEL_1469;
                      }
                      if (qword_1000E0068 != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v517 = (id)qword_1000E0060;
                      if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                      {
LABEL_1466:

                        sleep(2u);
                        v557 = CFErrorGetCode(uuid[0]);
                        v531 = sub_10001CF20("FAILED to ensure 501 user Identity is loaded with error:%ld", v557);
                        goto LABEL_1467;
                      }
                      *(_QWORD *)err = 0;
                      LODWORD(v1) = sub_100007750(1);
                      v0 = v517;
                      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                        v1 = v1;
                      else
                        v1 = v1 & 0xFFFFFFFE;
                      if (!(_DWORD)v1)
                      {

                        v529 = 0;
LABEL_1465:
                        free(v529);
                        goto LABEL_1466;
                      }
LABEL_1463:
                      v555 = (void *)CFErrorGetCode(uuid[0]);
                      LODWORD(value[0]) = 134217984;
                      *(void **)((char *)value + 4) = v555;
                      v556 = (const char *)_os_log_send_and_compose_impl(v1, err, 0, 0);

                      v529 = 0;
                      if (v556)
                      {
                        sub_100007780(v556);
                        v529 = (char *)v556;
                      }
                      goto LABEL_1465;
                    }
                    if (qword_1000E0068 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v517 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                    {
LABEL_1462:

                      sleep(2u);
                      sub_10001CF20("FAILED to build 501 NSUUID to migrate to 502");
                      goto LABEL_1463;
                    }
                    value[0] = 0;
                    v1 = sub_100007750(1);
                    v0 = v517;
                    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                      v527 = v1;
                    else
                      v527 = v1 & 0xFFFFFFFE;
                    if (!(_DWORD)v527)
                    {

                      v528 = 0;
LABEL_1461:
                      free(v528);
                      goto LABEL_1462;
                    }
LABEL_1459:
                    *(_WORD *)err = 0;
                    v1 = _os_log_send_and_compose_impl(v527, value, 0, 0);

                    v528 = 0;
                    if (v1)
                    {
                      sub_100007780((const char *)v1);
                      v528 = (void *)v1;
                    }
                    goto LABEL_1461;
                  }
                  if (qword_1000E0068 != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v517 = (id)qword_1000E0060;
                  if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                  {
LABEL_1458:

                    sleep(2u);
                    v527 = sub_10001CF20("FAILED to construct CF501 uuid to migrate to 502");
                    goto LABEL_1459;
                  }
                  value[0] = 0;
                  v524 = sub_100007750(1);
                  v0 = v517;
                  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                    v525 = v524;
                  else
                    v525 = v524 & 0xFFFFFFFE;
                  if (!(_DWORD)v525)
                  {

                    v526 = 0;
LABEL_1457:
                    free(v526);
                    goto LABEL_1458;
                  }
LABEL_1455:
                  *(_WORD *)err = 0;
                  v554 = (const char *)_os_log_send_and_compose_impl(v525, value, 0, 0);

                  v526 = 0;
                  if (v554)
                  {
                    sub_100007780(v554);
                    v526 = (char *)v554;
                  }
                  goto LABEL_1457;
                }
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v517 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                {
LABEL_1454:

                  sleep(2u);
                  v525 = sub_10001CF20("FAILED to locate 501 uuid string to migrate OTI to 502");
                  goto LABEL_1455;
                }
                value[0] = 0;
                v521 = sub_100007750(1);
                v0 = v517;
                if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                  v522 = v521;
                else
                  v522 = v521 & 0xFFFFFFFE;
                if (!(_DWORD)v522)
                {

                  v523 = 0;
LABEL_1453:
                  free(v523);
                  goto LABEL_1454;
                }
              }
              else
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v517 = (id)qword_1000E0060;
                if (os_log_type_enabled(v517, OS_LOG_TYPE_DEFAULT))
                {
                  value[0] = 0;
                  v518 = sub_100007750(1);
                  v0 = v517;
                  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
                    v519 = v518;
                  else
                    v519 = v518 & 0xFFFFFFFE;
                  if ((_DWORD)v519)
                  {
                    *(_WORD *)err = 0;
                    v552 = (const char *)_os_log_send_and_compose_impl(v519, value, 0, 0);

                    v520 = 0;
                    if (v552)
                    {
                      sub_100007780(v552);
                      v520 = (char *)v552;
                    }
                  }
                  else
                  {

                    v520 = 0;
                  }
                  free(v520);
                }

                sleep(2u);
                v522 = sub_10001CF20("UserManagement early boot task Unable to find 501 session");
              }
              *(_WORD *)err = 0;
              v553 = (const char *)_os_log_send_and_compose_impl(v522, value, 0, 0);

              v523 = 0;
              if (v553)
              {
                sub_100007780(v553);
                v523 = (char *)v553;
              }
              goto LABEL_1453;
            }
            v267 = 0;
          }
          else
          {
            v267 = 0;
            v9 = (const __CFUUID *)&byte_1000E0313;
          }
LABEL_1145:
          CFRelease((CFTypeRef)v1);
          CFRelease(cf);
          v8 = &qword_1000E0000;
          if (uuid[0])
          {
            CFRelease(uuid[0]);
            uuid[0] = 0;
          }
          goto LABEL_1147;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v478 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v478, OS_LOG_TYPE_DEFAULT))
        {
LABEL_1309:

          sleep(2u);
          sub_10001CF20("UserManagement early boot task could not Locate primary user session of Update install user");
          goto LABEL_1310;
        }
        value[0] = 0;
        v479 = sub_100007750(1);
        v0 = v478;
        if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
          v480 = v479;
        else
          v480 = v479 & 0xFFFFFFFE;
        if (!(_DWORD)v480)
        {

          v481 = 0;
LABEL_1308:
          free(v481);
          goto LABEL_1309;
        }
LABEL_1306:
        *(_WORD *)err = 0;
        v500 = (const char *)_os_log_send_and_compose_impl(v480, value, 0, 0);

        v481 = 0;
        if (v500)
        {
          sub_100007780(v500);
          v481 = (char *)v500;
        }
        goto LABEL_1308;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v0 = (uint64_t)(id)qword_1000E0060;
      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      {
LABEL_556:

        goto LABEL_557;
      }
      value[0] = 0;
      v192 = sub_100007750(1);
      v0 = (uint64_t)(id)v0;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v191 = v192;
      else
        v191 = v192 & 0xFFFFFFFE;
      if ((_DWORD)v191)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
LABEL_552:
        v193 = (char *)_os_log_send_and_compose_impl(v191, value, 0, 0);

        if (v193)
          sub_100007780(v193);
        goto LABEL_555;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v0 = (uint64_t)(id)qword_1000E0060;
      if (!os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        goto LABEL_556;
      value[0] = 0;
      v190 = sub_100007750(1);
      v0 = (uint64_t)(id)v0;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v191 = v190;
      else
        v191 = v190 & 0xFFFFFFFE;
      if ((_DWORD)v191)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
        goto LABEL_552;
      }
    }

    v193 = 0;
LABEL_555:
    free(v193);
    goto LABEL_556;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v187 = &qword_1000E0000;
  v0 = (uint64_t)(id)qword_1000E0060;
  if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v188 = sub_100007750(1);
    v0 = (uint64_t)(id)v0;
    if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
      v189 = v188;
    else
      v189 = v188 & 0xFFFFFFFE;
    if ((_DWORD)v189)
    {
      *(_WORD *)err = 0;
      LODWORD(v565) = 2;
      v564 = (void **)err;
      v1 = _os_log_send_and_compose_impl(v189, value, 0, 0);

      if (v1)
        sub_100007780((const char *)v1);
    }
    else
    {

      v1 = 0;
    }
    free((void *)v1);
  }
LABEL_1153:

  if (byte_1000E0313)
    v451 = 1;
  else
    v451 = v571;
  sub_100045080(v121, -1, v451, 0);
  if (objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled") && sub_100086E7C() == 100)
  {
    if (v8[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v452 = (id)qword_1000E0060;
    if (os_log_type_enabled(v452, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v453 = sub_100007750(1);
      v454 = v452;
      if (os_log_type_enabled(v454, OS_LOG_TYPE_DEFAULT))
        v455 = v453;
      else
        v455 = v453 & 0xFFFFFFFE;
      if ((_DWORD)v455)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
        v1 = _os_log_send_and_compose_impl(v455, value, 0, 0);

        if (v1)
          sub_100007780((const char *)v1);
      }
      else
      {

        v1 = 0;
      }
      free((void *)v1);
    }

    v456 = sub_100007EF0(qword_1000E0318);
    v457 = (void *)objc_claimAutoreleasedReturnValue(v456);
    v0 = (uint64_t)objc_msgSend(v457, "removeFileAtPath:error:", CFSTR("/private/var/mobile/Library/Preferences/com.apple.migration.plist"), 0);

    v458 = v8[13];
    if ((v0 & 1) != 0)
    {
      if (v458 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v459 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT))
        goto LABEL_1190;
      value[0] = 0;
      v460 = sub_100007750(1);
      v459 = v459;
      if (os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT))
        v461 = v460;
      else
        v461 = v460 & 0xFFFFFFFE;
      if ((_DWORD)v461)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
        goto LABEL_1186;
      }
    }
    else
    {
      if (v458 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v459 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT))
        goto LABEL_1190;
      value[0] = 0;
      v462 = sub_100007750(1);
      v459 = v459;
      if (os_log_type_enabled(v459, OS_LOG_TYPE_DEFAULT))
        v461 = v462;
      else
        v461 = v462 & 0xFFFFFFFE;
      if ((_DWORD)v461)
      {
        *(_WORD *)err = 0;
        LODWORD(v565) = 2;
        v564 = (void **)err;
LABEL_1186:
        v0 = _os_log_send_and_compose_impl(v461, value, 0, 0);

        if (v0)
          sub_100007780((const char *)v0);
        goto LABEL_1189;
      }
    }

    v0 = 0;
LABEL_1189:
    free((void *)v0);
LABEL_1190:

  }
  if ((v571 & objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled", v564, v565)) != 1)
    goto LABEL_1205;
  LODWORD(uuid[0]) = 0;
  v463 = sub_100080D6C("/var/mobile/", (int *)uuid);
  v464 = v8[13];
  if (!v463)
  {
    if (v464 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v482 = (id)qword_1000E0060;
    if (os_log_type_enabled(v482, OS_LOG_TYPE_DEFAULT))
    {
      value[0] = 0;
      v1 = sub_100007750(1);
      v0 = v482;
      if (os_log_type_enabled((os_log_t)v0, OS_LOG_TYPE_DEFAULT))
        v483 = v1;
      else
        v483 = v1 & 0xFFFFFFFE;
      if ((_DWORD)v483)
      {
        *(_DWORD *)err = 67109120;
        *(_DWORD *)&err[4] = uuid[0];
        v1 = _os_log_send_and_compose_impl(v483, value, 0, 0);

        v484 = 0;
        if (v1)
        {
          sub_100007780((const char *)v1);
          v484 = (void *)v1;
        }
      }
      else
      {

        v484 = 0;
      }
      free(v484);
    }

    sleep(2u);
    sub_10001CF20("UserManagement early boot task failed to Set LAST BOOTED USER after Erase Install with error:%d", LODWORD(uuid[0]));
    goto LABEL_1338;
  }
  if (v464 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v465 = (id)qword_1000E0060;
  if (os_log_type_enabled(v465, OS_LOG_TYPE_DEFAULT))
  {
    value[0] = 0;
    v466 = sub_100007750(1);
    v467 = v465;
    if (os_log_type_enabled(v467, OS_LOG_TYPE_DEFAULT))
      v468 = v466;
    else
      v468 = v466 & 0xFFFFFFFE;
    if ((_DWORD)v468)
    {
      *(_WORD *)err = 0;
      v469 = (char *)_os_log_send_and_compose_impl(v468, value, 0, 0);

      if (v469)
        sub_100007780(v469);
    }
    else
    {

      v469 = 0;
    }
    free(v469);
  }

LABEL_1205:
  if (*((_DWORD *)v187 + 176) == 1 || (sub_100021104(), *((_DWORD *)v187 + 176) == 1))
    sub_100059EC0(qword_1000E0038);
}

uint64_t sub_100043404(int a1)
{
  int v1;
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[3];

  sub_1000515C8(a1);
  if (v1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LODWORD(v14[0]) = 138412290;
        *(_QWORD *)((char *)v14 + 4) = qword_1000E02B0;
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v13, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }
    v11 = 1;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v2 = (id)qword_1000E0060;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        LOWORD(v13) = 0;
        v9 = (const char *)_os_log_send_and_compose_impl(v8, v14, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }
    v11 = 0;
  }

  return v11;
}

void sub_10004360C()
{
  NSObject *v0;
  unsigned int v1;
  uint64_t v2;
  const char *v3;
  char *v4;
  CFIndex v5;
  __CFDictionary *ValueAtIndex;
  __CFDictionary *v7;
  CFTypeID v8;
  uint64_t v9;

  if (qword_1000E02B0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v0 = (id)qword_1000E0060;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v1 = sub_100007750(1);
      if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
        v2 = v1;
      else
        v2 = v1 & 0xFFFFFFFE;
      if ((_DWORD)v2)
      {
        v3 = (const char *)_os_log_send_and_compose_impl(v2, &v9, 0, 0);
        v4 = (char *)v3;
        if (v3)
          sub_100007780(v3);
      }
      else
      {
        v4 = 0;
      }
      free(v4);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
    {
      v5 = 0;
      do
      {
        ValueAtIndex = (__CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, v5);
        if (ValueAtIndex)
        {
          v7 = ValueAtIndex;
          v8 = CFGetTypeID(ValueAtIndex);
          if (v8 == CFDictionaryGetTypeID())
            CFDictionarySetValue(v7, kUMUserSessionForegroundKey, kCFBooleanFalse);
        }
        ++v5;
      }
      while (CFArrayGetCount((CFArrayRef)qword_1000E02B0) > v5);
    }
  }
}

uint64_t sub_10004378C(_DWORD *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v4;
  NSObject *v5;
  void *v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  NSObject *v23;
  UMDPersonaManifestUser *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  void *v30;
  id v31;
  NSObject *v32;
  uint64_t v33;
  char *v34;
  void *v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  void *v39;
  id v40;
  char *v41;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  NSObject *v54;
  char *v55;
  id v56;
  unsigned int v57;
  uint64_t v58;
  void *v59;
  void *v60;
  id v61;
  NSObject *v62;
  unsigned int v63;
  uint64_t v64;
  const char *v65;
  char *v66;
  NSObject *v67;
  uint64_t v68;
  NSObject *v69;
  unsigned int v70;
  unsigned int v71;
  char *v72;
  unsigned int v73;
  const char *v74;
  char *v75;
  NSObject *v76;
  unsigned int v77;
  uint64_t v78;
  const char *v79;
  char *v80;
  uint64_t v81;
  NSObject *v82;
  unsigned int v83;
  uint64_t v84;
  const char *v85;
  char *v86;
  id v87;
  uint64_t v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  uint64_t v101;
  _UNKNOWN **v102;
  void *v103;
  void *v104;
  void *v105;
  id v106;
  NSObject *v107;
  unsigned int v108;
  uint64_t v109;
  const char *v110;
  char *v111;
  void *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  NSObject *v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  void *v121;
  void *v122;
  char *v123;
  uint64_t v124;
  uint64_t *v125;
  void *i;
  uint64_t v127;
  NSObject *v128;
  uint64_t v129;
  _UNKNOWN **v130;
  uint64_t *v131;
  NSObject *v132;
  int v133;
  uint64_t v134;
  void *v135;
  void *v136;
  char *v137;
  void *v138;
  id v139;
  void *v140;
  void *v141;
  uint64_t v142;
  void *v143;
  void *v144;
  uint64_t v145;
  void *v146;
  void *v147;
  uint64_t v148;
  void *v149;
  uint64_t v150;
  void *v151;
  _BYTE *v153;
  _QWORD *v154;
  _BYTE *v155;
  int *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void *v161;
  uint64_t v162;
  void *v163;
  void *v164;
  id v165;
  uint64_t v166;
  id obj;
  unsigned int v168;
  uint64_t v169;
  void *v170;
  void *v171;
  id v172;
  void *v173;
  uint64_t v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  int v184;
  _BYTE v185[14];
  _QWORD v186[16];
  _BYTE v187[126];

  if (a1)
    *a1 = 0;
  v4 = &qword_1000E0000;
  v5 = sub_100063CA0(qword_1000E0040, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
  if (v6)
  {
    v7 = v6;
    v8 = objc_msgSend(v6, "version");
    if (v8 >= +[UMDPersonaManifest currentVersion](UMDPersonaManifest, "currentVersion"))
    {
      v16 = v7;
      v9 = objc_msgSend(v7, "version");
      if (v9 <= +[UMDPersonaManifest currentVersion](UMDPersonaManifest, "currentVersion"))
        goto LABEL_74;
      sub_10001CF20("usermanagerd: persona manifest version %u is from the future! Downgrading is not supported.", objc_msgSend(v7, "version"));
    }
    else
    {
      v1 = &qword_1000E0000;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v2 = &qword_1000E0000;
      v9 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
LABEL_26:

        v17 = v7;
        v18 = (void *)objc_claimAutoreleasedReturnValue(+[UMDPersonaManifest manifest](UMDPersonaManifest, "manifest"));
        if (objc_msgSend(v17, "generation"))
          v19 = (uint64_t)objc_msgSend(v17, "generation");
        else
          v19 = 1;
        objc_msgSend(v18, "setGeneration:", v19, v153, v157);
        v20 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "users"));
        v21 = objc_msgSend(v20, "count");

        if (v21 == (id)1)
        {
          v22 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "users"));
          v23 = objc_claimAutoreleasedReturnValue(objc_msgSend(v22, "anyObject"));

          v24 = objc_alloc_init(UMDPersonaManifestUser);
          v25 = sub_10001C3C4(qword_1000E0038);
          v26 = (void *)objc_claimAutoreleasedReturnValue(v25);
          v27 = objc_msgSend(v26, "count");

          if (v27 == (id)1)
          {
            v28 = sub_10001C3C4(qword_1000E0038);
            v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
            v30 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v29, "objectAtIndexedSubscript:", 0));
            v31 = sub_1000885D0(v30, (uint64_t)kUMUserSessionUUIDKey);
            v32 = objc_claimAutoreleasedReturnValue(v31);

            if (v32)
            {
              sub_10001C838((uint64_t)v24, v32);
              v33 = sub_10001BE1C((uint64_t)v23);
              v34 = (char *)objc_claimAutoreleasedReturnValue(v33);
              sub_10001CCD0(v24, v34);

              v35 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v24));
              objc_msgSend(v18, "setUsers:", v35);

              v36 = v18;
              v4 = &qword_1000E0000;
            }
            else
            {
              if (qword_1000E0088 != -1)
                dispatch_once(&qword_1000E0088, &stru_1000D1590);
              v4 = &qword_1000E0000;
              v46 = (id)qword_1000E0080;
              if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
              {
                v186[0] = 0;
                v47 = sub_100007750(0);
                if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
                  v48 = v47;
                else
                  v48 = v47 & 0xFFFFFFFE;
                if ((_DWORD)v48)
                {
                  v49 = qword_1000E0038;
                  v50 = v46;
                  v51 = sub_10001C3C4(v49);
                  v173 = (void *)objc_claimAutoreleasedReturnValue(v51);
                  v171 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v173, "objectAtIndexedSubscript:", 0));
                  v52 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v171, "objectForKeyedSubscript:", kUMUserSessionUUIDKey));
                  *(_DWORD *)v187 = 138543362;
                  *(_QWORD *)&v187[4] = v52;
                  LODWORD(v157) = 12;
                  v153 = v187;
                  v53 = v48;
                  v54 = v50;
                  v55 = (char *)_os_log_send_and_compose_impl(v53, v186, 0, 0);

                  if (v55)
                    sub_100007780(v55);
                }
                else
                {
                  v55 = 0;
                }
                v4 = &qword_1000E0000;
                free(v55);
              }

              v32 = 0;
              v36 = 0;
            }
            v2 = &qword_1000E0000;
          }
          else
          {
            if (qword_1000E0088 != -1)
              dispatch_once(&qword_1000E0088, &stru_1000D1590);
            v2 = &qword_1000E0000;
            v32 = (id)qword_1000E0080;
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_QWORD *)v187 = 0;
              v42 = sub_100007750(0);
              if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                v43 = v42;
              else
                v43 = v42 & 0xFFFFFFFE;
              if ((_DWORD)v43)
              {
                LOWORD(v186[0]) = 0;
                LODWORD(v157) = 2;
                v153 = v186;
                v44 = (const char *)_os_log_send_and_compose_impl(v43, v187, 0, 0);
                v45 = (char *)v44;
                if (v44)
                  sub_100007780(v44);
              }
              else
              {
                v45 = 0;
              }
              free(v45);
            }
            v36 = 0;
            v4 = &qword_1000E0000;
          }

        }
        else
        {
          if (v1[13] != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v23 = (id)v2[12];
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            v186[0] = 0;
            LODWORD(v37) = sub_100007750(1);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
              v37 = v37;
            else
              v37 = v37 & 0xFFFFFFFE;
            if ((_DWORD)v37)
            {
              v38 = v23;
              v39 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v17, "users"));
              v40 = objc_msgSend(v39, "count");
              *(_DWORD *)v187 = 134217984;
              *(_QWORD *)&v187[4] = v40;
              LODWORD(v157) = 12;
              v153 = v187;
              v41 = (char *)_os_log_send_and_compose_impl(v37, v186, 0, 0);

              if (v41)
                sub_100007780(v41);
              v4 = &qword_1000E0000;
            }
            else
            {
              v41 = 0;
            }
            free(v41);
          }
          v36 = 0;
        }

        if (v36)
        {
          v16 = v36;
          if ((sub_1000644E0(v4[8], v36, 0) & 1) != 0)
          {
LABEL_74:
            v56 = v16;
            if (a1)
              *a1 = 0;
            v161 = v56;
            v57 = objc_msgSend(v56, "version", v153, v157);
            if (v57 != +[UMDPersonaManifest currentVersion](UMDPersonaManifest, "currentVersion"))
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v67 = (id)qword_1000E0060;
              if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
              {
                v186[0] = 0;
                LODWORD(v68) = sub_100007750(1);
                if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
                  v68 = v68;
                else
                  v68 = v68 & 0xFFFFFFFE;
                if ((_DWORD)v68)
                {
                  v69 = v67;
                  v70 = objc_msgSend(v161, "version");
                  v71 = +[UMDPersonaManifest currentVersion](UMDPersonaManifest, "currentVersion");
                  *(_DWORD *)v187 = 67109376;
                  *(_DWORD *)&v187[4] = v70;
                  *(_WORD *)&v187[8] = 1024;
                  *(_DWORD *)&v187[10] = v71;
                  v72 = (char *)_os_log_send_and_compose_impl(v68, v186, 0, 0);

                  if (v72)
                    sub_100007780(v72);
                }
                else
                {
                  v72 = 0;
                }
                free(v72);
              }

              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v82 = (id)qword_1000E0060;
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v187 = 0;
                v83 = sub_100007750(1);
                if (os_log_type_enabled(v82, OS_LOG_TYPE_DEFAULT))
                  v84 = v83;
                else
                  v84 = v83 & 0xFFFFFFFE;
                if ((_DWORD)v84)
                {
                  LOWORD(v186[0]) = 0;
                  v85 = (const char *)_os_log_send_and_compose_impl(v84, v187, 0, 0);
                  v86 = (char *)v85;
                  if (v85)
                    sub_100007780(v85);
                }
                else
                {
                  v86 = 0;
                }
                free(v86);
              }

              v81 = 0;
              if (a1)
                *a1 = 2;
              goto LABEL_220;
            }
            v58 = sub_100007EF0(v4[8]);
            v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
            v60 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v59, "userPersonas"));
            v61 = objc_msgSend(v60, "count");

            if (v61)
            {
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v62 = (id)qword_1000E0060;
              if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v187 = 0;
                v63 = sub_100007750(1);
                if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
                  v64 = v63;
                else
                  v64 = v63 & 0xFFFFFFFE;
                if ((_DWORD)v64)
                {
                  LOWORD(v186[0]) = 0;
                  LODWORD(v158) = 2;
                  v154 = v186;
                  v65 = (const char *)_os_log_send_and_compose_impl(v64, v187, 0, 0);
                  v66 = (char *)v65;
                  if (v65)
                    sub_100007780(v65);
                }
                else
                {
                  v66 = 0;
                }
                free(v66);
              }

            }
            if (objc_msgSend(v161, "generation", v154, v158))
            {
              v87 = objc_msgSend(v161, "generation");
              v88 = sub_10001C730(v4[8]);
              v89 = (void *)objc_claimAutoreleasedReturnValue(v88);
              sub_10005A984((uint64_t)v89, (uint64_t)v87);

              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v90 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                goto LABEL_158;
              v186[0] = 0;
              LODWORD(v91) = sub_100007750(1);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                v91 = v91;
              else
                v91 = v91 & 0xFFFFFFFE;
              if ((_DWORD)v91)
              {
                v92 = v4[8];
                v93 = v90;
                v94 = sub_10001C730(v92);
                v95 = (void *)objc_claimAutoreleasedReturnValue(v94);
                v96 = sub_10005A964((uint64_t)v95);
                *(_DWORD *)v187 = 134217984;
                *(_QWORD *)&v187[4] = v96;
                LODWORD(v159) = 12;
                v155 = v187;
                v97 = (void *)_os_log_send_and_compose_impl(v91, v186, 0, 0);

                if (!v97)
                  goto LABEL_157;
                goto LABEL_155;
              }
            }
            else
            {
              v98 = sub_10001C730(v4[8]);
              v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
              sub_10005A984((uint64_t)v99, 1);

              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v90 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                goto LABEL_158;
              *(_QWORD *)v187 = 0;
              v100 = sub_100007750(1);
              if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
                v101 = v100;
              else
                v101 = v100 & 0xFFFFFFFE;
              if ((_DWORD)v101)
              {
                LOWORD(v186[0]) = 0;
                LODWORD(v159) = 2;
                v155 = v186;
                v97 = (void *)_os_log_send_and_compose_impl(v101, v187, 0, 0);
                if (!v97)
                {
LABEL_157:
                  free(v97);
LABEL_158:

                  v102 = &AKSGetLastUser_ptr;
                  v103 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
                  v104 = v161;
                  v105 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v161, "users"));
                  v106 = objc_msgSend(v105, "count");

                  if (!v106)
                  {
                    if (qword_1000E0068 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v107 = (id)qword_1000E0060;
                    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_QWORD *)v187 = 0;
                      v108 = sub_100007750(1);
                      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
                        v109 = v108;
                      else
                        v109 = v108 & 0xFFFFFFFE;
                      if ((_DWORD)v109)
                      {
                        LOWORD(v186[0]) = 0;
                        LODWORD(v159) = 2;
                        v155 = v186;
                        v110 = (const char *)_os_log_send_and_compose_impl(v109, v187, 0, 0);
                        v111 = (char *)v110;
                        if (v110)
                          sub_100007780(v110);
                      }
                      else
                      {
                        v111 = 0;
                      }
                      free(v111);
                    }

                    v104 = v161;
                  }
                  v182 = 0u;
                  v183 = 0u;
                  v180 = 0u;
                  v181 = 0u;
                  v112 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v104, "users", v155, v159));
                  v165 = objc_msgSend(v112, "countByEnumeratingWithState:objects:count:", &v180, v187, 16);
                  if (v165)
                  {
                    v113 = 0;
                    v162 = *(_QWORD *)v181;
                    v114 = &qword_1000E0000;
                    v163 = v112;
                    v164 = v103;
                    do
                    {
                      v115 = 0;
                      do
                      {
                        if (*(_QWORD *)v181 != v162)
                          objc_enumerationMutation(v112);
                        v174 = *(_QWORD *)(*((_QWORD *)&v180 + 1) + 8 * v115);
                        if (v114[13] != -1)
                          dispatch_once(&qword_1000E0068, &stru_1000D1550);
                        v166 = v115;
                        v116 = (id)qword_1000E0060;
                        if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
                        {
                          v179 = 0;
                          LODWORD(v117) = sub_100007750(1);
                          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
                            v117 = v117;
                          else
                            v117 = v117 & 0xFFFFFFFE;
                          if ((_DWORD)v117)
                          {
                            v118 = v113;
                            v119 = v116;
                            v120 = sub_10001C3C4(v174);
                            v121 = (void *)objc_claimAutoreleasedReturnValue(v120);
                            v122 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v121, "UUIDString"));
                            v184 = 138412290;
                            *(_QWORD *)v185 = v122;
                            LODWORD(v160) = 12;
                            v156 = &v184;
                            v123 = (char *)_os_log_send_and_compose_impl(v117, &v179, 0, 0);

                            if (v123)
                              sub_100007780(v123);
                            v113 = v118;
                            v114 = &qword_1000E0000;
                          }
                          else
                          {
                            v123 = 0;
                          }
                          free(v123);
                        }

                        v170 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
                        v175 = 0u;
                        v176 = 0u;
                        v177 = 0u;
                        v178 = 0u;
                        v124 = sub_10001BE1C(v174);
                        obj = (id)objc_claimAutoreleasedReturnValue(v124);
                        v172 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v175, v186, 16);
                        if (v172)
                        {
                          v169 = *(_QWORD *)v176;
                          v125 = &qword_1000E0000;
                          do
                          {
                            for (i = 0; i != v172; i = (char *)i + 1)
                            {
                              if (*(_QWORD *)v176 != v169)
                                objc_enumerationMutation(obj);
                              v127 = *(_QWORD *)(*((_QWORD *)&v175 + 1) + 8 * (_QWORD)i);
                              if (v114[13] != -1)
                                dispatch_once(&qword_1000E0068, &stru_1000D1550);
                              v128 = (id)v125[12];
                              if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
                              {
                                v179 = 0;
                                LODWORD(v129) = sub_100007750(1);
                                if (os_log_type_enabled(v128, OS_LOG_TYPE_DEFAULT))
                                  v129 = v129;
                                else
                                  v129 = v129 & 0xFFFFFFFE;
                                if ((_DWORD)v129)
                                {
                                  v168 = v113;
                                  v130 = v102;
                                  v131 = v4;
                                  v132 = v128;
                                  v133 = sub_1000055AC(v127);
                                  v134 = sub_10001C3C4(v174);
                                  v135 = (void *)objc_claimAutoreleasedReturnValue(v134);
                                  v136 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v135, "UUIDString"));
                                  v184 = 67109378;
                                  *(_DWORD *)v185 = v133;
                                  *(_WORD *)&v185[4] = 2112;
                                  *(_QWORD *)&v185[6] = v136;
                                  LODWORD(v160) = 18;
                                  v156 = &v184;
                                  v137 = (char *)_os_log_send_and_compose_impl(v129, &v179, 0, 0);

                                  if (v137)
                                    sub_100007780(v137);
                                  v4 = v131;
                                  v102 = v130;
                                  v113 = v168;
                                  v114 = &qword_1000E0000;
                                  v125 = &qword_1000E0000;
                                }
                                else
                                {
                                  v137 = 0;
                                }
                                free(v137);
                              }

                              v138 = v102[123];
                              v139 = sub_100078C8C(v127);
                              v140 = (void *)objc_claimAutoreleasedReturnValue(v139);
                              v141 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v138, "dictionaryWithDictionary:", v140));

                              v142 = sub_10001C3C4(v174);
                              v143 = (void *)objc_claimAutoreleasedReturnValue(v142);
                              v144 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v143, "UUIDString"));
                              objc_msgSend(v141, "setObject:forKeyedSubscript:", v144, kUMUserPersonaUserODUUIDKey);

                              if (sub_1000063CC(v127) == 4 || sub_1000063CC(v127) == 3)
                                v113 = sub_10005C3E8(v4[8], v141) | v113;
                              objc_msgSend(v170, "addObject:", v141, v156, v160);

                            }
                            v172 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v175, v186, 16);
                          }
                          while (v172);
                        }

                        v145 = sub_10001C3C4(v174);
                        v146 = (void *)objc_claimAutoreleasedReturnValue(v145);
                        v147 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v146, "UUIDString"));
                        v103 = v164;
                        objc_msgSend(v164, "setObject:forKeyedSubscript:", v170, v147);

                        v115 = v166 + 1;
                        v112 = v163;
                      }
                      while ((id)(v166 + 1) != v165);
                      v165 = objc_msgSend(v163, "countByEnumeratingWithState:objects:count:", &v180, v187, 16);
                    }
                    while (v165);

                    v148 = sub_100007EF0(v4[8]);
                    v149 = (void *)objc_claimAutoreleasedReturnValue(v148);
                    objc_msgSend(v149, "setUserPersonas:", v164);

                    if ((v113 & 1) != 0)
                      sub_10005F5C8(v4[8]);
                  }
                  else
                  {

                    v150 = sub_100007EF0(v4[8]);
                    v151 = (void *)objc_claimAutoreleasedReturnValue(v150);
                    objc_msgSend(v151, "setUserPersonas:", v103);

                  }
                  v81 = 1;
LABEL_220:

                  v16 = v161;
                  goto LABEL_221;
                }
LABEL_155:
                sub_100007780((const char *)v97);
                goto LABEL_157;
              }
            }
            v97 = 0;
            goto LABEL_157;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v76 = (id)v2[12];
          if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v187 = 0;
            v77 = sub_100007750(1);
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
              v78 = v77;
            else
              v78 = v77 & 0xFFFFFFFE;
            if ((_DWORD)v78)
            {
              LOWORD(v186[0]) = 0;
              v79 = (const char *)_os_log_send_and_compose_impl(v78, v187, 0, 0);
              v80 = (char *)v79;
              if (v79)
                sub_100007780(v79);
            }
            else
            {
              v80 = 0;
            }
            free(v80);
          }

          if (!a1)
            goto LABEL_171;
          goto LABEL_118;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v13 = (id)v2[12];
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v187 = 0;
          v73 = sub_100007750(1);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            v15 = v73;
          else
            v15 = v73 & 0xFFFFFFFE;
          if ((_DWORD)v15)
          {
            LOWORD(v186[0]) = 0;
LABEL_104:
            v74 = (const char *)_os_log_send_and_compose_impl(v15, v187, 0, 0);
            v75 = (char *)v74;
            if (v74)
              sub_100007780(v74);
            goto LABEL_116;
          }
          goto LABEL_115;
        }
        goto LABEL_117;
      }
      v186[0] = 0;
      LODWORD(v10) = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v10 = v10;
      else
        v10 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = v9;
        *(_DWORD *)v187 = 67109376;
        *(_DWORD *)&v187[4] = objc_msgSend(v7, "version");
        *(_WORD *)&v187[8] = 1024;
        *(_DWORD *)&v187[10] = +[UMDPersonaManifest currentVersion](UMDPersonaManifest, "currentVersion");
        LODWORD(v157) = 14;
        v153 = v187;
        v12 = (char *)_os_log_send_and_compose_impl(v10, v186, 0, 0);

        if (v12)
          sub_100007780(v12);
        goto LABEL_25;
      }
    }
    v12 = 0;
LABEL_25:
    free(v12);
    goto LABEL_26;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = (id)qword_1000E0060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v187 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      LOWORD(v186[0]) = 0;
      goto LABEL_104;
    }
LABEL_115:
    v75 = 0;
LABEL_116:
    free(v75);
  }
LABEL_117:

  v16 = 0;
  if (!a1)
  {
LABEL_171:
    v81 = 0;
    goto LABEL_221;
  }
LABEL_118:
  v81 = 0;
  *a1 = 2;
LABEL_221:

  return v81;
}

uint64_t sub_100044C10(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  id v19;
  uint64_t v20;
  void *v21;
  unsigned int v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  id v31;
  char *v32;
  uint64_t v33;
  id v35;
  _BYTE v36[12];
  uint64_t v37;

  v5 = a1;
  v6 = sub_10001CA9C(qword_1000E0318);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  v8 = objc_msgSend(v7, "isIdentityLoadedIntoSession:", a2);

  if (v8)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v36 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LODWORD(v37) = 67109120;
        HIDWORD(v37) = a2;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, v36, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    v19 = 0;
LABEL_47:
    v33 = 1;
    goto LABEL_48;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v14 = (id)qword_1000E0060;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v36 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v16)
    {
      LODWORD(v37) = 67109120;
      HIDWORD(v37) = a2;
      v17 = (const char *)_os_log_send_and_compose_impl(v16, v36, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  v20 = sub_10001CA9C(qword_1000E0318);
  v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
  v35 = 0;
  v22 = objc_msgSend(v21, "loadIdentity:intoSession:error:", v5, a2, &v35);
  v19 = v35;

  if (v22)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v23 = (id)qword_1000E0060;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v36 = 0;
      v24 = sub_100007750(1);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v25 = v24;
      else
        v25 = v24 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        LOWORD(v37) = 0;
        v26 = (const char *)_os_log_send_and_compose_impl(v25, v36, 0, 0);
        v27 = (char *)v26;
        if (v26)
          sub_100007780(v26);
      }
      else
      {
        v27 = 0;
      }
      free(v27);
    }

    goto LABEL_47;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v28 = (id)qword_1000E0060;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v37 = 0;
    LODWORD(v29) = sub_100007750(1);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      v29 = v29;
    else
      v29 = v29 & 0xFFFFFFFE;
    if ((_DWORD)v29)
    {
      v30 = v28;
      v31 = objc_msgSend(v19, "code");
      *(_DWORD *)v36 = 134217984;
      *(_QWORD *)&v36[4] = v31;
      v32 = (char *)_os_log_send_and_compose_impl(v29, &v37, 0, 0);

      if (v32)
        sub_100007780(v32);
    }
    else
    {
      v32 = 0;
    }
    free(v32);
  }

  if (a3)
  {
    v19 = objc_retainAutorelease(v19);
    v33 = 0;
    *a3 = v19;
  }
  else
  {
    v33 = 0;
  }
LABEL_48:

  return v33;
}

uint64_t sub_100045080(unsigned int a1, int a2, int a3, int a4)
{
  uint64_t *v4;
  uint64_t *v5;
  const void **v6;
  NSObject *v9;
  unsigned int v10;
  NSObject *v11;
  uint64_t v12;
  id v13;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  NSObject *v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  NSObject *v22;
  uint64_t v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  id v30;
  const __CFDictionary *v31;
  NSObject *v32;
  const __CFDictionary *v33;
  unsigned int v34;
  NSObject *v35;
  uint64_t v36;
  char *v37;
  id v38;
  const __CFDictionary *v39;
  NSObject *v40;
  unsigned int v41;
  NSObject *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  int v51;
  uint64_t v52;
  NSObject *v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int v56;
  char *v57;
  NSObject *v58;
  unsigned int v59;
  NSObject *v60;
  uint64_t v61;
  char *v62;
  int v63;
  NSObject *v64;
  uint64_t v65;
  NSObject *v66;
  int *v67;
  char *v68;
  char *v69;
  int v70;
  uint64_t v71;
  void *v72;
  unsigned __int8 v73;
  unsigned int v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  NSObject *v78;
  int *v79;
  char *v80;
  char *v81;
  unsigned int v82;
  const char *v83;
  uint64_t v84;
  void *v85;
  int v86;
  uint64_t *v87;
  NSObject *v88;
  unsigned int v89;
  uint64_t v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  NSObject *v94;
  const __CFDictionary *v95;
  unsigned int v96;
  NSObject *v97;
  uint64_t v98;
  char *v99;
  NSObject *v100;
  const __CFDictionary *v101;
  unsigned int v102;
  NSObject *v103;
  uint64_t v104;
  char *v105;
  uint64_t *v106;
  NSObject *v107;
  uint64_t v108;
  void *v109;
  uint64_t v110;
  void *v111;
  unsigned int v112;
  NSObject *v113;
  const __CFDictionary *v114;
  unsigned int v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  unsigned int v119;
  char *v120;
  unsigned int v121;
  uint64_t v122;
  char *v123;
  const void *v124;
  uint64_t *v125;
  NSObject *v126;
  unsigned int v127;
  uint64_t v128;
  char *v129;
  NSObject *v130;
  unsigned int v131;
  uint64_t v132;
  const char *v133;
  const char *v134;
  const void *v135;
  NSObject *v136;
  const __CFDictionary *v137;
  unsigned int v138;
  NSObject *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  void *v144;
  unsigned int v145;
  NSObject *v146;
  unsigned int v147;
  uint64_t v148;
  stat *v149;
  unsigned int v150;
  uint64_t v151;
  id v152;
  char *v153;
  NSObject *v154;
  unsigned int v155;
  NSObject *v156;
  uint64_t v157;
  char *v158;
  unsigned int v159;
  NSObject *v160;
  uint64_t v161;
  stat *v162;
  std::error_code *v163;
  int v164;
  int *v165;
  char *v166;
  NSObject *v167;
  uint64_t v168;
  NSObject *v169;
  int *v170;
  char *v171;
  char *v172;
  int v173;
  uint64_t v174;
  NSObject *v175;
  uint64_t v176;
  NSObject *v177;
  int *v178;
  char *v179;
  char *v180;
  unsigned int v181;
  uint64_t v182;
  const char *v183;
  NSObject *v184;
  unsigned int v185;
  uint64_t v186;
  const char *v187;
  char *v188;
  int v189;
  uint64_t v190;
  int v191;
  NSObject *v192;
  uint64_t v193;
  const __CFDictionary *v194;
  NSObject *v195;
  char *v196;
  char *v197;
  NSObject *v198;
  unsigned int v199;
  uint64_t v200;
  const char *v201;
  char *v202;
  NSObject *v203;
  uint64_t v204;
  NSObject *v205;
  int *v206;
  char *v207;
  char *v208;
  int v209;
  uint64_t v210;
  unsigned int v211;
  uint64_t v212;
  unsigned int v213;
  const char *v214;
  NSObject *v215;
  unsigned int v216;
  uint64_t v217;
  const char *v218;
  char *v219;
  uint64_t v220;
  char v221;
  char v222;
  char *v223;
  int v224;
  uint64_t v225;
  NSObject *v226;
  unsigned int v227;
  uint64_t v228;
  const char *v229;
  char *v230;
  NSObject *v231;
  unsigned int v232;
  uint64_t v233;
  const char *v234;
  char *v235;
  NSObject *v236;
  uint64_t v237;
  NSObject *v238;
  int *v239;
  char *v240;
  char *v241;
  NSObject *v242;
  unsigned int v243;
  uint64_t v244;
  NSObject *v245;
  int *v246;
  char *v247;
  char *v248;
  CFNumberRef v249;
  CFNumberRef v250;
  const __CFString *v251;
  CFAbsoluteTime Current;
  CFDateRef v253;
  NSObject *v254;
  unsigned int v255;
  NSObject *v256;
  uint64_t v257;
  char *v258;
  NSObject *v259;
  unsigned int v260;
  NSObject *v261;
  uint64_t v262;
  char *v263;
  NSObject *v264;
  unsigned int v265;
  NSObject *v266;
  uint64_t v267;
  char *v268;
  int v269;
  int v270;
  NSObject *v271;
  unsigned int v272;
  NSObject *v273;
  uint64_t v274;
  char *v275;
  NSObject *v276;
  unsigned int v277;
  NSObject *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  NSObject *v282;
  unsigned int v283;
  NSObject *v284;
  uint64_t v285;
  char *v286;
  unsigned int v287;
  uint64_t v288;
  char *v289;
  _BOOL4 v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  unsigned int v294;
  int v296;
  uint64_t v297;
  NSObject *v298;
  unsigned int v299;
  uint64_t v300;
  unsigned int v301;
  char *v302;
  unsigned int v303;
  const char *v304;
  const __CFString *v305;
  int v306;
  id v307;
  void *v308;
  uint64_t v309;
  void *v310;
  uint64_t v311;
  stat *v312;
  uint64_t v313;
  const __CFDictionary *v314;
  __CFDictionary *v315;
  gid_t v316;
  id v318;
  id v319;
  int valuePtr;
  uint64_t v321;
  _BYTE v322[18];
  __int16 v323;
  char *v324;
  _BYTE v325[148];
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  _DWORD v331[7];
  stat v332;
  stat v333;

  valuePtr = a2;
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v9 = (id)qword_1000E0070;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v10 = sub_100007750(0);
    v11 = v9;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v12 = v10;
    else
      v12 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v333.st_dev = 67109120;
      *(_DWORD *)&v333.st_mode = a1;
      LODWORD(v313) = 8;
      v312 = &v333;
      v4 = (uint64_t *)_os_log_send_and_compose_impl(v12, v325, 0, 0);

      if (v4)
        sub_100007780((const char *)v4);
    }
    else
    {

      v4 = 0;
    }
    free(v4);
  }

  if (a1 == -1)
  {
    sub_10001CF20("UserManagement loading foreground user failed assertion: uid != -1");
  }
  else
  {
    v5 = &qword_1000E0000;
    v13 = sub_100004400(qword_1000E0038, a1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);

    if (v14)
    {
      v4 = &qword_1000E0000;
      v6 = (const void **)&kUMUserSessionHomeDirKey;
      if (dword_1000E02C0 == 1)
      {
        if (qword_1000E0068 == -1)
          goto LABEL_16;
        goto LABEL_674;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v20 = (id)qword_1000E0060;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v333.st_dev = 0;
        v21 = sub_100007750(1);
        v22 = v20;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          v23 = v21;
        else
          v23 = v21 & 0xFFFFFFFE;
        if ((_DWORD)v23)
        {
          *(_DWORD *)v325 = 67109632;
          *(_DWORD *)&v325[4] = a1;
          *(_WORD *)&v325[8] = 1024;
          *(_DWORD *)&v325[10] = qword_1000E02B8;
          *(_WORD *)&v325[14] = 1024;
          *(_DWORD *)&v325[16] = valuePtr;
          v24 = (char *)_os_log_send_and_compose_impl(v23, &v333, 0, 0);

          if (v24)
            sub_100007780(v24);
        }
        else
        {

          v24 = 0;
        }
        free(v24);
      }

      v30 = sub_100004400(qword_1000E0038, a1);
      v31 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v30);
      if (qword_1000E02B8 >= 2)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v32 = (id)qword_1000E0060;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          v33 = v31;
          *(_QWORD *)v325 = 0;
          v34 = sub_100007750(1);
          v35 = v32;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            v36 = v34;
          else
            v36 = v34 & 0xFFFFFFFE;
          if ((_DWORD)v36)
          {
            LOWORD(v333.st_dev) = 0;
            v37 = (char *)_os_log_send_and_compose_impl(v36, v325, 0, 0);

            if (v37)
              sub_100007780(v37);
          }
          else
          {

            v37 = 0;
          }
          free(v37);
          v31 = v33;
        }

      }
      v84 = sub_10001BE1C(qword_1000E0318);
      v85 = (void *)objc_claimAutoreleasedReturnValue(v84);
      v86 = sub_10001CB24((uint64_t)v85, a1, 0, qword_1000E02B8 > 1);

      v87 = &qword_1000E0000;
      if (v86)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v88 = (id)qword_1000E0060;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v325 = 0;
          v89 = sub_100007750(1);
          v88 = v88;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
            v90 = v89;
          else
            v90 = v89 & 0xFFFFFFFE;
          if ((_DWORD)v90)
          {
            LOWORD(v333.st_dev) = 0;
            goto LABEL_169;
          }
          goto LABEL_172;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v88 = (id)qword_1000E0060;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v325 = 0;
          v91 = sub_100007750(1);
          v88 = v88;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
            v90 = v91;
          else
            v90 = v91 & 0xFFFFFFFE;
          if ((_DWORD)v90)
          {
            LOWORD(v333.st_dev) = 0;
LABEL_169:
            v92 = (char *)_os_log_send_and_compose_impl(v90, v325, 0, 0);

            if (v92)
              sub_100007780(v92);
            goto LABEL_173;
          }
LABEL_172:

          v92 = 0;
LABEL_173:
          v93 = a1;
          free(v92);
LABEL_174:

          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v94 = (id)qword_1000E0060;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          {
            v95 = v31;
            *(_QWORD *)v325 = 0;
            v96 = sub_100007750(1);
            v97 = v94;
            if (os_log_type_enabled(v97, OS_LOG_TYPE_DEFAULT))
              v98 = v96;
            else
              v98 = v96 & 0xFFFFFFFE;
            if ((_DWORD)v98)
            {
              LOWORD(v333.st_dev) = 0;
              v99 = (char *)_os_log_send_and_compose_impl(v98, v325, 0, 0);

              if (v99)
                sub_100007780(v99);
            }
            else
            {

              v99 = 0;
            }
            v93 = a1;
            free(v99);
            v31 = v95;
          }

          if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
          {
            v106 = &qword_1000E0000;
            goto LABEL_664;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v100 = (id)qword_1000E0060;
          if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
          {
            v101 = v31;
            *(_QWORD *)v325 = 0;
            v102 = sub_100007750(1);
            v103 = v100;
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
              v104 = v102;
            else
              v104 = v102 & 0xFFFFFFFE;
            if ((_DWORD)v104)
            {
              LOWORD(v333.st_dev) = 0;
              v105 = (char *)_os_log_send_and_compose_impl(v104, v325, 0, 0);

              if (v105)
                sub_100007780(v105);
            }
            else
            {

              v105 = 0;
            }
            v93 = a1;
            free(v105);
            v31 = v101;
          }

          sub_10001FBD4((uint64_t)v31, v93);
          if (dword_1000E02C0)
          {
            v107 = 0;
            goto LABEL_234;
          }
          v108 = sub_100007EF0(qword_1000E0318);
          v109 = (void *)objc_claimAutoreleasedReturnValue(v108);
          v110 = v93;
          v111 = v109;
          v319 = 0;
          v112 = objc_msgSend(v109, "fixupPath:withMode:toUser:group:error:", CFSTR("/private/var/mobile/Library"), 493, v110, v110, &v319);
          v107 = v319;

          if (v112)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v113 = (id)qword_1000E0060;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              v114 = v31;
              *(_QWORD *)v325 = 0;
              v115 = sub_100007750(1);
              v113 = v113;
              if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                v116 = v115;
              else
                v116 = v115 & 0xFFFFFFFE;
              if ((_DWORD)v116)
              {
                LOWORD(v333.st_dev) = 0;
                goto LABEL_218;
              }
              goto LABEL_229;
            }
          }
          else if (v107)
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v113 = (id)qword_1000E0060;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              v114 = v31;
              *(_QWORD *)v325 = 0;
              v117 = sub_100007750(1);
              v113 = v113;
              if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                v118 = v117;
              else
                v118 = v117 & 0xFFFFFFFE;
              if ((_DWORD)v118)
              {
                v119 = -[NSObject code](v107, "code");
                v333.st_dev = 67109120;
                *(_DWORD *)&v333.st_mode = v119;
                v116 = v118;
LABEL_218:
                v120 = (char *)_os_log_send_and_compose_impl(v116, v325, 0, 0);

                if (v120)
                  sub_100007780(v120);
                goto LABEL_230;
              }
LABEL_229:

              v120 = 0;
LABEL_230:
              v93 = a1;
              free(v120);
              v31 = v114;
LABEL_233:

LABEL_234:
              v124 = sub_100086748(v31, kUMUserSessionVolumeDeviceNodeKey);
              if (!v124)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v106 = &qword_1000E0000;
                v130 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                  goto LABEL_662;
                *(_QWORD *)v325 = 0;
                v131 = sub_100007750(1);
                if (os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                  v132 = v131;
                else
                  v132 = v131 & 0xFFFFFFFE;
                if ((_DWORD)v132)
                {
                  LOWORD(v333.st_dev) = 0;
                  v133 = (const char *)_os_log_send_and_compose_impl(v132, v325, 0, 0);
                  v134 = v133;
                  if (v133)
                    sub_100007780(v133);
                }
                else
                {
                  v134 = 0;
                }
                v93 = a1;
                v142 = (char *)v134;
                goto LABEL_661;
              }
              if (a3)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v106 = &qword_1000E0000;
                v125 = &qword_1000E0000;
                v126 = (id)qword_1000E0060;
                if (!os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                {
LABEL_293:

                  if (!a4 || !_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
                  {
                    if (v125[13] != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v130 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_662;
                    *(_QWORD *)v325 = 0;
                    v159 = sub_100007750(1);
                    v160 = v130;
                    if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                      v161 = v159;
                    else
                      v161 = v159 & 0xFFFFFFFE;
                    if ((_DWORD)v161)
                    {
                      LOWORD(v333.st_dev) = 0;
                      v162 = (stat *)v325;
                      goto LABEL_657;
                    }
LABEL_659:

                    v304 = 0;
LABEL_660:
                    v93 = a1;
                    v142 = (char *)v304;
LABEL_661:
                    free(v142);
LABEL_662:

                    goto LABEL_663;
                  }
                  memset(v331, 0, sizeof(v331));
                  v330 = 0u;
                  v329 = 0u;
                  v328 = 0u;
                  v327 = 0u;
                  v326 = 0u;
                  memset(&v325[20], 0, 128);
                  strcpy(v325, "/private/var/mobile");
                  if ((_DWORD)v93 == 501)
                  {
LABEL_649:
                    if (v125[13] != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v130 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v130, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_662;
                    *(_QWORD *)&v333.st_dev = 0;
                    v303 = sub_100007750(1);
                    v160 = v130;
                    if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                      v161 = v303;
                    else
                      v161 = v303 & 0xFFFFFFFE;
                    if ((_DWORD)v161)
                    {
                      LOWORD(v332.st_dev) = 0;
                      v162 = &v333;
LABEL_657:
                      v304 = (const char *)_os_log_send_and_compose_impl(v161, v162, 0, 0);

                      if (v304)
                        sub_100007780(v304);
                      goto LABEL_660;
                    }
                    goto LABEL_659;
                  }
                  if (v125[13] != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v154 = (id)qword_1000E0060;
                  if (os_log_type_enabled(v154, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)&v332.st_dev = 0;
                    v155 = sub_100007750(1);
                    v156 = v154;
                    if (os_log_type_enabled(v156, OS_LOG_TYPE_DEFAULT))
                      v157 = v155;
                    else
                      v157 = v155 & 0xFFFFFFFE;
                    if ((_DWORD)v157)
                    {
                      v333.st_dev = 67109378;
                      v93 = a1;
                      *(_DWORD *)&v333.st_mode = a1;
                      LOWORD(v333.st_ino) = 2080;
                      *(__darwin_ino64_t *)((char *)&v333.st_ino + 2) = (__darwin_ino64_t)v325;
                      v158 = (char *)_os_log_send_and_compose_impl(v157, &v332, 0, 0);

                      if (v158)
                        sub_100007780(v158);
                    }
                    else
                    {

                      v158 = 0;
                      v93 = a1;
                    }
                    free(v158);
                    v125 = &qword_1000E0000;
                  }

                  v296 = sub_100037148(v93, v325, 1);
                  v297 = v125[13];
                  if (v296)
                  {
                    if (v297 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v298 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_648;
                    *(_QWORD *)&v333.st_dev = 0;
                    v299 = sub_100007750(1);
                    v298 = v298;
                    if (os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
                      v300 = v299;
                    else
                      v300 = v299 & 0xFFFFFFFE;
                    if ((_DWORD)v300)
                    {
                      v332.st_dev = 67109120;
                      v93 = a1;
                      *(_DWORD *)&v332.st_mode = a1;
                      goto LABEL_644;
                    }
                  }
                  else
                  {
                    if (v297 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v298 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_648;
                    *(_QWORD *)&v333.st_dev = 0;
                    v301 = sub_100007750(1);
                    v298 = v298;
                    if (os_log_type_enabled(v298, OS_LOG_TYPE_DEFAULT))
                      v300 = v301;
                    else
                      v300 = v301 & 0xFFFFFFFE;
                    if ((_DWORD)v300)
                    {
                      v332.st_dev = 67109120;
                      v93 = a1;
                      *(_DWORD *)&v332.st_mode = a1;
LABEL_644:
                      v302 = (char *)_os_log_send_and_compose_impl(v300, &v333, 0, 0);

                      if (v302)
                        sub_100007780(v302);
                      goto LABEL_647;
                    }
                  }

                  v302 = 0;
                  v93 = a1;
LABEL_647:
                  free(v302);
LABEL_648:

                  goto LABEL_649;
                }
                *(_QWORD *)v325 = 0;
                v127 = sub_100007750(1);
                v126 = v126;
                if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
                  v128 = v127;
                else
                  v128 = v127 & 0xFFFFFFFE;
                if ((_DWORD)v128)
                {
                  LOWORD(v333.st_dev) = 0;
                  v129 = (char *)_os_log_send_and_compose_impl(v128, v325, 0, 0);

                  if (v129)
                    sub_100007780(v129);
                }
                else
                {

                  v129 = 0;
                }
                v93 = a1;
                free(v129);
LABEL_292:
                v125 = &qword_1000E0000;
                goto LABEL_293;
              }
              v135 = v124;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v136 = (id)qword_1000E0060;
              if (os_log_type_enabled(v136, OS_LOG_TYPE_DEFAULT))
              {
                v137 = v31;
                *(_QWORD *)&v333.st_dev = 0;
                v138 = sub_100007750(1);
                v139 = v136;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_DEFAULT))
                  v140 = v138;
                else
                  v140 = v138 & 0xFFFFFFFE;
                if ((_DWORD)v140)
                {
                  *(_DWORD *)v325 = 138412546;
                  *(_QWORD *)&v325[4] = v135;
                  *(_WORD *)&v325[12] = 1024;
                  *(_DWORD *)&v325[14] = a1;
                  v141 = (char *)_os_log_send_and_compose_impl(v140, &v333, 0, 0);

                  if (v141)
                    sub_100007780(v141);
                }
                else
                {

                  v141 = 0;
                }
                v31 = v137;
                free(v141);
              }

              v143 = sub_10001CA9C(qword_1000E0318);
              v144 = (void *)objc_claimAutoreleasedReturnValue(v143);
              v318 = 0;
              v145 = objc_msgSend(v144, "mapVolume:toSession:withPersona:error:", v135, a1, 0, &v318);
              v126 = v318;

              v106 = &qword_1000E0000;
              if (v145)
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v146 = (id)qword_1000E0060;
                if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                {
                  v314 = v31;
                  *(_QWORD *)v325 = 0;
                  v147 = sub_100007750(1);
                  v146 = v146;
                  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                    v148 = v147;
                  else
                    v148 = v147 & 0xFFFFFFFE;
                  if ((_DWORD)v148)
                  {
                    LOWORD(v333.st_dev) = 0;
                    v149 = (stat *)v325;
                    goto LABEL_286;
                  }
                  goto LABEL_289;
                }
              }
              else
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v146 = (id)qword_1000E0060;
                if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                {
                  v314 = v31;
                  *(_QWORD *)&v333.st_dev = 0;
                  v150 = sub_100007750(1);
                  v146 = v146;
                  if (os_log_type_enabled(v146, OS_LOG_TYPE_DEFAULT))
                    v151 = v150;
                  else
                    v151 = v150 & 0xFFFFFFFE;
                  if ((_DWORD)v151)
                  {
                    v152 = -[NSObject code](v126, "code");
                    *(_DWORD *)v325 = 134217984;
                    *(_QWORD *)&v325[4] = v152;
                    v149 = &v333;
                    v148 = v151;
LABEL_286:
                    v153 = (char *)_os_log_send_and_compose_impl(v148, v149, 0, 0);

                    if (v153)
                      sub_100007780(v153);
                    goto LABEL_290;
                  }
LABEL_289:

                  v153 = 0;
LABEL_290:
                  v93 = a1;
                  free(v153);
                  v31 = v314;
                  goto LABEL_291;
                }
              }
              v93 = a1;
LABEL_291:

              goto LABEL_292;
            }
          }
          else
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v113 = (id)qword_1000E0060;
            if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v325 = 0;
              v121 = sub_100007750(1);
              v113 = v113;
              if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                v122 = v121;
              else
                v122 = v121 & 0xFFFFFFFE;
              if ((_DWORD)v122)
              {
                LOWORD(v333.st_dev) = 0;
                v123 = (char *)_os_log_send_and_compose_impl(v122, v325, 0, 0);

                if (v123)
                  sub_100007780(v123);
              }
              else
              {

                v123 = 0;
              }
              v93 = a1;
              free(v123);
              v107 = 0;
              goto LABEL_233;
            }
            v107 = 0;
          }
          v93 = a1;
          goto LABEL_233;
        }
      }
      v93 = a1;
      goto LABEL_174;
    }
  }
  sub_10001CF20("UserManagement loading foreground user failed assertion: [_gUserManager userWithUID:uid] != ((void *)0)", v312, v313);
LABEL_674:
  dispatch_once(&qword_1000E0068, &stru_1000D1550);
LABEL_16:
  v15 = (id)qword_1000E0060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v16 = sub_100007750(1);
    v17 = v15;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v16;
    else
      v18 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      LOWORD(v333.st_dev) = 0;
      LODWORD(v313) = 2;
      v312 = &v333;
      v19 = (char *)_os_log_send_and_compose_impl(v18, v325, 0, 0);

      if (v19)
        sub_100007780(v19);
    }
    else
    {

      v19 = 0;
    }
    free(v19);
  }

  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v25 = (id)qword_1000E0060;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v26 = sub_100007750(1);
    v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      v28 = v26;
    else
      v28 = v26 & 0xFFFFFFFE;
    if ((_DWORD)v28)
    {
      v333.st_dev = 67109120;
      *(_DWORD *)&v333.st_mode = a1;
      LODWORD(v313) = 8;
      v312 = &v333;
      v29 = (char *)_os_log_send_and_compose_impl(v28, v325, 0, 0);

      if (v29)
        sub_100007780(v29);
    }
    else
    {

      v29 = 0;
    }
    free(v29);
  }

  v38 = sub_100004400(v5[7], a1);
  v39 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v38);
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v40 = (id)qword_1000E0060;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v333.st_dev = 0;
    v41 = sub_100007750(1);
    v42 = v40;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      v43 = v41;
    else
      v43 = v41 & 0xFFFFFFFE;
    if ((_DWORD)v43)
    {
      *(_DWORD *)v325 = 67109378;
      *(_DWORD *)&v325[4] = a1;
      *(_WORD *)&v325[8] = 2112;
      *(_QWORD *)&v325[10] = v39;
      LODWORD(v313) = 18;
      v312 = (stat *)v325;
      v44 = (char *)_os_log_send_and_compose_impl(v43, &v333, 0, 0);

      if (v44)
        sub_100007780(v44);
    }
    else
    {

      v44 = 0;
    }
    free(v44);
  }

  if (a1 == 502)
  {
    v45 = sub_100007EF0(qword_1000E0318);
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);
    objc_msgSend(v46, "removeFileAtPath:error:", CFSTR("/private/var//keybags/nextsession_opaque.kb"), 0);

    v47 = sub_100007EF0(qword_1000E0318);
    v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
    objc_msgSend(v48, "removeFileAtPath:error:", CFSTR("/private/var//keybags/nextsession_SBD_opaque.kb"), 0);

  }
  v316 = sub_100004318(v39, kUMUserSessionGroupIDKey);
  v49 = sub_10001BE1C(qword_1000E0318);
  v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
  v51 = sub_10001CB24((uint64_t)v50, a1, 1, 0);

  v52 = v4[13];
  if (v51)
  {
    if (v52 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v53 = (id)qword_1000E0060;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v325 = 0;
      v54 = sub_100007750(1);
      v53 = v53;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        v55 = v54;
      else
        v55 = v54 & 0xFFFFFFFE;
      if ((_DWORD)v55)
      {
        LOWORD(v333.st_dev) = 0;
        LODWORD(v313) = 2;
        v312 = &v333;
        goto LABEL_87;
      }
      goto LABEL_89;
    }
  }
  else
  {
    if (v52 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v53 = (id)qword_1000E0060;
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v325 = 0;
      v56 = sub_100007750(1);
      v53 = v53;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        v55 = v56;
      else
        v55 = v56 & 0xFFFFFFFE;
      if ((_DWORD)v55)
      {
        LOWORD(v333.st_dev) = 0;
        LODWORD(v313) = 2;
        v312 = &v333;
LABEL_87:
        v57 = (char *)_os_log_send_and_compose_impl(v55, v325, 0, 0);

        if (v57)
          sub_100007780(v57);
        goto LABEL_90;
      }
LABEL_89:

      v57 = 0;
LABEL_90:
      free(v57);
    }
  }

  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v58 = (id)qword_1000E0060;
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v59 = sub_100007750(1);
    v60 = v58;
    if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      v61 = v59;
    else
      v61 = v59 & 0xFFFFFFFE;
    if ((_DWORD)v61)
    {
      v333.st_dev = 67109120;
      *(_DWORD *)&v333.st_mode = a1;
      LODWORD(v313) = 8;
      v312 = &v333;
      v62 = (char *)_os_log_send_and_compose_impl(v61, v325, 0, 0);

      if (v62)
        sub_100007780(v62);
    }
    else
    {

      v62 = 0;
    }
    free(v62);
    v4 = &qword_1000E0000;
  }

  if (a1 == 502)
    v63 = 1;
  else
    v63 = 2;
  dword_1000E02C8 = v63;
  dword_1000E02CC = 0;
  memset(&v333, 0, sizeof(v333));
  memset(&v332, 0, sizeof(v332));
  if (lstat("/private/var/mobile", &v333))
  {
    if (v4[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v64 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      goto LABEL_336;
    *(_QWORD *)v322 = 0;
    LODWORD(v65) = sub_100007750(1);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      v65 = v65;
    else
      v65 = v65 & 0xFFFFFFFE;
    if ((_DWORD)v65)
    {
      v66 = v64;
      v67 = __error();
      v68 = strerror(*v67);
      *(_DWORD *)v325 = 136315138;
      *(_QWORD *)&v325[4] = v68;
      LODWORD(v313) = 12;
      v312 = (stat *)v325;
LABEL_114:
      v69 = (char *)_os_log_send_and_compose_impl(v65, v322, 0, 0);

      if (v69)
        sub_100007780(v69);
      v4 = &qword_1000E0000;
      goto LABEL_335;
    }
LABEL_334:
    v69 = 0;
LABEL_335:
    free(v69);
    goto LABEL_336;
  }
  v70 = v333.st_mode & 0xF000;
  if (v70 != 0x4000)
  {
    if (v70 == 40960)
    {
      v71 = sub_100007EF0(qword_1000E0318);
      v72 = (void *)objc_claimAutoreleasedReturnValue(v71);
      v73 = objc_msgSend(v72, "removeFileAtPath:error:", CFSTR("/private/var/mobile"), 0);

      if ((v73 & 1) != 0)
        goto LABEL_337;
      if (v4[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v64 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        goto LABEL_336;
      *(_QWORD *)v325 = 0;
      v74 = sub_100007750(1);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        v75 = v74;
      else
        v75 = v74 & 0xFFFFFFFE;
      if (!(_DWORD)v75)
        goto LABEL_334;
      *(_WORD *)v322 = 0;
      LODWORD(v313) = 2;
      v312 = (stat *)v322;
    }
    else
    {
      if (v4[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v64 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        goto LABEL_336;
      *(_QWORD *)v325 = 0;
      v82 = sub_100007750(1);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        v75 = v82;
      else
        v75 = v82 & 0xFFFFFFFE;
      if (!(_DWORD)v75)
        goto LABEL_334;
      *(_DWORD *)v322 = 67109120;
      *(_DWORD *)&v322[4] = v333.st_mode;
      LODWORD(v313) = 8;
      v312 = (stat *)v322;
    }
    v83 = (const char *)_os_log_send_and_compose_impl(v75, v325, 0, 0);
    v69 = (char *)v83;
    if (v83)
      sub_100007780(v83);
    goto LABEL_335;
  }
  if (sub_10001CF78("/private/var/mobile", 0x80000))
  {
    if (v4[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v76 = (id)qword_1000E0060;
    if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v322 = 0;
      LODWORD(v77) = sub_100007750(1);
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        v77 = v77;
      else
        v77 = v77 & 0xFFFFFFFE;
      if ((_DWORD)v77)
      {
        v78 = v76;
        v79 = __error();
        v80 = strerror(*v79);
        *(_DWORD *)v325 = 136315138;
        *(_QWORD *)&v325[4] = v80;
        LODWORD(v313) = 12;
        v312 = (stat *)v325;
        v81 = (char *)_os_log_send_and_compose_impl(v77, v322, 0, 0);

        if (v81)
          sub_100007780(v81);
        v4 = &qword_1000E0000;
      }
      else
      {
        v81 = 0;
      }
      free(v81);
    }

  }
  if (lstat("/private/var/OLDmobile", &v332))
  {
    rename((const std::__fs::filesystem::path *)"/private/var/mobile", (const std::__fs::filesystem::path *)"/private/var/OLDmobile", v163);
    if (!v164)
      goto LABEL_337;
    if (v4[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v64 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      goto LABEL_336;
    *(_QWORD *)v322 = 0;
    LODWORD(v65) = sub_100007750(1);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      v65 = v65;
    else
      v65 = v65 & 0xFFFFFFFE;
    if (!(_DWORD)v65)
      goto LABEL_334;
    goto LABEL_325;
  }
  if (!rmdir("/private/var/mobile"))
    goto LABEL_337;
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v64 = (id)qword_1000E0060;
  if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v322 = 0;
    LODWORD(v65) = sub_100007750(1);
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      v65 = v65;
    else
      v65 = v65 & 0xFFFFFFFE;
    if (!(_DWORD)v65)
      goto LABEL_334;
LABEL_325:
    v66 = v64;
    v165 = __error();
    v166 = strerror(*v165);
    *(_DWORD *)v325 = 136315138;
    *(_QWORD *)&v325[4] = v166;
    LODWORD(v313) = 12;
    v312 = (stat *)v325;
    goto LABEL_114;
  }
LABEL_336:

LABEL_337:
  if (mkdir("/private/var/mobile", 0x1FFu))
  {
    if (v4[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v167 = (id)qword_1000E0060;
    if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v322 = 0;
      LODWORD(v168) = sub_100007750(1);
      if (os_log_type_enabled(v167, OS_LOG_TYPE_DEFAULT))
        v168 = v168;
      else
        v168 = v168 & 0xFFFFFFFE;
      if ((_DWORD)v168)
      {
        v169 = v167;
        v170 = __error();
        v171 = strerror(*v170);
        *(_DWORD *)v325 = 136315138;
        *(_QWORD *)&v325[4] = v171;
        LODWORD(v313) = 12;
        v312 = (stat *)v325;
        v172 = (char *)_os_log_send_and_compose_impl(v168, v322, 0, 0);

        if (v172)
          sub_100007780(v172);
        v4 = &qword_1000E0000;
      }
      else
      {
        v172 = 0;
      }
      free(v172);
    }

  }
  v173 = chown("/private/var/mobile", a1, v316);
  v174 = v4[13];
  if (v173)
  {
    if (v174 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v175 = (id)qword_1000E0060;
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v322 = 0;
      LODWORD(v176) = sub_100007750(1);
      if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
        v176 = v176;
      else
        v176 = v176 & 0xFFFFFFFE;
      if ((_DWORD)v176)
      {
        v177 = v175;
        v178 = __error();
        v179 = strerror(*v178);
        *(_DWORD *)v325 = 67109634;
        *(_DWORD *)&v325[4] = a1;
        *(_WORD *)&v325[8] = 1024;
        *(_DWORD *)&v325[10] = v316;
        *(_WORD *)&v325[14] = 2080;
        *(_QWORD *)&v325[16] = v179;
        LODWORD(v313) = 24;
        v312 = (stat *)v325;
        v180 = (char *)_os_log_send_and_compose_impl(v176, v322, 0, 0);

        if (v180)
          sub_100007780(v180);
        v4 = &qword_1000E0000;
        goto LABEL_372;
      }
LABEL_371:
      v180 = 0;
LABEL_372:
      free(v180);
    }
  }
  else
  {
    if (v174 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v175 = (id)qword_1000E0060;
    if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v322 = 0;
      v181 = sub_100007750(1);
      if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
        v182 = v181;
      else
        v182 = v181 & 0xFFFFFFFE;
      if ((_DWORD)v182)
      {
        *(_DWORD *)v325 = 67109376;
        *(_DWORD *)&v325[4] = a1;
        *(_WORD *)&v325[8] = 1024;
        *(_DWORD *)&v325[10] = v316;
        LODWORD(v313) = 14;
        v312 = (stat *)v325;
        v183 = (const char *)_os_log_send_and_compose_impl(v182, v322, 0, 0);
        v180 = (char *)v183;
        if (v183)
          sub_100007780(v183);
        goto LABEL_372;
      }
      goto LABEL_371;
    }
  }

  bzero(v325, 0x400uLL);
  sub_100086788(v39, *v6, v325, 1024);
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v184 = (id)qword_1000E0060;
  if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
  {
    v321 = 0;
    v185 = sub_100007750(1);
    if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      v186 = v185;
    else
      v186 = v185 & 0xFFFFFFFE;
    if ((_DWORD)v186)
    {
      *(_DWORD *)v322 = 136315138;
      *(_QWORD *)&v322[4] = v325;
      LODWORD(v313) = 12;
      v312 = (stat *)v322;
      v187 = (const char *)_os_log_send_and_compose_impl(v186, &v321, 0, 0);
      v188 = (char *)v187;
      if (v187)
        sub_100007780(v187);
    }
    else
    {
      v188 = 0;
    }
    free(v188);
  }

  v189 = fsctl("/private/var/", 0x2000410FuLL, v325, 0);
  v190 = v4[13];
  if (v189)
  {
    v191 = v189;
    if (v190 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v192 = (id)qword_1000E0060;
    if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
    {
      v321 = 0;
      LODWORD(v193) = sub_100007750(1);
      if (os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
        v193 = v193;
      else
        v193 = v193 & 0xFFFFFFFE;
      if ((_DWORD)v193)
      {
        v194 = v39;
        v195 = v192;
        v196 = strerror(v191);
        *(_DWORD *)v322 = 67109634;
        *(_DWORD *)&v322[4] = a1;
        *(_WORD *)&v322[8] = 2080;
        *(_QWORD *)&v322[10] = v325;
        v323 = 2080;
        v324 = v196;
        LODWORD(v313) = 28;
        v312 = (stat *)v322;
        v197 = (char *)_os_log_send_and_compose_impl(v193, &v321, 0, 0);

        if (v197)
          sub_100007780(v197);
        v39 = v194;
      }
      else
      {
        v197 = 0;
      }
      v4 = &qword_1000E0000;
      free(v197);
    }

  }
  else
  {
    if (v190 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v198 = (id)qword_1000E0060;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
    {
      v321 = 0;
      v199 = sub_100007750(1);
      if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
        v200 = v199;
      else
        v200 = v199 & 0xFFFFFFFE;
      if ((_DWORD)v200)
      {
        *(_DWORD *)v322 = 67109378;
        *(_DWORD *)&v322[4] = a1;
        *(_WORD *)&v322[8] = 2080;
        *(_QWORD *)&v322[10] = v325;
        LODWORD(v313) = 18;
        v312 = (stat *)v322;
        v201 = (const char *)_os_log_send_and_compose_impl(v200, &v321, 0, 0);
        v202 = (char *)v201;
        if (v201)
          sub_100007780(v201);
      }
      else
      {
        v202 = 0;
      }
      free(v202);
    }

    sub_100037148(a1, v325, 1);
  }
  strcpy(v325, "/private/var/DELETED");
  if (!lstat("/private/var/DELETED", &v333))
  {
    v209 = sub_100031520(v325);
    v210 = v4[13];
    if (v209)
    {
      if (v210 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v203 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
        goto LABEL_442;
      v321 = 0;
      v211 = sub_100007750(1);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
        v212 = v211;
      else
        v212 = v211 & 0xFFFFFFFE;
      if (!(_DWORD)v212)
        goto LABEL_440;
      *(_DWORD *)v322 = 136315138;
      *(_QWORD *)&v322[4] = v325;
      LODWORD(v313) = 12;
      v312 = (stat *)v322;
    }
    else
    {
      if (v210 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v203 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
        goto LABEL_442;
      v321 = 0;
      v213 = sub_100007750(1);
      if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
        v212 = v213;
      else
        v212 = v213 & 0xFFFFFFFE;
      if (!(_DWORD)v212)
        goto LABEL_440;
      *(_DWORD *)v322 = 136315138;
      *(_QWORD *)&v322[4] = v325;
      LODWORD(v313) = 12;
      v312 = (stat *)v322;
    }
    v214 = (const char *)_os_log_send_and_compose_impl(v212, &v321, 0, 0);
    v208 = (char *)v214;
    if (v214)
      sub_100007780(v214);
    goto LABEL_441;
  }
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v203 = (id)qword_1000E0060;
  if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
  {
    v321 = 0;
    LODWORD(v204) = sub_100007750(1);
    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEFAULT))
      v204 = v204;
    else
      v204 = v204 & 0xFFFFFFFE;
    if ((_DWORD)v204)
    {
      v205 = v203;
      v206 = __error();
      v207 = strerror(*v206);
      *(_DWORD *)v322 = 136315138;
      *(_QWORD *)&v322[4] = v207;
      LODWORD(v313) = 12;
      v312 = (stat *)v322;
      v208 = (char *)_os_log_send_and_compose_impl(v204, &v321, 0, 0);

      if (v208)
        sub_100007780(v208);
      v4 = &qword_1000E0000;
      goto LABEL_441;
    }
LABEL_440:
    v208 = 0;
LABEL_441:
    free(v208);
  }
LABEL_442:

  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v215 = (id)qword_1000E0060;
  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v216 = sub_100007750(1);
    if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
      v217 = v216;
    else
      v217 = v216 & 0xFFFFFFFE;
    if ((_DWORD)v217)
    {
      v333.st_dev = 67109120;
      *(_DWORD *)&v333.st_mode = 2;
      LODWORD(v313) = 8;
      v312 = &v333;
      v218 = (const char *)_os_log_send_and_compose_impl(v217, v325, 0, 0);
      v219 = (char *)v218;
      if (v218)
        sub_100007780(v218);
    }
    else
    {
      v219 = 0;
    }
    free(v219);
  }
  v315 = v39;

  v220 = 0;
  v221 = 1;
  v93 = a1;
  do
  {
    v222 = v221;
    memset(v325, 0, 144);
    v223 = (&off_1000D13D8)[6 * v220];
    v224 = stat(v223, (stat *)v325);
    v225 = v4[13];
    if (v224)
    {
      if (v225 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v226 = (id)qword_1000E0060;
      if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v332.st_dev = 0;
        v227 = sub_100007750(1);
        if (os_log_type_enabled(v226, OS_LOG_TYPE_DEFAULT))
          v228 = v227;
        else
          v228 = v227 & 0xFFFFFFFE;
        if ((_DWORD)v228)
        {
          v333.st_dev = 136315138;
          *(_QWORD *)&v333.st_mode = v223;
          LODWORD(v313) = 12;
          v312 = &v333;
          v229 = (const char *)_os_log_send_and_compose_impl(v228, &v332, 0, 0);
          v230 = (char *)v229;
          if (v229)
            sub_100007780(v229);
        }
        else
        {
          v230 = 0;
        }
        free(v230);
        v4 = &qword_1000E0000;
      }

      if (mkpath_np(v223, 0x1EDu))
      {
        if (v4[13] != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v236 = (id)qword_1000E0060;
        if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v332.st_dev = 0;
          LODWORD(v237) = sub_100007750(1);
          if (os_log_type_enabled(v236, OS_LOG_TYPE_DEFAULT))
            v237 = v237;
          else
            v237 = v237 & 0xFFFFFFFE;
          if ((_DWORD)v237)
          {
            v238 = v236;
            v239 = __error();
            v240 = strerror(*v239);
            v333.st_dev = 136315394;
            *(_QWORD *)&v333.st_mode = v223;
            WORD2(v333.st_ino) = 2080;
            *(__darwin_ino64_t *)((char *)&v333.st_ino + 6) = (__darwin_ino64_t)v240;
            LODWORD(v313) = 22;
            v312 = &v333;
            v241 = (char *)_os_log_send_and_compose_impl(v237, &v332, 0, 0);

            if (v241)
              sub_100007780(v241);
            v93 = a1;
          }
          else
          {
            v241 = 0;
          }
          free(v241);
          v4 = &qword_1000E0000;
        }

      }
    }
    else
    {
      if (v225 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v231 = (id)qword_1000E0060;
      if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v332.st_dev = 0;
        v232 = sub_100007750(1);
        if (os_log_type_enabled(v231, OS_LOG_TYPE_DEFAULT))
          v233 = v232;
        else
          v233 = v232 & 0xFFFFFFFE;
        if ((_DWORD)v233)
        {
          v333.st_dev = 136315138;
          *(_QWORD *)&v333.st_mode = v223;
          LODWORD(v313) = 12;
          v312 = &v333;
          v234 = (const char *)_os_log_send_and_compose_impl(v233, &v332, 0, 0);
          v235 = (char *)v234;
          if (v234)
            sub_100007780(v234);
        }
        else
        {
          v235 = 0;
        }
        v93 = a1;
        free(v235);
        v4 = &qword_1000E0000;
      }

      if (*(_DWORD *)&v325[16] != (_DWORD)v93 || *(_DWORD *)&v325[20] != v316)
      {
        if (!chown(v223, v93, v316))
        {
          if (v4[13] != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v242 = (id)qword_1000E0060;
          if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)&v332.st_dev = 0;
            v243 = sub_100007750(1);
            if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
              v244 = v243;
            else
              v244 = v243 & 0xFFFFFFFE;
            if ((_DWORD)v244)
            {
              v245 = v242;
              v246 = __error();
              v247 = strerror(*v246);
              v333.st_dev = 136315394;
              *(_QWORD *)&v333.st_mode = v223;
              WORD2(v333.st_ino) = 2080;
              *(__darwin_ino64_t *)((char *)&v333.st_ino + 6) = (__darwin_ino64_t)v247;
              LODWORD(v313) = 22;
              v312 = &v333;
              v248 = (char *)_os_log_send_and_compose_impl(v244, &v332, 0, 0);

              if (v248)
                sub_100007780(v248);
            }
            else
            {
              v248 = 0;
            }
            v93 = a1;
            free(v248);
            v4 = &qword_1000E0000;
          }

        }
        sub_100021E24(v223, v93);
      }
    }
    v221 = 0;
    v220 = 1;
  }
  while ((v222 & 1) != 0);
  v106 = &qword_1000E0000;
  v31 = v315;
  if ((_DWORD)v93 == 502)
  {
    v249 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
    if (v249)
    {
      v250 = v249;
      CFDictionarySetValue(v315, kUMUserSessionPreviousLoggedinIDKey, v249);
      CFRelease(v250);
    }
    v251 = (const __CFString *)sub_100086748(v315, kUMUserSessionHomeDirKey);
    sub_10007E108(v251, 0x1F6u, 0x1F6u);
    if (!CFDictionaryContainsKey(v315, kUMUserSessionLanguageKey))
      CFDictionarySetValue(v315, kUMUserSessionLanguageKey, CFSTR("en_US"));
  }
  Current = CFAbsoluteTimeGetCurrent();
  v253 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDictionaryReplaceValue(v315, kUMUserSessionLoginTimeStampKey, v253);
  if (v253)
    CFRelease(v253);
  if ((objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled", v312, v313) & 1) != 0)
  {
LABEL_516:
    if ((_DWORD)v93 != 502)
    {
      if (v4[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v254 = (id)qword_1000E0060;
      if (os_log_type_enabled(v254, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v325 = 0;
        v255 = sub_100007750(1);
        v256 = v254;
        if (os_log_type_enabled(v256, OS_LOG_TYPE_DEFAULT))
          v257 = v255;
        else
          v257 = v255 & 0xFFFFFFFE;
        if ((_DWORD)v257)
        {
          v333.st_dev = 67109120;
          v93 = a1;
          *(_DWORD *)&v333.st_mode = a1;
          v258 = (char *)_os_log_send_and_compose_impl(v257, v325, 0, 0);

          if (v258)
            sub_100007780(v258);
        }
        else
        {

          v258 = 0;
          v93 = a1;
        }
        free(v258);
      }

      sub_1000217B8(v93);
    }
    sub_1000216D4(v315, v93);
    if (v4[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v276 = (id)qword_1000E0060;
    if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v325 = 0;
      v277 = sub_100007750(1);
      v278 = v276;
      if (os_log_type_enabled(v278, OS_LOG_TYPE_DEFAULT))
        v279 = v277;
      else
        v279 = v277 & 0xFFFFFFFE;
      if ((_DWORD)v279)
      {
        v333.st_dev = 67109120;
        v93 = a1;
        *(_DWORD *)&v333.st_mode = a1;
        v280 = (char *)_os_log_send_and_compose_impl(v279, v325, 0, 0);

        if (v280)
          sub_100007780(v280);
      }
      else
      {

        v280 = 0;
        v93 = a1;
      }
      free(v280);
    }

    CFDictionarySetValue(v315, kUMUserSessionForegroundKey, kCFBooleanTrue);
    sub_10001DE7C();
    sub_100081084();
    v281 = v4[13];
    if (dword_1000E02F0 < 1)
    {
      if (v281 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v87 = &qword_1000E0000;
      v107 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        goto LABEL_663;
      *(_QWORD *)v325 = 0;
      v287 = sub_100007750(1);
      v107 = v107;
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        v288 = v287;
      else
        v288 = v287 & 0xFFFFFFFE;
      if ((_DWORD)v288)
      {
        LOWORD(v333.st_dev) = 0;
        v289 = (char *)_os_log_send_and_compose_impl(v288, v325, 0, 0);

        if (v289)
          sub_100007780(v289);
      }
      else
      {

        v289 = 0;
      }
      v93 = a1;
      goto LABEL_621;
    }
    if (v281 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v282 = (id)qword_1000E0060;
    if (os_log_type_enabled(v282, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v325 = 0;
      v283 = sub_100007750(1);
      v284 = v282;
      if (os_log_type_enabled(v284, OS_LOG_TYPE_DEFAULT))
        v285 = v283;
      else
        v285 = v283 & 0xFFFFFFFE;
      if ((_DWORD)v285)
      {
        v333.st_dev = 67109120;
        *(_DWORD *)&v333.st_mode = dword_1000E02F0;
        v286 = (char *)_os_log_send_and_compose_impl(v285, v325, 0, 0);

        if (v286)
          sub_100007780(v286);
      }
      else
      {

        v286 = 0;
      }
      v93 = a1;
      free(v286);
    }

    v290 = sub_100021FC4(dword_1000E02F0);
    v291 = v4[13];
    if (v290)
    {
      if (v291 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v107 = (id)qword_1000E0060;
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v325 = 0;
        v292 = sub_100007750(1);
        v107 = v107;
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          v293 = v292;
        else
          v293 = v292 & 0xFFFFFFFE;
        if ((_DWORD)v293)
        {
          v333.st_dev = 67109120;
          *(_DWORD *)&v333.st_mode = dword_1000E02F0;
          goto LABEL_609;
        }
        goto LABEL_612;
      }
    }
    else
    {
      if (v291 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v107 = (id)qword_1000E0060;
      if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v325 = 0;
        v294 = sub_100007750(1);
        v107 = v107;
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
          v293 = v294;
        else
          v293 = v294 & 0xFFFFFFFE;
        if ((_DWORD)v293)
        {
          v333.st_dev = 67109120;
          *(_DWORD *)&v333.st_mode = dword_1000E02F0;
LABEL_609:
          v289 = (char *)_os_log_send_and_compose_impl(v293, v325, 0, 0);

          if (v289)
            sub_100007780(v289);
          goto LABEL_613;
        }
LABEL_612:

        v289 = 0;
LABEL_613:
        v93 = a1;
        v87 = &qword_1000E0000;
LABEL_621:
        free(v289);
        goto LABEL_663;
      }
    }
    v87 = &qword_1000E0000;
LABEL_663:

LABEL_664:
    v305 = (const __CFString *)sub_100086748(v31, kUMUserSessionHomeDirKey);
    v306 = sub_100081918(v305, v93, v93);
    if (v306)
    {
      v311 = sub_10001CF20("failed to register the exclaves writable storage: %d\n", v306);
      return sub_100048768(v311);
    }
    else
    {
      if (v31)
        CFRelease(v31);
      if (*((_DWORD *)v87 + 176) != 1)
      {
        v307 = sub_10000530C(v106[7], v93);
        v308 = (void *)objc_claimAutoreleasedReturnValue(v307);
        v309 = v93;
        v310 = v308;
        sub_100065BB0((id *)qword_1000E0040, v308, v309);

      }
      return 1;
    }
  }
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v259 = (id)qword_1000E0060;
  if (os_log_type_enabled(v259, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v260 = sub_100007750(1);
    v261 = v259;
    if (os_log_type_enabled(v261, OS_LOG_TYPE_DEFAULT))
      v262 = v260;
    else
      v262 = v260 & 0xFFFFFFFE;
    if ((_DWORD)v262)
    {
      v333.st_dev = 67109120;
      v93 = a1;
      *(_DWORD *)&v333.st_mode = a1;
      v263 = (char *)_os_log_send_and_compose_impl(v262, v325, 0, 0);

      if (v263)
        sub_100007780(v263);
    }
    else
    {

      v263 = 0;
      v93 = a1;
    }
    free(v263);
  }

  if (!MKBUserSessionLoadKeybagForUser(v315, v93, 0, 0, 0, 1))
  {
    v269 = MKBUserSessionUnloadSessionBags(v315, v93);
    if (v269)
    {
      v270 = v269;
      if (v4[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v271 = (id)qword_1000E0060;
      if (os_log_type_enabled(v271, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v325 = 0;
        v272 = sub_100007750(1);
        v273 = v271;
        if (os_log_type_enabled(v273, OS_LOG_TYPE_DEFAULT))
          v274 = v272;
        else
          v274 = v272 & 0xFFFFFFFE;
        if ((_DWORD)v274)
        {
          v333.st_dev = 67109120;
          *(_DWORD *)&v333.st_mode = v270;
          v275 = (char *)_os_log_send_and_compose_impl(v274, v325, 0, 0);

          if (v275)
            sub_100007780(v275);
        }
        else
        {

          v275 = 0;
        }
        v93 = a1;
        free(v275);
      }

    }
    goto LABEL_516;
  }
  if (v4[13] != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v264 = (id)qword_1000E0060;
  if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v325 = 0;
    v265 = sub_100007750(1);
    v266 = v264;
    if (os_log_type_enabled(v266, OS_LOG_TYPE_DEFAULT))
      v267 = v265;
    else
      v267 = v265 & 0xFFFFFFFE;
    if ((_DWORD)v267)
    {
      LOWORD(v333.st_dev) = 0;
      v268 = (char *)_os_log_send_and_compose_impl(v267, v325, 0, 0);

      if (v268)
        sub_100007780(v268);
    }
    else
    {

      v268 = 0;
    }
    free(v268);
  }

  if (v315)
    CFRelease(v315);
  return 0;
}

uint64_t sub_100048768()
{
  id *v0;
  uint64_t v1;
  void *v2;
  id *v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  uint64_t v33;
  void *v34;
  char *v35;
  uint64_t result;
  unsigned int v37;
  uint64_t v38;
  unsigned int *v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43[6];

  v0 = sub_10005BCE4((uint64_t)UMDAPFSSupportVolumeHelper, (void *)qword_1000E0318, byte_1000E0312);
  v1 = objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)qword_1000E0030;
  qword_1000E0030 = v1;

  v3 = sub_1000587C8((uint64_t)UMDUserManager, (void *)qword_1000E0030);
  v4 = objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)qword_1000E0038;
  qword_1000E0038 = v4;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v43 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      LOWORD(v41) = 0;
      v40 = 2;
      v39 = (unsigned int *)&v41;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, v43, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if (!sub_100043404(0))
  {
    sub_10001CF20("UserManagement user switch task failed to load user manifest");
LABEL_67:
    sub_1000599BC(qword_1000E0038);
    sub_10001CF20("UserManagement user switch task next session bag missing or corrupt");
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v11 = (id)qword_1000E0060;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v43 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      LOWORD(v41) = 0;
      v40 = 2;
      v39 = (unsigned int *)&v41;
      v14 = (const char *)_os_log_send_and_compose_impl(v13, v43, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }

  sub_10001C838(qword_1000E0038, (void *)qword_1000E02B0);
  if (dword_1000E02C0 != 1)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v16 = (id)qword_1000E0060;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v43 = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        LOWORD(v41) = 0;
        v40 = 2;
        v39 = (unsigned int *)&v41;
        v19 = (const char *)_os_log_send_and_compose_impl(v18, v43, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

    if (qword_1000E0040)
    {
      sub_10001CF20("UserManagement user switch failed assertion: _gPersonaManager == ((void *)0)");
    }
    else
    {
      v21 = sub_10005BEDC((uint64_t)UMDPersonaManager, (void *)qword_1000E0038);
      v22 = objc_claimAutoreleasedReturnValue(v21);
      v23 = (void *)qword_1000E0040;
      qword_1000E0040 = v22;

      v42 = 0;
      if (!sub_10004378C(&v42))
      {
LABEL_69:
        v37 = sub_10001CF20("UserManagement user switch task failed to load persona manifest", v39, v40);
        return sub_100048D34(v37, v38);
      }
      if (qword_1000E0088 == -1)
        goto LABEL_39;
    }
    dispatch_once(&qword_1000E0088, &stru_1000D1590);
LABEL_39:
    v24 = (id)qword_1000E0080;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v43 = 0;
      v25 = sub_100007750(0);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        LOWORD(v41) = 0;
        v40 = 2;
        v39 = (unsigned int *)&v41;
        v27 = (const char *)_os_log_send_and_compose_impl(v26, v43, 0, 0);
        v28 = (char *)v27;
        if (v27)
          sub_100007780(v27);
      }
      else
      {
        v28 = 0;
      }
      free(v28);
    }

    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v29 = (id)qword_1000E0080;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v41 = 0;
      LODWORD(v30) = sub_100007750(0);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        v30 = v30;
      else
        v30 = v30 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        v31 = qword_1000E0040;
        v32 = v29;
        v33 = sub_100007EF0(v31);
        v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
        v43[0] = 138412290;
        *(_QWORD *)&v43[1] = v34;
        v40 = 12;
        v39 = v43;
        v35 = (char *)_os_log_send_and_compose_impl(v30, &v41, 0, 0);

        if (v35)
          sub_100007780(v35);
      }
      else
      {
        v35 = 0;
      }
      free(v35);
    }

  }
  v43[0] = -1;
  LODWORD(v41) = -1;
  if ((sub_100059798(qword_1000E0038, &v41, v43) & 1) == 0)
    goto LABEL_67;
  result = sub_100048D34(v43[0], v41);
  if ((_DWORD)result)
  {
    result = (uint64_t)sub_1000599BC(qword_1000E0038);
    if ((result & 1) == 0)
    {
      sub_10001CF20("UserManagement user switch task failed to remove nextSession file");
      goto LABEL_69;
    }
  }
  return result;
}

uint64_t sub_100048D34(unsigned int a1, uint64_t a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  uint64_t v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  int v14;

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v4 = (id)qword_1000E0070;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 0;
    v5 = sub_100007750(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      v11 = 67109376;
      v12 = a1;
      v13 = 1024;
      v14 = a2;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if ((_DWORD)a2 == -1)
    sub_10001CF20("UserManagement user switch failed assertion: currentSessionID != -1");
  if ((_DWORD)a2 != a1)
    sub_100054D04(a2);
  return sub_100045080(a1, a2, 0, 1);
}

uint64_t sub_100048EB0(_removefile_state *a1, const char *a2, int *a3)
{
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  char *v14;
  char *v15;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  int *v20;
  char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  unsigned __int8 v31;
  uint64_t v32;
  int dst;
  _BYTE v34[12];
  __int16 v35;
  char *v36;
  stat v37;

  dst = 0;
  if (removefile_state_get(a1, 5u, &dst))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v5 = (id)qword_1000E0060;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v34 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v37.st_dev = 136315138;
        *(_QWORD *)&v37.st_mode = a2;
        v8 = (const char *)_os_log_send_and_compose_impl(v7, v34, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

    dst = 2;
    goto LABEL_24;
  }
  if (dst == 2)
    goto LABEL_24;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v10 = (id)qword_1000E0060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v34 = 0;
    LODWORD(v11) = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v11 = v11;
    else
      v11 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v12 = dst;
      v13 = v10;
      v14 = strerror(v12);
      v37.st_dev = 136315394;
      *(_QWORD *)&v37.st_mode = a2;
      WORD2(v37.st_ino) = 2080;
      *(__darwin_ino64_t *)((char *)&v37.st_ino + 6) = (__darwin_ino64_t)v14;
      v15 = (char *)_os_log_send_and_compose_impl(v11, v34, 0, 0);

      if (v15)
        sub_100007780(v15);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }

  if (dst != 1)
    goto LABEL_24;
  memset(&v37, 0, sizeof(v37));
  if (lstat(a2, &v37))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v17 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_52;
    v32 = 0;
    LODWORD(v18) = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v18;
    else
      v18 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v18)
      goto LABEL_39;
    goto LABEL_50;
  }
  if ((v37.st_flags & 2) == 0)
  {
LABEL_24:
    if (a3 && !*a3)
      *a3 = dst;
    return 0;
  }
  if (lchflags(a2, v37.st_flags & 0xFFFFFFFD))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v17 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      goto LABEL_52;
    v32 = 0;
    LODWORD(v18) = sub_100007750(1);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v18 = v18;
    else
      v18 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
LABEL_39:
      v19 = v17;
      v20 = __error();
      v21 = strerror(*v20);
      *(_DWORD *)v34 = 136315394;
      *(_QWORD *)&v34[4] = a2;
      v35 = 2080;
      v36 = v21;
      v22 = (char *)_os_log_send_and_compose_impl(v18, &v32, 0, 0);

      if (v22)
        sub_100007780(v22);
      goto LABEL_51;
    }
LABEL_50:
    v22 = 0;
LABEL_51:
    free(v22);
LABEL_52:

    goto LABEL_24;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v23 = (id)qword_1000E0060;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v32 = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      *(_DWORD *)v34 = 136315138;
      *(_QWORD *)&v34[4] = a2;
      v26 = (const char *)_os_log_send_and_compose_impl(v25, &v32, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
    }
    else
    {
      v27 = 0;
    }
    free(v27);
  }

  v28 = sub_100007EF0(qword_1000E0318);
  v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
  v31 = objc_msgSend(v29, "removeFileAtPath:error:", v30, 0);

  if ((v31 & 1) == 0)
    goto LABEL_24;
  return 0;
}

uint64_t sub_10004946C(const __CFDictionary *a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  uint64_t v26;
  void *v27;
  unsigned __int8 v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  id v37;
  char *v38;
  uint64_t v39;
  id v41;
  uint64_t v42;
  __int16 v43;
  id v44;
  uint64_t v45;

  v2 = (void *)sub_100086748(a1, kUMUserSessionUUIDKey);
  v3 = sub_100004318(a1, kMKBUserSessionIDKey);
  if (v2)
  {
    v4 = v3;
    v5 = sub_10001ACA4((uint64_t)NSUUID, v2);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    if (v6)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v7 = (id)qword_1000E0060;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v8 = sub_100007750(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          LOWORD(v45) = 0;
          v10 = (const char *)_os_log_send_and_compose_impl(v9, &v42, 0, 0);
          v11 = (char *)v10;
          if (v10)
            sub_100007780(v10);
        }
        else
        {
          v11 = 0;
        }
        free(v11);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v21 = (id)qword_1000E0060;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v22 = sub_100007750(1);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          v23 = v22;
        else
          v23 = v22 & 0xFFFFFFFE;
        if ((_DWORD)v23)
        {
          LODWORD(v45) = 67109120;
          HIDWORD(v45) = v4;
          v24 = (const char *)_os_log_send_and_compose_impl(v23, &v42, 0, 0);
          v25 = (char *)v24;
          if (v24)
            sub_100007780(v24);
        }
        else
        {
          v25 = 0;
        }
        free(v25);
      }

      v26 = sub_10001CA9C(qword_1000E0318);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);
      v41 = 0;
      v28 = objc_msgSend(v27, "loadIdentity:intoSession:error:", v6, v4, &v41);
      v16 = v41;

      if ((v28 & 1) != 0)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v29 = (id)qword_1000E0060;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v42 = 0;
          v30 = sub_100007750(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            v31 = v30;
          else
            v31 = v30 & 0xFFFFFFFE;
          if ((_DWORD)v31)
          {
            LODWORD(v45) = 67109120;
            HIDWORD(v45) = v4;
            v32 = (const char *)_os_log_send_and_compose_impl(v31, &v42, 0, 0);
            v33 = (char *)v32;
            if (v32)
              sub_100007780(v32);
          }
          else
          {
            v33 = 0;
          }
          free(v33);
        }

        v39 = 1;
        goto LABEL_74;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v34 = (id)qword_1000E0060;
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        v45 = 0;
        LODWORD(v35) = sub_100007750(1);
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          v35 = v35;
        else
          v35 = v35 & 0xFFFFFFFE;
        if ((_DWORD)v35)
        {
          v36 = v34;
          v37 = -[NSObject code](v16, "code");
          LODWORD(v42) = 67109376;
          HIDWORD(v42) = v4;
          v43 = 2048;
          v44 = v37;
          v38 = (char *)_os_log_send_and_compose_impl(v35, &v45, 0, 0);

          if (v38)
            sub_100007780(v38);
        }
        else
        {
          v38 = 0;
        }
        free(v38);
      }

    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v16 = (id)qword_1000E0060;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v18)
        {
          LOWORD(v45) = 0;
          v19 = (const char *)_os_log_send_and_compose_impl(v18, &v42, 0, 0);
          v20 = (char *)v19;
          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v20 = 0;
        }
        free(v20);
      }
    }
    v39 = 0;
LABEL_74:

    goto LABEL_75;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v42 = 0;
    v12 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = v12 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      LOWORD(v45) = 0;
      v14 = (const char *)_os_log_send_and_compose_impl(v13, &v42, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }
  v39 = 0;
LABEL_75:

  return v39;
}

id sub_100049A70(const __CFDictionary *a1)
{
  uint64_t v1;
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  id v17;
  id v19;
  uint64_t v20;
  __int16 v21;
  id v22;
  uint64_t v23;

  v1 = sub_100004318(a1, kMKBUserSessionIDKey);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LODWORD(v23) = 67109120;
      HIDWORD(v23) = v1;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = sub_10001CA9C(qword_1000E0318);
  v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
  v19 = 0;
  v9 = objc_msgSend(v8, "unloadIdentityFromSession:error:", v1, &v19);
  v10 = v19;

  if ((v9 & 1) != 0)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LODWORD(v23) = 67109120;
        HIDWORD(v23) = v1;
        v14 = (void *)_os_log_send_and_compose_impl(v13, &v20, 0, 0);
        if (!v14)
          goto LABEL_32;
        goto LABEL_30;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v11 = (id)qword_1000E0060;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 0;
      LODWORD(v15) = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v15 = v15;
      else
        v15 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v16 = v11;
        v17 = objc_msgSend(v10, "code");
        LODWORD(v20) = 67109376;
        HIDWORD(v20) = v1;
        v21 = 2048;
        v22 = v17;
        v14 = (void *)_os_log_send_and_compose_impl(v15, &v23, 0, 0);

        if (!v14)
        {
LABEL_32:
          free(v14);
          goto LABEL_33;
        }
LABEL_30:
        sub_100007780((const char *)v14);
        goto LABEL_32;
      }
LABEL_31:
      v14 = 0;
      goto LABEL_32;
    }
  }
LABEL_33:

  return v9;
}

CFArrayRef sub_100049DB0(void *a1)
{
  id v1;
  void *v2;
  const void *v3;
  id v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  const __CFArray *v7;
  CFArrayRef Copy;

  v1 = sub_1000042B4(qword_1000E0040, a1);
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_10005D2A8((id)qword_1000E0040, 0, v2);
  v5 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v4);
  if (v5)
  {
    v6 = v5;
    if (CFDictionaryContainsKey(v5, off_1000DF2F8) && (v7 = (const __CFArray *)sub_1000865F0(v6, off_1000DF2F8)) != 0)
      Copy = CFArrayCreateCopy(kCFAllocatorDefault, v7);
    else
      Copy = 0;
    CFRelease(v6);
  }
  else
  {
    Copy = 0;
  }
  CFRelease(v3);
  return Copy;
}

uint64_t sub_100049E6C(uint64_t a1, void *a2, void *a3, int a4, unsigned int *a5)
{
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  uint64_t v22;

  v9 = a3;
  v10 = sub_1000042B4(qword_1000E0040, v9);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (v11)
  {
    v12 = (void *)v11;
    v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a1));
    objc_msgSend(v13, "setObject:forKeyedSubscript:", v9, kUMUserPersonaUserODUUIDKey);
    v14 = sub_10005F610((id *)qword_1000E0040, v12, v13, a2, a4, 0, a5);
    v15 = objc_claimAutoreleasedReturnValue(v14);

    CFRelease(v12);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v16 = (id)qword_1000E0060;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v22 = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        v19 = (const char *)_os_log_send_and_compose_impl(v18, &v22, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

    v15 = 0;
    if (a5)
      *a5 = 2;
  }

  return v15;
}

uint64_t sub_10004A020(const __CFDictionary *a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  id v7;
  const __CFDictionary *v8;
  void *v9;
  unsigned int v10;
  id v11;
  const __CFDictionary *v12;
  uint64_t v13;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;

  v3 = sub_1000042B4(qword_1000E0040, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (!v4)
    goto LABEL_8;
  if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
  {
    v5 = qword_1000E0040;
    v6 = (void *)sub_100086748(a1, kUMUserPersonaUniqueStringKey);
    v7 = sub_100007154(v5, v6, v4);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v7);
  }
  else
  {
    if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey))
      goto LABEL_8;
    v9 = (void *)qword_1000E0040;
    v10 = sub_100004318(a1, kUMUserPersonaTypeKey);
    v11 = sub_10005D2A8(v9, v10, v4);
    v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v11);
  }
  v12 = v8;
  if (v8)
  {
    v13 = sub_10004A1EC(v4, v8, 0);
    CFRelease(v4);
    CFRelease(v12);
    return v13;
  }
LABEL_8:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v15 = (id)qword_1000E0060;
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v16 = sub_100007750(1);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      v18 = (const char *)_os_log_send_and_compose_impl(v17, &v20, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    free(v19);
  }

  if (v4)
    CFRelease(v4);
  return 22;
}

uint64_t sub_10004A1EC(void *a1, const __CFDictionary *a2, int a3)
{
  NSObject *v6;
  unsigned int v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  const void *v11;
  uint64_t v12;
  const void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  void *v20;
  char v21;
  NSObject *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  void *i;
  id v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  id v52;
  NSObject *v53;
  uint64_t v54;
  void *v55;
  unsigned int v56;
  NSObject *v57;
  NSObject *v58;
  unsigned int v59;
  uint64_t v60;
  NSObject *v61;
  unsigned int v62;
  uint64_t v63;
  const char *v64;
  char *v65;
  unsigned int v66;
  const char *v67;
  char *v68;
  unsigned int v69;
  uint64_t v70;
  const char *v71;
  char *v72;
  NSObject *v73;
  unsigned int v74;
  NSObject *v75;
  uint64_t v76;
  char *v77;
  NSObject *v78;
  unsigned int v79;
  NSObject *v80;
  uint64_t v81;
  char *v82;
  NSObject *v83;
  unsigned int v84;
  NSObject *v85;
  uint64_t v86;
  char *v87;
  NSObject *v88;
  unsigned int v89;
  NSObject *v90;
  uint64_t v91;
  char *v92;
  NSObject *v93;
  unsigned int v94;
  NSObject *v95;
  uint64_t v96;
  char *v97;
  NSObject *v98;
  unsigned int v99;
  uint64_t v100;
  unsigned int v101;
  char *v102;
  NSObject *v103;
  unsigned int v104;
  NSObject *v105;
  uint64_t v106;
  char *v107;
  NSObject *v108;
  unsigned int v109;
  NSObject *v110;
  uint64_t v111;
  char *v112;
  NSObject *v113;
  unsigned int v114;
  NSObject *v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  void *v119;
  const void *v120;
  unsigned int v121;
  int v122;
  const void *v123;
  uint64_t v124;
  void *v125;
  unsigned int v126;
  NSObject *v127;
  const __CFDictionary *v128;
  NSObject *v129;
  unsigned int v130;
  uint64_t v131;
  _BYTE *v132;
  unsigned int v133;
  char *v134;
  void *v135;
  id v136;
  void *v137;
  uint64_t v138;
  void *v139;
  unsigned int v140;
  NSObject *v141;
  unsigned int v142;
  uint64_t v143;
  char *v144;
  unsigned int v145;
  uint64_t v146;
  char *v147;
  NSObject *v148;
  unsigned int v149;
  uint64_t v150;
  unsigned int v151;
  char *v152;
  NSObject *v153;
  unsigned int v154;
  NSObject *v155;
  uint64_t v156;
  char *v157;
  NSObject *v158;
  unsigned int v159;
  uint64_t v160;
  NSObject *v161;
  unsigned int v162;
  NSObject *v163;
  uint64_t v164;
  char *v165;
  unsigned int v166;
  char *v167;
  __CFDictionary *v168;
  const void *Value;
  NSObject *v170;
  int v171;
  unsigned int v172;
  NSObject *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  void *v177;
  unsigned int v178;
  NSObject *v179;
  unsigned int v180;
  uint64_t v181;
  unsigned int v182;
  char *v183;
  NSObject *v184;
  unsigned int v185;
  uint64_t v186;
  _BYTE *v187;
  unsigned int v188;
  char *v189;
  uint64_t v190;
  void *v191;
  char *v193;
  uint64_t v194;
  int v195;
  const void *v196;
  int v197;
  void *v198;
  void *v199;
  CFDictionaryRef theDict;
  NSObject *v201;
  NSObject *v202;
  id v203;
  uint64_t v204;
  NSObject *v205;
  id v206;
  char in[32];
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  uuid_t uu;
  _OWORD v223[4];
  _BYTE v224[12];
  __int16 v225;
  _BYTE v226[14];

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  memset(uu, 0, sizeof(uu));
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v223[0] = 0;
    v7 = sub_100007750(1);
    v8 = v6;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v9 = v7;
    else
      v9 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      *(_DWORD *)in = 138412290;
      *(_QWORD *)&in[4] = a2;
      LODWORD(v194) = 12;
      v193 = in;
      v10 = (char *)_os_log_send_and_compose_impl(v9, v223, 0, 0);

      if (v10)
        sub_100007780(v10);
    }
    else
    {

      v10 = 0;
    }
    free(v10);
  }

  v11 = (const void *)(int)sub_100004318(a2, kUMUserPersonaTypeKey);
  v12 = sub_100004318(a2, kUMUserPersonaIDKey);
  v13 = sub_100086748(a2, kUMUserPersonaUniqueStringKey);
  if ((a3 & 1) == 0 && (v11 | 4) != 6)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v14 = (id)qword_1000E0060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v27 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        *(_DWORD *)in = 134217984;
        *(_QWORD *)&in[4] = v11;
        v29 = (const char *)_os_log_send_and_compose_impl(v28, v223, 0, 0);
        v30 = (char *)v29;
        if (v29)
          sub_100007780(v29);
      }
      else
      {
        v30 = 0;
      }
      free(v30);
    }
    v34 = 1;
    goto LABEL_427;
  }
  if ((_DWORD)v12 == -1 && (_DWORD)v11 != 4)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v14 = (id)qword_1000E0060;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        *(_DWORD *)in = 138412290;
        *(_QWORD *)&in[4] = v13;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v223, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }
    v34 = 22;
    goto LABEL_427;
  }
  if (!sub_1000866F8(a2, kUMUserPersonaDisabledKey))
    CFDictionarySetValue(a2, kUMUserPersonaDisabledKey, kCFBooleanTrue);
  CFDictionarySetValue(a2, off_1000DF300, kCFBooleanTrue);
  v19 = sub_10001C730(qword_1000E0040);
  v20 = (void *)objc_claimAutoreleasedReturnValue(v19);
  sub_10005A9A8((uint64_t)v20);

  sub_10005F5C8(qword_1000E0040);
  theDict = a2;
  if ((_DWORD)v11 != 4)
  {
    if (sub_10006474C(qword_1000E0040, v12))
    {
      v203 = 0;
      v21 = sub_1000630EC(qword_1000E0040, a2, &v203);
      v22 = v203;
      v14 = v22;
      if ((v21 & 1) == 0)
      {
        v34 = (uint64_t)-[NSObject code](v22, "code");
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v35 = (id)qword_1000E0060;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v223[0] = 0;
          LODWORD(v36) = sub_100007750(1);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            v36 = v36;
          else
            v36 = v36 & 0xFFFFFFFE;
          if ((_DWORD)v36)
          {
            v37 = v35;
            v38 = strerror(v34);
            *(_DWORD *)in = 67109378;
            *(_DWORD *)&in[4] = v12;
            *(_WORD *)&in[8] = 2080;
            *(_QWORD *)&in[10] = v38;
            v39 = (char *)_os_log_send_and_compose_impl(v36, v223, 0, 0);

            if (v39)
              sub_100007780(v39);
          }
          else
          {
            v39 = 0;
          }
          free(v39);
        }

        goto LABEL_427;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v23 = (id)qword_1000E0060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)in = 0;
        v24 = sub_100007750(1);
        v23 = v23;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if ((_DWORD)v25)
        {
          LODWORD(v223[0]) = 67109120;
          DWORD1(v223[0]) = v12;
          LODWORD(v194) = 8;
          v193 = (char *)v223;
          v26 = (char *)_os_log_send_and_compose_impl(v25, in, 0, 0);

          if (v26)
            sub_100007780(v26);
        }
        else
        {

          v26 = 0;
        }
        free(v26);
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v23 = (id)qword_1000E0060;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)in = 0;
        v31 = sub_100007750(1);
        v23 = v23;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          v32 = v31;
        else
          v32 = v31 & 0xFFFFFFFE;
        if ((_DWORD)v32)
        {
          LODWORD(v223[0]) = 67109120;
          DWORD1(v223[0]) = v12;
          LODWORD(v194) = 8;
          v193 = (char *)v223;
          v33 = (char *)_os_log_send_and_compose_impl(v32, in, 0, 0);

          if (v33)
            sub_100007780(v33);
        }
        else
        {

          v33 = 0;
        }
        free(v33);
      }
      v14 = 0;
    }

    if ((a3 & 1) != 0)
      goto LABEL_82;
    goto LABEL_80;
  }
  v14 = 0;
  if ((a3 & 1) == 0)
  {
LABEL_80:
    if (v13)
    {
      v40 = sub_10001BFB4(qword_1000E0318);
      v41 = (void *)objc_claimAutoreleasedReturnValue(v40);
      objc_msgSend(v41, "deleteKeychainItemsForPersonaWithUUID:error:", v13, 0);

    }
  }
LABEL_82:
  if (!a3)
    goto LABEL_149;
  v195 = (int)v11;
  v196 = v13;
  v197 = v12;
  v198 = a1;
  memset(v223, 0, sizeof(v223));
  v42 = objc_msgSend(&off_1000D5378, "countByEnumeratingWithState:objects:count:", v223, in, 16);
  if (!v42)
    goto LABEL_137;
  v43 = v42;
  v44 = **(_QWORD **)&v223[1];
  do
  {
    for (i = 0; i != v43; i = (char *)i + 1)
    {
      if (**(_QWORD **)&v223[1] != v44)
        objc_enumerationMutation(&off_1000D5378);
      v46 = *(id *)(*((_QWORD *)&v223[0] + 1) + 8 * (_QWORD)i);
      v47 = sub_100007ED8(qword_1000E0318);
      v48 = (void *)objc_claimAutoreleasedReturnValue(v47);
      v49 = sub_10001BE1C(qword_1000E0318);
      v50 = (void *)objc_claimAutoreleasedReturnValue(v49);
      v51 = sub_10001CAE4((uint64_t)v50);
      v206 = 0;
      v52 = objc_msgSend(v48, "pidForLaunchdJobWithLabel:forUser:error:", v46, v51, &v206);
      v53 = v206;

      if ((_DWORD)v52)
      {
        v54 = sub_100007ED8(qword_1000E0318);
        v55 = (void *)objc_claimAutoreleasedReturnValue(v54);
        v205 = v53;
        v56 = objc_msgSend(v55, "terminatePID:withReasonNamespace:reasonCode:reasonString:error:", v52, 2, 0, CFSTR("PersonaTermination"), &v205);
        v57 = v205;

        if (v56)
        {
          if (qword_1000E0088 != -1)
            dispatch_once(&qword_1000E0088, &stru_1000D1590);
          v58 = (id)qword_1000E0080;
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            goto LABEL_129;
          v204 = 0;
          v59 = sub_100007750(0);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_INFO))
            v60 = v59;
          else
            v60 = v59 & 0xFFFFFFFE;
          if ((_DWORD)v60)
          {
            *(_DWORD *)v224 = 138543618;
            *(_QWORD *)&v224[4] = v46;
            v225 = 1024;
            *(_DWORD *)v226 = (_DWORD)v52;
            LODWORD(v194) = 18;
            v193 = v224;
LABEL_116:
            v67 = (const char *)_os_log_send_and_compose_impl(v60, &v204, 0, 0);
            v68 = (char *)v67;
            if (v67)
              sub_100007780(v67);
LABEL_128:
            free(v68);
LABEL_129:

            v53 = v57;
            goto LABEL_135;
          }
        }
        else
        {
          if (qword_1000E0088 != -1)
            dispatch_once(&qword_1000E0088, &stru_1000D1590);
          v58 = (id)qword_1000E0080;
          if (!os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            goto LABEL_129;
          v204 = 0;
          v66 = sub_100007750(0);
          if (os_log_type_enabled(v58, OS_LOG_TYPE_ERROR))
            v60 = v66;
          else
            v60 = v66 & 0xFFFFFFFE;
          if ((_DWORD)v60)
          {
            *(_DWORD *)v224 = 138543874;
            *(_QWORD *)&v224[4] = v46;
            v225 = 1024;
            *(_DWORD *)v226 = (_DWORD)v52;
            *(_WORD *)&v226[4] = 2114;
            *(_QWORD *)&v226[6] = v57;
            LODWORD(v194) = 28;
            v193 = v224;
            goto LABEL_116;
          }
        }
        v68 = 0;
        goto LABEL_128;
      }
      if (v53)
      {
        if (qword_1000E0088 != -1)
          dispatch_once(&qword_1000E0088, &stru_1000D1590);
        v61 = (id)qword_1000E0080;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          v205 = 0;
          v62 = sub_100007750(0);
          if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
            v63 = v62;
          else
            v63 = v62 & 0xFFFFFFFE;
          if ((_DWORD)v63)
          {
            *(_DWORD *)v224 = 138543618;
            *(_QWORD *)&v224[4] = v46;
            v225 = 2114;
            *(_QWORD *)v226 = v53;
            LODWORD(v194) = 22;
            v193 = v224;
            v64 = (const char *)_os_log_send_and_compose_impl(v63, &v205, 0, 0);
            v65 = (char *)v64;
            if (v64)
              sub_100007780(v64);
          }
          else
          {
            v65 = 0;
          }
          free(v65);
        }

      }
      else
      {
        if (qword_1000E0088 != -1)
          dispatch_once(&qword_1000E0088, &stru_1000D1590);
        v53 = (id)qword_1000E0080;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
        {
          v205 = 0;
          v69 = sub_100007750(0);
          if (os_log_type_enabled(v53, OS_LOG_TYPE_INFO))
            v70 = v69;
          else
            v70 = v69 & 0xFFFFFFFE;
          if ((_DWORD)v70)
          {
            *(_DWORD *)v224 = 138543362;
            *(_QWORD *)&v224[4] = v46;
            LODWORD(v194) = 12;
            v193 = v224;
            v71 = (const char *)_os_log_send_and_compose_impl(v70, &v205, 0, 0);
            v72 = (char *)v71;
            if (v71)
              sub_100007780(v71);
          }
          else
          {
            v72 = 0;
          }
          free(v72);
        }
      }
LABEL_135:

    }
    v43 = objc_msgSend(&off_1000D5378, "countByEnumeratingWithState:objects:count:", v223, in, 16);
  }
  while (v43);
LABEL_137:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = v196;
  LODWORD(v11) = v195;
  v73 = (id)qword_1000E0060;
  a1 = v198;
  LODWORD(v12) = v197;
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)in = 0;
    v74 = sub_100007750(1);
    v75 = v73;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      v76 = v74;
    else
      v76 = v74 & 0xFFFFFFFE;
    if ((_DWORD)v76)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      v77 = (char *)_os_log_send_and_compose_impl(v76, in, 0, 0);

      if (v77)
        sub_100007780(v77);
    }
    else
    {

      v77 = 0;
    }
    free(v77);
  }

LABEL_149:
  if ((v11 | 4) != 6)
    goto LABEL_405;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v78 = (id)qword_1000E0060;
  if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)in = 0;
    v79 = sub_100007750(1);
    v80 = v78;
    if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
      v81 = v79;
    else
      v81 = v79 & 0xFFFFFFFE;
    if ((_DWORD)v81)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      v82 = (char *)_os_log_send_and_compose_impl(v81, in, 0, 0);

      if (v82)
        sub_100007780(v82);
    }
    else
    {

      v82 = 0;
    }
    free(v82);
  }

  if (!objc_msgSend((id)qword_1000E0030, "isVolumeMountedWithSession:fsid:", theDict, 0))
    goto LABEL_217;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v83 = (id)qword_1000E0060;
  if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)in = 0;
    v84 = sub_100007750(1);
    v85 = v83;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEFAULT))
      v86 = v84;
    else
      v86 = v84 & 0xFFFFFFFE;
    if ((_DWORD)v86)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      v87 = (char *)_os_log_send_and_compose_impl(v86, in, 0, 0);

      if (v87)
        sub_100007780(v87);
    }
    else
    {

      v87 = 0;
    }
    free(v87);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v88 = (id)qword_1000E0060;
  if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)in = 0;
    v89 = sub_100007750(1);
    v90 = v88;
    if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
      v91 = v89;
    else
      v91 = v89 & 0xFFFFFFFE;
    if ((_DWORD)v91)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      v92 = (char *)_os_log_send_and_compose_impl(v91, in, 0, 0);

      if (v92)
        sub_100007780(v92);
    }
    else
    {

      v92 = 0;
    }
    free(v92);
  }

  sub_100067A50(qword_1000E0040, theDict);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v93 = (id)qword_1000E0060;
  if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)in = 0;
    v94 = sub_100007750(1);
    v95 = v93;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
      v96 = v94;
    else
      v96 = v94 & 0xFFFFFFFE;
    if ((_DWORD)v96)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      v97 = (char *)_os_log_send_and_compose_impl(v96, in, 0, 0);

      if (v97)
        sub_100007780(v97);
    }
    else
    {

      v97 = 0;
    }
    free(v97);
  }

  if (!objc_msgSend((id)qword_1000E0030, "unmountVolumeWithSession:mountPath:error:", theDict, 0, 0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v98 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      goto LABEL_216;
    *(_QWORD *)in = 0;
    v101 = sub_100007750(1);
    v98 = v98;
    if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
      v100 = v101;
    else
      v100 = v101 & 0xFFFFFFFE;
    if ((_DWORD)v100)
    {
      LOWORD(v223[0]) = 0;
      LODWORD(v194) = 2;
      v193 = (char *)v223;
      goto LABEL_212;
    }
LABEL_214:

    v102 = 0;
    goto LABEL_215;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v98 = (id)qword_1000E0060;
  if (!os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
    goto LABEL_216;
  *(_QWORD *)in = 0;
  v99 = sub_100007750(1);
  v98 = v98;
  if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
    v100 = v99;
  else
    v100 = v99 & 0xFFFFFFFE;
  if (!(_DWORD)v100)
    goto LABEL_214;
  LOWORD(v223[0]) = 0;
  LODWORD(v194) = 2;
  v193 = (char *)v223;
LABEL_212:
  v102 = (char *)_os_log_send_and_compose_impl(v100, in, 0, 0);

  if (v102)
    sub_100007780(v102);
LABEL_215:
  free(v102);
LABEL_216:

LABEL_217:
  v220 = 0u;
  v221 = 0u;
  v218 = 0u;
  v219 = 0u;
  v216 = 0u;
  v217 = 0u;
  v214 = 0u;
  v215 = 0u;
  v212 = 0u;
  v213 = 0u;
  v210 = 0u;
  v211 = 0u;
  v208 = 0u;
  v209 = 0u;
  memset(in, 0, sizeof(in));
  if (!sub_100086788(theDict, kUMUserPersonaUniqueStringKey, in, 256))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v103 = (id)qword_1000E0060;
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v104 = sub_100007750(1);
      v105 = v103;
      if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
        v106 = v104;
      else
        v106 = v104 & 0xFFFFFFFE;
      if ((_DWORD)v106)
      {
        *(_WORD *)v224 = 0;
        LODWORD(v194) = 2;
        v193 = v224;
        v107 = (char *)_os_log_send_and_compose_impl(v106, v223, 0, 0);

        if (v107)
          sub_100007780(v107);
      }
      else
      {

        v107 = 0;
      }
      free(v107);
    }

  }
  if (uuid_parse(in, uu))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v108 = (id)qword_1000E0060;
    if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v109 = sub_100007750(1);
      v110 = v108;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
        v111 = v109;
      else
        v111 = v109 & 0xFFFFFFFE;
      if ((_DWORD)v111)
      {
        *(_WORD *)v224 = 0;
        LODWORD(v194) = 2;
        v193 = v224;
        v112 = (char *)_os_log_send_and_compose_impl(v111, v223, 0, 0);

        if (v112)
          sub_100007780(v112);
      }
      else
      {

        v112 = 0;
      }
      free(v112);
    }

  }
  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled", v193, v194))
  {
    v118 = sub_10001C730(qword_1000E0318);
    v119 = (void *)objc_claimAutoreleasedReturnValue(v118);
    v120 = sub_100086748(theDict, kUMUserPersonaUniqueStringKey);
    v121 = objc_msgSend(v119, "removePersonaKeyForUser:personaUUID:volumeUUID:", 0, v120, CFDictionaryGetValue(theDict, CFSTR("MKBUserSessionVolumeUUID")));
    goto LABEL_304;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v113 = (id)qword_1000E0060;
  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v223[0] = 0;
    v114 = sub_100007750(1);
    v115 = v113;
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
      v116 = v114;
    else
      v116 = v114 & 0xFFFFFFFE;
    if ((_DWORD)v116)
    {
      *(_WORD *)v224 = 0;
      v117 = (char *)_os_log_send_and_compose_impl(v116, v223, 0, 0);

      if (v117)
        sub_100007780(v117);
    }
    else
    {

      v117 = 0;
    }
    free(v117);
  }
  v199 = a1;
  v122 = (int)v11;
  v11 = v13;

  v123 = sub_100086748(theDict, kUMUserSessionVolumeDeviceNodeKey);
  v119 = (void *)objc_claimAutoreleasedReturnValue(v123);
  v124 = sub_10001CA9C(qword_1000E0318);
  v125 = (void *)objc_claimAutoreleasedReturnValue(v124);
  v202 = v14;
  v126 = objc_msgSend(v125, "unmapVolume:error:", v119, &v202);
  v127 = v202;

  if (!v126)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v128 = theDict;
    v129 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
      goto LABEL_277;
    *(_QWORD *)v224 = 0;
    v133 = sub_100007750(1);
    v129 = v129;
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
      v131 = v133;
    else
      v131 = v133 & 0xFFFFFFFE;
    if ((_DWORD)v131)
    {
      LODWORD(v223[0]) = 138412290;
      *(_QWORD *)((char *)v223 + 4) = v127;
      v132 = v224;
      goto LABEL_273;
    }
LABEL_275:

    v134 = 0;
    goto LABEL_276;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v128 = theDict;
  v129 = (id)qword_1000E0060;
  if (!os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    goto LABEL_277;
  *(_QWORD *)&v223[0] = 0;
  v130 = sub_100007750(1);
  v129 = v129;
  if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    v131 = v130;
  else
    v131 = v130 & 0xFFFFFFFE;
  if (!(_DWORD)v131)
    goto LABEL_275;
  *(_QWORD *)v224 = 67109120;
  v132 = v223;
LABEL_273:
  v134 = (char *)_os_log_send_and_compose_impl(v131, v132, 0, 0);

  if (v134)
    sub_100007780(v134);
LABEL_276:
  free(v134);
LABEL_277:

  v135 = (void *)sub_100086748(v128, kUMUserPersonaUniqueStringKey);
  v136 = sub_10001ACA4((uint64_t)NSUUID, v135);
  v137 = (void *)objc_claimAutoreleasedReturnValue(v136);
  v138 = sub_10001CA9C(qword_1000E0318);
  v139 = (void *)objc_claimAutoreleasedReturnValue(v138);
  v201 = v127;
  v140 = objc_msgSend(v139, "deletePersonaWithUUID:fromSession:error:", v137, 0, &v201);
  v14 = v201;

  if (v140)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v13 = v11;
    v141 = (id)qword_1000E0060;
    LODWORD(v11) = v122;
    if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v142 = sub_100007750(1);
      v141 = v141;
      if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
        v143 = v142;
      else
        v143 = v142 & 0xFFFFFFFE;
      a1 = v199;
      if ((_DWORD)v143)
      {
        *(_WORD *)v224 = 0;
        v144 = (char *)_os_log_send_and_compose_impl(v143, v223, 0, 0);

        if (v144)
          sub_100007780(v144);
      }
      else
      {

        v144 = 0;
      }
      free(v144);
      v121 = 0;
      goto LABEL_303;
    }
    v121 = 0;
LABEL_298:
    a1 = v199;
    goto LABEL_303;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = v11;
  v141 = (id)qword_1000E0060;
  LODWORD(v11) = v122;
  if (!os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
  {
    v121 = 5;
    goto LABEL_298;
  }
  *(_QWORD *)v224 = 0;
  v145 = sub_100007750(1);
  v141 = v141;
  if (os_log_type_enabled(v141, OS_LOG_TYPE_DEFAULT))
    v146 = v145;
  else
    v146 = v145 & 0xFFFFFFFE;
  if ((_DWORD)v146)
  {
    *(_QWORD *)&v223[0] = 67109378;
    WORD4(v223[0]) = 2112;
    *(_QWORD *)((char *)v223 + 10) = v14;
    v147 = (char *)_os_log_send_and_compose_impl(v146, v224, 0, 0);

    if (v147)
      sub_100007780(v147);
  }
  else
  {

    v147 = 0;
  }
  a1 = v199;
  free(v147);
  v121 = 5;
LABEL_303:

LABEL_304:
  if (!v121)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v148 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      goto LABEL_325;
    *(_QWORD *)&v223[0] = 0;
    v151 = sub_100007750(1);
    v148 = v148;
    if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
      v150 = v151;
    else
      v150 = v151 & 0xFFFFFFFE;
    if ((_DWORD)v150)
    {
      *(_WORD *)v224 = 0;
      goto LABEL_321;
    }
LABEL_323:

    v152 = 0;
    goto LABEL_324;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v148 = (id)qword_1000E0060;
  if (!os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
    goto LABEL_325;
  *(_QWORD *)&v223[0] = 0;
  v149 = sub_100007750(1);
  v148 = v148;
  if (os_log_type_enabled(v148, OS_LOG_TYPE_DEFAULT))
    v150 = v149;
  else
    v150 = v149 & 0xFFFFFFFE;
  if (!(_DWORD)v150)
    goto LABEL_323;
  *(_DWORD *)v224 = 67109120;
  *(_DWORD *)&v224[4] = v121;
LABEL_321:
  v152 = (char *)_os_log_send_and_compose_impl(v150, v223, 0, 0);

  if (v152)
    sub_100007780(v152);
LABEL_324:
  free(v152);
LABEL_325:

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v153 = (id)qword_1000E0060;
  if (os_log_type_enabled(v153, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v223[0] = 0;
    v154 = sub_100007750(1);
    v155 = v153;
    if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
      v156 = v154;
    else
      v156 = v154 & 0xFFFFFFFE;
    if ((_DWORD)v156)
    {
      *(_WORD *)v224 = 0;
      v157 = (char *)_os_log_send_and_compose_impl(v156, v223, 0, 0);

      if (v157)
        sub_100007780(v157);
    }
    else
    {

      v157 = 0;
    }
    free(v157);
  }

  if (!CFDictionaryContainsKey(theDict, kUMUserSessionVolumeDeviceNodeKey))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v161 = (id)qword_1000E0060;
    if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v223[0] = 0;
      v162 = sub_100007750(1);
      v163 = v161;
      if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
        v164 = v162;
      else
        v164 = v162 & 0xFFFFFFFE;
      if ((_DWORD)v164)
      {
        *(_WORD *)v224 = 0;
        v165 = (char *)_os_log_send_and_compose_impl(v164, v223, 0, 0);

        if (v165)
          sub_100007780(v165);
      }
      else
      {

        v165 = 0;
      }
      free(v165);
    }

    goto LABEL_405;
  }
  if (!objc_msgSend((id)qword_1000E0030, "deleteVolumeWithSession:error:", theDict, 0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v158 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
      goto LABEL_367;
    *(_QWORD *)&v223[0] = 0;
    v166 = sub_100007750(1);
    v158 = v158;
    if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
      v160 = v166;
    else
      v160 = v166 & 0xFFFFFFFE;
    if ((_DWORD)v160)
    {
      *(_WORD *)v224 = 0;
      goto LABEL_363;
    }
LABEL_365:

    v167 = 0;
    goto LABEL_366;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v158 = (id)qword_1000E0060;
  if (!os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    goto LABEL_367;
  *(_QWORD *)&v223[0] = 0;
  v159 = sub_100007750(1);
  v158 = v158;
  if (os_log_type_enabled(v158, OS_LOG_TYPE_DEFAULT))
    v160 = v159;
  else
    v160 = v159 & 0xFFFFFFFE;
  if (!(_DWORD)v160)
    goto LABEL_365;
  *(_WORD *)v224 = 0;
LABEL_363:
  v167 = (char *)_os_log_send_and_compose_impl(v160, v223, 0, 0);

  if (v167)
    sub_100007780(v167);
LABEL_366:
  free(v167);
LABEL_367:

  v168 = theDict;
  if (!CFDictionaryContainsKey(theDict, kUMUserSessionHomeDirKey))
    goto LABEL_401;
  Value = CFDictionaryGetValue(theDict, kUMUserSessionHomeDirKey);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v170 = (id)qword_1000E0060;
  if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
  {
    v171 = (int)v11;
    v11 = v13;
    *(_QWORD *)v224 = 0;
    v172 = sub_100007750(1);
    v173 = v170;
    if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
      v174 = v172;
    else
      v174 = v172 & 0xFFFFFFFE;
    if ((_DWORD)v174)
    {
      LODWORD(v223[0]) = 138412290;
      *(_QWORD *)((char *)v223 + 4) = Value;
      v175 = (char *)_os_log_send_and_compose_impl(v174, v224, 0, 0);

      if (v175)
        sub_100007780(v175);
    }
    else
    {

      v175 = 0;
    }
    free(v175);
    v13 = v11;
    LODWORD(v11) = v171;
  }

  v176 = sub_100007EF0(qword_1000E0318);
  v177 = (void *)objc_claimAutoreleasedReturnValue(v176);
  v178 = objc_msgSend(v177, "removePath:error:", Value, 0);

  if (!v178)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v179 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
      goto LABEL_400;
    *(_QWORD *)&v223[0] = 0;
    v182 = sub_100007750(1);
    v179 = v179;
    if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
      v181 = v182;
    else
      v181 = v182 & 0xFFFFFFFE;
    if ((_DWORD)v181)
    {
      *(_WORD *)v224 = 0;
      goto LABEL_396;
    }
LABEL_398:

    v183 = 0;
    goto LABEL_399;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v179 = (id)qword_1000E0060;
  if (!os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
    goto LABEL_400;
  *(_QWORD *)&v223[0] = 0;
  v180 = sub_100007750(1);
  v179 = v179;
  if (os_log_type_enabled(v179, OS_LOG_TYPE_DEFAULT))
    v181 = v180;
  else
    v181 = v180 & 0xFFFFFFFE;
  if (!(_DWORD)v181)
    goto LABEL_398;
  *(_WORD *)v224 = 0;
LABEL_396:
  v183 = (char *)_os_log_send_and_compose_impl(v181, v223, 0, 0);

  if (v183)
    sub_100007780(v183);
LABEL_399:
  free(v183);
LABEL_400:

  v168 = theDict;
LABEL_401:
  CFDictionaryRemoveValue(v168, kUMUserSessionVolumeDeviceNodeKey);
  sub_10005F5C8(qword_1000E0040);
LABEL_405:
  if ((_DWORD)v11 == 4)
  {
    sub_10005D988(qword_1000E0040, 4, a1);
    if (qword_1000E0088 != -1)
      dispatch_once(&qword_1000E0088, &stru_1000D1590);
    v184 = (id)qword_1000E0080;
    if (!os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      goto LABEL_426;
    *(_QWORD *)&v223[0] = 0;
    v188 = sub_100007750(1);
    v184 = v184;
    if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
      v186 = v188;
    else
      v186 = v188 & 0xFFFFFFFE;
    if ((_DWORD)v186)
    {
      *(_WORD *)v224 = 0;
      v187 = v223;
      goto LABEL_422;
    }
LABEL_424:

    v189 = 0;
    goto LABEL_425;
  }
  sub_10005D7E4(qword_1000E0040, v12, a1);
  if (qword_1000E0088 != -1)
    dispatch_once(&qword_1000E0088, &stru_1000D1590);
  v184 = (id)qword_1000E0080;
  if (!os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
    goto LABEL_426;
  *(_QWORD *)v224 = 0;
  v185 = sub_100007750(1);
  v184 = v184;
  if (os_log_type_enabled(v184, OS_LOG_TYPE_DEFAULT))
    v186 = v185;
  else
    v186 = v185 & 0xFFFFFFFE;
  if (!(_DWORD)v186)
    goto LABEL_424;
  LODWORD(v223[0]) = 138412546;
  *(_QWORD *)((char *)v223 + 4) = v13;
  WORD6(v223[0]) = 1024;
  *(_DWORD *)((char *)v223 + 14) = v12;
  v187 = v224;
LABEL_422:
  v189 = (char *)_os_log_send_and_compose_impl(v186, v187, 0, 0);

  if (v189)
    sub_100007780(v189);
LABEL_425:
  free(v189);
LABEL_426:

  v190 = sub_10001C730(qword_1000E0040);
  v191 = (void *)objc_claimAutoreleasedReturnValue(v190);
  sub_10005A9A8((uint64_t)v191);

  sub_10005F5C8(qword_1000E0040);
  v34 = 0;
LABEL_427:

  return v34;
}

uint64_t sub_10004C56C(const __CFDictionary *a1, void *a2)
{
  id v3;
  __CFDictionary *v4;
  uint64_t v5;
  void *v6;
  id v7;
  const __CFDictionary *v8;
  void *v9;
  unsigned int v10;
  id v11;
  __CFDictionary *v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  int v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  uint64_t v42;
  int v43;
  int v44;

  v3 = sub_1000042B4(qword_1000E0040, a2);
  v4 = (__CFDictionary *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
    {
      v5 = qword_1000E0040;
      v6 = (void *)sub_100086748(a1, kUMUserPersonaUniqueStringKey);
      v7 = sub_100007154(v5, v6, v4);
      v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v7);
    }
    else
    {
      if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey))
        goto LABEL_17;
      v9 = (void *)qword_1000E0040;
      v10 = sub_100004318(a1, kUMUserPersonaTypeKey);
      v11 = sub_10005D2A8(v9, v10, v4);
      v8 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v11);
    }
    v12 = v8;
    if (v8)
    {
      v13 = sub_100004318(v8, kUMUserPersonaTypeKey);
      if ((v13 & 0xFFFFFFFB) == 2)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v14 = (id)qword_1000E0060;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          v42 = 0;
          v15 = sub_100007750(1);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            v16 = v15;
          else
            v16 = v15 & 0xFFFFFFFE;
          if ((_DWORD)v16)
          {
            LOWORD(v43) = 0;
            v17 = (const char *)_os_log_send_and_compose_impl(v16, &v42, 0, 0);
            v18 = (char *)v17;
            if (v17)
              sub_100007780(v17);
          }
          else
          {
            v18 = 0;
          }
          free(v18);
        }

        if (sub_1000866F8(v12, kUMUserPersonaDisabledKey))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v31 = (id)qword_1000E0060;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            v42 = 0;
            v32 = sub_100007750(1);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              v33 = v32;
            else
              v33 = v32 & 0xFFFFFFFE;
            if ((_DWORD)v33)
            {
              LOWORD(v43) = 0;
              v34 = (const char *)_os_log_send_and_compose_impl(v33, &v42, 0, 0);
              v35 = (char *)v34;
              if (v34)
                sub_100007780(v34);
            }
            else
            {
              v35 = 0;
            }
            free(v35);
          }

        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v36 = (id)qword_1000E0060;
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            v42 = 0;
            v37 = sub_100007750(1);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              v38 = v37;
            else
              v38 = v37 & 0xFFFFFFFE;
            if ((_DWORD)v38)
            {
              LOWORD(v43) = 0;
              v39 = (const char *)_os_log_send_and_compose_impl(v38, &v42, 0, 0);
              v40 = (char *)v39;
              if (v39)
                sub_100007780(v39);
            }
            else
            {
              v40 = 0;
            }
            free(v40);
          }

          CFDictionarySetValue(v12, kUMUserPersonaDisabledKey, kCFBooleanTrue);
        }
        v30 = 0;
      }
      else
      {
        v24 = v13;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v25 = (id)qword_1000E0060;
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
        {
          v42 = 0;
          v26 = sub_100007750(1);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
            v27 = v26;
          else
            v27 = v26 & 0xFFFFFFFE;
          if ((_DWORD)v27)
          {
            v43 = 67109120;
            v44 = v24;
            v28 = (const char *)_os_log_send_and_compose_impl(v27, &v42, 0, 0);
            v29 = (char *)v28;
            if (v28)
              sub_100007780(v28);
          }
          else
          {
            v29 = 0;
          }
          free(v29);
        }

        v30 = 45;
      }
      CFRelease(v4);
      v4 = v12;
LABEL_71:
      CFRelease(v4);
      return v30;
    }
  }
LABEL_17:
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v19 = (id)qword_1000E0060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    v42 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      LOWORD(v43) = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, &v42, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

  v30 = 2;
  if (v4)
    goto LABEL_71;
  return v30;
}

id sub_10004CAE0(void *a1, _DWORD *a2)
{
  return sub_10005DC34(qword_1000E0040, a1, a2);
}

id *sub_10004CAF4(_DWORD *a1)
{
  return sub_10005DE80((id *)qword_1000E0040, a1);
}

id sub_10004CB04(void *a1, void *a2, _DWORD *a3)
{
  return sub_10005E334((void *)qword_1000E0040, a1, a2, a3);
}

uint64_t sub_10004CB1C()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v0 = sub_10001C730(qword_1000E0040);
  v1 = (void *)objc_claimAutoreleasedReturnValue(v0);
  sub_10005AB0C((uint64_t)v1);

  v2 = sub_10001C730(qword_1000E0040);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = sub_10005A964((uint64_t)v3);

  return v4;
}

uint64_t sub_10004CB70(const __CFDictionary *a1, const __CFArray *a2, void *a3)
{
  id v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;
  void *v18;
  unsigned int v19;
  id v20;
  const __CFDictionary *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  int v28;
  const void *v29;
  const void *v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  NSObject *v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  void *v45;
  _BYTE v47[22];
  uint64_t v48;

  v5 = a3;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v6 = (id)qword_1000E0060;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v48 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      *(_DWORD *)v47 = 138412290;
      *(_QWORD *)&v47[4] = a1;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v48, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  v11 = sub_1000042B4(qword_1000E0040, v5);
  v12 = objc_claimAutoreleasedReturnValue(v11);
  if (v12)
  {
    v13 = (void *)v12;
    if (CFDictionaryContainsKey(a1, kUMUserPersonaUniqueStringKey))
    {
      v14 = qword_1000E0040;
      v15 = (void *)sub_100086748(a1, kUMUserPersonaUniqueStringKey);
      v16 = sub_100007154(v14, v15, v13);
      v17 = objc_claimAutoreleasedReturnValue(v16);
    }
    else
    {
      if (!CFDictionaryContainsKey(a1, kUMUserPersonaTypeKey))
      {
        v27 = 2;
        v21 = (const __CFDictionary *)v13;
        goto LABEL_80;
      }
      v18 = (void *)qword_1000E0040;
      v19 = sub_100004318(a1, kUMUserPersonaTypeKey);
      v20 = sub_10005D2A8(v18, v19, v13);
      v17 = objc_claimAutoreleasedReturnValue(v20);
    }
    v21 = (const __CFDictionary *)v17;
    CFRelease(v13);
    if (v21)
    {
      if (a2)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v22 = (id)qword_1000E0060;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
        {
          v48 = 0;
          v23 = sub_100007750(1);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if ((_DWORD)v24)
          {
            *(_DWORD *)v47 = 138412546;
            *(_QWORD *)&v47[4] = a2;
            *(_WORD *)&v47[12] = 2112;
            *(_QWORD *)&v47[14] = v21;
            v25 = (const char *)_os_log_send_and_compose_impl(v24, &v48, 0, 0);
            v26 = (char *)v25;
            if (v25)
              sub_100007780(v25);
          }
          else
          {
            v26 = 0;
          }
          free(v26);
        }

        v28 = sub_100004318(v21, kUMUserPersonaIDKey);
        if (CFDictionaryContainsKey(v21, kUMUserPersonaBundleIDsKey))
        {
          v29 = sub_1000865F0(v21, kUMUserPersonaBundleIDsKey);
          v30 = v29;
          if (v29)
            CFRetain(v29);
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v31 = (id)qword_1000E0060;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
          {
            v48 = 0;
            v32 = sub_100007750(1);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
              v33 = v32;
            else
              v33 = v32 & 0xFFFFFFFE;
            if ((_DWORD)v33)
            {
              *(_DWORD *)v47 = 67109378;
              *(_DWORD *)&v47[4] = v28;
              *(_WORD *)&v47[8] = 2112;
              *(_QWORD *)&v47[10] = v30;
              v34 = (const char *)_os_log_send_and_compose_impl(v33, &v48, 0, 0);
              v35 = (char *)v34;
              if (v34)
                sub_100007780(v34);
            }
            else
            {
              v35 = 0;
            }
            free(v35);
          }

          if (CFArrayGetCount(a2) <= 0)
          {
            if (!v30)
              goto LABEL_72;
            CFDictionaryRemoveValue(v21, kUMUserPersonaBundleIDsKey);
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v36 = (id)qword_1000E0060;
            if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              goto LABEL_71;
            *(_QWORD *)v47 = 0;
            v41 = sub_100007750(1);
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
              v42 = v41;
            else
              v42 = v41 & 0xFFFFFFFE;
            if ((_DWORD)v42)
            {
              LODWORD(v48) = 67109120;
              HIDWORD(v48) = v28;
              v43 = (const char *)_os_log_send_and_compose_impl(v42, v47, 0, 0);
              v40 = (char *)v43;
              if (v43)
                sub_100007780(v43);
            }
            else
            {
              v40 = 0;
            }
            goto LABEL_70;
          }
        }
        else
        {
          v30 = 0;
          if (CFArrayGetCount(a2) < 1)
          {
LABEL_72:
            v44 = sub_10001C730(qword_1000E0040);
            v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
            sub_10005A9A8((uint64_t)v45);

            if ((sub_10005F5C8(qword_1000E0040) & 1) != 0)
            {
              if (!v30)
                goto LABEL_79;
            }
            else
            {
              if (!v30)
              {
                CFDictionaryRemoveValue(v21, kUMUserPersonaBundleIDsKey);
                goto LABEL_79;
              }
              CFDictionarySetValue(v21, kUMUserPersonaBundleIDsKey, v30);
            }
            CFRelease(v30);
LABEL_79:
            v27 = 0;
            goto LABEL_80;
          }
        }
        CFDictionarySetValue(v21, kUMUserPersonaBundleIDsKey, a2);
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v36 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          goto LABEL_71;
        v48 = 0;
        v37 = sub_100007750(1);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          v38 = v37;
        else
          v38 = v37 & 0xFFFFFFFE;
        if ((_DWORD)v38)
        {
          *(_DWORD *)v47 = 67109378;
          *(_DWORD *)&v47[4] = v28;
          *(_WORD *)&v47[8] = 2112;
          *(_QWORD *)&v47[10] = a2;
          v39 = (const char *)_os_log_send_and_compose_impl(v38, &v48, 0, 0);
          v40 = (char *)v39;
          if (v39)
            sub_100007780(v39);
        }
        else
        {
          v40 = 0;
        }
LABEL_70:
        free(v40);
LABEL_71:

        goto LABEL_72;
      }
      v27 = 22;
LABEL_80:
      CFRelease(v21);
      goto LABEL_81;
    }
  }
  v27 = 2;
LABEL_81:

  return v27;
}

id sub_10004D1F0(void *a1, void *a2, _DWORD *a3)
{
  return sub_10005E5A0((void *)qword_1000E0040, a1, a2, a3);
}

uint64_t sub_10004D208(const __CFArray *a1, void *a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  id v9;
  void *v10;
  const void *v11;
  id v12;
  const __CFDictionary *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  const void *v25;
  const void *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  _BYTE *v35;
  const char *v36;
  char *v37;
  unsigned int v38;
  uint64_t v39;
  void *v40;
  _QWORD v42[2];
  _BYTE v43[24];

  v3 = a2;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v4 = (id)qword_1000E0060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_QWORD *)v43 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      LOWORD(v42[0]) = 0;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, v43, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = sub_1000042B4(qword_1000E0040, v3);
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (v10)
  {
    v11 = v10;
    v12 = sub_10005D2A8((id)qword_1000E0040, 4u, v10);
    v13 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v12);
    CFRelease(v11);
    if (v13)
    {
      if (!a1)
      {
        v24 = 22;
        goto LABEL_83;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v14 = (id)qword_1000E0060;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v42[0] = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          *(_DWORD *)v43 = 138412290;
          *(_QWORD *)&v43[4] = a1;
          v17 = (const char *)_os_log_send_and_compose_impl(v16, v42, 0, 0);
          v18 = (char *)v17;
          if (v17)
            sub_100007780(v17);
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }

      if (CFDictionaryContainsKey(v13, kUMUserPersonaBundleIDsKey))
      {
        v25 = sub_1000865F0(v13, kUMUserPersonaBundleIDsKey);
        v26 = v25;
        if (v25)
          CFRetain(v25);
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v27 = (id)qword_1000E0060;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v42[0] = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            *(_DWORD *)v43 = 138412290;
            *(_QWORD *)&v43[4] = v26;
            v30 = (const char *)_os_log_send_and_compose_impl(v29, v42, 0, 0);
            v31 = (char *)v30;
            if (v30)
              sub_100007780(v30);
          }
          else
          {
            v31 = 0;
          }
          free(v31);
        }

        if (CFArrayGetCount(a1) <= 0)
        {
          if (!v26)
          {
LABEL_78:
            v39 = sub_10001C730(qword_1000E0040);
            v40 = (void *)objc_claimAutoreleasedReturnValue(v39);
            sub_10005A9A8((uint64_t)v40);

            if ((sub_10005F5C8(qword_1000E0040) & 1) != 0)
            {
              v24 = 0;
              if (!v26)
                goto LABEL_83;
              goto LABEL_82;
            }
            CFDictionarySetValue(v13, kUMUserPersonaBundleIDsKey, v26);
            v24 = 12;
            if (v26)
LABEL_82:
              CFRelease(v26);
LABEL_83:
            CFRelease(v13);
            goto LABEL_84;
          }
          CFDictionaryRemoveValue(v13, kUMUserPersonaBundleIDsKey);
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v32 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
LABEL_77:

            goto LABEL_78;
          }
          *(_QWORD *)v43 = 0;
          v38 = sub_100007750(1);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
            v34 = v38;
          else
            v34 = v38 & 0xFFFFFFFE;
          if ((_DWORD)v34)
          {
            LOWORD(v42[0]) = 0;
            v35 = v43;
LABEL_64:
            v36 = (const char *)_os_log_send_and_compose_impl(v34, v35, 0, 0);
            v37 = (char *)v36;
            if (v36)
              sub_100007780(v36);
            goto LABEL_76;
          }
LABEL_75:
          v37 = 0;
LABEL_76:
          free(v37);
          goto LABEL_77;
        }
      }
      else
      {
        v26 = 0;
        if (CFArrayGetCount(a1) < 1)
          goto LABEL_78;
      }
      CFDictionarySetValue(v13, kUMUserPersonaBundleIDsKey, a1);
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v32 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        goto LABEL_77;
      v42[0] = 0;
      v33 = sub_100007750(1);
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        v34 = v33;
      else
        v34 = v33 & 0xFFFFFFFE;
      if ((_DWORD)v34)
      {
        *(_DWORD *)v43 = 138412290;
        *(_QWORD *)&v43[4] = a1;
        v35 = v42;
        goto LABEL_64;
      }
      goto LABEL_75;
    }
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v19 = (id)qword_1000E0060;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v43 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      LOWORD(v42[0]) = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, v43, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

  v24 = 2;
LABEL_84:

  return v24;
}

id sub_10004D854(void *a1, _DWORD *a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v14;
  __CFString *v15;
  _UNKNOWN **v16;

  v3 = a1;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v4 = (id)qword_1000E0060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v14 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v14, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = (void *)qword_1000E0040;
  v15 = kUMUserPersonaTypeKey;
  v16 = &off_1000D5408;
  v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1));
  v11 = sub_10005E5A0(v9, v10, v3, a2);
  v12 = (void *)objc_claimAutoreleasedReturnValue(v11);

  return v12;
}

void *sub_10004D9F0(void *a1, void *a2, int *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  const __CFDictionary *v9;
  void *v10;
  int v11;

  v5 = a1;
  v6 = sub_1000042B4(qword_1000E0040, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (!v7)
  {
LABEL_7:
    v11 = 2;
    if (!a3)
      goto LABEL_15;
    goto LABEL_12;
  }
  v8 = sub_100007154(qword_1000E0040, v5, v7);
  v9 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v8);
  CFRelease(v7);
  if (!v9)
  {
    v7 = 0;
    goto LABEL_7;
  }
  if (sub_100004318(v9, kUMUserPersonaTypeKey) == 6)
  {
    v10 = (void *)sub_100086748(v9, kUMUserSessionVolumeDeviceNodeKey);
    v7 = v10;
    if (v10)
    {
      CFRetain(v10);
      v11 = 0;
    }
    else
    {
      v11 = 3;
    }
  }
  else
  {
    v7 = 0;
    v11 = 22;
  }
  CFRelease(v9);
  if (a3)
  {
LABEL_12:
    if (!v7 && v11)
      *a3 = v11;
  }
LABEL_15:

  return v7;
}

uint64_t sub_10004DAEC()
{
  return 45;
}

uint64_t sub_10004DAF4(void *a1, int a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  int v23;

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v4 = (id)qword_1000E0060;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      *(_DWORD *)v21 = 138412546;
      *(_QWORD *)&v21[4] = a1;
      v22 = 1024;
      v23 = a2;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v20, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (sub_100066684(qword_1000E0040, a1))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v21 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LOWORD(v20) = 0;
        v12 = (const char *)_os_log_send_and_compose_impl(v11, v21, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }
    v18 = 0;
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v9 = (id)qword_1000E0060;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v21 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v20) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, v21, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }
    v18 = 22;
  }

  return v18;
}

__CFDictionary *sub_10004DDE8(const __CFDictionary *a1, int *a2)
{
  uint64_t v4;
  void *v5;
  int v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const void *v15;
  const void *v16;
  CFTypeID v17;
  int Value;
  unsigned int v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  char *v27;
  const __CFString *v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  __CFDictionary *v34;
  int v35;
  NSObject *v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  NSObject *v44;
  unsigned int v45;
  uint64_t v46;
  const char *v47;
  char *v48;
  NSObject *v49;
  unsigned int v50;
  uint64_t v51;
  const char *v52;
  char *v53;
  unint64_t v54;
  NSObject *v55;
  unsigned int v56;
  uint64_t v57;
  const char *v58;
  char *v59;
  NSObject *v60;
  unsigned int v61;
  uint64_t v62;
  const char *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  int v67;
  NSObject *v68;
  unsigned int v69;
  uint64_t v70;
  int v71;
  NSObject *v72;
  unsigned int v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  unsigned int v77;
  NSObject *v78;
  unsigned int v79;
  uint64_t v80;
  const char *v81;
  char *v82;
  int v83;
  NSObject *v84;
  unsigned int v85;
  uint64_t v86;
  const char *v87;
  char *v88;
  unsigned int v89;
  NSObject *v90;
  unsigned int v91;
  uint64_t v92;
  const char *v93;
  char *v94;
  NSObject *v95;
  unsigned int v96;
  uint64_t v97;
  const char *v98;
  char *v99;
  unsigned int v100;
  const char *v101;
  char *v102;
  NSObject *v103;
  unsigned int v104;
  uint64_t v105;
  const char *v106;
  char *v107;
  __CFDictionary *v108;
  NSObject *v109;
  unsigned int v110;
  uint64_t v111;
  const char *v112;
  char *v113;
  unsigned int v114;
  NSObject *v115;
  unsigned int v116;
  uint64_t v117;
  const char *v118;
  char *v119;
  id v120;
  uint64_t v121;
  CFNumberRef v122;
  CFNumberRef v123;
  unsigned int v124;
  _BYTE v125[24];
  _QWORD v126[2];
  unint64_t valuePtr;

  v4 = sub_10001BE1C(qword_1000E0318);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  v6 = sub_10001CA60((uint64_t)v5);

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v7 = (id)qword_1000E0060;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LOWORD(valuePtr) = 0;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, v125, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  if (MGGetBoolAnswer(CFSTR("InternalBuild"))
    && sub_1000866F8(a1, kUMUserSessionForcedProvisionTypeKey))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v12 = (id)qword_1000E0060;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v125 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(valuePtr) = 0;
        goto LABEL_33;
      }
      goto LABEL_44;
    }
    goto LABEL_46;
  }
  v15 = (const void *)MGCopyAnswer(CFSTR("4fT83+9coO3VAUnlxuOOcw"), 0);
  if (!v15)
  {
LABEL_36:
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v22 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_70;
    *(_QWORD *)v125 = 0;
    v23 = sub_100007750(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      v24 = v23;
    else
      v24 = v23 & 0xFFFFFFFE;
    if ((_DWORD)v24)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_55;
    }
LABEL_68:
    v27 = 0;
LABEL_69:
    free(v27);
LABEL_70:

    v34 = 0;
    v35 = 45;
LABEL_71:
    if (a2 && v35)
      *a2 = v35;
    return v34;
  }
  v16 = v15;
  v17 = CFGetTypeID(v15);
  if (v17 != CFBooleanGetTypeID())
  {
    CFRelease(v16);
    goto LABEL_36;
  }
  Value = CFBooleanGetValue((CFBooleanRef)v16);
  CFRelease(v16);
  if (!Value)
    goto LABEL_36;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v12 = (id)qword_1000E0060;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v19;
    else
      v14 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      LOWORD(valuePtr) = 0;
LABEL_33:
      v20 = (const char *)_os_log_send_and_compose_impl(v14, v125, 0, 0);
      v21 = (char *)v20;
      if (v20)
        sub_100007780(v20);
      goto LABEL_45;
    }
LABEL_44:
    v21 = 0;
LABEL_45:
    free(v21);
  }
LABEL_46:

  if (_os_feature_enabled_impl("UserManagement", "LocalUserEnrollment"))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v22 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      goto LABEL_70;
    *(_QWORD *)v125 = 0;
    v25 = sub_100007750(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      v24 = v25;
    else
      v24 = v25 & 0xFFFFFFFE;
    if ((_DWORD)v24)
    {
      LOWORD(valuePtr) = 0;
LABEL_55:
      v26 = (const char *)_os_log_send_and_compose_impl(v24, v125, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  v28 = (const __CFString *)sub_100086748(a1, kUMUserSessionProvisionTypeKey[0]);
  if (CFStringCompare(v28, kUMUserSessionProvisionTypeEducation[0], 0))
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      goto LABEL_297;
    *(_QWORD *)v125 = 0;
    v30 = sub_100007750(1);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      v31 = v30;
    else
      v31 = v30 & 0xFFFFFFFE;
    if ((_DWORD)v31)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_66;
    }
LABEL_295:
    v33 = 0;
LABEL_296:
    free(v33);
LABEL_297:

    v34 = 0;
    v35 = 22;
    goto LABEL_71;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v37 = (id)qword_1000E0060;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v38 = sub_100007750(1);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      v39 = v38;
    else
      v39 = v38 & 0xFFFFFFFE;
    if ((_DWORD)v39)
    {
      LOWORD(valuePtr) = 0;
      v40 = (const char *)_os_log_send_and_compose_impl(v39, v125, 0, 0);
      v41 = (char *)v40;
      if (v40)
        sub_100007780(v40);
    }
    else
    {
      v41 = 0;
    }
    free(v41);
  }

  if (CFDictionaryContainsKey(a1, kUMEducationUserSizeKey[0]))
  {
    v42 = sub_100086628(a1, kUMEducationUserSizeKey[0]);
    valuePtr = v42;
    v43 = v42 >> 20;
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v44 = (id)qword_1000E0060;
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      v126[0] = 0;
      v45 = sub_100007750(1);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        v46 = v45;
      else
        v46 = v45 & 0xFFFFFFFE;
      if ((_DWORD)v46)
      {
        *(_DWORD *)v125 = 134217984;
        *(_QWORD *)&v125[4] = v42 >> 20;
        v47 = (const char *)_os_log_send_and_compose_impl(v46, v126, 0, 0);
        v48 = (char *)v47;
        if (v47)
          sub_100007780(v47);
      }
      else
      {
        v48 = 0;
      }
      free(v48);
    }

    if ((v42 & 0xFFFFFFFFFFF00000) != v42)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v55 = (id)qword_1000E0060;
      if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
      {
        v126[0] = 0;
        v56 = sub_100007750(1);
        if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          v57 = v56;
        else
          v57 = v56 & 0xFFFFFFFE;
        if ((_DWORD)v57)
        {
          *(_DWORD *)v125 = 134218240;
          *(_QWORD *)&v125[4] = v42;
          *(_WORD *)&v125[12] = 2048;
          *(_QWORD *)&v125[14] = v42 & 0xFFFFFFFFFFF00000;
          v58 = (const char *)_os_log_send_and_compose_impl(v57, v126, 0, 0);
          v59 = (char *)v58;
          if (v58)
            sub_100007780(v58);
        }
        else
        {
          v59 = 0;
        }
        free(v59);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v29 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        goto LABEL_297;
      *(_QWORD *)v125 = 0;
      v77 = sub_100007750(1);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        v31 = v77;
      else
        v31 = v77 & 0xFFFFFFFE;
      if (!(_DWORD)v31)
        goto LABEL_295;
      LOWORD(v126[0]) = 0;
      goto LABEL_66;
    }
    if ((unint64_t)((uint64_t)sub_1000222A0() / 0x100000) >= 0x8000)
      v54 = 2048;
    else
      v54 = 1024;
    if (v43 <= v54)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v60 = (id)qword_1000E0060;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
      {
        v126[0] = 0;
        v61 = sub_100007750(1);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
          v62 = v61;
        else
          v62 = v61 & 0xFFFFFFFE;
        if ((_DWORD)v62)
        {
          *(_DWORD *)v125 = 134218240;
          *(_QWORD *)&v125[4] = v43;
          *(_WORD *)&v125[12] = 2048;
          *(_QWORD *)&v125[14] = v54;
          v63 = (const char *)_os_log_send_and_compose_impl(v62, v126, 0, 0);
          v64 = (char *)v63;
          if (v63)
            sub_100007780(v63);
        }
        else
        {
          v64 = 0;
        }
        free(v64);
      }

    }
    else
    {
      v54 = v43;
    }
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v78 = (id)qword_1000E0060;
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      v126[0] = 0;
      v79 = sub_100007750(1);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
        v80 = v79;
      else
        v80 = v79 & 0xFFFFFFFE;
      if ((_DWORD)v80)
      {
        *(_DWORD *)v125 = 67109632;
        *(_DWORD *)&v125[4] = dword_1000DF21C;
        *(_WORD *)&v125[8] = 2048;
        *(_QWORD *)&v125[10] = qword_1000E02E8;
        *(_WORD *)&v125[18] = 1024;
        *(_DWORD *)&v125[20] = qword_1000E02B8;
        v81 = (const char *)_os_log_send_and_compose_impl(v80, v126, 0, 0);
        v82 = (char *)v81;
        if (v81)
          sub_100007780(v81);
      }
      else
      {
        v82 = 0;
      }
      free(v82);
    }

    if (dword_1000DF21C == -1)
      v83 = v6;
    else
      v83 = 0;
    if (v83 == 1 && qword_1000E02E8)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v84 = (id)qword_1000E0060;
      if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v125 = 0;
        v85 = sub_100007750(1);
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
          v86 = v85;
        else
          v86 = v85 & 0xFFFFFFFE;
        if ((_DWORD)v86)
        {
          LODWORD(v126[0]) = 67109120;
          HIDWORD(v126[0]) = qword_1000E02B8;
          v87 = (const char *)_os_log_send_and_compose_impl(v86, v125, 0, 0);
          v88 = (char *)v87;
          if (v87)
            sub_100007780(v87);
        }
        else
        {
          v88 = 0;
        }
        free(v88);
      }

      if (qword_1000E02B8 == 1)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v95 = (id)qword_1000E0060;
        if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
        {
          v126[0] = 0;
          v96 = sub_100007750(1);
          if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
            v97 = v96;
          else
            v97 = v96 & 0xFFFFFFFE;
          if ((_DWORD)v97)
          {
            *(_DWORD *)v125 = 134217984;
            *(_QWORD *)&v125[4] = v54;
            v98 = (const char *)_os_log_send_and_compose_impl(v97, v126, 0, 0);
            v99 = (char *)v98;
            if (v98)
              sub_100007780(v98);
          }
          else
          {
            v99 = 0;
          }
          free(v99);
        }

        v120 = sub_100004400(qword_1000E0038, 502);
        v121 = objc_claimAutoreleasedReturnValue(v120);
        if (v121)
        {
          v34 = (__CFDictionary *)v121;
          qword_1000E02E8 = v54;
          v122 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
          if (v122)
          {
            v123 = v122;
            CFDictionarySetValue(v34, kUMUserSessionQuotaLimitKey, v122);
            CFDictionarySetValue(v34, kUMUserSessionEachUserSize, v123);
            CFRelease(v123);
          }
          sub_10001DE7C();
LABEL_301:
          v35 = 0;
          goto LABEL_71;
        }
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v29 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          goto LABEL_297;
        *(_QWORD *)v125 = 0;
        v124 = sub_100007750(1);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          v31 = v124;
        else
          v31 = v124 & 0xFFFFFFFE;
        if (!(_DWORD)v31)
          goto LABEL_295;
        LOWORD(v126[0]) = 0;
LABEL_66:
        v32 = (const char *)_os_log_send_and_compose_impl(v31, v125, 0, 0);
        v33 = (char *)v32;
        if (v32)
          sub_100007780(v32);
        goto LABEL_296;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v68 = (id)qword_1000E0060;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v125 = 0;
        v100 = sub_100007750(1);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          v70 = v100;
        else
          v70 = v100 & 0xFFFFFFFE;
        if ((_DWORD)v70)
        {
          LOWORD(v126[0]) = 0;
LABEL_230:
          v101 = (const char *)_os_log_send_and_compose_impl(v70, v125, 0, 0);
          v102 = (char *)v101;
          if (v101)
            sub_100007780(v101);
          goto LABEL_233;
        }
        goto LABEL_232;
      }
    }
    else
    {
      if ((v6 & 1) == 0)
      {
        v34 = sub_100022BC0(-1, v54);
        if (v34)
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v90 = (id)qword_1000E0060;
          if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v125 = 0;
            v91 = sub_100007750(1);
            if (os_log_type_enabled(v90, OS_LOG_TYPE_DEFAULT))
              v92 = v91;
            else
              v92 = v91 & 0xFFFFFFFE;
            if ((_DWORD)v92)
            {
              LOWORD(v126[0]) = 0;
              v93 = (const char *)_os_log_send_and_compose_impl(v92, v125, 0, 0);
              v94 = (char *)v93;
              if (v93)
                sub_100007780(v93);
            }
            else
            {
              v94 = 0;
            }
            free(v94);
          }

          sub_1000329B8(v34, 0);
        }
        goto LABEL_301;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v68 = (id)qword_1000E0060;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v125 = 0;
        v89 = sub_100007750(1);
        if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
          v70 = v89;
        else
          v70 = v89 & 0xFFFFFFFE;
        if ((_DWORD)v70)
        {
          LOWORD(v126[0]) = 0;
          goto LABEL_230;
        }
LABEL_232:
        v102 = 0;
LABEL_233:
        free(v102);
      }
    }
LABEL_234:

    v34 = 0;
    v35 = 16;
    goto LABEL_71;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v49 = (id)qword_1000E0060;
  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v50 = sub_100007750(1);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      v51 = v50;
    else
      v51 = v50 & 0xFFFFFFFE;
    if ((_DWORD)v51)
    {
      LOWORD(valuePtr) = 0;
      v52 = (const char *)_os_log_send_and_compose_impl(v51, v125, 0, 0);
      v53 = (char *)v52;
      if (v52)
        sub_100007780(v52);
    }
    else
    {
      v53 = 0;
    }
    free(v53);
  }

  v65 = sub_10001BE1C(qword_1000E0318);
  v66 = (void *)objc_claimAutoreleasedReturnValue(v65);
  v67 = sub_10001CA60((uint64_t)v66);

  if (v67)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v68 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      goto LABEL_234;
    *(_QWORD *)v125 = 0;
    v69 = sub_100007750(1);
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      v70 = v69;
    else
      v70 = v69 & 0xFFFFFFFE;
    if ((_DWORD)v70)
    {
      LOWORD(valuePtr) = 0;
      goto LABEL_230;
    }
    goto LABEL_232;
  }
  if (CFDictionaryContainsKey(a1, kUMEducationNumberOfUsersKey[0]))
  {
    v71 = sub_100004318(a1, kUMEducationNumberOfUsersKey[0]);
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v72 = (id)qword_1000E0060;
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v125 = 0;
      v73 = sub_100007750(1);
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        v74 = v73;
      else
        v74 = v73 & 0xFFFFFFFE;
      if ((_DWORD)v74)
      {
        LODWORD(valuePtr) = 67109120;
        HIDWORD(valuePtr) = v71;
        v75 = (const char *)_os_log_send_and_compose_impl(v74, v125, 0, 0);
        v76 = (char *)v75;
        if (v75)
          sub_100007780(v75);
      }
      else
      {
        v76 = 0;
      }
      free(v76);
    }

  }
  else
  {
    v71 = -1;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v103 = (id)qword_1000E0060;
  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v104 = sub_100007750(1);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
      v105 = v104;
    else
      v105 = v104 & 0xFFFFFFFE;
    if ((_DWORD)v105)
    {
      LODWORD(valuePtr) = 67109120;
      HIDWORD(valuePtr) = v71;
      v106 = (const char *)_os_log_send_and_compose_impl(v105, v125, 0, 0);
      v107 = (char *)v106;
      if (v106)
        sub_100007780(v106);
    }
    else
    {
      v107 = 0;
    }
    free(v107);
  }

  v108 = sub_100022BC0(v71, 0);
  if (!v108)
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v29 = (id)qword_1000E0060;
    if (!os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      goto LABEL_297;
    *(_QWORD *)v125 = 0;
    v114 = sub_100007750(1);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      v31 = v114;
    else
      v31 = v114 & 0xFFFFFFFE;
    if (!(_DWORD)v31)
      goto LABEL_295;
    LOWORD(valuePtr) = 0;
    goto LABEL_66;
  }
  v34 = v108;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v109 = (id)qword_1000E0060;
  if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v110 = sub_100007750(1);
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
      v111 = v110;
    else
      v111 = v110 & 0xFFFFFFFE;
    if ((_DWORD)v111)
    {
      LOWORD(valuePtr) = 0;
      v112 = (const char *)_os_log_send_and_compose_impl(v111, v125, 0, 0);
      v113 = (char *)v112;
      if (v112)
        sub_100007780(v112);
    }
    else
    {
      v113 = 0;
    }
    free(v113);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v115 = (id)qword_1000E0060;
  if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v125 = 0;
    v116 = sub_100007750(1);
    if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
      v117 = v116;
    else
      v117 = v116 & 0xFFFFFFFE;
    if ((_DWORD)v117)
    {
      LOWORD(valuePtr) = 0;
      v118 = (const char *)_os_log_send_and_compose_impl(v117, v125, 0, 0);
      v119 = (char *)v118;
      if (v118)
        sub_100007780(v118);
    }
    else
    {
      v119 = 0;
    }
    free(v119);
  }

  sub_1000329B8(v34, 0);
  return v34;
}

BOOL sub_10004F3B0(const __CFString *a1, void *a2)
{
  id v3;
  void *v4;
  const void *v5;
  id v6;
  const __CFDictionary *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  const void *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  const __CFArray *MutableCopy;
  CFIndex v31;
  const __CFString *ValueAtIndex;
  const __CFString *v33;
  CFTypeID v34;
  int v35;
  NSObject *v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  int v41;
  NSObject *v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  NSObject *v47;
  unsigned int v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  _QWORD v52[2];
  _BYTE v53[24];

  v3 = sub_1000042B4(qword_1000E0040, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  if (v4)
  {
    v5 = v4;
    v6 = sub_10005D2A8((id)qword_1000E0040, 0, v4);
    v7 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue(v6);
    CFRelease(v5);
    if (v7)
    {
      if (!a1)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v18 = (id)qword_1000E0060;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v53 = 0;
          v19 = sub_100007750(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if ((_DWORD)v20)
          {
            LOWORD(v52[0]) = 0;
            v21 = (const char *)_os_log_send_and_compose_impl(v20, v53, 0, 0);
            v22 = (char *)v21;
            if (v21)
              sub_100007780(v21);
          }
          else
          {
            v22 = 0;
          }
          free(v22);
        }

        v41 = 0;
        goto LABEL_91;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v8 = (id)qword_1000E0060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v52[0] = 0;
        v9 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          *(_DWORD *)v53 = 138412290;
          *(_QWORD *)&v53[4] = 0;
          v11 = (const char *)_os_log_send_and_compose_impl(v10, v52, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v12 = 0;
        }
        free(v12);
      }

      if (!CFDictionaryContainsKey(v7, off_1000DF2F8))
        goto LABEL_56;
      v24 = sub_1000865F0(v7, off_1000DF2F8);
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v25 = (id)qword_1000E0060;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v52[0] = 0;
        v26 = sub_100007750(1);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if ((_DWORD)v27)
        {
          *(_DWORD *)v53 = 138412290;
          *(_QWORD *)&v53[4] = v24;
          v28 = (const char *)_os_log_send_and_compose_impl(v27, v52, 0, 0);
          v29 = (char *)v28;
          if (v28)
            sub_100007780(v28);
        }
        else
        {
          v29 = 0;
        }
        free(v29);
      }

      if (v24)
      {
        CFRetain(v24);
        MutableCopy = CFArrayCreateMutableCopy(kCFAllocatorDefault, 0, (CFArrayRef)v24);
        if (CFArrayGetCount(MutableCopy) >= 1)
        {
          v31 = 0;
          while (1)
          {
            ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(MutableCopy, v31);
            if (ValueAtIndex)
            {
              v33 = ValueAtIndex;
              v34 = CFGetTypeID(ValueAtIndex);
              if (v34 == CFStringGetTypeID() && CFStringCompare(v33, a1, 0) == kCFCompareEqualTo)
                break;
            }
            if (CFArrayGetCount(MutableCopy) <= ++v31)
              goto LABEL_55;
          }
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v47 = (id)qword_1000E0060;
          if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          {
            v52[0] = 0;
            v48 = sub_100007750(1);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              v49 = v48;
            else
              v49 = v48 & 0xFFFFFFFE;
            if ((_DWORD)v49)
            {
              *(_DWORD *)v53 = 138412290;
              *(_QWORD *)&v53[4] = a1;
              v50 = (const char *)_os_log_send_and_compose_impl(v49, v52, 0, 0);
              v51 = (char *)v50;
              if (v50)
                sub_100007780(v50);
            }
            else
            {
              v51 = 0;
            }
            free(v51);
          }

          v41 = 1;
          goto LABEL_88;
        }
LABEL_55:
        CFArrayAppendValue(MutableCopy, a1);
        CFDictionaryReplaceValue(v7, off_1000DF2F8, MutableCopy);
        v35 = 0;
      }
      else
      {
LABEL_56:
        MutableCopy = sub_100086C90();
        CFArrayAppendValue(MutableCopy, a1);
        CFDictionarySetValue(v7, off_1000DF2F8, MutableCopy);
        v24 = 0;
        v35 = 1;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v36 = (id)qword_1000E0060;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        v52[0] = 0;
        v37 = sub_100007750(1);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          v38 = v37;
        else
          v38 = v37 & 0xFFFFFFFE;
        if ((_DWORD)v38)
        {
          *(_DWORD *)v53 = 138412290;
          *(_QWORD *)&v53[4] = MutableCopy;
          v39 = (const char *)_os_log_send_and_compose_impl(v38, v52, 0, 0);
          v40 = (char *)v39;
          if (v39)
            sub_100007780(v39);
        }
        else
        {
          v40 = 0;
        }
        free(v40);
      }

      if ((sub_10005F5C8(qword_1000E0040) & 1) != 0)
      {
        v41 = 1;
        if ((v35 & 1) != 0)
        {
LABEL_89:
          if (MutableCopy)
            CFRelease(MutableCopy);
LABEL_91:
          CFRelease(v7);
          return v41 != 0;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v42 = (id)qword_1000E0060;
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v53 = 0;
          v43 = sub_100007750(1);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
            v44 = v43;
          else
            v44 = v43 & 0xFFFFFFFE;
          if ((_DWORD)v44)
          {
            LOWORD(v52[0]) = 0;
            v45 = (const char *)_os_log_send_and_compose_impl(v44, v53, 0, 0);
            v46 = (char *)v45;
            if (v45)
              sub_100007780(v45);
          }
          else
          {
            v46 = 0;
          }
          free(v46);
        }

        if (v35)
        {
          CFDictionaryRemoveValue(v7, off_1000DF2F8);
          v41 = 0;
          goto LABEL_89;
        }
        CFDictionaryReplaceValue(v7, off_1000DF2F8, v24);
        v41 = 0;
      }
LABEL_88:
      CFRelease(v24);
      goto LABEL_89;
    }
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v13 = (id)qword_1000E0060;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v53 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      LOWORD(v52[0]) = 0;
      v16 = (const char *)_os_log_send_and_compose_impl(v15, v53, 0, 0);
      v17 = (char *)v16;
      if (v16)
        sub_100007780(v16);
    }
    else
    {
      v17 = 0;
    }
    free(v17);
  }

  return 0;
}

CFStringRef sub_10004FB80(void *a1, _OWORD *a2, int a3, void *a4)
{
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  CFStringRef v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  unsigned int v35;
  uint64_t v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  CFStringRef v44;
  int v45;
  id v46;
  __int128 v47;
  const char *v48;
  char *v49;
  CFStringRef v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  int *v56;
  int v57;
  NSObject *v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  NSObject *v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  _BYTE v69[32];
  uint64_t v70;

  v7 = a4;
  v8 = objc_autoreleasePoolPush();
  v9 = a1;
  if (v9)
  {
    v10 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
    {
      v11 = sub_1000042B4(qword_1000E0040, v7);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      if (!v12)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v29 = (id)qword_1000E0060;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          v70 = 0;
          v30 = sub_100007750(1);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            v31 = v30;
          else
            v31 = v30 & 0xFFFFFFFE;
          if ((_DWORD)v31)
          {
            *(_DWORD *)v69 = 138412546;
            *(_QWORD *)&v69[4] = v9;
            *(_WORD *)&v69[12] = 1024;
            *(_DWORD *)&v69[14] = a3;
            v32 = (const char *)_os_log_send_and_compose_impl(v31, &v70, 0, 0);
            v33 = (char *)v32;
            if (v32)
              sub_100007780(v32);
          }
          else
          {
            v33 = 0;
          }
          free(v33);
        }

        v44 = 0;
        *__error() = 2;
        v45 = 1;
        goto LABEL_79;
      }
      v13 = sub_100007154(qword_1000E0040, v9, v12);
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      v15 = v14;
      if (!v14)
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v39 = (id)qword_1000E0060;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          v70 = 0;
          v40 = sub_100007750(1);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
            v41 = v40;
          else
            v41 = v40 & 0xFFFFFFFE;
          if ((_DWORD)v41)
          {
            *(_DWORD *)v69 = 138412546;
            *(_QWORD *)&v69[4] = v9;
            *(_WORD *)&v69[12] = 1024;
            *(_DWORD *)&v69[14] = a3;
            v42 = (const char *)_os_log_send_and_compose_impl(v41, &v70, 0, 0);
            v43 = (char *)v42;
            if (v42)
              sub_100007780(v42);
          }
          else
          {
            v43 = 0;
          }
          free(v43);
        }

        v44 = 0;
        *__error() = 2;
        v45 = 1;
        goto LABEL_78;
      }
      v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", kUMUserSessionHomeDirKey));
      if (v16 && (v17 = objc_opt_class(NSString), (objc_opt_isKindOfClass(v16, v17) & 1) != 0))
      {
        if (&_sandbox_extension_issue_file_to_process)
        {
          v46 = objc_msgSend(objc_retainAutorelease(v16), "UTF8String");
          v47 = a2[1];
          *(_OWORD *)v69 = *a2;
          *(_OWORD *)&v69[16] = v47;
          v48 = (const char *)sandbox_extension_issue_file_to_process("com.apple.usermanagement.persona-volume", v46, 0, v69);
          if (v48)
          {
            v49 = (char *)v48;
            v50 = CFStringCreateWithCStringNoCopy(kCFAllocatorDefault, v48, 0x8000100u, kCFAllocatorDefault);
            if (v50)
            {
              v44 = v50;
              if (qword_1000E0068 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v51 = (id)qword_1000E0060;
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                v70 = 0;
                v52 = sub_100007750(1);
                if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
                  v53 = v52;
                else
                  v53 = v52 & 0xFFFFFFFE;
                if ((_DWORD)v53)
                {
                  *(_DWORD *)v69 = 138412546;
                  *(_QWORD *)&v69[4] = v9;
                  *(_WORD *)&v69[12] = 1024;
                  *(_DWORD *)&v69[14] = a3;
                  v54 = (const char *)_os_log_send_and_compose_impl(v53, &v70, 0, 0);
                  v55 = (char *)v54;
                  if (v54)
                    sub_100007780(v54);
                }
                else
                {
                  v55 = 0;
                }
                free(v55);
              }

              v45 = 0;
              goto LABEL_74;
            }
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v64 = (id)qword_1000E0060;
            if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
            {
              v70 = 0;
              v65 = sub_100007750(1);
              if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
                v66 = v65;
              else
                v66 = v65 & 0xFFFFFFFE;
              if ((_DWORD)v66)
              {
                *(_DWORD *)v69 = 138412546;
                *(_QWORD *)&v69[4] = v9;
                *(_WORD *)&v69[12] = 1024;
                *(_DWORD *)&v69[14] = a3;
                v67 = (const char *)_os_log_send_and_compose_impl(v66, &v70, 0, 0);
                v68 = (char *)v67;
                if (v67)
                  sub_100007780(v67);
              }
              else
              {
                v68 = 0;
              }
              free(v68);
            }

            free(v49);
            v56 = __error();
            v44 = 0;
            v57 = 12;
          }
          else
          {
            if (qword_1000E0068 != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v59 = (id)qword_1000E0060;
            if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            {
              v70 = 0;
              v60 = sub_100007750(1);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                v61 = v60;
              else
                v61 = v60 & 0xFFFFFFFE;
              if ((_DWORD)v61)
              {
                *(_DWORD *)v69 = 138412546;
                *(_QWORD *)&v69[4] = v9;
                *(_WORD *)&v69[12] = 1024;
                *(_DWORD *)&v69[14] = a3;
                v62 = (const char *)_os_log_send_and_compose_impl(v61, &v70, 0, 0);
                v63 = (char *)v62;
                if (v62)
                  sub_100007780(v62);
              }
              else
              {
                v63 = 0;
              }
              free(v63);
            }

            v56 = __error();
            v44 = 0;
            v57 = 9;
          }
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v18 = (id)qword_1000E0060;
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            v70 = 0;
            v19 = sub_100007750(1);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
              v20 = v19;
            else
              v20 = v19 & 0xFFFFFFFE;
            if ((_DWORD)v20)
            {
              *(_DWORD *)v69 = 138412546;
              *(_QWORD *)&v69[4] = v9;
              *(_WORD *)&v69[12] = 1024;
              *(_DWORD *)&v69[14] = a3;
              v21 = (const char *)_os_log_send_and_compose_impl(v20, &v70, 0, 0);
              v22 = (char *)v21;
              if (v21)
                sub_100007780(v21);
            }
            else
            {
              v22 = 0;
            }
            free(v22);
          }

          v56 = __error();
          v44 = 0;
          v57 = 5;
        }
      }
      else
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v34 = (id)qword_1000E0060;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
        {
          v70 = 0;
          v35 = sub_100007750(1);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
            v36 = v35;
          else
            v36 = v35 & 0xFFFFFFFE;
          if ((_DWORD)v36)
          {
            *(_DWORD *)v69 = 138412546;
            *(_QWORD *)&v69[4] = v9;
            *(_WORD *)&v69[12] = 1024;
            *(_DWORD *)&v69[14] = a3;
            v37 = (const char *)_os_log_send_and_compose_impl(v36, &v70, 0, 0);
            v38 = (char *)v37;
            if (v37)
              sub_100007780(v37);
          }
          else
          {
            v38 = 0;
          }
          free(v38);
        }

        v56 = __error();
        v44 = 0;
        v57 = 2;
      }
      *v56 = v57;
      v45 = 1;
LABEL_74:

LABEL_78:
LABEL_79:

      objc_autoreleasePoolPop(v8);
      if (v45)
        v28 = 0;
      else
        v28 = v44;
      goto LABEL_82;
    }
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v23 = (id)qword_1000E0060;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v69 = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      LODWORD(v70) = 67109120;
      HIDWORD(v70) = a3;
      v26 = (const char *)_os_log_send_and_compose_impl(v25, v69, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
    }
    else
    {
      v27 = 0;
    }
    free(v27);
  }

  *__error() = 22;
  objc_autoreleasePoolPop(v8);
  v28 = 0;
LABEL_82:

  return v28;
}

void sub_100050500(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E0060;
  qword_1000E0060 = (uint64_t)v1;

}

void sub_100050534(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "user");
  v2 = (void *)qword_1000E0070;
  qword_1000E0070 = (uint64_t)v1;

}

uint64_t sub_100050568(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v5;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t v29;
  int v30;
  int v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  char *v39;
  _QWORD v41[3];
  uint64_t v42;
  __int16 v43;
  int v44;
  uint64_t v45;

  memset(v41, 0, sizeof(v41));
  if (&_sandbox_user_state_item_buffer_destroy)
    v5 = &_sandbox_user_state_item_buffer_send == 0;
  else
    v5 = 1;
  if (!v5 && &_sandbox_set_user_state_item != 0 && &_sandbox_user_state_item_buffer_create != 0)
  {
    v18 = sandbox_user_state_item_buffer_create();
    if (a5)
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LODWORD(v45) = 67109120;
          HIDWORD(v45) = a1;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, &v42, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }

      sandbox_set_user_state_item(a1, 16, 0, v18);
      v30 = sandbox_user_state_item_buffer_send(v18);
      if (v30)
      {
        v31 = v30;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v32 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          goto LABEL_70;
        v45 = 0;
        LODWORD(v33) = sub_100007750(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          v33 = v33;
        else
          v33 = v33 & 0xFFFFFFFE;
        if ((_DWORD)v33)
        {
          v34 = v32;
          v35 = *__error();
          LODWORD(v42) = 67109376;
          HIDWORD(v42) = v31;
          v43 = 1024;
          v44 = v35;
          goto LABEL_65;
        }
        goto LABEL_68;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v24 = (id)qword_1000E0060;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v25 = sub_100007750(1);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          v26 = v25;
        else
          v26 = v25 & 0xFFFFFFFE;
        if ((_DWORD)v26)
        {
          LODWORD(v45) = 67109120;
          HIDWORD(v45) = a1;
          v27 = (const char *)_os_log_send_and_compose_impl(v26, &v42, 0, 0);
          v28 = (char *)v27;
          if (v27)
            sub_100007780(v27);
        }
        else
        {
          v28 = 0;
        }
        free(v28);
      }

      LODWORD(v41[0]) = a2;
      sandbox_set_user_state_item(a1, 17, v41, v18);
      v41[0] = a3;
      sandbox_set_user_state_item(a1, 18, v41, v18);
      v41[0] = a4;
      sandbox_set_user_state_item(a1, 19, v41, v18);
      sandbox_set_user_state_item(a1, 20, 0, v18);
      v36 = sandbox_user_state_item_buffer_send(v18);
      if (v36)
      {
        v37 = v36;
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v32 = (id)qword_1000E0060;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          goto LABEL_70;
        v45 = 0;
        LODWORD(v33) = sub_100007750(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          v33 = v33;
        else
          v33 = v33 & 0xFFFFFFFE;
        if ((_DWORD)v33)
        {
          v34 = v32;
          v38 = *__error();
          LODWORD(v42) = 67109376;
          HIDWORD(v42) = v37;
          v43 = 1024;
          v44 = v38;
LABEL_65:
          v39 = (char *)_os_log_send_and_compose_impl(v33, &v45, 0, 0);

          if (v39)
            sub_100007780(v39);
          goto LABEL_69;
        }
LABEL_68:
        v39 = 0;
LABEL_69:
        free(v39);
LABEL_70:

        v29 = 0;
        goto LABEL_71;
      }
    }
    v29 = 1;
LABEL_71:
    sandbox_user_state_item_buffer_destroy(v18);
    return v29;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v8 = (id)qword_1000E0060;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v42 = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      LOWORD(v45) = 0;
      v11 = (const char *)_os_log_send_and_compose_impl(v10, &v42, 0, 0);
      v12 = (char *)v11;
      if (v11)
        sub_100007780(v11);
    }
    else
    {
      v12 = 0;
    }
    free(v12);
  }

  return 0;
}

void sub_100050B08(int32x2_t *a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  __int32 v5;
  __int32 v6;
  const char *v7;
  char *v8;
  void *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  __int32 v13;
  const char *v14;
  char *v15;
  int active;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  __int32 v20;
  const char *v21;
  char *v22;
  __int32 v23;
  NSObject *v24;
  unsigned int v25;
  _BOOL4 v26;
  char *v27;
  uint64_t v28;
  __int32 v29;
  const char *v30;
  const char *v31;
  _QWORD block[5];
  uint64_t v33;
  __int16 v34;
  __int32 v35;
  uint64_t v36;

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v2 = (id)qword_1000E0070;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v36 = 0;
    v3 = sub_100007750(0);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = a1[4].i32[0];
      v6 = a1[4].i32[1];
      LODWORD(v33) = 67109376;
      HIDWORD(v33) = v5;
      v34 = 1024;
      v35 = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v4, &v36, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = (void *)os_transaction_create("usermanagerd user switch");
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v10 = (id)qword_1000E0070;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 0;
    v11 = sub_100007750(0);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      v13 = a1[4].i32[0];
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v13;
      v14 = (const char *)_os_log_send_and_compose_impl(v12, &v33, 0, 0);
      v15 = (char *)v14;
      if (v14)
        sub_100007780(v14);
    }
    else
    {
      v15 = 0;
    }
    free(v15);
  }

  active = launch_active_user_logout(a1[4].u32[0]);
  if (active)
  {
    v23 = active;
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v24 = (id)qword_1000E0070;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      v36 = 0;
      v25 = sub_100007750(0);
      v26 = os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      v27 = 0;
      if (v26)
        v28 = v25;
      else
        v28 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        v29 = a1[4].i32[0];
        LODWORD(v33) = 67109376;
        HIDWORD(v33) = v29;
        v34 = 1024;
        v35 = v23;
        v30 = (const char *)_os_log_send_and_compose_impl(v28, &v36, 0, 0);
        v27 = 0;
        if (v30)
        {
          v31 = v30;
          sub_100007780(v30);
          v27 = (char *)v31;
        }
      }
      free(v27);
    }

    sub_10001CF20("UserManagement user switch failed: launch_active_user_logout(%d) failed: %d", a1[4].i32[0], v23);
  }
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v17 = (id)qword_1000E0070;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 0;
    v18 = sub_100007750(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v19)
    {
      v20 = a1[4].i32[0];
      LODWORD(v36) = 67109120;
      HIDWORD(v36) = v20;
      v21 = (const char *)_os_log_send_and_compose_impl(v19, &v33, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100050F68;
  block[3] = &unk_1000D0DE0;
  block[4] = vrev64_s32(a1[4]);
  dispatch_sync((dispatch_queue_t)qword_1000E0320, block);

}

void sub_100050F68(NSObject *a1)
{
  void *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  char *v14;
  int active;
  uint64_t v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int isa_high;
  unsigned int v27;
  const char *v28;
  char *v29;
  uint64_t v30;
  void *v31;
  void *v32;
  unsigned int v33;
  _BOOL4 v34;
  char *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  int v39;
  NSObject *v40;
  unsigned int v41;
  _BOOL4 v42;
  char *v43;
  uint64_t v44;
  unsigned int isa;
  const char *v46;
  const char *v47;
  _BYTE v48[14];
  uint64_t v49;

  v2 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v2, "resetStateForUserSwitch");

  if (qword_1000E0308)
  {
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v3 = (id)qword_1000E0070;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v49 = 0;
      v4 = sub_100007750(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        *(_DWORD *)v48 = 134217984;
        *(_QWORD *)&v48[4] = qword_1000E0308;
        v6 = (const char *)_os_log_send_and_compose_impl(v5, &v49, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

    dispatch_source_cancel((dispatch_source_t)qword_1000E0308);
    v8 = (void *)qword_1000E0308;
    qword_1000E0308 = 0;

  }
  if (!sub_100048D34(a1[4].isa, HIDWORD(a1[4].isa)))
  {
    if (qword_1000E0078 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    a1 = (id)qword_1000E0070;
    if (os_log_type_enabled(a1, OS_LOG_TYPE_ERROR))
    {
      *(_QWORD *)v48 = 0;
      v33 = sub_100007750(0);
      v34 = os_log_type_enabled(a1, OS_LOG_TYPE_ERROR);
      v35 = 0;
      if (v34)
        v36 = v33;
      else
        v36 = v33 & 0xFFFFFFFE;
      if ((_DWORD)v36)
      {
        LOWORD(v49) = 0;
        v37 = (const char *)_os_log_send_and_compose_impl(v36, v48, 0, 0);
        v35 = 0;
        if (v37)
        {
          v38 = v37;
          sub_100007780(v37);
          v35 = (char *)v38;
        }
      }
      free(v35);
    }

    active = sub_10001CF20("UserManagement user switch failed: failed to switch foreground user");
LABEL_63:
    v39 = active;
    if (v16 != -1)
      dispatch_once(&qword_1000E0078, &stru_1000D1570);
    v40 = (id)qword_1000E0070;
    if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
    {
      v49 = 0;
      v41 = sub_100007750(0);
      v42 = os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
      v43 = 0;
      if (v42)
        v44 = v41;
      else
        v44 = v41 & 0xFFFFFFFE;
      if ((_DWORD)v44)
      {
        isa = a1[4].isa;
        *(_DWORD *)v48 = 67109376;
        *(_DWORD *)&v48[4] = isa;
        *(_WORD *)&v48[8] = 1024;
        *(_DWORD *)&v48[10] = v39;
        v46 = (const char *)_os_log_send_and_compose_impl(v44, &v49, 0, 0);
        v43 = 0;
        if (v46)
        {
          v47 = v46;
          sub_100007780(v46);
          v43 = (char *)v47;
        }
      }
      free(v43);
    }

    sub_10001CF20("UserManagement user switch failed: launch_active_user_login(%d) failed: %d", LODWORD(a1[4].isa), v39);
  }
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v9 = (id)qword_1000E0070;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v48 = 0;
    v10 = sub_100007750(0);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v12 = a1[4].isa;
      LODWORD(v49) = 67109120;
      HIDWORD(v49) = v12;
      v13 = (const char *)_os_log_send_and_compose_impl(v11, v48, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  active = launch_active_user_login(LODWORD(a1[4].isa));
  v16 = qword_1000E0078;
  if (active)
    goto LABEL_63;
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v17 = (id)qword_1000E0070;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v48 = 0;
    v18 = sub_100007750(0);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v19 = v18;
    else
      v19 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v19)
    {
      v20 = a1[4].isa;
      LODWORD(v49) = 67109120;
      HIDWORD(v49) = v20;
      v21 = (const char *)_os_log_send_and_compose_impl(v19, v48, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v23 = (id)qword_1000E0070;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v49 = 0;
    v24 = sub_100007750(0);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      v27 = a1[4].isa;
      isa_high = HIDWORD(a1[4].isa);
      *(_DWORD *)v48 = 67109376;
      *(_DWORD *)&v48[4] = isa_high;
      *(_WORD *)&v48[8] = 1024;
      *(_DWORD *)&v48[10] = v27;
      v28 = (const char *)_os_log_send_and_compose_impl(v25, &v49, 0, 0);
      v29 = (char *)v28;
      if (v28)
        sub_100007780(v28);
    }
    else
    {
      v29 = 0;
    }
    free(v29);
  }

  sub_1000599BC(qword_1000E0038);
  byte_1000E0048 = 0;
  v30 = sub_10001BEE8(qword_1000E0318);
  v31 = (void *)objc_claimAutoreleasedReturnValue(v30);
  v32 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "com.apple.mobile.usermanagerd.foregrounduser_changed"));
  objc_msgSend(v31, "post:", v32);

  if (dword_1000E02C0 == 1)
    sub_10001F560();
}

void sub_1000515C8(int a1)
{
  const __CFDictionary *v1;
  const __CFDictionary *v2;
  int v3;
  const __CFData *v4;
  uint64_t *v5;
  int v6;
  int v7;
  NSObject *v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  NSObject *v26;
  uint64_t v27;
  char *v28;
  UInt8 *BytePtr;
  CFIndex Length;
  const __CFArray *v31;
  CFIndex v32;
  char v33;
  int v34;
  uint64_t v35;
  uint64_t *v36;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v38;
  CFTypeID v39;
  int v40;
  int v41;
  NSObject *v42;
  unsigned int v43;
  NSObject *v44;
  uint64_t v45;
  char *v46;
  NSObject *v47;
  unsigned int v48;
  NSObject *v49;
  uint64_t v50;
  char *v51;
  NSObject *v52;
  unsigned int v53;
  NSObject *v54;
  uint64_t v55;
  char *v56;
  NSObject *v57;
  unsigned int v58;
  uint64_t v59;
  char *v60;
  unsigned int v61;
  uint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  const __CFData *v71;
  NSObject *v72;
  unsigned int v73;
  NSObject *v74;
  uint64_t v75;
  char *v76;
  NSObject *v77;
  unsigned int v78;
  NSObject *v79;
  uint64_t v80;
  const char *v81;
  unsigned int v82;
  NSObject *v83;
  uint64_t v84;
  const char *v85;
  UInt8 *v86;
  CFIndex v87;
  const __CFArray *v88;
  NSObject *v89;
  unsigned int v90;
  NSObject *v91;
  uint64_t v92;
  char *v93;
  CFIndex v94;
  const __CFNumber *v95;
  const __CFNumber *v96;
  CFTypeID v97;
  uint64_t v98;
  NSObject *v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t *v102;
  unsigned int v103;
  char *v104;
  char *v105;
  int v106;
  const __CFData *v107;
  NSObject *v108;
  unsigned int v109;
  NSObject *v110;
  uint64_t v111;
  char *v112;
  NSObject *v113;
  unsigned int v114;
  NSObject *v115;
  uint64_t v116;
  const char *v117;
  unsigned int v118;
  NSObject *v119;
  uint64_t v120;
  const char *v121;
  UInt8 *v122;
  CFIndex v123;
  const __CFArray *v124;
  NSObject *v125;
  unsigned int v126;
  NSObject *v127;
  uint64_t v128;
  char *v129;
  CFIndex v130;
  const __CFNumber *v131;
  const __CFNumber *v132;
  CFTypeID v133;
  uint64_t v134;
  NSObject *v135;
  unsigned int v136;
  uint64_t v137;
  uint64_t *v138;
  unsigned int v139;
  char *v140;
  char *v141;
  const __CFString *v142;
  uint64_t v143;
  NSObject *v144;
  unsigned int v145;
  uint64_t v146;
  NSObject *v147;
  unsigned int v148;
  NSObject *v149;
  uint64_t v150;
  char *v151;
  unsigned int v152;
  char *v153;
  CFComparisonResult v154;
  NSObject *v155;
  unsigned int v156;
  uint64_t v157;
  unsigned int v158;
  unsigned int v159;
  void *v160;
  NSObject *v161;
  unsigned int v162;
  uint64_t v163;
  unsigned int v164;
  char *v165;
  CFIndex Count;
  CFIndex v167;
  CFIndex i;
  const void *v169;
  CFTypeID v170;
  CFTypeID TypeID;
  uint64_t v172;
  const __CFDictionary *v173;
  const __CFDictionary *v174;
  int valuePtr;
  _BYTE v177[12];
  uint64_t v178;

  v1 = (const __CFDictionary *)sub_100086AB4("/private/var//keybags/usersession.kb");
  if (v1)
  {
    v2 = v1;
    valuePtr = 0;
    v3 = sub_100004318(v1, CFSTR("NUMENT"));
    v4 = (const __CFData *)sub_1000865B8(v2, CFSTR("BLOB"));
    v5 = &qword_1000E0000;
    if (CFDictionaryContainsKey(v2, CFSTR("DEVICECONFIG")))
    {
      v6 = sub_100004318(v2, CFSTR("DEVICECONFIG"));
      v7 = v6;
      if (v6 >= 3)
      {
        v172 = sub_10001CF20("usermanagerd: device configuration %d is from the future! Downgrading is not supported.", v6);
        sub_1000535D8(v172, v173);
        return;
      }
      dword_1000E02C0 = v6;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v8 = (id)qword_1000E0060;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v177 = 0;
        v9 = sub_100007750(1);
        v10 = v8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          v11 = v9;
        else
          v11 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LODWORD(v178) = 67109120;
          HIDWORD(v178) = dword_1000E02C0;
          v12 = (char *)_os_log_send_and_compose_impl(v11, v177, 0, 0);

          if (v12)
            sub_100007780(v12);
        }
        else
        {

          v12 = 0;
        }
        v5 = &qword_1000E0000;
        free(v12);
      }

      v18 = dword_1000E02C0 == 0;
    }
    else
    {
      dword_1000E02C0 = 0;
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v13 = (id)qword_1000E0060;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v177 = 0;
        v14 = sub_100007750(1);
        v15 = v13;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v16 = v14;
        else
          v16 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          LODWORD(v178) = 67109120;
          HIDWORD(v178) = dword_1000E02C0;
          v17 = (char *)_os_log_send_and_compose_impl(v16, v177, 0, 0);

          if (v17)
            sub_100007780(v17);
        }
        else
        {

          v17 = 0;
        }
        free(v17);
        v5 = &qword_1000E0000;
      }

      v7 = 0;
      v18 = 1;
    }
    if (CFDictionaryContainsKey(v2, CFSTR("BOOTEDUSER")))
    {
      dword_1000DF218 = sub_100004318(v2, CFSTR("BOOTEDUSER"));
      if (v5[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v177 = 0;
        v20 = sub_100007750(1);
        v19 = v19;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LODWORD(v178) = 67109120;
          HIDWORD(v178) = dword_1000DF218;
          goto LABEL_46;
        }
        goto LABEL_48;
      }
    }
    else
    {
      dword_1000DF218 = 501;
      if (v5[13] != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v19 = (id)qword_1000E0060;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v177 = 0;
        v22 = sub_100007750(1);
        v19 = v19;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          v21 = v22;
        else
          v21 = v22 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LODWORD(v178) = 67109120;
          HIDWORD(v178) = dword_1000DF218;
LABEL_46:
          v23 = (char *)_os_log_send_and_compose_impl(v21, v177, 0, 0);

          if (v23)
            sub_100007780(v23);
          goto LABEL_49;
        }
LABEL_48:

        v23 = 0;
LABEL_49:
        free(v23);
        v5 = &qword_1000E0000;
      }
    }

    qword_1000DF228 = sub_100086628(v2, CFSTR("APNSID"));
    if (v5[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v24 = (id)qword_1000E0060;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v178 = 0;
      v25 = sub_100007750(1);
      v26 = v24;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        v27 = v25;
      else
        v27 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v27)
      {
        *(_DWORD *)v177 = 134217984;
        *(_QWORD *)&v177[4] = qword_1000DF228;
        v28 = (char *)_os_log_send_and_compose_impl(v27, &v178, 0, 0);

        if (v28)
          sub_100007780(v28);
      }
      else
      {

        v28 = 0;
      }
      v5 = &qword_1000E0000;
      free(v28);
    }

    if (v3)
    {
      if (qword_1000E02B0 && CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
        CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02B0);
      v174 = v2;
      BytePtr = (UInt8 *)CFDataGetBytePtr(v4);
      Length = CFDataGetLength(v4);
      v31 = (const __CFArray *)sub_1000868C4(BytePtr, Length);
      if (v3 < 1)
      {
        v34 = 0;
        v33 = 0;
      }
      else
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v35 = v3;
        v36 = &qword_1000E0000;
        do
        {
          ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v31, v32);
          if (ValueAtIndex)
          {
            v38 = ValueAtIndex;
            v39 = CFGetTypeID(ValueAtIndex);
            if (v39 == CFDictionaryGetTypeID())
            {
              v40 = sub_100004318(v38, kUMUserSessionIDKey);
              valuePtr = v40;
              v41 = *((_DWORD *)v36 + 176);
              if (v18 && v40 > 501)
              {
                if (v41 != 1)
                {
                  if (qword_1000E0068 != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v42 = (id)qword_1000E0060;
                  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)v177 = 0;
                    v43 = sub_100007750(1);
                    v44 = v42;
                    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
                      v45 = v43;
                    else
                      v45 = v43 & 0xFFFFFFFE;
                    if ((_DWORD)v45)
                    {
                      LODWORD(v178) = 67109120;
                      HIDWORD(v178) = valuePtr;
                      v46 = (char *)_os_log_send_and_compose_impl(v45, v177, 0, 0);

                      if (v46)
                        sub_100007780(v46);
                    }
                    else
                    {

                      v46 = 0;
                    }
                    v36 = &qword_1000E0000;
                    free(v46);
                  }

                  if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
                    v33 = 1;
                  v7 = 1;
                  v40 = valuePtr;
                }
                v18 = 0;
                *((_DWORD *)v36 + 176) = v7;
                v34 = 1;
                v41 = v7;
              }
              if (v41 == 1 && v40 == 502 && !CFDictionaryContainsKey(v38, kUMUserSessionisPrimaryKey))
              {
                if (qword_1000E0068 != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v47 = (id)qword_1000E0060;
                if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v177 = 0;
                  v48 = sub_100007750(1);
                  v49 = v47;
                  if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                    v50 = v48;
                  else
                    v50 = v48 & 0xFFFFFFFE;
                  if ((_DWORD)v50)
                  {
                    LOWORD(v178) = 0;
                    v51 = (char *)_os_log_send_and_compose_impl(v50, v177, 0, 0);

                    if (v51)
                      sub_100007780(v51);
                  }
                  else
                  {

                    v51 = 0;
                  }
                  free(v51);
                }

                CFDictionarySetValue(v38, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
                CFDictionarySetValue(v38, kUMUserSessionisAdminKey, kCFBooleanTrue);
                v34 = 1;
                v36 = &qword_1000E0000;
              }
              if (v7 == 1 && valuePtr < 502)
                v7 = 1;
              else
                sub_1000254F0(v38, a1);
            }
          }
          ++v32;
        }
        while (v35 != v32);
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v2 = v174;
      v52 = (id)qword_1000E0060;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        v178 = 0;
        v53 = sub_100007750(1);
        v54 = v52;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          v55 = v53;
        else
          v55 = v53 & 0xFFFFFFFE;
        if ((_DWORD)v55)
        {
          *(_DWORD *)v177 = 138412290;
          *(_QWORD *)&v177[4] = qword_1000E02B0;
          v56 = (char *)_os_log_send_and_compose_impl(v55, &v178, 0, 0);

          if (v56)
            sub_100007780(v56);
        }
        else
        {

          v56 = 0;
        }
        free(v56);
      }

      if (v31)
        CFRelease(v31);
      if (v33)
      {
        v5 = &qword_1000E0000;
        if (sub_100031FA8(501, a1))
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v57 = (id)qword_1000E0060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v177 = 0;
            v58 = sub_100007750(1);
            v57 = v57;
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              v59 = v58;
            else
              v59 = v58 & 0xFFFFFFFE;
            if ((_DWORD)v59)
            {
              LOWORD(v178) = 0;
              v60 = (char *)_os_log_send_and_compose_impl(v59, v177, 0, 0);

              if (v60)
                sub_100007780(v60);
            }
            else
            {

              v60 = 0;
            }
            free(v60);
          }
          v34 = 1;
        }
        else
        {
          if (qword_1000E0068 != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v57 = (id)qword_1000E0060;
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v177 = 0;
            v61 = sub_100007750(1);
            v57 = v57;
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
              v62 = v61;
            else
              v62 = v61 & 0xFFFFFFFE;
            if ((_DWORD)v62)
            {
              LOWORD(v178) = 0;
              v63 = (char *)_os_log_send_and_compose_impl(v62, v177, 0, 0);

              if (v63)
                sub_100007780(v63);
            }
            else
            {

              v63 = 0;
            }
            free(v63);
          }
        }

      }
      else
      {
        v5 = &qword_1000E0000;
      }
    }
    else
    {
      v34 = 0;
    }
    if (CFDictionaryContainsKey(v2, CFSTR("MAXUSER")))
    {
      dword_1000DF21C = sub_100004318(v2, CFSTR("MAXUSER"));
    }
    else
    {
      v64 = CFDictionaryContainsKey(v2, CFSTR("MAXUSERSIZE"));
      dword_1000DF21C = -1;
      if (!v64)
      {
        v65 = 0;
LABEL_153:
        qword_1000E02E8 = v65;
        v66 = CFDictionaryContainsKey(v2, CFSTR("USESSTYPE"));
        if (v66)
          v66 = sub_100004318(v2, CFSTR("USESSTYPE"));
        dword_1000E02C8 = v66;
        v67 = CFDictionaryContainsKey(v2, CFSTR("LOGINCHECKIN"));
        if (v67)
          v67 = sub_100004318(v2, CFSTR("LOGINCHECKIN"));
        dword_1000E02CC = v67;
        if (CFDictionaryContainsKey(v2, CFSTR("DEVICENETWORKBG")))
        {
          v68 = sub_100004318(v2, CFSTR("DEVICENETWORKBG"));
          v69 = v68 & ~(v68 >> 31);
        }
        else
        {
          v69 = 0;
        }
        dword_1000E02F0 = v69;
        if (CFDictionaryContainsKey(v2, CFSTR("SYNCENT")))
        {
          v70 = sub_100004318(v2, CFSTR("SYNCENT"));
          if (v70 >= 1)
          {
            v71 = (const __CFData *)sub_1000865B8(v2, CFSTR("SYNCBLOB"));
            if (v5[13] != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v72 = (id)qword_1000E0060;
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v177 = 0;
              v73 = sub_100007750(1);
              v74 = v72;
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
                v75 = v73;
              else
                v75 = v73 & 0xFFFFFFFE;
              if ((_DWORD)v75)
              {
                LODWORD(v178) = 67109120;
                HIDWORD(v178) = v70;
                v76 = (char *)_os_log_send_and_compose_impl(v75, v177, 0, 0);

                if (v76)
                  sub_100007780(v76);
              }
              else
              {

                v76 = 0;
              }
              v5 = &qword_1000E0000;
              free(v76);
            }

            if (qword_1000E02D0 && CFArrayGetCount((CFArrayRef)qword_1000E02D0) >= 1)
              CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02D0);
            v86 = (UInt8 *)CFDataGetBytePtr(v71);
            v87 = CFDataGetLength(v71);
            v88 = (const __CFArray *)sub_1000868C4(v86, v87);
            if (v5[13] != -1)
              dispatch_once(&qword_1000E0068, &stru_1000D1550);
            v89 = (id)qword_1000E0060;
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              v178 = 0;
              v90 = sub_100007750(1);
              v91 = v89;
              if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
                v92 = v90;
              else
                v92 = v90 & 0xFFFFFFFE;
              if ((_DWORD)v92)
              {
                *(_DWORD *)v177 = 138412290;
                *(_QWORD *)&v177[4] = v88;
                v93 = (char *)_os_log_send_and_compose_impl(v92, &v178, 0, 0);

                if (v93)
                  sub_100007780(v93);
              }
              else
              {

                v93 = 0;
              }
              free(v93);
            }

            if (CFArrayGetCount(v88) >= 1)
            {
              v94 = 0;
              do
              {
                v95 = (const __CFNumber *)CFArrayGetValueAtIndex(v88, v94);
                if (v95)
                {
                  v96 = v95;
                  v97 = CFGetTypeID(v95);
                  if (v97 == CFNumberGetTypeID())
                  {
                    CFNumberGetValue(v96, kCFNumberIntType, &valuePtr);
                    if (valuePtr >= 502)
                      sub_100021344(valuePtr);
                  }
                }
                ++v94;
              }
              while (CFArrayGetCount(v88) > v94);
            }
            v98 = v5[13];
            if (qword_1000E02D0)
            {
              if (v98 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v99 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                goto LABEL_234;
              v178 = 0;
              v100 = sub_100007750(1);
              v99 = v99;
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                v101 = v100;
              else
                v101 = v100 & 0xFFFFFFFE;
              if ((_DWORD)v101)
              {
                *(_DWORD *)v177 = 138412290;
                *(_QWORD *)&v177[4] = qword_1000E02D0;
                v102 = &v178;
                goto LABEL_230;
              }
            }
            else
            {
              if (v98 != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v99 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                goto LABEL_234;
              *(_QWORD *)v177 = 0;
              v103 = sub_100007750(1);
              v99 = v99;
              if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
                v101 = v103;
              else
                v101 = v103 & 0xFFFFFFFE;
              if ((_DWORD)v101)
              {
                LOWORD(v178) = 0;
                v102 = (uint64_t *)v177;
LABEL_230:
                v104 = (char *)_os_log_send_and_compose_impl(v101, v102, 0, 0);

                if (v104)
                  sub_100007780(v104);
                goto LABEL_233;
              }
            }

            v104 = 0;
LABEL_233:
            free(v104);
LABEL_234:

            if (v88)
              CFRelease(v88);
LABEL_242:
            if (CFDictionaryContainsKey(v2, CFSTR("LRUENT")))
            {
              v106 = sub_100004318(v2, CFSTR("LRUENT"));
              if (v106 >= 1)
              {
                v107 = (const __CFData *)sub_1000865B8(v2, CFSTR("LRUBLOB"));
                if (v5[13] != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v108 = (id)qword_1000E0060;
                if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v177 = 0;
                  v109 = sub_100007750(1);
                  v110 = v108;
                  if (os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT))
                    v111 = v109;
                  else
                    v111 = v109 & 0xFFFFFFFE;
                  if ((_DWORD)v111)
                  {
                    LODWORD(v178) = 67109120;
                    HIDWORD(v178) = v106;
                    v112 = (char *)_os_log_send_and_compose_impl(v111, v177, 0, 0);

                    if (v112)
                      sub_100007780(v112);
                  }
                  else
                  {

                    v112 = 0;
                  }
                  v5 = &qword_1000E0000;
                  free(v112);
                }

                if (qword_1000E02D8 && CFArrayGetCount((CFArrayRef)qword_1000E02D8) >= 1)
                  CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02D8);
                v122 = (UInt8 *)CFDataGetBytePtr(v107);
                v123 = CFDataGetLength(v107);
                v124 = (const __CFArray *)sub_1000868C4(v122, v123);
                if (v5[13] != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v125 = (id)qword_1000E0060;
                if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
                {
                  v178 = 0;
                  v126 = sub_100007750(1);
                  v127 = v125;
                  if (os_log_type_enabled(v127, OS_LOG_TYPE_DEFAULT))
                    v128 = v126;
                  else
                    v128 = v126 & 0xFFFFFFFE;
                  if ((_DWORD)v128)
                  {
                    *(_DWORD *)v177 = 138412290;
                    *(_QWORD *)&v177[4] = v124;
                    v129 = (char *)_os_log_send_and_compose_impl(v128, &v178, 0, 0);

                    if (v129)
                      sub_100007780(v129);
                  }
                  else
                  {

                    v129 = 0;
                  }
                  free(v129);
                }

                if (CFArrayGetCount(v124) >= 1)
                {
                  v130 = 0;
                  do
                  {
                    v131 = (const __CFNumber *)CFArrayGetValueAtIndex(v124, v130);
                    if (v131)
                    {
                      v132 = v131;
                      v133 = CFGetTypeID(v131);
                      if (v133 == CFNumberGetTypeID())
                      {
                        CFNumberGetValue(v132, kCFNumberIntType, &valuePtr);
                        if (valuePtr >= 502)
                          sub_1000217B8(valuePtr);
                      }
                    }
                    ++v130;
                  }
                  while (CFArrayGetCount(v124) > v130);
                }
                v134 = v5[13];
                if (qword_1000E02D8)
                {
                  if (v134 != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v135 = (id)qword_1000E0060;
                  if (!os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_315;
                  v178 = 0;
                  v136 = sub_100007750(1);
                  v135 = v135;
                  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                    v137 = v136;
                  else
                    v137 = v136 & 0xFFFFFFFE;
                  if ((_DWORD)v137)
                  {
                    *(_DWORD *)v177 = 138412290;
                    *(_QWORD *)&v177[4] = qword_1000E02D8;
                    v138 = &v178;
                    goto LABEL_311;
                  }
                }
                else
                {
                  if (v134 != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v135 = (id)qword_1000E0060;
                  if (!os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_315;
                  *(_QWORD *)v177 = 0;
                  v139 = sub_100007750(1);
                  v135 = v135;
                  if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
                    v137 = v139;
                  else
                    v137 = v139 & 0xFFFFFFFE;
                  if ((_DWORD)v137)
                  {
                    LOWORD(v178) = 0;
                    v138 = (uint64_t *)v177;
LABEL_311:
                    v140 = (char *)_os_log_send_and_compose_impl(v137, v138, 0, 0);

                    if (v140)
                      sub_100007780(v140);
                    goto LABEL_314;
                  }
                }

                v140 = 0;
LABEL_314:
                free(v140);
LABEL_315:

                if (v124)
                  CFRelease(v124);
LABEL_323:
                if (CFDictionaryContainsKey(v2, CFSTR("VOLUMETYPE")))
                {
                  v142 = (const __CFString *)sub_100086748(v2, CFSTR("VOLUMETYPE"));
                  v143 = v5[13];
                  if (v142)
                  {
                    if (v143 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v144 = (id)qword_1000E0060;
                    if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_QWORD *)v177 = 0;
                      v145 = sub_100007750(1);
                      v144 = v144;
                      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                        v146 = v145;
                      else
                        v146 = v145 & 0xFFFFFFFE;
                      if ((_DWORD)v146)
                      {
                        LOWORD(v178) = 0;
                        goto LABEL_350;
                      }
                      goto LABEL_352;
                    }
                  }
                  else
                  {
                    if (v143 != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v144 = (id)qword_1000E0060;
                    if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_QWORD *)v177 = 0;
                      v152 = sub_100007750(1);
                      v144 = v144;
                      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
                        v146 = v152;
                      else
                        v146 = v152 & 0xFFFFFFFE;
                      if ((_DWORD)v146)
                      {
                        LOWORD(v178) = 0;
LABEL_350:
                        v153 = (char *)_os_log_send_and_compose_impl(v146, v177, 0, 0);

                        if (v153)
                          sub_100007780(v153);
                        goto LABEL_353;
                      }
LABEL_352:

                      v153 = 0;
LABEL_353:
                      free(v153);
                    }
                  }

                  if (CFStringCompare(v142, kUMUserSessionAPFSNativeVolume, 0))
                  {
                    v154 = CFStringCompare(v142, kUMUserSessionAPFSConvertedVolume, 0);
                    byte_1000DF220 = 0;
                    if (v154)
                    {
                      qword_1000E0050 = (uint64_t)kUMUserSessionHFSPlusVolume;
                      if (v5[13] != -1)
                        dispatch_once(&qword_1000E0068, &stru_1000D1550);
                      v155 = (id)qword_1000E0060;
                      if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_QWORD *)v177 = 0;
                        v156 = sub_100007750(1);
                        v155 = v155;
                        if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                          v157 = v156;
                        else
                          v157 = v156 & 0xFFFFFFFE;
                        if ((_DWORD)v157)
                        {
                          LOWORD(v178) = 0;
                          goto LABEL_380;
                        }
LABEL_382:

                        v160 = 0;
LABEL_383:
                        free(v160);
                      }
LABEL_384:

                      CFRelease(v2);
                      if (!v34)
                        return;
LABEL_415:
                      sub_10001DE7C();
                      return;
                    }
                    qword_1000E0050 = (uint64_t)kUMUserSessionAPFSConvertedVolume;
                    if (v5[13] != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v155 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_384;
                    *(_QWORD *)v177 = 0;
                    v159 = sub_100007750(1);
                    v155 = v155;
                    if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                      v157 = v159;
                    else
                      v157 = v159 & 0xFFFFFFFE;
                    if (!(_DWORD)v157)
                      goto LABEL_382;
                    LOWORD(v178) = 0;
                  }
                  else
                  {
                    byte_1000DF220 = 1;
                    qword_1000E0050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
                    if (v5[13] != -1)
                      dispatch_once(&qword_1000E0068, &stru_1000D1550);
                    v155 = (id)qword_1000E0060;
                    if (!os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                      goto LABEL_384;
                    *(_QWORD *)v177 = 0;
                    v158 = sub_100007750(1);
                    v155 = v155;
                    if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
                      v157 = v158;
                    else
                      v157 = v158 & 0xFFFFFFFE;
                    if (!(_DWORD)v157)
                      goto LABEL_382;
                    LOWORD(v178) = 0;
                  }
LABEL_380:
                  v160 = (void *)_os_log_send_and_compose_impl(v157, v177, 0, 0);

                  if (v160)
                    sub_100007780((const char *)v160);
                  goto LABEL_383;
                }
                if (v5[13] != -1)
                  dispatch_once(&qword_1000E0068, &stru_1000D1550);
                v147 = (id)qword_1000E0060;
                if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v177 = 0;
                  v148 = sub_100007750(1);
                  v149 = v147;
                  if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
                    v150 = v148;
                  else
                    v150 = v148 & 0xFFFFFFFE;
                  if ((_DWORD)v150)
                  {
                    LOWORD(v178) = 0;
                    v151 = (char *)_os_log_send_and_compose_impl(v150, v177, 0, 0);

                    if (v151)
                      sub_100007780(v151);
                  }
                  else
                  {

                    v151 = 0;
                  }
                  free(v151);
                }

                if (byte_1000DF220 == 1)
                {
                  qword_1000E0050 = (uint64_t)kUMUserSessionAPFSNativeVolume;
                  if (v5[13] != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v161 = (id)qword_1000E0060;
                  if (!os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_409;
                  *(_QWORD *)v177 = 0;
                  v162 = sub_100007750(1);
                  v161 = v161;
                  if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                    v163 = v162;
                  else
                    v163 = v162 & 0xFFFFFFFE;
                  if ((_DWORD)v163)
                  {
                    LOWORD(v178) = 0;
                    goto LABEL_405;
                  }
                }
                else
                {
                  qword_1000E0050 = (uint64_t)kUMUserSessionAPFSConvertedVolume;
                  if (v5[13] != -1)
                    dispatch_once(&qword_1000E0068, &stru_1000D1550);
                  v161 = (id)qword_1000E0060;
                  if (!os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                    goto LABEL_409;
                  *(_QWORD *)v177 = 0;
                  v164 = sub_100007750(1);
                  v161 = v161;
                  if (os_log_type_enabled(v161, OS_LOG_TYPE_DEFAULT))
                    v163 = v164;
                  else
                    v163 = v164 & 0xFFFFFFFE;
                  if ((_DWORD)v163)
                  {
                    LOWORD(v178) = 0;
LABEL_405:
                    v165 = (char *)_os_log_send_and_compose_impl(v163, v177, 0, 0);

                    if (v165)
                      sub_100007780(v165);
                    goto LABEL_408;
                  }
                }

                v165 = 0;
LABEL_408:
                free(v165);
LABEL_409:

                if (qword_1000E02B0)
                {
                  Count = CFArrayGetCount((CFArrayRef)qword_1000E02B0);
                  if (Count >= 1)
                  {
                    v167 = Count;
                    for (i = 0; i != v167; ++i)
                    {
                      v169 = CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, i);
                      v170 = CFGetTypeID(v169);
                      TypeID = CFDictionaryGetTypeID();
                      if (v170 != TypeID)
                        break;
                      sub_1000535D8(TypeID, (const __CFDictionary *)v169);
                    }
                  }
                }
                CFRelease(v2);
                goto LABEL_415;
              }
              if (v5[13] != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v113 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
              {
LABEL_322:

                goto LABEL_323;
              }
              *(_QWORD *)v177 = 0;
              v118 = sub_100007750(1);
              v119 = v113;
              if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
                v120 = v118;
              else
                v120 = v118 & 0xFFFFFFFE;
              if ((_DWORD)v120)
              {
                LODWORD(v178) = 67109120;
                HIDWORD(v178) = v106;
                v121 = (const char *)_os_log_send_and_compose_impl(v120, v177, 0, 0);

                if (v121)
                  sub_100007780(v121);
              }
              else
              {

                v121 = 0;
              }
              v141 = (char *)v121;
            }
            else
            {
              if (v5[13] != -1)
                dispatch_once(&qword_1000E0068, &stru_1000D1550);
              v113 = (id)qword_1000E0060;
              if (!os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
                goto LABEL_322;
              *(_QWORD *)v177 = 0;
              v114 = sub_100007750(1);
              v115 = v113;
              if (os_log_type_enabled(v115, OS_LOG_TYPE_DEFAULT))
                v116 = v114;
              else
                v116 = v114 & 0xFFFFFFFE;
              if ((_DWORD)v116)
              {
                v178 = 67109120;
                v117 = (const char *)_os_log_send_and_compose_impl(v116, v177, 0, 0);

                if (v117)
                  sub_100007780(v117);
              }
              else
              {

                v117 = 0;
              }
              v141 = (char *)v117;
            }
            free(v141);
            goto LABEL_322;
          }
          if (v5[13] != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v77 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
          {
LABEL_241:

            goto LABEL_242;
          }
          *(_QWORD *)v177 = 0;
          v82 = sub_100007750(1);
          v83 = v77;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
            v84 = v82;
          else
            v84 = v82 & 0xFFFFFFFE;
          if ((_DWORD)v84)
          {
            LODWORD(v178) = 67109120;
            HIDWORD(v178) = v70;
            v85 = (const char *)_os_log_send_and_compose_impl(v84, v177, 0, 0);

            if (v85)
              sub_100007780(v85);
          }
          else
          {

            v85 = 0;
          }
          v105 = (char *)v85;
        }
        else
        {
          if (v5[13] != -1)
            dispatch_once(&qword_1000E0068, &stru_1000D1550);
          v77 = (id)qword_1000E0060;
          if (!os_log_type_enabled(v77, OS_LOG_TYPE_DEFAULT))
            goto LABEL_241;
          *(_QWORD *)v177 = 0;
          v78 = sub_100007750(1);
          v79 = v77;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
            v80 = v78;
          else
            v80 = v78 & 0xFFFFFFFE;
          if ((_DWORD)v80)
          {
            v178 = 67109120;
            v81 = (const char *)_os_log_send_and_compose_impl(v80, v177, 0, 0);

            if (v81)
              sub_100007780(v81);
          }
          else
          {

            v81 = 0;
          }
          v105 = (char *)v81;
        }
        free(v105);
        goto LABEL_241;
      }
    }
    v65 = sub_100086628(v2, CFSTR("MAXUSERSIZE"));
    goto LABEL_153;
  }
}

void sub_1000535D8(uint64_t a1, const __CFDictionary *a2)
{
  int v3;
  const void **v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  char *v19;
  char v20[1024];

  v3 = sub_100004318(a2, kUMUserSessionIDKey);
  if (!CFDictionaryContainsKey(a2, kUMUserSessionUserVolumeTypeKey))
    CFDictionarySetValue(a2, kUMUserSessionUserVolumeTypeKey, (const void *)qword_1000E0050);
  if (byte_1000DF220)
  {
    if (!CFDictionaryContainsKey(a2, kUMUserSessionNeedsMountKey))
    {
      if (v3 == 502)
        v4 = (const void **)&kCFBooleanFalse;
      else
        v4 = (const void **)&kCFBooleanTrue;
      CFDictionarySetValue(a2, kUMUserSessionNeedsMountKey, *v4);
    }
    return;
  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v5 = (id)qword_1000E0060;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v20 = 0;
    v6 = sub_100007750(1);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      LOWORD(v18) = 0;
      v8 = (const char *)_os_log_send_and_compose_impl(v7, v20, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  if (sub_100086788(a2, kUMUserSessionHomeDirKey, v20, 1024))
  {
    v17 = 1;
    if (fsctl(v20, 0x80084A02uLL, &v17, 0))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
      v16 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        v18 = 136315138;
        v19 = v20;
        goto LABEL_38;
      }
    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v10 = (id)qword_1000E0060;
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        goto LABEL_42;
      v16 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v13;
      else
        v12 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        v18 = 136315138;
        v19 = v20;
LABEL_38:
        v14 = (const char *)_os_log_send_and_compose_impl(v12, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
        goto LABEL_41;
      }
    }
    v15 = 0;
LABEL_41:
    free(v15);
LABEL_42:

  }
  if (!CFDictionaryContainsKey(a2, kUMUserSessionNeedsMountKey))
    CFDictionarySetValue(a2, kUMUserSessionNeedsMountKey, kCFBooleanFalse);
}

__CFDictionary *sub_1000539C4(int a1)
{
  NSObject *v2;
  unsigned int v3;
  NSObject *v4;
  uint64_t v5;
  char *v6;
  __CFDictionary *v7;
  CFNumberRef v8;
  CFNumberRef v9;
  NSObject *v10;
  unsigned int v11;
  NSObject *v12;
  uint64_t v13;
  char *v14;
  CFStringRef v15;
  CFStringRef v16;
  NSObject *v17;
  unsigned int v18;
  NSObject *v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  NSObject *v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  CFIndex Code;
  char *v36;
  NSObject *v37;
  unsigned int v38;
  NSObject *v39;
  uint64_t v40;
  char *v41;
  CFStringRef v42;
  NSObject *v43;
  unsigned int v44;
  NSObject *v45;
  uint64_t v46;
  char *v47;
  NSObject *v48;
  unsigned int v49;
  NSObject *v50;
  uint64_t v51;
  char *v52;
  CFStringRef v53;
  NSObject *v54;
  unsigned int v55;
  NSObject *v56;
  uint64_t v57;
  char *v58;
  CFStringRef v59;
  CFAbsoluteTime Current;
  CFDateRef v61;
  NSObject *v62;
  unsigned int v63;
  NSObject *v64;
  uint64_t v65;
  char *v66;
  NSObject *v67;
  unsigned int v68;
  NSObject *v69;
  uint64_t v70;
  char *v71;
  CFStringRef v72;
  CFStringRef v73;
  NSObject *v74;
  unsigned int v75;
  NSObject *v76;
  uint64_t v77;
  char *v78;
  NSObject *v79;
  unsigned int v80;
  NSObject *v81;
  uint64_t v82;
  char *v83;
  NSObject *v84;
  unsigned int v85;
  NSObject *v86;
  uint64_t v87;
  char *v88;
  NSObject *v89;
  unsigned int v90;
  NSObject *v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  unsigned int v95;
  NSObject *v96;
  uint64_t v97;
  char *v98;
  uint64_t v100;
  CFErrorRef err;
  CFUUIDRef uuid;
  int v103;
  int valuePtr;
  _BYTE v105[12];
  CFTypeRef cf;
  char cStr[12];
  int v108;

  uuid = 0;
  valuePtr = 501;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v103 = 0;
  v2 = (id)qword_1000E0060;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)cStr = 0;
    v3 = sub_100007750(1);
    v4 = v2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v5 = v3;
    else
      v5 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      *(_QWORD *)v105 = 0x1F504000100;
      v6 = (char *)_os_log_send_and_compose_impl(v5, cStr, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {

      v6 = 0;
    }
    free(v6);
  }

  v7 = sub_100086BFC();
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  CFDictionarySetValue(v7, kUMUserSessionIDKey, v8);
  CFRelease(v8);
  v103 = valuePtr;
  v9 = CFNumberCreate(0, kCFNumberIntType, &v103);
  CFDictionarySetValue(v7, kUMUserSessionGroupIDKey, v9);
  CFRelease(v9);
  CFDictionarySetValue(v7, kUMUserSessionTypeKey, kUMUserSessionOther);
  bzero(&cStr[7], 0x3F9uLL);
  strcpy(cStr, "mobile");
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v10 = (id)qword_1000E0060;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    cf = 0;
    v11 = sub_100007750(1);
    v12 = v10;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v13 = v11;
    else
      v13 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      *(_DWORD *)v105 = 136315138;
      *(_QWORD *)&v105[4] = cStr;
      v14 = (char *)_os_log_send_and_compose_impl(v13, &cf, 0, 0);

      if (v14)
        sub_100007780(v14);
    }
    else
    {

      v14 = 0;
    }
    free(v14);
  }

  v15 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v15)
  {
    v16 = v15;
    CFDictionarySetValue(v7, kUMUserSessionShortNameKey, v15);
    CFDictionarySetValue(v7, kUMUserSessionFirstNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionLastNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionNameKey, v16);
    CFDictionarySetValue(v7, kUMUserSessionDisplayNameKey, v16);
    CFRelease(v16);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v17 = (id)qword_1000E0060;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v105 = 0;
      v18 = sub_100007750(1);
      v19 = v17;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v20 = v18;
      else
        v20 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v20)
      {
        LOWORD(cf) = 0;
        v21 = (char *)_os_log_send_and_compose_impl(v20, v105, 0, 0);

        if (v21)
          sub_100007780(v21);
      }
      else
      {

        v21 = 0;
      }
      free(v21);
    }

  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v22 = (id)qword_1000E0060;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v23 = sub_100007750(1);
    v24 = v22;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v25 = v23;
    else
      v25 = v23 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      LOWORD(cf) = 0;
      v26 = (char *)_os_log_send_and_compose_impl(v25, v105, 0, 0);

      if (v26)
        sub_100007780(v26);
    }
    else
    {

      v26 = 0;
    }
    free(v26);
  }

  CFDictionarySetValue(v7, kUMUserSessionLanguageKey, CFSTR("en_US"));
  if (a1)
  {
    cf = 0;
    err = 0;
    if (AKSIdentityGetPrimary(&uuid, &cf, &err))
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v27 = (id)qword_1000E0060;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v105 = 0;
        v28 = sub_100007750(1);
        v29 = v27;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          v30 = v28;
        else
          v30 = v28 & 0xFFFFFFFE;
        if ((_DWORD)v30)
        {
          LOWORD(v100) = 0;
          v31 = (char *)_os_log_send_and_compose_impl(v30, v105, 0, 0);

          if (v31)
            sub_100007780(v31);
        }
        else
        {

          v31 = 0;
        }
        free(v31);
      }

      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v37 = (id)qword_1000E0060;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v105 = 0;
        v38 = sub_100007750(1);
        v39 = v37;
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          v40 = v38;
        else
          v40 = v38 & 0xFFFFFFFE;
        if ((_DWORD)v40)
        {
          LOWORD(v100) = 0;
          v41 = (char *)_os_log_send_and_compose_impl(v40, v105, 0, 0);

          if (v41)
            sub_100007780(v41);
        }
        else
        {

          v41 = 0;
        }
        free(v41);
      }

      if (uuid)
      {
        v42 = CFUUIDCreateString(kCFAllocatorDefault, uuid);
        CFDictionarySetValue(v7, kUMUserSessionUUIDKey, v42);
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v43 = (id)qword_1000E0060;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          v100 = 0;
          v44 = sub_100007750(1);
          v45 = v43;
          if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            v46 = v44;
          else
            v46 = v44 & 0xFFFFFFFE;
          if ((_DWORD)v46)
          {
            *(_DWORD *)v105 = 138412290;
            *(_QWORD *)&v105[4] = v42;
            v47 = (char *)_os_log_send_and_compose_impl(v46, &v100, 0, 0);

            if (v47)
              sub_100007780(v47);
          }
          else
          {

            v47 = 0;
          }
          free(v47);
        }

        if (uuid)
          CFRelease(uuid);
        uuid = 0;
        if (cf)
        {
          CFRelease(cf);
          cf = 0;
        }
        if (v42)
          CFRelease(v42);
        goto LABEL_131;
      }
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v48 = (id)qword_1000E0060;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v105 = 0;
        v49 = sub_100007750(1);
        v50 = v48;
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          v51 = v49;
        else
          v51 = v49 & 0xFFFFFFFE;
        if ((_DWORD)v51)
        {
          LOWORD(v100) = 0;
          v52 = (char *)_os_log_send_and_compose_impl(v51, v105, 0, 0);

          if (v52)
            sub_100007780(v52);
        }
        else
        {

          v52 = 0;
        }
        free(v52);
      }

    }
    else
    {
      if (qword_1000E0068 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v32 = (id)qword_1000E0060;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v100 = 0;
        LODWORD(v33) = sub_100007750(1);
        v34 = v32;
        if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          v33 = v33;
        else
          v33 = v33 & 0xFFFFFFFE;
        if ((_DWORD)v33)
        {
          Code = CFErrorGetCode(err);
          *(_DWORD *)v105 = 134217984;
          *(_QWORD *)&v105[4] = Code;
          v36 = (char *)_os_log_send_and_compose_impl(v33, &v100, 0, 0);

          if (v36)
            sub_100007780(v36);
        }
        else
        {

          v36 = 0;
        }
        free(v36);
      }

      if (err)
        CFRelease(err);
    }
  }
  uuid = CFUUIDCreate(0);
  v53 = CFUUIDCreateString(0, uuid);
  CFDictionarySetValue(v7, kUMUserSessionUUIDKey, v53);
  if (uuid)
  {
    CFRelease(uuid);
    uuid = 0;
  }
  if (v53)
    CFRelease(v53);
  uuid = 0;
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v54 = (id)qword_1000E0060;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v55 = sub_100007750(1);
    v56 = v54;
    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      v57 = v55;
    else
      v57 = v55 & 0xFFFFFFFE;
    if ((_DWORD)v57)
    {
      LOWORD(cf) = 0;
      v58 = (char *)_os_log_send_and_compose_impl(v57, v105, 0, 0);

      if (v58)
        sub_100007780(v58);
    }
    else
    {

      v58 = 0;
    }
    free(v58);
  }

LABEL_131:
  uuid = CFUUIDCreate(0);
  v59 = CFUUIDCreateString(0, uuid);
  CFDictionarySetValue(v7, kUMUserSessionAlternateDSIDKey, v59);
  if (uuid)
  {
    CFRelease(uuid);
    uuid = 0;
  }
  if (v59)
    CFRelease(v59);
  uuid = 0;
  Current = CFAbsoluteTimeGetCurrent();
  v61 = CFDateCreate(kCFAllocatorDefault, Current);
  CFDictionarySetValue(v7, kUMUserSessionCreateTimeStampKey, v61);
  CFDictionarySetValue(v7, kUMUserSessionLoginTimeStampKey, v61);
  if (v61)
    CFRelease(v61);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v62 = (id)qword_1000E0060;
  if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v63 = sub_100007750(1);
    v64 = v62;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
      v65 = v63;
    else
      v65 = v63 & 0xFFFFFFFE;
    if ((_DWORD)v65)
    {
      LOWORD(cf) = 0;
      v66 = (char *)_os_log_send_and_compose_impl(v65, v105, 0, 0);

      if (v66)
        sub_100007780(v66);
    }
    else
    {

      v66 = 0;
    }
    free(v66);
  }

  CFDictionarySetValue(v7, kUMUserSessionLoginUserKey, kCFBooleanFalse);
  CFDictionarySetValue(v7, kUMUserSessionDirtyKey, kCFBooleanFalse);
  CFDictionarySetValue(v7, kUMUserSessionForegroundKey, kCFBooleanTrue);
  CFDictionarySetValue(v7, kUMUserSessionisPrimaryKey, kCFBooleanTrue);
  CFDictionarySetValue(v7, kUMUserSessionisAdminKey, kCFBooleanTrue);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v67 = (id)qword_1000E0060;
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v68 = sub_100007750(1);
    v69 = v67;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      v70 = v68;
    else
      v70 = v68 & 0xFFFFFFFE;
    if ((_DWORD)v70)
    {
      LOWORD(cf) = 0;
      v71 = (char *)_os_log_send_and_compose_impl(v70, v105, 0, 0);

      if (v71)
        sub_100007780(v71);
    }
    else
    {

      v71 = 0;
    }
    free(v71);
  }

  bzero(&v108, 0x3F4uLL);
  strcpy(cStr, "/var/mobile");
  v72 = CFStringCreateWithCString(0, cStr, 0x8000100u);
  if (v72)
  {
    v73 = v72;
    CFDictionarySetValue(v7, kUMUserSessionLibinfoHomeDirKey, v72);
    CFRelease(v73);
  }
  else
  {
    if (qword_1000E0068 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v74 = (id)qword_1000E0060;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v105 = 0;
      v75 = sub_100007750(1);
      v76 = v74;
      if (os_log_type_enabled(v76, OS_LOG_TYPE_DEFAULT))
        v77 = v75;
      else
        v77 = v75 & 0xFFFFFFFE;
      if ((_DWORD)v77)
      {
        LOWORD(cf) = 0;
        v78 = (char *)_os_log_send_and_compose_impl(v77, v105, 0, 0);

        if (v78)
          sub_100007780(v78);
      }
      else
      {

        v78 = 0;
      }
      free(v78);
    }

  }
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v79 = (id)qword_1000E0060;
  if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
  {
    cf = 0;
    v80 = sub_100007750(1);
    v81 = v79;
    if (os_log_type_enabled(v81, OS_LOG_TYPE_DEFAULT))
      v82 = v80;
    else
      v82 = v80 & 0xFFFFFFFE;
    if ((_DWORD)v82)
    {
      *(_DWORD *)v105 = 136315138;
      *(_QWORD *)&v105[4] = cStr;
      v83 = (char *)_os_log_send_and_compose_impl(v82, &cf, 0, 0);

      if (v83)
        sub_100007780(v83);
    }
    else
    {

      v83 = 0;
    }
    free(v83);
  }

  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v84 = (id)qword_1000E0060;
  if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v85 = sub_100007750(1);
    v86 = v84;
    if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      v87 = v85;
    else
      v87 = v85 & 0xFFFFFFFE;
    if ((_DWORD)v87)
    {
      LOWORD(cf) = 0;
      v88 = (char *)_os_log_send_and_compose_impl(v87, v105, 0, 0);

      if (v88)
        sub_100007780(v88);
    }
    else
    {

      v88 = 0;
    }
    free(v88);
  }

  sub_1000254F0(v7, 0);
  if (qword_1000E0068 != -1)
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
  v89 = (id)qword_1000E0060;
  if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v90 = sub_100007750(1);
    v91 = v89;
    if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
      v92 = v90;
    else
      v92 = v90 & 0xFFFFFFFE;
    if ((_DWORD)v92)
    {
      LOWORD(cf) = 0;
      v93 = (char *)_os_log_send_and_compose_impl(v92, v105, 0, 0);

      if (v93)
        sub_100007780(v93);
    }
    else
    {

      v93 = 0;
    }
    free(v93);
  }

  sub_10001DE7C();
  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v94 = (id)qword_1000E0070;
  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v105 = 0;
    v95 = sub_100007750(1);
    v96 = v94;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
      v97 = v95;
    else
      v97 = v95 & 0xFFFFFFFE;
    if ((_DWORD)v97)
    {
      LODWORD(cf) = 67109120;
      HIDWORD(cf) = valuePtr;
      v98 = (char *)_os_log_send_and_compose_impl(v97, v105, 0, 0);

      if (v98)
        sub_100007780(v98);
    }
    else
    {

      v98 = 0;
    }
    free(v98);
  }

  return v7;
}

void sub_100054CD0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "persona");
  v2 = (void *)qword_1000E0080;
  qword_1000E0080 = (uint64_t)v1;

}

void sub_100054D04(uint64_t a1)
{
  NSObject *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  int *v16;
  char *v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  NSObject *v21;
  int *v22;
  char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  NSObject *v27;
  uint64_t v28;
  char *v29;
  unsigned int v30;
  uint64_t v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  unsigned int v35;
  char *v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  unsigned int v40;
  uint64_t v41;
  unsigned int v42;
  char *v43;
  unsigned int v44;
  int v45;
  const void *v46;
  uint64_t v47;
  const void *v48;
  NSObject *v49;
  unsigned int v50;
  NSObject *v51;
  uint64_t v52;
  char *v53;
  NSObject *v54;
  unsigned int v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  void *v59;
  unsigned int v60;
  id v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  stat *v65;
  uint64_t v66;
  id v67;
  char *v68;
  NSObject *v69;
  unsigned int v70;
  NSObject *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  void *v75;
  unsigned int v76;
  id v77;
  uint64_t v78;
  NSObject *v79;
  unsigned int v80;
  uint64_t v81;
  stat *v82;
  uint64_t v83;
  id v84;
  char *v85;
  const void *v86;
  uint64_t v87;
  const void *v88;
  NSObject *v89;
  unsigned int v90;
  NSObject *v91;
  uint64_t v92;
  char *v93;
  NSObject *v94;
  unsigned int v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  unsigned int v100;
  id v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  stat *v105;
  uint64_t v106;
  id v107;
  char *v108;
  NSObject *v109;
  unsigned int v110;
  NSObject *v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  void *v115;
  unsigned int v116;
  id v117;
  uint64_t v118;
  NSObject *v119;
  unsigned int v120;
  uint64_t v121;
  stat *v122;
  uint64_t v123;
  id v124;
  char *v125;
  id v126;
  void *v127;
  _BYTE *v128;
  int v129;
  id v130;
  id v131;
  id v132;
  id v133;
  uint64_t v134;
  _BYTE v135[12];
  stat v136;

  if (qword_1000E0078 != -1)
    dispatch_once(&qword_1000E0078, &stru_1000D1570);
  v6 = (id)qword_1000E0070;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v136.st_dev = 0;
    v7 = sub_100007750(0);
    v1 = v6;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      *(_DWORD *)v135 = 67109120;
      *(_DWORD *)&v135[4] = a1;
      v129 = 8;
      v128 = v135;
      v9 = (char *)_os_log_send_and_compose_impl(v8, &v136, 0, 0);

      if (v9)
        sub_100007780(v9);
    }
    else
    {

      v9 = 0;
    }
    free(v9);
  }

  if ((_DWORD)a1 == -1)
  {
    sub_10001CF20("UserManagement user switch failed assertion: uid != -1");
    goto LABEL_263;
  }
  v10 = sub_100004400(qword_1000E0038, a1);
  v11 = objc_claimAutoreleasedReturnValue(v10);
  if (!v11)
  {
LABEL_263:
    sub_10001CF20("UserManagement user switch failed assertion: oldSession != ((void *)0)", v128, v129);
LABEL_264:
    dispatch_once(&qword_1000E0068, &stru_1000D1550);
    goto LABEL_48;
  }
  v6 = v11;
  v4 = &qword_1000E0000;
  v12 = dword_1000E02C0;
  v3 = &qword_1000E0000;
  v2 = &qword_1000E0000;
  if (dword_1000E02C0 == 1)
  {
    sub_10004360C();
    memset(&v136, 0, sizeof(v136));
    if (!lstat("/private/var/mobile", &v136) && (v136.st_mode & 0xF000) == 0x4000)
    {
      if (sub_10001CF78("/private/var/mobile", 0x80000))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v13 = (id)qword_1000E0060;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          v134 = 0;
          LODWORD(v14) = sub_100007750(1);
          v15 = v13;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            v14 = v14;
          else
            v14 = v14 & 0xFFFFFFFE;
          if ((_DWORD)v14)
          {
            v16 = __error();
            v17 = strerror(*v16);
            *(_DWORD *)v135 = 136315138;
            *(_QWORD *)&v135[4] = v17;
            v18 = (char *)_os_log_send_and_compose_impl(v14, &v134, 0, 0);

            if (v18)
              sub_100007780(v18);
          }
          else
          {

            v18 = 0;
          }
          free(v18);
        }

      }
      if (rmdir("/private/var/mobile"))
      {
        if (qword_1000E0068 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v19 = (id)qword_1000E0060;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v134 = 0;
          LODWORD(v20) = sub_100007750(1);
          v21 = v19;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            v20 = v20;
          else
            v20 = v20 & 0xFFFFFFFE;
          if ((_DWORD)v20)
          {
            v22 = __error();
            v23 = strerror(*v22);
            *(_DWORD *)v135 = 136315138;
            *(_QWORD *)&v135[4] = v23;
            v24 = (char *)_os_log_send_and_compose_impl(v20, &v134, 0, 0);

            if (v24)
              sub_100007780(v24);
          }
          else
          {

            v24 = 0;
          }
          free(v24);
        }

      }
    }
    v12 = dword_1000E02C0;
  }
  if (v12 == 2)
    v1 = CFSTR("/private/var/mobile");
  else
    v1 = 0;
  if (qword_1000E0068 != -1)
    goto LABEL_264;
LABEL_48:
  v25 = (id)v2[12];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v136.st_dev = 0;
    v26 = sub_100007750(1);
    v27 = v25;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      v28 = v26;
    else
      v28 = v26 & 0xFFFFFFFE;
    if ((_DWORD)v28)
    {
      *(_WORD *)v135 = 0;
      v29 = (char *)_os_log_send_and_compose_impl(v28, &v136, 0, 0);

      if (v29)
        sub_100007780(v29);
    }
    else
    {

      v29 = 0;
    }
    free(v29);
  }

  v30 = objc_msgSend((id)qword_1000E0030, "unmountVolumeWithSession:mountPath:error:", v6, v1, 0);
  v31 = v3[13];
  if (v30)
  {
    if (v31 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v32 = (id)v2[12];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v33 = sub_100007750(1);
      v32 = v32;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        v34 = v33;
      else
        v34 = v33 & 0xFFFFFFFE;
      if ((_DWORD)v34)
      {
        *(_WORD *)v135 = 0;
        goto LABEL_74;
      }
      goto LABEL_76;
    }
  }
  else
  {
    if (v31 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v32 = (id)v2[12];
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v35 = sub_100007750(1);
      v32 = v32;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        v34 = v35;
      else
        v34 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v34)
      {
        *(_WORD *)v135 = 0;
LABEL_74:
        v36 = (char *)_os_log_send_and_compose_impl(v34, &v136, 0, 0);

        if (v36)
          sub_100007780(v36);
        goto LABEL_77;
      }
LABEL_76:

      v36 = 0;
LABEL_77:
      free(v36);
    }
  }

  v37 = sub_10003777C(a1);
  v38 = v3[13];
  if (v37)
  {
    if (v38 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v39 = (id)v2[12];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v40 = sub_100007750(1);
      v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
        goto LABEL_95;
      }
      goto LABEL_97;
    }
  }
  else
  {
    if (v38 != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v39 = (id)v2[12];
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v42 = sub_100007750(1);
      v39 = v39;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        v41 = v42;
      else
        v41 = v42 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
LABEL_95:
        v43 = (char *)_os_log_send_and_compose_impl(v41, &v136, 0, 0);

        if (v43)
          sub_100007780(v43);
        goto LABEL_98;
      }
LABEL_97:

      v43 = 0;
LABEL_98:
      free(v43);
    }
  }

  v44 = objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled");
  v45 = *((_DWORD *)v4 + 176);
  if ((_DWORD)a1 != 502 && v44 && v45 == 1)
  {
    v46 = sub_100086748((const __CFDictionary *)v6, kUMUserSessionVolumeDeviceNodeKey);
    v47 = v3[13];
    if (v46)
    {
      v48 = v46;
      if (v47 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v49 = (id)v2[12];
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v135 = 0;
        v50 = sub_100007750(1);
        v51 = v49;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          v52 = v50;
        else
          v52 = v50 & 0xFFFFFFFE;
        if ((_DWORD)v52)
        {
          v136.st_dev = 138412546;
          *(_QWORD *)&v136.st_mode = v48;
          WORD2(v136.st_ino) = 1024;
          *(_DWORD *)((char *)&v136.st_ino + 6) = a1;
          v53 = (char *)_os_log_send_and_compose_impl(v52, v135, 0, 0);

          if (v53)
            sub_100007780(v53);
        }
        else
        {

          v53 = 0;
        }
        free(v53);
      }

      v58 = sub_10001CA9C(qword_1000E0318);
      v59 = (void *)objc_claimAutoreleasedReturnValue(v58);
      v133 = 0;
      v60 = objc_msgSend(v59, "unmapVolume:error:", v48, &v133);
      v61 = v133;

      v62 = v3[13];
      if (v60)
      {
        if (v62 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v54 = (id)v2[12];
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v136.st_dev = 0;
          v63 = sub_100007750(1);
          v54 = v54;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            v64 = v63;
          else
            v64 = v63 & 0xFFFFFFFE;
          if ((_DWORD)v64)
          {
            *(_WORD *)v135 = 0;
            v65 = &v136;
            goto LABEL_140;
          }
          goto LABEL_142;
        }
      }
      else
      {
        if (v62 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v54 = (id)v2[12];
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v135 = 0;
          LODWORD(v66) = sub_100007750(1);
          v54 = v54;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            v66 = v66;
          else
            v66 = v66 & 0xFFFFFFFE;
          if ((_DWORD)v66)
          {
            v67 = objc_msgSend(v61, "code");
            v136.st_dev = 134217984;
            *(_QWORD *)&v136.st_mode = v67;
            v65 = (stat *)v135;
            v64 = v66;
LABEL_140:
            v68 = (char *)_os_log_send_and_compose_impl(v64, v65, 0, 0);

            if (v68)
              sub_100007780(v68);
            goto LABEL_143;
          }
LABEL_142:

          v68 = 0;
LABEL_143:
          free(v68);
        }
      }
    }
    else
    {
      if (v47 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v54 = (id)v2[12];
      if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v136.st_dev = 0;
        v55 = sub_100007750(1);
        v54 = v54;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
          v56 = v55;
        else
          v56 = v55 & 0xFFFFFFFE;
        if ((_DWORD)v56)
        {
          *(_WORD *)v135 = 0;
          v57 = (char *)_os_log_send_and_compose_impl(v56, &v136, 0, 0);

          if (v57)
            sub_100007780(v57);
        }
        else
        {

          v57 = 0;
        }
        free(v57);
      }
      v61 = 0;
    }

    if (v3[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v69 = (id)v2[12];
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v70 = sub_100007750(1);
      v71 = v69;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
        v72 = v70;
      else
        v72 = v70 & 0xFFFFFFFE;
      if ((_DWORD)v72)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
        v73 = (char *)_os_log_send_and_compose_impl(v72, &v136, 0, 0);

        if (v73)
          sub_100007780(v73);
      }
      else
      {

        v73 = 0;
      }
      free(v73);
    }

    v74 = sub_10001CA9C(qword_1000E0318);
    v75 = (void *)objc_claimAutoreleasedReturnValue(v74);
    v132 = v61;
    v76 = objc_msgSend(v75, "unloadIdentityFromSession:error:", a1, &v132);
    v77 = v132;

    v78 = v3[13];
    if (v76)
    {
      if (v78 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v79 = (id)v2[12];
      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        goto LABEL_179;
      *(_QWORD *)&v136.st_dev = 0;
      v80 = sub_100007750(1);
      v79 = v79;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        v81 = v80;
      else
        v81 = v80 & 0xFFFFFFFE;
      if ((_DWORD)v81)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
        v82 = &v136;
        goto LABEL_175;
      }
    }
    else
    {
      if (v78 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v79 = (id)v2[12];
      if (!os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        goto LABEL_179;
      *(_QWORD *)v135 = 0;
      LODWORD(v83) = sub_100007750(1);
      v79 = v79;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        v83 = v83;
      else
        v83 = v83 & 0xFFFFFFFE;
      if ((_DWORD)v83)
      {
        v84 = objc_msgSend(v77, "code");
        v136.st_dev = 67109376;
        *(_DWORD *)&v136.st_mode = a1;
        LOWORD(v136.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v136.st_ino + 2) = (__darwin_ino64_t)v84;
        v82 = (stat *)v135;
        v81 = v83;
LABEL_175:
        v85 = (char *)_os_log_send_and_compose_impl(v81, v82, 0, 0);

        if (v85)
          sub_100007780(v85);
        goto LABEL_178;
      }
    }

    v85 = 0;
LABEL_178:
    free(v85);
LABEL_179:

    v45 = *((_DWORD *)v4 + 176);
  }
  if (v45 != 1)
  {
    if (!objc_msgSend((id)qword_1000E0030, "splitUserVolumeEnabled"))
    {
LABEL_260:
      v126 = sub_10000530C(qword_1000E0038, a1);
      v127 = (void *)objc_claimAutoreleasedReturnValue(v126);
      sub_100066684(qword_1000E0040, v127);

      goto LABEL_261;
    }
    v86 = sub_100086748((const __CFDictionary *)v6, kUMUserSessionVolumeDeviceNodeKey);
    v87 = v3[13];
    if (v86)
    {
      v88 = v86;
      if (v87 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v89 = (id)v2[12];
      if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v135 = 0;
        v90 = sub_100007750(1);
        v91 = v89;
        if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
          v92 = v90;
        else
          v92 = v90 & 0xFFFFFFFE;
        if ((_DWORD)v92)
        {
          v136.st_dev = 138412546;
          *(_QWORD *)&v136.st_mode = v88;
          WORD2(v136.st_ino) = 1024;
          *(_DWORD *)((char *)&v136.st_ino + 6) = a1;
          v93 = (char *)_os_log_send_and_compose_impl(v92, v135, 0, 0);

          if (v93)
            sub_100007780(v93);
        }
        else
        {

          v93 = 0;
        }
        free(v93);
      }

      v98 = sub_10001CA9C(qword_1000E0318);
      v99 = (void *)objc_claimAutoreleasedReturnValue(v98);
      v131 = 0;
      v100 = objc_msgSend(v99, "unmapVolume:error:", v88, &v131);
      v101 = v131;

      v102 = v3[13];
      if (v100)
      {
        if (v102 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v94 = (id)v2[12];
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)&v136.st_dev = 0;
          v103 = sub_100007750(1);
          v94 = v94;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            v104 = v103;
          else
            v104 = v103 & 0xFFFFFFFE;
          if ((_DWORD)v104)
          {
            *(_WORD *)v135 = 0;
            v105 = &v136;
            goto LABEL_220;
          }
          goto LABEL_222;
        }
      }
      else
      {
        if (v102 != -1)
          dispatch_once(&qword_1000E0068, &stru_1000D1550);
        v94 = (id)v2[12];
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v135 = 0;
          LODWORD(v106) = sub_100007750(1);
          v94 = v94;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
            v106 = v106;
          else
            v106 = v106 & 0xFFFFFFFE;
          if ((_DWORD)v106)
          {
            v107 = objc_msgSend(v101, "code");
            v136.st_dev = 134217984;
            *(_QWORD *)&v136.st_mode = v107;
            v105 = (stat *)v135;
            v104 = v106;
LABEL_220:
            v108 = (char *)_os_log_send_and_compose_impl(v104, v105, 0, 0);

            if (v108)
              sub_100007780(v108);
            goto LABEL_223;
          }
LABEL_222:

          v108 = 0;
LABEL_223:
          free(v108);
        }
      }
    }
    else
    {
      if (v87 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v94 = (id)v2[12];
      if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)&v136.st_dev = 0;
        v95 = sub_100007750(1);
        v94 = v94;
        if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
          v96 = v95;
        else
          v96 = v95 & 0xFFFFFFFE;
        if ((_DWORD)v96)
        {
          *(_WORD *)v135 = 0;
          v97 = (char *)_os_log_send_and_compose_impl(v96, &v136, 0, 0);

          if (v97)
            sub_100007780(v97);
        }
        else
        {

          v97 = 0;
        }
        free(v97);
      }
      v101 = 0;
    }

    if (v3[13] != -1)
      dispatch_once(&qword_1000E0068, &stru_1000D1550);
    v109 = (id)v2[12];
    if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v136.st_dev = 0;
      v110 = sub_100007750(1);
      v111 = v109;
      if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
        v112 = v110;
      else
        v112 = v110 & 0xFFFFFFFE;
      if ((_DWORD)v112)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
        v113 = (char *)_os_log_send_and_compose_impl(v112, &v136, 0, 0);

        if (v113)
          sub_100007780(v113);
      }
      else
      {

        v113 = 0;
      }
      free(v113);
    }

    v114 = sub_10001CA9C(qword_1000E0318);
    v115 = (void *)objc_claimAutoreleasedReturnValue(v114);
    v130 = v101;
    v116 = objc_msgSend(v115, "unloadIdentityFromSession:error:", a1, &v130);
    v117 = v130;

    v118 = v3[13];
    if (v116)
    {
      if (v118 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v119 = (id)v2[12];
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        goto LABEL_259;
      *(_QWORD *)&v136.st_dev = 0;
      v120 = sub_100007750(1);
      v119 = v119;
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        v121 = v120;
      else
        v121 = v120 & 0xFFFFFFFE;
      if ((_DWORD)v121)
      {
        *(_DWORD *)v135 = 67109120;
        *(_DWORD *)&v135[4] = a1;
        v122 = &v136;
        goto LABEL_255;
      }
    }
    else
    {
      if (v118 != -1)
        dispatch_once(&qword_1000E0068, &stru_1000D1550);
      v119 = (id)v2[12];
      if (!os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        goto LABEL_259;
      *(_QWORD *)v135 = 0;
      LODWORD(v123) = sub_100007750(1);
      v119 = v119;
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEFAULT))
        v123 = v123;
      else
        v123 = v123 & 0xFFFFFFFE;
      if ((_DWORD)v123)
      {
        v124 = objc_msgSend(v117, "code");
        v136.st_dev = 67109376;
        *(_DWORD *)&v136.st_mode = a1;
        LOWORD(v136.st_ino) = 2048;
        *(__darwin_ino64_t *)((char *)&v136.st_ino + 2) = (__darwin_ino64_t)v124;
        v122 = (stat *)v135;
        v121 = v123;
LABEL_255:
        v125 = (char *)_os_log_send_and_compose_impl(v121, v122, 0, 0);

        if (v125)
          sub_100007780(v125);
        goto LABEL_258;
      }
    }

    v125 = 0;
LABEL_258:
    free(v125);
LABEL_259:

    goto LABEL_260;
  }
LABEL_261:
  CFRelease(v6);
}

uint64_t sub_1000561EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return abort_with_reason(2, 6, a3, 0);
}

void sub_100056284(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___RDClient));
  v2 = (void *)qword_1000E0090;
  qword_1000E0090 = v1;

}

void sub_1000562F8(id a1)
{
  uint64_t v1;
  void *v2;

  v1 = objc_claimAutoreleasedReturnValue(+[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___BDBubbled));
  v2 = (void *)qword_1000E00A0;
  qword_1000E00A0 = v1;

}

void sub_100056540(uint64_t a1, uint64_t a2)
{
  id v2;

  if (a2)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcConnection"));
    NSLog(CFSTR("Could not get proxy object for client connection: %@"), v2);

  }
}

void sub_1000565F8(uint64_t a1, uint64_t a2)
{
  id v2;

  if (a2)
  {
    v2 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "xpcConnection"));
    NSLog(CFSTR("Could not get proxy object for client connection: %@"), v2);

  }
}

uint64_t sub_100056AF0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;

  objc_msgSend(*(id *)(a1 + 32), "setWasToldWillSwitchUser:", 1);
  if (qword_1000E00B8 != -1)
    dispatch_once(&qword_1000E00B8, &stru_1000D1618);
  v2 = (id)qword_1000E00B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0;
    LODWORD(v3) = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      v10 = 67109120;
      v11 = objc_msgSend(v4, "pid");
      v6 = (char *)_os_log_send_and_compose_impl(v3, &v9, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7);
}

uint64_t sub_100056D10(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;

  if (qword_1000E00B8 != -1)
    dispatch_once(&qword_1000E00B8, &stru_1000D1618);
  v2 = (id)qword_1000E00B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0;
    LODWORD(v3) = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      v10 = 67109120;
      v11 = objc_msgSend(v4, "pid");
      v6 = (char *)_os_log_send_and_compose_impl(v3, &v9, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7);
}

uint64_t sub_100057050(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  unsigned int v11;

  if (qword_1000E00B8 != -1)
    dispatch_once(&qword_1000E00B8, &stru_1000D1618);
  v2 = (id)qword_1000E00B0;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 0;
    LODWORD(v3) = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v3 = v3;
    else
      v3 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      v4 = *(void **)(a1 + 32);
      v5 = v2;
      v10 = 67109120;
      v11 = objc_msgSend(v4, "pid");
      v6 = (char *)_os_log_send_and_compose_impl(v3, &v9, 0, 0);

      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v7);
}

void sub_100057854(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E00B0;
  qword_1000E00B0 = (uint64_t)v1;

}

uint64_t sub_100057888()
{
  if (qword_1000E00D0 != -1)
    dispatch_once(&qword_1000E00D0, &stru_1000D1638);
  return byte_1000E00C8;
}

void sub_1000578C8(id a1)
{
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0))
  {
    if (strnstr(__big, "keybag_initlog", __len))
      byte_1000E00C8 = 1;
  }
}

uint64_t start(int a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t nscf_formatter;
  id *v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  dispatch_queue_t v18;
  void *v19;
  dispatch_queue_t v20;
  void *v21;
  dispatch_queue_t v22;
  void *v23;
  dispatch_queue_t v24;
  void *v25;
  NSObject *v26;
  BOOL v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t v33;

  v4 = objc_claimAutoreleasedReturnValue(+[UMDProviderSideEffects sideEffects](UMDProviderSideEffects, "sideEffects"));
  v5 = (void *)qword_1000E0318;
  qword_1000E0318 = v4;

  UMLSetInternalLogHandlers(sub_100007750, sub_100007780);
  if (a1 == 2)
  {
    v6 = *(const char **)(a2 + 8);
    if (!strcmp(v6, "--init"))
    {
      sub_100057D24();
    }
    else
    {
      if (strcmp(v6, "--switch"))
        goto LABEL_4;
      sub_100058160();
    }
    exit(0);
  }
LABEL_4:
  v7 = os_log_set_client_type(1, 0);
  nscf_formatter = _os_log_get_nscf_formatter(v7);
  _os_log_set_nscf_formatter(0);
  v9 = sub_100068010((uint64_t)UMDRotatingLog, (void *)qword_1000E0318, "/var/logs/usermanagerd.log", (void *)0x100000, 3);
  v10 = objc_claimAutoreleasedReturnValue(v9);
  v11 = (void *)qword_1000E00C0;
  qword_1000E00C0 = v10;

  if (qword_1000E00F0 != -1)
    dispatch_once(&qword_1000E00F0, &stru_1000D1678);
  v12 = (id)qword_1000E00E8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    v33 = 0;
    if (byte_1000E0311)
      v13 = byte_1000E0310 == 0;
    else
      v13 = 0;
    if (v13)
      v14 = 1;
    else
      v14 = 2;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 2;
    if ((_DWORD)v15)
    {
      v16 = (const char *)_os_log_send_and_compose_impl(v15, &v33, 0, 0);
      v17 = (char *)v16;
      if (v16)
        sub_100007780(v16);
    }
    else
    {
      v17 = 0;
    }
    free(v17);
  }

  v18 = dispatch_queue_create("com.apple.mobile.keybagd.usermanagerd", 0);
  v19 = (void *)qword_1000E0320;
  qword_1000E0320 = (uint64_t)v18;

  v20 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  v21 = (void *)qword_1000E0328;
  qword_1000E0328 = (uint64_t)v20;

  v22 = dispatch_queue_create("com.apple.usermanagerd.userswitch", 0);
  v23 = (void *)qword_1000E0330;
  qword_1000E0330 = (uint64_t)v22;

  v24 = dispatch_queue_create("com.apple.usermanagerd.volumemigrator", 0);
  v25 = (void *)qword_1000E0338;
  qword_1000E0338 = (uint64_t)v24;

  if (sub_100058568())
  {
    if (qword_1000E00E0 != -1)
      dispatch_once(&qword_1000E00E0, &stru_1000D1658);
    v26 = qword_1000E00D8;
    if (os_log_type_enabled((os_log_t)qword_1000E00D8, OS_LOG_TYPE_DEFAULT))
    {
      v33 = 0;
      if (byte_1000E0311)
        v27 = byte_1000E0310 == 0;
      else
        v27 = 0;
      if (v27)
        v28 = 3;
      else
        v28 = 2;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        v29 = v28;
      else
        v29 = 2;
      v30 = (const char *)_os_log_send_and_compose_impl(v29, &v33, 0, 0);
      v31 = (char *)v30;
      if (v30)
        sub_100007780(v30);
      free(v31);
    }
    byte_1000E0312 = 1;
  }
  if (!sub_100058490() && (os_variant_uses_ephemeral_storage("com.apple.mobile.keybagd") & 1) == 0)
    sub_10001ED2C();
  fwrite("****** USERMANAGERD SESSION SETUP DONE  ****\n", 0x2DuLL, 1uLL, __stdoutp);
  sub_100085CB8();
  sub_100076C94();
  sub_100085D8C();
  sub_10003AE10();
  byte_1000E0311 = 1;
  _os_log_set_nscf_formatter(nscf_formatter);
  openlog("usermanagerd", 1, 24);
  CFRunLoopRun();
  return 0;
}

size_t sub_100057D24()
{
  FILE *v0;
  const char *v1;
  size_t v2;
  char *v4;
  id *v5;
  uint64_t v6;
  void *v7;
  dispatch_queue_t v8;
  void *v9;
  NSObject *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  dispatch_queue_t v16;
  void *v17;
  NSObject *v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  uint64_t v30;

  byte_1000E0310 = 1;
  if (sub_100058490())
  {
    v0 = __stdoutp;
    v1 = "****** DIAGNOSTICS MODE ENABLED, SKIP INIT ****\n";
    v2 = 48;
    return fwrite(v1, v2, 1uLL, v0);
  }
  if (os_variant_uses_ephemeral_storage("com.apple.mobile.keybagd"))
  {
    v0 = __stdoutp;
    v1 = "****** DEVICE HAS EPHEMERAL DATA VOLUME, SKIP INIT ****\n";
    v2 = 56;
    return fwrite(v1, v2, 1uLL, v0);
  }
  if (qword_1000E00D0 != -1)
    dispatch_once(&qword_1000E00D0, &stru_1000D1638);
  if (byte_1000E00C8)
    v4 = "/var/logs/usermanagerd_init.log";
  else
    v4 = "/var/logs/usermanagerd.log";
  v5 = sub_100068010((uint64_t)UMDRotatingLog, (void *)qword_1000E0318, v4, (void *)0x100000, 3);
  v6 = objc_claimAutoreleasedReturnValue(v5);
  v7 = (void *)qword_1000E00C0;
  qword_1000E00C0 = v6;

  fwrite("****** IN UMD_INIT ****\n", 0x18uLL, 1uLL, __stdoutp);
  v8 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  v9 = (void *)qword_1000E0328;
  qword_1000E0328 = (uint64_t)v8;

  fwrite("****** STARTING EARLYBOOT SETUP ****\n", 0x25uLL, 1uLL, __stdoutp);
  if (qword_1000E00E0 != -1)
    dispatch_once(&qword_1000E00E0, &stru_1000D1658);
  v10 = (id)qword_1000E00D8;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 0;
    if (byte_1000E0311)
      v11 = byte_1000E0310 == 0;
    else
      v11 = 0;
    if (v11)
      v12 = 3;
    else
      v12 = 2;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v13 = v12;
    else
      v13 = 2;
    v14 = (const char *)_os_log_send_and_compose_impl(v13, &v30, 0, 0);
    v15 = (char *)v14;
    if (v14)
      sub_100007780(v14);
    free(v15);
  }

  v16 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  v17 = (void *)qword_1000E0328;
  qword_1000E0328 = (uint64_t)v16;

  if (sub_100058568())
  {
    if (qword_1000E00E0 != -1)
      dispatch_once(&qword_1000E00E0, &stru_1000D1658);
    v18 = (id)qword_1000E00D8;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v30 = 0;
      if (byte_1000E0311)
        v19 = byte_1000E0310 == 0;
      else
        v19 = 0;
      if (v19)
        v20 = 3;
      else
        v20 = 2;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = 2;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, &v30, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
      free(v23);
    }

    byte_1000E0312 = 1;
  }
  sub_10003C158();
  if (qword_1000E00E0 != -1)
    dispatch_once(&qword_1000E00E0, &stru_1000D1658);
  v24 = (id)qword_1000E00D8;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v30 = 0;
    if (byte_1000E0311)
      v25 = byte_1000E0310 == 0;
    else
      v25 = 0;
    if (v25)
      v26 = 3;
    else
      v26 = 2;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v27 = v26;
    else
      v27 = 2;
    v28 = (const char *)_os_log_send_and_compose_impl(v27, &v30, 0, 0);
    v29 = (char *)v28;
    if (v28)
      sub_100007780(v28);
    free(v29);
  }

  fwrite("****** DONE EARLYBOOT SETUP ****\n", 0x21uLL, 1uLL, __stdoutp);
  return fwrite("****** DONE UMD_INIT ****\n", 0x1AuLL, 1uLL, __stdoutp);
}

void sub_100058160()
{
  id *v0;
  uint64_t v1;
  void *v2;
  dispatch_queue_t v3;
  void *v4;
  NSObject *v5;
  BOOL v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  BOOL v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  BOOL v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  uint64_t v23;

  byte_1000E0311 = 1;
  v0 = sub_100068010((uint64_t)UMDRotatingLog, (void *)qword_1000E0318, "/var/logs/usermanagerd.log", (void *)0x100000, 3);
  v1 = objc_claimAutoreleasedReturnValue(v0);
  v2 = (void *)qword_1000E00C0;
  qword_1000E00C0 = v1;

  v3 = dispatch_queue_create("com.apple.system.libinfo.muser", 0);
  v4 = (void *)qword_1000E0328;
  qword_1000E0328 = (uint64_t)v3;

  if (qword_1000E00F0 != -1)
    dispatch_once(&qword_1000E00F0, &stru_1000D1678);
  v5 = (id)qword_1000E00E8;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 0;
    if (byte_1000E0311)
      v6 = byte_1000E0310 == 0;
    else
      v6 = 0;
    if (v6)
      v7 = 1;
    else
      v7 = 2;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 2;
    if ((_DWORD)v8)
    {
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v23, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  if (sub_100058568())
  {
    if (qword_1000E00E0 != -1)
      dispatch_once(&qword_1000E00E0, &stru_1000D1658);
    v11 = (id)qword_1000E00D8;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 0;
      if (byte_1000E0311)
        v12 = byte_1000E0310 == 0;
      else
        v12 = 0;
      if (v12)
        v13 = 3;
      else
        v13 = 2;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = 2;
      v15 = (const char *)_os_log_send_and_compose_impl(v14, &v23, 0, 0);
      v16 = (char *)v15;
      if (v15)
        sub_100007780(v15);
      free(v16);
    }

    byte_1000E0312 = 1;
  }
  sub_100048768();
  if (qword_1000E00F0 != -1)
    dispatch_once(&qword_1000E00F0, &stru_1000D1678);
  v17 = (id)qword_1000E00E8;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    v23 = 0;
    if (byte_1000E0311)
      v18 = byte_1000E0310 == 0;
    else
      v18 = 0;
    if (v18)
      v19 = 1;
    else
      v19 = 2;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      v20 = v19;
    else
      v20 = v19 & 2;
    if ((_DWORD)v20)
    {
      v21 = (const char *)_os_log_send_and_compose_impl(v20, &v23, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

}

BOOL sub_100058490()
{
  char *v0;
  char *v1;
  io_registry_entry_t v2;
  io_object_t v3;
  CFTypeRef CFProperty;
  int v5;

  v0 = (char *)malloc_type_malloc(0x16uLL, 0x921FBC8DuLL);
  if (v0)
  {
    v1 = v0;
    snprintf(v0, 0x16uLL, "%s%s", "IODeviceTree", ":/product");
    v2 = IORegistryEntryFromPath(kIOMainPortDefault, v1);
    if (v2)
    {
      v3 = v2;
      CFProperty = IORegistryEntryCreateCFProperty(v2, CFSTR("boot-ios-diagnostics"), kCFAllocatorDefault, 0);
      if (CFProperty)
      {
        CFRelease(CFProperty);
        v5 = 1;
      }
      else
      {
        v5 = 0;
      }
      IOObjectRelease(v3);
    }
    else
    {
      v5 = -8;
    }
    free(v1);
  }
  else
  {
    v5 = -5;
  }
  return v5 == 1;
}

BOOL sub_100058568()
{
  io_registry_entry_t v0;
  io_object_t v1;
  CFTypeRef CFProperty;
  _BOOL8 v3;
  NSObject *v4;
  BOOL v5;
  unsigned int v6;
  uint64_t v7;
  BOOL v8;
  unsigned int v9;
  const char *v10;
  char *v11;
  uint64_t v13;

  v0 = IORegistryEntryFromPath(kIOMainPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    v1 = v0;
    CFProperty = IORegistryEntryCreateCFProperty(v0, CFSTR("e-apfs"), kCFAllocatorDefault, 0);
    v3 = CFProperty != 0;
    if (CFProperty)
    {
      CFRelease(CFProperty);
      if (qword_1000E00E0 != -1)
        dispatch_once(&qword_1000E00E0, &stru_1000D1658);
      v4 = (id)qword_1000E00D8;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      v13 = 0;
      if (byte_1000E0311)
        v5 = byte_1000E0310 == 0;
      else
        v5 = 0;
      if (v5)
        v6 = 3;
      else
        v6 = 2;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = 2;
    }
    else
    {
      if (qword_1000E00E0 != -1)
        dispatch_once(&qword_1000E00E0, &stru_1000D1658);
      v4 = (id)qword_1000E00D8;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        goto LABEL_31;
      v13 = 0;
      if (byte_1000E0311)
        v8 = byte_1000E0310 == 0;
      else
        v8 = 0;
      if (v8)
        v9 = 3;
      else
        v9 = 2;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v7 = v9;
      else
        v7 = 2;
    }
    v10 = (const char *)_os_log_send_and_compose_impl(v7, &v13, 0, 0);
    v11 = (char *)v10;
    if (v10)
      sub_100007780(v10);
    free(v11);
LABEL_31:

    IOObjectRelease(v1);
    return v3;
  }
  return 0;
}

void sub_100058768(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E00D8;
  qword_1000E00D8 = (uint64_t)v1;

}

void sub_100058798(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "default");
  v2 = (void *)qword_1000E00E8;
  qword_1000E00E8 = (uint64_t)v1;

}

id *sub_1000587C8(uint64_t a1, void *a2)
{
  id v3;
  id *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_100058814((id *)[UMDUserManager alloc], v3);

  return v4;
}

id *sub_100058814(id *a1, void *a2)
{
  id v4;
  id *v5;
  uint64_t v6;
  id v7;
  objc_super v9;

  v4 = a2;
  if (a1)
  {
    v9.receiver = a1;
    v9.super_class = (Class)UMDUserManager;
    v5 = (id *)objc_msgSendSuper2(&v9, "init");
    if (!v5)
      sub_1000ACF54();
    a1 = v5;
    v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "se"));
    v7 = a1[1];
    a1[1] = (id)v6;

    objc_storeStrong(a1 + 2, a2);
  }

  return a1;
}

id sub_1000588A4(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  if (a1)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = *(id *)(a1 + 24);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", kUMUserSessionAlternateDSIDKey, (_QWORD)v12));
          if (v9)
          {
            v10 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0
              && (objc_msgSend(v9, "isEqualToString:", v3) & 1) != 0)
            {
              v5 = v8;

              goto LABEL_14;
            }
          }

        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

id sub_100058A18(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  void *v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _BYTE v16[128];

  v3 = a2;
  if (a1)
  {
    v14 = 0u;
    v15 = 0u;
    v12 = 0u;
    v13 = 0u;
    v4 = *(id *)(a1 + 24);
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
    if (v5)
    {
      v6 = *(_QWORD *)v13;
      while (2)
      {
        for (i = 0; i != v5; i = (char *)i + 1)
        {
          if (*(_QWORD *)v13 != v6)
            objc_enumerationMutation(v4);
          v8 = *(void **)(*((_QWORD *)&v12 + 1) + 8 * (_QWORD)i);
          v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", kUMUserSessionUUIDKey, (_QWORD)v12));
          if (v9)
          {
            v10 = objc_opt_class(NSString);
            if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0
              && (objc_msgSend(v9, "isEqualToString:", v3) & 1) != 0)
            {
              v5 = v8;

              goto LABEL_14;
            }
          }

        }
        v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v12, v16, 16);
        if (v5)
          continue;
        break;
      }
    }
LABEL_14:

  }
  else
  {
    v5 = 0;
  }

  return v5;
}

uint64_t sub_100058B8C(uint64_t a1, void *a2)
{
  id v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  if (!a1)
    return 0;
  v2 = sub_100058A18(a1, a2);
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", kUMUserSessionIDKey));
    if (v5 && (v6 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v5, v6) & 1) != 0))
      v7 = (uint64_t)objc_msgSend(v5, "unsignedIntValue");
    else
      v7 = 0xFFFFFFFFLL;

  }
  else
  {
    v7 = 0xFFFFFFFFLL;
  }

  return v7;
}

uint64_t sub_100058C2C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  if (result)
  {
    v1 = sub_10001BE1C(*(_QWORD *)(result + 8));
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v3 = sub_10001CAE4((uint64_t)v2);

    return v3;
  }
  return result;
}

_QWORD *sub_100058C68(_QWORD *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  _QWORD v12[2];
  _QWORD v13[2];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v12[0] = CFSTR("BLOB");
    v12[1] = CFSTR("BLOBLEN");
    v13[0] = v3;
    v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", objc_msgSend(v3, "length")));
    v13[1] = v5;
    v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v13, v12, 2));
    v7 = sub_100088760((uint64_t)v6);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);

    if (!v8)
      sub_1000ACF54();
    v9 = sub_100007EF0(a1[1]);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    a1 = objc_msgSend(v10, "atomicallyWriteData:toPath:error:", v8, CFSTR("/private/var/keybags/nextsession.kb"), 0);

  }
  return a1;
}

NSObject *sub_100058D88(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  NSObject *v10;
  unsigned int v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  unsigned int v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  const char *v28;
  char *v29;
  uint64_t v31;
  id v32;
  int v33;
  unsigned int v34;

  if (a1)
  {
    v1 = *(id *)(a1 + 8);
    v2 = sub_100007EF0((uint64_t)v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v32 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "dataWithContentsOfFile:error:", CFSTR("/private/var/keybags/nextsession.kb"), &v32));
    v5 = v32;

    if (v4)
    {
      v6 = sub_100088A58((uint64_t)v4);
      v7 = objc_claimAutoreleasedReturnValue(v6);
      v8 = v7;
      if (!v7)
      {
        if (qword_1000E0100 != -1)
          dispatch_once(&qword_1000E0100, &stru_1000D1710);
        v10 = (id)qword_1000E00F8;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          v31 = 0;
          v16 = sub_100007750(0);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            v17 = v16;
          else
            v17 = v16 & 0xFFFFFFFE;
          if ((_DWORD)v17)
          {
            LOWORD(v33) = 0;
            v18 = (const char *)_os_log_send_and_compose_impl(v17, &v31, 0, 0);
            v19 = (char *)v18;
            if (v18)
              sub_100007780(v18);
          }
          else
          {
            v19 = 0;
          }
          free(v19);
        }
        goto LABEL_70;
      }
      v9 = sub_1000886E4(v7, (uint64_t)CFSTR("BLOB"));
      v10 = objc_claimAutoreleasedReturnValue(v9);
      if (v10)
      {
        v11 = sub_1000882AC(v8, (uint64_t)CFSTR("BLOBLEN"), 0);
        if (v11)
        {
          if (-[NSObject length](v10, "length") == (id)v11)
          {
            v10 = v10;
            v12 = v10;
LABEL_71:

            goto LABEL_72;
          }
          if (qword_1000E0100 != -1)
            dispatch_once(&qword_1000E0100, &stru_1000D1710);
          v23 = (id)qword_1000E00F8;
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            goto LABEL_67;
          v31 = 0;
          v27 = sub_100007750(0);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            v25 = v27;
          else
            v25 = v27 & 0xFFFFFFFE;
          if ((_DWORD)v25)
          {
            LOWORD(v33) = 0;
LABEL_60:
            v28 = (const char *)_os_log_send_and_compose_impl(v25, &v31, 0, 0);
            v29 = (char *)v28;
            if (v28)
              sub_100007780(v28);
            goto LABEL_66;
          }
        }
        else
        {
          if (qword_1000E0100 != -1)
            dispatch_once(&qword_1000E0100, &stru_1000D1710);
          v23 = (id)qword_1000E00F8;
          if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            goto LABEL_67;
          v31 = 0;
          v26 = sub_100007750(0);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
            v25 = v26;
          else
            v25 = v26 & 0xFFFFFFFE;
          if ((_DWORD)v25)
          {
            LOWORD(v33) = 0;
            goto LABEL_60;
          }
        }
      }
      else
      {
        if (qword_1000E0100 != -1)
          dispatch_once(&qword_1000E0100, &stru_1000D1710);
        v23 = (id)qword_1000E00F8;
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          goto LABEL_67;
        v31 = 0;
        v24 = sub_100007750(0);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
          v25 = v24;
        else
          v25 = v24 & 0xFFFFFFFE;
        if ((_DWORD)v25)
        {
          LOWORD(v33) = 0;
          goto LABEL_60;
        }
      }
      v29 = 0;
LABEL_66:
      free(v29);
LABEL_67:

LABEL_70:
      v12 = 0;
      goto LABEL_71;
    }
    if (objc_msgSend(v5, "code") == (id)2)
    {
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v8 = (id)qword_1000E00F8;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        goto LABEL_64;
      v31 = 0;
      v13 = sub_100007750(0);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        LOWORD(v33) = 0;
        v15 = (void *)_os_log_send_and_compose_impl(v14, &v31, 0, 0);
        if (!v15)
          goto LABEL_63;
        goto LABEL_35;
      }
    }
    else
    {
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v8 = (id)qword_1000E00F8;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        goto LABEL_64;
      v31 = 0;
      LODWORD(v20) = sub_100007750(0);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        v20 = v20;
      else
        v20 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v20)
      {
        v21 = v8;
        v22 = objc_msgSend(v5, "code");
        v33 = 67109120;
        v34 = v22;
        v15 = (void *)_os_log_send_and_compose_impl(v20, &v31, 0, 0);

        if (!v15)
        {
LABEL_63:
          free(v15);
LABEL_64:
          v12 = 0;
LABEL_72:

          return v12;
        }
LABEL_35:
        sub_100007780((const char *)v15);
        goto LABEL_63;
      }
    }
    v15 = 0;
    goto LABEL_63;
  }
  return 0;
}

uint64_t sub_100059348(uint64_t a1, int a2, int a3)
{
  void *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;
  id v26;
  int v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  id v32;
  _DWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  if (!a1)
    return 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  v33[0] = a3;
  v33[1] = a2;
  v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v33, 32));
  v7 = *(id *)(a1 + 8);
  v8 = sub_10001CA9C((uint64_t)v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v26 = 0;
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "dataWrappingDataWithDeviceClassF:error:", v6, &v26));
  v11 = v26;

  if (!v10)
  {
    if (qword_1000E0100 != -1)
      dispatch_once(&qword_1000E0100, &stru_1000D1710);
    v12 = (id)qword_1000E00F8;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    v25 = 0;
    v17 = sub_100007750(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      v27 = 67109634;
      v28 = a2;
      v29 = 1024;
      v30 = a3;
      v31 = 2114;
      v32 = v11;
      goto LABEL_38;
    }
    goto LABEL_40;
  }
  if (!objc_msgSend(v10, "length"))
  {
    if (qword_1000E0100 != -1)
      dispatch_once(&qword_1000E0100, &stru_1000D1710);
    v12 = (id)qword_1000E00F8;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      goto LABEL_42;
    v25 = 0;
    v19 = sub_100007750(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      v18 = v19;
    else
      v18 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v18)
      goto LABEL_37;
    goto LABEL_40;
  }
  if ((sub_100058C68((_QWORD *)a1, v10) & 1) != 0)
  {
    if (qword_1000E0100 != -1)
      dispatch_once(&qword_1000E0100, &stru_1000D1710);
    v12 = (id)qword_1000E00F8;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v13 = sub_100007750(0);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        v27 = 67109376;
        v28 = a2;
        v29 = 1024;
        v30 = a3;
        v15 = (const char *)_os_log_send_and_compose_impl(v14, &v25, 0, 0);
        v16 = (char *)v15;
        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v16 = 0;
      }
      free(v16);
    }
    v23 = 1;
    goto LABEL_43;
  }
  if (qword_1000E0100 != -1)
    dispatch_once(&qword_1000E0100, &stru_1000D1710);
  v12 = (id)qword_1000E00F8;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    v25 = 0;
    v20 = sub_100007750(0);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      v18 = v20;
    else
      v18 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
LABEL_37:
      v27 = 67109376;
      v28 = a2;
      v29 = 1024;
      v30 = a3;
LABEL_38:
      v21 = (const char *)_os_log_send_and_compose_impl(v18, &v25, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
      goto LABEL_41;
    }
LABEL_40:
    v22 = 0;
LABEL_41:
    free(v22);
  }
LABEL_42:
  v23 = 0;
LABEL_43:

  return v23;
}

uint64_t sub_100059798(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  NSObject *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  _DWORD *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  NSObject *v17;
  id v18;
  char *v19;
  uint64_t v21;
  id v22;
  int v23;
  id v24;

  if (!a1)
    return 0;
  *a2 = -1;
  *a3 = -1;
  v6 = sub_100058D88(a1);
  v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
  if (v7)
  {
    v8 = *(id *)(a1 + 8);
    v9 = sub_10001CA9C((uint64_t)v8);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v22 = 0;
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "dataUnwrappingDataWithDeviceClassF:error:", v7, &v22));
    v12 = v22;

    if (v11)
    {
      if (objc_msgSend(v11, "length") == (id)32)
      {
        v13 = objc_msgSend(objc_retainAutorelease(v11), "bytes");
        *a2 = v13[1];
        *a3 = *v13;
        v14 = 1;
LABEL_20:

        goto LABEL_21;
      }
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v15 = (id)qword_1000E00F8;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v21 = 0;
        LODWORD(v16) = sub_100007750(0);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          v16 = v16;
        else
          v16 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          v17 = v15;
          v18 = objc_msgSend(v11, "length");
          v23 = 134217984;
          v24 = v18;
          v19 = (char *)_os_log_send_and_compose_impl(v16, &v21, 0, 0);

          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

    }
    v14 = 0;
    goto LABEL_20;
  }
  v14 = 0;
LABEL_21:

  return v14;
}

id sub_1000599BC(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  char *v9;
  uint64_t v11;

  if (!a1)
    return 0;
  v1 = sub_100007EF0(*(_QWORD *)(a1 + 8));
  v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
  v3 = objc_msgSend(v2, "removeFileAtPath:error:", CFSTR("/private/var/keybags/nextsession.kb"), 0);

  if ((v3 & 1) != 0)
  {
    if (qword_1000E0100 != -1)
      dispatch_once(&qword_1000E0100, &stru_1000D1710);
    v4 = (id)qword_1000E00F8;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      goto LABEL_22;
    v11 = 0;
    v5 = sub_100007750(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
      goto LABEL_18;
  }
  else
  {
    if (qword_1000E0100 != -1)
      dispatch_once(&qword_1000E0100, &stru_1000D1710);
    v4 = (id)qword_1000E00F8;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      goto LABEL_22;
    v11 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      v6 = v7;
    else
      v6 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
LABEL_18:
      v8 = (const char *)_os_log_send_and_compose_impl(v6, &v11, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
      goto LABEL_21;
    }
  }
  v9 = 0;
LABEL_21:
  free(v9);
LABEL_22:

  return v3;
}

id sub_100059B90(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;
  uint64_t v7;
  void *v8;
  unsigned int v9;
  id v10;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id *v19;
  void *v20;
  void *v22;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_100088228(v3, (uint64_t)kUMUserSessionIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2)
      sub_1000ACF54();
    v6 = sub_1000074C8(v4, (uint64_t)kUMUserSessionShortNameKey);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!v7)
      sub_1000ACF54();
    v8 = (void *)v7;
    v9 = sub_100088228(v4, (uint64_t)kUMUserSessionGroupIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2)
      sub_1000ACF54();
    v10 = sub_1000074C8(v4, (uint64_t)kUMUserSessionLibinfoHomeDirKey);
    v11 = objc_claimAutoreleasedReturnValue(v10);
    if (!v11)
      sub_1000ACF54();
    v12 = (void *)v11;
    v13 = sub_1000074C8(v4, (uint64_t)kUMUserSessionUUIDKey);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = sub_10001ACA4((uint64_t)NSUUID, v14);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

    if (!v16)
      sub_1000ACF54();
    if (v5 != v9)
      sub_1000ACF54();
    v22 = v16;
    v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v22, 1));
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v17));

    v19 = sub_1000822E4((uint64_t)UMDarwinDirectoryUser, v8, v5, v16, v16, v8, v12, CFSTR("/bin/bash"), v18);
    v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

  }
  else
  {
    v20 = 0;
  }

  return v20;
}

id sub_100059D94(void *a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  id v6;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  id *v16;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_100088228(v3, (uint64_t)kUMUserSessionGroupIDKey, (id)0xFFFFFFFFLL);
    if (*__error() == 2)
      sub_1000ACF54();
    v6 = sub_1000074C8(v4, (uint64_t)kUMUserSessionShortNameKey);
    v7 = objc_claimAutoreleasedReturnValue(v6);
    if (!v7)
      sub_1000ACF54();
    v8 = (void *)v7;
    v9 = sub_1000074C8(v4, (uint64_t)kUMUserSessionLibinfoHomeDirKey);
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (!v10)
      sub_1000ACF54();
    v11 = (void *)v10;
    v12 = sub_1000074C8(v4, (uint64_t)kUMUserSessionUUIDKey);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v14 = sub_10001ACA4((uint64_t)NSUUID, v13);
    v15 = (void *)objc_claimAutoreleasedReturnValue(v14);

    if (!v15)
      sub_1000ACF54();
    v16 = sub_100082AFC((uint64_t)UMDarwinDirectoryGroup, v8, v5, v15, v8);
    a1 = (void *)objc_claimAutoreleasedReturnValue(v16);

  }
  return a1;
}

void sub_100059EC0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[5];

  if (a1)
  {
    v2 = sub_10001C3C4(*(_QWORD *)(a1 + 8));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    v4[2] = sub_100059F34;
    v4[3] = &unk_1000D16A0;
    v4[4] = a1;
    objc_msgSend(v3, "initializeLocalUsersAndGroups:", v4);

  }
}

void sub_100059F34(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  _QWORD *v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a2;
  v6 = a3;
  objc_msgSend(v5, "removeAllObjects");
  objc_msgSend(v6, "removeAllObjects");
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = *(_QWORD **)(a1 + 32);
  if (v7)
    v7 = (_QWORD *)v7[3];
  v8 = v7;
  v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (v9)
  {
    v10 = v9;
    v11 = *(_QWORD *)v19;
    do
    {
      for (i = 0; i != v10; i = (char *)i + 1)
      {
        if (*(_QWORD *)v19 != v11)
          objc_enumerationMutation(v8);
        v13 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * (_QWORD)i);
        v14 = sub_100059B90(*(_QWORD *)(a1 + 32), v13);
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        objc_msgSend(v5, "addObject:", v15, (_QWORD)v18);

        v16 = sub_100059D94(*(void **)(a1 + 32), v13);
        v17 = (void *)objc_claimAutoreleasedReturnValue(v16);
        objc_msgSend(v6, "addObject:", v17);

      }
      v10 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
    }
    while (v10);
  }

}

void sub_10005A0A8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  _QWORD v20[5];
  id v21;
  uint64_t v22;
  int v23;
  int v24;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_100088228(v3, (uint64_t)kUMUserSessionIDKey, (id)0xFFFFFF9BLL);
    if (v5 == -1)
    {
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v6 = (id)qword_1000E00F8;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        v22 = 0;
        v7 = sub_100007750(0);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
          v8 = v7;
        else
          v8 = v7 & 0xFFFFFFFE;
        if ((_DWORD)v8)
        {
          v23 = 67109120;
          v24 = -1;
          v9 = (const char *)_os_log_send_and_compose_impl(v8, &v22, 0, 0);
          v10 = (char *)v9;
          if (v9)
            sub_100007780(v9);
        }
        else
        {
          v10 = 0;
        }
        free(v10);
      }

    }
    v11 = *(id *)(a1 + 8);
    v12 = sub_10001C3C4((uint64_t)v11);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    v20[2] = sub_10005A374;
    v20[3] = &unk_1000D16C8;
    v20[4] = a1;
    v14 = v4;

    v21 = v14;
    LOBYTE(v14) = objc_msgSend(v13, "updateLocalUsersAndGroupsWithError:updater:", 0, v20);

    if ((v14 & 1) == 0)
    {
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v15 = (id)qword_1000E00F8;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v22 = 0;
        v16 = sub_100007750(0);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          v23 = 67109120;
          v24 = v5;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, &v22, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

    }
  }

}

void sub_10005A374(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(a1 + 40);
  v7 = a3;
  v8 = a2;
  v9 = sub_100059B90(v5, v6);
  v12 = (id)objc_claimAutoreleasedReturnValue(v9);
  v10 = sub_100059D94(*(void **)(a1 + 32), *(void **)(a1 + 40));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  objc_msgSend(v8, "addObject:", v12);

  objc_msgSend(v7, "addObject:", v11);
}

void sub_10005A40C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  _QWORD v14[4];
  id v15;
  int v16;
  id v17;

  v3 = a2;
  if (a1)
  {
    v4 = (uint64_t)*(id *)(a1 + 8);
    v5 = sub_10001C3C4(v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10005A5C8;
    v14[3] = &unk_1000D16F0;
    v7 = v3;

    v15 = v7;
    LOBYTE(v4) = objc_msgSend(v6, "updateLocalUsersAndGroupsWithError:updater:", 0, v14);

    if ((v4 & 1) == 0)
    {
      if (qword_1000E0100 != -1)
        dispatch_once(&qword_1000E0100, &stru_1000D1710);
      v8 = (id)qword_1000E00F8;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v13 = 0;
        v9 = sub_100007750(0);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          v16 = 138543362;
          v17 = v7;
          v11 = (const char *)_os_log_send_and_compose_impl(v10, &v13, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v12 = 0;
        }
        free(v12);
      }

    }
  }

}

void sub_10005A5C8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  void *i;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned int v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *j;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  unsigned int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[128];
  _BYTE v34[128];

  v5 = a2;
  v6 = a3;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v7 = objc_msgSend(v5, "copy");
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
  if (v8)
  {
    v9 = v8;
    v10 = *(_QWORD *)v30;
    do
    {
      for (i = 0; i != v9; i = (char *)i + 1)
      {
        if (*(_QWORD *)v30 != v10)
          objc_enumerationMutation(v7);
        v12 = *(_QWORD *)(*((_QWORD *)&v29 + 1) + 8 * (_QWORD)i);
        v13 = sub_10001BE1C(v12);
        v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
        v15 = objc_msgSend(v14, "isEqualToString:", *(_QWORD *)(a1 + 32));

        if (v15)
          objc_msgSend(v5, "removeObject:", v12);
      }
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v29, v34, 16);
    }
    while (v9);
  }

  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v16 = objc_msgSend(v6, "copy", 0);
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v26;
    do
    {
      for (j = 0; j != v18; j = (char *)j + 1)
      {
        if (*(_QWORD *)v26 != v19)
          objc_enumerationMutation(v16);
        v21 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)j);
        v22 = sub_10001BE1C(v21);
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        v24 = objc_msgSend(v23, "isEqualToString:", *(_QWORD *)(a1 + 32));

        if (v24)
          objc_msgSend(v6, "removeObject:", v21);
      }
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v25, v33, 16);
    }
    while (v18);
  }

}

void sub_10005A800(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "user");
  v2 = (void *)qword_1000E00F8;
  qword_1000E00F8 = (uint64_t)v1;

}

uint64_t sub_10005A834()
{
  return _os_assert_log(0);
}

id *sub_10005A83C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;

  v7 = a4;
  v8 = a3;
  v9 = a2;
  objc_opt_self(a1);
  v10 = sub_10005A8B8((id *)[UMDGeneration alloc], v9, v8, v7);

  return v10;
}

id *sub_10005A8B8(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id *v10;
  objc_super v12;

  v7 = a2;
  v8 = a3;
  v9 = a4;
  if (a1)
  {
    v12.receiver = a1;
    v12.super_class = (Class)UMDGeneration;
    v10 = (id *)objc_msgSendSuper2(&v12, "init");
    if (!v10)
      sub_1000ACF54();
    a1 = v10;
    objc_storeStrong(v10 + 3, a4);
    a1[4] = v7;
    a1[5] = v8;
    *((_DWORD *)a1 + 2) = -1;
    a1[2] = 0;
  }

  return a1;
}

uint64_t sub_10005A964(uint64_t result)
{
  if (result)
  {
    result = *(_QWORD *)(result + 16);
    if (!result)
      sub_1000ACF54();
  }
  return result;
}

uint64_t sub_10005A984(uint64_t result, uint64_t a2)
{
  if (result)
  {
    if (*(_QWORD *)(result + 16))
      sub_1000ACF54();
    *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

void sub_10005A9A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if ((unint64_t)(v2 + 1) > 1)
      v3 = v2 + 1;
    else
      v3 = 1;
    *(_QWORD *)(a1 + 16) = v3;
    v4 = *(id *)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v5 = sub_100007750(0);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v11 = 134217984;
        v12 = v7;
        v8 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }

    sub_10005AB0C(a1);
    sub_10005ADA4(a1);
  }
}

void sub_10005AAE0(uint64_t a1)
{
  if (a1)
  {
    sub_10005AB0C(a1);
    sub_10005ADA4(a1);
  }
}

void sub_10005AB0C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unsigned int v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  uint64_t v21;
  _QWORD v22[3];

  if (a1)
  {
    if (*(_DWORD *)(a1 + 8) != -1)
      goto LABEL_4;
    v2 = *(id *)(a1 + 24);
    v3 = sub_10001BEE8((uint64_t)v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = *(id *)(a1 + 32);
    *(_DWORD *)(a1 + 8) = objc_msgSend(v4, "registerPlain:", v5);

    if (*(_DWORD *)(a1 + 8) == -1)
    {
      v12 = *(id *)(a1 + 40);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      v22[0] = 0;
      v18 = sub_100007750(0);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        v14 = v18;
      else
        v14 = v18 & 0xFFFFFFFE;
      if (!(_DWORD)v14)
        goto LABEL_26;
      LOWORD(v21) = 0;
    }
    else
    {
LABEL_4:
      v6 = *(id *)(a1 + 24);
      v7 = sub_10001BEE8((uint64_t)v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
      v9 = sub_10005A964(a1);
      v10 = *(unsigned int *)(a1 + 8);

      LOBYTE(v9) = objc_msgSend(v8, "setState:forToken:", v9, v10);
      v11 = *(id *)(a1 + 40);
      v12 = v11;
      if ((v9 & 1) != 0)
      {
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v21 = 0;
          v13 = sub_100007750(0);
          if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
            v14 = v13;
          else
            v14 = v13 & 0xFFFFFFFE;
          if ((_DWORD)v14)
          {
            v15 = *(_QWORD *)(a1 + 16);
            LODWORD(v22[0]) = 134217984;
            *(_QWORD *)((char *)v22 + 4) = v15;
            v16 = &v21;
            goto LABEL_24;
          }
LABEL_26:
          v20 = 0;
LABEL_27:
          free(v20);
        }
LABEL_28:

        return;
      }
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_28;
      v22[0] = 0;
      v17 = sub_100007750(0);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        v14 = v17;
      else
        v14 = v17 & 0xFFFFFFFE;
      if (!(_DWORD)v14)
        goto LABEL_26;
      LOWORD(v21) = 0;
    }
    v16 = v22;
LABEL_24:
    v19 = (const char *)_os_log_send_and_compose_impl(v14, v16, 0, 0);
    v20 = (char *)v19;
    if (v19)
      sub_100007780(v19);
    goto LABEL_27;
  }
}

void sub_10005ADA4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  unsigned __int8 v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  const char *v11;
  char *v12;
  uint64_t v13;

  if (a1)
  {
    v2 = *(id *)(a1 + 24);
    v3 = sub_10001BEE8((uint64_t)v2);
    v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
    v5 = objc_msgSend(v4, "post:", *(_QWORD *)(a1 + 32));

    v6 = *(id *)(a1 + 40);
    v7 = v6;
    if ((v5 & 1) != 0)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v13 = 0;
        v8 = sub_100007750(0);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
LABEL_14:
          v11 = (const char *)_os_log_send_and_compose_impl(v9, &v13, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
          goto LABEL_17;
        }
LABEL_16:
        v12 = 0;
LABEL_17:
        free(v12);
      }
    }
    else if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v10 = sub_100007750(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        v9 = v10;
      else
        v9 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v9)
        goto LABEL_14;
      goto LABEL_16;
    }

  }
}

UMDPersonaManifestEmbedded *sub_10005B2EC(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  char *v10;
  UMDPersonaManifestUser *v11;
  char *v12;
  id v13;
  uint64_t v14;
  void *i;
  uint64_t v16;
  UMDPersonaManifestEmbedded *v17;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  _BYTE v30[128];

  v3 = a2;
  v4 = (void *)objc_opt_self(a1);
  if (qword_1000E0110 != -1)
    dispatch_once(&qword_1000E0110, &stru_1000D1730);
  v5 = (id)qword_1000E0108;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
  {
    v29 = 0;
    v6 = sub_100007750(0);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
      v7 = v6;
    else
      v7 = v6 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      v28 = 0;
      v8 = (const char *)_os_log_send_and_compose_impl(v7, &v29, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  v10 = (char *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "personaSetFromData:", v3));
  if (v10)
  {
    v11 = objc_alloc_init(UMDPersonaManifestUser);
    sub_10001CCD0(v11, v10);
    v26 = 0u;
    v27 = 0u;
    v24 = 0u;
    v25 = 0u;
    v12 = v10;
    v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
    if (v13)
    {
      v14 = *(_QWORD *)v25;
      while (2)
      {
        for (i = 0; i != v13; i = (char *)i + 1)
        {
          if (*(_QWORD *)v25 != v14)
            objc_enumerationMutation(v12);
          v16 = *(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * (_QWORD)i);
          if (sub_1000063CC(v16) == 3)
          {
            v13 = (id)sub_10001C3B8(v16);
            goto LABEL_23;
          }
        }
        v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v24, v30, 16);
        if (v13)
          continue;
        break;
      }
    }
LABEL_23:

    v17 = objc_alloc_init(UMDPersonaManifestEmbedded);
    -[UMDPersonaManifest setVersion:](v17, "setVersion:", 0);
    -[UMDPersonaManifest setGeneration:](v17, "setGeneration:", v13);
    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithObject:](NSSet, "setWithObject:", v11));
    -[UMDPersonaManifest setUsers:](v17, "setUsers:", v18);

  }
  else
  {
    if (qword_1000E0110 != -1)
      dispatch_once(&qword_1000E0110, &stru_1000D1730);
    v11 = (UMDPersonaManifestUser *)(id)qword_1000E0108;
    if (os_log_type_enabled(&v11->super, OS_LOG_TYPE_ERROR))
    {
      v29 = 0;
      v19 = sub_100007750(0);
      if (os_log_type_enabled(&v11->super, OS_LOG_TYPE_ERROR))
        v20 = v19;
      else
        v20 = v19 & 0xFFFFFFFE;
      if ((_DWORD)v20)
      {
        v28 = 0;
        v21 = (const char *)_os_log_send_and_compose_impl(v20, &v29, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
      }
      else
      {
        v22 = 0;
      }
      free(v22);
    }
    v17 = 0;
  }

  return v17;
}

id sub_10005B63C(uint64_t a1, void *a2)
{
  id v3;
  objc_class *v4;
  id v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  id v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  unsigned int v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  __int16 *v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;

  v3 = a2;
  v4 = (objc_class *)objc_opt_self(a1);
  v5 = objc_alloc_init(v4);
  if (qword_1000E0110 != -1)
    dispatch_once(&qword_1000E0110, &stru_1000D1730);
  v6 = (id)qword_1000E0108;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    v34 = 0;
    v7 = sub_100007750(0);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v33 = 0;
      LODWORD(v32) = 2;
      v31 = &v33;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v34, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  objc_msgSend(v5, "setVersion:", 1);
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UsePersonaGenerationID")));
  if (!v11 || (v12 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v11, v12) & 1) != 0))
  {
    objc_msgSend(v5, "setGeneration:", objc_msgSend(v11, "unsignedLongValue", v31, v32));
    v13 = objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKeyedSubscript:", CFSTR("UserPersonaDictionary")));
    if (v13 && (v14 = objc_opt_class(NSDictionary), (objc_opt_isKindOfClass(v13, v14) & 1) != 0))
    {
      v15 = objc_claimAutoreleasedReturnValue(-[objc_class userSetFromDict:](v4, "userSetFromDict:", v13));
      if (v15)
      {
        objc_msgSend(v5, "setUsers:", v15);
        v16 = v5;
LABEL_54:

        goto LABEL_55;
      }
      if (qword_1000E0110 != -1)
        dispatch_once(&qword_1000E0110, &stru_1000D1730);
      v25 = (id)qword_1000E0108;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v34 = 0;
        v26 = sub_100007750(0);
        if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          v27 = v26;
        else
          v27 = v26 & 0xFFFFFFFE;
        if ((_DWORD)v27)
        {
          v33 = 0;
          v28 = (const char *)_os_log_send_and_compose_impl(v27, &v34, 0, 0);
          v29 = (char *)v28;
          if (v28)
            sub_100007780(v28);
        }
        else
        {
          v29 = 0;
        }
        free(v29);
      }

    }
    else
    {
      if (qword_1000E0110 != -1)
        dispatch_once(&qword_1000E0110, &stru_1000D1730);
      v15 = (id)qword_1000E0108;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v34 = 0;
        v17 = sub_100007750(0);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v18)
        {
          v33 = 0;
          v19 = (const char *)_os_log_send_and_compose_impl(v18, &v34, 0, 0);
          v20 = (char *)v19;
          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v20 = 0;
        }
        free(v20);
      }
    }
    v16 = 0;
    goto LABEL_54;
  }
  if (qword_1000E0110 != -1)
    dispatch_once(&qword_1000E0110, &stru_1000D1730);
  v13 = (id)qword_1000E0108;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    v34 = 0;
    v21 = sub_100007750(0);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      v33 = 0;
      v23 = (const char *)_os_log_send_and_compose_impl(v22, &v34, 0, 0);
      v24 = (char *)v23;
      if (v23)
        sub_100007780(v23);
    }
    else
    {
      v24 = 0;
    }
    free(v24);
  }
  v16 = 0;
LABEL_55:

  return v16;
}

void sub_10005BC68(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "persona");
  v2 = (void *)qword_1000E0108;
  qword_1000E0108 = (uint64_t)v1;

}

id sub_10005BC9C(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  id *v5;
  void *v6;

  v3 = a2;
  v4 = objc_opt_self(a1);
  v5 = sub_10005BCE4(v4, v3, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue(v5);

  return v6;
}

id *sub_10005BCE4(uint64_t a1, void *a2, char a3)
{
  id v5;
  id *v6;

  v5 = a2;
  objc_opt_self(a1);
  v6 = sub_10005BD40((id *)[UMDAPFSSupportVolumeHelper alloc], v5, a3);

  return v6;
}

id *sub_10005BD40(id *a1, void *a2, char a3)
{
  id v5;
  id *v6;

  v5 = a2;
  if (a1)
  {
    v6 = sub_100084C9C(a1, v5);
    if (!v6)
      sub_1000ACE0C();
    a1 = v6;

    sub_100078C20((uint64_t)a1, a3);
  }

  return a1;
}

id sub_10005BE84(uint64_t a1)
{
  objc_opt_self(a1);
  return objc_msgSend(&off_1000D5390, "mutableCopy");
}

id sub_10005BEA4(uint64_t a1)
{
  objc_opt_self(a1);
  return objc_msgSend(&off_1000D53A8, "mutableCopy");
}

uint64_t sub_10005BEC4()
{
  objc_opt_self();
  return 1;
}

_QWORD *sub_10005BEDC(uint64_t a1, void *a2)
{
  id v3;
  _QWORD *v4;

  v3 = a2;
  objc_opt_self(a1);
  v4 = sub_10005BF28([UMDPersonaManager alloc], v3);

  return v4;
}

_QWORD *sub_10005BF28(_QWORD *a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  UMDPersonaState *v11;
  void *v12;
  void *v13;
  id v14;
  id *v15;
  uint64_t v16;
  void *v17;
  objc_super v19;

  v3 = a2;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)UMDPersonaManager;
    v4 = objc_msgSendSuper2(&v19, "init");
    if (!v4)
      sub_1000ACE0C();
    a1 = v4;
    objc_storeWeak((id *)v4 + 6, v3);
    v5 = sub_10001CA9C((uint64_t)v3);
    v6 = objc_claimAutoreleasedReturnValue(v5);
    v7 = (void *)a1[2];
    a1[2] = v6;

    v8 = sub_10001BE1C((uint64_t)v3);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = (void *)a1[3];
    a1[3] = v9;

    v11 = objc_alloc_init(UMDPersonaState);
    v12 = (void *)a1[4];
    a1[4] = v11;

    if (qword_1000E0120 != -1)
      dispatch_once(&qword_1000E0120, &stru_1000D1750);
    v13 = (void *)a1[2];
    v14 = (id)qword_1000E0118;
    v15 = sub_10005A83C((uint64_t)UMDGeneration, CFSTR("com.apple.mobile.usermanagerd.personageneration_changed"), v14, v13);
    v16 = objc_claimAutoreleasedReturnValue(v15);
    v17 = (void *)a1[5];
    a1[5] = v16;

  }
  return a1;
}

void sub_10005C05C(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  if (a1)
  {
    v2 = a2;
    objc_opt_self(UMDPersonaManager);
    v3 = objc_msgSend(&off_1000D5390, "mutableCopy");
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("UserPersonaBundleIDS"));

  }
}

void sub_10005C0C8(uint64_t a1, void *a2)
{
  id v2;
  id v3;

  if (a1)
  {
    v2 = a2;
    objc_opt_self(UMDPersonaManager);
    v3 = objc_msgSend(&off_1000D53A8, "mutableCopy");
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("UserPersonaBundleIDS"));

  }
}

uint64_t sub_10005C134(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  char v14;
  uint64_t v15;
  void *i;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  char *v22;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  int v29;
  unsigned int v30;
  _BYTE v31[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  v8 = 0;
  if (a1 && v6)
  {
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", CFSTR("UserPersonaBundleIDS")));
    v10 = objc_opt_class(NSMutableArray);
    if ((objc_opt_isKindOfClass(v9, v10) & 1) != 0)
    {
      if (v9)
      {
        v27 = 0u;
        v28 = 0u;
        v25 = 0u;
        v26 = 0u;
        v11 = v5;
        v12 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
        if (v12)
        {
          v13 = v12;
          v14 = 0;
          v15 = *(_QWORD *)v26;
          do
          {
            for (i = 0; i != v13; i = (char *)i + 1)
            {
              if (*(_QWORD *)v26 != v15)
                objc_enumerationMutation(v11);
              v17 = *(_QWORD *)(*((_QWORD *)&v25 + 1) + 8 * (_QWORD)i);
              if ((objc_msgSend(v9, "containsObject:", v17) & 1) == 0)
              {
                objc_msgSend(v9, "addObject:", v17);
                v14 = 1;
              }
            }
            v13 = objc_msgSend(v11, "countByEnumeratingWithState:objects:count:", &v25, v31, 16);
          }
          while (v13);

          if ((v14 & 1) != 0)
          {
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v18 = (id)qword_1000E0128;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              v24 = 0;
              LODWORD(v19) = sub_100007750(1);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                v19 = v19;
              else
                v19 = v19 & 0xFFFFFFFE;
              if ((_DWORD)v19)
              {
                v20 = v18;
                v21 = sub_1000882AC(v7, (uint64_t)CFSTR("UserPersonaType"), (id)0xFFFFFFFFLL);
                v29 = 67109120;
                v30 = v21;
                v22 = (char *)_os_log_send_and_compose_impl(v19, &v24, 0, 0);

                if (v22)
                  sub_100007780(v22);
              }
              else
              {
                v22 = 0;
              }
              free(v22);
            }

            goto LABEL_26;
          }
        }
        else
        {

        }
        v8 = 0;
        goto LABEL_29;
      }
    }
    else
    {

    }
    objc_msgSend(v7, "setObject:forKeyedSubscript:", v5, CFSTR("UserPersonaBundleIDS"));
    v9 = 0;
LABEL_26:
    v8 = 1;
LABEL_29:

  }
  return v8;
}

uint64_t sub_10005C3E8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  _UNKNOWN **v6;
  id v7;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    v5 = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaType"), (id)0xFFFFFFFFLL);
    if (v5 == 4)
    {
      v6 = &off_1000D5390;
    }
    else
    {
      if (v5 != 3)
      {
        a1 = 0;
        goto LABEL_8;
      }
      v6 = &off_1000D53A8;
    }
    objc_opt_self(UMDPersonaManager);
    v7 = objc_msgSend(v6, "mutableCopy");
    a1 = sub_10005C134(a1, v7, v4);

  }
LABEL_8:

  return a1;
}

uint64_t sub_10005C490(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[128];

  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (a1)
  {
    v16 = 0u;
    v17 = 0u;
    v14 = 0u;
    v15 = 0u;
    v8 = v6;
    v9 = (uint64_t)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
    if (v9)
    {
      v10 = *(_QWORD *)v15;
      while (2)
      {
        for (i = 0; i != v9; ++i)
        {
          if (*(_QWORD *)v15 != v10)
            objc_enumerationMutation(v8);
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", *(_QWORD *)(*((_QWORD *)&v14 + 1) + 8 * i), (_QWORD)v14));

          if (!v12)
          {
            v9 = 1;
            goto LABEL_12;
          }
        }
        v9 = (uint64_t)objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", &v14, v18, 16);
        if (v9)
          continue;
        break;
      }
    }
LABEL_12:

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

uint64_t sub_10005C5C8(uint64_t a1, void *a2, int a3)
{
  id v5;

  v5 = a2;
  if (a1)
  {
    if ((a3 - 3) > 2)
      a1 = 0;
    else
      a1 = sub_10005C490(a1, v5, off_1000D1790[a3 - 3]);
  }

  return a1;
}

uint64_t sub_10005C634(uint64_t result, signed int a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  signed int v10;

  if (result)
  {
    if (a2 < 7 && ((0x6Du >> a2) & 1) != 0)
    {
      return sub_10005C7C8(result, dword_1000B1540[a2], qword_1000B1508[a2]);
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v3 = (id)qword_1000E0128;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v8 = 0;
        v4 = sub_100007750(1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          v5 = v4;
        else
          v5 = v4 & 0xFFFFFFFE;
        if ((_DWORD)v5)
        {
          v9 = 67109120;
          v10 = a2;
          v6 = (const char *)_os_log_send_and_compose_impl(v5, &v8, 0, 0);
          v7 = (char *)v6;
          if (v6)
            sub_100007780(v6);
        }
        else
        {
          v7 = 0;
        }
        free(v7);
      }

      return 0xFFFFFFFFLL;
    }
  }
  return result;
}

uint64_t sub_10005C7C8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  _BYTE v23[12];
  uint64_t v24;

  if (!a1)
    return 0;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v6 = &qword_1000E0000;
  v7 = (id)qword_1000E0128;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    v24 = 0;
    LODWORD(v8) = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      v8 = v8;
    else
      v8 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = *(id *)(a1 + 32);
      v10 = v7;
      v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userPersonas"));
      *(_DWORD *)v23 = 134217984;
      *(_QWORD *)&v23[4] = objc_msgSend(v11, "count");
      v12 = (char *)_os_log_send_and_compose_impl(v8, &v24, 0, 0);

      if (v12)
        sub_100007780(v12);
      v6 = &qword_1000E0000;
    }
    else
    {
      v12 = 0;
    }
    free(v12);
  }

  if (a3 + (int)a2 <= a2)
  {
LABEL_17:
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v13 = (id)v6[37];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v23 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v24 = -4227858176;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, v23, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }
    a2 = 0xFFFFFFFFLL;
  }
  else
  {
    while (sub_10005CB40(a1, a2))
    {
      a2 = (a2 + 1);
      if (!--a3)
        goto LABEL_17;
    }
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v13 = (id)v6[37];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v23 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LODWORD(v24) = 67109120;
        HIDWORD(v24) = a2;
        v20 = (const char *)_os_log_send_and_compose_impl(v19, v23, 0, 0);
        v21 = (char *)v20;
        if (v20)
          sub_100007780(v20);
      }
      else
      {
        v21 = 0;
      }
      free(v21);
    }
  }

  return a2;
}

uint64_t sub_10005CB40(uint64_t a1, int a2)
{
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  void *v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[128];

  if (!a1)
    return 0;
  v17 = 0u;
  v18 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPersonas", 0));
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v16;
    while (2)
    {
      v8 = 0;
      do
      {
        if (*(_QWORD *)v16 != v7)
          objc_enumerationMutation(v4);
        v9 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * (_QWORD)v8);
        v10 = *(id *)(a1 + 32);
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "userPersonas"));
        v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "objectForKeyedSubscript:", v9));

        LOBYTE(v10) = sub_10005CCA8(a1, a2, v12);
        if ((v10 & 1) != 0)
        {
          v13 = 1;
          goto LABEL_12;
        }
        v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v15, v19, 16);
      if (v6)
        continue;
      break;
    }
  }
  v13 = 0;
LABEL_12:

  return v13;
}

uint64_t sub_10005CCA8(uint64_t a1, int a2, void *a3)
{
  id v4;
  uint64_t *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  id v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE v47[12];
  __int16 v48;
  int v49;
  uint64_t v50;

  v4 = a3;
  if (a1)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v5 = &qword_1000E0000;
    v6 = (id)qword_1000E0128;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v50 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = v6;
        *(_DWORD *)v47 = 134218240;
        *(_QWORD *)&v47[4] = objc_msgSend(v4, "count");
        v48 = 1024;
        v49 = a2;
        v10 = (char *)_os_log_send_and_compose_impl(v8, &v50, 0, 0);

        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v10 = 0;
      }
      v5 = &qword_1000E0000;
      free(v10);
    }

    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v40 = v4;
    v11 = v4;
    v12 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
    if (v12)
    {
      v13 = v12;
      v14 = *(_QWORD *)v43;
      while (2)
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v43 != v14)
            objc_enumerationMutation(v11);
          v16 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v15);
          v17 = objc_opt_class(NSDictionary);
          if ((objc_opt_isKindOfClass(v16, v17) & 1) != 0)
          {
            v18 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", CFSTR("UserPersonaID")));
            v19 = objc_opt_class(NSNumber);
            if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
            {
              if (-[NSObject unsignedIntValue](v18, "unsignedIntValue") == a2)
              {
                if (qword_1000E0130 != -1)
                  dispatch_once(&qword_1000E0130, &stru_1000D1770);
                v33 = (id)v5[37];
                if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                {
                  *(_QWORD *)v47 = 0;
                  v34 = sub_100007750(1);
                  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
                    v35 = v34;
                  else
                    v35 = v34 & 0xFFFFFFFE;
                  if ((_DWORD)v35)
                  {
                    LODWORD(v50) = 67109120;
                    HIDWORD(v50) = a2;
                    v36 = (const char *)_os_log_send_and_compose_impl(v35, v47, 0, 0);
                    v37 = (char *)v36;
                    if (v36)
                      sub_100007780(v36);
                  }
                  else
                  {
                    v37 = 0;
                  }
                  free(v37);
                }

                v38 = 1;
                goto LABEL_69;
              }
            }
            else
            {
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v24 = (id)v5[37];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                *(_QWORD *)v47 = 0;
                v25 = sub_100007750(1);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  v26 = v25;
                else
                  v26 = v25 & 0xFFFFFFFE;
                if ((_DWORD)v26)
                {
                  LOWORD(v50) = 0;
                  v27 = (const char *)_os_log_send_and_compose_impl(v26, v47, 0, 0);
                  v28 = (char *)v27;
                  if (v27)
                    sub_100007780(v27);
                }
                else
                {
                  v28 = 0;
                }
                free(v28);
                v5 = &qword_1000E0000;
              }

            }
          }
          else
          {
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v18 = (id)v5[37];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              *(_QWORD *)v47 = 0;
              v20 = sub_100007750(1);
              if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
                v21 = v20;
              else
                v21 = v20 & 0xFFFFFFFE;
              if ((_DWORD)v21)
              {
                LOWORD(v50) = 0;
                v22 = (const char *)_os_log_send_and_compose_impl(v21, v47, 0, 0);
                v23 = (char *)v22;
                if (v22)
                  sub_100007780(v22);
              }
              else
              {
                v23 = 0;
              }
              v5 = &qword_1000E0000;
              free(v23);
            }
          }

          v15 = (char *)v15 + 1;
        }
        while (v13 != v15);
        v13 = -[NSObject countByEnumeratingWithState:objects:count:](v11, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
        if (v13)
          continue;
        break;
      }
    }

    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v11 = (id)v5[37];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v47 = 0;
      v29 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        LODWORD(v50) = 67109120;
        HIDWORD(v50) = a2;
        v31 = (const char *)_os_log_send_and_compose_impl(v30, v47, 0, 0);
        v32 = (char *)v31;
        if (v31)
          sub_100007780(v31);
      }
      else
      {
        v32 = 0;
      }
      free(v32);
      v38 = 0;
    }
    else
    {
      v38 = 0;
LABEL_69:
      v4 = v40;
    }

  }
  else
  {
    v38 = 0;
  }

  return v38;
}

id sub_10005D2A8(id a1, unsigned int a2, void *a3)
{
  id v4;
  uint64_t *v5;
  uint64_t *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  _UNKNOWN **v16;
  void *i;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  char isKindOfClass;
  uint64_t v23;
  NSObject *v24;
  _UNKNOWN **v25;
  unint64_t v26;
  uint64_t *v27;
  NSObject *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  uint64_t v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  id v41;
  uint64_t v42;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[128];
  int v50;
  unsigned int v51;

  v4 = a3;
  if (a1)
  {
    v5 = &qword_1000E0000;
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v6 = &qword_1000E0000;
    v7 = (id)qword_1000E0128;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v48 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v50 = 67109120;
        v51 = a2;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v48, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
      v6 = &qword_1000E0000;
    }

    v46 = 0u;
    v47 = 0u;
    v44 = 0u;
    v45 = 0u;
    v12 = (unint64_t)v4;
    v13 = objc_msgSend((id)v12, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
    if (v13)
    {
      v14 = v13;
      v41 = v4;
      v15 = *(_QWORD *)v45;
      v16 = &AKSGetLastUser_ptr;
      v42 = *(_QWORD *)v45;
      do
      {
        for (i = 0; i != v14; i = (char *)i + 1)
        {
          if (*(_QWORD *)v45 != v15)
            objc_enumerationMutation((id)v12);
          v18 = *(void **)(*((_QWORD *)&v44 + 1) + 8 * (_QWORD)i);
          v19 = objc_opt_class(v16[119]);
          if ((objc_opt_isKindOfClass(v18, v19) & 1) != 0)
          {
            v20 = objc_claimAutoreleasedReturnValue(objc_msgSend(v18, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));
            v21 = objc_opt_class(NSNumber);
            isKindOfClass = objc_opt_isKindOfClass(v20, v21);
            v23 = v5[38];
            if ((isKindOfClass & 1) != 0)
            {
              if (v23 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v24 = (id)v6[37];
              if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
              {
                v25 = v16;
                v26 = v12;
                v48 = 0;
                LODWORD(v12) = sub_100007750(1);
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
                  v12 = v12;
                else
                  v12 = v12 & 0xFFFFFFFE;
                if ((_DWORD)v12)
                {
                  v27 = v5;
                  v28 = v24;
                  v29 = -[NSObject unsignedIntValue](v20, "unsignedIntValue");
                  v50 = 67109120;
                  v51 = v29;
                  v30 = (char *)_os_log_send_and_compose_impl(v12, &v48, 0, 0);

                  if (v30)
                    sub_100007780(v30);
                  v5 = v27;
                  v6 = &qword_1000E0000;
                }
                else
                {
                  v30 = 0;
                }
                free(v30);
                v12 = v26;
                v16 = v25;
                v15 = v42;
              }

              if (-[NSObject unsignedIntValue](v20, "unsignedIntValue") == a2)
              {
                a1 = v18;

                goto LABEL_60;
              }
            }
            else
            {
              if (v23 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v35 = (id)v6[37];
              if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
              {
                v48 = 0;
                v36 = sub_100007750(1);
                if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
                  v37 = v36;
                else
                  v37 = v36 & 0xFFFFFFFE;
                if ((_DWORD)v37)
                {
                  LOWORD(v50) = 0;
                  v38 = (const char *)_os_log_send_and_compose_impl(v37, &v48, 0, 0);
                  v39 = (char *)v38;
                  if (v38)
                    sub_100007780(v38);
                }
                else
                {
                  v39 = 0;
                }
                free(v39);
              }

            }
          }
          else
          {
            if (v5[38] != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v20 = (id)v6[37];
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              v48 = 0;
              v31 = sub_100007750(1);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
                v32 = v31;
              else
                v32 = v31 & 0xFFFFFFFE;
              if ((_DWORD)v32)
              {
                LOWORD(v50) = 0;
                v33 = (const char *)_os_log_send_and_compose_impl(v32, &v48, 0, 0);
                v34 = (char *)v33;
                if (v33)
                  sub_100007780(v33);
              }
              else
              {
                v34 = 0;
              }
              free(v34);
            }
          }

        }
        v14 = objc_msgSend((id)v12, "countByEnumeratingWithState:objects:count:", &v44, v49, 16);
      }
      while (v14);
      a1 = 0;
LABEL_60:
      v4 = v41;
    }
    else
    {
      a1 = 0;
    }

  }
  return a1;
}

id sub_10005D7CC(id result, uint64_t a2, void *a3)
{
  if (result)
  {
    if (a2)
      return objc_msgSend(a3, "addObject:", a2);
  }
  return result;
}

void sub_10005D7E4(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  void *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[128];

  v5 = a3;
  v6 = v5;
  if (!a1)
    goto LABEL_17;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
  if (!v8)
    goto LABEL_16;
  v9 = v8;
  v17 = v6;
  v10 = *(_QWORD *)v19;
LABEL_4:
  v11 = 0;
  while (1)
  {
    if (*(_QWORD *)v19 != v10)
      objc_enumerationMutation(v7);
    v12 = *(void **)(*((_QWORD *)&v18 + 1) + 8 * v11);
    v13 = objc_opt_class(NSMutableDictionary);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) == 0)
      goto LABEL_11;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UserPersonaID")));
    v15 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0 && objc_msgSend(v14, "unsignedIntValue") == a2)
      break;

LABEL_11:
    if (v9 == (id)++v11)
    {
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v18, v22, 16);
      if (v9)
        goto LABEL_4;
      v6 = v17;
      goto LABEL_16;
    }
  }
  v16 = v12;

  v6 = v17;
  if (!v16)
    goto LABEL_17;
  objc_msgSend(v7, "removeObjectIdenticalTo:", v16);
  v7 = v16;
LABEL_16:

LABEL_17:
}

uint64_t sub_10005D988(uint64_t a1, int a2, void *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  void *v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  int v30;
  int v31;
  _BYTE v32[128];

  v5 = a3;
  v6 = v5;
  if (!a1)
  {
    v16 = 0;
    goto LABEL_30;
  }
  v28 = 0u;
  v29 = 0u;
  v26 = 0u;
  v27 = 0u;
  v7 = v5;
  v8 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
  if (!v8)
  {
    v16 = 0;
    v17 = v7;
    goto LABEL_29;
  }
  v9 = v8;
  v24 = v6;
  v10 = *(_QWORD *)v27;
LABEL_4:
  v11 = 0;
  while (1)
  {
    if (*(_QWORD *)v27 != v10)
      objc_enumerationMutation(v7);
    v12 = *(void **)(*((_QWORD *)&v26 + 1) + 8 * v11);
    v13 = objc_opt_class(NSMutableDictionary);
    if ((objc_opt_isKindOfClass(v12, v13) & 1) == 0)
      goto LABEL_11;
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));
    v15 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v14, v15) & 1) != 0 && objc_msgSend(v14, "unsignedIntValue") == a2)
      break;

LABEL_11:
    if (v9 == (id)++v11)
    {
      v9 = objc_msgSend(v7, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
      if (v9)
        goto LABEL_4;
      v16 = 0;
      v17 = v7;
      v6 = v24;
      goto LABEL_29;
    }
  }
  v17 = v12;

  if (!v17)
  {
    v16 = 0;
    v6 = v24;
    goto LABEL_30;
  }
  v6 = v24;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v18 = (id)qword_1000E0128;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    v25 = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v20)
    {
      v30 = 67109120;
      v31 = a2;
      v21 = (const char *)_os_log_send_and_compose_impl(v20, &v25, 0, 0);
      v22 = (char *)v21;
      if (v21)
        sub_100007780(v21);
    }
    else
    {
      v22 = 0;
    }
    free(v22);
  }

  objc_msgSend(v7, "removeObjectIdenticalTo:", v17);
  v16 = 1;
LABEL_29:

LABEL_30:
  return v16;
}

id sub_10005DC34(uint64_t a1, void *a2, _DWORD *a3)
{
  id v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  id v16;
  uint64_t v18;
  _QWORD v19[3];

  if (!a1)
    return 0;
  if (a3)
    *a3 = 0;
  v4 = sub_1000042B4(a1, a2);
  v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
  if (objc_msgSend(v5, "count"))
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v6 = (id)qword_1000E0128;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v18 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        LODWORD(v19[0]) = 138412290;
        *(_QWORD *)((char *)v19 + 4) = v5;
        v9 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

    v16 = v5;
  }
  else
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v11 = (id)qword_1000E0128;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v19[0] = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LOWORD(v18) = 0;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, v19, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    v16 = 0;
    if (a3)
      *a3 = 2;
  }

  return v16;
}

id *sub_10005DE80(id *a1, _DWORD *a2)
{
  id *v2;
  void *v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  void *i;
  uint64_t v10;
  id v11;
  void *v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _BYTE v31[128];

  v2 = a1;
  if (a1)
  {
    if (a2)
      *a2 = 0;
    v4 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2[4], "userPersonas"));
    v6 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
    if (v6)
    {
      v7 = v6;
      v8 = *(_QWORD *)v27;
      do
      {
        for (i = 0; i != v7; i = (char *)i + 1)
        {
          if (*(_QWORD *)v27 != v8)
            objc_enumerationMutation(v5);
          v10 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)i);
          v11 = v2[4];
          v12 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v11, "userPersonas"));
          v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v12, "objectForKeyedSubscript:", v10));
          objc_msgSend(v4, "addObjectsFromArray:", v13);

        }
        v7 = objc_msgSend(v5, "countByEnumeratingWithState:objects:count:", &v26, v31, 16);
      }
      while (v7);
    }

    if (objc_msgSend(v4, "count"))
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v14 = (id)qword_1000E0128;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v25 = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          LODWORD(v30[0]) = 138412290;
          *(_QWORD *)((char *)v30 + 4) = v4;
          v17 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0);
          v18 = (char *)v17;
          if (v17)
            sub_100007780(v17);
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }

      v2 = v4;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v19 = (id)qword_1000E0128;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        v30[0] = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LOWORD(v25) = 0;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, v30, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }

      v2 = 0;
      if (a2)
        *a2 = 2;
    }

  }
  return v2;
}

id sub_10005E1B0(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  char v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  uint64_t v19;
  char isKindOfClass;
  id v21;

  v5 = a2;
  if (a1)
  {
    v6 = sub_1000042B4((uint64_t)a1, a3);
    v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaUniqueString")));
    if (v8
      && (v9 = (void *)v8,
          v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaUniqueString"))),
          v11 = objc_opt_class(NSString),
          v12 = objc_opt_isKindOfClass(v10, v11),
          v10,
          v9,
          (v12 & 1) != 0))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaUniqueString")));
      v14 = sub_100007154((uint64_t)a1, v13, v7);
      v15 = objc_claimAutoreleasedReturnValue(v14);
    }
    else
    {
      v16 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));
      if (!v16
        || (v17 = (void *)v16,
            v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaType"))),
            v19 = objc_opt_class(NSNumber),
            isKindOfClass = objc_opt_isKindOfClass(v18, v19),
            v18,
            v17,
            (isKindOfClass & 1) == 0))
      {
        a1 = 0;
        goto LABEL_10;
      }
      v13 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));
      v21 = sub_10005D2A8(a1, objc_msgSend(v13, "unsignedLongValue"), v7);
      v15 = objc_claimAutoreleasedReturnValue(v21);
    }
    a1 = (void *)v15;

LABEL_10:
  }

  return a1;
}

id sub_10005E334(void *a1, void *a2, void *a3, _DWORD *a4)
{
  id v7;
  id v8;
  void *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  id v20;
  uint64_t v22;
  int v23;
  id v24;

  v7 = a2;
  if (a1)
  {
    if (a4)
      *a4 = 0;
    v8 = sub_10005E1B0(a1, v7, a3);
    v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
    if (v9)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v10 = (id)qword_1000E0128;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v22 = 0;
        v11 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          v12 = v11;
        else
          v12 = v11 & 0xFFFFFFFE;
        if ((_DWORD)v12)
        {
          v23 = 138412290;
          v24 = v9;
          v13 = (const char *)_os_log_send_and_compose_impl(v12, &v22, 0, 0);
          v14 = (char *)v13;
          if (v13)
            sub_100007780(v13);
        }
        else
        {
          v14 = 0;
        }
        free(v14);
      }

      v20 = v9;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = (id)qword_1000E0128;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v22 = 0;
        v16 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          v23 = 138412290;
          v24 = v7;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, &v22, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

      if (a4)
        *a4 = 2;
    }

  }
  else
  {
    v9 = 0;
  }

  return v9;
}

id sub_10005E5A0(void *a1, void *a2, void *a3, _DWORD *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  void *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  void *v26;
  uint64_t v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  char *v42;
  void *v43;
  id v44;
  _QWORD v46[2];
  _BYTE v47[24];

  v7 = a2;
  v8 = a3;
  if (!a1)
  {
    v43 = 0;
    goto LABEL_82;
  }
  if (a4)
    *a4 = 0;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v9 = (id)qword_1000E0128;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v46[0] = 0;
    v10 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      *(_DWORD *)v47 = 138412290;
      *(_QWORD *)&v47[4] = v7;
      v12 = (const char *)_os_log_send_and_compose_impl(v11, v46, 0, 0);
      v13 = (char *)v12;
      if (v12)
        sub_100007780(v12);
    }
    else
    {
      v13 = 0;
    }
    free(v13);
  }

  v14 = sub_10005E1B0(a1, v7, v8);
  v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
  if (!v15)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v21 = (id)qword_1000E0128;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v46[0] = 0;
      v22 = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        *(_DWORD *)v47 = 138412290;
        *(_QWORD *)&v47[4] = v7;
        v24 = (const char *)_os_log_send_and_compose_impl(v23, v46, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    v43 = 0;
    if (a4)
      *a4 = 2;
    goto LABEL_81;
  }
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v16 = (id)qword_1000E0128;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v46[0] = 0;
    v17 = sub_100007750(1);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
      v18 = v17;
    else
      v18 = v17 & 0xFFFFFFFE;
    if ((_DWORD)v18)
    {
      *(_DWORD *)v47 = 138412290;
      *(_QWORD *)&v47[4] = v15;
      v19 = (const char *)_os_log_send_and_compose_impl(v18, v46, 0, 0);
      v20 = (char *)v19;
      if (v19)
        sub_100007780(v19);
    }
    else
    {
      v20 = 0;
    }
    free(v20);
  }

  v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", CFSTR("UserPersonaBundleIDS")));
  if (v26)
  {
    v27 = objc_opt_class(NSArray);
    if ((objc_opt_isKindOfClass(v26, v27) & 1) == 0)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v38 = (id)qword_1000E0128;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v47 = 0;
        v39 = sub_100007750(1);
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          v40 = v39;
        else
          v40 = v39 & 0xFFFFFFFE;
        if ((_DWORD)v40)
        {
          LOWORD(v46[0]) = 0;
          v41 = (const char *)_os_log_send_and_compose_impl(v40, v47, 0, 0);
          v42 = (char *)v41;
          if (v41)
            sub_100007780(v41);
        }
        else
        {
          v42 = 0;
        }
        free(v42);
      }

      v43 = 0;
      if (a4)
        *a4 = 22;
      goto LABEL_80;
    }
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v28 = (id)qword_1000E0128;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
    {
      v46[0] = 0;
      v29 = sub_100007750(1);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        v30 = v29;
      else
        v30 = v29 & 0xFFFFFFFE;
      if ((_DWORD)v30)
      {
        *(_DWORD *)v47 = 138412290;
        *(_QWORD *)&v47[4] = v26;
        v31 = (const char *)_os_log_send_and_compose_impl(v30, v46, 0, 0);
        v32 = (char *)v31;
        if (v31)
          sub_100007780(v31);
      }
      else
      {
        v32 = 0;
      }
      free(v32);
    }

    v44 = v26;
  }
  else
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v33 = (id)qword_1000E0128;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
    {
      *(_QWORD *)v47 = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        LOWORD(v46[0]) = 0;
        v36 = (const char *)_os_log_send_and_compose_impl(v35, v47, 0, 0);
        v37 = (char *)v36;
        if (v36)
          sub_100007780(v36);
      }
      else
      {
        v37 = 0;
      }
      free(v37);
    }

    v44 = (id)objc_claimAutoreleasedReturnValue(+[NSArray array](NSArray, "array"));
  }
  v43 = v44;
LABEL_80:

LABEL_81:
LABEL_82:

  return v43;
}

void sub_10005EBB8(id *a1, void *a2)
{
  id v3;
  void *v4;
  void *v5;
  NSObject *v6;
  void *v7;
  id *v8;
  void *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  id *v19;
  void *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  id *v26;
  void *v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  id *v33;
  void *v34;
  NSObject *v35;
  unsigned int v36;
  uint64_t v37;
  const char *v38;
  char *v39;
  uint64_t v40;

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userPersonas"));
      v6 = objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", v4));

      if (!v6)
      {
        v6 = objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
        v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userPersonas"));
        objc_msgSend(v7, "setObject:forKeyedSubscript:", v6, v4);

      }
      v8 = sub_10005F108(a1, v6, 0, v4);
      v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
      if (!v9)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v10 = (id)qword_1000E0128;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          v40 = 0;
          v11 = sub_100007750(1);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            v12 = v11;
          else
            v12 = v11 & 0xFFFFFFFE;
          if ((_DWORD)v12)
          {
            v13 = (const char *)_os_log_send_and_compose_impl(v12, &v40, 0, 0);
            v14 = (char *)v13;
            if (v13)
              sub_100007780(v13);
          }
          else
          {
            v14 = 0;
          }
          free(v14);
        }

      }
      v19 = sub_10005F108(a1, v6, 3, v4);
      v20 = (void *)objc_claimAutoreleasedReturnValue(v19);

      if (!v20)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v21 = (id)qword_1000E0128;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          v40 = 0;
          v22 = sub_100007750(1);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            v23 = v22;
          else
            v23 = v22 & 0xFFFFFFFE;
          if ((_DWORD)v23)
          {
            v24 = (const char *)_os_log_send_and_compose_impl(v23, &v40, 0, 0);
            v25 = (char *)v24;
            if (v24)
              sub_100007780(v24);
          }
          else
          {
            v25 = 0;
          }
          free(v25);
        }

      }
      v26 = sub_10005F108(a1, v6, 5, v4);
      v27 = (void *)objc_claimAutoreleasedReturnValue(v26);

      if (!v27)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v28 = (id)qword_1000E0128;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v40 = 0;
          v29 = sub_100007750(1);
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
            v30 = v29;
          else
            v30 = v29 & 0xFFFFFFFE;
          if ((_DWORD)v30)
          {
            v31 = (const char *)_os_log_send_and_compose_impl(v30, &v40, 0, 0);
            v32 = (char *)v31;
            if (v31)
              sub_100007780(v31);
          }
          else
          {
            v32 = 0;
          }
          free(v32);
        }

      }
      v33 = sub_10005F108(a1, v6, 4, v4);
      v34 = (void *)objc_claimAutoreleasedReturnValue(v33);

      if (!v34)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v35 = (id)qword_1000E0128;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          v40 = 0;
          v36 = sub_100007750(1);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            v37 = v36;
          else
            v37 = v36 & 0xFFFFFFFE;
          if ((_DWORD)v37)
          {
            v38 = (const char *)_os_log_send_and_compose_impl(v37, &v40, 0, 0);
            v39 = (char *)v38;
            if (v38)
              sub_100007780(v38);
          }
          else
          {
            v39 = 0;
          }
          free(v39);
        }

      }
      sub_10005F5C8((uint64_t)a1);

    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v6 = (id)qword_1000E0128;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v40 = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          v17 = (const char *)_os_log_send_and_compose_impl(v16, &v40, 0, 0);
          v18 = (char *)v17;
          if (v17)
            sub_100007780(v17);
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }
    }

  }
}

id *sub_10005F108(id *a1, void *a2, uint64_t a3, void *a4)
{
  id *v4;
  id v7;
  id v8;
  void *v9;
  void *v10;
  id v11;
  NSObject *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  const char *v24;
  char *v25;
  id *v26;
  uint64_t v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  const __CFString *v32;
  void *v33;

  v4 = a1;
  if (a1)
  {
    v32 = CFSTR("UserPersonaType");
    v7 = a4;
    v8 = a2;
    v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", a3));
    v33 = v9;
    v10 = (void *)objc_claimAutoreleasedReturnValue(+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1));
    v11 = objc_msgSend(v10, "mutableCopy");

    objc_msgSend(v11, "setObject:forKeyedSubscript:", v7, CFSTR("UserPersonaUserODUUID"));
    v29 = 0;
    v12 = sub_10005F610(v4, v8, v11, 0, 0, 1, &v29);
    v4 = (id *)objc_claimAutoreleasedReturnValue(v12);

    if (!v4)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v16 = (id)qword_1000E0128;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v28 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v18)
        {
          v30 = 67109120;
          v31 = v29;
          v19 = (const char *)_os_log_send_and_compose_impl(v18, &v28, 0, 0);
          v20 = (char *)v19;
          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v20 = 0;
        }
        free(v20);
      }

      goto LABEL_55;
    }
    switch((_DWORD)a3)
    {
      case 3:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v13 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        v28 = 0;
        v21 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v21;
        else
          v15 = v21 & 0xFFFFFFFE;
        if (!(_DWORD)v15)
          goto LABEL_49;
        LOWORD(v30) = 0;
        break;
      case 5:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v13 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        v28 = 0;
        v22 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v22;
        else
          v15 = v22 & 0xFFFFFFFE;
        if (!(_DWORD)v15)
          goto LABEL_49;
        LOWORD(v30) = 0;
        break;
      case 4:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v13 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        v28 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          LOWORD(v30) = 0;
          break;
        }
LABEL_49:
        v25 = 0;
LABEL_50:
        free(v25);
LABEL_51:

        v26 = v4;
LABEL_55:

        return v4;
      default:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v13 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        v28 = 0;
        v23 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v23;
        else
          v15 = v23 & 0xFFFFFFFE;
        if (!(_DWORD)v15)
          goto LABEL_49;
        LOWORD(v30) = 0;
        break;
    }
    v24 = (const char *)_os_log_send_and_compose_impl(v15, &v28, 0, 0);
    v25 = (char *)v24;
    if (v24)
      sub_100007780(v24);
    goto LABEL_50;
  }
  return v4;
}

uint64_t sub_10005F5C8(uint64_t result)
{
  uint64_t v1;
  id v2;
  void *v3;
  uint64_t v4;

  if (result)
  {
    v1 = result;
    v2 = sub_100064324(result);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = sub_1000644E0(v1, v3, 0);

    return v4;
  }
  return result;
}

NSObject *sub_10005F610(id *a1, void *a2, void *a3, void *a4, int a5, char a6, unsigned int *a7)
{
  id v13;
  id v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  NSObject *v19;
  unsigned int v20;
  NSObject *v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  id v29;
  unsigned int *v30;
  const __CFString *v31;
  unsigned int v32;
  NSObject *v33;
  void *v34;
  unsigned int v35;
  NSObject *v36;
  unsigned int v37;
  NSObject *v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  unsigned int v47;
  NSObject *v48;
  uint64_t v49;
  char *v50;
  NSObject *v51;
  int v52;
  unsigned int v53;
  NSObject *v54;
  uint64_t v55;
  char *v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  void *v68;
  NSObject *v69;
  unsigned int v70;
  uint64_t v71;
  const char *v72;
  char *v73;
  NSObject *v74;
  id *v75;
  id v76;
  void *v77;
  unsigned int v78;
  NSObject *v79;
  uint64_t v80;
  char *v81;
  void *v82;
  NSObject *v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  const char *v87;
  char *v88;
  void *v89;
  NSObject *v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  unsigned int v94;
  NSObject *v95;
  uint64_t v96;
  char *v97;
  void *v98;
  void *v99;
  NSObject *v100;
  unsigned int v101;
  uint64_t v102;
  const char *v103;
  char *v104;
  NSObject *v105;
  unsigned int v106;
  uint64_t v107;
  const char *v108;
  char *v109;
  char v110;
  NSObject *v111;
  NSObject *v112;
  unsigned int v113;
  uint64_t v114;
  const char *v115;
  char *v116;
  NSObject *v117;
  unsigned int v118;
  uint64_t v119;
  NSObject *v120;
  unsigned int v121;
  char *v122;
  void *v123;
  void *v124;
  int v125;
  NSObject *v126;
  void *v127;
  uint64_t v128;
  NSObject *v129;
  int v130;
  unsigned int v131;
  NSObject *v132;
  uint64_t v133;
  char *v134;
  NSObject *v135;
  unsigned int v136;
  id v137;
  uint64_t v138;
  const char *v139;
  char *v140;
  int v141;
  NSObject *v142;
  unsigned int v143;
  uint64_t v144;
  const char *v145;
  char *v146;
  int v147;
  id v148;
  NSObject *v149;
  int v150;
  unsigned int v151;
  NSObject *v152;
  uint64_t v153;
  char *v154;
  id v155;
  unsigned int v156;
  NSObject *v157;
  int v158;
  unsigned int v159;
  NSObject *v160;
  uint64_t v161;
  char *v162;
  NSObject *v163;
  unsigned int v164;
  NSObject *v165;
  uint64_t v166;
  char *v167;
  id v168;
  unsigned __int8 v169;
  NSObject *v170;
  int v171;
  unsigned int v172;
  NSObject *v173;
  uint64_t v174;
  char *v175;
  NSObject *v176;
  unsigned int v177;
  NSObject *v178;
  uint64_t v179;
  char *v180;
  id v181;
  unsigned __int8 v182;
  id *v183;
  void *v184;
  NSObject *v185;
  unsigned int v186;
  NSObject *v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  NSObject *v191;
  id v192;
  void *v193;
  int v194;
  NSObject *v195;
  void *v196;
  id v197;
  NSObject *v198;
  void *v199;
  unsigned int v200;
  uint64_t v201;
  unsigned int v202;
  char *v203;
  id v204;
  uint64_t v205;
  void *v206;
  unsigned int v207;
  NSObject *v208;
  unsigned int v209;
  NSObject *v210;
  uint64_t v211;
  char *v212;
  NSObject *v213;
  unsigned int v214;
  NSObject *v215;
  uint64_t v216;
  char *v217;
  id v218;
  uint64_t v219;
  NSObject *v220;
  unsigned int v221;
  NSObject *v222;
  uint64_t v223;
  char *v224;
  NSObject *v225;
  unsigned int v226;
  NSObject *v227;
  uint64_t v228;
  char *v229;
  id v230;
  unsigned int v231;
  NSObject *v232;
  unsigned int v233;
  NSObject *v234;
  uint64_t v235;
  unsigned int v236;
  char *v237;
  id v238;
  unsigned int v239;
  NSObject *v240;
  unsigned int v241;
  NSObject *v242;
  uint64_t v243;
  unsigned int v244;
  char *v245;
  unsigned int *v246;
  NSObject *v247;
  id v248;
  id v249;
  void *v250;
  unsigned int v251;
  NSObject *v252;
  uint64_t v253;
  char *v254;
  NSObject *v255;
  id v257;
  uint64_t v258;
  void *v259;
  unsigned int v260;
  unsigned int v261;
  NSObject *v262;
  uint64_t v263;
  char *v264;
  NSObject *v265;
  unsigned int v266;
  NSObject *v267;
  uint64_t v268;
  char *v269;
  id v270;
  uint64_t v271;
  void *v272;
  unsigned int v273;
  NSObject *v274;
  unsigned int v275;
  NSObject *v276;
  uint64_t v277;
  _BYTE *v278;
  unsigned int v279;
  char *v280;
  _QWORD *v281;
  uint64_t v282;
  NSObject *v283;
  id v284;
  unsigned int v285;
  int v286;
  void *v287;
  void *v288;
  void *v289;
  uint64_t v290;
  void *v291;
  unsigned int *v292;
  unsigned int *v293;
  NSObject *v294;
  NSObject *v295;
  int v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  unsigned int v302;
  int v303;
  char v304;
  id v305;
  unsigned int v306;
  void *v307;
  unsigned int v308;
  void *v309;
  NSObject *v310;
  NSObject *v311;
  NSObject *v312;
  NSObject *v313;
  unsigned int v314;
  id v315;
  id v316;
  _BYTE v317[28];
  __int16 v318;
  NSObject *v319;
  _QWORD v320[2];

  v13 = a2;
  v14 = a3;
  v15 = a4;
  v309 = v13;
  if (!a1)
  {
    v255 = 0;
    goto LABEL_473;
  }
  v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("UserPersonaUserODUUID")));

  if (!v16)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v24 = (id)qword_1000E0128;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v317 = 0;
      v25 = sub_100007750(1);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        v26 = v25;
      else
        v26 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v26)
      {
        LOWORD(v320[0]) = 0;
        v27 = (const char *)_os_log_send_and_compose_impl(v26, v317, 0, 0);
        v28 = (char *)v27;
        if (v27)
          sub_100007780(v27);
      }
      else
      {
        v28 = 0;
      }
      free(v28);
    }
    v17 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 22;
    goto LABEL_458;
  }
  v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("UserPersonaUserODUUID")));
  v18 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));

  v304 = a6;
  if (v18)
  {
    switch(sub_100088228(v14, (uint64_t)CFSTR("UserPersonaType"), (id)0xFFFFFFFFLL))
    {
      case 2u:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v19 = (id)qword_1000E0128;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          v296 = a5;
          *(_QWORD *)v317 = 0;
          v20 = sub_100007750(1);
          v21 = v19;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
            v22 = v20;
          else
            v22 = v20 & 0xFFFFFFFE;
          if ((_DWORD)v22)
          {
            LOWORD(v320[0]) = 0;
            LODWORD(v282) = 2;
            v281 = v320;
            v23 = (char *)_os_log_send_and_compose_impl(v22, v317, 0, 0);

            if (v23)
              sub_100007780(v23);
          }
          else
          {

            v23 = 0;
          }
          v13 = v309;
          free(v23);
          a5 = v296;
        }
        v29 = v15;
        v30 = a7;

        v308 = sub_10005C7C8((uint64_t)a1, 2000, 1000);
        v32 = 2;
        LODWORD(v18) = 1;
        v31 = CFSTR("Enterprise");
        goto LABEL_76;
      case 3u:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v36 = (id)qword_1000E0128;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          v297 = a5;
          *(_QWORD *)v317 = 0;
          v37 = sub_100007750(1);
          v38 = v36;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            v39 = v37;
          else
            v39 = v37 & 0xFFFFFFFE;
          if ((_DWORD)v39)
          {
            LOWORD(v320[0]) = 0;
            LODWORD(v282) = 2;
            v281 = v320;
            v40 = (char *)_os_log_send_and_compose_impl(v39, v317, 0, 0);

            if (v40)
              sub_100007780(v40);
          }
          else
          {

            v40 = 0;
          }
          v13 = v309;
          free(v40);
          a5 = v297;
        }
        v29 = v15;
        v30 = a7;

        v308 = sub_10005C7C8((uint64_t)a1, 99, 100);
        LODWORD(v18) = 0;
        v32 = 3;
        v31 = CFSTR("System");
        goto LABEL_76;
      case 4u:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v41 = (id)qword_1000E0128;
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          v298 = a5;
          *(_QWORD *)v317 = 0;
          v42 = sub_100007750(1);
          v43 = v41;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            v44 = v42;
          else
            v44 = v42 & 0xFFFFFFFE;
          if ((_DWORD)v44)
          {
            LOWORD(v320[0]) = 0;
            LODWORD(v282) = 2;
            v281 = v320;
            v45 = (char *)_os_log_send_and_compose_impl(v44, v317, 0, 0);

            if (v45)
              sub_100007780(v45);
          }
          else
          {

            v45 = 0;
          }
          v13 = v309;
          free(v45);
          a5 = v298;
        }
        v29 = v15;
        v30 = a7;

        LODWORD(v18) = 0;
        v32 = 4;
        v308 = 1000;
        v31 = CFSTR("Universal");
        goto LABEL_76;
      case 5u:
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v46 = (id)qword_1000E0128;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
        {
          v299 = a5;
          *(_QWORD *)v317 = 0;
          v47 = sub_100007750(1);
          v48 = v46;
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            v49 = v47;
          else
            v49 = v47 & 0xFFFFFFFE;
          if ((_DWORD)v49)
          {
            LOWORD(v320[0]) = 0;
            LODWORD(v282) = 2;
            v281 = v320;
            v50 = (char *)_os_log_send_and_compose_impl(v49, v317, 0, 0);

            if (v50)
              sub_100007780(v50);
          }
          else
          {

            v50 = 0;
          }
          v13 = v309;
          free(v50);
          a5 = v299;
        }
        v29 = v15;
        v30 = a7;

        v308 = sub_10005C7C8((uint64_t)a1, 199, 100);
        LODWORD(v18) = 0;
        v32 = 5;
        v31 = CFSTR("Default");
        goto LABEL_76;
      case 6u:
        v305 = v15;
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v51 = (id)qword_1000E0128;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        {
          v52 = a5;
          *(_QWORD *)v317 = 0;
          v53 = sub_100007750(1);
          v54 = v51;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            v55 = v53;
          else
            v55 = v53 & 0xFFFFFFFE;
          if ((_DWORD)v55)
          {
            LOWORD(v320[0]) = 0;
            LODWORD(v282) = 2;
            v281 = v320;
            v56 = (char *)_os_log_send_and_compose_impl(v55, v317, 0, 0);

            if (v56)
              sub_100007780(v56);
          }
          else
          {

            v56 = 0;
          }
          free(v56);
          a5 = v52;
        }
        v30 = a7;

        v308 = sub_10005C7C8((uint64_t)a1, 3000, 1000);
        v306 = 6;
        v31 = CFSTR("Guest");
        goto LABEL_106;
      default:
        v29 = v15;
        v30 = a7;
        v308 = sub_10005C7C8((uint64_t)a1, 1000, 1000);
        LODWORD(v18) = 0;
        v32 = 0;
        v31 = CFSTR("Personal");
        goto LABEL_76;
    }
  }
  v29 = v15;
  v30 = a7;
  v31 = 0;
  v32 = 0;
  v308 = 1000;
LABEL_76:
  v57 = sub_10005D2A8(a1, v32, v13);
  v58 = objc_claimAutoreleasedReturnValue(v57);
  if (v58)
  {
    v24 = v58;
    v307 = v17;
    a7 = v30;
    if ((_DWORD)v18)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = v29;
      v59 = (id)qword_1000E0128;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v317 = 0;
        v60 = sub_100007750(1);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          v61 = v60;
        else
          v61 = v60 & 0xFFFFFFFE;
        if ((_DWORD)v61)
        {
          LODWORD(v320[0]) = 67109120;
          HIDWORD(v320[0]) = v308;
          v62 = (const char *)_os_log_send_and_compose_impl(v61, v317, 0, 0);
          v63 = (char *)v62;
          if (v62)
            sub_100007780(v62);
        }
        else
        {
          v63 = 0;
        }
        free(v63);
      }
      v34 = 0;
      v33 = 0;
      v35 = 17;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = v29;
      v59 = (id)qword_1000E0128;
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v317 = 0;
        v64 = sub_100007750(1);
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          v65 = v64;
        else
          v65 = v64 & 0xFFFFFFFE;
        if ((_DWORD)v65)
        {
          LODWORD(v320[0]) = 67109120;
          HIDWORD(v320[0]) = v308;
          v66 = (const char *)_os_log_send_and_compose_impl(v65, v317, 0, 0);
          v67 = (char *)v66;
          if (v66)
            sub_100007780(v66);
        }
        else
        {
          v67 = 0;
        }
        free(v67);
      }
      v34 = 0;
      v33 = 0;
      v35 = 16;
    }
    goto LABEL_456;
  }
  v306 = v32;
  v305 = v29;
LABEL_106:
  v24 = objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary", v281, v282));
  v68 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v306));
  -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v68, CFSTR("UserPersonaType"));

  -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v31, CFSTR("UserPersonaNickName"));
  -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v17, CFSTR("UserPersonaUserODUUID"));
  if (((1 << v306) & 0x45) != 0)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v74 = (id)qword_1000E0128;
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      v300 = a5;
      v75 = a1;
      v76 = v14;
      v77 = v17;
      *(_QWORD *)v317 = 0;
      v78 = sub_100007750(1);
      v79 = v74;
      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        v80 = v78;
      else
        v80 = v78 & 0xFFFFFFFE;
      if ((_DWORD)v80)
      {
        LODWORD(v320[0]) = 67109120;
        HIDWORD(v320[0]) = v308;
        v81 = (char *)_os_log_send_and_compose_impl(v80, v317, 0, 0);

        if (v81)
          sub_100007780(v81);
      }
      else
      {

        v81 = 0;
      }
      v17 = v77;
      free(v81);
      v14 = v76;
      a1 = v75;
      a5 = v300;
    }
    v293 = v30;

    v89 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v308));
    -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v89, CFSTR("UserPersonaID"));

    v289 = (void *)objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
    v288 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v289, "UUIDString"));
    -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:");
    v307 = v17;
    if ((v306 | 4) == 6)
    {
      v90 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
      v83 = v90;
      v82 = v309;
      if (v90)
      {
        v91 = objc_claimAutoreleasedReturnValue(-[NSObject UUIDString](v90, "UUIDString"));
        v15 = v305;
        if (v91)
        {
          -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v91, CFSTR("MKBUserSessionUUID"));
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v92 = (id)qword_1000E0128;
          if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
          {
            v301 = a5;
            v93 = v91;
            v320[0] = 0;
            v94 = sub_100007750(1);
            v95 = v92;
            if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
              v96 = v94;
            else
              v96 = v94 & 0xFFFFFFFE;
            if ((_DWORD)v96)
            {
              *(_DWORD *)v317 = 138412290;
              v91 = v93;
              *(_QWORD *)&v317[4] = v93;
              v97 = (char *)_os_log_send_and_compose_impl(v96, v320, 0, 0);

              if (v97)
                sub_100007780(v97);
            }
            else
            {

              v97 = 0;
              v91 = v93;
            }
            v15 = v305;
            free(v97);
            a5 = v301;
            v82 = v309;
          }

        }
        v123 = (void *)v91;
        v124 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%@/%@"), CFSTR("/private/var/PersonaVolumes"), v91));
        -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v124, CFSTR("MKBUserSessionHomeDir"));

        v34 = v123;
LABEL_220:
        v315 = 0;
        v125 = sub_100062538((uint64_t)a1, v24, &v315);
        v126 = v315;
        v59 = v126;
        v295 = v83;
        v291 = v34;
        if ((v125 & 1) != 0)
        {
          v308 = sub_1000882AC(v24, (uint64_t)CFSTR("UserPersonaID"), 0);
          if ((v306 | 4) != 6)
          {
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v142 = (id)qword_1000E0128;
            v287 = v142;
            if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v317 = 0;
              v143 = sub_100007750(1);
              if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
                v144 = v143;
              else
                v144 = v143 & 0xFFFFFFFE;
              if ((_DWORD)v144)
              {
                LOWORD(v320[0]) = 0;
                v145 = (const char *)_os_log_send_and_compose_impl(v144, v317, 0, 0);
                v146 = (char *)v145;
                if (v145)
                  sub_100007780(v145);
              }
              else
              {
                v146 = 0;
              }
              free(v146);
              v34 = v291;
            }
            goto LABEL_327;
          }
          v286 = v125;
          v127 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", CFSTR("UserPersonaDisplayName")));
          -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v127, CFSTR("UserPersonaDisplayName"));

          v128 = objc_claimAutoreleasedReturnValue(+[NSDate date](NSDate, "date"));
          -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v128, CFSTR("MKBUserSessionCreateTimeStamp"));
          v287 = (void *)v128;
          -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v128, CFSTR("MKBUserSessionLoginTimeStamp"));
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v129 = (id)qword_1000E0128;
          if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
          {
            v130 = a5;
            *(_QWORD *)v317 = 0;
            v131 = sub_100007750(1);
            v132 = v129;
            if (os_log_type_enabled(v132, OS_LOG_TYPE_DEFAULT))
              v133 = v131;
            else
              v133 = v131 & 0xFFFFFFFE;
            if ((_DWORD)v133)
            {
              LOWORD(v320[0]) = 0;
              v134 = (char *)_os_log_send_and_compose_impl(v133, v317, 0, 0);

              if (v134)
                sub_100007780(v134);
            }
            else
            {

              v134 = 0;
            }
            a5 = v130;
            free(v134);
            v83 = v295;
            v82 = v309;
          }

          v148 = a1[3];
          objc_msgSend(v148, "createVolumeMountsDir:", CFSTR("/private/var/PersonaVolumes"));

          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v149 = (id)qword_1000E0128;
          if (os_log_type_enabled(v149, OS_LOG_TYPE_DEFAULT))
          {
            v150 = a5;
            *(_QWORD *)v317 = 0;
            v151 = sub_100007750(1);
            v152 = v149;
            if (os_log_type_enabled(v152, OS_LOG_TYPE_DEFAULT))
              v153 = v151;
            else
              v153 = v151 & 0xFFFFFFFE;
            if ((_DWORD)v153)
            {
              LOWORD(v320[0]) = 0;
              v154 = (char *)_os_log_send_and_compose_impl(v153, v317, 0, 0);

              if (v154)
                sub_100007780(v154);
            }
            else
            {

              v154 = 0;
            }
            a5 = v150;
            free(v154);
            v83 = v295;
            v82 = v309;
          }

          v314 = 0;
          v155 = a1[3];
          v156 = objc_msgSend(v155, "createVolumeWithSession:size:userName:error:forPersona:userDataVolume:", v24, 0, v291, &v314, 1, 0);

          v290 = (uint64_t)a1;
          if (v156)
          {
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v157 = (id)qword_1000E0128;
            if (os_log_type_enabled(v157, OS_LOG_TYPE_DEFAULT))
            {
              v158 = a5;
              *(_QWORD *)v317 = 0;
              v159 = sub_100007750(1);
              v160 = v157;
              if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
                v161 = v159;
              else
                v161 = v159 & 0xFFFFFFFE;
              if ((_DWORD)v161)
              {
                LOWORD(v320[0]) = 0;
                v162 = (char *)_os_log_send_and_compose_impl(v161, v317, 0, 0);

                if (v162)
                  sub_100007780(v162);
              }
              else
              {

                v162 = 0;
              }
              a5 = v158;
              free(v162);
              v83 = v295;
              v82 = v309;
            }

            v168 = a1[3];
            v169 = objc_msgSend(v168, "mountVolumeWithSession:mountPath:error:forPersona:", v24, 0, 0, 1);

            if ((v169 & 1) == 0)
            {
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v176 = (id)qword_1000E0128;
              if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v317 = 0;
                v177 = sub_100007750(1);
                v178 = v176;
                if (os_log_type_enabled(v178, OS_LOG_TYPE_DEFAULT))
                  v179 = v177;
                else
                  v179 = v177 & 0xFFFFFFFE;
                if ((_DWORD)v179)
                {
                  LOWORD(v320[0]) = 0;
                  v180 = (char *)_os_log_send_and_compose_impl(v179, v317, 0, 0);

                  if (v180)
                    sub_100007780(v180);
                }
                else
                {

                  v180 = 0;
                }
                free(v180);
              }
              v137 = v15;

              v141 = 0;
              v35 = 22;
              goto LABEL_406;
            }
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v170 = (id)qword_1000E0128;
            if (os_log_type_enabled(v170, OS_LOG_TYPE_DEFAULT))
            {
              v171 = a5;
              *(_QWORD *)v317 = 0;
              v172 = sub_100007750(1);
              v173 = v170;
              if (os_log_type_enabled(v173, OS_LOG_TYPE_DEFAULT))
                v174 = v172;
              else
                v174 = v172 & 0xFFFFFFFE;
              if ((_DWORD)v174)
              {
                LOWORD(v320[0]) = 0;
                v175 = (char *)_os_log_send_and_compose_impl(v174, v317, 0, 0);

                if (v175)
                  sub_100007780(v175);
              }
              else
              {

                v175 = 0;
              }
              a5 = v171;
              free(v175);
              v83 = v295;
              v82 = v309;
            }

            -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", 0, CFSTR("UserPersonaUserKey"));
            v181 = a1[3];
            v182 = objc_msgSend(v181, "splitUserVolumeEnabled");

            if ((v182 & 1) != 0)
            {
              v183 = sub_100062EA8(a1);
              v184 = (void *)objc_claimAutoreleasedReturnValue(v183);
              v285 = sub_100058C2C((uint64_t)v184);

              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v185 = (id)qword_1000E0128;
              if (os_log_type_enabled(v185, OS_LOG_TYPE_DEFAULT))
              {
                v320[0] = 0;
                v186 = sub_100007750(1);
                v187 = v185;
                if (os_log_type_enabled(v187, OS_LOG_TYPE_DEFAULT))
                  v188 = v186;
                else
                  v188 = v186 & 0xFFFFFFFE;
                if ((_DWORD)v188)
                {
                  *(_DWORD *)v317 = 138412546;
                  *(_QWORD *)&v317[4] = v289;
                  *(_WORD *)&v317[12] = 1024;
                  *(_DWORD *)&v317[14] = v285;
                  v189 = (char *)_os_log_send_and_compose_impl(v188, v320, 0, 0);

                  if (v189)
                    sub_100007780(v189);
                }
                else
                {

                  v189 = 0;
                }
                free(v189);
              }
              v303 = a5;

              v204 = a1[2];
              v205 = sub_10001CA9C((uint64_t)v204);
              v206 = (void *)objc_claimAutoreleasedReturnValue(v205);
              v313 = v59;
              v207 = objc_msgSend(v206, "addPersonaWithUUID:toSession:passcode:error:", v289, v285, v15, &v313);
              v195 = v313;

              if (!v207)
              {
                if (qword_1000E0130 != -1)
                  dispatch_once(&qword_1000E0130, &stru_1000D1770);
                v213 = (id)qword_1000E0128;
                if (os_log_type_enabled(v213, OS_LOG_TYPE_DEFAULT))
                {
                  v320[0] = 0;
                  v214 = sub_100007750(1);
                  v215 = v213;
                  if (os_log_type_enabled(v215, OS_LOG_TYPE_DEFAULT))
                    v216 = v214;
                  else
                    v216 = v214 & 0xFFFFFFFE;
                  if ((_DWORD)v216)
                  {
                    *(_DWORD *)v317 = 138412546;
                    *(_QWORD *)&v317[4] = v289;
                    *(_WORD *)&v317[12] = 2112;
                    *(_QWORD *)&v317[14] = v195;
                    v217 = (char *)_os_log_send_and_compose_impl(v216, v320, 0, 0);

                    if (v217)
                      sub_100007780(v217);
                  }
                  else
                  {

                    v217 = 0;
                  }
                  free(v217);
                }

                v194 = 5;
                goto LABEL_394;
              }
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v208 = (id)qword_1000E0128;
              if (os_log_type_enabled(v208, OS_LOG_TYPE_DEFAULT))
              {
                *(_QWORD *)v317 = 0;
                v209 = sub_100007750(1);
                v210 = v208;
                if (os_log_type_enabled(v210, OS_LOG_TYPE_DEFAULT))
                  v211 = v209;
                else
                  v211 = v209 & 0xFFFFFFFE;
                if ((_DWORD)v211)
                {
                  LOWORD(v320[0]) = 0;
                  v212 = (char *)_os_log_send_and_compose_impl(v211, v317, 0, 0);

                  if (v212)
                    sub_100007780(v212);
                }
                else
                {

                  v212 = 0;
                }
                free(v212);
              }

              v218 = sub_1000074C8(v24, (uint64_t)CFSTR("MKBUserSessionVolumeDeviceNode"));
              v219 = objc_claimAutoreleasedReturnValue(v218);
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v220 = (id)qword_1000E0128;
              if (os_log_type_enabled(v220, OS_LOG_TYPE_DEFAULT))
              {
                v320[0] = 0;
                v221 = sub_100007750(1);
                v222 = v220;
                if (os_log_type_enabled(v222, OS_LOG_TYPE_DEFAULT))
                  v223 = v221;
                else
                  v223 = v221 & 0xFFFFFFFE;
                if ((_DWORD)v223)
                {
                  *(_DWORD *)v317 = 138412802;
                  *(_QWORD *)&v317[4] = v219;
                  *(_WORD *)&v317[12] = 1024;
                  *(_DWORD *)&v317[14] = v285;
                  *(_WORD *)&v317[18] = 2112;
                  *(_QWORD *)&v317[20] = v289;
                  v224 = (char *)_os_log_send_and_compose_impl(v223, v320, 0, 0);

                  if (v224)
                    sub_100007780(v224);
                }
                else
                {

                  v224 = 0;
                }
                free(v224);
              }

              v257 = a1[2];
              v258 = sub_10001CA9C((uint64_t)v257);
              v259 = (void *)objc_claimAutoreleasedReturnValue(v258);
              v312 = v195;
              v284 = (id)v219;
              v260 = objc_msgSend(v259, "mapVolume:toSession:withPersona:error:", v219, v285, v289, &v312);
              v59 = v312;

              if (v260)
              {
                if (qword_1000E0130 != -1)
                  dispatch_once(&qword_1000E0130, &stru_1000D1770);
                a5 = v303;
                v191 = (id)qword_1000E0128;
                v83 = v295;
                v82 = v309;
                if (!os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                {
                  v34 = v291;
                  v302 = 0;
                  goto LABEL_325;
                }
                *(_QWORD *)v317 = 0;
                v261 = sub_100007750(1);
                v262 = v191;
                if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
                  v263 = v261;
                else
                  v263 = v261 & 0xFFFFFFFE;
                v283 = v262;
                if ((_DWORD)v263)
                {
                  LOWORD(v320[0]) = 0;
                  v264 = (char *)_os_log_send_and_compose_impl(v263, v317, 0, 0);

                  if (v264)
                    sub_100007780(v264);
                }
                else
                {

                  v264 = 0;
                }
                free(v264);
                v302 = 0;
LABEL_522:
                v34 = v291;
                v191 = v283;
LABEL_325:

                v194 = v302;
                if (v302)
                {
                  v195 = v59;
LABEL_394:
                  if (qword_1000E0130 != -1)
                    dispatch_once(&qword_1000E0130, &stru_1000D1770);
                  v225 = (id)qword_1000E0128;
                  if (os_log_type_enabled(v225, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_QWORD *)v317 = 0;
                    v226 = sub_100007750(1);
                    v227 = v225;
                    if (os_log_type_enabled(v227, OS_LOG_TYPE_DEFAULT))
                      v228 = v226;
                    else
                      v228 = v226 & 0xFFFFFFFE;
                    if ((_DWORD)v228)
                    {
                      LODWORD(v320[0]) = 67109120;
                      HIDWORD(v320[0]) = v194;
                      v229 = (char *)_os_log_send_and_compose_impl(v228, v317, 0, 0);

                      if (v229)
                        sub_100007780(v229);
                    }
                    else
                    {

                      v229 = 0;
                    }
                    free(v229);
                  }
                  v137 = v15;

                  v35 = 22;
                  v141 = 1;
                  v59 = v195;
LABEL_406:
                  v147 = 1;
                  goto LABEL_407;
                }
LABEL_327:

                v33 = v59;
                v17 = v307;
                goto LABEL_328;
              }
              if (qword_1000E0130 != -1)
                dispatch_once(&qword_1000E0130, &stru_1000D1770);
              v265 = (id)qword_1000E0128;
              if (os_log_type_enabled(v265, OS_LOG_TYPE_DEFAULT))
              {
                v320[0] = 0;
                v266 = sub_100007750(1);
                v267 = v265;
                if (os_log_type_enabled(v267, OS_LOG_TYPE_DEFAULT))
                  v268 = v266;
                else
                  v268 = v266 & 0xFFFFFFFE;
                if ((_DWORD)v268)
                {
                  *(_DWORD *)v317 = 138413058;
                  *(_QWORD *)&v317[4] = v284;
                  *(_WORD *)&v317[12] = 1024;
                  *(_DWORD *)&v317[14] = v285;
                  *(_WORD *)&v317[18] = 2112;
                  *(_QWORD *)&v317[20] = v289;
                  v318 = 2112;
                  v319 = v59;
                  v269 = (char *)_os_log_send_and_compose_impl(v268, v320, 0, 0);

                  if (v269)
                    sub_100007780(v269);
                }
                else
                {

                  v269 = 0;
                }
                free(v269);
              }

              v270 = a1[2];
              v271 = sub_10001CA9C((uint64_t)v270);
              v272 = (void *)objc_claimAutoreleasedReturnValue(v271);
              v311 = v59;
              v273 = objc_msgSend(v272, "deletePersonaWithUUID:fromSession:error:", v289, v285, &v311);
              v274 = v311;

              if (v273)
              {
                if (qword_1000E0130 != -1)
                  dispatch_once(&qword_1000E0130, &stru_1000D1770);
                a5 = v303;
                v59 = v274;
                v191 = (id)qword_1000E0128;
                v83 = v295;
                v82 = v309;
                if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                {
                  *(_QWORD *)v317 = 0;
                  v275 = sub_100007750(1);
                  v276 = v191;
                  if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
                    v277 = v275;
                  else
                    v277 = v275 & 0xFFFFFFFE;
                  v283 = v276;
                  if ((_DWORD)v277)
                  {
                    LOWORD(v320[0]) = 0;
                    v278 = v317;
                    goto LABEL_517;
                  }
                  goto LABEL_520;
                }
              }
              else
              {
                if (qword_1000E0130 != -1)
                  dispatch_once(&qword_1000E0130, &stru_1000D1770);
                a5 = v303;
                v59 = v274;
                v191 = (id)qword_1000E0128;
                v83 = v295;
                v82 = v309;
                if (os_log_type_enabled(v191, OS_LOG_TYPE_DEFAULT))
                {
                  v320[0] = 0;
                  v279 = sub_100007750(1);
                  v276 = v191;
                  if (os_log_type_enabled(v276, OS_LOG_TYPE_DEFAULT))
                    v277 = v279;
                  else
                    v277 = v279 & 0xFFFFFFFE;
                  v283 = v276;
                  if ((_DWORD)v277)
                  {
                    *(_DWORD *)v317 = 67109378;
                    *(_DWORD *)&v317[4] = v285;
                    *(_WORD *)&v317[8] = 2112;
                    *(_QWORD *)&v317[10] = v59;
                    v278 = v320;
LABEL_517:
                    v280 = (char *)_os_log_send_and_compose_impl(v277, v278, 0, 0);

                    if (v280)
                      sub_100007780(v280);
                    goto LABEL_521;
                  }
LABEL_520:

                  v280 = 0;
LABEL_521:
                  free(v280);
                  v302 = 5;
                  goto LABEL_522;
                }
              }
              v302 = 5;
            }
            else
            {
              v284 = a1[2];
              v190 = sub_10001C730((uint64_t)v284);
              v191 = objc_claimAutoreleasedReturnValue(v190);
              v192 = sub_1000074C8(v24, (uint64_t)CFSTR("MKBUserSessionHomeDir"));
              v193 = (void *)objc_claimAutoreleasedReturnValue(v192);
              v302 = -[NSObject createPersonaKeyForUser:personaUUID:passcode:homeDir:](v191, "createPersonaKeyForUser:personaUUID:passcode:homeDir:", 0, v288, v15, v193);

            }
            v34 = v291;
            goto LABEL_325;
          }
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v163 = (id)qword_1000E0128;
          if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v317 = 0;
            v164 = sub_100007750(1);
            v165 = v163;
            if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
              v166 = v164;
            else
              v166 = v164 & 0xFFFFFFFE;
            if ((_DWORD)v166)
            {
              v320[0] = 0x1604000100;
              v167 = (char *)_os_log_send_and_compose_impl(v166, v317, 0, 0);

              if (v167)
                sub_100007780(v167);
            }
            else
            {

              v167 = 0;
            }
            free(v167);
          }
          v137 = v15;

          v141 = 0;
          v147 = 0;
          v35 = v314;
        }
        else
        {
          v290 = (uint64_t)a1;
          v35 = -[NSObject code](v126, "code");
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v135 = (id)qword_1000E0128;
          v286 = v125;
          v287 = v135;
          if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
          {
            v320[0] = 0;
            v136 = sub_100007750(1);
            v137 = v15;
            if (os_log_type_enabled(v135, OS_LOG_TYPE_DEFAULT))
              v138 = v136;
            else
              v138 = v136 & 0xFFFFFFFE;
            if ((_DWORD)v138)
            {
              *(_DWORD *)v317 = 67109376;
              *(_DWORD *)&v317[4] = v308;
              *(_WORD *)&v317[8] = 1024;
              *(_DWORD *)&v317[10] = v35;
              v139 = (const char *)_os_log_send_and_compose_impl(v138, v320, 0, 0);
              v140 = (char *)v139;
              if (v139)
                sub_100007780(v139);
            }
            else
            {
              v140 = 0;
            }
            free(v140);
            v141 = 0;
          }
          else
          {
            v141 = 0;
            v137 = v15;
          }
          v147 = 0;
        }
LABEL_407:

        if (!v141)
          goto LABEL_430;
        v230 = *(id *)(v290 + 24);
        v231 = objc_msgSend(v230, "unmountVolumeWithSession:mountPath:error:", v24, 0, 0);

        if (v231)
        {
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v232 = (id)qword_1000E0128;
          if (!os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
            goto LABEL_429;
          *(_QWORD *)v317 = 0;
          v233 = sub_100007750(1);
          v234 = v232;
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
            v235 = v233;
          else
            v235 = v233 & 0xFFFFFFFE;
          if ((_DWORD)v235)
          {
            LOWORD(v320[0]) = 0;
            goto LABEL_425;
          }
        }
        else
        {
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v232 = (id)qword_1000E0128;
          if (!os_log_type_enabled(v232, OS_LOG_TYPE_DEFAULT))
            goto LABEL_429;
          *(_QWORD *)v317 = 0;
          v236 = sub_100007750(1);
          v234 = v232;
          if (os_log_type_enabled(v234, OS_LOG_TYPE_DEFAULT))
            v235 = v236;
          else
            v235 = v236 & 0xFFFFFFFE;
          if ((_DWORD)v235)
          {
            LOWORD(v320[0]) = 0;
LABEL_425:
            v237 = (char *)_os_log_send_and_compose_impl(v235, v317, 0, 0);

            if (v237)
              sub_100007780(v237);
            goto LABEL_428;
          }
        }

        v237 = 0;
LABEL_428:
        free(v237);
LABEL_429:

LABEL_430:
        if (!v147)
        {
          v15 = v137;
          v34 = v291;
          a7 = v293;
          if (v286)
          {
LABEL_455:
            v310 = v59;
            sub_1000630EC(v290, v24, &v310);
            v33 = v310;
LABEL_456:

            goto LABEL_457;
          }
LABEL_441:
          v33 = v59;
LABEL_457:
          v17 = v307;
LABEL_458:

          v24 = 0;
          if (a7 && v35)
          {
            v246 = a7;
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v247 = (id)qword_1000E0128;
            if (os_log_type_enabled(v247, OS_LOG_TYPE_DEFAULT))
            {
              v248 = v14;
              v249 = v15;
              v250 = v34;
              *(_QWORD *)v317 = 0;
              v251 = sub_100007750(1);
              v252 = v247;
              if (os_log_type_enabled(v252, OS_LOG_TYPE_DEFAULT))
                v253 = v251;
              else
                v253 = v251 & 0xFFFFFFFE;
              if ((_DWORD)v253)
              {
                LODWORD(v320[0]) = 67109120;
                HIDWORD(v320[0]) = v35;
                v254 = (char *)_os_log_send_and_compose_impl(v253, v317, 0, 0);

                if (v254)
                  sub_100007780(v254);
              }
              else
              {

                v254 = 0;
              }
              free(v254);
              v34 = v250;
              v15 = v249;
              v14 = v248;
            }

            v24 = 0;
            *v246 = v35;
          }
          goto LABEL_472;
        }
        v238 = *(id *)(v290 + 24);
        v239 = objc_msgSend(v238, "deleteVolumeWithSession:error:", v24, 0);

        if (v239)
        {
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v240 = (id)qword_1000E0128;
          v15 = v137;
          a7 = v293;
          if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v317 = 0;
            v241 = sub_100007750(1);
            v242 = v240;
            if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
              v243 = v241;
            else
              v243 = v241 & 0xFFFFFFFE;
            if ((_DWORD)v243)
            {
              LOWORD(v320[0]) = 0;
              goto LABEL_450;
            }
            goto LABEL_452;
          }
        }
        else
        {
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v240 = (id)qword_1000E0128;
          v15 = v137;
          a7 = v293;
          if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
          {
            *(_QWORD *)v317 = 0;
            v244 = sub_100007750(1);
            v242 = v240;
            if (os_log_type_enabled(v242, OS_LOG_TYPE_DEFAULT))
              v243 = v244;
            else
              v243 = v244 & 0xFFFFFFFE;
            if ((_DWORD)v243)
            {
              LOWORD(v320[0]) = 0;
LABEL_450:
              v245 = (char *)_os_log_send_and_compose_impl(v243, v317, 0, 0);

              if (v245)
                sub_100007780(v245);
              goto LABEL_453;
            }
LABEL_452:

            v245 = 0;
LABEL_453:
            free(v245);
          }
        }

        v34 = v291;
        if ((v286 & 1) != 0)
          goto LABEL_455;
        goto LABEL_441;
      }
      v34 = 0;
    }
    else
    {
      v83 = 0;
      v34 = 0;
      v82 = v309;
    }
    v15 = v305;
    goto LABEL_220;
  }
  if (((1 << v306) & 0x28) == 0)
  {
    if (v306 == 4)
    {
      sub_10005C05C((uint64_t)a1, v24);
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v82 = v309;
      v83 = (id)qword_1000E0128;
      v15 = v305;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        goto LABEL_176;
      *(_QWORD *)v317 = 0;
      v84 = sub_100007750(1);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        v85 = v84;
      else
        v85 = v84 & 0xFFFFFFFE;
      if ((_DWORD)v85)
      {
        LOWORD(v320[0]) = 0;
        goto LABEL_143;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v82 = v309;
      v83 = (id)qword_1000E0128;
      v15 = v305;
      if (!os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        goto LABEL_176;
      *(_QWORD *)v317 = 0;
      v86 = sub_100007750(1);
      if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
        v85 = v86;
      else
        v85 = v86 & 0xFFFFFFFE;
      if ((_DWORD)v85)
      {
        LODWORD(v320[0]) = 67109120;
        HIDWORD(v320[0]) = v306;
LABEL_143:
        v87 = (const char *)_os_log_send_and_compose_impl(v85, v317, 0, 0);
        v88 = (char *)v87;
        if (v87)
          sub_100007780(v87);
        goto LABEL_175;
      }
    }
    v88 = 0;
LABEL_175:
    free(v88);
LABEL_176:
    v33 = 0;
    v34 = 0;
    goto LABEL_328;
  }
  v292 = v30;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v69 = (id)qword_1000E0128;
  if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v317 = 0;
    v70 = sub_100007750(1);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      v71 = v70;
    else
      v71 = v70 & 0xFFFFFFFE;
    if ((_DWORD)v71)
    {
      LODWORD(v320[0]) = 67109120;
      HIDWORD(v320[0]) = v308;
      v72 = (const char *)_os_log_send_and_compose_impl(v71, v317, 0, 0);
      v73 = (char *)v72;
      if (v72)
        sub_100007780(v72);
    }
    else
    {
      v73 = 0;
    }
    free(v73);
  }
  v307 = v17;

  v98 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v308));
  -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v98, CFSTR("UserPersonaID"));

  v294 = objc_claimAutoreleasedReturnValue(+[NSUUID UUID](NSUUID, "UUID"));
  v99 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject UUIDString](v294, "UUIDString"));
  -[NSObject setObject:forKeyedSubscript:](v24, "setObject:forKeyedSubscript:", v99, CFSTR("UserPersonaUniqueString"));
  v15 = v305;
  if (v306 == 3)
  {
    sub_10005C0C8((uint64_t)a1, v24);
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v100 = (id)qword_1000E0128;
    if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v317 = 0;
      v101 = sub_100007750(1);
      if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        v102 = v101;
      else
        v102 = v101 & 0xFFFFFFFE;
      if ((_DWORD)v102)
      {
        LOWORD(v320[0]) = 0;
        v103 = (const char *)_os_log_send_and_compose_impl(v102, v317, 0, 0);
        v104 = (char *)v103;
        if (v103)
          sub_100007780(v103);
      }
      else
      {
        v104 = 0;
      }
      free(v104);
    }

  }
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v105 = (id)qword_1000E0128;
  if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v317 = 0;
    v106 = sub_100007750(1);
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
      v107 = v106;
    else
      v107 = v106 & 0xFFFFFFFE;
    if ((_DWORD)v107)
    {
      LODWORD(v320[0]) = 67109120;
      HIDWORD(v320[0]) = v308;
      v108 = (const char *)_os_log_send_and_compose_impl(v107, v317, 0, 0);
      v109 = (char *)v108;
      if (v108)
        sub_100007780(v108);
    }
    else
    {
      v109 = 0;
    }
    free(v109);
  }

  v316 = 0;
  v110 = sub_100062538((uint64_t)a1, v24, &v316);
  v111 = v316;
  v33 = v111;
  if ((v110 & 1) == 0)
  {
    v35 = -[NSObject code](v111, "code");
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v117 = (id)qword_1000E0128;
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      v320[0] = 0;
      v118 = sub_100007750(1);
      if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
        v119 = v118;
      else
        v119 = v118 & 0xFFFFFFFE;
      if ((_DWORD)v119)
      {
        v120 = v117;
        v121 = -[NSObject code](v33, "code");
        *(_DWORD *)v317 = 67109376;
        *(_DWORD *)&v317[4] = v308;
        *(_WORD *)&v317[8] = 1024;
        *(_DWORD *)&v317[10] = v121;
        v122 = (char *)_os_log_send_and_compose_impl(v119, v320, 0, 0);

        if (v122)
          sub_100007780(v122);
      }
      else
      {
        v122 = 0;
      }
      free(v122);
    }

    v34 = 0;
    a7 = v292;
    v59 = v294;
    goto LABEL_456;
  }
  v308 = sub_1000882AC(v24, (uint64_t)CFSTR("UserPersonaID"), 0);
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v112 = (id)qword_1000E0128;
  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v317 = 0;
    v113 = sub_100007750(1);
    if (os_log_type_enabled(v112, OS_LOG_TYPE_DEFAULT))
      v114 = v113;
    else
      v114 = v113 & 0xFFFFFFFE;
    if ((_DWORD)v114)
    {
      LODWORD(v320[0]) = 67109120;
      HIDWORD(v320[0]) = v308;
      v115 = (const char *)_os_log_send_and_compose_impl(v114, v317, 0, 0);
      v116 = (char *)v115;
      if (v115)
        sub_100007780(v115);
    }
    else
    {
      v116 = 0;
    }
    free(v116);
  }

  v34 = 0;
  v82 = v309;
  v17 = v307;
  v83 = v294;
LABEL_328:

  if (v24)
    objc_msgSend(v82, "addObject:", v24);
  if (a5)
  {
    if ((v304 & 1) == 0)
    {
      v196 = v34;
      v197 = a1[5];
      sub_10005A9A8((uint64_t)v197);

      v34 = v196;
    }
    sub_10005F5C8((uint64_t)a1);
  }
  if (v306 == 4)
  {
    if (qword_1000E0120 != -1)
      dispatch_once(&qword_1000E0120, &stru_1000D1750);
    v198 = (id)qword_1000E0118;
    if (!os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
      goto LABEL_355;
    v199 = v34;
    v320[0] = 0;
    v200 = sub_100007750(1);
    v198 = v198;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
      v201 = v200;
    else
      v201 = v200 & 0xFFFFFFFE;
    if ((_DWORD)v201)
    {
      *(_DWORD *)v317 = 138412290;
      *(_QWORD *)&v317[4] = v17;
      goto LABEL_351;
    }
  }
  else
  {
    if (qword_1000E0120 != -1)
      dispatch_once(&qword_1000E0120, &stru_1000D1750);
    v198 = (id)qword_1000E0118;
    if (!os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
      goto LABEL_355;
    v199 = v34;
    v320[0] = 0;
    v202 = sub_100007750(1);
    v198 = v198;
    if (os_log_type_enabled(v198, OS_LOG_TYPE_DEFAULT))
      v201 = v202;
    else
      v201 = v202 & 0xFFFFFFFE;
    if ((_DWORD)v201)
    {
      *(_DWORD *)v317 = 67109378;
      *(_DWORD *)&v317[4] = v308;
      *(_WORD *)&v317[8] = 2112;
      *(_QWORD *)&v317[10] = v17;
LABEL_351:
      v203 = (char *)_os_log_send_and_compose_impl(v201, v320, 0, 0);

      if (v203)
        sub_100007780(v203);
      goto LABEL_354;
    }
  }

  v203 = 0;
LABEL_354:
  free(v203);
  v34 = v199;
LABEL_355:

  sub_100062EC4((uint64_t)a1);
LABEL_472:
  v255 = v24;

LABEL_473:
  return v255;
}

uint64_t sub_100062538(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  UMKPersonaInfo *v6;
  void *v7;
  int v8;
  int v9;
  void *v10;
  int v11;
  id v12;
  char *v13;
  const char *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  id WeakRetained;
  int v30;
  id v31;
  uint64_t v32;
  void *v33;
  NSObject *v34;
  uint64_t v35;
  NSObject *v36;
  char *v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  NSObject *v41;
  unsigned int v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  int v46;
  id v47;
  uint64_t v48;
  void *v49;
  unsigned __int8 v50;
  NSObject *v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  char *v55;
  NSNumber *v56;
  void *v57;
  uint64_t v59;
  __int16 v60;
  void *v61;
  uint64_t v62;

  v5 = a2;
  if (!a1)
  {
    v28 = 0;
    goto LABEL_106;
  }
  if (a3)
    *a3 = 0;
  v6 = objc_alloc_init(UMKPersonaInfo);
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));

  if (!v7)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_47;
    v59 = 0;
    v21 = sub_100007750(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      LOWORD(v62) = 0;
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  v8 = sub_1000882AC(v5, (uint64_t)CFSTR("UserPersonaType"), (id)0xFFFFFFFFLL);
  v9 = sub_1000647E0((uint64_t)UMDPersonaManager, v8);
  sub_1000063E4((uint64_t)v6, v9);
  if (sub_1000063CC((uint64_t)v6) == -1)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_47;
    v59 = 0;
    v23 = sub_100007750(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v23;
    else
      v22 = v23 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      LODWORD(v62) = 67109120;
      HIDWORD(v62) = v8;
      goto LABEL_43;
    }
    goto LABEL_45;
  }
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("UserPersonaID")));

  if (!v10)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_47;
    v59 = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v24;
    else
      v22 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      LOWORD(v62) = 0;
      goto LABEL_43;
    }
LABEL_45:
    v27 = 0;
LABEL_46:
    free(v27);
LABEL_47:

    v28 = 0;
    if (a3)
      *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    goto LABEL_105;
  }
  v11 = sub_1000882AC(v5, (uint64_t)CFSTR("UserPersonaID"), 0);
  sub_100006404((uint64_t)v6, v11);
  v12 = sub_1000074C8(v5, (uint64_t)CFSTR("UserPersonaUniqueString"));
  v13 = (char *)objc_claimAutoreleasedReturnValue(v12);
  sub_1000063F0(v6, v13);

  v15 = sub_100076DC0(v6, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue(v15);

  if (!v16)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      goto LABEL_47;
    v59 = 0;
    v25 = sub_100007750(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v25;
    else
      v22 = v25 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      LOWORD(v62) = 0;
LABEL_43:
      v26 = (const char *)_os_log_send_and_compose_impl(v22, &v59, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
      goto LABEL_46;
    }
    goto LABEL_45;
  }
  v17 = sub_1000074C8(v5, (uint64_t)CFSTR("UserPersonaUserODUUID"));
  v18 = (void *)objc_claimAutoreleasedReturnValue(v17);
  v19 = v18;
  if (v18)
  {
    if (objc_msgSend(v18, "isEqualToString:", CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF")))
    {
      sub_1000063D8((uint64_t)v6, -1);
    }
    else
    {
      WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
      v30 = sub_100058B8C((uint64_t)WeakRetained, v19);
      sub_1000063D8((uint64_t)v6, v30);

    }
  }
  if ((v8 & 0xFFFFFFFB) == 2)
  {
    v31 = sub_1000074C8(v5, (uint64_t)CFSTR("MKBUserSessionHomeDir"));
    v32 = objc_claimAutoreleasedReturnValue(v31);
    if (!v32)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v41 = (id)qword_1000E0128;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        v59 = 0;
        v42 = sub_100007750(1);
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          v43 = v42;
        else
          v43 = v42 & 0xFFFFFFFE;
        if ((_DWORD)v43)
        {
          LOWORD(v62) = 0;
          v44 = (const char *)_os_log_send_and_compose_impl(v43, &v59, 0, 0);
          v45 = (char *)v44;
          if (v44)
            sub_100007780(v44);
        }
        else
        {
          v45 = 0;
        }
        free(v45);
      }

      v50 = 0;
      v33 = 0;
      if (a3)
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
      goto LABEL_104;
    }
    v33 = (void *)v32;
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v34 = (id)qword_1000E0128;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v62 = 0;
      LODWORD(v35) = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v35 = v35;
      else
        v35 = v35 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        v36 = v34;
        LODWORD(v59) = 67109378;
        HIDWORD(v59) = sub_100007ECC((uint64_t)v6);
        v60 = 2112;
        v61 = v33;
        v37 = (char *)_os_log_send_and_compose_impl(v35, &v62, 0, 0);

        if (v37)
          sub_100007780(v37);
      }
      else
      {
        v37 = 0;
      }
      free(v37);
    }
  }
  else
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v34 = (id)qword_1000E0128;
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v59 = 0;
      LODWORD(v38) = sub_100007750(1);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        v38 = v38;
      else
        v38 = v38 & 0xFFFFFFFE;
      if ((_DWORD)v38)
      {
        v39 = v34;
        LODWORD(v62) = 67109120;
        HIDWORD(v62) = sub_100007ECC((uint64_t)v6);
        v40 = (char *)_os_log_send_and_compose_impl(v38, &v59, 0, 0);

        if (v40)
          sub_100007780(v40);
      }
      else
      {
        v40 = 0;
      }
      free(v40);
    }
    v33 = 0;
  }

  v46 = sub_100007ECC((uint64_t)v6);
  v47 = *(id *)(a1 + 16);
  v48 = sub_100007EE4((uint64_t)v47);
  v49 = (void *)objc_claimAutoreleasedReturnValue(v48);
  v50 = objc_msgSend(v49, "allocatePersonaWithInfo:andPath:error:", v6, v33, a3);

  if ((v50 & 1) == 0)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v51 = (id)qword_1000E0128;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v59 = 0;
      v52 = sub_100007750(1);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
        v53 = v52;
      else
        v53 = v52 & 0xFFFFFFFE;
      if ((_DWORD)v53)
      {
        LOWORD(v62) = 0;
        v54 = (const char *)_os_log_send_and_compose_impl(v53, &v59, 0, 0);
        v55 = (char *)v54;
        if (v54)
          sub_100007780(v54);
      }
      else
      {
        v55 = 0;
      }
      free(v55);
    }

  }
  if (sub_100007ECC((uint64_t)v6) != v46)
  {
    v56 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", sub_100007ECC((uint64_t)v6));
    v57 = (void *)objc_claimAutoreleasedReturnValue(v56);
    objc_msgSend(v5, "setObject:forKeyedSubscript:", v57, CFSTR("UserPersonaID"));

  }
LABEL_104:

  v28 = v50;
LABEL_105:

LABEL_106:
  return v28;
}

id *sub_100062EA8(id *WeakRetained)
{
  if (WeakRetained)
    WeakRetained = (id *)objc_loadWeakRetained(WeakRetained + 6);
  return WeakRetained;
}

void sub_100062EC4(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  id v13;
  void *v14;
  void *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  _BYTE v23[128];

  if (a1)
  {
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPersonas"));
    v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)v18;
      do
      {
        v6 = 0;
        do
        {
          if (*(_QWORD *)v18 != v5)
            objc_enumerationMutation(v2);
          v7 = *(_QWORD *)(*((_QWORD *)&v17 + 1) + 8 * (_QWORD)v6);
          if (qword_1000E0130 != -1)
            dispatch_once(&qword_1000E0130, &stru_1000D1770);
          v8 = (id)qword_1000E0128;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
          {
            v16 = 0;
            v9 = sub_100007750(1);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
              v10 = v9;
            else
              v10 = v9 & 0xFFFFFFFE;
            if ((_DWORD)v10)
            {
              v21 = 138412290;
              v22 = v7;
              v11 = (const char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0);
              v12 = (char *)v11;
              if (v11)
                sub_100007780(v11);
            }
            else
            {
              v12 = 0;
            }
            free(v12);
          }

          v13 = *(id *)(a1 + 32);
          v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v13, "userPersonas"));
          v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "objectForKeyedSubscript:", v7));

          sub_100066BC8(a1, v15);
          v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        v4 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", &v17, v23, 16);
      }
      while (v4);
    }

  }
}

uint64_t sub_1000630EC(uint64_t a1, void *a2, _QWORD *a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v23;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    if (a3)
      *a3 = 0;
    v7 = sub_1000882AC(v5, (uint64_t)CFSTR("UserPersonaID"), 0);
    if ((_DWORD)v7)
    {
      v8 = v7;
      v9 = sub_100007EE4(*(_QWORD *)(a1 + 16));
      v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
      v11 = objc_msgSend(v10, "deallocatePersonaWithID:error:", v8, a3);

      if ((v11 & 1) != 0)
      {
        a1 = 1;
        goto LABEL_33;
      }
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v17 = (id)qword_1000E0128;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        v18 = sub_100007750(1);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
          v19 = v18;
        else
          v19 = v18 & 0xFFFFFFFE;
        if ((_DWORD)v19)
        {
          v20 = (const char *)_os_log_send_and_compose_impl(v19, &v23, 0, 0);
          v21 = (char *)v20;
          if (v20)
            sub_100007780(v20);
        }
        else
        {
          v21 = 0;
        }
        free(v21);
      }

    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v12 = (id)qword_1000E0128;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        v13 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v14)
        {
          v15 = (const char *)_os_log_send_and_compose_impl(v14, &v23, 0, 0);
          v16 = (char *)v15;
          if (v15)
            sub_100007780(v15);
        }
        else
        {
          v16 = 0;
        }
        free(v16);
      }

      if (a3)
      {
        a1 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
        goto LABEL_33;
      }
    }
    a1 = 0;
  }
LABEL_33:

  return a1;
}

void sub_100063360(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  _BOOL4 v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  id *v16;
  uint64_t v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  id v27;
  void *v28;
  NSObject *v29;
  unsigned int v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  id *v34;
  uint64_t v35;
  NSObject *v36;
  unsigned int v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  unsigned int v41;
  uint64_t v42;
  const char *v43;
  char *v44;
  id v45;
  void *v46;
  NSObject *v47;
  unsigned int v48;
  uint64_t v49;
  const char *v50;
  char *v51;
  id *v52;
  uint64_t v53;
  NSObject *v54;
  unsigned int v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  NSObject *v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  char *v63;
  NSObject *v64;
  unsigned int v65;
  uint64_t v66;
  const char *v67;
  char *v68;
  uint64_t v69;

  v5 = a2;
  v6 = a3;
  if (a1)
  {
    v7 = sub_10005D2A8(a1, 4u, v5);
    v8 = objc_claimAutoreleasedReturnValue(v7);
    if (v8)
    {
      v9 = (void *)v8;
      v10 = 0;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v11 = (id)qword_1000E0128;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        v69 = 0;
        v12 = sub_100007750(1);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
          v13 = v12;
        else
          v13 = v12 & 0xFFFFFFFE;
        if ((_DWORD)v13)
        {
          v14 = (const char *)_os_log_send_and_compose_impl(v13, &v69, 0, 0);
          v15 = (char *)v14;
          if (v14)
            sub_100007780(v14);
        }
        else
        {
          v15 = 0;
        }
        free(v15);
      }

      v16 = sub_10005F108((id *)a1, v5, 4, v6);
      v17 = objc_claimAutoreleasedReturnValue(v16);
      v10 = v17 != 0;
      if (v17)
      {
        v9 = (void *)v17;
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v18 = (id)qword_1000E0128;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v19 = sub_100007750(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if ((_DWORD)v20)
          {
            v21 = (const char *)_os_log_send_and_compose_impl(v20, &v69, 0, 0);
            v22 = (char *)v21;
            if (v21)
              sub_100007780(v21);
          }
          else
          {
            v22 = 0;
          }
          free(v22);
        }
      }
      else
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v18 = (id)qword_1000E0128;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v23 = sub_100007750(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if ((_DWORD)v24)
          {
            v25 = (const char *)_os_log_send_and_compose_impl(v24, &v69, 0, 0);
            v26 = (char *)v25;
            if (v25)
              sub_100007780(v25);
          }
          else
          {
            v26 = 0;
          }
          free(v26);
        }
        v9 = 0;
      }

    }
    v27 = sub_10005D2A8(a1, 3u, v5);
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);

    if (!v28)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v29 = (id)qword_1000E0128;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v69 = 0;
        v30 = sub_100007750(1);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          v31 = v30;
        else
          v31 = v30 & 0xFFFFFFFE;
        if ((_DWORD)v31)
        {
          v32 = (const char *)_os_log_send_and_compose_impl(v31, &v69, 0, 0);
          v33 = (char *)v32;
          if (v32)
            sub_100007780(v32);
        }
        else
        {
          v33 = 0;
        }
        free(v33);
      }

      v34 = sub_10005F108((id *)a1, v5, 3, v6);
      v35 = objc_claimAutoreleasedReturnValue(v34);
      if (v35)
      {
        v28 = (void *)v35;
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v36 = (id)qword_1000E0128;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v37 = sub_100007750(1);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            v38 = v37;
          else
            v38 = v37 & 0xFFFFFFFE;
          if ((_DWORD)v38)
          {
            v39 = (const char *)_os_log_send_and_compose_impl(v38, &v69, 0, 0);
            v40 = (char *)v39;
            if (v39)
              sub_100007780(v39);
          }
          else
          {
            v40 = 0;
          }
          free(v40);
        }
        v10 = 1;
      }
      else
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v36 = (id)qword_1000E0128;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v41 = sub_100007750(1);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
            v42 = v41;
          else
            v42 = v41 & 0xFFFFFFFE;
          if ((_DWORD)v42)
          {
            v43 = (const char *)_os_log_send_and_compose_impl(v42, &v69, 0, 0);
            v44 = (char *)v43;
            if (v43)
              sub_100007780(v43);
          }
          else
          {
            v44 = 0;
          }
          free(v44);
        }
        v28 = 0;
      }

    }
    v45 = sub_10005D2A8(a1, 5u, v5);
    v46 = (void *)objc_claimAutoreleasedReturnValue(v45);

    if (v46)
    {
      if (!v10)
      {
LABEL_129:

        goto LABEL_130;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v47 = (id)qword_1000E0128;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        v69 = 0;
        v48 = sub_100007750(1);
        if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
          v49 = v48;
        else
          v49 = v48 & 0xFFFFFFFE;
        if ((_DWORD)v49)
        {
          v50 = (const char *)_os_log_send_and_compose_impl(v49, &v69, 0, 0);
          v51 = (char *)v50;
          if (v50)
            sub_100007780(v50);
        }
        else
        {
          v51 = 0;
        }
        free(v51);
      }

      v52 = sub_10005F108((id *)a1, v5, 5, v6);
      v53 = objc_claimAutoreleasedReturnValue(v52);
      if (v53)
      {
        v46 = (void *)v53;
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v54 = (id)qword_1000E0128;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v55 = sub_100007750(1);
          if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            v56 = v55;
          else
            v56 = v55 & 0xFFFFFFFE;
          if ((_DWORD)v56)
          {
            v57 = (const char *)_os_log_send_and_compose_impl(v56, &v69, 0, 0);
            v58 = (char *)v57;
            if (v57)
              sub_100007780(v57);
          }
          else
          {
            v58 = 0;
          }
          free(v58);
        }

      }
      else
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v59 = (id)qword_1000E0128;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
        {
          v69 = 0;
          v60 = sub_100007750(1);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
            v61 = v60;
          else
            v61 = v60 & 0xFFFFFFFE;
          if ((_DWORD)v61)
          {
            v62 = (const char *)_os_log_send_and_compose_impl(v61, &v69, 0, 0);
            v63 = (char *)v62;
            if (v62)
              sub_100007780(v62);
          }
          else
          {
            v63 = 0;
          }
          free(v63);
        }

        v46 = 0;
        if (!v10)
          goto LABEL_129;
      }
    }
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v64 = (id)qword_1000E0128;
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
    {
      v69 = 0;
      v65 = sub_100007750(1);
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEFAULT))
        v66 = v65;
      else
        v66 = v65 & 0xFFFFFFFE;
      if ((_DWORD)v66)
      {
        v67 = (const char *)_os_log_send_and_compose_impl(v66, &v69, 0, 0);
        v68 = (char *)v67;
        if (v67)
          sub_100007780(v67);
      }
      else
      {
        v68 = 0;
      }
      free(v68);
    }

    sub_10005F5C8((uint64_t)a1);
    goto LABEL_129;
  }
LABEL_130:

}

NSObject *sub_100063CA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  NSObject *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  id v12;
  void *v13;
  char *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  id v29;
  __int16 v30;
  id v31;

  if (!a1)
    return 0;
  if (a2)
    *a2 = 0;
  v3 = sub_100007EF0(*(_QWORD *)(a1 + 16));
  v4 = (void *)objc_claimAutoreleasedReturnValue(v3);
  v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "dataWithContentsOfFile:error:", CFSTR("/private/var/keybags/persona.kb"), a2));

  if (v5)
  {
    v6 = objc_claimAutoreleasedReturnValue(+[UMDPersonaManifest manifestFromData:](UMDPersonaManifest, "manifestFromData:", v5));
    if (v6)
    {
      if (qword_1000E0120 != -1)
        dispatch_once(&qword_1000E0120, &stru_1000D1750);
      v7 = (id)qword_1000E0118;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v26 = 0;
        v8 = sub_100007750(0);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          v10 = v7;
          v11 = -[NSObject version](v6, "version");
          v12 = -[NSObject generation](v6, "generation");
          v13 = (void *)objc_claimAutoreleasedReturnValue(-[NSObject users](v6, "users"));
          LODWORD(v27) = 67109632;
          HIDWORD(v27) = v11;
          v28 = 2048;
          v29 = v12;
          v30 = 2048;
          v31 = objc_msgSend(v13, "count");
          v14 = (char *)_os_log_send_and_compose_impl(v9, &v26, 0, 0);

          if (v14)
            sub_100007780(v14);
        }
        else
        {
          v14 = 0;
        }
        free(v14);
      }

      v6 = v6;
      v24 = v6;
    }
    else
    {
      if (qword_1000E0120 != -1)
        dispatch_once(&qword_1000E0120, &stru_1000D1750);
      v19 = (id)qword_1000E0118;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        v27 = 0;
        v20 = sub_100007750(0);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LOWORD(v26) = 0;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, &v27, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }

      if (a2)
        *a2 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
      v24 = 0;
    }
  }
  else
  {
    if (qword_1000E0120 != -1)
      dispatch_once(&qword_1000E0120, &stru_1000D1750);
    v6 = (id)qword_1000E0118;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v27 = 0;
      v15 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        LOWORD(v26) = 0;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, &v27, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }
    v24 = 0;
  }

  return v24;
}

UMDPersonaManifestUser *sub_100064080(uint64_t a1, void *a2, void *a3)
{
  id v5;
  UMDPersonaManifestUser *v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *i;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  void *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *j;
  UMDPersonaManifestPersona *v24;
  void *v25;
  UMDPersonaManifestUser *v26;
  UMDPersonaManifestUser *v28;
  id v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[128];
  _BYTE v39[128];

  v5 = a2;
  v29 = a3;
  if (a1)
  {
    v6 = objc_alloc_init(UMDPersonaManifestUser);
    v7 = sub_10001ACA4((uint64_t)NSUUID, v5);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v28 = v6;
    sub_10001C838((uint64_t)v6, v8);

    v36 = 0u;
    v37 = 0u;
    v34 = 0u;
    v35 = 0u;
    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "asidMap"));
    v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
    if (v10)
    {
      v11 = v10;
      v12 = *(_QWORD *)v35;
      while (2)
      {
        for (i = 0; i != v11; i = (char *)i + 1)
        {
          if (*(_QWORD *)v35 != v12)
            objc_enumerationMutation(v9);
          v14 = *(void **)(*((_QWORD *)&v34 + 1) + 8 * (_QWORD)i);
          v15 = *(id *)(a1 + 32);
          v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "asidMap"));
          v17 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "objectForKeyedSubscript:", v14));

          LODWORD(v15) = objc_msgSend(v5, "isEqualToString:", v17);
          if ((_DWORD)v15)
          {
            sub_100006404((uint64_t)v28, (int)objc_msgSend(v14, "intValue"));
            goto LABEL_12;
          }
        }
        v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v34, v39, 16);
        if (v11)
          continue;
        break;
      }
    }
LABEL_12:

    v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v19 = v29;
    v20 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
    if (v20)
    {
      v21 = v20;
      v22 = *(_QWORD *)v31;
      do
      {
        for (j = 0; j != v21; j = (char *)j + 1)
        {
          if (*(_QWORD *)v31 != v22)
            objc_enumerationMutation(v19);
          v24 = sub_100078748((uint64_t)UMDPersonaManifestPersona, *(void **)(*((_QWORD *)&v30 + 1) + 8 * (_QWORD)j));
          v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
          sub_10001C904((uint64_t)v25, 0);
          objc_msgSend(v18, "addObject:", v25);

        }
        v21 = objc_msgSend(v19, "countByEnumeratingWithState:objects:count:", &v30, v38, 16);
      }
      while (v21);
    }

    v26 = v28;
    sub_10001CCD0(v28, (char *)v18);

  }
  else
  {
    v26 = 0;
  }

  return v26;
}

id sub_100064324(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  UMDPersonaManifestUser *v12;
  void *v13;
  void *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _BYTE v20[128];

  if (!a1)
    return 0;
  v15 = (void *)objc_claimAutoreleasedReturnValue(+[UMDPersonaManifest manifest](UMDPersonaManifest, "manifest"));
  objc_msgSend(v15, "setGeneration:", sub_10005A964(*(_QWORD *)(a1 + 40)));
  v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableSet set](NSMutableSet, "set"));
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v19 = 0u;
  v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPersonas"));
  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v17;
    do
    {
      v7 = 0;
      do
      {
        if (*(_QWORD *)v17 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v16 + 1) + 8 * (_QWORD)v7);
        v9 = *(id *)(a1 + 32);
        v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userPersonas"));
        v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v8));
        v12 = sub_100064080(a1, v8, v11);
        v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

        objc_msgSend(v2, "addObject:", v13);
        v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      v5 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", &v16, v20, 16);
    }
    while (v5);
  }

  objc_msgSend(v15, "setUsers:", v2);
  return v15;
}

uint64_t sub_1000644E0(uint64_t a1, void *a2, _QWORD *a3)
{
  uint64_t v3;
  void *v5;
  uint64_t v6;
  void *v7;
  unsigned __int8 v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v20;

  v3 = a1;
  if (a1)
  {
    if (a3)
      *a3 = 0;
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "dataValue"));
    if (v5)
    {
      v6 = sub_100007EF0(*(_QWORD *)(v3 + 16));
      v7 = (void *)objc_claimAutoreleasedReturnValue(v6);
      v8 = objc_msgSend(v7, "atomicallyWriteData:toPath:error:", v5, CFSTR("/private/var/keybags/persona.kb"), a3);

      if ((v8 & 1) != 0)
      {
        v3 = 1;
LABEL_33:

        return v3;
      }
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v14 = (id)qword_1000E0128;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
          v17 = (const char *)_os_log_send_and_compose_impl(v16, &v20, 0, 0);
          v18 = (char *)v17;
          if (v17)
            sub_100007780(v17);
        }
        else
        {
          v18 = 0;
        }
        free(v18);
      }

    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v9 = (id)qword_1000E0128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v20, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

      if (a3)
      {
        v3 = 0;
        *a3 = (id)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
        goto LABEL_33;
      }
    }
    v3 = 0;
    goto LABEL_33;
  }
  return v3;
}

BOOL sub_10006474C(uint64_t a1, uint64_t a2)
{
  _BOOL8 v2;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  id v10;

  v2 = 0;
  if (a1 && (_DWORD)a2 != -1)
  {
    v4 = *(id *)(a1 + 16);
    v5 = sub_100007EE4((uint64_t)v4);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v10 = 0;
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "infoForPersonaWithID:error:", a2, &v10));
    v8 = v10;

    v2 = v7 != 0;
  }
  return v2;
}

uint64_t sub_1000647E0(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  char *v9;
  uint64_t v10;
  int v11;
  int v12;

  objc_opt_self(a1);
  result = 5;
  switch(a2)
  {
    case 0:
      return result;
    case 1:
    case 4:
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v4 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        goto LABEL_27;
      v10 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if (!(_DWORD)v6)
        goto LABEL_25;
      v11 = 67109120;
      v12 = a2;
      goto LABEL_23;
    case 2:
    case 6:
      result = 2;
      break;
    case 3:
      result = 4;
      break;
    case 5:
      result = 6;
      break;
    default:
      if (a2 == 1000)
      {
        result = 0;
      }
      else
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v4 = (id)qword_1000E0128;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          v10 = 0;
          v7 = sub_100007750(1);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
            v6 = v7;
          else
            v6 = v7 & 0xFFFFFFFE;
          if ((_DWORD)v6)
          {
            v11 = 67109120;
            v12 = a2;
LABEL_23:
            v8 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
            v9 = (char *)v8;
            if (v8)
              sub_100007780(v8);
          }
          else
          {
LABEL_25:
            v9 = 0;
          }
          free(v9);
        }
LABEL_27:

        result = 0xFFFFFFFFLL;
      }
      break;
  }
  return result;
}

BOOL sub_100064A2C(uint64_t a1, void *a2)
{
  void *v2;
  _BOOL8 v3;

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MKBUserSessionVolumeDeviceNode")));
  v3 = v2 != 0;

  return v3;
}

void sub_100064A74(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  NSObject *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  unsigned __int8 v33;
  unsigned int v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  unsigned int v38;
  uint64_t v39;
  const char *v40;
  char *v41;
  id v42;
  _BYTE v43[12];
  uint64_t v44;

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    v7 = sub_1000074C8(v5, (uint64_t)CFSTR("MKBUserSessionHomeDir"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    if (!v8)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v10 = (id)qword_1000E0128;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v43 = 0;
        v20 = sub_100007750(1);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          v21 = v20;
        else
          v21 = v20 & 0xFFFFFFFE;
        if ((_DWORD)v21)
        {
          LOWORD(v44) = 0;
          v22 = (const char *)_os_log_send_and_compose_impl(v21, v43, 0, 0);
          v23 = (char *)v22;
          if (v22)
            sub_100007780(v22);
        }
        else
        {
          v23 = 0;
        }
        free(v23);
      }
      goto LABEL_62;
    }
    v9 = sub_1000074C8(v6, (uint64_t)CFSTR("UserPersonaUniqueString"));
    v10 = objc_claimAutoreleasedReturnValue(v9);
    if (objc_msgSend(*(id *)(a1 + 24), "splitUserVolumeEnabled"))
    {
      v11 = sub_10001ACA4((uint64_t)NSUUID, v10);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = sub_1000074C8(v6, (uint64_t)CFSTR("MKBUserSessionVolumeDeviceNode"));
      v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = (id)qword_1000E0128;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v43 = 0;
        v16 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LOWORD(v44) = 0;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, v43, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

      v30 = *(id *)(a1 + 16);
      v31 = sub_10001CA9C((uint64_t)v30);
      v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
      v42 = 0;
      v33 = objc_msgSend(v32, "mapVolume:toSession:withPersona:error:", v14, a3, v12, &v42);
      v27 = v42;

      if ((v33 & 1) == 0)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v37 = (id)qword_1000E0128;
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        {
          v44 = 0;
          v38 = sub_100007750(1);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            v39 = v38;
          else
            v39 = v38 & 0xFFFFFFFE;
          if ((_DWORD)v39)
          {
            *(_DWORD *)v43 = 138412290;
            *(_QWORD *)&v43[4] = v27;
            v40 = (const char *)_os_log_send_and_compose_impl(v39, &v44, 0, 0);
            v41 = (char *)v40;
            if (v40)
              sub_100007780(v40);
          }
          else
          {
            v41 = 0;
          }
          free(v41);
        }

        goto LABEL_61;
      }

    }
    else
    {
      v24 = sub_10001C730(*(_QWORD *)(a1 + 16));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      v26 = objc_msgSend(v25, "setVolumePath:forPersona:", v8, v10);

      if (v26)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v27 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          goto LABEL_61;
        *(_QWORD *)v43 = 0;
        v28 = sub_100007750(1);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          v29 = v28;
        else
          v29 = v28 & 0xFFFFFFFE;
        if ((_DWORD)v29)
        {
          LODWORD(v44) = 67109120;
          HIDWORD(v44) = v26;
          goto LABEL_45;
        }
LABEL_56:
        v36 = 0;
LABEL_57:
        free(v36);
LABEL_61:

LABEL_62:
        goto LABEL_63;
      }
    }
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v27 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      goto LABEL_61;
    *(_QWORD *)v43 = 0;
    v34 = sub_100007750(1);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      v29 = v34;
    else
      v29 = v34 & 0xFFFFFFFE;
    if ((_DWORD)v29)
    {
      LOWORD(v44) = 0;
LABEL_45:
      v35 = (const char *)_os_log_send_and_compose_impl(v29, v43, 0, 0);
      v36 = (char *)v35;
      if (v35)
        sub_100007780(v35);
      goto LABEL_57;
    }
    goto LABEL_56;
  }
LABEL_63:

}

uint64_t sub_100064FE8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  unsigned int v8;
  uint64_t v9;
  unsigned int v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  void *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  unsigned int v40;
  void *v41;
  void *v42;
  NSObject *v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  NSObject *v56;
  unsigned int v57;
  uint64_t v58;
  const char *v59;
  char *v60;
  id v61;
  uint64_t v62;
  __int16 v63;
  unsigned int v64;
  uint64_t v65;

  v5 = a2;
  v6 = v5;
  if (!a1)
  {
    v9 = 0;
    goto LABEL_109;
  }
  v7 = sub_1000882AC(v5, (uint64_t)CFSTR("UserPersonaID"), (id)0xFFFFFFFFLL);
  v8 = sub_1000882AC(v6, (uint64_t)CFSTR("UserPersonaType"), (id)0x3E8);
  if (v8 != 4)
  {
    v10 = v8;
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v11 = (id)qword_1000E0128;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v65 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LODWORD(v62) = 67109376;
        HIDWORD(v62) = (_DWORD)v7;
        v63 = 1024;
        v64 = v10;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, &v65, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    if (sub_10006474C(a1, (uint64_t)v7))
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v16 = (id)qword_1000E0128;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v62 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          v18 = v17;
        else
          v18 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v18)
        {
          LODWORD(v65) = 67109120;
          HIDWORD(v65) = (_DWORD)v7;
          v19 = (const char *)_os_log_send_and_compose_impl(v18, &v62, 0, 0);
          v20 = (char *)v19;
          if (v19)
            sub_100007780(v19);
        }
        else
        {
          v20 = 0;
        }
        free(v20);
      }
      v9 = 1;
      goto LABEL_108;
    }
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v21 = (id)qword_1000E0128;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v62 = 0;
      v22 = sub_100007750(1);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        v23 = v22;
      else
        v23 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v23)
      {
        LODWORD(v65) = 67109120;
        HIDWORD(v65) = (_DWORD)v7;
        v24 = (const char *)_os_log_send_and_compose_impl(v23, &v62, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
      }
      else
      {
        v25 = 0;
      }
      free(v25);
    }

    if (!v10)
    {
      v26 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("UserPersonaObserverService")));

      if (v26)
      {
        objc_msgSend(v6, "setObject:forKeyedSubscript:", 0, CFSTR("UserPersonaObserverService"));
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v27 = (id)qword_1000E0128;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v62 = 0;
          v28 = sub_100007750(1);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            v29 = v28;
          else
            v29 = v28 & 0xFFFFFFFE;
          if ((_DWORD)v29)
          {
            LOWORD(v65) = 0;
            v30 = (const char *)_os_log_send_and_compose_impl(v29, &v62, 0, 0);
            v31 = (char *)v30;
            if (v30)
              sub_100007780(v30);
          }
          else
          {
            v31 = 0;
          }
          free(v31);
        }

        sub_10005F5C8(a1);
      }
    }
    v61 = 0;
    v9 = sub_100062538(a1, v6, &v61);
    v16 = v61;
    if ((v9 & 1) != 0)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v32 = (id)qword_1000E0128;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        v62 = 0;
        v33 = sub_100007750(1);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          v34 = v33;
        else
          v34 = v33 & 0xFFFFFFFE;
        if ((_DWORD)v34)
        {
          LODWORD(v65) = 67109120;
          HIDWORD(v65) = (_DWORD)v7;
          v35 = (const char *)_os_log_send_and_compose_impl(v34, &v62, 0, 0);
          v36 = (char *)v35;
          if (v35)
            sub_100007780(v35);
        }
        else
        {
          v36 = 0;
        }
        free(v36);
      }

      v42 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKeyedSubscript:", CFSTR("MKBUserSessionVolumeDeviceNode")));
      if (!v42)
        goto LABEL_108;
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v43 = (id)qword_1000E0128;
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        v62 = 0;
        v44 = sub_100007750(1);
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
          v45 = v44;
        else
          v45 = v44 & 0xFFFFFFFE;
        if ((_DWORD)v45)
        {
          LOWORD(v65) = 0;
          v46 = (const char *)_os_log_send_and_compose_impl(v45, &v62, 0, 0);
          v47 = (char *)v46;
          if (v46)
            sub_100007780(v46);
        }
        else
        {
          v47 = 0;
        }
        free(v47);
      }

      if ((objc_msgSend(*(id *)(a1 + 24), "mountVolumeWithSession:mountPath:error:forPersona:", v6, 0, 0, 1) & 1) != 0)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v48 = (id)qword_1000E0128;
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          v62 = 0;
          v49 = sub_100007750(1);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
            v50 = v49;
          else
            v50 = v49 & 0xFFFFFFFE;
          if ((_DWORD)v50)
          {
            LOWORD(v65) = 0;
            v51 = (const char *)_os_log_send_and_compose_impl(v50, &v62, 0, 0);
            v52 = (char *)v51;
            if (v51)
              sub_100007780(v51);
          }
          else
          {
            v52 = 0;
          }
          free(v52);
        }

        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v56 = (id)qword_1000E0128;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v62 = 0;
          v57 = sub_100007750(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            v58 = v57;
          else
            v58 = v57 & 0xFFFFFFFE;
          if ((_DWORD)v58)
          {
            LOWORD(v65) = 0;
            v59 = (const char *)_os_log_send_and_compose_impl(v58, &v62, 0, 0);
            v60 = (char *)v59;
            if (v59)
              sub_100007780(v59);
          }
          else
          {
            v60 = 0;
          }
          free(v60);
        }

        sub_100064A74(a1, v6, a3);
        goto LABEL_108;
      }
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v37 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        goto LABEL_107;
      v62 = 0;
      v53 = sub_100007750(1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        v54 = v53;
      else
        v54 = v53 & 0xFFFFFFFE;
      if ((_DWORD)v54)
      {
        LOWORD(v65) = 0;
        v41 = (void *)_os_log_send_and_compose_impl(v54, &v62, 0, 0);
        if (!v41)
        {
LABEL_106:
          free(v41);
LABEL_107:

LABEL_108:
          goto LABEL_109;
        }
LABEL_104:
        sub_100007780((const char *)v41);
        goto LABEL_106;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v37 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        goto LABEL_107;
      v65 = 0;
      LODWORD(v38) = sub_100007750(1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        v38 = v38;
      else
        v38 = v38 & 0xFFFFFFFE;
      if ((_DWORD)v38)
      {
        v39 = v37;
        v40 = -[NSObject code](v16, "code");
        LODWORD(v62) = 67109376;
        HIDWORD(v62) = (_DWORD)v7;
        v63 = 1024;
        v64 = v40;
        v41 = (void *)_os_log_send_and_compose_impl(v38, &v65, 0, 0);

        if (!v41)
          goto LABEL_106;
        goto LABEL_104;
      }
    }
    v41 = 0;
    goto LABEL_106;
  }
  v9 = 1;
LABEL_109:

  return v9;
}

uint64_t sub_10006599C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5;
  void *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  void *i;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  uint64_t v24;
  _BYTE v25[128];

  v5 = a2;
  v6 = v5;
  if (a1)
  {
    if (objc_msgSend(v5, "count"))
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v7 = (id)qword_1000E0128;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v24 = 0;
        v8 = sub_100007750(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          v23 = 0;
          v10 = (const char *)_os_log_send_and_compose_impl(v9, &v24, 0, 0);
          v11 = (char *)v10;
          if (v10)
            sub_100007780(v10);
        }
        else
        {
          v11 = 0;
        }
        free(v11);
      }

      v21 = 0u;
      v22 = 0u;
      v19 = 0u;
      v20 = 0u;
      v13 = v6;
      v14 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
      if (v14)
      {
        v15 = v14;
        v16 = *(_QWORD *)v20;
        LODWORD(v12) = 1;
        do
        {
          for (i = 0; i != v15; i = (char *)i + 1)
          {
            if (*(_QWORD *)v20 != v16)
              objc_enumerationMutation(v13);
            v12 = sub_100064FE8(a1, *(void **)(*((_QWORD *)&v19 + 1) + 8 * (_QWORD)i), a3) & v12;
          }
          v15 = objc_msgSend(v13, "countByEnumeratingWithState:objects:count:", &v19, v25, 16);
        }
        while (v15);
      }
      else
      {
        v12 = 1;
      }

    }
    else
    {
      v12 = 1;
    }
  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_100065BB0(id *a1, void *a2, uint64_t a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  void *v15;
  void *v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  char *v22;
  uint64_t v23;
  _QWORD v24[3];

  v5 = a2;
  if (a1)
  {
    v6 = a1[4];
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "userPersonas"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", v5));

    if (!v8)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v9 = (id)qword_1000E0128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LODWORD(v24[0]) = 138412290;
          *(_QWORD *)((char *)v24 + 4) = v5;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v23, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

      sub_10005EBB8(a1, v5);
    }
    v14 = a1[4];
    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v14, "userPersonas"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v15, "objectForKeyedSubscript:", v5));

    if (sub_10006599C((uint64_t)a1, v16, a3))
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v17 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      v24[0] = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LOWORD(v23) = 0;
        goto LABEL_32;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v17 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        goto LABEL_36;
      v24[0] = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v20;
      else
        v19 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LOWORD(v23) = 0;
LABEL_32:
        v21 = (const char *)_os_log_send_and_compose_impl(v19, v24, 0, 0);
        v22 = (char *)v21;
        if (v21)
          sub_100007780(v21);
        goto LABEL_35;
      }
    }
    v22 = 0;
LABEL_35:
    free(v22);
LABEL_36:

    sub_100063360(a1, v16, v5);
  }

}

BOOL sub_100065F00(uint64_t a1, int a2)
{
  return a1 && a2 == 4;
}

uint64_t sub_100065F10(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  unsigned int v5;
  uint64_t *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  unsigned int v27;
  NSObject *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  unsigned int v39;
  uint64_t v40;
  unsigned int v41;
  const char *v42;
  char *v43;
  id v45;
  uint64_t v46;
  __int16 v47;
  unsigned int v48;
  uint64_t v49;

  v3 = a2;
  v4 = v3;
  if (!a1)
  {
    v19 = 0;
    goto LABEL_95;
  }
  v5 = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaType"), (id)0x3E8);
  v6 = &qword_1000E0000;
  if (v5 == 4)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v7 = (id)qword_1000E0128;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        LOWORD(v49) = 0;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v46, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }
    v19 = 1;
    goto LABEL_94;
  }
  v12 = v5;
  v13 = sub_1000882AC(v4, (uint64_t)CFSTR("UserPersonaID"), (id)0xFFFFFFFFLL);
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v14 = (id)qword_1000E0128;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    v49 = 0;
    v15 = sub_100007750(1);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      v16 = v15;
    else
      v16 = v15 & 0xFFFFFFFE;
    if ((_DWORD)v16)
    {
      LODWORD(v46) = 67109376;
      HIDWORD(v46) = v13;
      v47 = 1024;
      v48 = v12;
      v17 = (const char *)_os_log_send_and_compose_impl(v16, &v49, 0, 0);
      v18 = (char *)v17;
      if (v17)
        sub_100007780(v17);
    }
    else
    {
      v18 = 0;
    }
    free(v18);
  }

  v45 = 0;
  v19 = sub_1000630EC(a1, v4, &v45);
  v7 = v45;
  if ((v19 & 1) != 0)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v46 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        LODWORD(v49) = 67109120;
        HIDWORD(v49) = v13;
        v23 = (const char *)_os_log_send_and_compose_impl(v22, &v46, 0, 0);
        v24 = (char *)v23;
        if (v23)
          sub_100007780(v23);
        goto LABEL_47;
      }
LABEL_46:
      v24 = 0;
LABEL_47:
      free(v24);
    }
  }
  else
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v20 = (id)qword_1000E0128;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      v49 = 0;
      LODWORD(v25) = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v25 = v25;
      else
        v25 = v25 & 0xFFFFFFFE;
      if ((_DWORD)v25)
      {
        v26 = v20;
        v27 = -[NSObject code](v7, "code");
        LODWORD(v46) = 67109376;
        HIDWORD(v46) = v13;
        v47 = 1024;
        v48 = v27;
        v24 = (char *)_os_log_send_and_compose_impl(v25, &v49, 0, 0);

        if (v24)
          sub_100007780(v24);
        v6 = &qword_1000E0000;
        goto LABEL_47;
      }
      goto LABEL_46;
    }
  }

  if ((v12 & 0xFFFFFFFB) != 2)
    goto LABEL_94;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v28 = (id)v6[37];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v46 = 0;
    v29 = sub_100007750(1);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      v30 = v29;
    else
      v30 = v29 & 0xFFFFFFFE;
    if ((_DWORD)v30)
    {
      LOWORD(v49) = 0;
      v31 = (const char *)_os_log_send_and_compose_impl(v30, &v46, 0, 0);
      v32 = (char *)v31;
      if (v31)
        sub_100007780(v31);
    }
    else
    {
      v32 = 0;
    }
    free(v32);
  }

  if (!objc_msgSend(*(id *)(a1 + 24), "isVolumeMountedWithSession:fsid:", v4, 0))
    goto LABEL_94;
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v33 = (id)v6[37];
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    v46 = 0;
    v34 = sub_100007750(1);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      v35 = v34;
    else
      v35 = v34 & 0xFFFFFFFE;
    if ((_DWORD)v35)
    {
      LOWORD(v49) = 0;
      v36 = (const char *)_os_log_send_and_compose_impl(v35, &v46, 0, 0);
      v37 = (char *)v36;
      if (v36)
        sub_100007780(v36);
    }
    else
    {
      v37 = 0;
    }
    free(v37);
  }

  if (objc_msgSend(*(id *)(a1 + 24), "unmountVolumeWithSession:mountPath:error:", v4, 0, 0))
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v38 = (id)v6[37];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      goto LABEL_93;
    v46 = 0;
    v39 = sub_100007750(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      v40 = v39;
    else
      v40 = v39 & 0xFFFFFFFE;
    if ((_DWORD)v40)
    {
      LOWORD(v49) = 0;
      goto LABEL_89;
    }
  }
  else
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v38 = (id)v6[37];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      goto LABEL_93;
    v46 = 0;
    v41 = sub_100007750(1);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      v40 = v41;
    else
      v40 = v41 & 0xFFFFFFFE;
    if ((_DWORD)v40)
    {
      LOWORD(v49) = 0;
LABEL_89:
      v42 = (const char *)_os_log_send_and_compose_impl(v40, &v46, 0, 0);
      v43 = (char *)v42;
      if (v42)
        sub_100007780(v42);
      goto LABEL_92;
    }
  }
  v43 = 0;
LABEL_92:
  free(v43);
LABEL_93:

LABEL_94:
LABEL_95:

  return v19;
}

uint64_t sub_100066684(uint64_t a1, void *a2)
{
  id v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  int v16;
  void *i;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  unsigned int v31;
  const char *v32;
  char *v33;
  uint64_t v34;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[2];
  _BYTE v41[128];
  _BYTE v42[24];

  v3 = a2;
  if (!a1)
  {
    v34 = 0;
    goto LABEL_69;
  }
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v4 = (id)qword_1000E0128;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v40[0] = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      *(_DWORD *)v42 = 138412290;
      *(_QWORD *)&v42[4] = v3;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, v40, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = *(id *)(a1 + 32);
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "userPersonas"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "objectForKeyedSubscript:", v3));

  if (!v11)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v18 = (id)qword_1000E0128;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_64;
    v40[0] = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if ((_DWORD)v20)
    {
      *(_DWORD *)v42 = 138412290;
      *(_QWORD *)&v42[4] = v3;
      v21 = v40;
      goto LABEL_60;
    }
LABEL_62:
    v33 = 0;
LABEL_63:
    free(v33);
    goto LABEL_64;
  }
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v12 = v11;
  v13 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
  if (v13)
  {
    v14 = v13;
    v15 = *(_QWORD *)v37;
    v16 = 1;
    do
    {
      for (i = 0; i != v14; i = (char *)i + 1)
      {
        if (*(_QWORD *)v37 != v15)
          objc_enumerationMutation(v12);
        v16 &= sub_100065F10(a1, *(void **)(*((_QWORD *)&v36 + 1) + 8 * (_QWORD)i));
      }
      v14 = objc_msgSend(v12, "countByEnumeratingWithState:objects:count:", &v36, v41, 16);
    }
    while (v14);
  }
  else
  {
    v16 = 1;
  }

  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v22 = (id)qword_1000E0128;
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v42 = 0;
    v23 = sub_100007750(1);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      v24 = v23;
    else
      v24 = v23 & 0xFFFFFFFE;
    if ((_DWORD)v24)
    {
      LOWORD(v40[0]) = 0;
      v25 = (const char *)_os_log_send_and_compose_impl(v24, v42, 0, 0);
      v26 = (char *)v25;
      if (v25)
        sub_100007780(v25);
    }
    else
    {
      v26 = 0;
    }
    free(v26);
  }

  sub_10005F5C8(a1);
  if (v16)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v18 = (id)qword_1000E0128;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v42 = 0;
      v27 = sub_100007750(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        LOWORD(v40[0]) = 0;
        v29 = (const char *)_os_log_send_and_compose_impl(v28, v42, 0, 0);
        v30 = (char *)v29;
        if (v29)
          sub_100007780(v29);
      }
      else
      {
        v30 = 0;
      }
      free(v30);
    }
    v34 = 1;
    goto LABEL_68;
  }
  if (qword_1000E0130 != -1)
    dispatch_once(&qword_1000E0130, &stru_1000D1770);
  v18 = (id)qword_1000E0128;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v42 = 0;
    v31 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v31;
    else
      v20 = v31 & 0xFFFFFFFE;
    if ((_DWORD)v20)
    {
      LOWORD(v40[0]) = 0;
      v21 = v42;
LABEL_60:
      v32 = (const char *)_os_log_send_and_compose_impl(v20, v21, 0, 0);
      v33 = (char *)v32;
      if (v32)
        sub_100007780(v32);
      goto LABEL_63;
    }
    goto LABEL_62;
  }
LABEL_64:
  v34 = 0;
LABEL_68:

LABEL_69:
  return v34;
}

void sub_100066BC8(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  id v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _BYTE v31[18];
  _BYTE v32[128];

  v3 = a2;
  v4 = v3;
  if (a1)
  {
    if (v3)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v5 = (id)qword_1000E0128;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v30[0] = 0;
        LODWORD(v6) = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v6 = v6;
        else
          v6 = v6 & 0xFFFFFFFE;
        if ((_DWORD)v6)
        {
          v7 = v5;
          *(_DWORD *)v31 = 134217984;
          *(_QWORD *)&v31[4] = objc_msgSend(v4, "count");
          v8 = (char *)_os_log_send_and_compose_impl(v6, v30, 0, 0);

          if (v8)
            sub_100007780(v8);
        }
        else
        {
          v8 = 0;
        }
        free(v8);
      }

      v28 = 0u;
      v29 = 0u;
      v26 = 0u;
      v27 = 0u;
      v9 = v4;
      v14 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
      if (v14)
      {
        v15 = v14;
        v25 = v4;
        v16 = 0;
        v17 = *(_QWORD *)v27;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v27 != v17)
              objc_enumerationMutation(v9);
            v19 = *(_QWORD *)(*((_QWORD *)&v26 + 1) + 8 * (_QWORD)v18);
            if (qword_1000E0130 != -1)
              dispatch_once(&qword_1000E0130, &stru_1000D1770);
            v20 = (id)qword_1000E0128;
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              v30[0] = 0;
              v21 = sub_100007750(1);
              if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                v22 = v21;
              else
                v22 = v21 & 0xFFFFFFFE;
              if ((_DWORD)v22)
              {
                *(_DWORD *)v31 = 67109378;
                *(_DWORD *)&v31[4] = v16 + (_DWORD)v18;
                *(_WORD *)&v31[8] = 2112;
                *(_QWORD *)&v31[10] = v19;
                v23 = (const char *)_os_log_send_and_compose_impl(v22, v30, 0, 0);
                v24 = (char *)v23;
                if (v23)
                  sub_100007780(v23);
              }
              else
              {
                v24 = 0;
              }
              free(v24);
            }

            v18 = (char *)v18 + 1;
          }
          while (v15 != v18);
          v15 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v26, v32, 16);
          v16 += (int)v18;
        }
        while (v15);
        v4 = v25;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v9 = (id)qword_1000E0128;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v31 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LOWORD(v30[0]) = 0;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, v31, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }
    }

  }
}

uint64_t sub_100066F88(uint64_t a1)
{
  void *v1;
  void *v2;
  NSObject *v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  unsigned int v21;
  uint64_t v23;
  int v24;
  unsigned int v25;

  if (!a1)
    return 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPersonas"));
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v1, "objectForKeyedSubscript:", CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF")));

  if (v2)
  {
    if ((unint64_t)objc_msgSend(v2, "count") <= 1)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v3 = (id)qword_1000E0128;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        v23 = 0;
        LODWORD(v4) = sub_100007750(1);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
          v4 = v4;
        else
          v4 = v4 & 0xFFFFFFFE;
        if ((_DWORD)v4)
        {
          v5 = v3;
          v24 = 67109120;
          v25 = objc_msgSend(v2, "count");
          v6 = (char *)_os_log_send_and_compose_impl(v4, &v23, 0, 0);

          if (v6)
            sub_100007780(v6);
        }
        else
        {
          v6 = 0;
        }
        free(v6);
      }
      v7 = 1;
      goto LABEL_53;
    }
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 0));
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));

    v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectAtIndexedSubscript:", 1));
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "objectForKeyedSubscript:", CFSTR("UserPersonaType")));

    v11 = objc_opt_class(NSNumber);
    if ((objc_opt_isKindOfClass(v3, v11) & 1) != 0
      && (v12 = objc_opt_class(NSNumber), (objc_opt_isKindOfClass(v10, v12) & 1) != 0))
    {
      v13 = -[NSObject unsignedIntValue](v3, "unsignedIntValue");
      v14 = objc_msgSend(v10, "unsignedIntValue");
      if (v13 != 3 && v14 != 3)
      {
        if (qword_1000E0130 != -1)
          dispatch_once(&qword_1000E0130, &stru_1000D1770);
        v15 = (id)qword_1000E0128;
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          goto LABEL_51;
        v23 = 0;
        v16 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          LOWORD(v24) = 0;
          goto LABEL_34;
        }
LABEL_49:
        v20 = 0;
LABEL_50:
        free(v20);
        goto LABEL_51;
      }
      v7 = 0;
      if (v13 == 5 || v14 == 5)
        goto LABEL_52;
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
LABEL_51:

        v7 = 1;
LABEL_52:

LABEL_53:
        goto LABEL_54;
      }
      v23 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v21;
      else
        v17 = v21 & 0xFFFFFFFE;
      if (!(_DWORD)v17)
        goto LABEL_49;
      LOWORD(v24) = 0;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v15 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        goto LABEL_51;
      v23 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v18;
      else
        v17 = v18 & 0xFFFFFFFE;
      if (!(_DWORD)v17)
        goto LABEL_49;
      LOWORD(v24) = 0;
    }
LABEL_34:
    v19 = (const char *)_os_log_send_and_compose_impl(v17, &v23, 0, 0);
    v20 = (char *)v19;
    if (v19)
      sub_100007780(v19);
    goto LABEL_50;
  }
  v7 = 1;
LABEL_54:

  return v7;
}

void sub_100067404(id *a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  void *v7;
  void *v8;
  void *v9;
  id *v10;
  void *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  const char *v16;
  char *v17;
  id *v18;
  void *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  const char *v24;
  char *v25;
  uint64_t v26;

  if (a1)
  {
    if (qword_1000E0130 != -1)
      dispatch_once(&qword_1000E0130, &stru_1000D1770);
    v2 = (id)qword_1000E0128;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v26 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v26, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }

    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userPersonas"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "objectForKeyedSubscript:", CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF")));

    if (!v8)
    {
      v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
      v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1[4], "userPersonas"));
      objc_msgSend(v9, "setObject:forKeyedSubscript:", v8, CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"));

    }
    v10 = sub_10005F108(a1, v8, 3, CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
    if (v11)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v12 = (id)qword_1000E0128;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v26 = 0;
        v13 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v13;
        else
          v14 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v14)
          goto LABEL_31;
        goto LABEL_33;
      }
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v12 = (id)qword_1000E0128;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v26 = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v14 = v15;
        else
          v14 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v14)
        {
LABEL_31:
          v16 = (const char *)_os_log_send_and_compose_impl(v14, &v26, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
          goto LABEL_34;
        }
LABEL_33:
        v17 = 0;
LABEL_34:
        free(v17);
      }
    }

    v18 = sub_10005F108(a1, v8, 5, CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v18);

    if (v19)
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v20 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_55;
      v26 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v22)
        goto LABEL_51;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v20 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        goto LABEL_55;
      v26 = 0;
      v23 = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v23;
      else
        v22 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
LABEL_51:
        v24 = (const char *)_os_log_send_and_compose_impl(v22, &v26, 0, 0);
        v25 = (char *)v24;
        if (v24)
          sub_100007780(v24);
        goto LABEL_54;
      }
    }
    v25 = 0;
LABEL_54:
    free(v25);
LABEL_55:

    sub_10005F5C8((uint64_t)a1);
  }
}

void sub_100067874(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  const char *v8;
  char *v9;
  uint64_t v10;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "userPersonas"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKeyedSubscript:", CFSTR("FFFFFFFF-FFFF-FFFF-FFFF-FFFFFFFFFFFF")));

    if (v3)
    {
      if ((sub_10006599C(a1, v3, 0) & 1) != 0)
      {
LABEL_24:

        return;
      }
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v4 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:

        goto LABEL_24;
      }
      v10 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
        goto LABEL_19;
    }
    else
    {
      if (qword_1000E0130 != -1)
        dispatch_once(&qword_1000E0130, &stru_1000D1770);
      v4 = (id)qword_1000E0128;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        goto LABEL_23;
      v10 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v7;
      else
        v6 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
LABEL_19:
        v8 = (const char *)_os_log_send_and_compose_impl(v6, &v10, 0, 0);
        v9 = (char *)v8;
        if (v8)
          sub_100007780(v8);
        goto LABEL_22;
      }
    }
    v9 = 0;
LABEL_22:
    free(v9);
    goto LABEL_23;
  }
}

void sub_100067A50(uint64_t a1, void *a2)
{
  void *v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  uint64_t v15;
  void *v16;
  NSObject *v17;
  uint64_t v18;
  NSObject *v19;
  id v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  id v30;
  id v31;
  uint64_t v32;
  void *i;
  id v34;
  id v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  _QWORD v44[2];
  _BYTE v45[128];
  _BYTE v46[24];

  if (a1)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("MKBUserSessionHomeDir")));
    if (v3)
    {
      if (qword_1000E0120 != -1)
        dispatch_once(&qword_1000E0120, &stru_1000D1750);
      v4 = (id)qword_1000E0118;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
      {
        v44[0] = 0;
        v5 = sub_100007750(0);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
          v6 = v5;
        else
          v6 = v5 & 0xFFFFFFFE;
        if ((_DWORD)v6)
        {
          *(_DWORD *)v46 = 138543362;
          *(_QWORD *)&v46[4] = v3;
          LODWORD(v39) = 12;
          v38 = v46;
          v7 = (const char *)_os_log_send_and_compose_impl(v6, v44, 0, 0);
          v8 = (char *)v7;
          if (v7)
            sub_100007780(v7);
        }
        else
        {
          v8 = 0;
        }
        free(v8);
      }

      v14 = *(id *)(a1 + 16);
      v15 = sub_100007ED8((uint64_t)v14);
      v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
      v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(v16, "pidsUsingVolumeAtPath:error:", v3, 0));

      if (v9)
      {
        if (qword_1000E0120 != -1)
          dispatch_once(&qword_1000E0120, &stru_1000D1750);
        v17 = (id)qword_1000E0118;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
        {
          v44[0] = 0;
          LODWORD(v18) = sub_100007750(0);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_INFO))
            v18 = v18;
          else
            v18 = v18 & 0xFFFFFFFE;
          if ((_DWORD)v18)
          {
            v19 = v17;
            v20 = -[NSObject count](v9, "count");
            *(_DWORD *)v46 = 134217984;
            *(_QWORD *)&v46[4] = v20;
            LODWORD(v39) = 12;
            v38 = v46;
            v21 = (char *)_os_log_send_and_compose_impl(v18, v44, 0, 0);

            if (v21)
              sub_100007780(v21);
          }
          else
          {
            v21 = 0;
          }
          free(v21);
        }

        v27 = sub_100007ED8(*(_QWORD *)(a1 + 16));
        v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
        v29 = objc_msgSend(v28, "currentPID");

        v42 = 0u;
        v43 = 0u;
        v40 = 0u;
        v41 = 0u;
        v9 = v9;
        v30 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
        if (v30)
        {
          v31 = v30;
          v32 = *(_QWORD *)v41;
          do
          {
            for (i = 0; i != v31; i = (char *)i + 1)
            {
              if (*(_QWORD *)v41 != v32)
                objc_enumerationMutation(v9);
              v34 = objc_msgSend(*(id *)(*((_QWORD *)&v40 + 1) + 8 * (_QWORD)i), "intValue", v38, v39, (_QWORD)v40);
              if ((v34 & 0x80000000) == 0)
              {
                v35 = v34;
                if ((_DWORD)v34 != v29)
                {
                  v36 = sub_100007ED8(*(_QWORD *)(a1 + 16));
                  v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
                  objc_msgSend(v37, "terminatePID:withReasonNamespace:reasonCode:reasonString:error:", v35, 26, 4008636142, CFSTR("This process has files open on a profile volume that is being uninstalled"), 0);

                }
              }
            }
            v31 = -[NSObject countByEnumeratingWithState:objects:count:](v9, "countByEnumeratingWithState:objects:count:", &v40, v45, 16);
          }
          while (v31);
        }

      }
      else
      {
        if (qword_1000E0120 != -1)
          dispatch_once(&qword_1000E0120, &stru_1000D1750);
        v22 = (id)qword_1000E0118;
        if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
        {
          *(_QWORD *)v46 = 0;
          v23 = sub_100007750(0);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
            v24 = v23;
          else
            v24 = v23 & 0xFFFFFFFE;
          if ((_DWORD)v24)
          {
            LOWORD(v44[0]) = 0;
            v25 = (const char *)_os_log_send_and_compose_impl(v24, v46, 0, 0);
            v26 = (char *)v25;
            if (v25)
              sub_100007780(v25);
          }
          else
          {
            v26 = 0;
          }
          free(v26);
        }

      }
    }
    else
    {
      if (qword_1000E0120 != -1)
        dispatch_once(&qword_1000E0120, &stru_1000D1750);
      v9 = (id)qword_1000E0118;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)v46 = 0;
        v10 = sub_100007750(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LOWORD(v44[0]) = 0;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, v46, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }
    }

  }
}

void sub_100067FA8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "persona");
  v2 = (void *)qword_1000E0118;
  qword_1000E0118 = (uint64_t)v1;

}

void sub_100067FDC(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E0128;
  qword_1000E0128 = (uint64_t)v1;

}

id *sub_100068010(uint64_t a1, void *a2, void *a3, void *a4, int a5)
{
  id v9;
  id *v10;

  v9 = a2;
  objc_opt_self(a1);
  v10 = sub_100068084((id *)[UMDRotatingLog alloc], v9, a3, a4, a5);

  return v10;
}

id *sub_100068084(id *a1, void *a2, void *a3, void *a4, int a5)
{
  id v10;
  id *v11;
  uint64_t v12;
  void *v13;
  dispatch_queue_attr_t v14;
  NSObject *v15;
  dispatch_queue_t v16;
  id v17;
  objc_super v19;

  v10 = a2;
  if (a1)
  {
    v19.receiver = a1;
    v19.super_class = (Class)UMDRotatingLog;
    v11 = (id *)objc_msgSendSuper2(&v19, "init");
    if (!v11)
      sub_1000ACE0C();
    a1 = v11;

    objc_storeStrong(a1 + 3, a2);
    v12 = sub_100007ED8((uint64_t)v10);
    v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
    *((_DWORD *)a1 + 2) = objc_msgSend(v13, "currentPID");

    v14 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
    v15 = objc_claimAutoreleasedReturnValue(v14);
    v16 = dispatch_queue_create("com.apple.usermanagerd.RotatingLog", v15);
    v17 = a1[4];
    a1[4] = v16;

    a1[5] = a3;
    a1[6] = a4;
    *((_DWORD *)a1 + 3) = -1;
    *((_DWORD *)a1 + 4) = a5;
  }

  return a1;
}

void sub_100068204(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  int v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  if (a1)
  {
    v2 = sub_100007EF0(*(_QWORD *)(a1 + 24));
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    objc_msgSend(v3, "closeFileWithDescriptor:", *(unsigned int *)(a1 + 12));

    *(_DWORD *)(a1 + 12) = -1;
    v4 = (*(_DWORD *)(a1 + 16) - 1);
    if ((int)v4 >= 0)
    {
      do
      {
        v5 = v4;
        v6 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s.%d"), *(_QWORD *)(a1 + 40), v4));
        v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("%s.%d"), *(_QWORD *)(a1 + 40), (v5 + 1)));
        v8 = sub_100007EF0(*(_QWORD *)(a1 + 24));
        v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
        objc_msgSend(v9, "renameFileFromPath:toPath:error:", v6, v7, 0);

        v4 = (v5 - 1);
      }
      while (v5);
    }
  }
}

uint64_t sub_1000682F4(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_100068300(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 48) = a2;
  return result;
}

void sub_10006833C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = objc_opt_class(*(_QWORD *)(a1 + 32));
  v2 = objc_opt_new(v1);
  v3 = (void *)qword_1000E0138;
  qword_1000E0138 = v2;

}

void sub_100068D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 136), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100068D9C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100068DAC(uint64_t a1)
{

}

void sub_100068DB4(uint64_t a1)
{
  __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  unsigned int v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;

  v22 = 0;
  v2 = sub_100027BD4(*(const __CFDictionary **)(a1 + 32), *(UInt8 **)(a1 + 64), *(_QWORD *)(a1 + 72), &v22);
  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "externalizeUserDictionary:", v2));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  v6 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  if (v6)
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "objectForKey:", kUMUserSessionIDKey));
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 0;
      LODWORD(v9) = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v9 = v9;
      else
        v9 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = v8;
        v11 = objc_msgSend(v7, "intValue");
        v23 = 67109120;
        v24 = v11;
        v12 = (char *)_os_log_send_and_compose_impl(v9, &v21, 0, 0);

        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

  }
  if (v22)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v13 = (id)qword_1000E0158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v21 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v23 = 67109120;
        v24 = v22;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, &v21, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }

    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v22, 0));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v20 = *(void **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;

  }
}

void sub_100069450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100069480(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v10 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v10, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 45, 0));
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v9 = *(void **)(v8 + 40);
  *(_QWORD *)(v8 + 40) = v7;

}

void sub_100069F74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  uint64_t v14;
  va_list va;

  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 136), 8);
  _Unwind_Resume(a1);
}

void sub_100069FDC(uint64_t a1)
{
  void *v2;
  void *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  int v17;
  unsigned int v18;

  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (v2)
  {
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "objectForKey:", kUMUserSessionIDKey));
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v4 = (id)qword_1000E0158;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      LODWORD(v5) = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v5 = v5;
      else
        v5 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v6 = v4;
        v17 = 67109120;
        v18 = objc_msgSend(v3, "intValue");
        v7 = (char *)_os_log_send_and_compose_impl(v5, &v16, 0, 0);

        if (v7)
          sub_100007780(v7);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

  }
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v8 = (id)qword_1000E0158;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      v17 = 67109120;
      v18 = 45;
      v11 = (const char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0);
      v12 = (char *)v11;
      if (v11)
        sub_100007780(v11);
    }
    else
    {
      v12 = 0;
    }
    free(v12);
  }

  v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 45, 0));
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v15 = *(void **)(v14 + 40);
  *(_QWORD *)(v14 + 40) = v13;

}

void sub_10006AB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006ABF4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  vm_address_t v5;
  vm_map_t v6;
  vm_size_t v7;
  vm_size_t v8;
  int v9;

  v9 = 0;
  if ((sub_100025CEC(a1[4], a1[6], a1[7], &v9) & 1) == 0)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v9, 0));
    v3 = *(_QWORD *)(a1[5] + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
  v5 = a1[8];
  if (v5)
  {
    v6 = mach_task_self_;
    v7 = vm_page_size;
    if (vm_page_size >= a1[7])
      v8 = a1[7];
    else
      v8 = vm_page_size;
    memset_s((void *)a1[8], v8, 0, v8);
    vm_deallocate(v6, v5, v7);
  }
}

void sub_10006B1E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v27 - 160), 8);
  _Block_object_dispose((const void *)(v27 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10006B238(_QWORD *a1)
{
  const __CFDictionary *v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v2 = (const __CFDictionary *)sub_10001D69C();
  if (v2)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v3 = (id)qword_1000E0158;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v6 = (const char *)_os_log_send_and_compose_impl(v5, &v31, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

    *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = sub_100086748(v2, kUMUserSessionUUIDKey);
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v13 = (id)qword_1000E0158;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 0;
        v14 = sub_100007750(1);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          v15 = v14;
        else
          v15 = v14 & 0xFFFFFFFE;
        if ((_DWORD)v15)
        {
          v16 = (const char *)_os_log_send_and_compose_impl(v15, &v31, 0, 0);
          v17 = (char *)v16;
          if (v16)
            sub_100007780(v16);
        }
        else
        {
          v17 = 0;
        }
        free(v17);
      }

      CFRetain(*(CFTypeRef *)(*(_QWORD *)(a1[4] + 8) + 24));
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    }
    else
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v18 = (id)qword_1000E0158;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v31 = 0;
        v19 = sub_100007750(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          v20 = v19;
        else
          v20 = v19 & 0xFFFFFFFE;
        if ((_DWORD)v20)
        {
          v21 = (const char *)_os_log_send_and_compose_impl(v20, &v31, 0, 0);
          v22 = (char *)v21;
          if (v21)
            sub_100007780(v21);
        }
        else
        {
          v22 = 0;
        }
        free(v22);
      }

    }
    if (*(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24))
      goto LABEL_63;
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v31 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = (const char *)_os_log_send_and_compose_impl(v10, &v31, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

  }
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v23 = (id)qword_1000E0158;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    v31 = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      v26 = (const char *)_os_log_send_and_compose_impl(v25, &v31, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
    }
    else
    {
      v27 = 0;
    }
    free(v27);
  }

  v28 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 2, 0));
  v29 = *(_QWORD *)(a1[6] + 8);
  v30 = *(void **)(v29 + 40);
  *(_QWORD *)(v29 + 40) = v28;

  if (v2)
LABEL_63:
    CFRelease(v2);
}

void sub_10006B708(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;

  v20 = 0;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LOWORD(v21) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v19, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if ((sub_100025D00(*(const __CFString **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), &v20) & 1) != 0)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        LOWORD(v21) = 0;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v19, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v12 = (id)qword_1000E0158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        v21 = 67109120;
        v22 = v20;
        v15 = (const char *)_os_log_send_and_compose_impl(v14, &v19, 0, 0);
        v16 = (char *)v15;
        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v16 = 0;
      }
      free(v16);
    }

    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v20, 0));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v7 = *(NSObject **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;
  }

}

void sub_10006C000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  _Block_object_dispose(&a31, 8);
  _Block_object_dispose((const void *)(v31 - 192), 8);
  _Block_object_dispose((const void *)(v31 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10006C05C(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;

  v7 = 0;
  v2 = sub_1000053A8(*(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = sub_10004D9F0(*(void **)(a1 + 32), v3, &v7);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    v4 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v7, 0));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

void sub_10006C114(_QWORD *a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  char *v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  NSErrorDomain v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  uint64_t v36;
  _BYTE v37[12];
  __int16 v38;
  char *v39;
  _QWORD v40[2];
  char buffer[16];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;

  HIDWORD(v36) = 0;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v46 = 0u;
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  *(_OWORD *)buffer = 0u;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v40[0] = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = a1[4];
      v6 = *(char **)(*(_QWORD *)(a1[5] + 8) + 24);
      *(_DWORD *)v37 = 138412546;
      *(_QWORD *)&v37[4] = v5;
      v38 = 2112;
      v39 = v6;
      LODWORD(v36) = 22;
      v35 = v37;
      v7 = (const char *)_os_log_send_and_compose_impl(v4, v40, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  if (!CFStringGetCString(*(CFStringRef *)(*(_QWORD *)(a1[5] + 8) + 24), buffer, 256, 0x8000100u))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v15 = (id)qword_1000E0158;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v40[0] = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        v18 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        *(_DWORD *)v37 = 138412290;
        *(_QWORD *)&v37[4] = v18;
        LODWORD(v36) = 12;
        v35 = v37;
        v19 = (const char *)_os_log_send_and_compose_impl(v17, v40, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
      }
      else
      {
        v20 = 0;
      }
      free(v20);
    }

    v31 = NSPOSIXErrorDomain;
    v32 = 22;
    goto LABEL_60;
  }
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v9 = (id)qword_1000E0158;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    v40[0] = 0;
    v10 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v11 = v10;
    else
      v11 = v10 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      v12 = a1[4];
      *(_DWORD *)v37 = 138412546;
      *(_QWORD *)&v37[4] = v12;
      v38 = 2080;
      v39 = buffer;
      LODWORD(v36) = 22;
      v35 = v37;
      v13 = (const char *)_os_log_send_and_compose_impl(v11, v40, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  if (!sub_1000278FC((uint64_t)buffer))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v26 = (id)qword_1000E0158;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v37 = 0;
      v27 = sub_100007750(1);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        v40[0] = 67109120;
        LODWORD(v36) = 8;
        v35 = v40;
        v29 = (const char *)_os_log_send_and_compose_impl(v28, v37, 0, 0);
        v30 = (char *)v29;
        if (v29)
          sub_100007780(v29);
      }
      else
      {
        v30 = 0;
      }
      free(v30);
    }

    v31 = NSPOSIXErrorDomain;
    v32 = 0;
LABEL_60:
    v33 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", v31, v32, 0, v35, v36));
    v34 = *(_QWORD *)(a1[6] + 8);
    v21 = *(NSObject **)(v34 + 40);
    *(_QWORD *)(v34 + 40) = v33;
    goto LABEL_61;
  }
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v21 = (id)qword_1000E0158;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v37 = 0;
    v22 = sub_100007750(1);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      v23 = v22;
    else
      v23 = v22 & 0xFFFFFFFE;
    if ((_DWORD)v23)
    {
      LOWORD(v40[0]) = 0;
      v24 = (const char *)_os_log_send_and_compose_impl(v23, v37, 0, 0);
      v25 = (char *)v24;
      if (v24)
        sub_100007780(v24);
    }
    else
    {
      v25 = 0;
    }
    free(v25);
  }
LABEL_61:

}

void sub_10006CA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006CA70(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;

  if (!sub_100032200(*(const __CFDictionary **)(a1 + 32)))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v10, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }

    v7 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v9 = *(void **)(v8 + 40);
    *(_QWORD *)(v8 + 40) = v7;

  }
}

void sub_10006D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006D078(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;

  v2 = sub_1000351C4("/private/var//keybags/nextsession_opaque.kb");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (v2)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v5 = (id)qword_1000E0158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      LODWORD(v6) = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v6 = v6;
      else
        v6 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v8 = v5;
        v18 = 67109120;
        v19 = objc_msgSend(v7, "length");
        v9 = (char *)_os_log_send_and_compose_impl(v6, &v17, 0, 0);

        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v10 = (id)qword_1000E0158;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        LOWORD(v18) = 0;
        v13 = (const char *)_os_log_send_and_compose_impl(v12, &v17, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

    v15 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 5, 0));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(NSObject **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
  }

}

void sub_10006D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10006D45C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LOWORD(v21) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (unlink("/private/var//keybags/nextsession_opaque.kb"))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *__error();
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v21 = 67109120;
        v22 = v10;
        v11 = (const char *)_os_log_send_and_compose_impl(v9, &v20, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(NSObject **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v13 = (id)qword_1000E0158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v21) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, &v20, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }
  }

}

void sub_10006D920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006D938(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  char *v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  unsigned int v22;

  if (sub_10001FBAC())
  {
    if (qword_1000E0170 != -1)
      dispatch_once(&qword_1000E0170, &stru_1000D1B88);
    v2 = (id)qword_1000E0168;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v3 = sub_100007750(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LOWORD(v21) = 0;
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }

    v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, 0));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v7 = *(void **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;
  }
  else
  {
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", kUMUserSessionIDKey));
    if (sub_10003245C(*(const __CFDictionary **)(a1 + 32), 0, *(const __CFData **)(a1 + 40)) == 1)
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v8 = (id)qword_1000E0158;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 0;
        LODWORD(v9) = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v9 = v9;
        else
          v9 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          v10 = v8;
          v21 = 67109120;
          v22 = objc_msgSend(v7, "intValue");
          v11 = (char *)_os_log_send_and_compose_impl(v9, &v20, 0, 0);

          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v11 = 0;
        }
        free(v11);
      }
    }
    else
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v12 = (id)qword_1000E0158;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v20 = 0;
        LODWORD(v13) = sub_100007750(1);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          v13 = v13;
        else
          v13 = v13 & 0xFFFFFFFE;
        if ((_DWORD)v13)
        {
          v14 = v12;
          v21 = 67109120;
          v22 = objc_msgSend(v7, "intValue");
          v15 = (char *)_os_log_send_and_compose_impl(v13, &v20, 0, 0);

          if (v15)
            sub_100007780(v15);
        }
        else
        {
          v15 = 0;
        }
        free(v15);
      }

      v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v8 = *(NSObject **)(v19 + 40);
      *(_QWORD *)(v19 + 40) = v18;
    }

  }
}

void sub_10006DF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10006DF3C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v16, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (sub_100033BA8(*(const __CFData **)(a1 + 32), (uint64_t)"/private/var//keybags/nextsession_SBD_opaque.kb") == 1)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
LABEL_28:
        v14 = (const char *)_os_log_send_and_compose_impl(v9, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
        goto LABEL_31;
      }
LABEL_30:
      v15 = 0;
LABEL_31:
      free(v15);
    }
  }
  else
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 5, 0));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v13;
      else
        v9 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v9)
        goto LABEL_28;
      goto LABEL_30;
    }
  }

}

void sub_10006E390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006E3B4(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;

  v15 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = sub_1000347B0(*(const __CFDictionary **)(a1 + 32), *(const void **)(a1 + 40), &v15);
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LOWORD(v16) = 0;
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v14, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v16 = 67109120;
        v17 = v15;
        v10 = (const char *)_os_log_send_and_compose_impl(v9, &v14, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
      }
      else
      {
        v11 = 0;
      }
      free(v11);
    }

    v12 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v15, 0));
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v2 = *(NSObject **)(v13 + 40);
    *(_QWORD *)(v13 + 40) = v12;
  }

}

void sub_10006E7C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_10006E7EC(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  BOOL v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;

  v19 = 0;
  v2 = sub_100034554(*(const __CFDictionary **)(a1 + 32), &v19);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
    v5 = 1;
  else
    v5 = v19 == 0;
  if (v5)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v6 = (id)qword_1000E0158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        LOWORD(v20) = 0;
        v9 = (const char *)_os_log_send_and_compose_impl(v8, &v18, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v11 = (id)qword_1000E0158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v18 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v20 = 67109120;
        v21 = v19;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, &v18, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    v16 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v19, 0));
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v6 = *(NSObject **)(v17 + 40);
    *(_QWORD *)(v17 + 40) = v16;
  }

}

void sub_10006EBB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006EBDC(uint64_t a1)
{
  const void *v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  unsigned int v19;

  v2 = sub_1000351C4("/private/var//keybags/nextsession_SBD_opaque.kb");
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  if (v2)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v5 = (id)qword_1000E0158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      LODWORD(v6) = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v6 = v6;
      else
        v6 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v7 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
        v8 = v5;
        v18 = 67109120;
        v19 = objc_msgSend(v7, "length");
        v9 = (char *)_os_log_send_and_compose_impl(v6, &v17, 0, 0);

        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v9 = 0;
      }
      free(v9);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v10 = (id)qword_1000E0158;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        v12 = v11;
      else
        v12 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        LOWORD(v18) = 0;
        v13 = (const char *)_os_log_send_and_compose_impl(v12, &v17, 0, 0);
        v14 = (char *)v13;
        if (v13)
          sub_100007780(v13);
      }
      else
      {
        v14 = 0;
      }
      free(v14);
    }

    v15 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 5, 0));
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v5 = *(NSObject **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;
  }

}

void sub_10006EF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 48), 8);
  _Unwind_Resume(a1);
}

void sub_10006EFC0(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  int v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LOWORD(v21) = 0;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  if (unlink("/private/var//keybags/nextsession_SBD_opaque.kb"))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *__error();
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v7 = (id)qword_1000E0158;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        v9 = v8;
      else
        v9 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v9)
      {
        v10 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
        v21 = 67109120;
        v22 = v10;
        v11 = (const char *)_os_log_send_and_compose_impl(v9, &v20, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
      }
      else
      {
        v12 = 0;
      }
      free(v12);
    }

    v18 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, *(int *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24), 0));
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v13 = *(NSObject **)(v19 + 40);
    *(_QWORD *)(v19 + 40) = v18;
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v13 = (id)qword_1000E0158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v21) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, &v20, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }
  }

}

void sub_10006F308(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  const __CFDictionary *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v14 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v14, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = sub_10003402C(*(const __CFDictionary **)(a1 + 32));
  if (v7)
  {
    v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "externalizeUserDictionary:", v7));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    v11 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v13 = *(void **)(v12 + 40);
    *(_QWORD *)(v12 + 40) = v11;

  }
}

void sub_10006F67C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Block_object_dispose((const void *)(v11 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10006F6AC(uint64_t a1)
{
  __CFDictionary *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  NSObject *v12;
  char *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;

  v2 = sub_100034D68(*(const __CFDictionary **)(a1 + 32));
  if (v2)
  {
    v3 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 40), "externalizeUserDictionary:", v2));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v6 = (id)qword_1000E0158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      LODWORD(v7) = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v7 = v7;
      else
        v7 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
LABEL_19:
        v11 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
        v12 = v6;
        v15 = 67109120;
        v16 = objc_msgSend(v11, "intValue");
        v13 = (char *)_os_log_send_and_compose_impl(v7, &v14, 0, 0);

        if (v13)
          sub_100007780(v13);
        goto LABEL_22;
      }
LABEL_21:
      v13 = 0;
LABEL_22:
      free(v13);
    }
  }
  else
  {
    v8 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v6 = (id)qword_1000E0158;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      LODWORD(v7) = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v7 = v7;
      else
        v7 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v7)
        goto LABEL_19;
      goto LABEL_21;
    }
  }

}

void sub_10006FA48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10006FA6C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v19 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v19, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = sub_10001D538();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalizeUserDictionary:", v7));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v12 = (id)qword_1000E0158;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v13;
      else
        v14 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        v15 = (const char *)_os_log_send_and_compose_impl(v14, &v19, 0, 0);
        v16 = (char *)v15;
        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v16 = 0;
      }
      free(v16);
    }

    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;
  }

}

void sub_100070000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  uint64_t v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v13 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_100070034(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  __CFDictionary *v14;
  NSObject *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  __int16 *v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  if (sub_10001FBAC())
  {
    if (qword_1000E0170 != -1)
      dispatch_once(&qword_1000E0170, &stru_1000D1B88);
    v2 = (id)qword_1000E0168;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v37 = 0;
      v3 = sub_100007750(0);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v36 = 0;
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v37, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }

    v20 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 37, 0));
    v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v22 = *(void **)(v21 + 40);
    *(_QWORD *)(v21 + 40) = v20;

  }
  else
  {
    v7 = sub_10001D248(502);
    if (v7)
    {
      v8 = (void *)v7;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v9 = (id)qword_1000E0158;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 0;
        v10 = sub_100007750(1);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          v36 = 0;
          LODWORD(v35) = 2;
          v34 = &v36;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v37, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

    }
    else
    {
      v14 = sub_100022BC0(*(_DWORD *)(a1 + 56), 0);
      if (!v14)
      {
        v23 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
        v24 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v25 = *(void **)(v24 + 40);
        *(_QWORD *)(v24 + 40) = v23;

        return;
      }
      v8 = v14;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v15 = (id)qword_1000E0158;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 0;
        v16 = sub_100007750(1);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          v17 = v16;
        else
          v17 = v16 & 0xFFFFFFFE;
        if ((_DWORD)v17)
        {
          v36 = 0;
          LODWORD(v35) = 2;
          v34 = &v36;
          v18 = (const char *)_os_log_send_and_compose_impl(v17, &v37, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
        }
        else
        {
          v19 = 0;
        }
        free(v19);
      }

      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v26 = (id)qword_1000E0158;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v37 = 0;
        v27 = sub_100007750(1);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
          v28 = v27;
        else
          v28 = v27 & 0xFFFFFFFE;
        if ((_DWORD)v28)
        {
          v36 = 0;
          LODWORD(v35) = 2;
          v34 = &v36;
          v29 = (const char *)_os_log_send_and_compose_impl(v28, &v37, 0, 0);
          v30 = (char *)v29;
          if (v29)
            sub_100007780(v29);
        }
        else
        {
          v30 = 0;
        }
        free(v30);
      }

      sub_1000329B8(*(const __CFDictionary **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);
    }
    v31 = objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "externalizeUserDictionary:", v8, v34, v35));
    v32 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v33 = *(void **)(v32 + 40);
    *(_QWORD *)(v32 + 40) = v31;

  }
}

void sub_1000706CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000706E4(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFString *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  unsigned int v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[12];
  uint64_t v19;

  v2 = (const __CFDictionary *)sub_10001D248(*(_DWORD *)(a1 + 48));
  v3 = v2;
  if (v2)
  {
    v4 = *(const __CFString **)(a1 + 32);
    if (v4)
    {
      sub_1000382EC(v2, v4);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v5 = (id)qword_1000E0158;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v19 = 0;
        v6 = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v7 = v6;
        else
          v7 = v6 & 0xFFFFFFFE;
        if ((_DWORD)v7)
        {
          *(_DWORD *)v18 = 138412290;
          *(_QWORD *)&v18[4] = v3;
          LODWORD(v17) = 12;
          v16 = v18;
          v8 = (const char *)_os_log_send_and_compose_impl(v7, &v19, 0, 0);
          v9 = (char *)v8;
          if (v8)
            sub_100007780(v8);
        }
        else
        {
          v9 = 0;
        }
        free(v9);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v3, "objectForKey:", kUMUserSessionIDKey, v16, v17));
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v11 = (id)qword_1000E0158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v18 = 0;
      LODWORD(v12) = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v12 = v12;
      else
        v12 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        v13 = v11;
        v14 = objc_msgSend(v10, "intValue");
        LODWORD(v19) = 67109120;
        HIDWORD(v19) = v14;
        v15 = (char *)_os_log_send_and_compose_impl(v12, v18, 0, 0);

        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

  }
}

void sub_100070ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070AE4(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  const __CFString *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  void *v10;
  NSObject *v11;
  uint64_t v12;
  NSObject *v13;
  unsigned int v14;
  char *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE v18[12];
  uint64_t v19;

  v2 = (const __CFDictionary *)sub_10001D248(*(_DWORD *)(a1 + 48));
  v3 = v2;
  if (v2)
  {
    v4 = *(const __CFString **)(a1 + 32);
    if (v4)
    {
      sub_100038C68(v2, v4);
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v5 = (id)qword_1000E0158;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v19 = 0;
        v6 = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v7 = v6;
        else
          v7 = v6 & 0xFFFFFFFE;
        if ((_DWORD)v7)
        {
          *(_DWORD *)v18 = 138412290;
          *(_QWORD *)&v18[4] = v3;
          LODWORD(v17) = 12;
          v16 = v18;
          v8 = (const char *)_os_log_send_and_compose_impl(v7, &v19, 0, 0);
          v9 = (char *)v8;
          if (v8)
            sub_100007780(v8);
        }
        else
        {
          v9 = 0;
        }
        free(v9);
      }

    }
    v10 = (void *)objc_claimAutoreleasedReturnValue(-[__CFDictionary objectForKey:](v3, "objectForKey:", kUMUserSessionIDKey, v16, v17));
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v11 = (id)qword_1000E0158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v18 = 0;
      LODWORD(v12) = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v12 = v12;
      else
        v12 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v12)
      {
        v13 = v11;
        v14 = objc_msgSend(v10, "intValue");
        LODWORD(v19) = 67109120;
        HIDWORD(v19) = v14;
        v15 = (char *)_os_log_send_and_compose_impl(v12, v18, 0, 0);

        if (v15)
          sub_100007780(v15);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

  }
}

void sub_100070EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070EC4(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 40);
      v17 = 67109120;
      v18 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v16, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if (sub_100035A58(*(unsigned int *)(a1 + 40)))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD *)(a1 + 40);
        v17 = 67109120;
        v18 = v11;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v12;
      else
        v10 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v13 = *(_DWORD *)(a1 + 40);
        v17 = 67109120;
        v18 = v13;
LABEL_29:
        v14 = (const char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
        goto LABEL_32;
      }
LABEL_31:
      v15 = 0;
LABEL_32:
      free(v15);
    }
  }

}

void sub_1000712E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000712FC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  int v13;
  const char *v14;
  char *v15;
  uint64_t v16;
  int v17;
  int v18;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 40);
      v17 = 67109120;
      v18 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v16, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if (sub_1000306FC(*(unsigned int *)(a1 + 40), 1))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD *)(a1 + 40);
        v17 = 67109120;
        v18 = v11;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v12;
      else
        v10 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v13 = *(_DWORD *)(a1 + 40);
        v17 = 67109120;
        v18 = v13;
LABEL_29:
        v14 = (const char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
        goto LABEL_32;
      }
LABEL_31:
      v15 = 0;
LABEL_32:
      free(v15);
    }
  }

}

void sub_100071720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071738(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  const char *v14;
  char *v15;
  uint64_t v16;

  if (*(_BYTE *)(a1 + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
        goto LABEL_17;
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v5;
      else
        v4 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
LABEL_17:
        v6 = (const char *)_os_log_send_and_compose_impl(v4, &v16, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
        goto LABEL_20;
      }
LABEL_19:
      v7 = 0;
LABEL_20:
      free(v7);
    }
  }

  if (sub_100037920(*(unsigned __int8 *)(a1 + 40)))
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v8 = (id)qword_1000E0158;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 0;
        v9 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
LABEL_55:
          v14 = (const char *)_os_log_send_and_compose_impl(v10, &v16, 0, 0);
          v15 = (char *)v14;
          if (v14)
            sub_100007780(v14);
          goto LABEL_58;
        }
LABEL_57:
        v15 = 0;
LABEL_58:
        free(v15);
      }
    }
    else
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v8 = (id)qword_1000E0158;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v16 = 0;
        v12 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v12;
        else
          v10 = v12 & 0xFFFFFFFE;
        if ((_DWORD)v10)
          goto LABEL_55;
        goto LABEL_57;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v11;
      else
        v10 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v10)
        goto LABEL_55;
      goto LABEL_57;
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = 0;
      v13 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v13;
      else
        v10 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v10)
        goto LABEL_55;
      goto LABEL_57;
    }
  }

}

void sub_100071CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100071CCC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int v10;

  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = dword_1000DF224;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v8 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
      v9 = 67109120;
      v10 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v8, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

}

void sub_100072014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100072038(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  _QWORD v21[2];
  _QWORD v22[3];

  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "objectForKey:", kUMUserSessionIDKey));
  v3 = (void *)sub_10001D248((int)objc_msgSend(v2, "intValue"));
  v4 = v3;
  if (v3)
  {
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "objectForKey:", kUMUserSessionSyncMachServicesKey));
    if (v5)
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v6 = (id)qword_1000E0158;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v21[0] = 0;
        v7 = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v8 = v7;
        else
          v8 = v7 & 0xFFFFFFFE;
        if ((_DWORD)v8)
        {
          LODWORD(v22[0]) = 138412290;
          *(_QWORD *)((char *)v22 + 4) = v5;
          v9 = (const char *)_os_log_send_and_compose_impl(v8, v21, 0, 0);
          v10 = (char *)v9;
          if (v9)
            sub_100007780(v9);
        }
        else
        {
          v10 = 0;
        }
        free(v10);
      }

      v15 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:", v5));
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v11 = (id)qword_1000E0158;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v21[0] = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v18;
      else
        v13 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LODWORD(v22[0]) = 138412290;
        *(_QWORD *)((char *)v22 + 4) = v4;
        v14 = v21;
LABEL_30:
        v19 = (const char *)_os_log_send_and_compose_impl(v13, v14, 0, 0);
        v20 = (char *)v19;
        if (v19)
          sub_100007780(v19);
        goto LABEL_33;
      }
    }
    else
    {
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v11 = (id)qword_1000E0158;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        goto LABEL_34;
      v22[0] = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LOWORD(v21[0]) = 0;
        v14 = v22;
        goto LABEL_30;
      }
    }
    v20 = 0;
LABEL_33:
    free(v20);
LABEL_34:

  }
}

void sub_1000724D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000724EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (qword_1000E02D0)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:"));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
}

void sub_100072684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007269C(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  uint64_t v12;

  if (qword_1000E02D0)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        v5 = (const char *)_os_log_send_and_compose_impl(v4, &v12, 0, 0);
        v6 = (char *)v5;
        if (v5)
          sub_100007780(v5);
      }
      else
      {
        v6 = 0;
      }
      free(v6);
    }

    if (CFArrayGetCount((CFArrayRef)qword_1000E02D0) >= 1)
    {
      CFArrayRemoveAllValues((CFMutableArrayRef)qword_1000E02D0);
      if (qword_1000E02D0)
        CFRelease((CFTypeRef)qword_1000E02D0);
      qword_1000E02D0 = 0;
      if (qword_1000E0160 != -1)
        dispatch_once(&qword_1000E0160, &stru_1000D1B68);
      v7 = (id)qword_1000E0158;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        v12 = 0;
        v8 = sub_100007750(1);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
          v9 = v8;
        else
          v9 = v8 & 0xFFFFFFFE;
        if ((_DWORD)v9)
        {
          v10 = (const char *)_os_log_send_and_compose_impl(v9, &v12, 0, 0);
          v11 = (char *)v10;
          if (v10)
            sub_100007780(v10);
        }
        else
        {
          v11 = 0;
        }
        free(v11);
      }

    }
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }
}

void sub_100072B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v7 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_100072B40(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = (const char *)_os_log_send_and_compose_impl(v4, &v11, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v7 = (void *)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  v8 = objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "fetchUserBlockTaskList"));
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v8;

  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40))
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
}

void sub_100072DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072E0C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (qword_1000E02D8)
  {
    v2 = objc_claimAutoreleasedReturnValue(+[NSArray arrayWithArray:](NSArray, "arrayWithArray:"));
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = *(void **)(v3 + 40);
    *(_QWORD *)(v3 + 40) = v2;

  }
}

void sub_100072FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100072FCC(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  BOOL v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (const __CFDictionary *)sub_10001D248(*(_DWORD *)(a1 + 40));
  v3 = v2;
  if (v2)
    v4 = byte_1000DF220 == 0;
  else
    v4 = 1;
  if (!v4 && sub_10007CBE8(v2, 0, 0, 0) == 1)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v5 = (id)qword_1000E0158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD *)(a1 + 40);
        v12 = 67109120;
        v13 = v8;
        v9 = (const char *)_os_log_send_and_compose_impl(v7, &v11, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

  }
}

void sub_1000732A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000732BC(uint64_t a1)
{
  const __CFDictionary *v2;
  const __CFDictionary *v3;
  BOOL v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  const char *v9;
  char *v10;
  uint64_t v11;
  int v12;
  int v13;

  v2 = (const __CFDictionary *)sub_10001D248(*(_DWORD *)(a1 + 40));
  v3 = v2;
  if (v2)
    v4 = byte_1000DF220 == 0;
  else
    v4 = 1;
  if (!v4 && sub_10007E488(v2, 0, 0, 0x80000) == 1)
  {
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v5 = (id)qword_1000E0158;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v7 = v6;
      else
        v7 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v7)
      {
        v8 = *(_DWORD *)(a1 + 40);
        v12 = 67109120;
        v13 = v8;
        v9 = (const char *)_os_log_send_and_compose_impl(v7, &v11, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

  }
}

void sub_1000735FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v9 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t (**sub_100073620(_QWORD *a1))(id, _QWORD)
{
  uint64_t (**result)(id, _QWORD);
  uint64_t v3;
  uint64_t v4;
  void *v5;

  result = (uint64_t (**)(id, _QWORD))sub_10003297C();
  if ((_DWORD)result)
  {
    *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  }
  else
  {
    v3 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v4 = *(_QWORD *)(a1[6] + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

    result = (uint64_t (**)(id, _QWORD))a1[4];
    if (result)
      return (uint64_t (**)(id, _QWORD))result[2](result, *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40));
  }
  return result;
}

void sub_100073800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100073818(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  int v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;

  if (*(_DWORD *)(a1 + 40))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LOWORD(v21) = 0;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v2 = (id)qword_1000E0158;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v5;
      else
        v4 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LOWORD(v21) = 0;
LABEL_18:
        v6 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
        goto LABEL_21;
      }
LABEL_20:
      v7 = 0;
LABEL_21:
      free(v7);
    }
  }

  if (sub_100021FC4(*(_DWORD *)(a1 + 40)))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v8 = (id)qword_1000E0158;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v11 = *(_DWORD *)(a1 + 40);
        v21 = 67109120;
        v22 = v11;
        v12 = (const char *)_os_log_send_and_compose_impl(v10, &v20, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
      }
      else
      {
        v13 = 0;
      }
      free(v13);
    }

    dword_1000E02F0 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    sub_10001DE7C();
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v14 = (id)qword_1000E0158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v17 = *(_DWORD *)(a1 + 40);
        v21 = 67109120;
        v22 = v17;
        v18 = (const char *)_os_log_send_and_compose_impl(v16, &v20, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }

  }
}

void sub_100073EE4(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  __CFString *v8;
  void *v9;
  id v10;
  void *v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v21 = 0;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v20 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 40);
      v22 = 67109120;
      v23 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v8 = sub_1000053A8(*(unsigned int *)(a1 + 44), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52));
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  v10 = sub_10004CAE0(v9, &v21);
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  if (v11)
  {
    v12 = 0;
  }
  else
  {
    v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v21, 0));
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v13 = (id)qword_1000E0158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v16 = *(_DWORD *)(a1 + 40);
        v22 = 67109120;
        v23 = v16;
        v17 = (const char *)_os_log_send_and_compose_impl(v15, &v20, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, void *, void *))(v19 + 16))(v19, v11, v12);

}

void sub_100074498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000744C8(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  const char *v6;
  char *v7;
  id *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;

  v21 = 0;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v20 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_DWORD *)(a1 + 48);
      v22 = 67109120;
      v23 = v5;
      v6 = (const char *)_os_log_send_and_compose_impl(v4, &v20, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  v8 = sub_10004CAF4(&v21);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);
  if (!v9)
  {
    v10 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v21, 0));
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(void **)(v11 + 40);
    *(_QWORD *)(v11 + 40) = v10;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v13 = (id)qword_1000E0158;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v20 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v16 = *(_DWORD *)(a1 + 48);
        v22 = 67109120;
        v23 = v16;
        v17 = (const char *)_os_log_send_and_compose_impl(v15, &v20, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

  }
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
    (*(void (**)(uint64_t, void *, _QWORD))(v19 + 16))(v19, v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));

}

void sub_1000749EC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  const char *v8;
  char *v9;
  __CFString *v10;
  void *v11;
  id v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  void *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v26 = 0;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    v25 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = *(_DWORD *)(a1 + 56);
      v7 = *(_DWORD *)(a1 + 60);
      v27 = 138412802;
      v28 = v5;
      v29 = 1024;
      v30 = v6;
      v31 = 1024;
      v32 = v7;
      v8 = (const char *)_os_log_send_and_compose_impl(v4, &v25, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  v10 = sub_1000053A8(*(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = sub_10004CB04(*(void **)(a1 + 32), v11, &v26);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v14 = (id)qword_1000E0158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v25 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v27 = 138412290;
        v28 = v13;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v26, 0));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v14 = (id)qword_1000E0158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
    {
      v25 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        v16 = v20;
      else
        v16 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v27 = 138412290;
        v28 = v21;
LABEL_29:
        v22 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
        goto LABEL_32;
      }
LABEL_31:
      v23 = 0;
LABEL_32:
      free(v23);
    }
  }

  v24 = *(_QWORD *)(a1 + 40);
  if (v24)
    (*(void (**)(uint64_t, void *, _QWORD))(v24 + 16))(v24, v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

uint64_t sub_100074F60(uint64_t a1)
{
  sub_10004CB1C();
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100075374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000753AC(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  void *v5;
  int v6;
  int v7;
  const char *v8;
  char *v9;
  __CFString *v10;
  void *v11;
  id v12;
  void *v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  unsigned int v20;
  void *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  void *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  v26 = 2;
  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(void **)(a1 + 32);
      v6 = *(_DWORD *)(a1 + 56);
      v7 = *(_DWORD *)(a1 + 60);
      v27 = 138412802;
      v28 = v5;
      v29 = 1024;
      v30 = v6;
      v31 = 1024;
      v32 = v7;
      v8 = (const char *)_os_log_send_and_compose_impl(v4, &v25, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  v10 = sub_1000053A8(*(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 68));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = sub_10004D1F0(*(void **)(a1 + 32), v11, &v26);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);
  if (v13)
  {
    v26 = 0;
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v14 = (id)qword_1000E0158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v27 = 138412290;
        v28 = v13;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    v17 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v26, 0));
    v18 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v19 = *(void **)(v18 + 40);
    *(_QWORD *)(v18 + 40) = v17;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v14 = (id)qword_1000E0158;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v20;
      else
        v16 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        v27 = 138412290;
        v28 = v21;
LABEL_29:
        v22 = (const char *)_os_log_send_and_compose_impl(v16, &v25, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
        goto LABEL_32;
      }
LABEL_31:
      v23 = 0;
LABEL_32:
      free(v23);
    }
  }

  v24 = *(_QWORD *)(a1 + 40);
  if (v24)
    (*(void (**)(uint64_t, void *, _QWORD))(v24 + 16))(v24, v13, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

void sub_100075C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100075C74(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  char *v9;
  __CFString *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_DWORD *)(a1 + 64);
      v7 = *(_DWORD *)(a1 + 68);
      v26 = 138412802;
      v27 = v5;
      v28 = 1024;
      v29 = v6;
      v30 = 1024;
      v31 = v7;
      v8 = (const char *)_os_log_send_and_compose_impl(v4, &v25, 0, 0);
      v9 = (char *)v8;
      if (v8)
        sub_100007780(v8);
    }
    else
    {
      v9 = 0;
    }
    free(v9);
  }

  v10 = sub_1000053A8(*(unsigned int *)(a1 + 68), *(unsigned int *)(a1 + 72), *(unsigned int *)(a1 + 76));
  v11 = (void *)objc_claimAutoreleasedReturnValue(v10);
  v12 = sub_10004CB70(*(const __CFDictionary **)(a1 + 32), *(const __CFArray **)(a1 + 40), v11);
  if (v12)
  {
    v13 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, v12, 0));
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v16 = (id)qword_1000E0158;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
        v26 = 138412290;
        v27 = v19;
        goto LABEL_29;
      }
      goto LABEL_31;
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v16 = (id)qword_1000E0158;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v20;
      else
        v18 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        v21 = *(_QWORD *)(a1 + 40);
        v26 = 138412290;
        v27 = v21;
LABEL_29:
        v22 = (const char *)_os_log_send_and_compose_impl(v18, &v25, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
        goto LABEL_32;
      }
LABEL_31:
      v23 = 0;
LABEL_32:
      free(v23);
    }
  }

  v24 = *(_QWORD *)(a1 + 48);
  if (v24)
    (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40));

}

void sub_100076290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000762C0(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  const char *v7;
  char *v8;
  __CFString *v9;
  void *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _BYTE v26[12];
  __int16 v27;
  int v28;

  if (qword_1000E0160 != -1)
    dispatch_once(&qword_1000E0160, &stru_1000D1B68);
  v2 = (id)qword_1000E0158;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v25[0] = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      v5 = *(_QWORD *)(a1 + 32);
      v6 = *(_DWORD *)(a1 + 56);
      *(_DWORD *)v26 = 138412546;
      *(_QWORD *)&v26[4] = v5;
      v27 = 1024;
      v28 = v6;
      v7 = (const char *)_os_log_send_and_compose_impl(v4, v25, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = sub_1000053A8(*(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
  if (sub_10004F3B0(*(const __CFString **)(a1 + 32), v10))
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v11 = (id)qword_1000E0158;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v26 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LOWORD(v25[0]) = 0;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, v26, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }
  }
  else
  {
    if (qword_1000E0160 != -1)
      dispatch_once(&qword_1000E0160, &stru_1000D1B68);
    v16 = (id)qword_1000E0158;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v25[0] = 0;
      v17 = sub_100007750(1);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        v19 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)v26 = 138412290;
        *(_QWORD *)&v26[4] = v19;
        v20 = (const char *)_os_log_send_and_compose_impl(v18, v25, 0, 0);
        v21 = (char *)v20;
        if (v20)
          sub_100007780(v20);
      }
      else
      {
        v21 = 0;
      }
      free(v21);
    }

    v22 = objc_claimAutoreleasedReturnValue(+[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0));
    v23 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(NSObject **)(v23 + 40);
    *(_QWORD *)(v23 + 40) = v22;
  }

  v24 = *(_QWORD *)(a1 + 40);
  if (v24)
    (*(void (**)(uint64_t, _QWORD))(v24 + 16))(v24, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));

}

void sub_100076B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  _Block_object_dispose(&a31, 8);
  _Unwind_Resume(a1);
}

void sub_100076BAC(uint64_t a1)
{
  __CFString *v2;
  void *v3;
  void *v4;
  int v5;
  __int128 v6;
  CFStringRef v7;
  NSError *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _OWORD v13[2];

  v2 = sub_1000053A8(*(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(unsigned int *)(a1 + 64));
  v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
  v4 = *(void **)(a1 + 32);
  v5 = *(_DWORD *)(a1 + 100);
  v6 = *(_OWORD *)(a1 + 84);
  v13[0] = *(_OWORD *)(a1 + 68);
  v13[1] = v6;
  v7 = sub_10004FB80(v4, v13, v5, v3);
  if (!v7)
  {
    v8 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, *__error(), 0);
    v9 = objc_claimAutoreleasedReturnValue(v8);
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

  }
  v12 = *(_QWORD *)(a1 + 40);
  if (v12)
    (*(void (**)(uint64_t, CFStringRef, _QWORD))(v12 + 16))(v12, v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
  if (v7)
    CFRelease(v7);

}

id sub_100076C94()
{
  UMSyncXPCListener *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v0 = objc_opt_new(UMSyncXPCListener);
  v1 = (void *)qword_1000E0150;
  qword_1000E0150 = (uint64_t)v0;

  v2 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.mobile.usermanagerd.xpc"));
  v3 = (void *)qword_1000E0148;
  qword_1000E0148 = (uint64_t)v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1000E0148, "_xpcConnection"));
  __xpc_connection_set_logging(v4, 0);

  objc_msgSend((id)qword_1000E0148, "setDelegate:", qword_1000E0150);
  return objc_msgSend((id)qword_1000E0148, "resume");
}

void sub_100076D24(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E0158;
  qword_1000E0158 = (uint64_t)v1;

}

void sub_100076D58(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "user");
  v2 = (void *)qword_1000E0168;
  qword_1000E0168 = (uint64_t)v1;

}

void sub_100076D8C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "persona");
  v2 = (void *)qword_1000E0178;
  qword_1000E0178 = (uint64_t)v1;

}

id sub_100076DC0(id result, const char *a2)
{
  if (result)
    return objc_getProperty(result, a2, 24, 1);
  return result;
}

BOOL sub_1000784D0(_BOOL8 result)
{
  if (result)
    return *(_BYTE *)(result + 8) != 0;
  return result;
}

uint64_t sub_1000784E4(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 20);
  return result;
}

uint64_t sub_1000784F0(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 24);
  return result;
}

UMDPersonaManifestPersona *sub_100078748(uint64_t a1, void *a2)
{
  id v3;
  UMDPersonaManifestPersona *v4;
  unsigned int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  id v11;
  void *v12;
  unsigned int v13;
  id v14;
  void *v15;
  SEL v16;
  id v17;
  const char *v18;
  void *v19;
  id v20;
  void *v21;
  const char *v22;
  void *v23;
  id v24;
  void *v25;
  SEL v26;
  id v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  void *v34;
  id v35;
  const char *v36;
  void *v37;
  id v38;
  const char *v39;
  void *v40;
  id v41;
  void *v42;
  unsigned int v43;
  id v44;
  void *v45;
  id v46;
  UMDPersonaManifestPersona *v47;
  id v49;
  id v50;
  uint64_t v51;

  v3 = a2;
  objc_opt_self(a1);
  v4 = objc_alloc_init(UMDPersonaManifestPersona);
  v5 = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaType"), (id)0xFFFFFFFFLL);
  if (v4)
    v4->_type = v5;
  if (*__error() == 2)
  {
    if (qword_1000E0190 != -1)
      dispatch_once(&qword_1000E0190, &stru_1000D1BC8);
    v6 = (id)qword_1000E0188;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v51 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = (const char *)_os_log_send_and_compose_impl(v8, &v51, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

    v47 = 0;
  }
  else
  {
    v11 = sub_1000885D0(v3, (uint64_t)CFSTR("UserPersonaUniqueString"));
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    sub_10001C848((uint64_t)v4, v12);

    v13 = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaID"), 0);
    if (v4)
    {
      v4->_kernelID = v13;
      v14 = sub_1000074C8(v3, (uint64_t)CFSTR("UserPersonaNickName"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
      objc_setProperty_nonatomic_copy(v4, v16, v15, 40);
    }
    else
    {
      v49 = sub_1000074C8(v3, (uint64_t)CFSTR("UserPersonaNickName"));
      v15 = (void *)objc_claimAutoreleasedReturnValue(v49);
    }

    v17 = sub_100088438(v3, (uint64_t)CFSTR("UserPersonaBundleIDS"));
    v19 = (void *)objc_claimAutoreleasedReturnValue(v17);
    if (v4)
      objc_setProperty_nonatomic_copy(v4, v18, v19, 48);

    v20 = sub_100088438(v3, (uint64_t)CFSTR("UserPersonaObserverService"));
    v21 = (void *)objc_claimAutoreleasedReturnValue(v20);
    v23 = v21;
    if (v4)
    {
      objc_setProperty_nonatomic_copy(v4, v22, v21, 56);

      v4->_isDeleting = sub_1000881A4(v3, (uint64_t)CFSTR("UserPersonaOnDeletion"));
      v4->_isDisabled = sub_1000881A4(v3, (uint64_t)CFSTR("UserPersonaDisabled"));
      v24 = sub_1000074C8(v3, (uint64_t)CFSTR("UserPersonaDisplayName"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v24);
      objc_setProperty_nonatomic_copy(v4, v26, v25, 64);
    }
    else
    {

      sub_1000881A4(v3, (uint64_t)CFSTR("UserPersonaOnDeletion"));
      sub_1000881A4(v3, (uint64_t)CFSTR("UserPersonaDisabled"));
      v50 = sub_1000074C8(v3, (uint64_t)CFSTR("UserPersonaDisplayName"));
      v25 = (void *)objc_claimAutoreleasedReturnValue(v50);
    }

    v27 = sub_100088668(v3, (uint64_t)CFSTR("MKBUserSessionCreateTimeStamp"));
    v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
    sub_10001C898((uint64_t)v4, v28);

    v29 = sub_100088668(v3, (uint64_t)CFSTR("MKBUserSessionLoginTimeStamp"));
    v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
    sub_10001C8A8((uint64_t)v4, v30);

    v31 = sub_1000885D0(v3, (uint64_t)CFSTR("MKBUserSessionVolumeUUID"));
    v32 = (void *)objc_claimAutoreleasedReturnValue(v31);
    sub_10001C8B8((uint64_t)v4, v32);

    v33 = sub_1000885D0(v3, (uint64_t)CFSTR("MKBUserSessionUUID"));
    v34 = (void *)objc_claimAutoreleasedReturnValue(v33);
    sub_10001C8C8((uint64_t)v4, v34);

    v35 = sub_1000074C8(v3, (uint64_t)CFSTR("MKBUserSessionHomeDir"));
    v37 = (void *)objc_claimAutoreleasedReturnValue(v35);
    if (v4)
      objc_setProperty_nonatomic_copy(v4, v36, v37, 104);

    v38 = sub_1000074C8(v3, (uint64_t)CFSTR("MKBUserSessionVolumeDeviceNode"));
    v40 = (void *)objc_claimAutoreleasedReturnValue(v38);
    if (v4)
      objc_setProperty_nonatomic_copy(v4, v39, v40, 112);

    v41 = sub_1000885D0(v3, (uint64_t)CFSTR("UserPersonaUserODUUID"));
    v42 = (void *)objc_claimAutoreleasedReturnValue(v41);
    sub_10001C904((uint64_t)v4, v42);

    v43 = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaUserUID"), 0);
    if (v4)
    {
      v4->_uid = v43;
      v4->_gid = sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaUserGID"), 0);
    }
    else
    {
      sub_1000882AC(v3, (uint64_t)CFSTR("UserPersonaUserGID"), 0);
    }
    v44 = sub_1000886E4(v3, (uint64_t)CFSTR("UserPersonaVolumeKey"));
    v45 = (void *)objc_claimAutoreleasedReturnValue(v44);
    sub_10001C914((uint64_t)v4, v45);

    v46 = sub_1000883B4(v3, (uint64_t)CFSTR("UsePersonaGenerationID"), 0);
    if (v4)
      v4->_generation = (unint64_t)v46;
    v47 = v4;
  }

  return v47;
}

void sub_100078BE4(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 40);
}

void sub_100078BF8(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 48);
}

void sub_100078C0C(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 56);
}

uint64_t sub_100078C20(uint64_t result, char a2)
{
  if (result)
    *(_BYTE *)(result + 8) = a2;
  return result;
}

void sub_100078C2C(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 64);
}

void sub_100078C40(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 104);
}

void sub_100078C54(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 112);
}

uint64_t sub_100078C68(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t sub_100078C74(uint64_t result, int a2)
{
  if (result)
    *(_DWORD *)(result + 24) = a2;
  return result;
}

uint64_t sub_100078C80(uint64_t result, uint64_t a2)
{
  if (result)
    *(_QWORD *)(result + 136) = a2;
  return result;
}

id sub_100078C8C(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"));
    v3 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 12)));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v3, CFSTR("UserPersonaType"));

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 32), "UUIDString"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v4, CFSTR("UserPersonaUniqueString"));

    if (*(_DWORD *)(a1 + 16))
    {
      v5 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v5, CFSTR("UserPersonaID"));

    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 40), CFSTR("UserPersonaNickName"));
    v6 = *(id *)(a1 + 48);
    v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v6, "allObjects"));
    v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v7, "sortedArrayUsingSelector:", "compare:"));

    objc_msgSend(v2, "setObject:forKeyedSubscript:", v8, CFSTR("UserPersonaBundleIDS"));
    v9 = *(id *)(a1 + 56);
    v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v9, "allObjects"));
    v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v10, "sortedArrayUsingSelector:", "compare:"));

    objc_msgSend(v2, "setObject:forKeyedSubscript:", v11, CFSTR("UserPersonaObserverService"));
    if (*(_BYTE *)(a1 + 8))
    {
      v12 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v12, CFSTR("UserPersonaOnDeletion"));

    }
    if (*(_BYTE *)(a1 + 9))
    {
      v13 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v13, CFSTR("UserPersonaDisabled"));

    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 64), CFSTR("UserPersonaDisplayName"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 72), CFSTR("MKBUserSessionCreateTimeStamp"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 80), CFSTR("MKBUserSessionLoginTimeStamp"));
    v14 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 88), "UUIDString"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v14, CFSTR("MKBUserSessionVolumeUUID"));

    v15 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 96), "UUIDString"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v15, CFSTR("MKBUserSessionUUID"));

    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 104), CFSTR("MKBUserSessionHomeDir"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 112), CFSTR("MKBUserSessionVolumeDeviceNode"));
    v16 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(*(id *)(a1 + 120), "UUIDString"));
    objc_msgSend(v2, "setObject:forKeyedSubscript:", v16, CFSTR("UserPersonaUserODUUID"));

    if (*(_DWORD *)(a1 + 20))
    {
      v17 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v17, CFSTR("UserPersonaUserUID"));

    }
    if (*(_DWORD *)(a1 + 24))
    {
      v18 = (void *)objc_claimAutoreleasedReturnValue(+[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:"));
      objc_msgSend(v2, "setObject:forKeyedSubscript:", v18, CFSTR("UserPersonaUserGID"));

    }
    objc_msgSend(v2, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 128), CFSTR("UserPersonaVolumeKey"));
  }
  else
  {
    v2 = 0;
  }
  return v2;
}

void sub_10007A7C0(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "persona");
  v2 = (void *)qword_1000E0188;
  qword_1000E0188 = (uint64_t)v1;

}

BOOL sub_10007A7F4(char *a1, CFIndex a2)
{
  _BOOL8 v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t *v8;
  unsigned int v9;
  const char *v10;
  char *v11;
  uint64_t v13;
  char v14;
  _BYTE v15[12];
  __int16 v16;
  const char *v17;

  v14 = 1;
  v3 = sub_10007AA10("User", a1, a2, 2, &v14);
  if (v3)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v4 = (id)qword_1000E0198;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v5;
      else
        v6 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        v7 = "TRUE";
        if (!v14)
          v7 = "FALSE";
        *(_DWORD *)v15 = 136315394;
        *(_QWORD *)&v15[4] = a1;
        v16 = 2080;
        v17 = v7;
        v8 = &v13;
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v4 = (id)qword_1000E0198;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v15 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        v6 = v9;
      else
        v6 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v6)
      {
        LOWORD(v13) = 0;
        v8 = (uint64_t *)v15;
LABEL_20:
        v10 = (const char *)_os_log_send_and_compose_impl(v6, v8, 0, 0);
        v11 = (char *)v10;
        if (v10)
          sub_100007780(v10);
        goto LABEL_23;
      }
LABEL_22:
      v11 = 0;
LABEL_23:
      free(v11);
    }
  }

  return v3;
}

BOOL sub_10007AA10(const char *a1, char *a2, CFIndex a3, int a4, char *a5)
{
  __CFDictionary *v7;
  __CFDictionary *v8;
  const __CFString *Value;
  _BOOL8 v10;

  v7 = sub_10007AB38(a1, a4, 1, a5);
  if (!v7)
    return 0;
  v8 = v7;
  Value = (const __CFString *)CFDictionaryGetValue(v7, kUMUserSessionVolumeDeviceNodeKey);
  v10 = Value != 0;
  if (Value)
    CFStringGetCString(Value, a2, a3, 0x8000100u);
  CFRelease(v8);
  return v10;
}

__CFDictionary *sub_10007AA94(__CFDictionary *a1)
{
  __CFDictionary *result;
  const __CFDictionary *v3;
  const void *Value;
  const void *v5;

  result = sub_10007AB38("User", 2, 0, 0);
  if (result)
  {
    v3 = result;
    Value = CFDictionaryGetValue(result, kUMUserSessionVolumeDeviceNodeKey);
    v5 = CFDictionaryGetValue(v3, kUMUserSessionVolumeUUIDKey);
    CFDictionarySetValue(a1, kUMUserSessionVolumeDeviceNodeKey, Value);
    CFDictionarySetValue(a1, kUMUserSessionVolumeUUIDKey, v5);
    CFRelease(v3);
    return (__CFDictionary *)1;
  }
  return result;
}

__CFDictionary *sub_10007AB38(const char *a1, int a2, int a3, char *a4)
{
  uint64_t *v6;
  int BootDevice;
  int v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  NSObject *v12;
  unsigned int v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  const __CFDictionary *v17;
  unsigned int v18;
  const char *v19;
  char *v20;
  __CFDictionary *v21;
  int v22;
  io_registry_entry_t v23;
  io_registry_entry_t v24;
  io_object_t v25;
  BOOL v26;
  io_object_t v27;
  const __CFNumber *Value;
  char v29;
  const __CFString *v30;
  NSObject *v31;
  unsigned int v32;
  NSObject *v33;
  uint64_t v34;
  char *v35;
  int HasPrefix;
  uint64_t v37;
  NSObject *v38;
  unsigned int v39;
  NSObject *v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  const void *v48;
  const __CFBoolean *v49;
  const __CFBoolean *v50;
  CFTypeID v51;
  BOOL v52;
  NSObject *v53;
  unsigned int v54;
  uint64_t v55;
  const char *v56;
  char *v57;
  unsigned int v58;
  uint64_t v59;
  const char *v60;
  char *v61;
  char v62;
  unsigned int v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  const char *v71;
  char *v72;
  unsigned int v73;
  uint64_t v74;
  char *v75;
  int v76;
  int v77;
  int v78;
  unsigned __int16 valuePtr;
  io_registry_entry_t parent;
  CFMutableDictionaryRef theDict;
  CFMutableDictionaryRef v84;
  CFMutableDictionaryRef properties;
  io_iterator_t existing[2];
  CFStringRef prefix;
  _BYTE v88[12];
  __int16 v89;
  const __CFString *v90;
  _QWORD v91[2];
  char name[136];

  *(_QWORD *)existing = 0;
  prefix = 0;
  v84 = 0;
  properties = 0;
  theDict = 0;
  parent = 0;
  valuePtr = 0;
  memset(name, 0, 128);
  v6 = &qword_1000E0000;
  if (a3)
  {
    BootDevice = APFSContainerGetBootDevice(&prefix);
    if (BootDevice)
    {
      v8 = BootDevice;
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v9 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_142;
      *(_QWORD *)v88 = 0;
      v10 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v11 = v10;
      else
        v11 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v11)
      {
        LODWORD(v91[0]) = 67109120;
        HIDWORD(v91[0]) = v8;
        goto LABEL_32;
      }
      goto LABEL_140;
    }
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v12 = (id)qword_1000E0198;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v91[0] = 0;
      v13 = sub_100007750(1);
      v14 = v12;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v15 = v13;
      else
        v15 = v13 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        *(_DWORD *)v88 = 138412290;
        *(_QWORD *)&v88[4] = prefix;
        v16 = (char *)_os_log_send_and_compose_impl(v15, v91, 0, 0);

        if (v16)
          sub_100007780(v16);
      }
      else
      {

        v16 = 0;
      }
      free(v16);
    }

  }
  v17 = IOServiceMatching("AppleAPFSContainer");
  if (IOServiceGetMatchingServices(kIOMainPortDefault, v17, &existing[1]))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v9 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      goto LABEL_142;
    *(_QWORD *)v88 = 0;
    v18 = sub_100007750(1);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      v11 = v18;
    else
      v11 = v18 & 0xFFFFFFFE;
    if ((_DWORD)v11)
    {
      LOWORD(v91[0]) = 0;
LABEL_32:
      v19 = (const char *)_os_log_send_and_compose_impl(v11, v88, 0, 0);
      v20 = (char *)v19;
      if (v19)
        sub_100007780(v19);
      goto LABEL_141;
    }
LABEL_140:
    v20 = 0;
LABEL_141:
    free(v20);
LABEL_142:
    v27 = 0;
    v24 = 0;
    v21 = 0;
    goto LABEL_143;
  }
  v76 = a3;
  v21 = 0;
  v22 = 0;
  v77 = a2;
  do
  {
    v23 = IOIteratorNext(existing[1]);
    if (!v23)
      goto LABEL_136;
    v24 = v23;
    parent = 0;
    existing[0] = 0;
    if (IORegistryEntryGetParentEntry(v23, "IOService", &parent)
      || IORegistryEntryGetChildIterator(v24, "IOService", existing))
    {
      if (v6[52] != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v9 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_192;
      *(_QWORD *)v88 = 0;
      v68 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v69 = v68;
      else
        v69 = v68 & 0xFFFFFFFE;
      if ((_DWORD)v69)
      {
        LOWORD(v91[0]) = 0;
        goto LABEL_186;
      }
LABEL_190:
      v72 = 0;
LABEL_191:
      free(v72);
LABEL_192:
      v27 = 0;
      goto LABEL_143;
    }
    v84 = 0;
    properties = 0;
    if (IORegistryEntryCreateCFProperties(parent, &properties, kCFAllocatorDefault, 0)
      || IORegistryEntryCreateCFProperties(v24, &v84, kCFAllocatorDefault, 0))
    {
      if (v6[52] != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v9 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        goto LABEL_192;
      *(_QWORD *)v88 = 0;
      v70 = sub_100007750(1);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v69 = v70;
      else
        v69 = v70 & 0xFFFFFFFE;
      if ((_DWORD)v69)
      {
        LOWORD(v91[0]) = 0;
LABEL_186:
        v71 = (const char *)_os_log_send_and_compose_impl(v69, v88, 0, 0);
        v72 = (char *)v71;
        if (v71)
          sub_100007780(v71);
        goto LABEL_191;
      }
      goto LABEL_190;
    }
    if (v84)
    {
      CFRelease(v84);
      v84 = 0;
    }
    if (properties)
    {
      CFRelease(properties);
      properties = 0;
    }
    v78 = v22;
    if (parent)
    {
      IOObjectRelease(parent);
      parent = 0;
    }
    v25 = IOIteratorNext(existing[0]);
    v26 = v25 == 0;
    if (v25)
    {
      v27 = v25;
      while (!IOObjectConformsTo(v27, "AppleAPFSVolume"))
      {
        v29 = 0;
LABEL_126:
        IOObjectRelease(v27);
        if ((v29 & 1) == 0)
        {
          v27 = IOIteratorNext(existing[0]);
          v26 = v27 == 0;
          if (v27)
            continue;
        }
        goto LABEL_132;
      }
      if (IORegistryEntryCreateCFProperties(v27, &theDict, kCFAllocatorDefault, 0))
      {
        if (v6[52] != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v9 = (id)qword_1000E0198;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v88 = 0;
          v64 = sub_100007750(1);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            v65 = v64;
          else
            v65 = v64 & 0xFFFFFFFE;
          if ((_DWORD)v65)
          {
            LOWORD(v91[0]) = 0;
            v66 = (const char *)_os_log_send_and_compose_impl(v65, v88, 0, 0);
            v67 = (char *)v66;
            if (v66)
              sub_100007780(v66);
          }
          else
          {
            v67 = 0;
          }
          free(v67);
        }
LABEL_143:

        goto LABEL_144;
      }
      if (a2
        && (Value = (const __CFNumber *)CFDictionaryGetValue(theDict, CFSTR("RoleValue"))) != 0
        && (CFNumberGetValue(Value, kCFNumberSInt16Type, &valuePtr), valuePtr != a2)
        || (memset(name, 0, 128), IORegistryEntryGetName(v27, name), strncmp(a1, name, 0x80uLL)))
      {
        v29 = 0;
        goto LABEL_124;
      }
      v30 = (const __CFString *)CFDictionaryGetValue(theDict, CFSTR("BSD Name"));
      if (v30 && v76 && prefix)
      {
        if (v6[52] != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v31 = (id)qword_1000E0198;
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          v91[0] = 0;
          v32 = sub_100007750(1);
          v33 = v31;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            v34 = v32;
          else
            v34 = v32 & 0xFFFFFFFE;
          if ((_DWORD)v34)
          {
            *(_DWORD *)v88 = 138412546;
            *(_QWORD *)&v88[4] = prefix;
            v89 = 2112;
            v90 = v30;
            v35 = (char *)_os_log_send_and_compose_impl(v34, v91, 0, 0);

            if (v35)
              sub_100007780(v35);
          }
          else
          {

            v35 = 0;
          }
          v6 = &qword_1000E0000;
          free(v35);
        }

        HasPrefix = CFStringHasPrefix(v30, prefix);
        v37 = v6[52];
        if (HasPrefix)
        {
          if (v37 != -1)
            dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
          v38 = (id)qword_1000E0198;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
          {
            v91[0] = 0;
            v39 = sub_100007750(1);
            v40 = v38;
            if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              v41 = v39;
            else
              v41 = v39 & 0xFFFFFFFE;
            if ((_DWORD)v41)
            {
              *(_DWORD *)v88 = 138412290;
              *(_QWORD *)&v88[4] = v30;
              v42 = (char *)_os_log_send_and_compose_impl(v41, v91, 0, 0);

              if (v42)
                sub_100007780(v42);
            }
            else
            {

              v42 = 0;
            }
            free(v42);
            v6 = &qword_1000E0000;
          }

          goto LABEL_92;
        }
        if (v37 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v43 = (id)qword_1000E0198;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        {
          v91[0] = 0;
          v44 = sub_100007750(1);
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            v45 = v44;
          else
            v45 = v44 & 0xFFFFFFFE;
          if ((_DWORD)v45)
          {
            *(_DWORD *)v88 = 138412290;
            *(_QWORD *)&v88[4] = v30;
            v46 = (const char *)_os_log_send_and_compose_impl(v45, v91, 0, 0);
            v47 = (char *)v46;
            if (v46)
              sub_100007780(v46);
          }
          else
          {
            v47 = 0;
          }
          free(v47);
          v6 = &qword_1000E0000;
        }

        v29 = 0;
      }
      else
      {
LABEL_92:
        v21 = sub_100086BFC();
        CFDictionarySetValue(v21, kUMUserSessionVolumeDeviceNodeKey, v30);
        v48 = CFDictionaryGetValue(theDict, CFSTR("UUID"));
        CFDictionarySetValue(v21, kUMUserSessionVolumeUUIDKey, v48);
        if (a4)
        {
          v49 = (const __CFBoolean *)CFDictionaryGetValue(theDict, CFSTR("Encrypted"));
          if (!v49
            || (v50 = v49, v51 = CFGetTypeID(v49), v52 = v51 == CFBooleanGetTypeID(), v6 = &qword_1000E0000, v52)
            && v50 == kCFBooleanFalse)
          {
            if (v6[52] != -1)
              dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
            v53 = (id)qword_1000E0198;
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v88 = 0;
              v54 = sub_100007750(1);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                v55 = v54;
              else
                v55 = v54 & 0xFFFFFFFE;
              if ((_DWORD)v55)
              {
                LOWORD(v91[0]) = 0;
                v56 = (const char *)_os_log_send_and_compose_impl(v55, v88, 0, 0);
                v57 = (char *)v56;
                if (v56)
                  sub_100007780(v56);
              }
              else
              {
                v57 = 0;
              }
              free(v57);
            }
            v62 = 0;
          }
          else
          {
            if (qword_1000E01A0 != -1)
              dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
            v53 = (id)qword_1000E0198;
            if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
            {
              *(_QWORD *)v88 = 0;
              v58 = sub_100007750(1);
              if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
                v59 = v58;
              else
                v59 = v58 & 0xFFFFFFFE;
              if ((_DWORD)v59)
              {
                LOWORD(v91[0]) = 0;
                v60 = (const char *)_os_log_send_and_compose_impl(v59, v88, 0, 0);
                v61 = (char *)v60;
                if (v60)
                  sub_100007780(v60);
              }
              else
              {
                v61 = 0;
              }
              free(v61);
            }
            v62 = 1;
          }

          *a4 = v62;
        }
        v29 = 1;
      }
      a2 = v77;
LABEL_124:
      if (theDict)
      {
        CFRelease(theDict);
        theDict = 0;
      }
      goto LABEL_126;
    }
LABEL_132:
    if (existing[0])
    {
      IOObjectRelease(existing[0]);
      existing[0] = 0;
    }
    IOObjectRelease(v24);
    v22 = v78 + 1;
  }
  while (v26);
  v22 = 1;
LABEL_136:
  if (existing[1])
  {
    IOObjectRelease(existing[1]);
    existing[1] = 0;
  }
  if (!v22)
  {
    if (v6[52] != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v9 = (id)qword_1000E0198;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v88 = 0;
      v73 = sub_100007750(1);
      v9 = v9;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        v74 = v73;
      else
        v74 = v73 & 0xFFFFFFFE;
      if ((_DWORD)v74)
      {
        LOWORD(v91[0]) = 0;
        v75 = (char *)_os_log_send_and_compose_impl(v74, v88, 0, 0);

        if (v75)
          sub_100007780(v75);
      }
      else
      {

        v75 = 0;
      }
      free(v75);
    }
    v27 = 0;
    v24 = 0;
    goto LABEL_143;
  }
  v27 = 0;
  v24 = 0;
LABEL_144:
  if (prefix)
  {
    CFRelease(prefix);
    prefix = 0;
  }
  if (v84)
  {
    CFRelease(v84);
    v84 = 0;
  }
  if (properties)
  {
    CFRelease(properties);
    properties = 0;
  }
  if (parent)
  {
    IOObjectRelease(parent);
    parent = 0;
  }
  if (existing[0])
  {
    IOObjectRelease(existing[0]);
    existing[0] = 0;
  }
  if (v24)
    IOObjectRelease(v24);
  if (existing[1])
  {
    IOObjectRelease(existing[1]);
    existing[1] = 0;
  }
  if (v27)
    IOObjectRelease(v27);
  return v21;
}

uint64_t sub_10007B938(__CFDictionary *a1, uint64_t a2, const __CFString *a3, _DWORD *a4, char a5, int a6)
{
  int BootDevice;
  int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  __CFDictionary *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t result;
  NSObject *v26;
  unsigned int v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  int v36;
  char *v37;
  uint64_t v38;
  __CFDictionary *v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  unsigned int v44;
  uint64_t v45;
  const char *v46;
  char *v47;
  NSObject *v48;
  unsigned int v49;
  uint64_t v50;
  const char *v51;
  char *v52;
  __CFDictionary *v53;
  const __CFDictionary *v54;
  const void *Value;
  const void *v56;
  NSObject *v57;
  unsigned int v58;
  uint64_t v59;
  const char *v60;
  char *v61;
  NSObject *v62;
  unsigned int v63;
  uint64_t v64;
  const char *v65;
  char *v66;
  NSObject *v67;
  unsigned int v68;
  uint64_t v69;
  const char *v70;
  char *v71;
  NSObject *v72;
  unsigned int v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  const __CFString *v77;
  CFStringRef theString;
  _BYTE __str[252];
  char v80[64];
  char buffer[256];
  char *__argv[2];
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  _BYTE v90[12];
  __int16 v91;
  _BYTE *v92;
  uint64_t v93;

  v88 = 0u;
  v89 = 0u;
  v86 = 0u;
  v87 = 0u;
  v84 = 0u;
  v85 = 0u;
  *(_OWORD *)__argv = 0u;
  v83 = 0u;
  theString = 0;
  BootDevice = APFSContainerGetBootDevice(&theString);
  if (BootDevice)
  {
    v13 = BootDevice;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v14 = (id)qword_1000E0198;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)buffer = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        *(_DWORD *)__str = 67109120;
        *(_DWORD *)&__str[4] = v13;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, buffer, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    if (a4)
    {
      result = 0;
      *a4 = v13;
      return result;
    }
    return 0;
  }
  v77 = a3;
  strcpy(v80, "/dev/");
  CFStringGetCString(theString, &v80[5], 59, 0x8000100u);
  CFRelease(theString);
  v19 = a1;
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v20 = (id)qword_1000E0198;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)__str = 0;
    v21 = sub_100007750(1);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      v22 = v21;
    else
      v22 = v21 & 0xFFFFFFFE;
    if ((_DWORD)v22)
    {
      *(_DWORD *)buffer = 138412290;
      *(_QWORD *)&buffer[4] = v77;
      v23 = (const char *)_os_log_send_and_compose_impl(v22, __str, 0, 0);
      v24 = (char *)v23;
      if (v23)
        sub_100007780(v23);
    }
    else
    {
      v24 = 0;
    }
    free(v24);
  }

  CFStringGetCString(v77, buffer, 256, 0x8000100u);
  if ((a5 & 1) != 0)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v26 = (id)qword_1000E0198;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v90 = 0;
      v27 = sub_100007750(1);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        v28 = v27;
      else
        v28 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v28)
      {
        *(_DWORD *)__str = 136315138;
        *(_QWORD *)&__str[4] = buffer;
        v29 = (const char *)_os_log_send_and_compose_impl(v28, v90, 0, 0);
        v30 = (char *)v29;
        if (v29)
          sub_100007780(v29);
      }
      else
      {
        v30 = 0;
      }
      free(v30);
    }

    __argv[0] = "/sbin/newfs_apfs";
    __argv[1] = "-R";
    *(_QWORD *)&v83 = "e";
    *((_QWORD *)&v83 + 1) = "-v";
    v36 = 5;
    v37 = buffer;
    v38 = 4;
    v39 = v19;
    goto LABEL_55;
  }
  snprintf(__str, 0x100uLL, "%zu", a2);
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v31 = (id)qword_1000E0198;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v93 = 0;
    v32 = sub_100007750(1);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      v33 = v32;
    else
      v33 = v32 & 0xFFFFFFFE;
    if ((_DWORD)v33)
    {
      *(_DWORD *)v90 = 136315394;
      *(_QWORD *)&v90[4] = buffer;
      v91 = 2080;
      v92 = __str;
      v34 = (const char *)_os_log_send_and_compose_impl(v33, &v93, 0, 0);
      v35 = (char *)v34;
      if (v34)
        sub_100007780(v34);
    }
    else
    {
      v35 = 0;
    }
    free(v35);
  }

  __argv[0] = "/sbin/newfs_apfs";
  if (a6)
  {
    __argv[1] = "-R";
    *(_QWORD *)&v83 = "u";
    v40 = 3;
  }
  else
  {
    v40 = 1;
  }
  v39 = v19;
  __argv[v40] = "-v";
  v36 = v40 + 2;
  __argv[v40 + 1] = buffer;
  if (a2)
  {
    v38 = (v40 + 3);
    __argv[v36] = "-s";
    v36 = v40 | 4;
    v37 = __str;
LABEL_55:
    __argv[v38] = v37;
  }
  __argv[v36] = "-P";
  __argv[v36 + 1] = "-w";
  __argv[v36 + 2] = "-A";
  __argv[v36 + 3] = v80;
  __argv[v36 + 4] = 0;
  v41 = sub_1000208A4((const char **)__argv);
  if (v41)
  {
    v42 = v41;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v43 = (id)qword_1000E0198;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v90 = 0;
      v44 = sub_100007750(1);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
        v45 = v44;
      else
        v45 = v44 & 0xFFFFFFFE;
      if ((_DWORD)v45)
      {
        LODWORD(v93) = 67109120;
        HIDWORD(v93) = v42;
        v46 = (const char *)_os_log_send_and_compose_impl(v45, v90, 0, 0);
        v47 = (char *)v46;
        if (v46)
          sub_100007780(v46);
      }
      else
      {
        v47 = 0;
      }
      free(v47);
    }

    if (a4)
    {
      result = 0;
      *a4 = v42;
      return result;
    }
    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v48 = (id)qword_1000E0198;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v90 = 0;
    v49 = sub_100007750(1);
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      v50 = v49;
    else
      v50 = v49 & 0xFFFFFFFE;
    if ((_DWORD)v50)
    {
      LOWORD(v93) = 0;
      v51 = (const char *)_os_log_send_and_compose_impl(v50, v90, 0, 0);
      v52 = (char *)v51;
      if (v51)
        sub_100007780(v51);
    }
    else
    {
      v52 = 0;
    }
    free(v52);
  }

  v53 = sub_10007AB38(buffer, 0, 0, 0);
  if (!v53)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v62 = (id)qword_1000E0198;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      v93 = 0;
      v63 = sub_100007750(1);
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
        v64 = v63;
      else
        v64 = v63 & 0xFFFFFFFE;
      if ((_DWORD)v64)
      {
        *(_DWORD *)v90 = 138412290;
        *(_QWORD *)&v90[4] = v77;
        v65 = (const char *)_os_log_send_and_compose_impl(v64, &v93, 0, 0);
        v66 = (char *)v65;
        if (v65)
          sub_100007780(v65);
      }
      else
      {
        v66 = 0;
      }
      free(v66);
    }

    return 0;
  }
  v54 = v53;
  Value = CFDictionaryGetValue(v53, kUMUserSessionVolumeDeviceNodeKey);
  v56 = CFDictionaryGetValue(v54, kUMUserSessionVolumeUUIDKey);
  CFDictionarySetValue(v39, kUMUserSessionVolumeDeviceNodeKey, Value);
  CFDictionarySetValue(v39, kUMUserSessionVolumeUUIDKey, v56);
  CFDictionarySetValue(v39, kUMUserSessionNeedsMountKey, kCFBooleanTrue);
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v57 = (id)qword_1000E0198;
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    v93 = 0;
    v58 = sub_100007750(1);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      v59 = v58;
    else
      v59 = v58 & 0xFFFFFFFE;
    if ((_DWORD)v59)
    {
      *(_DWORD *)v90 = 138412546;
      *(_QWORD *)&v90[4] = Value;
      v91 = 2112;
      v92 = v56;
      v60 = (const char *)_os_log_send_and_compose_impl(v59, &v93, 0, 0);
      v61 = (char *)v60;
      if (v60)
        sub_100007780(v60);
    }
    else
    {
      v61 = 0;
    }
    free(v61);
  }

  CFRelease(v54);
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v67 = (id)qword_1000E0198;
  if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
  {
    v93 = 0;
    v68 = sub_100007750(1);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_DEFAULT))
      v69 = v68;
    else
      v69 = v68 & 0xFFFFFFFE;
    if ((_DWORD)v69)
    {
      *(_DWORD *)v90 = 138412290;
      *(_QWORD *)&v90[4] = v77;
      v70 = (const char *)_os_log_send_and_compose_impl(v69, &v93, 0, 0);
      v71 = (char *)v70;
      if (v70)
        sub_100007780(v70);
    }
    else
    {
      v71 = 0;
    }
    free(v71);
  }

  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v72 = (id)qword_1000E0198;
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    v93 = 0;
    v73 = sub_100007750(1);
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
      v74 = v73;
    else
      v74 = v73 & 0xFFFFFFFE;
    if ((_DWORD)v74)
    {
      *(_DWORD *)v90 = 138412290;
      *(_QWORD *)&v90[4] = v39;
      v75 = (const char *)_os_log_send_and_compose_impl(v74, &v93, 0, 0);
      v76 = (char *)v75;
      if (v75)
        sub_100007780(v75);
    }
    else
    {
      v76 = 0;
    }
    free(v76);
  }

  return 1;
}

uint64_t sub_10007C4A8(const __CFDictionary *a1, _DWORD *a2)
{
  int v4;
  int v5;
  uint64_t result;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  const char *v10;
  char *v11;
  int v12;
  int v13;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  _BYTE v24[12];
  uint64_t v25;
  _OWORD v26[16];

  memset(v26, 0, sizeof(v26));
  sub_100086788(a1, kUMUserSessionVolumeDeviceNodeKey, (char *)v26, 256);
  v4 = sub_10007C80C(a1, (char *)v26);
  if (v4)
  {
    if (a2)
    {
      v5 = v4;
      result = 0;
      *a2 = v5;
      return result;
    }
    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v7 = (id)qword_1000E0198;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v25 = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      *(_DWORD *)v24 = 136315138;
      *(_QWORD *)&v24[4] = v26;
      v10 = (const char *)_os_log_send_and_compose_impl(v9, &v25, 0, 0);
      v11 = (char *)v10;
      if (v10)
        sub_100007780(v10);
    }
    else
    {
      v11 = 0;
    }
    free(v11);
  }

  v12 = APFSVolumeDelete(v26);
  if (v12)
  {
    v13 = v12;
    if (a2)
      *a2 = v12;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v14 = (id)qword_1000E0198;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v24 = 0;
      v15 = sub_100007750(1);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        v16 = v15;
      else
        v16 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v16)
      {
        LODWORD(v25) = 67109120;
        HIDWORD(v25) = v13;
        v17 = (const char *)_os_log_send_and_compose_impl(v16, v24, 0, 0);
        v18 = (char *)v17;
        if (v17)
          sub_100007780(v17);
      }
      else
      {
        v18 = 0;
      }
      free(v18);
    }

    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v19 = (id)qword_1000E0198;
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v24 = 0;
    v20 = sub_100007750(1);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFE;
    if ((_DWORD)v21)
    {
      LOWORD(v25) = 0;
      v22 = (const char *)_os_log_send_and_compose_impl(v21, v24, 0, 0);
      v23 = (char *)v22;
      if (v22)
        sub_100007780(v22);
    }
    else
    {
      v23 = 0;
    }
    free(v23);
  }

  return 1;
}

uint64_t sub_10007C80C(__CFDictionary *a1, char *a2)
{
  uint64_t BootDevice;
  uint64_t v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  char *v16;
  CFStringRef v17;
  NSObject *v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  CFStringRef theString;
  _BYTE v26[12];
  __int16 v27;
  char *v28;
  char buffer[72];

  theString = 0;
  if (a2)
  {
    BootDevice = APFSContainerGetBootDevice(&theString);
    if ((_DWORD)BootDevice)
    {
      v5 = BootDevice;
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v6 = (id)qword_1000E0198;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buffer = 0;
        v7 = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v8 = v7;
        else
          v8 = v7 & 0xFFFFFFFE;
        if ((_DWORD)v8)
        {
          *(_DWORD *)v26 = 67109120;
          *(_DWORD *)&v26[4] = v5;
          v9 = (const char *)_os_log_send_and_compose_impl(v8, buffer, 0, 0);
          v10 = (char *)v9;
          if (v9)
            sub_100007780(v9);
        }
        else
        {
          v10 = 0;
        }
        free(v10);
      }

      return v5;
    }
    CFStringGetCString(theString, buffer, 64, 0x8000100u);
    CFRelease(theString);
    if (strstr(a2, buffer))
      return 0;
    v16 = strrchr(a2, 115);
    if (v16)
    {
      __strcat_chk(buffer, v16, 64);
      strlcpy(a2, buffer, 0x100uLL);
      v17 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
      CFDictionarySetValue(a1, kUMUserSessionVolumeDeviceNodeKey, v17);
      CFRelease(v17);
      return 0;
    }
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v19 = (id)qword_1000E0198;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v24 = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        *(_DWORD *)v26 = 136315394;
        *(_QWORD *)&v26[4] = a2;
        v27 = 2080;
        v28 = buffer;
        v22 = (const char *)_os_log_send_and_compose_impl(v21, &v24, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
      }
      else
      {
        v23 = 0;
      }
      free(v23);
    }

    return 19;
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v11 = (id)qword_1000E0198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v26 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        *(_DWORD *)buffer = 136315138;
        *(_QWORD *)&buffer[4] = "updateAPFSDevWithCurrentBootContainer";
        v14 = (const char *)_os_log_send_and_compose_impl(v13, v26, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    return 22;
  }
}

uint64_t sub_10007CBE8(const __CFDictionary *a1, const __CFString *a2, _DWORD *a3, int a4)
{
  CFTypeID v8;
  int v9;
  uint64_t v10;
  dev_t v11;
  gid_t v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  int v20;
  NSObject *v21;
  unsigned int v22;
  NSObject *v23;
  uint64_t v24;
  char *v25;
  NSObject *v26;
  unsigned int v27;
  NSObject *v28;
  uint64_t v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  NSObject *v33;
  char *v34;
  int v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  NSObject *v41;
  unsigned int v42;
  NSObject *v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  unsigned int v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  NSObject *v51;
  unsigned int v52;
  NSObject *v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  uint64_t v57;
  NSObject *v58;
  char *v59;
  int v60;
  int v61;
  int v62;
  NSObject *v63;
  unsigned int v64;
  uint64_t v65;
  const char *v66;
  char *v67;
  NSObject *v68;
  unsigned int v69;
  NSObject *v70;
  uint64_t v71;
  char *v72;
  NSObject *v73;
  unsigned int v74;
  NSObject *v75;
  uint64_t v76;
  char *v77;
  NSObject *v78;
  unsigned int v79;
  uint64_t v80;
  _BYTE *v81;
  unsigned int v82;
  char *v83;
  int v84;
  mode_t v85;
  NSObject *v86;
  unsigned int v87;
  NSObject *v88;
  uint64_t v89;
  _BYTE *v90;
  unsigned int v91;
  char *v92;
  const __CFString *v93;
  _BYTE v95[24];
  __int16 v96;
  char *v97;
  _QWORD v98[2];
  stat v99;
  char *__argv[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  char buffer[1024];
  _OWORD v109[16];

  memset(v109, 0, sizeof(v109));
  bzero(buffer, 0x400uLL);
  if (a2 && (v8 = CFGetTypeID(a2), v8 == CFStringGetTypeID()))
    CFStringGetCString(a2, buffer, 1024, 0x8000100u);
  else
    sub_100086788(a1, kUMUserSessionHomeDirKey, buffer, 1024);
  sub_100086788(a1, kUMUserSessionVolumeDeviceNodeKey, (char *)v109, 256);
  v9 = sub_10007C80C(a1, (char *)v109);
  if (v9)
  {
    v10 = 0;
    if (a3)
      *a3 = v9;
    return v10;
  }
  if (a4)
  {
    if (byte_1000E0312)
      v11 = sub_100020898();
    else
      v11 = 501;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v13 = (id)qword_1000E0198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      __argv[0] = 0;
      v17 = sub_100007750(1);
      v13 = v13;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v18 = v17;
      else
        v18 = v17 & 0xFFFFFFFE;
      if ((_DWORD)v18)
      {
        v99.st_dev = 136315650;
        *(_QWORD *)&v99.st_mode = buffer;
        WORD2(v99.st_ino) = 2080;
        *(__darwin_ino64_t *)((char *)&v99.st_ino + 6) = (__darwin_ino64_t)v109;
        HIWORD(v99.st_gid) = 1024;
        v99.st_rdev = v11;
        v19 = (char *)_os_log_send_and_compose_impl(v18, __argv, 0, 0);

        if (v19)
          sub_100007780(v19);
      }
      else
      {

        v19 = 0;
      }
      free(v19);
    }
    v12 = v11;
  }
  else
  {
    v11 = sub_100004318(a1, kUMUserSessionIDKey);
    v12 = sub_100004318(a1, kUMUserSessionGroupIDKey);
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v13 = (id)qword_1000E0198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v99.st_dev = 0;
      v14 = sub_100007750(1);
      v13 = v13;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LODWORD(__argv[0]) = 67109120;
        HIDWORD(__argv[0]) = v11;
        v16 = (char *)_os_log_send_and_compose_impl(v15, &v99, 0, 0);

        if (v16)
          sub_100007780(v16);
      }
      else
      {

        v16 = 0;
      }
      free(v16);
    }
  }

  v106 = 0u;
  v107 = 0u;
  v104 = 0u;
  v105 = 0u;
  v102 = 0u;
  v103 = 0u;
  *(_OWORD *)__argv = 0u;
  v101 = 0u;
  memset(&v99, 0, sizeof(v99));
  if (stat(buffer, &v99))
  {
    v20 = *__error();
    if (v20 != 2)
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v31 = (id)qword_1000E0198;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        v98[0] = 0;
        LODWORD(v32) = sub_100007750(1);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          v32 = v32;
        else
          v32 = v32 & 0xFFFFFFFE;
        if ((_DWORD)v32)
        {
          v33 = v31;
          *(_DWORD *)v95 = 136315394;
          *(_QWORD *)&v95[4] = buffer;
          *(_WORD *)&v95[12] = 2080;
          *(_QWORD *)&v95[14] = strerror(v20);
          v34 = (char *)_os_log_send_and_compose_impl(v32, v98, 0, 0);

          if (v34)
            sub_100007780(v34);
        }
        else
        {
          v34 = 0;
        }
        free(v34);
      }

      return 0;
    }
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v21 = (id)qword_1000E0198;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v98[0] = 0;
      v22 = sub_100007750(1);
      v23 = v21;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
        v24 = v22;
      else
        v24 = v22 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        *(_DWORD *)v95 = 136315138;
        *(_QWORD *)&v95[4] = buffer;
        v25 = (char *)_os_log_send_and_compose_impl(v24, v98, 0, 0);

        if (v25)
          sub_100007780(v25);
      }
      else
      {

        v25 = 0;
      }
      free(v25);
    }

    if (mkdir(buffer, 0x1C0u) < 0)
    {
      v35 = *__error();
      if (v35 != 17)
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v56 = (id)qword_1000E0198;
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          v98[0] = 0;
          LODWORD(v57) = sub_100007750(1);
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            v57 = v57;
          else
            v57 = v57 & 0xFFFFFFFE;
          if ((_DWORD)v57)
          {
            v58 = v56;
            *(_DWORD *)v95 = 136315394;
            *(_QWORD *)&v95[4] = buffer;
            *(_WORD *)&v95[12] = 2080;
            *(_QWORD *)&v95[14] = strerror(v35);
            v59 = (char *)_os_log_send_and_compose_impl(v57, v98, 0, 0);

            if (v59)
              sub_100007780(v59);
          }
          else
          {
            v59 = 0;
          }
          free(v59);
        }

        if (!a3)
          return 0;
        goto LABEL_234;
      }
    }
    if (chown(buffer, v11, v12))
    {
      v36 = *__error();
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v37 = (id)qword_1000E0198;
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        v98[0] = 0;
        LODWORD(v38) = sub_100007750(1);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          v38 = v38;
        else
          v38 = v38 & 0xFFFFFFFE;
        if ((_DWORD)v38)
        {
          v39 = v37;
          *(_DWORD *)v95 = 136315906;
          *(_QWORD *)&v95[4] = buffer;
          *(_WORD *)&v95[12] = 1024;
          *(_DWORD *)&v95[14] = v11;
          *(_WORD *)&v95[18] = 1024;
          *(_DWORD *)&v95[20] = v12;
          v96 = 2080;
          v97 = strerror(v36);
          v40 = (char *)_os_log_send_and_compose_impl(v38, v98, 0, 0);

          if (v40)
            sub_100007780(v40);
        }
        else
        {
          v40 = 0;
        }
        free(v40);
      }

      rmdir(buffer);
      if (!a3)
        return 0;
LABEL_234:
      v10 = 0;
      *a3 = 22;
      return v10;
    }
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v26 = (id)qword_1000E0198;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v95 = 0;
      v27 = sub_100007750(1);
      v28 = v26;
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        v29 = v27;
      else
        v29 = v27 & 0xFFFFFFFE;
      if ((_DWORD)v29)
      {
        LODWORD(v98[0]) = 67109120;
        HIDWORD(v98[0]) = v11;
        v30 = (char *)_os_log_send_and_compose_impl(v29, v95, 0, 0);

        if (v30)
          sub_100007780(v30);
      }
      else
      {

        v30 = 0;
      }
      free(v30);
    }

  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v41 = (id)qword_1000E0198;
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v95 = 0;
    v42 = sub_100007750(1);
    v43 = v41;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      v44 = v42;
    else
      v44 = v42 & 0xFFFFFFFE;
    if ((_DWORD)v44)
    {
      LOWORD(v98[0]) = 0;
      v45 = (char *)_os_log_send_and_compose_impl(v44, v95, 0, 0);

      if (v45)
        sub_100007780(v45);
    }
    else
    {

      v45 = 0;
    }
    free(v45);
  }

  if (sub_10007DEF0(a1, 0) != 1)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v51 = (id)qword_1000E0198;
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      v98[0] = 0;
      v52 = sub_100007750(1);
      v53 = v51;
      if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        v54 = v52;
      else
        v54 = v52 & 0xFFFFFFFE;
      if ((_DWORD)v54)
      {
        *(_DWORD *)v95 = 136315394;
        *(_QWORD *)&v95[4] = v109;
        *(_WORD *)&v95[12] = 2080;
        *(_QWORD *)&v95[14] = buffer;
        v55 = (char *)_os_log_send_and_compose_impl(v54, v98, 0, 0);

        if (v55)
          sub_100007780(v55);
      }
      else
      {

        v55 = 0;
      }
      free(v55);
    }

    __argv[0] = "/sbin/mount_apfs";
    if ((a4 & 1) != 0)
    {
      v60 = 1;
    }
    else
    {
      __argv[1] = "-o";
      *(_QWORD *)&v101 = "nosuid";
      *((_QWORD *)&v101 + 1) = "-o";
      *(_QWORD *)&v102 = "nodev";
      v60 = 5;
    }
    __argv[v60] = (char *)v109;
    __argv[v60 + 1] = buffer;
    __argv[v60 | 2u] = 0;
    v61 = sub_1000208A4((const char **)__argv);
    if (v61)
    {
      v62 = v61;
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v63 = (id)qword_1000E0198;
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v95 = 0;
        v64 = sub_100007750(1);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
          v65 = v64;
        else
          v65 = v64 & 0xFFFFFFFE;
        if ((_DWORD)v65)
        {
          LODWORD(v98[0]) = 67109120;
          HIDWORD(v98[0]) = v62;
          v66 = (const char *)_os_log_send_and_compose_impl(v65, v95, 0, 0);
          v67 = (char *)v66;
          if (v66)
            sub_100007780(v66);
        }
        else
        {
          v67 = 0;
        }
        free(v67);
      }

      if (a3)
      {
        v10 = 0;
        *a3 = v62;
        if (!a2)
          goto LABEL_230;
        goto LABEL_163;
      }
      goto LABEL_162;
    }
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v68 = (id)qword_1000E0198;
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
    {
      v98[0] = 0;
      v69 = sub_100007750(1);
      v70 = v68;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
        v71 = v69;
      else
        v71 = v69 & 0xFFFFFFFE;
      if ((_DWORD)v71)
      {
        *(_DWORD *)v95 = 136315394;
        *(_QWORD *)&v95[4] = v109;
        *(_WORD *)&v95[12] = 2080;
        *(_QWORD *)&v95[14] = buffer;
        v72 = (char *)_os_log_send_and_compose_impl(v71, v98, 0, 0);

        if (v72)
          sub_100007780(v72);
      }
      else
      {

        v72 = 0;
      }
      free(v72);
    }

    if ((a4 & 1) == 0)
    {
      if (CFDictionaryContainsKey(a1, kUMUserSessionVolumeMountedKey))
        CFDictionaryReplaceValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanTrue);
      else
        CFDictionarySetValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanTrue);
    }
    if (chown(buffer, v11, v12))
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v78 = (id)qword_1000E0198;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        v98[0] = 0;
        v79 = sub_100007750(1);
        v78 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          v80 = v79;
        else
          v80 = v79 & 0xFFFFFFFE;
        if ((_DWORD)v80)
        {
          *(_DWORD *)v95 = 67109378;
          *(_DWORD *)&v95[4] = v11;
          *(_WORD *)&v95[8] = 2080;
          *(_QWORD *)&v95[10] = buffer;
          v81 = v98;
          goto LABEL_198;
        }
        goto LABEL_200;
      }
    }
    else
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v78 = (id)qword_1000E0198;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v95 = 0;
        v82 = sub_100007750(1);
        v78 = v78;
        if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          v80 = v82;
        else
          v80 = v82 & 0xFFFFFFFE;
        if ((_DWORD)v80)
        {
          LOWORD(v98[0]) = 0;
          v81 = v95;
LABEL_198:
          v83 = (char *)_os_log_send_and_compose_impl(v80, v81, 0, 0);

          if (v83)
            sub_100007780(v83);
          goto LABEL_201;
        }
LABEL_200:

        v83 = 0;
LABEL_201:
        free(v83);
      }
    }

    if (a2)
      v84 = 1;
    else
      v84 = a4;
    if (v84)
      v85 = 457;
    else
      v85 = 448;
    if (chmod(buffer, v85))
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v86 = (id)qword_1000E0198;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        v98[0] = 0;
        v87 = sub_100007750(1);
        v88 = v86;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          v89 = v87;
        else
          v89 = v87 & 0xFFFFFFFE;
        if ((_DWORD)v89)
        {
          *(_DWORD *)v95 = 136315138;
          *(_QWORD *)&v95[4] = buffer;
          v90 = v98;
          goto LABEL_225;
        }
        goto LABEL_227;
      }
    }
    else
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v86 = (id)qword_1000E0198;
      if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v95 = 0;
        v91 = sub_100007750(1);
        v88 = v86;
        if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
          v89 = v91;
        else
          v89 = v91 & 0xFFFFFFFE;
        if ((_DWORD)v89)
        {
          LOWORD(v98[0]) = 0;
          v90 = v95;
LABEL_225:
          v92 = (char *)_os_log_send_and_compose_impl(v89, v90, 0, 0);

          if (v92)
            sub_100007780(v92);
          goto LABEL_228;
        }
LABEL_227:

        v92 = 0;
LABEL_228:
        free(v92);
      }
    }

    v10 = 1;
    if (a2)
      goto LABEL_163;
    goto LABEL_230;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v46 = (id)qword_1000E0198;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v95 = 0;
    v47 = sub_100007750(1);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      v48 = v47;
    else
      v48 = v47 & 0xFFFFFFFE;
    if ((_DWORD)v48)
    {
      LOWORD(v98[0]) = 0;
      v49 = (const char *)_os_log_send_and_compose_impl(v48, v95, 0, 0);
      v50 = (char *)v49;
      if (v49)
        sub_100007780(v49);
    }
    else
    {
      v50 = 0;
    }
    free(v50);
  }

  if (!a3)
  {
LABEL_162:
    v10 = 0;
    if (a2)
      goto LABEL_163;
LABEL_230:
    v93 = (const __CFString *)sub_100086748(a1, kUMUserSessionHomeDirKey);
    sub_10007E108(v93, v11, v12);
    return v10;
  }
  v10 = 0;
  *a3 = 17;
  if (!a2)
    goto LABEL_230;
LABEL_163:
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v73 = (id)qword_1000E0198;
  if (os_log_type_enabled(v73, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v95 = 0;
    v74 = sub_100007750(1);
    v75 = v73;
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      v76 = v74;
    else
      v76 = v74 & 0xFFFFFFFE;
    if ((_DWORD)v76)
    {
      LOWORD(v98[0]) = 0;
      v77 = (char *)_os_log_send_and_compose_impl(v76, v95, 0, 0);

      if (v77)
        sub_100007780(v77);
    }
    else
    {

      v77 = 0;
    }
    free(v77);
  }

  return v10;
}

uint64_t sub_10007DEF0(const __CFDictionary *a1, _QWORD *a2)
{
  uint64_t result;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  const char *v8;
  char *v9;
  unsigned int v10;
  unsigned int v11;
  char *f_mntfromname;
  char *v13;
  char *v14;
  uint64_t v15;
  statfs *v16;
  int v17;
  const char *v18;
  __int16 v19;
  char *v20;
  char __s2[16];
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  v16 = 0;
  result = CFDictionaryContainsKey(a1, kUMUserSessionVolumeDeviceNodeKey);
  if ((_DWORD)result)
  {
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__s2 = 0u;
    v22 = 0u;
    sub_100086788(a1, kUMUserSessionVolumeDeviceNodeKey, __s2, 256);
    if (sub_10007C80C(a1, __s2))
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v5 = (id)qword_1000E0198;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        v15 = 0;
        v6 = sub_100007750(1);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          v7 = v6;
        else
          v7 = v6 & 0xFFFFFFFE;
        if ((_DWORD)v7)
        {
          v17 = 136315394;
          v18 = "checkAPFSVolumeMounted";
          v19 = 2080;
          v20 = __s2;
          v8 = (const char *)_os_log_send_and_compose_impl(v7, &v15, 0, 0);
          v9 = (char *)v8;
          if (v8)
            sub_100007780(v8);
        }
        else
        {
          v9 = 0;
        }
        free(v9);
      }

    }
    else
    {
      v10 = getmntinfo(&v16, 2);
      if (!v10)
        return 255;
      v11 = v10 + 1;
      f_mntfromname = v16[v10 - 1].f_mntfromname;
      while ((int)--v11 >= 1)
      {
        v13 = f_mntfromname - 2168;
        v14 = strstr(f_mntfromname, __s2);
        f_mntfromname = v13;
        if (v14)
        {
          if (a2)
            *a2 = *((_QWORD *)v13 + 138);
          return 1;
        }
      }
    }
    return 0;
  }
  return result;
}

uint64_t sub_10007E108(const __CFString *a1, uid_t a2, gid_t a3)
{
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  uint64_t result;
  char buffer[1024];

  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v6 = (id)qword_1000E0198;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buffer = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      v9 = (const char *)_os_log_send_and_compose_impl(v8, buffer, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  bzero(buffer, 0x400uLL);
  result = CFStringGetCString(a1, buffer, 1024, 0x8000100u);
  if ((_DWORD)result)
  {
    sub_10007E284((uint64_t)buffer);
    sub_10001FEB4((uint64_t)buffer, a2, a3);
    return 1;
  }
  return result;
}

uint64_t sub_10007E284(uint64_t a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  char v10[1024];

  bzero(v10, 0x400uLL);
  __strlcpy_chk(v10, a1, 1024, 1024);
  __strlcat_chk(v10, "/tmp/", 1024, 1024);
  if (sub_100031520(v10) == 1)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v2 = (id)qword_1000E0198;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v3 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v3;
      else
        v4 = v3 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
LABEL_17:
        v6 = (const char *)_os_log_send_and_compose_impl(v4, &v9, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
        goto LABEL_20;
      }
LABEL_19:
      v7 = 0;
LABEL_20:
      free(v7);
    }
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v2 = (id)qword_1000E0198;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 0;
      v5 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v5;
      else
        v4 = v5 & 0xFFFFFFFE;
      if ((_DWORD)v4)
        goto LABEL_17;
      goto LABEL_19;
    }
  }

  return 1;
}

uint64_t sub_10007E488(const __CFDictionary *a1, const __CFString *a2, _DWORD *a3, int a4)
{
  int v8;
  CFTypeID v9;
  NSObject *v10;
  unsigned int v11;
  uint64_t v12;
  const char *v13;
  char *v14;
  int v15;
  int v16;
  NSObject *v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  uint64_t result;
  _BYTE v28[18];
  uint64_t v29;
  char buffer[1024];

  v8 = sub_100004318(a1, kUMUserSessionIDKey);
  bzero(buffer, 0x400uLL);
  if (a2 && (v9 = CFGetTypeID(a2), v9 == CFStringGetTypeID()))
    CFStringGetCString(a2, buffer, 1024, 0x8000100u);
  else
    sub_100086788(a1, kUMUserSessionHomeDirKey, buffer, 1024);
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v10 = (id)qword_1000E0198;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    v29 = 0;
    v11 = sub_100007750(1);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      v12 = v11;
    else
      v12 = v11 & 0xFFFFFFFE;
    if ((_DWORD)v12)
    {
      *(_DWORD *)v28 = 67109378;
      *(_DWORD *)&v28[4] = v8;
      *(_WORD *)&v28[8] = 2080;
      *(_QWORD *)&v28[10] = buffer;
      v13 = (const char *)_os_log_send_and_compose_impl(v12, &v29, 0, 0);
      v14 = (char *)v13;
      if (v13)
        sub_100007780(v13);
    }
    else
    {
      v14 = 0;
    }
    free(v14);
  }

  v15 = sub_10001CF78(buffer, a4);
  if (v15)
  {
    v16 = v15;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v17 = (id)qword_1000E0198;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v28 = 0;
      v18 = sub_100007750(1);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        v19 = v18;
      else
        v19 = v18 & 0xFFFFFFFE;
      if ((_DWORD)v19)
      {
        LODWORD(v29) = 67109120;
        HIDWORD(v29) = v16;
        v20 = (const char *)_os_log_send_and_compose_impl(v19, v28, 0, 0);
        v21 = (char *)v20;
        if (v20)
          sub_100007780(v20);
      }
      else
      {
        v21 = 0;
      }
      free(v21);
    }

    result = 0;
    if (a3)
      *a3 = v16;
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v22 = (id)qword_1000E0198;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v29 = 0;
      v23 = sub_100007750(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        *(_DWORD *)v28 = 136315138;
        *(_QWORD *)&v28[4] = buffer;
        v25 = (const char *)_os_log_send_and_compose_impl(v24, &v29, 0, 0);
        v26 = (char *)v25;
        if (v25)
          sub_100007780(v25);
      }
      else
      {
        v26 = 0;
      }
      free(v26);
    }

    if (CFDictionaryContainsKey(a1, kUMUserSessionVolumeMountedKey))
      CFDictionaryReplaceValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
    else
      CFDictionarySetValue(a1, kUMUserSessionVolumeMountedKey, kCFBooleanFalse);
    return 1;
  }
  return result;
}

uint64_t sub_10007E870()
{
  int VEKState;
  int v1;
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  const char *v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  const char *v12;
  char *v13;
  uint64_t v15;
  __int16 v16;
  int v17;
  int v18;
  char v19[256];

  if (sub_10007EBE0(v19))
  {
    v16 = 0;
    VEKState = APFSVolumeGetVEKState(v19, (char *)&v16 + 1, &v16);
    if (VEKState == 22)
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v2 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_44;
      v15 = 0;
      v6 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v4 = v6;
      else
        v4 = v6 & 0xFFFFFFFE;
      if ((_DWORD)v4)
      {
        LOWORD(v17) = 0;
LABEL_22:
        v7 = (const char *)_os_log_send_and_compose_impl(v4, &v15, 0, 0);
        v8 = (char *)v7;
        if (v7)
          sub_100007780(v7);
        goto LABEL_43;
      }
LABEL_42:
      v8 = 0;
LABEL_43:
      free(v8);
LABEL_44:
      v5 = 0;
LABEL_48:

      return v5;
    }
    v1 = VEKState;
    if (VEKState)
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v2 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        goto LABEL_47;
      v15 = 0;
      v9 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v10 = v9;
      else
        v10 = v9 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        v17 = 67109120;
        v18 = v1;
        goto LABEL_40;
      }
    }
    else
    {
      if (HIBYTE(v16))
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v2 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          goto LABEL_44;
        v15 = 0;
        v3 = sub_100007750(1);
        if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
          v4 = v3;
        else
          v4 = v3 & 0xFFFFFFFE;
        if ((_DWORD)v4)
        {
          LOWORD(v17) = 0;
          goto LABEL_22;
        }
        goto LABEL_42;
      }
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v2 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      {
LABEL_47:
        v5 = 1;
        goto LABEL_48;
      }
      v15 = 0;
      v11 = sub_100007750(1);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
        v10 = v11;
      else
        v10 = v11 & 0xFFFFFFFE;
      if ((_DWORD)v10)
      {
        LOWORD(v17) = 0;
LABEL_40:
        v12 = (const char *)_os_log_send_and_compose_impl(v10, &v15, 0, 0);
        v13 = (char *)v12;
        if (v12)
          sub_100007780(v12);
        goto LABEL_46;
      }
    }
    v13 = 0;
LABEL_46:
    free(v13);
    goto LABEL_47;
  }
  return 0;
}

BOOL sub_10007EBE0(char *a1)
{
  _BOOL8 v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  uint64_t *v7;
  unsigned int v8;
  const char *v9;
  char *v10;
  uint64_t v12;
  char v13;
  _BYTE v14[12];
  __int16 v15;
  const char *v16;

  v13 = 1;
  v2 = sub_10007AA10("Data", a1, 256, 64, &v13);
  if (v2)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v3 = (id)qword_1000E0198;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v12 = 0;
      v4 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v6 = "TRUE";
        if (!v13)
          v6 = "FALSE";
        *(_DWORD *)v14 = 136315394;
        *(_QWORD *)&v14[4] = a1;
        v15 = 2080;
        v16 = v6;
        v7 = &v12;
        goto LABEL_20;
      }
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v3 = (id)qword_1000E0198;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v14 = 0;
      v8 = sub_100007750(1);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        v5 = v8;
      else
        v5 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        LOWORD(v12) = 0;
        v7 = (uint64_t *)v14;
LABEL_20:
        v9 = (const char *)_os_log_send_and_compose_impl(v5, v7, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
        goto LABEL_23;
      }
LABEL_22:
      v10 = 0;
LABEL_23:
      free(v10);
    }
  }

  return v2;
}

uint64_t sub_10007EDFC(const __CFString *a1, uint64_t a2, int a3, int *a4)
{
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  _BYTE *v21;
  NSObject *v22;
  unsigned int v23;
  uint64_t v24;
  const char *v25;
  char *v26;
  NSObject *v27;
  unsigned int v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  uint64_t result;
  NSObject *v33;
  unsigned int v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  unsigned int v38;
  void *v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  NSObject *v48;
  char *v49;
  NSObject *v50;
  unsigned int v51;
  uint64_t v52;
  const char *v53;
  char *v54;
  _QWORD v55[2];
  _BYTE v56[12];
  _OWORD v57[16];
  uuid_t uu;
  char buffer[16];
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;

  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  memset(uu, 0, sizeof(uu));
  v8 = (id)qword_1000E0198;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buffer = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      LOWORD(v57[0]) = 0;
      v11 = (const char *)_os_log_send_and_compose_impl(v10, buffer, 0, 0);
      v12 = (char *)v11;
      if (v11)
        sub_100007780(v11);
    }
    else
    {
      v12 = 0;
    }
    free(v12);
  }

  v73 = 0u;
  v74 = 0u;
  v71 = 0u;
  v72 = 0u;
  v69 = 0u;
  v70 = 0u;
  v67 = 0u;
  v68 = 0u;
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  *(_OWORD *)buffer = 0u;
  v60 = 0u;
  if (!CFStringGetCString(a1, buffer, 256, 0x8000100u))
  {
    if (a4)
      *a4 = 22;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v18 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_111;
    *(_QWORD *)&v57[0] = 0;
    v19 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v19;
    else
      v20 = v19 & 0xFFFFFFFE;
    if (!(_DWORD)v20)
      goto LABEL_109;
    *(_WORD *)v56 = 0;
    v21 = v57;
LABEL_80:
    v39 = (void *)_os_log_send_and_compose_impl(v20, v21, 0, 0);
    if (!v39)
    {
LABEL_110:
      free(v39);
LABEL_111:

      return 0;
    }
LABEL_81:
    sub_100007780((const char *)v39);
    goto LABEL_110;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v13 = (id)qword_1000E0198;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v56 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      LODWORD(v57[0]) = 136315138;
      *(_QWORD *)((char *)v57 + 4) = buffer;
      v16 = (const char *)_os_log_send_and_compose_impl(v15, v56, 0, 0);
      v17 = (char *)v16;
      if (v16)
        sub_100007780(v16);
    }
    else
    {
      v17 = 0;
    }
    free(v17);
  }

  if (uuid_parse(buffer, uu))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v22 = (id)qword_1000E0198;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)&v57[0] = 0;
      v23 = sub_100007750(1);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
        v24 = v23;
      else
        v24 = v23 & 0xFFFFFFFE;
      if ((_DWORD)v24)
      {
        *(_WORD *)v56 = 0;
        v25 = (const char *)_os_log_send_and_compose_impl(v24, v57, 0, 0);
        v26 = (char *)v25;
        if (v25)
          sub_100007780(v25);
      }
      else
      {
        v26 = 0;
      }
      free(v26);
    }

    if (a4)
    {
      result = 0;
      *a4 = 22;
      return result;
    }
    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v27 = (id)qword_1000E0198;
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)&v57[0] = 0;
    v28 = sub_100007750(1);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      v29 = v28;
    else
      v29 = v28 & 0xFFFFFFFE;
    if ((_DWORD)v29)
    {
      *(_WORD *)v56 = 0;
      v30 = (const char *)_os_log_send_and_compose_impl(v29, v57, 0, 0);
      v31 = (char *)v30;
      if (v30)
        sub_100007780(v30);
    }
    else
    {
      v31 = 0;
    }
    free(v31);
  }

  memset(v57, 0, sizeof(v57));
  if (!sub_10007EBE0((char *)v57))
  {
    if (a4)
      *a4 = 2;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v18 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_111;
    *(_QWORD *)v56 = 0;
    v38 = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v20 = v38;
    else
      v20 = v38 & 0xFFFFFFFE;
    if (!(_DWORD)v20)
      goto LABEL_109;
    LOWORD(v55[0]) = 0;
    v21 = v56;
    goto LABEL_80;
  }
  if (a3)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v33 = (id)qword_1000E0198;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v55[0] = 0;
      v34 = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        v35 = v34;
      else
        v35 = v34 & 0xFFFFFFFE;
      if ((_DWORD)v35)
      {
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = v57;
        v36 = (const char *)_os_log_send_and_compose_impl(v35, v55, 0, 0);
        v37 = (char *)v36;
        if (v36)
          sub_100007780(v36);
      }
      else
      {
        v37 = 0;
      }
      free(v37);
    }
    v44 = 24;
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v33 = (id)qword_1000E0198;
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      v55[0] = 0;
      v40 = sub_100007750(1);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        v41 = v40;
      else
        v41 = v40 & 0xFFFFFFFE;
      if ((_DWORD)v41)
      {
        *(_DWORD *)v56 = 136315138;
        *(_QWORD *)&v56[4] = v57;
        v42 = (const char *)_os_log_send_and_compose_impl(v41, v55, 0, 0);
        v43 = (char *)v42;
        if (v42)
          sub_100007780(v42);
      }
      else
      {
        v43 = 0;
      }
      free(v43);
    }
    v44 = 8;
  }

  v45 = APFSVolumeEnableUserProtectionWithOptions(v57, uu, a2, v44);
  if (v45)
  {
    v46 = v45;
    if (a4)
      *a4 = v45;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v18 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      goto LABEL_111;
    v55[0] = 0;
    LODWORD(v47) = sub_100007750(1);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      v47 = v47;
    else
      v47 = v47 & 0xFFFFFFFE;
    if ((_DWORD)v47)
    {
      v48 = v18;
      v49 = strerror(v46);
      *(_DWORD *)v56 = 136315138;
      *(_QWORD *)&v56[4] = v49;
      v39 = (void *)_os_log_send_and_compose_impl(v47, v55, 0, 0);

      if (!v39)
        goto LABEL_110;
      goto LABEL_81;
    }
LABEL_109:
    v39 = 0;
    goto LABEL_110;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v50 = (id)qword_1000E0198;
  if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v56 = 0;
    v51 = sub_100007750(1);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      v52 = v51;
    else
      v52 = v51 & 0xFFFFFFFE;
    if ((_DWORD)v52)
    {
      LOWORD(v55[0]) = 0;
      v53 = (const char *)_os_log_send_and_compose_impl(v52, v56, 0, 0);
      v54 = (char *)v53;
      if (v53)
        sub_100007780(v53);
    }
    else
    {
      v54 = 0;
    }
    free(v54);
  }

  return 1;
}

uint64_t sub_10007F734(const char *a1, int a2, _BYTE *a3, int *a4)
{
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  char *v28;
  unsigned int v29;
  uint64_t v30;
  const char *v31;
  char *v32;
  unsigned int v33;
  NSObject *v35;
  unsigned int v36;
  _BOOL4 v37;
  char *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  uint64_t v42;
  char v43;
  char v44;
  _BYTE v45[12];
  __int16 v46;
  char *v47;
  char v48[256];

  v44 = 0;
  v43 = 1;
  if (sub_10007AA10(a1, v48, 256, a2, &v43))
  {
    if (v43 == 1)
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v8 = (id)qword_1000E0198;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        v42 = 0;
        v9 = sub_100007750(1);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          v10 = v9;
        else
          v10 = v9 & 0xFFFFFFFE;
        if ((_DWORD)v10)
        {
          *(_DWORD *)v45 = 136315394;
          *(_QWORD *)&v45[4] = a1;
          v46 = 2080;
          v47 = v48;
          v11 = (const char *)_os_log_send_and_compose_impl(v10, &v42, 0, 0);
          v12 = (char *)v11;
          if (v11)
            sub_100007780(v11);
        }
        else
        {
          v12 = 0;
        }
        free(v12);
      }

      v24 = APFSVolumeNeedsCryptoMigration(v48, &v44);
      if (v24)
      {
        v25 = v24;
        if (a4)
          *a4 = v24;
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v18 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          goto LABEL_73;
        v42 = 0;
        LODWORD(v26) = sub_100007750(1);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          v26 = v26;
        else
          v26 = v26 & 0xFFFFFFFE;
        if ((_DWORD)v26)
        {
          v27 = v18;
          v28 = strerror(v25);
          *(_DWORD *)v45 = 136315138;
          *(_QWORD *)&v45[4] = v28;
          v22 = (void *)_os_log_send_and_compose_impl(v26, &v42, 0, 0);

          if (!v22)
          {
LABEL_72:
            free(v22);
            goto LABEL_73;
          }
LABEL_50:
          sub_100007780((const char *)v22);
          goto LABEL_72;
        }
LABEL_71:
        v22 = 0;
        goto LABEL_72;
      }
      if (v44)
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v18 = (id)qword_1000E0198;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v45 = 0;
          v29 = sub_100007750(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v30 = v29;
          else
            v30 = v29 & 0xFFFFFFFE;
          if ((_DWORD)v30)
          {
            LOWORD(v42) = 0;
            v31 = (const char *)_os_log_send_and_compose_impl(v30, v45, 0, 0);
            v32 = (char *)v31;
            if (v31)
              sub_100007780(v31);
          }
          else
          {
            v32 = 0;
          }
          free(v32);
        }
        v23 = 1;
        goto LABEL_74;
      }
      if (a4)
        *a4 = 0;
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v18 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
LABEL_73:
        v23 = 0;
LABEL_74:

        if (a3)
          *a3 = v43;
        return v23;
      }
      v42 = 0;
      v33 = sub_100007750(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        v20 = v33;
      else
        v20 = v33 & 0xFFFFFFFE;
      if (!(_DWORD)v20)
        goto LABEL_71;
      *(_DWORD *)v45 = 136315138;
      *(_QWORD *)&v45[4] = a1;
      v21 = &v42;
    }
    else
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v18 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        goto LABEL_73;
      *(_QWORD *)v45 = 0;
      v19 = sub_100007750(1);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        v20 = v19;
      else
        v20 = v19 & 0xFFFFFFFE;
      if (!(_DWORD)v20)
        goto LABEL_71;
      LOWORD(v42) = 0;
      v21 = (uint64_t *)v45;
    }
    v22 = (void *)_os_log_send_and_compose_impl(v20, v21, 0, 0);
    if (!v22)
      goto LABEL_72;
    goto LABEL_50;
  }
  if (a4)
    *a4 = 2;
  if (a2 != 2)
  {
    if (qword_1000E01A0 != -1)
      goto LABEL_90;
    while (1)
    {
      v35 = (id)qword_1000E0198;
      if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)v45 = 0;
        v36 = sub_100007750(1);
        v37 = os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT);
        v38 = 0;
        if (v37)
          v39 = v36;
        else
          v39 = v36 & 0xFFFFFFFE;
        if ((_DWORD)v39)
        {
          LOWORD(v42) = 0;
          v40 = (const char *)_os_log_send_and_compose_impl(v39, v45, 0, 0);
          v38 = 0;
          if (v40)
          {
            v41 = v40;
            sub_100007780(v40);
            v38 = (char *)v41;
          }
        }
        free(v38);
      }

      sub_10001CF20("FAILED TO FIND DISKNODE");
LABEL_90:
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    }
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v13 = (id)qword_1000E0198;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v45 = 0;
    v14 = sub_100007750(1);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      v15 = v14;
    else
      v15 = v14 & 0xFFFFFFFE;
    if ((_DWORD)v15)
    {
      LOWORD(v42) = 0;
      v16 = (const char *)_os_log_send_and_compose_impl(v15, v45, 0, 0);
      v17 = (char *)v16;
      if (v16)
        sub_100007780(v16);
    }
    else
    {
      v17 = 0;
    }
    free(v17);
  }

  return 0;
}

uint64_t sub_10007FDCC(uint64_t a1, _DWORD *a2)
{
  int v4;
  int v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  uint64_t result;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int16 v20;
  int v21;

  v4 = APFSVolumeConvertToUserCrypto(a1, 0);
  if (v4)
  {
    v5 = v4;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v6 = (id)qword_1000E0198;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      v7 = sub_100007750(1);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v18 = 136315394;
        v19 = a1;
        v20 = 1024;
        v21 = v5;
        v9 = (const char *)_os_log_send_and_compose_impl(v8, &v17, 0, 0);
        v10 = (char *)v9;
        if (v9)
          sub_100007780(v9);
      }
      else
      {
        v10 = 0;
      }
      free(v10);
    }

    result = 0;
    if (a2)
      *a2 = v5;
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v11 = (id)qword_1000E0198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v17 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v18 = 136315138;
        v19 = a1;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, &v17, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    return 1;
  }
  return result;
}

uint64_t sub_100080010(int *a1, _BYTE *a2)
{
  char v3[8];

  strcpy(v3, "Data");
  return sub_10007F734(v3, 64, a2, a1);
}

uint64_t sub_10008004C(int *a1, _BYTE *a2)
{
  char v3[8];

  strcpy(v3, "User");
  return sub_10007F734(v3, 2, a2, a1);
}

uint64_t sub_100080088(int *a1)
{
  NSObject *v2;
  unsigned int v3;
  uint64_t v4;
  const char *v5;
  char *v6;
  NSObject *v7;
  unsigned int v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[3];
  char v24[256];

  if (!sub_10007EBE0(v24))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v7 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_45;
    v23[0] = 0;
    v8 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v9 = v8;
    else
      v9 = v8 & 0xFFFFFFFE;
    if ((_DWORD)v9)
    {
      LOWORD(v22[0]) = 0;
      v10 = (void *)_os_log_send_and_compose_impl(v9, v23, 0, 0);
      if (!v10)
        goto LABEL_44;
      goto LABEL_33;
    }
LABEL_43:
    v10 = 0;
    goto LABEL_44;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v2 = (id)qword_1000E0198;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v22[0] = 0;
    v3 = sub_100007750(1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
      v4 = v3;
    else
      v4 = v3 & 0xFFFFFFFE;
    if ((_DWORD)v4)
    {
      LODWORD(v23[0]) = 136315138;
      *(_QWORD *)((char *)v23 + 4) = v24;
      v5 = (const char *)_os_log_send_and_compose_impl(v4, v22, 0, 0);
      v6 = (char *)v5;
      if (v5)
        sub_100007780(v5);
    }
    else
    {
      v6 = 0;
    }
    free(v6);
  }

  v11 = APFSVolumeTranscribePFK(v24);
  if (v11)
  {
    v12 = v11;
    if (a1)
      *a1 = v11;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v7 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      goto LABEL_45;
    v22[0] = 0;
    LODWORD(v13) = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v13 = v13;
    else
      v13 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v13)
    {
      v14 = v7;
      v15 = strerror(v12);
      LODWORD(v23[0]) = 136315138;
      *(_QWORD *)((char *)v23 + 4) = v15;
      v10 = (void *)_os_log_send_and_compose_impl(v13, v22, 0, 0);

      if (!v10)
      {
LABEL_44:
        free(v10);
LABEL_45:
        v20 = 0;
        goto LABEL_46;
      }
LABEL_33:
      sub_100007780((const char *)v10);
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v7 = (id)qword_1000E0198;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    v22[0] = 0;
    v16 = sub_100007750(1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      v17 = v16;
    else
      v17 = v16 & 0xFFFFFFFE;
    if ((_DWORD)v17)
    {
      LODWORD(v23[0]) = 136315138;
      *(_QWORD *)((char *)v23 + 4) = v24;
      v18 = (const char *)_os_log_send_and_compose_impl(v17, v22, 0, 0);
      v19 = (char *)v18;
      if (v18)
        sub_100007780(v18);
    }
    else
    {
      v19 = 0;
    }
    free(v19);
  }
  v20 = 1;
LABEL_46:

  return v20;
}

uint64_t sub_100080468(int a1, _DWORD *a2)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  NSObject *v20;
  unsigned int v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  uint64_t result;
  int v26;
  uint64_t v27;
  void *v28;
  unsigned int v29;
  id v30;
  NSObject *v31;
  unsigned int v32;
  uint64_t v33;
  const char *v34;
  char *v35;
  unsigned int v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  id v40;
  char *v41;
  NSObject *v42;
  unsigned int v43;
  uint64_t v44;
  const char *v45;
  char *v46;
  int v47;
  int v48;
  NSObject *v49;
  unsigned int v50;
  uint64_t v51;
  const char *v52;
  char *v53;
  NSObject *v54;
  unsigned int v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  id v59;
  _BYTE v60[12];
  __int16 v61;
  int v62;
  uint64_t v63;
  char v64[256];

  if (!sub_10007A7F4(v64, 256))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v11 = (id)qword_1000E0198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v60 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        v63 = 0x204000100;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, v60, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }

    if (!a2)
      return 0;
    result = 0;
    v26 = 2;
    goto LABEL_44;
  }
  if (!a1)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v5 = (id)qword_1000E0198;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v60 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        LOWORD(v63) = 0;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, v60, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }
    goto LABEL_75;
  }
  v4 = objc_claimAutoreleasedReturnValue(+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v64));
  if (!v4)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v20 = (id)qword_1000E0198;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v60 = 0;
      v21 = sub_100007750(1);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        v22 = v21;
      else
        v22 = v21 & 0xFFFFFFFE;
      if ((_DWORD)v22)
      {
        LOWORD(v63) = 0;
        v23 = (const char *)_os_log_send_and_compose_impl(v22, v60, 0, 0);
        v24 = (char *)v23;
        if (v23)
          sub_100007780(v23);
      }
      else
      {
        v24 = 0;
      }
      free(v24);
    }

    if (!a2)
      return 0;
    result = 0;
    v26 = 12;
LABEL_44:
    *a2 = v26;
    return result;
  }
  v5 = v4;
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v6 = (id)qword_1000E0198;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    v63 = 0;
    v7 = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v8 = v7;
    else
      v8 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v8)
    {
      *(_DWORD *)v60 = 138412546;
      *(_QWORD *)&v60[4] = v5;
      v61 = 1024;
      v62 = 501;
      v9 = (const char *)_os_log_send_and_compose_impl(v8, &v63, 0, 0);
      v10 = (char *)v9;
      if (v9)
        sub_100007780(v9);
    }
    else
    {
      v10 = 0;
    }
    free(v10);
  }

  v27 = sub_10001CA9C(qword_1000E0318);
  v28 = (void *)objc_claimAutoreleasedReturnValue(v27);
  v59 = 0;
  v29 = objc_msgSend(v28, "mapVolume:toSession:withPersona:error:", v5, 501, 0, &v59);
  v30 = v59;

  if (!v29)
  {
    v36 = objc_msgSend(v30, "code");
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v37 = (id)qword_1000E0198;
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
    {
      v63 = 0;
      LODWORD(v38) = sub_100007750(1);
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
        v38 = v38;
      else
        v38 = v38 & 0xFFFFFFFE;
      if ((_DWORD)v38)
      {
        v39 = v37;
        v40 = objc_msgSend(v30, "code");
        *(_DWORD *)v60 = 134217984;
        *(_QWORD *)&v60[4] = v40;
        v41 = (char *)_os_log_send_and_compose_impl(v38, &v63, 0, 0);

        if (v41)
          sub_100007780(v41);
      }
      else
      {
        v41 = 0;
      }
      free(v41);
    }

    if (a2)
      *a2 = v36;

    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v31 = (id)qword_1000E0198;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    v63 = 0;
    v32 = sub_100007750(1);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      v33 = v32;
    else
      v33 = v32 & 0xFFFFFFFE;
    if ((_DWORD)v33)
    {
      *(_DWORD *)v60 = 138412546;
      *(_QWORD *)&v60[4] = v5;
      v61 = 1024;
      v62 = 501;
      v34 = (const char *)_os_log_send_and_compose_impl(v33, &v63, 0, 0);
      v35 = (char *)v34;
      if (v34)
        sub_100007780(v34);
    }
    else
    {
      v35 = 0;
    }
    free(v35);
  }

LABEL_75:
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v42 = (id)qword_1000E0198;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    v63 = 0;
    v43 = sub_100007750(1);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      v44 = v43;
    else
      v44 = v43 & 0xFFFFFFFE;
    if ((_DWORD)v44)
    {
      *(_DWORD *)v60 = 136315138;
      *(_QWORD *)&v60[4] = v64;
      v45 = (const char *)_os_log_send_and_compose_impl(v44, &v63, 0, 0);
      v46 = (char *)v45;
      if (v45)
        sub_100007780(v45);
    }
    else
    {
      v46 = 0;
    }
    free(v46);
  }

  v47 = APFSVolumeMigrateMediaKey(v64);
  if (v47)
  {
    v48 = v47;
    if (a2)
      *a2 = v47;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v49 = (id)qword_1000E0198;
    if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v60 = 0;
      v50 = sub_100007750(1);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        v51 = v50;
      else
        v51 = v50 & 0xFFFFFFFE;
      if ((_DWORD)v51)
      {
        LODWORD(v63) = 67109120;
        HIDWORD(v63) = v48;
        v52 = (const char *)_os_log_send_and_compose_impl(v51, v60, 0, 0);
        v53 = (char *)v52;
        if (v52)
          sub_100007780(v52);
      }
      else
      {
        v53 = 0;
      }
      free(v53);
    }

    return 0;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v54 = (id)qword_1000E0198;
  if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v60 = 0;
    v55 = sub_100007750(1);
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
      v56 = v55;
    else
      v56 = v55 & 0xFFFFFFFE;
    if ((_DWORD)v56)
    {
      LOWORD(v63) = 0;
      v57 = (const char *)_os_log_send_and_compose_impl(v56, v60, 0, 0);
      v58 = (char *)v57;
      if (v57)
        sub_100007780(v57);
    }
    else
    {
      v58 = 0;
    }
    free(v58);
  }

  return 1;
}

uint64_t sub_100080D6C(const char *a1, int *a2)
{
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  int v9;
  int v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t v13;
  const char *v14;
  char *v15;
  unsigned int v16;
  uint64_t v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v22;
  _BYTE v23[12];
  uint64_t v24;

  v22 = 2;
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v4 = (id)qword_1000E0198;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v24 = 0;
    v5 = sub_100007750(1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      v6 = v5;
    else
      v6 = v5 & 0xFFFFFFFE;
    if ((_DWORD)v6)
    {
      *(_DWORD *)v23 = 136315138;
      *(_QWORD *)&v23[4] = a1;
      v7 = (const char *)_os_log_send_and_compose_impl(v6, &v24, 0, 0);
      v8 = (char *)v7;
      if (v7)
        sub_100007780(v7);
    }
    else
    {
      v8 = 0;
    }
    free(v8);
  }

  v9 = fsctl(a1, 0x80014A22uLL, &v22, 0);
  if (v9)
  {
    v10 = v9;
    if (a2)
      *a2 = v9;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v11 = (id)qword_1000E0198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v23 = 0;
      v12 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v13 = v12;
      else
        v13 = v12 & 0xFFFFFFFE;
      if ((_DWORD)v13)
      {
        LODWORD(v24) = 67109120;
        HIDWORD(v24) = v10;
        v14 = (const char *)_os_log_send_and_compose_impl(v13, v23, 0, 0);
        v15 = (char *)v14;
        if (v14)
          sub_100007780(v14);
      }
      else
      {
        v15 = 0;
      }
      free(v15);
    }
    v20 = 0;
  }
  else
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v11 = (id)qword_1000E0198;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v23 = 0;
      v16 = sub_100007750(1);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        v17 = v16;
      else
        v17 = v16 & 0xFFFFFFFE;
      if ((_DWORD)v17)
      {
        LOWORD(v24) = 0;
        v18 = (const char *)_os_log_send_and_compose_impl(v17, v23, 0, 0);
        v19 = (char *)v18;
        if (v18)
          sub_100007780(v18);
      }
      else
      {
        v19 = 0;
      }
      free(v19);
    }
    v20 = 1;
  }

  return v20;
}

uint64_t sub_100081084()
{
  BOOL v0;
  NSObject *v1;
  unsigned int v2;
  uint64_t v3;
  const char *v4;
  char *v5;
  CFIndex i;
  const __CFDictionary *ValueAtIndex;
  const __CFDictionary *v9;
  CFTypeID v10;
  unsigned int v11;
  int v12;
  NSObject *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  int v21;
  int v22;

  if (qword_1000E02B0)
    v0 = 0;
  else
    v0 = byte_1000DF220 == 0;
  if (v0)
    return 0;
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v1 = (id)qword_1000E0198;
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    v20 = 0;
    v2 = sub_100007750(1);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
      v3 = v2;
    else
      v3 = v2 & 0xFFFFFFFE;
    if ((_DWORD)v3)
    {
      LOWORD(v21) = 0;
      v4 = (const char *)_os_log_send_and_compose_impl(v3, &v20, 0, 0);
      v5 = (char *)v4;
      if (v4)
        sub_100007780(v4);
    }
    else
    {
      v5 = 0;
    }
    free(v5);
  }

  if (CFArrayGetCount((CFArrayRef)qword_1000E02B0) >= 1)
  {
    for (i = 0; CFArrayGetCount((CFArrayRef)qword_1000E02B0) > i; ++i)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)qword_1000E02B0, i);
      if (!ValueAtIndex)
        continue;
      v9 = ValueAtIndex;
      v10 = CFGetTypeID(ValueAtIndex);
      if (v10 != CFDictionaryGetTypeID() || !CFDictionaryContainsKey(v9, kUMUserSessionVolumeMountedKey))
        continue;
      v11 = sub_1000866F8(v9, kUMUserSessionVolumeMountedKey);
      v12 = sub_100004318(v9, kUMUserSessionIDKey);
      if (sub_1000866F8(v9, kUMUserSessionForegroundKey) || v11 == 0)
        continue;
      if (sub_10007E488(v9, 0, 0, 0x80000))
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v14 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_46;
        v20 = 0;
        v15 = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          v16 = v15;
        else
          v16 = v15 & 0xFFFFFFFE;
        if ((_DWORD)v16)
        {
LABEL_42:
          v21 = 67109120;
          v22 = v12;
          v18 = (const char *)_os_log_send_and_compose_impl(v16, &v20, 0, 0);
          v19 = (char *)v18;
          if (v18)
            sub_100007780(v18);
          goto LABEL_45;
        }
      }
      else
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v14 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_46;
        v20 = 0;
        v17 = sub_100007750(1);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          v16 = v17;
        else
          v16 = v17 & 0xFFFFFFFE;
        if ((_DWORD)v16)
          goto LABEL_42;
      }
      v19 = 0;
LABEL_45:
      free(v19);
LABEL_46:

    }
  }
  return 1;
}

uint64_t sub_10008143C(uint64_t a1, int *a2)
{
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  unsigned int v9;
  uint64_t v10;
  const char *v11;
  char *v12;
  NSObject *v13;
  unsigned int v14;
  uint64_t v15;
  const char *v16;
  char *v17;
  int v18;
  int v19;
  unsigned int v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  uint64_t result;
  _QWORD v30[2];
  _BYTE v31[12];
  __int16 v32;
  int v33;
  _OWORD v34[16];

  memset(v34, 0, sizeof(v34));
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v3 = (id)qword_1000E0198;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)v31 = 0;
    v4 = sub_100007750(1);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      v5 = v4;
    else
      v5 = v4 & 0xFFFFFFFE;
    if ((_DWORD)v5)
    {
      LOWORD(v30[0]) = 0;
      v6 = (const char *)_os_log_send_and_compose_impl(v5, v31, 0, 0);
      v7 = (char *)v6;
      if (v6)
        sub_100007780(v6);
    }
    else
    {
      v7 = 0;
    }
    free(v7);
  }

  if (!sub_10007A7F4((char *)v34, 256))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v13 = (id)qword_1000E0198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)v31 = 0;
      v14 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v15 = v14;
      else
        v15 = v14 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        LOWORD(v30[0]) = 0;
        v16 = (const char *)_os_log_send_and_compose_impl(v15, v31, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
      }
      else
      {
        v17 = 0;
      }
      free(v17);
    }
    v19 = 2;
    goto LABEL_57;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v8 = (id)qword_1000E0198;
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v30[0] = 0;
    v9 = sub_100007750(1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      v10 = v9;
    else
      v10 = v9 & 0xFFFFFFFE;
    if ((_DWORD)v10)
    {
      *(_DWORD *)v31 = 136315138;
      *(_QWORD *)&v31[4] = v34;
      v11 = (const char *)_os_log_send_and_compose_impl(v10, v30, 0, 0);
      v12 = (char *)v11;
      if (v11)
        sub_100007780(v11);
    }
    else
    {
      v12 = 0;
    }
    free(v12);
  }

  v18 = APFSVolumeDelete(v34);
  if (v18)
  {
    v19 = v18;
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v13 = (id)qword_1000E0198;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v30[0] = 0;
      v20 = sub_100007750(1);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        v21 = v20;
      else
        v21 = v20 & 0xFFFFFFFE;
      if ((_DWORD)v21)
      {
        *(_DWORD *)v31 = 136315394;
        *(_QWORD *)&v31[4] = v34;
        v32 = 1024;
        v33 = v19;
        v22 = (const char *)_os_log_send_and_compose_impl(v21, v30, 0, 0);
        v23 = (char *)v22;
        if (v22)
          sub_100007780(v22);
      }
      else
      {
        v23 = 0;
      }
      free(v23);
    }
LABEL_57:

    result = 0;
    if (a2)
      *a2 = v19;
    return result;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v24 = (id)qword_1000E0198;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    v30[0] = 0;
    v25 = sub_100007750(1);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
      v26 = v25;
    else
      v26 = v25 & 0xFFFFFFFE;
    if ((_DWORD)v26)
    {
      *(_DWORD *)v31 = 136315138;
      *(_QWORD *)&v31[4] = v34;
      v27 = (const char *)_os_log_send_and_compose_impl(v26, v30, 0, 0);
      v28 = (char *)v27;
      if (v27)
        sub_100007780(v27);
    }
    else
    {
      v28 = 0;
    }
    free(v28);
  }

  return 1;
}

uint64_t sub_100081918(const __CFString *a1, uid_t a2, gid_t a3)
{
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  char *v10;
  void *v11;
  NSObject *v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  unsigned int v19;
  uint64_t v20;
  const char *v21;
  char *v22;
  NSObject *v23;
  unsigned int v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  int *v29;
  char *v30;
  unsigned int v31;
  _QWORD v32[2];
  stat v33;
  int v34;
  size_t v35;
  int v36;
  _BYTE v37[12];
  __int16 v38;
  char *v39;
  char buffer[1032];

  v36 = 0;
  v35 = 4;
  v34 = 0;
  memset(&v33, 0, sizeof(v33));
  if (sysctlbyname("kern.exclaves_status", &v36, &v35, 0, 0))
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v6 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_87;
    *(_QWORD *)buffer = 0;
    LODWORD(v7) = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v7 = v7;
    else
      v7 = v7 & 0xFFFFFFFE;
    if ((_DWORD)v7)
    {
      v8 = v6;
      v9 = *__error();
      *(_DWORD *)v37 = 67109120;
      *(_DWORD *)&v37[4] = v9;
      v10 = buffer;
      goto LABEL_10;
    }
LABEL_85:
    v11 = 0;
LABEL_86:
    free(v11);
LABEL_87:

    return *__error();
  }
  if (v36 == 1)
  {
    bzero(buffer, 0x400uLL);
    if (a1)
    {
      if (!CFStringGetCString(a1, buffer, 1024, 0x8000100u))
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v18 = (id)qword_1000E0198;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          *(_QWORD *)v37 = 0;
          v19 = sub_100007750(1);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            v20 = v19;
          else
            v20 = v19 & 0xFFFFFFFE;
          if ((_DWORD)v20)
          {
            LOWORD(v32[0]) = 0;
            v21 = (const char *)_os_log_send_and_compose_impl(v20, v37, 0, 0);
            v22 = (char *)v21;
            if (v21)
              sub_100007780(v21);
          }
          else
          {
            v22 = 0;
          }
          free(v22);
        }

        return 22;
      }
    }
    else
    {
      strcpy(buffer, "/private/var/mobile");
    }
    __strlcat_chk(buffer, "/exclave", 1024, 1024);
    if (stat(buffer, &v33))
    {
      if (*__error() != 2)
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v6 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          goto LABEL_87;
        v32[0] = 0;
        LODWORD(v7) = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v7 = v7;
        else
          v7 = v7 & 0xFFFFFFFE;
        if (!(_DWORD)v7)
          goto LABEL_85;
        goto LABEL_84;
      }
      if (mkdir(buffer, 0x1EDu))
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v6 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          goto LABEL_87;
        v32[0] = 0;
        LODWORD(v7) = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v7 = v7;
        else
          v7 = v7 & 0xFFFFFFFE;
        if (!(_DWORD)v7)
          goto LABEL_85;
        goto LABEL_84;
      }
      if (chown(buffer, a2, a3))
      {
        if (qword_1000E01A0 != -1)
          dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
        v6 = (id)qword_1000E0198;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          goto LABEL_87;
        v32[0] = 0;
        LODWORD(v7) = sub_100007750(1);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
          v7 = v7;
        else
          v7 = v7 & 0xFFFFFFFE;
        if (!(_DWORD)v7)
          goto LABEL_85;
        goto LABEL_84;
      }
    }
    if (!fsctl(buffer, 0x80044119uLL, &v34, 0))
    {
      if (qword_1000E01A0 != -1)
        dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
      v12 = (id)qword_1000E0198;
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        goto LABEL_98;
      v32[0] = 0;
      v31 = sub_100007750(1);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        v14 = v31;
      else
        v14 = v31 & 0xFFFFFFFE;
      if ((_DWORD)v14)
      {
        *(_DWORD *)v37 = 136315138;
        *(_QWORD *)&v37[4] = buffer;
        v15 = (char *)v32;
LABEL_22:
        v16 = (const char *)_os_log_send_and_compose_impl(v14, v15, 0, 0);
        v17 = (char *)v16;
        if (v16)
          sub_100007780(v16);
        goto LABEL_97;
      }
LABEL_96:
      v17 = 0;
LABEL_97:
      free(v17);
LABEL_98:

      return 0;
    }
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v6 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      goto LABEL_87;
    v32[0] = 0;
    LODWORD(v7) = sub_100007750(1);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      v7 = v7;
    else
      v7 = v7 & 0xFFFFFFFE;
    if (!(_DWORD)v7)
      goto LABEL_85;
LABEL_84:
    v8 = v6;
    v29 = __error();
    v30 = strerror(*v29);
    *(_DWORD *)v37 = 136315394;
    *(_QWORD *)&v37[4] = buffer;
    v38 = 2080;
    v39 = v30;
    v10 = (char *)v32;
LABEL_10:
    v11 = (void *)_os_log_send_and_compose_impl(v7, v10, 0, 0);

    if (v11)
      sub_100007780((const char *)v11);
    goto LABEL_86;
  }
  if (v36 == 255)
  {
    if (qword_1000E01A0 != -1)
      dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
    v12 = (id)qword_1000E0198;
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      goto LABEL_98;
    *(_QWORD *)buffer = 0;
    v13 = sub_100007750(1);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      v14 = v13;
    else
      v14 = v13 & 0xFFFFFFFE;
    if ((_DWORD)v14)
    {
      *(_WORD *)v37 = 0;
      v15 = buffer;
      goto LABEL_22;
    }
    goto LABEL_96;
  }
  if (qword_1000E01A0 != -1)
    dispatch_once(&qword_1000E01A0, &stru_1000D1BE8);
  v23 = (id)qword_1000E0198;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    *(_QWORD *)buffer = 0;
    v24 = sub_100007750(1);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      v25 = v24;
    else
      v25 = v24 & 0xFFFFFFFE;
    if ((_DWORD)v25)
    {
      *(_DWORD *)v37 = 67109120;
      *(_DWORD *)&v37[4] = v36;
      v26 = (const char *)_os_log_send_and_compose_impl(v25, buffer, 0, 0);
      v27 = (char *)v26;
      if (v26)
        sub_100007780(v26);
    }
    else
    {
      v27 = 0;
    }
    free(v27);
  }

  return 6;
}

void sub_1000821F8(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E0198;
  qword_1000E0198 = (uint64_t)v1;

}

id *sub_1000822E4(uint64_t a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  id *v24;

  v17 = a9;
  v18 = a8;
  v19 = a7;
  v20 = a6;
  v21 = a5;
  v22 = a4;
  v23 = a2;
  objc_opt_self(a1);
  v24 = sub_1000823DC((id *)[UMDarwinDirectoryUser alloc], v23, a3, v22, v21, v20, v19, v18, v17);

  return v24;
}

id *sub_1000823DC(id *a1, void *a2, int a3, void *a4, void *a5, void *a6, void *a7, void *a8, void *a9)
{
  id v17;
  id v18;
  id *v19;
  id v20;
  id v21;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  objc_super v28;

  v27 = a2;
  v26 = a4;
  v25 = a5;
  v24 = a6;
  v23 = a7;
  v17 = a8;
  v18 = a9;
  if (a1)
  {
    v28.receiver = a1;
    v28.super_class = (Class)UMDarwinDirectoryUser;
    v19 = (id *)objc_msgSendSuper2(&v28, "init");
    if (!v19)
      sub_1000ACE0C();
    a1 = v19;

    objc_storeStrong(a1 + 2, a2);
    *((_DWORD *)a1 + 2) = a3;
    objc_storeStrong(a1 + 3, a4);
    objc_storeStrong(a1 + 4, a5);
    objc_storeStrong(a1 + 5, a6);
    objc_storeStrong(a1 + 6, a7);
    objc_storeStrong(a1 + 7, a8);
    v20 = objc_msgSend(v18, "mutableCopy");
    v21 = a1[8];
    a1[8] = v20;

  }
  return a1;
}

id *sub_100082AFC(uint64_t a1, void *a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id *v12;

  v9 = a5;
  v10 = a4;
  v11 = a2;
  objc_opt_self(a1);
  v12 = sub_100082B88((id *)[UMDarwinDirectoryGroup alloc], v11, a3, v10, v9);

  return v12;
}

id *sub_100082B88(id *a1, void *a2, int a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v18;

  v9 = a2;
  v10 = a4;
  v11 = a5;
  if (a1)
  {
    v18.receiver = a1;
    v18.super_class = (Class)UMDarwinDirectoryGroup;
    v12 = (id *)objc_msgSendSuper2(&v18, "init");
    if (!v12)
      sub_1000ACE0C();
    a1 = v12;

    v13 = objc_msgSend(v9, "copy");
    v14 = a1[2];
    a1[2] = v13;

    *((_DWORD *)a1 + 2) = a3;
    objc_storeStrong(a1 + 3, a4);
    v15 = objc_msgSend(v11, "copy");
    v16 = a1[4];
    a1[4] = v15;

  }
  return a1;
}

void sub_100082F14(void *a1, char *newValue)
{
  if (a1)
    objc_setProperty_nonatomic_copy(a1, newValue, newValue, 32);
}

void sub_1000834DC(_Unwind_Exception *a1)
{
  void *v1;

  free(v1);
  _Unwind_Resume(a1);
}

void sub_100083A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100083A90(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_100083AA0(uint64_t a1)
{

}

void sub_100083AA8(uint64_t a1, void *a2, int a3)
{
  id v6;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
  v6 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a3;

}

void sub_100083D4C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E01A8;
  qword_1000E01A8 = (uint64_t)v1;

}

uint64_t sub_100083D80(uint64_t a1, unsigned int a2)
{
  objc_opt_self();
  if (a2 >= 9)
    return 0x7FFFFFFFLL;
  else
    return a2;
}

double sub_100083DAC@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  const char *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  id v11;
  void *v12;
  unsigned __int8 v13;
  double result;
  uint64_t v15;
  const char *v16;
  id v17;
  _QWORD v18[2];
  uint64_t v19;

  if (a1)
  {
    *(_OWORD *)(a2 + 244) = 0u;
    *(_OWORD *)(a2 + 228) = 0u;
    *(_OWORD *)(a2 + 212) = 0u;
    *(_OWORD *)(a2 + 196) = 0u;
    *(_OWORD *)(a2 + 180) = 0u;
    *(_OWORD *)(a2 + 164) = 0u;
    *(_OWORD *)(a2 + 148) = 0u;
    *(_OWORD *)(a2 + 132) = 0u;
    *(_OWORD *)(a2 + 116) = 0u;
    *(_OWORD *)(a2 + 100) = 0u;
    *(_OWORD *)(a2 + 84) = 0u;
    *(_OWORD *)(a2 + 68) = 0u;
    *(_OWORD *)(a2 + 52) = 0u;
    *(_OWORD *)(a2 + 36) = 0u;
    *(_OWORD *)(a2 + 20) = 0u;
    *(_OWORD *)(a2 + 4) = 0u;
    *(_QWORD *)(a2 + 340) = 0;
    *(_OWORD *)(a2 + 308) = 0u;
    *(_OWORD *)(a2 + 324) = 0u;
    *(_OWORD *)(a2 + 276) = 0u;
    *(_OWORD *)(a2 + 292) = 0u;
    *(_OWORD *)(a2 + 260) = 0u;
    *(_DWORD *)a2 = 2;
    *(_DWORD *)(a2 + 4) = sub_100007ECC((uint64_t)a1);
    v4 = sub_1000063CC((uint64_t)a1);
    v5 = sub_100083D80((uint64_t)UMKPersonaInfo, v4);
    *(_DWORD *)(a2 + 8) = v5;
    if (v5 < 9)
    {
      v11 = sub_100076DC0(a1, v6);
      v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
      v13 = objc_msgSend(v12, "getCString:maxLength:encoding:", a2 + 88, 256, 4);

      if ((v13 & 1) != 0)
      {
        *(_DWORD *)(a2 + 344) = sub_1000055AC((uint64_t)a1);
        return result;
      }
      if (qword_1000E01C0 != -1)
        dispatch_once(&qword_1000E01C0, &stru_1000D1C50);
      v7 = (id)qword_1000E01B8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      v19 = 0;
      LODWORD(v15) = sub_100007750(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        v15 = v15;
      else
        v15 = v15 & 0xFFFFFFFE;
      if ((_DWORD)v15)
      {
        v9 = v7;
        v17 = sub_100076DC0(a1, v16);
        LODWORD(v18[0]) = 138543362;
        *(_QWORD *)((char *)v18 + 4) = objc_claimAutoreleasedReturnValue(v17);
        v10 = (char *)_os_log_send_and_compose_impl(v15, &v19, 0, 0);

LABEL_21:
        if (v10)
          sub_100007780(v10);
        goto LABEL_24;
      }
    }
    else
    {
      if (qword_1000E01C0 != -1)
        dispatch_once(&qword_1000E01C0, &stru_1000D1C50);
      v7 = (id)qword_1000E01B8;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        goto LABEL_25;
      v18[0] = 0;
      LODWORD(v8) = sub_100007750(0);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
        v8 = v8;
      else
        v8 = v8 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = v7;
        LODWORD(v19) = 67109120;
        HIDWORD(v19) = sub_1000063CC((uint64_t)a1);
        v10 = (char *)_os_log_send_and_compose_impl(v8, v18, 0, 0);
        goto LABEL_21;
      }
    }
    v10 = 0;
LABEL_24:
    free(v10);
LABEL_25:

    result = 0.0;
    *(_OWORD *)(a2 + 332) = 0u;
    *(_OWORD *)(a2 + 304) = 0u;
    *(_OWORD *)(a2 + 320) = 0u;
    *(_OWORD *)(a2 + 272) = 0u;
    *(_OWORD *)(a2 + 288) = 0u;
    *(_OWORD *)(a2 + 240) = 0u;
    *(_OWORD *)(a2 + 256) = 0u;
    *(_OWORD *)(a2 + 208) = 0u;
    *(_OWORD *)(a2 + 224) = 0u;
    *(_OWORD *)(a2 + 176) = 0u;
    *(_OWORD *)(a2 + 192) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 160) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    return result;
  }
  result = 0.0;
  *(_OWORD *)(a2 + 304) = 0u;
  *(_OWORD *)(a2 + 320) = 0u;
  *(_OWORD *)(a2 + 272) = 0u;
  *(_OWORD *)(a2 + 288) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  *(_OWORD *)(a2 + 256) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 332) = 0u;
  return result;
}

void sub_100084BD4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E01B8;
  qword_1000E01B8 = (uint64_t)v1;

}

void sub_100084C08(uint64_t a1, void *a2)
{
  if (a1)
    objc_storeStrong((id *)(a1 + 8), a2);
}

id *sub_100084C9C(id *a1, void *a2)
{
  id v4;
  id *v5;
  objc_super v7;

  v4 = a2;
  if (a1)
  {
    v7.receiver = a1;
    v7.super_class = (Class)UMDVolumeHelper;
    v5 = (id *)objc_msgSendSuper2(&v7, "init");
    if (!v5)
      sub_1000ACE0C();
    a1 = v5;

    objc_storeStrong(a1 + 2, a2);
  }

  return a1;
}

void sub_1000855A4(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "volume");
  v2 = (void *)qword_1000E01C8;
  qword_1000E01C8 = (uint64_t)v1;

}

void sub_10008564C(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  uint64_t v6;
  id v7;

  v1 = objc_opt_new(*(_QWORD *)(a1 + 32));
  v2 = (void *)qword_1000E01D8;
  qword_1000E01D8 = v1;

  if (qword_1000E01D8)
  {
    v3 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.mobile.keybagd.UserManager.xpc"));
    objc_msgSend((id)qword_1000E01D8, "setXpcListener:", v3);

    v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1000E01D8, "xpcListener"));
    v5 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v4, "_xpcConnection"));
    __xpc_connection_set_logging(v5, 0);

    v6 = qword_1000E01D8;
    v7 = (id)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1000E01D8, "xpcListener"));
    objc_msgSend(v7, "setDelegate:", v6);

  }
}

void sub_100085B88(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v2, "removeClient:", *(_QWORD *)(a1 + 32));

}

void sub_100085BCC(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v2, "removeClient:", *(_QWORD *)(a1 + 32));

}

void sub_100085C10(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v2, "removeClient:", *(_QWORD *)(a1 + 32));

}

void sub_100085C54(uint64_t a1)
{
  id v2;

  v2 = (id)objc_claimAutoreleasedReturnValue(+[RDServer sharedServer](RDServer, "sharedServer"));
  objc_msgSend(v2, "removeClient:", *(_QWORD *)(a1 + 32));

}

void sub_100085CB8()
{
  void *v0;
  void *v1;

  v0 = objc_autoreleasePoolPush();
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[RDXPCListener sharedListener](RDXPCListener, "sharedListener"));
  objc_msgSend(v1, "startListening");

  objc_autoreleasePoolPop(v0);
}

id sub_100085D8C()
{
  RXSyncXPCListener *v0;
  void *v1;
  id v2;
  void *v3;
  void *v4;

  v0 = objc_opt_new(RXSyncXPCListener);
  v1 = (void *)qword_1000E01F0;
  qword_1000E01F0 = (uint64_t)v0;

  v2 = objc_msgSend(objc_alloc((Class)NSXPCListener), "initWithMachServiceName:", CFSTR("com.apple.mobile.usermanagerd.xpc"));
  v3 = (void *)qword_1000E01E8;
  qword_1000E01E8 = (uint64_t)v2;

  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend((id)qword_1000E01E8, "_xpcConnection"));
  __xpc_connection_set_logging(v4, 0);

  objc_msgSend((id)qword_1000E01E8, "setDelegate:", qword_1000E01F0);
  return objc_msgSend((id)qword_1000E01E8, "resume");
}

void sub_100085E1C(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "legacy");
  v2 = (void *)qword_1000E01F8;
  qword_1000E01F8 = (uint64_t)v1;

}

void sub_100086584(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E0208;
  qword_1000E0208 = (uint64_t)v1;

}

const void *sub_1000865B8(const __CFDictionary *a1, const void *a2)
{
  const void *result;
  const void *v3;
  CFTypeID v4;

  result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFDataGetTypeID())
      return v3;
    else
      return 0;
  }
  return result;
}

const void *sub_1000865F0(const __CFDictionary *a1, const void *a2)
{
  const void *result;
  const void *v3;
  CFTypeID v4;

  result = CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFArrayGetTypeID())
      return v3;
    else
      return 0;
  }
  return result;
}

uint64_t sub_100086628(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  uint64_t valuePtr;

  v2 = -1;
  valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberLongLongType, &valuePtr);
      return valuePtr;
    }
    else
    {
      return -1;
    }
  }
  return v2;
}

uint64_t sub_100086690(const __CFDictionary *a1, const void *a2)
{
  uint64_t v2;
  const __CFNumber *Value;
  const __CFNumber *v4;
  CFTypeID v5;
  uint64_t valuePtr;

  v2 = -1;
  valuePtr = -1;
  Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    v4 = Value;
    v5 = CFGetTypeID(Value);
    if (v5 == CFNumberGetTypeID())
    {
      CFNumberGetValue(v4, kCFNumberSInt64Type, &valuePtr);
      return valuePtr;
    }
    else
    {
      return -1;
    }
  }
  return v2;
}

const __CFBoolean *sub_1000866F8(const __CFDictionary *a1, const void *a2)
{
  const __CFBoolean *result;
  const __CFBoolean *v3;
  CFTypeID v4;

  result = (const __CFBoolean *)CFDictionaryGetValue(a1, a2);
  if (result)
  {
    v3 = result;
    v4 = CFGetTypeID(result);
    if (v4 == CFBooleanGetTypeID())
      return (const __CFBoolean *)(CFBooleanGetValue(v3) != 0);
    else
      return 0;
  }
  return result;
}

const void *sub_100086748(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  if (!Value)
    return 0;
  v3 = Value;
  v4 = CFGetTypeID(Value);
  if (v4 != CFStringGetTypeID())
    return 0;
  return v3;
}

BOOL sub_100086788(const __CFDictionary *a1, const void *a2, char *a3, int a4)
{
  const __CFString *v6;

  v6 = (const __CFString *)sub_100086748(a1, a2);
  return v6 && CFStringGetCString(v6, a3, a4, 0x8000100u);
}

CFTypeRef sub_1000867D4(const __CFDictionary *a1, const void *a2)
{
  const void *Value;
  const void *v3;
  CFTypeID v4;

  Value = CFDictionaryGetValue(a1, a2);
  if (Value && (v3 = Value, v4 = CFGetTypeID(Value), v4 == CFDictionaryGetTypeID()))
    return CFRetain(v3);
  else
    return 0;
}

CFTypeRef sub_100086820(const void *a1)
{
  __CFWriteStream *v2;
  __CFWriteStream *v3;
  CFTypeRef v4;

  v2 = CFWriteStreamCreateWithAllocatedBuffers(kCFAllocatorDefault, kCFAllocatorDefault);
  if (!v2)
    return 0;
  v3 = v2;
  if (CFWriteStreamOpen(v2))
  {
    if (CFPropertyListWrite(a1, v3, kCFPropertyListBinaryFormat_v1_0, 0, 0) < 1)
      v4 = 0;
    else
      v4 = CFWriteStreamCopyProperty(v3, kCFStreamPropertyDataWritten);
    CFWriteStreamClose(v3);
  }
  else
  {
    v4 = 0;
  }
  CFRelease(v3);
  return v4;
}

CFPropertyListRef sub_1000868C4(UInt8 *bytes, CFIndex length)
{
  __CFReadStream *v2;
  __CFReadStream *v3;
  CFPropertyListRef v4;
  CFPropertyListFormat format;

  format = kCFPropertyListBinaryFormat_v1_0;
  v2 = CFReadStreamCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
  if (v2)
  {
    v3 = v2;
    if (CFReadStreamOpen(v2))
    {
      v4 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v3, 0, 2uLL, &format, 0);
      if (!v4)
        syslog(7, "Could not create object from stream");
      CFReadStreamClose(v3);
    }
    else
    {
      syslog(7, "Could not open the stream");
      v4 = 0;
    }
    CFRelease(v3);
  }
  else
  {
    syslog(7, "Could not create stream for serialized data");
    return 0;
  }
  return v4;
}

const void *sub_1000869A0(UInt8 *bytes, CFIndex length)
{
  const void *v2;
  __CFReadStream *v4;
  __CFReadStream *v5;
  CFPropertyListRef v6;
  CFTypeID v7;
  CFPropertyListFormat format;

  v2 = 0;
  format = kCFPropertyListBinaryFormat_v1_0;
  if (bytes && length)
  {
    v4 = CFReadStreamCreateWithBytesNoCopy(kCFAllocatorDefault, bytes, length, kCFAllocatorNull);
    if (!v4)
    {
      syslog(7, "Could not create stream from serialized data");
      return 0;
    }
    v5 = v4;
    if (CFReadStreamOpen(v4))
    {
      v6 = CFPropertyListCreateWithStream(kCFAllocatorDefault, v5, length, 2uLL, &format, 0);
      v2 = v6;
      if (!v6)
      {
        syslog(7, "Could not create dictionary from stream");
        goto LABEL_9;
      }
      v7 = CFGetTypeID(v6);
      if (v7 == CFDictionaryGetTypeID())
      {
LABEL_9:
        CFReadStreamClose(v5);
        CFRelease(v5);
        return v2;
      }
      CFRelease(v2);
    }
    else
    {
      syslog(7, "Could not open the stream");
    }
    v2 = 0;
    goto LABEL_9;
  }
  return v2;
}

const void *sub_100086AB4(const char *a1)
{
  int v2;
  int v3;
  void *v4;
  ssize_t v5;
  const void *v6;
  int *v8;
  char *v9;
  int *v10;
  char *v11;
  int *v12;
  stat v13;

  memset(&v13, 0, sizeof(v13));
  v2 = open(a1, 0);
  if (v2 == -1)
  {
    v8 = __error();
    v9 = strerror(*v8);
    syslog(7, "Could not open %s: %s", a1, v9);
    v4 = 0;
    v6 = 0;
    goto LABEL_7;
  }
  v3 = v2;
  if (fstat(v2, &v13))
  {
    v10 = __error();
    v11 = strerror(*v10);
    syslog(7, "Could not fstat %s: %s", a1, v11);
    v6 = 0;
    v4 = 0;
    goto LABEL_6;
  }
  v4 = malloc_type_malloc(LODWORD(v13.st_size), 0x772E5F62uLL);
  if (!v4)
  {
    syslog(7, "Could not allocate buffer");
LABEL_12:
    v6 = 0;
    goto LABEL_6;
  }
  v5 = read(v3, v4, v13.st_size);
  if (v5 != v13.st_size)
  {
    v12 = __error();
    strerror(*v12);
    syslog(7, "Could not read %s: %s");
    goto LABEL_12;
  }
  v6 = sub_1000869A0((UInt8 *)v4, v5);
LABEL_6:
  close(v3);
LABEL_7:
  free(v4);
  return v6;
}

CFMutableDictionaryRef sub_100086BFC()
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFMutableDictionaryRef sub_100086C4C(CFDictionaryRef theDict)
{
  CFMutableDictionaryRef result;

  result = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFMutableArrayRef sub_100086C90()
{
  CFMutableArrayRef result;

  result = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

CFStringRef sub_100086CD8(char *cStr)
{
  CFStringRef result;

  result = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (!result)
  {
    syslog(7, "Out of Memory!!! Dying!...so...cold....");
    exit(-1);
  }
  return result;
}

uint64_t sub_100086D20(uint32_t *a1)
{
  mach_port_t v2;
  uint64_t result;
  uint32_t multiuser_flags;

  multiuser_flags = 0;
  v2 = mach_host_self();
  result = host_get_multiuser_config_flags(v2, &multiuser_flags);
  if (a1)
  {
    if (!(_DWORD)result)
      *a1 = multiuser_flags;
  }
  return result;
}

uint64_t sub_100086D64(mach_port_name_t name)
{
  mach_port_type_t ptype;

  ptype = 0;
  if (mach_port_type(mach_task_self_, name, &ptype))
    return 0;
  else
    return ptype;
}

void sub_100086DA4(mach_port_name_t name)
{
  kern_return_t v2;
  mach_port_type_t v3;
  BOOL v4;
  mach_port_type_t ptype;

  ptype = 0;
  v2 = mach_port_type(mach_task_self_, name, &ptype);
  v3 = ptype;
  if (v2)
    v4 = 1;
  else
    v4 = ptype == 0;
  if (v4)
  {
    syslog(7, "Port:%d has NORIGHTS");
    return;
  }
  if ((ptype & 0x10000) != 0)
  {
    syslog(7, "Port:%d has SENDRIGHT", name);
    if ((v3 & 0x20000) == 0)
    {
LABEL_9:
      if ((v3 & 0x40000) == 0)
        goto LABEL_10;
LABEL_14:
      syslog(7, "Port:%d has SENDONCERIGHT", name);
      if ((v3 & 0x100000) == 0)
        return;
      goto LABEL_15;
    }
  }
  else if ((ptype & 0x20000) == 0)
  {
    goto LABEL_9;
  }
  syslog(7, "Port:%d has RECEIVERIGHT", name);
  if ((v3 & 0x40000) != 0)
    goto LABEL_14;
LABEL_10:
  if ((v3 & 0x100000) != 0)
LABEL_15:
    syslog(7, "Port:%d has DEADNAME");
}

uint64_t sub_100086E7C()
{
  size_t __len;
  char __big[1024];

  __len = 1023;
  bzero(__big, 0x400uLL);
  if (sysctlbyname("kern.bootargs", __big, &__len, 0, 0) || strnstr(__big, "um-migration-debug=0", __len))
    return 0;
  if (strnstr(__big, "um-migration-debug=1", __len))
    return 1;
  if (strnstr(__big, "um-migration-debug=2", __len))
    return 2;
  if (strnstr(__big, "um-migration-debug=3", __len))
    return 3;
  if (strnstr(__big, "um-migration-debug=4", __len))
    return 4;
  if (strnstr(__big, "um-migration-debug=5", __len))
    return 5;
  if (strnstr(__big, "um-migration-debug=100", __len))
    return 100;
  if (strnstr(__big, "um-migration-debug=101", __len))
    return 101;
  return 0;
}

void sub_100087230(uint64_t a1, char a2, void *a3)
{
  id v5;
  NSObject *v6;
  unsigned int v7;
  uint64_t v8;
  void *v9;
  unsigned int v10;
  const char *v11;
  char *v12;
  uint64_t v13;
  int v14;
  id v15;

  v5 = a3;
  if ((a2 & 1) != 0)
  {
    if (qword_1000E0220 != -1)
      dispatch_once(&qword_1000E0220, &stru_1000D1CF8);
    v6 = (id)qword_1000E0218;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0;
      v7 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        v8 = v7;
      else
        v8 = v7 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v9 = *(void **)(a1 + 32);
        v14 = 138543362;
        v15 = v9;
        goto LABEL_18;
      }
      goto LABEL_20;
    }
  }
  else
  {
    if (qword_1000E0220 != -1)
      dispatch_once(&qword_1000E0220, &stru_1000D1CF8);
    v6 = (id)qword_1000E0218;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v10 = sub_100007750(0);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        v8 = v10;
      else
        v8 = v10 & 0xFFFFFFFE;
      if ((_DWORD)v8)
      {
        v14 = 138543362;
        v15 = v5;
LABEL_18:
        v11 = (const char *)_os_log_send_and_compose_impl(v8, &v13, 0, 0);
        v12 = (char *)v11;
        if (v11)
          sub_100007780(v11);
        goto LABEL_21;
      }
LABEL_20:
      v12 = 0;
LABEL_21:
      free(v12);
    }
  }

}

void sub_100087428(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "sideeffect");
  v2 = (void *)qword_1000E0218;
  qword_1000E0218 = (uint64_t)v1;

}

id sub_10008745C(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  id *v12;
  void *v13;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v5 = objc_msgSend(v3, "uid");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "primaryGroupUUID"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fullName"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "homeDirectory"));
  v10 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "shell"));
  v11 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "memberships"));

  v12 = sub_1000822E4((uint64_t)UMDarwinDirectoryUser, v4, v5, v6, v7, v8, v9, v10, v11);
  v13 = (void *)objc_claimAutoreleasedReturnValue(v12);

  return v13;
}

id sub_100087588(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;

  v1 = (id)a1;
  if (a1)
  {
    v2 = sub_10001C3C4(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = sub_100007ECC((uint64_t)v1);
    v5 = sub_10001BE1C((uint64_t)v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = sub_100007EF0((uint64_t)v1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v9 = sub_10001C730((uint64_t)v1);
    v10 = (void *)objc_claimAutoreleasedReturnValue(v9);
    v11 = sub_100007EE4((uint64_t)v1);
    v12 = (void *)objc_claimAutoreleasedReturnValue(v11);
    v13 = sub_10001BEE8((uint64_t)v1);
    v14 = (void *)objc_claimAutoreleasedReturnValue(v13);
    v15 = sub_100007ED8((uint64_t)v1);
    v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
    v1 = (id)objc_claimAutoreleasedReturnValue(+[DDIUser userWithUUID:uid:name:primaryGroupUUID:fullName:homeDirectory:shell:memberships:](DDIUser, "userWithUUID:uid:name:primaryGroupUUID:fullName:homeDirectory:shell:memberships:", v3, v4, v6, v8, v10, v12, v14, v16));

  }
  return v1;
}

id sub_1000876A0(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  int v5;
  void *v6;
  void *v7;
  id *v8;
  void *v9;

  v3 = a2;
  objc_opt_self(a1);
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "name"));
  v5 = objc_msgSend(v3, "gid");
  v6 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "uuid"));
  v7 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v3, "fullName"));

  v8 = sub_100082AFC((uint64_t)UMDarwinDirectoryGroup, v4, v5, v6, v7);
  v9 = (void *)objc_claimAutoreleasedReturnValue(v8);

  return v9;
}

id sub_100087754(uint64_t a1)
{
  id v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;

  v1 = (id)a1;
  if (a1)
  {
    v2 = sub_10001C3C4(a1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(v2);
    v4 = sub_100007ECC((uint64_t)v1);
    v5 = sub_10001BE1C((uint64_t)v1);
    v6 = (void *)objc_claimAutoreleasedReturnValue(v5);
    v7 = sub_100007EF0((uint64_t)v1);
    v8 = (void *)objc_claimAutoreleasedReturnValue(v7);
    v1 = (id)objc_claimAutoreleasedReturnValue(+[DDIGroup groupWithUUID:gid:name:fullName:](DDIGroup, "groupWithUUID:gid:name:fullName:", v3, v4, v6, v8));

  }
  return v1;
}

void sub_100087868(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  id v35;
  void *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  _BYTE v53[128];
  _BYTE v54[128];
  _BYTE v55[128];
  _BYTE v56[128];

  v5 = a2;
  v6 = a3;
  v7 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v49 = 0u;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v9 = v5;
  v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
  if (v10)
  {
    v11 = v10;
    v12 = *(_QWORD *)v50;
    do
    {
      v13 = 0;
      do
      {
        if (*(_QWORD *)v50 != v12)
          objc_enumerationMutation(v9);
        v14 = sub_10008745C((uint64_t)UMDarwinDirectoryUser, *(void **)(*((_QWORD *)&v49 + 1) + 8 * (_QWORD)v13));
        v15 = (void *)objc_claimAutoreleasedReturnValue(v14);
        objc_msgSend(v7, "addObject:", v15);

        v13 = (char *)v13 + 1;
      }
      while (v11 != v13);
      v11 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v49, v56, 16);
    }
    while (v11);
  }

  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v16 = v6;
  v17 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)v46;
    do
    {
      v20 = 0;
      do
      {
        if (*(_QWORD *)v46 != v19)
          objc_enumerationMutation(v16);
        v21 = sub_1000876A0((uint64_t)UMDarwinDirectoryGroup, *(void **)(*((_QWORD *)&v45 + 1) + 8 * (_QWORD)v20));
        v22 = (void *)objc_claimAutoreleasedReturnValue(v21);
        objc_msgSend(v8, "addObject:", v22);

        v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      v18 = objc_msgSend(v16, "countByEnumeratingWithState:objects:count:", &v45, v55, 16);
    }
    while (v18);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_msgSend(v9, "removeAllObjects");
  objc_msgSend(v16, "removeAllObjects");
  v43 = 0u;
  v44 = 0u;
  v41 = 0u;
  v42 = 0u;
  v23 = v7;
  v24 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
  if (v24)
  {
    v25 = v24;
    v26 = *(_QWORD *)v42;
    do
    {
      v27 = 0;
      do
      {
        if (*(_QWORD *)v42 != v26)
          objc_enumerationMutation(v23);
        v28 = sub_100087588(*(_QWORD *)(*((_QWORD *)&v41 + 1) + 8 * (_QWORD)v27));
        v29 = (void *)objc_claimAutoreleasedReturnValue(v28);
        objc_msgSend(v9, "addObject:", v29);

        v27 = (char *)v27 + 1;
      }
      while (v25 != v27);
      v25 = objc_msgSend(v23, "countByEnumeratingWithState:objects:count:", &v41, v54, 16);
    }
    while (v25);
  }

  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v30 = v8;
  v31 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v37, v53, 16);
  if (v31)
  {
    v32 = v31;
    v33 = *(_QWORD *)v38;
    do
    {
      v34 = 0;
      do
      {
        if (*(_QWORD *)v38 != v33)
          objc_enumerationMutation(v30);
        v35 = sub_100087754(*(_QWORD *)(*((_QWORD *)&v37 + 1) + 8 * (_QWORD)v34));
        v36 = (void *)objc_claimAutoreleasedReturnValue(v35);
        objc_msgSend(v16, "addObject:", v36, (_QWORD)v37);

        v34 = (char *)v34 + 1;
      }
      while (v32 != v34);
      v32 = objc_msgSend(v30, "countByEnumeratingWithState:objects:count:", &v37, v53, 16);
    }
    while (v32);
  }

}

void sub_100087DA0(uint64_t a1, void *a2, void *a3, _QWORD *a4)
{
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  id v36;
  void *v37;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  _BYTE v55[128];
  _BYTE v56[128];
  _BYTE v57[128];
  _BYTE v58[128];

  v6 = a2;
  v7 = a3;
  v8 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v9 = (void *)objc_claimAutoreleasedReturnValue(+[NSMutableArray array](NSMutableArray, "array"));
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  v54 = 0u;
  v10 = v6;
  v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
  if (v11)
  {
    v12 = v11;
    v13 = *(_QWORD *)v52;
    do
    {
      v14 = 0;
      do
      {
        if (*(_QWORD *)v52 != v13)
          objc_enumerationMutation(v10);
        v15 = sub_10008745C((uint64_t)UMDarwinDirectoryUser, *(void **)(*((_QWORD *)&v51 + 1) + 8 * (_QWORD)v14));
        v16 = (void *)objc_claimAutoreleasedReturnValue(v15);
        objc_msgSend(v8, "addObject:", v16);

        v14 = (char *)v14 + 1;
      }
      while (v12 != v14);
      v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v51, v58, 16);
    }
    while (v12);
  }

  v49 = 0u;
  v50 = 0u;
  v47 = 0u;
  v48 = 0u;
  v17 = v7;
  v18 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
  if (v18)
  {
    v19 = v18;
    v20 = *(_QWORD *)v48;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v48 != v20)
          objc_enumerationMutation(v17);
        v22 = sub_1000876A0((uint64_t)UMDarwinDirectoryGroup, *(void **)(*((_QWORD *)&v47 + 1) + 8 * (_QWORD)v21));
        v23 = (void *)objc_claimAutoreleasedReturnValue(v22);
        objc_msgSend(v9, "addObject:", v23);

        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v19 = objc_msgSend(v17, "countByEnumeratingWithState:objects:count:", &v47, v57, 16);
    }
    while (v19);
  }

  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  if (!*a4)
  {
    objc_msgSend(v10, "removeAllObjects");
    objc_msgSend(v17, "removeAllObjects");
    v45 = 0u;
    v46 = 0u;
    v43 = 0u;
    v44 = 0u;
    v24 = v8;
    v25 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v43, v56, 16);
    if (v25)
    {
      v26 = v25;
      v27 = *(_QWORD *)v44;
      do
      {
        v28 = 0;
        do
        {
          if (*(_QWORD *)v44 != v27)
            objc_enumerationMutation(v24);
          v29 = sub_100087588(*(_QWORD *)(*((_QWORD *)&v43 + 1) + 8 * (_QWORD)v28));
          v30 = (void *)objc_claimAutoreleasedReturnValue(v29);
          objc_msgSend(v10, "addObject:", v30);

          v28 = (char *)v28 + 1;
        }
        while (v26 != v28);
        v26 = objc_msgSend(v24, "countByEnumeratingWithState:objects:count:", &v43, v56, 16);
      }
      while (v26);
    }

    v41 = 0u;
    v42 = 0u;
    v39 = 0u;
    v40 = 0u;
    v31 = v9;
    v32 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v39, v55, 16);
    if (v32)
    {
      v33 = v32;
      v34 = *(_QWORD *)v40;
      do
      {
        v35 = 0;
        do
        {
          if (*(_QWORD *)v40 != v34)
            objc_enumerationMutation(v31);
          v36 = sub_100087754(*(_QWORD *)(*((_QWORD *)&v39 + 1) + 8 * (_QWORD)v35));
          v37 = (void *)objc_claimAutoreleasedReturnValue(v36);
          objc_msgSend(v17, "addObject:", v37);

          v35 = (char *)v35 + 1;
        }
        while (v33 != v35);
        v33 = objc_msgSend(v31, "countByEnumeratingWithState:objects:count:", &v39, v55, 16);
      }
      while (v33);
    }

  }
}

void sub_100088120(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "user");
  v2 = (void *)qword_1000E0228;
  qword_1000E0228 = (uint64_t)v1;

}

id sub_100088154(void *a1)
{
  id v1;
  void *v2;
  void *v3;

  if (a1)
  {
    v1 = sub_10001ACA4((uint64_t)NSUUID, a1);
    v2 = (void *)objc_claimAutoreleasedReturnValue(v1);
    v3 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(v2, "UUIDString"));

  }
  else
  {
    v3 = 0;
  }
  return v3;
}

id sub_1000881A4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  int v5;

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v3 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v4 = objc_msgSend(v2, "BOOLValue");
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 2;
  }
  *__error() = v5;

  return v4;
}

id sub_100088228(void *a1, uint64_t a2, id a3)
{
  void *v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    a3 = objc_msgSend(v4, "intValue");
    v6 = 0;
  }
  else
  {
    v6 = 2;
  }
  *__error() = v6;

  return a3;
}

id sub_1000882AC(void *a1, uint64_t a2, id a3)
{
  void *v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    a3 = objc_msgSend(v4, "unsignedIntValue");
    v6 = 0;
  }
  else
  {
    v6 = 2;
  }
  *__error() = v6;

  return a3;
}

id sub_100088330(void *a1, uint64_t a2, id a3)
{
  void *v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    a3 = objc_msgSend(v4, "longLongValue");
    v6 = 0;
  }
  else
  {
    v6 = 2;
  }
  *__error() = v6;

  return a3;
}

id sub_1000883B4(void *a1, uint64_t a2, id a3)
{
  void *v4;
  uint64_t v5;
  int v6;

  if (!a1)
    return 0;
  v4 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v5 = objc_opt_class(NSNumber);
  if ((objc_opt_isKindOfClass(v4, v5) & 1) != 0)
  {
    a3 = objc_msgSend(v4, "unsignedLongLongValue");
    v6 = 0;
  }
  else
  {
    v6 = 2;
  }
  *__error() = v6;

  return a3;
}

id sub_100088438(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[128];

  if (!a1)
    return 0;
  v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
  v3 = objc_opt_class(NSArray);
  if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
  {
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v4 = v2;
    v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)v14;
      while (2)
      {
        v8 = 0;
        do
        {
          if (*(_QWORD *)v14 != v7)
            objc_enumerationMutation(v4);
          v9 = *(_QWORD *)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)v8);
          v10 = objc_opt_class(NSString);
          if ((objc_opt_isKindOfClass(v9, v10) & 1) == 0)
          {
            *__error() = 2;

            v11 = 0;
            goto LABEL_14;
          }
          v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v17, 16);
        if (v6)
          continue;
        break;
      }
    }

    v11 = (void *)objc_claimAutoreleasedReturnValue(+[NSSet setWithArray:](NSSet, "setWithArray:", v4, (_QWORD)v13));
    *__error() = 0;
LABEL_14:

  }
  else
  {
    v11 = 0;
    *__error() = 2;
  }

  return v11;
}

id sub_1000885D0(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  void *v5;
  int v6;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
    v3 = objc_opt_class(NSString);
    if ((objc_opt_isKindOfClass(v2, v3) & 1) != 0)
    {
      v4 = sub_10001ACA4((uint64_t)NSUUID, v2);
      v5 = (void *)objc_claimAutoreleasedReturnValue(v4);
      v6 = 2 * (v5 == 0);
    }
    else
    {
      v5 = 0;
      v6 = 2;
    }
    *__error() = v6;

  }
  else
  {
    v5 = 0;
  }
  return v5;
}

id sub_100088668(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  int *v5;
  id v6;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
    v3 = objc_opt_class(NSDate);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
    v5 = __error();
    if ((isKindOfClass & 1) != 0)
    {
      *v5 = 0;
      v6 = v2;
    }
    else
    {
      v6 = 0;
      *v5 = 2;
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_1000886E4(void *a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  char isKindOfClass;
  int *v5;
  id v6;

  if (a1)
  {
    v2 = (void *)objc_claimAutoreleasedReturnValue(objc_msgSend(a1, "objectForKey:", a2));
    v3 = objc_opt_class(NSData);
    isKindOfClass = objc_opt_isKindOfClass(v2, v3);
    v5 = __error();
    if ((isKindOfClass & 1) != 0)
    {
      *v5 = 0;
      v6 = v2;
    }
    else
    {
      v6 = 0;
      *v5 = 2;
    }

  }
  else
  {
    v6 = 0;
  }
  return v6;
}

id sub_100088760(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  id v10;
  int v11;
  id v12;

  if (!a1)
    return 0;
  v10 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a1, 200, 0, &v10));
  v2 = v10;
  if (!v1)
  {
    if (qword_1000E0240 != -1)
      dispatch_once(&qword_1000E0240, &stru_1000D1D88);
    v3 = (id)qword_1000E0238;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v9 = 0;
      v4 = sub_100007750(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v11 = 138543362;
        v12 = v2;
        v6 = (const char *)_os_log_send_and_compose_impl(v5, &v9, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

  }
  return v1;
}

id sub_1000888DC(uint64_t a1)
{
  void *v1;
  id v2;
  NSObject *v3;
  unsigned int v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  uint64_t v9;
  id v10;
  int v11;
  id v12;

  if (!a1)
    return 0;
  v10 = 0;
  v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", a1, 200, 0, &v10));
  v2 = v10;
  if (!v1)
  {
    if (qword_1000E0240 != -1)
      dispatch_once(&qword_1000E0240, &stru_1000D1D88);
    v3 = (id)qword_1000E0238;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v9 = 0;
      v4 = sub_100007750(0);
      if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        v5 = v4;
      else
        v5 = v4 & 0xFFFFFFFE;
      if ((_DWORD)v5)
      {
        v11 = 138412290;
        v12 = v2;
        v6 = (const char *)_os_log_send_and_compose_impl(v5, &v9, 0, 0);
        v7 = (char *)v6;
        if (v6)
          sub_100007780(v6);
      }
      else
      {
        v7 = 0;
      }
      free(v7);
    }

  }
  return v1;
}

id sub_100088A58(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  uint64_t v16;
  id v17;
  _QWORD v18[3];

  if (a1)
  {
    v17 = 0;
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a1, 0, 0, &v17));
    v2 = v17;
    if (v1)
    {
      v3 = objc_opt_class(NSDictionary);
      if ((objc_opt_isKindOfClass(v1, v3) & 1) == 0)
      {
        if (qword_1000E0240 != -1)
          dispatch_once(&qword_1000E0240, &stru_1000D1D88);
        v4 = (id)qword_1000E0238;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v18[0] = 0;
          v5 = sub_100007750(0);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            v6 = v5;
          else
            v6 = v5 & 0xFFFFFFFE;
          if ((_DWORD)v6)
          {
            LOWORD(v16) = 0;
            v7 = (const char *)_os_log_send_and_compose_impl(v6, v18, 0, 0);
            v8 = (char *)v7;
            if (v7)
              sub_100007780(v7);
          }
          else
          {
            v8 = 0;
          }
          free(v8);
        }

        v14 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1000E0240 != -1)
        dispatch_once(&qword_1000E0240, &stru_1000D1D88);
      v9 = (id)qword_1000E0238;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v16 = 0;
        v10 = sub_100007750(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LODWORD(v18[0]) = 138543362;
          *(_QWORD *)((char *)v18 + 4) = v2;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v16, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

    }
    v14 = v1;
LABEL_29:

    return v14;
  }
  return 0;
}

id sub_100088CD4(uint64_t a1)
{
  void *v1;
  id v2;
  uint64_t v3;
  NSObject *v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  char *v13;
  id v14;
  uint64_t v16;
  id v17;
  _QWORD v18[3];

  if (a1)
  {
    v17 = 0;
    v1 = (void *)objc_claimAutoreleasedReturnValue(+[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a1, 0, 0, &v17));
    v2 = v17;
    if (v1)
    {
      v3 = objc_opt_class(NSArray);
      if ((objc_opt_isKindOfClass(v1, v3) & 1) == 0)
      {
        if (qword_1000E0240 != -1)
          dispatch_once(&qword_1000E0240, &stru_1000D1D88);
        v4 = (id)qword_1000E0238;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
        {
          v18[0] = 0;
          v5 = sub_100007750(0);
          if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
            v6 = v5;
          else
            v6 = v5 & 0xFFFFFFFE;
          if ((_DWORD)v6)
          {
            LOWORD(v16) = 0;
            v7 = (const char *)_os_log_send_and_compose_impl(v6, v18, 0, 0);
            v8 = (char *)v7;
            if (v7)
              sub_100007780(v7);
          }
          else
          {
            v8 = 0;
          }
          free(v8);
        }

        v14 = 0;
        goto LABEL_29;
      }
    }
    else
    {
      if (qword_1000E0240 != -1)
        dispatch_once(&qword_1000E0240, &stru_1000D1D88);
      v9 = (id)qword_1000E0238;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v16 = 0;
        v10 = sub_100007750(0);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          v11 = v10;
        else
          v11 = v10 & 0xFFFFFFFE;
        if ((_DWORD)v11)
        {
          LODWORD(v18[0]) = 138543362;
          *(_QWORD *)((char *)v18 + 4) = v2;
          v12 = (const char *)_os_log_send_and_compose_impl(v11, &v16, 0, 0);
          v13 = (char *)v12;
          if (v12)
            sub_100007780(v12);
        }
        else
        {
          v13 = 0;
        }
        free(v13);
      }

    }
    v14 = v1;
LABEL_29:

    return v14;
  }
  return 0;
}

void sub_100088F50(id a1)
{
  os_log_t v1;
  void *v2;

  v1 = os_log_create(off_1000DF3D8, "default");
  v2 = (void *)qword_1000E0238;
  qword_1000E0238 = (uint64_t)v1;

}

uint64_t acm_explicit_bzero(void *a1, rsize_t __n)
{
  return memset_s(a1, __n, 0, __n);
}

uint64_t acm_get_mem()
{
  return qword_1000E0248;
}

void *acm_mem_alloc_data(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xCB62F0E9uLL);
  if (result)
    qword_1000E0250 += size;
  return result;
}

void acm_mem_free_data(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_1000E0250 - __n;
    if (qword_1000E0250 < __n)
      v4 = 0;
    qword_1000E0250 = v4;
  }
}

void *acm_mem_alloc(size_t size)
{
  void *result;

  result = malloc_type_calloc(1uLL, size, 0xDB9956F0uLL);
  if (result)
    qword_1000E0258 += size;
  return result;
}

void acm_mem_free(void *a1, rsize_t __n)
{
  uint64_t v4;

  if (a1)
  {
    memset_s(a1, __n, 0, __n);
    free(a1);
    v4 = qword_1000E0258 - __n;
    if (qword_1000E0258 < __n)
      v4 = 0;
    qword_1000E0258 = v4;
  }
}

const char *acm_mem_alloc_info(const char *result, const void *a2, uint64_t a3, const char *a4, int a5, const char *a6)
{
  const char *v6;
  const char *v7;
  const char *v8;

  if (a2)
    qword_1000E0248 += a3;
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v6 = "NULL";
    if (result)
      v7 = result;
    else
      v7 = "NULL";
    if (a4)
      v8 = a4;
    else
      v8 = "NULL";
    if (a6)
      v6 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_alloc_info", v7, a2, a3, qword_1000E0248, 0, qword_1000E0250, qword_1000E0258, v8, a5, v6);
  }
  return result;
}

const char *acm_mem_free_info(const char *result, const void *a2, unint64_t a3, const char *a4, int a5, const char *a6)
{
  uint64_t v6;
  const char *v7;
  const char *v8;
  const char *v9;

  if (a2)
  {
    v6 = qword_1000E0248 - a3;
    if (qword_1000E0248 < a3)
      v6 = 0;
    qword_1000E0248 = v6;
  }
  if (gACMLoggingLevel <= 0x1Eu)
  {
    v7 = "NULL";
    if (result)
      v8 = result;
    else
      v8 = "NULL";
    if (a4)
      v9 = a4;
    else
      v9 = "NULL";
    if (a6)
      v7 = a6;
    return (const char *)printf("%s: %s: mem: type=%s ptr=%p size=%u (total=%u raw=%u data=%u types=%u) %s:%d (%s).\n", "ACM", "acm_mem_free_info", v8, a2, a3, qword_1000E0248, 0, qword_1000E0250, qword_1000E0258, v9, a5, v7);
  }
  return result;
}

uint64_t GetSerializedVerifyPolicySize(uint64_t a1, char *__s1, uint64_t a3, uint64_t a4, _DWORD *a5, unsigned int a6, _QWORD *a7)
{
  uint64_t result;
  size_t v12;
  size_t v13;
  unsigned int v14;

  v14 = 0;
  result = 4294967293;
  if (a1 && __s1 && a7)
  {
    v12 = strnlen(__s1, 0x81uLL);
    if (v12 > 0x80)
    {
      return 4294967293;
    }
    else
    {
      v13 = v12;
      result = sub_1000892A0(a5, a6, &v14);
      if (!(_DWORD)result)
        *a7 = v13 + v14 + 26;
    }
  }
  return result;
}

uint64_t sub_1000892A0(_DWORD *a1, unsigned int a2, _DWORD *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "getLengthOfParameters");
  if (a3)
  {
    *a3 = 0;
    v6 = 0;
    if (a2)
    {
      v7 = a2;
      while (1)
      {
        v8 = sub_10008C0EC(a1);
        if ((_DWORD)v8)
          break;
        v9 = v6 + 8;
        v10 = a1[4];
        v6 += v10 + 8;
        if (__CFADD__(v10, v9))
          goto LABEL_10;
        a1 += 6;
        if (!--v7)
          goto LABEL_9;
      }
      v11 = v8;
      v12 = 70;
    }
    else
    {
LABEL_9:
      v11 = 0;
      *a3 = v6;
      v12 = 10;
    }
  }
  else
  {
LABEL_10:
    v12 = 70;
    v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "getLengthOfParameters", (int)v11);
  return v11;
}

uint64_t SerializeVerifyPolicy(_OWORD *a1, char *__s1, char a3, uint64_t a4, _DWORD *a5, unsigned int a6, _OWORD *a7, size_t *a8)
{
  uint64_t result;
  int v15;
  size_t v17;
  size_t v18;
  char *v19;
  size_t v20;
  unint64_t v21;

  v21 = 0;
  result = 4294967293;
  if (a1)
  {
    if (__s1)
    {
      if (a8)
      {
        if (a7)
        {
          if (a6 <= 0xA && (a5 != 0) == (a6 != 0))
          {
            v15 = a4;
            result = GetSerializedVerifyPolicySize((uint64_t)a1, __s1, 0, a4, a5, a6, &v21);
            if (!(_DWORD)result)
            {
              if (*a8 < v21)
                return 4294967293;
              *a7 = *a1;
              v17 = strnlen(__s1, 0x81uLL);
              if (v17 > 0x80)
              {
                return 4294967293;
              }
              else
              {
                v18 = v17;
                memcpy(a7 + 1, __s1, v17 + 1);
                v19 = (char *)a7 + v18;
                v19[17] = a3;
                *(_DWORD *)(v19 + 18) = v15;
                v20 = v18 + 22;
                result = sub_1000894C8((uint64_t)a5, a6, (uint64_t)a7, (uint64_t *)&v20);
                if (!(_DWORD)result)
                  *a8 = v20;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000894C8(uint64_t a1, int a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  size_t v14;
  void *__src[2];
  size_t __n;

  LODWORD(v6) = a2;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "serializeParameters");
  v8 = 70;
  v9 = 4294967293;
  if (a3 && a4)
  {
    v10 = *a4;
    *(_DWORD *)(a3 + v10) = v6;
    v11 = v10 + 4;
    if ((_DWORD)v6)
    {
      v6 = v6;
      while (1)
      {
        *(_OWORD *)__src = *(_OWORD *)a1;
        __n = *(_QWORD *)(a1 + 16);
        v12 = sub_10008C0EC(__src);
        if ((_DWORD)v12)
          break;
        v13 = (_DWORD *)(a3 + v11);
        v14 = __n;
        *v13 = __src[0];
        v13[1] = v14;
        v11 += 8;
        if ((_DWORD)v14)
        {
          memcpy((void *)(a3 + v11), __src[1], v14);
          v11 += v14;
        }
        a1 += 24;
        if (!--v6)
          goto LABEL_11;
      }
      v9 = v12;
      v8 = 70;
    }
    else
    {
LABEL_11:
      v9 = 0;
      *a4 = v11;
      v8 = 10;
    }
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "serializeParameters", (int)v9);
  return v9;
}

uint64_t DeserializeVerifyPolicy(uint64_t a1, unint64_t a2, _OWORD *a3, _QWORD *a4, BOOL *a5, _DWORD *a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v8;
  unint64_t v9;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  BOOL *v20;
  BOOL v21;
  _DWORD *v22;
  int v23;
  unint64_t v25;
  _QWORD *v26;
  unsigned int v27;
  unsigned int *v28;
  unint64_t v29;

  v28 = 0;
  v27 = 0;
  v8 = 4294967293;
  v9 = a2 - 16;
  if (a2 >= 0x10 && a1 && a3 && a4 && a5 && a6 && a7 && a8)
  {
    *a3 = *(_OWORD *)a1;
    v17 = strnlen((const char *)(a1 + 16), a2 - 16);
    if (v17 > 0x80 || v9 <= v17)
      return 4294967293;
    v26 = a4;
    v18 = v17 + 1;
    v19 = acm_mem_alloc_data(v17 + 1);
    acm_mem_alloc_info("<data>", v19, v17 + 1, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 349, "DeserializeVerifyPolicy");
    if (!v19)
      return 4294967292;
    memcpy(v19, (const void *)(a1 + 16), v17 + 1);
    v29 = v17 + 17;
    if (v17 + 17 == a2 || (v20 = a5, v21 = *(_BYTE *)(a1 + v17 + 17) != 0, v29 = v17 + 18, a2 - (v17 + 18) < 4))
    {
      v8 = 4294967293;
    }
    else
    {
      v25 = v17 + 1;
      v22 = a8;
      v23 = *(_DWORD *)(a1 + v17 + 18);
      v29 = v17 + 22;
      v8 = sub_100089800(a1, a2, &v29, &v28, &v27);
      if (!(_DWORD)v8)
      {
        *v26 = v19;
        *v20 = v21;
        *a6 = v23;
        *a7 = v28;
        *v22 = v27;
        return v8;
      }
      v18 = v25;
    }
    acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 378, "DeserializeVerifyPolicy");
    acm_mem_free_data(v19, v18);
    if (v28)
      Util_SafeDeallocParameters(v28, v27);
  }
  return v8;
}

uint64_t sub_100089800(uint64_t a1, unint64_t a2, unint64_t *a3, _QWORD *a4, _DWORD *a5)
{
  __CFString **v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  void *v22;
  _QWORD *v24;
  _DWORD *v25;
  unint64_t *v26;
  int v27;

  v10 = &kUMUserSessionShortNameKey;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "deserializeParameters");
  v11 = 70;
  v12 = 4294967293;
  if (!a1 || !a3 || !a4 || !a5)
    goto LABEL_25;
  v13 = *a3;
  if (a2 <= *a3)
  {
    LODWORD(v14) = 0;
LABEL_23:
    v16 = 0;
LABEL_24:
    v12 = 0;
    *a4 = v16;
    *a5 = v14;
    v11 = 10;
    *a3 = v13;
    goto LABEL_25;
  }
  if (a2 - *a3 < 4 || (v14 = *(unsigned int *)(a1 + v13), v14 > 0xA))
  {
    v11 = 70;
    v12 = 4294967293;
    goto LABEL_25;
  }
  v13 += 4;
  if (!(_DWORD)v14)
    goto LABEL_23;
  v27 = v14;
  v15 = 24 * v14;
  v16 = (char *)acm_mem_alloc(24 * v14);
  acm_mem_alloc_info("array of ACMParameter", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 194, "deserializeParameters");
  if (!v16)
  {
    v11 = 70;
    v12 = 4294967292;
    goto LABEL_25;
  }
  v24 = a4;
  v25 = a5;
  v26 = a3;
  v17 = 0;
  while (1)
  {
    v18 = &v16[v17];
    *(_QWORD *)&v16[v17 + 8] = 0;
    if (a2 - v13 < 8
      || (*(_DWORD *)v18 = *(_DWORD *)(a1 + v13), a2 - (v13 + 4) < 4)
      || (v19 = &v16[v17],
          v20 = *(unsigned int *)(a1 + v13 + 4),
          *(_DWORD *)&v16[v17 + 16] = v20,
          v13 += 8,
          a2 - v13 < v20))
    {
      v11 = 70;
      v12 = 4294967293;
      goto LABEL_31;
    }
    v21 = sub_10008C0EC(&v16[v17]);
    if ((_DWORD)v21)
    {
      v12 = v21;
      v11 = 70;
      goto LABEL_31;
    }
    if ((_DWORD)v20)
      break;
LABEL_20:
    v17 += 24;
    if (v15 == v17)
    {
      v10 = &kUMUserSessionShortNameKey;
      a5 = v25;
      a3 = v26;
      a4 = v24;
      LODWORD(v14) = v27;
      goto LABEL_24;
    }
  }
  v22 = acm_mem_alloc_data(v20);
  acm_mem_alloc_info("<data>", v22, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 212, "deserializeParameters");
  *((_QWORD *)v18 + 1) = v22;
  if (v22)
  {
    memcpy(v22, (const void *)(a1 + v13), *((unsigned int *)v19 + 4));
    v13 += *((unsigned int *)v19 + 4);
    goto LABEL_20;
  }
  v11 = 70;
  v12 = 4294967292;
LABEL_31:
  v10 = &kUMUserSessionShortNameKey;
LABEL_25:
  if (v11 >= *((unsigned __int8 *)v10 + 1856))
    printf("%s: %s: returning, err = %ld.\n", "ACM", "deserializeParameters", (int)v12);
  return v12;
}

uint64_t GetSerializedVerifyAclConstraintSize(int a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, _DWORD *a9, unsigned int a10, _QWORD *a11)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v18 = 0;
  result = 4294967293;
  if (a3)
  {
    if (a11)
    {
      if (a10 <= 0xA && (a9 != 0) == (a10 != 0))
      {
        result = sub_1000892A0(a9, a10, &v18);
        if (!(_DWORD)result)
        {
          v15 = 29;
          if (a1 == 32)
            v15 = 33;
          v16 = v15 + a4;
          if (a1 == 32)
            v17 = a6;
          else
            v17 = 0;
          *a11 = v16 + v17 + v18;
        }
      }
    }
  }
  return result;
}

uint64_t SerializeVerifyAclConstraint(int a1, _OWORD *a2, const void *a3, unsigned int a4, const void *a5, unsigned int a6, char a7, int a8, _DWORD *a9, unsigned int a10, uint64_t a11, _QWORD *a12)
{
  uint64_t result;
  BOOL v14;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v28;
  uint64_t v30;
  unsigned int v31;

  if (!a3)
    return 4294967293;
  result = 4294967293;
  if (a12)
    v14 = a11 == 0;
  else
    v14 = 1;
  if (!v14 && a10 <= 0xA && (a9 != 0) == (a10 != 0))
  {
    v31 = 0;
    result = sub_1000892A0(a9, a10, &v31);
    if (!(_DWORD)result)
    {
      v21 = 29;
      if (a1 == 32)
        v21 = 33;
      v22 = v21 + a4;
      if (a1 == 32)
        v23 = a6;
      else
        v23 = 0;
      if (*a12 < v22 + v23 + (unint64_t)v31)
      {
        return 4294967293;
      }
      else
      {
        v28 = a8;
        if (a2)
        {
          *(_OWORD *)a11 = *a2;
        }
        else
        {
          *(_QWORD *)a11 = 0;
          *(_QWORD *)(a11 + 8) = 0;
        }
        *(_DWORD *)(a11 + 16) = a4;
        memcpy((void *)(a11 + 20), a3, a4);
        v24 = a4 + 20;
        if (a1 == 32)
        {
          *(_DWORD *)(a11 + v24) = a6;
          v25 = a4 + 24;
          memcpy((void *)(a11 + v25), a5, a6);
          v24 = v25 + a6;
        }
        v26 = a11 + v24;
        *(_BYTE *)v26 = a7;
        *(_DWORD *)(v26 + 1) = v28;
        v30 = v24 + 5;
        result = sub_1000894C8((uint64_t)a9, a10, a11, &v30);
        if (!(_DWORD)result)
          *a12 = v30;
      }
    }
  }
  return result;
}

uint64_t DeserializeVerifyAclConstraint(int a1, uint64_t a2, unsigned int a3, _OWORD *a4, _QWORD *a5, _DWORD *a6, size_t *a7, _DWORD *a8, BOOL *a9, _DWORD *a10, _QWORD *a11, _DWORD *a12)
{
  uint64_t v12;
  unint64_t v16;
  unint64_t v20;
  void *v21;
  unint64_t v22;
  size_t v23;
  unint64_t v24;
  void *v25;
  BOOL v26;
  int v27;
  int v28;
  unint64_t v30;
  _QWORD *v31;
  unsigned int v32;
  unsigned int *v33;
  unint64_t v34;

  v33 = 0;
  v34 = 0;
  v32 = 0;
  v12 = 4294967293;
  if (a2 && a4 && a5 && a6 && a9 && a10 && a11 && a12 && a3 >= 0x10)
  {
    v16 = a3;
    *a4 = *(_OWORD *)a2;
    v34 = 16;
    if ((a3 & 0xFFFFFFFC) == 0x10)
    {
      v12 = 4294967293;
    }
    else
    {
      v20 = *(unsigned int *)(a2 + 16);
      v34 = 20;
      v21 = acm_mem_alloc_data(v20);
      acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 532, "DeserializeVerifyAclConstraint");
      if (v21)
      {
        if (v16 - 20 < v20)
          goto LABEL_24;
        memcpy(v21, (const void *)(a2 + 20), v20);
        v22 = v20 + 20;
        v34 = v20 + 20;
        v31 = a5;
        if (a1 != 32)
        {
          v25 = 0;
          LODWORD(v23) = 0;
          goto LABEL_19;
        }
        if (v16 - v22 < 4)
        {
LABEL_24:
          v25 = 0;
          LODWORD(v23) = 0;
        }
        else
        {
          v23 = *(unsigned int *)(a2 + v22);
          v24 = v20 + 24;
          v34 = v20 + 24;
          v25 = acm_mem_alloc_data(v23);
          acm_mem_alloc_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 544, "DeserializeVerifyAclConstraint");
          if (!v25)
          {
            v12 = 4294967292;
LABEL_26:
            acm_mem_free_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 580, "DeserializeVerifyAclConstraint");
            acm_mem_free_data(v21, v20);
            if (v25)
            {
              acm_mem_free_info("<data>", v25, v23, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 583, "DeserializeVerifyAclConstraint");
              acm_mem_free_data(v25, v23);
            }
            goto LABEL_30;
          }
          if (v16 - v24 >= v23)
          {
            memcpy(v25, (const void *)(a2 + v24), v23);
            v22 = v24 + v23;
            v34 = v24 + v23;
LABEL_19:
            if (v22 != v16)
            {
              v26 = *(_BYTE *)(a2 + v22) != 0;
              v34 = v22 + 1;
              if (v16 - (v22 + 1) >= 4)
              {
                v30 = v20;
                v27 = v23;
                v23 = (size_t)v25;
                v28 = *(_DWORD *)(a2 + v22 + 1);
                v34 = v22 + 5;
                v12 = sub_100089800(a2, v16, &v34, &v33, &v32);
                if (!(_DWORD)v12)
                {
                  *v31 = v21;
                  *a7 = v23;
                  *a8 = v27;
                  *a6 = v30;
                  *a9 = v26;
                  *a10 = v28;
                  *a11 = v33;
                  *a12 = v32;
                  return v12;
                }
                v25 = (void *)v23;
                LODWORD(v23) = v27;
                v20 = v30;
                goto LABEL_26;
              }
            }
          }
        }
        v12 = 4294967293;
        goto LABEL_26;
      }
      v12 = 4294967292;
    }
  }
LABEL_30:
  if (v33)
    Util_SafeDeallocParameters(v33, v32);
  return v12;
}

uint64_t GetSerializedProcessAclSize(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, _QWORD *a9)
{
  uint64_t result;
  unsigned int v12;

  v12 = 0;
  result = 4294967293;
  if (a2 && a3 && a9 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
  {
    result = sub_1000892A0(a7, a8, &v12);
    if (!(_DWORD)result)
      *a9 = a3 + (unint64_t)a5 + v12 + 36;
  }
  return result;
}

uint64_t SerializeProcessAcl(_OWORD *a1, const void *a2, unsigned int a3, const void *a4, unsigned int a5, uint64_t a6, _DWORD *a7, unsigned int a8, uint64_t a9, unint64_t *a10)
{
  uint64_t result;
  BOOL v15;
  int v17;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;

  v23 = 0;
  result = 4294967293;
  if (a2 && a3)
  {
    v15 = !a10 || a9 == 0;
    if (!v15 && a8 <= 0xA && (a7 != 0) == (a8 != 0))
    {
      v17 = a6;
      result = GetSerializedProcessAclSize(4294967293, (uint64_t)a2, a3, (uint64_t)a4, a5, a6, a7, a8, &v23);
      if (!(_DWORD)result)
      {
        if (*a10 < v23)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a9 = *a1;
          }
          else
          {
            *(_QWORD *)a9 = 0;
            *(_QWORD *)(a9 + 8) = 0;
          }
          *(_DWORD *)(a9 + 16) = a3;
          memcpy((void *)(a9 + 20), a2, a3);
          *(_DWORD *)(a9 + a3 + 20) = a5;
          v21 = a3 + 24;
          if (a5)
          {
            memcpy((void *)(a9 + v21), a4, a5);
            v21 += a5;
          }
          *(_DWORD *)(a9 + v21) = v17;
          v22 = v21 + 4;
          result = sub_1000894C8((uint64_t)a7, a8, a9, (uint64_t *)&v22);
          if (!(_DWORD)result)
            *a10 = v22;
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeProcessAcl(uint64_t a1, unsigned int a2, _OWORD *a3, _QWORD *a4, _DWORD *a5, _QWORD *a6, unsigned int *a7, _DWORD *a8, _QWORD *a9, _DWORD *a10)
{
  uint64_t v10;
  _QWORD *v11;
  _DWORD *v12;
  _QWORD *v13;
  unsigned int *v14;
  _DWORD *v15;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  size_t v20;
  unint64_t v21;
  _QWORD *v22;
  unsigned int *v23;
  _DWORD *v24;
  size_t v25;
  void *v26;
  void *v27;
  void *v28;
  _DWORD *v29;
  int v30;
  void *v32;
  _DWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int *v39;
  unint64_t v40;

  v39 = 0;
  v40 = 0;
  v38 = 0;
  v10 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      v11 = a4;
      if (a4)
      {
        v12 = a5;
        if (a5)
        {
          v13 = a6;
          if (a6)
          {
            v14 = a7;
            if (a7)
            {
              v15 = a8;
              if (a8)
              {
                if (a9 && a10 && a2 >= 0x10)
                {
                  v17 = a2;
                  *a3 = *(_OWORD *)a1;
                  v40 = 16;
                  if ((a2 & 0xFFFFFFFC) == 0x10)
                  {
                    v10 = 4294967293;
                  }
                  else
                  {
                    v18 = *(unsigned int *)(a1 + 16);
                    v40 = 20;
                    v19 = acm_mem_alloc_data(v18);
                    acm_mem_alloc_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 722, "DeserializeProcessAcl");
                    if (v19)
                    {
                      if (v17 - 20 < v18
                        || (memcpy(v19, (const void *)(a1 + 20), v18), v40 = v18 + 20, v17 - (v18 + 20) < 4))
                      {
                        v32 = 0;
                        v37 = 0;
                        v10 = 4294967293;
                      }
                      else
                      {
                        v20 = *(unsigned int *)(a1 + v18 + 20);
                        v21 = v18 + 24;
                        v40 = v18 + 24;
                        v37 = v20;
                        if (!(_DWORD)v20)
                        {
                          v36 = 0;
                          goto LABEL_20;
                        }
                        v33 = v12;
                        v34 = v11;
                        v22 = v13;
                        v23 = v14;
                        v24 = v15;
                        v25 = v20;
                        v26 = acm_mem_alloc_data(v20);
                        acm_mem_alloc_info("<data>", v26, v25, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 734, "DeserializeProcessAcl");
                        if (v26)
                        {
                          v27 = v26;
                          v11 = v34;
                          if (v17 - v21 >= v25)
                          {
                            v36 = v27;
                            memcpy(v27, (const void *)(a1 + v21), v25);
                            v21 += v25;
                            v40 = v21;
                            v15 = v24;
                            v14 = v23;
                            v13 = v22;
                            v12 = v33;
LABEL_20:
                            if (v17 - v21 < 4)
                            {
                              v10 = 4294967293;
                            }
                            else
                            {
                              v35 = v18;
                              v28 = v19;
                              v29 = v15;
                              v30 = *(_DWORD *)(a1 + v21);
                              v40 = v21 + 4;
                              v10 = sub_100089800(a1, v17, &v40, &v39, &v38);
                              if (!(_DWORD)v10)
                              {
                                *v11 = v28;
                                *v12 = v35;
                                *v13 = v36;
                                *v14 = v37;
                                *v29 = v30;
                                *a9 = v39;
                                *a10 = v38;
                                return v10;
                              }
                              v19 = v28;
                              v18 = v35;
                            }
                            v32 = v36;
                            goto LABEL_32;
                          }
                          v10 = 4294967293;
                          v32 = v27;
                        }
                        else
                        {
                          v32 = 0;
                          v10 = 4294967292;
                        }
                      }
LABEL_32:
                      acm_mem_free_info("<data>", v19, v18, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 763, "DeserializeProcessAcl");
                      acm_mem_free_data(v19, v18);
                      if (v32)
                      {
                        acm_mem_free_info("<data>", v32, v37, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 766, "DeserializeProcessAcl");
                        acm_mem_free_data(v32, v37);
                      }
                      goto LABEL_34;
                    }
                    v10 = 4294967292;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
LABEL_34:
  if (v39)
    Util_SafeDeallocParameters(v39, v38);
  return v10;
}

uint64_t GetSerializedRequirementSize(_DWORD *a1, uint64_t *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = 4294967293;
  if (!a1)
    return result;
  if (!a2)
    return result;
  v5 = *a1;
  if (*a1 > 0x1Cu)
    return result;
  if (((1 << v5) & 0x1FFCFF4E) != 0)
  {
    result = 0;
    *a2 = a1[3] + 16;
    return result;
  }
  if (((1 << v5) & 0x30) == 0)
  {
    if (v5 != 7)
      return result;
    *a2 = 24;
    v9 = a1[5];
    if ((_DWORD)v9)
    {
      v10 = a1 + 6;
      v11 = 24;
      do
      {
        result = GetSerializedRequirementSize(*v10, &v12);
        if ((_DWORD)result)
          break;
        v11 += v12;
        *a2 = v11;
        ++v10;
        --v9;
      }
      while (v9);
      return result;
    }
    return 0;
  }
  *a2 = 20;
  v6 = a1[4];
  if (!(_DWORD)v6)
    return 0;
  v7 = a1 + 5;
  v8 = 20;
  while (1)
  {
    result = GetSerializedRequirementSize(*v7, &v12);
    if ((_DWORD)result)
      break;
    v8 += v12;
    *a2 = v8;
    ++v7;
    if (!--v6)
      return 0;
  }
  return result;
}

uint64_t SerializeRequirement(_DWORD *a1, _OWORD *a2, uint64_t *a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0;
  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a3)
      {
        result = GetSerializedRequirementSize(a1, (uint64_t *)&v12);
        if (!(_DWORD)result)
        {
          if (v12 > *a3)
            return 4294967293;
          *a2 = *(_OWORD *)a1;
          v7 = *a1;
          result = 4294967293;
          if (*a1 <= 0x1Cu)
          {
            if (((1 << v7) & 0x1FFCFF4E) != 0)
            {
              memcpy(a2 + 1, a1 + 4, a1[3]);
              v8 = a1[3] + 16;
LABEL_9:
              result = 0;
              *a3 = v8;
              return result;
            }
            if (((1 << v7) & 0x30) != 0)
            {
              *((_DWORD *)a2 + 4) = a1[4];
              if (!a1[4])
              {
                v8 = 20;
                goto LABEL_9;
              }
              v9 = 0;
              v8 = 20;
              while (1)
              {
                v11 = *a3 - v8;
                result = SerializeRequirement(*(_QWORD *)&a1[2 * v9 + 5], (char *)a2 + v8, &v11);
                if ((_DWORD)result)
                  break;
                v8 += v11;
                if (++v9 >= (unint64_t)a1[4])
                  goto LABEL_9;
              }
            }
            else if (v7 == 7)
            {
              *((_QWORD *)a2 + 2) = *((_QWORD *)a1 + 2);
              if (!a1[5])
              {
                v8 = 24;
                goto LABEL_9;
              }
              v10 = 0;
              v8 = 24;
              while (1)
              {
                v11 = *a3 - v8;
                result = SerializeRequirement(*(_QWORD *)&a1[2 * v10 + 6], (char *)a2 + v8, &v11);
                if ((_DWORD)result)
                  break;
                v8 += v11;
                if (++v10 >= (unint64_t)a1[5])
                  goto LABEL_9;
              }
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeRequirement(unsigned int *a1, unint64_t a2, void **a3, size_t *a4)
{
  uint64_t v4;
  unsigned int v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__dst;

  __dst = 0;
  v4 = 4294967293;
  if (a1)
  {
    if (a2 >= 0x10)
    {
      if (a3)
      {
        if (a4)
        {
          v9 = *a1;
          if (v9 <= 0x1C)
          {
            if (((1 << v9) & 0x1FFCFF4E) != 0)
            {
              v10 = a1[3] + 16;
              if (v10 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, 0, &__dst);
              if (!(_DWORD)v11)
              {
                if (__dst)
                {
                  memcpy(__dst, a1, v10);
LABEL_11:
                  v4 = 0;
                  *a4 = v10;
                  *a3 = __dst;
                  return v4;
                }
                return 4294967292;
              }
              goto LABEL_35;
            }
            if (((1 << v9) & 0x30) != 0)
            {
              v13 = a1[4];
              if (8 * v13 + 20 > a2)
                goto LABEL_36;
              v11 = Util_AllocRequirement(v9, v13, &__dst);
              if ((_DWORD)v11)
                goto LABEL_35;
              v14 = __dst;
              if (!__dst)
                return 4294967292;
              if (*((_DWORD *)__dst + 3) == 84)
              {
                v15 = *(_OWORD *)a1;
                *((_DWORD *)__dst + 4) = a1[4];
                *v14 = v15;
                *((_DWORD *)__dst + 3) = 84;
                if (!a1[4])
                {
                  v10 = 20;
                  goto LABEL_11;
                }
                v16 = 0;
                v10 = 20;
                while (1)
                {
                  v21 = 0;
                  v22 = 0;
                  v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                  if ((_DWORD)v11)
                    goto LABEL_35;
                  *(_QWORD *)((char *)__dst + 8 * v16 + 20) = v22;
                  v10 += v21;
                  if (++v16 >= (unint64_t)a1[4])
                    goto LABEL_11;
                }
              }
              goto LABEL_39;
            }
            if (v9 == 7)
            {
              v17 = a1[5];
              if (8 * v17 + 24 <= a2)
              {
                v11 = Util_AllocRequirement(7, v17, &__dst);
                if (!(_DWORD)v11)
                {
                  v18 = __dst;
                  if (!__dst)
                    return 4294967292;
                  if (*((_DWORD *)__dst + 3) != 88)
                  {
LABEL_39:
                    v4 = 4294967291;
                    goto LABEL_36;
                  }
                  v19 = *(_OWORD *)a1;
                  *((_QWORD *)__dst + 2) = *((_QWORD *)a1 + 2);
                  *v18 = v19;
                  *((_DWORD *)__dst + 3) = 88;
                  if (!a1[5])
                  {
                    v10 = 24;
                    goto LABEL_11;
                  }
                  v20 = 0;
                  v10 = 24;
                  while (1)
                  {
                    v21 = 0;
                    v22 = 0;
                    v11 = DeserializeRequirement((char *)a1 + v10, a2 - v10, &v22, &v21);
                    if ((_DWORD)v11)
                      break;
                    *((_QWORD *)__dst + v20 + 3) = v22;
                    v10 += v21;
                    if (++v20 >= (unint64_t)a1[5])
                      goto LABEL_11;
                  }
                }
LABEL_35:
                v4 = v11;
              }
            }
          }
        }
      }
    }
  }
LABEL_36:
  if (__dst)
    Util_DeallocRequirement((int *)__dst);
  return v4;
}

uint64_t GetSerializedCredentialSize(_DWORD *a1, _QWORD *a2)
{
  uint64_t result;

  result = 4294967293;
  if (a1 && a2 && *a1 <= 0x17u && ((1 << *a1) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a2 = a1[7] + 32;
  }
  return result;
}

uint64_t SerializeCredential(unsigned int *__src, void *__dst, size_t *a3)
{
  uint64_t result;
  unsigned int v6;
  size_t v8;

  result = 4294967293;
  if (__src && __dst && a3)
  {
    v6 = *__src;
    if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0)
    {
      v8 = __src[7] + 32;
      if (v8 <= *a3 && v6 <= 0x17 && ((1 << v6) & 0xFFF7FE) != 0)
      {
        memcpy(__dst, __src, v8);
        result = 0;
        *a3 = __src[7] + 32;
      }
    }
  }
  return result;
}

uint64_t DeserializeCredential(unsigned int *a1, unint64_t a2, void **a3, _QWORD *a4)
{
  uint64_t v4;
  unsigned int v8;
  uint64_t v10;
  void *__dst;

  __dst = 0;
  v4 = 4294967293;
  if (a2 >= 0x20 && a1 && a3 && a4)
  {
    v8 = *a1;
    v10 = a1[7];
    switch(*a1)
    {
      case 1u:
        if ((_DWORD)v10 == 28)
          goto LABEL_7;
        return v4;
      case 2u:
        if ((_DWORD)v10 == 136)
          goto LABEL_7;
        return v4;
      case 3u:
        if ((_DWORD)v10 == 305)
          goto LABEL_7;
        return v4;
      case 4u:
      case 5u:
      case 6u:
      case 8u:
      case 0xEu:
      case 0x10u:
      case 0x13u:
      case 0x16u:
      case 0x17u:
        if (!(_DWORD)v10)
          goto LABEL_7;
        return v4;
      case 7u:
        if ((_DWORD)v10 == 56)
          goto LABEL_7;
        return v4;
      case 9u:
        if ((_DWORD)v10 == 24)
          goto LABEL_7;
        return v4;
      case 0xAu:
        if ((_DWORD)v10 == 52)
          goto LABEL_7;
        return v4;
      case 0xCu:
      case 0xFu:
        if ((_DWORD)v10 == 8)
          goto LABEL_7;
        return v4;
      case 0xDu:
      case 0x15u:
        if ((_DWORD)v10 == 132)
          goto LABEL_7;
        return v4;
      case 0x11u:
        if ((_DWORD)v10 == 81)
          goto LABEL_7;
        return v4;
      case 0x12u:
        if ((_DWORD)v10 == 20)
          goto LABEL_7;
        return v4;
      case 0x14u:
        if ((_DWORD)v10 != 32)
          return v4;
LABEL_7:
        v4 = Util_AllocCredential(*a1, &__dst);
        if ((_DWORD)v4)
        {
          if (__dst)
          {
LABEL_16:
            Util_DeallocCredential(__dst);
            return v4;
          }
        }
        else
        {
          if (__dst)
          {
            if (*((_DWORD *)__dst + 1) > 3u || *((_DWORD *)__dst + 2) > 0x50u)
            {
              v4 = 4294967293;
            }
            else
            {
              v4 = 4294967293;
              if (v8 <= 0x17 && ((1 << v8) & 0xFFF7FE) != 0 && v10 + 32 <= a2)
              {
                memcpy(__dst, a1, v10 + 32);
                v4 = 0;
                *a3 = __dst;
                *a4 = v10 + 32;
                return v4;
              }
            }
            goto LABEL_16;
          }
          v4 = 4294967292;
        }
        break;
      default:
        return v4;
    }
  }
  return v4;
}

uint64_t CopyCredential(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *__dst;

  __dst = 0;
  v2 = 4294967293;
  if (a1 && a2)
  {
    v2 = Util_AllocCredential(*(_DWORD *)a1, &__dst);
    if ((_DWORD)v2)
    {
      if (__dst)
        Util_DeallocCredential(__dst);
    }
    else if (__dst)
    {
      memcpy(__dst, (const void *)a1, *(unsigned int *)(a1 + 28) + 32);
      v2 = 0;
      *a2 = __dst;
    }
    else
    {
      return 4294967292;
    }
  }
  return v2;
}

uint64_t CompareCredentials(_QWORD *__s1, _QWORD *__s2, _BYTE *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v7;
  size_t v8;
  _BOOL4 v9;
  char *v13;
  char *v14;
  size_t v21;
  uint64_t v22;

  v3 = 4294967293;
  if (__s1)
  {
    v4 = __s2;
    if (__s2)
    {
      if (a3)
      {
        v6 = __s1;
        if (*(_DWORD *)__s1 == *(_DWORD *)__s2)
        {
          v7 = *((unsigned int *)__s1 + 7);
          if ((_DWORD)v7 == *((_DWORD *)__s2 + 7))
          {
            v3 = 4294967293;
            switch(*(_DWORD *)__s1)
            {
              case 1:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)__s1 + 44;
                v14 = (char *)__s2 + 44;
                goto LABEL_74;
              case 2:
                if (*((_DWORD *)__s1 + 8) != *((_DWORD *)__s2 + 8))
                  break;
                v8 = *((unsigned int *)__s1 + 9);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 9))
                  break;
                __s2 += 5;
                __s1 += 5;
                goto LABEL_8;
              case 3:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)(__s1 + 13);
                v14 = (char *)(__s2 + 13);
                goto LABEL_74;
              case 4:
              case 5:
              case 6:
              case 8:
              case 0xC:
              case 0xE:
              case 0xF:
              case 0x10:
              case 0x11:
              case 0x12:
              case 0x13:
              case 0x16:
              case 0x17:
                v8 = v7 + 32;
                goto LABEL_8;
              case 7:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v9 = sub_10008AF90((unint64_t)(__s1 + 4), 0x20uLL, (unint64_t)(__s2 + 4), 32);
                if (!v9)
                  goto LABEL_100;
                v13 = (char *)(v6 + 8);
                v14 = (char *)(v4 + 8);
                v21 = 24;
                v22 = 24;
                goto LABEL_103;
              case 9:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)(__s1 + 5);
                v14 = (char *)(__s2 + 5);
                goto LABEL_74;
              case 0xA:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v9 = sub_10008AF90((unint64_t)__s1 + 36, 0x10uLL, (unint64_t)__s2 + 36, 16);
                if (!v9)
                  goto LABEL_100;
                v13 = (char *)v6 + 52;
                v14 = (char *)v4 + 52;
LABEL_74:
                v21 = 16;
                v22 = 16;
                goto LABEL_103;
              case 0xD:
                v8 = *((unsigned int *)__s1 + 8);
                if ((_DWORD)v8 != *((_DWORD *)__s2 + 8))
                  break;
                __s2 = (_QWORD *)((char *)__s2 + 36);
                __s1 = (_QWORD *)((char *)__s1 + 36);
LABEL_8:
                LOBYTE(v9) = memcmp(__s1, __s2, v8) == 0;
                goto LABEL_100;
              case 0x14:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v14 = (char *)(__s2 + 4);
                v13 = (char *)(__s1 + 4);
                v21 = 32;
                v22 = 32;
                goto LABEL_103;
              case 0x15:
                if (*__s1 != *__s2 || __s1[1] != __s2[1] || __s1[2] != __s2[2] || __s1[3] != __s2[3])
                  break;
                v13 = (char *)__s1 + 36;
                v14 = (char *)__s2 + 36;
                v21 = 128;
                v22 = 128;
LABEL_103:
                LOBYTE(v9) = sub_10008AF90((unint64_t)v13, v21, (unint64_t)v14, v22);
                goto LABEL_100;
              default:
                return v3;
            }
          }
        }
        LOBYTE(v9) = 0;
LABEL_100:
        v3 = 0;
        *a3 = v9;
      }
    }
  }
  return v3;
}

BOOL sub_10008AF90(unint64_t __s1, size_t __n, unint64_t __s2, uint64_t a4)
{
  _BOOL8 result;
  BOOL v6;
  BOOL v7;

  if (__n != a4)
    return 0;
  if (!(__s1 | __s2))
    return 1;
  result = 0;
  v6 = __s1 == 0;
  if (__s2)
  {
    v7 = 1;
  }
  else
  {
    v6 = 0;
    v7 = __s1 == 0;
  }
  if (v7 && !v6)
    return memcmp((const void *)__s1, (const void *)__s2, __n) == 0;
  return result;
}

uint64_t GetSerializedAddCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeAddCredential(_OWORD *a1, unsigned int *__src, int a3, uint64_t a4, _QWORD *a5)
{
  BOOL v6;
  char v7;
  uint64_t result;
  size_t v12;
  uint64_t v13;

  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  result = 4294967293;
  if (a5)
  {
    if (a4)
    {
      if (__src)
      {
        if ((v7 & 1) == 0)
        {
          result = 4294967293;
          if (*__src <= 0x17 && ((1 << *__src) & 0xFFF7FE) != 0 && *a5 >= (unint64_t)__src[7] + 52)
          {
            if (a1)
            {
              *(_OWORD *)a4 = *a1;
            }
            else
            {
              *(_QWORD *)a4 = 0;
              *(_QWORD *)(a4 + 8) = 0;
            }
            v13 = *a5 - 16;
            result = SerializeCredential(__src, (void *)(a4 + 16), (size_t *)&v13);
            if (!(_DWORD)result)
            {
              v12 = v13;
              *(_DWORD *)(v13 + a4 + 16) = a3;
              *a5 = v12 + 20;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t DeserializeAddCredential(uint64_t a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5)
{
  uint64_t v5;
  uint64_t v10;
  _DWORD *v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  v5 = 4294967293;
  if (a1 && a2 >= 0x34 && a3 && a4 && a5)
  {
    *a3 = *(_OWORD *)a1;
    v10 = DeserializeCredential((unsigned int *)(a1 + 16), a2 - 16, (void **)&v12, &v13);
    if ((_DWORD)v10)
    {
      v5 = v10;
    }
    else if (a2 - (v13 + 16) >= 4)
    {
      v5 = 0;
      *a5 = *(_DWORD *)(a1 + v13 + 16);
      *a4 = v12;
      return v5;
    }
  }
  if (v12)
    Util_DeallocCredential(v12);
  return v5;
}

uint64_t DeserializeAddCredentialType(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 0x34 && a1)
  {
    if (a3)
    {
      result = 0;
      *a3 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t GetSerializedRemoveCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t GetSerializedReplacePassphraseCredentialSize(uint64_t a1, _DWORD *a2, int a3, _QWORD *a4)
{
  BOOL v4;
  char v5;
  uint64_t result;

  if (a1)
    v4 = 1;
  else
    v4 = a3 == 2;
  v5 = !v4;
  result = 4294967293;
  if (a4 && a2 && (v5 & 1) == 0 && *a2 <= 0x17u && ((1 << *a2) & 0xFFF7FE) != 0)
  {
    result = 0;
    *a4 = a2[7] + 52;
  }
  return result;
}

uint64_t SerializeCredentialList(unsigned int **a1, unsigned int a2, unsigned int *a3, _QWORD *a4)
{
  size_t v4;
  size_t v5;
  BOOL v6;
  unsigned int **v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  uint64_t result;
  size_t v16[9];

  if (a2)
    v6 = a1 == 0;
  else
    v6 = 0;
  if (v6 || a3 == 0 || a4 == 0)
    return 4294967293;
  v16[7] = v4;
  v16[8] = v5;
  *a3 = a2;
  if (a2)
  {
    v11 = a1;
    v12 = a2;
    v13 = 4;
    while (1)
    {
      v14 = *v11;
      if (!*v11)
        return 4294967293;
      v16[0] = *a4 - v13;
      result = SerializeCredential(v14, (char *)a3 + v13, v16);
      if ((_DWORD)result)
        return result;
      v13 += v16[0];
      ++v11;
      if (!--v12)
        goto LABEL_18;
    }
  }
  else
  {
    v13 = 4;
LABEL_18:
    result = 0;
    *a4 = v13;
  }
  return result;
}

uint64_t DeserializeCredentialList(unsigned int *a1, uint64_t a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = 0;
  v4 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      if (a4)
      {
        v8 = *a1;
        if (v8 <= 0x3E8)
        {
          if ((_DWORD)v8)
          {
            v10 = (char *)acm_mem_alloc(8 * v8);
            acm_mem_alloc_info("array of ACMCredentialRef", v10, 8 * v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1778, "DeserializeCredentialList");
            if (v10)
            {
              v11 = 0;
              v12 = 4;
              while (1)
              {
                v13 = DeserializeCredential((unsigned int *)((char *)a1 + v12), a2 - v12, (void **)&v10[v11], &v15);
                if ((_DWORD)v13)
                  break;
                v12 += v15;
                v11 += 8;
                if (8 * v8 == v11)
                  goto LABEL_12;
              }
              v4 = v13;
              DeallocCredentialList((_DWORD **)v10, v8);
            }
            else
            {
              return 4294967292;
            }
          }
          else
          {
            v10 = 0;
LABEL_12:
            v4 = 0;
            *a4 = v8;
            *a3 = v10;
          }
        }
      }
    }
  }
  return v4;
}

void DeallocCredentialList(_DWORD **a1, unsigned int a2)
{
  uint64_t v3;
  _DWORD **v4;
  uint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v4 = a1;
      v5 = a2;
      do
      {
        if (*v4)
        {
          Util_DeallocCredential(*v4);
          *v4 = 0;
        }
        ++v4;
        --v5;
      }
      while (v5);
    }
    v6 = 8 * v3;
    acm_mem_free_info("array of ACMCredentialRef", a1, v6, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibSerialization.c", 1816, "DeallocCredentialList");
    acm_mem_free(a1, v6);
  }
}

uint64_t GetSerializedGetContextPropertySize(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t result;

  if (!a3)
    return 4294967293;
  result = 0;
  *a3 = 20;
  return result;
}

__n128 SerializeGetContextProperty(__n128 *a1, unsigned __int32 a2, __n128 *a3, _QWORD *a4)
{
  __n128 result;

  if (a1 && a3 && a4 && *a4 >= 0x14uLL)
  {
    result = *a1;
    *a3 = *a1;
    a3[1].n128_u32[0] = a2;
    *a4 = 20;
  }
  return result;
}

uint64_t DeserializeGetContextProperty(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 0x10 && a1 && a3 && a4)
  {
    *a3 = *(_OWORD *)a1;
    if ((a2 & 0xFFFFFFFFFFFFFFFCLL) != 0x10)
    {
      result = 0;
      *a4 = *(_DWORD *)(a1 + 16);
    }
  }
  return result;
}

uint64_t LibSer_GetAclAuthMethod_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967293;
  result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_GetAclAuthMethod_Serialize(__n128 *a1, __n128 *a2, _QWORD *a3)
{
  __n128 result;

  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_GetAclAuthMethod_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  __n128 result;

  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_ContextCredentialGetProperty_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!a4)
    return 4294967293;
  result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, _QWORD *a5)
{
  __n128 result;

  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_ContextCredentialGetProperty_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  __n128 result;

  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_GetSize(_QWORD *a1)
{
  uint64_t result;

  if (!a1)
    return 4294967293;
  result = 0;
  *a1 = 8;
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Serialize(int a1, int a2, _DWORD *a3, _QWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a3 && a4 && *a4 >= 8uLL)
  {
    result = 0;
    *a3 = a1;
    a3[1] = a2;
    *a4 = 8;
  }
  return result;
}

uint64_t LibSer_GlobalContextCredentialGetProperty_Deserialize(_DWORD *a1, unint64_t a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a2 >= 8 && a1 && a3)
  {
    if (a4)
    {
      result = 0;
      *a3 = *a1;
      *a4 = a1[1];
    }
  }
  return result;
}

uint64_t LibSer_RemoveCredentialByType_GetSize(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;

  if (!a4)
    return 4294967293;
  result = 0;
  *a4 = 24;
  return result;
}

__n128 LibSer_RemoveCredentialByType_Serialize(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, __n128 *a4, _QWORD *a5)
{
  __n128 result;

  if (a1 && a4 && a5 && *a5 >= 0x18uLL)
  {
    result = *a1;
    *a4 = *a1;
    a4[1].n128_u32[0] = a2;
    a4[1].n128_u32[1] = a3;
    *a5 = 24;
  }
  return result;
}

__n128 LibSer_RemoveCredentialByType_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3, _DWORD *a4, _DWORD *a5)
{
  __n128 result;

  if (a2 >= 0x18 && a1 && a3 && a4)
  {
    if (a5)
    {
      result = *a1;
      *a3 = *a1;
      *a4 = a1[1].n128_u32[0];
      *a5 = a1[1].n128_u32[1];
    }
  }
  return result;
}

uint64_t LibSer_DeleteContext_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967293;
  result = 0;
  *a2 = 16;
  return result;
}

__n128 LibSer_DeleteContext_Serialize(__n128 *a1, __n128 *a2, _QWORD *a3)
{
  __n128 result;

  if (a1 && a2 && a3 && *a3 >= 0x10uLL)
  {
    result = *a1;
    *a2 = *a1;
    *a3 = 16;
  }
  return result;
}

__n128 LibSer_DeleteContext_Deserialize(__n128 *a1, unint64_t a2, __n128 *a3)
{
  __n128 result;

  if (a2 >= 0x10 && a1)
  {
    if (a3)
    {
      result = *a1;
      *a3 = *a1;
    }
  }
  return result;
}

uint64_t LibSer_StorageAnyCmd_DeserializeCommonFields(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4)
{
  uint64_t result;

  result = 4294967293;
  if (a1 && a2 >= 0x14)
  {
    if (a3)
      *a3 = *(_OWORD *)a1;
    result = 0;
    if (a4)
      *a4 = *(_DWORD *)(a1 + 16);
  }
  return result;
}

uint64_t LibSer_StorageSetData_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  if (!a4)
    return 4294967291;
  result = sub_1000892A0(a2, a3, &v7);
  if (!(_DWORD)result)
    *a4 = a1 + v7 + 28;
  return result;
}

uint64_t LibSer_StorageSetData_Serialize(_OWORD *a1, int a2, const void *a3, size_t a4, _DWORD *a5, unsigned int a6, uint64_t a7, size_t *a8)
{
  uint64_t result;
  size_t v17;
  unsigned int v18;

  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a7)
      {
        if (a8)
        {
          v18 = 0;
          result = sub_1000892A0(a5, a6, &v18);
          if (!(_DWORD)result)
          {
            if (*a8 < a4 + v18 + 28)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a7 = *a1;
              *(_DWORD *)(a7 + 16) = a2;
              *(_DWORD *)(a7 + 20) = a4;
              memcpy((void *)(a7 + 24), a3, a4);
              v17 = a4 + 24;
              result = sub_1000894C8((uint64_t)a5, a6, a7, (uint64_t *)&v17);
              if (!(_DWORD)result)
                *a8 = v17;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageSetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, _QWORD *a5, _QWORD *a6, _QWORD *a7, _DWORD *a8)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14[3];

  v10 = 4294967293;
  if (a1 && a2 >= 0x18 && a6 && a3 && a4 && a5 && a7 && a8)
  {
    v14[1] = v8;
    v14[2] = v9;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    v11 = *(unsigned int *)(a1 + 20);
    v14[0] = 24;
    *a6 = v11;
    if ((_DWORD)v11)
    {
      v12 = v11 + 24;
      if (v12 > a2)
        return 4294967293;
      *a5 = a1 + 24;
      v14[0] = v12;
    }
    else
    {
      *a5 = 0;
    }
    return sub_100089800(a1, a2, v14, a7, a8);
  }
  return v10;
}

uint64_t LibSer_StorageGetData_GetSize(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = 0;
  if (!a3)
    return 4294967291;
  result = sub_1000892A0(a1, a2, &v5);
  if (!(_DWORD)result)
    *a3 = v5 + 25;
  return result;
}

uint64_t LibSer_StorageGetData_Serialize(_OWORD *a1, int a2, char a3, _DWORD *a4, unsigned int a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v15;
  unsigned int v16;

  result = 4294967293;
  if (a1)
  {
    if (a2)
    {
      if (a6)
      {
        if (a7)
        {
          v16 = 0;
          result = sub_1000892A0(a4, a5, &v16);
          if (!(_DWORD)result)
          {
            if (*a7 < (unint64_t)v16 + 25)
            {
              return 4294967293;
            }
            else
            {
              *(_OWORD *)a6 = *a1;
              *(_DWORD *)(a6 + 16) = a2;
              *(_BYTE *)(a6 + 20) = a3;
              v15 = 21;
              result = sub_1000894C8((uint64_t)a4, a5, a6, &v15);
              if (!(_DWORD)result)
                *a7 = v15;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_StorageGetData_Deserialize(uint64_t a1, unint64_t a2, _OWORD *a3, _DWORD *a4, BOOL *a5, _QWORD *a6, _DWORD *a7)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11[3];

  v9 = 4294967293;
  if (a1 && a2 >= 0x15 && a3 && a4 && a5)
  {
    v11[1] = v7;
    v11[2] = v8;
    *a3 = *(_OWORD *)a1;
    *a4 = *(_DWORD *)(a1 + 16);
    *a5 = *(_BYTE *)(a1 + 20) != 0;
    v11[0] = 21;
    return sub_100089800(a1, a2, v11, a6, a7);
  }
  return v9;
}

uint64_t LibSer_GetUnlockSecret_GetSize(_DWORD *a1, unsigned int a2, _QWORD *a3)
{
  uint64_t result;
  unsigned int v5;

  v5 = 0;
  if (!a3)
    return 4294967291;
  result = sub_1000892A0(a1, a2, &v5);
  if (!(_DWORD)result)
    *a3 = v5 + 20;
  return result;
}

uint64_t LibSer_GetUnlockSecret_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, _OWORD *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v11;
  unsigned int v12;

  result = 4294967293;
  if (a1)
  {
    if (a4)
    {
      if (a5)
      {
        v12 = 0;
        result = sub_1000892A0(a2, a3, &v12);
        if (!(_DWORD)result)
        {
          if (*a5 < (unint64_t)v12 + 20)
          {
            return 4294967293;
          }
          else
          {
            *a4 = *a1;
            v11 = 16;
            result = sub_1000894C8((uint64_t)a2, a3, (uint64_t)a4, &v11);
            if (!(_DWORD)result)
              *a5 = v11;
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecret_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  unint64_t v9[3];

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 0x10 && a3 && a4)
  {
    if (a5)
    {
      v9[1] = v5;
      v9[2] = v6;
      *a3 = *a1;
      v9[0] = 16;
      return sub_100089800((uint64_t)a1, a2, v9, a4, a5);
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967291;
  result = 0;
  *a2 = a1 + 1;
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Serialize(void *__src, size_t __n, char a3, _BYTE *a4, _QWORD *a5)
{
  uint64_t result;
  size_t v9;

  result = 4294967293;
  if (__src && __n && a4 && a5)
  {
    v9 = __n + 1;
    if (*a5 < __n + 1)
    {
      return 4294967293;
    }
    else
    {
      *a4 = a3;
      memcpy(a4 + 1, __src, __n);
      result = 0;
      *a5 = v9;
    }
  }
  return result;
}

uint64_t LibSer_GetUnlockSecretResponse_Deserialize(_BYTE *a1, uint64_t a2, _QWORD *a3, _QWORD *a4, _BYTE *a5)
{
  uint64_t result;

  result = 4294967293;
  if (a2 && a5 && a1 && a3)
  {
    if (a4)
    {
      result = 0;
      *a5 = *a1;
      *a3 = a1 + 1;
      *a4 = a2 - 1;
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_GetSize(uint64_t a1, _DWORD *a2, unsigned int a3, _QWORD *a4)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  if (!a4)
    return 4294967291;
  result = sub_1000892A0(a2, a3, &v7);
  if (!(_DWORD)result)
    *a4 = a1 + v7 + 24;
  return result;
}

uint64_t LibSer_SEPControl_Serialize(_OWORD *a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6, _QWORD *a7)
{
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  result = 4294967293;
  if (a6)
  {
    if (a7)
    {
      v18 = 0;
      result = sub_1000892A0(a2, a3, &v18);
      if (!(_DWORD)result)
      {
        if (*a7 < a5 + v18 + 24)
        {
          return 4294967293;
        }
        else
        {
          if (a1)
          {
            *(_OWORD *)a6 = *a1;
          }
          else
          {
            *(_QWORD *)a6 = 0;
            *(_QWORD *)(a6 + 8) = 0;
          }
          v17 = 16;
          result = sub_1000894C8((uint64_t)a2, a3, a6, &v17);
          if (!(_DWORD)result)
          {
            v15 = v17;
            *(_DWORD *)(a6 + v17) = a5;
            v16 = v15 + 4;
            memcpy((void *)(a6 + v15 + 4), a4, a5);
            result = 0;
            *a7 = v16 + a5;
          }
        }
      }
    }
  }
  return result;
}

uint64_t LibSer_SEPControl_Deserialize(_OWORD *a1, unint64_t a2, _OWORD *a3, _QWORD *a4, _DWORD *a5, unint64_t *a6, _QWORD *a7)
{
  uint64_t result;
  unint64_t v11;
  unint64_t v12;

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 0x18 && a7 && a3 && a4 && a5 && a6)
  {
    *a3 = *a1;
    v12 = 16;
    result = sub_100089800((uint64_t)a1, a2, &v12, a4, a5);
    if (!(_DWORD)result)
    {
      v11 = (unint64_t)a1 + v12 + 4;
      *a7 = *(unsigned int *)((char *)a1 + v12);
      *a6 = v11;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_GetSize(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (!a2)
    return 4294967291;
  result = 0;
  *a2 = a1 + 4;
  return result;
}

uint64_t LibSer_SEPControlResponse_Serialize(void *__src, size_t __n, _DWORD *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = 4294967293;
  if (a3 && a4)
  {
    v8 = __n + 4;
    if (*a4 < __n + 4)
    {
      return 4294967293;
    }
    else
    {
      *a3 = __n;
      if (__src)
        memcpy(a3 + 1, __src, __n);
      else
        v8 = 4;
      result = 0;
      *a4 = v8;
    }
  }
  return result;
}

uint64_t LibSer_SEPControlResponse_Deserialize(unsigned int *a1, unint64_t a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t result;
  _DWORD *v6;
  unsigned int v7;

  if (!a1)
    return 4294967293;
  result = 4294967293;
  if (a2 >= 4 && a3 && a4)
  {
    result = 0;
    v7 = *a1;
    v6 = a1 + 1;
    *a4 = v7;
    if (!v7)
      v6 = 0;
    *a3 = v6;
  }
  return result;
}

uint64_t sub_10008C0EC(_DWORD *a1)
{
  if (!a1)
    return 4294967293;
  switch(*a1)
  {
    case 0:
    case 0xC:
      if (a1[4])
        return 4294967293;
      break;
    case 1:
    case 4:
    case 5:
    case 0xA:
      if (a1[4] != 4)
        return 4294967293;
      break;
    case 2:
    case 6:
    case 7:
      if (a1[4] != 16)
        return 4294967293;
      break;
    case 3:
      if ((a1[4] - 1001) < 0xFFFFFC18)
        return 4294967293;
      break;
    case 8:
    case 9:
      if (a1[4] != 1)
        return 4294967293;
      break;
    case 0xB:
      if (a1[4] > 0x400u)
        return 4294967293;
      break;
    default:
      return 4294967293;
  }
  return 0;
}

uint64_t LibCall_ACMKernelControl_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v12;
  _BYTE *v13;
  unsigned int v14;
  uint64_t v16;
  _BYTE v17[8192];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl_Block");
  v16 = 0x2000;
  v12 = LibCall_ACMKernelControl(a1, a2, a3, a4, a5, (uint64_t)v17, (uint64_t)&v16);
  if (a6)
  {
    if (v16)
      v13 = v17;
    else
      v13 = 0;
    (*(void (**)(uint64_t, _BYTE *))(a6 + 16))(a6, v13);
  }
  if ((_DWORD)v12)
    v14 = 70;
  else
    v14 = 10;
  if (v14 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl_Block", (int)v12);
  return v12;
}

uint64_t LibCall_ACMSEPControl_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8)
{
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  size_t v20;
  _BYTE v21[1024];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl_Block");
  v20 = 1024;
  v16 = LibCall_ACMSEPControl(a1, a2, a3, a4, a5, a6, a7, v21, &v20);
  if (a8)
  {
    if (v20)
      v17 = v21;
    else
      v17 = 0;
    (*(void (**)(uint64_t, _BYTE *))(a8 + 16))(a8, v17);
  }
  if ((_DWORD)v16)
    v18 = 70;
  else
    v18 = 10;
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl_Block", (int)v16);
  return v16;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty_Block(uint64_t result, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t (*v9)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, uint64_t *);
  uint64_t v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[256];

  v9 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, uint64_t *))result;
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block");
  v14 = 256;
  if (v9)
  {
    v13 = 8;
    result = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v15, &v13);
    if ((_DWORD)result)
    {
LABEL_7:
      v10 = result;
      goto LABEL_8;
    }
    if (v13 == 8)
    {
      result = v9(a2, 27, 0, &v15, 8, v16, &v14);
      goto LABEL_7;
    }
    v10 = 4294967291;
  }
  else
  {
    v10 = 4294967293;
  }
LABEL_8:
  if (a5)
  {
    if (v14)
      v11 = v16;
    else
      v11 = 0;
    result = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *))(a5 + 16))(a5, v10, v11);
  }
  if ((_DWORD)v10)
    v12 = 70;
  else
    v12 = 10;
  if (v12 >= gACMLoggingLevel)
    return printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty_Block", (int)v10);
  return result;
}

uint64_t LibCall_ACMContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *a4, uint64_t a5)
{
  return LibCall_ACMContextVerifyPolicyWithPreflight_Block(a1, a2, a3, a4, 0, a5);
}

uint64_t LibCall_ACMContextVerifyPolicyWithPreflight_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  int *v14;
  BOOL v16;
  int *v17;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block");
  v17 = 0;
  v16 = 0;
  v12 = 70;
  v13 = 4294967293;
  if (a3 && __s1 && a6)
  {
    v13 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, 0, 0, 0, &v16, &v17);
    v14 = v17;
    if (!(_DWORD)v13)
    {
      (*(void (**)(uint64_t, BOOL, int *))(a6 + 16))(a6, v16, v17);
      v14 = v17;
    }
    if (v14)
      Util_DeallocRequirement(v14);
    if ((_DWORD)v13)
      v12 = 70;
    else
      v12 = 10;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyWithPreflight_Block", (int)v13);
  return v13;
}

int *LibCall_ACMContextVerifyPolicyEx_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  _BOOL8 v17;
  int *v18;
  uint64_t v19;
  int *result;
  BOOL v21;
  int *v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  v17 = 0;
  v18 = 0;
  v22 = 0;
  v21 = 0;
  v19 = 4294967293;
  if (a3 && __s1 && a9)
  {
    v19 = LibCall_ACMContextVerifyPolicyEx(a1, a2, a3, __s1, a5, a6, a7, a8, &v21, &v22);
    v18 = v22;
    v17 = v21;
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL8, int *))(a9 + 16))(a9, v19, v17, v18);
  result = v22;
  if (v22)
    result = (int *)Util_DeallocRequirement(v22);
  if (gACMLoggingLevel <= 0xAu)
    return (int *)printf("%s: %s: returning.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx_Block");
  return result;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicy_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, uint64_t a7)
{
  uint64_t result;
  int v15[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  *(_QWORD *)v15 = 0;
  result = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))a1, a2, v15, 0, 1);
  if ((_DWORD)result)
  {
    if (a7)
      result = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a7 + 16))(a7, result, 0, 0);
  }
  else
  {
    result = (uint64_t)LibCall_ACMContextVerifyPolicyEx_Block(a1, a2, *(_OWORD **)v15, a3, a4, a5, a6, 0xFFFFFFFFLL, a7);
  }
  if (*(_QWORD *)v15)
    result = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))a1, a2, *(void **)v15, 1);
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicy_Block");
  return result;
}

uint64_t LibCall_ACMGetEnvironmentVariable_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  void *v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v14;
  _BYTE v15[128];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block");
  v14 = 128;
  if (!a4)
  {
    v12 = 70;
    v9 = 4294967293;
    goto LABEL_17;
  }
  if (a3 == 36)
  {
    v8 = acm_mem_alloc_data(0x800uLL);
    acm_mem_alloc_info("<data>", v8, 2048, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 162, "LibCall_ACMGetEnvironmentVariable_Block");
    if (!v8)
    {
      v12 = 70;
      v9 = 4294967292;
      goto LABEL_17;
    }
    v14 = 2048;
    v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, 36, (uint64_t)v8, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14)
        v10 = v8;
      else
        v10 = 0;
      (*(void (**)(uint64_t, void *))(a4 + 16))(a4, v10);
      acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
      acm_mem_free_data(v8, 0x800uLL);
LABEL_16:
      v12 = 10;
      goto LABEL_17;
    }
    acm_mem_free_info("<data>", v8, 0x800uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCallBlock.c", 176, "LibCall_ACMGetEnvironmentVariable_Block");
    acm_mem_free_data(v8, 0x800uLL);
  }
  else
  {
    v9 = LibCall_ACMGetEnvironmentVariable(a1, a2, a3, (uint64_t)v15, (uint64_t)&v14);
    if (!(_DWORD)v9)
    {
      if (v14)
        v11 = v15;
      else
        v11 = 0;
      (*(void (**)(uint64_t, _BYTE *))(a4 + 16))(a4, v11);
      goto LABEL_16;
    }
  }
  v12 = 70;
LABEL_17:
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable_Block", (int)v9);
  return v9;
}

uint64_t LibCall_ACMTRMLoadState_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  unsigned int v8;
  uint64_t v10;
  _BYTE v11[8192];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState_Block");
  v10 = 0x2000;
  if (a3)
  {
    v6 = LibCall_ACMTRMLoadState(a1, a2, (uint64_t)v11, (uint64_t)&v10);
    if ((_DWORD)v6)
    {
      v8 = 70;
    }
    else
    {
      if (v10)
        v7 = v11;
      else
        v7 = 0;
      (*(void (**)(uint64_t, _BYTE *))(a3 + 16))(a3, v7);
      v8 = 10;
    }
  }
  else
  {
    v8 = 70;
    v6 = 4294967293;
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState_Block", (int)v6);
  return v6;
}

uint64_t LibCall_ACMContextUnloadToImage_Block(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, int *), uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v8;
  _BYTE *v9;
  unsigned int v10;
  uint64_t v12;
  _BYTE v13[4096];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block");
  v12 = 4096;
  if (a4)
  {
    v8 = LibCall_ACMContextUnloadToImage(a1, a2, a3, v13, &v12);
    if ((_DWORD)v8)
    {
      v10 = 70;
    }
    else
    {
      if (v12)
        v9 = v13;
      else
        v9 = 0;
      (*(void (**)(uint64_t, _BYTE *))(a4 + 16))(a4, v9);
      v10 = 10;
    }
  }
  else
  {
    v10 = 70;
    v8 = 4294967293;
  }
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage_Block", (int)v8);
  return v8;
}

uint64_t LibCall_ACMGetAclAuthMethod_Block(uint64_t result, uint64_t a2, __n128 *a3, uint64_t a4)
{
  void (*v7)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, _BYTE *, uint64_t *, __n128);
  __n128 AclAuthMethod_Serialize;
  int v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  _BYTE v13[256];

  v7 = (void (*)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, _BYTE *, uint64_t *, __n128))result;
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  v11 = 256;
  if (v7 && a3 && a4)
  {
    v10 = 16;
    AclAuthMethod_Serialize = LibSer_GetAclAuthMethod_Serialize(a3, &v12, &v10);
    if (!v9 && v10 == 16)
      v7(a2, 31, 0, &v12, 16, v13, &v11, AclAuthMethod_Serialize);
    goto LABEL_9;
  }
  if (a4)
LABEL_9:
    result = (*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "LibCall_ACMGetAclAuthMethod_Block");
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraint(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  return sub_10008CFE8(a1, a2, 0xBu, a3, a4, a5, 0, 0, a6, a7, a8, a9, a10);
}

uint64_t sub_10008CFE8(uint64_t result, uint64_t a2, unsigned __int8 a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, uint64_t a13)
{
  uint64_t (*v20)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *);
  uint64_t v21;
  int *v22;
  _BOOL8 v23;
  BOOL v24;
  int *v25;

  v20 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *))result;
  if (gACMLoggingLevel <= 0xAu)
    result = printf("%s: %s: called.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  v25 = 0;
  v24 = 0;
  if (a4 && a5 && a6 && a13)
  {
    v21 = verifyAclConstraintInternal(v20, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, &v24, &v25);
    v22 = v25;
    v23 = v24;
  }
  else
  {
    if (!a13)
      goto LABEL_10;
    v22 = 0;
    v23 = 0;
    v21 = 4294967293;
  }
  (*(void (**)(uint64_t, uint64_t, _BOOL8, int *))(a13 + 16))(a13, v21, v23, v22);
  result = (uint64_t)v25;
  if (v25)
    result = Util_DeallocRequirement(v25);
LABEL_10:
  if (gACMLoggingLevel <= 0xAu)
    return printf("%s: %s: returning.\n", "ACM", "verifyAclConstraintForOperationCommandInternal");
  return result;
}

uint64_t LibCall_ACMContextVerifyAclConstraintForOperation(uint64_t a1, uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, uint64_t a12)
{
  return sub_10008CFE8(a1, a2, 0x20u, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

uint64_t Util_GetBitCount(uint64_t a1)
{
  uint8x8_t v1;

  v1 = (uint8x8_t)vcnt_s8((int8x8_t)a1);
  v1.i16[0] = vaddlv_u8(v1);
  return v1.u32[0];
}

BOOL Util_isNullOrZeroMemory(_BYTE *a1, uint64_t a2)
{
  if (!a1)
    return 1;
  if (*a1)
    return 0;
  return memcmp(a1, a1 + 1, a2 - 1) == 0;
}

BOOL Util_isNonNullEqualMemory(void *__s1, size_t __n, void *__s2, uint64_t a4)
{
  _BOOL8 result;

  if (__n != a4)
    return 0;
  result = 0;
  if (__s1)
  {
    if (__s2)
      return memcmp(__s1, __s2, __n) == 0;
  }
  return result;
}

char *Util_hexDumpToStrHelper(char *result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4;
  _BYTE *v5;
  char v6;

  if (!result && a2)
    sub_10008E848();
  if (!a3 && a4)
    sub_10008E870();
  if (a2 >= a4)
    v4 = a4;
  else
    v4 = a2;
  if (v4)
  {
    v5 = (_BYTE *)(a3 + 1);
    do
    {
      *(v5 - 1) = a0123456789abcd[(unint64_t)*result >> 4];
      v6 = *result++;
      *v5 = a0123456789abcd[v6 & 0xF];
      v5 += 2;
      --v4;
    }
    while (v4);
  }
  return result;
}

uint64_t Util_WriteToBuffer(uint64_t a1, size_t a2, _QWORD *a3, void *__src, size_t __n)
{
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_WriteToBuffer");
  if (a3)
  {
    v10 = *a3;
    v11 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (a1 && v11 > a2)
      {
        v12 = 4294967276;
        goto LABEL_19;
      }
      if (!a1 || !__src || !__n)
        goto LABEL_12;
      if (!__CFADD__(a1, v10))
      {
        memcpy((void *)(a1 + v10), __src, __n);
LABEL_12:
        v12 = 0;
        *a3 = v11;
        v13 = 10;
        goto LABEL_13;
      }
    }
    v12 = 4294967291;
  }
  else
  {
    v12 = 4294967293;
  }
LABEL_19:
  v13 = 70;
LABEL_13:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_WriteToBuffer", (int)v12);
  return v12;
}

uint64_t Util_ReadFromBuffer(uint64_t a1, size_t a2, _QWORD *a3, void *__dst, size_t __n)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  size_t v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_ReadFromBuffer");
  v10 = 4294967293;
  v11 = 70;
  if (a1 && a3)
  {
    v12 = *a3;
    v13 = *a3 + __n;
    if (!__CFADD__(*a3, __n))
    {
      if (v13 > a2)
      {
        v10 = 4294967276;
        goto LABEL_17;
      }
      if (!__dst || !__n)
        goto LABEL_11;
      if (!__CFADD__(a1, v12))
      {
        memcpy(__dst, (const void *)(a1 + v12), __n);
LABEL_11:
        v10 = 0;
        *a3 = v13;
        v11 = 10;
        goto LABEL_12;
      }
    }
    v10 = 4294967291;
LABEL_17:
    v11 = 70;
  }
LABEL_12:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_ReadFromBuffer", (int)v10);
  return v10;
}

unint64_t Util_KeybagLockStateToEnvVar(unsigned int a1)
{
  unint64_t v1;

  v1 = 0x2010103020201uLL >> (8 * a1);
  if (a1 >= 7)
    LOBYTE(v1) = 1;
  return v1 & 3;
}

void Util_SafeDeallocParameters(unsigned int *a1, unsigned int a2)
{
  uint64_t v3;
  unsigned int *v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;

  if (a1)
  {
    v3 = a2;
    if (a2)
    {
      v4 = a1 + 4;
      v5 = a2;
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          v7 = *v4;
          acm_mem_free_info("<data>", *((const void **)v4 - 1), v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 118, "Util_SafeDeallocParameters");
          acm_mem_free_data(v6, v7);
        }
        v4 += 6;
        --v5;
      }
      while (v5);
    }
    acm_mem_free_info("array of ACMParameter", a1, 24 * v3, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 121, "Util_SafeDeallocParameters");
    acm_mem_free(a1, 24 * v3);
  }
}

uint64_t Util_DeallocCredential(_DWORD *a1)
{
  uint64_t v2;
  unsigned int v3;
  const char *v4;
  rsize_t v5;
  const void *v6;
  unint64_t v7;
  int v8;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocCredential");
  if (a1)
  {
    v2 = 4294967293;
    v3 = 70;
    switch(*a1)
    {
      case 1:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated";
        v5 = 60;
        v6 = a1;
        v7 = 60;
        v8 = 144;
        goto LABEL_6;
      case 2:
        v4 = "ACMCredential - ACMCredentialDataPassphraseEntered";
        v5 = 168;
        v6 = a1;
        v7 = 168;
        v8 = 136;
        goto LABEL_6;
      case 3:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatched";
        v5 = 337;
        v6 = a1;
        v7 = 337;
        v8 = 140;
        goto LABEL_6;
      case 4:
      case 5:
      case 6:
      case 8:
      case 0xE:
      case 0x10:
      case 0x13:
      case 0x16:
      case 0x17:
        v4 = "ACMCredential";
        v5 = 32;
        v6 = a1;
        v7 = 32;
        v8 = 189;
        goto LABEL_6;
      case 7:
        v4 = "ACMCredential - ACMCredentialDataUserOutputDisplayed";
        v5 = 88;
        v6 = a1;
        v7 = 88;
        v8 = 152;
        goto LABEL_6;
      case 9:
        v4 = "ACMCredential - ACMCredentialDataContinuityUnlock";
        v5 = 56;
        v6 = a1;
        v7 = 56;
        v8 = 156;
        goto LABEL_6;
      case 0xA:
        v4 = "ACMCredential - ACMCredentialDataPasscodeValidated2";
        v5 = 84;
        v6 = a1;
        v7 = 84;
        v8 = 148;
        goto LABEL_6;
      case 0xC:
      case 0xF:
        v4 = "ACMCredential - ACMCredentialDataKextDenyList";
        v5 = 40;
        v6 = a1;
        v7 = 40;
        v8 = 161;
        goto LABEL_6;
      case 0xD:
        v4 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 132;
        goto LABEL_6;
      case 0x11:
        v4 = "ACMCredential - ACMCredentialDataSecureIntent";
        v5 = 113;
        v6 = a1;
        v7 = 113;
        v8 = 165;
        goto LABEL_6;
      case 0x12:
        v4 = "ACMCredential - ACMCredentialDataBiometryMatchAttempted";
        v5 = 52;
        v6 = a1;
        v7 = 52;
        v8 = 169;
        goto LABEL_6;
      case 0x14:
        v4 = "ACMCredential - ACMCredentialDataAP";
        v5 = 64;
        v6 = a1;
        v7 = 64;
        v8 = 173;
        goto LABEL_6;
      case 0x15:
        v4 = "ACMCredential - ACMCredentialDataSignature";
        v5 = 164;
        v6 = a1;
        v7 = 164;
        v8 = 177;
LABEL_6:
        acm_mem_free_info(v4, v6, v7, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v8, "Util_DeallocCredential");
        acm_mem_free(a1, v5);
        v2 = 0;
        v3 = 10;
        break;
      default:
        break;
    }
  }
  else
  {
    v2 = 4294967293;
    v3 = 70;
  }
  if (v3 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocCredential", (int)v2);
  return v2;
}

uint64_t Util_AllocCredential(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v5;
  int v6;
  const char *v7;
  const void *v8;
  int v9;

  if (!a2)
    return 4294967293;
  result = 4294967293;
  switch(a1)
  {
    case 1:
      v5 = acm_mem_alloc(0x3CuLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated", v5, 60, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 226, "Util_AllocCredential");
      v6 = 28;
      goto LABEL_4;
    case 2:
      v5 = acm_mem_alloc(0xA8uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPassphraseEntered", v5, 168, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 216, "Util_AllocCredential");
      v6 = 136;
      goto LABEL_4;
    case 3:
      v5 = acm_mem_alloc(0x151uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatched", v5, 337, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 221, "Util_AllocCredential");
      v6 = 305;
      goto LABEL_4;
    case 4:
    case 5:
    case 6:
    case 8:
    case 14:
    case 16:
    case 19:
    case 22:
    case 23:
      v5 = acm_mem_alloc(0x20uLL);
      acm_mem_alloc_info("ACMCredential", v5, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 280, "Util_AllocCredential");
      v6 = 0;
      goto LABEL_4;
    case 7:
      v5 = acm_mem_alloc(0x58uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataUserOutputDisplayed", v5, 88, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 236, "Util_AllocCredential");
      v6 = 56;
      goto LABEL_4;
    case 9:
      v5 = acm_mem_alloc(0x38uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataContinuityUnlock", v5, 56, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 241, "Util_AllocCredential");
      v6 = 24;
      goto LABEL_4;
    case 10:
      v5 = acm_mem_alloc(0x54uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataPasscodeValidated2", v5, 84, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 231, "Util_AllocCredential");
      v6 = 52;
      goto LABEL_4;
    case 12:
    case 15:
      v5 = acm_mem_alloc(0x28uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataKextDenyList", v5, 40, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 247, "Util_AllocCredential");
      v6 = 8;
      goto LABEL_4;
    case 13:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataPassphraseExtractable";
      v8 = v5;
      v9 = 211;
      goto LABEL_18;
    case 17:
      v5 = acm_mem_alloc(0x71uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataSecureIntent", v5, 113, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 252, "Util_AllocCredential");
      v6 = 81;
      goto LABEL_4;
    case 18:
      v5 = acm_mem_alloc(0x34uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataBiometryMatchAttempted", v5, 52, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 257, "Util_AllocCredential");
      v6 = 20;
      goto LABEL_4;
    case 20:
      v5 = acm_mem_alloc(0x40uLL);
      acm_mem_alloc_info("ACMCredential - ACMCredentialDataAP", v5, 64, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 262, "Util_AllocCredential");
      v6 = 32;
      goto LABEL_4;
    case 21:
      v5 = acm_mem_alloc(0xA4uLL);
      v7 = "ACMCredential - ACMCredentialDataSignature";
      v8 = v5;
      v9 = 267;
LABEL_18:
      acm_mem_alloc_info(v7, v8, 164, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v9, "Util_AllocCredential");
      v6 = 132;
LABEL_4:
      if (v5)
      {
        result = 0;
        *v5 = a1;
        v5[1] = 1;
        v5[7] = v6;
        v5[3] = -1;
        *a2 = v5;
      }
      else
      {
        result = 4294967292;
      }
      break;
    default:
      return result;
  }
  return result;
}

uint64_t Util_AllocRequirement(int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  const char *v11;
  const void *v12;
  int v13;
  const char *v14;
  const void *v15;
  int v16;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_AllocRequirement");
  if (a3)
  {
    v6 = 4294967293;
    v7 = 70;
    switch(a1)
    {
      case 1:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
        v12 = v8;
        v13 = 338;
        goto LABEL_49;
      case 2:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
        v12 = v8;
        v13 = 343;
        goto LABEL_49;
      case 3:
        v8 = acm_mem_alloc(0xACuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatched", v8, 172, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 348, "Util_AllocRequirement");
        v9 = 156;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 4:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataOr";
        v15 = v8;
        v16 = 406;
        goto LABEL_28;
      case 5:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x64uLL);
        v14 = "ACMRequirement - ACMRequirementDataAnd";
        v15 = v8;
        v16 = 398;
LABEL_28:
        acm_mem_alloc_info(v14, v15, 100, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v16, "Util_AllocRequirement");
        v9 = 84;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 6:
      case 9:
      case 10:
      case 11:
      case 12:
      case 14:
      case 15:
      case 18:
      case 19:
      case 22:
      case 23:
      case 27:
      case 28:
        v8 = acm_mem_alloc(0x10uLL);
        acm_mem_alloc_info("ACMRequirement", v8, 16, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 333, "Util_AllocRequirement");
        v9 = 0;
        if (v8)
          goto LABEL_6;
        goto LABEL_50;
      case 7:
        if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
          goto LABEL_53;
        v8 = acm_mem_alloc(0x68uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofN", v8, 104, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 391, "Util_AllocRequirement");
        v9 = 88;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 8:
        v8 = acm_mem_alloc(0x410uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAccessGroups", v8, 1040, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 378, "Util_AllocRequirement");
        v9 = 1024;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 13:
        v8 = acm_mem_alloc(0x30uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataUserOutputDisplayed", v8, 48, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 363, "Util_AllocRequirement");
        v9 = 32;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 16:
      case 17:
        break;
      case 20:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataSecureIntent";
        v12 = v8;
        v13 = 353;
        goto LABEL_49;
      case 21:
        v8 = acm_mem_alloc(0x14uLL);
        v11 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
        v12 = v8;
        v13 = 358;
LABEL_49:
        acm_mem_alloc_info(v11, v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_AllocRequirement");
        v9 = 4;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 24:
        v8 = acm_mem_alloc(0x434uLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataAP", v8, 1076, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 368, "Util_AllocRequirement");
        v9 = 1060;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 25:
        v8 = acm_mem_alloc(0x3BuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKeyRef", v8, 59, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 373, "Util_AllocRequirement");
        v9 = 43;
        if (!v8)
          goto LABEL_50;
        goto LABEL_6;
      case 26:
        v8 = acm_mem_alloc(0x2CuLL);
        acm_mem_alloc_info("ACMRequirement - ACMRequirementDataRatchet", v8, 44, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 384, "Util_AllocRequirement");
        v9 = 28;
        if (!v8)
        {
LABEL_50:
          v6 = 4294967292;
          goto LABEL_54;
        }
LABEL_6:
        *v8 = a1;
        *(_QWORD *)(v8 + 1) = 0x100000001;
        v8[3] = v9;
        if ((a1 & 0xFFFFFFFE) == 4)
        {
          v8[4] = a2;
        }
        else if (a1 == 1000)
        {
          v8[13] = a2;
        }
        else if (a1 == 7)
        {
          v8[5] = a2;
        }
        v6 = 0;
        *a3 = v8;
        v7 = 10;
        break;
      default:
        switch(a1)
        {
          case 1000:
            if ((unint64_t)(a2 - 11) < 0xFFFFFFFFFFFFFFF6)
              goto LABEL_53;
            v8 = acm_mem_alloc(0x88uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataKofNWithAttributes", v8, 136, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 414, "Util_AllocRequirement");
            v9 = 120;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1001:
            v8 = acm_mem_alloc(0xB8uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes", v8, 184, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 419, "Util_AllocRequirement");
            v9 = 168;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          case 1002:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
            v12 = v8;
            v13 = 424;
            goto LABEL_49;
          case 1003:
            v8 = acm_mem_alloc(0x14uLL);
            v11 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
            v12 = v8;
            v13 = 429;
            goto LABEL_49;
          case 1004:
            v8 = acm_mem_alloc(0x20uLL);
            acm_mem_alloc_info("ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes", v8, 32, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", 434, "Util_AllocRequirement");
            v9 = 16;
            if (!v8)
              goto LABEL_50;
            goto LABEL_6;
          default:
            goto LABEL_17;
        }
    }
  }
  else
  {
LABEL_53:
    v6 = 4294967293;
LABEL_54:
    v7 = 70;
  }
LABEL_17:
  if (v7 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_AllocRequirement", (int)v6);
  return v6;
}

uint64_t Util_CreateRequirement(int a1, uint64_t a2)
{
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_CreateRequirement");
  v5 = 0;
  Util_AllocRequirement(a1, a2, &v5);
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "Util_CreateRequirement");
  return v5;
}

uint64_t Util_DeallocRequirement(int *a1)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  rsize_t v10;
  int *v11;
  unint64_t v12;
  int v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "Util_DeallocRequirement");
  if (!a1)
  {
    v7 = 4294967293;
    v8 = 70;
    goto LABEL_28;
  }
  v2 = *a1;
  if (*a1 > 6)
  {
    if (v2 == 7)
    {
      if (a1[5])
      {
        v6 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v6++ + 6]);
        while (v6 < a1[5]);
      }
    }
    else
    {
      if (v2 != 1000)
        goto LABEL_25;
      if (a1[13])
      {
        v4 = 0;
        do
          Util_DeallocRequirement(*(_QWORD *)&a1[2 * v4++ + 14]);
        while (v4 < a1[13]);
      }
    }
  }
  else if (v2 == 4)
  {
    if (a1[4])
    {
      v5 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v5++ + 5]);
      while (v5 < a1[4]);
    }
  }
  else
  {
    if (v2 != 5)
      goto LABEL_25;
    if (a1[4])
    {
      v3 = 0;
      do
        Util_DeallocRequirement(*(_QWORD *)&a1[2 * v3++ + 5]);
      while (v3 < a1[4]);
    }
  }
  v2 = *a1;
LABEL_25:
  v7 = 4294967293;
  v8 = 70;
  switch(v2)
  {
    case 1:
      v9 = "ACMRequirement - ACMRequirementDataPasscodeValidated";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 542;
      goto LABEL_27;
    case 2:
      v9 = "ACMRequirement - ACMRequirementDataPassphraseEntered";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 546;
      goto LABEL_27;
    case 3:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatched";
      v10 = 172;
      v11 = a1;
      v12 = 172;
      v13 = 550;
      goto LABEL_27;
    case 4:
      v9 = "ACMRequirement - ACMRequirementDataOr";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 595;
      goto LABEL_27;
    case 5:
      v9 = "ACMRequirement - ACMRequirementDataAnd";
      v10 = 100;
      v11 = a1;
      v12 = 100;
      v13 = 589;
      goto LABEL_27;
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 14:
    case 15:
    case 18:
    case 19:
    case 22:
    case 23:
    case 27:
    case 28:
      v9 = "ACMRequirement";
      v10 = 16;
      v11 = a1;
      v12 = 16;
      v13 = 538;
      goto LABEL_27;
    case 7:
      v9 = "ACMRequirement - ACMRequirementDataKofN";
      v10 = 104;
      v11 = a1;
      v12 = 104;
      v13 = 584;
      goto LABEL_27;
    case 8:
      v9 = "ACMRequirement - ACMRequirementDataAccessGroups";
      v10 = 1040;
      v11 = a1;
      v12 = 1040;
      v13 = 574;
      goto LABEL_27;
    case 13:
      v9 = "ACMRequirement - ACMRequirementDataUserOutputDisplayed";
      v10 = 48;
      v11 = a1;
      v12 = 48;
      v13 = 562;
      goto LABEL_27;
    case 16:
    case 17:
      break;
    case 20:
      v9 = "ACMRequirement - ACMRequirementDataSecureIntent";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 554;
      goto LABEL_27;
    case 21:
      v9 = "ACMRequirement - ACMRequirementDataBiometryMatchAttempted";
      v10 = 20;
      v11 = a1;
      v12 = 20;
      v13 = 558;
      goto LABEL_27;
    case 24:
      v9 = "ACMRequirement - ACMRequirementDataAP";
      v10 = 1076;
      v11 = a1;
      v12 = 1076;
      v13 = 566;
      goto LABEL_27;
    case 25:
      v9 = "ACMRequirement - ACMRequirementDataKeyRef";
      v10 = 59;
      v11 = a1;
      v12 = 59;
      v13 = 570;
      goto LABEL_27;
    case 26:
      v9 = "ACMRequirement - ACMRequirementDataRatchet";
      v10 = 44;
      v11 = a1;
      v12 = 44;
      v13 = 579;
LABEL_27:
      acm_mem_free_info(v9, v11, v12, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/CommonUtil.c", v13, "Util_DeallocRequirement");
      acm_mem_free(a1, v10);
      v7 = 0;
      v8 = 10;
      break;
    default:
      switch(v2)
      {
        case 1000:
          v9 = "ACMRequirement - ACMRequirementDataKofNWithAttributes";
          v10 = 136;
          v11 = a1;
          v12 = 136;
          v13 = 601;
          goto LABEL_27;
        case 1001:
          v9 = "ACMRequirement - ACMRequirementDataBiometryMatchedWithAttributes";
          v10 = 184;
          v11 = a1;
          v12 = 184;
          v13 = 605;
          goto LABEL_27;
        case 1002:
          v9 = "ACMRequirement - ACMRequirementDataPushButtonWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 609;
          goto LABEL_27;
        case 1003:
          v9 = "ACMRequirement - ACMRequirementDataSecureStateWithAttributes";
          v10 = 20;
          v11 = a1;
          v12 = 20;
          v13 = 613;
          goto LABEL_27;
        case 1004:
          v9 = "ACMRequirement - ACMRequirementDataPasscodeValidatedWithAttributes";
          v10 = 32;
          v11 = a1;
          v12 = 32;
          v13 = 617;
          goto LABEL_27;
        default:
          goto LABEL_28;
      }
  }
LABEL_28:
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "Util_DeallocRequirement", (int)v7);
  return v7;
}

void sub_10008E848()
{
  __assert_rtn("Util_hexDumpToStrHelper", "CommonUtil.c", 32, "src || !srcLen");
}

void sub_10008E870()
{
  __assert_rtn("Util_hexDumpToStrHelper", "CommonUtil.c", 33, "dst || !dstCapacity");
}

uint64_t ACMContextCreate(uint64_t *a1)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))sub_10008EAC0, (uint64_t)&v6, a1, &byte_1000DF741, 1);
  if ((_DWORD)v2)
  {
    sub_1000939F8();
    v3 = 70;
  }
  else
  {
    v3 = 10;
    if (a1 && byte_1000DF741 <= 0x28u)
    {
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
      {
        v4 = *a1;
        if (*a1)
          LODWORD(v4) = *(_DWORD *)(v4 + 16);
        *(_DWORD *)buf = 136315650;
        v8 = "ACMLib";
        v9 = 2080;
        v10 = "ACMContextCreate";
        v11 = 1024;
        LODWORD(v12) = v4;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] created.\n", buf, 0x1Cu);
      }
      v3 = 10;
    }
  }
  if (v3 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMContextCreate";
    v11 = 2048;
    v12 = (int)v2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v2;
}

uint64_t sub_10008EAC0(uint64_t *a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  int v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315394;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v18, 0x16u);
  }
  if (a1)
  {
    v14 = sub_10008F290();
    v15 = 70;
    if ((_DWORD)v14)
    {
      v16 = v14;
    }
    else
    {
      v16 = sub_10008F470(*a1, a2, a3, a4, a5, a6, a7);
      if ((_DWORD)v16)
        v15 = 70;
      else
        v15 = 10;
    }
  }
  else
  {
    v15 = 70;
    v16 = 4294967293;
  }
  if (v15 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v18 = 136315650;
    v19 = "ACMLib";
    v20 = 2080;
    v21 = "ioKitTransport";
    v22 = 2048;
    v23 = (int)v16;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v18, 0x20u);
  }
  return v16;
}

_DWORD *ACMContextCreateWithExternalForm(_OWORD *a1, uint64_t a2)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v8;
  uint8_t buf[4];
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  _DWORD *v14;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v8 = 0;
  v4 = LibCall_ACMContextCreateWithExternalForm((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *))sub_10008EAC0, (uint64_t)&v8, a1, a2, &byte_1000DF741, 1);
  if (v4)
  {
    if (byte_1000DF741 <= 0x28u && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
    {
      v5 = v4[4];
      *(_DWORD *)buf = 136315650;
      v10 = "ACMLib";
      v11 = 2080;
      v12 = "ACMContextCreateWithExternalForm";
      v13 = 1024;
      LODWORD(v14) = v5;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] acquired.\n", buf, 0x1Cu);
    }
    v6 = 30;
  }
  else
  {
    sub_1000939F8();
    v6 = 70;
  }
  if (v6 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextCreateWithExternalForm";
    v13 = 2048;
    v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, -> ctx = %p.\n", buf, 0x20u);
  }
  return v4;
}

uint64_t ACMContextDelete(_DWORD *a1, int a2)
{
  unsigned int v4;
  int v5;
  const char *v6;
  uint64_t v7;
  unsigned int v8;
  _DWORD *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  _QWORD v16[2];

  v4 = byte_1000DF741;
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
    v4 = byte_1000DF741;
  }
  if (a1 && v4 <= 0x28 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = a1[4];
    v6 = "deleted";
    *(_DWORD *)buf = 136315906;
    v12 = "ACMLib";
    v14 = "ACMContextDelete";
    v13 = 2080;
    if (a2)
      v6 = "destroyed";
    v15 = 1024;
    LODWORD(v16[0]) = v5;
    WORD2(v16[0]) = 2080;
    *(_QWORD *)((char *)v16 + 6) = v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: CS[%u] %s.\n", buf, 0x26u);
  }
  v10 = a1;
  v7 = LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))sub_10008EAC0, (uint64_t)&v10, a1, a2);
  if ((_DWORD)v7)
    v8 = 70;
  else
    v8 = 10;
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextDelete";
    v15 = 2048;
    v16[0] = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMContextGetExternalForm(const void *a1, uint64_t a2)
{
  int v4;
  const char *v5;
  __int16 v6;
  const char *v7;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v4, 0x16u);
  }
  if (!a1
    || !a2
    || sub_10008F290()
    || sub_10008F470((uint64_t)a1, 19, 0, a1, 0x10uLL, 0, 0))
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD))(a2 + 16))(a2, 0, 0);
  }
  else
  {
    (*(void (**)(uint64_t, const void *, uint64_t))(a2 + 16))(a2, a1, 16);
  }
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v4 = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "ACMContextGetExternalForm";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v4, 0x16u);
  }
}

uint64_t sub_10008F290()
{
  uint64_t v0;
  const __CFDictionary *v1;
  io_service_t MatchingService;
  io_object_t v3;
  unsigned int v4;
  int v6;
  const char *v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315394;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v6, 0x16u);
  }
  if ((byte_1000E0264 & 1) != 0)
  {
    v0 = 0;
  }
  else
  {
    v1 = IOServiceMatching("AppleCredentialManager");
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v1);
    if (!MatchingService)
    {
      v4 = 70;
      v0 = 4294967291;
      goto LABEL_10;
    }
    v3 = MatchingService;
    v0 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)&dword_1000E0260);
    if ((_DWORD)v0)
    {
      v4 = 70;
      goto LABEL_10;
    }
    IOObjectRelease(v3);
    byte_1000E0264 = 1;
  }
  v4 = 10;
LABEL_10:
  if (v4 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v6 = 136315650;
    v7 = "ACMLib";
    v8 = 2080;
    v9 = "init";
    v10 = 2048;
    v11 = (int)v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v6, 0x20u);
  }
  return v0;
}

uint64_t sub_10008F470(uint64_t a1, int a2, char a3, const void *a4, size_t a5, void *a6, size_t *a7)
{
  _BYTE *v14;
  void *v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  rsize_t v19;
  unsigned int v20;
  size_t v22;
  size_t inputStructCnt;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  _BYTE v29[10];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  inputStructCnt = 0;
  v14 = LibCall_BuildCommand(a2, 0, a3, a4, a5, &inputStructCnt);
  if (v14)
  {
    v15 = v14;
    if (!a6 && a7)
    {
      v18 = 4294967293;
    }
    else
    {
      if (a7)
        v16 = *a7;
      else
        v16 = 0;
      v22 = v16;
      v17 = IOConnectCallStructMethod(dword_1000E0260, 0, v14, inputStructCnt, a6, &v22);
      v18 = v17;
      if (a1)
        LODWORD(a1) = *(_DWORD *)(a1 + 16);
      if ((_DWORD)v17)
      {
        if (byte_1000DF741 <= 0x46u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136316418;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          v30 = 1024;
          v31 = v18;
          v32 = 1024;
          v33 = v18;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> err 0x%x (%d).\n", buf, 0x2Eu);
        }
      }
      else
      {
        if (byte_1000DF741 <= 0x28u
          && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136315906;
          v25 = "ACMLib";
          v26 = 2080;
          v27 = "performCommand";
          v28 = 1024;
          *(_DWORD *)v29 = a2;
          *(_WORD *)&v29[4] = 1024;
          *(_DWORD *)&v29[6] = a1;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: cmd(%u) on CS[%u] -> ok.\n", buf, 0x22u);
        }
        v18 = 0;
        if (a7)
          *a7 = v22;
      }
    }
    v19 = inputStructCnt;
    acm_mem_free_info("<data>", v15, inputStructCnt, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 134, "performCommand");
    acm_mem_free_data(v15, v19);
    if ((_DWORD)v18)
      v20 = 70;
    else
      v20 = 10;
  }
  else
  {
    v20 = 70;
    v18 = 4294967291;
  }
  if (v20 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v25 = "ACMLib";
    v26 = 2080;
    v27 = "performCommand";
    v28 = 2048;
    *(_QWORD *)v29 = (int)v18;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v18;
}

uint64_t ACMContextAddCredential(_OWORD *a1, unsigned int *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextAddCredential";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextAddCredentialWithScope(a1, a2, 1);
}

uint64_t ACMContextAddCredentialWithScope(_OWORD *a1, unsigned int *a2, int a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t SerializedAddCredentialSize;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    SerializedAddCredentialSize = sub_10008F290();
    if ((_DWORD)SerializedAddCredentialSize
      || (SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a1, a2, a3, &size),
          (_DWORD)SerializedAddCredentialSize))
    {
      v9 = SerializedAddCredentialSize;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 325, "ACMContextAddCredentialWithScope");
      if (v12)
      {
        v13 = SerializeAddCredential(a1, a2, a3, (uint64_t)v12, &size);
        if (!(_DWORD)v13)
          v13 = sub_10008F470((uint64_t)a1, 5, 0, v12, size, 0, 0);
        v9 = v13;
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 338, "ACMContextAddCredentialWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextAddCredentialWithScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextRemoveCredentialsByType(_OWORD *a1, int a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextRemoveCredentialsByType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByTypeAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByTypeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    v6 = sub_10008F290();
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 386, "ACMContextRemoveCredentialsByTypeAndScope");
      if (v7)
      {
        if (a1)
        {
          *v7 = *a1;
        }
        else
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        v8 = sub_10008F470((uint64_t)a1, 9, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 407, "ACMContextRemoveCredentialsByTypeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8)
          v9 = 70;
        else
          v9 = 10;
      }
      else
      {
        v9 = 70;
        v8 = 4294967292;
      }
    }
  }
  else
  {
    v9 = 70;
    v8 = 4294967293;
  }
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemoveCredentialsByTypeAndScope";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextRemoveCredentialsByValue(uint64_t a1, _DWORD *a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextRemoveCredentialsByValue";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextRemoveCredentialsByValueAndScope(a1, a2, 1);
}

uint64_t ACMContextRemoveCredentialsByValueAndScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextRemoveCredentialsByValueAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = (_DWORD)a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    v10 = sub_10008F290();
    if ((_DWORD)v10 || (v10 = GetSerializedRemoveCredentialSize(a1, a2, a3, &size), (_DWORD)v10))
    {
      v9 = v10;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 457, "ACMContextRemoveCredentialsByValueAndScope");
      if (v12)
      {
        v13 = SerializeRemoveCredential(a1, a2, a3, v12, &size);
        if (!(_DWORD)v13)
          v13 = sub_10008F470(a1, 6, 0, v12, size, 0, 0);
        v9 = v13;
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 470, "ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextRemoveCredentialsByValueAndScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsCredentialType(_OWORD *a1, int a2)
{
  int v5;
  const char *v6;
  __int16 v7;
  const char *v8;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v5 = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMContextContainsCredentialType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v5, 0x16u);
  }
  return ACMContextContainsCredentialTypeEx(a1, a2, 0);
}

uint64_t ACMContextContainsCredentialTypeEx(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = 0;
  v13 = 4;
  if (a1)
  {
    v6 = sub_10008F290();
    if ((_DWORD)v6)
    {
      v11 = v6;
      v8 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 576, "ACMContextContainsCredentialTypeEx");
      v8 = 70;
      if (v7)
      {
        *(_OWORD *)v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        v9 = sub_10008F470((uint64_t)a1, 4, 0, v7, 0x18uLL, &v14, &v13);
        if (v14)
          v10 = 0;
        else
          v10 = -7;
        if (v9)
          v11 = v9;
        else
          v11 = v10;
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 590, "ACMContextContainsCredentialTypeEx");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v11 = 4294967292;
      }
    }
  }
  else
  {
    v8 = 70;
    v11 = 4294967293;
  }
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsCredentialTypeEx";
    v19 = 2048;
    v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMGlobalContextAddCredential(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextAddCredential";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  if (a1)
  {
    v2 = ACMContextCreate((uint64_t *)&v6);
    if (!(_DWORD)v2)
      v2 = ACMContextAddCredentialWithScope(v6, a1, 2);
    v3 = v2;
    if (v6)
      ACMContextDelete(v6, 1);
    if ((_DWORD)v3)
      v4 = 70;
    else
      v4 = 10;
  }
  else
  {
    v4 = 70;
    v3 = 4294967293;
  }
  if (v4 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextAddCredential";
    v11 = 2048;
    v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMGlobalContextRemoveCredentialsByType(int a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _DWORD *v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextRemoveCredentialsByType";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  v2 = ACMContextCreate((uint64_t *)&v6);
  if (!(_DWORD)v2)
    v2 = ACMContextRemoveCredentialsByTypeAndScope(v6, a1, 2);
  v3 = v2;
  if (v6)
    ACMContextDelete(v6, 1);
  if ((_DWORD)v3)
    v4 = 70;
  else
    v4 = 10;
  if (v4 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextRemoveCredentialsByType";
    v11 = 2048;
    v12 = (int)v3;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v3;
}

uint64_t ACMContextRemovePassphraseCredentialsByPurposeAndScope(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  if (a1 || a3 == 2)
  {
    v6 = sub_10008F290();
    if ((_DWORD)v6)
    {
      v8 = v6;
      v9 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 492, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
      if (v7)
      {
        if (a1)
        {
          *v7 = *a1;
        }
        else
        {
          *(_QWORD *)v7 = 0;
          *((_QWORD *)v7 + 1) = 0;
        }
        *((_DWORD *)v7 + 4) = a2;
        *((_DWORD *)v7 + 5) = a3;
        v8 = sub_10008F470((uint64_t)a1, 16, 0, v7, 0x18uLL, 0, 0);
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 513, "ACMContextRemovePassphraseCredentialsByPurposeAndScope");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v8)
          v9 = 70;
        else
          v9 = 10;
      }
      else
      {
        v9 = 70;
        v8 = 4294967292;
      }
    }
  }
  else
  {
    v9 = 70;
    v8 = 4294967293;
  }
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextRemovePassphraseCredentialsByPurposeAndScope";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextReplacePassphraseCredentialsWithScope(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  BOOL v6;
  char v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t SerializedReplacePassphraseCredentialSize;
  size_t v11;
  void *v12;
  uint64_t v13;
  rsize_t v14;
  size_t size;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  size = 0;
  if (a1)
    v6 = 1;
  else
    v6 = (_DWORD)a3 == 2;
  v7 = !v6;
  v8 = 70;
  v9 = 4294967293;
  if (a2 && (v7 & 1) == 0)
  {
    SerializedReplacePassphraseCredentialSize = sub_10008F290();
    if ((_DWORD)SerializedReplacePassphraseCredentialSize
      || (SerializedReplacePassphraseCredentialSize = GetSerializedReplacePassphraseCredentialSize(a1, a2, a3, &size),
          (_DWORD)SerializedReplacePassphraseCredentialSize))
    {
      v9 = SerializedReplacePassphraseCredentialSize;
      v8 = 70;
    }
    else
    {
      v11 = size;
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 538, "ACMContextReplacePassphraseCredentialsWithScope");
      if (v12)
      {
        v13 = SerializeReplacePassphraseCredential(a1, a2, a3, v12, &size);
        if (!(_DWORD)v13)
          v13 = sub_10008F470(a1, 15, 0, v12, size, 0, 0);
        v9 = v13;
        bzero(v12, size);
        v14 = size;
        acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 552, "ACMContextReplacePassphraseCredentialsWithScope");
        acm_mem_free_data(v12, v14);
        if ((_DWORD)v9)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v8 = 70;
        v9 = 4294967292;
      }
    }
  }
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v18 = "ACMLib";
    v19 = 2080;
    v20 = "ACMContextReplacePassphraseCredentialsWithScope";
    v21 = 2048;
    v22 = (int)v9;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v9;
}

uint64_t ACMContextContainsPassphraseCredentialWithPurpose(_OWORD *a1, int a2, int a3)
{
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  size_t v13;
  int v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = 0;
  v13 = 4;
  if (a1)
  {
    v6 = sub_10008F290();
    if ((_DWORD)v6)
    {
      v11 = v6;
      v8 = 70;
    }
    else
    {
      v7 = acm_mem_alloc_data(0x18uLL);
      acm_mem_alloc_info("<data>", v7, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 614, "ACMContextContainsPassphraseCredentialWithPurpose");
      v8 = 70;
      if (v7)
      {
        *(_OWORD *)v7 = *a1;
        v7[4] = a2;
        v7[5] = a3;
        v9 = sub_10008F470((uint64_t)a1, 13, 0, v7, 0x18uLL, &v14, &v13);
        if (v14)
          v10 = 0;
        else
          v10 = -7;
        if (v9)
          v11 = v9;
        else
          v11 = v10;
        acm_mem_free_info("<data>", v7, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 628, "ACMContextContainsPassphraseCredentialWithPurpose");
        acm_mem_free_data(v7, 0x18uLL);
        if ((_DWORD)v11)
          v8 = 70;
        else
          v8 = 10;
      }
      else
      {
        v11 = 4294967292;
      }
    }
  }
  else
  {
    v8 = 70;
    v11 = 4294967293;
  }
  if (v8 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextContainsPassphraseCredentialWithPurpose";
    v19 = 2048;
    v20 = (int)v11;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v11;
}

uint64_t ACMContextVerifyPolicy(_OWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v7;
  _OWORD *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = a1;
  v6 = LibCall_ACMContextVerifyPolicy_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))sub_10008EAC0, (uint64_t)&v9, a1, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextVerifyPolicy";
    v14 = 2048;
    v15 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMContextVerifyPolicyWithPreflight(_OWORD *a1, char *__s1, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  _OWORD *v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMContextVerifyPolicyWithPreflight";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v11 = a1;
  v8 = LibCall_ACMContextVerifyPolicyWithPreflight_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))sub_10008EAC0, (uint64_t)&v11, a1, __s1, a3, a4);
  if ((_DWORD)v8)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMContextVerifyPolicyWithPreflight";
    v16 = 2048;
    v17 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v8;
}

void ACMContextVerifyPolicyEx(_OWORD *a1, char *__s1, uint64_t a3, _DWORD *a4, unsigned int a5, uint64_t a6, uint64_t a7)
{
  _OWORD *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v14 = a1;
  LibCall_ACMContextVerifyPolicyEx_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *))sub_10008EAC0, (uint64_t)&v14, a1, __s1, a3, a4, a5, a6, a7);
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextVerifyPolicyEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMGlobalContextVerifyPolicy(char *a1, uint64_t a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  int v11[2];
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  *(_QWORD *)v11 = 0;
  v10 = ACMContextCreate((uint64_t *)v11);
  if ((_DWORD)v10)
  {
    if (a5)
      (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, v10, 0, 0);
  }
  else
  {
    ACMContextVerifyPolicyEx(*(_OWORD **)v11, a1, a2, a3, a4, 0xFFFFFFFFLL, a5);
  }
  if (*(_QWORD *)v11)
    ACMContextDelete(*(_DWORD **)v11, 1);
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMGlobalContextVerifyPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMContextVerifyAclConstraint(_OWORD *a1, const void *a2, uint64_t a3, unsigned __int8 a4, _DWORD *a5, unsigned int a6, unsigned int a7, uint64_t a8)
{
  _OWORD *v9;

  v9 = a1;
  return LibCall_ACMContextVerifyAclConstraint((uint64_t)sub_10008EAC0, (uint64_t)&v9, a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t ACMContextVerifyAclConstraintForOperation(_OWORD *a1, const void *a2, uint64_t a3, const void *a4, unsigned int a5, unsigned __int8 a6, _DWORD *a7, unsigned int a8, unsigned int a9, uint64_t a10)
{
  _OWORD *v11;

  v11 = a1;
  return LibCall_ACMContextVerifyAclConstraintForOperation((uint64_t)sub_10008EAC0, (uint64_t)&v11, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t ACMContextGetTrackingNumber(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 16);
  return result;
}

uint64_t ACMParseAclAndCopyConstraintCharacteristics(const void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t SerializedProcessAclSize;
  size_t v8;
  void *v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  rsize_t v15;
  rsize_t v16;
  unsigned int v17;
  size_t __n;
  size_t size;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;

  __n = 4096;
  size = 0;
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v22 = "ACMLib";
    v23 = 2080;
    v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 4294967293;
  if (!a1 || !a2 || !a3)
    goto LABEL_28;
  SerializedProcessAclSize = sub_10008F290();
  if ((_DWORD)SerializedProcessAclSize
    || (SerializedProcessAclSize = GetSerializedProcessAclSize(0, (uint64_t)a1, a2, 0, 0, 0, 0, 0, &size),
        (_DWORD)SerializedProcessAclSize))
  {
    v6 = SerializedProcessAclSize;
LABEL_28:
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(a3 + 16))(a3, v6, 0, 4096);
    goto LABEL_19;
  }
  v8 = size;
  v9 = acm_mem_alloc_data(size);
  acm_mem_alloc_info("<data>", v9, v8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 744, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v9)
  {
    v6 = 4294967292;
    goto LABEL_28;
  }
  v10 = SerializeProcessAcl(0, a1, a2, 0, 0, 0, 0, 0, (uint64_t)v9, &size);
  if ((_DWORD)v10)
  {
    v6 = v10;
    v12 = 0;
    v14 = 0;
    v11 = 4096;
    goto LABEL_15;
  }
  v11 = 4096;
  v12 = acm_mem_alloc_data(0x1000uLL);
  acm_mem_alloc_info("<data>", v12, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 750, "ACMParseAclAndCopyConstraintCharacteristics");
  if (!v12)
  {
    v14 = 0;
LABEL_31:
    v6 = 4294967292;
    goto LABEL_15;
  }
  v13 = sub_10008F470(0, 20, 0, v9, size, v12, &__n);
  v11 = __n;
  if ((_DWORD)v13)
  {
    v6 = v13;
    v14 = 0;
    goto LABEL_15;
  }
  v14 = acm_mem_alloc_data(__n);
  acm_mem_alloc_info("<data>", v14, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 756, "ACMParseAclAndCopyConstraintCharacteristics");
  v11 = __n;
  if (!v14)
    goto LABEL_31;
  memcpy(v14, v12, __n);
  v6 = 0;
  v11 = __n;
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, void *, size_t))(a3 + 16))(a3, v6, v14, v11);
  v15 = size;
  acm_mem_free_info("<data>", v9, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 767, "ACMParseAclAndCopyConstraintCharacteristics");
  acm_mem_free_data(v9, v15);
  if (v12)
  {
    acm_mem_free_info("<data>", v12, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 770, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v12, 0x1000uLL);
  }
  if (v14)
  {
    v16 = __n;
    acm_mem_free_info("<data>", v14, __n, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 773, "ACMParseAclAndCopyConstraintCharacteristics");
    acm_mem_free_data(v14, v16);
  }
LABEL_19:
  if ((_DWORD)v6)
    v17 = 70;
  else
    v17 = 10;
  if (v17 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v22 = "ACMLib";
    v23 = 2080;
    v24 = "ACMParseAclAndCopyConstraintCharacteristics";
    v25 = 2048;
    v26 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMCredentialGetProperty(int *a1, int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v9;
  int *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v10 = 0;
  v6 = 70;
  v7 = 4294967293;
  if (a1 && a3)
  {
    v7 = LibCall_ACMCredentialGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, uint64_t))(a3 + 16))(a3, v10, v9);
      v6 = 10;
    }
  }
  if (v6 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMCredentialGetProperty";
    v15 = 2048;
    v16 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

void ACMRequirementGetSubrequirements(int *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  if (a1 && a2)
  {
    v4 = *a1;
    if (*a1 == 4)
    {
      if (a1[4])
      {
        v6 = 0;
        do
          (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v6++ + 5]);
        while (v6 < a1[4]);
      }
    }
    else if (v4 == 5)
    {
      if (a1[4])
      {
        v7 = 0;
        do
          (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v7++ + 5]);
        while (v7 < a1[4]);
      }
    }
    else if (v4 == 7 && a1[5])
    {
      v5 = 0;
      do
        (*(void (**)(uint64_t, _QWORD))(a2 + 16))(a2, *(_QWORD *)&a1[2 * v5++ + 6]);
      while (v5 < a1[5]);
    }
  }
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetSubrequirements";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", (uint8_t *)&v8, 0x16u);
  }
}

uint64_t ACMRequirementGetProperty(int *a1, int a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  int *v10;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMRequirementGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v10 = 0;
  v6 = 70;
  v7 = 4294967293;
  if (a1 && a3)
  {
    v7 = LibCall_ACMRequirementGetPropertyData(a1, a2, &v10, &v9);
    if ((_DWORD)v7)
    {
      v6 = 70;
    }
    else
    {
      (*(void (**)(uint64_t, int *, unint64_t))(a3 + 16))(a3, v10, v9);
      v6 = 10;
    }
  }
  if (v6 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMRequirementGetProperty";
    v15 = 2048;
    v16 = (int)v7;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v7;
}

uint64_t ACMRequirementGetProperties(int *a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v8 = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetProperties";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v8, 0x16u);
  }
  v4 = 4294967293;
  v5 = 70;
  if (a1 && a2)
  {
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 1, a1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 2, a1 + 1, 4);
    (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 3, a1 + 2, 4);
    v4 = 0;
    v6 = *a1;
    v5 = 10;
    switch(*a1)
    {
      case 1:
        goto LABEL_10;
      case 2:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 200, a1 + 4, 4);
        goto LABEL_13;
      case 3:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 300, a1 + 5, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 302, a1 + 9, 8);
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 301, a1 + 13, 8);
        goto LABEL_13;
      case 4:
      case 5:
      case 6:
        break;
      case 7:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 700, a1 + 4, 4);
        goto LABEL_13;
      default:
        if (v6 != 20 && v6 != 21)
          break;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, int *, uint64_t))(a2 + 16))(a2, 100, a1 + 4, 4);
LABEL_13:
        v4 = 0;
        v5 = 10;
        break;
    }
  }
  if (v5 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v8 = 136315650;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMRequirementGetProperties";
    v12 = 2048;
    v13 = (int)v4;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v8, 0x20u);
  }
  return v4;
}

void ACMGetAclAuthMethod(__n128 *a1, uint64_t a2)
{
  __n128 *v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  const char *v8;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMGetAclAuthMethod";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v4 = a1;
  LibCall_ACMGetAclAuthMethod_Block((uint64_t)sub_10008EAC0, (uint64_t)&v4, a1, a2);
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v6 = "ACMLib";
    v7 = 2080;
    v8 = "ACMGetAclAuthMethod";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

uint64_t ACMSetEnvironmentVariable(int a1, const void *a2, size_t a3)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  int v17;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMSetEnvironmentVariable";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = 0;
  v6 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))sub_10008EAC0, (uint64_t)&v9, a1, 0, 0, 0, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMSetEnvironmentVariable";
    v14 = 2048;
    v15 = (int)v6;
    v16 = 1024;
    v17 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v6;
}

uint64_t ACMSetEnvironmentVariableWithAccessPolicy(int a1, _OWORD *a2, _OWORD *a3, uint64_t a4, const void *a5, size_t a6)
{
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  int v23;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v15 = 0;
  v12 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))sub_10008EAC0, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v12)
    v13 = 70;
  else
    v13 = 10;
  if (v13 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMSetEnvironmentVariableWithAccessPolicy";
    v20 = 2048;
    v21 = (int)v12;
    v22 = 1024;
    v23 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v12;
}

uint64_t ACMGetEnvironmentVariable(int a1, uint64_t a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v7;
  uint8_t buf[4];
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  int v15;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMGetEnvironmentVariable";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v7 = 0;
  v4 = LibCall_ACMGetEnvironmentVariable_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t))sub_10008EAC0, (uint64_t)&v7, a1, a2);
  if ((_DWORD)v4)
    v5 = 70;
  else
    v5 = 10;
  if (v5 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v9 = "ACMLib";
    v10 = 2080;
    v11 = "ACMGetEnvironmentVariable";
    v12 = 2048;
    v13 = (int)v4;
    v14 = 1024;
    v15 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, var=%u.\n", buf, 0x26u);
  }
  return v4;
}

uint64_t ACMKernelControl(int a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  uint64_t v11;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMKernelControl";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v11 = 0;
  v8 = LibCall_ACMKernelControl_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t))sub_10008EAC0, (uint64_t)&v11, a1, a2, a3, a4);
  if ((_DWORD)v8)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315906;
    v13 = "ACMLib";
    v14 = 2080;
    v15 = "ACMKernelControl";
    v16 = 2048;
    v17 = (int)v8;
    v18 = 1024;
    v19 = a1;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld, code=%u.\n", buf, 0x26u);
  }
  return v8;
}

uint64_t ACMSEPControl(const void *a1, size_t a2, uint64_t a3)
{
  uint64_t v4;

  v4 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *))sub_10008EAC0, (uint64_t)&v4, a1, a2, 0, 0, 0, a3);
}

uint64_t ACMSEPControlEx(uint64_t a1, _DWORD *a2, unsigned int a3, const void *a4, size_t a5, uint64_t a6)
{
  uint64_t v7;

  v7 = 0;
  return LibCall_ACMSEPControl_Block((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *))sub_10008EAC0, (uint64_t)&v7, a4, a5, a1, a2, a3, a6);
}

void ACMGlobalContextCredentialGetProperty(int a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint8_t buf[4];
  const char *v8;
  __int16 v9;
  const char *v10;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v6 = 0;
  LibCall_ACMGlobalContextCredentialGetProperty_Block((uint64_t)sub_10008EAC0, (uint64_t)&v6, a1, a2, a3);
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v8 = "ACMLib";
    v9 = 2080;
    v10 = "ACMGlobalContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

void ACMContextCredentialGetProperty(__n128 *a1, unsigned __int32 a2, unsigned __int32 a3, uint64_t a4)
{
  uint64_t v8;
  __n128 *v9;
  uint64_t v10;
  uint8_t v11[4];
  const char *v12;
  __int16 v13;
  const char *v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v16 = "ACMLib";
    v17 = 2080;
    v18 = "ACMContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v10 = 256;
  if (a4)
  {
    v9 = a1;
    v8 = LibCall_ACMContextCredentialGetProperty((uint64_t (*)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, uint64_t, uint64_t, __n128))sub_10008EAC0, (uint64_t)&v9, a1, a2, a3, (uint64_t)buf, (uint64_t)&v10);
    (*(void (**)(uint64_t, uint64_t, uint8_t *, uint64_t))(a4 + 16))(a4, v8, buf, v10);
  }
  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextCredentialGetProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", v11, 0x16u);
  }
}

uint64_t ACMContextSetData(_OWORD *a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextSetData";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  v8 = ACMContextSetDataEx(a1, a2, 0, 0, a3, a4);
  if ((_DWORD)v8)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextSetData";
    v15 = 2048;
    v16 = (int)v8;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return v8;
}

uint64_t ACMContextSetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, const void *a5, size_t a6)
{
  uint64_t v12;
  unsigned int v13;
  _OWORD *v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMContextSetDataEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v15 = a1;
  v12 = LibCall_ACMContextSetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD))sub_10008EAC0, (uint64_t)&v15, a1, a2, a3, a4, a5, a6);
  if ((_DWORD)v12)
    v13 = 70;
  else
    v13 = 10;
  if (v13 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v17 = "ACMLib";
    v18 = 2080;
    v19 = "ACMContextSetDataEx";
    v20 = 2048;
    v21 = (int)v12;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v12;
}

uint64_t ACMContextGetData(_OWORD *a1, int a2, uint64_t a3)
{
  uint64_t Data;
  unsigned int v7;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v9 = 136315394;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextGetData";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v9, 0x16u);
  }
  Data = ACMContextGetDataEx(a1, a2, 0, 0, a3);
  if ((_DWORD)Data)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v9 = 136315650;
    v10 = "ACMLib";
    v11 = 2080;
    v12 = "ACMContextGetData";
    v13 = 2048;
    v14 = (int)Data;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v9, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetDataEx(_OWORD *a1, int a2, _DWORD *a3, unsigned int a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  rsize_t v15;
  unsigned int v16;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int size;
  int size_4;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  uint64_t v28;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    size_4 = 136315394;
    v24 = "ACMLib";
    v25 = 2080;
    v26 = "ACMContextGetDataEx";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&size_4, 0x16u);
  }
  size = 0;
  v20 = 0;
  v21 = 4;
  v19 = a1;
  v10 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t))sub_10008EAC0, (uint64_t)&v19, a1, a2, 1, a3, a4, (uint64_t)&size, (uint64_t)&v21);
  if (!(_DWORD)v10)
  {
    v11 = size;
    if (size)
    {
      v12 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v12, v11, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1199, "ACMContextGetDataEx");
      if (!v12)
      {
        v16 = 70;
        v14 = 4294967292;
        goto LABEL_15;
      }
      v20 = size;
      v18 = a1;
      v13 = LibCall_ACMContextGetData((uint64_t (*)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t))sub_10008EAC0, (uint64_t)&v18, a1, a2, 0, a3, a4, (uint64_t)v12, (uint64_t)&v20);
      v14 = v13;
      if (a5 && !(_DWORD)v13)
        (*(void (**)(uint64_t, void *, uint64_t))(a5 + 16))(a5, v12, v20);
      v15 = size;
      acm_mem_free_info("<data>", v12, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/ACMLib/ACMLib.c", 1213, "ACMContextGetDataEx");
      acm_mem_free_data(v12, v15);
      if ((_DWORD)v14)
        goto LABEL_11;
    }
    else if (a5)
    {
      (*(void (**)(uint64_t, _QWORD, _QWORD))(a5 + 16))(a5, 0, 0);
    }
    v14 = 0;
    v16 = 10;
    goto LABEL_15;
  }
  v14 = v10;
LABEL_11:
  v16 = 70;
LABEL_15:
  if (v16 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    size_4 = 136315650;
    v24 = "ACMLib";
    v25 = 2080;
    v26 = "ACMContextGetDataEx";
    v27 = 2048;
    v28 = (int)v14;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&size_4, 0x20u);
  }
  return v14;
}

uint64_t ACMContextGetDataProperty(_OWORD *a1, unsigned __int16 a2, unsigned __int16 a3, uint64_t a4)
{
  uint64_t Data;
  unsigned int v9;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315394;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextGetDataProperty";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", (uint8_t *)&v11, 0x16u);
  }
  Data = ACMContextGetData(a1, a2 | (a3 << 16), a4);
  if ((_DWORD)Data)
    v9 = 70;
  else
    v9 = 10;
  if (v9 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    v11 = 136315650;
    v12 = "ACMLib";
    v13 = 2080;
    v14 = "ACMContextGetDataProperty";
    v15 = 2048;
    v16 = (int)Data;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", (uint8_t *)&v11, 0x20u);
  }
  return Data;
}

uint64_t ACMContextGetInfo(__int128 *a1, int a2, _QWORD *a3)
{
  uint64_t v6;
  unsigned int v7;
  __int128 *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextGetInfo";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  v9 = a1;
  v6 = LibCall_ACMContextGetInfo((uint64_t (*)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _OWORD *, unint64_t *))sub_10008EAC0, (uint64_t)&v9, a1, a2, a3);
  if ((_DWORD)v6)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= byte_1000DF741 && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v11 = "ACMLib";
    v12 = 2080;
    v13 = "ACMContextGetInfo";
    v14 = 2048;
    v15 = (int)v6;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning, err = %ld.\n", buf, 0x20u);
  }
  return v6;
}

uint64_t ACMPing()
{
  uint64_t v1;

  v1 = 0;
  return LibCall_ACMPing((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10008EAC0, (uint64_t)&v1, 29);
}

void sub_1000939F8()
{
  unsigned __int8 v0;
  unsigned int v1;
  uint32_t outputCnt;
  uint64_t output;
  uint8_t buf[4];
  const char *v5;
  __int16 v6;
  const char *v7;
  __int16 v8;
  int v9;

  if (byte_1000DF741 <= 0xAu && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: called.\n", buf, 0x16u);
  }
  output = 0;
  outputCnt = 1;
  if (IOConnectCallScalarMethod(dword_1000E0260, 2u, 0, 0, &output, &outputCnt))
    goto LABEL_8;
  v0 = output;
  v1 = output;
  byte_1000DF741 = output;
  if (output <= 0x1EuLL && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315650;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    v8 = 1024;
    v9 = v0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: log level set to %d.\n", buf, 0x1Cu);
LABEL_8:
    v1 = byte_1000DF741;
  }
  if (v1 <= 0xA && os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136315394;
    v5 = "ACMLib";
    v6 = 2080;
    v7 = "updateLogLevelFromKext";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_INFO, "%s: %s: returning.\n", buf, 0x16u);
  }
}

_BYTE *LibCall_BuildCommand(char a1, char a2, char a3, const void *a4, size_t a5, _QWORD *a6)
{
  _BYTE *v12;
  BOOL v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_BuildCommand");
  v12 = 0;
  if (a5)
    v13 = a4 == 0;
  else
    v13 = 0;
  if (!v13 && a6)
  {
    if (a5 >= 0xFFFFFFFFFFFFFFF8)
    {
      v12 = 0;
    }
    else
    {
      v12 = acm_mem_alloc_data(a5 + 8);
      acm_mem_alloc_info("<data>", v12, a5 + 8, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 22, "LibCall_BuildCommand");
      if (v12)
      {
        *a6 = a5 + 8;
        *(_DWORD *)v12 = 1396920900;
        v12[4] = a1;
        v12[5] = a2;
        v12[6] = a3;
        if (a5)
          memcpy(v12 + 8, a4, a5);
      }
    }
  }
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: returning.\n", "ACM", "LibCall_BuildCommand");
  return v12;
}

uint64_t LibCall_ACMContextCreate(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *), uint64_t a2, _QWORD *a3, _BYTE *a4, int a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  _BYTE v19[21];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreate");
  v10 = 70;
  v11 = 4294967293;
  if (!a1 || !a3)
    goto LABEL_25;
  v12 = acm_mem_alloc(0x14uLL);
  acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 50, "LibCall_ACMContextCreate");
  if (!v12)
  {
    v10 = 70;
    v11 = 4294967292;
    goto LABEL_25;
  }
  memset(v19, 0, sizeof(v19));
  if (a5)
  {
    v18 = 21;
    v13 = a1(a2, 36, 0, 0, 0, v19, &v18);
    if (!(_DWORD)v13)
    {
      if (v18 != 21)
      {
        v11 = 4294967291;
        goto LABEL_23;
      }
      v11 = 0;
      goto LABEL_20;
    }
    v11 = v13;
    if ((_DWORD)v13 != -3)
    {
LABEL_23:
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 89, "LibCall_ACMContextCreate");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
      goto LABEL_25;
    }
  }
  v18 = 17;
  v14 = a1(a2, 1, 0, 0, 0, v19, &v18);
  if (v18 == 17)
    v15 = 0;
  else
    v15 = -5;
  if (v14)
    v11 = v14;
  else
    v11 = v15;
  if (!v14 && v18 == 17)
  {
LABEL_20:
    v16 = *(_DWORD *)&v19[17];
    *(_OWORD *)v12 = *(_OWORD *)v19;
    v12[4] = v16;
    *a3 = v12;
    if (a4)
      *a4 = v19[16];
  }
  if ((_DWORD)v11)
    goto LABEL_23;
  v10 = 10;
LABEL_25:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreate", (int)v11);
  return v11;
}

_DWORD *LibCall_ACMContextCreateWithExternalForm(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD *, uint64_t *), uint64_t a2, _OWORD *a3, uint64_t a4, _BYTE *a5, int a6)
{
  _DWORD *v12;
  unsigned int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v20;
  _QWORD v21[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm");
  v12 = 0;
  v13 = 70;
  v14 = -3;
  if (a1 && a3 && a4 == 16)
  {
    memset(v21, 0, 9);
    if (a6)
    {
      v20 = 9;
      v15 = a1(a2, 37, 0, a3, 16, v21, &v20);
      if (!v15)
      {
        if (v20 == 9)
        {
          v14 = 0;
          goto LABEL_19;
        }
        v14 = -5;
        goto LABEL_28;
      }
      v14 = v15;
      if (v15 != -3)
        goto LABEL_28;
    }
    v20 = 5;
    v16 = a1(a2, 18, 0, a3, 16, v21, &v20);
    if (v20 == 5)
      v17 = 0;
    else
      v17 = -5;
    if (v16)
      v14 = v16;
    else
      v14 = v17;
    if (!v16 && v20 == 5)
    {
LABEL_19:
      if (LODWORD(v21[0]))
      {
        v12 = acm_mem_alloc(0x14uLL);
        acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 128, "LibCall_ACMContextCreateWithExternalForm");
        if (!v12)
        {
          v13 = 70;
          v14 = -4;
          goto LABEL_31;
        }
        v18 = *(_DWORD *)((char *)v21 + 5);
        *(_OWORD *)v12 = *a3;
        v12[4] = v18;
        if (a5)
          *a5 = BYTE4(v21[0]);
        if (v14)
        {
          acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 147, "LibCall_ACMContextCreateWithExternalForm");
          acm_mem_free(v12, 0x14uLL);
LABEL_29:
          v13 = 70;
          goto LABEL_31;
        }
      }
      else
      {
        v12 = 0;
      }
      goto LABEL_30;
    }
LABEL_28:
    v12 = 0;
    if (v14)
      goto LABEL_29;
LABEL_30:
    v14 = 0;
    v13 = 10;
  }
LABEL_31:
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCreateWithExternalForm", v14);
  return v12;
}

uint64_t LibCall_ACMContextDelete(void (*a1)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD), uint64_t a2, void *a3, int a4)
{
  uint64_t v8;
  unsigned int v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextDelete");
  if (a1 && a3)
  {
    if (a4)
      a1(a2, 2, 0, a3, 16, 0, 0);
    goto LABEL_7;
  }
  if (a3)
  {
LABEL_7:
    acm_mem_free_info("ACMHandleWithPayload", a3, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 172, "LibCall_ACMContextDelete");
    acm_mem_free(a3, 0x14uLL);
    v8 = 0;
    v9 = 10;
    goto LABEL_8;
  }
  v9 = 70;
  v8 = 4294967293;
LABEL_8:
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextDelete", (int)v8);
  return v8;
}

uint64_t LibCall_ACMContexAddCredentialWithScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, unsigned int *a4, int a5)
{
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t SerializedAddCredentialSize;
  size_t v15;
  void *v16;
  uint64_t v17;
  rsize_t v18;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope");
  size = 0;
  if (a3)
    v10 = 1;
  else
    v10 = a5 == 2;
  v11 = !v10;
  v12 = 70;
  v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    SerializedAddCredentialSize = GetSerializedAddCredentialSize((uint64_t)a3, a4, a5, &size);
    if ((_DWORD)SerializedAddCredentialSize)
    {
      v13 = SerializedAddCredentialSize;
      v12 = 70;
    }
    else
    {
      v15 = size;
      v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 192, "LibCall_ACMContexAddCredentialWithScope");
      if (v16)
      {
        v17 = SerializeAddCredential(a3, a4, a5, (uint64_t)v16, &size);
        if (!(_DWORD)v17)
          v17 = a1(a2, 5, 0, v16, size, 0, 0);
        v13 = v17;
        v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 203, "LibCall_ACMContexAddCredentialWithScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13)
          v12 = 70;
        else
          v12 = 10;
      }
      else
      {
        v12 = 70;
        v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexAddCredentialWithScope", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContexRemoveCredentialsByTypeAndScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, uint64_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, int a4, int a5)
{
  _OWORD *v10;
  uint64_t v11;
  unsigned int v12;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
  if (a3 || a5 == 2)
  {
    v10 = acm_mem_alloc_data(0x18uLL);
    acm_mem_alloc_info("<data>", v10, 24, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 217, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
    if (v10)
    {
      if (a3)
      {
        *v10 = *a3;
      }
      else
      {
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
      }
      *((_DWORD *)v10 + 4) = a4;
      *((_DWORD *)v10 + 5) = a5;
      v11 = a1(a2, 9, 0, v10, 24, 0, 0);
      acm_mem_free_info("<data>", v10, 0x18uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 233, "LibCall_ACMContexRemoveCredentialsByTypeAndScope");
      acm_mem_free_data(v10, 0x18uLL);
      if ((_DWORD)v11)
        v12 = 70;
      else
        v12 = 10;
    }
    else
    {
      v12 = 70;
      v11 = 4294967292;
    }
  }
  else
  {
    v12 = 70;
    v11 = 4294967293;
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContexRemoveCredentialsByTypeAndScope", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextRemoveCredentialsByValueAndScope(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  BOOL v10;
  char v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  rsize_t v18;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope");
  size = 0;
  if (a3)
    v10 = 1;
  else
    v10 = (_DWORD)a5 == 2;
  v11 = !v10;
  v12 = 70;
  v13 = 4294967293;
  if (a4 && (v11 & 1) == 0)
  {
    v14 = GetSerializedRemoveCredentialSize(a3, a4, a5, &size);
    if ((_DWORD)v14)
    {
      v13 = v14;
      v12 = 70;
    }
    else
    {
      v15 = size;
      v16 = acm_mem_alloc_data(size);
      acm_mem_alloc_info("<data>", v16, v15, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 251, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
      if (v16)
      {
        v17 = SerializeRemoveCredential(a3, a4, a5, v16, &size);
        if (!(_DWORD)v17)
          v17 = a1(a2, 6, 0, v16, size, 0, 0);
        v13 = v17;
        v18 = size;
        acm_mem_free_info("<data>", v16, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 264, "LibCall_ACMContextRemoveCredentialsByValueAndScope");
        acm_mem_free_data(v16, v18);
        if ((_DWORD)v13)
          v12 = 70;
        else
          v12 = 10;
      }
      else
      {
        v12 = 70;
        v13 = 4294967292;
      }
    }
  }
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextRemoveCredentialsByValueAndScope", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyAndCopyRequirementEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, _QWORD *a10)
{
  unsigned int v18;
  uint64_t v19;
  uint64_t SerializedVerifyPolicySize;
  size_t v21;
  _OWORD *v22;
  uint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unint64_t v26;
  rsize_t v27;
  size_t v29;
  void *v30;
  unint64_t v31;
  size_t v32;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
  v32 = 0;
  size = 0;
  v30 = 0;
  v31 = 4096;
  v18 = 70;
  v19 = 4294967293;
  v29 = 0;
  if (a1 && a3 && __s1 && a9)
  {
    if ((a6 != 0) != (a7 != 0))
    {
      v18 = 70;
      v19 = 4294967293;
    }
    else
    {
      SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
      if ((_DWORD)SerializedVerifyPolicySize)
      {
        v19 = SerializedVerifyPolicySize;
        v18 = 70;
      }
      else
      {
        v21 = size;
        v22 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 293, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
        if (v22)
        {
          v32 = size;
          v23 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v22, &v32);
          if ((_DWORD)v23)
          {
            v19 = v23;
            v24 = 0;
          }
          else
          {
            v24 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
            acm_mem_alloc_info("<data>", v24, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 300, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            if (v24)
            {
              v25 = a1(a2, 3, 0, v22, v32, v24, &v31);
              if ((_DWORD)v25)
              {
                v19 = v25;
              }
              else
              {
                v26 = v31 - 4;
                if (v31 < 4)
                {
                  v19 = 4294967291;
                }
                else
                {
                  *a9 = *v24 != 0;
                  if (a10)
                  {
                    v19 = DeserializeRequirement(v24 + 1, v26, &v30, &v29);
                    if (!(_DWORD)v19)
                      *a10 = v30;
                  }
                  else
                  {
                    v19 = 0;
                  }
                }
              }
            }
            else
            {
              v19 = 4294967292;
            }
          }
          v27 = size;
          acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 324, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
          acm_mem_free_data(v22, v27);
          if (v24)
          {
            acm_mem_free_info("<data>", v24, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 327, "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx");
            acm_mem_free_data(v24, 0x1000uLL);
          }
          if ((_DWORD)v19)
            v18 = 70;
          else
            v18 = 10;
        }
        else
        {
          v18 = 70;
          v19 = 4294967292;
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyAndCopyRequirementEx", (int)v19);
  return v19;
}

uint64_t LibCall_ACMRequirementDelete(uint64_t a1, int *a2)
{
  unsigned int v4;
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMRequirementDelete");
  v4 = 70;
  v5 = 4294967293;
  if (a1 && a2)
  {
    v5 = Util_DeallocRequirement(a2);
    if ((_DWORD)v5)
      v4 = 70;
    else
      v4 = 10;
  }
  if (v4 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMRequirementDelete", (int)v5);
  return v5;
}

uint64_t LibCall_ACMKernelControl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t), uint64_t a2, int a3, const void *a4, size_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t (*v13)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t);
  BOOL v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;

  v13 = a1;
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, uint64_t, uint64_t))printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernelControl");
  if (!v13)
    goto LABEL_16;
  v14 = a5 != 0;
  if (a4)
    v14 = a5 - 4097 < 0xFFFFFFFFFFFFF000;
  if (v14)
  {
LABEL_16:
    v18 = 70;
    v17 = 4294967293;
  }
  else
  {
    v20 = (uint64_t)&v20;
    __chkstk_darwin(a1);
    v15 = (_DWORD *)((char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0));
    *v15 = a3;
    v16 = v15 + 1;
    if (a5)
    {
      memcpy(v15 + 1, a4, a5);
      v16 = (_DWORD *)((char *)v16 + a5);
    }
    if (v16 != (_DWORD *)((char *)v15 + a5 + 4))
      sub_100098A78();
    v17 = v13(a2, 26, 0, (char *)&v20 - ((a5 + 19) & 0xFFFFFFFFFFFFFFF0), a5 + 4, a6, a7);
    if ((_DWORD)v17)
      v18 = 70;
    else
      v18 = 10;
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernelControl", (int)v17);
  return v17;
}

_DWORD *LibCall_ACMCredentialDelete(_DWORD *a1)
{
  if (a1)
    return (_DWORD *)Util_DeallocCredential(a1);
  return a1;
}

unsigned int *LibCall_ACMCredentialGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t LibCall_ACMCredentialSetProperty(int *a1, int a2, _OWORD *__src, size_t __n)
{
  int v4;
  uint64_t result;
  int v7;
  _OWORD *v8;
  BOOL v9;
  _BOOL4 v10;
  __int128 v11;
  _BOOL4 v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;

  if (!a1)
    return 4294967293;
  v4 = __n;
  if ((__src != 0) != (__n != 0))
    return 4294967293;
  result = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 <= 801)
      {
        if (a2 != 602)
        {
          if (a2 == 701)
          {
            if (__n <= 0x80 && *a1 == 13)
            {
              a1[8] = __n;
              v14 = a1 + 9;
LABEL_118:
              memcpy(v14, __src, __n);
              return 0;
            }
          }
          else if (a2 == 801 && __n == 16 && *a1 == 17)
          {
            result = 0;
            *((_OWORD *)a1 + 2) = *__src;
          }
          return result;
        }
        v13 = *a1 == 12 || *a1 == 15;
        if (__n != 4 || !v13)
          return result;
LABEL_79:
        result = 0;
        a1[9] = *(_DWORD *)__src;
        return result;
      }
      if (a2 == 802)
      {
        if (__n != 65 || *a1 != 17)
          return result;
        result = 0;
        *((_OWORD *)a1 + 3) = *__src;
        v11 = __src[1];
        v16 = __src[2];
        v17 = __src[3];
        *((_BYTE *)a1 + 112) = *((_BYTE *)__src + 64);
        *((_OWORD *)a1 + 5) = v16;
        *((_OWORD *)a1 + 6) = v17;
        goto LABEL_92;
      }
      if (a2 != 901)
      {
        if (a2 == 1001 && __n <= 0x80 && *a1 == 21)
        {
          memcpy(a1 + 9, __src, __n);
          result = 0;
          a1[8] = v4;
        }
        return result;
      }
      if (__n != 32 || *a1 != 20)
        return result;
    }
    else
    {
      if (a2 > 501)
      {
        switch(a2)
        {
          case 502:
            if (__n == 16 && *a1 == 10)
            {
LABEL_102:
              result = 0;
              *(_OWORD *)(a1 + 13) = *__src;
            }
            break;
          case 503:
            if (__n == 16 && *a1 == 10)
            {
              result = 0;
              v15 = *__src;
LABEL_99:
              *(_OWORD *)(a1 + 17) = v15;
            }
            break;
          case 601:
            v9 = *a1 == 12 || *a1 == 15;
            v10 = v9;
            if (__n == 4 && v10)
            {
LABEL_64:
              result = 0;
              a1[8] = *(_DWORD *)__src;
            }
            break;
        }
        return result;
      }
      if (a2 != 400)
      {
        if (a2 != 401)
        {
          if (a2 == 501 && __n == 16 && *a1 == 10)
          {
LABEL_16:
            result = 0;
            *(_OWORD *)(a1 + 9) = *__src;
          }
          return result;
        }
        if (__n != 24 || *a1 != 7)
          return result;
        result = 0;
        v11 = *__src;
        *((_QWORD *)a1 + 10) = *((_QWORD *)__src + 2);
LABEL_92:
        *((_OWORD *)a1 + 4) = v11;
        return result;
      }
      if (__n != 32 || *a1 != 7)
        return result;
    }
    result = 0;
    v18 = __src[1];
    *((_OWORD *)a1 + 2) = *__src;
    *((_OWORD *)a1 + 3) = v18;
    return result;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (__n == 16 && *a1 == 3)
          goto LABEL_16;
        break;
      case 301:
        if (__n == 32 && *a1 == 3)
        {
          result = 0;
          v15 = *__src;
          *(_OWORD *)(a1 + 21) = __src[1];
          goto LABEL_99;
        }
        break;
      case 302:
        if (__n == 16 && *a1 == 3)
          goto LABEL_102;
        break;
      case 303:
        if (__n == 65 && *a1 == 3)
        {
          result = 0;
          *(_OWORD *)(a1 + 30) = *__src;
          v19 = __src[1];
          v20 = __src[2];
          v21 = __src[3];
          *((_BYTE *)a1 + 184) = *((_BYTE *)__src + 64);
          *(_OWORD *)(a1 + 42) = v21;
          *(_OWORD *)(a1 + 38) = v20;
          *(_OWORD *)(a1 + 34) = v19;
        }
        break;
      case 304:
        if (__n == 16 && *a1 == 3)
        {
          result = 0;
          *(_OWORD *)((char *)a1 + 185) = *__src;
        }
        break;
      case 305:
        if (__n == 4 && *a1 == 3)
        {
          result = 0;
          *(int *)((char *)a1 + 201) = *(_DWORD *)__src;
        }
        break;
      case 306:
        if (__n <= 0x80 && *a1 == 3)
        {
          memcpy((char *)a1 + 209, __src, __n);
          result = 0;
          *(int *)((char *)a1 + 205) = v4;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (__n <= 0x80 && *a1 == 2)
          {
            a1[9] = __n;
            v14 = a1 + 10;
            goto LABEL_118;
          }
        }
        else if (a2 == 201 && __n == 4 && *a1 == 2)
        {
          goto LABEL_64;
        }
        break;
    }
    return result;
  }
  if (a2 > 100)
  {
    if (a2 == 101)
    {
      if (__n == 4)
      {
        switch(*a1)
        {
          case 1:
          case 3:
          case 9:
          case 10:
            goto LABEL_64;
          case 2:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            return result;
          default:
            if (*a1 == 18)
              goto LABEL_64;
            break;
        }
      }
      return result;
    }
    if (a2 != 102 || __n != 4 || *a1 != 1)
      return result;
    goto LABEL_79;
  }
  if (a2 == 5)
  {
    if (__n == 4)
    {
      result = 0;
      a1[3] = *(_DWORD *)__src;
    }
  }
  else if (a2 == 100 && __n == 16)
  {
    v7 = *a1;
    if (*a1 > 8)
    {
      if (v7 == 9)
      {
        v8 = a1 + 10;
        a1[9] = 16;
      }
      else
      {
        if (v7 != 18)
          return result;
        v8 = a1 + 9;
      }
    }
    else if (v7 == 1)
    {
      v8 = a1 + 11;
      a1[10] = 16;
    }
    else
    {
      if (v7 != 3)
        return result;
      v8 = a1 + 26;
      a1[25] = 16;
    }
    result = 0;
    *v8 = *__src;
  }
  return result;
}

uint64_t LibCall_ACMCredentialGetPropertyData(int *a1, int a2, int **a3, uint64_t *a4)
{
  uint64_t result;
  int *v8;
  int *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  int *v15;
  int *v16;
  int *v17;
  int v18;
  _BOOL4 isNullOrZeroMemory;
  BOOL v20;
  int *v21;
  uint64_t v22;
  int *v23;

  result = 4294967293;
  if (!a1 || !a3 || !a4)
    return result;
  if (a2 > 399)
  {
    if (a2 > 601)
    {
      if (a2 > 801)
      {
        if (a2 == 802)
        {
          if (*a1 != 17)
            return result;
          v11 = a1 + 12;
LABEL_87:
          v12 = 65;
          v13 = v11;
          v14 = 65;
        }
        else
        {
          if (a2 != 901)
          {
            if (a2 != 1001 || *a1 != 21)
              return result;
            v15 = a1 + 9;
            if (Util_isNullOrZeroMemory((_BYTE *)a1 + 36, 128))
            {
              v15 = 0;
              v10 = 0;
            }
            else
            {
              v10 = a1[8];
            }
            result = 0;
            *a3 = v15;
LABEL_99:
            *a4 = v10;
            return result;
          }
          if (*a1 != 20)
            return result;
          v11 = a1 + 8;
          v12 = 32;
          v13 = v11;
          v14 = 32;
        }
      }
      else
      {
        if (a2 == 602)
        {
          if (*a1 != 15 && *a1 != 12)
            return result;
          goto LABEL_61;
        }
        if (a2 == 701)
        {
          if (*a1 != 13)
            return result;
          result = 0;
          *a3 = a1 + 9;
          v10 = a1[8];
          goto LABEL_99;
        }
        if (a2 != 801 || *a1 != 17)
          return result;
        v11 = a1 + 8;
        v12 = 16;
        v13 = v11;
        v14 = 16;
      }
      isNullOrZeroMemory = Util_isNullOrZeroMemory(v13, v14);
      result = 0;
      v20 = !isNullOrZeroMemory;
      if (isNullOrZeroMemory)
        v21 = 0;
      else
        v21 = (int *)v11;
      if (v20)
        v22 = v12;
      else
        v22 = 0;
      *a3 = v21;
      *a4 = v22;
      return result;
    }
    if (a2 > 501)
    {
      if (a2 == 502)
      {
        if (*a1 != 10)
          return result;
        v9 = a1 + 13;
      }
      else
      {
        if (a2 != 503)
        {
          if (a2 != 601 || *a1 != 15 && *a1 != 12)
            return result;
          goto LABEL_77;
        }
        if (*a1 != 10)
          return result;
        v9 = a1 + 17;
      }
LABEL_68:
      *a3 = v9;
      result = Util_isNullOrZeroMemory(v9, 16);
      if ((_DWORD)result)
      {
        result = 0;
        *a4 = 0;
        *a3 = 0;
        return result;
      }
LABEL_70:
      v10 = 16;
      goto LABEL_99;
    }
    if (a2 == 400)
    {
      if (*a1 != 7)
        return result;
      result = 0;
      v16 = a1 + 8;
LABEL_84:
      *a3 = v16;
      v10 = 32;
      goto LABEL_99;
    }
    if (a2 == 401)
    {
      if (*a1 != 7)
        return result;
      result = 0;
      *a3 = a1 + 16;
      v10 = 24;
      goto LABEL_99;
    }
    if (a2 != 501 || *a1 != 10)
      return result;
LABEL_15:
    v9 = a1 + 9;
    goto LABEL_68;
  }
  if (a2 > 199)
  {
    switch(a2)
    {
      case 300:
        if (*a1 == 3)
        {
          result = 0;
          v8 = a1 + 9;
          goto LABEL_50;
        }
        break;
      case 301:
        if (*a1 == 3)
        {
          result = 0;
          v16 = a1 + 17;
          goto LABEL_84;
        }
        break;
      case 302:
        if (*a1 == 3)
        {
          result = 0;
          v8 = a1 + 13;
          goto LABEL_50;
        }
        break;
      case 303:
        if (*a1 == 3)
        {
          v11 = a1 + 30;
          goto LABEL_87;
        }
        break;
      case 304:
        if (*a1 == 3)
        {
          result = 0;
          v8 = (int *)((char *)a1 + 185);
LABEL_50:
          *a3 = v8;
          goto LABEL_70;
        }
        break;
      case 305:
        if (*a1 == 3)
        {
          result = 0;
          v17 = (int *)((char *)a1 + 201);
          goto LABEL_97;
        }
        break;
      case 306:
        if (*a1 == 3)
        {
          result = 0;
          v10 = *(unsigned int *)((char *)a1 + 205);
          v23 = (int *)((char *)a1 + 209);
          if (!*(int *)((char *)a1 + 205))
            v23 = 0;
          *a3 = v23;
          goto LABEL_99;
        }
        break;
      default:
        if (a2 == 200)
        {
          if (*a1 == 2)
          {
            result = 0;
            *a3 = a1 + 10;
            v10 = a1[9];
            goto LABEL_99;
          }
        }
        else if (a2 == 201 && *a1 == 2)
        {
          goto LABEL_77;
        }
        break;
    }
    return result;
  }
  if (a2 > 99)
  {
    if (a2 != 100)
    {
      if (a2 != 101)
      {
        if (a2 != 102 || *a1 != 1)
          return result;
LABEL_61:
        result = 0;
        v17 = a1 + 9;
        goto LABEL_97;
      }
      if (*a1 > 0x12 || ((1 << *a1) & 0x4060A) == 0)
        return result;
LABEL_77:
      result = 0;
      v17 = a1 + 8;
LABEL_97:
      *a3 = v17;
LABEL_98:
      v10 = 4;
      goto LABEL_99;
    }
    v18 = *a1;
    if (*a1 <= 8)
    {
      if (v18 == 1)
      {
        v9 = a1 + 11;
      }
      else
      {
        if (v18 != 3)
          return result;
        v9 = a1 + 26;
      }
      goto LABEL_68;
    }
    if (v18 == 9)
    {
      v9 = a1 + 10;
      goto LABEL_68;
    }
    if (v18 != 18)
      return result;
    goto LABEL_15;
  }
  switch(a2)
  {
    case 1:
      result = 0;
      *a3 = a1 + 4;
      v10 = 8;
      goto LABEL_99;
    case 2:
      result = 0;
      v17 = a1 + 6;
      goto LABEL_97;
    case 3:
      result = 0;
      *a3 = a1;
      goto LABEL_98;
    case 4:
      result = 0;
      v17 = a1 + 1;
      goto LABEL_97;
    case 5:
      result = 0;
      v17 = a1 + 3;
      goto LABEL_97;
    default:
      return result;
  }
  return result;
}

unsigned int *LibCall_ACMRequirementGetType(unsigned int *result)
{
  if (result)
    return (unsigned int *)*result;
  return result;
}

uint64_t LibCall_ACMRequirementGetState(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 4);
  return result;
}

uint64_t LibCall_ACMRequirementGetPriority(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 8);
  return result;
}

uint64_t LibCall_ACMRequirementGetPropertyData(int *a1, int a2, int **a3, unint64_t *a4)
{
  uint64_t v4;
  int *v7;
  int *v8;
  int *v9;
  unint64_t v10;
  _DWORD *v11;
  BOOL v12;
  int v13;

  v4 = 4294967293;
  if (!a1 || !a3 || !a4)
    return v4;
  v4 = 4294967293;
  if (a2 > 399)
  {
    if (a2 > 600)
    {
      if (a2 == 601)
      {
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            v7 = a1 + 7;
LABEL_45:
            *a3 = v7;
            v10 = 16;
            goto LABEL_72;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (a2 != 602)
      {
        if (a2 != 700)
          return v4;
        if (*a1 == 7)
        {
LABEL_28:
          v8 = a1 + 4;
          goto LABEL_58;
        }
        return 4294967293;
      }
      if (*a1 != 26)
        return 4294967293;
      if (a1[3] < 0x1C)
        return 4294967282;
      *a3 = a1 + 4;
      v10 = 8;
    }
    else
    {
      if (a2 == 400)
      {
        if (*a1 == 13)
        {
          v9 = a1 + 4;
LABEL_64:
          *a3 = v9;
          v10 = 32;
          goto LABEL_72;
        }
        return 4294967293;
      }
      if (a2 != 500)
      {
        if (a2 != 600)
          return v4;
        if (*a1 == 26)
        {
          if (a1[3] >= 0x1C)
          {
            v8 = a1 + 6;
LABEL_58:
            *a3 = v8;
            goto LABEL_59;
          }
          return 4294967282;
        }
        return 4294967293;
      }
      if (*a1 != 25)
        return 4294967293;
      *a3 = a1 + 4;
      v10 = 43;
    }
LABEL_72:
    v4 = 0;
    *a4 = v10;
    return v4;
  }
  if (a2 > 99)
  {
    switch(a2)
    {
      case 300:
        if (*a1 != 3)
          return 4294967293;
        v7 = a1 + 5;
        goto LABEL_45;
      case 301:
        if (*a1 != 3)
          return 4294967293;
        v9 = a1 + 13;
        goto LABEL_64;
      case 302:
        if (*a1 != 3)
          return 4294967293;
        v7 = a1 + 9;
        goto LABEL_45;
      case 303:
        if (*a1 != 3)
          return 4294967293;
        v10 = 0;
        v11 = a1 + 21;
        break;
      case 304:
        if (*a1 != 3)
          return 4294967293;
        if (a1[3] < 0x9C)
          return 4294967282;
        v8 = a1 + 41;
        goto LABEL_58;
      case 305:
        if (*a1 != 3)
          return 4294967293;
        if (a1[3] < 0x9C)
          return 4294967282;
        v8 = a1 + 42;
        goto LABEL_58;
      case 306:
        if (*a1 != 24)
          return 4294967293;
        *a3 = a1 + 5;
        v10 = a1[4];
        goto LABEL_72;
      case 307:
        if (*a1 != 24)
          return 4294967293;
        v9 = a1 + 261;
        goto LABEL_64;
      default:
        if (a2 == 100)
        {
          v13 = *a1;
          if (*a1 > 19)
          {
            if (v13 == 20 || v13 == 21)
              goto LABEL_28;
          }
          else if (v13 == 1 || v13 == 3)
          {
            goto LABEL_28;
          }
          return v4;
        }
        if (a2 != 200)
          return v4;
        if (*a1 != 2)
          return 4294967293;
        goto LABEL_28;
    }
    while (!Util_isNullOrZeroMemory((_BYTE *)v11 + v10, 16))
    {
      v12 = v10 >= 0x40;
      v10 += 16;
      if (v12)
      {
        v10 = 80;
        goto LABEL_71;
      }
    }
    if (!v10)
      v11 = 0;
LABEL_71:
    *a3 = v11;
    goto LABEL_72;
  }
  switch(a2)
  {
    case 1:
      *a3 = a1;
LABEL_59:
      v10 = 4;
      goto LABEL_72;
    case 2:
      v8 = a1 + 1;
      goto LABEL_58;
    case 3:
      v8 = a1 + 2;
      goto LABEL_58;
  }
  return v4;
}

uint64_t LibCall_ACMPing(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  uint64_t v7;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMPing");
  v6 = 70;
  if (a1 && ((_DWORD)a3 == 47 || (_DWORD)a3 == 29))
  {
    v7 = a1(a2, a3, 0, 0, 0, 0, 0);
    if ((_DWORD)v7)
      v6 = 70;
    else
      v6 = 10;
  }
  else
  {
    v7 = 4294967293;
  }
  if (v6 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPing", (int)v7);
  return v7;
}

uint64_t LibCall_ACMKernDoubleClickNotify(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMKernDoubleClickNotify");
  v4 = 70;
  if (a1)
  {
    v5 = a1(a2, 28, 0, 0, 0, 0, 0);
    if ((_DWORD)v5)
      v4 = 70;
    else
      v4 = 10;
  }
  else
  {
    v5 = 4294967293;
  }
  if (v4 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMKernDoubleClickNotify", (int)v5);
  return v5;
}

uint64_t LibCall_ACMContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, __n128 *, uint64_t, uint64_t, uint64_t, __n128), uint64_t a2, __n128 *a3, unsigned __int32 a4, unsigned __int32 a5, uint64_t a6, uint64_t a7)
{
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  __n128 Property_Serialize;
  uint64_t v19;
  __n128 v20;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextCredentialGetProperty");
  v14 = 70;
  v15 = 4294967293;
  if (a1)
  {
    if (a3)
    {
      v15 = 4294967293;
      if (a6)
      {
        if (a7)
        {
          v19 = 24;
          Property_Serialize = LibSer_ContextCredentialGetProperty_Serialize(a3, a4, a5, &v20, &v19);
          if ((_DWORD)v16)
          {
            v15 = v16;
          }
          else if (v19 == 24)
          {
            v15 = a1(a2, 33, 0, &v20, 24, a6, a7, Property_Serialize);
            if (!(_DWORD)v15)
            {
              v14 = 10;
              goto LABEL_11;
            }
          }
          else
          {
            v15 = 4294967291;
          }
          v14 = 70;
        }
      }
    }
  }
LABEL_11:
  if (v14 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextCredentialGetProperty", (int)v15);
  return v15;
}

uint64_t LibCall_ACMGlobalContextCredentialGetProperty(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  uint64_t v13;
  uint64_t Property_Serialize;
  uint64_t v16;
  int v17;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty");
  v12 = 70;
  v13 = 4294967293;
  if (a1 && a5 && a6)
  {
    v16 = 8;
    Property_Serialize = LibSer_GlobalContextCredentialGetProperty_Serialize(a3, a4, &v17, &v16);
    if ((_DWORD)Property_Serialize)
    {
      v13 = Property_Serialize;
    }
    else if (v16 == 8)
    {
      v13 = a1(a2, 27, 0, &v17, 8, a5, a6);
      if (!(_DWORD)v13)
      {
        v12 = 10;
        goto LABEL_10;
      }
    }
    else
    {
      v13 = 4294967291;
    }
    v12 = 70;
  }
LABEL_10:
  if (v12 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextCredentialGetProperty", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, char *__s1, uint64_t a5, _DWORD *a6, unsigned int a7, uint64_t a8, BOOL *a9, int **a10)
{
  uint64_t v18;
  uint64_t SerializedVerifyPolicySize;
  size_t v20;
  _OWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  uint64_t v24;
  unint64_t v25;
  rsize_t v26;
  unsigned int v27;
  size_t v29;
  int *v30;
  unint64_t v31;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx");
  v31 = 4096;
  size = 0;
  v29 = 0;
  v30 = 0;
  v18 = 4294967293;
  if (!a3 || !__s1 || !a9)
  {
LABEL_18:
    if (!(_DWORD)v18)
      goto LABEL_21;
    goto LABEL_19;
  }
  SerializedVerifyPolicySize = GetSerializedVerifyPolicySize((uint64_t)a3, __s1, a5, a8, a6, a7, &size);
  if (!(_DWORD)SerializedVerifyPolicySize)
  {
    v20 = size;
    v21 = acm_mem_alloc_data(size);
    acm_mem_alloc_info("<data>", v21, v20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1257, "LibCall_ACMContextVerifyPolicyEx");
    if (v21)
    {
      v22 = SerializeVerifyPolicy(a3, __s1, a5, a8, a6, a7, v21, &size);
      if ((_DWORD)v22)
      {
        v18 = v22;
        v23 = 0;
      }
      else
      {
        v23 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v23, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1263, "LibCall_ACMContextVerifyPolicyEx");
        if (v23)
        {
          v24 = a1(a2, 3, 0, v21, size, v23, &v31);
          if ((_DWORD)v24)
          {
            v18 = v24;
          }
          else
          {
            v25 = v31 - 4;
            if (v31 < 4)
            {
              v18 = 4294967291;
            }
            else
            {
              *a9 = *v23 != 0;
              if (a10)
              {
                v18 = DeserializeRequirement(v23 + 1, v25, (void **)&v30, &v29);
                if (!(_DWORD)v18)
                  *a10 = v30;
              }
              else
              {
                v18 = 0;
              }
            }
          }
        }
        else
        {
          v18 = 4294967292;
        }
      }
      v26 = size;
      acm_mem_free_info("<data>", v21, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1288, "LibCall_ACMContextVerifyPolicyEx");
      acm_mem_free_data(v21, v26);
      if (v23)
      {
        acm_mem_free_info("<data>", v23, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1291, "LibCall_ACMContextVerifyPolicyEx");
        acm_mem_free_data(v23, 0x1000uLL);
      }
    }
    else
    {
      v18 = 4294967292;
    }
    goto LABEL_18;
  }
  v18 = SerializedVerifyPolicySize;
LABEL_19:
  if (v30)
    Util_DeallocRequirement(v30);
LABEL_21:
  if ((_DWORD)v18)
    v27 = 70;
  else
    v27 = 10;
  if (v27 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextVerifyPolicyEx", (int)v18);
  return v18;
}

uint64_t LibCall_ACMGlobalContextVerifyPolicyEx(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _OWORD *, size_t, unsigned int *, unint64_t *), uint64_t a2, char *a3, uint64_t a4, _DWORD *a5, unsigned int a6, BOOL *a7, int **a8)
{
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v20[2];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx");
  *(_QWORD *)v20 = 0;
  v16 = LibCall_ACMContextCreate((uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _BYTE *, uint64_t *))a1, a2, v20, 0, 1);
  if (!(_DWORD)v16)
    v16 = LibCall_ACMContextVerifyPolicyEx(a1, a2, *(_OWORD **)v20, a3, a4, a5, a6, 0xFFFFFFFFLL, a7, a8);
  v17 = v16;
  if (*(_QWORD *)v20)
    LibCall_ACMContextDelete((void (*)(uint64_t, uint64_t, _QWORD, void *, uint64_t, _QWORD, _QWORD))a1, a2, *(void **)v20, 1);
  if ((_DWORD)v17)
    v18 = 70;
  else
    v18 = 10;
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGlobalContextVerifyPolicyEx", (int)v17);
  return v17;
}

uint64_t LibCall_ACMGetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  unsigned int v9;
  uint64_t v10;
  int v12;

  v12 = a3;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMGetEnvironmentVariable");
  v9 = 70;
  v10 = 4294967293;
  if (a1 && a4 && a5)
  {
    v10 = a1(a2, 25, 0, &v12, 4, a4, a5);
    if ((_DWORD)v10)
      v9 = 70;
    else
      v9 = 10;
  }
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMGetEnvironmentVariable", (int)v10);
  return v10;
}

uint64_t LibCall_ACMSetEnvironmentVariable(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, int a3, _OWORD *a4, _OWORD *a5, uint64_t a6, const void *a7, size_t a8)
{
  uint64_t (*v15)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD);
  BOOL v16;
  char *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v21;

  v15 = a1;
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSetEnvironmentVariable");
  if (v15 && a6 == 16 * (a5 != 0) && (a7 ? (v16 = a8 - 129 < 0xFFFFFFFFFFFFFF80) : (v16 = a8 != 0), !v16))
  {
    __chkstk_darwin(a1);
    v17 = (char *)&v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0);
    *(_DWORD *)v17 = a3;
    *((_DWORD *)v17 + 1) = 2;
    *((_DWORD *)v17 + 2) = a8;
    *(_OWORD *)(v17 + 12) = 0u;
    *(_OWORD *)(v17 + 28) = 0u;
    if (a4)
      *(_OWORD *)(v17 + 12) = *a4;
    if (a5)
      *(_OWORD *)(v17 + 28) = *a5;
    if (a8)
      memcpy(v17 + 44, a7, a8);
    v18 = v15(a2, 44, 0, (char *)&v21 - ((a8 + 59) & 0xFFFFFFFFFFFFFFF0), a8 + 44, 0, 0);
    if ((_DWORD)v18)
      v19 = 70;
    else
      v19 = 10;
  }
  else
  {
    v19 = 70;
    v18 = 4294967293;
  }
  if (v19 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSetEnvironmentVariable", (int)v18);
  return v18;
}

uint64_t LibCall_ACMTRMLoadState(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  uint64_t v9;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMLoadState");
  v8 = 70;
  v9 = 4294967293;
  if (a1 && a3 && a4)
  {
    v9 = a1(a2, 38, 0, 0, 0, a3, a4);
    if ((_DWORD)v9)
      v8 = 70;
    else
      v8 = 10;
  }
  if (v8 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMLoadState", (int)v9);
  return v9;
}

uint64_t LibCall_ACMTRMSaveState(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, _QWORD, _QWORD), uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  BOOL v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMTRMSaveState");
  if (a1)
  {
    v10 = (unint64_t)(a4 - 8193) < 0xFFFFFFFFFFFFE000;
    if (!a3)
      v10 = a4 != 0;
    v11 = 70;
    if (!v10)
    {
      if (a5)
        v12 = 43;
      else
        v12 = 39;
      v13 = a1(a2, v12, 0, a3, a4, 0, 0);
      if ((_DWORD)v13)
        v11 = 70;
      else
        v11 = 10;
      goto LABEL_13;
    }
  }
  else
  {
    v11 = 70;
  }
  v13 = 4294967293;
LABEL_13:
  if (v11 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMTRMSaveState", (int)v13);
  return v13;
}

uint64_t LibCall_ACMContextLoadFromImage(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _OWORD *, unint64_t *), uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v16;
  _OWORD v17[17];
  uint64_t v18;
  char v19;
  _BYTE v20[3];
  __int16 v21;
  uint64_t v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextLoadFromImage");
  v10 = 70;
  v11 = 4294967293;
  if (a1 && a3 && (unint64_t)(a4 - 4097) >= 0xFFFFFFFFFFFFF000)
  {
    v12 = acm_mem_alloc(0x14uLL);
    acm_mem_alloc_info("ACMHandleWithPayload", v12, 20, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1447, "LibCall_ACMContextLoadFromImage");
    if (v12)
    {
      bzero(v20, 0x1005uLL);
      v19 = 1;
      *(_WORD *)&v20[1] = 6;
      v21 = a4;
      __memcpy_chk(&v22, a3, a4, 4096);
      memset(v17, 0, sizeof(v17));
      v18 = 0;
      v16 = 280;
      v13 = a1(a2, 48, 0, &v19, 4102, v17, &v16);
      if ((_DWORD)v13)
      {
        v11 = v13;
      }
      else if (v16 < 0x18)
      {
        v11 = 4294967291;
      }
      else
      {
        if (LOBYTE(v17[0]))
        {
          v11 = 0;
          v14 = DWORD1(v17[1]);
          *(_OWORD *)v12 = *(_OWORD *)((char *)v17 + 4);
          v12[4] = v14;
          *a5 = v12;
          v10 = 10;
          goto LABEL_11;
        }
        v11 = 4294967280;
      }
      acm_mem_free_info("ACMHandleWithPayload", v12, 0x14uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1508, "LibCall_ACMContextLoadFromImage");
      acm_mem_free(v12, 0x14uLL);
      v10 = 70;
    }
    else
    {
      v10 = 70;
      v11 = 4294967292;
    }
  }
LABEL_11:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextLoadFromImage", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextUnloadToImage(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _BYTE *, int *), uint64_t a2, __int128 *a3, void *a4, _QWORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  int v15[2];
  _BYTE v16[2];
  unsigned __int16 v17;
  size_t __n;
  int v19;
  __int128 v20;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextUnloadToImage");
  v10 = 70;
  v11 = 4294967293;
  if (a1 && a4 && a5)
  {
    v20 = 0uLL;
    v19 = 1310721;
    if (a3)
      v20 = *a3;
    else
      v20 = 0uLL;
    bzero(v16, 0x1106uLL);
    *(_QWORD *)v15 = 4358;
    v12 = a1(a2, 49, 0, &v19, 20, v16, v15);
    if ((_DWORD)v12)
    {
      v11 = v12;
LABEL_18:
      v10 = 70;
      goto LABEL_14;
    }
    if (*(_QWORD *)v15 < 6uLL)
    {
      v10 = 70;
      v11 = 4294967291;
    }
    else
    {
      if (v16[0])
      {
        v14 = v17;
        v11 = Util_ReadFromBuffer((uint64_t)v16, *(size_t *)v15, &v14, a4, (unsigned __int16)__n);
        if (!(_DWORD)v11)
        {
          *a5 = v14 - v17;
          v10 = 10;
          goto LABEL_14;
        }
        goto LABEL_18;
      }
      v10 = 70;
      v11 = 4294967280;
    }
  }
LABEL_14:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextUnloadToImage", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextSetData(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, int a4, _DWORD *a5, unsigned int a6, const void *a7, size_t a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  void *v20;
  uint64_t v21;
  rsize_t v22;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextSetData");
  size = 0;
  v16 = 70;
  v17 = 4294967293;
  if (a1 && a3)
  {
    if ((a7 != 0) != (a8 != 0))
    {
      v16 = 70;
      v17 = 4294967293;
    }
    else if (a8 > 0xE00)
    {
      v16 = 70;
      v17 = 4294967276;
    }
    else
    {
      v18 = LibSer_StorageSetData_GetSize(a8, a5, a6, &size);
      if ((_DWORD)v18)
      {
        v17 = v18;
        v16 = 70;
      }
      else
      {
        v19 = size;
        v20 = acm_mem_alloc_data(size);
        acm_mem_alloc_info("<data>", v20, v19, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1593, "LibCall_ACMContextSetData");
        if (v20)
        {
          v21 = LibSer_StorageSetData_Serialize(a3, a4, a7, a8, a5, a6, (uint64_t)v20, &size);
          if (!(_DWORD)v21)
            v21 = a1(a2, 40, 0, v20, size, 0, 0);
          v17 = v21;
          v22 = size;
          acm_mem_free_info("<data>", v20, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1605, "LibCall_ACMContextSetData");
          acm_mem_free_data(v20, v22);
          if ((_DWORD)v17)
            v16 = 70;
          else
            v16 = 10;
        }
        else
        {
          v16 = 70;
          v17 = 4294967292;
        }
      }
    }
  }
  if (v16 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextSetData", (int)v17);
  return v17;
}

uint64_t LibCall_ACMContextGetData(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, uint64_t, uint64_t), uint64_t a2, _OWORD *a3, int a4, char a5, _DWORD *a6, unsigned int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  void *v22;
  uint64_t Data_Serialize;
  rsize_t v24;
  uint64_t v26;
  size_t size;

  if (gACMLoggingLevel <= 0xAu)
  {
    v16 = a8;
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetData");
    a8 = v16;
  }
  size = 0;
  v17 = 70;
  v18 = 4294967293;
  if (a1)
  {
    v26 = a2;
    if (a3)
    {
      v18 = 4294967293;
      if (a8)
      {
        if (a9)
        {
          v19 = a8;
          v20 = LibSer_StorageGetData_GetSize(a6, a7, &size);
          if ((_DWORD)v20)
          {
            v18 = v20;
            v17 = 70;
          }
          else
          {
            v21 = size;
            v22 = acm_mem_alloc_data(size);
            acm_mem_alloc_info("<data>", v22, v21, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1628, "LibCall_ACMContextGetData");
            if (v22)
            {
              Data_Serialize = LibSer_StorageGetData_Serialize(a3, a4, a5, a6, a7, (uint64_t)v22, &size);
              if (!(_DWORD)Data_Serialize)
                Data_Serialize = a1(v26, 41, 0, v22, size, v19, a9);
              v18 = Data_Serialize;
              v24 = size;
              acm_mem_free_info("<data>", v22, size, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1640, "LibCall_ACMContextGetData");
              acm_mem_free_data(v22, v24);
              if ((_DWORD)v18)
                v17 = 70;
              else
                v17 = 10;
            }
            else
            {
              v17 = 70;
              v18 = 4294967292;
            }
          }
        }
      }
    }
  }
  if (v17 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetData", (int)v18);
  return v18;
}

uint64_t LibCall_ACMPublishTrustedAccessories(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, const void *a3, size_t a4)
{
  uint64_t (*v7)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD);
  BOOL v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v14;

  v7 = a1;
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMPublishTrustedAccessories");
  if (v7)
  {
    if (a3)
      v8 = 1;
    else
      v8 = a4 == 0;
    v9 = !v8;
    v10 = 70;
    v11 = 4294967293;
    if ((a4 & 0xF) == 0 && a4 <= 0x100 && (v9 & 1) == 0)
    {
      __chkstk_darwin(a1);
      v12 = (_DWORD *)((char *)&v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0));
      *v12 = 1;
      v12[1] = a4;
      if (a4)
        memcpy(v12 + 2, a3, a4);
      v11 = v7(a2, 45, 0, (char *)&v14 - ((a4 + 23) & 0xFFFFFFFFFFFFFFF0), a4 + 8, 0, 0);
      if ((_DWORD)v11)
        v10 = 70;
      else
        v10 = 10;
    }
  }
  else
  {
    v10 = 70;
    v11 = 4294967293;
  }
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMPublishTrustedAccessories", (int)v11);
  return v11;
}

uint64_t LibCall_ACMContextGetInfo(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, _OWORD *, unint64_t *), uint64_t a2, __int128 *a3, int a4, _QWORD *a5)
{
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  _OWORD v15[9];
  int v16;
  __int128 v17;
  int v18;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMContextGetInfo");
  v10 = 70;
  v11 = 4294967293;
  if (a3 && a1 && a5)
  {
    v16 = 1;
    v18 = a4;
    v17 = *a3;
    memset(v15, 0, 140);
    v14 = 140;
    v12 = a1(a2, 46, 0, &v16, 24, v15, &v14);
    if ((_DWORD)v12)
    {
      v11 = v12;
    }
    else if (v14 < 0xC)
    {
      v11 = 4294967291;
    }
    else
    {
      if (LODWORD(v15[0]))
      {
        v11 = 0;
        *a5 = *(_QWORD *)((char *)v15 + 4);
        v10 = 10;
        goto LABEL_10;
      }
      v11 = 4294967281;
    }
    v10 = 70;
  }
LABEL_10:
  if (v10 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMContextGetInfo", (int)v11);
  return v11;
}

uint64_t verifyAclConstraintInternal(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, uint64_t a3, _OWORD *a4, const void *a5, uint64_t a6, const void *a7, unsigned int a8, unsigned __int8 a9, _DWORD *a10, unsigned int a11, unsigned int a12, BOOL *a13, int **a14)
{
  uint64_t v20;
  uint64_t SerializedVerifyAclConstraintSize;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  unint64_t v27;
  rsize_t v28;
  unsigned int v29;
  size_t v33;
  int *v34;
  unint64_t v35;
  size_t v36;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "verifyAclConstraintInternal");
  v36 = 0;
  v34 = 0;
  v35 = 4096;
  v33 = 0;
  v20 = 4294967293;
  if (!a4 || !a5 || !a6 || !a13)
  {
LABEL_19:
    if (!(_DWORD)v20)
      goto LABEL_22;
    goto LABEL_20;
  }
  SerializedVerifyAclConstraintSize = GetSerializedVerifyAclConstraintSize(a3, (uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a9, a12, a10, a11, &v36);
  if (!(_DWORD)SerializedVerifyAclConstraintSize)
  {
    v22 = v36;
    v23 = acm_mem_alloc_data(v36);
    acm_mem_alloc_info("<data>", v23, v22, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1929, "verifyAclConstraintInternal");
    if (v23)
    {
      v24 = SerializeVerifyAclConstraint(a3, a4, a5, a6, a7, a8, a9, a12, a10, a11, (uint64_t)v23, &v36);
      if ((_DWORD)v24)
      {
        v20 = v24;
        v25 = 0;
      }
      else
      {
        v25 = (unsigned int *)acm_mem_alloc_data(0x1000uLL);
        acm_mem_alloc_info("<data>", v25, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1935, "verifyAclConstraintInternal");
        if (v25)
        {
          v26 = a1(a2, a3, 0, v23, v36, v25, &v35);
          if ((_DWORD)v26)
          {
            v20 = v26;
          }
          else
          {
            v27 = v35 - 4;
            if (v35 < 4)
            {
              v20 = 4294967291;
            }
            else
            {
              *a13 = *v25 != 0;
              if (a14)
              {
                v20 = DeserializeRequirement(v25 + 1, v27, (void **)&v34, &v33);
                if (!(_DWORD)v20)
                  *a14 = v34;
              }
              else
              {
                v20 = 0;
              }
            }
          }
        }
        else
        {
          v20 = 4294967292;
        }
      }
      v28 = v36;
      acm_mem_free_info("<data>", v23, v36, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1958, "verifyAclConstraintInternal");
      acm_mem_free_data(v23, v28);
      if (v25)
      {
        acm_mem_free_info("<data>", v25, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1961, "verifyAclConstraintInternal");
        acm_mem_free_data(v25, 0x1000uLL);
      }
    }
    else
    {
      v20 = 4294967292;
    }
    goto LABEL_19;
  }
  v20 = SerializedVerifyAclConstraintSize;
LABEL_20:
  if (v34)
    Util_DeallocRequirement(v34);
LABEL_22:
  if ((_DWORD)v20)
    v29 = 70;
  else
    v29 = 10;
  if (v29 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "verifyAclConstraintInternal", (int)v20);
  return v20;
}

uint64_t LibCall_ACMSecContextProcessAcl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12)
{
  return sub_100097798(a1, a2, 12, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, 0, 0);
}

uint64_t sub_100097798(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, int a3, _OWORD *a4, unsigned __int8 *a5, uint64_t a6, unsigned __int8 *a7, uint64_t a8, _DWORD *a9, unsigned int a10, unsigned int a11, _DWORD *a12, BOOL *a13, _QWORD *a14, unint64_t *a15)
{
  unsigned int v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  BOOL v26;
  int v27;
  uint64_t SerializedProcessAclSize;
  uint64_t v29;
  void *v30;
  _DWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void *v35;
  rsize_t v36;
  unsigned int v37;
  int v39;
  unint64_t v44;
  size_t v45;

  v19 = gACMLoggingLevel;
  if (gACMLoggingLevel <= 0xAu)
  {
    printf("%s: %s: called.\n", "ACM", "processAclCommandInternal");
    v19 = gACMLoggingLevel;
  }
  if (v19 <= 0x14)
  {
    printf("%s: %s: command = %u.\n", "ACM", "processAclCommandInternal", a3);
    v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: context = %p.\n", "ACM", "processAclCommandInternal", a4);
      v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: acl = %p, aclLength = %zu.\n", "ACM", "processAclCommandInternal", a5, a6);
        v19 = gACMLoggingLevel;
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s (len=%u): acl:", "ACM", "processAclCommandInternal", a6);
          v19 = gACMLoggingLevel;
        }
      }
    }
  }
  if (a6)
  {
    v20 = a6;
    v21 = a5;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v21);
        v19 = gACMLoggingLevel;
      }
      ++v21;
      --v20;
    }
    while (v20);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    v19 = gACMLoggingLevel;
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: operation = %p, operationLength = %zu.\n", "ACM", "processAclCommandInternal", a7, a8);
      v19 = gACMLoggingLevel;
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s (len=%u): operation:", "ACM", "processAclCommandInternal", a8);
        v19 = gACMLoggingLevel;
      }
    }
  }
  v39 = a3;
  if (a8)
  {
    v22 = a8;
    v23 = a7;
    do
    {
      if (v19 <= 0x14)
      {
        printf("%02x ", *v23);
        v19 = gACMLoggingLevel;
      }
      ++v23;
      --v22;
    }
    while (v22);
  }
  if (v19 < 0x15)
  {
    putchar(10);
    if (gACMLoggingLevel <= 0x14u)
    {
      printf("%s: %s: parameters = %p, parameterCount = %u.\n", "ACM", "processAclCommandInternal", a9, a10);
      if (gACMLoggingLevel <= 0x14u)
      {
        printf("%s: %s: maxGlobalCredentialAge = %u.\n", "ACM", "processAclCommandInternal", a11);
        if (gACMLoggingLevel <= 0x14u)
        {
          printf("%s: %s: constraintState = %p.\n", "ACM", "processAclCommandInternal", a12);
          if (gACMLoggingLevel <= 0x14u)
            printf("%s: %s: requirePasscode = %p.\n", "ACM", "processAclCommandInternal", a13);
        }
      }
    }
  }
  if (a7 || a9 || a12)
  {
    if (a5)
      v26 = a6 == 0;
    else
      v26 = 1;
    v27 = v26;
    v24 = 70;
    v25 = 4294967293;
    if (!a7)
      goto LABEL_79;
    if (!a8)
      goto LABEL_79;
    if (v27)
      goto LABEL_79;
    v24 = 70;
    v25 = 4294967293;
    if ((a9 != 0) != (a10 != 0) || !a12)
      goto LABEL_79;
    v45 = 0;
    v44 = 4096;
    if (gACMLoggingLevel <= 0xAu)
      printf("%s: %s: called.\n", "ACM", "processAclInternal");
    SerializedProcessAclSize = GetSerializedProcessAclSize((uint64_t)a4, (uint64_t)a5, a6, (uint64_t)a7, a8, a11, a9, a10, &v45);
    if ((_DWORD)SerializedProcessAclSize)
    {
      v25 = SerializedProcessAclSize;
      v37 = 70;
      goto LABEL_74;
    }
    v29 = v45;
    v30 = acm_mem_alloc_data(v45);
    acm_mem_alloc_info("<data>", v30, v29, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1776, "processAclInternal");
    if (!v30)
    {
      v37 = 70;
      v25 = 4294967292;
      goto LABEL_74;
    }
    v44 = 4096;
    v31 = acm_mem_alloc_data(0x1000uLL);
    acm_mem_alloc_info("<data>", v31, 4096, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1780, "processAclInternal");
    if (!v31)
    {
      v35 = 0;
      v34 = 0;
      v25 = 4294967292;
      goto LABEL_68;
    }
    v32 = SerializeProcessAcl(a4, a5, a6, a7, a8, a11, a9, a10, (uint64_t)v30, &v45);
    if ((_DWORD)v32 || (v32 = a1(a2, v39, 0, (char *)v30, v45, v31, (uint64_t *)&v44), (_DWORD)v32))
    {
      v25 = v32;
      v34 = 0;
      v35 = 0;
      goto LABEL_67;
    }
    v33 = v44;
    if (v44 >= 8)
    {
      *a12 = *v31;
      if (a13)
        *a13 = v31[1] != 0;
      v25 = 0;
      v34 = 0;
      if (v39 != 30 || !a14)
      {
        v35 = 0;
        goto LABEL_67;
      }
      v35 = 0;
      if (!a15)
      {
LABEL_67:
        acm_mem_free_info("<data>", v31, 0x1000uLL, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1817, "processAclInternal");
        acm_mem_free_data(v31, 0x1000uLL);
LABEL_68:
        v36 = v45;
        acm_mem_free_info("<data>", v30, v45, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1821, "processAclInternal");
        acm_mem_free_data(v30, v36);
        if ((_DWORD)v25 && v35)
        {
          acm_mem_free_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1825, "processAclInternal");
          acm_mem_free_data(v35, v34);
          v37 = 70;
        }
        else if ((_DWORD)v25)
        {
          v37 = 70;
        }
        else
        {
          v37 = 10;
        }
LABEL_74:
        if (v37 >= gACMLoggingLevel)
          printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclInternal", (int)v25);
        goto LABEL_76;
      }
      if (v33 >= 0xC)
      {
        v34 = v31[2];
        if ((_DWORD)v34)
        {
          if (v33 >= v34 + 12)
          {
            v35 = acm_mem_alloc_data(v31[2]);
            acm_mem_alloc_info("<data>", v35, v34, "/Library/Caches/com.apple.xbs/Sources/AppleCredentialManager_ClientLibs/common/LibCall.c", 1805, "processAclInternal");
            if (v35)
            {
              memcpy(v35, v31 + 3, v34);
              v25 = 0;
              *a14 = v35;
              *a15 = v34;
            }
            else
            {
              v25 = 4294967292;
            }
            goto LABEL_67;
          }
          goto LABEL_84;
        }
        v34 = 0;
        v35 = 0;
        v25 = 0;
        goto LABEL_67;
      }
    }
    v34 = 0;
LABEL_84:
    v35 = 0;
    v25 = 4294967291;
    goto LABEL_67;
  }
  if (a4)
  {
    v24 = 70;
    v25 = 4294967293;
    goto LABEL_79;
  }
  v24 = 70;
  v25 = 4294967293;
  if (a5 && a13 && a6)
  {
    v25 = sub_1000988C0(a1, a2, a5, a6, a13);
LABEL_76:
    if ((_DWORD)v25)
      v24 = 70;
    else
      v24 = 10;
  }
LABEL_79:
  if (v24 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "processAclCommandInternal", (int)v25);
  return v25;
}

uint64_t LibCall_ACMSecContextProcessAclAndCopyAuthMethod(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, _OWORD *a3, unsigned __int8 *a4, uint64_t a5, unsigned __int8 *a6, uint64_t a7, _DWORD *a8, unsigned int a9, unsigned int a10, _DWORD *a11, BOOL *a12, _QWORD *a13, unint64_t *a14)
{
  return sub_100097798(a1, a2, 30, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
}

uint64_t LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, void *, size_t, unsigned int *, unint64_t *), uint64_t a2, _OWORD *a3, const void *a4, uint64_t a5, const void *a6, unsigned int a7, unsigned __int8 a8, _DWORD *a9, unsigned int a10, unsigned int a11, BOOL *a12, int **a13)
{
  unsigned int v21;
  uint64_t v22;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement");
  v21 = 70;
  v22 = 4294967293;
  if (a3)
  {
    if (a4)
    {
      if (a5)
      {
        v21 = 70;
        v22 = 4294967293;
        if ((a9 != 0) == (a10 != 0))
        {
          if (a12)
          {
            v22 = verifyAclConstraintInternal(a1, a2, 11, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
            if ((_DWORD)v22)
              v21 = 70;
            else
              v21 = 10;
          }
        }
      }
    }
  }
  if (v21 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextVerifyAclConstraintAndCopyRequirement", (int)v22);
  return v22;
}

uint64_t LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD), uint64_t a2, const void *a3, unsigned int a4, _OWORD *a5, uint64_t a6, int a7, _OWORD *a8, uint64_t a9)
{
  uint64_t (*v16)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD);
  BOOL v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  char *v22;
  uint64_t v24;

  v16 = a1;
  if (gACMLoggingLevel <= 0xAu)
    a1 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, uint64_t, _QWORD, _QWORD))printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser");
  v17 = a4 - 113 < 0xFFFFFF90;
  if (!a3)
    v17 = a4 != 0;
  if (v17)
  {
    v18 = 70;
    v19 = 4294967293;
  }
  else
  {
    v18 = 70;
    v19 = 4294967293;
    if (a8)
    {
      if (a9 == 16)
      {
        v19 = 4294967293;
        if (a5)
        {
          if (a6 == 16)
          {
            v20 = a4 + 36;
            __chkstk_darwin(a1);
            v22 = (char *)&v24 - ((v21 + 51) & 0x1FFFFFFF0);
            *(_DWORD *)v22 = a7;
            *(_OWORD *)(v22 + 4) = *a8;
            *(_OWORD *)(v22 + 20) = *a5;
            if (a3)
              memcpy(v22 + 36, a3, v21);
            v19 = v16(a2, 14, 0, v22, v20, 0, 0);
            if ((_DWORD)v19)
              v18 = 70;
            else
              v18 = 10;
          }
        }
      }
    }
  }
  if (v18 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecCredentialProviderEnrollmentStateChangedForUser", (int)v19);
  return v19;
}

uint64_t LibCall_ACMSecSetBuiltinBiometry(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD), uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char v9;

  v9 = a3;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry");
  v5 = LibCall_ACMSetEnvironmentVariable(a1, a2, 30, 0, 0, 0, &v9, 1uLL);
  v6 = v5;
  if ((_DWORD)v5)
    v7 = 70;
  else
    v7 = 10;
  if (v7 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBuiltinBiometry", (int)v5);
  return v6;
}

uint64_t LibCall_ACMSecSetBiometryAvailability(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, int *, uint64_t, uint64_t, uint64_t), uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  char v13;
  unint64_t v14;
  char v15;

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability");
  v15 = 0;
  v14 = 1;
  v13 = 0;
  v8 = LibCall_ACMGetEnvironmentVariable(a1, a2, 6, (uint64_t)&v15, (uint64_t)&v14);
  if ((_DWORD)v8)
  {
    v11 = v8;
    v9 = 70;
  }
  else
  {
    v9 = 70;
    if (v14 > 1)
    {
      v11 = 4294967291;
    }
    else
    {
      v10 = v15 & ~a3;
      if (a4)
        v10 = v15 | a3;
      v13 = v10;
      v11 = LibCall_ACMSetEnvironmentVariable((uint64_t (*)(uint64_t, uint64_t, _QWORD, char *, size_t, _QWORD, _QWORD))a1, a2, 6, 0, 0, 0, &v13, 1uLL);
      if ((_DWORD)v11)
        v9 = 70;
      else
        v9 = 10;
    }
  }
  if (v9 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecSetBiometryAvailability", (int)v11);
  return v11;
}

uint64_t LibCall_ACMSecContextGetUnlockSecret(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD), uint64_t a2, _OWORD *a3, _DWORD *a4, unsigned int a5, void *a6, size_t *a7, _BYTE *a8)
{
  unsigned int v16;
  uint64_t v17;
  uint64_t UnlockSecret_Serialize;
  size_t v19;
  char v21;
  size_t __n;
  void *__src;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[129];
  _OWORD v27[4];

  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret");
  memset(v27, 0, sizeof(v27));
  v25 = 64;
  v24 = 129;
  if (!a3)
    goto LABEL_18;
  v16 = 70;
  v17 = 4294967293;
  if (!a6 || !a7 || !a8)
    goto LABEL_14;
  if ((a4 != 0) != (a5 != 0))
  {
LABEL_18:
    v16 = 70;
    v17 = 4294967293;
    goto LABEL_14;
  }
  UnlockSecret_Serialize = LibSer_GetUnlockSecret_Serialize(a3, a4, a5, v27, &v25);
  if ((_DWORD)UnlockSecret_Serialize
    || (UnlockSecret_Serialize = a1(a2, 50, 0, v27, v25, v26, &v24), (_DWORD)UnlockSecret_Serialize)
    || (__n = 0,
        __src = 0,
        v21 = 0,
        UnlockSecret_Serialize = LibSer_GetUnlockSecretResponse_Deserialize(v26, v24, &__src, &__n, &v21),
        (_DWORD)UnlockSecret_Serialize))
  {
    v17 = UnlockSecret_Serialize;
  }
  else
  {
    v19 = __n;
    if (*a7 < __n)
    {
      v17 = 4294967276;
    }
    else
    {
      if (__src)
      {
        memcpy(a6, __src, __n);
        v17 = 0;
        *a7 = v19;
        *a8 = v21;
        v16 = 10;
        goto LABEL_14;
      }
      v17 = 4294967291;
    }
  }
  v16 = 70;
LABEL_14:
  if (v16 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSecContextGetUnlockSecret", (int)v17);
  return v17;
}

uint64_t LibCall_ACMSEPControl(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, unsigned int *, unint64_t *), uint64_t a2, const void *a3, size_t a4, uint64_t a5, _DWORD *a6, unsigned int a7, void *a8, size_t *a9)
{
  BOOL v16;
  uint64_t Size;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  void *v26;
  size_t v27;
  uint64_t v29;
  void *v30;
  size_t v31;
  const void *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35[256];

  v30 = a8;
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "LibCall_ACMSEPControl");
  v33 = 1024;
  v34 = 0;
  if (!a1)
    goto LABEL_17;
  v16 = a4 - 4097 < 0xFFFFFFFFFFFFF000;
  if (!a3)
    v16 = a4 != 0;
  if (v16)
  {
LABEL_17:
    v25 = 70;
    v24 = 4294967293;
    goto LABEL_21;
  }
  Size = LibSer_SEPControl_GetSize(a4, a6, a7, &v34);
  if ((_DWORD)Size)
  {
LABEL_18:
    v24 = Size;
LABEL_25:
    v25 = 70;
    goto LABEL_21;
  }
  v18 = a5;
  v19 = a2;
  v20 = (_OWORD *)__chkstk_darwin(v18);
  v22 = (char *)&v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = LibSer_SEPControl_Serialize(v20, a6, a7, a3, a4, (uint64_t)v22, &v34);
  if ((_DWORD)v23)
  {
    v24 = v23;
    goto LABEL_20;
  }
  v24 = a1(v19, 51, 0, v22, v34, v35, &v33);
  if ((_DWORD)v24)
  {
LABEL_20:
    v25 = 70;
    goto LABEL_21;
  }
  v25 = 10;
  v26 = v30;
  if (!v30 || !a9)
    goto LABEL_21;
  v31 = 0;
  v32 = 0;
  Size = LibSer_SEPControlResponse_Deserialize(v35, v33, &v32, &v31);
  if ((_DWORD)Size)
    goto LABEL_18;
  v27 = v31;
  if (*a9 < v31)
  {
    v24 = 4294967276;
    goto LABEL_25;
  }
  if (v32)
    memcpy(v26, v32, v31);
  v24 = 0;
  *a9 = v27;
  v25 = 10;
LABEL_21:
  if (v25 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "LibCall_ACMSEPControl", (int)v24);
  return v24;
}

uint64_t sub_1000988C0(uint64_t (*a1)(uint64_t, uint64_t, _QWORD, char *, uint64_t, int *, uint64_t *), uint64_t a2, const void *a3, unsigned int a4, _BYTE *a5)
{
  size_t v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  int v19;

  v19 = 0;
  v18 = 4;
  v10 = a4;
  v11 = a4 + 4;
  __chkstk_darwin(a1);
  v12 = (unsigned int *)((char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0));
  if (gACMLoggingLevel <= 0xAu)
    printf("%s: %s: called.\n", "ACM", "aclRequiresPasscodeInternal");
  v13 = 70;
  v14 = 4294967293;
  if (a3 && a5)
  {
    *v12 = a4;
    memcpy(v12 + 1, a3, v10);
    v15 = a1(a2, 17, 0, (char *)&v17 - ((v10 + 19) & 0x1FFFFFFF0), v11, &v19, &v18);
    if ((_DWORD)v15)
    {
      v14 = v15;
      v13 = 70;
    }
    else if (v18 == 4)
    {
      v14 = 0;
      *a5 = 1;
      v13 = 10;
    }
    else
    {
      v13 = 70;
      v14 = 4294967291;
    }
  }
  if (v13 >= gACMLoggingLevel)
    printf("%s: %s: returning, err = %ld.\n", "ACM", "aclRequiresPasscodeInternal", (int)v14);
  return v14;
}

void sub_100098A78()
{
  __assert_rtn("LibCall_ACMKernelControl", "LibCall.c", 373, "commandCursor == commandBuffer + sizeof(commandBuffer)");
}

uint64_t sub_100098AA0()
{
  uint64_t v0;
  int v2;

  v2 = -1;
  v0 = ccrng(&v2);
  sub_1000A8474(v0 != 0, 22, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  sub_1000A8474(v2 == 0, 23, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
  return v0;
}

uint64_t sub_100098B0C(uint64_t a1, unsigned int a2)
{
  unsigned int (*v4)(uint64_t, _QWORD, uint64_t);
  uint64_t v5;
  _BOOL8 v6;

  v4 = *(unsigned int (**)(uint64_t, _QWORD, uint64_t))sub_1000AC2D0();
  v5 = sub_1000AC2D0();
  v6 = v4(v5, a2, a1) == 0;
  return sub_1000A8474(v6, 31, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/platform/platform_lib.c");
}

uint64_t sub_100098B60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unint64_t a6, _QWORD *a7, unint64_t *a8)
{
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _OWORD __s[4];

  v42 = a1;
  v43 = a3;
  memset(__s, 0, sizeof(__s));
  v14 = (_QWORD *)ccaes_cbc_encrypt_mode();
  __chkstk_darwin(v14);
  v44 = (uint64_t)&v37 - v15;
  bzero((char *)&v37 - v15, v15);
  __chkstk_darwin(v16);
  v18 = (char *)&v37 - v17;
  bzero((char *)&v37 - v17, v17);
  v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6) || (a6 - 40) < 0xFFFFFFE0)
    goto LABEL_30;
  v40 = &v37;
  v41 = a8;
  v39 = a7;
  if (!a4)
  {
    v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 + 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_31;
    }
    v38 = a6 + 8;
    cccbc_init(v14, v44, a2, v42);
    goto LABEL_15;
  }
  if (a8)
  {
    v20 = *v41;
    v38 = a6 + 8;
    if (v20 >= a6 + 8)
    {
LABEL_15:
      v22 = 0;
      v23 = a6 >> 3;
      if (a6 >> 3 <= 1)
        v24 = 1;
      else
        v24 = v23;
      do
      {
        v25 = *a5++;
        *((_QWORD *)&__s[v22++] + 1) = v25;
      }
      while (v24 != v22);
      v26 = 0;
      *(_QWORD *)&__s[0] = v43;
      v27 = 1;
      v42 = v23;
      do
      {
        v43 = v26;
        v28 = 0;
        v29 = (uint64_t *)__s;
        do
        {
          if (a4)
          {
            if ((a4(1, &unk_1000E0358, v29, v29, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_1000A8E54((uint64_t)v14, v44, (uint64_t)v18, 0x10uLL);
          }
          v30 = *v29;
          v29 += 2;
          v31 = v30 ^ bswap64(v27 + v28++);
          *(_QWORD *)&__s[v28 % v23] = v31;
        }
        while (v24 != v28);
        v26 = v43 + 1;
        v27 += v42;
      }
      while (v43 != 5);
      v32 = v39;
      *v39 = *(_QWORD *)&__s[0];
      v33 = v32 + 1;
      v34 = (uint64_t *)__s + 1;
      do
      {
        v35 = *v34;
        v34 += 2;
        *v33++ = v35;
        --v24;
      }
      while (v24);
      v19 = 0;
      *v41 = v38 & 0xFFFFFFF8;
LABEL_30:
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      if (a4)
        return v19;
LABEL_31:
      cc_clear(*v14, v44);
      return v19;
    }
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100098E6C(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(uint64_t, void *, uint64_t *, uint64_t *, uint64_t), uint64_t *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  unint64_t v11;

  v11 = *a8;
  v9 = sub_100098B60(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000A8474(HIDWORD(v11) == 0, 171, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_100098ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unint64_t a6, _QWORD *a7, _QWORD *a8)
{
  _QWORD *v14;
  size_t v15;
  uint64_t v16;
  size_t v17;
  char *v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t *v29;
  int v30;
  unsigned int v31;
  BOOL v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  _QWORD *v42;
  unint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  _OWORD __s[4];

  v46 = a5;
  v44 = a1;
  memset(__s, 0, sizeof(__s));
  v14 = (_QWORD *)ccaes_cbc_decrypt_mode();
  __chkstk_darwin(v14);
  v47 = (uint64_t)&v38 - v15;
  bzero((char *)&v38 - v15, v15);
  __chkstk_darwin(v16);
  v18 = (char *)&v38 - v17;
  bzero((char *)&v38 - v17, v17);
  v19 = 0xFFFFFFFFLL;
  if (HIDWORD(a6))
    goto LABEL_33;
  v40 = a3;
  v20 = a6 >> 3;
  if ((a6 >> 3) - 6 < 0xFFFFFFFC)
    goto LABEL_33;
  v41 = &v38;
  v42 = a8;
  v39 = a7;
  v45 = a6;
  if (!a4)
  {
    v21 = (a2 & 0xFFFFFFFFFFFFFFF7) == 0x10 || a2 == 32;
    if (!v21 || !a8 || *a8 < a6 - 8)
    {
      memset_s(__s, 0x40uLL, 0, 0x40uLL);
      goto LABEL_34;
    }
    cccbc_init(v14, v47, a2, v44);
    goto LABEL_15;
  }
  if (a8 && *v42 >= v45 - 8)
  {
LABEL_15:
    *(_QWORD *)&__s[0] = *v46;
    v22 = v20 - 1;
    if (v20 != 1)
    {
      v23 = (_QWORD *)__s + 1;
      v24 = v46 + 1;
      v25 = v20 - 1;
      do
      {
        v26 = *v24++;
        *v23 = v26;
        v23 += 2;
        --v25;
      }
      while (v25);
    }
    v27 = 6 * v20 - 6;
    LODWORD(v44) = 1 - v20;
    v28 = 5;
    v43 = (unint64_t *)&__s[v20 - 2];
    do
    {
      LODWORD(v46) = v28;
      if (v45 >= 0x10)
      {
        v29 = v43;
        v30 = v22;
        v31 = v27;
        do
        {
          *v29 = *(_QWORD *)&__s[v30 % v22] ^ bswap64(v31);
          if (a4)
          {
            if ((a4(0, &unk_1000E0358, v29, v29, 16) & 1) == 0)
              goto LABEL_6;
          }
          else
          {
            cccbc_clear_iv(v18, v14[1]);
            sub_1000A8E54((uint64_t)v14, v47, (uint64_t)v18, 0x10uLL);
          }
          --v31;
          v29 -= 2;
          v32 = __OFSUB__(v30--, 1);
        }
        while (!((v30 < 0) ^ v32 | (v30 == 0)));
      }
      v28 = (_DWORD)v46 - 1;
      v27 += v44;
    }
    while ((_DWORD)v46);
    if (*(_QWORD *)&__s[0] == v40)
    {
      v33 = v39;
      if ((_DWORD)v22)
      {
        v34 = (uint64_t *)__s + 1;
        v35 = v22;
        do
        {
          v36 = *v34;
          v34 += 2;
          *v33++ = v36;
          --v35;
        }
        while (v35);
      }
      v19 = 0;
      *v42 = (8 * v22);
    }
    else
    {
      v19 = 0xFFFFFFFFLL;
    }
LABEL_33:
    memset_s(__s, 0x40uLL, 0, 0x40uLL);
    if (a4)
      return v19;
LABEL_34:
    cc_clear(*v14, v47);
    return v19;
  }
LABEL_6:
  memset_s(__s, 0x40uLL, 0, 0x40uLL);
  return 0xFFFFFFFFLL;
}

uint64_t sub_100099230(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t (*a4)(_QWORD, void *, unint64_t *, unint64_t *, uint64_t), _QWORD *a5, unsigned int a6, _QWORD *a7, _DWORD *a8)
{
  uint64_t v9;
  uint64_t v11;

  v11 = *a8;
  v9 = sub_100098ED4(a1, a2, a3, a4, a5, a6, a7, &v11);
  sub_1000A8474(HIDWORD(v11) == 0, 261, "/Library/Caches/com.apple.xbs/Sources/AppleKeyStore_libs/aeskeywrap.c");
  *a8 = v11;
  return v9;
}

uint64_t sub_100099298(unsigned int a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  int v5;

  v2 = a1 + 15;
  v3 = v2 << 31 >> 31;
  v4 = v3 != v2 || v3 < 0;
  v5 = v4;
  if (!v4)
    *a2 = v3 & 0xFFFFFFF8;
  return v5 ^ 1u;
}

uint64_t sub_1000992C4(unint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  BOOL v3;
  int v4;

  v2 = a1 >= 0xFFFFFFFFFFFFFFF1;
  v3 = v2 << 63 >> 63 != v2 || v2 << 63 >> 63 == -1;
  v4 = v3;
  if (!v3)
    *a2 = (a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  return v4 ^ 1u;
}

BOOL sub_1000992F4(unsigned int a1, unsigned int *a2)
{
  unsigned int v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

BOOL sub_100099308(unint64_t a1, unint64_t *a2)
{
  unint64_t v2;
  _BOOL8 result;

  v2 = a1 - 8;
  result = a1 > 7;
  *a2 = v2;
  return result;
}

uint64_t sub_10009931C(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  size_t v19;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v22[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v18 = __s;
  *((_QWORD *)&v18 + 1) = v22;
  v19 = 4096;
  v12 = 3758097090;
  if (a4 && a5)
  {
    v13 = sub_10009957C();
    if (!v13)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_vek", ":", 179, "", 0, "", "");
      v12 = 3758097084;
      goto LABEL_16;
    }
    v14 = v13;
    if (!ccder_blob_encode_body_tl(&v18, 4, 16, a4)
      || !sub_1000AAB7C(&v18, a3)
      || !sub_1000AAB7C(&v18, a2)
      || !sub_1000AAC94(&v18, a1)
      || !ccder_blob_encode_tl(&v18, 0x2000000000000010, (char *)v22 - *((_QWORD *)&v18 + 1)))
    {
      goto LABEL_14;
    }
    input[0] = *((_QWORD *)&v18 + 1);
    input[1] = (uint64_t)v22 - *((_QWORD *)&v18 + 1);
    v15 = IOConnectCallMethod(v14, 0x4Au, input, 2u, 0, 0, 0, 0, __s, &v19);
    if ((_DWORD)v15)
    {
      v12 = v15;
      goto LABEL_16;
    }
    *(_QWORD *)&v17 = __s;
    *((_QWORD *)&v17 + 1) = &__s[v19];
    if (!ccder_blob_decode_range(&v17, 0x2000000000000010, &v17)
      || !sub_1000AABE8(&v17, 0, a5))
    {
      goto LABEL_14;
    }
    if (!a6)
    {
      v12 = 0;
      goto LABEL_16;
    }
    v12 = 0;
    if ((sub_1000AA9E0(&v17, 0, a6) & 1) == 0)
LABEL_14:
      v12 = 3758097098;
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}

uint64_t sub_10009957C()
{
  uint64_t result;

  if (qword_1000E0278 != -1)
    dispatch_once(&qword_1000E0278, &stru_1000D33A0);
  dispatch_sync((dispatch_queue_t)qword_1000E0280, &stru_1000D3320);
  result = dword_1000E0268;
  if (!dword_1000E0268)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStore");
    return dword_1000E0268;
  }
  return result;
}

unint64_t sub_100099604(char *a1, const void *a2, size_t a3)
{
  unint64_t v3;
  int v6;
  int v7;
  ssize_t v8;
  int *v10;
  char *v11;
  int *v12;
  char *v13;

  v3 = (unint64_t)a1;
  if (a1)
  {
    v6 = open_dprotected_np(a1, 1793, 4, 0, 384);
    if (v6 == -1)
    {
      v10 = __error();
      v11 = strerror(*v10);
      syslog(3, "could not create file: %s (%s)\n", (const char *)v3, v11);
      return 0;
    }
    else
    {
      v7 = v6;
      v8 = write(v6, a2, a3);
      v3 = v8 != -1;
      if (v8 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "failed to write restore bag to disk %s\n", v13);
      }
      close(v7);
    }
  }
  return v3;
}

const char *sub_1000996D4(char *a1, _QWORD *a2, off_t *a3)
{
  const char *v3;
  off_t st_size;
  int v7;
  int v8;
  void *v9;
  void *v10;
  int *v12;
  char *v13;
  stat v14;

  v3 = a1;
  memset(&v14, 0, sizeof(v14));
  if (a1)
  {
    if (!stat(a1, &v14))
    {
      st_size = v14.st_size;
      v7 = open(v3, 0);
      if (v7 == -1)
      {
        v12 = __error();
        v13 = strerror(*v12);
        syslog(3, "could not open file: %s (%s)\n", v3, v13);
      }
      else
      {
        v8 = v7;
        v9 = calloc(st_size, 1uLL);
        v3 = (const char *)(v9 != 0);
        if (!v9)
        {
LABEL_7:
          close(v8);
          return v3;
        }
        v10 = v9;
        if (read(v8, v9, st_size) == st_size)
        {
          *a2 = v10;
          *a3 = st_size;
          goto LABEL_7;
        }
        close(v8);
        free(v10);
      }
    }
    return 0;
  }
  return v3;
}

uint64_t sub_1000997DC(unsigned int a1, const void *a2)
{
  mach_port_t v3;
  uint64_t input;

  input = a1;
  v3 = sub_10009957C();
  if (v3)
    return IOConnectCallMethod(v3, 0x6Cu, &input, 1u, a2, 0x10uLL, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_delete_xart_leak", ":", 268, "", 0, "", "");
  return 3758097084;
}

char *sub_1000998C0(char *result, uint64_t a2, uint64_t a3)
{
  FTS *v5;
  FTSENT *v6;
  FTSENT *v7;
  int fts_info;
  char *v9[2];

  if (result)
  {
    v9[0] = result;
    v9[1] = 0;
    result = (char *)fts_open(v9, 84, 0);
    if (result)
    {
      v5 = (FTS *)result;
      v6 = fts_read((FTS *)result);
      if (v6)
      {
        v7 = v6;
        do
        {
          fts_info = v7->fts_info;
          if (fts_info != 6)
          {
            if (fts_info == 1)
            {
              if (a2)
              {
                if (((*(uint64_t (**)(uint64_t, FTSENT *))(a2 + 16))(a2, v7) & 1) == 0)
                  fts_set(v5, v7, 4);
              }
            }
            else if (a3 && fts_info == 8)
            {
              (*(void (**)(uint64_t, FTSENT *))(a3 + 16))(a3, v7);
            }
          }
          v7 = fts_read(v5);
        }
        while (v7);
      }
      return (char *)fts_close(v5);
    }
  }
  return result;
}

char *sub_1000999BC(char *result, int a2)
{
  const char *v3;
  _QWORD v4[4];
  int v5;
  _QWORD v6[4];
  int v7;
  char v8[1024];

  if (result)
  {
    v3 = result;
    bzero(v8, 0x400uLL);
    result = realpath_DARWIN_EXTSN(v3, v8);
    if (result)
    {
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 0x40000000;
      v6[2] = sub_100099A98;
      v6[3] = &unk_1000D3260;
      v7 = a2;
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 0x40000000;
      v4[2] = sub_100099B48;
      v4[3] = &unk_1000D3280;
      v5 = a2;
      return sub_1000998C0(v8, (uint64_t)v6, (uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_100099A98(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;

  v4 = sub_100099AF0(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || v4 == v5)
    printf(" dir: %s %i\n", *(const char **)(a2 + 48), v4);
  return 1;
}

uint64_t sub_100099AF0(const char *a1)
{
  int v1;
  int v2;
  uint64_t v3;

  v1 = open_dprotected_np(a1, 0, 0, 1);
  if (v1 == -1)
    return 0xFFFFFFFFLL;
  v2 = v1;
  v3 = fcntl(v1, 63);
  if ((v2 & 0x80000000) == 0)
    close(v2);
  return v3;
}

uint64_t sub_100099B48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  int v5;

  result = sub_100099AF0(*(const char **)(a2 + 48));
  v5 = *(_DWORD *)(a1 + 32);
  if (v5 == -1 || (_DWORD)result == v5)
    return printf("file: %s %i\n", *(const char **)(a2 + 48), result);
  return result;
}

uint64_t sub_100099B9C()
{
  io_registry_entry_t v0;
  io_object_t v1;
  CFTypeRef CFProperty;
  _BOOL4 v3;
  unsigned int v4;
  size_t __len;
  char __big[1024];

  v0 = IORegistryEntryFromPath(kIOMasterPortDefault, "IODeviceTree:/filesystems");
  if (v0)
  {
    v1 = v0;
    CFProperty = IORegistryEntryCreateCFProperty(v0, CFSTR("e-apfs"), kCFAllocatorDefault, 0);
    v3 = CFProperty != 0;
    if (CFProperty)
      CFRelease(CFProperty);
    IOObjectRelease(v1);
  }
  else
  {
    v3 = 0;
  }
  __len = 1023;
  bzero(__big, 0x400uLL);
  if ((byte_1000E0270 & 1) == 0)
  {
    if (!sysctlbyname("kern.bootargs", __big, &__len, 0, 0) && strnstr(__big, "-apfs_shared_datavolume", __len))
      byte_1000E0271 = 1;
    byte_1000E0270 = 1;
  }
  v4 = byte_1000E0271;
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s ioreg: %d, boot_arg: %d%s\n", "aks", "", "", "", "aks_fs_supports_enhanced_apfs", ":", 437, "", 0, "", v3, byte_1000E0271, "");
  return v3 | v4;
}

uint64_t sub_100099D1C(const char *a1)
{
  char __str[1024];
  char v4[1024];

  bzero(v4, 0x400uLL);
  bzero(__str, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v4))
  {
    snprintf(__str, 0x400uLL, "%s/mobile", v4);
    sub_100099DEC(v4, (uint64_t)&off_1000D1E40, 35);
    if ((sub_100099B9C() & 1) == 0)
      sub_100099DEC(__str, (uint64_t)&off_1000D24D0, 72);
  }
  return 0;
}

void sub_100099DEC(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  stat v7;
  char __str[1024];

  bzero(__str, 0x400uLL);
  memset(&v7, 0, sizeof(v7));
  if (a3)
  {
    v6 = a2 + 16;
    do
    {
      snprintf(__str, 0x400uLL, "%s%s", a1, *(const char **)(v6 - 16));
      if (stat(__str, &v7))
      {
        printf("stat failed: %s\n");
      }
      else
      {
        sub_100099AF0(__str);
        printf("%s: mode=%o, u/g=%i:%i class=%i%s\n");
      }
      v6 += 48;
      --a3;
    }
    while (a3);
  }
}

uint64_t sub_100099F2C(const char *a1)
{
  char v3[1024];

  bzero(v3, 0x400uLL);
  if (realpath_DARWIN_EXTSN(a1, v3))
    sub_100099DEC(v3, (uint64_t)&off_1000D24D0, 72);
  return 0;
}

const char *sub_100099FB0()
{
  puts("shared allow list:");
  sub_10009A004("<var>", (uint64_t)&off_1000D1E40, 35);
  puts("user allow list:");
  return sub_10009A004("<user>", (uint64_t)&off_1000D24D0, 72);
}

const char *sub_10009A004(const char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const char *v4;
  const char **v5;
  const char **v6;
  char v7;

  if (a3)
  {
    v3 = a3;
    v4 = result;
    v5 = (const char **)(a2 + 16);
    v6 = (const char **)(a2 + 16);
    do
    {
      v7 = *(_BYTE *)v6;
      v6 += 6;
      if ((v7 & 1) != 0)
        result = (const char *)printf("%s%s\n", v4, *(v5 - 2));
      v5 = v6;
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_10009A06C(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  size_t v17;
  uint64_t input[3];
  _BYTE __s[4096];
  uint64_t v20;

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v16 = __s;
  *((_QWORD *)&v16 + 1) = &v20;
  v17 = 4096;
  v10 = 3758097090;
  if (a4 && a5)
  {
    v11 = sub_10009957C();
    if (v11)
    {
      v12 = v11;
      if (!ccder_blob_encode_body_tl(&v16, 4, 16, a4)
        || !sub_1000AAB7C(&v16, a3)
        || !sub_1000AAC94(&v16, a1)
        || !ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v20 - *((_QWORD *)&v16 + 1)))
      {
        goto LABEL_10;
      }
      input[0] = a2;
      input[1] = *((_QWORD *)&v16 + 1);
      input[2] = (uint64_t)&v20 - *((_QWORD *)&v16 + 1);
      v13 = IOConnectCallMethod(v12, 0x4Cu, input, 3u, 0, 0, 0, 0, __s, &v17);
      if ((_DWORD)v13)
      {
        v10 = v13;
        goto LABEL_12;
      }
      *(_QWORD *)&v15 = __s;
      *((_QWORD *)&v15 + 1) = &__s[v17];
      if (!ccder_blob_decode_range(&v15, 0x2000000000000010, &v15)
        || (v10 = 0, (sub_1000AABE8(&v15, 0, a5) & 1) == 0))
      {
LABEL_10:
        v10 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_kek", ":", 508, "", 0, "", "");
      v10 = 3758097084;
    }
  }
LABEL_12:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_10009A2A4(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  size_t v17;
  uint64_t input[2];
  _BYTE __s[4096];
  uint64_t v20;

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v16 = __s;
  *((_QWORD *)&v16 + 1) = &v20;
  v17 = 4096;
  v10 = 3758097090;
  if (a3 && a4)
  {
    v11 = sub_10009957C();
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_new_sibling_vek", ":", 543, "", 0, "", "");
      v10 = 3758097084;
      goto LABEL_15;
    }
    v12 = v11;
    if (!ccder_blob_encode_body_tl(&v16, 4, 16, a3)
      || !sub_1000AAB7C(&v16, a2)
      || !sub_1000AAC94(&v16, a1)
      || !ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v20 - *((_QWORD *)&v16 + 1)))
    {
      goto LABEL_13;
    }
    input[0] = *((_QWORD *)&v16 + 1);
    input[1] = (uint64_t)&v20 - *((_QWORD *)&v16 + 1);
    v13 = IOConnectCallMethod(v12, 0x63u, input, 2u, 0, 0, 0, 0, __s, &v17);
    if ((_DWORD)v13)
    {
      v10 = v13;
      goto LABEL_15;
    }
    *(_QWORD *)&v15 = __s;
    *((_QWORD *)&v15 + 1) = &__s[v17];
    if (!ccder_blob_decode_range(&v15, 0x2000000000000010, &v15)
      || !sub_1000AABE8(&v15, 0, a4))
    {
      goto LABEL_13;
    }
    if (!a5)
    {
      v10 = 0;
      goto LABEL_15;
    }
    v10 = 0;
    if ((sub_1000AA9E0(&v15, 0, a5) & 1) == 0)
LABEL_13:
      v10 = 3758097098;
  }
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v10;
}

uint64_t sub_10009A4F0(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  uint64_t v15;
  __int128 v17;
  __int128 v18;
  size_t v19;
  uint64_t input[2];
  _BYTE __s[4096];
  _QWORD v22[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v18 = __s;
  *((_QWORD *)&v18 + 1) = v22;
  v19 = 4096;
  v12 = 3758097090;
  if (a3 && a4 && a5 && a6)
  {
    v13 = sub_10009957C();
    if (v13)
    {
      v14 = v13;
      if (!sub_1000AAB7C(&v18, a5)
        || !ccder_blob_encode_body_tl(&v18, 4, 16, a4)
        || !sub_1000AAB7C(&v18, a3)
        || !sub_1000AAB7C(&v18, a2)
        || !sub_1000AAC94(&v18, a1)
        || !ccder_blob_encode_tl(&v18, 0x2000000000000010, (char *)v22 - *((_QWORD *)&v18 + 1)))
      {
        goto LABEL_14;
      }
      input[0] = *((_QWORD *)&v18 + 1);
      input[1] = (uint64_t)v22 - *((_QWORD *)&v18 + 1);
      v15 = IOConnectCallMethod(v14, 0x4Du, input, 2u, 0, 0, 0, 0, __s, &v19);
      if ((_DWORD)v15)
      {
        v12 = v15;
        goto LABEL_16;
      }
      *(_QWORD *)&v17 = __s;
      *((_QWORD *)&v17 + 1) = &__s[v19];
      if (!ccder_blob_decode_range(&v17, 0x2000000000000010, &v17)
        || (v12 = 0, (sub_1000AABE8(&v17, 0, a6) & 1) == 0))
      {
LABEL_14:
        v12 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_rewrap_kek", ":", 582, "", 0, "", "");
      v12 = 3758097084;
    }
  }
LABEL_16:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v12;
}

uint64_t sub_10009A74C(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v13;
  mach_port_t v14;
  mach_port_t v15;
  uint64_t v16;
  __int128 v19;
  __int128 v20;
  size_t v21;
  uint64_t input[4];
  _BYTE __s[4096];
  _QWORD v24[2];

  v13 = 3758097098;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v20 = __s;
  *((_QWORD *)&v20 + 1) = v24;
  v21 = 4096;
  v14 = sub_10009957C();
  if (!v14)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_set_protection", ":", 616, "", 0, "", "");
    v13 = 3758097084;
    goto LABEL_14;
  }
  v15 = v14;
  if (sub_1000AAB7C(&v20, a6)
    && sub_1000AAB7C(&v20, a5)
    && sub_1000AAB7C(&v20, a4)
    && sub_1000AAC94(&v20, a1)
    && ccder_blob_encode_tl(&v20, 0x2000000000000010, (char *)v24 - *((_QWORD *)&v20 + 1)))
  {
    input[0] = a2;
    input[1] = a3;
    input[2] = *((_QWORD *)&v20 + 1);
    input[3] = (uint64_t)v24 - *((_QWORD *)&v20 + 1);
    v16 = IOConnectCallMethod(v15, 0x54u, input, 4u, 0, 0, 0, 0, __s, &v21);
    if ((_DWORD)v16)
    {
      v13 = v16;
      goto LABEL_14;
    }
    *(_QWORD *)&v19 = __s;
    *((_QWORD *)&v19 + 1) = &__s[v21];
    if (!v21)
      goto LABEL_13;
    if (!ccder_blob_decode_range(&v19, 0x2000000000000010, &v19))
      goto LABEL_14;
    if (!a7)
    {
LABEL_13:
      v13 = 0;
      goto LABEL_14;
    }
    v13 = 0;
    if ((sub_1000AABE8(&v19, 0, a7) & 1) == 0)
      v13 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v13;
}

uint64_t sub_10009A994(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, _QWORD *a6, uint64_t a7)
{
  mach_port_t v14;
  mach_port_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  size_t v21;
  uint64_t input[3];
  _BYTE __s[4096];
  _QWORD v24[2];

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v20 = __s;
  *((_QWORD *)&v20 + 1) = v24;
  v21 = 4096;
  if (!a5)
  {
    v17 = 3758097090;
    goto LABEL_15;
  }
  v14 = sub_10009957C();
  if (!v14)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_unwrap_vek_with_acm", ":", 653, "", 0, "", "");
    v17 = 3758097084;
    goto LABEL_15;
  }
  v15 = v14;
  if (!sub_1000AAB7C(&v20, a6)
    || !sub_1000AAB7C(&v20, a5)
    || !sub_1000AAB7C(&v20, a4)
    || !sub_1000AAB7C(&v20, a3)
    || !sub_1000AAC94(&v20, a1)
    || !ccder_blob_encode_tl(&v20, 0x2000000000000010, (char *)v24 - *((_QWORD *)&v20 + 1)))
  {
    goto LABEL_13;
  }
  input[0] = *((_QWORD *)&v20 + 1);
  input[1] = (uint64_t)v24 - *((_QWORD *)&v20 + 1);
  input[2] = a2;
  v16 = IOConnectCallMethod(v15, 0x4Bu, input, 3u, 0, 0, 0, 0, __s, &v21);
  if ((_DWORD)v16)
  {
    v17 = v16;
    goto LABEL_15;
  }
  *(_QWORD *)&v19 = __s;
  *((_QWORD *)&v19 + 1) = &__s[v21];
  if (!ccder_blob_decode_range(&v19, 0x2000000000000010, &v19))
    goto LABEL_13;
  if (!a7)
  {
    v17 = 0;
    goto LABEL_15;
  }
  v17 = 0;
  if ((sub_1000AA9E0(&v19, 0, a7) & 1) == 0)
LABEL_13:
    v17 = 3758097098;
LABEL_15:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v17;
}

uint64_t sub_10009ABFC(uint64_t a1, unsigned int a2, _QWORD *a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  return sub_10009A994(a1, a2, a3, a4, a5, 0, a6);
}

void sub_10009AC08(const char *a1, char a2)
{
  char *v4;
  char *v5;
  uint64_t i;
  char *v7;
  uint64_t k;
  char *v9;
  uint64_t j;
  _QWORD v11[5];
  char v12[1024];
  statfs v13;

  if (a1)
  {
    bzero(&v13, 0x878uLL);
    bzero(v12, 0x400uLL);
    if (realpath_DARWIN_EXTSN(a1, v12))
    {
      v4 = (char *)malloc(0x818uLL);
      memset_s(v4, 0x818uLL, 0, 0x818uLL);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 0x40000000;
      v11[2] = sub_10009AE74;
      v11[3] = &unk_1000D32E0;
      v11[4] = v4;
      sub_1000998C0(v12, (uint64_t)&stru_1000D32C0, (uint64_t)v11);
      if (!statfs(v12, &v13))
      {
        if ((a2 & 1) != 0)
          printf("Free Blocks:%lld blocks of size:%d\n");
        else
          printf("%lld,%d\n");
      }
      v5 = v4 + 340;
      for (i = 1; i != 5; ++i)
      {
        if ((a2 & 1) != 0)
        {
          v9 = &v4[296 * i];
          printf("%s:\n\tNum files:\t%u,\n\tNum hardlinks:\t%u,\n\tNum compressed:\t%u,\n\tTotal Size:\t%lld,\n\tMin File Size:\t%lld,\n\tMax File Size:\t%lld,\n", off_1000DF748[i], *(_DWORD *)v9, *((_DWORD *)v9 + 2), *((_DWORD *)v9 + 1), *((_QWORD *)v9 + 2), *((_QWORD *)v9 + 3), *((_QWORD *)v9 + 4));
          printf("\tSize Distribution:");
          printf("%i", *((_DWORD *)v9 + 10));
          for (j = 0; j != 252; j += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[j]);
          }
        }
        else
        {
          v7 = &v4[296 * i];
          printf("%i,%u,%u,%u,%lld,%lld,%lld,", i, *(_DWORD *)v7, *((_DWORD *)v7 + 2), *((_DWORD *)v7 + 1), *((_QWORD *)v7 + 2), *((_QWORD *)v7 + 3), *((_QWORD *)v7 + 4));
          printf("%i", *((_DWORD *)v7 + 10));
          for (k = 0; k != 252; k += 4)
          {
            putchar(44);
            printf("%i", *(_DWORD *)&v5[k]);
          }
        }
        putchar(10);
        v5 += 296;
      }
      free(v4);
    }
  }
}

BOOL sub_10009AE6C(id a1, _ftsent *a2)
{
  return 1;
}

uint64_t sub_10009AE74(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t *v9;
  int64_t v10;
  uint64_t v11;
  int64_t *v12;
  int64_t v13;
  int64_t v14;
  BOOL v15;
  unint64_t v16;

  result = sub_100099AF0(*(const char **)(a2 + 48));
  if ((result - 7) >= 0xFFFFFFFA)
  {
    v5 = *(_QWORD *)(a2 + 96);
    v6 = *(_QWORD *)(v5 + 96);
    v7 = *(_QWORD *)(a1 + 32);
    ++*(_DWORD *)(v7 + 296 * result);
    if (*(unsigned __int16 *)(v5 + 6) >= 2u)
      ++*(_DWORD *)(v7 + 296 * result + 8);
    if ((*(_BYTE *)(v5 + 116) & 0x20) != 0)
      ++*(_DWORD *)(v7 + 296 * result + 4);
    v8 = v7 + 296 * result;
    v10 = *(_QWORD *)(v8 + 32);
    v9 = (int64_t *)(v8 + 32);
    *(v9 - 2) += v6;
    if (v6 > v10)
      *v9 = v6;
    v11 = v7 + 296 * result;
    v14 = *(_QWORD *)(v11 + 24);
    v12 = (int64_t *)(v11 + 24);
    v13 = v14;
    if (v14)
      v15 = v6 < v13;
    else
      v15 = 1;
    if (v15)
      *v12 = v6;
    if (v6)
      v16 = v7 + 296 * result + 4 * (63 - __clz(v6));
    else
      v16 = v7 + 296 * result;
    ++*(_DWORD *)(v16 + 40);
  }
  return result;
}

uint64_t sub_10009AF7C(unsigned int a1, uint64_t a2)
{
  mach_port_t v2;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  input[0] = 1;
  input[1] = a1;
  input[2] = a2;
  output = 0;
  outputCnt = 1;
  v2 = sub_10009957C();
  if (v2)
    return IOConnectCallMethod(v2, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_set_options", ":", 820, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009B064(unsigned int a1, uint64_t *a2)
{
  uint64_t v2;
  mach_port_t v4;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[3];

  v2 = 3758097084;
  if (!a2)
    return 3758097090;
  input[0] = 0;
  input[1] = a1;
  input[2] = 0;
  output = 0;
  outputCnt = 1;
  v4 = sub_10009957C();
  if (v4)
  {
    v2 = IOConnectCallMethod(v4, 0x56u, input, 3u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)v2)
      *a2 = output;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kext_get_options", ":", 841, "", 0, "", "");
  }
  return v2;
}

uint64_t sub_10009B178()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x10u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_internal_state", ":", 857, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009B21C(unsigned int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x86u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_run_internal_test", ":", 871, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009B300(int a1, unsigned int a2, uint64_t a3, int a4, const void *a5, int a6, _QWORD *a7, _DWORD *a8)
{
  mach_port_t v16;
  uint64_t v17;
  void *v18;
  size_t __count;
  uint64_t input[4];
  _BYTE __src[32768];

  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v16 = sub_10009957C();
  if (v16)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    if (!a2 || (v17 = 3758097090, a7) && a8)
    {
      v17 = IOConnectCallMethod(v16, 0x36u, input, 4u, a5, a6, 0, 0, __src, &__count);
      if (!(_DWORD)v17 && a2)
      {
        v18 = calloc(__count, 1uLL);
        *a7 = v18;
        if (v18)
        {
          memcpy(v18, __src, __count);
          v17 = 0;
          *a8 = __count;
        }
        else
        {
          v17 = 3758097085;
        }
      }
    }
  }
  else
  {
    v17 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_escrow", ":", 890, "", 0, "", "");
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v17;
}

void sub_10009B4D8(id a1)
{
  if (!dword_1000E0268)
    dword_1000E0268 = sub_10009BFB0("IOService:/IOResources/AppleKeyStore", "AppleKeyStore");
}

uint64_t sub_10009B514()
{
  uint64_t result;

  if (qword_1000E0278 != -1)
    dispatch_once(&qword_1000E0278, &stru_1000D33A0);
  dispatch_sync((dispatch_queue_t)qword_1000E0280, &stru_1000D3360);
  result = dword_1000E026C;
  if (!dword_1000E026C)
  {
    syslog(3, "failed to open connection to %s\n", "AppleKeyStoreTest");
    return dword_1000E026C;
  }
  return result;
}

void sub_10009B59C(id a1)
{
  if (!dword_1000E026C)
    dword_1000E026C = sub_10009BFB0("IOService:/IOResources/AppleKeyStoreTest", "AppleKeyStoreTest");
}

uint64_t sub_10009B5D8(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  size_t v19;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t input[2];

  input[0] = a4;
  input[1] = a3;
  output = 0;
  outputCnt = 1;
  bzero(outputStruct, 0x400uLL);
  v19 = 1024;
  v11 = IOConnectCallMethod(a1, 0xFu, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v19);
  if ((_DWORD)v11)
    return v11;
  v17 = 3758097084;
  if (outputCnt == 1)
  {
    *a7 = output;
    if (sub_1000ACD48(outputStruct, v19, 3u, v12, v13, v14, v15, v16, a5))
      return 3758097084;
    else
      return 0;
  }
  return v17;
}

uint64_t sub_10009B70C(mach_port_t a1, const void *a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, _DWORD *a7, uint64_t a8, uint64_t a9, _DWORD *a10, uint64_t a11, uint64_t a12, _DWORD *a13)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  size_t v26;
  uint32_t outputCnt;
  unsigned int outputStruct[256];
  uint64_t output;
  uint64_t v30;
  uint64_t v31;
  uint64_t input[2];

  input[0] = a4;
  input[1] = a3;
  output = 0;
  v30 = 0;
  v31 = 0;
  outputCnt = 3;
  bzero(outputStruct, 0x400uLL);
  v26 = 1024;
  v17 = IOConnectCallMethod(a1, 0x13u, input, 2u, a2, 0x10uLL, &output, &outputCnt, outputStruct, &v26);
  if ((_DWORD)v17)
    return v17;
  v23 = 3758097084;
  if (outputCnt == 3)
  {
    v24 = v30;
    *a7 = output;
    *a10 = v24;
    *a13 = v31;
    if (sub_1000ACD48(outputStruct, v26, 5u, v18, v19, v20, v21, v22, a5))
      return 3758097084;
    else
      return 0;
  }
  return v23;
}

uint64_t sub_10009B864(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, size_t *a8)
{
  uint64_t v11;
  unsigned int inputStructCnt[3];
  uint64_t input;

  input = a3;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, a4, a5, a6, (uint64_t)a7, (uint64_t)a8, a2);
  v11 = IOConnectCallMethod(a1, 0x14u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, a8);
  free(*(void **)&inputStructCnt[1]);
  return v11;
}

uint64_t sub_10009B920(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10, uint64_t a11, unsigned int a12, void *outputStruct, size_t *a14, _DWORD *a15)
{
  uint64_t v16;
  uint64_t v17;
  uint32_t outputCnt;
  unsigned int inputStructCnt[3];
  uint64_t output;
  uint64_t input[4];

  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  input[3] = a12;
  output = 0;
  outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 4, a4, a5, a6, a7, a8, a2);
  v16 = IOConnectCallMethod(a1, 0x15u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, outputStruct, a14);
  if ((_DWORD)v16)
  {
    v17 = v16;
  }
  else if (outputCnt == 1)
  {
    v17 = 0;
    *a15 = output;
  }
  else
  {
    v17 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_10009BA30(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  size_t outputStructCnt;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[2];

  input[0] = a3;
  input[1] = a6;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  outputStructCnt = 1024;
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  v15 = IOConnectCallMethod(a1, 0x10u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &outputStructCnt);
  if ((_DWORD)v15)
  {
    v21 = v15;
  }
  else if (sub_1000ACD48(outputStruct, outputStructCnt, 2u, v16, v17, v18, v19, v20, a7))
  {
    v21 = 3758097084;
  }
  else
  {
    v21 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v21;
}

uint64_t sub_10009BB68(mach_port_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, unsigned int a9, uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  size_t v25;
  unsigned int inputStructCnt[3];
  unsigned int outputStruct[256];
  uint64_t input[3];

  input[0] = a3;
  input[1] = a6;
  input[2] = a9;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(outputStruct, 0x400uLL);
  v25 = 1024;
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a2);
  v17 = IOConnectCallMethod(a1, 0x17u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
  if ((_DWORD)v17)
  {
    v23 = v17;
  }
  else if (sub_1000ACD48(outputStruct, v25, 2u, v18, v19, v20, v21, v22, a10))
  {
    v23 = 3758097084;
  }
  else
  {
    v23 = 0;
  }
  free(*(void **)&inputStructCnt[1]);
  return v23;
}

uint64_t sub_10009BCB0(mach_port_t a1, void *inputStruct, unsigned int a3)
{
  uint64_t input;

  input = a3;
  return IOConnectCallMethod(a1, 0x11u, &input, 1u, inputStruct, 0x10uLL, 0, 0, 0, 0);
}

uint64_t sub_10009BD20(mach_port_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  unsigned int inputStructCnt[3];
  uint64_t input;

  input = a2;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 1, a4, a5, a6, a7, a8, a3);
  v9 = IOConnectCallMethod(a1, 0x12u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_10009BDCC(int a1, const void *a2, _QWORD *a3, size_t *a4)
{
  mach_port_t v7;
  size_t v8;
  uint64_t v9;
  size_t v10;
  void *v11;
  uint64_t v12;
  size_t __count;
  _BYTE __src[32768];
  uint64_t input;

  input = a1;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v7 = sub_10009957C();
  if (v7)
  {
    if (a2)
      v8 = 18;
    else
      v8 = 0;
    v9 = IOConnectCallMethod(v7, 0x5Du, &input, 1u, a2, v8, 0, 0, __src, &__count);
    v10 = __count;
    if ((_DWORD)v9)
    {
      v12 = v9;
    }
    else if (__count - 32769 < 0xFFFFFFFFFFFF8000)
    {
      v12 = 3758097090;
    }
    else
    {
      v11 = calloc(__count, 1uLL);
      *a3 = v11;
      v10 = __count;
      if (v11)
      {
        *a4 = __count;
        memcpy(v11, __src, v10);
        v12 = 0;
        v10 = __count;
      }
      else
      {
        v12 = 3758097085;
      }
    }
  }
  else
  {
    v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_internal_info_for_key", ":", 1246, "", 0, "", "");
    v10 = 0x8000;
  }
  memset_s(__src, v10, 0, v10);
  return v12;
}

void sub_10009BF88(id a1)
{
  qword_1000E0280 = (uint64_t)dispatch_queue_create("aks-client-queue", 0);
}

uint64_t sub_10009BFB0(char *path, const char *a2)
{
  io_service_t v3;
  io_object_t v4;
  kern_return_t v5;
  const __CFDictionary *v6;
  io_service_t MatchingService;
  io_object_t v8;
  uint64_t result;
  kern_return_t v10;
  io_connect_t connect;

  connect = 0;
  v3 = IORegistryEntryFromPath(kIOMasterPortDefault, path);
  if (!v3 || (v4 = v3, v5 = IOServiceOpen(v3, mach_task_self_, 0, &connect), IOObjectRelease(v4), v5))
  {
    v6 = IOServiceMatching(a2);
    MatchingService = IOServiceGetMatchingService(kIOMasterPortDefault, v6);
    if (MatchingService)
    {
      v8 = MatchingService;
      IOServiceOpen(MatchingService, mach_task_self_, 0, &connect);
      IOObjectRelease(v8);
    }
  }
  result = connect;
  if (connect)
  {
    v10 = IOConnectCallMethod(connect, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    result = connect;
    if (v10)
    {
      IOServiceClose(connect);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10009C0A4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = ccder_sizeof_implicit_uint64(0x8000000000000004, a1[10]);
  v3 = ccder_sizeof_raw_octet_string(16);
  v4 = ccder_sizeof_raw_octet_string(40);
  v5 = v4 + v2 + 2 * v3 + ccder_sizeof_implicit_uint64(0x8000000000000000, *a1);
  return ccder_sizeof(0x2000000000000010, v5);
}

uint64_t sub_10009C114(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = a2 + a3;
  v7 = a2;
  v8 = a2 + a3;
  if (!ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000004, a1[10])
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000003, 16, a1 + 8)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000002, 40, a1 + 3)
    || !ccder_blob_encode_implicit_raw_octet_string(&v7, 0x8000000000000001, 16, a1 + 1)
    || !ccder_blob_encode_implicit_uint64(&v7, 0x8000000000000000, *a1))
  {
    return 4294967273;
  }
  v5 = ccder_blob_encode_tl(&v7, 0x2000000000000010, v4 - v8);
  result = 4294967273;
  if (v5)
  {
    if (v7 == v8)
      return 0;
    else
      return 4294967273;
  }
  return result;
}

uint64_t sub_10009C1F4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t result;
  __int128 v6;

  *(_QWORD *)&v6 = a1;
  *((_QWORD *)&v6 + 1) = a1 + a2;
  if (!ccder_blob_decode_range(&v6, 0x2000000000000010, &v6)
    || !sub_1000AC014(&v6, 0x8000000000000000, a3)
    || !sub_1000A9844(&v6, 0x8000000000000001, a3 + 1, 16)
    || !sub_1000A9844(&v6, 0x8000000000000002, a3 + 3, 40)
    || !sub_1000A9844(&v6, 0x8000000000000003, a3 + 8, 16))
  {
    return 4294967277;
  }
  v4 = sub_1000AC014(&v6, 0x8000000000000004, a3 + 10);
  result = 4294967277;
  if (v4)
  {
    if ((_QWORD)v6 == *((_QWORD *)&v6 + 1))
      return 0;
    else
      return 4294967277;
  }
  return result;
}

uint64_t sub_10009C2D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  v13 = 40;
  *(_QWORD *)a4 = 0;
  uuid_copy((unsigned __int8 *)(a4 + 8), (const unsigned __int8 *)(a1 + 32));
  *(_QWORD *)(a4 + 80) = 1;
  v8 = sub_1000AC32C(a4 + 64, 0x10u);
  v9 = ccsha256_di(v8);
  if (j__ccpbkdf2_hmac(v9, a3, a2, 16, a4 + 64, *(_QWORD *)(a4 + 80), 32, __s))
  {
    v11 = 4294967286;
  }
  else
  {
    v10 = sub_100098E6C((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (uint64_t *)a1, 0x20u, (_QWORD *)(a4 + 24), &v13);
    if ((_DWORD)v10)
    {
      v11 = v10;
    }
    else if (v13 == 40)
    {
      v11 = 0;
    }
    else
    {
      v11 = 4294967286;
    }
  }
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v11;
}

uint64_t sub_10009C404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v12;
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  v12 = 32;
  if (*(_QWORD *)a1)
  {
    v10 = 4294967284;
  }
  else
  {
    v8 = ccsha256_di(a1);
    if (j__ccpbkdf2_hmac(v8, a3, a2, 16, a1 + 64, *(_QWORD *)(a1 + 80), 32, __s))
      goto LABEL_9;
    v9 = sub_100099230((uint64_t)__s, 0x20u, 0xA6A6A6A6A6A6A6A6, 0, (_QWORD *)(a1 + 24), 0x28u, (_QWORD *)a4, &v12);
    if ((_DWORD)v9)
    {
      v10 = v9;
      goto LABEL_8;
    }
    if (v12 != 32)
    {
LABEL_9:
      v10 = 4294967286;
    }
    else
    {
      cccurve25519_make_pub(a4 + 32, a4);
      if (uuid_compare((const unsigned __int8 *)(a1 + 8), (const unsigned __int8 *)(a4 + 32)))
        v10 = 4294967272;
      else
        v10 = 0;
    }
  }
LABEL_8:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  return v10;
}

uint64_t sub_10009C53C(int a1, unsigned int a2, unsigned int a3, uint64_t a4, int a5, _QWORD *a6)
{
  uint64_t v12;
  mach_port_t v13;
  mach_port_t v14;
  __int128 v16;
  uint64_t input[7];
  _BYTE v18[4096];
  uint64_t v19;

  v12 = 3758097098;
  bzero(v18, 0x1000uLL);
  *(_QWORD *)&v16 = v18;
  *((_QWORD *)&v16 + 1) = &v19;
  v13 = sub_10009957C();
  if (v13)
  {
    v14 = v13;
    if (sub_1000AAB7C(&v16, a6)
      && ccder_blob_encode_tl(&v16, 0x2000000000000010, (char *)&v19 - *((_QWORD *)&v16 + 1)))
    {
      input[0] = a1;
      input[1] = a2;
      input[2] = a4;
      input[3] = a5;
      input[4] = a3;
      input[5] = *((_QWORD *)&v16 + 1);
      input[6] = (uint64_t)&v19 - *((_QWORD *)&v16 + 1);
      return IOConnectCallMethod(v14, 0x21u, input, 7u, 0, 0, 0, 0, 0, 0);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_create_for_bag_and_kek", ":", 50, "", 0, "", "");
    return 3758097084;
  }
  return v12;
}

uint64_t sub_10009C6E4(int a1, unsigned int a2, uint64_t a3, int a4)
{
  _QWORD v5[2];

  v5[0] = 0;
  v5[1] = 0;
  return sub_10009C53C(a1, a2, 0, a3, a4, v5);
}

uint64_t sub_10009C714(int a1)
{
  return sub_10009C720(a1, 0, 0);
}

uint64_t sub_10009C720(int a1, unsigned int a2, BOOL *a3)
{
  mach_port_t v6;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  v6 = sub_10009957C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(v6, 0x22u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (!(_DWORD)result)
    {
      result = 0;
      if (a3)
        *a3 = output != 0;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_stash_load", ":", 77, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10009C840(int a1, _BYTE *a2)
{
  uint64_t result;
  BOOL v4;

  v4 = 0;
  if (!a2)
    return sub_10009C720(a1, 1u, &v4);
  *a2 = 0;
  result = sub_10009C720(a1, 1u, &v4);
  if (!(_DWORD)result)
    *a2 = v4;
  return result;
}

uint64_t sub_10009C898()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x25u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_destroy", ":", 125, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009C93C(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x24u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_commit", ":", 138, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009CA20(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x33u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_enable", ":", 154, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009CB04(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x35u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_stash_persist", ":", 170, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009CBE8(void **a1)
{
  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 != 1634431856)
    return 0xFFFFFFFFLL;
  free(a1[1]);
  free(a1);
  return 0;
}

uint64_t sub_10009CC40(int a1, uint64_t a2, unint64_t a3, int a4, _QWORD *a5)
{
  void *v9;
  void *v10;
  int v11;
  uint64_t v12;
  void **v14;

  v14 = 0;
  if (!a2 && a3)
    return 0xFFFFFFFFLL;
  if (sub_10009CD44(a4, &v14) || (v9 = calloc(0x20uLL, 1uLL)) == 0)
  {
    v12 = 0xFFFFFFFFLL;
  }
  else
  {
    v10 = v9;
    v11 = sub_10009CE24((uint64_t)v14, a2, a3, (uint64_t)v9);
    v12 = 0xFFFFFFFFLL;
    if (a3 <= 0x7FFFFFFE && !v11 && !sub_10009CEC4(a1, a2, a3, (uint64_t)v10, (uint64_t)v14))
    {
      v12 = 0;
      if (a5)
      {
        *a5 = v14;
        v14 = 0;
      }
    }
    memset_s(v10, 0x20uLL, 0, 0x20uLL);
    free(v10);
  }
  if (v14)
    sub_10009CBE8(v14);
  return v12;
}

uint64_t sub_10009CD44(int a1, _QWORD *a2)
{
  uint64_t result;
  _DWORD *v6;
  _DWORD *v7;
  void *v8;
  int v9;
  void *v10;

  if ((a1 - 1) > 2 || a2 == 0)
    return 0xFFFFFFFFLL;
  v6 = calloc(0x20uLL, 1uLL);
  if (!v6)
    return 0xFFFFFFFFLL;
  v7 = v6;
  *((_QWORD *)v6 + 2) = 20;
  v8 = calloc(0x14uLL, 1uLL);
  *((_QWORD *)v7 + 1) = v8;
  if (!v8)
  {
LABEL_19:
    free(v7);
    return 0xFFFFFFFFLL;
  }
  *v7 = 1634431856;
  v7[6] = a1;
  result = CCRandomCopyBytes(kCCRandomDefault, v8, *((_QWORD *)v7 + 2));
  if ((_DWORD)result)
  {
    v10 = (void *)*((_QWORD *)v7 + 1);
    if (v10)
      free(v10);
    goto LABEL_19;
  }
  if (a1 == 3)
    v9 = 2000;
  else
    v9 = 10000000;
  if (a1 == 2)
    v9 = 1000;
  v7[1] = v9;
  *a2 = v7;
  return result;
}

uint64_t sub_10009CE24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  if (!a1)
    return 0xFFFFFFFFLL;
  if (*(_DWORD *)a1 != 1634431856 || !a2 && a3)
    return 0xFFFFFFFFLL;
  result = 0xFFFFFFFFLL;
  if (a4 && (*(_DWORD *)(a1 + 24) - 4) >= 0xFFFFFFFD)
  {
    v9 = ccsha256_di(0xFFFFFFFFLL);
    if (ccpbkdf2_hmac(v9, a3, a2, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 4), 32, a4))return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t sub_10009CEC4(int a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  mach_port_t v11;
  mach_port_t v12;
  void *v14;
  rsize_t __n;
  void *__s;
  uint64_t input[3];

  __n = 0;
  __s = 0;
  v10 = 3758097090;
  v14 = 0;
  if ((a2 || !a3) && a4 && a5)
  {
    v11 = sub_10009957C();
    if (v11)
    {
      v12 = v11;
      if (!sub_1000A9FEC(&v14, (uint64_t)off_1000DFB10, *(_QWORD *)(a5 + 8), *(_QWORD *)(a5 + 16))
        && !sub_1000A9FEC(&v14, (uint64_t)off_1000DFB08, a4, 32)
        && !sub_1000AA3A8(&v14, (uint64_t)off_1000DFB18, *(unsigned int *)(a5 + 4))
        && !sub_1000AA3A8(&v14, (uint64_t)off_1000DFB20, *(unsigned int *)(a5 + 24))
        && (a3 < 1 || !sub_1000A9FEC(&v14, (uint64_t)off_1000DF7D8, a2, a3))
        && !sub_1000AA8CC(&v14)
        && !sub_1000A9CAC(&v14, &__s, &__n))
      {
        input[0] = a1;
        input[1] = (uint64_t)__s;
        input[2] = __n;
        v10 = IOConnectCallMethod(v12, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_set_prederived_configuration", ":", 218, "", 0, "", "");
      v10 = 3758097084;
    }
  }
  sub_1000A95DC(&v14);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v10;
}

uint64_t sub_10009D0EC(int a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  mach_port_t v6;
  mach_port_t v7;
  CFMutableDictionaryRef Mutable;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  void *v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  void **v18;
  size_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  void *v26;
  __int128 v27;
  __int128 v28;
  uint64_t input;
  _BYTE outputStruct[32768];

  if (!a2)
    return 0;
  result = (uint64_t)calloc(0x20uLL, 1uLL);
  if (!result)
    return result;
  v5 = result;
  *(_DWORD *)result = 1634431856;
  v6 = sub_10009957C();
  if (!v6)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_prederived_configuration", ":", 384, "", 0, "", "");
LABEL_16:
    sub_10009CBE8((void **)v5);
    return 0;
  }
  v7 = v6;
  bzero(outputStruct, 0x8000uLL);
  v19 = 0x8000;
  input = a1;
  if (IOConnectCallMethod(v7, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, &v19) || v19 > 0x8000)
    goto LABEL_16;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  v9 = &outputStruct[v19];
  v22 = 0u;
  v24 = 0u;
  v25 = 0;
  v21 = 0u;
  v27 = 0u;
  v28 = 0u;
  v20 = off_1000DFB10;
  v23 = (unint64_t)off_1000DFB18;
  v26 = off_1000DFB20;
  v16 = xmmword_1000B2480;
  v17 = 0;
  v18 = &v20;
  sub_1000A90D0((uint64_t)outputStruct, (uint64_t)&outputStruct[v19], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A8F08, (uint64_t)&v16);
  v10 = *((_QWORD *)&v23 + 1);
  v11 = v27;
  v12 = ccder_decode_tl(4, v5 + 16, v21, v9);
  if (v12)
  {
    v13 = (const void *)v12;
    v14 = calloc(*(_QWORD *)(v5 + 16), 1uLL);
    *(_QWORD *)(v5 + 8) = v14;
    if (!v14)
    {
      v15 = 0;
      if (!Mutable)
        goto LABEL_11;
      goto LABEL_10;
    }
    memcpy(v14, v13, *(_QWORD *)(v5 + 16));
    *(_DWORD *)(v5 + 4) = sub_1000A92E8(v10, (uint64_t)v9);
    *(_DWORD *)(v5 + 24) = sub_1000A92E8(v11, (uint64_t)v9);
  }
  v15 = 1;
  if (Mutable)
LABEL_10:
    CFRelease(Mutable);
LABEL_11:
  if (!v15 || !*(_QWORD *)(v5 + 16))
    goto LABEL_16;
  *a2 = v5;
  return 1;
}

uint64_t sub_10009D3AC(int a1, uint64_t a2, int a3, _DWORD *a4)
{
  BOOL v4;
  BOOL v5;
  uint64_t v7;
  _OWORD v9[2];

  memset(v9, 0, sizeof(v9));
  if (a3)
    v4 = a2 == 0;
  else
    v4 = 0;
  v5 = v4 || a4 == 0;
  if (v5 || *a4 != 1634431856 || sub_10009CE24((uint64_t)a4, a2, a3, (uint64_t)v9))
    v7 = 0xFFFFFFFFLL;
  else
    v7 = sub_10009D474(a1, (uint64_t)v9, 32);
  memset_s(v9, 0x20uLL, 0, 0x20uLL);
  return v7;
}

uint64_t sub_10009D474(int a1, uint64_t a2, int a3)
{
  mach_port_t v6;
  uint64_t input[3];

  v6 = sub_10009957C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    return IOConnectCallMethod(v6, 0xCu, input, 3u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_bag", ":", 807, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009D570(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t *a6)
{
  uint64_t v7;
  int v11;
  void **v12;
  int v13;
  uint64_t v14;
  void **v16;
  _OWORD v17[2];
  _OWORD __s[2];

  memset(__s, 0, sizeof(__s));
  memset(v17, 0, sizeof(v17));
  v16 = 0;
  if (!a6)
    goto LABEL_17;
  v7 = *a6;
  if (!*a6 || *(_DWORD *)v7 != 1634431856 || !a2 && a3)
    goto LABEL_17;
  if (!a4 && a5 || sub_10009CE24(*a6, a2, a3, (uint64_t)__s))
    goto LABEL_17;
  v11 = sub_10009CD44(*(_DWORD *)(v7 + 24), &v16);
  v12 = v16;
  if (v11 || (v13 = sub_10009CE24((uint64_t)v16, a4, a5, (uint64_t)v17), v12 = v16, v13))
  {
LABEL_15:
    if (v12)
      sub_10009CBE8(v12);
LABEL_17:
    v14 = 0xFFFFFFFFLL;
    goto LABEL_13;
  }
  if (sub_10009CEC4(a1, (uint64_t)__s, 32, (uint64_t)v17, (uint64_t)v16))
  {
    v12 = v16;
    goto LABEL_15;
  }
  sub_10009CBE8((void **)v7);
  v14 = 0;
  *a6 = (uint64_t)v16;
LABEL_13:
  memset_s(__s, 0x20uLL, 0, 0x20uLL);
  memset_s(v17, 0x20uLL, 0, 0x20uLL);
  return v14;
}

uint64_t sub_10009D6D0(uint64_t a1, int a2, unsigned int a3, _DWORD *a4)
{
  return sub_10009D6E8(a1, a2, 0, 0, a3, -1, a4);
}

uint64_t sub_10009D6E8(uint64_t a1, int a2, uint64_t a3, int a4, unsigned int a5, int a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t v15;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[6];

  v14 = 3758097084;
  v15 = sub_10009957C();
  if (v15)
  {
    if (a7)
    {
      input[0] = a5;
      input[1] = a6;
      input[2] = a1;
      input[3] = a2;
      input[4] = a3;
      input[5] = a4;
      output = 0;
      outputCnt = 1;
      v14 = IOConnectCallMethod(v15, 2u, input, 6u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v14)
        *a7 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_create_bag", ":", 187, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_10009D83C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_10009D6E8(a1, a2, 0, 0, 2u, a3, a4);
}

uint64_t sub_10009D854(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_10009D6E8(a3, a4, a1, a2, 2u, a5, a6);
}

uint64_t sub_10009D87C(uint64_t a1, int a2, int a3, _DWORD *a4)
{
  return sub_10009D6E8(a1, a2, 0, 0, 0x8000002u, a3, a4);
}

uint64_t sub_10009D898(uint64_t a1, int a2, uint64_t a3, int a4, int a5, _DWORD *a6)
{
  return sub_10009D6E8(a3, a4, a1, a2, 0x8000002u, a5, a6);
}

uint64_t sub_10009D8C4()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x42u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_sync_bags", ":", 544, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_10009D968(const void *a1, int a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t input[3];

  v10 = 3758097084;
  v11 = sub_10009957C();
  if (v11)
  {
    if (a1)
    {
      input[0] = a5;
      input[1] = a3;
      input[2] = a4;
      return IOConnectCallMethod(v11, 0x43u, input, 3u, a1, a2, 0, 0, 0, 0);
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_with_sync_bag", ":", 557, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_10009DA88(const void *a1, int a2, _DWORD *a3)
{
  uint64_t v6;
  mach_port_t v7;
  uint32_t outputCnt;
  uint64_t output;

  v6 = 3758097084;
  v7 = sub_10009957C();
  if (v7)
  {
    v6 = 3758097090;
    if (a1)
    {
      if (a3)
      {
        output = 0;
        outputCnt = 1;
        v6 = IOConnectCallMethod(v7, 6u, 0, 0, a1, a2, &output, &outputCnt, 0, 0);
        if (!(_DWORD)v6)
          *a3 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_load_bag", ":", 574, "", 0, "", "");
  }
  return v6;
}

uint64_t sub_10009DBA0(const void *a1, int a2)
{
  uint64_t v4;
  mach_port_t v5;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a1)
      return IOConnectCallMethod(v5, 0x57u, 0, 0, a1, a2, 0, 0, 0, 0);
    return 3758097090;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_invalidate_bag", ":", 596, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009DC6C(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 4u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_bag", ":", 612, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009DD50(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x37u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unload_session_bags", ":", 629, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009DE34(int a1, _QWORD *a2, _DWORD *a3)
{
  mach_port_t v6;
  mach_port_t v7;
  uint64_t result;
  void *v9;
  size_t __count;
  uint64_t input;
  _BYTE __src[32768];

  v6 = sub_10009957C();
  if (v6)
  {
    v7 = v6;
    result = 3758097090;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input = a1;
        result = IOConnectCallMethod(v7, 3u, &input, 1u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          v9 = calloc(__count, 1uLL);
          *a2 = v9;
          if (v9)
          {
            memcpy(v9, __src, __count);
            result = 0;
            *a3 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_save_bag", ":", 646, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10009DFBC(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, unsigned int a12, _DWORD *a13)
{
  mach_port_t v21;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[12];

  v21 = sub_10009957C();
  if (v21)
  {
    input[0] = a1;
    input[1] = a11;
    input[2] = a10;
    input[3] = a2;
    input[4] = a3;
    input[5] = a4;
    input[6] = a5;
    input[7] = a6;
    input[8] = a7;
    input[9] = a8;
    input[10] = a9;
    input[11] = a12;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(v21, 0xFu, input, 0xCu, 0, 0, &output, &outputCnt, 0, 0);
    if (a13)
    {
      if (!(_DWORD)result)
        *a13 = output;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_opts", ":", 678, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_10009E12C(int a1, uint64_t a2, int a3, uint64_t a4, int a5, uint64_t a6, int a7, uint64_t a8, int a9, unsigned __int8 a10, unsigned int a11, _DWORD *a12)
{
  return sub_10009DFBC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, 0, a12);
}

uint64_t sub_10009E150(int a1, uint64_t a2, int a3, uint64_t a4, int a5, unsigned int a6, _DWORD *a7)
{
  return sub_10009DFBC(a1, a2, a3, a4, a5, 0, 0, 0, 0, 0xFFu, a6, 0, a7);
}

uint64_t sub_10009E18C(int a1, _OWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  size_t v7;
  uint64_t input;
  __int128 outputStruct;

  v4 = 3758097084;
  v7 = 16;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      outputStruct = 0uLL;
      input = a1;
      v4 = IOConnectCallMethod(v5, 0x17u, &input, 1u, 0, 0, 0, 0, &outputStruct, &v7);
      if (!(_DWORD)v4)
        *a2 = outputStruct;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_bag_uuid", ":", 729, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009E2B0(int a1, _QWORD *a2, size_t *a3)
{
  return sub_10009E2C4(a1, (uint64_t)&unk_1000B24D0, a2, a3);
}

uint64_t sub_10009E2C4(int a1, uint64_t a2, _QWORD *a3, size_t *a4)
{
  mach_port_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  void *v17;
  unsigned int inputStructCnt[3];
  size_t __count;
  uint64_t input;
  _OWORD __src[2];
  __int16 v23;

  v23 = 0;
  memset(__src, 0, sizeof(__src));
  __count = 34;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v8 = sub_10009957C();
  if (v8)
  {
    v14 = 3758097090;
    if (a3 && a4)
    {
      v15 = v8;
      input = a1;
      sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 1, v9, v10, v11, v12, v13, a2);
      if (*(_QWORD *)&inputStructCnt[1])
      {
        v16 = IOConnectCallMethod(v15, 0x44u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if ((_DWORD)v16)
        {
          v14 = v16;
        }
        else
        {
          v17 = calloc(__count, 1uLL);
          *a3 = v17;
          v14 = 3758097085;
          if (v17)
          {
            memcpy(v17, __src, __count);
            v14 = 0;
            *a4 = __count;
          }
        }
      }
      else
      {
        v14 = 3758097085;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_copy_volume_cookie_persona", ":", 760, "", 0, "", "");
    v14 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v14;
}

uint64_t sub_10009E470(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0xDu, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_bag", ":", 790, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009E554(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 7u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_lock_state", ":", 824, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009E66C(const void *a1, int a2, int a3, int a4, void *a5, int *a6, _DWORD *a7)
{
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  size_t v18;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  v14 = 3758097084;
  v15 = sub_10009957C();
  if (v15)
  {
    v14 = 3758097090;
    if (a1 && a5 && a6)
    {
      input[0] = a4;
      input[1] = a3;
      output = 0;
      outputCnt = 1;
      v18 = *a6;
      v16 = IOConnectCallMethod(v15, 0xAu, input, 2u, a1, a2, &output, &outputCnt, a5, &v18);
      if ((_DWORD)v16)
      {
        return v16;
      }
      else
      {
        *a6 = v18;
        v14 = 0;
        if (a7)
          *a7 = output;
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_wrap_key", ":", 848, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_10009E7D4(const void *a1, int a2, int a3, int a4, void *a5, int *a6)
{
  uint64_t v12;
  mach_port_t v13;
  size_t v15;
  uint64_t input[2];

  v12 = 3758097084;
  v13 = sub_10009957C();
  if (v13)
  {
    v12 = 3758097090;
    if (a1)
    {
      if (a5)
      {
        if (a6)
        {
          input[0] = a4;
          input[1] = a3;
          v15 = *a6;
          v12 = IOConnectCallMethod(v13, 0xBu, input, 2u, a1, a2, 0, 0, a5, &v15);
          if (!(_DWORD)v12)
            *a6 = v15;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unwrap_key", ":", 877, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_10009E918(const void *a1, int a2, int a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v14;
  mach_port_t v15;
  size_t v17;
  uint64_t input[4];

  v14 = 3758097084;
  v15 = sub_10009957C();
  if (v15)
  {
    v14 = 3758097090;
    if (a1 && a7)
    {
      input[0] = a3;
      input[1] = a4;
      input[2] = a5;
      input[3] = a6;
      v17 = 108;
      return IOConnectCallMethod(v15, 0x18u, input, 4u, a1, a2, 0, 0, a7, &v17);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_rewrap_key_for_backup", ":", 901, "", 0, "", "");
  }
  return v14;
}

uint64_t sub_10009EA58(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 0xEu, &input, a1 != 0, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_system", ":", 922, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009EB74(int a1, int a2, uint64_t a3, int a4)
{
  mach_port_t v8;
  uint64_t input[4];

  v8 = sub_10009957C();
  if (v8)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    return IOConnectCallMethod(v8, 5u, input, 4u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_system_with_passcode", ":", 950, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_10009EC78(int a1, int a2)
{
  return sub_10009EB74(a1, a2, 0, 0);
}

uint64_t sub_10009EC84(int a1, uint64_t a2, unsigned int a3)
{
  return sub_10009ECA4(a1, a2, a3);
}

uint64_t sub_10009EC98(int a1, uint64_t a2, unsigned int a3)
{
  return sub_10009ECA4(a1, a2, a3);
}

uint64_t sub_10009ECA4(int a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  mach_port_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  mach_port_t v13;
  void *v14;
  unsigned int inputStructCnt[3];
  uint64_t input[2];

  v6 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v7 = sub_10009957C();
  if (v7)
  {
    v13 = v7;
    input[0] = a1;
    input[1] = a3;
    sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 3, v8, v9, v10, v11, v12, a2);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v6 = IOConnectCallMethod(v13, 0x41u, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      v14 = *(void **)&inputStructCnt[1];
    }
    else
    {
      v14 = 0;
      v6 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_keybag_for_volume_with_cookie_persona", ":", 987, "", 0, "", "");
    v14 = 0;
  }
  free(v14);
  return v6;
}

uint64_t sub_10009EE0C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, size_t *a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  uint64_t v18;
  void *v19;
  size_t __count;
  unsigned int inputStructCnt[3];
  uint64_t input[2];
  _BYTE __src[32768];

  v10 = 3758097085;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v11 = sub_10009957C();
  if (v11)
  {
    v17 = v11;
    input[0] = a2;
    input[1] = a3;
    sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a1);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v18 = IOConnectCallMethod(v17, 0x6Eu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if ((_DWORD)v18)
      {
        v10 = v18;
      }
      else
      {
        v19 = calloc(__count, 1uLL);
        *a4 = v19;
        if (v19)
        {
          memcpy(v19, __src, __count);
          v10 = 0;
          *a5 = __count;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_enable_volume", ":", 1014, "", 0, "", "");
    v10 = 3758097084;
  }
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_10009EFBC(uint64_t a1)
{
  uint64_t v2;
  mach_port_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  mach_port_t v9;
  char *v10;
  int v12;
  char *v13;

  v2 = 3758097084;
  v13 = 0;
  v12 = 0;
  v3 = sub_10009957C();
  if (v3)
  {
    v9 = v3;
    sub_1000ACC6C(&v13, (unsigned int *)&v12, 1, v4, v5, v6, v7, v8, a1);
    if (v13)
    {
      v2 = IOConnectCallMethod(v9, 0x6Fu, 0, 0, v13, v12, 0, 0, 0, 0);
      v10 = v13;
    }
    else
    {
      v10 = 0;
      v2 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_disable_volume", ":", 1044, "", 0, "", "");
    v10 = 0;
  }
  free(v10);
  return v2;
}

uint64_t sub_10009F0C0(uint64_t a1, void *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mach_port_t v11;
  char *v12;
  size_t v14;
  int v15;
  char *v16;

  v4 = 3758097084;
  v16 = 0;
  v15 = 0;
  v14 = 16;
  v5 = sub_10009957C();
  if (v5)
  {
    v11 = v5;
    sub_1000ACC6C(&v16, (unsigned int *)&v15, 1, v6, v7, v8, v9, v10, a1);
    if (v16)
    {
      v4 = IOConnectCallMethod(v11, 0x70u, 0, 0, v16, v15, 0, 0, a2, &v14);
      v12 = v16;
    }
    else
    {
      v12 = 0;
      v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_copy_current_bag_uuid", ":", 1066, "", 0, "", "");
    v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_10009F1D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, unsigned int a6, void *a7)
{
  uint64_t v13;
  mach_port_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  mach_port_t v20;
  void *v21;
  size_t v23;
  unsigned int inputStructCnt[3];
  uint64_t input[3];

  v13 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v14 = sub_10009957C();
  if (v14)
  {
    v20 = v14;
    v21 = 0;
    v13 = 3758097090;
    if (a2 && a7)
    {
      input[0] = a4;
      input[1] = a5;
      input[2] = a6;
      sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, v15, v16, v17, v18, v19, a1);
      v23 = 108;
      v13 = IOConnectCallMethod(v20, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, a7, &v23);
      v21 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_key", ":", 1087, "", 0, "", "");
    v21 = 0;
  }
  free(v21);
  return v13;
}

uint64_t sub_10009F354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, unsigned int a8, void *outputStruct)
{
  uint64_t v15;
  mach_port_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  mach_port_t v22;
  void *v23;
  size_t v25;
  unsigned int inputStructCnt[3];
  uint64_t input[3];

  v15 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v16 = sub_10009957C();
  if (v16)
  {
    v22 = v16;
    v23 = 0;
    v15 = 3758097090;
    if (a2 && a4 && outputStruct)
    {
      input[0] = a6;
      input[1] = a7;
      input[2] = a8;
      sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 3, v17, v18, v19, v20, v21, a1);
      v25 = 108;
      v15 = IOConnectCallMethod(v22, 0x71u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, outputStruct, &v25);
      v23 = *(void **)&inputStructCnt[1];
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_backup_rewrap_ek", ":", 1113, "", 0, "", "");
    v23 = 0;
  }
  free(v23);
  return v15;
}

uint64_t sub_10009F4E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _OWORD v13[5];
  uint64_t v14;
  __int128 __s;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v17 = 0u;
  v18 = 0u;
  __s = 0u;
  v16 = 0u;
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  v8 = sub_10009C1F4(a1, a2, v13);
  if ((_DWORD)v8)
  {
    v9 = v8;
  }
  else
  {
    v9 = sub_10009C404((uint64_t)v13, a3, a4, (uint64_t)&__s);
    if (!(_DWORD)v9)
    {
      v10 = v16;
      *a5 = __s;
      a5[1] = v10;
      v11 = v18;
      a5[2] = v17;
      a5[3] = v11;
    }
  }
  memset_s(v13, 0x58uLL, 0, 0x58uLL);
  memset_s(&__s, 0x40uLL, 0, 0x40uLL);
  return sub_1000A83C4(v9);
}

uint64_t sub_10009F5D4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v4;
  _OWORD v6[5];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  v4 = sub_10009C1F4(a1, a2, v6);
  if (!(_DWORD)v4)
    uuid_copy(a3, (const unsigned __int8 *)v6 + 8);
  memset_s(v6, 0x58uLL, 0, 0x58uLL);
  return sub_1000A83C4(v4);
}

uint64_t sub_10009F67C(__int128 *a1, _QWORD *a2, unsigned int a3, _QWORD *a4, _QWORD *a5)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  unsigned int v10;
  int __s;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v6 = a1[1];
  v12 = *a1;
  v13 = v6;
  v7 = a1[3];
  v14 = a1[2];
  v15 = v7;
  v10 = *a5;
  __s = 1;
  v8 = sub_1000A89F0((uint64_t)&__s, 0, 0, a2, a3, a4, &v10);
  *a5 = v10;
  memset_s(&__s, 0x44uLL, 0, 0x44uLL);
  return sub_1000A83C4(v8);
}

uint64_t sub_10009F738(uint64_t a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t input[2];

  v10 = 3758097084;
  v11 = sub_10009957C();
  if (v11)
  {
    v10 = 3758097090;
    if (a2 && a4)
    {
      input[0] = a1;
      input[1] = 64;
      return IOConnectCallMethod(v11, 0x82u, input, 2u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_unwrap_key", ":", 1193, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_10009F850(int a1, const void *a2, size_t a3, void *a4, size_t *a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t input;

  v10 = 3758097084;
  v11 = sub_10009957C();
  if (v11)
  {
    v10 = 3758097090;
    if (a2 && a4)
    {
      input = a1;
      return IOConnectCallMethod(v11, 0x81u, &input, 1u, a2, a3, 0, 0, a4, a5);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_wrap_key", ":", 1212, "", 0, "", "");
  }
  return v10;
}

uint64_t sub_10009F968(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 0x83u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_handle", ":", 1231, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009FA80(int a1, unsigned __int8 *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint64_t v6;
  size_t v8;
  unsigned __int8 src[8];
  uint64_t v10;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      v10 = 0;
      input = a1;
      v8 = 16;
      *(_QWORD *)src = 0;
      v6 = IOConnectCallMethod(v5, 0x84u, &input, 1u, 0, 0, 0, 0, src, &v8);
      if ((_DWORD)v6)
      {
        return v6;
      }
      else if (v8 == 16)
      {
        uuid_copy(a2, src);
        return 0;
      }
      else
      {
        return 3758604298;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_kc_backup_get_uuid", ":", 1253, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_10009FBC4(const void *a1, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, _OWORD *a6)
{
  int v7;
  int v9;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  void **v17;

  v17 = 0;
  if (a5)
  {
    v7 = a4;
    v9 = a2;
    *a5 = -1;
    v11 = sub_10009F4E8((uint64_t)a1, a2, a3, a4, a6);
    if (!v11)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Unwrapped DER backup bag%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1302, "", 0, "", "");
      v15 = 0;
      goto LABEL_9;
    }
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unwrap backup bag as DER: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1290, "", 0, "", v11, "");
    v12 = sub_10009DA88(a1, v9, a5);
    if ((_DWORD)v12)
    {
      v15 = v12;
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to load in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":", 1292, "", 0, "", v12, "");
    }
    else
    {
      v13 = sub_10009D0EC(*a5, (uint64_t *)&v17);
      v14 = *a5;
      if (v13)
      {
        v15 = sub_10009D3AC(v14, a3, v7, v17);
        if (!(_DWORD)v15)
          goto LABEL_9;
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag with prederived secret: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
      else
      {
        v15 = sub_10009D474(v14, a3, v7);
        if (!(_DWORD)v15)
          goto LABEL_9;
        fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s Failed to unlock in-kernel backup bag: 0x%08x%s\n", "aks", "", "", "", "aks_kc_backup_open_keybag", ":");
      }
    }
  }
  else
  {
    v15 = 3758097090;
  }
  if (*a5 != -1)
  {
    sub_10009DC6C(*a5);
    *a5 = -1;
  }
LABEL_9:
  sub_10009CBE8(v17);
  return v15;
}

uint64_t sub_10009FDF0(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  mach_port_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  char *v16;
  int v18;
  char *v19;
  uint64_t input[3];

  v8 = 3758097084;
  v19 = 0;
  v18 = 0;
  v9 = sub_10009957C();
  if (v9)
  {
    v15 = v9;
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    sub_1000ACC6C(&v19, (unsigned int *)&v18, 1, v10, v11, v12, v13, v14, a4);
    if (v19)
    {
      v8 = IOConnectCallMethod(v15, 0x60u, input, 3u, v19, v18, 0, 0, 0, 0);
      v16 = v19;
    }
    else
    {
      v16 = 0;
      v8 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create", ":", 1324, "", 0, "", "");
    v16 = 0;
  }
  free(v16);
  return v8;
}

uint64_t sub_10009FF40(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  void *v18;
  unsigned int inputStructCnt[3];
  uint64_t input[4];

  v10 = 3758097084;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v11 = sub_10009957C();
  if (v11)
  {
    v17 = v11;
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a5;
    sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 1, v12, v13, v14, v15, v16, a4);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v10 = IOConnectCallMethod(v17, 0x75u, input, 4u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, 0, 0);
      v18 = *(void **)&inputStructCnt[1];
    }
    else
    {
      v18 = 0;
      v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_create_with_flags", ":", 1346, "", 0, "", "");
    v18 = 0;
  }
  free(v18);
  return v10;
}

uint64_t sub_1000A00A0(int a1, _QWORD *a2, size_t *a3)
{
  uint64_t v6;
  mach_port_t v7;
  uint64_t v8;
  void *v9;
  size_t v10;
  size_t __count;
  uint64_t input;
  _BYTE __src[8192];

  bzero(__src, 0x2000uLL);
  __count = 0x2000;
  input = a1;
  v6 = 3758097090;
  if (a2 && a3)
  {
    v7 = sub_10009957C();
    if (v7)
    {
      v8 = IOConnectCallMethod(v7, 0x61u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      if ((_DWORD)v8)
      {
        v6 = v8;
      }
      else
      {
        if (__count)
        {
          v9 = calloc(__count, 1uLL);
          *a2 = v9;
          if (!v9)
          {
            v6 = 3758097085;
            goto LABEL_10;
          }
          memcpy(v9, __src, __count);
          v10 = __count;
        }
        else
        {
          v10 = 0;
          *a2 = 0;
        }
        v6 = 0;
        *a3 = v10;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_list", ":", 1372, "", 0, "", "");
      v6 = 3758097084;
    }
  }
LABEL_10:
  memset_s(__src, 0x2000uLL, 0, 0x2000uLL);
  return v6;
}

uint64_t sub_1000A0248(int a1, uint64_t a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  mach_port_t v11;
  char *v12;
  int v14;
  char *v15;
  uint64_t input;

  v4 = 3758097084;
  v15 = 0;
  v14 = 0;
  v5 = sub_10009957C();
  if (v5)
  {
    v11 = v5;
    input = a1;
    sub_1000ACC6C(&v15, (unsigned int *)&v14, 1, v6, v7, v8, v9, v10, a2);
    if (v15)
    {
      v4 = IOConnectCallMethod(v11, 0x62u, &input, 1u, v15, v14, 0, 0, 0, 0);
      v12 = v15;
    }
    else
    {
      v12 = 0;
      v4 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_keybag_persona_delete", ":", 1394, "", 0, "", "");
    v12 = 0;
  }
  free(v12);
  return v4;
}

uint64_t sub_1000A0384(int a1, uint64_t a2, int a3, unsigned int a4, void *a5, size_t *a6)
{
  uint64_t v12;
  mach_port_t v13;
  uint64_t input[4];

  v12 = 3758097084;
  v13 = sub_10009957C();
  if (v13)
  {
    v12 = 3758097090;
    if (a5 && a6)
    {
      input[0] = a1;
      input[1] = a4;
      input[2] = a2;
      input[3] = a3;
      return IOConnectCallMethod(v13, 0x26u, input, 4u, 0, 0, 0, 0, a5, a6);
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_auth_token_create", ":", 1415, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A04B4(int a1, uint64_t a2, int a3, const __CFDictionary *a4)
{
  uint64_t v8;
  mach_port_t v9;
  mach_port_t v10;
  CFTypeID TypeID;
  CFTypeID v12;
  CFTypeID v13;
  CFTypeID v14;
  CFTypeID v15;
  CFTypeID v16;
  CFTypeID v17;
  CFTypeID v18;
  CFTypeID v19;
  void *v21;
  rsize_t __n;
  void *__s;
  uint64_t input[3];

  __n = 0;
  __s = 0;
  v8 = 3758097090;
  v21 = 0;
  v9 = sub_10009957C();
  if (v9)
  {
    v10 = v9;
    TypeID = CFNumberGetTypeID();
    if (!sub_1000A07EC(a4, CFSTR("GracePeriod"), TypeID, (uint64_t)off_1000DF930, &v21))
    {
      v12 = CFNumberGetTypeID();
      if (!sub_1000A07EC(a4, CFSTR("BackOffDelay"), v12, (uint64_t)off_1000DF938, &v21))
      {
        v13 = CFNumberGetTypeID();
        if (!sub_1000A07EC(a4, CFSTR("MaxUnlockAttempts"), v13, (uint64_t)off_1000DF940, &v21))
        {
          v14 = CFNumberGetTypeID();
          if (!sub_1000A07EC(a4, CFSTR("EscrowPasscodePeriod"), v14, (uint64_t)off_1000DF948, &v21))
          {
            v15 = CFNumberGetTypeID();
            if (!sub_1000A07EC(a4, CFSTR("EscrowTokenPeriod"), v15, (uint64_t)off_1000DF950, &v21))
            {
              v16 = CFDataGetTypeID();
              if (!sub_1000A07EC(a4, CFSTR("UserUUID"), v16, (uint64_t)off_1000DFB38, &v21))
              {
                v17 = CFDataGetTypeID();
                if (!sub_1000A07EC(a4, CFSTR("BindKEKToKB"), v17, (uint64_t)off_1000DFB78, &v21))
                {
                  v18 = CFBooleanGetTypeID();
                  if (!sub_1000A07EC(a4, CFSTR("InactivityRebootEnabled"), v18, (uint64_t)off_1000DFD50, &v21))
                  {
                    v19 = CFBooleanGetTypeID();
                    if (!sub_1000A07EC(a4, CFSTR("OnenessAutomaticMode"), v19, (uint64_t)off_1000DFD58, &v21)&& !sub_1000AA8CC(&v21)&& (!a2 || !sub_1000A9FEC(&v21, (uint64_t)off_1000DF7D8, a2, a3))&& !sub_1000A9CAC(&v21, &__s, &__n))
                    {
                      input[0] = a1;
                      input[1] = (uint64_t)__s;
                      input[2] = __n;
                      v8 = IOConnectCallMethod(v10, 0x1Eu, input, 3u, 0, 0, 0, 0, 0, 0);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_configuration", ":", 1488, "", 0, "", "");
    v8 = 3758097084;
  }
  sub_1000A95DC(&v21);
  if (__s)
  {
    memset_s(__s, __n, 0, __n);
    free(__s);
  }
  return v8;
}

uint64_t sub_1000A07EC(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t result;
  _BOOL4 v9;
  const UInt8 *BytePtr;
  CFIndex Length;
  uint64_t v12;
  void *value;

  value = 0;
  result = CFDictionaryGetValueIfPresent(a1, a2, (const void **)&value);
  if ((_DWORD)result)
  {
    if (CFGetTypeID(value) == a3)
    {
      if (CFNumberGetTypeID() == a3)
      {
        v12 = 0;
        if (!CFNumberGetValue((CFNumberRef)value, kCFNumberSInt64Type, &v12)
          || sub_1000AA3A8(a5, a4, v12))
        {
          return 0xFFFFFFFFLL;
        }
        return 0;
      }
      if (CFBooleanGetTypeID() == a3)
      {
        v9 = CFBooleanGetValue((CFBooleanRef)value) != 0;
        if (sub_1000AA244(a5, a4, v9))
          return 0xFFFFFFFFLL;
      }
      else
      {
        if (CFDataGetTypeID() != a3)
          return 0xFFFFFFFFLL;
        BytePtr = CFDataGetBytePtr((CFDataRef)value);
        Length = CFDataGetLength((CFDataRef)value);
        if (sub_1000A9FEC(a5, a4, (uint64_t)BytePtr, Length))
          return 0xFFFFFFFFLL;
      }
      return 0;
    }
    return 0xFFFFFFFFLL;
  }
  return result;
}

uint64_t sub_1000A08F0(int a1, __CFDictionary **a2)
{
  uint64_t v4;
  mach_port_t v5;
  mach_port_t v6;
  uint64_t v7;
  __CFDictionary *Mutable;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  CFTypeID TypeID;
  CFTypeID v19;
  CFTypeID v20;
  CFTypeID v21;
  CFTypeID v22;
  CFTypeID v23;
  CFTypeID v24;
  CFTypeID v25;
  CFTypeID v26;
  CFTypeID v27;
  CFTypeID v28;
  CFTypeID v29;
  CFTypeID v30;
  CFTypeID v31;
  CFTypeID v32;
  char v33;
  CFBooleanRef v34;
  CFBooleanRef v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __CFDictionary **v44;
  __int128 v45;
  uint64_t v46;
  void **v47;
  size_t v48;
  void *v49;
  _QWORD v50[74];
  uint64_t input;
  _BYTE outputStruct[32768];

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      v6 = v5;
      bzero(outputStruct, 0x8000uLL);
      v48 = 0x8000;
      input = a1;
      v7 = IOConnectCallMethod(v6, 0x1Fu, &input, 1u, 0, 0, 0, 0, outputStruct, &v48);
      if ((_DWORD)v7)
      {
        return v7;
      }
      else if (v48 > 0x8000)
      {
        return 3758604298;
      }
      else
      {
        Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        v9 = &outputStruct[v48];
        bzero(v50, 0x250uLL);
        v49 = off_1000DF930;
        v50[4] = off_1000DF938;
        v50[9] = off_1000DF940;
        v50[14] = off_1000DF948;
        v50[19] = off_1000DF950;
        v50[24] = off_1000DF958;
        v50[29] = off_1000DFB38;
        v50[34] = off_1000DFB70;
        v50[39] = off_1000DFB80;
        v50[44] = off_1000DFB88;
        v50[49] = off_1000DFB90;
        v50[54] = off_1000DFD10;
        v50[59] = off_1000DFD18;
        v50[64] = off_1000DFD48;
        v50[69] = off_1000DFD40;
        v45 = xmmword_1000B2490;
        v46 = 0;
        v47 = &v49;
        sub_1000A90D0((uint64_t)outputStruct, (uint64_t)v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A8F08, (uint64_t)&v45);
        v10 = v50[0];
        v11 = v50[5];
        v12 = v50[10];
        v13 = v50[15];
        v14 = v50[20];
        v15 = v50[25];
        v16 = v50[30];
        v44 = a2;
        v17 = v50[35];
        v37 = v50[40];
        v38 = v50[45];
        v39 = v50[50];
        v40 = v50[55];
        v41 = v50[60];
        v42 = v50[65];
        v43 = v50[70];
        TypeID = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("GracePeriod"), TypeID, v10, (uint64_t)v9);
        v19 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("BackOffDelay"), v19, v11, (uint64_t)v9);
        v20 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("MaxUnlockAttempts"), v20, v12, (uint64_t)v9);
        v21 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("EscrowPasscodePeriod"), v21, v13, (uint64_t)v9);
        v22 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("EscrowTokenPeriod"), v22, v14, (uint64_t)v9);
        v23 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("ConfigFlags"), v23, v15, (uint64_t)v9);
        v24 = CFDataGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("UserUUID"), v24, v16, (uint64_t)v9);
        v25 = CFDataGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("GroupUUID"), v25, v17, (uint64_t)v9);
        v26 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("RecoveryIterations"), v26, v37, (uint64_t)v9);
        v27 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("RecoveryFlags"), v27, v38, (uint64_t)v9);
        v28 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("RecoveryTargetIterations"), v28, v39, (uint64_t)v9);
        v29 = CFBooleanGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("MementoSupported"), v29, v40, (uint64_t)v9);
        v30 = CFBooleanGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("MementoBlobExists"), v30, v41, (uint64_t)v9);
        v31 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("MementoPasscodeGeneration"), v31, v42, (uint64_t)v9);
        v32 = CFNumberGetTypeID();
        sub_1000A0E68(Mutable, CFSTR("PasscodeGeneration"), v32, v43, (uint64_t)v9);
        v33 = sub_1000A92E8(v15, (uint64_t)v9);
        if ((v33 & 2) != 0)
          v34 = kCFBooleanTrue;
        else
          v34 = kCFBooleanFalse;
        CFDictionarySetValue(Mutable, CFSTR("InactivityRebootEnabled"), v34);
        if ((v33 & 8) != 0)
          v35 = kCFBooleanTrue;
        else
          v35 = kCFBooleanFalse;
        CFDictionarySetValue(Mutable, CFSTR("OnenessAutomaticMode"), v35);
        v4 = 0;
        *v44 = Mutable;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_get_configuration", ":", 1556, "", 0, "", "");
  }
  return v4;
}

void sub_1000A0E68(__CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  CFNumberRef v10;
  _BOOL4 v11;
  const void **v12;
  const UInt8 *v13;
  CFNumberRef v14;
  CFIndex valuePtr;

  if (a4)
  {
    if (CFNumberGetTypeID() == a3)
    {
      valuePtr = sub_1000A92E8(a4, a5);
      v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
      if (!v10)
        return;
LABEL_12:
      v14 = v10;
      CFDictionaryAddValue(a1, a2, v10);
      CFRelease(v14);
      return;
    }
    if (CFBooleanGetTypeID() == a3)
    {
      v11 = sub_1000A9584(a4, a5);
      v12 = (const void **)&kCFBooleanTrue;
      if (!v11)
        v12 = (const void **)&kCFBooleanFalse;
      CFDictionaryAddValue(a1, a2, *v12);
    }
    else if (CFDataGetTypeID() == a3)
    {
      valuePtr = 0;
      v13 = (const UInt8 *)ccder_decode_tl(4, &valuePtr, a4, a5);
      if (v13)
      {
        v10 = CFDataCreate(kCFAllocatorDefault, v13, valuePtr);
        goto LABEL_12;
      }
    }
  }
}

uint64_t sub_1000A0F9C(int a1, unsigned int a2, uint64_t a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[0] = a2;
  input[1] = a3;
  input[2] = a1;
  v3 = sub_10009957C();
  if (v3)
    return IOConnectCallMethod(v3, 0x1Au, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_hold", ":", 1654, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A107C(int a1, unsigned int a2)
{
  mach_port_t v2;
  uint64_t input[2];

  input[0] = a2;
  input[1] = a1;
  v2 = sub_10009957C();
  if (v2)
    return IOConnectCallMethod(v2, 0x1Bu, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_drop", ":", 1672, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A1158(int a1, unsigned int a2)
{
  mach_port_t v4;
  uint64_t input[2];

  v4 = sub_10009957C();
  if (v4)
  {
    input[0] = a2;
    input[1] = a1;
    return IOConnectCallMethod(v4, 0x64u, input, 2u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_promote", ":", 1687, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A1244(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x91u, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_oneness_heartbeat", ":", 1707, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A131C(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x65u, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_assert_consume", ":", 1722, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A13F4(int a1, uint64_t a2)
{
  mach_port_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  mach_port_t v10;
  uint64_t v11;
  void *v12;
  int v14;
  void *v15;
  uint64_t input[3];

  v15 = 0;
  v14 = 0;
  v4 = sub_10009957C();
  if (v4)
  {
    v10 = v4;
    sub_1000ACC6C((char **)&v15, (unsigned int *)&v14, 3, v5, v6, v7, v8, v9, a2);
    input[0] = a1;
    input[1] = (uint64_t)v15;
    input[2] = v14;
    v11 = IOConnectCallMethod(v10, 0x12u, input, 3u, 0, 0, 0, 0, 0, 0);
    v12 = v15;
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_recover_with_escrow_bag", ":", 1739, "", 0, "", "");
    v12 = 0;
    v11 = 3758097084;
  }
  free(v12);
  return v11;
}

uint64_t sub_1000A1554(const void *a1, int a2, _QWORD *a3, _DWORD *a4)
{
  uint64_t v8;
  mach_port_t v9;
  uint64_t v10;
  void *v11;
  size_t __count;
  _BYTE __src[32768];

  v8 = 3758097090;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  v9 = sub_10009957C();
  if (v9)
  {
    if (a1 && a3 && a4)
    {
      v10 = IOConnectCallMethod(v9, 0x29u, 0, 0, a1, a2, 0, 0, __src, &__count);
      if ((_DWORD)v10)
      {
        v8 = v10;
      }
      else
      {
        v11 = calloc(__count, 1uLL);
        *a3 = v11;
        if (v11)
        {
          memcpy(v11, __src, __count);
          v8 = 0;
          *a4 = __count;
        }
        else
        {
          v8 = 3758097085;
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fdr_hmac_data", ":", 1758, "", 0, "", "");
    v8 = 3758097084;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  return v8;
}

uint64_t sub_1000A16F0(int a1, unsigned int a2, _DWORD *a3)
{
  mach_port_t v6;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input[2];

  v6 = sub_10009957C();
  if (v6)
  {
    input[0] = a1;
    input[1] = a2;
    output = 0;
    outputCnt = 1;
    result = IOConnectCallMethod(v6, 0x28u, input, 2u, 0, 0, &output, &outputCnt, 0, 0);
    if (a3)
    {
      if (!(_DWORD)result)
        *a3 = output;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_generation", ":", 1781, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A1804(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v9;
  mach_port_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  mach_port_t v16;
  const char *v17;
  void *v18;
  int v20;
  void *v21;
  uint64_t input[4];

  v9 = 3758097084;
  v21 = 0;
  v20 = 0;
  v10 = sub_10009957C();
  if (v10)
  {
    v16 = v10;
    if (a2)
      v17 = a2;
    else
      v17 = "";
    sub_1000ACC6C((char **)&v21, (unsigned int *)&v20, 2, v11, v12, v13, v14, v15, (uint64_t)v17);
    if (v21)
    {
      input[0] = a1;
      input[1] = a6;
      input[2] = (uint64_t)v21;
      input[3] = v20;
      v9 = IOConnectCallMethod(v16, 0x2Au, input, 4u, 0, 0, 0, 0, 0, 0);
      v18 = v21;
    }
    else
    {
      v18 = 0;
      v9 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_aks_verify_password", ":", 1807, "", 0, "", "");
    v18 = 0;
  }
  free(v18);
  return v9;
}

uint64_t sub_1000A198C(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A1804(a1, a2, a3, a4, a5, 0);
}

uint64_t sub_1000A1994(int a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1000A1804(a1, a2, a3, a4, a5, 1u);
}

uint64_t sub_1000A199C(mach_port_t a1, uintptr_t a2)
{
  io_connect_t v4;

  v4 = sub_10009957C();
  if (v4)
    return IOConnectSetNotificationPort(v4, 0, a1, a2);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_register_for_notifications", ":", 1840, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A1A44(int a1, int a2, _QWORD *a3, size_t *a4)
{
  uint64_t result;
  mach_port_t v7;
  void *v8;
  size_t __count;
  uint64_t input[2];
  _OWORD __src[16];

  __count = 256;
  input[0] = a1;
  input[1] = a2;
  result = 3758097090;
  if (a3 && a4)
  {
    v7 = sub_10009957C();
    if (v7)
    {
      memset(__src, 0, sizeof(__src));
      result = IOConnectCallMethod(v7, 0x31u, input, 2u, 0, 0, 0, 0, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x100)
        {
          return 3758604298;
        }
        else
        {
          v8 = calloc(__count, 1uLL);
          *a3 = v8;
          if (v8)
          {
            memcpy(v8, __src, __count);
            result = 0;
            *a4 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key", ":", 1859, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A1BD4(int a1, int a2, const void *a3, size_t a4, _QWORD *a5, size_t *a6)
{
  uint64_t result;
  mach_port_t v11;
  mach_port_t v12;
  void *v13;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];

  __count = 0x8000;
  input[0] = a1;
  input[1] = a2;
  result = 3758097090;
  if (a5 && a6)
  {
    v11 = sub_10009957C();
    if (v11)
    {
      v12 = v11;
      bzero(__src, 0x8000uLL);
      result = IOConnectCallMethod(v12, 0x31u, input, 2u, a3, a4, 0, 0, __src, &__count);
      if (!(_DWORD)result)
      {
        if (__count > 0x8000)
        {
          return 3758604298;
        }
        else
        {
          v13 = calloc(__count, 1uLL);
          *a5 = v13;
          if (v13)
          {
            memcpy(v13, __src, __count);
            result = 0;
            *a6 = __count;
          }
          else
          {
            return 3758097085;
          }
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_create_signing_key_with_params", ":", 1881, "", 0, "", "");
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A1D7C(int a1)
{
  return sub_1000A1D94(a1, 0x6Du, 0, 0, 0, 0);
}

uint64_t sub_1000A1D94(int a1, uint32_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, size_t *a6)
{
  mach_port_t v9;
  mach_port_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  size_t __count;
  uint64_t input[3];
  _BYTE __src[15360];

  __count = 15360;
  input[0] = a1;
  input[1] = a3;
  input[2] = a4;
  v9 = sub_10009957C();
  if (v9)
  {
    v10 = v9;
    bzero(__src, 0x3C00uLL);
    v11 = IOConnectCallMethod(v10, a2, input, 3u, 0, 0, 0, 0, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }
    else if (__count > 0x3C00)
    {
      return 3758604298;
    }
    else
    {
      v12 = 0;
      if (a5 && a6)
      {
        if (__count)
        {
          v13 = calloc(__count, 1uLL);
          *a5 = v13;
          if (!v13)
            return 3758097085;
          memcpy(v13, __src, __count);
          v14 = __count;
        }
        else
        {
          v14 = 0;
        }
        v12 = 0;
        *a6 = v14;
      }
    }
  }
  else
  {
    v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "remote_session_operate", ":", 2017, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A1F4C(int a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, _QWORD *a8, size_t *a9)
{
  uint64_t v9;
  mach_port_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  mach_port_t v18;
  uint64_t v19;
  void *v20;
  unsigned int inputStructCnt[3];
  size_t __count;
  uint64_t input[3];
  _OWORD __src[16];

  memset(__src, 0, sizeof(__src));
  __count = 256;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  input[0] = a1;
  input[1] = a2;
  v9 = 3758097090;
  input[2] = a5;
  if (a8 && a9)
  {
    v12 = sub_10009957C();
    if (v12)
    {
      v18 = v12;
      sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, v13, v14, v15, v16, v17, a3);
      if (*(_QWORD *)&inputStructCnt[1])
      {
        v19 = IOConnectCallMethod(v18, 0x32u, input, 3u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
        if ((_DWORD)v19)
        {
          v9 = v19;
        }
        else if (__count > 0x100)
        {
          v9 = 3758604298;
        }
        else
        {
          v20 = calloc(__count, 1uLL);
          *a8 = v20;
          v9 = 3758097085;
          if (v20)
          {
            memcpy(v20, __src, __count);
            v9 = 0;
            *a9 = __count;
          }
        }
      }
      else
      {
        v9 = 3758097085;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_sign_signing_key", ":", 1911, "", 0, "", "");
      v9 = 3758097084;
    }
  }
  free(*(void **)&inputStructCnt[1]);
  return v9;
}

uint64_t sub_1000A214C(int a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _DWORD *a9)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  uint64_t v18;
  uint32_t outputCnt;
  unsigned int inputStructCnt[3];
  uint64_t output;
  uint64_t input[2];

  v10 = 3758097084;
  input[0] = a2;
  input[1] = a1;
  output = 0;
  outputCnt = 1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  v11 = sub_10009957C();
  if (v11)
  {
    v17 = v11;
    sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 3, v12, v13, v14, v15, v16, a3);
    if (*(_QWORD *)&inputStructCnt[1])
    {
      v18 = IOConnectCallMethod(v17, 0x2Cu, input, 2u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], &output, &outputCnt, 0, 0);
      v10 = v18;
      if (a9 && !(_DWORD)v18)
        *a9 = output;
    }
    else
    {
      v10 = 3758097085;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_session", ":", 1938, "", 0, "", "");
  }
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000A22C4(int a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v8;
  uint64_t v11;
  void *v12;
  rsize_t __smax;
  rsize_t __n;
  uint64_t v16;
  void *v17;
  void *__s;
  __int128 v19;

  v17 = 0;
  __s = 0;
  v4 = 3758097084;
  __n = 0;
  v16 = 0;
  v5 = 3758097090;
  __smax = 0;
  if (!a3 || !a4)
    goto LABEL_12;
  v8 = -536870212;
  *(_QWORD *)&v19 = a3;
  *((_QWORD *)&v19 + 1) = a3 + a4;
  if (!(a3 + a4))
    goto LABEL_19;
  v16 = 0;
  if ((ccder_blob_decode_range(&v19, 0x2000000000000010, &v19) & 1) == 0)
  {
    v8 = -536870198;
LABEL_19:
    syslog(3, "error parsing signing key: %d", v8);
    v5 = 3758097084;
LABEL_12:
    v12 = __s;
    v4 = v5;
    goto LABEL_13;
  }
  sub_1000AC014(&v19, 0x8000000000000001, &v16);
  if (v16)
  {
    v5 = sub_1000A1D94(a1, 0x74u, a3, a4, 0, 0);
    if ((_DWORD)v5)
      syslog(3, "error: validating v1 local signing key failed: %d");
    goto LABEL_12;
  }
  v11 = sub_1000A1A44(a1, 11, &__s, &__n);
  if ((_DWORD)v11)
  {
    v5 = v11;
    syslog(3, "error: validating (create) v0 local signing key failed: %d", v11);
    goto LABEL_12;
  }
  v12 = __s;
  if (__s && __n)
  {
    v5 = sub_1000A1F4C(a1, a2, a3, a4, 11, (uint64_t)__s, __n, &v17, &__smax);
    if ((_DWORD)v5)
      syslog(3, "error: validating (sign) v0 local signing key failed: %d");
    goto LABEL_12;
  }
LABEL_13:
  if (v12)
  {
    memset_s(v12, __n, 0, __n);
    free(__s);
  }
  if (v17)
  {
    memset_s(v17, __smax, 0, __smax);
    free(v17);
  }
  return v4;
}

uint64_t sub_1000A2498(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, size_t *a5)
{
  return sub_1000A1D94(a1, 0x2Du, a2, a3, a4, a5);
}

uint64_t sub_1000A24B0(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, size_t *a5)
{
  return sub_1000A1D94(a1, 0x2Eu, a2, a3, a4, a5);
}

uint64_t sub_1000A24C8(int a1, uint64_t a2, int a3, _QWORD *a4, size_t *a5)
{
  return sub_1000A1D94(a1, 0x94u, a2, a3, a4, a5);
}

uint64_t sub_1000A24E4(int a1, _QWORD *a2, size_t *a3)
{
  return sub_1000A1D94(a1, 0x30u, 0, 0, a2, a3);
}

uint64_t sub_1000A24FC(int a1, _QWORD *a2, size_t *a3)
{
  return sub_1000A1D94(a1, 0x38u, 0, 0, a2, a3);
}

uint64_t sub_1000A2514(int a1, _QWORD *a2, _DWORD *a3)
{
  mach_port_t v6;
  mach_port_t v7;
  uint64_t result;
  void *v9;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];

  v6 = sub_10009957C();
  if (v6)
  {
    v7 = v6;
    result = 3758097090;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input[0] = a1;
        input[1] = 0;
        result = IOConnectCallMethod(v7, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            v9 = calloc(__count, 1uLL);
            *a2 = v9;
            if (v9)
            {
              memcpy(v9, __src, __count);
              result = 0;
              *a3 = __count;
            }
            else
            {
              return 3758097085;
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys", ":", 2072, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A26AC(int a1, _QWORD *a2, size_t *a3)
{
  mach_port_t v6;
  mach_port_t v7;
  uint64_t result;
  void *v9;
  size_t __count;
  uint64_t input[2];
  _BYTE __src[32768];

  v6 = sub_10009957C();
  if (v6)
  {
    v7 = v6;
    result = 3758097090;
    if (a2)
    {
      if (a3)
      {
        bzero(__src, 0x8000uLL);
        __count = 0x8000;
        input[0] = a1;
        input[1] = 1;
        result = IOConnectCallMethod(v7, 0x14u, input, 2u, 0, 0, 0, 0, __src, &__count);
        if (!(_DWORD)result)
        {
          if (__count)
          {
            if (__ROR8__(0xEF7BDEF7BDEF7BDFLL * __count, 2) > 0x210842108421084uLL)
            {
              return 3758604298;
            }
            else
            {
              v9 = calloc(__count, 1uLL);
              *a2 = v9;
              if (v9)
              {
                memcpy(v9, __src, __count);
                result = 0;
                *a3 = __count / 0x7C;
              }
              else
              {
                return 3758097085;
              }
            }
          }
          else
          {
            return 3758097136;
          }
        }
      }
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drain_backup_keys_info", ":", 2100, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A28A0(int a1)
{
  mach_port_t v2;
  uint64_t input;

  v2 = sub_10009957C();
  if (v2)
  {
    input = a1;
    return IOConnectCallMethod(v2, 0x16u, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_clear_backup_bag", ":", 2129, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A2984(int a1, int a2, uint64_t a3, int a4, _QWORD *a5, _DWORD *a6)
{
  mach_port_t v12;
  mach_port_t v13;
  _BYTE *outputStruct;
  size_t *p_count;
  uint64_t v16;
  uint64_t result;
  void *v18;
  size_t __count;
  uint64_t input[5];
  _BYTE __src[32768];

  v12 = sub_10009957C();
  if (!v12)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_set_backup_bag", ":", 2146, "", 0, "", "");
    return 3758097084;
  }
  v13 = v12;
  if (a5)
  {
    if (!a6)
      return 3758097090;
    outputStruct = __src;
    p_count = &__count;
    v16 = 1;
  }
  else
  {
    p_count = 0;
    outputStruct = 0;
    v16 = 0;
  }
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  input[0] = a1;
  input[1] = a2;
  input[2] = v16;
  input[3] = a3;
  input[4] = a4;
  result = IOConnectCallMethod(v13, 0x15u, input, 5u, 0, 0, 0, 0, outputStruct, p_count);
  if (a5 && !(_DWORD)result)
  {
    v18 = calloc(__count, 1uLL);
    *a5 = v18;
    if (v18)
    {
      memcpy(v18, __src, __count);
      result = 0;
      *a6 = __count;
    }
    else
    {
      return 3758097085;
    }
  }
  return result;
}

uint64_t sub_1000A2B58(int a1, _DWORD *a2)
{
  uint64_t v4;
  mach_port_t v5;
  uint32_t outputCnt;
  uint64_t output;
  uint64_t input;

  v4 = 3758097084;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
    {
      output = 0;
      input = a1;
      outputCnt = 1;
      v4 = IOConnectCallMethod(v5, 0x52u, &input, 1u, 0, 0, &output, &outputCnt, 0, 0);
      if (!(_DWORD)v4)
        *a2 = output;
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_make_public_backup_bag", ":", 2178, "", 0, "", "");
  }
  return v4;
}

uint64_t sub_1000A2C70(int a1)
{
  return sub_1000A1D94(a1, 0x34u, 0, 0, 0, 0);
}

uint64_t sub_1000A2C88()
{
  return sub_1000A1D94(0, 0x40u, 0, 0, 0, 0);
}

uint64_t sub_1000A2CA4(int a1, uint64_t a2)
{
  return sub_1000A2CB0(a1, 0x11u, a2);
}

uint64_t sub_1000A2CB0(int a1, uint32_t a2, uint64_t a3)
{
  uint64_t v5;
  mach_port_t v6;
  mach_port_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v12[2];
  __int128 __s;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  _BYTE outputStruct[4096];
  uint64_t input;

  input = a1;
  *(_QWORD *)v12 = 4096;
  v5 = 3758097084;
  v18 = 0;
  v16 = 0u;
  v17 = 0u;
  v14 = 0u;
  v15 = 0u;
  __s = 0u;
  v6 = sub_10009957C();
  if (v6)
  {
    if (a3)
    {
      v7 = v6;
      bzero(outputStruct, 0x1000uLL);
      v8 = IOConnectCallMethod(v7, a2, &input, 1u, 0, 0, 0, 0, outputStruct, (size_t *)v12);
      if ((_DWORD)v8)
      {
        return v8;
      }
      else
      {
        v5 = 0;
        if (!sub_1000AAF90((uint64_t)outputStruct, v12[0], (char *)&__s))
        {
          v9 = v16;
          *(_OWORD *)(a3 + 32) = v15;
          *(_OWORD *)(a3 + 48) = v9;
          *(_WORD *)(a3 + 64) = v17;
          v10 = v14;
          *(_OWORD *)a3 = __s;
          *(_OWORD *)(a3 + 16) = v10;
        }
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "_get_device_state", ":", 2224, "", 0, "", "");
  }
  return v5;
}

uint64_t sub_1000A2E44(int a1, uint64_t a2)
{
  return sub_1000A2CB0(a1, 0x23u, a2);
}

uint64_t sub_1000A2E50(int a1, const void *a2, size_t a3, _DWORD *a4)
{
  uint64_t v7;
  mach_port_t v8;
  mach_port_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  __int128 v17;
  uint64_t v18;
  void **v19;
  size_t v20;
  void *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t input;
  _BYTE outputStruct[4096];

  v7 = 3758097084;
  v20 = 4096;
  input = a1;
  v8 = sub_10009957C();
  if (v8)
  {
    if (a4)
    {
      v9 = v8;
      bzero(outputStruct, 0x1000uLL);
      memset_s(a4, 0x10uLL, 0, 0x10uLL);
      v10 = IOConnectCallMethod(v9, 0x39u, &input, 1u, a2, a3, 0, 0, outputStruct, &v20);
      if ((_DWORD)v10)
      {
        return v10;
      }
      else
      {
        v11 = &outputStruct[v20];
        v26 = 0;
        v30 = 0u;
        v22 = 0u;
        v23 = 0u;
        v25 = 0u;
        v28 = 0u;
        v29 = 0u;
        v31 = 0u;
        v32 = 0;
        v21 = off_1000DFA78;
        v24 = (unint64_t)off_1000DFA80;
        v27 = off_1000DFA88;
        *(_QWORD *)&v30 = off_1000DFA90;
        v17 = xmmword_1000B24A0;
        v18 = 0;
        v19 = &v21;
        sub_1000A90D0((uint64_t)outputStruct, (uint64_t)&outputStruct[v20], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A8F08, (uint64_t)&v17);
        v12 = *((_QWORD *)&v24 + 1);
        v13 = v28;
        v14 = *((_QWORD *)&v30 + 1);
        *a4 = sub_1000A92E8(v22, (uint64_t)v11);
        a4[1] = sub_1000A92E8(v12, (uint64_t)v11);
        a4[2] = sub_1000A92E8(v13, (uint64_t)v11);
        v15 = sub_1000A92E8(v14, (uint64_t)v11);
        v7 = 0;
        a4[3] = v15;
      }
    }
    else
    {
      return 3758097090;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_get_state", ":", 2255, "", 0, "", "");
  }
  return v7;
}

uint64_t sub_1000A30B4(int a1, const void *a2, size_t a3)
{
  mach_port_t v5;
  uint64_t input;

  input = a1;
  v5 = sub_10009957C();
  if (v5)
    return IOConnectCallMethod(v5, 0x3Au, &input, 1u, a2, a3, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_remote_peer_drop", ":", 2292, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A319C(int a1, int a2)
{
  mach_port_t v3;
  uint32_t v4;
  uint64_t input;

  input = a1;
  v3 = sub_10009957C();
  if (v3)
  {
    if (a2)
      v4 = 32;
    else
      v4 = 8;
    return IOConnectCallMethod(v3, v4, &input, 1u, 0, 0, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_device", ":", 2307, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A328C(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x8Du, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lock_cx", ":", 2327, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A3364(int a1, uint64_t a2, int a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  v3 = sub_10009957C();
  if (v3)
    return IOConnectCallMethod(v3, 9u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_unlock_device", ":", 2342, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A3444()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x13u, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_obliterate_class_d", ":", 2355, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A34E8(int a1, unsigned int a2, uint64_t a3, unsigned int a4, const void *a5, int a6)
{
  mach_port_t v12;
  uint64_t input[4];

  v12 = sub_10009957C();
  if (v12)
  {
    input[0] = a1;
    input[1] = a2;
    input[2] = a3;
    input[3] = a4;
    return IOConnectCallMethod(v12, 0x3Fu, input, 4u, a5, a6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_migrate_s_key", ":", 2367, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A35FC(int a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, _QWORD *a7, size_t *a8)
{
  mach_port_t v12;
  mach_port_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  size_t v17;
  size_t __count;
  _BYTE __src[2048];
  uint64_t input[4];

  input[0] = a1;
  input[1] = a4;
  input[2] = a2;
  input[3] = a3;
  __count = 2048;
  v12 = sub_10009957C();
  if (v12)
  {
    v13 = v12;
    bzero(__src, 0x800uLL);
    v14 = IOConnectCallMethod(v13, 0x3Bu, input, 4u, a5, a6, 0, 0, __src, &__count);
    if ((_DWORD)v14)
    {
      return v14;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      v15 = 0;
      if (a7 && a8)
      {
        if (__count)
        {
          v16 = calloc(__count, 1uLL);
          *a7 = v16;
          if (!v16)
            return 3758097085;
          memcpy(v16, __src, __count);
          v17 = __count;
        }
        else
        {
          v17 = 0;
        }
        v15 = 0;
        *a8 = v17;
      }
    }
  }
  else
  {
    v15 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_register", ":", 2388, "", 0, "", "");
  }
  return v15;
}

uint64_t sub_1000A37A8(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x3Cu, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unregister", ":", 2412, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A3880(int a1, const void *a2, size_t a3, _QWORD *a4, size_t *a5)
{
  mach_port_t v9;
  mach_port_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  size_t v14;
  size_t __count;
  _BYTE __src[2048];
  uint64_t input;

  input = a1;
  __count = 2048;
  v9 = sub_10009957C();
  if (v9)
  {
    v10 = v9;
    bzero(__src, 0x800uLL);
    v11 = IOConnectCallMethod(v10, 0x3Du, &input, 1u, a2, a3, 0, 0, __src, &__count);
    if ((_DWORD)v11)
    {
      return v11;
    }
    else if (__count > 0x800)
    {
      return 3758604298;
    }
    else
    {
      v12 = 0;
      if (a4 && a5)
      {
        if (__count)
        {
          v13 = calloc(__count, 1uLL);
          *a4 = v13;
          if (!v13)
            return 3758097085;
          memcpy(v13, __src, __count);
          v14 = __count;
        }
        else
        {
          v14 = 0;
        }
        v12 = 0;
        *a5 = v14;
      }
    }
  }
  else
  {
    v12 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_request_unlock", ":", 2429, "", 0, "", "");
  }
  return v12;
}

uint64_t sub_1000A3A24(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, size_t *a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  mach_port_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  size_t v19;
  size_t __count;
  unsigned int inputStructCnt[3];
  _BYTE __src[2048];
  uint64_t input;

  input = a1;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  bzero(__src, 0x800uLL);
  __count = 2048;
  sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, v10, v11, v12, v13, v14, a2);
  if (!*(_QWORD *)&inputStructCnt[1])
  {
    v17 = 3758097085;
    goto LABEL_12;
  }
  v15 = sub_10009957C();
  if (!v15)
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_smartcard_unlock", ":", 2460, "", 0, "", "");
    v17 = 3758097084;
    goto LABEL_12;
  }
  v16 = IOConnectCallMethod(v15, 0x3Eu, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
  if ((_DWORD)v16)
  {
    v17 = v16;
    goto LABEL_12;
  }
  if (__count > 0x800)
  {
    v17 = 3758604298;
    goto LABEL_12;
  }
  v17 = 0;
  if (a6 && a7)
  {
    if (!__count)
    {
      v19 = 0;
      goto LABEL_11;
    }
    v18 = calloc(__count, 1uLL);
    *a6 = v18;
    v17 = 3758097085;
    if (v18)
    {
      memcpy(v18, __src, __count);
      v19 = __count;
LABEL_11:
      v17 = 0;
      *a7 = v19;
    }
  }
LABEL_12:
  free(*(void **)&inputStructCnt[1]);
  return v17;
}

uint64_t sub_1000A3C08(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_1000A3C50((uint64_t)off_1000DFAA0, 0, a1, a2, a3, a4))
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1000A3C50(uint64_t a1, int a2, unint64_t a3, uint64_t a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;

  result = 0xFFFFFFFFLL;
  if (a6)
  {
    if (a3)
    {
      if (a4)
      {
        if (a5)
        {
          v9 = a3 + a4;
          if (a3 + a4 > a3)
          {
            v21 = 0u;
            v20 = 0u;
            v19 = a1;
            v16 = xmmword_1000B24B0;
            v17 = 0;
            v18 = &v19;
            sub_1000A90D0(a3, v9, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A8F08, (uint64_t)&v16);
            if (a2)
            {
              if (*a6 == 8)
              {
                v12 = sub_1000A92E8(v20, v9);
                result = 0;
                *a5 = v12;
                return result;
              }
              return 0xFFFFFFFFLL;
            }
            v15 = 0;
            v13 = ccder_decode_tl(4, &v15, v20, v9);
            if (!v13)
              return 0xFFFFFFFFLL;
            v14 = v13;
            result = 0;
            *a5 = v14;
            *a6 = v15;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000A3D78(unint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  uint64_t result;

  result = 0xFFFFFFFFLL;
  if (a3 && a4)
  {
    if (sub_1000A3C50((uint64_t)off_1000DFAD0, 0, a1, a2, a3, a4))
      return 0xFFFFFFFFLL;
    else
      return 0;
  }
  return result;
}

uint64_t sub_1000A3DC0(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 8;
  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  result = sub_1000A3C50((uint64_t)off_1000DFAB8, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *a3 = v6;
  return result;
}

uint64_t sub_1000A3E2C(unint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  v5 = 8;
  if (!a3)
    return 0xFFFFFFFFLL;
  v6 = 0;
  result = sub_1000A3C50((uint64_t)off_1000DFAB0, 1, a1, a2, &v6, &v5);
  if ((_DWORD)result)
    return 0xFFFFFFFFLL;
  *a3 = v6;
  return result;
}

uint64_t sub_1000A3E98(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x47u, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_fail", ":", 2589, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A3F70(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x49u, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_healthy", ":", 2605, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4048(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4050(a1, a2, a3, 0x45u);
}

uint64_t sub_1000A4050(int a1, uint64_t a2, uint64_t a3, uint32_t a4)
{
  mach_port_t v5;
  uint64_t input[3];

  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  v5 = sub_10009957C();
  if (v5)
    return IOConnectCallMethod(v5, a4, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "__aks_se_set_secret", ":", 2621, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4138(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1000A4050(a1, a2, a3, 0x8Cu);
}

uint64_t sub_1000A4140(int a1, uint64_t a2, uint64_t a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  v3 = sub_10009957C();
  if (v3)
    return IOConnectCallMethod(v3, 0x46u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_recover", ":", 2649, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A421C(int a1, uint64_t a2, uint64_t a3)
{
  mach_port_t v3;
  uint64_t input[3];

  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  v3 = sub_10009957C();
  if (v3)
    return IOConnectCallMethod(v3, 0x69u, input, 3u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_change_secret_epilogue", ":", 2665, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A42F8(int a1, uint64_t a2, uint64_t a3, _QWORD *a4, _BYTE *a5)
{
  mach_port_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  void **v20;
  rsize_t __n;
  void *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _BYTE __s[4096];
  uint64_t input[3];

  input[0] = a1;
  input[1] = a2;
  input[2] = a3;
  bzero(__s, 0x1000uLL);
  __n = 4096;
  v7 = sub_10009957C();
  if (!v7)
  {
    v15 = 3758097084;
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_token_for_memento_secret", ":", 2683, "", 0, "", "");
    goto LABEL_12;
  }
  v8 = IOConnectCallMethod(v7, 0x48u, input, 3u, 0, 0, 0, 0, __s, &__n);
  if ((_DWORD)v8)
  {
    v15 = v8;
    goto LABEL_12;
  }
  if (__n - 4097 < 0xFFFFFFFFFFFFF000)
  {
    v15 = 3758604298;
    goto LABEL_12;
  }
  v9 = &__s[__n];
  v27 = 0;
  v26 = 0u;
  v24 = 0u;
  v23 = 0u;
  v22 = off_1000DFB28;
  v25 = (unint64_t)off_1000DFB30;
  v18 = xmmword_1000B24C0;
  v19 = 0;
  v20 = &v22;
  sub_1000A90D0((uint64_t)__s, (uint64_t)&__s[__n], (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_1000A8F08, (uint64_t)&v18);
  v10 = *((_QWORD *)&v25 + 1);
  if ((_QWORD)v23)
  {
    v17 = 0;
    v11 = ccder_decode_tl(4, &v17, v23, v9);
    if (v17 != 16)
    {
LABEL_11:
      v15 = 0;
      goto LABEL_12;
    }
    v12 = v11;
    v13 = calloc(0x10uLL, 1uLL);
    *a4 = v13;
    if (!v13)
    {
      v15 = 3758097085;
      goto LABEL_12;
    }
    __memcpy_chk(v13, v12, v17, 16);
  }
  if (!v10)
    goto LABEL_11;
  v14 = sub_1000A92E8(v10, (uint64_t)v9);
  if (v14 > 0xFF)
    goto LABEL_11;
  v15 = 0;
  *a5 = v14;
LABEL_12:
  memset_s(__s, __n, 0, __n);
  return v15;
}

uint64_t sub_1000A4564(int a1, _QWORD *a2, _BYTE *a3)
{
  return sub_1000A42F8(a1, 0, 0, a2, a3);
}

uint64_t sub_1000A4578(int a1, const void *a2, size_t a3)
{
  mach_port_t v5;
  size_t v6;
  uint64_t input;

  input = a1;
  v5 = sub_10009957C();
  if (v5)
  {
    if (a2)
      v6 = a3;
    else
      v6 = 0;
    return IOConnectCallMethod(v5, 0x58u, &input, 1u, a2, v6, 0, 0, 0, 0);
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_set_nonce", ":", 2737, "", 0, "", "");
    return 3758097084;
  }
}

uint64_t sub_1000A4664(int a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v9;
  mach_port_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  void *v14;
  size_t v15;
  size_t __n;
  int __s;
  char v19;
  _BYTE v20[3];
  uint64_t input;

  input = a1;
  bzero(&__s, 0x1000uLL);
  __n = 4096;
  v9 = 3758097090;
  if (a2)
  {
    if (a3)
    {
      v9 = 3758097090;
      if (a4)
      {
        if (a5)
        {
          v10 = sub_10009957C();
          if (v10)
          {
            v11 = IOConnectCallMethod(v10, 0x5Au, &input, 1u, 0, 0, 0, 0, &__s, &__n);
            if ((_DWORD)v11)
            {
              v9 = v11;
            }
            else if (__n - 4097 < 0xFFFFFFFFFFFFF005)
            {
              v9 = 3758604298;
            }
            else
            {
              v12 = calloc(5uLL, 1uLL);
              *a4 = v12;
              if (v12)
              {
                *a5 = 5;
                v13 = __s;
                v12[4] = v19;
                *(_DWORD *)v12 = v13;
                v14 = calloc(__n - 5, 1uLL);
                *a2 = v14;
                v9 = 3758097085;
                if (v14)
                {
                  v15 = __n;
                  *a3 = __n - 5;
                  memcpy(v14, v20, v15);
                  v9 = 0;
                }
              }
              else
              {
                v9 = 3758097085;
              }
            }
          }
          else
          {
            fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_sig", ":", 2759, "", 0, "", "");
            v9 = 3758097084;
          }
        }
      }
    }
  }
  memset_s(&__s, __n, 0, __n);
  return v9;
}

uint64_t sub_1000A4874(int a1, _QWORD *a2, size_t *a3)
{
  size_t v5;
  uint64_t v6;
  mach_port_t v7;
  uint64_t v8;
  void *v9;
  size_t __count;
  _BYTE __src[4096];
  uint64_t input;

  input = a1;
  v5 = 4096;
  bzero(__src, 0x1000uLL);
  __count = 4096;
  v6 = 3758097090;
  if (a2 && a3)
  {
    v7 = sub_10009957C();
    if (v7)
    {
      v8 = IOConnectCallMethod(v7, 0x59u, &input, 1u, 0, 0, 0, 0, __src, &__count);
      v5 = __count;
      if ((_DWORD)v8)
      {
        v6 = v8;
      }
      else if (__count - 4097 < 0xFFFFFFFFFFFFF000)
      {
        v6 = 3758604298;
      }
      else
      {
        v9 = calloc(__count, 1uLL);
        *a2 = v9;
        v5 = __count;
        if (v9)
        {
          *a3 = __count;
          memcpy(v9, __src, v5);
          v6 = 0;
          v5 = __count;
        }
        else
        {
          v6 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_get_reset_pubkey", ":", 2791, "", 0, "", "");
      v5 = 4096;
      v6 = 3758097084;
    }
  }
  memset_s(__src, v5, 0, v5);
  return v6;
}

uint64_t sub_1000A4A34(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x5Bu, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_delete_reset_token", ":", 2815, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4B0C(unsigned int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x5Eu, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm", ":", 2832, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4BE4(BOOL *a1)
{
  mach_port_t v2;
  uint64_t result;
  uint32_t outputCnt;
  uint64_t output;

  output = 0;
  outputCnt = 1;
  v2 = sub_10009957C();
  if (v2)
  {
    result = IOConnectCallMethod(v2, 0x6Bu, 0, 0, 0, 0, &output, &outputCnt, 0, 0);
    if (a1)
    {
      if (!(_DWORD)result)
        *a1 = output != 0;
    }
  }
  else
  {
    fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_support_in_rm_is_set", ":", 2848, "", 0, "", "");
    return 3758097084;
  }
  return result;
}

uint64_t sub_1000A4CE4()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x5Fu, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_stage_stash", ":", 2865, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A4D88(_QWORD *a1)
{
  return sub_10009A74C(0, 0x19u, 0, 0, 0, a1, 0);
}

uint64_t sub_1000A4DA8(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, uint64_t a5)
{
  return sub_10009A994(a1, 0, a2, a3, a4, 0, a5);
}

uint64_t sub_1000A4DC4(uint64_t a1, _QWORD *a2, char *a3)
{
  uint64_t v6;
  mach_port_t v7;
  mach_port_t v8;
  uint64_t v9;
  __int128 v11;
  int v12[2];
  _BYTE __s[4096];
  uint64_t v14;

  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v11 = __s;
  *((_QWORD *)&v11 + 1) = &v14;
  *(_QWORD *)v12 = 4096;
  v6 = 3758097090;
  if (a2 && a3)
  {
    v7 = sub_10009957C();
    if (v7)
    {
      v8 = v7;
      if (sub_1000AAB7C(&v11, a2) && sub_1000AAC94(&v11, a1))
      {
        v6 = 3758097098;
        if (ccder_blob_encode_tl(&v11, 0x2000000000000010, (char *)&v14 - *((_QWORD *)&v11 + 1)))
        {
          v9 = IOConnectCallMethod(v8, 0x55u, 0, 0, *((const void **)&v11 + 1), (size_t)&v14 - *((_QWORD *)&v11 + 1), 0, 0, __s, (size_t *)v12);
          if (!(_DWORD)v9)
            v9 = sub_1000AB4D4((uint64_t)__s, *(uint64_t *)v12, a3);
          v6 = v9;
        }
      }
      else
      {
        v6 = 3758097098;
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_blob_state", ":", 2900, "", 0, "", "");
      v6 = 3758097084;
    }
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v6;
}

uint64_t sub_1000A4F98(__int128 *a1, char *a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;
  _QWORD v6[2];
  char v7;

  v7 = 0;
  v6[0] = &v7;
  v6[1] = 1;
  v4 = 0uLL;
  v5 = 0;
  if (a1)
  {
    v4 = *a1;
    v5 = *((_QWORD *)a1 + 2);
    v2 = *((_QWORD *)&v4 + 1) | 0x10;
  }
  else
  {
    v2 = 16;
  }
  *((_QWORD *)&v4 + 1) = v2;
  return sub_1000A4DC4((uint64_t)&v4, v6, a2);
}

uint64_t sub_1000A5000(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v5;
  mach_port_t v6;
  mach_port_t v7;
  __int128 v9;
  uint32_t outputCnt;
  _BYTE __s[4096];
  uint64_t output;
  uint64_t input;

  v5 = 3758097098;
  output = 0;
  input = a2;
  outputCnt = 1;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v9 = __s;
  *((_QWORD *)&v9 + 1) = &output;
  if (a3)
  {
    v6 = sub_10009957C();
    if (v6)
    {
      v7 = v6;
      if (sub_1000AAC94(&v9, a1))
      {
        if (ccder_blob_encode_tl(&v9, 0x2000000000000010, (char *)&output - *((_QWORD *)&v9 + 1)))
        {
          v5 = IOConnectCallMethod(v7, 0x4Eu, &input, 1u, *((const void **)&v9 + 1), (size_t)&output - *((_QWORD *)&v9 + 1), &output, &outputCnt, 0, 0);
          if (!(_DWORD)v5)
            *a3 = output;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_get_size", ":", 2943, "", 0, "", "");
      v5 = 3758097084;
    }
  }
  else
  {
    v5 = 3758097090;
  }
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v5;
}

uint64_t sub_1000A519C(uint64_t a1, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  mach_port_t v10;
  mach_port_t v11;
  uint64_t v12;
  __int128 v14;
  __int128 v15;
  size_t v16;
  _BYTE __s[4096];
  uint64_t input;

  input = a2;
  bzero(__s, 0x1000uLL);
  *(_QWORD *)&v15 = __s;
  *((_QWORD *)&v15 + 1) = &input;
  v16 = 4096;
  v9 = 3758097090;
  if (a3 && a4)
  {
    v10 = sub_10009957C();
    if (!v10)
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_fv_import", ":", 2971, "", 0, "", "");
      v9 = 3758097084;
      goto LABEL_14;
    }
    v11 = v10;
    if (!ccder_blob_encode_body_tl(&v15, 4, 16, a4)
      || !sub_1000AAB7C(&v15, a3)
      || !sub_1000AAC94(&v15, a1)
      || !ccder_blob_encode_tl(&v15, 0x2000000000000010, (char *)&input - *((_QWORD *)&v15 + 1)))
    {
      goto LABEL_12;
    }
    v12 = IOConnectCallMethod(v11, 0x4Fu, &input, 1u, *((const void **)&v15 + 1), (size_t)&input - *((_QWORD *)&v15 + 1), 0, 0, __s, &v16);
    if ((_DWORD)v12)
    {
      v9 = v12;
      goto LABEL_14;
    }
    *(_QWORD *)&v14 = __s;
    *((_QWORD *)&v14 + 1) = &__s[v16];
    if (!ccder_blob_decode_range(&v14, 0x2000000000000010, &v14))
      goto LABEL_12;
    if (!a5)
    {
      v9 = 0;
      goto LABEL_14;
    }
    v9 = 0;
    if ((sub_1000AABE8(&v14, 0, a5) & 1) == 0)
LABEL_12:
      v9 = 3758097098;
  }
LABEL_14:
  memset_s(__s, 0x1000uLL, 0, 0x1000uLL);
  return v9;
}

uint64_t sub_1000A53CC(uint64_t *a1)
{
  return sub_1000A5000(0, 2u, a1);
}

uint64_t sub_1000A53DC(uint64_t *a1)
{
  return sub_1000A5000(0, 1u, a1);
}

uint64_t sub_1000A53EC(unsigned int a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_10009A06C(0, a1, a2, a3, a4);
}

uint64_t sub_1000A5404(_QWORD *a1, _QWORD *a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  return sub_10009A4F0(0, a1, a2, a3, a4, a5);
}

uint64_t sub_1000A5420(_QWORD *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD v5[3];

  v5[0] = 0;
  v5[1] = 2;
  v5[2] = 0;
  return sub_10009931C((uint64_t)v5, a1, a2, a3, a4, 0);
}

uint64_t sub_1000A5460(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD v5[3];

  v3 = 130;
  if ((a1 & 6) == 0)
    v3 = 2;
  v5[0] = 0;
  v5[1] = v3;
  v5[2] = 0;
  return sub_10009931C((uint64_t)v5, 0, 0, a2, a3, 0);
}

uint64_t sub_1000A54AC(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  return sub_10009A74C(0, 3u, 0, a1, a2, a3, a4);
}

uint64_t sub_1000A54CC(_QWORD *a1, BOOL *a2)
{
  uint64_t result;
  _QWORD v4[3];
  _OWORD v5[2];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;

  memset(v4, 0, sizeof(v4));
  v9 = 0;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  if (!a2)
    return 3758097090;
  result = sub_1000A4DC4((uint64_t)v4, a1, (char *)v5);
  if (!(_DWORD)result)
  {
    if (LODWORD(v5[0]) == 1)
    {
      result = 0;
      *a2 = (DWORD1(v6) & 0x8000000) != 0;
    }
    else
    {
      return 3758604312;
    }
  }
  return result;
}

uint64_t sub_1000A5584(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  return sub_10009A74C(0, 0x12u, 4uLL, a1, a2, a3, 0);
}

uint64_t sub_1000A55A4(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, unsigned int a5)
{
  return sub_10009A994(0, a5, a1, a2, a3, a4, 0);
}

uint64_t sub_1000A55C8(uint64_t a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  uint64_t v10;
  _QWORD v12[2];
  _QWORD v13[2];
  __int128 v14;
  __int128 v15;
  _BYTE v16[4096];
  _BYTE v17[4096];
  _QWORD v18[2];

  v10 = 3758097098;
  bzero(v17, 0x1000uLL);
  bzero(v16, 0x1000uLL);
  *(_QWORD *)&v15 = v17;
  *((_QWORD *)&v15 + 1) = v18;
  *(_QWORD *)&v14 = v16;
  *((_QWORD *)&v14 + 1) = v17;
  if (sub_1000AAB7C(&v15, a2)
    && sub_1000AAB7C(&v15, a3)
    && ccder_blob_encode_tl(&v15, 0x2000000000000010, (char *)v18 - *((_QWORD *)&v15 + 1))
    && sub_1000AAB7C(&v14, a4)
    && sub_1000AAB7C(&v14, a5)
    && ccder_blob_encode_tl(&v14, 0x2000000000000010, &v17[-*((_QWORD *)&v14 + 1)]))
  {
    v13[0] = *((_QWORD *)&v15 + 1);
    v13[1] = (char *)v18 - *((_QWORD *)&v15 + 1);
    v12[0] = *((_QWORD *)&v14 + 1);
    v12[1] = &v17[-*((_QWORD *)&v14 + 1)];
    return sub_10009A74C(a1, 0x10u, 0, v13, v12, 0, 0);
  }
  return v10;
}

uint64_t sub_1000A5758(uint64_t a1)
{
  return sub_10009A74C(a1, 0x11u, 0, 0, 0, 0, 0);
}

uint64_t sub_1000A5774(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[3];
  uint64_t v4;

  v4 = a1;
  memset(v3, 0, sizeof(v3));
  v2[0] = &v4;
  v2[1] = 16;
  return sub_10009A74C((uint64_t)v3, 0x1Cu, 0, v2, 0, 0, 0);
}

uint64_t sub_1000A57C4(uint64_t a1, BOOL *a2, _BYTE *a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  _BYTE *v11;
  unint64_t v12;
  _QWORD v13[3];
  _BYTE *v14;
  uint64_t v15;
  _BYTE v16[16384];

  bzero(v16, 0x4000uLL);
  v14 = v16;
  v15 = 0x4000;
  result = sub_10009A74C(a1, 0x1Au, 0, 0, 0, 0, (uint64_t)&v14);
  if (!(_DWORD)result)
  {
    memset(v13, 0, 21);
    v11 = &v14[v15];
    v12 = 0;
    v7 = ccder_decode_sequence_tl(&v11);
    if (v7 && (v8 = ccder_decode_tl(4, &v12, v7, v11)) != 0)
    {
      if (v12 >= 0x15)
        v9 = 21;
      else
        v9 = v12;
      __memcpy_chk(v13, v8, v9, 21);
      if (a2)
      {
        if (v13[1])
          v10 = 1;
        else
          v10 = HIDWORD(v13[0]) != 0;
        *a2 = v10;
      }
      if (a3)
        *a3 = v13[2];
      return 0;
    }
    else
    {
      return 3758097084;
    }
  }
  return result;
}

uint64_t sub_1000A591C()
{
  return sub_10009A74C(0, 7u, 0, 0, 0, 0, 0);
}

uint64_t sub_1000A593C(int a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = 8;
  if (a1)
    v3 = 12;
  v6 = 0;
  v7 = v3;
  v8 = 0;
  v4 = sub_10009A74C((uint64_t)&v6, 7u, 0, a2, a3, 0, 0);
  syslog(6, "aks_fv_prot_cmd_stash_kek(%llu) = %d", v7, v4);
  return v4;
}

uint64_t sub_1000A59B4()
{
  uint64_t v0;

  v0 = sub_10009A74C(0, 0xDu, 0, 0, 0, 0, 0);
  syslog(6, "aks_fv_prot_cmd_stash_commit = %d", v0);
  return v0;
}

uint64_t sub_1000A5A10()
{
  uint64_t v0;

  v0 = sub_10009A74C(0, 8u, 0, 0, 0, 0, 0);
  syslog(6, "aks_fv_prot_cmd_stash_destroy = %d", v0);
  return v0;
}

uint64_t sub_1000A5A6C(_QWORD *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  return sub_10009A994(0, 0, a1, a2, a3, a4, 0);
}

uint64_t sub_1000A5A8C(_QWORD *a1)
{
  return sub_10009A74C(0, 0xBu, 0, 0, a1, 0, 0);
}

uint64_t sub_1000A5AAC(unsigned int a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v10;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  unsigned int inputStructCnt[3];
  size_t __count;
  _BYTE __src[32768];
  uint64_t input;

  v10 = 3758097084;
  input = a1;
  bzero(__src, 0x8000uLL);
  __count = 0x8000;
  memset(inputStructCnt, 0, sizeof(inputStructCnt));
  if (a6)
  {
    v11 = sub_10009957C();
    if (v11)
    {
      v17 = v11;
      if (a4)
        v18 = a4;
      else
        v18 = "";
      sub_1000ACC6C((char **)&inputStructCnt[1], inputStructCnt, 2, v12, v13, v14, v15, v16, (uint64_t)v18);
      v19 = IOConnectCallMethod(v17, 0x50u, &input, 1u, *(const void **)&inputStructCnt[1], (int)inputStructCnt[0], 0, 0, __src, &__count);
      if ((_DWORD)v19)
      {
        v10 = v19;
      }
      else
      {
        v20 = calloc(__count, 1uLL);
        *a6 = v20;
        if (v20)
        {
          memcpy(v20, __src, __count);
          v10 = 0;
          *a7 = (int)__count;
        }
        else
        {
          v10 = 3758097085;
        }
      }
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_collection", ":", 3220, "", 0, "", "");
    }
  }
  else
  {
    v10 = 3758097090;
  }
  memset_s(__src, 0x8000uLL, 0, 0x8000uLL);
  free(*(void **)&inputStructCnt[1]);
  return v10;
}

uint64_t sub_1000A5CAC(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, size_t *a7)
{
  uint64_t v7;
  mach_port_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  mach_port_t v17;
  size_t v19;
  int v20;
  char *v21;
  uint64_t input;

  v21 = 0;
  input = a1;
  v20 = 0;
  v7 = 3758097090;
  if (a2 && a6 && a7)
  {
    v11 = sub_10009957C();
    if (v11)
    {
      v17 = v11;
      sub_1000ACC6C(&v21, (unsigned int *)&v20, 2, v12, v13, v14, v15, v16, a2);
      v19 = *a7;
      v7 = IOConnectCallMethod(v17, 0x51u, &input, 1u, v21, v20, 0, 0, a6, &v19);
      if (!(_DWORD)v7)
        *a7 = (int)v19;
    }
    else
    {
      fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_absinthe_generate", ":", 3253, "", 0, "", "");
      v7 = 3758097084;
    }
  }
  free(v21);
  return v7;
}

uint64_t sub_1000A5E34(unsigned int a1)
{
  mach_port_t v1;
  uint64_t input[2];

  input[0] = 0;
  input[1] = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_uid", ":", 3280, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A5F0C(int a1)
{
  mach_port_t v1;
  uint64_t input[2];

  input[0] = 1;
  input[1] = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x53u, input, 2u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_drop_auxiliary_auth_by_handle", ":", 3296, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A5FE8()
{
  mach_port_t v0;

  v0 = sub_10009957C();
  if (v0)
    return IOConnectCallMethod(v0, 0x5Cu, 0, 0, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_lower_iteration_count", ":", 3310, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A608C(int a1)
{
  mach_port_t v1;
  uint64_t input;

  input = a1;
  v1 = sub_10009957C();
  if (v1)
    return IOConnectCallMethod(v1, 0x6Au, &input, 1u, 0, 0, 0, 0, 0, 0);
  fprintf(__stdoutp, "%s%s:%s%s%s%s%u:%s%u:%s aks connection failed%s\n", "aks", "", "", "", "aks_se_secret_drop", ":", 3326, "", 0, "", "");
  return 3758097084;
}

uint64_t sub_1000A6164(_QWORD *a1, size_t *a2)
{
  uint64_t v2;
  BOOL v5;
  size_t v6;
  void *v7;
  size_t __count;
  void *__src;
  size_t v11;
  void *v12;

  v11 = 0;
  v12 = 0;
  v2 = 3758097084;
  __count = 0;
  __src = 0;
  if (a1 && a2 && !sub_10009BDCC(-1, off_1000DFCB0, &v12, &v11))
  {
    if (sub_1000A9350((uint64_t)off_1000DFCB0, (uint64_t)v12, (uint64_t)v12 + v11, &__src, &__count))
      v5 = __src == 0;
    else
      v5 = 1;
    if (!v5)
    {
      v6 = __count;
      if (__count)
      {
        *a2 = __count;
        v7 = calloc(v6, 1uLL);
        *a1 = v7;
        if (v7)
        {
          memcpy(v7, __src, *a2);
          v2 = 0;
        }
      }
    }
  }
  free(v12);
  return v2;
}

uint64_t sub_1000A622C(int a1, _QWORD *a2, size_t *a3)
{
  return sub_10009BDCC(a1, 0, a2, a3);
}

uint64_t sub_1000A623C(int a1, _QWORD *a2)
{
  uint64_t v3;
  time_t v4;
  time_t v5;
  uint64_t v7;
  size_t v8;
  void *v9;

  v3 = 3758097084;
  v8 = 0;
  v9 = 0;
  v7 = 0;
  if (!sub_10009BDCC(a1, off_1000DFD30, &v9, &v8)
    && sub_1000A9270((uint64_t)off_1000DFD30, (uint64_t)v9, (uint64_t)v9 + v8, &v7))
  {
    if (a2)
    {
      v4 = time(0);
      v3 = 0;
      v5 = v4 - v7;
      if (v4 <= v7)
        v5 = 0;
      *a2 = v5;
    }
    else
    {
      v3 = 0;
    }
  }
  free(v9);
  return v3;
}

