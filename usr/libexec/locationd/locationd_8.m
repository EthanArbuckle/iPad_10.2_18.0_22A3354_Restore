BOOL sub_10047E34C(uint64_t a1, uint64_t a2, double a3)
{
  _BOOL8 v6;
  double v7;
  double v8;
  double v9;
  BOOL v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned __int8 v37[32];
  double v38;
  double v39;
  double v40;
  uint64_t v41;
  double v42;
  double v43;
  double v44;
  uint64_t v45;
  int v46;
  int v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;

  v6 = sub_10047B8C8(a1);
  if (v6)
  {
    if (*(_QWORD *)(a1 + 2120))
      sub_1018FB330();
    v36 = 0x7FFFFFFFFFFFFFFFLL;
    memset(v37, 0, sizeof(v37));
    v8 = *(double *)a2;
    v7 = *(double *)(a2 + 8);
    v9 = a3 - v7;
    v10 = v7 < a3;
    v11 = 0.0;
    if (!v10)
      v9 = 0.0;
    v12 = *(double *)(a1 + 2168);
    v13 = v12 - v9;
    if (v8 < a3)
      v11 = a3 - v8;
    v14 = v12 - v11;
    v38 = v12 - v9;
    v39 = v12 - v11;
    v40 = v8;
    v50 = 0;
    v41 = 0;
    v15 = *(_QWORD *)(a1 + 192);
    v16 = *(float *)(a1 + 1008);
    if (v15)
      v17 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((v15 + *(_QWORD *)(a1 + 184) - 1) / 0x1AuLL))
                      + 152 * ((v15 + *(_QWORD *)(a1 + 184) - 1) % 0x1AuLL)
                      + 72)
          + v16;
    else
      v17 = *(float *)(a1 + 1008);
    v42 = v17;
    v43 = v14;
    v44 = v16;
    v45 = 0;
    v46 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 128))(a1, v8);
    v18 = *(_QWORD *)(a1 + 192);
    if (v18)
      v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((v18 + *(_QWORD *)(a1 + 184) - 1) / 0x1AuLL))
                      + 152 * ((v18 + *(_QWORD *)(a1 + 184) - 1) % 0x1AuLL)
                      + 108)
          + 1;
    else
      v19 = 1;
    v47 = v19;
    v48 = 0u;
    v49 = 0u;
    if (*(_QWORD *)(a1 + 96))
    {
      v20 = sub_10047DC74((_QWORD *)a1, (uint64_t)&v26, *(double *)a2);
      v21 = DWORD1(v27);
      if (!v20)
        v21 = 0;
    }
    else
    {
      v21 = *(_DWORD *)(a1 + 1060);
    }
    LODWORD(v50) = v21;
    v35 = 0;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 120))(a1, &v26))
    {
      DWORD2(v48) = DWORD2(v33);
      v22 = DWORD2(v33) + 1;
    }
    else
    {
      v22 = 1;
    }
    if (*(_BYTE *)(a2 + 20))
    {
      sub_10047C334(a1);
      DWORD2(v48) = v22;
    }
    v23 = *(_DWORD *)(a2 + 16);
    if (v23)
    {
      if (v23 != 1)
      {
LABEL_27:
        HIDWORD(v45) = (*(uint64_t (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)a1 + 136))(a1, *(_QWORD *)(a1 + 96), v8 - vabdd_f64(v14, v13), v8);
        uuid_copy(v37, (const unsigned __int8 *)(a1 + 1014));
        *(_QWORD *)&v49 = sub_100AD3C5C((uint64_t)&v36, a1);
        sub_10047AF20(a1, (uint64_t)&v36);
        sub_101319170((_OWORD *)(a1 + 1648));
        return v6;
      }
      v24 = 2;
    }
    else
    {
      v24 = 1;
    }
    LODWORD(v45) = v24;
    goto LABEL_27;
  }
  return v6;
}

double sub_10047E62C(uint64_t a1, int a2)
{
  return sub_101318FD0(a1 + 1648, a2);
}

BOOL sub_10047E634(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  _BOOL8 result;
  double v11;
  int v12;
  float v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  double v23;
  double v24;
  _DWORD v25[14];
  double v26;

  result = sub_10047B8C8(a1);
  if (result)
  {
    if (*(_BYTE *)(a1 + 1013))
    {
      v11 = *(float *)(a1 + 1008);
      v12 = (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)a1 + 128))(a1, a3);
      v13 = sub_100CF3ADC(a1 + 1544, a3);
      v14 = *(_DWORD *)(a1 + 1064);
      v15 = (*(uint64_t (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)a1 + 136))(a1, *(_QWORD *)(a1 + 96), a3 - a5, a3);
      if (*(_QWORD *)(a1 + 96))
      {
        v16 = sub_10047DC74((_QWORD *)a1, (uint64_t)v25, a3);
        v17 = v25[5];
        if (!v16)
          v17 = 0;
      }
      else
      {
        v17 = *(_DWORD *)(a1 + 1060);
      }
      v18 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      *(double *)(a2 + 40) = a4 - a5;
      *(double *)(a2 + 48) = a4;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(double *)(a2 + 80) = a4;
      *(double *)(a2 + 88) = v11;
      *(_QWORD *)(a2 + 96) = 0;
      *(_DWORD *)(a2 + 104) = v12;
      *(_DWORD *)(a2 + 108) = 0;
      *(float *)(a2 + 112) = v13;
      *(_DWORD *)(a2 + 116) = v14;
      *(_DWORD *)(a2 + 120) = 0;
      *(_DWORD *)(a2 + 124) = v15;
      *(_QWORD *)(a2 + 128) = 0;
      *(_QWORD *)(a2 + 136) = 0;
      *(_DWORD *)(a2 + 144) = v17;
      if (v13 > 0.0)
        v18 = (*(uint64_t (**)(uint64_t, _QWORD, double, double))(*(_QWORD *)a1 + 136))(a1, *(int *)(a1 + 1624), 0.0, a3);
      *(_DWORD *)(a2 + 100) = v18;
      v19 = *(_QWORD *)(a1 + 192);
      if (v19)
      {
        v20 = *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((v19 + *(_QWORD *)(a1 + 184) - 1) / 0x1AuLL))
            + 152 * ((v19 + *(_QWORD *)(a1 + 184) - 1) % 0x1AuLL);
        LODWORD(v19) = *(_DWORD *)(v20 + 120);
        v21 = *(_DWORD *)(v20 + 108);
      }
      else
      {
        v21 = 0;
      }
      *(_DWORD *)(a2 + 120) = v19;
      *(_DWORD *)(a2 + 108) = v21;
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1))
      {
        v22 = *(_QWORD *)(a1 + 192);
        if (v22)
          v23 = *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 160) + 8 * ((v22 + *(_QWORD *)(a1 + 184) - 1) / 0x1AuLL))
                          + 152 * ((v22 + *(_QWORD *)(a1 + 184) - 1) % 0x1AuLL)
                          + 72);
        else
          v23 = 0.0;
        (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)a1 + 120))(a1, v25);
        v24 = v23 + sub_101318F44(a1 + 1648, v26);
        if (v23 + *(float *)(a1 + 1008) + -2.0 < v24)
          v24 = v23 + *(float *)(a1 + 1008) + -2.0;
      }
      else
      {
        v24 = sub_100AD3730(a1 + 2104);
      }
      *(double *)(a2 + 72) = v24;
      uuid_copy((unsigned __int8 *)(a2 + 8), (const unsigned __int8 *)(a1 + 1014));
      uuid_parse("00000000-0000-0000-0000-000000000000", (unsigned __int8 *)(a2 + 24));
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

double sub_10047E8F8(uint64_t a1, double a2)
{
  return sub_100AD3738((double *)(a1 + 2104), a2);
}

void sub_10047E900(uint64_t a1, double a2, double a3)
{
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1) & 1) == 0)
  {
    if (sub_100AD3B3C(a1))
      sub_10047C13C(a1, a2, a3);
  }
}

__n128 sub_10047E964@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v6;
  double v7;
  double v8;
  double v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint8_t *v28;
  uint8_t buf[4];
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;

  v6 = *(double *)(a1 + 992);
  v7 = *(double *)(a1 + 2176);
  if (v6 >= v7)
  {
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10213D280);
    v15 = qword_10229FCA8;
    if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 992);
      v17 = *(_QWORD *)(a1 + 2176);
      *(_DWORD *)buf = 134218240;
      v30 = v16;
      v31 = 2048;
      v32 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session start time should be > session end time, not alterting timestamps, sessionStart, %f, sessionEnd, %f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_21;
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10213D280);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "Session start time should be > session end time, not alterting timestamps, sessionStart, %f, sessionEnd, %f");
    goto LABEL_25;
  }
  v8 = v6 + 0.1;
  if (*(double *)(a2 + 40) >= v8)
    v8 = *(double *)(a2 + 40);
  v9 = v7 + -0.1;
  if (v9 >= *(double *)(a2 + 48))
    v9 = *(double *)(a2 + 48);
  if (v8 < v9)
  {
    v10 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a2;
    *(_OWORD *)(a3 + 16) = v10;
    *(_QWORD *)(a3 + 32) = *(_QWORD *)(a2 + 32);
    *(double *)(a3 + 40) = v8;
    *(double *)(a3 + 48) = v9;
    v11 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a3 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a3 + 104) = v11;
    v12 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a3 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a3 + 136) = v12;
    result = *(__n128 *)(a2 + 56);
    v14 = *(_OWORD *)(a2 + 72);
    *(__n128 *)(a3 + 56) = result;
    *(_OWORD *)(a3 + 72) = v14;
    return result;
  }
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10213D280);
  v19 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_ERROR))
  {
    v20 = *(_QWORD *)(a1 + 992);
    v21 = *(_QWORD *)(a1 + 2176);
    v22 = *(_QWORD *)(a2 + 40);
    v23 = *(_QWORD *)(a2 + 48);
    *(_DWORD *)buf = 134218752;
    v30 = v20;
    v31 = 2048;
    v32 = v21;
    v33 = 2048;
    v34 = v22;
    v35 = 2048;
    v36 = v23;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "sanitizing entry resulted in startTime > endTime, not altering timestamps, sessionStart, %f, sessionEnd, %f, entryStart, %f, entryEnd, %f", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10213D280);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 16, "sanitizing entry resulted in startTime > endTime, not altering timestamps, sessionStart, %f, sessionEnd, %f, entryStart, %f, entryEnd, %f");
LABEL_25:
    v28 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 0, "CLSwimEntry CLSwimDataStore::sanitizeEntryStartEndTimes(const CLSwimEntry &)", "%s\n", v18);
    if (v28 != buf)
      free(v28);
  }
LABEL_21:
  v24 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a3 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a3 + 112) = v24;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(a3 + 144) = *(_QWORD *)(a2 + 144);
  v25 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a3 + 48) = v25;
  v26 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a3 + 80) = v26;
  result = *(__n128 *)a2;
  v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a3 = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 16) = v27;
  return result;
}

__n128 sub_10047ED34(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __n128 result;
  __int128 v14;
  __int128 v15;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 26 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100480620(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x1A)) + 152 * (v7 % 0x1A);
  v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)(v8 + 16) = v9;
  v10 = *(_OWORD *)(a2 + 32);
  v11 = *(_OWORD *)(a2 + 48);
  v12 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(v8 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(v8 + 80) = v12;
  *(_OWORD *)(v8 + 32) = v10;
  *(_OWORD *)(v8 + 48) = v11;
  result = *(__n128 *)(a2 + 96);
  v14 = *(_OWORD *)(a2 + 112);
  v15 = *(_OWORD *)(a2 + 128);
  *(_QWORD *)(v8 + 144) = *(_QWORD *)(a2 + 144);
  *(_OWORD *)(v8 + 112) = v14;
  *(_OWORD *)(v8 + 128) = v15;
  *(__n128 *)(v8 + 96) = result;
  ++a1[5];
  return result;
}

uint64_t sub_10047EE08(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD *, _QWORD))(*a1 + 136))(a1, a1[12]);
}

uint64_t sub_10047EE18(_QWORD *a1, unint64_t a2, double a3, double a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16;
  unint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v22;
  _OWORD v24[2];

  sub_10115A5CC(v24);
  v8 = a1[11] + a1[12];
  v9 = a1[8];
  v10 = a1[9];
  v11 = (unint64_t *)(v9 + 8 * (v8 / 0xAA));
  if (v10 == v9)
    v12 = 0;
  else
    v12 = *v11 + 24 * (v8 % 0xAA);
  v13 = 0;
  while (1)
  {
    v14 = v10 == v9 ? 0 : *(_QWORD *)(v9 + 8 * (a1[11] / 0xAAuLL)) + 24 * (a1[11] % 0xAAuLL);
    if (v12 == v14)
      return sub_10115A604((uint64_t)v24);
    v15 = *v11;
    if (v12 == *v11)
    {
      v19 = *(v11 - 1);
      v20 = *(double *)(v19 + 4056);
      if (v20 < a3 || v13 >= a2)
        return sub_10115A604((uint64_t)v24);
      if (v20 > a4)
      {
        v15 = v12;
        goto LABEL_24;
      }
      v18 = v19 + 4080;
LABEL_23:
      sub_10115A5D8((uint64_t)v24, *(_DWORD *)(v18 - 16));
      ++v13;
      v15 = *v11;
      goto LABEL_24;
    }
    v16 = *(double *)(v12 - 24);
    if (v16 < a3 || v13 >= a2)
      return sub_10115A604((uint64_t)v24);
    v18 = v12;
    if (v16 <= a4)
      goto LABEL_23;
LABEL_24:
    if (v12 == v15)
    {
      v22 = *--v11;
      v12 = v22 + 4080;
    }
    v12 -= 24;
    v9 = a1[8];
    v10 = a1[9];
  }
}

uint64_t sub_10047EF7C(uint64_t a1)
{
  return sub_100DCA1F8(a1 + 1072);
}

void sub_10047EF84(uint64_t a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  double v7;
  uint8_t buf[4];
  double v9;

  *(double *)(a1 + 2176) = a2;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_10213D280);
  v3 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "data store setting session end time to %f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_10213D280);
    v6 = 134217984;
    v7 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "data store setting session end time to %f", COERCE_DOUBLE(&v6));
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLSwimDataStore::setSessionEndTime(CFAbsoluteTime)", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

float sub_10047F130(uint64_t a1)
{
  return *(float *)(a1 + 1008);
}

uint64_t sub_10047F138(uint64_t a1)
{
  return *(unsigned int *)(a1 + 1056);
}

BOOL sub_10047F140(uint64_t a1)
{
  return *(_QWORD *)(a1 + 2120) == 0;
}

double sub_10047F150(uint64_t a1)
{
  return *(double *)(a1 + 1000);
}

void sub_10047F158(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

void sub_10047F184(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213D2B0;
  sub_100008848(a1 + 64, *(_QWORD **)(a1 + 72));
  sub_10047F25C((_QWORD *)(a1 + 16));
  operator delete();
}

void sub_10047F1D4(_QWORD *a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = (void **)a1[3];
  v3 = a1[4];
  a1[7] = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = a1[4];
      v2 = (void **)(a1[3] + 8);
      a1[3] = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v4 >> 3 == 2)
  {
    v6 = 512;
LABEL_7:
    a1[6] = v6;
  }
  v8 = (_QWORD *)a1[9];
  v7 = a1 + 9;
  sub_100008848((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *v7 = 0;
  v7[1] = 0;
}

uint64_t sub_10047F25C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_10047F2F0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x200;
  v4 = v2 - 512;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10047F5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10047F604(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x200)
    a2 = 1;
  if (v2 < 0x400)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 512;
  }
  return v4 ^ 1u;
}

uint64_t sub_10047F660(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

uint64_t sub_10047F6F4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 13;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 26;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

_OWORD *sub_10047F788(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_10019C424((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x58uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *(_OWORD *)((char *)v6 + 68) = *(_OWORD *)(a3 + 36);
    sub_1000145B0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void sub_10047F828(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _QWORD **a5)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v11;
  uint64_t *i;
  uint64_t v13;
  uint64_t v14;
  uint64_t j;

  v7 = a2;
  v8 = *a5;
  if (a1 == a3)
  {
    while (v7 != a4)
    {
      sub_10047ED34(v8, v7);
      v7 += 152;
    }
  }
  else
  {
    v11 = *a1 + 3952;
    if (v11 != a2)
    {
      do
      {
        sub_10047ED34(v8, v7);
        v7 += 152;
      }
      while (v7 != v11);
    }
    *a5 = v8;
    for (i = a1 + 1; i != a3; ++i)
    {
      v13 = 0;
      v14 = *i;
      do
      {
        sub_10047ED34(v8, v14 + v13);
        v13 += 152;
      }
      while (v13 != 3952);
      *a5 = v8;
    }
    for (j = *a3; j != a4; j += 152)
      sub_10047ED34(v8, j);
  }
  *a5 = v8;
}

uint64_t sub_10047F918(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x1A)
    a2 = 1;
  if (v2 < 0x34)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 26;
  }
  return v4 ^ 1u;
}

uint64_t sub_10047F974(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 26 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x1A)
    a2 = 1;
  if (v5 < 0x34)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

_QWORD *sub_10047F9E8(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x79435E50D79435E5 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 25 - v3;
      v6 = &v2[-(v5 / 0x1A)];
      *result = v6;
      v4 = *v6 + 152 * (26 * (v5 / 0x1A) - v5) + 3800;
    }
    else
    {
      *result = &v2[v3 / 0x1A];
      v4 = v2[v3 / 0x1A] + 152 * (v3 % 0x1A);
    }
    result[1] = v4;
  }
  return result;
}

__n128 sub_10047FA9C@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10047FB68(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 3952;
    }
    v18 = *a1 + 3952;
    v19 = a2;
  }
  sub_10047FB68(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_10047FB68@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0x86BCA1AF286BCA1BLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0x86BCA1AF286BCA1BLL * ((v11 - a1) >> 3);
      v11 -= 152 * v12;
      a4 -= 152 * v12;
      if (v12)
        result = memmove(a4, v11, 152 * v12);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 3952);
    }
    if ((char *)(*v6 + 3952) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_10047FC48(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 3952); ; i = v12 + 3952)
    {
      sub_10047FCD8(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10047FCD8(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_10047FCD8@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0x86BCA1AF286BCA1BLL * ((v10 - __dst + 3952) >> 3);
      v12 = (uint64_t)(0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0x86BCA1AF286BCA1BLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 152 * v12);
      v7 += 152 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 152 * v12;
    if ((char *)*(v6 - 1) + 3952 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

uint64_t sub_10047FDC4(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0xAA)
    a2 = 1;
  if (v2 < 0x154)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 170;
  }
  return v4 ^ 1u;
}

void sub_10047FE20(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004800E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100480134(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004803FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_10048044C()
{
  operator delete();
}

__n128 sub_100480460(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = off_10213D2F0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_DWORD *)v2 + 6) = *(_DWORD *)(a1 + 24);
  return result;
}

__n128 sub_1004804A0(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10213D2F0;
  result = *(__n128 *)(a1 + 8);
  *(_DWORD *)(a2 + 24) = *(_DWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL sub_1004804C8(uint64_t a1, uint64_t a2)
{
  int v2;

  v2 = *(_DWORD *)(a1 + 8);
  return (v2 == 5 || *(_DWORD *)(a2 + 100) == v2)
      && uuid_compare((const unsigned __int8 *)(a2 + 8), (const unsigned __int8 *)(a1 + 12)) == 0;
}

uint64_t sub_10048050C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_100480548()
{
}

_QWORD *sub_100480554(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1004805CC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1004805B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1004805CC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x24924924924924ALL)
    sub_100259694();
  result = (char *)sub_1002A7588((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void sub_100480620(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x1A;
  v4 = v2 - 26;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xF70uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xF70uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xF70uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004808E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

BOOL sub_100480934()
{
  return os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100480948()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3240), OS_LOG_TYPE_INFO);
}

BOOL sub_100480958()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3240));
}

void sub_100480BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100481760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_100481774(uint64_t a1)
{
  id Weak;

  Weak = objc_loadWeak((id *)(a1 + 32));
  return _objc_msgSend(Weak, "enableBOMScan");
}

NSDictionary *__cdecl sub_1004818E0(id a1)
{
  return (NSDictionary *)&off_10221FA70;
}

NSDictionary *sub_100481A44(uint64_t a1)
{
  NSNumber *v2;
  _QWORD v4[2];
  _QWORD v5[2];

  v4[0] = CFSTR("bomDisableCount");
  v2 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", *(_QWORD *)(a1 + 32));
  v4[1] = CFSTR("timeSinceLastDisable");
  v5[0] = v2;
  v5[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v5, v4, 2);
}

id sub_100481EA4(uint64_t a1)
{
  NSObject *v2;
  id *v3;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  if (qword_1022A0130 != -1)
    dispatch_once(&qword_1022A0130, &stru_10213D408);
  v2 = qword_1022A0138;
  if (os_log_type_enabled((os_log_t)qword_1022A0138, OS_LOG_TYPE_INFO))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#ut BOM reset check\"}", (uint8_t *)v5, 0x12u);
  }
  v3 = (id *)(a1 + 32);
  objc_msgSend(objc_loadWeak(v3), "resetBOMScanIfNeeded");
  return objc_msgSend(objc_loadWeak(v3), "scheduleDailyResetBOMScan");
}

void sub_100481FC4(id a1)
{
  qword_1022A0138 = (uint64_t)os_log_create("com.apple.locationd.Position", "TrackingAvoidance");
}

id sub_100482244(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_setup");
}

id sub_1004826C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_registerForEventsNotification");
}

id sub_100482900(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_unregisterForEventsNotification");
}

id sub_100482D08(uint64_t a1)
{
  id v2;
  _QWORD v4[5];

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "silo");
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100482D78;
  v4[3] = &unk_10212BB58;
  v4[4] = *(_QWORD *)(a1 + 32);
  return objc_msgSend(v2, "afterInterval:async:", v4, 5.0);
}

void sub_100482D78(uint64_t a1)
{
  NSObject *v1;
  const char *v2;
  uint8_t *v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24))
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213D4B8);
    v1 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v11 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke";
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s, device, previously retrieved", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      v8 = 136315138;
      v9 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, device, previously retrieved", (const char *)&v8);
      v3 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke", "%s\n", v2);
      if (v3 != buf)
        free(v3);
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213D4B8);
    v5 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v11 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "%s, device, timer retrieve", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      v8 = 136315138;
      v9 = "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, device, timer retrieve", (const char *)&v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _scheduleWifiArtifactsAllocation:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    objc_msgSend(*(id *)(a1 + 32), "_registerForLqmScoreNotifications");
  }
}

void sub_1004849F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD v4[6];

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 16);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100484A4C;
  v4[3] = &unk_10212BB30;
  v4[4] = a2;
  v4[5] = v2;
  dispatch_async(v3, v4);
}

void sub_100484A4C(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;
  id v5;
  unsigned int v6;
  _BOOL8 v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  id v11;
  NSObject *v12;
  const __CFString *v13;
  NSObject *v14;
  const __CFString *v15;
  const __CFString *v16;
  const __CFString *v17;
  const char *v18;
  uint8_t *v19;
  const __CFString *v20;
  const __CFString *v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  const char *v25;
  __int16 v26;
  const __CFString *v27;
  __int16 v28;
  const __CFString *v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  const __CFString *v33;
  __int16 v34;
  const __CFString *v35;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    v3 = objc_msgSend(v2, "type");
    if (v3 == (id)9)
    {
      v11 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 40), "wakeOnWirelessEnabled");
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v11), CFSTR("isWoWEnabledKey"));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      v12 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v13 = CFSTR("Disabled");
        if ((_DWORD)v11)
          v13 = CFSTR("Enabled");
        *(_DWORD *)buf = 136315394;
        v31 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        v32 = 2112;
        v33 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "%s, wow changed to, %@", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10213D4B8);
        v17 = CFSTR("Disabled");
        if ((_DWORD)v11)
          v17 = CFSTR("Enabled");
        v24 = 136315394;
        v25 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        v26 = 2112;
        v27 = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, wow changed to, %@", &v24, 22);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      objc_msgSend(*(id *)(a1 + 40), "submitWowChangeEventToBiome");
    }
    else if (v3 == (id)6)
    {
      v4 = objc_msgSend(*(id *)(a1 + 32), "info");
      v5 = objc_msgSend(v4, "objectForKeyedSubscript:", CWFEventLinkChangeStatusKey);
      v6 = objc_msgSend(v5, "isLinkDown");
      if (v6)
        v7 = objc_msgSend(v5, "reason") != 1 && objc_msgSend(v5, "reason") != 5;
      else
        v7 = 1;
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v6 ^ 1), CFSTR("isWiFiStartingKey"));
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 48), "setObject:forKey:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7), CFSTR("isWiFiSwitchOnKey"));
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      v14 = qword_1022A0088;
      if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
      {
        v15 = CFSTR("NO");
        v31 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        if (v6)
          v16 = CFSTR("YES");
        else
          v16 = CFSTR("NO");
        *(_DWORD *)buf = 136315650;
        v33 = v16;
        v32 = 2112;
        if (v7)
          v15 = CFSTR("YES");
        v34 = 2112;
        v35 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "%s, isLinkDown, %@, isWifiSwitchOn, %@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0080 != -1)
          dispatch_once(&qword_1022A0080, &stru_10213D4B8);
        v20 = CFSTR("NO");
        if (v6)
          v21 = CFSTR("YES");
        else
          v21 = CFSTR("NO");
        v24 = 136315650;
        v25 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
        v27 = v21;
        v26 = 2112;
        if (v7)
          v20 = CFSTR("YES");
        v28 = 2112;
        v29 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, isLinkDown, %@, isWifiSwitchOn, %@", COERCE_DOUBLE(136315650), &v24, 32);
        v23 = (uint8_t *)v22;
        sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v22);
        if (v23 != buf)
          free(v23);
      }
      objc_msgSend(*(id *)(a1 + 40), "submitWifiAvailabilityEventToBiome");
    }
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213D4B8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315138;
      v31 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke_2";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "%s, event nil", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      v24 = 136315138;
      v25 = "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, event nil", (const char *)&v24);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _setupMonitoringEvent]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

id sub_1004850D0(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_submitWifiAvailabilityEventToBiome");
}

void sub_10048548C(id a1, id a2, id a3, BOOL *a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  const char *v10;
  __int16 v11;
  id v12;
  __int16 v13;
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  id v20;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10213D4B8);
  v6 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315650;
    v16 = "-[CLEmergencyWifiAvailability _submitWifiAvailabilityEventToBiome]_block_invoke";
    v17 = 2112;
    v18 = a2;
    v19 = 2112;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "%s, key, %@, value, %@", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213D4B8);
    v9 = 136315650;
    v10 = "-[CLEmergencyWifiAvailability _submitWifiAvailabilityEventToBiome]_block_invoke";
    v11 = 2112;
    v12 = a2;
    v13 = 2112;
    v14 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 2, "%s, key, %@, value, %@", &v9, 32);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLEmergencyWifiAvailability _submitWifiAvailabilityEventToBiome]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

id sub_1004856C4(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "_submitWowChangeEventToBiome");
}

void sub_100485BAC(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_100485C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  NSDictionary *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v15 = CMPedestrianFenceIdentifier;
    v16 = a2;
    v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    sub_100487B04("PedestrianFence/kCLConnectionMessagePedestrianFence", &v14, &v12);
    v3 = *(_QWORD *)(a1 + 8);
    v11 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v3);
    if (v11)
    {
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = v13;
    if (v13)
    {
      v9 = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_100485D64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100485D94(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  NSDictionary *v14;
  uint64_t v15;
  NSNumber *v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v15 = CMErrorMessage;
    v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", a2);
    v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    sub_100487B04("PedestrianFence/kCLConnectionMessagePedestrianFence", &v14, &v12);
    v3 = *(_QWORD *)(a1 + 8);
    v11 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v3);
    if (v11)
    {
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = v13;
    if (v13)
    {
      v9 = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_100485EE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100485F10(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  uint64_t v5;
  void *i;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  id obj;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  NSDictionary *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  id v28;
  _QWORD v29[3];
  _QWORD v30[3];
  _BYTE v31[128];

  if (*(_QWORD *)(a1 + 8))
  {
    v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    obj = objc_msgSend(a2, "allKeys");
    v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v24;
      do
      {
        for (i = 0; i != v4; i = (char *)i + 1)
        {
          if (*(_QWORD *)v24 != v5)
            objc_enumerationMutation(obj);
          v7 = *(_QWORD *)(*((_QWORD *)&v23 + 1) + 8 * (_QWORD)i);
          v8 = objc_msgSend(a2, "objectForKeyedSubscript:", v7);
          v29[0] = CFSTR("radius");
          objc_msgSend(v8, "radius");
          v30[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
          v29[1] = CFSTR("radialDisplacement");
          objc_msgSend(v8, "radialDisplacement");
          v30[1] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:");
          v29[2] = CFSTR("duration");
          objc_msgSend(v8, "duration");
          v30[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
          objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v30, v29, 3), v7);
        }
        v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v23, v31, 16);
      }
      while (v4);
    }
    v27 = CMPedestrianFenceStatus;
    v28 = v3;
    v22 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v28, &v27, 1);
    sub_100487C80("PedestrianFence/kCLConnectionMessagePedestrianFenceStatus", &v22, &v20);
    v9 = *(_QWORD *)(a1 + 8);
    v19 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v9);
    if (v19)
    {
      v12 = (unint64_t *)&v19->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v14 = v21;
    if (v21)
    {
      v15 = (unint64_t *)&v21->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_1004861A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v5;
  va_list va;
  uint64_t v7;
  va_list va1;

  va_start(va1, a4);
  va_start(va, a4);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100486240(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  NSDictionary *v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_QWORD *)(a1 + 8))
  {
    v15 = CMBackgroundInertialOdometry;
    v16 = a2;
    v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v16, &v15, 1);
    sub_100487CE0("PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", &v14, &v12);
    v3 = *(_QWORD *)(a1 + 8);
    v11 = v13;
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    CLConnection::sendMessage(v3);
    if (v11)
    {
      v6 = (unint64_t *)&v11->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v8 = v13;
    if (v13)
    {
      v9 = (unint64_t *)&v13->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_100486378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004863BC(uint64_t a1, uint64_t a2, void *a3)
{
  CLPedestrianFenceClientDelegate *v5;
  id v6;
  CLBackgroundInertialOdometryClientDelegate *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[5];
  _QWORD v13[5];

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_10213D4E8;
  *(_BYTE *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  v5 = -[CLPedestrianFenceClientDelegate initWithPedestrianFenceClient:]([CLPedestrianFenceClientDelegate alloc], "initWithPedestrianFenceClient:", a1);
  *(_QWORD *)(a1 + 24) = v5;
  -[CLPedestrianFenceClientDelegate setValid:](v5, "setValid:", 1);
  v6 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLPedestrianFenceService"));
  *(_QWORD *)(a1 + 32) = v6;
  objc_msgSend(v6, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 24), objc_msgSend(a3, "silo"));
  objc_msgSend(*(id *)(a1 + 32), "setDelegateEntityName:", "CLPedestrianFenceClient");
  v7 = -[CLBackgroundInertialOdometryClientDelegate initWithPedestrianFenceClient:]([CLBackgroundInertialOdometryClientDelegate alloc], "initWithPedestrianFenceClient:", a1);
  *(_QWORD *)(a1 + 40) = v7;
  -[CLBackgroundInertialOdometryClientDelegate setValid:](v7, "setValid:", 1);
  v8 = objc_msgSend(objc_msgSend(a3, "vendor"), "proxyForService:", CFSTR("CLBackgroundInertialOdometryService"));
  *(_QWORD *)(a1 + 48) = v8;
  objc_msgSend(v8, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 40), objc_msgSend(a3, "silo"));
  objc_msgSend(*(id *)(a1 + 48), "setDelegateEntityName:", "CLBackgroundInertialOdometryService");
  v9 = *(_QWORD *)(a1 + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1004865A4;
  v13[3] = &unk_10213D510;
  v13[4] = a1;
  CLConnection::setDefaultMessageHandler(v9, v13);
  v10 = *(_QWORD *)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_100486644;
  v12[3] = &unk_10212ECA0;
  v12[4] = a1;
  CLConnection::setDisconnectionHandler(v10, v12);
  return a1;
}

void sub_100486570(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 119) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  sub_10008ABA0((_QWORD *)v1);
  _Unwind_Resume(a1);
}

void sub_1004865A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 16))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_100486630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100486644(uint64_t a1)
{
  return sub_10048664C(*(_QWORD *)(a1 + 32));
}

id sub_10048664C(uint64_t a1)
{
  id result;
  _QWORD *v3;

  result = objc_msgSend(*(id *)(a1 + 32), "teardownClient:", *(_QWORD *)(a1 + 24));
  if (*(_BYTE *)(a1 + 56))
  {
    v3 = (_QWORD *)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      v3 = (_QWORD *)*v3;
    result = objc_msgSend(*(id *)(a1 + 32), "odometryClient:requestInterval:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), &off_10221E028);
  }
  if (*(_BYTE *)(a1 + 88))
    return objc_msgSend(*(id *)(a1 + 48), "stopBackgroundInertialOdometryUpdatesForClient:", *(_QWORD *)(a1 + 40));
  return result;
}

_QWORD *sub_1004866CC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213D4E8;

  *(_QWORD *)(a1 + 32) = 0;
  objc_msgSend(*(id *)(a1 + 24), "setValid:", 0);

  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  objc_msgSend(*(id *)(a1 + 40), "setValid:", 0);

  *(_QWORD *)(a1 + 40) = 0;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return sub_10008ABA0((_QWORD *)a1);
}

void sub_100486768(uint64_t a1)
{
  sub_1004866CC(a1);
  operator delete();
}

void sub_10048678C(uint64_t a1, CLConnectionMessage **a2)
{
  _QWORD *v4;
  int v5;
  _QWORD *v6;
  int v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  char isEntitled;
  char v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  _QWORD *v17;
  int v18;
  _QWORD *v19;
  int v20;
  NSObject *v21;
  const char *v22;
  _QWORD *v23;
  int v24;
  _QWORD *v25;
  int v26;
  _QWORD *v27;
  int v28;
  CLConnectionMessage *v29;
  CLConnectionMessage *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  NSObject *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  CLConnectionMessage *v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t *v45;
  CLConnectionMessage *v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  CLConnectionMessage *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  CLConnectionMessage *v54;
  unint64_t *v55;
  unint64_t v56;
  CLConnectionMessage *v57[2];
  CLConnectionMessage *v58[2];
  CLConnectionMessage *v59[2];
  CLConnectionMessage *v60[2];
  CLConnectionMessage *v61[2];
  int v62;
  uint64_t v63;
  _BYTE __p[12];
  char v65;

  v4 = (_QWORD *)CLConnectionMessage::name(*a2);
  v5 = *((char *)v4 + 23);
  if (v5 < 0)
  {
    if (v4[1] != 52)
      goto LABEL_7;
    v4 = (_QWORD *)*v4;
  }
  else if (v5 != 52)
  {
    goto LABEL_7;
  }
  if (!memcmp(v4, "PedestrianFence/kCLConnectionMessageInertialOdometry", 0x34uLL))
    goto LABEL_16;
LABEL_7:
  v6 = (_QWORD *)CLConnectionMessage::name(*a2);
  v7 = *((char *)v6 + 23);
  if ((v7 & 0x80000000) == 0)
  {
    if (v7 != 62)
      goto LABEL_13;
LABEL_12:
    if (memcmp(v6, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", 0x3EuLL))
      goto LABEL_13;
LABEL_16:
    v11 = *(_QWORD *)(a1 + 8);
    sub_1015A2E04(__p, "com.apple.locationd.inertialodometry");
    isEntitled = CLConnection::isEntitled(v11, __p);
    v13 = isEntitled;
    if (v65 < 0)
    {
      operator delete(*(void **)__p);
      if ((v13 & 1) != 0)
        goto LABEL_29;
    }
    else if ((isEntitled & 1) != 0)
    {
      goto LABEL_29;
    }
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10213D590);
    v21 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)__p = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Subscription: Client not entitled.", __p, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(__p, 0x65CuLL);
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_10213D590);
    LOWORD(v62) = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FF88, 16, "Subscription: Client not entitled.", &v62, 2);
    v16 = (char *)v22;
    sub_100512490("Generic", 1, 0, 0, "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
    goto LABEL_46;
  }
  if (v6[1] == 62)
  {
    v6 = (_QWORD *)*v6;
    goto LABEL_12;
  }
LABEL_13:
  v8 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(__p, "com.apple.locationd.pedestrianfencemanager");
  v9 = CLConnection::isEntitled(v8, __p);
  v10 = v9;
  if (v65 < 0)
  {
    operator delete(*(void **)__p);
    if ((v10 & 1) != 0)
      goto LABEL_29;
  }
  else if ((v9 & 1) != 0)
  {
LABEL_29:
    v17 = (_QWORD *)CLConnectionMessage::name(*a2);
    v18 = *((char *)v17 + 23);
    if (v18 < 0)
    {
      if (v17[1] != 51)
        goto LABEL_35;
      v17 = (_QWORD *)*v17;
    }
    else if (v18 != 51)
    {
      goto LABEL_35;
    }
    if (!memcmp(v17, "PedestrianFence/kCLConnectionMessagePedestrianFence", 0x33uLL))
    {
      v29 = *a2;
      v30 = a2[1];
      v61[0] = v29;
      v61[1] = v30;
      if (v30)
      {
        v31 = (unint64_t *)((char *)v30 + 8);
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
      }
      sub_100486FCC(a1, v61);
      if (!v30)
        return;
      v33 = (unint64_t *)((char *)v30 + 8);
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      goto LABEL_111;
    }
LABEL_35:
    v19 = (_QWORD *)CLConnectionMessage::name(*a2);
    v20 = *((char *)v19 + 23);
    if (v20 < 0)
    {
      if (v19[1] != 61)
        goto LABEL_51;
      v19 = (_QWORD *)*v19;
    }
    else if (v20 != 61)
    {
      goto LABEL_51;
    }
    if (!memcmp(v19, "PedestrianFence/kCLConnectionMessagePedestrianFenceSimulation", 0x3DuLL))
    {
      v42 = *a2;
      v30 = a2[1];
      v60[0] = v42;
      v60[1] = v30;
      if (v30)
      {
        v43 = (unint64_t *)((char *)v30 + 8);
        do
          v44 = __ldxr(v43);
        while (__stxr(v44 + 1, v43));
      }
      sub_100487494(a1, v60);
      if (!v30)
        return;
      v45 = (unint64_t *)((char *)v30 + 8);
      do
        v34 = __ldaxr(v45);
      while (__stlxr(v34 - 1, v45));
      goto LABEL_111;
    }
LABEL_51:
    v23 = (_QWORD *)CLConnectionMessage::name(*a2);
    v24 = *((char *)v23 + 23);
    if (v24 < 0)
    {
      if (v23[1] != 58)
      {
LABEL_57:
        v25 = (_QWORD *)CLConnectionMessage::name(*a2);
        v26 = *((char *)v25 + 23);
        if (v26 < 0)
        {
          if (v25[1] != 52)
            goto LABEL_63;
          v25 = (_QWORD *)*v25;
        }
        else if (v26 != 52)
        {
LABEL_63:
          v27 = (_QWORD *)CLConnectionMessage::name(*a2);
          v28 = *((char *)v27 + 23);
          if (v28 < 0)
          {
            if (v27[1] != 62)
              goto LABEL_76;
            v27 = (_QWORD *)*v27;
          }
          else if (v28 != 62)
          {
LABEL_76:
            if (qword_10229FF70 != -1)
              dispatch_once(&qword_10229FF70, &stru_10213D5B0);
            v35 = qword_10229FF78;
            if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
            {
              v36 = (uint64_t *)CLConnectionMessage::name(*a2);
              if (*((char *)v36 + 23) >= 0)
                v37 = v36;
              else
                v37 = (uint64_t *)*v36;
              *(_DWORD *)__p = 136446210;
              *(_QWORD *)&__p[4] = v37;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_FAULT, "Got unhandled mesage of type %{public}s", __p, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(__p, 0x65CuLL);
              if (qword_10229FF70 != -1)
                dispatch_once(&qword_10229FF70, &stru_10213D5B0);
              v38 = qword_10229FF78;
              v39 = CLConnectionMessage::name(*a2);
              v40 = *(char *)(v39 + 23) >= 0 ? v39 : *(_QWORD *)v39;
              v62 = 136446210;
              v63 = v40;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v38, 17, "Got unhandled mesage of type %{public}s", &v62, 12);
              v16 = (char *)v41;
              sub_100512490("Generic", 1, 0, 0, "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v41);
              if (v16 != __p)
                goto LABEL_90;
            }
            return;
          }
          if (!memcmp(v27, "PedestrianFence/kCLConnectionMessageBackgroundInertialOdometry", 0x3EuLL))
          {
            v54 = a2[1];
            v57[0] = *a2;
            v57[1] = v54;
            if (v54)
            {
              v55 = (unint64_t *)((char *)v54 + 8);
              do
                v56 = __ldxr(v55);
              while (__stxr(v56 + 1, v55));
            }
            sub_1004879D8(a1, v57);
            sub_100261F44((uint64_t)v57);
            return;
          }
          goto LABEL_76;
        }
        if (memcmp(v25, "PedestrianFence/kCLConnectionMessageInertialOdometry", 0x34uLL))
          goto LABEL_63;
        v50 = *a2;
        v30 = a2[1];
        v58[0] = v50;
        v58[1] = v30;
        if (v30)
        {
          v51 = (unint64_t *)((char *)v30 + 8);
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        sub_10048791C(a1, v58);
        if (!v30)
          return;
        v53 = (unint64_t *)((char *)v30 + 8);
        do
          v34 = __ldaxr(v53);
        while (__stlxr(v34 - 1, v53));
LABEL_111:
        if (!v34)
        {
          (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v30 + 16))(v30);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v30);
        }
        return;
      }
      v23 = (_QWORD *)*v23;
    }
    else if (v24 != 58)
    {
      goto LABEL_57;
    }
    if (!memcmp(v23, "PedestrianFence/kCLConnectionMessagePedestrianFenceSession", 0x3AuLL))
    {
      v46 = *a2;
      v30 = a2[1];
      v59[0] = v46;
      v59[1] = v30;
      if (v30)
      {
        v47 = (unint64_t *)((char *)v30 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
      sub_1004876EC(a1, v59);
      if (!v30)
        return;
      v49 = (unint64_t *)((char *)v30 + 8);
      do
        v34 = __ldaxr(v49);
      while (__stlxr(v34 - 1, v49));
      goto LABEL_111;
    }
    goto LABEL_57;
  }
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_10213D5B0);
  v14 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Subscription: Client not entitled.", __p, 2u);
  }
  if (!sub_1001BFF7C(115, 0))
    return;
  bzero(__p, 0x65CuLL);
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_10213D5B0);
  LOWORD(v62) = 0;
  _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FF78, 16, "Subscription: Client not entitled.", &v62, 2);
  v16 = (char *)v15;
  sub_100512490("Generic", 1, 0, 0, "virtual void CLPedestrianFenceClient::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v15);
LABEL_46:
  if (v16 != __p)
LABEL_90:
    free(v16);
}

void sub_100486F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_100486FCC(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  id v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  id v15;
  id v16;
  unsigned int v17;
  void *v18;
  NSObject *v19;
  uint8_t *v20;
  _QWORD v21[2];
  uint8_t buf[1640];

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v4 = objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageSubscribeKey"));
  if (!v4)
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    v12 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for kCLConnectionMessageSubscribeKey key", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "Couldn't get value for kCLConnectionMessageSubscribeKey key", v21, 2, v21[0]);
LABEL_36:
    v20 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceUpdate(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
    if (v20 != buf)
      free(v20);
    return;
  }
  v5 = v4;
  v6 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceIdentifier);
  if (!v6)
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    v14 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Invalid paramaters!", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "Invalid paramaters!", v21, 2, v21[0]);
    goto LABEL_36;
  }
  v7 = v6;
  if (!objc_msgSend(v5, "BOOLValue"))
  {
    v15 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceForceClear);
    v16 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceForceClearAll);
    if (objc_msgSend(v15, "BOOLValue"))
    {
      v17 = objc_msgSend(v16, "BOOLValue");
      v18 = *(void **)(a1 + 32);
      if (v17)
        _objc_msgSend(v18, "forceClearAllFences");
      else
        _objc_msgSend(v18, "forceClearFence:");
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "clearFence:forClient:", v7, *(_QWORD *)(a1 + 24));
    }
    return;
  }
  v8 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceRadius);
  if (v8)
  {
    v11 = a1 + 24;
    v9 = *(_QWORD *)(a1 + 24);
    v10 = *(void **)(v11 + 8);
    objc_msgSend(v8, "floatValue");
    objc_msgSend(v10, "setFence:forClient:withRadius:", v7, v9);
    return;
  }
  if (qword_10229FF70 != -1)
    dispatch_once(&qword_10229FF70, &stru_10213D5B0);
  v19 = qword_10229FF78;
  if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Invalid parameters!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    LOWORD(v21[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "Invalid parameters!", v21, 2, v21[0]);
    goto LABEL_36;
  }
}

void sub_100487494(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  id v4;
  id v5;
  id v6;
  BOOL v7;
  NSObject *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  double v16;
  _WORD v17[8];
  uint8_t buf[1640];

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v4 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceIdentifier);
  v5 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceDelay);
  v6 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceShouldWake);
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7 || v6 == 0)
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    v9 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Invalid simulation paramaters!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_10213D5B0);
      v17[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "Invalid simulation paramaters!", v17, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceSimulation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
  else
  {
    v10 = v6;
    v13 = a1 + 24;
    v11 = *(_QWORD *)(a1 + 24);
    v12 = *(void **)(v13 + 8);
    objc_msgSend(v5, "doubleValue");
    _objc_msgSend(v12, "simulateFence:forClient:withExitAfterDelay:wake:", v4, v11, objc_msgSend(v10, "BOOLValue"), v16);
  }
}

void sub_1004876EC(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  id v4;
  unsigned int v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[1640];

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v4 = objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageSubscribeKey"));
  if (v4)
  {
    v5 = objc_msgSend(v4, "BOOLValue");
    v8 = a1 + 24;
    v7 = *(_QWORD *)(a1 + 24);
    v6 = *(void **)(v8 + 8);
    if (v5)
      objc_msgSend(v6, "startSessionForClient:withIdentifier:", v7, objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceClientIdentifier));
    else
      objc_msgSend(v6, "endSessionForClient:", v7);
  }
  else
  {
    if (qword_10229FF70 != -1)
      dispatch_once(&qword_10229FF70, &stru_10213D5B0);
    v9 = qword_10229FF78;
    if (os_log_type_enabled((os_log_t)qword_10229FF78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Couldn't get value for inSession key", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF70 != -1)
        dispatch_once(&qword_10229FF70, &stru_10213D5B0);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF78, 17, "Couldn't get value for inSession key", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "void CLPedestrianFenceClient::handleMessagePedestrianFenceSession(std::shared_ptr<CLConnectionMessage>)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

id sub_10048791C(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  id v4;
  id result;
  BOOL v6;
  id v7;
  void **v8;
  __int128 v9;
  uint64_t v10;

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v4 = objc_msgSend(Dictionary, "objectForKey:", CMInertialOdometryUpdateInterval);
  result = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceClientIdentifier);
  if (v4)
    v6 = result == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = result;
    *(_BYTE *)(a1 + 56) = 1;
    sub_1015A2E04(&v9, (char *)objc_msgSend(result, "UTF8String"));
    v8 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = v9;
    *(_QWORD *)(a1 + 80) = v10;
    return objc_msgSend(*(id *)(a1 + 32), "odometryClient:requestInterval:", v7, v4);
  }
  return result;
}

id sub_1004879D8(uint64_t a1, CLConnectionMessage **a2)
{
  void *Dictionary;
  id v4;
  id result;
  BOOL v6;
  void *v7;
  void **v8;
  unsigned int v9;
  void *v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v4 = objc_msgSend(Dictionary, "objectForKey:", CMPedestrianFenceClientIdentifier);
  result = objc_msgSend(Dictionary, "objectForKey:", CFSTR("kCLConnectionMessageSubscribeKey"));
  if (v4)
    v6 = result == 0;
  else
    v6 = 1;
  if (!v6)
  {
    v7 = result;
    *(_BYTE *)(a1 + 88) = 1;
    sub_1015A2E04(&v12, (char *)objc_msgSend(v4, "UTF8String"));
    v8 = (void **)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = v12;
    *(_QWORD *)(a1 + 112) = v13;
    v9 = objc_msgSend(v7, "BOOLValue");
    v11 = *(_QWORD *)(a1 + 40);
    v10 = *(void **)(a1 + 48);
    if (v9)
      return objc_msgSend(v10, "startBackgroundInertialOdometryUpdatesForClient:withIdentifier:usingReferenceFrame:", v11, v4, 1);
    else
      return objc_msgSend(v10, "stopBackgroundInertialOdometryUpdatesForClient:", v11);
  }
  return result;
}

void sub_100487AAC(id a1)
{
  qword_10229FF88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "InertialOdometry");
}

void sub_100487AD8(id a1)
{
  qword_10229FF78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "PedestrianFence");
}

_QWORD *sub_100487B04@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100487B50(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100487B64(_QWORD *a1, char *__s, _QWORD *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = off_10213D5E0;
  a1[1] = 0;
  sub_100487C10((int)&v5, (uint64_t)(a1 + 3), __s, a3);
  return a1;
}

void sub_100487BB4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100487BC8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213D5E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100487BDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213D5E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_100487C10(int a1, uint64_t a2, char *__s, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_1015A2E04(__p, __s);
  CLConnectionMessage::CLConnectionMessage(a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_100487C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100487C80@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100487CCC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100487CE0@<X0>(char *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_100487B64(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_100487D2C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100487D44()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  NSObject *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[8];
  std::__shared_weak_count *v12;

  sub_1001E4804(buf);
  v0 = *(_QWORD *)buf;
  sub_100197040();
  v1 = sub_10075D288();
  LOBYTE(v10[0]) = 0;
  if (sub_1001E4874(v0, "EnableFenceLogEntryRecorder", (BOOL *)v10))
    v2 = LOBYTE(v10[0]) != 0;
  else
    v2 = v1;
  v3 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10213D650);
  v6 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fence: EnableFenceLogEntryRecorder,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10213D650);
    v10[0] = 67240192;
    v10[1] = v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: EnableFenceLogEntryRecorder,%{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLFenceLogEntrySerializer::isDiskEnabled()", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  return v2;
}

void sub_100487F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(exception_object);
}

void sub_100487F88(_QWORD *a1)
{
  std::string v1;

  *a1 = off_10213D630;
  a1[2] = 0;
  sub_1004880A0(&v1);
  operator new();
}

void sub_100488048()
{
  operator delete();
}

uint64_t sub_1004880A0@<X0>(std::string *a1@<X8>)
{
  std::string *v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  const std::string::value_type *v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  uint64_t result;
  const char *v16;
  uint8_t *v17;
  BOOL v18[16];
  uint8_t buf[8];
  std::__shared_weak_count *v20;

  v2 = (std::string *)sub_1004886A8((uint64_t)a1);
  std::string::assign(v2, "cl_fence");
  sub_1001E4804(buf);
  v18[0] = 0;
  v3 = sub_1001E4874(*(uint64_t *)buf, "WriteLocationdLogsToCrashReporterFolder", v18);
  if (v18[0])
    v4 = v3;
  else
    v4 = 0;
  v5 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  if (v4)
    v8 = "/var/mobile/Library/Logs/CrashReporter/com.apple.locationd/fence";
  else
    v8 = "/var/mobile/Library/Logs/locationd/fence";
  std::string::assign(a1 + 2, v8);
  sub_1001E4804(buf);
  v18[0] = 0;
  v9 = sub_1001E4874(*(uint64_t *)buf, "EnableLargeFenceLogs", v18);
  if (v18[0])
    v10 = v9;
  else
    v10 = 0;
  v11 = v20;
  if (!v20)
    goto LABEL_19;
  v12 = (unint64_t *)&v20->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
    if (!v10)
      goto LABEL_26;
  }
  else
  {
LABEL_19:
    if (!v10)
      goto LABEL_26;
  }
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10213D650);
  v14 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Fence: EnableLargeFenceLogs is set", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10213D650);
    *(_WORD *)v18 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Fence: EnableLargeFenceLogs is set", v18, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static CLProtobufSerializer::Config CLFenceLogEntrySerializer::generateLoggerConfig()", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  a1[4].__r_.__value_.__l.__size_ *= 16;
LABEL_26:
  a1[4].__r_.__value_.__s.__data_[20] = 0;
  a1[4].__r_.__value_.__s.__data_[21] = sub_10114BBB0();
  result = sub_100487D44();
  a1[4].__r_.__value_.__s.__data_[22] = result;
  return result;
}

void sub_100488360(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10048839C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10048839C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_100488400(uint64_t a1)
{
  sub_10114C4C0(*(_QWORD *)(a1 + 16));
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

void sub_10048842C(uint64_t a1)
{
  sub_10005A6D8(*(_QWORD *)(a1 + 16));
}

void sub_100488434(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_10213D650);
  v2 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Fence: Truncating and re-opening CLFenceLogEntrySerializer log", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_10213D650);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: Truncating and re-opening CLFenceLogEntrySerializer log", v4, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceLogEntrySerializer::flushAndReopenLogs()", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  sub_10005A6D8(*(_QWORD *)(a1 + 16));
  sub_10114C4C0(*(_QWORD *)(a1 + 16));
  *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
}

_QWORD *sub_1004885DC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10213D630;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_100488624(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_10213D630;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  operator delete();
}

void sub_10048867C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

uint64_t sub_1004886A8(uint64_t a1)
{
  _QWORD *v2;

  v2 = sub_1015A2E04((_QWORD *)a1, "cl_proto");
  sub_1015A2E04(v2 + 3, ".bin");
  sub_1015A2E04((_QWORD *)(a1 + 48), "/var/mobile/Library/Logs/com.apple.locationd");
  sub_1015A2E04((_QWORD *)(a1 + 72), "");
  *(_QWORD *)(a1 + 96) = 0x410FA40000000000;
  *(_QWORD *)(a1 + 104) = 314572800;
  *(_DWORD *)(a1 + 112) = 250;
  *(_DWORD *)(a1 + 116) = 65537;
  *(_WORD *)(a1 + 120) = 257;
  return a1;
}

void sub_10048873C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_100488788(uint64_t a1, float a2, float a3, float a4, float a5)
{
  float v5;
  unint64_t v6;
  float result;

  v5 = (float)(1.0 / a3) / 6.28318531;
  *(float *)a1 = v5;
  *(float *)(a1 + 4) = a2;
  v6 = (unint64_t)(float)(a4 / a2);
  result = a5 / a2;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = (unint64_t)result;
  return result;
}

float sub_1004887C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  double v5;
  BOOL v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  float v12;
  float v13;

  if (*(_QWORD *)(a1 + 8) >= a3)
    v3 = a3;
  else
    v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) >= a3)
    v4 = a3;
  else
    v4 = *(_QWORD *)(a1 + 16);
  v5 = 0.0;
  v6 = v4 > v3;
  v7 = v4 - v3;
  if (v6)
  {
    v8 = 0;
    v9 = a2 + 4 * v3;
    v10 = 0.0;
    v11 = 0.0;
    do
    {
      v12 = *(float *)(v9 + 4 * v8++);
      v13 = v12 - v11;
      v11 = v11 + (float)((float)(v12 - v11) / (float)v8);
      v10 = v10 + (float)(v13 * (float)(v12 - v11));
    }
    while (v7 != v8);
    if (v7 >= 2)
      v5 = (float)(v10 / (float)(v7 - 1));
  }
  return pow(v5, 4.0);
}

float sub_10048884C(uint64_t a1, uint64_t a2, float *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  float v6;
  unint64_t v7;
  float v8;

  if (a4)
  {
    v4 = 0;
    v5 = 0;
    v6 = 3.4028e38;
    do
    {
      if (*(float *)(a2 + 4 * v4) < v6)
      {
        v6 = *(float *)(a2 + 4 * v4);
        v5 = v4;
      }
      ++v4;
    }
    while (a4 != v4);
  }
  else
  {
    v5 = 0;
    v6 = 3.4028e38;
  }
  if (v5 >= a4)
  {
    v8 = 0.0;
  }
  else
  {
    v7 = 0;
    do
    {
      if (*(float *)(a2 + 4 * v5) > v6)
      {
        v6 = *(float *)(a2 + 4 * v5);
        v7 = v5;
      }
      ++v5;
    }
    while (a4 != v5);
    v8 = (float)v7;
  }
  *a3 = fmaxf(v6, 0.0);
  return *(float *)(a1 + 4) * v8;
}

id sub_10048919C(uint64_t a1, void *a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (!*(_QWORD *)(a1 + 128))
    *(_QWORD *)(a1 + 128) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CS Session");
  *(_BYTE *)(a1 + 200) = 0;
  objc_msgSend(*(id *)(a1 + 8), "setSessionStalenessInterval:", 5.0);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    return sub_100490738(a1, a2);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsWarn, GizmoSync, handleStartSession, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsWarn, GizmoSync, handleStartSession, #CloneMe", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSession(NSDictionary *)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return 0;
}

void sub_100489ADC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v3 = *(char *)(a1 + 192);
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsSync, CsSync, handleServiceError, %{public}c", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v4 = *(char *)(a1 + 192);
    v7[0] = 67240192;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, CsSync, handleServiceError, %{public}c", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleServiceError()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

uint64_t sub_100489FA0(uint64_t a1, void *a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    return sub_100491634(a1, a2);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)))
    return sub_100492A48();
  return 256;
}

void sub_10048A36C(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  id v7;
  id v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE __p[12];
  __int16 v21;
  id v22;
  char v23;
  uint8_t buf[4];
  id v25;
  __int16 v26;
  id v27;
  void *v28;
  char v29;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsWarn, GizmoSync, handleApplyChanges, #CloneMe", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      *(_WORD *)__p = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsWarn, GizmoSync, handleApplyChanges, #CloneMe", __p, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    v7 = objc_msgSend(a2, "properties");
    v8 = objc_msgSend(v7, "objectForKey:", CFSTR("kSYDictionaryObjectSyncIDKey"));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v25 = objc_msgSend(v8, "UTF8String");
      v26 = 2050;
      v27 = objc_msgSend(a2, "changeType");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsMgr, change, syncId, %{public}s, type, %{public}ld", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v13 = qword_1022A0058;
      *(_DWORD *)__p = 136446466;
      *(_QWORD *)&__p[4] = objc_msgSend(v8, "UTF8String");
      v21 = 2050;
      v22 = objc_msgSend(a2, "changeType");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 1, "@GtsMgr, change, syncId, %{public}s, type, %{public}ld", __p, 22);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (v8)
    {
      v10 = objc_msgSend(v7, "objectForKey:", CFSTR("kCLTileSyncObjectDataKey"));
      objc_msgSend(objc_msgSend(v7, "objectForKey:", CFSTR("kCLTileSyncObjectSyncTimestampKey")), "doubleValue");
      v19 = v11;
      sub_1015A2E04(__p, (char *)objc_msgSend(v8, "UTF8String"));
      sub_100BCC08C(buf, __p);
      if (v23 < 0)
        operator delete(*(void **)__p);
      sub_100493AF8(a1, (int *)buf, v10, (double *)&v19);
      if (v29 < 0)
        operator delete(v28);
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v12 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@GtsCont, change with no data!!!", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        *(_WORD *)__p = 0;
        LODWORD(v18) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsCont, change with no data!!!", __p, v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleApplyChanges(CLTileSyncSyChange *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
    }
    *(_BYTE *)(a1 + 193) = 1;
  }
}

void sub_10048A87C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10048AD8C(uint64_t a1, int a2)
{
  int v4;
  _BOOL8 v6;
  int v7;
  double v8;
  BOOL v9;
  int v10;
  const char *v11;
  double v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  _DWORD v29[2];
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  _BOOL4 v37;
  __int16 v38;
  int v39;
  __int16 v40;
  unint64_t v41;
  __int16 v42;
  int v43;
  uint8_t buf[4];
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  _BOOL4 v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unint64_t v57;
  __int16 v58;
  int v59;

  v4 = *(unsigned __int8 *)(a1 + 160);
  v6 = v4 == 73 || v4 == 82;
  if (a2)
    v7 = *(_DWORD *)(a1 + 196) + 1;
  else
    v7 = 0;
  *(_DWORD *)(a1 + 196) = v7;
  v8 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  sub_10048EB70(a1 + 208, a2, v8);
  if (!*(_BYTE *)(a1 + 193))
  {
    sub_100495E50((uint64_t *)(a1 + 168));
    if (!*(_BYTE *)(a1 + 200))
      *(_BYTE *)(a1 + 192) = 88;
  }
  *(_BYTE *)(a1 + 193) = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    v9 = a2 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = *(_DWORD *)(a1 + 196);
    if (v10 <= 3)
    {
      if (v10 == 1 || *(_BYTE *)(a1 + 120))
      {
        v11 = "CsErrorShort";
        v12 = 30.0;
      }
      else
      {
        v11 = "CsErrorLong";
        v12 = 600.0;
      }
      sub_10048FE1C(a1, (uint64_t)v11, v12);
    }
  }

  *(_QWORD *)(a1 + 128) = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v13 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v14 = *(_DWORD *)(a1 + 196);
    v15 = *(char *)(a1 + 192);
    v16 = *(unsigned __int8 *)(a1 + 200);
    v17 = *(char *)(a1 + 160);
    v18 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v19 = *(unsigned __int8 *)(a1 + 120);
    *(_DWORD *)buf = 67241984;
    v45 = a2;
    v46 = 1026;
    v47 = v14;
    v48 = 1026;
    v49 = v15;
    v50 = 1026;
    v51 = v16;
    v52 = 1026;
    v53 = v6;
    v54 = 1026;
    v55 = v17;
    v56 = 2050;
    v57 = v18;
    v58 = 1026;
    v59 = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d", buf, 0x36u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v21 = *(_DWORD *)(a1 + 196);
    v22 = *(char *)(a1 + 192);
    v23 = *(unsigned __int8 *)(a1 + 200);
    v24 = *(char *)(a1 + 160);
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v26 = *(unsigned __int8 *)(a1 + 120);
    v29[0] = 67241984;
    v29[1] = a2;
    v30 = 1026;
    v31 = v21;
    v32 = 1026;
    v33 = v22;
    v34 = 1026;
    v35 = v23;
    v36 = 1026;
    v37 = v6;
    v38 = 1026;
    v39 = v24;
    v40 = 2050;
    v41 = v25;
    v42 = 1026;
    v43 = v26;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, handleSessionDidEnd, error, %{public}d, %{public}d, change, %{public}c, pending, %{public}d, psActive, %{public}d, syncState, %{public}c, queue, %{public}ld, exchanged, %{public}d", v29, 54);
    v28 = (uint8_t *)v27;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSessionDidEnd(BOOL)", "%s\n", v27);
    if (v28 != buf)
      free(v28);
  }
  *(_BYTE *)(a1 + 120) = 0;
  return v6;
}

void sub_10048B49C(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  double v6;
  uint64_t v7;
  id v8;
  double v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  id v13;
  __int16 v14;
  double v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  double v19;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v5 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56));
    *(_DWORD *)buf = 136446466;
    v17 = v5;
    v18 = 2050;
    v19 = v6 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v7 = qword_1022A0058;
    v8 = objc_msgSend(objc_msgSend(a2, "UUIDString"), "UTF8String");
    v9 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56));
    v12 = 136446466;
    v13 = v8;
    v14 = 2050;
    v15 = v9 / 86400.0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 1, "@GtsMgr, willSwitch, new, %{public}s, days inactive, %{public}0.1f", &v12, 22);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleWillSwitch(NSUUID *)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_10048B8E8(uint64_t a1, int a2, int a3)
{
  int v6;
  int v7;
  char v8;
  NSObject *v9;
  int v10;
  int v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  double v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;
  __int16 v30;
  double v31;
  uint8_t buf[4];
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  double v45;

  v6 = *(char *)(a1 + 160);
  objc_msgSend(*(id *)(a1 + 8), "setSessionStalenessInterval:", 5.0);
  v7 = 88;
  if (a2 && (a3 & 1) == 0)
  {
    sub_100490568(a1);
    if (*(_BYTE *)(a1 + 136))
      v8 = 76;
    else
      v8 = 83;
    *(_BYTE *)(a1 + 160) = v8;
    v7 = 82;
  }
  if (a3 && (a2 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 8), "suspend");
    *(_BYTE *)(a1 + 160) = 76;
    v7 = 83;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v10 = *(char *)(a1 + 160);
    v11 = *(unsigned __int8 *)(a1 + 136);
    v12 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56));
    *(_DWORD *)buf = 67241728;
    v33 = a2;
    v34 = 1026;
    v35 = a3;
    v36 = 1026;
    v37 = v7;
    v38 = 1026;
    v39 = v6;
    v40 = 1026;
    v41 = v10;
    v42 = 1026;
    v43 = v11;
    v44 = 2050;
    v45 = v12 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v13 = qword_1022A0058;
    v14 = *(char *)(a1 + 160);
    v15 = *(unsigned __int8 *)(a1 + 136);
    v16 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56));
    v19[0] = 67241728;
    v19[1] = a2;
    v20 = 1026;
    v21 = a3;
    v22 = 1026;
    v23 = v7;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v14;
    v28 = 1026;
    v29 = v15;
    v30 = 2050;
    v31 = v16 / 86400.0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 1, "@GtsMgr, handlePairSwitch, ids ,%{public}d, %{public}d, resume/suspend, %{public}c, state, %{public}c, %{public}c, restricted, %{public}d, inactive, %{public}0.1f", v19, 48);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handlePairingSwitch(BOOL, BOOL)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
}

id sub_10048BDD8(uint64_t a1)
{
  id v2;
  unint64_t v3;
  const char *v4;
  NSObject *v5;
  id result;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  int v12;
  const char *v13;
  uint8_t buf[4];
  const char *v15;

  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeSyncSession"), "syncSessionType");
  v3 = (unint64_t)objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "activeSyncSession"), "syncSessionType");
  if (v3 > 2)
    v4 = "Unknown";
  else
    v4 = off_10213D7D0[v3];
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v5 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsFlow, PS, handleSyncTrapTurn%s, 1", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v12 = 136315138;
    v13 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, PS, handleSyncTrapTurn%s, 1", (const char *)&v12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  result = (id)sub_10048C110(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v2 == 0);
  if ((_DWORD)result)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@GtsFlow, PS, syncDidCompleteTx, 2, skipped", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      LOWORD(v12) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, PS, syncDidCompleteTx, 2, skipped", &v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "-[CLTileSyncDelegate syncCoordinator:beginSyncSession:]_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 40) + 24), "syncDidComplete");
  }
  return result;
}

uint64_t sub_10048C110(uint64_t a1, int a2)
{
  int v3;
  char v4;
  NSObject *v5;
  const char *v6;
  double v7;
  NSObject *v8;
  NSObject *v9;
  double v10;
  int v11;
  NSObject *v13;
  int v14;
  unint64_t v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  uint8_t *v20;
  int v21;
  unint64_t v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  _BYTE v26[24];
  _QWORD v27[3];
  uint8_t buf[4];
  _BYTE v29[10];
  _BYTE v30[10];
  _DWORD v31[404];

  v3 = *(char *)(a1 + 160);
  if (a2)
    v4 = 73;
  else
    v4 = 82;
  *(_BYTE *)(a1 + 160) = v4;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56)))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@GtsMgr, xSyncTrap, canDownload", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    *(_WORD *)v26 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsMgr, xSyncTrap, canDownload", v26, 2, *(_OWORD *)v26, *(_QWORD *)&v26[16], v27[0]);
LABEL_39:
    v20 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v6);
    if (v20 != buf)
      free(v20);
    return 1;
  }
  v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 56))(*(_QWORD *)(a1 + 56));
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v8 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349312;
    *(double *)v29 = v7 / 3600.0;
    *(_WORD *)&v29[8] = 2050;
    *(double *)v30 = v7 / 86400.0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    *(_DWORD *)v26 = 134349312;
    *(double *)&v26[4] = v7 / 3600.0;
    *(_WORD *)&v26[12] = 2050;
    *(double *)&v26[14] = v7 / 86400.0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, since last switched, hours, %{public}0.1f, days, %{public}0.1f", v26, 22);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if (v7 < *(double *)(a1 + 88) || *(_BYTE *)(a1 + 200))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v9 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v10 = *(double *)(a1 + 88);
      v11 = *(unsigned __int8 *)(a1 + 200);
      *(double *)v29 = v7 / 86400.0;
      *(_WORD *)&v29[8] = 2050;
      *(double *)v30 = v10 / 86400.0;
      *(_WORD *)&v30[8] = 1026;
      v31[0] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "@GtsMgr, xSyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d", buf, 0x1Cu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    *(_DWORD *)v26 = 134349568;
    v18 = *(double *)(a1 + 88);
    v19 = *(unsigned __int8 *)(a1 + 200);
    *(double *)&v26[4] = v7 / 86400.0;
    *(_WORD *)&v26[12] = 2050;
    *(double *)&v26[14] = v18 / 86400.0;
    *(_WORD *)&v26[22] = 1026;
    LODWORD(v27[0]) = v19;
    LODWORD(v25) = 28;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsMgr, xSyncTrap, days inactive, %{public}0.1f, thresh, %{public}0.1f, pending, %{public}d", v26, v25, *(_OWORD *)v26, *(_QWORD *)&v26[16], v27[0]);
    goto LABEL_39;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v13 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v14 = *(char *)(a1 + 160);
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)v29 = v3;
    *(_WORD *)&v29[4] = 1026;
    *(_DWORD *)&v29[6] = v14;
    *(_WORD *)v30 = 2050;
    *(_QWORD *)&v30[2] = v15;
    LOWORD(v31[0]) = 2050;
    *(double *)((char *)v31 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v21 = *(char *)(a1 + 160);
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    *(_DWORD *)v26 = 67240960;
    *(_DWORD *)&v26[4] = v3;
    *(_WORD *)&v26[8] = 1026;
    *(_DWORD *)&v26[10] = v21;
    *(_WORD *)&v26[14] = 2050;
    *(_QWORD *)&v26[16] = v22;
    LOWORD(v27[0]) = 2050;
    *(double *)((char *)v27 + 2) = v7;
    LODWORD(v25) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, setNeedsReset, 1, BeginPair, state, %{public}c, %{public}c, queuewas, %{public}ld, inactive, %{public}0.1f", v26, v25);
    v24 = (uint8_t *)v23;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::handleSyncTrapTurn(BOOL)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  *(_BYTE *)(a1 + 192) = 84;
  *(_BYTE *)(a1 + 200) = 1;
  sub_100495E50((uint64_t *)(a1 + 168));
  objc_msgSend(*(id *)(a1 + 8), "setHasChangesAvailable");
  return 0;
}

void sub_10048CCCC(uint64_t a1)
{
  uint64_t v2;
  int v3;
  NSObject *v4;
  id v5;
  uint64_t v6;
  id v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  id v11;
  uint8_t buf[4];
  id v13;

  if (!objc_msgSend(*(id *)(a1 + 32), "syncRestriction"))
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v3 = 0;
    goto LABEL_5;
  }
  if (objc_msgSend(*(id *)(a1 + 32), "syncRestriction") == (id)1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v3 = 1;
LABEL_5:
    sub_10048CF08(v2, v3);
    return;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "syncRestriction");
    *(_DWORD *)buf = 134349056;
    v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "@GtsSync, PsCoord, RestrictionUnknown, %{public}ld, #CloneMe", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v6 = qword_1022A0058;
    v7 = objc_msgSend(*(id *)(a1 + 32), "syncRestriction");
    v10 = 134349056;
    v11 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "@GtsSync, PsCoord, RestrictionUnknown, %{public}ld, #CloneMe", &v10, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "-[CLTileSyncDelegate syncCoordinatorDidChangeSyncRestriction:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_10048CF08(uint64_t a1, int a2)
{
  int v3;
  NSObject *v4;
  char v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  const char *v14;
  uint8_t *v15;
  const char *v16;
  uint8_t *v17;
  uint64_t v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  int v29;

  v3 = *(char *)(a1 + 160);
  *(_BYTE *)(a1 + 136) = a2;
  if (a2)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsSync, PsCoord, RestrictionLimitPush", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, PsCoord, RestrictionLimitPush", v19, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    v5 = 76;
    goto LABEL_15;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v6 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@GtsSync, PsCoord, RestrictionNone", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, PsCoord, RestrictionNone", v19, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56)))
  {
    v5 = 83;
LABEL_15:
    *(_BYTE *)(a1 + 160) = v5;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v8 = *(char *)(a1 + 160);
    v9 = *(unsigned __int8 *)(a1 + 136);
    *(_DWORD *)buf = 67240704;
    v25 = v3;
    v26 = 1026;
    v27 = v8;
    v28 = 1026;
    v29 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v10 = *(char *)(a1 + 160);
    v11 = *(unsigned __int8 *)(a1 + 136);
    v19[0] = 67240704;
    v19[1] = v3;
    v20 = 1026;
    v21 = v10;
    v22 = 1026;
    v23 = v11;
    LODWORD(v18) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, restriction, state was, %{public}c, now, %{public}c, restricted, %{public}d", v19, v18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleRestrictionChange(BOOL)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
}

void sub_10048D7E0(uint64_t a1)
{
  sub_10048D7EC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_10048D7EC(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v3 = *(char *)(a1 + 160);
    *(_DWORD *)buf = 67240192;
    v9 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, SyncTrapEnd, oldstate, %{public}c", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v4 = *(char *)(a1 + 160);
    v7[0] = 67240192;
    v7[1] = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, SyncTrapEnd, oldstate, %{public}c", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleSyncTrapEnd()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 160) = 83;
  sub_10048FE1C(a1, (uint64_t)"ClosePS", 1.0);
}

void sub_10048DCC0(double *a1, double a2)
{
  void *v3;
  NSMutableArray *v4;
  uint64_t v5;
  uint64_t v6;

  a1[6] = a2;
  v3 = objc_autoreleasePoolPush();
  v4 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", 11);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)a1), 0);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 1)), 1);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 2)), 2);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 3)), 3);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 6)), 4);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 4)), 5);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 5)), 6);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 7)), 7);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)a1 + 8)), 8);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[5]), 9);
  -[NSMutableArray setObject:atIndexedSubscript:](v4, "setObject:atIndexedSubscript:", +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a1[6]), 10);
  v5 = sub_1001FD94C();
  sub_10023EC14(v5);
  v6 = sub_1001FD94C();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 944))(v6);
  objc_autoreleasePoolPop(v3);
}

void sub_10048DE64(uint64_t a1, double a2)
{
  void *v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  double v10;
  double v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  NSObject *v17;
  double v18;
  uint64_t v19;
  const char *v20;
  uint8_t *v21;
  double v22;
  const char *v23;
  uint8_t *v24;
  uint64_t v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  void *v30;
  int v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  uint64_t v42;

  v4 = objc_autoreleasePoolPush();
  v30 = 0;
  v5 = sub_1001FD94C();
  if (sub_100527258(v5, CFSTR("TileSyncAwd"), (CFTypeRef *)&v30))
  {
    v6 = v30;
    if (objc_msgSend(v30, "count") == (id)11)
    {
      *(_DWORD *)a1 = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 0), "intValue");
      *(_DWORD *)(a1 + 4) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 1), "intValue");
      *(_DWORD *)(a1 + 8) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 2), "intValue");
      *(_DWORD *)(a1 + 12) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 3), "intValue");
      *(_DWORD *)(a1 + 24) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 4), "intValue");
      *(_DWORD *)(a1 + 16) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 5), "intValue");
      *(_DWORD *)(a1 + 20) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 6), "intValue");
      *(_DWORD *)(a1 + 28) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 7), "intValue");
      *(_DWORD *)(a1 + 32) = objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 8), "intValue");
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 9), "doubleValue");
      *(_QWORD *)(a1 + 40) = v7;
      objc_msgSend(objc_msgSend(v6, "objectAtIndexedSubscript:", 10), "doubleValue");
      *(_QWORD *)(a1 + 48) = v8;
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v9 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v10 = COERCE_DOUBLE(objc_msgSend(v6, "count"));
        *(_DWORD *)buf = 134349056;
        v38 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsAwd, plist, error, load, %{public}lu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v25 = qword_1022A0058;
        v26 = COERCE_DOUBLE(objc_msgSend(v6, "count"));
        v31 = 134349056;
        v32 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "@GtsAwd, plist, error, load, %{public}lu", &v31, 12);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
  }
  v11 = a2 - *(double *)(a1 + 48);
  if (v11 > 7776000.0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v12 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v13 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 134349568;
      v38 = v11;
      v39 = 2050;
      v40 = 7776000.0;
      v41 = 2050;
      v42 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v19 = *(_QWORD *)(a1 + 48);
      v31 = 134349568;
      v32 = v11;
      v33 = 2050;
      v34 = 7776000.0;
      v35 = 2050;
      v36 = v19;
      LODWORD(v29) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", &v31, v29);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    v14 = sub_1001FD94C();
    sub_1005254E4(v14);
  }
  objc_autoreleasePoolPop(v4);
  v15 = *(double *)(a1 + 40);
  if (v15 > a2 || v15 + 604800.0 < a2)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v18 = *(double *)(a1 + 40);
      *(_DWORD *)buf = 134349312;
      v38 = v18;
      v39 = 2048;
      v40 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "@GtsAwd, plist, error, time, %{public}.1f, now, %.1f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v22 = *(double *)(a1 + 40);
      v31 = 134349312;
      v32 = v22;
      v33 = 2048;
      v34 = a2;
      LODWORD(v29) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsAwd, plist, error, time, %{public}.1f, now, %.1f", &v31, v29);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::loadMetrics(CFAbsoluteTime)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    *(double *)(a1 + 40) = a2;
  }
  sub_10048E494((double *)a1, (uint64_t)"loadcache", a2);
}

void sub_10048E494(double *a1, uint64_t a2, double a3)
{
  double v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  double v18;
  int v19;
  int v20;
  double v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  int v26;
  int v27;
  double v28;
  int v29;
  int v30;
  double v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  uint64_t v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  double v40;
  __int16 v41;
  _BYTE v42[10];
  uint64_t v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  __int16 v49;
  double v50;
  __int16 v51;
  int v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  _BOOL4 v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  double v62;
  uint8_t buf[4];
  double v64;
  __int16 v65;
  _BYTE v66[10];
  uint64_t v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  _BOOL4 v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  double v86;

  v6 = a3 - a1[6];
  if (v6 > 604800.0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)a1 + 6);
      *(_DWORD *)buf = 134349568;
      v64 = v6;
      v65 = 2050;
      *(_QWORD *)v66 = 0x4122750000000000;
      *(_WORD *)&v66[8] = 2050;
      v67 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v35 = *((_QWORD *)a1 + 6);
      v39 = 134349568;
      v40 = v6;
      v41 = 2050;
      *(_QWORD *)v42 = 0x4122750000000000;
      *(_WORD *)&v42[8] = 2050;
      v43 = v35;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsAwd, plist, clear, %{public}.1f, thresh, %{public}.0f, last, %{public}.1f", &v39, 32);
      v37 = (uint8_t *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    v9 = sub_1001FD94C();
    sub_1005254E4(v9);
  }
  v10 = a1[5];
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v11 = a3 - v10;
  v12 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)a1;
    v14 = *((_DWORD *)a1 + 1);
    v15 = *((_DWORD *)a1 + 2);
    v16 = *((_DWORD *)a1 + 3);
    v17 = *((_DWORD *)a1 + 4);
    v18 = (double)*((int *)a1 + 5) * 0.0009765625;
    v19 = *((_DWORD *)a1 + 6);
    v20 = *((_DWORD *)a1 + 7);
    v21 = (double)*((int *)a1 + 8) * 0.0009765625;
    v22 = *((_QWORD *)a1 + 6);
    *(_DWORD *)buf = 136449538;
    v64 = *(double *)&a2;
    v65 = 1026;
    *(_DWORD *)v66 = v13;
    *(_WORD *)&v66[4] = 1026;
    *(_DWORD *)&v66[6] = v14;
    LOWORD(v67) = 1026;
    *(_DWORD *)((char *)&v67 + 2) = v15;
    HIWORD(v67) = 1026;
    v68 = v16;
    v69 = 1026;
    v70 = v19;
    v71 = 1026;
    v72 = v17;
    v73 = 2050;
    v74 = v18;
    v75 = 1026;
    v76 = v20;
    v77 = 2050;
    v78 = v21;
    v79 = 2050;
    v80 = v11 / 3600.0;
    v81 = 1026;
    v82 = v11 > 604800.0;
    v83 = 2050;
    v84 = v22;
    v85 = 2050;
    v86 = v6 / 3600.0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "@GtsAwd, snap, %{public}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, requested, %{public}d, synced, %{public}d, sizemb, %{public}.1f, week, %{public}d, %{public}.1f, sinceweekly, %{public}0.1f, reset, %{public}d, lastSave, %{public}0.1f, %{public}0.1f", buf, 0x6Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v23 = *(_DWORD *)a1;
    v24 = *((_DWORD *)a1 + 1);
    v25 = *((_DWORD *)a1 + 2);
    v26 = *((_DWORD *)a1 + 3);
    v27 = *((_DWORD *)a1 + 4);
    v28 = (double)*((int *)a1 + 5) * 0.0009765625;
    v29 = *((_DWORD *)a1 + 6);
    v30 = *((_DWORD *)a1 + 7);
    v31 = (double)*((int *)a1 + 8) * 0.0009765625;
    v39 = 136449538;
    v32 = *((_QWORD *)a1 + 6);
    v40 = *(double *)&a2;
    v41 = 1026;
    *(_DWORD *)v42 = v23;
    *(_WORD *)&v42[4] = 1026;
    *(_DWORD *)&v42[6] = v24;
    LOWORD(v43) = 1026;
    *(_DWORD *)((char *)&v43 + 2) = v25;
    HIWORD(v43) = 1026;
    v44 = v26;
    v45 = 1026;
    v46 = v29;
    v47 = 1026;
    v48 = v27;
    v49 = 2050;
    v50 = v28;
    v51 = 1026;
    v52 = v30;
    v53 = 2050;
    v54 = v31;
    v55 = 2050;
    v56 = v11 / 3600.0;
    v57 = 1026;
    v58 = v11 > 604800.0;
    v59 = 2050;
    v60 = v32;
    v61 = 2050;
    v62 = v6 / 3600.0;
    LODWORD(v38) = 110;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsAwd, snap, %{public}s, sessions, %{public}d, empty, %{public}d, completed, %{public}d, errored, %{public}d, requested, %{public}d, synced, %{public}d, sizemb, %{public}.1f, week, %{public}d, %{public}.1f, sinceweekly, %{public}0.1f, reset, %{public}d, lastSave, %{public}0.1f, %{public}0.1f", &v39, v38);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::weekLongLogging(const char *, CFAbsoluteTime)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
  if (v11 > 604800.0)
  {
    *((_DWORD *)a1 + 7) = 0;
    *((_DWORD *)a1 + 8) = 0;
    a1[5] = a1[5] + 604800.0;
  }
}

void sub_10048E99C(double *a1, double a2)
{
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  ++*(_DWORD *)a1;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v5 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240192;
    v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@GtsAwd, started, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v6 = *(_DWORD *)a1;
    v9[0] = 67240192;
    v9[1] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsAwd, started, %{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::startSession(CFAbsoluteTime)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_10048DCC0(a1, a2);
}

void sub_10048EB70(uint64_t a1, int a2, double a3)
{
  if (a2)
    ++*(_DWORD *)(a1 + 12);
  ++*(_DWORD *)(a1 + 8);
  sub_10048DCC0((double *)a1, a3);
  sub_10048E494((double *)a1, (uint64_t)"endsync", a3);
}

void sub_10048EBD0(double *a1, int a2, double a3)
{
  NSObject *v5;
  int v6;
  int v7;
  int v8;
  int v9;
  const char *v10;
  uint8_t *v11;
  _DWORD v12[2];
  __int16 v13;
  int v14;
  __int16 v15;
  int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  int v20;
  __int16 v21;
  int v22;

  if (!a2)
    ++*((_DWORD *)a1 + 1);
  *((_DWORD *)a1 + 6) += a2;
  sub_10048DCC0(a1, a3);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v5 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v6 = *((_DWORD *)a1 + 6);
    v7 = *(_DWORD *)a1;
    *(_DWORD *)buf = 67240704;
    v18 = a2;
    v19 = 1026;
    v20 = v6;
    v21 = 1026;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsAwd, request, tiles, %{public}d, total, %{public}d, sessions, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v8 = *((_DWORD *)a1 + 6);
    v9 = *(_DWORD *)a1;
    v12[0] = 67240704;
    v12[1] = a2;
    v13 = 1026;
    v14 = v8;
    v15 = 1026;
    v16 = v9;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsAwd, request, tiles, %{public}d, total, %{public}d, sessions, %{public}d", v12, 20);
    v11 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::tilesRequested(CFAbsoluteTime, int)", "%s\n", v10);
    if (v11 != buf)
      free(v11);
  }
}

void sub_10048EDD8(uint64_t a1, int a2, double a3)
{
  int v6;
  int v7;
  int v8;
  NSObject *v9;
  double v10;
  double v11;
  const char *v12;
  uint8_t *v13;
  _DWORD v14[2];
  __int16 v15;
  double v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  double v20;

  v6 = a2 + 512;
  if (a2 < -512)
    v6 = a2 + 1535;
  v7 = *(_DWORD *)(a1 + 20) + (v6 >> 10);
  ++*(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 20) = v7;
  v8 = *(_DWORD *)(a1 + 32);
  ++*(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 32) = v8 + (v6 >> 10);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v9 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v10 = (double)*(int *)(a1 + 20) * 0.0009765625;
    *(_DWORD *)buf = 67240448;
    v18 = a2;
    v19 = 2050;
    v20 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsAwd, serialized, %{public}d, totalmb, %{public}.1f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v11 = (double)*(int *)(a1 + 20) * 0.0009765625;
    v14[0] = 67240448;
    v14[1] = a2;
    v15 = 2050;
    v16 = v11;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsAwd, serialized, %{public}d, totalmb, %{public}.1f", v14, 18);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncAWD::tileSynced(CFAbsoluteTime, int)", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
  sub_10048DCC0((double *)a1, a3);
}

void sub_10048F008(unsigned int *a1, _DWORD *a2, double a3)
{
  unsigned int v5;
  int v6;
  unsigned int v7;
  BOOL v8;
  signed int v9;
  int v10;
  unsigned int v11;
  signed int v12;
  int v13;
  unsigned int v14;
  signed int v15;
  int v16;
  unsigned int v17;
  signed int v18;
  int v19;
  unsigned int v20;
  unsigned int v21;

  v5 = *a1;
  v6 = 1;
  if ((int)*a1 >= 101)
  {
    v7 = *a1;
    do
    {
      v5 = v7 / 0xA;
      v6 *= 10;
      v8 = v7 > 0x3F1;
      v7 /= 0xAu;
    }
    while (v8);
  }
  a2[10] = v6 * v5;
  v9 = a1[1];
  v10 = 1;
  if (v9 >= 101)
  {
    v11 = a1[1];
    do
    {
      v9 = v11 / 0xA;
      v10 *= 10;
      v8 = v11 > 0x3F1;
      v11 /= 0xAu;
    }
    while (v8);
  }
  a2[11] = v10 * v9;
  v12 = a1[2];
  v13 = 1;
  if (v12 >= 101)
  {
    v14 = a1[2];
    do
    {
      v12 = v14 / 0xA;
      v13 *= 10;
      v8 = v14 > 0x3F1;
      v14 /= 0xAu;
    }
    while (v8);
  }
  a2[12] = v13 * v12;
  v15 = a1[3];
  v16 = 1;
  if (v15 >= 101)
  {
    v17 = a1[3];
    do
    {
      v15 = v17 / 0xA;
      v16 *= 10;
      v8 = v17 > 0x3F1;
      v17 /= 0xAu;
    }
    while (v8);
  }
  a2[13] = v16 * v15;
  v18 = a1[4];
  v19 = 1;
  if (v18 >= 101)
  {
    v20 = a1[4];
    do
    {
      v18 = v20 / 0xA;
      v19 *= 10;
      v8 = v20 > 0x3F1;
      v20 /= 0xAu;
    }
    while (v8);
  }
  v21 = a1[5];
  a2[14] = v19 * v18;
  a2[15] = v21;
  sub_10048E494((double *)a1, (uint64_t)"report", a3);
  *(_QWORD *)a1 = 0;
  *((_QWORD *)a1 + 1) = 0;
  *((_QWORD *)a1 + 2) = 0;
  sub_10048DCC0((double *)a1, a3);
}

uint64_t sub_10048F198(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  double v20;
  int v21;
  _BOOL4 v22;
  char v23;
  NSObject *v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int v30;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD v42[5];
  _DWORD v43[2];
  __int16 v44;
  int v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  _BOOL4 v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  uint8_t buf[8];
  std::__shared_weak_count *v57;
  uint64_t v58;
  __int16 v59;
  _BOOL4 v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_10213D680;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = a2;
  v7 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 88) = xmmword_101BB2640;
  v8 = (void *)(a1 + 88);
  v9 = objc_msgSend(objc_msgSend(a3, "silo"), "newTimer");
  *(_QWORD *)(a1 + 144) = *a5;
  *(_QWORD *)(a1 + 104) = v9;
  *(_BYTE *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 136) = 1;
  v10 = a5[1];
  *(_QWORD *)(a1 + 152) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  *(_QWORD *)(a1 + 168) = 0;
  *(_BYTE *)(a1 + 160) = 76;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_WORD *)(a1 + 192) = 88;
  *(_DWORD *)(a1 + 196) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 208) = 0u;
  v13 = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)) & 1) == 0
    && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)) & 1) == 0)
  {
    sub_1018FB49C();
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm", 571, "CLTileSyncManager");
    __break(1u);
  }
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "ManifestRate", (void *)(a1 + 96));
  v14 = v57;
  if (v57)
  {
    p_shared_owners = (unint64_t *)&v57->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  sub_1001E4804(buf);
  sub_1001FD98C(*(uint64_t *)buf, "QwsPeriod", v8);
  v17 = v57;
  if (v57)
  {
    v18 = (unint64_t *)&v57->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  *(double *)(a1 + 72) = v20;
  sub_100495E50((uint64_t *)(a1 + 168));
  v21 = sub_10048F784(a1);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    v22 = sub_10048F9EC(a1);
  else
    v22 = 1;
  if ((v21 & v22) != 0)
    v23 = 83;
  else
    v23 = 76;
  *(_BYTE *)(a1 + 160) = v23;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v24 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v25 = v21;
    v26 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
    v28 = *(_QWORD *)(a1 + 96);
    v29 = *(char *)(a1 + 160);
    v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
    *(_DWORD *)buf = 67241728;
    *(_DWORD *)&buf[4] = v26;
    LOWORD(v57) = 1026;
    *(_DWORD *)((char *)&v57 + 2) = v27;
    HIWORD(v57) = 2050;
    v58 = v28;
    v59 = 1026;
    v60 = v22;
    v61 = 1026;
    v21 = v25;
    v62 = v25;
    v63 = 1026;
    v64 = v29;
    v65 = 1026;
    v66 = v30;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@GtsInit, CG, %{public}d, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c, canDownload, %{public}d", buf, 0x30u);
    v13 = a1 + 208;
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    v32 = v21;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v41 = v13;
    v33 = qword_1022A0058;
    v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56));
    v35 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
    v36 = *(_QWORD *)(a1 + 96);
    v37 = *(char *)(a1 + 160);
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56));
    v43[0] = 67241728;
    v43[1] = v34;
    v44 = 1026;
    v45 = v35;
    v46 = 2050;
    v47 = v36;
    v48 = 1026;
    v49 = v22;
    v50 = 1026;
    v51 = v32;
    v52 = 1026;
    v53 = v37;
    v54 = 1026;
    v55 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 0, "@GtsInit, CG, %{public}d, %{public}d, rate, %{public}0.0f, state, %{public}d, %{public}d, %{public}c, canDownload, %{public}d", v43, 48);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)", "%s\n", v39);
    v13 = v41;
    if (v40 != buf)
      free(v40);
  }
  sub_10048DE64(v13, v20);
  v42[0] = _NSConcreteStackBlock;
  v42[1] = 3221225472;
  v42[2] = sub_10048FC44;
  v42[3] = &unk_10212ECA0;
  v42[4] = a1;
  objc_msgSend(*(id *)(a1 + 104), "setHandler:", v42);
  sub_10048FE1C(a1, (uint64_t)"Timer", *(double *)(a1 + 96));
  return a1;
}

void sub_10048F708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  va_list va;

  va_start(va, a17);
  sub_100495E10((void ***)va);
  sub_100261F44(v18);
  v20 = *(_QWORD *)(v17 + 56);
  *(_QWORD *)(v17 + 56) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10048F784(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 16) = -[CLTileSyncDelegate initWithSyncManager:silo:]([CLTileSyncDelegate alloc], "initWithSyncManager:silo:", a1, objc_msgSend(*(id *)(a1 + 64), "silo"));
  v2 = objc_alloc(off_1022A1CE8());
  v3 = objc_msgSend(v2, "initWithService:priority:asMasterStore:options:", CFSTR("com.apple.private.alloy.location.wifitilesync"), -20, (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)), 0);
  *(_QWORD *)(a1 + 8) = v3;
  objc_msgSend(v3, "setDelegate:queue:", *(_QWORD *)(a1 + 16), objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "silo"), "queue"));
  *(_QWORD *)(a1 + 24) = objc_alloc_init(CLTileSyncSyChange);
  objc_msgSend(*(id *)(a1 + 8), "setSessionStalenessInterval:", 1.0);
  if (*(_QWORD *)(a1 + 8))
  {
    result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56));
    if ((_DWORD)result)
    {
      sub_100490568(a1);
      return 1;
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsInit, CsObjects failed", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsInit, CsObjects failed", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::csInitialize()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
      return 0;
    }
  }
  return result;
}

BOOL sub_10048F9EC(uint64_t a1)
{
  id v2;
  NSObject *v3;
  _BOOL4 v4;
  _BOOL4 v5;
  _BOOL4 v7;
  _BOOL4 v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  _BOOL4 v13;
  uint8_t buf[4];
  _BOOL4 v15;
  __int16 v16;
  _BOOL4 v17;

  v2 = -[objc_class syncCoordinatorWithServiceName:](off_1022A1CD8(), "syncCoordinatorWithServiceName:", CFSTR("com.apple.pairedsync.locationd"));
  *(_QWORD *)(a1 + 32) = v2;
  objc_msgSend(v2, "setDelegate:", *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 40) = objc_msgSend(objc_alloc(off_1022A1CE0()), "initWithDelegate:", *(_QWORD *)(a1 + 16));
  *(_BYTE *)(a1 + 136) = objc_msgSend(*(id *)(a1 + 32), "syncRestriction") != 0;
  if (!*(_QWORD *)(a1 + 32) || !*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v3 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v4 = *(_QWORD *)(a1 + 32) == 0;
      v5 = *(_QWORD *)(a1 + 40) == 0;
      *(_DWORD *)buf = 67240448;
      v15 = v4;
      v16 = 1026;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v7 = *(_QWORD *)(a1 + 32) == 0;
      v8 = *(_QWORD *)(a1 + 40) == 0;
      v11[0] = 67240448;
      v11[1] = v7;
      v12 = 1026;
      v13 = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsInit, PsObjects failed, C, %{public}d, O, %{public}d", v11, 14);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::psInitialize()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return *(_BYTE *)(a1 + 136) == 0;
}

uint64_t sub_10048FC44(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  uint64_t v9;
  uint8_t buf[4];
  uint64_t v11;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v3 = *(_QWORD *)(v1 + 112);
    *(_DWORD *)buf = 136446210;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsTimer, fired, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = *(_QWORD *)(v1 + 112);
    v8 = 136446210;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsTimer, fired, %{public}s", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CLTileSyncManager::CLTileSyncManager(CLITilesManager *, id<CLIntersiloUniverse>, std::unique_ptr<IExternal>, std::shared_ptr<CLWifiAccessPointLocationService>)_block_invoke", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_10048FE1C(v1, (uint64_t)"Timer", *(double *)(v1 + 96));
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1 + 48))(v1, *(_QWORD *)(v1 + 112));
}

void sub_10048FE1C(uint64_t a1, uint64_t a2, double a3)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  double v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  double v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56)))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v6 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@GtsTimer, direct, skip", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        LOWORD(v14) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsTimer, direct, skip", &v14, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
    else
    {
      if (*(_BYTE *)(a1 + 160) != 83)
        a3 = *(double *)(a1 + 96);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v9 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v10 = *(char *)(a1 + 160);
        *(_DWORD *)buf = 134349570;
        v21 = a3;
        v22 = 2082;
        v23 = a2;
        v24 = 1026;
        v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v11 = *(char *)(a1 + 160);
        v14 = 134349570;
        v15 = a3;
        v16 = 2082;
        v17 = a2;
        v18 = 1026;
        v19 = v11;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsTimer, nextfire, %{public}.0f, %{public}s, state, %{public}c", &v14, 28);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::setManifestFire(const char *, CFTimeInterval)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      *(_QWORD *)(a1 + 112) = a2;
      objc_msgSend(*(id *)(a1 + 104), "setNextFireDelay:", a3);
    }
  }
}

uint64_t sub_100490188(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[8];

  *(_QWORD *)a1 = off_10213D680;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, dtor", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, dtor", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "virtual CLTileSyncManager::~CLTileSyncManager()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10049038C((id *)a1);

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;

  *(_QWORD *)buf = a1 + 168;
  sub_100495E10((void ***)buf);
  sub_100261F44(a1 + 144);
  v3 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_100490380(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10049038C(id *a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, release", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, release", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::csRelease()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }

  a1[1] = 0;
  a1[2] = 0;

  a1[3] = 0;
}

void sub_100490544(uint64_t a1)
{
  sub_100490188(a1);
  operator delete();
}

void sub_100490568(uint64_t a1)
{
  NSObject *v1;
  id v2;
  uint64_t v3;
  id v4;
  const char *v5;
  uint8_t *v6;
  id v7;
  int v8;
  id v9;
  uint8_t buf[4];
  id v11;

  v7 = 0;
  objc_msgSend(*(id *)(a1 + 8), "resume:", &v7);
  if (v7)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v1 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v2 = objc_msgSend(objc_msgSend(v7, "localizedDescription"), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "@GtsSync, CsError, 1, resume, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v3 = qword_1022A0058;
      v4 = objc_msgSend(objc_msgSend(v7, "localizedDescription"), "UTF8String");
      v8 = 136446210;
      v9 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v3, 1, "@GtsSync, CsError, 1, resume, %{public}s", &v8, 12);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::csResume()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

id sub_100490738(uint64_t a1, void *a2)
{
  id v4;
  id v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  int v9;
  const char *v10;
  int v11;
  id v12;
  NSObject *v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  NSObject *v17;
  int v18;
  NSObject *v19;
  int v20;
  id v21;
  unint64_t v22;
  id v23;
  double v24;
  uint64_t v26;
  int v27;
  id v28;
  unint64_t v29;
  id v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  int v36;
  uint8_t *v37;
  uint64_t v38;
  _BYTE v39[28];
  __int16 v40;
  id v41;
  uint8_t buf[4];
  _BYTE v43[24];
  __int16 v44;
  id v45;

  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_msgSend(a2, "objectForKey:", CFSTR("kSYDictionaryObjectSyncIDKey"));
    v5 = objc_msgSend(a2, "objectForKey:", CFSTR("kCLTileSyncControlRequest"));
    if (objc_msgSend(v4, "isEqualToString:", CFSTR("Control"))
      && objc_msgSend(v5, "isEqualToString:", CFSTR("Request")))
    {
      sub_10048FE1C(a1, (uint64_t)"GizmoReq", 30.0);
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v6 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)v43 = objc_msgSend(v4, "UTF8String");
        *(_WORD *)&v43[8] = 2082;
        *(_QWORD *)&v43[10] = objc_msgSend(v5, "UTF8String");
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v33 = qword_1022A0058;
        *(_DWORD *)v39 = 136446466;
        *(_QWORD *)&v39[4] = objc_msgSend(v4, "UTF8String");
        *(_WORD *)&v39[12] = 2082;
        *(_QWORD *)&v39[14] = objc_msgSend(v5, "UTF8String");
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v33, 1, "@GtsMgr, Mismatching keys, syncId, %{public}s, request, %{public}s", v39, 22);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
    }
    if (*(_BYTE *)(a1 + 192) == 88)
      goto LABEL_36;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v8 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v43 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "@GtsMgr, Crossing sessions, %{public}c, #CloneMe", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v9 = *(char *)(a1 + 192);
    *(_DWORD *)v39 = 67240192;
    *(_DWORD *)&v39[4] = v9;
    LODWORD(v38) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, Crossing sessions, %{public}c, #CloneMe", v39, v38, *(_QWORD *)v39);
LABEL_54:
    v37 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v10);
    if (v37 != buf)
      free(v37);
LABEL_36:
    v12 = 0;
    goto LABEL_37;
  }
  v11 = *(unsigned __int8 *)(a1 + 192);
  if (v11 == 84)
  {
    sub_100490FAC(a1, 1);
    v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "properties"), "objectForKey:", CFSTR("kCLTileSyncControlManifestDict"));
    goto LABEL_37;
  }
  if (v11 != 77)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)v43 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@GtsMgr, Unexpected Companion startSession flow, type, %{public}c, #CloneMe", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_36;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v36 = *(char *)(a1 + 192);
    *(_DWORD *)v39 = 67240192;
    *(_DWORD *)&v39[4] = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsMgr, Unexpected Companion startSession flow, type, %{public}c, #CloneMe", v39, 8, *(_QWORD *)v39);
    goto LABEL_54;
  }
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "properties"), "objectForKey:", CFSTR("kCLTileSyncControlManifestDict"));
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v13 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134349056;
    *(_QWORD *)v43 = objc_msgSend(v12, "count");
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@GtsManif, CompTx, %{public}ld", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v14 = qword_1022A0058;
    *(_DWORD *)v39 = 134349056;
    *(_QWORD *)&v39[4] = objc_msgSend(v12, "count");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 0, "@GtsManif, CompTx, %{public}ld", v39, 12);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
LABEL_37:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v19 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v20 = *(char *)(a1 + 192);
    v21 = objc_msgSend(a2, "count");
    v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v23 = objc_msgSend(v12, "count");
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)v43 = v20;
    *(_WORD *)&v43[4] = 2050;
    *(_QWORD *)&v43[6] = v21;
    *(_WORD *)&v43[14] = 2050;
    *(_QWORD *)&v43[16] = v22;
    v44 = 2050;
    v45 = v23;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v26 = qword_1022A0058;
    v27 = *(char *)(a1 + 192);
    v28 = objc_msgSend(a2, "count");
    v29 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v30 = objc_msgSend(v12, "count");
    *(_DWORD *)v39 = 67240960;
    *(_DWORD *)&v39[4] = v27;
    *(_WORD *)&v39[8] = 2050;
    *(_QWORD *)&v39[10] = v28;
    *(_WORD *)&v39[18] = 2050;
    *(_QWORD *)&v39[20] = v29;
    v40 = 2050;
    v41 = v30;
    LODWORD(v38) = 38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 1, "@GtsSync, CsService, startSession, %{public}c, mdin, %{public}ld, queue, %{public}ld, mdout, %{public}ld", v39, v38);
    v32 = (uint8_t *)v31;
    sub_100512490("Generic", 1, 0, 2, "NSDictionary *CLTileSyncManager::handleStartSessionCompanion(NSDictionary *)", "%s\n", v31);
    if (v32 != buf)
      free(v32);
  }
  v24 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  sub_10048E99C((double *)(a1 + 208), v24);
  return v12;
}

id sub_100490FAC(uint64_t a1, int a2)
{
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  NSNumber *v10;
  _BYTE *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  NSObject *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  id v31;
  NSDictionary *v32;
  id result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  char *v39;
  uint64_t v40;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  _BYTE v46[128];
  _BYTE __p[12];
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  int v53;
  _BYTE buf[24];
  __int128 v55;
  uint64_t v56;

  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  v4 = objc_alloc_init((Class)NSMutableDictionary);
  v5 = v3 + 184;
  v6 = sub_100129380(v5);
  v7 = sub_1000DCFC0(v5);
  if (v6 != v7)
  {
    v8 = (_QWORD *)v7;
    do
    {
      *(_OWORD *)buf = *(_OWORD *)(v6 + 32);
      *(_QWORD *)&buf[16] = *(_QWORD *)(v6 + 48);
      if (*(char *)(v6 + 79) < 0)
      {
        sub_100115CE4(&v55, *(void **)(v6 + 56), *(_QWORD *)(v6 + 64));
      }
      else
      {
        v55 = *(_OWORD *)(v6 + 56);
        v56 = *(_QWORD *)(v6 + 72);
      }
      v9 = sub_1001C85FC(v5, (unsigned int *)buf);
      if (!a2
        || ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), v9) & 1) != 0)
      {
        v10 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(v9 + 176));
        sub_100BCC090((unsigned int *)buf, __p);
        v11 = v50 >= 0 ? __p : *(_BYTE **)__p;
        objc_msgSend(v4, "setObject:forKey:", v10, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11));
        if (SHIBYTE(v50) < 0)
          operator delete(*(void **)__p);
      }
      if (SHIBYTE(v56) < 0)
        operator delete((void *)v55);
      v12 = *(_QWORD **)(v6 + 8);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = *(_QWORD **)(v6 + 16);
          v14 = *v13 == v6;
          v6 = (uint64_t)v13;
        }
        while (!v14);
      }
      v6 = (uint64_t)v13;
    }
    while (v13 != v8);
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v15 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v16 = *(_QWORD *)(a1 + 112);
    v17 = sub_100026CC8(v5);
    v18 = objc_msgSend(v4, "count");
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = v16;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v17;
    *(_WORD *)&buf[22] = 1024;
    LODWORD(v55) = v18;
    WORD2(v55) = 1026;
    *(_DWORD *)((char *)&v55 + 6) = a2;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v34 = qword_1022A0058;
    v35 = *(_QWORD *)(a1 + 112);
    v36 = sub_100026CC8(v5);
    v37 = objc_msgSend(v4, "count");
    *(_DWORD *)__p = 136446978;
    *(_QWORD *)&__p[4] = v35;
    v48 = 2050;
    v49 = v36;
    v50 = 1024;
    v51 = v37;
    v52 = 1026;
    v53 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v34, 0, "@GtsManif, PrepTx, %{public}s, tiles, %{public}lu, %d, currentOnly, %{public}d", __p, 34);
    v39 = (char *)v38;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::createManifestInSyChange(BOOL)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v19 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v43;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v43 != v20)
          objc_enumerationMutation(v4);
        v22 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * (_QWORD)v21);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v23 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
        {
          v24 = objc_msgSend(v22, "UTF8String");
          objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v22), "doubleValue");
          *(_DWORD *)buf = 136380931;
          *(_QWORD *)&buf[4] = v24;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v25;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "@GtsManif, entry, %{private}s, gentime, %{public}.1f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v26 = qword_1022A0058;
          v27 = objc_msgSend(v22, "UTF8String");
          objc_msgSend(objc_msgSend(v4, "objectForKeyedSubscript:", v22), "doubleValue");
          *(_DWORD *)__p = 136380931;
          *(_QWORD *)&__p[4] = v27;
          v48 = 2050;
          v49 = v28;
          LODWORD(v40) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 1, "@GtsManif, entry, %{private}s, gentime, %{public}.1f", __p, v40);
          v30 = (char *)v29;
          sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::createManifestInSyChange(BOOL)", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        v21 = (char *)v21 + 1;
      }
      while (v19 != v21);
      v31 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v42, v46, 16);
      v19 = v31;
    }
    while (v31);
  }
  v32 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", CFSTR("Control"), CFSTR("kSYDictionaryObjectSyncIDKey"), v4, CFSTR("kCLTileSyncControlManifestDict"), 0);
  objc_msgSend(*(id *)(a1 + 24), "setObjectIdentifier:", CFSTR("Control"));
  objc_msgSend(*(id *)(a1 + 24), "setChangeType:", 1);
  result = objc_msgSend(*(id *)(a1 + 24), "setProperties:", v32);
  *(_BYTE *)(a1 + 192) = 77;
  *(_BYTE *)(a1 + 200) = 1;
  return result;
}

void sub_1004915F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  if (a58 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100491634(uint64_t a1, void *a2)
{
  NSObject *v4;
  id v5;
  unint64_t v6;
  double v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  NSObject *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  id v26;
  const char *v27;
  char *v28;
  const char *v29;
  char *v30;
  id v31;
  int v32;
  unsigned int v33;
  NSObject *v34;
  int v35;
  int v36;
  int v37;
  NSObject *v38;
  NSObject *v39;
  int v40;
  int v41;
  const char *v42;
  char *v43;
  NSObject *v44;
  int v45;
  unint64_t v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  NSObject *v50;
  NSObject *v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t i;
  NSObject *v56;
  int v57;
  double v58;
  double v59;
  unint64_t v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  id v64;
  unint64_t v65;
  const char *v66;
  char *v67;
  const char *v68;
  char *v69;
  int v70;
  const char *v71;
  char *v72;
  int v73;
  unint64_t v74;
  const char *v75;
  char *v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  int v80;
  double v81;
  double v82;
  unint64_t v83;
  const char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  int v92;
  _BYTE v93[14];
  __int16 v94;
  const char *v95;
  __int16 v96;
  unint64_t v97;
  _BYTE v98[24];
  __int128 __p;
  uint64_t v100;
  uint8_t v101[128];
  _BYTE buf[28];
  __int16 v103;
  unint64_t v104;

  if (*(_BYTE *)(a1 + 192) != 77)
    goto LABEL_52;
  *(_BYTE *)(a1 + 192) = 65;
  *(_BYTE *)(a1 + 120) = 1;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v4 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(a2, "count");
    v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2050;
    *(_QWORD *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v63 = qword_1022A0058;
    v64 = objc_msgSend(a2, "count");
    v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    *(_DWORD *)v98 = 134349312;
    *(_QWORD *)&v98[4] = v64;
    *(_WORD *)&v98[12] = 2050;
    *(_QWORD *)&v98[14] = v65;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v63, 0, "@GtsManif, CompRx, %{public}ld, queue, %{public}lu, metadata", v98, 22);
    v67 = (char *)v66;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v66);
    if (v67 != buf)
      free(v67);
  }
  v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  sub_10048EBD0((double *)(a1 + 208), (int)objc_msgSend(a2, "count"), v7);
  v90 = 0u;
  v91 = 0u;
  v88 = 0u;
  v89 = 0u;
  v8 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v88, v101, 16);
  if (v8)
  {
    v9 = *(_QWORD *)v89;
    v87 = 136380931;
    do
    {
      v10 = 0;
      do
      {
        if (*(_QWORD *)v89 != v9)
          objc_enumerationMutation(a2);
        v11 = *(void **)(*((_QWORD *)&v88 + 1) + 8 * (_QWORD)v10);
        v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
        sub_1015A2E04(buf, (char *)objc_msgSend(v11, "UTF8String"));
        sub_100BCC08C(v98, buf);
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (sub_1001C8DA8((unsigned int *)v98))
        {
          v13 = v12 + 184;
          v14 = sub_1001C0618(v13, (unsigned int *)v98);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v15 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
          {
            v16 = objc_msgSend(v11, "UTF8String");
            *(_DWORD *)buf = v87;
            *(_QWORD *)&buf[4] = v16;
            *(_WORD *)&buf[12] = 1026;
            *(_DWORD *)&buf[14] = v14;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@GtsManif, CompReply, %{private}s, have, %{public}d", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10213D730);
            v25 = qword_1022A0058;
            v26 = objc_msgSend(v11, "UTF8String");
            v92 = v87;
            *(_QWORD *)v93 = v26;
            *(_WORD *)&v93[8] = 1026;
            *(_DWORD *)&v93[10] = v14;
            LODWORD(v86) = 18;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 1, "@GtsManif, CompReply, %{private}s, have, %{public}d", &v92, v86);
            v28 = (char *)v27;
            sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          if (v14)
          {
            v17 = sub_1001C85FC(v13, (unsigned int *)v98);
            sub_100492C20(a1, v17);
          }
        }
        else
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v18 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
          {
            v19 = objc_msgSend(v11, "UTF8String");
            *(_DWORD *)buf = 136380675;
            *(_QWORD *)&buf[4] = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "@GtsManif, BadId, enqueueC, %{private}s, #CloneMe", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10213D730);
            v21 = qword_1022A0058;
            v22 = objc_msgSend(v11, "UTF8String");
            v92 = 136380675;
            *(_QWORD *)v93 = v22;
            LODWORD(v86) = 12;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 16, "@GtsManif, BadId, enqueueC, %{private}s, #CloneMe", &v92, v86);
            v24 = (char *)v23;
            sub_100512490("Generic", 1, 0, 0, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v23);
            if (v24 != buf)
              free(v24);
          }
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_10213D770);
          v20 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136315650;
            *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 966;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = "false";
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_10213D770);
            v92 = 136315650;
            *(_QWORD *)v93 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLTileSyncManager.mm";
            *(_WORD *)&v93[8] = 1024;
            *(_DWORD *)&v93[10] = 966;
            v94 = 2080;
            v95 = "false";
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v92, 28, (const char *)v87);
            v30 = (char *)v29;
            sub_100512490("Generic", 1, 0, 0, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v29);
            if (v30 != buf)
              free(v30);
          }
          sub_100512450();
        }
        if (SHIBYTE(v100) < 0)
          operator delete((void *)__p);
        v10 = (char *)v10 + 1;
      }
      while (v8 != v10);
      v31 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v88, v101, 16);
      v8 = v31;
    }
    while (v31);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4) >= 0x29)
  {
    objc_msgSend(*(id *)(a1 + 8), "setSessionStalenessInterval:", 300.0);
    v32 = 1;
  }
  else
  {
LABEL_52:
    v32 = 0;
  }
  if (!objc_msgSend(a2, "count"))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v38 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, metadataX, 3", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      *(_WORD *)v98 = 0;
      LODWORD(v86) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, metadataX, 3", v98, v86);
      v69 = (char *)v68;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v68);
      if (v69 != buf)
        free(v69);
    }
    goto LABEL_68;
  }
  v33 = *(unsigned __int8 *)(a1 + 192);
  if (v33 > 0x51)
  {
    if (v33 == 84)
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v50 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, SyncTrap", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        *(_WORD *)v98 = 0;
        LODWORD(v86) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, enqueueChanges, 3, SyncTrap", v98, v86);
        v78 = (char *)v77;
        sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v77);
        if (v78 != buf)
          free(v78);
      }
      *(_BYTE *)(a1 + 192) = 77;
      goto LABEL_94;
    }
    if (v33 != 82)
      goto LABEL_57;
LABEL_71:
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v39 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v40 = *(char *)(a1 + 192);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v41 = *(char *)(a1 + 192);
      *(_DWORD *)v98 = 67240192;
      *(_DWORD *)&v98[4] = v41;
      LODWORD(v86) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, enqueueChanges, 3, Manifest, %{public}c", v98, v86);
      v43 = (char *)v42;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
LABEL_94:
    v36 = 1;
LABEL_95:
    v37 = 1;
    goto LABEL_96;
  }
  if (v33 == 65)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v44 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(char *)(a1 + 192);
      v46 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v45;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v46;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v73 = *(char *)(a1 + 192);
      v74 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
      *(_DWORD *)v98 = 67240448;
      *(_DWORD *)&v98[4] = v73;
      *(_WORD *)&v98[8] = 2050;
      *(_QWORD *)&v98[10] = v74;
      LODWORD(v86) = 18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, enqueueChanges, 3, TileData, %{public}c, queue, %{public}ld", v98, v86);
      v76 = (char *)v75;
      sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v75);
      if (v76 != buf)
        free(v76);
    }
    v47 = *(__int128 **)(a1 + 168);
    if (*(__int128 **)(a1 + 176) != v47)
    {
      v48 = *v47;
      *(_QWORD *)&v98[16] = *((_QWORD *)v47 + 2);
      *(_OWORD *)v98 = v48;
      if (*((char *)v47 + 47) < 0)
      {
        sub_100115CE4(&__p, *((void **)v47 + 3), *((_QWORD *)v47 + 4));
      }
      else
      {
        v49 = *(__int128 *)((char *)v47 + 24);
        v100 = *((_QWORD *)v47 + 5);
        __p = v49;
      }
      sub_1004932AC(a1, (unsigned int *)v98);
      sub_100495E9C((uint64_t)buf, (__int128 *)(*(_QWORD *)(a1 + 168) + 48), *(__int128 **)(a1 + 176), *(_QWORD *)(a1 + 168));
      v54 = v53;
      for (i = *(_QWORD *)(a1 + 176); i != v54; i -= 48)
      {
        if (*(char *)(i - 1) < 0)
          operator delete(*(void **)(i - 24));
      }
      *(_QWORD *)(a1 + 176) = v54;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v56 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v57 = *(char *)(a1 + 192);
        v58 = sub_1001C087C((uint64_t)v98);
        v59 = sub_1001C0858((uint64_t)v98);
        v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
        *(_DWORD *)buf = 67240961;
        *(_DWORD *)&buf[4] = v57;
        *(_WORD *)&buf[8] = 2049;
        *(double *)&buf[10] = v58;
        *(_WORD *)&buf[18] = 2049;
        *(double *)&buf[20] = v59;
        v103 = 2050;
        v104 = v60;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld", buf, 0x26u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v79 = qword_1022A0058;
        v80 = *(char *)(a1 + 192);
        v81 = sub_1001C087C((uint64_t)v98);
        v82 = sub_1001C0858((uint64_t)v98);
        v83 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
        v92 = 67240961;
        *(_DWORD *)v93 = v80;
        *(_WORD *)&v93[4] = 2049;
        *(double *)&v93[6] = v81;
        v94 = 2049;
        v95 = *(const char **)&v82;
        v96 = 2050;
        v97 = v83;
        LODWORD(v86) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v79, 1, "@GtsSync, CsSession, %{public}c, llsw, %{private}.2lf, %{private}.2lf, queue, %{public}ld", &v92, v86);
        v85 = (char *)v84;
        sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v84);
        if (v85 != buf)
          free(v85);
      }
      v36 = *(_QWORD *)(a1 + 176) == *(_QWORD *)(a1 + 168);
      if (SHIBYTE(v100) < 0)
        operator delete((void *)__p);
      goto LABEL_95;
    }
LABEL_68:
    v37 = 0;
    v36 = 1;
    goto LABEL_96;
  }
  if (v33 == 77)
    goto LABEL_71;
LABEL_57:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v34 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v35 = *(char *)(a1 + 192);
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v70 = *(char *)(a1 + 192);
    *(_DWORD *)v98 = 67240192;
    *(_DWORD *)&v98[4] = v70;
    LODWORD(v86) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsFlow, CS, enqueueChanges, 3, Unexpected change type, %{public}c", v98, v86);
    v72 = (char *)v71;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v71);
    if (v72 != buf)
      free(v72);
  }
  v36 = 0;
  v37 = 0;
LABEL_96:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v51 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v37;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v36;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = v32;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    *(_DWORD *)v98 = 67240704;
    *(_DWORD *)&v98[4] = v37;
    *(_WORD *)&v98[8] = 1026;
    *(_DWORD *)&v98[10] = v36;
    *(_WORD *)&v98[14] = 1026;
    *(_DWORD *)&v98[16] = v32;
    LODWORD(v86) = 20;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", v98, v86);
    v62 = (char *)v61;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesCompanion(NSDictionary *)", "%s\n", v61);
    if (v62 != buf)
      free(v62);
  }
  return v37 | (v36 << 8) | (v32 << 16);
}

void sub_1004929DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (a39 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100492A48()
{
  NSObject *v0;
  const char *v2;
  uint8_t *v3;
  _DWORD v4[2];
  __int16 v5;
  int v6;
  __int16 v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v0 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240704;
    v10 = 0;
    v11 = 1026;
    v12 = 1;
    v13 = 1026;
    v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v4[0] = 67240704;
    v4[1] = 0;
    v5 = 1026;
    v6 = 1;
    v7 = 1026;
    v8 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, enqueue return, change, %{public}d, complete, %{public}d, large, %{public}d", v4, 20);
    v3 = (uint8_t *)v2;
    sub_100512490("Generic", 1, 0, 2, "std::tuple<BOOL, BOOL, BOOL> CLTileSyncManager::handleEnqueueChangesGizmo(NSDictionary *)", "%s\n", v2);
    if (v3 != buf)
      free(v3);
  }
  return 256;
}

void sub_100492C20(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  __int128 *v10;
  __int128 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  NSObject *v16;
  double v17;
  double v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  double v24;
  double v25;
  unint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  unint64_t v30;
  const char *v31;
  uint64_t v32;
  double v33;
  double v34;
  unint64_t v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  int v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  unint64_t v44;
  __int16 v45;
  int v46;
  uint8_t buf[4];
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  unint64_t v52;
  __int16 v53;
  int v54;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
  {
    v4 = (__int128 *)(a2 + 48);
    if (!*(_DWORD *)(a2 + 48))
    {
      if ((*(_BYTE *)(a1 + 160) & 0xFE) == 0x4C)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v5 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
        {
          v6 = *(char *)(a1 + 160);
          *(_DWORD *)buf = 67240192;
          LODWORD(v48) = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsPair, skipevent, add, blocking sync state, %{public}c", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v7 = *(char *)(a1 + 160);
          v39 = 67240192;
          LODWORD(v40) = v7;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsPair, skipevent, add, blocking sync state, %{public}c", &v39, 8);
          v9 = (uint8_t *)v8;
          sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v8);
LABEL_44:
          if (v9 != buf)
            free(v9);
        }
      }
      else
      {
        v10 = *(__int128 **)(a1 + 168);
        v11 = *(__int128 **)(a1 + 176);
        if (v10 == v11)
        {
          v12 = *(_QWORD *)(a1 + 168);
        }
        else
        {
          while ((sub_100BCC54C((uint64_t)v10, a2 + 48) & 1) == 0)
          {
            v10 += 3;
            if (v10 == v11)
            {
              v10 = v11;
              break;
            }
          }
          v12 = (uint64_t)v10;
          v10 = *(__int128 **)(a1 + 176);
        }
        if ((__int128 *)v12 != v10)
        {
          sub_100495E9C((uint64_t)buf, (__int128 *)(v12 + 48), v10, v12);
          v14 = v13;
          for (i = *(_QWORD *)(a1 + 176); i != v14; i -= 48)
          {
            if (*(char *)(i - 1) < 0)
              operator delete(*(void **)(i - 24));
          }
          *(_QWORD *)(a1 + 176) = v14;
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v16 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
          {
            v17 = sub_1001C087C(a2 + 48);
            v18 = sub_1001C0858(a2 + 48);
            v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
            *(_DWORD *)buf = 134284033;
            v48 = v17;
            v49 = 2049;
            v50 = v18;
            v51 = 2050;
            v52 = v19;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_10213D730);
            v32 = qword_1022A0058;
            v33 = sub_1001C087C(a2 + 48);
            v34 = sub_1001C0858(a2 + 48);
            v35 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
            v39 = 134284033;
            v40 = v33;
            v41 = 2049;
            v42 = v34;
            v43 = 2050;
            v44 = v35;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 1, "@GtsCont, replaceadd, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld", &v39, 32);
            v37 = (uint8_t *)v36;
            sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v36);
            if (v37 != buf)
              free(v37);
          }
        }
        v20 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48), a2);
        if (v20)
        {
          sub_1004951F4((uint64_t *)(a1 + 168), *(_QWORD *)(a1 + 168), (unint64_t)v4);
        }
        else
        {
          v21 = *(_QWORD *)(a1 + 176);
          if (v21 >= *(_QWORD *)(a1 + 184))
          {
            v22 = sub_100496580((uint64_t *)(a1 + 168), v4);
          }
          else
          {
            sub_100495F28(a1 + 168, v4);
            v22 = v21 + 48;
          }
          *(_QWORD *)(a1 + 176) = v22;
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v23 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
        {
          v24 = sub_1001C087C((uint64_t)v4);
          v25 = sub_1001C0858((uint64_t)v4);
          v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
          *(_DWORD *)buf = 134284289;
          v48 = v24;
          v49 = 2049;
          v50 = v25;
          v51 = 2050;
          v52 = v26;
          v53 = 1024;
          v54 = v20;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v27 = qword_1022A0058;
          v28 = sub_1001C087C((uint64_t)v4);
          v29 = sub_1001C0858((uint64_t)v4);
          v30 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
          v39 = 134284289;
          v40 = v28;
          v41 = 2049;
          v42 = v29;
          v43 = 2050;
          v44 = v30;
          v45 = 1024;
          v46 = v20;
          LODWORD(v38) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 1, "@GtsCont, add, llsw, %{private}.2lf, %{private}.2lf, size, %{public}ld, current, {public}%d", &v39, v38);
          v9 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::addTileSync(CLTileFile *)", "%s\n", v31);
          goto LABEL_44;
        }
      }
    }
  }
}

BOOL sub_1004932AC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  _BOOL8 v5;
  double v6;
  double v7;
  id v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  _BYTE *v14;
  NSDictionary *v15;
  void *v16;
  _BYTE *v17;
  NSObject *v18;
  double v19;
  double v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  double v26;
  double v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  double v35;
  double v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v40;
  double v41;
  double v42;
  const char *v43;
  char *v44;
  const char *v45;
  uint64_t v46;
  _QWORD v47[5];
  _BYTE v48[152];
  id v49[2];
  int v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  unint64_t v61;
  _BYTE v62[24];
  uint64_t (*v63)(uint64_t, uint64_t);
  void (*v64)(uint64_t);
  uint64_t v65;
  _QWORD v66[2];
  _BYTE __p[12];
  __int16 v68;
  double v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  unint64_t v77;

  sub_100131938(v49, (uint64_t)"sendEventToGizmo", 0);
  sub_101369384(*(_QWORD *)(a1 + 144), v48);
  if (v48[144])
  {
    *(_QWORD *)v62 = 0;
    *(_QWORD *)&v62[8] = v62;
    *(_QWORD *)&v62[16] = 0x3812000000;
    v63 = sub_100206C70;
    v64 = sub_100207AA4;
    v65 = 0;
    sub_101369950(*(_QWORD *)(a1 + 144), (uint64_t)a2, v66);
    v4 = *(_QWORD *)(*(_QWORD *)&v62[8] + 48);
    v5 = v4 != 0;
    if (v4)
    {
      v6 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
      v7 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
      sub_10048EDD8(a1 + 208, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)&v62[8] + 48) + 8) - **(_DWORD **)(*(_QWORD *)&v62[8] + 48), v7);
      v8 = objc_alloc((Class)NSData);
      v9 = *(uint64_t **)(*(_QWORD *)&v62[8] + 48);
      v10 = *v9;
      v11 = v9[1];
      v12 = v11 - *v9;
      if (v11 == *v9)
        sub_1002EAEB0();
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = nullsub_183;
      v47[3] = &unk_10213D6E8;
      v47[4] = v62;
      v13 = objc_msgSend(v8, "initWithBytesNoCopy:length:deallocator:", v10, v12, v47);
      sub_100BCC090(a2, __p);
      if (v70 >= 0)
        v14 = __p;
      else
        v14 = *(_BYTE **)__p;
      v15 = +[NSDictionary dictionaryWithObjectsAndKeys:](NSDictionary, "dictionaryWithObjectsAndKeys:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14), CFSTR("kSYDictionaryObjectSyncIDKey"), v13, CFSTR("kCLTileSyncObjectDataKey"), +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v6), CFSTR("kCLTileSyncObjectSyncTimestampKey"), 0);
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)__p);
      v16 = *(void **)(a1 + 24);
      sub_100BCC090(a2, __p);
      if (v70 >= 0)
        v17 = __p;
      else
        v17 = *(_BYTE **)__p;
      objc_msgSend(v16, "setObjectIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v17));
      if (SHIBYTE(v70) < 0)
        operator delete(*(void **)__p);
      objc_msgSend(*(id *)(a1 + 24), "setChangeType:", 1);
      objc_msgSend(*(id *)(a1 + 24), "setProperties:", v15);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v18 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v19 = sub_1001C087C((uint64_t)a2);
        v20 = sub_1001C0858((uint64_t)a2);
        v21 = a2[1];
        v22 = a2[2];
        v23 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v62[8] + 48) + 8) - **(_QWORD **)(*(_QWORD *)&v62[8] + 48);
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
        *(_DWORD *)__p = 134284801;
        *(double *)&__p[4] = v19;
        v68 = 2049;
        v69 = v20;
        v70 = 1025;
        v71 = v21;
        v72 = 1025;
        v73 = v22;
        v74 = 2050;
        v75 = v23;
        v76 = 2050;
        v77 = v24;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu", __p, 0x36u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_33;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v25 = qword_1022A0058;
      v26 = sub_1001C087C((uint64_t)a2);
      v27 = sub_1001C0858((uint64_t)a2);
      v28 = a2[1];
      v29 = a2[2];
      v30 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)&v62[8] + 48) + 8) - **(_QWORD **)(*(_QWORD *)&v62[8] + 48);
      v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
      v50 = 134284801;
      v51 = v26;
      v52 = 2049;
      v53 = v27;
      v54 = 1025;
      v55 = v28;
      v56 = 1025;
      v57 = v29;
      v58 = 2050;
      v59 = v30;
      v60 = 2050;
      v61 = v31;
      LODWORD(v46) = 54;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 1, "@GtsComp, add, llsw, %{private}.2lf, %{private}.2lf, tile_x, %{private}d, tile_y, %{private}d, tilesize, %{public}ld, queue, %{public}lu", &v50, v46);
      v33 = (char *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v32);
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v37 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Unable to send #tile, it is missing", __p, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_33;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      LOWORD(v50) = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0058, 16, "Unable to send #tile, it is missing", &v50, 2);
      v33 = (char *)v45;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v45);
    }
    if (v33 != __p)
      free(v33);
LABEL_33:
    _Block_object_dispose(v62, 8);
    v38 = v66[0];
    v66[0] = 0;
    if (v38)
      sub_1004966B4((uint64_t)v66, v38);
    goto LABEL_35;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v34 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v35 = sub_1001C087C((uint64_t)a2);
    v36 = sub_1001C0858((uint64_t)a2);
    *(_DWORD *)__p = 134283777;
    *(double *)&__p[4] = v35;
    v68 = 2049;
    v69 = v36;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf", __p, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v40 = qword_1022A0058;
    v41 = sub_1001C087C((uint64_t)a2);
    v42 = sub_1001C0858((uint64_t)a2);
    *(_DWORD *)v62 = 134283777;
    *(double *)&v62[4] = v41;
    *(_WORD *)&v62[12] = 2049;
    *(double *)&v62[14] = v42;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v40, 1, "@GtsCont, addlost, llsw, %{private}.2lf, %{private}.2lf", v62, 22);
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileSyncManager::sendEventToGizmo(TileId &)", "%s\n", v43);
    if (v44 != __p)
      free(v44);
  }
  v5 = 0;
LABEL_35:
  sub_100131740(v49);
  return v5;
}

void sub_100493A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  uint64_t v62;
  uint64_t v64;

  _Block_object_dispose(&a49, 8);
  v64 = a55;
  a55 = 0;
  if (v64)
    sub_1004966B4(v62, v64);
  sub_100131740(&a39);
  _Unwind_Resume(a1);
}

void sub_100493AF8(uint64_t a1, int *a2, void *a3, double *a4)
{
  NSObject *v8;
  double v9;
  std::string::size_type v10;
  double v11;
  uint64_t v12;
  const char *v13;
  std::string *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  int v18;
  int v19;
  const char *v20;
  uint64_t v21;
  char *v22;
  size_t v23;
  std::string *p_buf;
  char *v25;
  void **v26;
  std::string::size_type v27;
  std::string *v28;
  __int128 v29;
  void **v30;
  NSObject *v31;
  void **v32;
  void **v33;
  const char *v34;
  std::string *v35;
  void *__p[2];
  int64_t v37;
  void *v38[2];
  unsigned __int8 v39;
  int v40;
  double v41;
  __int16 v42;
  uint64_t v43;
  std::string buf;

  if (*a2)
    sub_1018FB61C();
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56)) & 1) != 0)
  {
    if (*a4 >= *(double *)(a1 + 72))
    {
      if (*a2)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v17 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          v18 = *a2;
          LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "@GtsError, Adding non-Wifi tile, %{public}d, #CloneMe", (uint8_t *)&buf, 8u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v19 = *a2;
          v40 = 67240192;
          LODWORD(v41) = v19;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "@GtsError, Adding non-Wifi tile, %{public}d, #CloneMe", &v40, 8);
          v14 = (std::string *)v20;
          sub_100512490("Generic", 1, 0, 0, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", v20);
          goto LABEL_29;
        }
      }
      else
      {
        sub_1011B4078(a2, (uint64_t)v38);
        v21 = sub_100BCCB3C(a2);
        v22 = (char *)v21;
        if (*(char *)(v21 + 23) >= 0)
          v23 = *(unsigned __int8 *)(v21 + 23);
        else
          v23 = *(_QWORD *)(v21 + 8);
        p_buf = &buf;
        sub_100259584((uint64_t)&buf, v23 + 1);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        if (v23)
        {
          if (v22[23] >= 0)
            v25 = v22;
          else
            v25 = *(char **)v22;
          memmove(p_buf, v25, v23);
        }
        *(_WORD *)((char *)&p_buf->__r_.__value_.__l.__data_ + v23) = 47;
        if ((v39 & 0x80u) == 0)
          v26 = v38;
        else
          v26 = (void **)v38[0];
        if ((v39 & 0x80u) == 0)
          v27 = v39;
        else
          v27 = (std::string::size_type)v38[1];
        v28 = std::string::append(&buf, (const std::string::value_type *)v26, v27);
        v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v37 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (v37 >= 0)
          v30 = __p;
        else
          v30 = (void **)__p[0];
        if ((objc_msgSend(a3, "writeToFile:atomically:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v30), 1) & 1) != 0)sub_1011B1EC0(*(_QWORD *)(a1 + 144), *a4);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v31 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
        {
          v32 = __p;
          if (v37 < 0)
            v32 = (void **)__p[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Failed writing tile to file, %{private}s", (uint8_t *)&buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v33 = __p;
          if (v37 < 0)
            v33 = (void **)__p[0];
          v40 = 136380675;
          v41 = *(double *)&v33;
          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "Failed writing tile to file, %{private}s", &v40, 12);
          v35 = (std::string *)v34;
          sub_100512490("Generic", 1, 0, 0, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", v34);
          if (v35 != &buf)
            free(v35);
        }
        if (SHIBYTE(v37) < 0)
          operator delete(__p[0]);
        if ((char)v39 < 0)
          operator delete(v38[0]);
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v8 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v9 = *a4;
        v10 = *(_QWORD *)(a1 + 72);
        LODWORD(buf.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f", (uint8_t *)&buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v11 = *a4;
        v12 = *(_QWORD *)(a1 + 72);
        v40 = 134349312;
        v41 = v11;
        v42 = 2050;
        v43 = v12;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsSync, drop older add, timestamp, %{public}0.1f, toggle/reset, %{public}0.1f", &v40, 22);
        v14 = (std::string *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", v13);
LABEL_29:
        if (v14 != &buf)
          free(v14);
      }
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v15 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "@GtsLock, drop add on LS off", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      LOWORD(v40) = 0;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsLock, drop add on LS off", &v40, 2);
      v14 = (std::string *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::addTile(const TileId &, NSData *, const CFAbsoluteTime &)", "%s\n", v16);
      goto LABEL_29;
    }
  }
}

void sub_100494664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004946E0(uint64_t a1)
{
  uint64_t result;

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    sub_10048FE1C(a1, (uint64_t)"Indexed", 1.0);
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56));
  if ((_DWORD)result)
    return sub_100494748(a1);
  return result;
}

uint64_t sub_100494748(uint64_t result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(result + 80))
  {
    v1 = result;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v2 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsGiz, reclearing", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsGiz, reclearing", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleFirstUnlockGizmo()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    *(_BYTE *)(v1 + 80) = 0;
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 48) + 40))(*(_QWORD *)(v1 + 48));
  }
  return result;
}

void sub_1004948F4(uint64_t a1)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
    sub_100494934(a1);
}

void sub_100494934(uint64_t a1)
{
  NSObject *v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  unint64_t v10;
  __int16 v11;
  int v12;
  uint8_t buf[4];
  unint64_t v14;
  __int16 v15;
  int v16;

  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v4 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)buf = 134349312;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
    v6 = *(_DWORD *)(a1 + 196);
    v9 = 134349312;
    v10 = v5;
    v11 = 1026;
    v12 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsMgr, Nearby, queue, %{public}lu, sessionErrors, %{public}d", &v9, 18);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleNearbyCompanion()", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if (*(_DWORD *)(a1 + 196))
    sub_10048FE1C(a1, (uint64_t)"Nearby", 1.0);
}

void sub_100494B48(uint64_t a1, int a2)
{
  id v4;
  _QWORD v5[5];
  int v6;

  *(double *)(a1 + 72) = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)))
  {
    v4 = objc_msgSend(*(id *)(a1 + 64), "silo");
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_100494DB0;
    v5[3] = &unk_10213D6C0;
    v5[4] = a1;
    v6 = a2;
    objc_msgSend(v4, "async:", v5);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)))
    sub_100494BFC(a1, a2);
}

void sub_100494BFC(uint64_t a1, int a2)
{
  char v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48));
  if (!a2 && (v4 & 1) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "@GtsGiz, reclear pending", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsGiz, reclear pending", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleToggleResetGizmo(int)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_BYTE *)(a1 + 80) = 1;
  }
}

void sub_100494DB0(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[2];
  __int16 v11;
  unint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a1 + 32);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10213D730);
  v3 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
  {
    v4 = *(_DWORD *)(a1 + 40);
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 4);
    *(_DWORD *)buf = 67240448;
    v14 = v4;
    v15 = 2050;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v6 = *(_DWORD *)(a1 + 40);
    v7 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v2 + 176) - *(_QWORD *)(v2 + 168)) >> 4);
    v10[0] = 67240448;
    v10[1] = v6;
    v11 = 2050;
    v12 = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsCont, ToggleReset, %{public}d, queuewas, %{public}ld", v10, 18);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLTileSyncManager::handleToggleResetCompanion(int)_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  sub_100495E50((uint64_t *)(v2 + 168));
}

void sub_100494FB4(uint64_t a1, uint64_t a2, double a3, double a4)
{
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  double v14;
  __int16 v15;
  double v16;
  uint8_t buf[4];
  uint64_t v18;
  __int16 v19;
  double v20;
  __int16 v21;
  double v22;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56)) & 1) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v8 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446723;
      v18 = a2;
      v19 = 2049;
      v20 = a3;
      v21 = 2049;
      v22 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v11 = 136446723;
      v12 = a2;
      v13 = 2049;
      v14 = a3;
      v15 = 2049;
      v16 = a4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsCont, %{public}s, llsw, %{private}.2lf, %{private}.2lf", &v11, 32);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLTileSyncManager::handleTileAdded(const char *, double, double)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_10048FE1C(a1, a2, 30.0);
  }
}

void sub_1004951BC(uint64_t a1, _DWORD *a2)
{
  unsigned int *v3;
  double v4;

  v3 = (unsigned int *)(a1 + 208);
  v4 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 32))(*(_QWORD *)(a1 + 56));
  sub_10048F008(v3, a2, v4);
}

unint64_t sub_1004951F4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  v4 = a2;
  v7 = *a1;
  v6 = a1[1];
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - *a1) >> 4);
  v11 = a1[2];
  v9 = (uint64_t)(a1 + 2);
  v10 = v11;
  if (v6 >= v11)
  {
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7) >> 4) + 1;
    if (v13 > 0x555555555555555)
      sub_100259694();
    v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - v7) >> 4);
    if (2 * v14 > v13)
      v13 = 2 * v14;
    if (v14 >= 0x2AAAAAAAAAAAAAALL)
      v15 = 0x555555555555555;
    else
      v15 = v13;
    v22 = v9;
    if (v15)
      v16 = (char *)sub_100313718(v9, v15);
    else
      v16 = 0;
    v18 = v16;
    v19 = &v16[48 * v8];
    v20 = v19;
    v21 = &v16[48 * v15];
    sub_10049601C(&v18, (__int128 *)a3);
    v4 = sub_1004961AC((uint64_t)a1, &v18, (__int128 *)v4);
    sub_1000C1970((uint64_t)&v18);
  }
  else if (a2 == v6)
  {
    sub_100495F28((uint64_t)a1, (__int128 *)a3);
  }
  else
  {
    sub_100495F98((uint64_t)a1, a2, v6, a2 + 48);
    if (v4 <= a3)
      a3 += 48 * (a1[1] > a3);
    v12 = *(_OWORD *)a3;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(a3 + 16);
    *(_OWORD *)v4 = v12;
    std::string::operator=((std::string *)(v7 + 48 * v8 + 24), (const std::string *)(a3 + 24));
  }
  return v4;
}

void sub_10049536C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000C1970((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100495380(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  NSObject *v6;
  uint8_t *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  const char *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  _BOOL4 v38;
  __int16 v39;
  _BOOL4 v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  unint64_t v44;
  uint8_t buf[4];
  uint64_t v46;
  __int16 v47;
  _BOOL4 v48;
  __int16 v49;
  _BOOL4 v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  unint64_t v54;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 16))(*(_QWORD *)(a1 + 56)) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 48))(*(_QWORD *)(a1 + 56)))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v4 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@GtsManif, skip, direct", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        LOWORD(v35) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@GtsManif, skip, direct", &v35, 2);
LABEL_19:
        v7 = (uint8_t *)v5;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v5);
        if (v7 != buf)
          free(v7);
      }
    }
    else
    {
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48));
      v8 = !(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48))
        || *(_BYTE *)(a1 + 160) != 83
        || sub_100026CC8(v34 + 184) == 0;
      v10 = *(_QWORD *)(a1 + 168);
      v9 = *(_QWORD *)(a1 + 176);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      v11 = &qword_1022A0000;
      v12 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48)) ^ 1;
        v14 = *(char *)(a1 + 160);
        v15 = sub_100026CC8(v34 + 184);
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
        *(_DWORD *)buf = 136447234;
        v46 = a2;
        v47 = 1026;
        v48 = v13;
        v49 = 1026;
        v50 = v14;
        v11 = &qword_1022A0000;
        v51 = 2050;
        v52 = v15;
        v53 = 2050;
        v54 = v16;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu", buf, 0x2Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v20 = qword_1022A0058;
        v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48)) ^ 1;
        v22 = *(char *)(a1 + 160);
        v23 = sub_100026CC8(v34 + 184);
        v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 176) - *(_QWORD *)(a1 + 168)) >> 4);
        v35 = 136447234;
        v36 = a2;
        v37 = 1026;
        v38 = v21;
        v39 = 1026;
        v40 = v22;
        v41 = 2050;
        v42 = v23;
        v43 = 2050;
        v44 = v24;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "@GtsManif, check, %{public}s, state, %{public}d, %{public}c, %{public}lu, sync, %{public}lu", &v35, 44);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
        v11 = &qword_1022A0000;
      }
      v17 = v9 != v10 || v8;
      if (v17 == 1)
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v18 = v11[11];
        if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446722;
          v46 = a2;
          v47 = 1026;
          v48 = v8;
          v49 = 1026;
          v50 = v9 != v10;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d", buf, 0x18u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v27 = v11[11];
          v35 = 136446722;
          v36 = a2;
          v37 = 1026;
          v38 = v8;
          v39 = 1026;
          v40 = v9 != v10;
          LODWORD(v33) = 24;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 1, "@GtsManif, skip, %{public}s, state, %{public}d, sync, %{public}d", &v35, v33);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
        if (v9 != v10)
          sub_10048FE1C(a1, (uint64_t)"Syncing", 30.0);
      }
      else
      {
        sub_100490FAC(a1, 0);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10213D730);
        v19 = v11[11];
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@GtsFlow, CS, setHasChanges, 1, SendManifest", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10213D730);
          v30 = v11[11];
          LOWORD(v35) = 0;
          LODWORD(v33) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 0, "@GtsFlow, CS, setHasChanges, 1, SendManifest", &v35, v33);
          v32 = (uint8_t *)v31;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLTileSyncManager::sendCompanionManifest(const char *)", "%s\n", v31);
          if (v32 != buf)
            free(v32);
        }
        objc_msgSend(*(id *)(a1 + 8), "setHasChangesAvailable");
      }
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213D730);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "@GtsManif, return, not companion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213D730);
      LOWORD(v35) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@GtsManif, return, not companion", &v35, 2);
      goto LABEL_19;
    }
  }
}

void sub_100495B9C(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

Class sub_100495BC8()
{
  Class result;

  if (qword_1023013A0 != -1)
    dispatch_once(&qword_1023013A0, &stru_10213D750);
  result = objc_getClass("SYDictionaryObject");
  qword_102301398 = (uint64_t)result;
  off_1022A1AF0 = sub_100495C24;
  return result;
}

uint64_t sub_100495C24()
{
  return qword_102301398;
}

void sub_100495C30(id a1)
{
  qword_1023013A8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/CompanionSync.framework/CompanionSync", 2);
}

void sub_100495C58(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

Class sub_100495C84()
{
  Class result;

  if (qword_1023013B8 != -1)
    dispatch_once(&qword_1023013B8, &stru_10213D790);
  result = objc_getClass("PSYSyncCoordinator");
  qword_1023013B0 = (uint64_t)result;
  off_1022A1CD8 = sub_100495CE0;
  return result;
}

uint64_t sub_100495CE0()
{
  return qword_1023013B0;
}

void sub_100495CEC(id a1)
{
  qword_1023013C0 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/PairedSync.framework/PairedSync", 2);
}

Class sub_100495D14()
{
  Class result;

  if (qword_1023013B8 != -1)
    dispatch_once(&qword_1023013B8, &stru_10213D790);
  result = objc_getClass("PSYInitialSyncStateObserver");
  qword_1023013C8 = (uint64_t)result;
  off_1022A1CE0 = sub_100495D70;
  return result;
}

uint64_t sub_100495D70()
{
  return qword_1023013C8;
}

Class sub_100495D7C()
{
  Class result;

  if (qword_1023013A0 != -1)
    dispatch_once(&qword_1023013A0, &stru_10213D750);
  result = objc_getClass("SYService");
  qword_1023013D0 = (uint64_t)result;
  off_1022A1CE8 = sub_100495DD8;
  return result;
}

uint64_t sub_100495DD8()
{
  return qword_1023013D0;
}

void sub_100495DE4(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_100495E10(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_100495E50((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_100495E50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 48)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

__int128 *sub_100495E9C(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  __int128 *v5;
  __int128 v7;
  void **v8;
  __int128 v9;

  v5 = a2;
  if (a2 != a3)
  {
    do
    {
      v7 = *v5;
      *(_QWORD *)(a4 + 16) = *((_QWORD *)v5 + 2);
      *(_OWORD *)a4 = v7;
      v8 = (void **)(a4 + 24);
      if (*(char *)(a4 + 47) < 0)
        operator delete(*v8);
      v9 = *(__int128 *)((char *)v5 + 24);
      *(_QWORD *)(a4 + 40) = *((_QWORD *)v5 + 5);
      *(_OWORD *)v8 = v9;
      *((_BYTE *)v5 + 47) = 0;
      *((_BYTE *)v5 + 24) = 0;
      a4 += 48;
      v5 += 3;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

_BYTE *sub_100495F28(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  _BYTE *result;
  __int128 v6;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = *a2;
  *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v3 = v4;
  result = (_BYTE *)(v3 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v3 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)result = v6;
  }
  *(_QWORD *)(a1 + 8) = v3 + 48;
  return result;
}

void sub_100495F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100495F98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  char v13;

  v6 = *(_QWORD *)(a1 + 8);
  v7 = a2 + v6 - a4;
  v8 = v6;
  if (v7 < a3)
  {
    v9 = v7;
    v8 = *(_QWORD *)(a1 + 8);
    do
    {
      v10 = *(_OWORD *)v9;
      *(_QWORD *)(v8 + 16) = *(_QWORD *)(v9 + 16);
      *(_OWORD *)v8 = v10;
      v11 = *(_OWORD *)(v9 + 24);
      *(_QWORD *)(v8 + 40) = *(_QWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 24) = v11;
      *(_QWORD *)(v9 + 32) = 0;
      *(_QWORD *)(v9 + 40) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v8 += 48;
      v9 += 48;
    }
    while (v9 < a3);
  }
  *(_QWORD *)(a1 + 8) = v8;
  return sub_10049625C((uint64_t)&v13, a2, v7, v6);
}

_BYTE *sub_10049601C(_QWORD *a1, __int128 *a2)
{
  uint64_t v4;
  __int128 *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  __int128 v24;
  _BYTE *result;
  __int128 v26;
  uint64_t v27;
  int64x2_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = a1[2];
  if (v4 == a1[3])
  {
    v5 = (__int128 *)a1[1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == *a1)
        v10 = 1;
      else
        v10 = 0x5555555555555556 * ((v4 - *a1) >> 4);
      v11 = v10 >> 2;
      v12 = a1[4];
      v30 = a1[4];
      v13 = (char *)sub_100313718(v12, v10);
      v15 = &v13[48 * v11];
      v16 = a1[1];
      v17 = a1[2] - v16;
      if (v17)
      {
        v18 = &v15[v17];
        v19 = &v13[48 * v11];
        do
        {
          v20 = *(_OWORD *)v16;
          *((_QWORD *)v19 + 2) = *(_QWORD *)(v16 + 16);
          *(_OWORD *)v19 = v20;
          v21 = *(_OWORD *)(v16 + 24);
          *((_QWORD *)v19 + 5) = *(_QWORD *)(v16 + 40);
          *(_OWORD *)(v19 + 24) = v21;
          *(_QWORD *)(v16 + 32) = 0;
          *(_QWORD *)(v16 + 40) = 0;
          *(_QWORD *)(v16 + 24) = 0;
          v19 += 48;
          v16 += 48;
        }
        while (v19 != v18);
        v22 = *(int64x2_t *)(a1 + 1);
      }
      else
      {
        v22 = vdupq_n_s64(v16);
        v18 = &v13[48 * v11];
      }
      v27 = *a1;
      *a1 = v13;
      a1[1] = v15;
      v28 = v22;
      v23 = a1[3];
      a1[2] = v18;
      a1[3] = &v13[48 * v14];
      v29 = v23;
      sub_1000C1970((uint64_t)&v27);
      v4 = a1[2];
    }
    else
    {
      v6 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v5 - *a1) >> 4);
      if (v6 >= -1)
        v7 = v6 + 1;
      else
        v7 = v6 + 2;
      v8 = -3 * (v7 >> 1);
      sub_100495E9C((uint64_t)&v27, v5, (__int128 *)v4, (uint64_t)&v5[-3 * (v7 >> 1)]);
      v4 = v9;
      a1[1] += 16 * v8;
      a1[2] = v9;
    }
  }
  v24 = *a2;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v4 = v24;
  result = (_BYTE *)(v4 + 24);
  if (*((char *)a2 + 47) < 0)
  {
    result = sub_100115CE4(result, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v26 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)result = v26;
  }
  a1[2] += 48;
  return result;
}

uint64_t sub_1004961AC(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a2[1];
  v7 = a1 + 16;
  sub_1004962FC(a1 + 16, (uint64_t)a3, (uint64_t)a3, *(_QWORD *)a1, *(_QWORD *)a1, v6, v6);
  a2[1] = v8;
  a2[2] = sub_1004963A8(v7, a3, *(__int128 **)(a1 + 8), a2[2]);
  v9 = *(_QWORD *)a1;
  *(_QWORD *)a1 = a2[1];
  a2[1] = v9;
  v10 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = a2[2];
  a2[2] = v10;
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return v6;
}

uint64_t sub_10049625C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  void **v11;
  __int128 v12;

  if (a3 != a2)
  {
    v7 = 0;
    do
    {
      v8 = a3 + v7;
      v9 = a4 + v7;
      v10 = *(_OWORD *)(a3 + v7 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 + v7 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      v11 = (void **)(a4 + v7 - 24);
      if (*(char *)(a4 + v7 - 1) < 0)
        operator delete(*v11);
      v12 = *(_OWORD *)(v8 - 24);
      *(_QWORD *)(a4 + v7 - 8) = *(_QWORD *)(v8 - 8);
      *(_OWORD *)v11 = v12;
      *(_BYTE *)(v8 - 1) = 0;
      *(_BYTE *)(v8 - 24) = 0;
      v7 -= 48;
    }
    while (a3 + v7 != a2);
  }
  return a3;
}

uint64_t sub_1004962FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[3];
  char v14;
  __int128 v15;
  __int128 v16;

  v7 = a7;
  *(_QWORD *)&v16 = a6;
  *((_QWORD *)&v16 + 1) = a7;
  v15 = v16;
  v13[0] = a1;
  v13[1] = &v15;
  v13[2] = &v16;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v10;
      v11 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v11;
      v9 -= 48;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 48;
      a3 -= 48;
    }
    while (a3 != a5);
    *((_QWORD *)&v16 + 1) = v9;
  }
  v14 = 1;
  sub_10049643C((uint64_t)v13);
  return a6;
}

uint64_t sub_1004963A8(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v11 = a4;
  v10 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v6 = *(__int128 *)((char *)a2 + 24);
      *(_QWORD *)(v4 + 40) = *((_QWORD *)a2 + 5);
      *(_OWORD *)(v4 + 24) = v6;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 5) = 0;
      *((_QWORD *)a2 + 3) = 0;
      v4 += 48;
      a2 += 3;
    }
    while (a2 != a3);
    v11 = v4;
  }
  v9 = 1;
  sub_1004964B4((uint64_t)v8);
  return v4;
}

uint64_t sub_10049643C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_100496470(a1);
  return a1;
}

void sub_100496470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*(void **)(v1 + 24));
    v1 += 48;
  }
}

uint64_t sub_1004964B4(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1004964E8(a1);
  return a1;
}

void sub_1004964E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 48;
  }
}

void sub_10049652C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 48;
      *(_QWORD *)(a1 + 16) = v2 - 48;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_100496580(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  _BYTE *v13;
  __int128 v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v5 = v4 + 1;
  if (v4 + 1 > 0x555555555555555)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x2AAAAAAAAAAAAAALL)
    v9 = 0x555555555555555;
  else
    v9 = v5;
  v20 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100313718(v7, v9);
  else
    v10 = 0;
  v11 = &v10[48 * v4];
  v17[0] = v10;
  v17[1] = v11;
  v18 = v11;
  v19 = &v10[48 * v9];
  v12 = *a2;
  *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
  *(_OWORD *)v11 = v12;
  v13 = v11 + 24;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(v13, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
    v11 = v18;
  }
  else
  {
    v14 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v11 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)v13 = v14;
  }
  v18 = v11 + 48;
  sub_1000C19A4(a1, v17);
  v15 = a1[1];
  sub_1000C1970((uint64_t)v17);
  return v15;
}

void sub_1004966A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1000C1970((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004966B4(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)a2;
    if (*(_QWORD *)a2)
    {
      *(_QWORD *)(a2 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

BOOL sub_1004966FC()
{
  return os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT);
}

BOOL sub_100496710()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 728), OS_LOG_TYPE_INFO);
}

BOOL sub_100496720()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 728));
}

uint64_t sub_100496E28(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  int v31;
  char v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_59;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_61;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_59:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_61:
        v42 = 8;
        goto LABEL_78;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_65;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_65:
        v42 = 12;
        goto LABEL_78;
      case 3u:
        v25 = 0;
        v26 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_69;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_69:
        v42 = 16;
        goto LABEL_78;
      case 4u:
        *(_BYTE *)(a1 + 32) |= 0x10u;
        v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v30 <= 0xFFFFFFFFFFFFFFFBLL && v30 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v31 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v31 = 0;
        }
        *(_DWORD *)(a1 + 28) = v31;
        continue;
      case 5u:
        v32 = 0;
        v33 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v35 = v34 + 1;
          if (v34 == -1 || v35 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v36 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v35;
            v15 |= (unint64_t)(v36 & 0x7F) << v32;
            if (v36 < 0)
            {
              v32 += 7;
              v10 = v33++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_73;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_73:
        v42 = 20;
        goto LABEL_78;
      case 6u:
        v37 = 0;
        v38 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 32) |= 8u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v39 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v40 = v39 + 1;
      if (v39 == -1 || v40 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v41 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v39);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40;
      v15 |= (unint64_t)(v41 & 0x7F) << v37;
      if ((v41 & 0x80) == 0)
        goto LABEL_75;
      v37 += 7;
      v10 = v38++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_77;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_75:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_77:
    v42 = 24;
LABEL_78:
    *(_DWORD *)(a1 + v42) = v15;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_100498304(uint64_t a1, uint64_t a2)
{
  char **v4;
  char **v5;
  char **v6;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char **v14;
  char **v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  int v23;
  unint64_t v25;
  uint64_t v26;
  char **v27;
  char **v28;
  char **v29;
  char **v30;
  char **v31;
  uint64_t v32;
  uint64_t result;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char v46;
  unsigned int v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  char v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  BOOL v72;
  uint64_t v73;
  uint64_t v74;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v5 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v6 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v7 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v8 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v9 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v23 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x100u;
          v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v25 <= 0xFFFFFFFFFFFFFFF7 && v25 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v5 + 858);
          goto LABEL_128;
        case 2u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 8u;
          v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v6 + 859);
          goto LABEL_128;
        case 3u:
          v35 = 0;
          v36 = 0;
          v37 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x1000u;
          while (2)
          {
            v38 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v39 = v38 + 1;
            if (v38 == -1 || v39 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v40 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v38);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v39;
              v37 |= (unint64_t)(v40 & 0x7F) << v35;
              if (v40 < 0)
              {
                v35 += 7;
                v22 = v36++ >= 9;
                if (v22)
                {
                  LODWORD(v37) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v37) = 0;
LABEL_89:
          v71 = *((int *)v7 + 860);
          goto LABEL_107;
        case 4u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 1u;
          v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v41 <= 0xFFFFFFFFFFFFFFF7 && v41 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v8 + 861);
          goto LABEL_128;
        case 5u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x20u;
          v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 <= 0xFFFFFFFFFFFFFFF7 && v42 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v9 + 862);
          goto LABEL_128;
        case 6u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x40u;
          v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v43 <= 0xFFFFFFFFFFFFFFF7 && v43 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v43 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v10 + 863);
          goto LABEL_128;
        case 7u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x200u;
          v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v44 <= 0xFFFFFFFFFFFFFFF7 && v44 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v11 + 864);
          goto LABEL_128;
        case 8u:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x10u;
          v45 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v45 <= 0xFFFFFFFFFFFFFFF7 && v45 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v45);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = *((int *)v12 + 865);
          goto LABEL_128;
        case 9u:
          v46 = 0;
          v47 = 0;
          v37 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x800u;
          while (2)
          {
            v48 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v49 = v48 + 1;
            if (v48 == -1 || v49 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v50 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v48);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49;
              v37 |= (unint64_t)(v50 & 0x7F) << v46;
              if (v50 < 0)
              {
                v46 += 7;
                v22 = v47++ >= 9;
                if (v22)
                {
                  LODWORD(v37) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v37) = 0;
LABEL_93:
          v71 = *((int *)v13 + 866);
          goto LABEL_107;
        case 0xAu:
          v51 = 0;
          v52 = 0;
          v53 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x4000u;
          while (2)
          {
            v54 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v55 = v54 + 1;
            if (v54 == -1 || v55 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v56 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v54);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v55;
              v53 |= (unint64_t)(v56 & 0x7F) << v51;
              if (v56 < 0)
              {
                v51 += 7;
                v22 = v52++ >= 9;
                if (v22)
                {
                  v53 = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v53 = 0;
LABEL_97:
          v72 = v53 != 0;
          v73 = *((int *)v14 + 867);
          goto LABEL_102;
        case 0xBu:
          v57 = 0;
          v58 = 0;
          v59 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x2000u;
          while (2)
          {
            v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v59 |= (unint64_t)(v62 & 0x7F) << v57;
              if (v62 < 0)
              {
                v57 += 7;
                v22 = v58++ >= 9;
                if (v22)
                {
                  v59 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v59 = 0;
LABEL_101:
          v72 = v59 != 0;
          v73 = *((int *)v15 + 868);
LABEL_102:
          *(_BYTE *)(a1 + v73) = v72;
          continue;
        case 0xCu:
          v63 = 0;
          v64 = 0;
          v37 = 0;
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x400u;
          break;
        case 0xDu:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 4u;
          v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v68 <= 0xFFFFFFFFFFFFFFF7 && v68 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v68 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = 24;
          goto LABEL_128;
        case 0xEu:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 2u;
          v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = 16;
          goto LABEL_128;
        case 0xFu:
          *(_WORD *)(a1 + *((int *)v4 + 857)) |= 0x80u;
          v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v70 <= 0xFFFFFFFFFFFFFFF7 && v70 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v26 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v26 = 0;
          }
          v74 = 64;
LABEL_128:
          *(_QWORD *)(a1 + v74) = v26;
          continue;
        default:
          v27 = v5;
          v28 = v6;
          v29 = v4;
          v30 = v7;
          v31 = v8;
          v32 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          a1 = v32;
          v9 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v8 = v31;
          v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v7 = v30;
          v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v4 = v29;
          v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v6 = v28;
          v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v5 = v27;
          v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v65 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v66 = v65 + 1;
        if (v65 == -1 || v66 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v67 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v65);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v66;
        v37 |= (unint64_t)(v67 & 0x7F) << v63;
        if ((v67 & 0x80) == 0)
          goto LABEL_104;
        v63 += 7;
        v22 = v64++ >= 9;
        if (v22)
        {
          LODWORD(v37) = 0;
          goto LABEL_106;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_104:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v37) = 0;
LABEL_106:
      v71 = 88;
LABEL_107:
      *(_DWORD *)(a1 + v71) = v37;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

double sub_100499EF4(uint64_t a1)
{
  uint64_t v1;
  double result;

  v1 = sub_100E33344(a1, 1);
  *(_QWORD *)v1 = off_10213D818;
  *(_QWORD *)(v1 + 96) = &_mh_execute_header;
  *(_QWORD *)(v1 + 104) = 26;
  *(_DWORD *)(v1 + 112) = 0;
  *(_BYTE *)(v1 + 120) = 0;
  *(_BYTE *)(v1 + 128) = 0;
  *(_QWORD *)(v1 + 136) = 0x7FF0000000000000;
  *(_BYTE *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  result = 2.22507386e-308;
  *(_OWORD *)(v1 + 160) = xmmword_101BB26B0;
  *(_BYTE *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0x10000000000000;
  *(_DWORD *)(v1 + 192) = 0;
  *(_QWORD *)(v1 + 200) = 0;
  *(_BYTE *)(v1 + 208) = 0;
  *(_BYTE *)(v1 + 216) = 0;
  return result;
}

void sub_100499F74(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 96) != a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    v4 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v5 = *(int *)(a1 + 96);
      v6[0] = 68289538;
      v6[1] = 0;
      v7 = 2082;
      v8 = "";
      v9 = 2050;
      v10 = a2;
      v11 = 2050;
      v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Changing source state\", \"new state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld, \"old state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v6, 0x26u);
    }
    *(_DWORD *)(a1 + 96) = a2;
    if (a2 != 1)
      *(_DWORD *)(a1 + 100) = 1;
  }
}

void sub_10049A094(uint64_t a1, int a2)
{
  int v4;
  int *v5;
  int *v6;
  uint64_t v7;
  int *v8;
  int v9;
  uint64_t v10;
  int *v11;
  int v12;
  uint64_t v13;
  int *v14;
  int v15;
  uint64_t v16;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  _BYTE v42[38];
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;

  if (*(_DWORD *)(a1 + 96) != 1)
    sub_1018FB7AC();
  v4 = *(_DWORD *)(a1 + 100);
  if (v4 != a2)
  {
    if (a2 != 1 || v4 != 2)
      goto LABEL_27;
    v5 = *(int **)(a1 + 64);
    v6 = *(int **)(a1 + 72);
    if (v5 == v6)
    {
      v13 = 0;
      v7 = 0;
      v10 = 0;
      v16 = 0;
    }
    else
    {
      v7 = 0;
      v8 = *(int **)(a1 + 64);
      do
      {
        v9 = *v8++;
        if (v9 == 3)
          ++v7;
      }
      while (v8 != v6);
      v10 = 0;
      v11 = *(int **)(a1 + 64);
      do
      {
        v12 = *v11++;
        if (v12 == 2)
          ++v10;
      }
      while (v11 != v6);
      v13 = 0;
      v14 = *(int **)(a1 + 64);
      do
      {
        v15 = *v14++;
        if (v15 == 1)
          ++v13;
      }
      while (v14 != v6);
      v16 = 0;
      do
      {
        if (!*v5++)
          ++v16;
      }
      while (v5 != v6);
    }
    if (v10 > 2 || v13 > 1 || v16 >= 2)
    {
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
      v20 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
      {
        v21 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
        *(_DWORD *)buf = 134350848;
        *(_QWORD *)v42 = v7;
        *(_WORD *)&v42[8] = 2050;
        *(_QWORD *)&v42[10] = v10;
        *(_WORD *)&v42[18] = 2050;
        *(_QWORD *)&v42[20] = 2;
        *(_WORD *)&v42[28] = 2050;
        *(_QWORD *)&v42[30] = v13;
        v43 = 2050;
        v44 = 1;
        v45 = 2050;
        v46 = v16;
        v47 = 2050;
        v48 = 1;
        v49 = 2050;
        v50 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Will not change to remote compatible workout state due to companion not meeting availability criteria,ahq,%{public}ld,a,%{public}ld,thresh_a,%{public}ld,ua,%{public}ld,thresh_ua,%{public}ld,uk,%{public}ld,thresh_uk,%{public}ld,buffsize,%{public}zu", buf, 0x52u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01E0 != -1)
          dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
        v22 = (uint64_t)(*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 2;
        v25 = 134350848;
        v26 = v7;
        v27 = 2050;
        v28 = v10;
        v29 = 2050;
        v30 = 2;
        v31 = 2050;
        v32 = v13;
        v33 = 2050;
        v34 = 1;
        v35 = 2050;
        v36 = v16;
        v37 = 2050;
        v38 = 1;
        v39 = 2050;
        v40 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "Will not change to remote compatible workout state due to companion not meeting availability criteria,ahq,%{public}ld,a,%{public}ld,thresh_a,%{public}ld,ua,%{public}ld,thresh_ua,%{public}ld,uk,%{public}ld,thresh_uk,%{public}ld,buffsize,%{public}zu", &v25, 82);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLStreamingAwareLocationProviderLocalGPSStateMachine::changeWorkoutState(WorkoutState)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    else
    {
LABEL_27:
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
      v18 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
      {
        v19 = *(int *)(a1 + 100);
        *(_DWORD *)buf = 68289538;
        *(_DWORD *)v42 = 0;
        *(_WORD *)&v42[4] = 2082;
        *(_QWORD *)&v42[6] = "";
        *(_WORD *)&v42[14] = 2050;
        *(_QWORD *)&v42[16] = a2;
        *(_WORD *)&v42[24] = 2050;
        *(_QWORD *)&v42[26] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Changing workout state\", \"new state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld, \"old state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld}", buf, 0x26u);
      }
      *(_DWORD *)(a1 + 100) = a2;
    }
  }
}

uint64_t sub_10049A470(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  NSObject *v6;
  NSObject *v7;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;

  v4 = *(_DWORD *)(a1 + 96);
  if ((v4 - 2) < 2)
  {
LABEL_11:
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    goto LABEL_13;
  }
  if (v4 == 1)
  {
    v5 = sub_100E335CC(a1) ^ 1;
    if ((_DWORD)a2)
      goto LABEL_11;
  }
  else
  {
    v5 = 1;
    if ((_DWORD)a2)
      goto LABEL_11;
  }
  if (!v5)
    goto LABEL_11;
  *(_QWORD *)(a1 + 184) = 0x10000000000000;
  *(_DWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = xmmword_101BB26B0;
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v9 = 68289026;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Clearing motion sample data\"}", (uint8_t *)&v9, 0x12u);
    goto LABEL_11;
  }
LABEL_13:
  v7 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v9 = 68289282;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 1026;
    v14 = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Setting motion alarm state\", \"enabled\":%{public}d}", (uint8_t *)&v9, 0x18u);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
}

void sub_10049A64C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v11;
  int v12;
  _BYTE v13[18];
  __int16 v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v3 = *(int *)(a1 + 96);
    v4 = *(int *)(a1 + 100);
    v5 = *(unsigned __int8 *)(a1 + 144);
    *(_QWORD *)v13 = 68289794;
    *(_WORD *)&v13[8] = 2082;
    *(_QWORD *)&v13[10] = "";
    v14 = 2050;
    v15 = v3;
    v16 = 2050;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Starting providers\", \"state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld, \"workoutState\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::WorkoutState}lld, \"workoutForceGPSOn\":%{public}hhd}", v13, 0x2Cu);
  }
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)v13 = _Q0;
  *(_WORD *)&v13[16] = 0;
  v15 = 0;
  switch(*(_DWORD *)(a1 + 96))
  {
    case 0:
      sub_100E3384C(a1, 0);
      goto LABEL_14;
    case 1:
      if (*(_BYTE *)(a1 + 144))
      {
        sub_1001AF928(a1, 0, (uint64_t)v13);
        v13[17] = 1;
        v11 = 0;
        if (!sub_100E335CC(a1))
          goto LABEL_16;
LABEL_12:
        sub_1001AF928(a1, 1, (uint64_t)v13);
LABEL_15:
        v11 = 0;
        goto LABEL_16;
      }
      v12 = *(_DWORD *)(a1 + 100);
      switch(v12)
      {
        case 0:
          sub_1001AF928(a1, 0, (uint64_t)v13);
          v11 = 1;
          sub_100E3384C(a1, 1);
LABEL_16:
          sub_10049A470(a1, v11);
          return;
        case 1:
          sub_100E3384C(a1, 0);
          goto LABEL_24;
        case 2:
          sub_1001AF928(a1, 0, (uint64_t)v13);
LABEL_24:
          v13[17] = 1;
          goto LABEL_12;
      }
      return;
    case 2:
    case 4:
      sub_1001AF928(a1, 0, (uint64_t)v13);
      goto LABEL_12;
    case 3:
      sub_100E3384C(a1, 0);
      goto LABEL_12;
    case 5:
      sub_1001AF928(a1, 0, (uint64_t)v13);
LABEL_14:
      sub_100E3384C(a1, 1);
      goto LABEL_15;
    default:
      return;
  }
}

void sub_10049A8A4(uint64_t a1, double a2)
{
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v4 = *(int *)(a1 + 96);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v5 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2050;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Determining state\", \"current state\":%{public, location:CLStreamingAwareLocationProviderLocalGPSStateMachine::LocationSourceState}lld}", (uint8_t *)v7, 0x1Cu);
  }
  v6 = *(_QWORD *)(a1 + 104);
  if (v6 && v6 != 26)
    sub_10049A9D4(a1, a2);
  else
    sub_10049AA4C(a1, a2);
  sub_10049A64C(a1);
}

void sub_10049A9D4(uint64_t a1, double a2)
{
  uint64_t *v4;
  int v5;

  v4 = *(uint64_t **)(a1 + 16);
  if (!v4)
  {
LABEL_6:
    sub_10049AA4C(a1, a2);
    return;
  }
  while (1)
  {
    v5 = *((_DWORD *)v4 + 7);
    if (v5 <= 0)
      break;
LABEL_5:
    v4 = (uint64_t *)*v4;
    if (!v4)
      goto LABEL_6;
  }
  if (v5 < 0)
  {
    ++v4;
    goto LABEL_5;
  }
  sub_100499F74(a1, 1);
  sub_10049B56C(a1, a2);
}

void sub_10049AA4C(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  int v14;
  double v15;
  BOOL v16;
  int v17;
  int v18;
  unsigned int *v19;

  v2 = a1;
  v3 = *(uint64_t **)(a1 + 16);
  if (!v3)
  {
LABEL_16:
    v10 = 0;
LABEL_24:
    sub_100499F74(a1, v10);
    return;
  }
  v5 = *(uint64_t **)(a1 + 16);
  do
  {
    v6 = *((_DWORD *)v5 + 7);
    if (v6 > 0)
      goto LABEL_6;
    if ((v6 & 0x80000000) == 0)
    {
      if (sub_100E335CC(a1))
      {
        v14 = *(_DWORD *)(v2 + 112);
        if (v14 != 3)
        {
          if (v14 == 4)
            goto LABEL_23;
          if (!*(_BYTE *)(v2 + 128)
            || ((v15 = a2 - *(double *)(v2 + 120), v15 >= 0.0) ? (v16 = v15 > 30.0) : (v16 = 1), v16))
          {
            v18 = 1;
            v19 = (unsigned int *)&v18;
            v17 = *((_DWORD *)sub_100136FD4((uint64_t **)(v2 + 40), &v18, (uint64_t)&unk_101B9EB60, &v19) + 8);
            v12 = v2;
            if (v17 == 1)
              v13 = 2;
            else
              v13 = 3;
            goto LABEL_26;
          }
        }
        a1 = v2;
        v10 = 4;
        goto LABEL_24;
      }
LABEL_23:
      a1 = v2;
      v10 = 5;
      goto LABEL_24;
    }
    ++v5;
LABEL_6:
    v5 = (uint64_t *)*v5;
  }
  while (v5);
  v7 = *(uint64_t **)(a1 + 16);
  while (1)
  {
    v8 = *((_DWORD *)v7 + 7);
    if (v8 <= 1)
      break;
LABEL_11:
    v7 = (uint64_t *)*v7;
    if (!v7)
    {
      do
      {
        v9 = *((_DWORD *)v3 + 7);
        if (v9 <= 2)
        {
          if (v9 == 2)
            goto LABEL_17;
          ++v3;
        }
        v3 = (uint64_t *)*v3;
      }
      while (v3);
      goto LABEL_16;
    }
  }
  if (v8 != 1)
  {
    ++v7;
    goto LABEL_11;
  }
LABEL_17:
  if ((sub_100E335CC(a1) & 1) == 0)
    goto LABEL_23;
  v18 = 0;
  v19 = (unsigned int *)&v18;
  v11 = *((_DWORD *)sub_100136FD4((uint64_t **)(v2 + 40), &v18, (uint64_t)&unk_101B9EB60, &v19) + 8);
  v12 = v2;
  if (v11 == 1)
    v13 = 4;
  else
    v13 = 5;
LABEL_26:
  sub_100499F74(v12, v13);
}

void sub_10049ABF4(uint64_t a1, unsigned int a2, unsigned int *a3, uint64_t a4, double a5)
{
  int v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  uint64_t v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  char v24;
  int v25;
  double v26;
  uint8_t buf[8];
  __int16 v28;
  const char *v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  _BYTE v33[10];
  _BYTE v34[10];
  uint64_t v35;

  v26 = a5;
  if (!sub_100E33328(*a3))
    goto LABEL_39;
  v10 = *(_DWORD *)(a4 + 928);
  if ((*(_DWORD *)(a4 + 96) - 6) >= 3)
  {
    v11 = *(_DWORD *)(a4 + 436);
    *(_DWORD *)(a1 + 112) = v11;
    if ((v11 - 3) <= 1)
    {
      if (v11 == 4)
      {
        *(double *)(a1 + 120) = a5;
        *(_BYTE *)(a1 + 128) = 1;
      }
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
      v12 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *(_DWORD *)(a4 + 436);
        v14 = *(_DWORD *)(a4 + 96);
        v15 = *(_QWORD *)(a4 + 76);
        *(_DWORD *)buf = 68290050;
        v28 = 2082;
        *(_DWORD *)&buf[4] = 0;
        v29 = "";
        v30 = 2050;
        v31 = a2;
        v32 = 1026;
        *(_DWORD *)v33 = v13;
        *(_WORD *)&v33[4] = 1026;
        *(_DWORD *)&v33[6] = v14;
        *(_WORD *)v34 = 2050;
        *(_QWORD *)&v34[2] = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#cltr,Received track notification\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"trackProximity\":%{public}d, \"type\":%{public}d, \"timestamp\":\"%{public}f\"}", buf, 0x32u);
      }
    }
  }
  v16 = *(_DWORD *)(a1 + 96);
  if (v16 != 1)
  {
    if (v16 != 5)
    {
      if (v16 == 3 && a2 != 1)
        return;
LABEL_39:
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 8))(*(_QWORD *)(a1 + 32), *a3, a4);
      return;
    }
    goto LABEL_31;
  }
  if (a2)
  {
    v17 = a2 == 1;
    v18 = a2 != 1;
    if (a2 == 1 && v10)
    {
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
      v19 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
      {
        v20 = (int)*a3;
        v21 = *(unsigned int *)(a4 + 928);
        v22 = *(_QWORD *)(a4 + 76);
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        v28 = 2082;
        v29 = "";
        v30 = 2050;
        v31 = 1;
        v32 = 2050;
        *(_QWORD *)v33 = v20;
        *(_WORD *)&v33[8] = 2050;
        *(_QWORD *)v34 = v21;
        *(_WORD *)&v34[8] = 2050;
        v35 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Received motion rich location notification\", \"source\":%{public, location:CLStreamingAwareLocationProviderStateMachine::LocationSource}lld, \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"motion data\":%{public, location:CLLocationProvider_Type::MotionDetected}lld, \"timestamp\":\"%{public}f\"}", buf, 0x3Au);
      }
      sub_10049AF58(a1, (int *)(a4 + 928), (double *)(a4 + 76), &v26);
      v17 = 1;
    }
  }
  else
  {
    v17 = 0;
    *(double *)(a1 + 208) = a5;
    v18 = 1;
    *(_BYTE *)(a1 + 216) = 1;
  }
  v23 = *(_DWORD *)(a1 + 100);
  if (v23 != 2)
  {
    if (v23 == 1)
    {
      if (!v17)
        return;
      goto LABEL_39;
    }
    if (v23)
      goto LABEL_39;
  }
  if (a2)
    v24 = v18;
  else
    v24 = 1;
  if ((v24 & 1) != 0)
  {
LABEL_31:
    if (a2)
      return;
    goto LABEL_39;
  }
  if ((*(_QWORD *)(a1 + 104) | 8) != 0x1B)
  {
    v25 = 0;
    *(_QWORD *)buf = &v25;
    if (*((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 40), &v25, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8) != 3
      || !*(_BYTE *)(a1 + 216)
      || vabdd_f64(a5, *(double *)(a1 + 208)) >= 4.0)
    {
      goto LABEL_39;
    }
  }
}

uint64_t sub_10049AF58(uint64_t a1, int *a2, double *a3, double *a4)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  void (**v19)(double);
  uint64_t (**v20)(void);
  _QWORD v22[3];
  _QWORD *v23;
  uint8_t buf[8];
  __int16 v25;
  const char *v26;
  __int16 v27;
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;

  v6 = *a2;
  if (*a2 == *(_DWORD *)(a1 + 192))
  {
    v7 = *(double *)(a1 + 184);
    if (v7 >= *a3)
      v7 = *a3;
  }
  else
  {
    *(_DWORD *)(a1 + 192) = v6;
    v7 = *a3;
  }
  *(double *)(a1 + 184) = v7;
  v8 = v7 + 30.0;
  if (v6 == 1)
    v7 = v7 + 15.0;
  if (v6 == 2)
    v9 = v8;
  else
    v9 = v7;
  if (v9 <= *a4)
  {
    v9 = INFINITY;
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    v10 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v11 = *a4;
      v12 = v9 - *a4;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      v25 = 2082;
      v26 = "";
      v27 = 2050;
      v28 = v11;
      v29 = 2050;
      v30 = v9;
      v31 = 2050;
      v32 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Scheduling timer for motion confidence\", \"now_s\":\"%{public}.09f\", \"fire time_s\":\"%{public}.09f\", \"delta_s\":\"%{public}.09f\"}", buf, 0x30u);
    }
  }
  if (!*(_QWORD *)(a1 + 200))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(buf);
    v13 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v14 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)(a1 + 200) = v13;
    if (v14)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
      v15 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 40))(v15);
    }
    v16 = *(_QWORD *)(a1 + 200);
    v22[0] = off_10213D980;
    v22[1] = a1;
    v23 = v22;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 8))(v16, v22);
    v17 = v23;
    if (v23 == v22)
    {
      v18 = 4;
      v17 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_26;
      v18 = 5;
    }
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
LABEL_26:
  v19 = **(void (****)(double))(a1 + 200);
  if (v9 == INFINITY)
  {
    v20 = (uint64_t (**)(void))(v19 + 3);
  }
  else
  {
    (*v19)(v9);
    v20 = (uint64_t (**)(void))(**(_QWORD **)(a1 + 200) + 16);
  }
  return (*v20)();
}

void sub_10049B1B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12)
{
  uint64_t *v12;
  uint64_t *v14;
  uint64_t v15;

  v14 = a12;
  if (a12 == v12)
  {
    v15 = 4;
    v14 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_6;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10049B1F8(uint64_t a1, uint64_t a2, double a3)
{
  unint64_t v4;
  int v5;
  int v6;
  int v7;
  NSObject *v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  int v16;

  v4 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 104) = a2;
  if (!a2 || a2 == 26)
  {
    v5 = 0;
    *(_QWORD *)(a1 + 136) = 0x7FF0000000000000;
    goto LABEL_23;
  }
  if (v4 > 0x21)
    goto LABEL_10;
  if (((1 << v4) & 0x201028006) != 0)
  {
    v6 = 0;
    goto LABEL_11;
  }
  if (((1 << v4) & 0x4000001) != 0)
    goto LABEL_20;
  if (((1 << v4) & 0x8080000) != 0)
    v6 = 1;
  else
LABEL_10:
    v6 = 2;
LABEL_11:
  v7 = 0;
  if (a2 > 26)
  {
    if (a2 != 33)
    {
      if (a2 == 27)
LABEL_15:
        v7 = 1;
      else
LABEL_17:
        v7 = 2;
    }
  }
  else
  {
    switch(a2)
    {
      case 15:
      case 17:
      case 24:
        break;
      case 16:
      case 18:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_17;
      case 19:
        goto LABEL_15;
      default:
        if ((unint64_t)(a2 - 1) >= 2)
          goto LABEL_17;
        break;
    }
  }
  if (v6 == v7)
  {
    v5 = 0;
    goto LABEL_23;
  }
LABEL_20:
  *(double *)(a1 + 136) = a3;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  if (*(_BYTE *)(a1 + 216))
    *(_BYTE *)(a1 + 216) = 0;
  v5 = 1;
LABEL_23:
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v8 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *(_QWORD *)(a1 + 104);
    v10[0] = 68289538;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v9;
    v15 = 1026;
    v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Workout change\", \"currentWorkout\":%{public}ld, \"workoutStarted\":%{public}hhd}", (uint8_t *)v10, 0x22u);
  }
}

double sub_10049B428(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v3;

  result = *(double *)a2;
  v3 = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 168) = v3;
  return result;
}

uint64_t sub_10049B438(uint64_t result, unsigned int a2, double a3)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  unsigned int v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  v7 = a2;
  v6 = a3;
  if (*(_DWORD *)(result + 96) == 1)
  {
    v4 = result;
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2050;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Motion alarm fired\", \"detected motion\":%{public, location:CLLocationProvider_Type::MotionDetected}lld}", buf, 0x1Cu);
    }
    return sub_10049AF58(v4, (int *)&v7, &v6, &v6);
  }
  return result;
}

void sub_10049B554(uint64_t a1)
{
  int v1;
  BOOL v2;

  v1 = *(_DWORD *)(a1 + 96);
  if (v1)
    v2 = v1 == 3;
  else
    v2 = 1;
  if (!v2)
    sub_10049A64C(a1);
}

uint64_t sub_10049B56C(uint64_t a1, double a2)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  char v7;
  int v8;
  int v9;
  _BOOL4 v10;
  double v11;
  int v12;
  NSObject *v13;
  double v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (***v22)(_QWORD, double);
  uint64_t v23;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  const char *v28;
  uint8_t *v29;
  uint64_t v30;
  int v31[3];
  _QWORD v32[3];
  _QWORD *v33;
  uint8_t buf[8];
  __int16 v35;
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  double v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  v4 = *(_QWORD *)(a1 + 104);
  if (v4 > 0x21)
  {
LABEL_66:
    v6 = 0;
    v5 = 2;
    goto LABEL_4;
  }
  if (((1 << v4) & 0x201028006) == 0)
  {
    if (((1 << v4) & 0x8080000) != 0)
    {
      v6 = 0;
      v7 = 0;
      v5 = 1;
      goto LABEL_7;
    }
    if (((1 << v4) & 0x4000001) != 0)
      sub_1018FB918();
    goto LABEL_66;
  }
  v5 = 0;
  v6 = 1;
LABEL_4:
  v7 = 1;
LABEL_7:
  if (!sub_100E335CC(a1) || *(_DWORD *)(a1 + 112) == 4)
  {
    v8 = 0;
LABEL_10:
    v9 = 1;
    goto LABEL_11;
  }
  if (v5 == 2)
  {
    v9 = 0;
    v6 = 0;
    v8 = 1;
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    v8 = 0;
    v6 = 0;
    goto LABEL_10;
  }
  v12 = *(_DWORD *)(a1 + 192);
  if (v12 == 1)
  {
    if (a2 - *(double *)(a1 + 184) >= 15.0)
    {
      v9 = 0;
      v8 = 1;
      goto LABEL_69;
    }
    goto LABEL_68;
  }
  if (v12 != 2
    || a2 - *(double *)(a1 + 184) < 30.0
    || *(double *)(a1 + 160) + 15.0 <= a2
    || *(double *)(a1 + 168) <= 0.0)
  {
LABEL_68:
    v8 = 0;
    v9 = 0;
    goto LABEL_69;
  }
  v8 = 0;
  v9 = 1;
LABEL_69:
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v25 = qword_1022A01E8;
  v6 = 1;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v26 = *(unsigned int *)(a1 + 192);
    v27 = *(_QWORD *)(a1 + 184);
    *(_DWORD *)buf = 68290306;
    *(_DWORD *)&buf[4] = 0;
    v35 = 2082;
    v36 = "";
    v37 = 2050;
    v38 = v26;
    v39 = 2050;
    v40 = v27;
    v41 = 2050;
    v42 = a2;
    v43 = 1026;
    v44 = v8;
    v45 = 1026;
    v46 = v9;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"In pedestrian workout, Motion compatible?\", \"remote motion\":%{public, location:CLLocationProvider_Type::MotionDetected}lld, \"sample time_s\":\"%{public}.09f\", \"now_s\":\"%{public}.09f\", \"prefer remote\":%{public}hhd, \"prefer local\":%{public}hhd}", buf, 0x3Cu);
  }
LABEL_11:
  if (*(unsigned __int8 *)(a1 + 176) != (_DWORD)v6)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32), v6);
    *(_BYTE *)(a1 + 176) = v6;
  }
  if ((v9 | v8) == 1)
    sub_10049A094(a1, v9 ^ 1);
  if (*(_DWORD *)(a1 + 100) == 1)
  {
    v10 = 1;
    if (*(_DWORD *)(a1 + 112) != 4)
    {
      if (*(_BYTE *)(a1 + 128))
      {
        v11 = a2 - *(double *)(a1 + 120);
        v10 = v11 <= 30.0 && v11 >= 0.0;
      }
      else
      {
        v10 = 0;
      }
    }
    v31[0] = 1;
    *(_QWORD *)buf = v31;
    if (*((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 40), v31, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8)
      && (HIDWORD(v30) = 1,
          *(_QWORD *)buf = (char *)&v30 + 4,
          *((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 40), (int *)&v30 + 1, (uint64_t)&unk_101B9EB60, (unsigned int **)buf)+ 8) != 3))
    {
      if (!v10)
      {
LABEL_44:
        sub_10049A094(a1, 2);
        goto LABEL_45;
      }
    }
    else if (!v10)
    {
      goto LABEL_45;
    }
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#cltr,user was recently on a track,changing WorkoutState to RemoteCompatibleButUnavailable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
      LOWORD(v31[0]) = 0;
      LODWORD(v30) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "#cltr,user was recently on a track,changing WorkoutState to RemoteCompatibleButUnavailable", v31, v30);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLStreamingAwareLocationProviderLocalGPSStateMachine::setWorkoutStateBasedOnMotionCompatibility(CFAbsoluteTime)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    goto LABEL_44;
  }
  v31[0] = 1;
  *(_QWORD *)buf = v31;
  if (*((_DWORD *)sub_100136FD4((uint64_t **)(a1 + 40), v31, (uint64_t)&unk_101B9EB60, (unsigned int **)buf) + 8) == 3
    && *(_DWORD *)(a1 + 100) == 2
    && (v9 & 1) == 0)
  {
    sub_10049A094(a1, 1);
  }
LABEL_45:
  v14 = vabdd_f64(*(double *)(a1 + 136), a2);
  if (v14 < 180.0)
    v15 = v7;
  else
    v15 = 0;
  *(_BYTE *)(a1 + 144) = v15;
  if (v14 <= 10.0)
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 64);
  if (!*(_QWORD *)(a1 + 152))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(_QWORD **)(a1 + 32) + 32))(buf);
    v16 = *(_QWORD *)buf;
    *(_QWORD *)buf = 0;
    v17 = *(_QWORD *)(a1 + 152);
    *(_QWORD *)(a1 + 152) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      v18 = *(_QWORD *)buf;
      *(_QWORD *)buf = 0;
      if (v18)
        (*(void (**)(uint64_t))(*(_QWORD *)v18 + 40))(v18);
    }
    v19 = *(_QWORD *)(a1 + 152);
    v32[0] = off_10213D8F0;
    v32[1] = a1;
    v33 = v32;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v19 + 8))(v19, v32);
    v20 = v33;
    if (v33 == v32)
    {
      v21 = 4;
      v20 = v32;
    }
    else
    {
      if (!v33)
        goto LABEL_59;
      v21 = 5;
    }
    (*(void (**)(void))(*v20 + 8 * v21))();
  }
LABEL_59:
  v22 = *(void (****)(_QWORD, double))(a1 + 152);
  if (*(_BYTE *)(a1 + 144))
  {
    (**v22)(v22, *(double *)(a1 + 136) + 180.0);
    v22 = *(void (****)(_QWORD, double))(a1 + 152);
    v23 = 2;
  }
  else
  {
    v23 = 3;
  }
  return ((uint64_t (*)(void))(*v22)[v23])();
}

void sub_10049BBAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

void sub_10049BBF0(_QWORD *a1)
{
  sub_10049BC48(a1);
  operator delete();
}

uint64_t sub_10049BC14(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 32) = a2;
  return result;
}

void sub_10049BC1C(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

uint64_t sub_10049BC48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_10213D818;
  v2 = a1[25];
  a1[25] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
  v3 = a1[19];
  a1[19] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
  return sub_10049BCA4((uint64_t)a1);
}

uint64_t sub_10049BCA4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_10218AEA0;
  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v2);
  }
  sub_100008848(a1 + 40, *(_QWORD **)(a1 + 48));
  sub_100008848(a1 + 8, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_10049BD00()
{
  operator delete();
}

_QWORD *sub_10049BD14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10213D8F0;
  result[1] = v3;
  return result;
}

uint64_t sub_10049BD48(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10213D8F0;
  a2[1] = v2;
  return result;
}

uint64_t sub_10049BD64(uint64_t a1, double *a2)
{
  double v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reconsidering forced GPS state\"}", (uint8_t *)v6, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v3 + 96))(v3, v2);
}

uint64_t sub_10049BE5C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10049BE98()
{
}

void sub_10049BEA8()
{
  operator delete();
}

_QWORD *sub_10049BEBC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10213D980;
  result[1] = v3;
  return result;
}

uint64_t sub_10049BEF0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10213D980;
  a2[1] = v2;
  return result;
}

uint64_t sub_10049BF0C(uint64_t a1, double *a2)
{
  double v2;
  uint64_t v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  v2 = *a2;
  v3 = *(_QWORD *)(a1 + 8);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213D8C0);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reconsidering motion compatibility\"}", (uint8_t *)v6, 0x12u);
  }
  return (*(uint64_t (**)(uint64_t, double))(*(_QWORD *)v3 + 96))(v3, v2);
}

uint64_t sub_10049C004(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10049C040()
{
}

BOOL sub_10049C04C()
{
  return os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT);
}

BOOL sub_10049C060()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 488), OS_LOG_TYPE_INFO);
}

BOOL sub_10049C070()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 488));
}

void sub_10049C120(id a1)
{
  qword_1023013D8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLHealthAssessmentNotifierSilo"));
}

uint64_t sub_10049C6F0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A1300;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023013F8 != -1)
    dispatch_once(&qword_1023013F8, block);
  return qword_102310888;
}

void sub_10049CBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10049CC10(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *v3;
  unint64_t v4;
  unsigned __int8 v5;
  __int128 v6;

  if (!*(_BYTE *)(result + 109))
  {
    v1 = result;
    if ((sub_1001B7910() & 0x10000000) != 0)
    {
      v5 = 0;
      sub_1004A4974(&v5, &v6);
      sub_1002B7674(v1 + 160, &v6);
      v2 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
      if (*((_QWORD *)&v6 + 1))
      {
        v3 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
        do
          v4 = __ldaxr(v3);
        while (__stlxr(v4 - 1, v3));
        if (!v4)
        {
          ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
          std::__shared_weak_count::__release_weak(v2);
        }
      }
      operator new();
    }
    sub_100877814();
  }
  return result;
}

void sub_10049CDD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12)
    sub_1018FBC0C(a12);
  operator delete();
}

id sub_10049CE04(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "updateSensorRecorderQuery");
}

id sub_10049CE0C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "aggregateRecords");
}

id sub_10049D2FC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateSensorRecorderSubscription");
}

void sub_10049D304(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  uint64_t v17;
  int v18;
  _BYTE v19[10];
  uint8_t buf[4];
  _QWORD v21[204];

  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v2 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67240448;
    LODWORD(v21[0]) = 100;
    WORD2(v21[0]) = 1026;
    *(_DWORD *)((char *)v21 + 6) = 100;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Subscribing to Sensor Recorder: Accel Rate %{public}d Gyro Rate %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v18 = 67240448;
    *(_DWORD *)v19 = 100;
    *(_WORD *)&v19[4] = 1026;
    *(_DWORD *)&v19[6] = 100;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Subscribing to Sensor Recorder: Accel Rate %{public}d Gyro Rate %{public}d", &v18, 14);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  if ((objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sensorRecorder"), "setAccelSampleRate:", 100) & 1) == 0)
  {
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v3 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v21[0]) = 100;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Unable to set sample rate for accel to %{public}d.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v18 = 67240192;
      *(_DWORD *)v19 = 100;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 16, "Unable to set sample rate for accel to %{public}d.", &v18, v17);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  if ((objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "sensorRecorder"), "setGyroSampleRate:", 100) & 1) == 0)
  {
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v4 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v21[0]) = 100;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Unable to set sample rate for gyro to %{public}d.", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v18 = 67240192;
      *(_DWORD *)v19 = 100;
      LODWORD(v17) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 16, "Unable to set sample rate for gyro to %{public}d.", &v18, v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer"), "setNextFireDelay:", 43200.0);
  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v5 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
  {
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer"), "nextFireTime");
    *(_DWORD *)buf = 134349056;
    v21[0] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "fSensorRecorderSubscribeTimer.nextFireTime, %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v9 = off_10229FFF8;
    objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderSubscribeTimer"), "nextFireTime");
    v18 = 134349056;
    *(_QWORD *)v19 = v10;
    LODWORD(v17) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v9, 1, "fSensorRecorderSubscribeTimer.nextFireTime, %{public}f", &v18, v17);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "-[CLHealthAssessmentNotifierAdapter updateSensorRecorderSubscription]_block_invoke", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
}

id sub_10049D958(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "processDataWithMaxDuration:endTime:", 3600.0, CFAbsoluteTimeGetCurrent());
  return objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "fSensorRecorderQueryTimer"), "setNextFireDelay:", 300.0);
}

uint64_t sub_10049F284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;

  v5 = 0;
  v0 = sub_1001FD94C();
  sub_1001C1194(v0, (uint64_t)CFSTR("kMonitorKinesiasDBPushErrorCount"), &v5);
  v1 = sub_1001FD94C();
  v4 = v5 + 1;
  sub_10011B5B8(v1, CFSTR("kMonitorKinesiasDBPushErrorCount"), &v4);
  v2 = sub_1001FD94C();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 944))(v2);
}

BOOL sub_10049F2F0(_QWORD *a1, double *a2, CFAbsoluteTime *a3, double a4)
{
  __objc2_class *v8;
  NSObject *v9;
  double v10;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  _BOOL8 result;
  NSObject *v15;
  double *v16;
  double v17;
  double v18;
  CFAbsoluteTime *v19;
  double v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int64x2_t *v28;
  BOOL v29;
  double v30;
  __objc2_class *v32;
  NSObject *superclass;
  int v34;
  uint64_t v35;
  __objc2_class *v36;
  const char *v37;
  uint8_t *v38;
  int v39;
  unsigned int v40;
  NSObject *v41;
  double v42;
  CFAbsoluteTime v43;
  double v44;
  NSObject *v45;
  double v46;
  CFAbsoluteTime v47;
  NSObject *v48;
  __objc2_class *v49;
  const char *v50;
  uint8_t *v51;
  double v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  double *v56;
  double v57;
  double v58;
  const char *v59;
  uint8_t *v60;
  __objc2_class *v61;
  double v62;
  CFAbsoluteTime v63;
  const char *v64;
  uint8_t *v65;
  __objc2_class *v66;
  double v67;
  CFAbsoluteTime v68;
  const char *v69;
  uint8_t *v70;
  uint64_t v71;
  int v72;
  int v73;
  double v74;
  __int16 v75;
  CFAbsoluteTime v76;
  uint8_t buf[4];
  double v78;
  __int16 v79;
  CFAbsoluteTime v80;

  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v8 = DefaultObserver;
  v9 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
  {
    v10 = *a2;
    *(_DWORD *)buf = 134349056;
    v78 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Checking from %{public}.2f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v52 = *a2;
    v73 = 134349056;
    v74 = v52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Checking from %{public}.2f", &v73, 12);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
  v11 = a1[28];
  if (!v11)
  {
LABEL_9:
    *a3 = CFAbsoluteTimeGetCurrent();
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v13 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "No valid monitoring periods seen", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    LOWORD(v73) = 0;
    LODWORD(v71) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "No valid monitoring periods seen", &v73, v71);
    v51 = (uint8_t *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v55);
LABEL_93:
    if (v51 != buf)
      free(v51);
    return 0;
  }
  while (1)
  {
    v12 = a1[27];
    if (*(double *)(*(_QWORD *)(a1[24] + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v12 + 8) > *a2)
      break;
    a1[28] = v11 - 1;
    a1[27] = v12 + 1;
    sub_1004A57E8((uint64_t)(a1 + 23), 1);
    v11 = a1[28];
    if (!v11)
      goto LABEL_9;
  }
  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v15 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
  {
    v16 = (double *)(*(_QWORD *)(a1[24] + ((a1[27] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[27]);
    v18 = *v16;
    v17 = v16[1];
    *(_DWORD *)buf = 134349312;
    v78 = v18;
    v79 = 2050;
    v80 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Selecting monitoring period: %{public}f - %{public}f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v56 = (double *)(*(_QWORD *)(a1[24] + ((a1[27] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[27]);
    v58 = *v56;
    v57 = v56[1];
    v73 = 134349312;
    v74 = v58;
    v75 = 2050;
    v76 = v57;
    LODWORD(v71) = 22;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Selecting monitoring period: %{public}f - %{public}f", &v73, v71);
    v60 = (uint8_t *)v59;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v59);
    if (v60 != buf)
      free(v60);
  }
  v19 = (CFAbsoluteTime *)(*(_QWORD *)(a1[24] + ((a1[27] >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * a1[27]);
  v20 = *a2;
  if (*a2 < *v19)
    v20 = *v19;
  *a2 = v20;
  *a3 = v19[1];
  v21 = a1[30];
  if (a1[31] == v21
    || (v22 = a1[33],
        v23 = (_QWORD *)(v21 + 8 * (v22 >> 8)),
        v24 = *v23 + 16 * v22,
        v25 = *(_QWORD *)(v21 + (((a1[34] + v22) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((_BYTE *)a1 + 272) + v22),
        v24 == v25))
  {
LABEL_66:
    v29 = 1;
    goto LABEL_67;
  }
  v72 = 0;
  v26 = 0;
  v27 = (uint64_t)(a1 + 29);
  v28 = (int64x2_t *)(a1 + 33);
  v29 = 1;
  while (1)
  {
    v30 = *(double *)v24;
    if (*(double *)v24 >= *a3)
    {
LABEL_54:
      v39 = 0;
      goto LABEL_57;
    }
    if ((v26 & 1) != 0)
    {
      if (v30 < *a3 && *(_BYTE *)(v24 + 8) == 0)
        goto LABEL_56;
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v32 = v8;
      superclass = v8[102].superclass;
      if (os_log_type_enabled(superclass, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, superclass, OS_LOG_TYPE_INFO, "Found two consecutive onWrist events, skipping later one", buf, 2u);
      }
      v8 = v32;
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FFF0 != -1)
          dispatch_once(&qword_10229FFF0, &stru_10213DB60);
        v36 = v32[102].superclass;
        LOWORD(v73) = 0;
        LODWORD(v71) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 1, "Found two consecutive onWrist events, skipping later one", &v73, v71);
        v38 = (uint8_t *)v37;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v37);
        if (v38 != buf)
          free(v38);
      }
      v26 = 1;
      goto LABEL_46;
    }
    if (v30 > *a2)
      break;
    v26 = 0;
    ++v72;
    v34 = *(unsigned __int8 *)(v24 + 8);
LABEL_45:
    v29 = v34 != 0;
LABEL_46:
    v24 += 16;
    if (v24 - *v23 == 4096)
    {
      v35 = v23[1];
      ++v23;
      v24 = v35;
    }
    if (v24 == v25)
      goto LABEL_54;
  }
  if (*(_BYTE *)(v24 + 8))
  {
    if (!v29)
      *a2 = v30;
    v34 = 1;
    v26 = 1;
    goto LABEL_45;
  }
  if (!v29)
  {
    v34 = 0;
    v26 = 0;
    goto LABEL_45;
  }
  v29 = 1;
LABEL_56:
  *a3 = v30;
  v39 = 1;
LABEL_57:
  if (v72 >= 2)
  {
    v40 = v72 + 1;
    do
    {
      *v28 = vaddq_s64(*v28, (int64x2_t)xmmword_101B9DFC0);
      sub_1004A57E8(v27, 1);
      --v40;
    }
    while (v40 > 2);
  }
  if (v39)
  {
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v41 = v8[102].superclass;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      v42 = *a2;
      v43 = *a3;
      *(_DWORD *)buf = 134349312;
      v78 = v42;
      v79 = 2050;
      v80 = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Full on wrist period seen, %{public}0.f - %{public}0.f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v66 = v8[102].superclass;
      v67 = *a2;
      v68 = *a3;
      v73 = 134349312;
      v74 = v67;
      v75 = 2050;
      v76 = v68;
      LODWORD(v71) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v66, 1, "Full on wrist period seen, %{public}0.f - %{public}0.f", &v73, v71);
      v70 = (uint8_t *)v69;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v69);
      if (v70 != buf)
        free(v70);
    }
    goto LABEL_66;
  }
LABEL_67:
  v44 = CFAbsoluteTimeGetCurrent() + -60.0;
  if (v44 >= *a3)
    v44 = *a3;
  *a3 = v44;
  if (v44 > *a2 && v29)
  {
    if (*a2 + a4 < v44)
      v44 = *a2 + a4;
    *a3 = v44;
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v45 = v8[102].superclass;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
    {
      v46 = *a2;
      v47 = *a3;
      *(_DWORD *)buf = 134349312;
      v78 = v46;
      v79 = 2050;
      v80 = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Valid period returned, %{public}0.f - %{public}0.f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v61 = v8[102].superclass;
      v62 = *a2;
      v63 = *a3;
      v73 = 134349312;
      v74 = v62;
      v75 = 2050;
      v76 = v63;
      LODWORD(v71) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v61, 1, "Valid period returned, %{public}0.f - %{public}0.f", &v73, v71);
      v65 = (uint8_t *)v64;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v64);
      if (v65 != buf)
        free(v65);
    }
    return 1;
  }
  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v48 = v8[102].superclass;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "No valid on wrist periods seen", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v49 = v8[102].superclass;
    LOWORD(v73) = 0;
    LODWORD(v71) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 1, "No valid on wrist periods seen", &v73, v71);
    v51 = (uint8_t *)v50;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::getNextValidPeriod(CFAbsoluteTime *, CFAbsoluteTime *, NSTimeInterval)", "%s\n", v50);
    goto LABEL_93;
  }
  return result;
}

void sub_1004A0494(uint64_t a1, void *a2, int a3)
{
  double v5;
  double v6;
  unsigned int v7;
  unsigned int v8;
  int32x2_t v9;
  double v10;
  double v11;
  double v12;
  NSNotificationCenter *v13;
  float32x4_t v14;
  float v15;
  float v16;
  float v17;
  NSObject *v18;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  double v22;
  uint64_t v23;
  NSObject *v24;
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  const char *v33;
  uint8_t *v34;
  float v35;
  int v36;
  double v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  double v41;
  __int16 v42;
  uint64_t v43;

  if (a3)
  {
    if (a3 == 1)
    {
      objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("time")), "doubleValue");
      v6 = v5;
      v7 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("score")), "intValue");
      objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("likelihood")), "floatValue");
      objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("strength")), "floatValue");
      v8 = objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("tremorScore")), "intValue");
      v10 = *(double *)(a1 + 112);
      if (v10 == 0.0)
      {
        v11 = (double)(uint64_t)(v6 / 60.0) * 60.0;
        if (v11 <= v10)
          v11 = v11 + 60.0;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        v12 = v11 + 60.0;
        *(double *)(a1 + 112) = v11;
        *(double *)(a1 + 120) = v11 + 60.0;
      }
      else
      {
        v12 = *(double *)(a1 + 120);
      }
      if (v6 >= v12)
      {
        v14 = *(float32x4_t *)(a1 + 128);
        v16 = *(float *)(a1 + 144);
        v15 = *(float *)(a1 + 148);
        v17 = *(float *)(a1 + 152);
        *(float *)v9.i32 = (float)((float)((float)((float)(COERCE_FLOAT(vaddq_f32(v14, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v14, 3)).i32[2])+ v16)+ v15)+ v17)+ COERCE_FLOAT(HIDWORD(*(_QWORD *)(a1 + 128))))+ v14.f32[0];
        if (*(float *)v9.i32 >= 18.75)
        {
          *(float *)(a1 + 144) = v16 / *(float *)v9.i32;
          *(float *)(a1 + 148) = v15 / *(float *)v9.i32;
          *(float *)(a1 + 152) = v17 / *(float *)v9.i32;
          *(float32x4_t *)(a1 + 128) = vdivq_f32(v14, (float32x4_t)vdupq_lane_s32(v9, 0));
          if ((sub_10008950C(*(_QWORD *)(a1 + 160) + 72) & 1) != 0)
          {
            if (qword_10229FFF0 != -1)
              dispatch_once(&qword_10229FFF0, &stru_10213DB60);
            v21 = off_10229FFF8;
            if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
            {
              v22 = *(double *)(a1 + 120);
              *(_DWORD *)buf = 134349056;
              v41 = v22;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Persisting result for period ending %{public}f", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FFF0 != -1)
                dispatch_once(&qword_10229FFF0, &stru_10213DB60);
              v28 = *(double *)(a1 + 120);
              v36 = 134349056;
              v37 = v28;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Persisting result for period ending %{public}f", &v36, 12);
              v30 = (uint8_t *)v29;
              sub_100512490("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v29);
              if (v30 != buf)
                free(v30);
            }
            v23 = 0;
          }
          else
          {
            if (qword_10229FFF0 != -1)
              dispatch_once(&qword_10229FFF0, &stru_10213DB60);
            v24 = off_10229FFF8;
            if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_ERROR))
            {
              v25 = *(double *)(a1 + 112);
              v26 = *(_QWORD *)(a1 + 120);
              *(_DWORD *)buf = 134349312;
              v41 = v25;
              v42 = 2050;
              v43 = v26;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "WARNING: DB not accessible, results for period from %{public}f to %{public}f may be lost.", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FFF0 != -1)
                dispatch_once(&qword_10229FFF0, &stru_10213DB60);
              v31 = *(double *)(a1 + 112);
              v32 = *(_QWORD *)(a1 + 120);
              v36 = 134349312;
              v37 = v31;
              v38 = 2050;
              v39 = v32;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 16, "WARNING: DB not accessible, results for period from %{public}f to %{public}f may be lost.", &v36, 22);
              v34 = (uint8_t *)v33;
              sub_100512490("Generic", 1, 0, 0, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v33);
              if (v34 != buf)
                free(v34);
            }
            sub_10049F284();
            v23 = 5;
          }
          sub_1004A1FA0(*(_QWORD *)(a1 + 176), (double *)(a1 + 112));
          objc_msgSend(*(id *)(a1 + 32), "setLastProcessedTime:", *(double *)(a1 + 120));
          sub_1004A1B14(a1, 2, v23, 1, *(double *)(a1 + 112), *(double *)(a1 + 120));
        }
        else
        {
          v35 = *(float *)v9.i32;
          if (qword_10229FFF0 != -1)
            dispatch_once(&qword_10229FFF0, &stru_10213DB60);
          v18 = off_10229FFF8;
          if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 134349312;
            v41 = v35;
            v42 = 2050;
            v43 = 0x4032C00000000000;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Skipping partially empty period, saw %{public}.1f of %{public}.1f epochs in period", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FFF0 != -1)
              dispatch_once(&qword_10229FFF0, &stru_10213DB60);
            v36 = 134349312;
            v37 = v35;
            v38 = 2050;
            v39 = 0x4032C00000000000;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Skipping partially empty period, saw %{public}.1f of %{public}.1f epochs in period", &v36, 22);
            v20 = (uint8_t *)v19;
            sub_100512490("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::resultReady(NSDictionary *, CLHealthAssessment_Types::DataType)", "%s\n", v19);
            if (v20 != buf)
              free(v20);
          }
        }
        v27 = (double)(uint64_t)(v6 / 60.0) * 60.0;
        if (v27 <= *(double *)(a1 + 112))
          v27 = v27 + 60.0;
        *(_OWORD *)(a1 + 128) = 0u;
        *(_OWORD *)(a1 + 144) = 0u;
        *(double *)(a1 + 112) = v27;
        *(double *)(a1 + 120) = v27 + 60.0;
      }
      switch(v8)
      {
        case 1u:
          *(float *)(a1 + 140) = *(float *)(a1 + 140) + 1.0;
          break;
        case 2u:
          *(float *)(a1 + 144) = *(float *)(a1 + 144) + 1.0;
          break;
        case 3u:
          *(float *)(a1 + 148) = *(float *)(a1 + 148) + 1.0;
          break;
        case 4u:
          *(float *)(a1 + 152) = *(float *)(a1 + 152) + 1.0;
          break;
        default:
          if (v7 == 1)
          {
            *(float *)(a1 + 132) = *(float *)(a1 + 132) + 1.0;
          }
          else if (v8)
          {
            *(float *)(a1 + 128) = *(float *)(a1 + 128) + 1.0;
          }
          else
          {
            *(float *)(a1 + 136) = *(float *)(a1 + 136) + 1.0;
          }
          break;
      }
    }
  }
  else
  {
    v13 = +[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter");
    -[NSNotificationCenter postNotificationName:object:userInfo:](v13, "postNotificationName:object:userInfo:", off_1022FCAF8, *(_QWORD *)(a1 + 32), a2);
  }
}

BOOL sub_1004A0F38(uint64_t a1)
{
  NSObject *v2;
  double Current;
  double v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_10229FFF0 != -1)
    dispatch_once(&qword_10229FFF0, &stru_10213DB60);
  v2 = off_10229FFF8;
  if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Aggregating records for fParkinsonsResultPersistence", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Aggregating records for fParkinsonsResultPersistence", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::aggregateRecords()", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  sub_1004A24C4(*(_QWORD *)(a1 + 176));
  Current = CFAbsoluteTimeGetCurrent();
  objc_msgSend(*(id *)(a1 + 32), "monitorKinesiasExpiration");
  return Current < v4 + 604800.0;
}

void sub_1004A12D0(id a1)
{
  sub_100197040();
  if (sub_100195F08())
  {
    if ((sub_1001B7910() & 0x200000000000) != 0)
      byte_1023013E8 = 1;
  }
}

void sub_1004A1300()
{
  operator new();
}

void sub_1004A137C()
{
  operator delete();
}

uint64_t sub_1004A13A0(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004A1414;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301408 != -1)
    dispatch_once(&qword_102301408, block);
  return byte_102301400;
}

id sub_1004A1414(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLHealthAssessmentNotifier"));
  byte_102301400 = (char)result;
  return result;
}

uint64_t sub_1004A1440(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t sub_1004A144C(uint64_t result)
{
  *(_BYTE *)(result + 108) = 1;
  return result;
}

uint64_t sub_1004A1458(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_10213DBB0;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1004A14D8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A14F4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_10213DA50;
  *(_BYTE *)(a1 + 108) = 1;
  v2 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1004A4854((_QWORD *)(a1 + 232));
  sub_1004A4854((_QWORD *)(a1 + 184));
  sub_10041D2EC((uint64_t *)(a1 + 176), 0);
  sub_100261F44(a1 + 160);
  return sub_1004A1564(a1);
}

uint64_t sub_1004A1564(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213DBB0;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1004A15DC(uint64_t a1)
{
  sub_1004A14F4(a1);
  operator delete();
}

void sub_1004A1600(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1004A18B4(uint64_t a1, _DWORD *a2, unsigned __int32 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213DB80);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004A2A38((_QWORD *)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004A1A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

__n128 sub_1004A1A8C(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004A4AA0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1004A1B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  id v12;
  double Current;
  double v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint8_t *v21;
  int v22;
  id v23;
  uint8_t buf[4];
  id v25;

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    v12 = objc_alloc_init((Class)NSMutableDictionary);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2), CFSTR("dataBaseAccessType"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a3), CFSTR("errorType"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", a4), CFSTR("recordsCount"));
    Current = CFAbsoluteTimeGetCurrent();
    objc_msgSend(*(id *)(a1 + 32), "lastProcessedTime");
    v15 = (int)fmax(Current - v14, 0.0);
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmax(Current - a5, 0.0)), CFSTR("relativeQueryStartTime"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", (int)fmax(Current - a6, 0.0)), CFSTR("relativeQueryEndTime"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v15), CFSTR("timeSinceLastProcessed"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 160) + 132)), CFSTR("databaseSize"));
    objc_msgSend(v12, "setObject:forKeyedSubscript:", -[NSUUID UUIDString](+[NSUUID UUID](NSUUID, "UUID"), "UUIDString"), CFSTR("uuid"));
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v16 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Sending metrics to CoreAnalytics:%{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v22 = 138543362;
      v23 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 0, "Sending metrics to CoreAnalytics:%{public}@", &v22, 12);
      v21 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::logDBAccessAnalytics(DataBaseAccessType, ErrorType, int, CFAbsoluteTime, CFAbsoluteTime) const", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    AnalyticsSendEvent(CFSTR("com.apple.CoreLocation.CLParkinsonsDBUsage"), v12);

  }
  else
  {
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v17 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Not sending analytics, no IHA permission", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      LOWORD(v22) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 2, "Not sending analytics, no IHA permission", &v22, 2);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::logDBAccessAnalytics(DataBaseAccessType, ErrorType, int, CFAbsoluteTime, CFAbsoluteTime) const", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
}

uint64_t sub_1004A1FA0(uint64_t a1, double *a2)
{
  uint64_t result;

  result = sub_1004A4DB4(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_1004A24C4(a1);
    }
  }
  return result;
}

_QWORD *sub_1004A1FF4@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_1004A206C(uint64_t a1, int a2, double a3)
{
  unint64_t v6;
  double Current;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double *v12;
  double v13;
  NSObject *v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  double *v26;
  double v27;
  NSObject *v28;
  unint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  _BYTE v39[24];
  _BYTE buf[1628];

  v6 = sub_1001B7910();
  if ((v6 & 0x10000000) == 0)
    return (v6 >> 28) & 1;
  Current = CFAbsoluteTimeGetCurrent();
  v8 = Current;
  if (a3 <= 0.0)
  {
    v24 = *(_QWORD *)(a1 + 224);
    if (v24)
    {
      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 192)
                      + (((unint64_t)(v24 + *(_QWORD *)(a1 + 216) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (v24 + *(_BYTE *)(a1 + 216) - 1);
      v27 = *(double *)(v25 + 8);
      v26 = (double *)(v25 + 8);
      if (v27 > Current)
        *v26 = Current;
    }
    objc_msgSend(*(id *)(a1 + 32), "stopMonitoring");
    return (v6 >> 28) & 1;
  }
  v9 = Current + a3;
  objc_msgSend(*(id *)(a1 + 32), "addMonitoringPeriodFrom:until:", Current, v9);
  v10 = *(_QWORD *)(a1 + 224);
  if (v10
    && (v11 = *(_QWORD *)(*(_QWORD *)(a1 + 192)
                        + (((unint64_t)(v10 + *(_QWORD *)(a1 + 216) - 1) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (v10 + *(_BYTE *)(a1 + 216) - 1),
        v13 = *(double *)(v11 + 8),
        v12 = (double *)(v11 + 8),
        v13 >= v8))
  {
    *v12 = v9;
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v28 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
    {
      v29 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216) - 1;
      v30 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v29 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v29);
      v32 = *v30;
      v31 = v30[1];
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "Extend existing monitoring period %{public}f - %{public}f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v34 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216) - 1;
    v35 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v34 >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * v34);
    v37 = *v35;
    v36 = v35[1];
    *(_DWORD *)v39 = 134349312;
    *(_QWORD *)&v39[4] = v37;
    *(_WORD *)&v39[12] = 2050;
    *(_QWORD *)&v39[14] = v36;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Extend existing monitoring period %{public}f - %{public}f", v39, 22, *(_OWORD *)v39, *(_QWORD *)&v39[16]);
  }
  else
  {
    *(double *)buf = v8;
    *(double *)&buf[8] = v9;
    sub_1004A1A8C((_QWORD *)(a1 + 184), (__n128 *)buf);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v14 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216) - 1;
      v16 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v15 >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * v15);
      v18 = *v16;
      v17 = v16[1];
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = v17;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Add new monitoring period %{public}f - %{public}f", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_22;
    bzero(buf, 0x65CuLL);
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v19 = *(_QWORD *)(a1 + 224) + *(_QWORD *)(a1 + 216) - 1;
    v20 = (uint64_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 192) + ((v19 >> 5) & 0x7FFFFFFFFFFFFF8))
                    + 16 * v19);
    v22 = *v20;
    v21 = v20[1];
    *(_DWORD *)v39 = 134349312;
    *(_QWORD *)&v39[4] = v22;
    *(_WORD *)&v39[12] = 2050;
    *(_QWORD *)&v39[14] = v21;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Add new monitoring period %{public}f - %{public}f", v39, 22, *(_OWORD *)v39, *(_QWORD *)&v39[16]);
  }
  v38 = (char *)v23;
  sub_100512490("Generic", 1, 0, 2, "BOOL CLHealthAssessmentNotifier::recordHealthAssessmentData(CLHealthAssessment_Types::DataType, CFTimeInterval)", "%s\n", v23);
  if (v38 != buf)
    free(v38);
LABEL_22:
  objc_msgSend(*(id *)(a1 + 32), "setupService");
  if (!a2)
  {
LABEL_25:
    objc_msgSend(*(id *)(a1 + 32), "startUpdatesforAnalyzer:", 0);
    return (v6 >> 28) & 1;
  }
  if (a2 == 1)
  {
    objc_msgSend(*(id *)(a1 + 32), "startUpdatesforAnalyzer:", 1);
    goto LABEL_25;
  }
  return (v6 >> 28) & 1;
}

uint64_t sub_1004A24C4(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1004A55EC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1004A55EC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213DCD0);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1004A55EC(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

void sub_1004A2A38(_QWORD *a1, uint64_t a2, _DWORD *a3, unsigned __int32 *a4)
{
  NSObject *v6;
  unsigned __int32 v7;
  double Current;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int32 v14;
  const char *v15;
  __n128 *v16;
  _DWORD v17[4];
  __n128 buf[102];

  if (*a3 == 1)
  {
    if (qword_10229FFF0 != -1)
      dispatch_once(&qword_10229FFF0, &stru_10213DB60);
    v6 = off_10229FFF8;
    if (os_log_type_enabled((os_log_t)off_10229FFF8, OS_LOG_TYPE_INFO))
    {
      v7 = *a4;
      buf[0].n128_u32[0] = 67240192;
      buf[0].n128_u32[1] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Watch wrist state updated,onwrist,%{public}d", (uint8_t *)buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFF0 != -1)
        dispatch_once(&qword_10229FFF0, &stru_10213DB60);
      v14 = *a4;
      v17[0] = 67240192;
      v17[1] = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FFF8, 1, "Watch wrist state updated,onwrist,%{public}d", v17, 8);
      v16 = (__n128 *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLHealthAssessmentNotifier::onWatchOrientationSettingsNotification(int, const CLWatchOrientationSettingsNotifier_Type::Notification &, const CLWatchOrientationSettingsNotifier_Type::NotificationData &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    Current = CFAbsoluteTimeGetCurrent();
    v9 = *a4 == 1;
    v10 = a1[34];
    if (!v10
      || (v11 = v10 - 1,
          v12 = v11 + a1[33],
          v13 = *(_QWORD *)(a1[30] + ((v12 >> 5) & 0x7FFFFFFFFFFFFF8)),
          *(unsigned __int8 *)(v13 + 16 * v12 + 8) != v9)
      && (*(double *)(v13 + 16 * (v11 + *((_BYTE *)a1 + 264))) + 60.0 <= Current
       || (a1[34] = v11, sub_1004A5844(a1 + 29, 1), !a1[34])))
    {
      buf[0].n128_f64[0] = Current;
      buf[0].n128_u8[8] = v9;
      sub_1004A2C98(a1 + 29, buf);
    }
  }
}

__n128 sub_1004A2C98(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004A58B0(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

void sub_1004A2D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_10213DB80);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::removeClient(int) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_1004A2F94(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 104))(a1, a2, &v4);
}

uint64_t sub_1004A2FC0(uint64_t a1, int a2)
{
  int v3;

  v3 = a2;
  return (*(uint64_t (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
}

uint64_t sub_1004A2FEC(uint64_t a1)
{
  uint64_t result;
  CLNotifierServiceAdapter *v3;

  result = *(_QWORD *)(a1 + 48);
  if (!result)
  {
    v3 = objc_alloc_init(CLNotifierServiceAdapter);
    *(_QWORD *)(a1 + 48) = v3;
    -[CLNotifierServiceAdapter setValid:](v3, "setValid:", 1);
    objc_msgSend(*(id *)(a1 + 48), "setAdaptedNotifier:", a1);
    return *(_QWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1004A3038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A1ED0);
}

uint64_t sub_1004A304C(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  const char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BYTE v42[12];
  __int16 v43;
  int v44;
  _BYTE buf[12];
  __int16 v46;
  int v47;

  v41 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v42 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v40 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        *(_QWORD *)buf = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_1004A5C5C();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v40 = a1 + 64;
        v30 = byte_1022A1ED1;
        HIDWORD(v39) = v17;
        *(_QWORD *)buf = (char *)&v39 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v39) = *a3;
        *(_QWORD *)buf = (char *)&v39 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v39 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v41;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v41, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v42 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213DB80);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v46 = 1026;
    v47 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v42 = 136446466;
    *(_QWORD *)&v42[4] = v36;
    v43 = 1026;
    v44 = a2;
    LODWORD(v39) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v42,
      v39);
    v38 = (char *)v37;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return 0;
  }
  return result;
}

BOOL sub_1004A34A8(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::clientRegistered(int, const Notification_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_1004A3728(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10213DB80);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10213DB80);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_1004A3AB0(uint64_t a1, int *a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = operator new(0x20uLL);
  v6[2] = 0;
  *v6 = off_10213DD40;
  v6[1] = 0;
  v7 = *a3;
  *((_QWORD *)&v14 + 1) = v6;
  v6[3] = v7;
  *(_QWORD *)&v14 = v6 + 3;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1004A3B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A3B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &v5, a3, a4, 0);
}

void sub_1004A3BD0(uint64_t a1, signed __int32 *a2, _QWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x20uLL);
      v24[2] = 0;
      *v24 = off_10213DD40;
      v24[1] = 0;
      v24[3] = *a3;
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1004A67BC();
    os_activity_scope_leave(&state);
  }
}

void sub_1004A4208(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_1004A4254(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213DB80);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213DB80);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10213DB80);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10213DB80);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::listClients() [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1004A47FC(id a1)
{
  off_10229FFF8 = os_log_create("com.apple.locationd.Motion", "MovementDisorder");
}

void sub_1004A4828(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1004A4854(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 256;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_1004A48E8(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1004A48E8(a1, *a2);
    sub_1004A48E8(a1, a2[1]);
    sub_100261F44((uint64_t)(a2 + 8));
    sub_100008848((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

uint64_t sub_1004A4940(uint64_t a1)
{
  sub_100261F44(a1 + 24);
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_1004A4974@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x178uLL);
  result = sub_1004A49CC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004A49B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004A49CC(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213DC90;
  sub_1012ABBF0(a1 + 3, *a2);
  return a1;
}

void sub_1004A4A08(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004A4A1C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213DC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004A4A30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213DC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004A4A64(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1004A4A74(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1004A4AA0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004A4D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A4DB4(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *a2;
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, double *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 272))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1004A527C(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10213DCF0);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10213DCF0);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::addSuspectRecord(const T &) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_1004A51A4(v12, (uint64_t)a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213DCF0);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DCF0);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_1004A517C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1004A51A4(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 85 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004A52D8(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x55)) + 48 * (v7 % 0x55);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v8 + 32) = v10;
  *(__n128 *)v8 = result;
  ++a1[5];
  return result;
}

void sub_1004A5250(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004A527C(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x55)
    a2 = 1;
  if (v2 < 0xAA)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 85;
  }
  return v4 ^ 1u;
}

void sub_1004A52D8(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x55;
  v4 = v2 - 85;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004A55A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A55EC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213DCF0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DCF0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<ParkinsonsResult, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = ParkinsonsResult, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1004A57E8(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x100)
    a2 = 1;
  if (v2 < 0x200)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 256;
  }
  return v4 ^ 1u;
}

uint64_t sub_1004A5844(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 32 * (v2 - v3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x100)
    a2 = 1;
  if (v5 < 0x200)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1004A58B0(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004A5B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A5BC4(uint64_t **a1, uint64_t a2)
{
  uint64_t **v3;
  uint64_t *v4;
  uint64_t **v5;

  v3 = a1 + 1;
  v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 28) >= *((_DWORD *)v4 + 7))
          break;
        v4 = (uint64_t *)*v4;
        v5 = v3;
        if (!*v3)
          goto LABEL_8;
      }
      v4 = (uint64_t *)v4[1];
    }
    while (v4);
    v5 = v3 + 1;
  }
  else
  {
    v5 = a1 + 1;
  }
LABEL_8:
  sub_1000145B0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

void sub_1004A5C30(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_1004A5C5C()
{
  operator new();
}

_BYTE *sub_1004A5CEC(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_1004A5F14(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t **sub_1004A5DC8(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x58uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 4) = 0u;
    *((_QWORD *)v11 + 9) = 0;
    *((_QWORD *)v11 + 10) = 0;
    *((_OWORD *)v11 + 3) = 0u;
    *((_QWORD *)v11 + 5) = v11 + 12;
    *((_QWORD *)v11 + 8) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1004A5EA0(uint64_t a1, _QWORD **a2)
{
  if (*(_BYTE *)(a1 + 8))
  {
    sub_100261F44((uint64_t)(a2 + 8));
    sub_100008848((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }
  operator delete(a2);
}

uint64_t sub_1004A5EF4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_1004A5F14(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1004A5F8C(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1004A6314(a1);
  else
    return 0;
}

id sub_1004A5F8C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1004A66C0((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB2A40 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB2A40 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLHealthAssessmentNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1004A6314(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB2A40 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB2A40 & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10213DD10);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLHealthAssessmentNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1004A66C0(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B078))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)8)
      sub_1018FBC58();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1004A6734(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213DD40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004A6748(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213DD40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004A6784(uint64_t a1)
{
  uint64_t v2;

  v2 = a1 + 8;
  sub_100261F44(a1 + 32);
  sub_100008848(v2, *(_QWORD **)(a1 + 16));
  return a1;
}

void sub_1004A67BC()
{
  operator new();
}

void sub_1004A684C(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_1004A5F14(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1004A5CEC(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10213DB80);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10213DB80);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLHealthAssessmentNotifier_Type::Notification, CLHealthAssessmentNotifier_Type::NotificationData, char, char>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLHealthAssessmentNotifier_Type::Notification, NotificationData_T = CLHealthAssessmentNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

__n128 *sub_1004A6C20(uint64_t **a1, __n128 *a2)
{
  uint64_t **v4;
  __n128 *v5;
  uint64_t *v6;
  signed __int32 v7;
  uint64_t **v8;
  signed __int32 v9;
  uint64_t **v11;
  char v12;

  v4 = a1 + 1;
  v5 = (__n128 *)operator new(0x58uLL);
  v11 = v4;
  sub_1004A6D08(v5 + 2, a2);
  v12 = 1;
  v6 = a1[1];
  if (v6)
  {
    v7 = v5[2].n128_i32[0];
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v6;
        v9 = *((_DWORD *)v6 + 8);
        if (v7 >= v9)
          break;
        v6 = *v8;
        v4 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v6 = v8[1];
      if (!v6)
      {
        v4 = v8 + 1;
        goto LABEL_10;
      }
    }
    sub_1004A5EA0((uint64_t)&v11, v5);
    return (__n128 *)v8;
  }
  else
  {
    v8 = v4;
LABEL_10:
    sub_1000145B0(a1, (uint64_t)v8, v4, (uint64_t *)v5);
  }
  return v5;
}

__n128 sub_1004A6D08(__n128 *a1, __n128 *a2)
{
  __n128 *v2;
  unint64_t v3;
  __n128 *v4;
  unint64_t v5;
  __n128 result;

  a1->n128_u32[0] = a2->n128_u32[0];
  a1->n128_u64[1] = a2->n128_u64[1];
  v2 = a2 + 1;
  v3 = a2[1].n128_u64[0];
  a1[1].n128_u64[0] = v3;
  v4 = a1 + 1;
  v5 = a2[1].n128_u64[1];
  a1[1].n128_u64[1] = v5;
  if (v5)
  {
    *(_QWORD *)(v3 + 16) = v4;
    a2->n128_u64[1] = (unint64_t)v2;
    v2->n128_u64[0] = 0;
    a2[1].n128_u64[1] = 0;
  }
  else
  {
    a1->n128_u64[1] = (unint64_t)v4;
  }
  result = a2[2];
  a1[2] = result;
  a2[2].n128_u64[0] = 0;
  a2[2].n128_u64[1] = 0;
  a1[3].n128_u8[0] = a2[3].n128_u8[0];
  return result;
}

uint64_t sub_1004A6D60(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  *(_DWORD *)a1 = *a2;
  sub_1004A6DBC((uint64_t *)(a1 + 8), a3);
  v5 = *(_QWORD *)(a3 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 40) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 40);
  return a1;
}

uint64_t *sub_1004A6DBC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100E4C1EC(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_1004A6DF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_1004A6E10(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

BOOL sub_1004A6E30()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 3128));
}

uint64_t sub_1004A6E3C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1004A6E6C(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, uint64_t a6, float a7, uint64_t a8, __int128 *a9, __int128 *a10)
{
  _QWORD *v18;
  _BYTE *v19;
  __int128 v20;
  __int128 v21;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v18 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v18 = &off_102138DD8;
  *(_QWORD *)a1 = off_10213DD90;
  *(_QWORD *)(a1 + 72) = off_10213DDC8;
  sub_101137D40(a1 + 72, a2, a5, a1, a7, a6, 7, 12000);
  *(_QWORD *)a1 = off_10213DD90;
  *(_QWORD *)(a1 + 72) = off_10213DDC8;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 176) = a4;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 224), a2);
  v19 = (_BYTE *)(a1 + 248);
  if (*((char *)a9 + 23) < 0)
  {
    sub_100115CE4(v19, *(void **)a9, *((_QWORD *)a9 + 1));
  }
  else
  {
    v20 = *a9;
    *(_QWORD *)(a1 + 264) = *((_QWORD *)a9 + 2);
    *(_OWORD *)v19 = v20;
  }
  if (*((char *)a10 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 272), *(void **)a10, *((_QWORD *)a10 + 1));
  }
  else
  {
    v21 = *a10;
    *(_QWORD *)(a1 + 288) = *((_QWORD *)a10 + 2);
    *(_OWORD *)(a1 + 272) = v21;
  }
  *(_QWORD *)(a1 + 296) = -1;
  *(_QWORD *)(a1 + 304) = -1;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_BYTE *)(a1 + 336) = 0;
  sub_100E81598((_QWORD *)(a1 + 344), 0, 0);
  if (a3)
    operator new();
  operator new();
}

void sub_1004A71D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  _QWORD *v23;
  void **v24;
  uint64_t *v25;
  uint64_t v27;
  uint64_t v28;

  if (*(char *)(v22 + 271) < 0)
    operator delete(*a10);
  if (*(char *)(v22 + 247) < 0)
    operator delete(*v24);
  sub_100259608((void ***)&__p);
  v27 = *(_QWORD *)(v22 + 192);
  *(_QWORD *)(v22 + 192) = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 24))(v27);
  v28 = *v25;
  *v25 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  sub_101138068(a11);
  *(_QWORD *)v22 = off_102138DA8;
  sub_100427950(v23);
  _Unwind_Resume(a1);
}

void sub_1004A7350()
{
  JUMPOUT(0x1004A7330);
}

uint64_t sub_1004A7358(uint64_t a1, int a2)
{
  if (!a2)
    return 0;
  if (*(_QWORD *)(a1 + 176))
  {
    if ((sub_10008950C(a1 + 72) & 1) == 0)
      sub_100F66440(*(_QWORD *)(a1 + 176));
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 24))(a1 + 72))
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
  else
    return 0;
}

void sub_1004A73C4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, uint64_t a6, float a7, uint64_t a8, __int128 *a9, __int128 *a10)
{
  sub_1004A6E6C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

uint64_t sub_1004A73D0(uint64_t a1, uint64_t *a2, double *a3, int *a4)
{
  sqlite3_stmt *v8;
  int v9;
  int v10;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;

  v8 = (sqlite3_stmt *)sub_100026CC8(*a2);
  v9 = sqlite3_step(v8);
  if (v9 == 101)
    return 1;
  v10 = v9;
  if (v9 == 100)
  {
    sub_1004A75CC(a1, a2, a3, a4);
    return 0;
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v12 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67109120;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "[DB] getMostRecentTimeWithCode - Result was error: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v15[0] = 67109120;
      v15[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 17, "[DB] getMostRecentTimeWithCode - Result was error: %d", v15);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "CLActivityDB::ActivityCode CMHealthColdStorageDb::getTimeAndIDWithCode(const CLSqliteScopedStatement &, CFAbsoluteTime &, int &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    return 2;
  }
}

void sub_1004A75CC(uint64_t a1, uint64_t *a2, double *a3, int *a4)
{
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;

  v8 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *a4 = sqlite3_column_int(v8, *(_DWORD *)(a1 + 308));
  v9 = (sqlite3_stmt *)sub_100026CC8(*a2);
  *a3 = sqlite3_column_double(v9, *(_DWORD *)(a1 + 296));
}

uint64_t sub_1004A7624(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[8];

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)&v31);
    v6 = sub_100263F7C(&v32, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
    if ((v30 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v8 = v30;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
    if (byte_102301457 >= 0)
      v11 = &qword_102301440;
    else
      v11 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v12 = byte_102301457;
    else
      v12 = unk_102301448;
    v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
    v14 = sub_100263F7C(v13, (uint64_t)" LIKE '%", 8);
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = a3;
    else
      v16 = *(_QWORD *)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    v18 = sub_100263F7C(v14, v16, v17);
    v19 = sub_100263F7C(v18, (uint64_t)"%' OR ", 6);
    if (byte_102301457 >= 0)
      v20 = &qword_102301440;
    else
      v20 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v21 = byte_102301457;
    else
      v21 = unk_102301448;
    v22 = sub_100263F7C(v19, (uint64_t)v20, v21);
    v23 = sub_100263F7C(v22, (uint64_t)" IS NULL OR ", 12);
    if (byte_102301457 >= 0)
      v24 = &qword_102301440;
    else
      v24 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v25 = byte_102301457;
    else
      v25 = unk_102301448;
    v26 = sub_100263F7C(v23, (uint64_t)v24, v25);
    sub_100263F7C(v26, (uint64_t)" = '' ORDER BY ROWID DESC LIMIT 1", 33);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    v27 = a1[10];
    std::stringbuf::str(__p, v33);
    if ((v30 & 0x80u) == 0)
      v28 = (char *)__p;
    else
      v28 = (char *)__p[0];
    sub_1000CDA68(v27, v28);
  }
  return result;
}

void sub_1004A7880(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A78D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  void *__p[2];
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[8];

  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)&v31);
    v6 = sub_100263F7C(&v32, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
    if ((v30 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v30 & 0x80u) == 0)
      v8 = v30;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    v10 = sub_100263F7C(v9, (uint64_t)" WHERE ", 7);
    if (byte_102301457 >= 0)
      v11 = &qword_102301440;
    else
      v11 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v12 = byte_102301457;
    else
      v12 = unk_102301448;
    v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
    v14 = sub_100263F7C(v13, (uint64_t)" LIKE '%", 8);
    v15 = *(char *)(a3 + 23);
    if (v15 >= 0)
      v16 = a3;
    else
      v16 = *(_QWORD *)a3;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a3 + 23);
    else
      v17 = *(_QWORD *)(a3 + 8);
    v18 = sub_100263F7C(v14, v16, v17);
    v19 = sub_100263F7C(v18, (uint64_t)"%' OR ", 6);
    if (byte_102301457 >= 0)
      v20 = &qword_102301440;
    else
      v20 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v21 = byte_102301457;
    else
      v21 = unk_102301448;
    v22 = sub_100263F7C(v19, (uint64_t)v20, v21);
    v23 = sub_100263F7C(v22, (uint64_t)" IS NULL OR ", 12);
    if (byte_102301457 >= 0)
      v24 = &qword_102301440;
    else
      v24 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v25 = byte_102301457;
    else
      v25 = unk_102301448;
    v26 = sub_100263F7C(v23, (uint64_t)v24, v25);
    sub_100263F7C(v26, (uint64_t)" = '' ORDER BY ROWID ASC LIMIT 1", 32);
    if ((char)v30 < 0)
      operator delete(__p[0]);
    v27 = a1[10];
    std::stringbuf::str(__p, v33);
    if ((v30 & 0x80u) == 0)
      v28 = (char *)__p;
    else
      v28 = (char *)__p[0];
    sub_1000CDA68(v27, v28);
  }
  return result;
}

void sub_1004A7B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  uint64_t v17;

  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A7B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  void *__p[2];
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[8];

  if (sub_10008950C(a1 + 72))
  {
    sub_100263E50((uint64_t)&v37);
    v5 = sub_100263F7C(&v38, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
    if ((v36 & 0x80u) == 0)
      v6 = __p;
    else
      v6 = (void **)__p[0];
    if ((v36 & 0x80u) == 0)
      v7 = v36;
    else
      v7 = (uint64_t)__p[1];
    v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
    v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
    v10 = *(char *)(a1 + 271);
    if (v10 >= 0)
      v11 = a1 + 248;
    else
      v11 = *(_QWORD *)(a1 + 248);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(a1 + 271);
    else
      v12 = *(_QWORD *)(a1 + 256);
    v13 = sub_100263F7C(v9, v11, v12);
    v14 = sub_100263F7C(v13, (uint64_t)" > ? AND (", 10);
    if (byte_102301457 >= 0)
      v15 = &qword_102301440;
    else
      v15 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v16 = byte_102301457;
    else
      v16 = unk_102301448;
    v17 = sub_100263F7C(v14, (uint64_t)v15, v16);
    v18 = sub_100263F7C(v17, (uint64_t)" LIKE '%", 8);
    v19 = *(char *)(a3 + 23);
    if (v19 >= 0)
      v20 = a3;
    else
      v20 = *(_QWORD *)a3;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(a3 + 23);
    else
      v21 = *(_QWORD *)(a3 + 8);
    v22 = sub_100263F7C(v18, v20, v21);
    v23 = sub_100263F7C(v22, (uint64_t)"%' OR ", 6);
    if (byte_102301457 >= 0)
      v24 = &qword_102301440;
    else
      v24 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v25 = byte_102301457;
    else
      v25 = unk_102301448;
    v26 = sub_100263F7C(v23, (uint64_t)v24, v25);
    v27 = sub_100263F7C(v26, (uint64_t)" IS NULL OR ", 12);
    if (byte_102301457 >= 0)
      v28 = &qword_102301440;
    else
      v28 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v29 = byte_102301457;
    else
      v29 = unk_102301448;
    v30 = sub_100263F7C(v27, (uint64_t)v28, v29);
    v31 = sub_100263F7C(v30, (uint64_t)" = '') ORDER BY ROWID ASC LIMIT ", 32);
    std::ostream::operator<<(v31, 500);
    if ((char)v36 < 0)
      operator delete(__p[0]);
    v32 = *(_QWORD *)(a1 + 80);
    std::stringbuf::str(__p, v39);
    if ((v36 & 0x80u) == 0)
      v33 = (char *)__p;
    else
      v33 = (char *)__p[0];
    sub_1000CDA68(v32, v33);
  }
  return 0;
}

void sub_1004A7F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

id sub_1004A7F90(uint64_t a1, uint64_t *a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  const void *v6;
  sqlite3_stmt *v7;
  int v8;

  if (*a2
    && *(_DWORD *)(a1 + 300) != -1
    && (v4 = (sqlite3_stmt *)sub_100026CC8(*a2), sqlite3_step(v4) == 100)
    && (v5 = (sqlite3_stmt *)sub_100026CC8(*a2),
        v6 = sqlite3_column_blob(v5, *(_DWORD *)(a1 + 300)),
        v7 = (sqlite3_stmt *)sub_100026CC8(*a2),
        v8 = sqlite3_column_bytes(v7, *(_DWORD *)(a1 + 300)),
        v6)
    && v8)
  {
    return objc_msgSend(objc_alloc((Class)NSData), "initWithBytes:length:", v6, v8);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1004A8038(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void *__p[2];
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[8];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)&v16);
    v3 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v5 = v15;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    v7 = sub_100263F7C(v6, (uint64_t)" WHERE ", 7);
    v8 = *(char *)(a1 + 271);
    if (v8 >= 0)
      v9 = a1 + 248;
    else
      v9 = *(_QWORD *)(a1 + 248);
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a1 + 271);
    else
      v10 = *(_QWORD *)(a1 + 256);
    v11 = sub_100263F7C(v7, v9, v10);
    sub_100263F7C(v11, (uint64_t)" < ?", 4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v12 = *(_QWORD *)(a1 + 80);
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v13 = (char *)__p;
    else
      v13 = (char *)__p[0];
    sub_1000CDA68(v12, v13);
  }
  return result;
}

void sub_1004A8224(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A8278(uint64_t *a1)
{
  void **v2;
  NSObject *v3;
  int v4;
  int v5;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  void *v14[3];
  void *__p[2];
  char v16;
  void *v17;
  __int16 v18;
  int v19;
  uint8_t buf[16];

  v2 = __p;
  (*(void (**)(void **__return_ptr))(*a1 + 32))(__p);
  if (v16 < 0)
    v2 = (void **)__p[0];
  if (!strcmp((const char *)v2, "VO2MaxInputHistory") && !*(_BYTE *)(a1[22] + 148))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v7 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[DB] VO2MaxInputHistory table not yet ready for sync since deduplication is not complete", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      LOWORD(v17) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[DB] VO2MaxInputHistory table not yet ready for sync since deduplication is not complete", &v17, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::validateTableFormat()", "%s\n", v8);
      if (v9 != buf)
        goto LABEL_28;
    }
  }
  else
  {
    if (sub_10008950C(a1[23]) && sub_10008950C(a1 + 9))
    {
      sub_100259648(a1 + 25);
      memset(v14, 0, sizeof(v14));
      sub_1011389B8(a1[23], (const char *)v2, a1 + 25, v14);
    }
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v3 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = sub_10008950C(a1[23]);
      v5 = sub_10008950C(a1 + 9);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v10 = qword_10229FFA8;
      v11 = sub_10008950C(a1[23]);
      v12 = sub_10008950C(a1 + 9);
      LODWORD(v17) = 67109376;
      HIDWORD(v17) = v11;
      v18 = 1024;
      v19 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 0, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", &v17, 14);
      v9 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::validateTableFormat()", "%s\n", v13);
      if (v9 != buf)
LABEL_28:
        free(v9);
    }
  }
  if (v16 < 0)
    operator delete(__p[0]);
  return 0;
}

void sub_1004A8E94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A8F24(uint64_t a1, char *a2)
{
  uint64_t v4;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  void *__p[2];
  char v12;

  if (!sub_100635B3C(*(_QWORD *)(a1 + 80), a2))
    return 1;
  if (!strcmp(a2, "SmoothedGaitMetricsHistory"))
  {
    v6 = "";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), a2, (uint64_t)"numGaitMetrics", (uint64_t)&v6);
  }
  if (strcmp(a2, "VO2MaxInputHistory"))
    return 1;
  sub_1015A2E04(__p, a2);
  v4 = sub_1004A91B8(a1, (uint64_t)__p);
  if (v12 < 0)
    operator delete(__p[0]);
  return v4;
}

void sub_1004A9194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004A91B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *p_p;
  uint64_t v15;
  uint64_t v16;
  void *v17[34];
  __int16 v18;
  void *__p;
  char v20;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v17[32] = (void *)(a1 + 112);
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v18 = 256;
  if (sub_10008950C(v6))
  {
    v7 = *(char *)(a2 + 23) >= 0 ? (const char *)a2 : *(const char **)a2;
    if (sub_100635B3C(*(_QWORD *)(a1 + 80), v7))
    {
      CFAbsoluteTimeGetCurrent();
      sub_100263E50((uint64_t)&v15);
      v8 = sub_100263F7C(&v16, (uint64_t)"DELETE FROM ", 12);
      v9 = *(char *)(a2 + 23);
      if (v9 >= 0)
        v10 = a2;
      else
        v10 = *(_QWORD *)a2;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(a2 + 23);
      else
        v11 = *(_QWORD *)(a2 + 8);
      sub_100263F7C(v8, v10, v11);
      v12 = *(_QWORD *)(a1 + 80);
      std::stringbuf::str(&__p, v17);
      if (v20 >= 0)
        p_p = (char *)&__p;
      else
        p_p = (char *)__p;
      sub_1000CDA68(v12, p_p);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return 0;
}

void sub_1004A9530(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  uint64_t v58;

  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  sub_1018B38B4((uint64_t)&a11);
  sub_10187E514((uint64_t)&a46);
  _Unwind_Resume(a1);
}

uint64_t sub_1004A95AC(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v8;
  NSObject *v9;
  unint64_t v10;
  _BYTE *v11;
  double v12;
  _BOOL4 v13;
  NSObject *v14;
  NSObject *v15;
  int v16;
  NSObject *v18;
  double v19;
  double Current;
  uint64_t v21;
  char *v22;
  int v23;
  int v24;
  NSObject *v25;
  int v26;
  void **v27;
  CFAbsoluteTime v28;
  int v29;
  double v30;
  void **v31;
  int v32;
  _BYTE *v33;
  NSString *v34;
  __objc2_class *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  const __CFString *v42;
  uint64_t v43;
  NSObject *v44;
  void *v45;
  NSObject *v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  void *v55;
  uint8_t *v56;
  char *v57;
  char *v58;
  const char *v59;
  char *v60;
  const char *v61;
  char *v62;
  uint64_t v63;
  uint8_t *v64;
  char *v65;
  char *v66;
  const char *v67;
  char *v68;
  double v69;
  uint64_t v70;
  _QWORD v71[2];
  double v72;
  unint64_t v73;
  uint8_t *v74;
  char v75;
  _BYTE __dst[24];
  uint64_t v77;
  uint8_t v78[32];
  void *v79[3];
  uint64_t v80;
  uint8_t buf[32];
  _BYTE __p[28];
  __int16 v83;
  double v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;

  if ((sub_10008950C(*(_QWORD *)(a1 + 184)) & 1) == 0
    && (sub_10008950C(a1 + 72) & 1) == 0
    && MKBGetDeviceLockState(0) == 3)
  {
    sub_100F66440(*(_QWORD *)(a1 + 176));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 184) + 24))(*(_QWORD *)(a1 + 184));
    (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 24))(a1 + 72);
  }
  if (sub_10008950C(*(_QWORD *)(a1 + 184)) && (v8 = a1 + 72, sub_10008950C(a1 + 72)))
  {
    if (sub_1004A8278((uint64_t *)a1))
    {
      *(double *)&v73 = -1.0;
      if (sub_1004A7624((_QWORD *)a1, (uint64_t)&v73, a2))
      {
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_10213DE40);
        v9 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
        {
          v10 = v73;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
          v11 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 134218242;
          *(_QWORD *)&buf[4] = v10;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "[DB] Found most recent time %f for %s", buf, 0x16u);
          if ((__p[23] & 0x80000000) != 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_10213DE40);
          v54 = qword_10229FFA8;
          v55 = (void *)v73;
          (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(buf, a1);
          if ((buf[23] & 0x80u) == 0)
            v56 = buf;
          else
            v56 = *(uint8_t **)buf;
          LODWORD(v79[0]) = 134218242;
          *(void **)((char *)v79 + 4) = v55;
          WORD2(v79[1]) = 2080;
          *(void **)((char *)&v79[1] + 6) = v56;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v54, 1, "[DB] Found most recent time %f for %s", COERCE_DOUBLE(v79), 22);
          v58 = v57;
          if ((char)buf[23] < 0)
            operator delete(*(void **)buf);
          sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v58);
          v12 = *(double *)&v55;
          if (v58 != __p)
            free(v58);
        }
        else
        {
          v12 = *(double *)&v73;
        }
        v72 = -1.0;
        sub_1004A78D4((_QWORD *)a1, (uint64_t)&v72, a2);
        v13 = a4 > 0.0;
        if (v12 <= 0.0)
          v13 = 0;
        if (v13 && v12 < a4)
        {
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_10213DE40);
          v14 = qword_10229FFA8;
          if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
          {
            *(_WORD *)__p = 0;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "[DB] Deleting all old records.", __p, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FFA0 != -1)
              dispatch_once(&qword_10229FFA0, &stru_10213DE40);
            *(_WORD *)buf = 0;
            LODWORD(v69) = 2;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[DB] Deleting all old records.", buf, *(_QWORD *)&v69);
            v62 = (char *)v61;
            sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v61);
            if (v62 != __p)
              free(v62);
          }
          sub_101139070((_QWORD *)(a1 + 72));
        }
        else
        {
          if (v72 >= a4)
            v13 = 0;
          if (v13)
          {
            if (qword_10229FFA0 != -1)
              dispatch_once(&qword_10229FFA0, &stru_10213DE40);
            v18 = qword_10229FFA8;
            if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)__p = 0;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "[DB] Deleting all old records preceding delete request.", __p, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (qword_10229FFA0 != -1)
                dispatch_once(&qword_10229FFA0, &stru_10213DE40);
              *(_WORD *)buf = 0;
              LODWORD(v69) = 2;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 1, "[DB] Deleting all old records preceding delete request.", buf, *(_QWORD *)&v69);
              v68 = (char *)v67;
              sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v67);
              if (v68 != __p)
                free(v68);
            }
            sub_1004A8038(a1);
          }
        }
        if (!*(_DWORD *)(a1 + 132))
          *(_DWORD *)(a1 + 132) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 48))(a1 + 72);
        if (v12 >= a4)
          v19 = v12;
        else
          v19 = a4;
        memset(buf, 0, 24);
        sub_1004AA588(a1, (uint64_t)buf);
        Current = CFAbsoluteTimeGetCurrent();
        v21 = *(_QWORD *)(a1 + 184);
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(v79, a1);
        memset(__p, 0, 24);
        *(_QWORD *)v78 = __p;
        v78[8] = 0;
        *(_QWORD *)__p = operator new(0x18uLL);
        *(_QWORD *)&__p[8] = *(_QWORD *)__p;
        *(_QWORD *)&__p[16] = *(_QWORD *)__p + 24;
        *(_QWORD *)&__p[8] = sub_10028E070((uint64_t)&__p[16], (__int128 *)v79, (__int128 *)&v80, *(char **)__p);
        if ((char)buf[23] < 0)
        {
          sub_100115CE4(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)buf;
          *(_QWORD *)&__dst[16] = *(_QWORD *)&buf[16];
        }
        memset(v78, 0, 24);
        v74 = v78;
        v75 = 0;
        *(_QWORD *)v78 = operator new(0x18uLL);
        *(_QWORD *)&v78[8] = *(_QWORD *)v78;
        *(_QWORD *)&v78[16] = *(_QWORD *)v78 + 24;
        *(_QWORD *)&v78[8] = sub_10028E070((uint64_t)&v78[16], (__int128 *)__dst, (__int128 *)&v77, *(char **)v78);
        v22 = (char *)(a1 + 248);
        if (*(char *)(a1 + 271) < 0)
          v22 = *(char **)v22;
        sub_1011389C8(a1 + 72, v21, (uint64_t *)__p, v78, v22, v19);
        v74 = v78;
        sub_100259608((void ***)&v74);
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        *(_QWORD *)v78 = __p;
        sub_100259608((void ***)v78);
        if (SHIBYTE(v79[2]) < 0)
          operator delete(v79[0]);
        v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 48))(a1 + 72);
        v24 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(a1 + 72, &qword_102301410);
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_10213DE40);
        v25 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(v79, a1);
          v26 = SHIBYTE(v79[2]);
          v27 = (void **)v79[0];
          v28 = CFAbsoluteTimeGetCurrent();
          v29 = *(_DWORD *)(a1 + 132);
          v30 = v28 - Current;
          v31 = v79;
          if (v26 < 0)
            v31 = v27;
          *(_QWORD *)__p = 68290306;
          *(_WORD *)&__p[8] = 2082;
          *(_QWORD *)&__p[10] = "";
          *(_WORD *)&__p[18] = 2082;
          *(_QWORD *)&__p[20] = v31;
          v83 = 2050;
          v84 = v30;
          v85 = 1026;
          v86 = v29;
          v87 = 1026;
          v88 = v23;
          v89 = 1026;
          v90 = v24;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"copyTablesFromOtherDatabase\", \"tableName\":%{public, location:escape_only}s, \"duration\":\"%{public}.5f\", \"recordCountInitial\":%{public}d, \"recordCountAfterSync\":%{public}d, \"recordCountAfterPurge\":%{public}d}", __p, 0x38u);
          if (SHIBYTE(v79[2]) < 0)
            operator delete(v79[0]);
        }
        if (v24 >= 0)
          v32 = v23 - v24;
        else
          v32 = 0;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
        if (__p[23] >= 0)
          v33 = __p;
        else
          v33 = *(_BYTE **)__p;
        v34 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v33);
        v35 = DefaultObserver;
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
        v36 = *a3;
        v37 = (std::__shared_weak_count *)a3[1];
        v71[0] = v36;
        v71[1] = v37;
        if (v37)
        {
          p_shared_owners = (unint64_t *)&v37->__shared_owners_;
          do
            v39 = __ldxr(p_shared_owners);
          while (__stxr(v39 + 1, p_shared_owners));
        }
        sub_1004AA7EC(a1, v71, v23 - *(_DWORD *)(a1 + 132), v32);
        if (v37)
        {
          v40 = (unint64_t *)&v37->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        *(_DWORD *)(a1 + 132) = v24;
        v42 = -[NSString stringByAppendingString:](v34, "stringByAppendingString:", CFSTR("CKSyncStartTime"));
        v74 = 0;
        v43 = sub_1001FD94C();
        sub_1001FD9FC(v43, (uint64_t)v42, &v74);
        if (*(_BYTE *)(a1 + 336))
        {
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_10213DE40);
          v44 = qword_10229FFA8;
          if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__p = 134217984;
            *(double *)&__p[4] = a4;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "[CloudKit] marked as dirty, start Time for cloud sync : %f", __p, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(__p, 0x65CuLL);
            if (qword_10229FFA0 != -1)
              dispatch_once(&qword_10229FFA0, &stru_10213DE40);
            LODWORD(v79[0]) = 134217984;
            *(void **)((char *)v79 + 4) = *(void **)&a4;
            _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[CloudKit] marked as dirty, start Time for cloud sync : %f", COERCE_DOUBLE(v79));
            v60 = (char *)v59;
            sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v59);
            if (v60 != __p)
              free(v60);
            v35 = DefaultObserver;
          }
          v74 = *(uint8_t **)&a4;
        }
        memset(v79, 0, sizeof(v79));
        v70 = 0;
        sub_1004A7B84(a1, (uint64_t)v79, a2);
        v45 = v79[0];
        if (v79[0] != v79[1])
        {
          if ((void *)((char *)v79[1] - (char *)v79[0]) == (void *)2000)
          {
            if (v35[100].isa != (__objc2_class *)-1)
              dispatch_once(&qword_10229FFA0, &stru_10213DE40);
            v46 = qword_10229FFA8;
            if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
            {
              (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
              v47 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
              *(_DWORD *)v78 = 136315394;
              *(_QWORD *)&v78[4] = v47;
              *(_WORD *)&v78[12] = 2048;
              *(_QWORD *)&v78[14] = v70;
              _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "[DB] Max records fetch limit reached for %s, latest record time %f", v78, 0x16u);
              if ((__p[23] & 0x80000000) != 0)
                operator delete(*(void **)__p);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(__p, 0x65CuLL);
              if (v35[100].isa != (__objc2_class *)-1)
                dispatch_once(&qword_10229FFA0, &stru_10213DE40);
              v63 = qword_10229FFA8;
              (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(v78, a1);
              if ((v78[23] & 0x80u) == 0)
                v64 = v78;
              else
                v64 = *(uint8_t **)v78;
              *(_DWORD *)__dst = 136315394;
              *(_QWORD *)&__dst[4] = v64;
              *(_WORD *)&__dst[12] = 2048;
              *(_QWORD *)&__dst[14] = v70;
              LODWORD(v69) = 22;
              _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v63, 0, "[DB] Max records fetch limit reached for %s, latest record time %f", __dst, v69);
              v66 = v65;
              if ((char)v78[23] < 0)
                operator delete(*(void **)v78);
              sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v66);
              if (v66 != __p)
                free(v66);
            }
          }
          sub_1004AA9B8((uint64_t *)a1);
          sub_100262014(a1 + 312, *(_QWORD *)(a1 + 320), (char *)v79[0], (char *)v79[1], ((char *)v79[1] - (char *)v79[0]) >> 2);
          v48 = sub_1001FD94C();
          sub_10018A534(v48, v42, &v70);
          v49 = sub_1001FD94C();
          (*(void (**)(uint64_t))(*(_QWORD *)v49 + 944))(v49);
          v45 = v79[0];
        }
        *(_BYTE *)(a1 + 336) = 0;
        if (v45)
        {
          v79[1] = v45;
          operator delete(v45);
        }
        if ((char)buf[23] < 0)
          operator delete(*(void **)buf);
        return 100;
      }
      else
      {
        return 112;
      }
    }
    else
    {
      return 103;
    }
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v15 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
    {
      v16 = sub_10008950C(*(_QWORD *)(a1 + 184));
      *(_DWORD *)__p = 67109376;
      *(_DWORD *)&__p[4] = v16;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = sub_10008950C(a1 + 72);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", __p, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v50 = qword_10229FFA8;
      v51 = sub_10008950C(*(_QWORD *)(a1 + 184));
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v51;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = sub_10008950C(a1 + 72);
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v50, 0, "[DB] One of the DBs is not accessible. Hot: %d, Cold %d", buf, 14);
      v53 = (char *)v52;
      sub_100512490("Generic", 1, 0, 2, "CMError CMHealthColdStorageDb::syncFromHot(CFAbsoluteTime, const std::string &, std::shared_ptr<CLHealthColdStorageStats>)", "%s\n", v52);
      if (v53 != __p)
        free(v53);
    }
    return 109;
  }
}

void sub_1004AA47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (__p)
    operator delete(__p);
  if (a42 < 0)
    operator delete(a37);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004AA588(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  signed __int8 v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  uint64_t v23;
  _QWORD v24[10];
  char v25;
  uint64_t v26;

  v2 = result;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  if (*(_QWORD *)(result + 200) != *(_QWORD *)(result + 208))
  {
    sub_100263E50((uint64_t)v22);
    v3 = *(_QWORD *)(v2 + 200);
    v4 = *(_QWORD *)(v2 + 208) - v3;
    if (v4)
    {
      v5 = 0;
      v6 = 0xAAAAAAAAAAAAAAABLL * (v4 >> 3);
      do
      {
        v7 = (unsigned __int8 *)(v3 + 24 * v5);
        v8 = v7[23];
        if (v8 >= 0)
          v9 = v7[23];
        else
          v9 = *((_QWORD *)v7 + 1);
        v10 = *(unsigned __int8 *)(v2 + 295);
        v11 = (char)v10;
        if ((v10 & 0x80u) != 0)
          v10 = *(_QWORD *)(v2 + 280);
        if (v9 != v10)
          goto LABEL_23;
        if (v11 >= 0)
          v12 = (unsigned __int8 *)(v2 + 272);
        else
          v12 = *(unsigned __int8 **)(v2 + 272);
        if ((v7[23] & 0x80) != 0)
        {
          if (memcmp(*(const void **)v7, v12, *((_QWORD *)v7 + 1)))
            goto LABEL_23;
        }
        else if (v7[23])
        {
          v13 = v7;
          v14 = v7[23];
          while (*v13 == *v12)
          {
            ++v13;
            ++v12;
            if (!--v14)
              goto LABEL_34;
          }
LABEL_23:
          if (v6 - 1 == v5 || v6 - 2 == v5 && v6 - 1 == *(_DWORD *)(v2 + 308))
          {
            if (v8 >= 0)
              v15 = (uint64_t)v7;
            else
              v15 = *(_QWORD *)v7;
            sub_100263F7C(&v23, v15, v9);
          }
          else
          {
            if (v8 >= 0)
              v16 = (uint64_t)v7;
            else
              v16 = *(_QWORD *)v7;
            v17 = sub_100263F7C(&v23, v16, v9);
            sub_100263F7C(v17, (uint64_t)",", 1);
          }
        }
LABEL_34:
        ++v5;
        v3 = *(_QWORD *)(v2 + 200);
        v6 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(v2 + 208) - v3) >> 3);
      }
      while (v6 > v5);
    }
    std::stringbuf::str(&v20, v24);
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_OWORD *)a2 = v20;
    *(_QWORD *)(a2 + 16) = v21;
    *(_QWORD *)((char *)v22
    v23 = v18;
    if (v25 < 0)
      operator delete((void *)v24[8]);
    std::streambuf::~streambuf(v24);
    return std::ios::~ios(&v26);
  }
  return result;
}

void sub_1004AA7D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004AA7EC(uint64_t a1, _QWORD *a2, int a3, int a4)
{
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  _WORD v12[8];
  uint8_t buf[8];

  if (*a2)
  {
    v6 = (uint64_t **)(*a2 + 24);
    *(_QWORD *)buf = a1 + 224;
    v7 = sub_1004ADED8(v6, (const void **)(a1 + 224), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    v8 = *((_DWORD *)v7 + 15) - a4;
    *((_DWORD *)v7 + 14) += a3;
    *((_DWORD *)v7 + 15) = v8;
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v9 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "[Database] ColdStorageStats not initialized.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v12[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[Database] ColdStorageStats not initialized.", v12, 2);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "void CMHealthColdStorageDb::populateStats(std::shared_ptr<CLHealthColdStorageStats>, int, int)", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_1004AA9B8(uint64_t *a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  void *__p[2];
  unsigned __int8 v16;
  uint8_t buf[16];
  uint64_t v18;
  _QWORD v19[8];

  if (sub_10008950C(a1 + 9))
  {
    sub_10001E638(a1[10]);
    sub_100263E50((uint64_t)buf);
    v2 = sub_100263F7C(&v18, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
    if ((v16 & 0x80u) == 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    if ((v16 & 0x80u) == 0)
      v4 = v16;
    else
      v4 = (uint64_t)__p[1];
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    v6 = sub_100263F7C(v5, (uint64_t)" SET ", 5);
    if (byte_102301457 >= 0)
      v7 = &qword_102301440;
    else
      v7 = (uint64_t *)qword_102301440;
    if (byte_102301457 >= 0)
      v8 = byte_102301457;
    else
      v8 = unk_102301448;
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" = ? WHERE ROWID = ?", 20);
    if ((char)v16 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v19);
    if ((v16 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_10213DE40);
  v12 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "[DB] Unable to update UUID on records.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[DB] Unable to update UUID on records.", __p, 2);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageDb::updateRecordIDForRowIDs(const std::vector<int> &, const std::string &)", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
}

void sub_1004AAE00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  uint64_t v32;

  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  sub_1018B38B4((uint64_t)&a32);
  _Unwind_Resume(a1);
}

BOOL sub_1004AAEA4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 160) != 0;
}

uint64_t sub_1004AAEB4(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  void **v16;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  char *v21;
  int v22;
  uint8_t v23[8];
  __int16 v24;
  uint64_t v25;
  void *__p[2];
  unsigned __int8 v27;
  _BYTE buf[12];
  __int16 v29;
  uint64_t v30;
  char v31;
  _QWORD v32[8];

  if (a3)
    *a3 = 0;
  if (a1[20])
  {
    if (sub_10008950C(a1 + 9))
    {
      sub_100263E50((uint64_t)buf);
      v5 = sub_100263F7C((uint64_t *)((char *)&v30 + 2), (uint64_t)"SELECT * FROM ", 14);
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
      if ((v27 & 0x80u) == 0)
        v6 = __p;
      else
        v6 = (void **)__p[0];
      if ((v27 & 0x80u) == 0)
        v7 = v27;
      else
        v7 = (uint64_t)__p[1];
      v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
      v9 = sub_100263F7C(v8, (uint64_t)" WHERE ", 7);
      if (byte_102301457 >= 0)
        v10 = &qword_102301440;
      else
        v10 = (uint64_t *)qword_102301440;
      if (byte_102301457 >= 0)
        v11 = byte_102301457;
      else
        v11 = unk_102301448;
      v12 = sub_100263F7C(v9, (uint64_t)v10, v11);
      sub_100263F7C(v12, (uint64_t)" = ?", 4);
      if ((char)v27 < 0)
        operator delete(__p[0]);
      v13 = a1[10];
      std::stringbuf::str(__p, v32);
      if ((v27 & 0x80u) == 0)
        v14 = (char *)__p;
      else
        v14 = (char *)__p[0];
      sub_1000CDA68(v13, v14);
    }
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v15 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
      v16 = (v27 & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v16;
      v29 = 2080;
      v30 = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "[DB] getRecordDataForID since db is not accessible for %s, recordID=%s", buf, 0x16u);
      if ((char)v27 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v18 = qword_10229FFA8;
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*a1 + 32))(buf, a1);
      if (v31 >= 0)
        v19 = buf;
      else
        v19 = *(_BYTE **)buf;
      v22 = 136315394;
      *(_QWORD *)v23 = v19;
      v24 = 2080;
      v25 = a2;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v18, 16, "[DB] getRecordDataForID since db is not accessible for %s, recordID=%s", (const char *)&v22, 22);
      v21 = v20;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageDb::getRecordDataForID(const char *, NSData **, NSData **)", "%s\n", v21);
      if (v21 != (char *)__p)
        free(v21);
    }
  }
  return 0;
}

void sub_1004AB904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a14)
    (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  sub_1018B38B4((uint64_t)&STACK[0x6E0]);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABA08(_QWORD *a1, void *a2, _QWORD *a3)
{
  return sub_1004AAEB4(a1, (uint64_t)objc_msgSend(objc_msgSend(a2, "recordName"), "UTF8String"), a3);
}

uint64_t sub_1004ABA50(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  _QWORD v21[2];
  uint64_t v22;
  _QWORD v23[10];
  char v24;
  uint64_t v25;

  sub_100263E50((uint64_t)v21);
  v2 = sub_100263F7C(&v22, (uint64_t)"UPDATE ", 7);
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
  if ((v20 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v4 = v20;
  else
    v4 = (uint64_t)__p[1];
  v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
  v6 = sub_100263F7C(v5, (uint64_t)" SET ", 5);
  if (byte_10230143F >= 0)
    v7 = &qword_102301428;
  else
    v7 = (uint64_t *)qword_102301428;
  if (byte_10230143F >= 0)
    v8 = byte_10230143F;
  else
    v8 = unk_102301430;
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)" = ? WHERE ", 11);
  if (byte_102301457 >= 0)
    v11 = &qword_102301440;
  else
    v11 = (uint64_t *)qword_102301440;
  if (byte_102301457 >= 0)
    v12 = byte_102301457;
  else
    v12 = unk_102301448;
  v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
  sub_100263F7C(v13, (uint64_t)" = ?", 4);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  v14 = a1[10];
  std::stringbuf::str(__p, v23);
  if ((v20 & 0x80u) == 0)
    v15 = (char *)__p;
  else
    v15 = (char *)__p[0];
  a1[43] = sub_10063D314(v14, v15);
  a1[44] = v16;
  if ((char)v20 < 0)
    operator delete(__p[0]);
  *(_QWORD *)((char *)v21
  v22 = v17;
  if (v24 < 0)
    operator delete((void *)v23[8]);
  std::streambuf::~streambuf(v23);
  return std::ios::~ios(&v25);
}

void sub_1004ABC0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABC44(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  char v9;
  NSObject *v10;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  id v16[2];
  uint8_t buf[8];

  v5 = a1;
  if (!sub_10008950C(a1 + 72))
    goto LABEL_15;
  sub_100131938(v16, (uint64_t)"CMHealthColdStorageDb.updateLocalSystemFieldsForRecord", 0);
  if (!sub_100E815A0((_QWORD *)(v5 + 344)))
    sub_1004ABA50((_QWORD *)v5);
  if (!sub_100E815A0((_QWORD *)(v5 + 344)))
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v10 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[DB] SQL update statement is invalid.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[DB] SQL update statement is invalid.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "BOOL CMHealthColdStorageDb::updateLocalSystemFieldsForRecord(CKRecordID *, NSData *)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    goto LABEL_14;
  }
  sub_100087AF4((_QWORD *)(v5 + 344), buf);
  if (!*(_QWORD *)buf)
  {
LABEL_14:
    sub_100131740(v16);
LABEL_15:
    LOBYTE(v5) = 0;
    return v5 & 1;
  }
  v6 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
  if (sub_10063FC3C(v6, 1, a3)
    && (v7 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf),
        sub_1000C9E20(v7, 2, (char *)objc_msgSend(objc_msgSend(a2, "recordName"), "UTF8String"))))
  {
    v5 = *(_QWORD *)(v5 + 80);
    v8 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
    LOBYTE(v5) = sub_10023C9B0(v5, v8);
    v9 = 0;
  }
  else
  {
    v9 = 1;
  }
  v12 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  sub_100131740(v16);
  if ((v9 & 1) != 0)
    goto LABEL_15;
  return v5 & 1;
}

void sub_1004ABED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004ABF18(uint64_t result)
{
  *(_BYTE *)(result + 336) = 1;
  return result;
}

void sub_1004ABF24(uint64_t *a1, void *a2)
{
  void **v4;
  int i;
  _QWORD *v6;
  _OWORD *v7;
  __int128 v8;
  void *v9;
  _QWORD *v10;
  _BYTE *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  void *j;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  const char *v33;
  size_t v34;
  _QWORD *v35;
  NSObject *v36;
  void **v37;
  void **v38;
  void **v39;
  void **v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  const char *v44;
  char *v45;
  _QWORD *v46;
  _BYTE *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  std::string *v51;
  std::string::size_type size;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  _QWORD *v62;
  void **v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD v72[2];
  uint64_t v73;
  _QWORD v74[10];
  char v75;
  uint64_t v76;
  void *v77[2];
  unsigned __int8 v78;
  void *v79[2];
  uint64_t v80;
  void (__cdecl **v81[2])(std::istringstream *__hidden);
  _QWORD v82[10];
  char v83;
  uint64_t v84;
  uint64_t v85;
  void *__dst;
  unint64_t v87;
  _QWORD v88[2];
  uint64_t v89;
  _QWORD v90[10];
  char v91;
  uint64_t v92;
  std::string v93;
  void *v94[2];
  char v95;
  id v96[2];
  void *v97[2];
  char v98;
  _DWORD v99[3];
  __int16 v100;
  void **v101;
  _BYTE __p[22];
  unsigned __int8 v103;

  if (a2)
  {
    sub_1015A2E04(v97, (char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordID"), "recordName"), "UTF8String"));
    if (a1[20])
    {
      sub_100131938(v96, (uint64_t)"CMHealthColdStorageDb.handleFetchedRecord", 0);
      (*(void (**)(void **__return_ptr, uint64_t *))(*a1 + 32))(v94, a1);
      if (v95 >= 0)
        v4 = v94;
      else
        v4 = (void **)v94[0];
      if (sub_100635B3C(a1[10], (const char *)v4) || (sub_1004A8278(a1) & 1) != 0)
      {
        sub_1015A2E04(&v93, (char *)objc_msgSend(objc_msgSend((id)a1[20], "columns"), "UTF8String"));
        sub_100263E50((uint64_t)v88);
        __dst = 0;
        v85 = 0;
        v87 = 0;
        sub_1004ACB00(v81, &v93, 8);
        v79[0] = 0;
        v79[1] = 0;
        v80 = 0;
        for (i = 1; ; ++i)
        {
          v6 = sub_1004ACBE4(v81, (uint64_t)v79, 0x2Cu);
          if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
            break;
          sub_100263F7C(&v89, (uint64_t)"?,", 2);
          v7 = __dst;
          if ((unint64_t)__dst >= v87)
          {
            v9 = (void *)sub_1015E796C(&v85, (__int128 *)v79);
          }
          else
          {
            if (SHIBYTE(v80) < 0)
            {
              sub_100115CE4(__dst, v79[0], (unint64_t)v79[1]);
            }
            else
            {
              v8 = *(_OWORD *)v79;
              *((_QWORD *)__dst + 2) = v80;
              *v7 = v8;
            }
            v9 = (char *)v7 + 24;
          }
          __dst = v9;
        }
        sub_100263F7C(&v89, (uint64_t)"?,?", 3);
        std::stringbuf::str(v77, v90);
        sub_100263E50((uint64_t)v72);
        v71 = 0;
        if ((sub_1004AAEB4(a1, (uint64_t)objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordID"), "recordName"), "UTF8String"), &v71) & 1) != 0)
        {
          if (v71)
          {
            v10 = sub_100263F7C(&v73, (uint64_t)"UPDATE ", 7);
            (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
            if ((v103 & 0x80u) == 0)
              v11 = __p;
            else
              v11 = *(_BYTE **)__p;
            if ((v103 & 0x80u) == 0)
              v12 = v103;
            else
              v12 = *(_QWORD *)&__p[8];
            v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
            sub_100263F7C(v13, (uint64_t)" SET ", 5);
            if ((char)v103 < 0)
              operator delete(*(void **)__p);
            v14 = v85;
            for (j = __dst; (void *)v14 != j; v14 += 24)
            {
              v16 = *(char *)(v14 + 23);
              if (v16 >= 0)
                v17 = v14;
              else
                v17 = *(_QWORD *)v14;
              if (v16 >= 0)
                v18 = *(unsigned __int8 *)(v14 + 23);
              else
                v18 = *(_QWORD *)(v14 + 8);
              v19 = sub_100263F7C(&v73, v17, v18);
              sub_100263F7C(v19, (uint64_t)"=?, ", 4);
            }
            if (byte_102301457 >= 0)
              v20 = &qword_102301440;
            else
              v20 = (uint64_t *)qword_102301440;
            if (byte_102301457 >= 0)
              v21 = byte_102301457;
            else
              v21 = unk_102301448;
            v22 = sub_100263F7C(&v73, (uint64_t)v20, v21);
            v23 = sub_100263F7C(v22, (uint64_t)"=?, ", 4);
            if (byte_10230143F >= 0)
              v24 = &qword_102301428;
            else
              v24 = (uint64_t *)qword_102301428;
            if (byte_10230143F >= 0)
              v25 = byte_10230143F;
            else
              v25 = unk_102301430;
            v26 = sub_100263F7C(v23, (uint64_t)v24, v25);
            sub_100263F7C(v26, (uint64_t)"=?", 2);
            v27 = sub_100263F7C(&v73, (uint64_t)" WHERE ", 7);
            if (byte_102301457 >= 0)
              v28 = &qword_102301440;
            else
              v28 = (uint64_t *)qword_102301440;
            if (byte_102301457 >= 0)
              v29 = byte_102301457;
            else
              v29 = unk_102301448;
            v30 = sub_100263F7C(v27, (uint64_t)v28, v29);
            v31 = sub_100263F7C(v30, (uint64_t)" = ", 3);
            v32 = sub_100263F7C(v31, (uint64_t)"\"", 1);
            v33 = (const char *)objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordID"), "recordName"), "UTF8String");
            v34 = strlen(v33);
            v35 = sub_100263F7C(v32, (uint64_t)v33, v34);
            sub_100263F7C(v35, (uint64_t)"\"", 1);
          }
          else
          {
            v46 = sub_100263F7C(&v73, (uint64_t)"INSERT INTO ", 12);
            (*(void (**)(_BYTE *__return_ptr, uint64_t *))(*a1 + 32))(__p, a1);
            if ((v103 & 0x80u) == 0)
              v47 = __p;
            else
              v47 = *(_BYTE **)__p;
            if ((v103 & 0x80u) == 0)
              v48 = v103;
            else
              v48 = *(_QWORD *)&__p[8];
            v49 = sub_100263F7C(v46, (uint64_t)v47, v48);
            v50 = sub_100263F7C(v49, (uint64_t)"( ", 2);
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v51 = &v93;
            else
              v51 = (std::string *)v93.__r_.__value_.__r.__words[0];
            if ((v93.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v93.__r_.__value_.__r.__words[2]);
            else
              size = v93.__r_.__value_.__l.__size_;
            v53 = sub_100263F7C(v50, (uint64_t)v51, size);
            v54 = sub_100263F7C(v53, (uint64_t)",", 1);
            if (byte_102301457 >= 0)
              v55 = &qword_102301440;
            else
              v55 = (uint64_t *)qword_102301440;
            if (byte_102301457 >= 0)
              v56 = byte_102301457;
            else
              v56 = unk_102301448;
            v57 = sub_100263F7C(v54, (uint64_t)v55, v56);
            v58 = sub_100263F7C(v57, (uint64_t)",", 1);
            if (byte_10230143F >= 0)
              v59 = &qword_102301428;
            else
              v59 = (uint64_t *)qword_102301428;
            if (byte_10230143F >= 0)
              v60 = byte_10230143F;
            else
              v60 = unk_102301430;
            v61 = sub_100263F7C(v58, (uint64_t)v59, v60);
            v62 = sub_100263F7C(v61, (uint64_t)") VALUES(", 12);
            if ((v78 & 0x80u) == 0)
              v63 = v77;
            else
              v63 = (void **)v77[0];
            if ((v78 & 0x80u) == 0)
              v64 = v78;
            else
              v64 = (uint64_t)v77[1];
            v65 = sub_100263F7C(v62, (uint64_t)v63, v64);
            sub_100263F7C(v65, (uint64_t)")", 1);
            if ((char)v103 < 0)
              operator delete(*(void **)__p);
          }
          v66 = a1[10];
          std::stringbuf::str(__p, v74);
          if ((v103 & 0x80u) == 0)
            v67 = __p;
          else
            v67 = *(char **)__p;
          sub_1000CDA68(v66, v67);
        }
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_10213DE40);
        v36 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
        {
          v37 = v97;
          if (v98 < 0)
            v37 = (void **)v97[0];
          v38 = v94;
          if (v95 < 0)
            v38 = (void **)v94[0];
          *(_DWORD *)__p = 136315394;
          *(_QWORD *)&__p[4] = v37;
          *(_WORD *)&__p[12] = 2080;
          *(_QWORD *)&__p[14] = v38;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "[DB] Unable to verify if fetched record exists, ignore record=%s, for table %s", __p, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_10213DE40);
          v39 = v97;
          if (v98 < 0)
            v39 = (void **)v97[0];
          v40 = v94;
          if (v95 < 0)
            v40 = (void **)v94[0];
          v99[0] = 136315394;
          *(_QWORD *)&v99[1] = v39;
          v100 = 2080;
          v101 = v40;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[DB] Unable to verify if fetched record exists, ignore record=%s, for table %s", (const char *)v99, 22);
          v42 = (char *)v41;
          sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageDb::handleFetchedRecord(CKRecord *)", "%s\n", v41);
          if (v42 != __p)
            free(v42);
        }
        *(_QWORD *)((char *)v72
                              - 24)) = v69;
        v73 = v70;
        if (v75 < 0)
          operator delete((void *)v74[8]);
        std::streambuf::~streambuf(v74);
        std::ios::~ios(&v76);
        if ((char)v78 < 0)
          operator delete(v77[0]);
        if (SHIBYTE(v80) < 0)
          operator delete(v79[0]);
        *(void (__cdecl ***)(std::istringstream *__hidden))((char *)v81
        if (v83 < 0)
          operator delete((void *)v82[8]);
        std::streambuf::~streambuf(v82);
        std::ios::~ios(&v84);
        *(_QWORD *)__p = &v85;
        sub_100259608((void ***)__p);
        v88[0] = v68;
        *(_QWORD *)((char *)v88 + *(_QWORD *)(v68 - 24)) = v69;
        v89 = v70;
        if (v91 < 0)
          operator delete((void *)v90[8]);
        std::streambuf::~streambuf(v90);
        std::ios::~ios(&v92);
        if (SHIBYTE(v93.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v93.__r_.__value_.__l.__data_);
      }
      else
      {
        if (qword_10229FFA0 != -1)
          dispatch_once(&qword_10229FFA0, &stru_10213DE40);
        v43 = qword_10229FFA8;
        if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)__p = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "[DB] unable to create table when handling fetched records", __p, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(__p, 0x65CuLL);
          if (qword_10229FFA0 != -1)
            dispatch_once(&qword_10229FFA0, &stru_10213DE40);
          LOWORD(v88[0]) = 0;
          _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[DB] unable to create table when handling fetched records", v88, 2);
          v45 = (char *)v44;
          sub_100512490("Generic", 1, 0, 0, "void CMHealthColdStorageDb::handleFetchedRecord(CKRecord *)", "%s\n", v44);
          if (v45 != __p)
            free(v45);
        }
      }
      if (v95 < 0)
        operator delete(v94[0]);
      sub_100131740(v96);
    }
    if (v98 < 0)
      operator delete(v97[0]);
  }
}

void sub_1004AC9C0(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x3D7]) < 0)
    operator delete((void *)STACK[0x3C0]);
  sub_100131740((id *)&STACK[0x3D8]);
  if (SLOBYTE(STACK[0x3FF]) < 0)
    operator delete((void *)STACK[0x3E8]);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_1004ACB00(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6;
  void (__cdecl **v7)(std::istringstream *__hidden);
  void (__cdecl **v8)(std::istringstream *__hidden);
  std::ios_base *v9;

  v6 = (uint64_t)(a1 + 2);
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_1004ADD38(v6, a2, a3 | 8);
  return a1;
}

void sub_1004ACBBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::istream::~istream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004ACBE4(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  std::istream::sentry::sentry(&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1004ACD10(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1004ACCDCLL);
  }
  __cxa_rethrow();
}

void sub_1004ACD54(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1004ACD68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 120);
  return a1;
}

BOOL sub_1004ACDEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double Current;
  int v5;
  int v6;
  _BOOL8 v7;
  double v8;
  NSObject *v9;
  const char *v10;
  uint8_t *v11;
  int v13;
  double v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;

  v2 = a1 + 112;
  v3 = a1 + 72;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  if (sub_10008950C(v3))
  {
    Current = CFAbsoluteTimeGetCurrent();
    if (qword_102301460 != -1)
      dispatch_once(&qword_102301460, &stru_10213DE60);
    v5 = dword_102301458;
    v6 = sub_100053048(*(_QWORD *)(a1 + 80), dword_102301458);
    v7 = v6 == 0;
    v8 = CFAbsoluteTimeGetCurrent();
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_10213DE40);
    v9 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v20 = v8 - Current;
      v21 = 2050;
      v22 = v6;
      v23 = 1026;
      v24 = v5;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[DB] Time taken for incrementalVacuum, %{public}.2f ReduceFreePagesStatus, %{public}lu, incrementalVacuumPageLimit : %{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_10213DE40);
      v13 = 134349568;
      v14 = v8 - Current;
      v15 = 2050;
      v16 = v6;
      v17 = 1026;
      v18 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 0, "[DB] Time taken for incrementalVacuum, %{public}.2f ReduceFreePagesStatus, %{public}lu, incrementalVacuumPageLimit : %{public}d", &v13, 28);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 2, "BOOL CMHealthColdStorageDb::performIncrementalDbVacuum()", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v7;
}

void sub_1004AD088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004AD0C0(uint64_t a1)
{
  sub_1004AE010(a1);
  operator delete();
}

char *sub_1004AD0E4@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[247] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 28), *((_QWORD *)result + 29));
  *(_OWORD *)a2 = *((_OWORD *)result + 14);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 30);
  return result;
}

uint64_t sub_1004AD110(uint64_t a1)
{
  return sub_1004AE010(a1 - 72);
}

void sub_1004AD118(uint64_t a1)
{
  sub_1004AE010(a1 - 72);
  operator delete();
}

char *sub_1004AD140@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[175] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 19), *((_QWORD *)result + 20));
  *(_OWORD *)a2 = *(_OWORD *)(result + 152);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 21);
  return result;
}

void sub_1004AD16C(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

void sub_1004AD198(id a1)
{
  unsigned __int8 v1[4];
  int v2;

  sub_1004AD1D8(v1, "HealthColdStorageVacuumPageLimitKey", &dword_101BB2B68, 0);
  dword_102301458 = v2;
}

unsigned __int8 *sub_1004AD1D8(unsigned __int8 *a1, const char *a2, _DWORD *a3, unsigned __int8 a4)
{
  _DWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v12;
  int v13;
  char *v14;
  NSObject *v15;
  int v16;
  _BYTE *v17;
  uint64_t v18;
  int v19;
  void **v20;
  NSObject *v21;
  int v22;
  int v23;
  NSObject *v24;
  int v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v29;
  int v30;
  void **v31;
  void *v32[2];
  char v33;
  _QWORD v34[2];
  uint64_t v35;
  _QWORD v36[10];
  char v37;
  uint64_t v38;
  _BYTE __p[12];
  __int16 v40;
  int v41;
  __int16 v42;
  void **v43;
  _BYTE buf[18];
  __int16 v45;
  _BYTE *v46;

  *a1 = 0;
  *((_DWORD *)a1 + 1) = *a3;
  v6 = a1 + 4;
  a1[8] = a4;
  v7 = sub_100127B9C();
  sub_100081C10(v7, buf);
  *a1 = sub_1001E4B84(*(uint64_t *)buf, a2, v6);
  v8 = *(std::__shared_weak_count **)&buf[8];
  if (*(_QWORD *)&buf[8])
  {
    v9 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  sub_100263E50((uint64_t)v34);
  std::ostream::operator<<(&v35, *v6);
  if (!a1[8])
  {
    if (*a1)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v15 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *a1;
        std::stringbuf::str(__p, v36);
        v17 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        v45 = 2080;
        v46 = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v18 = qword_10229FC78;
      v19 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v20 = v32;
      else
        v20 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v19;
      v42 = 2080;
      v43 = v20;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v18, 0, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v24 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        v25 = *a1;
        std::stringbuf::str(__p, v36);
        v26 = SBYTE3(v43) >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = a2;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v25;
        v45 = 2080;
        v46 = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "motion default,%s,set,%d,value,%s", buf, 0x1Cu);
        if (SBYTE3(v43) < 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_53;
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v29 = qword_10229FC78;
      v30 = *a1;
      std::stringbuf::str(v32, v36);
      if (v33 >= 0)
        v31 = v32;
      else
        v31 = (void **)v32[0];
      *(_DWORD *)__p = 136315650;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v30;
      v42 = 2080;
      v43 = v31;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 1, "motion default,%s,set,%d,value,%s", __p, 28, (const char *)v32[0]);
      if (v33 < 0)
        operator delete(v32[0]);
    }
    sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = int]", "%s\n", v14);
    if (v14 == buf)
      goto LABEL_53;
    goto LABEL_64;
  }
  if (*a1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213DE80);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v13 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v13;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = int]", "%s\n", v14);
      goto LABEL_42;
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213DE80);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
    {
      v22 = *a1;
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = a2;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "motion default,%s,set,%d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213DE80);
      v23 = *a1;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = a2;
      v40 = 1024;
      v41 = v23;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "motion default,%s,set,%d", __p, 18);
      sub_100512490("Generic", 1, 0, 2, "CLMotionDefaultsWrite<int>::CLMotionDefaultsWrite(const char *, const T &, const BOOL) [T = int]", "%s\n", v14);
LABEL_42:
      if (v14 == buf)
        goto LABEL_53;
LABEL_64:
      free(v14);
    }
  }
LABEL_53:
  *(_QWORD *)((char *)v34
  v35 = v27;
  if (v37 < 0)
    operator delete((void *)v36[8]);
  std::streambuf::~streambuf(v36);
  std::ios::~ios(&v38);
  return a1;
}

void sub_1004AD9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004AD9F4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004ADA20()
{
  return 3;
}

_QWORD *sub_1004ADA28(_QWORD *a1)
{
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

void sub_1004ADA5C(_QWORD *a1)
{
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  operator delete();
}

_QWORD *sub_1004ADAA0(_QWORD *a1, char *a2, uint64_t a3, int a4, float a5)
{
  void *__p[2];
  char v12;

  sub_1015A2E04(__p, "");
  sub_101137D40((uint64_t)a1, a2, a4, a3, a5, (uint64_t)__p, 1, 0);
  if (v12 < 0)
    operator delete(__p[0]);
  *a1 = off_10213DF30;
  sub_1015A2E04(a1 + 13, a2);
  return a1;
}

void sub_1004ADB48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  sub_101138068(v15);
  _Unwind_Resume(a1);
}

void sub_1004ADB78(uint64_t a1)
{
  sub_1004ADBC8(a1);
  operator delete();
}

char *sub_1004ADB9C@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[127] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 13), *((_QWORD *)result + 14));
  *(_OWORD *)a2 = *(_OWORD *)(result + 104);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 15);
  return result;
}

uint64_t sub_1004ADBC8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213DF30;
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  return sub_101138068(a1);
}

_QWORD *sub_1004ADC08(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = off_10213DF98;
  result[1] = v3;
  return result;
}

uint64_t sub_1004ADC40(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = off_10213DF98;
  a2[1] = v2;
  return result;
}

uint64_t sub_1004ADC60(uint64_t a1, _QWORD *a2, unsigned __int8 *a3)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(a1 + 8))(*a2, *a3);
}

uint64_t sub_1004ADC70(uint64_t a1, uint64_t a2)
{
  if (sub_100270DE8(a2, (uint64_t)&off_10213E018))
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1004ADCAC()
{
  return &off_10213E018;
}

_QWORD *sub_1004ADCB8(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_10025E660(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1004ADD1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004ADD38(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6;

  v6 = std::streambuf::basic_streambuf(a1);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_1004ADDC8(a1);
  return a1;
}

void sub_1004ADDA4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  std::streambuf::~streambuf(v1);
  _Unwind_Resume(a1);
}

void sub_1004ADDC8(uint64_t a1)
{
  std::string *v2;
  char v3;
  std::string *v4;
  unint64_t v5;
  int v6;
  std::string::size_type v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  *(_QWORD *)(a1 + 88) = 0;
  v2 = (std::string *)(a1 + 64);
  v3 = *(_BYTE *)(a1 + 87);
  if (v3 < 0)
  {
    v4 = *(std::string **)(a1 + 64);
    v5 = *(_QWORD *)(a1 + 72);
  }
  else
  {
    v4 = v2;
    v5 = *(unsigned __int8 *)(a1 + 87);
  }
  v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    *(_QWORD *)(a1 + 16) = v4;
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(_QWORD *)(a1 + 88) = (char *)v4 + v5;
    v7 = v3 < 0 ? (*(_QWORD *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    v8 = *(char *)(a1 + 87) < 0 ? *(_QWORD *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(_QWORD *)(a1 + 40) = v4;
    *(_QWORD *)(a1 + 48) = v4;
    *(_QWORD *)(a1 + 56) = (char *)v4 + v8;
    if ((*(_BYTE *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        v5 = v5 - v10 - 0x7FFFFFFF;
        *(_QWORD *)(a1 + 48) = v4;
      }
      if (v5)
        *(_QWORD *)(a1 + 48) = (char *)v4 + v5;
    }
  }
}

uint64_t *sub_1004ADED8(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8;
  uint64_t v9;

  v6 = (uint64_t **)sub_10019C424((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    sub_1004ADF6C((uint64_t)a1, a4, (uint64_t)&v8);
    sub_1000145B0(a1, v9, v6, v8);
    return v8;
  }
  return result;
}

_BYTE *sub_1004ADF6C@<X0>(uint64_t a1@<X0>, __int128 **a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char *v6;
  _BYTE *result;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  v6 = (char *)operator new(0x40uLL);
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v5;
  *(_BYTE *)(a3 + 16) = 0;
  result = v6 + 32;
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_100115CE4(result, *(void **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
    *(_OWORD *)result = v9;
  }
  *((_QWORD *)v6 + 7) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_1004ADFF4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  sub_100279070(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1004AE010(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void **v7;

  *(_QWORD *)a1 = off_10213DD90;
  *(_QWORD *)(a1 + 72) = off_10213DDC8;
  v2 = a1 + 72;
  v3 = *(void **)(a1 + 312);
  if (v3)
  {
    *(_QWORD *)(a1 + 320) = v3;
    operator delete(v3);
  }
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v7 = (void **)(a1 + 200);
  sub_100259608(&v7);
  v4 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_101138068(v2);
  *(_QWORD *)a1 = off_102138DA8;
  sub_100427950((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1004AE0F4()
{
  _BYTE *v0;

  qword_102301410 = 0;
  qword_102301418 = 0;
  qword_102301420 = 0;
  v0 = operator new(0x18uLL);
  qword_102301418 = (uint64_t)(v0 + 24);
  qword_102301420 = (uint64_t)(v0 + 24);
  v0[16] = 1;
  *(_OWORD *)v0 = xmmword_101BB2AE8;
  qword_102301410 = (uint64_t)v0;
  __cxa_atexit((void (*)(void *))sub_1004A6E3C, &qword_102301410, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102301428, "systemFields");
  __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102301428, (void *)&_mh_execute_header);
  sub_1015A2E04(&qword_102301440, "recordID");
  return __cxa_atexit((void (*)(void *))&std::string::~string, &qword_102301440, (void *)&_mh_execute_header);
}

void sub_1004AE1C0(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  double v9;
  float v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  float v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;

  sub_1004AE338(a1);
  v4 = 0;
  v5 = (char *)*a2;
  a2[1] = *a2;
  v6 = a2 + 2;
  do
  {
    v7 = *(_QWORD *)(a1 + 8);
    if (v7 == *(_QWORD *)(a1 + 16))
      v8 = 0;
    else
      v8 = *(_DWORD *)(v7 + 4 * v4);
    v9 = 1.60000002;
    if (v4)
    {
      if (v4 == 10)
        v9 = 10.7;
      else
        v9 = (double)(unint64_t)(v4 - 1) + 1.60000002 + 0.5;
    }
    if ((unint64_t)v5 >= *v6)
    {
      v11 = (uint64_t)&v5[-*a2] >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_100259694();
      v12 = *v6 - *a2;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      v16 = (char *)sub_10025E6A0((uint64_t)(a2 + 2), v14);
      v17 = &v16[8 * v11];
      v18 = v9;
      *(float *)v17 = v18;
      *((_DWORD *)v17 + 1) = v8;
      v20 = (char *)*a2;
      v19 = (char *)a2[1];
      v21 = v17;
      if (v19 != (char *)*a2)
      {
        do
        {
          v22 = *((_QWORD *)v19 - 1);
          v19 -= 8;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        while (v19 != v20);
        v19 = (char *)*a2;
      }
      v5 = v17 + 8;
      *a2 = v21;
      a2[1] = v17 + 8;
      a2[2] = &v16[8 * v15];
      if (v19)
        operator delete(v19);
    }
    else
    {
      v10 = v9;
      *(float *)v5 = v10;
      *((_DWORD *)v5 + 1) = v8;
      v5 += 8;
    }
    a2[1] = v5;
    ++v4;
  }
  while (v4 != 11);
}

uint64_t sub_1004AE338(uint64_t result)
{
  _QWORD *v1;
  void **v2;
  int v3;
  uint64_t v4;
  CFTypeRef v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  void *i;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  unsigned int *v16;
  _DWORD *v17;
  unsigned int *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  unsigned int *v24;
  unsigned int v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  CFTypeRef v35;
  CFTypeRef v36;
  _BYTE v37[128];

  if (*(double *)result == 1.79769313e308)
  {
    v1 = (_QWORD *)result;
    v2 = (void **)(result + 8);
    *(_QWORD *)(result + 16) = *(_QWORD *)(result + 8);
    v35 = 0;
    v30 = sub_1001FD94C();
    v3 = sub_100219F40(v30, (uint64_t)CFSTR("FallMetMinuteTable"), &v35);
    v5 = v35;
    if (v35)
      v6 = v3;
    else
      v6 = 0;
    if (v6 == 1)
    {
      v7 = objc_opt_class(NSNumber, v4);
      v9 = +[NSKeyedUnarchiver unarchivedObjectOfClasses:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClasses:fromData:error:", +[NSSet setWithObjects:](NSSet, "setWithObjects:", v7, objc_opt_class(NSArray, v8), 0), v5, 0);
      v33 = 0u;
      v34 = 0u;
      v31 = 0u;
      v32 = 0u;
      v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
      if (v10)
      {
        v11 = *(_QWORD *)v32;
        do
        {
          for (i = 0; i != v10; i = (char *)i + 1)
          {
            if (*(_QWORD *)v32 != v11)
              objc_enumerationMutation(v9);
            v13 = objc_msgSend(*(id *)(*((_QWORD *)&v31 + 1) + 8 * (_QWORD)i), "longValue");
            v14 = v13;
            v16 = (unsigned int *)v1[2];
            v15 = v1[3];
            if ((unint64_t)v16 >= v15)
            {
              v18 = (unsigned int *)*v2;
              v19 = ((char *)v16 - (_BYTE *)*v2) >> 2;
              v20 = v19 + 1;
              if ((unint64_t)(v19 + 1) >> 62)
                sub_100259694();
              v21 = v15 - (_QWORD)v18;
              if (v21 >> 1 > v20)
                v20 = v21 >> 1;
              if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
                v22 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v22 = v20;
              if (v22)
              {
                v23 = (char *)sub_100260634((uint64_t)(v1 + 3), v22);
                v18 = (unsigned int *)v1[1];
                v16 = (unsigned int *)v1[2];
              }
              else
              {
                v23 = 0;
              }
              v24 = (unsigned int *)&v23[4 * v19];
              *v24 = v14;
              v17 = v24 + 1;
              while (v16 != v18)
              {
                v25 = *--v16;
                *--v24 = v25;
              }
              v1[1] = v24;
              v1[2] = v17;
              v1[3] = &v23[4 * v22];
              if (v18)
                operator delete(v18);
            }
            else
            {
              *v16 = v13;
              v17 = v16 + 1;
            }
            v1[2] = v17;
          }
          v10 = objc_msgSend(v9, "countByEnumeratingWithState:objects:count:", &v31, v37, 16);
        }
        while (v10);
      }
    }
    v36 = 0;
    v26 = sub_100219F40(v30, (uint64_t)CFSTR("FallMetMinuteComputeTime"), &v36);
    if (v36)
      v28 = v26;
    else
      v28 = 0;
    if (v28 == 1)
    {
      objc_msgSend(+[NSKeyedUnarchiver unarchivedObjectOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedObjectOfClass:fromData:error:", objc_opt_class(NSDate, v27), v36, 0), "timeIntervalSinceReferenceDate");
      *v1 = v29;
    }
    return sub_1004AF060((uint64_t)v1);
  }
  return result;
}

void sub_1004AE5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int buf,int a24,__int128 a25)
{
  NSObject *v25;
  NSObject *v26;

  if (a2 == 1)
  {
    objc_begin_catch(a1);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
    v25 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      buf = 68289026;
      a24 = 0;
      LOWORD(a25) = 2082;
      *(_QWORD *)((char *)&a25 + 2) = "";
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes from plist.\"}", (uint8_t *)&buf, 0x12u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10213E038);
    }
    v26 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      buf = 68289026;
      a24 = 0;
      LOWORD(a25) = 2082;
      *(_QWORD *)((char *)&a25 + 2) = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v26, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to receive correct MET minutes from plist.", "{\"msg%{public}.0s\":\"MaxMETs,Failed to receive correct MET minutes from plist.\"}", (uint8_t *)&buf, 0x12u);
    }
    objc_end_catch();
    JUMPOUT(0x1004AE538);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1004AE740(uint64_t a1, void *a2, double a3, double a4, double a5, double a6)
{
  double v11;
  id v12;
  __int128 v13;
  uint64_t v14;
  void *v15;
  void *v16;
  double v17;
  NSObject *v18;
  double v19;
  uint64_t v20;
  NSObject *v21;
  double v22;
  uint64_t v23;
  double v24;
  double v25;
  id v26;
  double v27;
  double v28;
  uint64_t v29;
  void *i;
  void *v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  double *v38;
  double *v39;
  int64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  double *v45;
  uint64_t v46;
  double *v47;
  double *v48;
  int64_t v49;
  unint64_t v50;
  uint64_t v51;
  double *v52;
  double v53;
  NSObject *v54;
  unint64_t v55;
  NSObject *v56;
  NSObject *v57;
  _BOOL8 v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  __int128 v68;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  void *__p;
  double *v75;
  unint64_t v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint8_t buf[4];
  int v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  _BYTE v86[10];
  _BYTE v87[10];
  __int16 v88;
  double v89;
  __int16 v90;
  double v91;
  _BYTE v92[128];
  _BYTE v93[128];

  if (a2 && objc_msgSend(a2, "count"))
  {
    sub_1004AE338(a1);
    v11 = *(double *)a1;
    v77 = 0u;
    v78 = 0u;
    v79 = 0u;
    v80 = 0u;
    v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
    if (v12)
    {
      v14 = *(_QWORD *)v78;
      while (2)
      {
        v15 = 0;
        do
        {
          if (*(_QWORD *)v78 != v14)
            objc_enumerationMutation(a2);
          v16 = *(void **)(*((_QWORD *)&v77 + 1) + 8 * (_QWORD)v15);
          objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
          if (v11 <= v17)
          {
            objc_msgSend(objc_msgSend(v16, "averageIntensity"), "doubleValue");
            if (v24 < 0.0)
            {
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_10213E038);
              v59 = qword_10229FD98;
              if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_FAULT))
              {
                objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
                v61 = v60;
                objc_msgSend(objc_msgSend(v16, "averageIntensity"), "doubleValue");
                *(_DWORD *)buf = 68289539;
                v82 = 0;
                v83 = 2082;
                v84 = "";
                v85 = 2049;
                *(_QWORD *)v86 = v61;
                *(_WORD *)&v86[8] = 1025;
                *(_DWORD *)v87 = (int)v62;
                _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MET Minute time_s\":\"%{private}.09f\", \"MET value\":%{private}d}", buf, 0x22u);
                if (qword_10229FD90 != -1)
                  dispatch_once(&qword_10229FD90, &stru_10213E038);
              }
              v63 = qword_10229FD98;
              if (os_signpost_enabled((os_log_t)qword_10229FD98))
              {
                objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
                v65 = v64;
                objc_msgSend(objc_msgSend(v16, "averageIntensity"), "doubleValue");
                *(_DWORD *)buf = 68289539;
                v82 = 0;
                v83 = 2082;
                v84 = "";
                v85 = 2049;
                *(_QWORD *)v86 = v65;
                *(_WORD *)&v86[8] = 1025;
                *(_DWORD *)v87 = (int)v66;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v63, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute input.", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MET Minute time_s\":\"%{private}.09f\", \"MET value\":%{private}d}", buf, 0x22u);
              }
              return 0;
            }
            objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
            v11 = v25 + 60.0;
          }
          else
          {
            if (qword_10229FD90 != -1)
              dispatch_once(&qword_10229FD90, &stru_10213E038);
            v18 = qword_10229FD98;
            if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
            {
              v19 = *(double *)a1;
              objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
              *(_DWORD *)buf = 68289539;
              v82 = 0;
              v83 = 2082;
              v84 = "";
              v85 = 2049;
              *(double *)v86 = v19;
              *(_WORD *)&v86[8] = 2049;
              *(_QWORD *)v87 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MRU time_s\":\"%{private}.09f\", \"Input time_s\":\"%{private}.09f\"}", buf, 0x26u);
              if (qword_10229FD90 != -1)
                dispatch_once(&qword_10229FD90, &stru_10213E038);
            }
            v21 = qword_10229FD98;
            if (os_signpost_enabled((os_log_t)qword_10229FD98))
            {
              v22 = *(double *)a1;
              objc_msgSend(objc_msgSend(v16, "startDate"), "timeIntervalSinceReferenceDate");
              *(_DWORD *)buf = 68289539;
              v82 = 0;
              v83 = 2082;
              v84 = "";
              v85 = 2049;
              *(double *)v86 = v22;
              *(_WORD *)&v86[8] = 2049;
              *(_QWORD *)v87 = v23;
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute input.", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute input.\", \"MRU time_s\":\"%{private}.09f\", \"Input time_s\":\"%{private}.09f\"}", buf, 0x26u);
            }
          }
          v15 = (char *)v15 + 1;
        }
        while (v12 != v15);
        v12 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v77, v93, 16);
        if (v12)
          continue;
        break;
      }
    }
    __p = 0;
    v75 = 0;
    v76 = 0;
    if (a3 < a4)
    {
      *(_QWORD *)&v13 = 68290307;
      v68 = v13;
      do
      {
        v72 = 0u;
        v73 = 0u;
        v70 = 0u;
        v71 = 0u;
        v26 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v70, v92, 16, v68);
        v28 = a3 + a5;
        if (v26)
        {
          v29 = *(_QWORD *)v71;
          do
          {
            for (i = 0; i != v26; i = (char *)i + 1)
            {
              if (*(_QWORD *)v71 != v29)
                objc_enumerationMutation(a2);
              v31 = *(void **)(*((_QWORD *)&v70 + 1) + 8 * (_QWORD)i);
              objc_msgSend(objc_msgSend(v31, "startDate"), "timeIntervalSinceReferenceDate");
              if (a3 <= v32)
              {
                objc_msgSend(objc_msgSend(v31, "startDate"), "timeIntervalSinceReferenceDate");
                if (v33 < v28)
                {
                  objc_msgSend(objc_msgSend(v31, "averageIntensity"), "doubleValue");
                  if (v34 > 1.60000002)
                  {
                    objc_msgSend(objc_msgSend(v31, "averageIntensity"), "doubleValue");
                    v36 = v35;
                    v37 = v75;
                    if ((unint64_t)v75 >= v76)
                    {
                      v39 = (double *)__p;
                      v40 = ((char *)v75 - (_BYTE *)__p) >> 3;
                      v41 = v40 + 1;
                      if ((unint64_t)(v40 + 1) >> 61)
                        sub_100259694();
                      v42 = v76 - (_QWORD)__p;
                      if ((uint64_t)(v76 - (_QWORD)__p) >> 2 > v41)
                        v41 = v42 >> 2;
                      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8)
                        v43 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v43 = v41;
                      if (v43)
                      {
                        v44 = (char *)sub_10025E6A0((uint64_t)&v76, v43);
                        v39 = (double *)__p;
                        v37 = v75;
                      }
                      else
                      {
                        v44 = 0;
                      }
                      v45 = (double *)&v44[8 * v40];
                      *(_QWORD *)v45 = v36;
                      v38 = v45 + 1;
                      while (v37 != v39)
                      {
                        v46 = *((_QWORD *)v37-- - 1);
                        *((_QWORD *)v45-- - 1) = v46;
                      }
                      __p = v45;
                      v75 = v38;
                      v76 = (unint64_t)&v44[8 * v43];
                      if (v39)
                        operator delete(v39);
                    }
                    else
                    {
                      *(_QWORD *)v75 = v35;
                      v38 = v37 + 1;
                    }
                    v75 = v38;
                  }
                }
              }
            }
            v26 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v70, v92, 16);
          }
          while (v26);
        }
        v47 = (double *)__p;
        v48 = v75;
        v49 = (char *)v75 - (_BYTE *)__p;
        if (a6 >= 0.0)
        {
          v51 = v49 >> 3;
          v27 = 1.0;
          if (a6 <= 1.0)
          {
            v27 = (double)(unint64_t)v51 * a6;
            v50 = (unint64_t)v27;
          }
          else
          {
            v50 = v51 - 1;
          }
        }
        else
        {
          v50 = 0;
        }
        if (v75 != __p)
        {
          v52 = (double *)((char *)__p + 8 * v50);
          if (v52 != v75)
          {
            sub_100407418((double *)__p, v52, v75, v27);
            v47 = (double *)__p;
          }
          v53 = v47[v50];
          if (qword_10229FD90 != -1)
            dispatch_once(&qword_10229FD90, &stru_10213E038);
          v54 = qword_10229FD98;
          if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = v68;
            v82 = 0;
            v83 = 2082;
            v84 = "";
            v85 = 1025;
            *(_DWORD *)v86 = (unint64_t)v49 >> 3;
            *(_WORD *)&v86[4] = 1025;
            *(_DWORD *)&v86[6] = v50;
            *(_WORD *)v87 = 2049;
            *(double *)&v87[2] = v53;
            v88 = 2049;
            v89 = a3;
            v90 = 2049;
            v91 = a3 + a5;
            _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Processed mets values\", \"count\":%{private}d, \"index\":%{private}d, \"mets value\":\"%{private}f\", \"start time_s\":\"%{private}.09f\", \"end time_s\":\"%{private}.09f\"}", buf, 0x3Cu);
          }
          v55 = vcvtpd_u64_f64(v53 + -1.60000002);
          if (v55 >= 0xA)
            v55 = 10;
          ++*(_DWORD *)(*(_QWORD *)(a1 + 8) + 4 * v55);
          v48 = (double *)__p;
        }
        v75 = v48;
        a3 = a3 + a5;
      }
      while (v28 < a4);
    }
    *(double *)a1 = v11;
    v58 = sub_1004AF060(a1);
    if (__p)
    {
      v75 = (double *)__p;
      operator delete(__p);
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
    v56 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Empty MET minutes input.\"}", buf, 0x12u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10213E038);
    }
    v57 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      *(_DWORD *)buf = 68289026;
      v82 = 0;
      v83 = 2082;
      v84 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v57, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Empty MET minutes input.", "{\"msg%{public}.0s\":\"MaxMETs,Empty MET minutes input.\"}", buf, 0x12u);
    }
    v58 = 0;
    *(double *)a1 = a4;
  }
  return v58;
}

void sub_1004AF024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1004AF060(uint64_t a1)
{
  NSMutableArray *v2;
  int *v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _BOOL8 result;
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  __int16 v17;
  const char *v18;

  if (!sub_1004AF3FC(a1))
  {
    v15 = 0;
    sub_1004AF5E4((char **)(a1 + 8), 0xBuLL, &v15);
    *(CFAbsoluteTime *)a1 = CFAbsoluteTimeGetCurrent() + -86400.0;
  }
  v2 = objc_opt_new(NSMutableArray);
  v3 = *(int **)(a1 + 8);
  v4 = *(int **)(a1 + 16);
  while (v3 != v4)
  {
    v5 = *v3++;
    -[NSMutableArray addObject:](v2, "addObject:", +[NSNumber numberWithLong:](NSNumber, "numberWithLong:", v5));
  }
  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v2, 1, 0);
  v6 = sub_1001FD94C();
  v7 = sub_10023EC14(v6);
  if ((v7 & 1) == 0)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      v15 = 68289026;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats\"}", (uint8_t *)&v15, 0x12u);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_10213E038);
    }
    v9 = qword_10229FD98;
    if (os_signpost_enabled((os_log_t)qword_10229FD98))
    {
      v15 = 68289026;
      v16 = 0;
      v17 = 2082;
      v18 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to persist MET minutes stats", "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats\"}", (uint8_t *)&v15, 0x12u);
    }
  }

  +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a1), 1, 0);
  v10 = sub_1001FD94C();
  if ((sub_10023EC14(v10) & 1) != 0)
  {
    if (v7)
    {
      v11 = sub_1001FD94C();
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 944))(v11);
      return 1;
    }
    return 0;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_10213E038);
  v13 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
  {
    v15 = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats compute time\"}", (uint8_t *)&v15, 0x12u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
  }
  v14 = qword_10229FD98;
  result = os_signpost_enabled((os_log_t)qword_10229FD98);
  if (result)
  {
    v15 = 68289026;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v14, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Failed to persist MET minutes stats compute time", "{\"msg%{public}.0s\":\"MaxMETs,Failed to persist MET minutes stats compute time\"}", (uint8_t *)&v15, 0x12u);
    return 0;
  }
  return result;
}

BOOL sub_1004AF3FC(uint64_t a1)
{
  NSObject *v2;
  double v3;
  uint64_t v4;
  NSObject *v5;
  _BOOL8 result;
  double v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  double v16;

  if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 44 && *(double *)a1 != 1.79769313e308)
    return 1;
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_10213E038);
  v2 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
  {
    v3 = *(double *)a1;
    v4 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2;
    v9 = 68289539;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2049;
    v14 = v4;
    v15 = 2049;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute table\", \"table size\":%{private}ld, \"compute time_s\":\"%{private}.09f\"}", (uint8_t *)&v9, 0x26u);
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_10213E038);
  }
  v5 = qword_10229FD98;
  result = os_signpost_enabled((os_log_t)qword_10229FD98);
  if (result)
  {
    v7 = *(double *)a1;
    v8 = (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 2;
    v9 = 68289539;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2049;
    v14 = v8;
    v15 = 2049;
    v16 = v7;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "MaxMETs,Invalid MET minute table", "{\"msg%{public}.0s\":\"MaxMETs,Invalid MET minute table\", \"table size\":%{private}ld, \"compute time_s\":\"%{private}.09f\"}", (uint8_t *)&v9, 0x26u);
    return 0;
  }
  return result;
}

char *sub_1004AF5E4(char **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  char *result;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = (uint64_t)a1[2];
  result = *a1;
  if (a2 <= (v6 - (uint64_t)result) >> 2)
  {
    v13 = a1[1];
    v14 = (v13 - result) >> 2;
    if (v14 >= a2)
      v15 = a2;
    else
      v15 = (v13 - result) >> 2;
    if (v15)
    {
      v16 = result;
      do
      {
        *(_DWORD *)v16 = *a3;
        v16 += 4;
        --v15;
      }
      while (v15);
    }
    if (a2 <= v14)
    {
      a1[1] = &result[4 * a2];
    }
    else
    {
      v17 = &v13[4 * (a2 - v14)];
      v18 = 4 * a2 - 4 * v14;
      do
      {
        *(_DWORD *)v13 = *a3;
        v13 += 4;
        v18 -= 4;
      }
      while (v18);
      a1[1] = v17;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v6 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a2 >> 62)
      sub_100259694();
    v8 = v6 >> 1;
    if (v6 >> 1 <= a2)
      v8 = a2;
    if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    result = sub_1002720D4(a1, v9);
    v10 = a1[1];
    v11 = &v10[4 * a2];
    v12 = 4 * a2;
    do
    {
      *(_DWORD *)v10 = *a3;
      v10 += 4;
      v12 -= 4;
    }
    while (v12);
    a1[1] = v11;
  }
  return result;
}

void sub_1004AF6F4(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

void sub_1004AF7E0(id a1)
{
  qword_102301490 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLStreamedLocationProviderSilo"));
}

uint64_t sub_1004AF894(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004B0A08;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_1023014B0 != -1)
    dispatch_once(&qword_1023014B0, block);
  return qword_1023014B8;
}

void sub_1004AFA34(id a1)
{
  uint64_t v1;
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  BOOL v9;

  if (objc_opt_class(IDSService, v1))
  {
    sub_100197040();
    if (sub_100195F08())
      byte_1023014A0 = 1;
  }
  sub_1001E4804(&v7);
  v9 = 0;
  v2 = sub_1001E4874(v7, "EnableMultiClientStreaming", &v9);
  if (v9)
    v3 = v2;
  else
    v3 = 0;
  v4 = v8;
  if (!v8)
    goto LABEL_11;
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      return;
  }
  else
  {
LABEL_11:
    if (!v3)
      return;
  }
  byte_1023014A0 = 1;
}

void sub_1004AFAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004AFB24(_DWORD *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  if ((a1[42] & 0x80000000) != 0)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      v6 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v6;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v7 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v8 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v8;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount >= 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be non-negative", "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v9 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v10 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v10;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 836, "takeDisablementAssertion");
  }
  else if (qword_1022A01E0 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_1022A01E0, &stru_10213E450);
LABEL_3:
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[42];
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client took disablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  v4 = a1[42];
  a1[42] = v4 + 1;
  if (!v4)
  {
    *(_DWORD *)buf = 9;
    (*(void (**)(_DWORD *, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
    sub_1004B1FE4((uint64_t)a1);
  }
}

void sub_1004AFEA4(_DWORD *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  if ((int)a1[42] <= 0)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      v6 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v6;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v7 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v8 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v8;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount > 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be positive", "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v9 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v10 = a1[42];
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v10;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fDisablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 851, "releaseDisablementAssertion");
  }
  else if (qword_1022A01E0 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_1022A01E0, &stru_10213E450);
LABEL_3:
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = a1[42];
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client released disablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  v4 = a1[42] - 1;
  a1[42] = v4;
  if (!v4)
  {
    *(_DWORD *)buf = 9;
    (*(void (**)(_DWORD *, uint8_t *))(*(_QWORD *)a1 + 120))(a1, buf);
    sub_1004B1FE4((uint64_t)a1);
  }
}

void sub_1004B0224(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  if ((*(_DWORD *)(a1 + 172) & 0x80000000) != 0)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      v6 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v6;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v7 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v8 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v8;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be non-negative", "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v9 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v10 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v10;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount >= 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be non-negative\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 867, "takeEmergencyEnablementAssertion");
  }
  else if (qword_1022A01E0 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_1022A01E0, &stru_10213E450);
LABEL_3:
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client took emergency enablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  v4 = *(_DWORD *)(a1 + 172);
  *(_DWORD *)(a1 + 172) = v4 + 1;
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 144))
      sub_1004B11E8(a1);
  }
}

void sub_1004B0588(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  NSObject *v5;
  int v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  int v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;

  if (*(int *)(a1 + 172) <= 0)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      v6 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v6;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v7 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v8 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v8;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion count must be positive", "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v9 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v10 = *(_DWORD *)(a1 + 172);
      *(_DWORD *)buf = 68289795;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 1026;
      v16 = v10;
      v17 = 2082;
      v18 = "assert";
      v19 = 2081;
      v20 = "fEmergencyEnablementAssertionCount > 0";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion count must be positive\", \"count\":%{public}d, \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Streaming/CLStreamedLocationProvider.mm", 883, "releaseEmergencyEnablementAssertion");
  }
  else if (qword_1022A01E0 == -1)
  {
    goto LABEL_3;
  }
  dispatch_once(&qword_1022A01E0, &stru_10213E450);
LABEL_3:
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)buf = 68289282;
    v12 = 0;
    v13 = 2082;
    v14 = "";
    v15 = 1026;
    v16 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client released emergency enablement assertion\", \"before change\":%{public}d}", buf, 0x18u);
  }
  v4 = *(_DWORD *)(a1 + 172) - 1;
  *(_DWORD *)(a1 + 172) = v4;
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 144))
      sub_1004B11E8(a1);
  }
}

void sub_1004B090C(uint64_t a1, void *a2, void *a3)
{
  if (objc_msgSend(a2, "isEqual:", CFSTR("kCLLocationStreamingMessageTypeLocation")))
  {
    sub_1004B45E4((id *)a1, a3);
  }
  else if (objc_msgSend(a2, "isEqual:", CFSTR("kCLLocationStreamingMessageTypeAliveAgain")))
  {
    if (*(_DWORD *)(a1 + 144))
      sub_1004B11E8(a1);
  }
}

void sub_1004B0A08()
{
  operator new();
}

void sub_1004B0A50()
{
  operator delete();
}

void sub_1004B0A74(uint64_t a1, void *a2)
{
  uint64_t v3;
  char v4;
  char v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  _QWORD v11[5];
  _QWORD v12[5];
  int v13;
  uint8_t buf[8];
  _BYTE v15[10];
  __int16 v16;
  int v17;

  v3 = sub_1006DAF10(a1, "Streamed location provider", a2);
  *(_QWORD *)v3 = off_10213E0A8;
  *(_QWORD *)(v3 + 120) = 0;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(a1 + 136) = objc_msgSend(objc_msgSend(*(id *)(v3 + 32), "vendor"), "proxyForService:forClient:", CFSTR("CLLocationStreamingConnectionManager"), CFSTR("CLStreamedLocationProvider"));
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 160) = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 174) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_BYTE *)(a1 + 216) = 1;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004B1108;
  v12[3] = &unk_10212ECA0;
  v12[4] = a1;
  objc_msgSend(*(id *)(a1 + 152), "setHandler:", v12);
  objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 152), "setFireInterval:", 30.0);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1004B15A0;
  v11[3] = &unk_10212ECA0;
  v11[4] = a1;
  objc_msgSend(*(id *)(a1 + 160), "setHandler:", v11);
  sub_1001E4804(buf);
  LOBYTE(v13) = 0;
  v4 = sub_1001E4874(*(uint64_t *)buf, "EnableMultiClientStreaming", (BOOL *)&v13);
  if ((_BYTE)v13)
    v5 = v4;
  else
    v5 = 0;
  *(_BYTE *)(a1 + 180) = v5;
  v6 = *(std::__shared_weak_count **)v15;
  if (*(_QWORD *)v15)
  {
    v7 = (unint64_t *)(*(_QWORD *)v15 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v9 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v10 = *(unsigned __int8 *)(a1 + 180);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v15 = 2082;
    *(_QWORD *)&v15[2] = "";
    v16 = 1026;
    v17 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient enabled?\", \"fEnableMultiClientStreaming\":%{public}hhd}", buf, 0x18u);
  }
  if (*(_BYTE *)(a1 + 180))
  {
    *(_QWORD *)(a1 + 192) = -[CLStreamedLocationProviderServerDiscoverer initOnQueue:]([CLStreamedLocationProviderServerDiscoverer alloc], "initOnQueue:", objc_msgSend(*(id *)(a1 + 40), "queue"));
    sub_100E35814();
  }
  sub_100E087CC();
}

void sub_1004B1090(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *v2;
  *v2 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_1006DB4AC(v1);
  _Unwind_Resume(a1);
}

void sub_1004B1108(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Refreshing location request\"}", (uint8_t *)v3, 0x12u);
  }
  sub_1004B11E8(v1);
}

void sub_1004B11E8(uint64_t a1)
{
  CLLocationStreamingMessage *v2;
  id v3;
  NSNumber *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  _QWORD v9[5];
  _QWORD v10[5];
  uint8_t buf[4];

  if ((sub_1004B1DB4(a1) & 1) != 0)
  {
    v2 = objc_alloc_init(CLLocationStreamingMessage);
    -[CLLocationStreamingMessage setMessageType:](v2, "setMessageType:", CFSTR("kCLLocationStreamingMessageTypeRequestLocation"));
    v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
    objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(a1 + 144)), CFSTR("kCLLocationStreamingMessageGranularityKey"));
    if (sub_1004B3B8C(a1))
      objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1), CFSTR("kCLLocationStreamingMessageIncludeMotionKey"));
    *(_DWORD *)buf = 28;
    if (sub_1001B7864(a1, (int *)buf, 1))
      objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("kCLLocationStreamingMessageInFitnessSessionKey"));
    *(_DWORD *)buf = 29;
    if (sub_1001B7864(a1, (int *)buf, 1))
      objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("kCLLocationStreamingMessageActivityTypeAirborneKey"));
    *(_DWORD *)buf = 17;
    if (sub_1001B7864(a1, (int *)buf, 1))
      objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("kCLLocationStreamingMessageMapMatching"));
    if (*(_DWORD *)(a1 + 172))
      objc_msgSend(v3, "setObject:forKeyedSubscript:", &__kCFBooleanTrue, CFSTR("kCLLocationStreamingMessageEmergencyEnablementKey"));
    -[CLLocationStreamingMessage setPayload:](v2, "setPayload:", v3);
    -[CLLocationStreamingMessage setPriority:](v2, "setPriority:", 300);
    v9[0] = IDSSendMessageOptionTimeoutKey;
    v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", 30.0);
    v9[1] = IDSSendMessageOptionForceLocalDeliveryKey;
    v9[2] = IDSSendMessageOptionEncryptPayloadKey;
    v10[0] = v4;
    v10[1] = &__kCFBooleanTrue;
    v10[2] = &__kCFBooleanTrue;
    v10[3] = &__kCFBooleanTrue;
    v9[3] = IDSSendMessageOptionRequireBluetoothKey;
    v9[4] = IDSSendMessageOptionQueueOneIdentifierKey;
    v10[4] = CFSTR("kCLLocationStreamingMessageTypeRequestLocation");
    -[CLLocationStreamingMessage setIdsOptions:](v2, "setIdsOptions:", +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v10, v9, 5));
    objc_msgSend(*(id *)(a1 + 136), "sendMessage:", v2);
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ilsa,sendLocationRequest,streaming is not allowed,blocking location request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "#ilsa,sendLocationRequest,streaming is not allowed,blocking location request", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLStreamedLocationProvider::sendLocationRequest()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

uint64_t sub_1004B15A0(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Location unavailable timer fired. Triggering kNotificationLocationUnavailable notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "Location unavailable timer fired. Triggering kNotificationLocationUnavailable notification", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CLStreamedLocationProvider::CLStreamedLocationProvider(id<CLIntersiloUniverse>)_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  *(_DWORD *)buf = 9;
  return (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)v1 + 144))(v1, buf, 1, 0xFFFFFFFFLL);
}

void sub_1004B1754(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStreamedLocationProvider::onDataProtectionNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213E430);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamedLocationProvider::onDataProtectionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamedLocationProvider::onDataProtectionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004B2D18(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004B190C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1004B192C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStreamedLocationProvider::onLocationStreamingControlStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213E430);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamedLocationProvider::onLocationStreamingControlStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamedLocationProvider::onLocationStreamingControlStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004B1BD8(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004B1ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004B1AFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 42);
    v3 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 120) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  objc_msgSend(*(id *)(a1 + 200), "invalidate");

  *(_QWORD *)(a1 + 200) = 0;
  objc_msgSend(*(id *)(a1 + 208), "invalidate");

  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  objc_msgSend(*(id *)(a1 + 184), "invalidate");

  *(_QWORD *)(a1 + 184) = 0;
  objc_msgSend(*(id *)(a1 + 152), "invalidate");

  *(_QWORD *)(a1 + 152) = 0;
  objc_msgSend(*(id *)(a1 + 160), "invalidate");

  *(_QWORD *)(a1 + 160) = 0;
  objc_msgSend(*(id *)(a1 + 136), "retireClient:", CLISP_ME_TOKEN);

  *(_QWORD *)(a1 + 136) = 0;
  return sub_1006DB4DC(a1);
}

void sub_1004B1BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  int v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10213E470);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(a1 + 216);
    v8 = *(unsigned __int8 *)(a4 + 1480);
    *(_DWORD *)buf = 67240448;
    v17 = v7;
    v18 = 1026;
    v19 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamedLocationProvider,onLocationStreamingControlStateNotification,allowStreaming,old,%{public}d,new,%{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213E470);
    v9 = *(unsigned __int8 *)(a1 + 216);
    v10 = *(unsigned __int8 *)(a4 + 1480);
    v13[0] = 67240448;
    v13[1] = v9;
    v14 = 1026;
    v15 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ilsa,CLStreamedLocationProvider,onLocationStreamingControlStateNotification,allowStreaming,old,%{public}d,new,%{public}d", v13, 14);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLStreamedLocationProvider::onLocationStreamingControlStateNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_BYTE *)(a1 + 216) = *(_BYTE *)(a4 + 1480);
}

uint64_t sub_1004B1DB4(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *(unsigned __int8 *)(a1 + 216);
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#ilsa,CLStreamedLocationProvider,isLocationStreamingAllowed,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = *(unsigned __int8 *)(a1 + 216);
    v8[0] = 67240192;
    v8[1] = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "#ilsa,CLStreamedLocationProvider,isLocationStreamingAllowed,%{public}d", v8, 8);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStreamedLocationProvider::isLocationStreamingAllowed() const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return *(unsigned __int8 *)(a1 + 216);
}

uint64_t sub_1004B1F6C(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0x27)
    goto LABEL_9;
  if (((1 << v2) & 0x8000000238) != 0)
    return 1;
  if (((1 << v2) & 7) != 0)
  {
    sub_1004B1FE4(a1);
    return 1;
  }
  if (((1 << v2) & 0x30020000) == 0)
LABEL_9:
    sub_1018FC0A0();
  if (*(_DWORD *)(a1 + 144))
    sub_1004B11E8(a1);
  return 1;
}

void sub_1004B1FE4(uint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  int v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  if (*(_DWORD *)(a1 + 168) || (v3 = qword_102301478) == 0)
  {
    v2 = 0;
  }
  else
  {
    v2 = 0;
    do
    {
      v8[0] = *(_DWORD *)(v3 + 16);
      if (sub_1001B7864(a1, v8, 1))
        v2 = *(_DWORD *)(v3 + 20);
      v3 = *(_QWORD *)v3;
    }
    while (v3);
  }
  v4 = *(_DWORD *)(a1 + 144);
  if (v4 != v2)
  {
    if (v4)
    {
      if (!v2)
      {
        objc_msgSend(*(id *)(a1 + 160), "setNextFireDelay:", 1.79769313e308);
        v8[0] = 0;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, v8);
        v8[0] = 1;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, v8);
        v8[0] = 2;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, v8);
      }
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 160), "setNextFireDelay:", 5.0);
    }
    if (*(_BYTE *)(a1 + 180))
      sub_1004B2E0C(a1, v2);
    *(_DWORD *)(a1 + 144) = v2;
    v5 = 30.0;
    if (!v2)
      v5 = 1.79769313e308;
    objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", v5);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v6 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(unsigned int *)(a1 + 144);
      v8[0] = 68289282;
      v8[1] = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2050;
      v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Changing requested granularity\", \"granularity\":%{public, location:CLLocationStreamingGranularity}lld}", (uint8_t *)v8, 0x1Cu);
    }
    sub_1004B11E8(a1);
  }
}

uint64_t sub_1004B21EC(uint64_t a1, int *a2)
{
  int v2;

  v2 = *a2;
  if (*a2 > 0x27)
    goto LABEL_9;
  if (((1 << v2) & 0x8000000238) != 0)
    return 1;
  if (((1 << v2) & 7) != 0)
  {
    sub_1004B1FE4(a1);
    return 1;
  }
  if (((1 << v2) & 0x30020000) == 0)
LABEL_9:
    sub_1018FC21C();
  if (*(_DWORD *)(a1 + 144))
    sub_1004B11E8(a1);
  return 1;
}

void sub_1004B2264(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  int v55;
  __int16 v56;
  uint64_t v57;
  uint8_t buf[4];
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  uint64_t v73;
  __int16 v74;
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  int v81;
  __int16 v82;
  uint64_t v83;

  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = *(_QWORD *)(a2 + 4);
      v5 = *(_QWORD *)(a2 + 12);
      v6 = *(_QWORD *)(a2 + 20);
      v7 = *(_QWORD *)(a2 + 44);
      v8 = *(_QWORD *)(a2 + 60);
      v9 = *(_DWORD *)(a2 + 96);
      v10 = *(_QWORD *)(a2 + 28);
      v11 = *(_QWORD *)(a2 + 36);
      v12 = *(_QWORD *)(a2 + 144);
      v13 = *(_QWORD *)(a2 + 52);
      v14 = *(_QWORD *)(a2 + 68);
      v15 = *(_DWORD *)(a2 + 140);
      v16 = *(_QWORD *)(a2 + 76);
      *(_DWORD *)buf = 134286593;
      v59 = v4;
      v60 = 2049;
      v61 = v5;
      v62 = 2050;
      v63 = v6;
      v64 = 2049;
      v65 = v7;
      v66 = 2049;
      v67 = v8;
      v68 = 1026;
      v69 = v9;
      v70 = 2049;
      v71 = v10;
      v72 = 2050;
      v73 = v11;
      v74 = 2049;
      v75 = v12;
      v76 = 2049;
      v77 = v13;
      v78 = 2049;
      v79 = v14;
      v80 = 1025;
      v81 = v15;
      v82 = 2050;
      v83 = v16;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@ClxStreamed, Send, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", buf, 0x7Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
      v17 = *(_QWORD *)(a2 + 4);
      v18 = *(_QWORD *)(a2 + 12);
      v19 = *(_QWORD *)(a2 + 20);
      v20 = *(_QWORD *)(a2 + 44);
      v21 = *(_QWORD *)(a2 + 60);
      v22 = *(_DWORD *)(a2 + 96);
      v23 = *(_QWORD *)(a2 + 28);
      v24 = *(_QWORD *)(a2 + 36);
      v25 = *(_QWORD *)(a2 + 144);
      v26 = *(_QWORD *)(a2 + 52);
      v27 = *(_QWORD *)(a2 + 68);
      v28 = *(_DWORD *)(a2 + 140);
      v29 = *(_QWORD *)(a2 + 76);
      v32 = 134286593;
      v33 = v17;
      v34 = 2049;
      v35 = v18;
      v36 = 2050;
      v37 = v19;
      v38 = 2049;
      v39 = v20;
      v40 = 2049;
      v41 = v21;
      v42 = 1026;
      v43 = v22;
      v44 = 2049;
      v45 = v23;
      v46 = 2050;
      v47 = v24;
      v48 = 2049;
      v49 = v25;
      v50 = 2049;
      v51 = v26;
      v52 = 2049;
      v53 = v27;
      v54 = 1025;
      v55 = v28;
      v56 = 2050;
      v57 = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "@ClxStreamed, Send, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", &v32, 124);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "void CLStreamedLocationProvider::logGPS(const CLLocationProvider_Type::NotificationData &)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
}

id sub_1004B2568(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v6[5];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  if (*(_QWORD *)(a1 + 200))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to create retry discovery timer while another one still exists\"}", buf, 0x12u);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v3 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to create retry discovery timer while another one still exists", "{\"msg%{public}.0s\":\"#Multiclient attempting to create retry discovery timer while another one still exists\"}", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 200), "invalidate");

    *(_QWORD *)(a1 + 200) = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 200) = v4;
  objc_msgSend(v4, "setNextFireDelay:", 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 200), "setFireInterval:", 5.0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004B2750;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  return objc_msgSend(*(id *)(a1 + 200), "setHandler:", v6);
}

id sub_1004B2750(uint64_t a1)
{
  return sub_1004B2758(*(_QWORD *)(a1 + 32));
}

id sub_1004B2758(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v5;
  _QWORD v6[6];
  _QWORD v7[5];
  uint64_t buf;
  __int16 v9;
  const char *v10;

  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1004B2FA8;
  v7[3] = &unk_10213E1E0;
  v7[4] = a1;
  if (*(_BYTE *)(a1 + 181))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      buf = 68289026;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient looking for candidate streaming sources\"}", (uint8_t *)&buf, 0x12u);
    }
    v3 = *(void **)(a1 + 192);
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    v6[2] = sub_1004B34E0;
    v6[3] = &unk_10213E208;
    v6[4] = v7;
    v6[5] = a1;
    return objc_msgSend(v3, "findCandidateServersWithCompletion:", v6);
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      buf = 68289026;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient skipping discovery because first unlock has yet to happen, but will retry in case we get unlocked\"}", (uint8_t *)&buf, 0x12u);
    }
    return objc_msgSend(*(id *)(a1 + 200), "setNextFireDelay:", 5.0);
  }
}

id sub_1004B2934(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v6[5];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  if (*(_QWORD *)(a1 + 208))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to create reassert timer while another one still exists\"}", buf, 0x12u);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v3 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to create reassert timer while another one still exists", "{\"msg%{public}.0s\":\"#Multiclient attempting to create reassert timer while another one still exists\"}", buf, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 208), "invalidate");

    *(_QWORD *)(a1 + 208) = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 40), "newTimer");
  *(_QWORD *)(a1 + 208) = v4;
  objc_msgSend(v4, "setNextFireDelay:", 1.79769313e308);
  objc_msgSend(*(id *)(a1 + 208), "setFireInterval:", 15.0);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1004B2B1C;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  return objc_msgSend(*(id *)(a1 + 208), "setHandler:", v6);
}

_DWORD *sub_1004B2B1C(uint64_t a1)
{
  _DWORD *result;

  result = *(_DWORD **)(a1 + 32);
  if (result[36] == 3)
    return sub_1004B2B38((uint64_t)result, 0);
  return result;
}

id sub_1004B2B38(uint64_t a1, uint64_t a2)
{
  id v4;
  NSNumber *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  _QWORD v12[5];
  int v13;

  v4 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v4, "setObject:forKeyedSubscript:", +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", a2), CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey"));
  if (sub_1004B3B8C(a1))
    v5 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  else
    v5 = (NSNumber *)&__kCFBooleanFalse;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v5, CFSTR("kCLLocationStreamingMessageIncludeMotionKey"));
  v13 = 28;
  if (sub_1001B7864(a1, &v13, 1))
    v6 = &__kCFBooleanTrue;
  else
    v6 = &__kCFBooleanFalse;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v6, CFSTR("kCLLocationStreamingMessageInFitnessSessionKey"));
  v13 = 29;
  if (sub_1001B7864(a1, &v13, 1))
    v7 = &__kCFBooleanTrue;
  else
    v7 = &__kCFBooleanFalse;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v7, CFSTR("kCLLocationStreamingMessageActivityTypeAirborneKey"));
  if (*(_DWORD *)(a1 + 172))
    v8 = &__kCFBooleanTrue;
  else
    v8 = &__kCFBooleanFalse;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v8, CFSTR("kCLLocationStreamingMessageEmergencyEnablementKey"));
  v13 = 17;
  if (sub_1001B7864(a1, &v13, 1))
    v9 = &__kCFBooleanTrue;
  else
    v9 = &__kCFBooleanFalse;
  objc_msgSend(v4, "setObject:forKeyedSubscript:", v9, CFSTR("kCLLocationStreamingMessageMapMatching"));
  v10 = *(void **)(a1 + 184);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1004B3C58;
  v12[3] = &unk_10213E228;
  v12[4] = a2;
  return objc_msgSend(v10, "sendRequestID:request:destinationID:options:responseHandler:", CFSTR("com.apple.locationd.rapport.stream-request"), v4, RPDestinationIdentifierDirectPeer, 0, v12);
}

void sub_1004B2D18(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (*a3 == 1 && *(_BYTE *)(a4 + 4) != 0)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v6 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v7[0] = 68289026;
      v7[1] = 0;
      v8 = 2082;
      v9 = "";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient got first unlock notification, now we can stream!\"}", (uint8_t *)v7, 0x12u);
    }
    *(_BYTE *)(a1 + 181) = 1;
  }
}

void sub_1004B2E0C(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  if (a2 == 3)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient want to get best possible accuracy, and will request from nearby devices\"}", (uint8_t *)&v5, 0x12u);
    }
    sub_1004B2568(a1);
    sub_1004B2758(a1);
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v4 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient no longer need to stream because granularity no longer Best\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(a1 + 200), "invalidate");

    *(_QWORD *)(a1 + 200) = 0;
    objc_msgSend(*(id *)(a1 + 184), "invalidate");

    *(_QWORD *)(a1 + 184) = 0;
  }
}

BOOL sub_1004B2FA8(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  id v5;
  void *v6;
  NSObject *v7;
  id v8;
  NSObject *v9;
  id v10;
  _QWORD v12[6];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;

  v3 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 68289283;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2081;
    v18 = objc_msgSend(a2, "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient registering a server\", \"effectiveID\":%{private, location:escape_only}s}", buf, 0x1Cu);
  }
  v5 = objc_msgSend(*(id *)(v3 + 192), "deviceWithEffectiveID:", a2);
  if (v5)
  {
    objc_msgSend(*(id *)(v3 + 200), "invalidate");

    *(_QWORD *)(v3 + 200) = 0;
    v6 = *(void **)(v3 + 40);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    v12[2] = sub_1004B3250;
    v12[3] = &unk_102131360;
    v12[4] = v5;
    v12[5] = v3;
    objc_msgSend(v6, "afterInterval:async:", v12, 1.0);
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v7 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      v8 = objc_msgSend(a2, "UTF8String");
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to find any already-discovered device with ID\", \"id\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v9 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v10 = objc_msgSend(a2, "UTF8String");
      *(_DWORD *)buf = 68289283;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2081;
      v18 = v10;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to find any already-discovered device with ID", "{\"msg%{public}.0s\":\"#Multiclient failed to find any already-discovered device with ID\", \"id\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  return v5 != 0;
}

void sub_1004B3250(uint64_t a1)
{
  sub_1004B325C(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1004B325C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  uint64_t v6;
  void *v7;
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  uint64_t buf;
  __int16 v12;
  const char *v13;

  if (*(_QWORD *)(a1 + 184))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      buf = 68289026;
      v12 = 2082;
      v13 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient attempting to re-register streaming link, but we already have one\"}", (uint8_t *)&buf, 0x12u);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v3 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      buf = 68289026;
      v12 = 2082;
      v13 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient attempting to re-register streaming link, but we already have one", "{\"msg%{public}.0s\":\"#Multiclient attempting to re-register streaming link, but we already have one\"}", (uint8_t *)&buf, 0x12u);
    }
  }
  else
  {
    if (!a2)
      sub_1018FC398();
    *(_QWORD *)(a1 + 184) = objc_alloc_init((Class)RPCompanionLinkClient);
    objc_msgSend(*(id *)(a1 + 184), "setDispatchQueue:", objc_msgSend(*(id *)(a1 + 40), "queue"));
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_1004B4000;
    v10[3] = &unk_10212ECA0;
    v10[4] = a1;
    objc_msgSend(*(id *)(a1 + 184), "setInvalidationHandler:", v10);
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    v9[2] = sub_1004B40E4;
    v9[3] = &unk_10212ECA0;
    v9[4] = a1;
    objc_msgSend(*(id *)(a1 + 184), "setDisconnectHandler:", v9);
    sub_100197040();
    if (sub_10075A02C())
    {
      objc_msgSend(*(id *)(a1 + 184), "setFlags:", 1);
      v6 = 0x380000103C04;
    }
    else
    {
      v6 = 65538;
    }
    objc_msgSend(*(id *)(a1 + 184), "setControlFlags:", v6);
    objc_msgSend(*(id *)(a1 + 184), "setDestinationDevice:", a2);
    v7 = *(void **)(a1 + 184);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1004B41DC;
    v8[3] = &unk_102130FC8;
    v8[4] = a1;
    objc_msgSend(v7, "activateWithCompletion:", v8);
  }
}

void sub_1004B34E0(uint64_t a1, void *a2)
{
  uint64_t v2;
  id v4;
  id v5;
  void *v6;
  void *v7;
  id v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  NSObject *v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  NSObject *v26;
  NSObject *v27;
  id v28;
  const char *v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v35;
  id obj;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[128];
  uint8_t v51[128];
  uint8_t buf[4];
  int v53;
  __int16 v54;
  const char *v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  unsigned int v65;
  _BYTE v66[128];

  v2 = *(_QWORD *)(a1 + 40);
  if (*(_DWORD *)(v2 + 144) != 3)
    return;
  if (!objc_msgSend(a2, "count"))
    goto LABEL_40;
  v32 = v2;
  obj = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a2, "count"));
  v35 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(a2, "count"));
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v4 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
  if (v4)
  {
    v5 = v4;
    v37 = *(_QWORD *)v47;
    while (2)
    {
      v6 = 0;
      do
      {
        if (*(_QWORD *)v47 != v37)
          objc_enumerationMutation(a2);
        v7 = *(void **)(*((_QWORD *)&v46 + 1) + 8 * (_QWORD)v6);
        v8 = objc_msgSend(a2, "objectForKeyedSubscript:", v7, v32);
        v9 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportHasGPSKey")), "BOOLValue");
        v10 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportIsPhoneKey")), "BOOLValue");
        v11 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportIsPadKey")), "BOOLValue");
        if (objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportIsAtLeast16_4")))
          v12 = objc_msgSend(objc_msgSend(v8, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportIsAtLeast16_4")), "BOOLValue");
        else
          v12 = 0;
        if (qword_1022A01E0 != -1)
          dispatch_once(&qword_1022A01E0, &stru_10213E450);
        v13 = qword_1022A01E8;
        if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
        {
          v14 = objc_msgSend(v7, "UTF8String");
          *(_DWORD *)buf = 68290306;
          v53 = 0;
          v54 = 2082;
          v55 = "";
          v56 = 2082;
          v57 = (uint64_t)v14;
          v58 = 1026;
          v59 = v9;
          v60 = 1026;
          v61 = v10;
          v62 = 1026;
          v63 = v11;
          v64 = 1026;
          v65 = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient candidate device\", \"deviceID\":%{public, location:escape_only}s, \"hasGPS?\":%{public}hhd, \"isIphone\":%{public}hhd, \"isIpad\":%{public}hhd, \"atLeast16_4\":%{public}hhd}", buf, 0x34u);
        }
        if ((v12 & v9) == 1)
        {
          if (v10 && (*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
          {
            if (qword_1022A01E0 != -1)
              dispatch_once(&qword_1022A01E0, &stru_10213E450);
            v27 = qword_1022A01E8;
            if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
            {
              v28 = objc_msgSend(v7, "UTF8String");
              *(_DWORD *)buf = 68289282;
              v53 = 0;
              v54 = 2082;
              v55 = "";
              v56 = 2082;
              v57 = (uint64_t)v28;
              v29 = "{\"msg%{public}.0s\":\"#Multiclient selected an iPhone\", \"deviceID\":%{public, location:escape_only}s}";
LABEL_57:
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, v29, buf, 0x1Cu);
            }
            return;
          }
          if (v11)
            v15 = obj;
          else
            v15 = v35;
          objc_msgSend(v15, "addObject:", v7);
        }
        v6 = (char *)v6 + 1;
      }
      while (v5 != v6);
      v5 = objc_msgSend(a2, "countByEnumeratingWithState:objects:count:", &v46, v66, 16);
      if (v5)
        continue;
      break;
    }
  }
  v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v16 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v51, 16, v32);
  v2 = v33;
  if (!v16)
  {
LABEL_32:
    v40 = 0u;
    v41 = 0u;
    v38 = 0u;
    v39 = 0u;
    v21 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
    if (v21)
    {
      v22 = v21;
      v23 = *(_QWORD *)v39;
LABEL_34:
      v24 = 0;
      while (1)
      {
        if (*(_QWORD *)v39 != v23)
          objc_enumerationMutation(v35);
        v25 = *(void **)(*((_QWORD *)&v38 + 1) + 8 * v24);
        if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
          break;
        if (v22 == (id)++v24)
        {
          v22 = objc_msgSend(v35, "countByEnumeratingWithState:objects:count:", &v38, v50, 16);
          if (v22)
            goto LABEL_34;
          goto LABEL_40;
        }
      }
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
      v27 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
      {
        v31 = objc_msgSend(v25, "UTF8String");
        *(_DWORD *)buf = 68289282;
        v53 = 0;
        v54 = 2082;
        v55 = "";
        v56 = 2082;
        v57 = (uint64_t)v31;
        v29 = "{\"msg%{public}.0s\":\"#Multiclient selected a non-iOS device\", \"deviceID\":%{public, location:escape_only}s}";
        goto LABEL_57;
      }
      return;
    }
LABEL_40:
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v26 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      v53 = 0;
      v54 = 2082;
      v55 = "";
      v56 = 2050;
      v57 = 0x4014000000000000;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient failed to find any usable device, retrying\", \"nextFireInterval\":\"%{public}f\"}", buf, 0x1Cu);
    }
    objc_msgSend(*(id *)(v2 + 200), "setNextFireDelay:", 5.0);
    return;
  }
  v17 = v16;
  v18 = *(_QWORD *)v43;
LABEL_26:
  v19 = 0;
  while (1)
  {
    if (*(_QWORD *)v43 != v18)
      objc_enumerationMutation(obj);
    v20 = *(void **)(*((_QWORD *)&v42 + 1) + 8 * v19);
    if ((*(unsigned int (**)(void))(*(_QWORD *)(a1 + 32) + 16))())
      break;
    if (v17 == (id)++v19)
    {
      v17 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v42, v51, 16);
      if (v17)
        goto LABEL_26;
      goto LABEL_32;
    }
  }
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v27 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v30 = objc_msgSend(v20, "UTF8String");
    *(_DWORD *)buf = 68289282;
    v53 = 0;
    v54 = 2082;
    v55 = "";
    v56 = 2082;
    v57 = (uint64_t)v30;
    v29 = "{\"msg%{public}.0s\":\"#Multiclient selected an iPad\", \"deviceID\":%{public, location:escape_only}s}";
    goto LABEL_57;
  }
}

uint64_t sub_1004B3B8C(uint64_t a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  BOOL v7;
  int v9;
  int *v10;

  v1 = qword_102301478;
  if (!qword_102301478)
    return 0;
  v2 = (uint64_t **)(a1 + 56);
  while (1)
  {
    v9 = *(_DWORD *)(v1 + 16);
    v10 = &v9;
    v3 = sub_1004A5DC8(v2, &v9, (uint64_t)&unk_101B9EB60, &v10);
    v4 = v3[5];
    if (v4 != (uint64_t *)(v3 + 6))
      break;
LABEL_11:
    v1 = *(_QWORD *)v1;
    if (!v1)
      return 0;
  }
  while (!*((_BYTE *)v4 + 57))
  {
    v5 = (uint64_t *)v4[1];
    if (v5)
    {
      do
      {
        v6 = (uint64_t **)v5;
        v5 = (uint64_t *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        v6 = (uint64_t **)v4[2];
        v7 = *v6 == v4;
        v4 = (uint64_t *)v6;
      }
      while (!v7);
    }
    v4 = (uint64_t *)v6;
    if (v6 == v3 + 6)
      goto LABEL_11;
  }
  return 1;
}

void sub_1004B3C58(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  void *v24;

  if (a4
    || !objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey")))
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v6 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      v17 = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = a4;
      v23 = 2113;
      v24 = a2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to send streaming action event\", \"error\":%{public, location:escape_only}@, \"resp\":%{private, location:escape_only}@}", (uint8_t *)&v17, 0x26u);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v7 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v17 = 68289539;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2114;
      v22 = a4;
      v23 = 2113;
      v24 = a2;
      v8 = "#Multiclient failed to send streaming action event";
      v9 = "{\"msg%{public}.0s\":\"#Multiclient failed to send streaming action event\", \"error\":%{public, location:esc"
           "ape_only}@, \"resp\":%{private, location:escape_only}@}";
      v10 = v7;
      v11 = 38;
LABEL_9:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v8, v9, (uint8_t *)&v17, v11);
    }
  }
  else
  {
    v13 = (int)objc_msgSend(objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageRapportLocationStreamingActionKey")), "intValue");
    if (*(_QWORD *)(a1 + 32) == v13)
    {
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
      v14 = qword_1022A01E8;
      if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
      {
        v17 = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2050;
        v22 = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient action OK\", \"action\":%{public, location:CLLocationMultiStreamingAction}lld}", (uint8_t *)&v17, 0x1Cu);
      }
      return;
    }
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v15 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT))
    {
      v17 = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2050;
      v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#Multiclient unexpected action returned in response to request\", \"action\":%{public, location:CLLocationMultiStreamingAction}lld}", (uint8_t *)&v17, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v16 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v17 = 68289282;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2050;
      v22 = v13;
      v8 = "#Multiclient unexpected action returned in response to request";
      v9 = "{\"msg%{public}.0s\":\"#Multiclient unexpected action returned in response to request\", \"action\":%{public,"
           " location:CLLocationMultiStreamingAction}lld}";
      v10 = v16;
      v11 = 28;
      goto LABEL_9;
    }
  }
}

id sub_1004B4000(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient invalidating server streaming link\"}", (uint8_t *)v4, 0x12u);
  }
  return sub_1004B2B38(v1, 1);
}

uint64_t sub_1004B40E4(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 32);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10213E490);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 68289026;
    v4[1] = 0;
    v5 = 2082;
    v6 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Multiclient streamer got disconnected, invalidating connection and setup new discovery.\"}", (uint8_t *)v4, 0x12u);
  }
  objc_msgSend(*(id *)(v1 + 184), "invalidate");

  *(_QWORD *)(v1 + 184) = 0;
  return sub_1004B2E0C(v1, *(unsigned int *)(v1 + 144));
}

void sub_1004B41DC(uint64_t a1, void *a2)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  id v7;
  void **v8;
  uint64_t *v9;
  uint64_t v10;
  NSDictionary *v11;
  void *v12;
  _QWORD v13[5];
  uint64_t v14;
  void *v15;
  _QWORD v16[2];
  _QWORD v17[2];
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;

  if (a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2114;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v4 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      *(_DWORD *)buf = 68289282;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2114;
      v23 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient failed to activate streaming link", "{\"msg%{public}.0s\":\"#Multiclient failed to activate streaming link\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v6 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v5 + 184), "destinationDevice"), "effectiveIdentifier"), "UTF8String");
      *(_DWORD *)buf = 68289283;
      v19 = 0;
      v20 = 2082;
      v21 = "";
      v22 = 2081;
      v23 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient streaming client good to go!\", \"remoteID\":%{private, location:escape_only}s}", buf, 0x1Cu);
    }
    sub_100197040();
    if (sub_10075A02C())
    {
      v16[0] = RPOptionInterest;
      v16[1] = RPOptionAllowUnauthenticated;
      v17[0] = &__kCFBooleanTrue;
      v17[1] = &__kCFBooleanTrue;
      v8 = (void **)v17;
      v9 = v16;
      v10 = 2;
    }
    else
    {
      v14 = RPOptionInterest;
      v15 = &__kCFBooleanTrue;
      v8 = &v15;
      v9 = &v14;
      v10 = 1;
    }
    v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v8, v9, v10);
    v12 = *(void **)(v5 + 184);
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_1004B44E8;
    v13[3] = &unk_10213E248;
    v13[4] = v5;
    objc_msgSend(v12, "registerEventID:options:handler:", CFSTR("com.apple.locationd.rapport.stream-event"), v11, v13);
    sub_1004B2B38(v5, 0);
    sub_1004B2934(v5);
    objc_msgSend(*(id *)(v5 + 208), "setNextFireDelay:", 15.0);
  }
}

void sub_1004B44E8(uint64_t a1, void *a2)
{
  id *v3;
  NSObject *v4;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;
  __int16 v8;
  void *v9;

  v3 = *(id **)(a1 + 32);
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v4 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v5[0] = 68289283;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    v8 = 2113;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient got a location from our client!\", \"message\":%{private, location:escape_only}@}", (uint8_t *)v5, 0x1Cu);
  }
  sub_1004B45E4(v3, a2);
}

void sub_1004B45E4(id *a1, void *a2)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  uint32_t v17;
  id v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  CLStreamedLocationPrivate *v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  CLStreamedLocationInternal *v30;
  NSObject *v31;
  double v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  const char *v42;
  char *v43;
  __int128 v44;
  _BYTE v45[96];
  __int128 v46;
  __int128 v47;
  _BYTE v48[28];
  _DWORD v49[130];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  std::__shared_weak_count *v58;
  void *__p;
  char v60;
  int v61;
  std::__shared_weak_count *v62;
  id v63;
  uint8_t buf[4];
  _BYTE v65[50];
  int v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  _BYTE v74[10];
  uint64_t v75;
  __int16 v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  _BYTE __src[513];
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  char v88;

  v4 = objc_msgSend(objc_alloc((Class)NSKeyedUnarchiver), "initForReadingFromData:error:", objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageLocationKey")), 0);
  v6 = objc_msgSend(v4, "decodeObjectOfClass:forKey:", objc_opt_class(CLLocation, v5), CFSTR("kCLLocationStreamingMessageLocationKey"));
  v7 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageInMotionKey"));
  v8 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageLocationPrivateKey"));
  v9 = objc_msgSend(a2, "objectForKeyedSubscript:", CFSTR("kCLLocationStreamingMessageLocationInternalKey"));
  if (v6)
  {
    v10 = v9;
    objc_msgSend(v6, "clientLocation");
    v11 = *(double *)&__src[88];
    objc_msgSend(v6, "clientLocation");
    if (*(double *)&__src[88] <= 0.0)
    {
      v12 = 15.0;
    }
    else
    {
      objc_msgSend(v6, "clientLocation", *(double *)&__src[88]);
      if (*(_DWORD *)&__src[96] == 1 || (objc_msgSend(v6, "clientLocation"), (_DWORD)v46 == 9))
      {
        if (*(double *)&__src[88] > 4.0)
          v11 = 4.0;
      }
      objc_msgSend(v6, "clientLocation");
      v12 = v11 + *(double *)&__src[76] - CFAbsoluteTimeGetCurrent();
    }
    if (v12 > 0.0)
    {
      sub_100129CA0((uint64_t)v45);
      v18 = objc_msgSend(v6, "clientLocation");
      v46 = *(_OWORD *)&__src[96];
      v47 = *(_OWORD *)&__src[112];
      *(_OWORD *)v48 = *(_OWORD *)&__src[128];
      *(_OWORD *)&v48[12] = *(_OWORD *)&__src[140];
      *(_OWORD *)&v45[32] = *(_OWORD *)&__src[32];
      *(_OWORD *)&v45[48] = *(_OWORD *)&__src[48];
      *(_OWORD *)&v45[64] = *(_OWORD *)&__src[64];
      *(_OWORD *)&v45[80] = *(_OWORD *)&__src[80];
      *(_OWORD *)v45 = *(_OWORD *)__src;
      *(_OWORD *)&v45[16] = *(_OWORD *)&__src[16];
      if (v7)
      {
        v18 = objc_msgSend(v7, "BOOLValue");
        if ((_DWORD)v18)
          v19 = 1;
        else
          v19 = 2;
      }
      else
      {
        v19 = 0;
      }
      v61 = v19;
      if (v8)
      {
        v22 = -[CLStreamedLocationPrivate initWithData:]([CLStreamedLocationPrivate alloc], "initWithData:", v8);
        if (v22)
        {
          -[CLStreamedLocationPrivate daemonLocationPrivate](v22, "daemonLocationPrivate");
          v23 = v81;
        }
        else
        {
          bzero(__src, 0x280uLL);
          v23 = 0uLL;
        }
        v44 = v23;
        v18 = memcpy(v49, __src, 0x201uLL);
        v81 = 0u;
        v24 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
        v50 = v44;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        v55 = v86;
        v56 = v87;
        v51 = v82;
        v52 = v83;
        v53 = v84;
        v54 = v85;
        v57 = v88;
        v27 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
        if (*((_QWORD *)&v81 + 1))
        {
          v28 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
      }
      if (v10)
      {
        v30 = -[CLStreamedLocationInternal initWithData:]([CLStreamedLocationInternal alloc], "initWithData:", v10);
        -[CLStreamedLocationInternal mergeIntoDaemonLocation:](v30, "mergeIntoDaemonLocation:", v45);

      }
      v49[88] = 2;
      sub_1004B2264((uint64_t)v18, (uint64_t)v45);
      *(_DWORD *)__src = 9;
      (*((void (**)(id *, _BYTE *))*a1 + 15))(a1, __src);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213E4B0);
      v31 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__src = 134286593;
        *(_QWORD *)&__src[4] = *(_QWORD *)&v45[4];
        *(_WORD *)&__src[12] = 2049;
        *(_QWORD *)&__src[14] = *(_QWORD *)&v45[12];
        *(_WORD *)&__src[22] = 2050;
        *(_QWORD *)&__src[24] = *(_QWORD *)&v45[20];
        *(_WORD *)&__src[32] = 2049;
        *(_QWORD *)&__src[34] = *(_QWORD *)&v45[44];
        *(_WORD *)&__src[42] = 2049;
        *(_QWORD *)&__src[44] = *(_QWORD *)&v45[60];
        *(_WORD *)&__src[52] = 1026;
        *(_DWORD *)&__src[54] = v46;
        *(_WORD *)&__src[58] = 2049;
        *(_QWORD *)&__src[60] = *(_QWORD *)&v45[28];
        *(_WORD *)&__src[68] = 2050;
        *(_QWORD *)&__src[70] = *(_QWORD *)&v45[36];
        *(_WORD *)&__src[78] = 2049;
        *(_QWORD *)&__src[80] = *(_QWORD *)&v48[16];
        *(_WORD *)&__src[88] = 2049;
        *(_QWORD *)&__src[90] = *(_QWORD *)&v45[52];
        *(_WORD *)&__src[98] = 2049;
        *(_QWORD *)&__src[100] = *(_QWORD *)&v45[68];
        *(_WORD *)&__src[108] = 1025;
        *(_DWORD *)&__src[110] = *(_DWORD *)&v48[12];
        *(_WORD *)&__src[114] = 2050;
        *(_QWORD *)&__src[116] = *(_QWORD *)&v45[76];
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "@ClxStreamed, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", __src, 0x7Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__src, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10213E4B0);
        *(_DWORD *)buf = 134286593;
        *(_QWORD *)v65 = *(_QWORD *)&v45[4];
        *(_WORD *)&v65[8] = 2049;
        *(_QWORD *)&v65[10] = *(_QWORD *)&v45[12];
        *(_WORD *)&v65[18] = 2050;
        *(_QWORD *)&v65[20] = *(_QWORD *)&v45[20];
        *(_WORD *)&v65[28] = 2049;
        *(_QWORD *)&v65[30] = *(_QWORD *)&v45[44];
        *(_WORD *)&v65[38] = 2049;
        *(_QWORD *)&v65[40] = *(_QWORD *)&v45[60];
        *(_WORD *)&v65[48] = 1026;
        v66 = v46;
        v67 = 2049;
        v68 = *(_QWORD *)&v45[28];
        v69 = 2050;
        v70 = *(_QWORD *)&v45[36];
        v71 = 2049;
        v72 = *(_QWORD *)&v48[16];
        v73 = 2049;
        *(_QWORD *)v74 = *(_QWORD *)&v45[52];
        *(_WORD *)&v74[8] = 2049;
        v75 = *(_QWORD *)&v45[68];
        v76 = 1025;
        v77 = *(_DWORD *)&v48[12];
        v78 = 2050;
        v79 = *(_QWORD *)&v45[76];
        _os_log_send_and_compose_impl(2, 0, __src, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxStreamed, Fix, 1, ll, %{private}.7f, %{private}.7f, acc, %{public}.2f, speed, %{private}.1f, course, %{private}.1f, type, %{public}d, alt, %{private}.1f, altunc, %{public}.1f,ellipsoidalAlt,%{private}.1f,speedUnc,%{private}.1f,courseUnc,%{private}.1f,signalEnv,%{private}d,timestamp,%{public}.3f", buf, 124);
        v43 = (char *)v42;
        sub_100512490("Generic", 1, 0, 2, "void CLStreamedLocationProvider::handleLocationMessage(NSDictionary *)", "%s\n", v42);
        if (v43 != __src)
          free(v43);
      }
      *(_DWORD *)__src = 0;
      (*((void (**)(id *, _BYTE *, _BYTE *, uint64_t, uint64_t, _QWORD))*a1 + 19))(a1, __src, v45, 1, 0xFFFFFFFFLL, 0);
      objc_msgSend(v6, "clientLocation");
      if (*(_DWORD *)&__src[96] == 1)
      {
        v32 = 4.0;
      }
      else
      {
        objc_msgSend(v6, "clientLocation");
        v32 = 5.0;
        if (*(_DWORD *)&v74[6] == 9)
          v32 = 4.0;
      }
      if (v12 > v32)
        v32 = v12;
      objc_msgSend(a1[20], "setNextFireDelay:", v32);

      v33 = v62;
      if (v62)
      {
        v34 = (unint64_t *)&v62->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      if (v60 < 0)
        operator delete(__p);
      v36 = v58;
      if (v58)
      {
        v37 = (unint64_t *)&v58->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
          std::__shared_weak_count::__release_weak(v36);
        }
      }
      v39 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
      if (*((_QWORD *)&v50 + 1))
      {
        v40 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v41 = __ldaxr(v40);
        while (__stlxr(v41 - 1, v40));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
          std::__shared_weak_count::__release_weak(v39);
        }
      }
      return;
    }
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v20 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      objc_msgSend(v6, "clientLocation");
      v21 = *(_QWORD *)&__src[76];
      objc_msgSend(v6, "clientLocation");
      *(_DWORD *)buf = 68290050;
      *(_WORD *)&v65[4] = 2082;
      *(_DWORD *)v65 = 0;
      *(_QWORD *)&v65[6] = "";
      *(_WORD *)&v65[14] = 2050;
      *(_QWORD *)&v65[16] = v21;
      *(_WORD *)&v65[24] = 2050;
      *(double *)&v65[26] = v11;
      *(_WORD *)&v65[34] = 2050;
      *(double *)&v65[36] = v12;
      *(_WORD *)&v65[44] = 1026;
      *(_DWORD *)&v65[46] = v46;
      v14 = "{\"msg%{public}.0s\":\"Dropping expired location\", \"timestamp\":\"%{public}f\", \"timeout\":\"%{public}f\""
            ", \"timeLeft\":\"%{public}f\", \"type\":%{public}d}";
      v15 = buf;
      v16 = v20;
      v17 = 54;
      goto LABEL_22;
    }
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      *(_QWORD *)__src = 68289283;
      *(_WORD *)&__src[8] = 2082;
      *(_QWORD *)&__src[10] = "";
      *(_WORD *)&__src[18] = 2113;
      *(_QWORD *)&__src[20] = a2;
      v14 = "{\"msg%{public}.0s\":\"Missing data\", \"payload\":%{private, location:escape_only}@}";
      v15 = __src;
      v16 = v13;
      v17 = 28;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v14, v15, v17);
    }
  }
}

void sub_1004B4EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B4F0C(uint64_t a1)
{

  sub_100261F44(a1 + 1160);
  if (*(char *)(a1 + 927) < 0)
    operator delete(*(void **)(a1 + 904));
  sub_100261F44(a1 + 800);
  sub_100261F44(a1 + 680);
  return a1;
}

void sub_1004B55D0(id a1, RPCompanionLinkDevice *a2)
{
  const char *v3;
  const char *v4;
  NSObject *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  unsigned int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  id v31;

  if (-[RPCompanionLinkDevice model](a2, "model"))
    v3 = (const char *)objc_msgSend(-[RPCompanionLinkDevice model](a2, "model"), "UTF8String");
  else
    v3 = "Unknown Model";
  if (-[RPCompanionLinkDevice name](a2, "name"))
    v4 = (const char *)objc_msgSend(-[RPCompanionLinkDevice name](a2, "name"), "UTF8String");
  else
    v4 = "Unknown Name";
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v5 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v6 = (-[RPCompanionLinkDevice statusFlags](a2, "statusFlags") >> 24) & 1;
    if (a2)
    {
      -[RPCompanionLinkDevice operatingSystemVersion](a2, "operatingSystemVersion");
      v7 = v13;
      -[RPCompanionLinkDevice operatingSystemVersion](a2, "operatingSystemVersion");
      v8 = v11;
    }
    else
    {
      v8 = 0;
      v7 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v10 = 0;
      v11 = 0;
      v12 = 0;
    }
    v9 = objc_msgSend(-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier", v10, v11, v12, v13, v14, v15), "UTF8String");
    *(_DWORD *)buf = 68290563;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = v3;
    v22 = 2081;
    v23 = v4;
    v24 = 1026;
    v25 = v6;
    v26 = 2050;
    v27 = v7;
    v28 = 2050;
    v29 = v8;
    v30 = 2082;
    v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient listener found nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"USB?\":%{public}hhd, \"major\":%{public}ld, \"minor\":%{public}ld, \"effectiveID\":%{public, location:escape_only}s}", buf, 0x4Au);
  }
}

void sub_1004B57A4(id a1, RPCompanionLinkDevice *a2)
{
  const char *v3;
  const char *v4;
  NSObject *v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  id v14;

  if (-[RPCompanionLinkDevice model](a2, "model"))
    v3 = (const char *)objc_msgSend(-[RPCompanionLinkDevice model](a2, "model"), "UTF8String");
  else
    v3 = "Unknown Model";
  if (-[RPCompanionLinkDevice name](a2, "name"))
    v4 = (const char *)objc_msgSend(-[RPCompanionLinkDevice name](a2, "name"), "UTF8String");
  else
    v4 = "Unknown Name";
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v5 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289795;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2082;
    v10 = v3;
    v11 = 2081;
    v12 = v4;
    v13 = 2082;
    v14 = objc_msgSend(-[RPCompanionLinkDevice effectiveIdentifier](a2, "effectiveIdentifier"), "UTF8String");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#Multiclient listener lost contact with nearby device\", \"model\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s, \"effectiveID\":%{public, location:escape_only}s}", (uint8_t *)v6, 0x30u);
  }
}

void sub_1004B58FC(id a1, NSError *a2)
{
  uint64_t v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  uint64_t v8;
  int v9;
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  NSError *v14;

  if (a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v3 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v9 = 68289282;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2114;
      v14 = a2;
      v4 = "{\"msg%{public}.0s\":\"#Multiclient failed to setup nearby device listener\", \"error\":%{public, location:escape_only}@}";
      v5 = v3;
      v6 = OS_LOG_TYPE_DEFAULT;
      v7 = 28;
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v5, v6, v4, (uint8_t *)&v9, v7);
    }
  }
  else
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v8 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v9 = 68289026;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v4 = "{\"msg%{public}.0s\":\"#Multiclient nearby device listener ready\"}";
      v5 = v8;
      v6 = OS_LOG_TYPE_INFO;
      v7 = 18;
      goto LABEL_10;
    }
  }
}

void sub_1004B6744(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  NSObject *v3;
  id v5;
  id v6;
  NSObject *v7;
  _QWORD v8[7];
  __int128 v9;
  uint64_t v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;

  if (a2)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v2 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient probe client failed to register\"}", buf, 0x12u);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v3 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      *(_DWORD *)buf = 68289026;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient probe client failed to register", "{\"msg%{public}.0s\":\"#Multiclient probe client failed to register\"}", buf, 0x12u);
    }
  }
  else
  {
    v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "destinationDevice"), "effectiveIdentifier");
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "destinationDevice"), "name");
    v7 = objc_msgSend(*(id *)(a1 + 40), "requestQ");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    v8[2] = sub_1004B6930;
    v8[3] = &unk_10213E338;
    v8[4] = v5;
    v8[5] = v6;
    v8[6] = *(_QWORD *)(a1 + 32);
    v9 = *(_OWORD *)(a1 + 48);
    v10 = *(_QWORD *)(a1 + 64);
    dispatch_async(v7, v8);
  }
}

id sub_1004B6930(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  int8x16_t v10;
  uint64_t v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  id v17;
  __int16 v18;
  id v19;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10213E450);
  v2 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "UTF8String");
    v4 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2082;
    v17 = v3;
    v18 = 2081;
    v19 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient probing potential server\", \"remote\":%{public, location:escape_only}s, \"name\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v5 = *(void **)(a1 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1004B6A9C;
  v9[3] = &unk_10213E310;
  v10 = vextq_s8(*(int8x16_t *)(a1 + 32), *(int8x16_t *)(a1 + 32), 8uLL);
  v7 = *(_QWORD *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  return objc_msgSend(v5, "sendRequestID:request:destinationID:options:responseHandler:", CFSTR("com.apple.locationd.rapport.availability-interest"), v6, RPDestinationIdentifierDirectPeer, v7, v9);
}

void sub_1004B6A9C(id *a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  id v11;
  NSMutableDictionary *v12;
  NSObject *v13;
  id v14;
  id v15;
  int v16;
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  id v21;
  __int16 v22;
  id v23;
  __int16 v24;
  NSMutableDictionary *v25;

  if (a4)
  {
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_ERROR))
    {
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Multiclient error invoking interest request\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
      if (qword_1022A01E0 != -1)
        dispatch_once(&qword_1022A01E0, &stru_10213E450);
    }
    v6 = qword_1022A01E8;
    if (os_signpost_enabled((os_log_t)qword_1022A01E8))
    {
      v7 = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      v16 = 68289282;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#Multiclient error invoking interest request", "{\"msg%{public}.0s\":\"#Multiclient error invoking interest request\", \"error\":%{public, location:escape_only}s}", (uint8_t *)&v16, 0x1Cu);
    }
  }
  else
  {
    v11 = objc_msgSend(a3, "objectForKeyedSubscript:", RPOptionSenderID);
    v12 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", a2);
    -[NSMutableDictionary addEntriesFromDictionary:](v12, "addEntriesFromDictionary:", a3);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10213E450);
    v13 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_INFO))
    {
      v14 = objc_msgSend(a1[4], "UTF8String");
      v15 = objc_msgSend(a1[5], "UTF8String");
      v16 = 68289795;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2081;
      v21 = v14;
      v22 = 2082;
      v23 = v15;
      v24 = 2114;
      v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#Multiclient received availability response\", \"name\":%{private, location:escape_only}s, \"remote\":%{public, location:escape_only}s, \"resp\":%{public, location:escape_only}@}", (uint8_t *)&v16, 0x30u);
    }
    objc_msgSend(a1[6], "setObject:forKeyedSubscript:", v12, v11);
  }
}

uint64_t sub_1004B6D44(uint64_t a1)
{

  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = 0;
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_1004B6DBC()
{
  operator new();
}

void sub_1004B6E64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

uint64_t sub_1004B6EA0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_10213E0A8;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_1006DB4AC(a1);
}

void sub_1004B6EFC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_10213E0A8;
  v2 = a1[16];
  a1[16] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[15];
  a1[15] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_1006DB4AC(a1);
  operator delete();
}

uint64_t sub_1004B6F6C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_1004B796C(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_1004B7018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004B702C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E430);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_10213E430);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10213E430);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10213E430);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLLocationProvider_Type::Notification, CLLocationProvider_Type::NotificationData, char, CLLocationProvider_Type::RegInfo>::listClients() [Notification_T = CLLocationProvider_Type::Notification, NotificationData_T = CLLocationProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationProvider_Type::RegInfo]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1004B75D8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004B7604(id a1)
{
  qword_1022A01E8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Streaming");
}

void sub_1004B7630(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

void sub_1004B765C(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1004B7688(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

uint64_t sub_1004B76B4(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 8 * a3;
    do
    {
      sub_1004B7728(a1, a2, a2);
      a2 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  return a1;
}

void sub_1004B7714(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100067AC4(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004B7728(uint64_t a1, int *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  void **v9;
  _QWORD *v10;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v7 <= v6)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      v10 = *v9;
      if (*v9)
      {
        do
        {
          v11 = v10[1];
          if (v11 == v6)
          {
            if (*((_DWORD *)v10 + 4) == (_DWORD)v6)
              return v10;
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v11 >= v7)
                v11 %= v7;
            }
            else
            {
              v11 &= v7 - 1;
            }
            if (v11 != v3)
              break;
          }
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
    }
  }
  v10 = operator new(0x18uLL);
  *v10 = 0;
  v10[1] = v6;
  v10[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_10012E444(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *v10 = *v19;
LABEL_38:
    *v19 = v10;
    goto LABEL_39;
  }
  *v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*v10)
  {
    v20 = *(_QWORD *)(*v10 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v10;
}

void sub_1004B792C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1004B7940(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_1004B796C@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x610uLL);
  result = sub_1004B79C4(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004B79B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004B79C4(_QWORD *a1, uint64_t a2)
{
  a1[2] = 0;
  *a1 = off_10213E500;
  a1[1] = 0;
  sub_10011D234((uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_1004B79FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004B7A10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213E500;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004B7A24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213E500;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004B7A58(uint64_t a1, uint64_t a2)
{

  sub_100261F44(a2 + 1160);
  if (*(char *)(a2 + 927) < 0)
    operator delete(*(void **)(a2 + 904));
  sub_100261F44(a2 + 800);
  return sub_100261F44(a2 + 680);
}

void sub_1004B7ADC(void *a1, int a2, int a3, int a4, const char *a5, const char *a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_signpost_emit_with_name_impl(a1, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, a5, a6, &buf, 0x30u);
}

BOOL sub_1004B7AFC()
{
  return os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_FAULT);
}

void sub_1004B7B10(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_FAULT, a4, &buf, 0x30u);
}

void sub_1004B7B24(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  NSObject *v13;

  _os_log_impl(a1, v13, OS_LOG_TYPE_INFO, a4, &buf, 0x30u);
}

BOOL sub_1004B7B38()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 488), OS_LOG_TYPE_INFO);
}

BOOL sub_1004B7B48()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 488));
}

void sub_1004B7B54()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BB2CB0;
      v1[3] = unk_101BB2CC0;
      v1[4] = xmmword_101BB2CD0;
      v1[0] = xmmword_101BB2C90;
      v1[1] = unk_101BB2CA0;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1004B7C28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

uint64_t sub_1004B7C40()
{
  __int128 v1;
  uint64_t v2;

  v1 = xmmword_101BB2CE8;
  v2 = 0x100000002;
  sub_1004B76B4((uint64_t)&unk_102301468, (int *)&v1, 3);
  return __cxa_atexit((void (*)(void *))sub_1004AF738, &unk_102301468, (void *)&_mh_execute_header);
}

uint64_t sub_1004B7EF4(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t result;
  ALCMMotionContextMotionState *v16;
  ALCLNatalieFeatures *v17;
  char v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 36) |= 1u;
        v13 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v13 <= 0xFFFFFFFFFFFFFFF7 && v13 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v14 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v13);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v13 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v14 = 0;
        }
        *(_QWORD *)(a1 + 8) = v14;
        goto LABEL_42;
      case 2u:
        v16 = objc_alloc_init(ALCMMotionContextMotionState);

        *(_QWORD *)(a1 + 16) = v16;
        v24 = 0;
        v25 = 0;
        if (!PBReaderPlaceMark(a2, &v24) || (sub_1004B9B2C((uint64_t)v16, a2) & 1) == 0)
          return 0;
        goto LABEL_28;
      case 3u:
        v17 = objc_alloc_init(ALCLNatalieFeatures);

        *(_QWORD *)(a1 + 24) = v17;
        v24 = 0;
        v25 = 0;
        if (PBReaderPlaceMark(a2, &v24) && (sub_1004C642C((uint64_t)v17, a2) & 1) != 0)
        {
LABEL_28:
          PBReaderRecallMark(a2, &v24);
LABEL_42:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      case 4u:
        v18 = 0;
        v19 = 0;
        v20 = 0;
        while (2)
        {
          v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v22 = v21 + 1;
          if (v21 == -1 || v22 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v23 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22;
            v20 |= (unint64_t)(v23 & 0x7F) << v18;
            if (v23 < 0)
            {
              v18 += 7;
              v10 = v19++ >= 9;
              if (v10)
              {
                v20 = 0;
                goto LABEL_39;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v20 = 0;
LABEL_39:
        *(_BYTE *)(a1 + 32) = v20 != 0;
        goto LABEL_42;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_42;
    }
  }
}

uint64_t sub_1004B9B2C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unint64_t v32;
  char v33;
  char v34;
  unsigned int v35;
  uint64_t v36;
  unint64_t v37;
  char v38;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  unint64_t v46;
  char v47;
  char v48;
  unsigned int v49;
  uint64_t v50;
  unint64_t v51;
  char v52;
  uint64_t v53;
  BOOL v54;
  uint64_t v55;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_84;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_86;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_84:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_86:
        v53 = 36;
        goto LABEL_116;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_90:
        v53 = 16;
        goto LABEL_116;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 4u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_94;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_94:
        v53 = 24;
        goto LABEL_116;
      case 4u:
        v26 = 0;
        v27 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 8u;
        while (2)
        {
          v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v28 == -1 || v28 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 1;
            v14 |= (unint64_t)(v29 & 0x7F) << v26;
            if (v29 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_98;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_98:
        v53 = 28;
        goto LABEL_116;
      case 5u:
        v30 = 0;
        v31 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 0x10u;
        while (2)
        {
          v32 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v32 == -1 || v32 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v32);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32 + 1;
            v14 |= (unint64_t)(v33 & 0x7F) << v30;
            if (v33 < 0)
            {
              v30 += 7;
              v9 = v31++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_102;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_102:
        v53 = 32;
        goto LABEL_116;
      case 6u:
        v34 = 0;
        v35 = 0;
        v36 = 0;
        *(_BYTE *)(a1 + 44) |= 0x40u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v37 == -1 || v37 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v38 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v37 + 1;
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if (v38 < 0)
            {
              v34 += 7;
              v9 = v35++ >= 9;
              if (v9)
              {
                v36 = 0;
                goto LABEL_106;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v36 = 0;
LABEL_106:
        v54 = v36 != 0;
        v55 = 41;
        goto LABEL_111;
      case 7u:
        v39 = 0;
        v40 = 0;
        v41 = 0;
        *(_BYTE *)(a1 + 44) |= 0x20u;
        while (2)
        {
          v42 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v42 == -1 || v42 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v42);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42 + 1;
            v41 |= (unint64_t)(v43 & 0x7F) << v39;
            if (v43 < 0)
            {
              v39 += 7;
              v9 = v40++ >= 9;
              if (v9)
              {
                v41 = 0;
                goto LABEL_110;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v41 = 0;
LABEL_110:
        v54 = v41 != 0;
        v55 = 40;
LABEL_111:
        *(_BYTE *)(a1 + v55) = v54;
        continue;
      case 8u:
        v44 = 0;
        v45 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 44) |= 2u;
        while (2)
        {
          v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v46 == -1 || v46 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v47 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v46 + 1;
            v14 |= (unint64_t)(v47 & 0x7F) << v44;
            if (v47 < 0)
            {
              v44 += 7;
              v9 = v45++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_115;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_115:
        v53 = 20;
LABEL_116:
        *(_DWORD *)(a1 + v53) = v14;
        continue;
      case 9u:
        v48 = 0;
        v49 = 0;
        v50 = 0;
        *(_BYTE *)(a1 + 44) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v51 == -1 || v51 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v52 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 1;
      v50 |= (unint64_t)(v52 & 0x7F) << v48;
      if ((v52 & 0x80) == 0)
        goto LABEL_120;
      v48 += 7;
      v9 = v49++ >= 9;
      if (v9)
      {
        v50 = 0;
        goto LABEL_122;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_120:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v50 = 0;
LABEL_122:
    *(_QWORD *)(a1 + 8) = v50;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t *sub_1004BAAE8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_1004BAB48((uint64_t)a1, v2);
  return a1;
}

void sub_1004BAB1C(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1004BAB48(uint64_t a1, uint64_t a2)
{
  void *v2;

  if (a2)
  {
    v2 = *(void **)(a2 + 40);
    if (v2)
    {
      *(_QWORD *)(a2 + 48) = v2;
      operator delete(v2);
    }
    operator delete();
  }
}

void sub_1004BABB8(id a1)
{
  _QWORD v1[10];
  _QWORD v2[10];

  v1[0] = CFSTR("gsp10-ssl.apple.com");
  v2[0] = +[NSNull null](NSNull, "null");
  v1[1] = CFSTR("gs-loc.apple.com");
  v2[1] = +[NSNull null](NSNull, "null");
  v2[2] = CFSTR("1.2.840.113635.100.6.27.35");
  v1[2] = CFSTR("iphone-ld.apple.com");
  v1[3] = CFSTR("configuration.apple.com");
  v2[3] = +[NSNull null](NSNull, "null");
  v1[4] = CFSTR("cl5.apple.com");
  v2[4] = +[NSNull null](NSNull, "null");
  v1[5] = CFSTR("cl4.apple.com");
  v2[5] = +[NSNull null](NSNull, "null");
  v1[6] = CFSTR("cl3.apple.com");
  v2[6] = +[NSNull null](NSNull, "null");
  v1[7] = CFSTR("cl2.apple.com");
  v2[7] = +[NSNull null](NSNull, "null");
  v1[8] = CFSTR("ingest.apple-studies.com");
  v2[8] = +[NSNull null](NSNull, "null");
  v1[9] = CFSTR("ingest.stg.apple-studies.com");
  v2[9] = +[NSNull null](NSNull, "null");
  qword_1023014D8 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v2, v1, 10);
}

void sub_1004BB380(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

uint64_t sub_1004BB7FC(uint64_t a1, uint64_t a2)
{
  int *v3;
  char **v5;
  char **v6;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char **v14;
  char **v15;
  char **v16;
  char v17;
  unsigned int v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char **v33;
  char **v34;
  char **v35;
  char **v36;
  char **v37;
  int *v38;
  uint64_t result;
  unint64_t v40;
  uint64_t v41;
  char v42;
  unsigned int v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  unint64_t v47;
  int v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  char v53;
  unsigned int v54;
  uint64_t v55;
  unint64_t v56;
  char v57;
  char v58;
  unsigned int v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  unint64_t v63;
  unint64_t v64;
  char v65;
  unsigned int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v3 = (int *)&OBJC_IVAR___PBDataReader__error;
  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v5 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v6 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v7 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v8 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v9 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v16 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    do
    {
      if (*(_BYTE *)(a2 + *v3))
        break;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      while (1)
      {
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v21 = v20 + 1;
        if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
        v19 |= (unint64_t)(v22 & 0x7F) << v17;
        if ((v22 & 0x80) == 0)
          goto LABEL_12;
        v17 += 7;
        v23 = v18++ >= 9;
        if (v23)
        {
          v19 = 0;
          v24 = *v3;
          v25 = *(unsigned __int8 *)(a2 + v24);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + *v3) = 1;
LABEL_12:
      v24 = *v3;
      v25 = *(unsigned __int8 *)(a2 + v24);
      if (*(_BYTE *)(a2 + v24))
        v19 = 0;
LABEL_14:
      if (v25 || (v19 & 7) == 4)
        break;
      switch((v19 >> 3))
      {
        case 1u:
          v27 = 0;
          v28 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + *((int *)v5 + 905)) |= 4u;
          while (1)
          {
            v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v31 = v30 + 1;
            if (v30 == -1 || v31 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
            v29 |= (unint64_t)(v32 & 0x7F) << v27;
            if ((v32 & 0x80) == 0)
              goto LABEL_81;
            v27 += 7;
            v23 = v28++ >= 9;
            if (v23)
            {
              LODWORD(v29) = 0;
              goto LABEL_83;
            }
          }
          *(_BYTE *)(a2 + *v3) = 1;
LABEL_81:
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_83:
          v71 = *((int *)v6 + 906);
          goto LABEL_96;
        case 2u:
          v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v40 <= 0xFFFFFFFFFFFFFFF7 && v40 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v41 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v40 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v41 = 0;
          }
          v72 = *((int *)v7 + 910);
          goto LABEL_118;
        case 3u:
          v42 = 0;
          v43 = 0;
          v29 = 0;
          *(_BYTE *)(a1 + *((int *)v5 + 905)) |= 2u;
          while (2)
          {
            v44 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v45 = v44 + 1;
            if (v44 == -1 || v45 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v46 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v44);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v45;
              v29 |= (unint64_t)(v46 & 0x7F) << v42;
              if (v46 < 0)
              {
                v42 += 7;
                v23 = v43++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_87;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_87:
          v71 = *((int *)v8 + 907);
          goto LABEL_96;
        case 4u:
          v47 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v47 <= 0xFFFFFFFFFFFFFFFBLL && v47 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v48 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v47);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v48 = 0;
          }
          v73 = *((int *)v9 + 911);
          goto LABEL_115;
        case 5u:
          v49 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v49 <= 0xFFFFFFFFFFFFFFFBLL && v49 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v48 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v49);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v49 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v48 = 0;
          }
          v73 = *((int *)v10 + 912);
          goto LABEL_115;
        case 6u:
          v50 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v50 <= 0xFFFFFFFFFFFFFFFBLL && v50 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v48 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v50);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v50 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v48 = 0;
          }
          v73 = *((int *)v11 + 913);
          goto LABEL_115;
        case 7u:
          v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v51 <= 0xFFFFFFFFFFFFFFF7 && v51 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v41 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v51 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v41 = 0;
          }
          v72 = *((int *)v12 + 914);
          goto LABEL_118;
        case 8u:
          v52 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v52 <= 0xFFFFFFFFFFFFFFFBLL && v52 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v48 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v52);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v48 = 0;
          }
          v73 = *((int *)v13 + 915);
          goto LABEL_115;
        case 9u:
          v53 = 0;
          v54 = 0;
          v29 = 0;
          while (2)
          {
            v55 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v56 = v55 + 1;
            if (v55 == -1 || v56 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v57 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v55);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v56;
              v29 |= (unint64_t)(v57 & 0x7F) << v53;
              if (v57 < 0)
              {
                v53 += 7;
                v23 = v54++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_91;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_91:
          v71 = *((int *)v14 + 916);
          goto LABEL_96;
        case 0xAu:
          v58 = 0;
          v59 = 0;
          v29 = 0;
          while (2)
          {
            v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v61 = v60 + 1;
            if (v60 == -1 || v61 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + *v3) = 1;
            }
            else
            {
              v62 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v61;
              v29 |= (unint64_t)(v62 & 0x7F) << v58;
              if (v62 < 0)
              {
                v58 += 7;
                v23 = v59++ >= 9;
                if (v23)
                {
                  LODWORD(v29) = 0;
                  goto LABEL_95;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + *v3))
            LODWORD(v29) = 0;
LABEL_95:
          v71 = *((int *)v15 + 917);
LABEL_96:
          *(_DWORD *)(a1 + v71) = v29;
          continue;
        case 0xBu:
          v63 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v63 <= 0xFFFFFFFFFFFFFFFBLL && v63 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v48 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v63);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v63 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + v24) = 1;
            v48 = 0;
          }
          v73 = *((int *)v16 + 918);
LABEL_115:
          *(_DWORD *)(a1 + v73) = v48;
          continue;
        case 0xCu:
          *(_BYTE *)(a1 + *((int *)v5 + 905)) |= 1u;
          v64 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v64 <= 0xFFFFFFFFFFFFFFF7 && v64 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v41 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v64);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v64 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + *v3) = 1;
            v41 = 0;
          }
          v72 = 24;
LABEL_118:
          *(_QWORD *)(a1 + v72) = v41;
          continue;
        case 0xDu:
          v65 = 0;
          v66 = 0;
          v67 = 0;
          *(_BYTE *)(a1 + *((int *)v5 + 905)) |= 8u;
          break;
        default:
          v33 = v6;
          v34 = v7;
          v35 = v5;
          v36 = v8;
          v37 = v9;
          v74 = a1;
          v38 = v3;
          result = PBReaderSkipValueWithTag(a2);
          v16 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v3 = v38;
          v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          a1 = v74;
          v9 = v37;
          v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v8 = v36;
          v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v5 = v35;
          v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v7 = v34;
          v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v6 = v33;
          v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v68 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v69 = v68 + 1;
        if (v68 == -1 || v69 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v70 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v68);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69;
        v67 |= (unint64_t)(v70 & 0x7F) << v65;
        if ((v70 & 0x80) == 0)
          goto LABEL_98;
        v65 += 7;
        v23 = v66++ >= 9;
        if (v23)
        {
          v67 = 0;
          goto LABEL_100;
        }
      }
      *(_BYTE *)(a2 + *v3) = 1;
LABEL_98:
      if (*(_BYTE *)(a2 + *v3))
        v67 = 0;
LABEL_100:
      *(_BYTE *)(a1 + 68) = v67 != 0;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + *v3) == 0;
}

_QWORD *sub_1004BCC20(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1004BCCD4((uint64_t)a1, "CardioChangeFeatureHistory", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_10213E620;
  a1[9] = off_10213E6D0;
  sub_1004BD418((uint64_t)a1);
  return a1;
}

void sub_1004BCCA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _QWORD *v15;

  sub_1004BD138(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BCCD4(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_102138DD8;
  *(_QWORD *)a1 = off_10213E880;
  *(_QWORD *)(a1 + 72) = off_10213E928;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_10213E880;
  *(_QWORD *)(a1 + 72) = off_10213E928;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_DWORD *)(a1 + 240) = -1;
  *(_QWORD *)(a1 + 248) = 0;
  *(_DWORD *)(a1 + 256) = 12000;
  *(_QWORD *)(a1 + 264) = off_102138DA8;
  sub_10042776C((_QWORD *)(a1 + 272));
  *(_QWORD *)(a1 + 272) = &off_102138DD8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_1004BD08C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[33] = off_102138DA8;
  sub_100427950(v27);
  sub_10034111C(v26);
  sub_101138068(a12);
  *v24 = off_102138DA8;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_1004BD130()
{
  JUMPOUT(0x1004BD110);
}

_QWORD *sub_1004BD138(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_10213E928;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_10213E880;
  a1[33] = off_102138DA8;
  sub_100427950(a1 + 34);
  sub_10034111C(a1 + 22);
  sub_101138068(v2);
  *a1 = off_102138DA8;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_1004BD1B8(uint64_t a1)
{
  return sub_1004BD138((_QWORD *)(a1 - 72));
}

void sub_1004BD1C0(_QWORD *a1)
{
  sub_1004BD138(a1);
  operator delete();
}

void sub_1004BD1E4(uint64_t a1)
{
  sub_1004BD138((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_1004BD20C(uint64_t a1, uint64_t a2)
{
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) == 1.79769313e308 && sub_10008950C(a1 + 72))
  {
    sub_10001E638(*(_QWORD *)(a1 + 80));
    CFAbsoluteTimeGetCurrent();
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM CardioChangeFeatureHistory WHERE startTime < ?");
  }
  return -1;
}

void sub_1004BD324(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BD344(uint64_t a1, uint64_t a2)
{
  return sub_1004BD20C(a1 - 72, a2);
}

uint64_t sub_1004BD34C(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM CardioChangeFeatureHistory");
  return 0xFFFFFFFFLL;
}

void sub_1004BD3EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BD410(uint64_t a1)
{
  return sub_1004BD34C(a1 - 72);
}

uint64_t sub_1004BD418(uint64_t a1)
{
  uint64_t result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if ((_DWORD)result)
    return sub_100634364(*(_QWORD *)(a1 + 80), "CardioChangeFeatureHistory", (const char **)&off_10213E760, (const std::string::value_type **)&off_1022A20C0, 0);
  return result;
}

uint64_t sub_1004BD46C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "INSERT INTO CardioChangeFeatureHistory (startTime, aggregateFeatureName, aggregateFeatureValue) VALUES (?, ?, ?)");
  return result;
}

void sub_1004BD534(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1004BD554(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  sub_1004BD560(a2, a3);
}

void sub_1004BD560(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 3);
}

uint64_t sub_1004BD5D4(uint64_t a1, _QWORD *a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[16];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
  {
    a2[1] = *a2;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CardioChangeFeatureHistory WHERE startTime >= ? ORDER BY startTime");
  }
  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_10213E850);
  v4 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CardioChangeFeatureHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_10213E850);
    LOWORD(v8) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 2, "CardioChangeFeatureHistory, DB not accessible", &v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "CMError CLCardioChangeFeatureHistoryDb::querySinceTime(CFAbsoluteTime, std::vector<CLCardioChange::AggregateFeatureEntry> &) const", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return 109;
}

void sub_1004BD8E8(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BD914(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_1004BD560(a1, a2);
  return 0;
}

uint64_t sub_1004BD970(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  uint64_t v6;
  uint8_t buf[1640];

  if ((sub_10008950C(a1 + 72) & 1) != 0)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CardioChangeFeatureHistory WHERE aggregateFeatureName = ? ORDER BY id DESC LIMIT 1");
  if (qword_10229FF50 != -1)
    dispatch_once(&qword_10229FF50, &stru_10213E850);
  v2 = qword_10229FF58;
  if (os_log_type_enabled((os_log_t)qword_10229FF58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CardioChangeFeatureHistory, DB not accessible", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF50 != -1)
      dispatch_once(&qword_10229FF50, &stru_10213E850);
    LOWORD(v6) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF58, 2, "CardioChangeFeatureHistory, DB not accessible", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "CMError CLCardioChangeFeatureHistoryDb::getMostRecentEntryForFeature(CLCardioChange::AggregateFeatureEntry &, CLCardioChange::AggregateFeatureType) const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return 109;
}

void sub_1004BDCBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BDCE8(uint64_t a1)
{
  if (sub_10008950C(a1 + 72))
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * FROM CardioChangeFeatureHistory ORDER BY id DESC LIMIT 1");
  return 2;
}

void sub_1004BDD68(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004BDD88(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  __int128 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_1018FC540(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((SBYTE7(v14) & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((SBYTE7(v14) & 0x80u) == 0)
      v8 = BYTE7(v14);
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if (SBYTE7(v14) < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((SBYTE7(v14) & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_1004BE058(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE0C0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  __int128 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((SBYTE7(v14) & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((SBYTE7(v14) & 0x80u) == 0)
          v7 = BYTE7(v14);
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if (SBYTE7(v14) < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((SBYTE7(v14) & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1018FC6AC(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_1004BE3D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BE43C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10213E968);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213E968);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213E968);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::setDatabaseAccessible() [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_1004BEA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1004BEA38(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *a2 = *(_OWORD *)a3;
  a2[1] = v4;
  return result;
}

id *sub_1004BEA44(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  double v33;
  int v34;
  uint64_t v35;
  id v36[2];
  int v37;
  double v38;
  __int16 v39;
  uint64_t v40;
  uint8_t buf[4];
  double v42;
  __int16 v43;
  uint64_t v44;

  v36[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v36[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v36);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v32 = 0;
  v33 = 0.0;
  v34 = -1;
  v35 = 0;
  v6 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 104))(a1, &v32);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213E968);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10213E968);
        LOWORD(v37) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v37, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v33;
    v9 = v7 - v33;
    if (v7 - v33 < 0.0)
      v9 = -(v7 - v33);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213E968);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v42 = v33;
        v43 = 2050;
        v44 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10213E968);
        v23 = *(_QWORD *)(a2 + 8);
        v37 = 134349312;
        v38 = v33;
        v39 = 2050;
        v40 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v37, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v33;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10213E968);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v42 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_10213E968);
          v26 = *(double *)(a2 + 8);
          v37 = 134217984;
          v38 = v26;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v37));
          v28 = (uint8_t *)v27;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v27);
          if (v28 != buf)
            free(v28);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v31 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_10213E968);
        v18 = v31;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v42 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_10213E968);
        v37 = 134217984;
        v38 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v37));
        v30 = (uint8_t *)v29;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLCardioChange::AggregateFeatureEntry, CLActivityDB::ClassBDataProtectionPolicy>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLCardioChange::AggregateFeatureEntry, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v29);
        if (v30 != buf)
          free(v30);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, &v32, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v36);
}

void sub_1004BF190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004BF1BC(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1018FC818(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_1004BF41C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FC984(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_1004BF654(uint64_t a1)
{
  return sub_1004BE43C(a1 - 72);
}

void sub_1004BF65C(id a1)
{
  qword_10229FF58 = (uint64_t)os_log_create("com.apple.locationd.Motion", "CardioChange");
}

uint64_t sub_1004BF688(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FCAF0(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

void sub_1004BF8B0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004BFBFC(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  char v29;
  unsigned int v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  char v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        *(_BYTE *)(a1 + 52) |= 2u;
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v47 = 24;
        goto LABEL_91;
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_67;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_67:
        v46 = 32;
        goto LABEL_80;
      case 3u:
        v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v23 <= 0xFFFFFFFFFFFFFFF7 && v23 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v47 = 8;
        goto LABEL_91;
      case 4u:
        v24 = 0;
        v25 = 0;
        v19 = 0;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v19 |= (unint64_t)(v28 & 0x7F) << v24;
            if (v28 < 0)
            {
              v24 += 7;
              v10 = v25++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_71:
        v46 = 36;
        goto LABEL_80;
      case 5u:
        v29 = 0;
        v30 = 0;
        v19 = 0;
        while (2)
        {
          v31 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v32 = v31 + 1;
          if (v31 == -1 || v32 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v33 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v31);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v32;
            v19 |= (unint64_t)(v33 & 0x7F) << v29;
            if (v33 < 0)
            {
              v29 += 7;
              v10 = v30++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_75;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_75:
        v46 = 40;
        goto LABEL_80;
      case 6u:
        *(_BYTE *)(a1 + 52) |= 1u;
        v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v34 <= 0xFFFFFFFFFFFFFFF7 && v34 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v47 = 16;
LABEL_91:
        *(_QWORD *)(a1 + v47) = v15;
        continue;
      case 7u:
        v35 = 0;
        v36 = 0;
        v19 = 0;
        *(_BYTE *)(a1 + 52) |= 4u;
        while (2)
        {
          v37 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v38 = v37 + 1;
          if (v37 == -1 || v38 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v39 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v37);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v38;
            v19 |= (unint64_t)(v39 & 0x7F) << v35;
            if (v39 < 0)
            {
              v35 += 7;
              v10 = v36++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_79;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_79:
        v46 = 44;
LABEL_80:
        *(_DWORD *)(a1 + v46) = v19;
        continue;
      case 8u:
        v40 = 0;
        v41 = 0;
        v42 = 0;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v43 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v44 = v43 + 1;
      if (v43 == -1 || v44 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v45 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v43);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v44;
      v42 |= (unint64_t)(v45 & 0x7F) << v40;
      if ((v45 & 0x80) == 0)
        goto LABEL_82;
      v40 += 7;
      v10 = v41++ >= 9;
      if (v10)
      {
        v42 = 0;
        goto LABEL_84;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_82:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v42 = 0;
LABEL_84:
    *(_BYTE *)(a1 + 48) = v42 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

_QWORD *sub_1004C091C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1004C0924(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

id sub_1004C095C(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    sub_1013DF780();
  return objc_msgSend(*(id *)(v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1 + 8), 3, 0);
}

void sub_1004C09EC(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLWifi1SettingsOta::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213E988);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifi1SettingsOta::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213E988);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifi1SettingsOta::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004C0C14((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004C0BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004C0BC4(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = result[1];
  if (v1)
  {
    v2 = result;
    objc_msgSend(*(id *)(v1 + 16), "unregister:forNotification:", *(_QWORD *)(v1 + 8), 3);
    result = (_QWORD *)v2[1];
    v2[1] = 0;
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

uint64_t sub_1004C0C14(uint64_t result, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  if (*a3 == 3)
  {
    v5 = result;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10213E9A8);
    v6 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138477827;
      v13 = sub_10011A5AC(a4);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#Mobile Asset Wifi1 Settings notification data: %{private}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10213E9A8);
      v7 = qword_1022A0058;
      v10 = 138477827;
      v11 = sub_10011A5AC(a4);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "#Mobile Asset Wifi1 Settings notification data: %{private}@", &v10, 12);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "void CLWifi1SettingsOta::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return sub_10132F29C(v5, a4);
  }
  return result;
}

void sub_1004C0DEC(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004C0E18(id a1)
{
  qword_1022A0058 = (uint64_t)os_log_create("com.apple.locationd.Position", "WifiPosition");
}

void sub_1004C0E44()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1004C0EE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1004C0EF8()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1004C0F84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1004C0F9C(uint64_t a1, _QWORD *a2, uint64_t a3, char a4, int a5)
{
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  int v22;
  unint64_t v23;
  int v24;
  int v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  int v33;
  uint8_t buf[4];
  int v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  int v43;

  if (a4)
  {
    v7 = 26;
    v20 = vdupq_n_s64(0x1AuLL);
    v21 = 0;
    v8 = (int)(sub_1001FCBB4() - *(double *)&a3);
    v22 = v8;
    v23 = 0xFFFFFFFF00000000;
    switch(a5)
    {
      case 0:
        v9 = 0;
        v7 = 26;
        v20 = vdupq_n_s64(0x1AuLL);
        v10 = 4;
        v11 = 26;
        goto LABEL_17;
      case 1:
        v11 = a2[16];
        v7 = a2[5];
        v20.i64[0] = v11;
        v20.i64[1] = v7;
        v9 = a2[8];
        v10 = 5;
        goto LABEL_17;
      case 2:
        v11 = a2[16];
        v7 = a2[5];
        v20.i64[0] = v11;
        v20.i64[1] = v7;
        v9 = a2[8];
        v10 = 6;
        goto LABEL_17;
      case 3:
        v11 = a2[16];
        v7 = a2[4];
        v20.i64[0] = v11;
        v20.i64[1] = v7;
        v9 = a2[7];
        v10 = 7;
LABEL_17:
        v21 = v9;
        LODWORD(v23) = v10;
        break;
      default:
        v9 = 0;
        v10 = 0;
        v11 = 26;
        break;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213E9C8);
    v15 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      v35 = v10;
      v36 = 2048;
      v37 = v11;
      v38 = 2048;
      v39 = v7;
      v40 = 2048;
      v41 = v9;
      v42 = 1024;
      v43 = v8;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Escalation analytics, attempting to send event with resolution, %d, escalation type, %ld, workout type, %ld, location type, %ld, escalation durationS, %d", buf, 0x2Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213E9C8);
      v24 = 67110144;
      v25 = v10;
      v26 = 2048;
      v27 = v11;
      v28 = 2048;
      v29 = v7;
      v30 = 2048;
      v31 = v9;
      v32 = 1024;
      v33 = v8;
      LODWORD(v19) = 44;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Escalation analytics, attempting to send event with resolution, %d, escalation type, %ld, workout type, %ld, location type, %ld, escalation durationS, %d", &v24, v19, v20.i64[0], v20.i64[1], v21);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEscalationMetrics::feedEarlyEscalationUpdate(const CLWorkoutPredictor_Type::WorkoutPrediction &, std::optional<CFTimeInterval>, EarlyEscalationResolution)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    sub_1004C13E0(v20.i64, v16);
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213E9C8);
    v12 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      v35 = a5;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Escalation analytics, not tracking an early escalation for resolution %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213E9C8);
      v24 = 67109120;
      v25 = a5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "Escalation analytics, not tracking an early escalation for resolution %d", &v24);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutEscalationMetrics::feedEarlyEscalationUpdate(const CLWorkoutPredictor_Type::WorkoutPrediction &, std::optional<CFTimeInterval>, EarlyEscalationResolution)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
}

void sub_1004C13E0(uint64_t *a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  double v14;
  uint8_t *v15;
  uint8_t *v16;
  double v17;
  uint8_t *v18;
  _QWORD v19[5];
  _DWORD v20[4];
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*((int *)a1 + 6) > 0)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213E9C8);
      v3 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *a1;
        v5 = a1[1];
        v6 = a1[2];
        v7 = *((_DWORD *)a1 + 6);
        v8 = *((_DWORD *)a1 + 7);
        v9 = *((_DWORD *)a1 + 8);
        *(_DWORD *)buf = 68290562;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 1026;
        v26 = v4;
        v27 = 1026;
        v28 = v5;
        v29 = 1026;
        v30 = v6;
        v31 = 1026;
        v32 = v7;
        v33 = 1026;
        v34 = v8;
        v35 = 1026;
        v36 = v9;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending escalation event to CoreAnalytics\", \"escType\":%{public}d, \"workoutType\":%{public}d, \"workoutLocation\":%{public}d, \"escTime\":%{public}d, \"escToWorkout\":%{public}d, \"pctBackgroundEscalation\":%{public}d}", buf, 0x36u);
      }
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      v19[2] = sub_1004C1904;
      v19[3] = &unk_102131FE8;
      v19[4] = a1;
      AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FitnessEscalation"), v19);
      return;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213E9C8);
    v11 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
    {
      v12 = *((_DWORD *)a1 + 6);
      *(_DWORD *)buf = 67109120;
      v22 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Not sending escalation event to CoreAnalytics, invalid escalation time recorded %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213E9C8);
      v13 = *((_DWORD *)a1 + 6);
      v20[0] = 67109120;
      v20[1] = v13;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "Not sending escalation event to CoreAnalytics, invalid escalation time recorded %d", v20);
      v16 = v15;
      sub_100512490("Generic", 1, 0, 0, "static void CLWorkoutEscalationMetrics::sendEventToCoreAnalytics(const WorkoutEscalationEvent &)", "%s\n", v14);
LABEL_26:
      if (v16 != buf)
        free(v16);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213E9C8);
    v10 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Not sending escalation event to CoreAnalytics, no IHA permission", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213E9C8);
      LOWORD(v20[0]) = 0;
      v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Not sending escalation event to CoreAnalytics, no IHA permission", v20, 2);
      v16 = v18;
      sub_100512490("Generic", 1, 0, 2, "static void CLWorkoutEscalationMetrics::sendEventToCoreAnalytics(const WorkoutEscalationEvent &)", "%s\n", v17);
      goto LABEL_26;
    }
  }
}

double sub_1004C17E0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  int v4;
  __int128 v5;

  switch(*(_QWORD *)(a2 + 16))
  {
    case 0:
      if (*(_BYTE *)a1)
      {
        v3 = (uint64_t *)(a1 + 16);
        v4 = 2;
        goto LABEL_11;
      }
      break;
    case 8:
      *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
      *(_QWORD *)(a1 + 32) = 0;
      *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
      *(_DWORD *)(a1 + 48) = -1;
      *(_BYTE *)a1 = 1;
      *(_QWORD *)&v5 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 48);
      break;
    case 9:
      if (*(_BYTE *)a1)
      {
        v5 = *(_OWORD *)(a2 + 112);
        *(_OWORD *)(a1 + 24) = v5;
      }
      break;
    case 0xALL:
      if (*(_BYTE *)a1)
      {
        v3 = (uint64_t *)(a1 + 16);
        v4 = 1;
        goto LABEL_11;
      }
      break;
    case 0xBLL:
      if (*(_BYTE *)a1)
      {
        v3 = (uint64_t *)(a1 + 16);
        v4 = 3;
LABEL_11:
        *(_DWORD *)(a1 + 40) = (int)(*(double *)(a2 + 24) - *(double *)(a1 + 8));
        *(_DWORD *)(a1 + 44) = v4;
        *(_DWORD *)(a1 + 48) = (int)(*(double *)(a2 + 40) * 100.0);
        sub_1004C13E0(v3, a2);
        *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
        *(_QWORD *)(a1 + 32) = 0;
        *(_QWORD *)&v5 = 0xFFFFFFFFLL;
        *(_QWORD *)(a1 + 40) = 0xFFFFFFFFLL;
        *(_DWORD *)(a1 + 48) = -1;
        *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
        *(_BYTE *)a1 = 0;
      }
      break;
    default:
      return *(double *)&v5;
  }
  return *(double *)&v5;
}

NSDictionary *sub_1004C1904(uint64_t a1)
{
  _QWORD v3[6];
  _QWORD v4[6];

  v3[0] = CFSTR("escType");
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", **(_QWORD **)(a1 + 32));
  v3[1] = CFSTR("workoutType");
  v4[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  v3[2] = CFSTR("workoutLocation");
  v4[2] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16));
  v3[3] = CFSTR("escTime");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 24));
  v3[4] = CFSTR("escToWorkout");
  v4[4] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 28));
  v3[5] = CFSTR("pctBackgroundEscalation");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 6);
}

void sub_1004C1A30(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1004C1A5C()
{
  if (sub_1011B9850() == 1)
    operator new();
  operator new();
}

void sub_1004C1AF4()
{
  operator delete();
}

uint64_t sub_1004C1B18(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = off_10213E9F8;
  *(_DWORD *)(result + 8) = 1;
  *(_BYTE *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = a2;
  return result;
}

void sub_1004C1B38(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  NSObject *v6;
  int v7;
  int v8;
  void (***v9)(_QWORD, uint64_t);
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  if ((_DWORD)a2 == 1)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EA40);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 1);
      *(_DWORD *)buf = 67240192;
      v29 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, checking to start collector in active energy mode, should start %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EA40);
      v12 = qword_10229FC98;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 1);
      v22 = 67240192;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 0, "FitnessMode, checking to start collector in active energy mode, should start %{public}d", &v22, 8);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (*(_QWORD *)(a1 + 16) && (*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, 1))
      (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), 1, 1);
  }
  if (*(_DWORD *)(a1 + 8) != (_DWORD)a2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EA40);
    v6 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v7 = *(_DWORD *)(a1 + 8);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
      *(_DWORD *)buf = 67240704;
      v29 = v7;
      v30 = 1026;
      v31 = a2;
      v32 = 1026;
      v33 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FitnessMode, activity move mode changed from %{public}d to %{public}d, should start %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EA40);
      v16 = qword_10229FC98;
      v17 = *(_DWORD *)(a1 + 8);
      v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2);
      v22 = 67240704;
      v23 = v17;
      v24 = 1026;
      v25 = a2;
      v26 = 1026;
      v27 = v18;
      LODWORD(v21) = 20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "FitnessMode, activity move mode changed from %{public}d to %{public}d, should start %{public}d", &v22, v21);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedMoveModeUpdate(CLFitnessTrackingNotifier_Type::ActivityMoveMode)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    *(_DWORD *)(a1 + 8) = a2;
    v9 = *(void (****)(_QWORD, uint64_t))(a1 + 16);
    if (v9)
    {
      (**v9)(v9, a2);
      v10 = *(_QWORD *)(a1 + 16);
      if (v10)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
        if (*(_QWORD *)(a1 + 16))
        {
          v11 = *(_DWORD *)(a1 + 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, a2))
            (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), a2, v11 == 1);
        }
      }
    }
  }
}

_QWORD *sub_1004C1F70(_QWORD *result, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;

  if (result[2])
  {
    v5 = result;
    result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 32))(result);
    if ((_DWORD)result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v5[2] + 8))(v5[2], a2, a3);
  }
  return result;
}

void sub_1004C1FD8(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[2];
  __int16 v12;
  int v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  int v17;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213EA40);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(unsigned __int8 *)(a1 + 12);
    *(_DWORD *)buf = 67240448;
    v15 = v5;
    v16 = 1026;
    v17 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FitnessMode, fitness tracking update from %{public}d to %{public}d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EA40);
    v8 = *(unsigned __int8 *)(a1 + 12);
    v11[0] = 67240448;
    v11[1] = v8;
    v12 = 1026;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "FitnessMode, fitness tracking update from %{public}d to %{public}d", v11, 14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLFitnessModeControllerBase::feedFitnessTrackingUpdate(BOOL)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  *(_BYTE *)(a1 + 12) = a2;
  if (a2)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      v6 = *(unsigned int *)(a1 + 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v6))
        (*(void (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 16) + 8))(*(_QWORD *)(a1 + 16), v6, (_DWORD)v6 == 1);
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 16);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
  }
}

uint64_t sub_1004C2204(_QWORD *a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if ((result & 1) == 0)
  {
    result = a1[2];
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

uint64_t sub_1004C224C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

void sub_1004C2254()
{
  operator delete();
}

void sub_1004C2268(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1004C25E0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  char v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  unint64_t v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v38 = 8;
        goto LABEL_64;
      case 2u:
        v17 = 0;
        v18 = 0;
        v19 = 0;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v21 = v20 + 1;
          if (v20 == -1 || v21 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v22 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21;
            v19 |= (unint64_t)(v22 & 0x7F) << v17;
            if (v22 < 0)
            {
              v17 += 7;
              v10 = v18++ >= 9;
              if (v10)
              {
                LODWORD(v19) = 0;
                goto LABEL_50;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v19) = 0;
LABEL_50:
        *(_DWORD *)(a1 + 24) = v19;
        continue;
      case 3u:
        v23 = 0;
        v24 = 0;
        v25 = 0;
        while (2)
        {
          v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v27 = v26 + 1;
          if (v26 == -1 || v27 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v28 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27;
            v25 |= (unint64_t)(v28 & 0x7F) << v23;
            if (v28 < 0)
            {
              v23 += 7;
              v10 = v24++ >= 9;
              if (v10)
              {
                v25 = 0;
                goto LABEL_54;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v25 = 0;
LABEL_54:
        v36 = v25 != 0;
        v37 = 28;
        goto LABEL_59;
      case 4u:
        *(_BYTE *)(a1 + 32) |= 1u;
        v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v29 <= 0xFFFFFFFFFFFFFFF7 && v29 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v15 = 0;
        }
        v38 = 16;
LABEL_64:
        *(_QWORD *)(a1 + v38) = v15;
        continue;
      case 5u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v34 = v33 + 1;
      if (v33 == -1 || v34 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
      v32 |= (unint64_t)(v35 & 0x7F) << v30;
      if ((v35 & 0x80) == 0)
        goto LABEL_56;
      v30 += 7;
      v10 = v31++ >= 9;
      if (v10)
      {
        v32 = 0;
        goto LABEL_58;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v32 = 0;
LABEL_58:
    v36 = v32 != 0;
    v37 = 29;
LABEL_59:
    *(_BYTE *)(a1 + v37) = v36;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

void sub_1004C2EC4(int64x2_t *a1, double *a2)
{
  uint64_t v4;
  int v5;

  v4 = *((_QWORD *)a2 + 2);
  if (v4 > 9)
  {
    if (v4 == 10)
    {
      if (!a1->i8[0])
        return;
      v5 = 3;
      goto LABEL_13;
    }
    if (v4 == 11)
    {
      a1[1] = vdupq_n_s64(0x1AuLL);
      a1[2].i64[0] = 0xFFFFFFFFLL;
      a1->i8[0] = 1;
      a1->i64[1] = (uint64_t)a2[3];
      a1[1].i64[0] = sub_100F72BB4(*((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15));
    }
  }
  else
  {
    if (!v4)
    {
      if (!a1->i8[0])
        return;
      a1[2].i32[1] = 1;
      a1[1].i64[1] = sub_100F72BB4(*((_QWORD *)a2 + 14), *((_QWORD *)a2 + 15));
      a1[2].i32[0] = (int)(a2[3] - *(double *)&a1->i64[1]);
      goto LABEL_14;
    }
    if (v4 == 6 && a1->i8[0])
    {
      v5 = 2;
LABEL_13:
      a1[2].i32[0] = (int)(a2[3] - *(double *)&a1->i64[1]);
      a1[2].i32[1] = v5;
LABEL_14:
      sub_1004C2FB4((uint64_t)a1, (uint64_t)a2);
    }
  }
}

void sub_1004C2FB4(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  int v10;
  int v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[5];
  _DWORD v15[4];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  if (objc_opt_class(MCProfileConnection, a2)
    && (objc_msgSend(+[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection"), "isHealthDataSubmissionAllowed") & 1) != 0)
  {
    if (*(int *)(a1 + 32) > 0)
    {
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213EAA0);
      v3 = qword_10229FE68;
      if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
      {
        v4 = *(_QWORD *)(a1 + 16);
        v5 = *(_QWORD *)(a1 + 24);
        v6 = *(_DWORD *)(a1 + 32);
        v7 = *(_DWORD *)(a1 + 36);
        *(_DWORD *)buf = 68290050;
        v17 = 0;
        v18 = 2082;
        v19 = "";
        v20 = 1026;
        v21 = v4;
        v22 = 1026;
        v23 = v5;
        v24 = 1026;
        v25 = v6;
        v26 = 1026;
        v27 = v7;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Sending alert event to CoreAnalytics\", \"alertWorkoutType\":%{public}d, \"acceptedWorkoutType\":%{public}d, \"alertActiveTime\":%{public}d, \"alertStatus\":%{public}d}", buf, 0x2Au);
      }
      v14[0] = _NSConcreteStackBlock;
      v14[1] = 3221225472;
      v14[2] = sub_1004C338C;
      v14[3] = &unk_102131FE8;
      v14[4] = a1;
      AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.FitnessAlert"), v14);
      *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x1AuLL);
      *(_QWORD *)(a1 + 32) = 0xFFFFFFFFLL;
      *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
      *(_BYTE *)a1 = 0;
      return;
    }
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213EAA0);
    v9 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_DWORD *)(a1 + 32);
      *(_DWORD *)buf = 67109120;
      v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Not sending alert event to CoreAnalytics, invalid escalation time recorded %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213EAA0);
      v11 = *(_DWORD *)(a1 + 32);
      v15[0] = 67109120;
      v15[1] = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 2, "Not sending alert event to CoreAnalytics, invalid escalation time recorded %d", v15);
LABEL_26:
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutAlertMetrics::sendEventToCoreAnalytics()", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_10213EAA0);
    v8 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Not sending alert event to CoreAnalytics, no IHA permission", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_10213EAA0);
      LOWORD(v15[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 1, "Not sending alert event to CoreAnalytics, no IHA permission");
      goto LABEL_26;
    }
  }
}

NSDictionary *sub_1004C338C(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[4];
  _QWORD v4[4];

  v1 = *(_QWORD *)(a1 + 32);
  v3[0] = CFSTR("alertWorkoutType");
  v4[0] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 16));
  v3[1] = CFSTR("acceptedWorkoutType");
  v4[1] = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", *(_QWORD *)(v1 + 24));
  v3[2] = CFSTR("alertActiveTime");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(v1 + 32));
  v3[3] = CFSTR("alertStatus");
  v4[3] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(v1 + 36));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 4);
}

void sub_1004C3468(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_1004C3D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C3D30@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void **v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v20;
  void *v21[2];
  unsigned __int8 v22;
  void *v23[2];
  unsigned __int8 v24;
  _QWORD v25[2];
  uint64_t v26;
  _QWORD v27[10];
  char v28;
  uint64_t v29;

  sub_100263E50((uint64_t)v25);
  v4 = sub_100263F7C(&v26, (uint64_t)"enabled,", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",light,", 7);
  sub_1004C5520(a1 + 4, v23);
  if ((v24 & 0x80u) == 0)
    v7 = v23;
  else
    v7 = (void **)v23[0];
  if ((v24 & 0x80u) == 0)
    v8 = v24;
  else
    v8 = (uint64_t)v23[1];
  v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
  v10 = sub_100263F7C(v9, (uint64_t)",moderate,", 10);
  sub_1004C5520(a1 + 20, v21);
  if ((v22 & 0x80u) == 0)
    v11 = v21;
  else
    v11 = (void **)v21[0];
  if ((v22 & 0x80u) == 0)
    v12 = v22;
  else
    v12 = (uint64_t)v21[1];
  v13 = sub_100263F7C(v10, (uint64_t)v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)",heavyAndGreater,", 17);
  sub_1004C5520(a1 + 36, __p);
  if ((v20 & 0x80u) == 0)
    v15 = __p;
  else
    v15 = (void **)__p[0];
  if ((v20 & 0x80u) == 0)
    v16 = v20;
  else
    v16 = (uint64_t)__p[1];
  sub_100263F7C(v14, (uint64_t)v15, v16);
  if ((char)v20 < 0)
    operator delete(__p[0]);
  if ((char)v22 < 0)
    operator delete(v21[0]);
  if ((char)v24 < 0)
    operator delete(v23[0]);
  std::stringbuf::str(a2, v27);
  *(_QWORD *)((char *)v25
  v26 = v17;
  if (v28 < 0)
    operator delete((void *)v27[8]);
  std::streambuf::~streambuf(v27);
  return std::ios::~ios(&v29);
}

void sub_1004C3EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  if (a26 < 0)
    operator delete(a21);
  sub_1018B38B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004C3F64(uint64_t a1)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_10213EAE8);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v10 = "-[CLEEDCoexMonitorPower initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXPB,%{public}s PeakPowerMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213EAE8);
    v7 = 136446210;
    v8 = "-[CLEEDCoexMonitorPower initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CXPB,%{public}s PeakPowerMitigation Disabled, returning with nominal.", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorPower initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(_QWORD **)(a1 + 32);
  v4 = result[2];
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, objc_msgSend(result, "getMitigationForCurrentlevel"), 0);
  return result;
}

id sub_1004C413C(uint64_t a1)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
    return _objc_msgSend(result, "queryPeakPowerLevel");
  return result;
}

id sub_1004C4160(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "queryPeakPowerLevel");
}

void sub_1004C54F4(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

uint64_t sub_1004C5520@<X0>(unsigned __int8 *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  _QWORD v19[10];
  char v20;
  uint64_t v21;

  sub_100263E50((uint64_t)v17);
  v4 = sub_100263F7C(&v18, (uint64_t)"allowNewStreamingRequests,", 26);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *a1);
  v6 = sub_100263F7C(v5, (uint64_t)",allowNewMediaRequests,", 23);
  v7 = (_QWORD *)std::ostream::operator<<(v6, a1[1]);
  v8 = sub_100263F7C(v7, (uint64_t)",maxFramerateFps,", 17);
  v9 = (_QWORD *)std::ostream::operator<<(v8, *((unsigned int *)a1 + 1));
  v10 = sub_100263F7C(v9, (uint64_t)",maxStreamingBitrateKbps,", 25);
  v11 = (_QWORD *)std::ostream::operator<<(v10, *((unsigned int *)a1 + 2));
  v12 = sub_100263F7C(v11, (uint64_t)",dropStreaming,", 15);
  v13 = (_QWORD *)std::ostream::operator<<(v12, a1[12]);
  v14 = sub_100263F7C(v13, (uint64_t)",delayMedia,", 12);
  std::ostream::operator<<(v14, a1[13]);
  std::stringbuf::str(a2, v19);
  *(_QWORD *)((char *)v17
  v18 = v15;
  if (v20 < 0)
    operator delete((void *)v19[8]);
  std::streambuf::~streambuf(v19);
  return std::ios::~ios(&v21);
}

void sub_1004C5660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004C5674(uint64_t a1, uint64_t a2, double a3)
{
  _BYTE v7[232];

  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a2 + 48) + 48))(*(_QWORD *)(a2 + 48)))
  {
    (*(void (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a2 + 48) + 24))(*(_QWORD *)(a2 + 48), v7, a3);
    if (v7[208])
    {
      sub_1004C5730(*(_QWORD *)(a2 + 8));
      sub_1004C5730(*(_QWORD *)(a2 + 80));
    }
  }
  return nullsub_1532(a1 + 8, a2, a3);
}

BOOL sub_1004C5730(uint64_t a1)
{
  double v2;
  double v3;
  _BOOL8 result;
  double v5;

  v2 = *(double *)(a1 + 104);
  v3 = *(double *)(a1 + 112);
  if (*(_BYTE *)(a1 + 80))
  {
    result = 1;
  }
  else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) != 0)
  {
    *(double *)(a1 + 72) = v2;
    result = 1;
    *(_BYTE *)(a1 + 80) = 1;
    *(_BYTE *)(a1 + 120) = 0;
  }
  else
  {
    result = *(_BYTE *)(a1 + 80) != 0;
  }
  v5 = v2 + v3;
  if (*(double *)(a1 + 88) >= v2 + v3)
    v5 = *(double *)(a1 + 88);
  *(double *)(a1 + 88) = v5;
  return result;
}

uint64_t sub_1004C57B0(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 8) + 48))(*(_QWORD *)(a3 + 8));
  if ((_DWORD)result)
    return (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a3 + 80) + 48))(*(_QWORD *)(a3 + 80), a1);
  return result;
}

void sub_1004C580C(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v4;
  double v5;
  _BOOL4 v6;
  _BOOL4 v7;
  int v8;
  int v9;
  int v10;
  unsigned int v11;
  float v12;
  int v13;
  int v14;
  double v15;
  float v16;
  float v17;
  uint64_t v18;
  float v19;
  double v20;
  float v21;
  double v22;
  double v23;
  double v24;
  double v25;
  float v26;
  double v27;
  NSObject *v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  int v32;
  const char *v33;
  uint8_t *v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  int v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  __int16 v46;
  double v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  double v51;
  __int16 v52;
  unsigned int v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  int v59;
  __int16 v60;
  double v61;
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  int v67;
  __int16 v68;
  double v69;
  uint8_t buf[4];
  double v71;
  __int16 v72;
  double v73;
  __int16 v74;
  double v75;
  __int16 v76;
  double v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  double v81;
  __int16 v82;
  unsigned int v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  __int16 v88;
  int v89;
  __int16 v90;
  double v91;
  __int16 v92;
  double v93;
  __int16 v94;
  double v95;
  __int16 v96;
  int v97;
  __int16 v98;
  double v99;

  v4 = *(float *)(a1 + 1232);
  v5 = *(float *)(a1 + 1236);
  v6 = v5 <= 0.1;
  HIDWORD(v38) = *(_DWORD *)(a1 + 296);
  if (*((float *)&v38 + 1) >= 10.0)
    v6 = 0;
  v39 = v4;
  v7 = v4 < 0.6;
  v8 = 2;
  if (v5 < 0.2)
    v9 = 1;
  else
    v9 = 2;
  v10 = v6 && v7;
  if (v6 && v7)
    v11 = 0;
  else
    v11 = v9;
  v12 = *(double *)(a1 + 560);
  v13 = 0;
  if (sub_100219944(a1))
  {
    if (v12 <= 120.0)
      v14 = 1;
    else
      v14 = 2;
    if (*(double *)(a1 + 600) >= *(double *)a1)
      v13 = 0;
    else
      v13 = v14;
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 3;
  *(_QWORD *)(a2 + 32) = 3;
  v15 = *(double *)(a1 + 1416);
  v16 = v15;
  v37 = v12;
  v17 = (*(float *)(a1 + 1380) - v12) / (*(float *)(a1 + 1380) - *(float *)(a1 + 1376));
  v19 = (float)(sub_10108B14C(v17, *(float *)(a1 + 1372)) * *(float *)(a1 + 1368)) / (float)(v16 + 1.0);
  *(float *)a2 = v19;
  v20 = 8.5;
  if (v5 <= 2.1)
    v20 = sub_1004C5D6C(v18, (float *)a1);
  v21 = v20;
  if ((v10 & 1) != 0)
    v21 = 1.6;
  if (!(v10 & 1 | (v5 >= 0.2)))
    v21 = v21 / 1.27;
  *(float *)(a2 + 4) = v21;
  *(float *)(a2 + 12) = v21;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0x500000000;
  v22 = 1.0;
  v23 = 2.0999999;
  if (v13 == 2)
  {
    if (v11 < 2)
    {
      v8 = 1;
      *(_DWORD *)(a2 + 24) = 1;
      *(_DWORD *)(a2 + 32) = 1;
      v22 = 0.0;
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v13 == 1)
  {
    v8 = 0;
    if ((v10 & 1) != 0 || v5 < 0.2)
      goto LABEL_33;
    v8 = 2;
LABEL_32:
    *(_DWORD *)(a2 + 24) = 2;
    *(_DWORD *)(a2 + 32) = 2;
    v22 = 0.5;
    v23 = 4.40208912;
    goto LABEL_33;
  }
  v8 = 0;
  v23 = 2.0999999;
  if (((v5 >= 0.2) & ~v10) != 0)
    v23 = 4.40208912;
LABEL_33:
  v24 = v19;
  v25 = v21;
  v26 = v22 * v21 + (1.0 - v22) * v24;
  *(float *)(a2 + 20) = v26;
  *(float *)(a2 + 28) = v26;
  v27 = v26;
  if (v23 > v26)
  {
    v26 = v23;
    *(float *)(a2 + 20) = v26;
    v8 = 3;
    *(_DWORD *)(a2 + 24) = 3;
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213EB68);
  v28 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v29 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)buf = 134221568;
    v71 = v25;
    v72 = 2048;
    v73 = v24;
    v74 = 2048;
    v75 = v27;
    v76 = 2048;
    v77 = v26;
    v78 = 2048;
    v79 = v29;
    v80 = 2048;
    v81 = v20;
    v82 = 1024;
    v83 = v11;
    v84 = 2048;
    v85 = v15;
    v86 = 2048;
    v87 = v22;
    v88 = 1024;
    v89 = v8;
    v90 = 2048;
    v91 = v5;
    v92 = 2048;
    v93 = *((float *)&v38 + 1);
    v94 = 2048;
    v95 = v37;
    v96 = 1024;
    v97 = v13;
    v98 = 2048;
    v99 = v39;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Dance,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,danceWrMets,%f,motionIntensity,%d,hrDrift,%f,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrIntensity,%d,rotationRate,%f", buf, 0x8Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EB68);
    v30 = *(float *)(a2 + 20);
    v31 = *(_QWORD *)(a1 + 128);
    v32 = *(_DWORD *)(a2 + 24);
    v40 = 134221568;
    v41 = v25;
    v42 = 2048;
    v43 = v24;
    v44 = 2048;
    v45 = v27;
    v46 = 2048;
    v47 = v30;
    v48 = 2048;
    v49 = v31;
    v50 = 2048;
    v51 = v20;
    v52 = 1024;
    v53 = v11;
    v54 = 2048;
    v55 = v15;
    v56 = 2048;
    v57 = v22;
    v58 = 1024;
    v59 = v32;
    v60 = 2048;
    v61 = v5;
    v62 = 2048;
    v63 = *((float *)&v38 + 1);
    v64 = 2048;
    v65 = v37;
    v66 = 1024;
    v67 = v13;
    v68 = 2048;
    v69 = v39;
    LODWORD(v35) = 140;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Dance,metsWR,%f,metsHR,%f,truthMets,%f,userMets,%f,endTime,%f,danceWrMets,%f,motionIntensity,%d,hrDrift,%f,wrWeight,%f,metsSource,%d,accelZ,%f,vm,%f,hr,%f,hrIntensity,%d,rotationRate,%f", COERCE_DOUBLE(&v40), v35, v36, v37, v38, v39);
    v34 = (uint8_t *)v33;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLNatalieDanceModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v33);
    if (v34 != buf)
      free(v34);
  }
}

float sub_1004C5D6C(uint64_t a1, float *a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  NSObject *v9;
  const char *v11;
  uint8_t *v12;
  double v13;
  double v14;
  unint64_t v15;
  int v16;
  double v17;
  __int16 v18;
  double v19;
  __int16 v20;
  double v21;
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  double v27;
  uint8_t buf[4];
  double v29;
  __int16 v30;
  double v31;
  __int16 v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;

  v2 = 0;
  v3 = a2[308];
  v4 = a2[309];
  v5 = a2[310];
  v6 = a2[341];
  v7 = a2[340] * 100.0;
  *((float *)&v13 + 1) = v4;
  *(float *)&v14 = v3;
  *((float *)&v14 + 1) = v3 * v5;
  v15 = __PAIR64__(LODWORD(v7), LODWORD(v6));
  v8 = -1.8389;
  do
  {
    v8 = v8 + (float)(*(float *)((char *)&v13 + v2 * 4 + 4) * *(float *)&dword_101BB2F18[v2]);
    ++v2;
  }
  while (v2 != 5);
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213EB68);
  v9 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134219264;
    v29 = v4;
    v30 = 2048;
    v31 = v3;
    v32 = 2048;
    v33 = v5;
    v34 = 2048;
    v35 = v6;
    v36 = 2048;
    v37 = v7;
    v38 = 2048;
    v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "iz,%f,w,%f,cr,%f,weight,%f,height,%f,wr,%f", buf, 0x3Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EB68);
    v16 = 134219264;
    v17 = v4;
    v18 = 2048;
    v19 = v3;
    v20 = 2048;
    v21 = v5;
    v22 = 2048;
    v23 = v6;
    v24 = 2048;
    v25 = v7;
    v26 = 2048;
    v27 = v8;
    LODWORD(v13) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "iz,%f,w,%f,cr,%f,weight,%f,height,%f,wr,%f", COERCE_DOUBLE(&v16), v13, v14, *(double *)&v15);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "float CLNatalieDanceModel::computeWRRegression(const CLNatalieModelInput &) const", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  return v8;
}

void sub_1004C6018()
{
  operator delete();
}

void sub_1004C602C(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1004C642C(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  unint64_t v14;
  int v15;
  uint64_t result;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFFBLL && v14 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v33 = 28;
        goto LABEL_67;
      case 2u:
        v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v17 <= 0xFFFFFFFFFFFFFFFBLL && v17 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v33 = 12;
        goto LABEL_67;
      case 3u:
        v18 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v18 <= 0xFFFFFFFFFFFFFFFBLL && v18 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v18);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v33 = 16;
        goto LABEL_67;
      case 4u:
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v19 <= 0xFFFFFFFFFFFFFFFBLL && v19 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v19 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v33 = 20;
        goto LABEL_67;
      case 5u:
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        v33 = 24;
LABEL_67:
        *(_DWORD *)(a1 + v33) = v15;
        continue;
      case 6u:
        v21 = 0;
        v22 = 0;
        v23 = 0;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v25 = v24 + 1;
          if (v24 == -1 || v25 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v26 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25;
            v23 |= (unint64_t)(v26 & 0x7F) << v21;
            if (v26 < 0)
            {
              v21 += 7;
              v10 = v22++ >= 9;
              if (v10)
              {
                LODWORD(v23) = 0;
                goto LABEL_52;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v23) = 0;
LABEL_52:
        *(_DWORD *)(a1 + 8) = v23;
        continue;
      case 7u:
        v27 = 0;
        v28 = 0;
        v29 = 0;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v30 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v31 = v30 + 1;
      if (v30 == -1 || v31 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v32 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v30);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v31;
      v29 |= (unint64_t)(v32 & 0x7F) << v27;
      if ((v32 & 0x80) == 0)
        goto LABEL_54;
      v27 += 7;
      v10 = v28++ >= 9;
      if (v10)
      {
        v29 = 0;
        goto LABEL_56;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_54:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v29 = 0;
LABEL_56:
    *(_BYTE *)(a1 + 32) = v29 != 0;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

BOOL sub_1004C70B0(uint64_t a1)
{
  char *v2;
  void **v3;
  std::string::size_type v4;
  std::string *p_str;
  _BOOL4 v6;
  void *__p[2];
  uint64_t v9;
  std::string __str;

  v2 = (char *)sub_1001FD94C();
  sub_1000B7884(v2, (uint64_t)&__str);
  if (*(char *)(a1 + 79) < 0)
  {
    sub_100115CE4(__p, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a1 + 56);
    v9 = *(_QWORD *)(a1 + 72);
  }
  if (v9 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v9 >= 0)
    v4 = HIBYTE(v9);
  else
    v4 = (std::string::size_type)__p[1];
  std::string::append(&__str, (const std::string::value_type *)v3, v4);
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  std::string::operator=((std::string *)(a1 + 32), &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_str = &__str;
  else
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  v6 = sub_1000B78B0((const char *)p_str);
  if (!v6)
    *(_BYTE *)(a1 + 80) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v6;
}

void sub_1004C718C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004C71C4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10213EBA0);
  v2 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRSE,clear AVL status cache", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10213EBA0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "HRSE,clear AVL status cache", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLHrseTileAvailability::clearAvlCache()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
}

uint64_t sub_1004C735C(uint64_t a1, double a2, long double a3)
{
  NSObject *v6;
  _QWORD *v7;
  const char **v8;
  const char *v9;
  FILE *v10;
  FILE *v11;
  int v12;
  double v13;
  NSObject *v14;
  const char *v15;
  int *v16;
  NSObject *v17;
  int v18;
  int v19;
  const char *v20;
  int *v21;
  NSObject *v22;
  const char *v23;
  int v24;
  int v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  int v30;
  double v31;
  signed int v32;
  int v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  int v37;
  int v38;
  const char *v39;
  NSObject *v40;
  int v41;
  int v42;
  const char *v43;
  NSObject *v44;
  int v45;
  int v46;
  const char *v47;
  int *v48;
  NSObject *v49;
  int v50;
  int v51;
  const char *v52;
  int *v53;
  _QWORD *v54;
  const char *v55;
  int *v56;
  uint64_t v57;
  int v58;
  int v59;
  const char *v60;
  int v61;
  const char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _BYTE v67[10];
  int v68;
  __int16 v69;
  int v70;
  _OWORD v71[16];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  _BYTE v79[26];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  int buf;
  _BYTE v84[10];
  int v85;
  __int16 v86;
  int v87;

  if ((sub_1004C83B8(a1) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v18 = *(unsigned __int8 *)(a1 + 80);
      buf = 67240192;
      *(_DWORD *)v84 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v19 = *(unsigned __int8 *)(a1 + 80);
    LODWORD(v71[0]) = 67240192;
    DWORD1(v71[0]) = v19;
    LODWORD(v63) = 8;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,availability file is not valid,fNeedToDownloadAvlFile,%{public}d", v71, v63);
    v21 = (int *)v20;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v20);
    if (v21 == &buf)
      return 0;
LABEL_117:
    free(v21);
    return 0;
  }
  v81 = 0;
  v80 = 0;
  v82 = 0;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  memset(v79, 0, sizeof(v79));
  v65 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v7 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v7 = (_QWORD *)*v7;
    buf = 136446210;
    *(_QWORD *)v84 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "HRSE,isTileAvailableBasedOnAvlFile,Reading,%{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v54 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v54 = (_QWORD *)*v54;
    v66 = 136446210;
    *(_QWORD *)v67 = v54;
    LODWORD(v63) = 12;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,isTileAvailableBasedOnAvlFile,Reading,%{public}s", &v66, v63);
    v56 = (int *)v55;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v55);
    if (v56 != &buf)
      free(v56);
  }
  v8 = (const char **)(a1 + 32);
  v9 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v9 = *v8;
  v10 = fopen(v9, "rb");
  v11 = v10;
  if (!v10)
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v23 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v23 = *v8;
      v24 = *(unsigned __int8 *)(a1 + 80);
      v25 = *__error();
      buf = 136446722;
      *(_QWORD *)v84 = v23;
      *(_WORD *)&v84[8] = 1026;
      v85 = v24;
      v86 = 1026;
      v87 = v25;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#Error,HRSE,isTileAvailableBasedOnAvlFile,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", (uint8_t *)&buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    if (*(char *)(a1 + 55) < 0)
      v8 = (const char **)*v8;
    v57 = qword_1022A0078;
    v58 = *(unsigned __int8 *)(a1 + 80);
    v59 = *__error();
    v66 = 136446722;
    *(_QWORD *)v67 = v8;
    *(_WORD *)&v67[8] = 1026;
    v68 = v58;
    v69 = 1026;
    v70 = v59;
    LODWORD(v63) = 24;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v57, 16, "#Error,HRSE,isTileAvailableBasedOnAvlFile,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", &v66, v63);
    v21 = (int *)v60;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v60);
    if (v21 == &buf)
      return 0;
    goto LABEL_117;
  }
  v64 = 0;
  if ((sub_1004C905C(v10, v71, (uint64_t)&v72, (int *)&v65, &v64) & 1) == 0)
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v28 = *(unsigned __int8 *)(a1 + 80);
      buf = 67240192;
      *(_DWORD *)v84 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v61 = *(unsigned __int8 *)(a1 + 80);
    v66 = 67240192;
    *(_DWORD *)v67 = v61;
    LODWORD(v63) = 8;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", &v66, v63);
    v16 = (int *)v62;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v62);
    goto LABEL_121;
  }
  v12 = v79[24];
  v13 = (double)v79[24];
  if (v13 <= a2)
  {
    v30 = v79[25];
    if ((double)v79[25] <= a2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v34 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        buf = 134283777;
        *(double *)v84 = a2;
        *(_WORD *)&v84[8] = 1025;
        v85 = v30;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v66 = 134283777;
      *(double *)v67 = a2;
      *(_WORD *)&v67[8] = 1025;
      v68 = v30;
      LODWORD(v63) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, beyond maximum acceptable latitude, %{private}d", &v66, v63);
      v16 = (int *)v35;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v35);
      goto LABEL_121;
    }
    sub_1001C6800(a3);
    v32 = vcvtmd_s64_f64(v31 * 20.0) + 7200 * (vcvtmd_s64_f64((a2 + 90.0) * 20.0) - (int)((v13 + 90.0) * 20.0));
    if (v32 >= 0)
      v33 = v32;
    else
      v33 = v32 + 7;
    HIBYTE(v63) = 0;
    if (v33 >> 3 >= v82)
    {
      *(_BYTE *)(a1 + 80) = 1;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v36 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v37 = *(unsigned __int8 *)(a1 + 80);
        buf = 67240448;
        *(_DWORD *)v84 = v33 >> 3;
        *(_WORD *)&v84[4] = 1026;
        *(_DWORD *)&v84[6] = v37;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_44;
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v38 = *(unsigned __int8 *)(a1 + 80);
      v66 = 67240448;
      *(_DWORD *)v67 = v33 >> 3;
      *(_WORD *)&v67[4] = 1026;
      *(_DWORD *)&v67[6] = v38;
      LODWORD(v63) = 14;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,avl byte index,%{public}d,is larger than the data available in the availabilty file,fNeedToDownloadAvlFile,%{public}d", &v66, v63);
      v16 = (int *)v39;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v39);
      goto LABEL_121;
    }
    fseek(v11, v33 >> 3, 1);
    if (fread((char *)&v63 + 7, 1uLL, 1uLL, v11) == 1)
    {
      fclose(v11);
      switch(v32 - (v33 & 0xFFFFFFF8))
      {
        case 0u:
          v26 = v63 < 0;
          break;
        case 1u:
          v26 = (HIBYTE(v63) >> 6) & 1;
          break;
        case 2u:
          v26 = (HIBYTE(v63) >> 5) & 1;
          break;
        case 3u:
          v26 = (HIBYTE(v63) >> 4) & 1;
          break;
        case 4u:
          v26 = (HIBYTE(v63) >> 3) & 1;
          break;
        case 5u:
          v26 = (HIBYTE(v63) >> 2) & 1;
          break;
        case 6u:
          v26 = (HIBYTE(v63) >> 1) & 1;
          break;
        case 7u:
          v26 = HIBYTE(v63) & 1;
          break;
        default:
          *(_BYTE *)(a1 + 80) = 1;
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10213EBC0);
          v49 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            v50 = *(unsigned __int8 *)(a1 + 80);
            buf = 67240192;
            *(_DWORD *)v84 = v50;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "HRSE,isTileAvailableBasedOnAvlFile,unexpected case,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10213EBC0);
            v51 = *(unsigned __int8 *)(a1 + 80);
            v66 = 67240192;
            *(_DWORD *)v67 = v51;
            LODWORD(v63) = 8;
            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "HRSE,isTileAvailableBasedOnAvlFile,unexpected case,fNeedToDownloadAvlFile,%{public}d", &v66, v63);
            v53 = (int *)v52;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v52);
            if (v53 != &buf)
              free(v53);
          }
          goto LABEL_45;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v44 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v45 = *(unsigned __int8 *)(a1 + 80);
        buf = 67240448;
        *(_DWORD *)v84 = v26;
        *(_WORD *)&v84[4] = 1026;
        *(_DWORD *)&v84[6] = v45;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "HRSE,isTileAvailableBasedOnAvlFile,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
        v46 = *(unsigned __int8 *)(a1 + 80);
        v66 = 67240448;
        *(_DWORD *)v67 = v26;
        *(_WORD *)&v67[4] = 1026;
        *(_DWORD *)&v67[6] = v46;
        LODWORD(v63) = 14;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,isTileAvailableBasedOnAvlFile,isTileAvailable,%{public}d,fNeedToDownloadAvlFile,%{public}d", &v66, v63);
        v48 = (int *)v47;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v47);
        if (v48 != &buf)
          free(v48);
      }
      goto LABEL_46;
    }
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v40 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v41 = *(unsigned __int8 *)(a1 + 80);
      buf = 67240192;
      *(_DWORD *)v84 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_INFO, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,unable to get data byte,fNeedToDownloadAvlFile,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v42 = *(unsigned __int8 *)(a1 + 80);
      v66 = 67240192;
      *(_DWORD *)v67 = v42;
      LODWORD(v63) = 8;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,isTileAvailableBasedOnAvlFile,unable to get data byte,fNeedToDownloadAvlFile,%{public}d", &v66, v63);
      v16 = (int *)v43;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v43);
      goto LABEL_121;
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      buf = 134283777;
      *(double *)v84 = a2;
      *(_WORD *)&v84[8] = 1025;
      v85 = v12;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", (uint8_t *)&buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v66 = 134283777;
      *(double *)v67 = a2;
      *(_WORD *)&v67[8] = 1025;
      v68 = v12;
      LODWORD(v63) = 18;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "HRSE,isTileAvailableBasedOnAvlFile,input latitude, %{private}.3lf, below minimum acceptable latitude, %{private}d", &v66, v63);
      v16 = (int *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::isTileAvailableBasedOnAvlFile(double, double)", "%s\n", v15);
LABEL_121:
      if (v16 != &buf)
        free(v16);
    }
  }
LABEL_44:
  fclose(v11);
LABEL_45:
  v26 = 0;
LABEL_46:
  if (SBYTE7(v73) < 0)
    operator delete((void *)v72);
  return v26;
}

void sub_1004C833C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  void **v54;

  if (a54 < 0)
    operator delete(*v54);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C83B8(uint64_t a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  const char *v5;
  const char **v6;
  const char *v7;
  FILE *v8;
  FILE *v9;
  double Current;
  double v11;
  unsigned int v12;
  NSObject *v13;
  int v14;
  int v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  const char *v24;
  int v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  int v31;
  NSObject *v33;
  int v34;
  int v35;
  const char *v36;
  uint8_t *v37;
  _QWORD *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  int v42;
  int v43;
  const char *v44;
  int v45;
  const char *v46;
  uint8_t *v47;
  int v48;
  const char *v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  _BYTE v57[12];
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  int v65;
  __int16 v66;
  int v67;
  __int128 v68[16];
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  _BYTE v76[26];
  __int128 v77;
  uint64_t v78;

  v77 = 0uLL;
  v78 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  memset(v76, 0, sizeof(v76));
  v54 = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 67240192;
    LODWORD(v63) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v35 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)v57 = 67240192;
    *(_DWORD *)&v57[4] = v35;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,checkAvlFileValidityAndSetDownloadFlag,fNeedToDownloadAvlFile,%{public}d", v57, 8);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  if (!sub_1004C70B0(a1))
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v19 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67240192;
      LODWORD(v63) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v20 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)v57 = 67240192;
    *(_DWORD *)&v57[4] = v20;
    LODWORD(v53) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file does not exist,fNeedToDownloadAvlFile,%{public}d", v57, v53);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v21);
    if (v22 == buf)
      return 0;
LABEL_81:
    free(v22);
    return 0;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v5 = (const char *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v5 = *(const char **)v5;
    *(_DWORD *)buf = 136446210;
    v63 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,Reading,%{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v38 = (_QWORD *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0)
      v38 = (_QWORD *)*v38;
    *(_DWORD *)v57 = 136446210;
    *(_QWORD *)&v57[4] = v38;
    LODWORD(v53) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,checkAvlFileValidityAndSetDownloadFlag,Reading,%{public}s", v57, v53);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v6 = (const char **)(a1 + 32);
  v7 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v7 = *v6;
  v8 = fopen(v7, "rb");
  v9 = v8;
  if (!v8)
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v23 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v24 = (const char *)(a1 + 32);
      if (*(char *)(a1 + 55) < 0)
        v24 = *v6;
      v25 = *(unsigned __int8 *)(a1 + 80);
      v26 = *__error();
      *(_DWORD *)buf = 136446722;
      v63 = v24;
      v64 = 1026;
      v65 = v25;
      v66 = 1026;
      v67 = v26;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#Error,HRSE,checkAvlFileValidityAndSetDownloadFlag,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    if (*(char *)(a1 + 55) < 0)
      v6 = (const char **)*v6;
    v41 = qword_1022A0078;
    v42 = *(unsigned __int8 *)(a1 + 80);
    v43 = *__error();
    *(_DWORD *)v57 = 136446722;
    *(_QWORD *)&v57[4] = v6;
    v58 = 1026;
    v59 = v42;
    v60 = 1026;
    v61 = v43;
    LODWORD(v53) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 16, "#Error,HRSE,checkAvlFileValidityAndSetDownloadFlag,could not open,%{public}s,fNeedToDownloadAvlFile,%{public}d,errno,%{public}d", v57, v53);
    v22 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v44);
    if (v22 == buf)
      return 0;
    goto LABEL_81;
  }
  *(_QWORD *)v57 = 0;
  if ((sub_1004C905C(v8, v68, (uint64_t)&v69, (int *)&v54, v57) & 1) == 0)
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v29 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67240192;
      LODWORD(v63) = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v45 = *(unsigned __int8 *)(a1 + 80);
      v55 = 67240192;
      v56 = v45;
      LODWORD(v53) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,readAvlHelper failed,fNeedToDownloadAvlFile,%{public}d", &v55, v53);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    fclose(v9);
    goto LABEL_56;
  }
  fclose(v9);
  if (v76[22] != 1)
  {
    *(_BYTE *)(a1 + 80) = 1;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v30 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v31 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67240192;
      LODWORD(v63) = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_56;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v48 = *(unsigned __int8 *)(a1 + 80);
    v55 = 67240192;
    v56 = v48;
    LODWORD(v53) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file version does not match expected,fNeedToDownloadAvlFile,%{public}d", &v55, v53);
    v17 = (uint8_t *)v49;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v49);
    goto LABEL_89;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v11 = *(double *)((char *)&v77 + 4);
  v12 = HIDWORD(v77);
  if (Current <= v11 + (double)v12 + (double)(random() % 86400))
  {
    *(_BYTE *)(a1 + 80) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v33 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v34 = *(unsigned __int8 *)(a1 + 80);
      *(_DWORD *)buf = 67240192;
      LODWORD(v63) = v34;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "HRSE,checkAvlFileValidityAndSetDownloadFlag,reached end of function,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v50 = *(unsigned __int8 *)(a1 + 80);
      v55 = 67240192;
      v56 = v50;
      LODWORD(v53) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,checkAvlFileValidityAndSetDownloadFlag,reached end of function,fNeedToDownloadAvlFile,%{public}d", &v55, v53);
      v52 = (uint8_t *)v51;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v51);
      if (v52 != buf)
        free(v52);
    }
    v27 = 1;
    goto LABEL_57;
  }
  *(_BYTE *)(a1 + 80) = 1;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v14 = *(unsigned __int8 *)(a1 + 80);
    *(_DWORD *)buf = 67240192;
    LODWORD(v63) = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file has expired,fNeedToDownloadAvlFile,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v15 = *(unsigned __int8 *)(a1 + 80);
    v55 = 67240192;
    v56 = v15;
    LODWORD(v53) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,HRSE,checkAvlFileValidityAndSetDownloadFlag,availability file has expired,fNeedToDownloadAvlFile,%{public}d", &v55, v53);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLHrseTileAvailability::checkAvlFileValidityAndSetDownloadFlag()", "%s\n", v16);
LABEL_89:
    if (v17 != buf)
      free(v17);
  }
LABEL_56:
  v27 = 0;
LABEL_57:
  if (SBYTE7(v70) < 0)
    operator delete((void *)v69);
  return v27;
}

void sub_1004C9010(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 233) < 0)
    operator delete(*(void **)(v1 - 256));
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004C905C(FILE *a1, _OWORD *a2, uint64_t a3, int *a4, _QWORD *a5)
{
  NSObject *v10;
  _BOOL4 v11;
  uint64_t result;
  const char *v13;
  NSObject *v14;
  _BOOL4 v15;
  NSObject *v16;
  _BOOL4 v17;
  int *v18;
  unsigned int v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v24;
  uint64_t v25;
  size_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  uint64_t v39;
  NSObject *v40;
  double v41;
  _BOOL4 v42;
  double v43;
  NSObject *v44;
  NSObject *v45;
  _BOOL4 v46;
  NSObject *v47;
  _BOOL4 v48;
  NSObject *v49;
  _BOOL4 v50;
  NSObject *v51;
  _BOOL4 v52;
  NSObject *v53;
  _BOOL4 v54;
  NSObject *v55;
  _BOOL4 v56;
  NSObject *v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  int v64;
  int v65;
  int v66;
  int v67;
  double v68;
  uint64_t v69;
  int v70;
  int v71;
  int v72;
  NSObject *v73;
  _BOOL4 v74;
  NSObject *v75;
  _BOOL4 v76;
  NSObject *v77;
  _BOOL4 v78;
  NSObject *v79;
  _BOOL4 v80;
  int v81;
  int v82;
  int v83;
  int v84;
  double v85;
  uint64_t v86;
  int v87;
  int v88;
  int v89;
  const char *v90;
  int *v91;
  uint64_t v92;
  __int128 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  int v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  uint64_t v107;
  char v108;
  int buf;
  _BYTE v110[10];
  __int16 v111;
  int v112;
  __int16 v113;
  int v114;
  __int16 v115;
  double v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  __int16 v121;
  int v122;
  __int16 v123;
  int v124;

  if (a1)
  {
    if (a2)
    {
      if (!feof(a1))
      {
        v19 = 0;
        v20 = (_QWORD *)(a3 + 24);
        while (1)
        {
          HIBYTE(v92) = 0;
          if (fread((char *)&v92 + 7, 1uLL, 1uLL, a1) != 1)
            return 0;
          v21 = ftell(a1);
          if (HIBYTE(v92) == 67)
          {
            v22 = v21;
            LOBYTE(v107) = 67;
            if (fread((char *)&v107 + 1, 1uLL, 8uLL, a1) != 8)
              return 0;
            *(_BYTE *)(a3 + 32) = v108;
            *v20 = v107;
            if (*(_QWORD *)(a3 + 24) == 0x5641455352484C43 && *(_BYTE *)(a3 + 32) == 76)
            {
              v24 = 0;
              *(_QWORD *)a4 = 9;
              do
              {
                *((_BYTE *)a2 + v24) = *((_BYTE *)v20 + v24);
                ++v24;
                v25 = *(_QWORD *)a4;
              }
              while (*(_QWORD *)a4 > v24);
              v26 = (110 - v25);
              if (fread((char *)a2 + v25, 1uLL, v26, a1) == v26)
              {
                v27 = *a2;
                v28 = a2[2];
                *(_OWORD *)(a3 + 40) = a2[1];
                *(_OWORD *)(a3 + 56) = v28;
                *(_OWORD *)v20 = v27;
                v29 = a2[3];
                v30 = a2[4];
                v31 = a2[5];
                *(_OWORD *)(a3 + 118) = *(_OWORD *)((char *)a2 + 94);
                *(_OWORD *)(a3 + 88) = v30;
                *(_OWORD *)(a3 + 104) = v31;
                *(_OWORD *)(a3 + 72) = v29;
                v32 = *(_QWORD *)a4 + v26;
                *(_QWORD *)a4 = v32;
                if (*(_QWORD *)(a3 + 24) == 0x5641455352484C43 && *(_BYTE *)(a3 + 32) == 76)
                {
                  if (fread((char *)a2 + v32, 1uLL, 1uLL, a1) == 1)
                  {
                    v33 = *(_QWORD *)a4;
                    *(_BYTE *)(a3 + 134) = *((_BYTE *)a2 + *(_QWORD *)a4);
                    *(_QWORD *)a4 = ++v33;
                    if (fread((char *)a2 + v33, 1uLL, 1uLL, a1) == 1)
                    {
                      v34 = *(_QWORD *)a4;
                      *(_BYTE *)(a3 + 135) = *((_BYTE *)a2 + *(_QWORD *)a4);
                      *(_QWORD *)a4 = ++v34;
                      if (fread((char *)a2 + v34, 1uLL, 1uLL, a1) == 1)
                      {
                        v35 = *(_QWORD *)a4;
                        *(_BYTE *)(a3 + 136) = *((_BYTE *)a2 + *(_QWORD *)a4);
                        *(_QWORD *)a4 = ++v35;
                        if (fread((char *)a2 + v35, 1uLL, 1uLL, a1) == 1)
                        {
                          v36 = *(_QWORD *)a4;
                          *(_BYTE *)(a3 + 137) = *((_BYTE *)a2 + *(_QWORD *)a4);
                          *(_QWORD *)a4 = ++v36;
                          if (fread((char *)a2 + v36, 1uLL, 4uLL, a1) == 4)
                          {
                            v37 = *(_QWORD *)a4;
                            v38 = COERCE_FLOAT(bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4)));
                            *(float *)(a3 + 140) = v38;
                            v39 = v37 + 4;
                            *(_QWORD *)a4 = v39;
                            if (fabsf(v38 + -0.05) <= 0.0001)
                            {
                              if (fread((char *)a2 + v39, 1uLL, 8uLL, a1) == 8)
                              {
                                v59 = *(_QWORD *)a4;
                                *(_QWORD *)(a3 + 144) = bswap64(*(_QWORD *)((char *)a2 + *(_QWORD *)a4));
                                v59 += 8;
                                *(_QWORD *)a4 = v59;
                                if (fread((char *)a2 + v59, 1uLL, 4uLL, a1) == 4)
                                {
                                  v60 = *(_QWORD *)a4;
                                  *(_DWORD *)(a3 + 152) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
                                  v60 += 4;
                                  *(_QWORD *)a4 = v60;
                                  if (fread((char *)a2 + v60, 1uLL, 4uLL, a1) == 4)
                                  {
                                    v61 = *(_QWORD *)a4;
                                    *(_DWORD *)(a3 + 156) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
                                    v61 += 4;
                                    *(_QWORD *)a4 = v61;
                                    if (fread((char *)a2 + v61, 1uLL, 4uLL, a1) == 4)
                                    {
                                      *a5 = *a4;
                                      v62 = *(_QWORD *)a4;
                                      *(_DWORD *)(a3 + 160) = bswap32(*(_DWORD *)((char *)a2 + *(_QWORD *)a4));
                                      *(_QWORD *)a4 = v62 + 4;
                                      if (qword_1022A0070 != -1)
                                        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                      v63 = qword_1022A0078;
                                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
                                      {
                                        v64 = *(unsigned __int8 *)(a3 + 134);
                                        v65 = *(unsigned __int8 *)(a3 + 135);
                                        v66 = *(char *)(a3 + 136);
                                        v67 = *(char *)(a3 + 137);
                                        v68 = *(float *)(a3 + 140);
                                        v69 = *(_QWORD *)(a3 + 144);
                                        v70 = *(_DWORD *)(a3 + 152);
                                        v71 = *(_DWORD *)(a3 + 156);
                                        v72 = *(_DWORD *)(a3 + 160);
                                        buf = 67176705;
                                        *(_DWORD *)v110 = v64;
                                        *(_WORD *)&v110[4] = 1025;
                                        *(_DWORD *)&v110[6] = v65;
                                        v111 = 1025;
                                        v112 = v66;
                                        v113 = 1025;
                                        v114 = v67;
                                        v115 = 2049;
                                        v116 = v68;
                                        v117 = 2049;
                                        v118 = v69;
                                        v119 = 1025;
                                        v120 = v70;
                                        v121 = 1025;
                                        v122 = v71;
                                        v123 = 1025;
                                        v124 = v72;
                                        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEBUG, "HRSE,readAvlHelper,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", (uint8_t *)&buf, 0x40u);
                                      }
                                      if (sub_1001BFF7C(115, 2))
                                      {
                                        bzero(&buf, 0x65CuLL);
                                        if (qword_1022A0070 != -1)
                                          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                        v81 = *(unsigned __int8 *)(a3 + 134);
                                        v82 = *(unsigned __int8 *)(a3 + 135);
                                        v83 = *(char *)(a3 + 136);
                                        v84 = *(char *)(a3 + 137);
                                        v85 = *(float *)(a3 + 140);
                                        v86 = *(_QWORD *)(a3 + 144);
                                        v87 = *(_DWORD *)(a3 + 152);
                                        v88 = *(_DWORD *)(a3 + 156);
                                        v89 = *(_DWORD *)(a3 + 160);
                                        LODWORD(v93) = 67176705;
                                        DWORD1(v93) = v81;
                                        WORD4(v93) = 1025;
                                        *(_DWORD *)((char *)&v93 + 10) = v82;
                                        HIWORD(v93) = 1025;
                                        v94 = v83;
                                        v95 = 1025;
                                        v96 = v84;
                                        v97 = 2049;
                                        v98 = v85;
                                        v99 = 2049;
                                        v100 = v86;
                                        v101 = 1025;
                                        v102 = v87;
                                        v103 = 1025;
                                        v104 = v88;
                                        v105 = 1025;
                                        v106 = v89;
                                        LODWORD(v92) = 64;
                                        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "HRSE,readAvlHelper,vers,%{private}d,headerLen,%{private}d,minLat,%{private}d,maxLat,%{private}d,binsize,%{private}.7f,timestamp,%{private}.1f,expirationAge,%{private}d,dataSizeBytes,%{private}d,crc,%{private}d", &v93, v92);
                                        v91 = (int *)v90;
                                        sub_100512490("Generic", 1, 0, 2, "static BOOL CLHrseTileAvailability::readAvlHelper(FILE *, unsigned char *, CLHRSETileAvailability &, size_t &, size_t &)", "%s\n", v90);
                                        if (v91 != &buf)
                                          free(v91);
                                      }
                                      return 1;
                                    }
                                    if (qword_1022A0070 != -1)
                                      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                    v79 = qword_1022A0078;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                                    {
                                      LOWORD(buf) = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - crc", (uint8_t *)&buf, 2u);
                                    }
                                    v80 = sub_1001BFF7C(115, 0);
                                    result = 0;
                                    if (v80)
                                    {
                                      bzero(&buf, 0x65CuLL);
                                      if (qword_1022A0070 != -1)
                                        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                      LOWORD(v93) = 0;
                                      LODWORD(v92) = 2;
                                      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - crc", &v93, v92, v93);
                                      goto LABEL_28;
                                    }
                                  }
                                  else
                                  {
                                    if (qword_1022A0070 != -1)
                                      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                    v77 = qword_1022A0078;
                                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                                    {
                                      LOWORD(buf) = 0;
                                      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - data size", (uint8_t *)&buf, 2u);
                                    }
                                    v78 = sub_1001BFF7C(115, 0);
                                    result = 0;
                                    if (v78)
                                    {
                                      bzero(&buf, 0x65CuLL);
                                      if (qword_1022A0070 != -1)
                                        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                      LOWORD(v93) = 0;
                                      LODWORD(v92) = 2;
                                      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - data size", &v93, v92, v93);
                                      goto LABEL_28;
                                    }
                                  }
                                }
                                else
                                {
                                  if (qword_1022A0070 != -1)
                                    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                  v75 = qword_1022A0078;
                                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                                  {
                                    LOWORD(buf) = 0;
                                    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - expiration age", (uint8_t *)&buf, 2u);
                                  }
                                  v76 = sub_1001BFF7C(115, 0);
                                  result = 0;
                                  if (v76)
                                  {
                                    bzero(&buf, 0x65CuLL);
                                    if (qword_1022A0070 != -1)
                                      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                    LOWORD(v93) = 0;
                                    LODWORD(v92) = 2;
                                    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - expiration age", &v93, v92, v93);
                                    goto LABEL_28;
                                  }
                                }
                              }
                              else
                              {
                                if (qword_1022A0070 != -1)
                                  dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                v73 = qword_1022A0078;
                                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                                {
                                  LOWORD(buf) = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - timestamp", (uint8_t *)&buf, 2u);
                                }
                                v74 = sub_1001BFF7C(115, 0);
                                result = 0;
                                if (v74)
                                {
                                  bzero(&buf, 0x65CuLL);
                                  if (qword_1022A0070 != -1)
                                    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                  LOWORD(v93) = 0;
                                  LODWORD(v92) = 2;
                                  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - timestamp", &v93, v92, v93);
                                  goto LABEL_28;
                                }
                              }
                            }
                            else
                            {
                              if (qword_1022A0070 != -1)
                                dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                              v40 = qword_1022A0078;
                              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                              {
                                v41 = *(float *)(a3 + 140);
                                buf = 134349056;
                                *(double *)v110 = v41;
                                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", (uint8_t *)&buf, 0xCu);
                              }
                              v42 = sub_1001BFF7C(115, 0);
                              result = 0;
                              if (v42)
                              {
                                bzero(&buf, 0x65CuLL);
                                if (qword_1022A0070 != -1)
                                  dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                                v43 = *(float *)(a3 + 140);
                                LODWORD(v93) = 134349056;
                                *(double *)((char *)&v93 + 4) = v43;
                                LODWORD(v92) = 12;
                                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,coarse avl file is not 0.05 deg by 0.05 deg,spacing unexpected,%{public}.1f,re-download needed", &v93, v92, v93);
                                goto LABEL_28;
                              }
                            }
                          }
                          else
                          {
                            if (qword_1022A0070 != -1)
                              dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                            v57 = qword_1022A0078;
                            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                            {
                              LOWORD(buf) = 0;
                              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - binsize", (uint8_t *)&buf, 2u);
                            }
                            v58 = sub_1001BFF7C(115, 0);
                            result = 0;
                            if (v58)
                            {
                              bzero(&buf, 0x65CuLL);
                              if (qword_1022A0070 != -1)
                                dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                              LOWORD(v93) = 0;
                              LODWORD(v92) = 2;
                              _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - binsize", &v93, v92, v93);
                              goto LABEL_28;
                            }
                          }
                        }
                        else
                        {
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                          v55 = qword_1022A0078;
                          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                          {
                            LOWORD(buf) = 0;
                            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - maxLat", (uint8_t *)&buf, 2u);
                          }
                          v56 = sub_1001BFF7C(115, 0);
                          result = 0;
                          if (v56)
                          {
                            bzero(&buf, 0x65CuLL);
                            if (qword_1022A0070 != -1)
                              dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                            LOWORD(v93) = 0;
                            LODWORD(v92) = 2;
                            _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - maxLat", &v93, v92, v93);
                            goto LABEL_28;
                          }
                        }
                      }
                      else
                      {
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                        v53 = qword_1022A0078;
                        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                        {
                          LOWORD(buf) = 0;
                          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - minLat", (uint8_t *)&buf, 2u);
                        }
                        v54 = sub_1001BFF7C(115, 0);
                        result = 0;
                        if (v54)
                        {
                          bzero(&buf, 0x65CuLL);
                          if (qword_1022A0070 != -1)
                            dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                          LOWORD(v93) = 0;
                          LODWORD(v92) = 2;
                          _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - minLat", &v93, v92, v93);
                          goto LABEL_28;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                      v51 = qword_1022A0078;
                      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                      {
                        LOWORD(buf) = 0;
                        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - headerLength", (uint8_t *)&buf, 2u);
                      }
                      v52 = sub_1001BFF7C(115, 0);
                      result = 0;
                      if (v52)
                      {
                        bzero(&buf, 0x65CuLL);
                        if (qword_1022A0070 != -1)
                          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                        LOWORD(v93) = 0;
                        LODWORD(v92) = 2;
                        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - headerLength", &v93, v92, v93);
                        goto LABEL_28;
                      }
                    }
                  }
                  else
                  {
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                    v49 = qword_1022A0078;
                    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(buf) = 0;
                      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - version", (uint8_t *)&buf, 2u);
                    }
                    v50 = sub_1001BFF7C(115, 0);
                    result = 0;
                    if (v50)
                    {
                      bzero(&buf, 0x65CuLL);
                      if (qword_1022A0070 != -1)
                        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                      LOWORD(v93) = 0;
                      LODWORD(v92) = 2;
                      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - version", &v93, v92, v93);
                      goto LABEL_28;
                    }
                  }
                }
                else
                {
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                  v47 = qword_1022A0078;
                  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                  {
                    LOWORD(buf) = 0;
                    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - invalid header string", (uint8_t *)&buf, 2u);
                  }
                  v48 = sub_1001BFF7C(115, 0);
                  result = 0;
                  if (v48)
                  {
                    bzero(&buf, 0x65CuLL);
                    if (qword_1022A0070 != -1)
                      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                    LOWORD(v93) = 0;
                    LODWORD(v92) = 2;
                    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - invalid header string", &v93, v92, v93);
                    goto LABEL_28;
                  }
                }
              }
              else
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                v45 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
                {
                  LOWORD(buf) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file - header string", (uint8_t *)&buf, 2u);
                }
                v46 = sub_1001BFF7C(115, 0);
                result = 0;
                if (v46)
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                  LOWORD(v93) = 0;
                  LODWORD(v92) = 2;
                  _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file - header string", &v93, v92, v93);
                  goto LABEL_28;
                }
              }
              return result;
            }
            if (fseek(a1, v22, 0))
            {
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10213EBC0);
              v44 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf) = 0;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,fseek returned non-zero", (uint8_t *)&buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_10213EBC0);
                LOWORD(v93) = 0;
                LODWORD(v92) = 2;
                _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,fseek returned non-zero", &v93, v92, v93);
                goto LABEL_28;
              }
              return 0;
            }
          }
          if (!feof(a1) && v19++ < 0x1FF)
            continue;
          break;
        }
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,did not synchronize to tile header_string", (uint8_t *)&buf, 2u);
      }
      v11 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v11)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
        LOWORD(v93) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,did not synchronize to tile header_string", &v93, v92, v93);
LABEL_28:
        v18 = (int *)v13;
        sub_100512490("Generic", 1, 0, 0, "static BOOL CLHrseTileAvailability::readAvlHelper(FILE *, unsigned char *, CLHRSETileAvailability &, size_t &, size_t &)", "%s\n", v13);
        if (v18 != &buf)
          free(v18);
        return 0;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,null buffer", (uint8_t *)&buf, 2u);
      }
      v17 = sub_1001BFF7C(115, 0);
      result = 0;
      if (v17)
      {
        bzero(&buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10213EBC0);
        LOWORD(v107) = 0;
        LODWORD(v92) = 2;
        _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,null buffer", &v107, v92, v93);
        goto LABEL_28;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10213EBC0);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#Error,HRSE,readAvlHelper,invalid availability file", (uint8_t *)&buf, 2u);
    }
    v15 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v15)
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10213EBC0);
      LOWORD(v107) = 0;
      LODWORD(v92) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,HRSE,readAvlHelper,invalid availability file", &v107, v92, v93);
      goto LABEL_28;
    }
  }
  return result;
}

uint64_t sub_1004CA4F0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

_QWORD *sub_1004CA4F8(uint64_t a1)
{
  _QWORD *result;

  result = sub_1000F34E0((_QWORD *)a1);
  *(_DWORD *)(a1 + 24) = 0;
  *(_WORD *)(a1 + 28) = 0;
  return result;
}

void sub_1004CA520(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_1004CA54C(id a1)
{
  qword_1022A0078 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gnss");
}

uint64_t sub_1004CA578(uint64_t a1, __int128 *a2, uint64_t a3)
{
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  *(_QWORD *)a1 = a3;
  sub_1010153F4(a1 + 8, a2);
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  v12 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v10 = _Q0;
  v11 = _Q0;
  sub_1004CD5CC(a1 + 208, 0xCuLL, &v11);
  *(_OWORD *)(a1 + 256) = v10;
  *(_OWORD *)(a1 + 272) = v10;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 296) = 0;
  sub_1004CA654(a1);
  return a1;
}

void sub_1004CA618(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  void *v7;

  sub_10047F660(v5);
  sub_100427A00(v4);
  sub_1004A4854(v3);
  v7 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v7;
    operator delete(v7);
  }
  _Unwind_Resume(a1);
}

double sub_1004CA654(uint64_t a1)
{
  int v2;
  double result;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[2];
  __int16 v10;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  int v15;

  v2 = (int)-[NSTimeZone secondsFromGMT](+[NSTimeZone localTimeZone](NSTimeZone, "localTimeZone"), "secondsFromGMT")% 3600;
  if (v2 != *(_DWORD *)(a1 + 296))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_DWORD *)(a1 + 296);
      *(_DWORD *)buf = 67109376;
      v13 = v5;
      v14 = 1024;
      v15 = v2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,time zone change,clearing everything,old,%d,new,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v6 = *(_DWORD *)(a1 + 296);
      v9[0] = 67109376;
      v9[1] = v6;
      v10 = 1024;
      v11 = v2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,time zone change,clearing everything,old,%d,new,%d", v9, 14);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::computeTimezoneOffset()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    *(_DWORD *)(a1 + 296) = v2;
    *(_QWORD *)&result = sub_1004CA86C(a1).n128_u64[0];
  }
  return result;
}

__n128 sub_1004CA86C(uint64_t a1)
{
  void **v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 result;
  __n128 v18;
  _OWORD v19[3];
  unint64_t v20;
  __int128 v21;
  uint64_t v22;

  sub_1009004D0((_QWORD *)(a1 + 8));
  v2 = *(void ***)(a1 + 120);
  v3 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 152) = 0;
  v4 = v3 - (_QWORD)v2;
  if (v4 >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v5 = *(_QWORD *)(a1 + 128);
      v2 = (void **)(*(_QWORD *)(a1 + 120) + 8);
      *(_QWORD *)(a1 + 120) = v2;
      v4 = v5 - (_QWORD)v2;
    }
    while (v4 > 0x10);
  }
  if (v4 >> 3 == 1)
  {
    v6 = 128;
  }
  else
  {
    if (v4 >> 3 != 2)
      goto LABEL_8;
    v6 = 256;
  }
  *(_QWORD *)(a1 + 144) = v6;
LABEL_8:
  v7 = *(void ***)(a1 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 200) = 0;
  v9 = v8 - (_QWORD)v7;
  if (v9 >= 0x11)
  {
    do
    {
      operator delete(*v7);
      v10 = *(_QWORD *)(a1 + 176);
      v7 = (void **)(*(_QWORD *)(a1 + 168) + 8);
      *(_QWORD *)(a1 + 168) = v7;
      v9 = v10 - (_QWORD)v7;
    }
    while (v9 > 0x10);
  }
  if (v9 >> 3 == 1)
  {
    v11 = 51;
    goto LABEL_14;
  }
  if (v9 >> 3 == 2)
  {
    v11 = 102;
LABEL_14:
    *(_QWORD *)(a1 + 192) = v11;
  }
  v20 = 0;
  v22 = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  v18 = (__n128)_Q0;
  memset(v19, 0, sizeof(v19));
  v21 = _Q0;
  sub_1004CD5CC((uint64_t)v19, 0xCuLL, &v21);
  v20 = 0xBFF0000000000000;
  sub_1004CDDDC((_QWORD *)(a1 + 208), (uint64_t)v19);
  *(_QWORD *)(a1 + 256) = v20;
  sub_10047F660(v19);
  *(_QWORD *)(a1 + 264) = 0xBFF0000000000000;
  result = v18;
  *(__n128 *)(a1 + 272) = v18;
  *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  return result;
}

void sub_1004CA9A8(uint64_t a1, __int128 *a2)
{
  double v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  NSObject *v9;
  double v10;
  unint64_t v11;
  NSObject *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  char *v23;
  unint64_t v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  _WORD v29[8];
  __n128 v30;
  uint8_t buf[8];
  char *v32;

  v4 = *(double *)a2;
  *(_QWORD *)(a1 + 280) = *(_QWORD *)a2;
  if (*(double *)(a1 + 288) > *(double *)(a1 + 256))
  {
    sub_1004CAE70(a1);
    v6 = *(_QWORD *)(a1 + 168);
    if (*(_QWORD *)(a1 + 176) == v6)
    {
      v8 = 0;
    }
    else
    {
      v7 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192);
      v8 = *(_QWORD *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
    }
    if (v8 == v5 || v4 < *(double *)(v5 + 8))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v9 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "StandPlus,ignoring calorimetry input", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10213EBE0);
        v30.n128_u16[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "StandPlus,ignoring calorimetry input", &v30, 2);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feed(const CLStandMinuteInputData &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      sub_1004CAFBC((_QWORD *)a1);
      sub_1004CB3C8(a1);
      return;
    }
    *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
  }
  sub_101015424((void **)(a1 + 8), a2);
  v30.n128_f64[0] = v10;
  v30.n128_u64[1] = v11;
  if (v10 != *(double *)(a1 + 264) && (v10 != -1.0 || *(_QWORD *)(a1 + 152) != 0))
    sub_1004CB4D0(a1, &v30);
  sub_1004CAFBC((_QWORD *)a1);
  sub_1004CB3C8(a1);
  if (*(_QWORD *)(a1 + 200) >= 8uLL)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v13 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,sedentaryTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v29[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,maxReached,sedentaryTimer", v29, 2);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feed(const CLStandMinuteInputData &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
    v14 = *(_QWORD *)(a1 + 192);
    v15 = *(_QWORD *)(a1 + 168);
    v16 = (_QWORD *)(v15 + 8 * (v14 / 0x66));
    if (*(_QWORD *)(a1 + 176) == v15)
      v17 = 0;
    else
      v17 = (char *)(*v16 + 40 * (v14 % 0x66));
    v18 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)buf = v15 + 8 * (v14 / 0x66);
    v32 = v17;
    sub_1004CE08C(buf, v18);
    v19 = (uint64_t)&v32[-**(_QWORD **)buf];
    v20 = 0xCCCCCCCCCCCCCCCDLL * (v19 >> 3);
    if (v19 < 321)
    {
      v24 = 109 - v20;
      v22 = (_QWORD *)(*(_QWORD *)buf - 8 * (v24 / 0x66));
      v23 = (char *)(*v22 + 40 * (102 * (v24 / 0x66) - v24) + 4040);
    }
    else
    {
      v21 = v20 - 8;
      v22 = (_QWORD *)(*(_QWORD *)buf + 8 * (v21 / 0x66));
      v23 = (char *)(*v22 + 40 * (v21 % 0x66));
    }
    sub_1004CB878((_QWORD *)(a1 + 160), v16, v17, v22, v23);
  }
}

_QWORD *sub_1004CAE70(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  double v6;
  double v7;
  _QWORD *v8;
  unint64_t v9;
  double v10;
  unint64_t v11;
  double v12;
  _QWORD *result;
  unint64_t v14;
  uint64_t v15;
  double v16;
  unint64_t v18;

  v1 = *(_QWORD *)(a1 + 192);
  v2 = v1 + *(_QWORD *)(a1 + 200);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 176);
  v5 = (_QWORD *)(v3 + 8 * (v2 / 0x66));
  v6 = (double)*(int *)(a1 + 296);
  v7 = floor(*(double *)(a1 + 280) + v6) - (double)((int)vcvtmd_s64_f64(*(double *)(a1 + 280) + v6) % 3600);
  v8 = (_QWORD *)(v3 + 8 * (v1 / 0x66));
  if (v4 == v3)
    v9 = 0;
  else
    v9 = *v8 + 40 * (v1 % 0x66);
  v10 = v7 - v6;
  v11 = v2 % 0x66;
  v12 = 1.79769313e308;
  result = v5;
LABEL_5:
  v14 = v9;
  while (1)
  {
    v15 = v4 == v3 ? 0 : *v5 + 40 * v11;
    if (v14 == v15)
      return result;
    if (*(_DWORD *)(v14 + 16) == 2)
    {
      v16 = *(double *)(v14 + 8);
      if (v16 > v10 && v16 < v12)
      {
        v12 = *(double *)(v14 + 8);
        result = v8;
      }
    }
    v9 += 40;
    v14 += 40;
    if (*v8 + 4080 == v9)
    {
      v18 = v8[1];
      ++v8;
      v9 = v18;
      goto LABEL_5;
    }
  }
}

_QWORD *sub_1004CAFBC(_QWORD *result)
{
  double v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v9;
  unint64_t v10;
  double **v11;
  double *v12;
  double *v13;
  unint64_t v14;
  int v15;
  double v16;
  double *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  __int128 v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  _OWORD v50[3];
  unint64_t v51;
  __int128 v52;
  uint64_t v53;

  v1 = floor(*((double *)result + 35) + (double)*((int *)result + 74))
     - (double)((int)vcvtmd_s64_f64(*((double *)result + 35) + (double)*((int *)result + 74)) % 3600)
     - (double)*((int *)result + 74);
  if (v1 > *((double *)result + 32))
  {
    v2 = result;
    v3 = result + 26;
    sub_1004CB3C8((uint64_t)result);
    v51 = 0;
    memset(v50, 0, sizeof(v50));
    v53 = 0;
    __asm { FMOV            V0.2D, #-1.0 }
    v52 = _Q0;
    sub_1004CD5CC((uint64_t)v50, 0xCuLL, &v52);
    v51 = 0xBFF0000000000000;
    sub_1004CDDDC(v3, (uint64_t)v50);
    v2[32] = v51;
    sub_10047F660(v50);
    v9 = v2[27];
    if (v2[28] != v9)
    {
      v10 = v2[30];
      v11 = (double **)(v9 + 8 * (v10 / 0xAA));
      v12 = *v11;
      v13 = &(*v11)[3 * (v10 % 0xAA)];
      v14 = *(_QWORD *)(v9 + 8 * ((v2[31] + v10) / 0xAA)) + 24 * ((v2[31] + v10) % 0xAA);
      if (v13 != (double *)v14)
      {
        v15 = 0;
        do
        {
          v16 = v1 + (double)v15;
          *v13 = v16;
          v13[1] = v16 + 300.0;
          v13 += 3;
          if ((char *)v13 - (char *)v12 == 4080)
          {
            v17 = v11[1];
            ++v11;
            v12 = v17;
            v13 = v17;
          }
          v15 += 300;
        }
        while (v13 != (double *)v14);
      }
    }
    *((double *)v2 + 32) = v1;
    sub_1009004D0(v2 + 1);
    v2[36] = 0xBFF0000000000000;
    v18 = v2[24];
    v19 = v2[21];
    v20 = v2[22];
    v21 = (_QWORD *)(v19 + 8 * (v18 / 0x66));
    if (v20 == v19)
    {
      v22 = 0;
      v23 = v2 + 25;
    }
    else
    {
      v22 = *(_QWORD *)(v19 + 8 * (v18 / 0x66)) + 40 * (v18 % 0x66);
      v23 = v2 + 25;
      v24 = *(_QWORD *)(v19 + 8 * ((v2[25] + v18) / 0x66)) + 40 * ((v2[25] + v18) % 0x66);
      if (v22 != v24)
      {
        while (*(double *)(v22 + 8) >= v1)
        {
          v22 += 40;
          if (v22 - *v21 == 4080)
          {
            v25 = v21[1];
            ++v21;
            v22 = v25;
          }
          if (v22 == v24)
            goto LABEL_24;
        }
      }
      if (v22 == v24)
      {
LABEL_24:
        v22 = *(_QWORD *)(v19 + 8 * ((v2[25] + v18) / 0x66)) + 40 * ((v2[25] + v18) % 0x66);
      }
      else
      {
        v26 = v22;
        v27 = v21;
        while (1)
        {
          v26 += 40;
          if (v26 - *v27 == 4080)
          {
            v28 = v27[1];
            ++v27;
            v26 = v28;
          }
          if (v26 == v24)
            break;
          if (*(double *)(v26 + 8) >= v1)
          {
            v29 = *(_OWORD *)v26;
            v30 = *(_OWORD *)(v26 + 16);
            *(_BYTE *)(v22 + 32) = *(_BYTE *)(v26 + 32);
            *(_OWORD *)v22 = v29;
            *(_OWORD *)(v22 + 16) = v30;
            v22 += 40;
            if (v22 - *v21 == 4080)
            {
              v31 = v21[1];
              ++v21;
              v22 = v31;
            }
          }
        }
        v18 = v2[24];
        v19 = v2[21];
        v20 = v2[22];
      }
    }
    v32 = v18 + *v23;
    v33 = (_QWORD *)(v19 + 8 * (v32 / 0x66));
    if (v20 == v19)
      v34 = 0;
    else
      v34 = (char *)(*v33 + 40 * (v32 % 0x66));
    sub_1004CB878(v2 + 20, v21, (char *)v22, v33, v34);
    v35 = v2[18];
    v36 = v2[15];
    v37 = v2[16];
    v38 = (_QWORD *)(v36 + 8 * (v35 >> 8));
    if (v37 == v36)
    {
      v39 = 0;
      v40 = v2 + 19;
    }
    else
    {
      v39 = *v38 + 16 * v35;
      v40 = v2 + 19;
      v41 = *(_QWORD *)(v36 + (((v2[19] + v35) >> 5) & 0x7FFFFFFFFFFFFF8))
          + 16 * (*((_BYTE *)v2 + 152) + v35);
      if (v39 != v41)
      {
        while (*(double *)(v39 + 8) >= v1)
        {
          v39 += 16;
          if (v39 - *v38 == 4096)
          {
            v42 = v38[1];
            ++v38;
            v39 = v42;
          }
          if (v39 == v41)
            goto LABEL_45;
        }
      }
      if (v39 == v41)
      {
LABEL_45:
        v39 = *(_QWORD *)(v36 + (((v2[19] + v35) >> 5) & 0x7FFFFFFFFFFFFF8))
            + 16 * (*((_BYTE *)v2 + 152) + v35);
      }
      else
      {
        v43 = v39;
        v44 = v38;
        while (1)
        {
          v43 += 16;
          if (v43 - *v44 == 4096)
          {
            v45 = v44[1];
            ++v44;
            v43 = v45;
          }
          if (v43 == v41)
            break;
          if (*(double *)(v43 + 8) >= v1)
          {
            *(_OWORD *)v39 = *(_OWORD *)v43;
            v39 += 16;
            if (v39 - *v38 == 4096)
            {
              v46 = v38[1];
              ++v38;
              v39 = v46;
            }
          }
        }
        v35 = v2[18];
        v36 = v2[15];
        v37 = v2[16];
      }
    }
    v47 = v35 + *v40;
    v48 = (char *)(v36 + 8 * (v47 >> 8));
    if (v37 == v36)
      v49 = 0;
    else
      v49 = *(_QWORD *)v48 + 16 * v47;
    return sub_1000D8D4C(v2 + 14, (char *)v38, v39, v48, v49);
  }
  return result;
}

void sub_1004CB3C8(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  double *v4;
  double v5;
  double v6;
  int v7;
  int v8;
  void (***v9)(_QWORD, __int128 *);
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;

  sub_1004CC700(a1);
  sub_1004CC568((uint64_t *)a1);
  v2 = *(_QWORD *)(a1 + 240);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 8 * (v2 / 0xAA));
  v4 = (double *)(v3 + 24 * (v2 % 0xAA));
  v5 = v4[1];
  if (*(double *)(a1 + 280) > v5)
  {
    v6 = *v4;
    v7 = sub_1004CCC34((_QWORD *)a1, *v4, v5);
    if (v7 >= 5)
      v8 = 5;
    else
      v8 = v7;
    *(_DWORD *)(v3 + 24 * (v2 % 0xAA) + 16) = v8;
    v9 = *(void (****)(_QWORD, __int128 *))a1;
    if (v6 > 0.0 && v9 != 0)
    {
      v11 = *(_OWORD *)v4;
      v14 = *((_QWORD *)v4 + 2);
      v13 = v11;
      (**v9)(v9, &v13);
      v2 = *(_QWORD *)(a1 + 240);
    }
    v12 = *(_QWORD *)(a1 + 248) - 1;
    *(_QWORD *)(a1 + 240) = v2 + 1;
    *(_QWORD *)(a1 + 248) = v12;
    sub_10047FDC4(a1 + 208, 1);
    sub_1004CA654(a1);
  }
}

void sub_1004CB4D0(uint64_t a1, __n128 *a2)
{
  NSObject *v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  uint8_t *v12;
  unint64_t v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int16 v19;
  unint64_t v20;
  uint8_t buf[4];
  unint64_t v22;
  __int16 v23;
  unint64_t v24;

  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213EBE0);
  v4 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
  {
    v5 = a2->n128_u64[0];
    v6 = a2->n128_u64[1];
    *(_DWORD *)buf = 134349312;
    v22 = v5;
    v23 = 2050;
    v24 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,minuteAdded,startTime,%{public}f,endTime,%{public}f", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v9 = a2->n128_u64[0];
    v10 = a2->n128_u64[1];
    v17 = 134349312;
    v18 = v9;
    v19 = 2050;
    v20 = v10;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,minuteAdded,startTime,%{public}f,endTime,%{public}f", &v17, 22);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::addMinute(const CLStandPlusMinute &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  if (*(_QWORD *)(a1 + 152) >= 0xF0uLL)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v7 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((*(_QWORD *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                     + 16 * *(_QWORD *)(a1 + 144));
      *(_DWORD *)buf = 134349056;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,minutes,startTime,%{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v13 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((*(_QWORD *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                      + 16 * *(_QWORD *)(a1 + 144));
      v17 = 134349056;
      v18 = v13;
      LODWORD(v16) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,maxReached,minutes,startTime,%{public}f", &v17, v16);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::addMinute(const CLStandPlusMinute &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    *(int64x2_t *)(a1 + 144) = vaddq_s64(*(int64x2_t *)(a1 + 144), (int64x2_t)xmmword_101B9DFC0);
    sub_1004A57E8(a1 + 112, 1);
  }
  sub_1004CCCB8((_QWORD *)(a1 + 112), a2);
  *(__n128 *)(a1 + 264) = *a2;
  sub_1004CCF50(a1, (uint64_t)a2);
}

unint64_t sub_1004CB878(_QWORD *a1, _QWORD *a2, char *a3, _QWORD *a4, char *a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char **v9;
  char *v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE **v16;
  _BYTE *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  __n128 v24[2];

  if (a5 == a3)
    v6 = 0;
  else
    v6 = 102 * (a4 - a2)
       - 0x3333333333333333 * ((uint64_t)&a5[-*a4] >> 3)
       + 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char **)(v8 + 8 * (v7 / 0x66));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = &(*v9)[40 * (v7 % 0x66)];
  if (a3 == v10)
    v11 = 0;
  else
    v11 = 102 * ((char **)a2 - v9)
        - 0x3333333333333333 * ((uint64_t)&a3[-*a2] >> 3)
        + 0x3333333333333333 * ((v10 - *v9) >> 3);
  v24[0].n128_u64[0] = v8 + 8 * (v7 / 0x66);
  v24[0].n128_u64[1] = (unint64_t)v10;
  sub_1004CE08C(v24, v11);
  if (v6 >= 1)
  {
    v12 = v24[0];
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      sub_1004CE08C(v24, v6);
      sub_1004CE208(v9, v10, (char **)v12.n128_u64[0], (char *)v12.n128_u64[1], v24[0].n128_u64[0], (char *)v24[0].n128_u64[1], v24);
      v18 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v18;
      while ((sub_1004CE138((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      sub_1004CE08C(v24, v6);
      v13 = v24[0];
      v14 = a1[4] + a1[5];
      v15 = a1[1];
      v16 = (_BYTE **)(v15 + 8 * (v14 / 0x66));
      if (a1[2] == v15)
        v17 = 0;
      else
        v17 = &(*v16)[40 * (v14 % 0x66)];
      v24[0] = v12;
      sub_1004CE3C0(v13.n128_u64[0], (_BYTE *)v13.n128_u64[1], v16, v17, (uint64_t)v24);
      a1[5] -= v6;
      while ((sub_1004CE194(a1, 1) & 1) != 0)
        ;
    }
  }
  v19 = a1[4];
  v20 = a1[1];
  v21 = (_QWORD *)(v20 + 8 * (v19 / 0x66));
  if (a1[2] == v20)
    v22 = 0;
  else
    v22 = *v21 + 40 * (v19 % 0x66);
  v24[0].n128_u64[0] = (unint64_t)v21;
  v24[0].n128_u64[1] = v22;
  sub_1004CE08C(v24, v11);
  return v24[0].n128_u64[0];
}

double sub_1004CBAF8(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = sub_1010158F4(a1 + 8, a2).n128_u64[0];
  return result;
}

void sub_1004CBB00(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  int v8;
  uint8_t *v9;
  char *v10;
  NSObject *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  char *v21;
  unint64_t v22;
  const char *v23;
  uint8_t *v24;
  __int16 v25[8];
  uint8_t buf[8];
  char *v27;
  int v28;
  char v29;
  uint64_t v30;
  char v31;

  v4 = (double)*(int *)(a1 + 296);
  v5 = floor(*(double *)a2 + v4) - (double)((int)vcvtmd_s64_f64(*(double *)a2 + v4) % 3600) - v4;
  v6 = floor(*(double *)a2 + 3600.0 + v4) - (double)((int)vcvtmd_s64_f64(*(double *)a2 + 3600.0 + v4) % 3600) - v4;
  if (vabdd_f64(*(double *)a2, v5) >= vabdd_f64(*(double *)a2, v6))
    v7 = v6;
  else
    v7 = v5;
  v8 = *(_DWORD *)(a2 + 16);
  if (v8 == 2)
  {
    *(double *)buf = v7 + 3600.0 + -1.0;
    v9 = (uint8_t *)(a2 + 8);
    if (*(double *)(a2 + 8) >= *(double *)buf)
      v9 = buf;
  }
  else
  {
    v9 = (uint8_t *)(a2 + 8);
  }
  v10 = *(char **)v9;
  *(double *)buf = v7;
  v27 = v10;
  v28 = v8;
  v29 = *(_BYTE *)(a2 + 20);
  v30 = *(_QWORD *)(a2 + 24);
  v31 = 0;
  sub_1004CBEF8((_QWORD *)(a1 + 160), (uint64_t)buf);
  switch(*(_DWORD *)(a2 + 16))
  {
    case 0:
    case 3:
    case 4:
      sub_1004CBFAC((uint64_t *)a1);
      break;
    case 1:
      sub_1004CC568((uint64_t *)a1);
      break;
    case 2:
      sub_1004CC700(a1);
      break;
    default:
      break;
  }
  if (*(_QWORD *)(a1 + 200) >= 8uLL)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v11 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "StandPlus,maxReached,sedentaryTimer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v25[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,maxReached,sedentaryTimer", v25, 2);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::feedSedentaryTimerAlarm(const CLSedentaryAlarmData &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    v12 = *(_QWORD *)(a1 + 192);
    v13 = *(_QWORD *)(a1 + 168);
    v14 = (_QWORD *)(v13 + 8 * (v12 / 0x66));
    if (*(_QWORD *)(a1 + 176) == v13)
      v15 = 0;
    else
      v15 = (char *)(*v14 + 40 * (v12 % 0x66));
    v16 = *(_QWORD *)(a1 + 200);
    *(_QWORD *)buf = v13 + 8 * (v12 / 0x66);
    v27 = v15;
    sub_1004CE08C(buf, v16);
    v17 = (uint64_t)&v27[-**(_QWORD **)buf];
    v18 = 0xCCCCCCCCCCCCCCCDLL * (v17 >> 3);
    if (v17 < 321)
    {
      v22 = 109 - v18;
      v20 = (_QWORD *)(*(_QWORD *)buf - 8 * (v22 / 0x66));
      v21 = (char *)(*v20 + 40 * (102 * (v22 / 0x66) - v22) + 4040);
    }
    else
    {
      v19 = v18 - 8;
      v20 = (_QWORD *)(*(_QWORD *)buf + 8 * (v19 / 0x66));
      v21 = (char *)(*v20 + 40 * (v19 % 0x66));
    }
    sub_1004CB878((_QWORD *)(a1 + 160), v14, v15, v20, v21);
  }
}

__n128 sub_1004CBEF8(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 102 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004CE540(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = *(_QWORD *)(v5 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)v8 = result;
  *(_OWORD *)(v8 + 16) = v10;
  ++a1[5];
  return result;
}

void sub_1004CBFAC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  const char *v42;
  uint8_t *v43;
  _OWORD v44[2];
  int v45;
  _BYTE v46[10];
  uint8_t buf[4];
  _QWORD v48[204];

  v2 = a1[21];
  if (a1[22] == v2)
  {
    sub_1004CAE70((uint64_t)a1);
    v20 = v21;
    v8 = 0;
LABEL_20:
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v23 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v24 = a1[21];
      if (a1[22] == v24)
      {
        v26 = 0;
        v27 = 0;
      }
      else
      {
        v25 = a1[24];
        v26 = *(_QWORD *)(v24 + 8 * (v25 / 0x66)) + 40 * (v25 % 0x66);
        v27 = *(_QWORD *)(v24 + 8 * ((a1[25] + v25) / 0x66)) + 40 * ((a1[25] + v25) % 0x66);
      }
      *(_DWORD *)buf = 67109376;
      LODWORD(v48[0]) = v8 == v26;
      WORD2(v48[0]) = 1024;
      *(_DWORD *)((char *)v48 + 6) = v27 != v20;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "StandPlus,no reminder %d,hour earned %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v34 = a1[21];
      if (a1[22] == v34)
      {
        v36 = 0;
        v37 = 0;
      }
      else
      {
        v35 = a1[24];
        v36 = *(_QWORD *)(v34 + 8 * (v35 / 0x66)) + 40 * (v35 % 0x66);
        v37 = *(_QWORD *)(v34 + 8 * ((a1[25] + v35) / 0x66)) + 40 * ((a1[25] + v35) % 0x66);
      }
      v45 = 67109376;
      *(_DWORD *)v46 = v8 == v36;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = v37 != v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,no reminder %d,hour earned %d", &v45, 14);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReminder()", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    return;
  }
  v3 = a1[24];
  v4 = v3 + a1[25];
  v5 = *(_QWORD *)(v2 + 8 * (v4 / 0x66));
  v6 = (_QWORD *)(v2 + 8 * (v4 / 0x66));
  v7 = v4 % 0x66;
  v8 = v5 + 40 * (v4 % 0x66);
  v9 = v3 / 0x66;
  v10 = v3 % 0x66;
  v11 = *(_QWORD *)(v2 + 8 * (v3 / 0x66)) + 40 * (v3 % 0x66);
  if (v8 == v11)
  {
    sub_1004CAE70((uint64_t)a1);
    v20 = v22;
    v12 = v6;
  }
  else
  {
    v12 = (_QWORD *)(v2 + 8 * (v4 / 0x66));
    while (1)
    {
      v13 = v8;
      if (v8 == v5)
        v13 = *(v12 - 1) + 4080;
      v14 = *(_DWORD *)(v13 - 24);
      v15 = v14 > 4;
      v16 = (1 << v14) & 0x19;
      if (!v15 && v16 != 0)
        break;
      if (v8 == v5)
      {
        v18 = *--v12;
        v5 = v18;
        v8 = v18 + 4080;
      }
      v8 -= 40;
      if (v8 == v11)
      {
        v8 = v11;
        break;
      }
    }
    sub_1004CAE70((uint64_t)a1);
    v20 = v19;
  }
  if (v8 == *(_QWORD *)(v2 + 8 * v9) + 40 * v10 || *v6 + 40 * v7 != v20)
    goto LABEL_20;
  a1[36] = a1[35];
  sub_1009004D0(a1 + 1);
  v28 = v8;
  if (v8 == *v12)
    v28 = *(v12 - 1) + 4080;
  if (!*(_BYTE *)(v28 - 8))
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v29 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
    {
      v30 = v8;
      if (v8 == *v12)
        v30 = *(v12 - 1) + 4080;
      v31 = *(_QWORD *)(v30 - 32);
      *(_DWORD *)buf = 134217984;
      v48[0] = v31;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "StandPlus,firing reminder immediately,firedTime,%f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v40 = v8;
      if (v8 == *v12)
        v40 = *(v12 - 1) + 4080;
      v41 = *(_QWORD *)(v40 - 32);
      v45 = 134217984;
      *(_QWORD *)v46 = v41;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "StandPlus,firing reminder immediately,firedTime,%f", COERCE_DOUBLE(&v45));
      v43 = (uint8_t *)v42;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReminder()", "%s\n", v42);
      if (v43 != buf)
        free(v43);
    }
    if (v8 == *v12)
    {
      v32 = *(v12 - 1);
      *(_BYTE *)(v32 + 4072) = 1;
      v8 = v32 + 4080;
    }
    else
    {
      *(_BYTE *)(v8 - 8) = 1;
    }
    v33 = *(_OWORD *)(v8 - 24);
    v44[0] = *(_OWORD *)(v8 - 40);
    v44[1] = v33;
    sub_1004CCD40(a1, (uint64_t *)v44);
  }
}

uint64_t *sub_1004CC568(uint64_t *result)
{
  double v1;
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  BOOL v18;
  __int128 v19;
  _OWORD v20[2];

  v1 = *((double *)result + 32);
  if (*((double *)result + 35) > v1 + 3600.0)
  {
    v2 = result;
    v3 = result[21];
    if (result[22] != v3)
    {
      v4 = result[24];
      v5 = v4 + result[25];
      v6 = (unint64_t *)(v3 + 8 * (v5 / 0x66));
      v7 = *v6;
      v8 = *v6 + 40 * (v5 % 0x66);
      v9 = v4 / 0x66;
      v10 = *(_QWORD *)(v3 + 8 * (v4 / 0x66));
      v11 = v4 % 0x66;
      v12 = v10 + 40 * v11;
      if (v8 == v12)
      {
        v7 = v8;
      }
      else
      {
        v13 = v6;
        do
        {
          if (v8 == v7)
          {
            v15 = *--v13;
            v14 = v15;
            if (*(_DWORD *)(v15 + 4056) == 1)
              goto LABEL_13;
            v8 = v14 + 4080;
            v6 = v13;
          }
          else
          {
            v14 = v7;
            v7 = v8;
            if (*(_DWORD *)(v8 - 24) == 1)
              goto LABEL_13;
          }
          v8 -= 40;
          v7 = v14;
        }
        while (v8 != v12);
        v7 = v12;
      }
LABEL_13:
      if (v7 != *(_QWORD *)(v3 + 8 * v9) + 40 * v11)
      {
        result = (uint64_t *)sub_1004CCC34(result, *((double *)result + 32), v1 + 3600.0);
        if (v7 == *v6)
        {
          v17 = *(v6 - 1);
          v18 = *(double *)(v17 + 4040) == v1 && (_DWORD)result == 0;
          if (v18 && !*(_BYTE *)(v17 + 4072))
          {
            *(_BYTE *)(v17 + 4072) = 1;
            v7 = v17 + 4080;
            goto LABEL_29;
          }
        }
        else
        {
          v16 = *(double *)(v7 - 40) == v1 && (_DWORD)result == 0;
          if (v16 && !*(_BYTE *)(v7 - 8))
          {
            *(_BYTE *)(v7 - 8) = 1;
LABEL_29:
            v19 = *(_OWORD *)(v7 - 24);
            v20[0] = *(_OWORD *)(v7 - 40);
            v20[1] = v19;
            return sub_1004CCD40(v2, (uint64_t *)v20);
          }
        }
      }
    }
  }
  return result;
}

void sub_1004CC700(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  double v10;
  double v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  double v18;
  const char *v19;
  char *v20;
  double v21;
  uint64_t v22;
  const char *v23;
  char *v24;
  _OWORD v25[2];
  int v26;
  double v27;
  __int16 v28;
  uint64_t v29;
  _BYTE buf[1628];

  sub_1004CAE70(a1);
  v3 = v2;
  v4 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176) == v4)
  {
    v6 = 0;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192);
    v6 = *(_QWORD *)(v4 + 8 * (v5 / 0x66)) + 40 * (v5 % 0x66);
  }
  if (v6 == v2)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v12 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "StandPlus,no hour earned", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      LOWORD(v26) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "StandPlus,no hour earned", &v26, 2);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  else
  {
    if (*(double *)(a1 + 280) > *(double *)(v2 + 8) && !*(_QWORD *)(a1 + 152))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v7 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(double *)v3;
        v9 = *(_QWORD *)(v3 + 8);
        *(_DWORD *)buf = 134349312;
        *(double *)&buf[4] = v8;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "StandPlus,empty minute buffer,forcing minute from early stand hour,startTime,%{public}f,firedTime,%{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10213EBE0);
        v21 = *(double *)v3;
        v22 = *(_QWORD *)(v3 + 8);
        v26 = 134349312;
        v27 = v21;
        v28 = 2050;
        v29 = v22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,empty minute buffer,forcing minute from early stand hour,startTime,%{public}f,firedTime,%{public}f", &v26, 22);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v11 = *(double *)v3;
      v10 = *(double *)(v3 + 8);
      if (vabdd_f64(v10, *(double *)v3) >= 60.0)
      {
        *(double *)buf = v10 + -60.0;
        *(double *)&buf[8] = v10;
      }
      else
      {
        *(_QWORD *)buf = *(_QWORD *)v3;
        *(double *)&buf[8] = v11 + 60.0;
      }
      sub_1004CCCB8((_QWORD *)(a1 + 112), (__n128 *)buf);
      sub_1009004D0((_QWORD *)(a1 + 8));
    }
    if (!*(_BYTE *)(v3 + 32))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v15 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_INFO))
      {
        v16 = *(_QWORD *)(v3 + 8);
        *(_DWORD *)buf = 134217984;
        *(_QWORD *)&buf[4] = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "StandPlus,firing stand hour immediately,firedTime,%f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10213EBE0);
        v18 = *(double *)(v3 + 8);
        v26 = 134217984;
        v27 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 1, "StandPlus,firing stand hour immediately,firedTime,%f", COERCE_DOUBLE(&v26));
        v20 = (char *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireReset()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      *(_BYTE *)(v3 + 32) = 1;
      v17 = *(_OWORD *)(v3 + 16);
      v25[0] = *(_OWORD *)v3;
      v25[1] = v17;
      sub_1004CCD40((uint64_t *)a1, (uint64_t *)v25);
    }
  }
}

uint64_t sub_1004CCC34(_QWORD *a1, double a2, double a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  double v10;
  _BOOL4 v11;
  uint64_t v12;

  v3 = a1[15];
  if (a1[16] == v3)
    return 0;
  v4 = a1[18];
  v5 = (uint64_t *)(v3 + 8 * (v4 >> 8));
  v6 = *v5;
  v7 = *v5 + 16 * v4;
  v8 = *(_QWORD *)(v3 + (((a1[19] + v4) >> 5) & 0x7FFFFFFFFFFFFF8))
     + 16 * (*((_BYTE *)a1 + 152) + v4);
  if (v7 == v8)
    return 0;
  LODWORD(result) = 0;
  do
  {
    v10 = *(double *)(v7 + 8);
    v11 = v10 >= a2;
    if (v10 >= a3)
      v11 = 0;
    v7 += 16;
    if (v7 - v6 == 4096)
    {
      v12 = v5[1];
      ++v5;
      v6 = v12;
      v7 = v12;
    }
    result = (result + v11);
  }
  while (v7 != v8);
  return result;
}

__n128 sub_1004CCCB8(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 32 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1004CEBBC(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  result = *a2;
  *(__n128 *)(*(_QWORD *)(v5 + ((v7 >> 5) & 0x7FFFFFFFFFFFFF8)) + 16 * v7) = *a2;
  ++a1[5];
  return result;
}

uint64_t *sub_1004CCD40(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  _OWORD v15[2];
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  int v27;

  if (*result)
  {
    v3 = result;
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v4 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = *((_DWORD *)a2 + 4);
      *(_DWORD *)buf = 134349568;
      v23 = v5;
      v24 = 2050;
      v25 = v6;
      v26 = 1026;
      v27 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,enforced alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v10 = *a2;
      v11 = a2[1];
      v12 = *((_DWORD *)a2 + 4);
      v16 = 134349568;
      v17 = v10;
      v18 = 2050;
      v19 = v11;
      v20 = 1026;
      v21 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,enforced alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", &v16, 28);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::sendAlarm(const CLSedentaryAlarmData) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v8 = *v3;
    v9 = *((_OWORD *)a2 + 1);
    v15[0] = *(_OWORD *)a2;
    v15[1] = v9;
    return (uint64_t *)(*(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v8 + 8))(v8, v15);
  }
  return result;
}

void sub_1004CCF50(uint64_t a1, uint64_t a2)
{
  double *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double v18;
  double v19;
  double v20;
  double v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  double v32;
  __int128 v33;
  uint64_t v34;
  const char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  _OWORD v41[2];
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  _BYTE buf[22];
  uint64_t v47;
  char v48;

  sub_1004CAE70(a1);
  v5 = (unint64_t)v4;
  v6 = *(_QWORD *)(a1 + 168);
  if (*(_QWORD *)(a1 + 176) == v6)
  {
    v8 = 0;
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 200) + *(_QWORD *)(a1 + 192);
    v8 = *(_QWORD *)(v6 + 8 * (v7 / 0x66)) + 40 * (v7 % 0x66);
  }
  if ((double *)v8 == v4)
  {
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213EBE0);
    v22 = qword_10229FC98;
    if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
    {
      v23 = *(_QWORD *)(a2 + 8);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "StandPlus,forcing reset from early stand minute,endTime,%{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v34 = *(_QWORD *)(a2 + 8);
      v42 = 134349056;
      v43 = v34;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,forcing reset from early stand minute,endTime,%{public}f", &v42, 12);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireResetWithMinute(const CLStandPlusMinute &)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    v24 = *(double *)(a2 + 8);
    *(double *)buf = floor(v24 + (double)*(int *)(a1 + 296))
                   - (double)((int)vcvtmd_s64_f64(v24 + (double)*(int *)(a1 + 296)) % 3600)
                   - (double)*(int *)(a1 + 296);
    *(_QWORD *)&buf[8] = floor(v24);
    *(_DWORD *)&buf[16] = 2;
    buf[20] = 1;
    v47 = 0;
    v48 = 0;
    sub_1004CBEF8((_QWORD *)(a1 + 160), (uint64_t)buf);
    v25 = *(_QWORD *)(a1 + 192) + *(_QWORD *)(a1 + 200);
    v26 = *(_QWORD *)(a1 + 168);
    v27 = (uint64_t *)(v26 + 8 * (v25 / 0x66));
    v28 = *v27;
    v29 = *v27 + 40 * (v25 % 0x66);
    if (*(_QWORD *)(a1 + 176) == v26)
      v29 = 0;
    v30 = v29 - v28;
    v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v29 - v28) >> 3);
    if (v30 < 41)
      v5 = v27[-((102 - v31) / 0x66)] + 40 * (102 * ((102 - v31) / 0x66) - (102 - v31)) + 4040;
    else
      v5 = v27[(v31 - 1) / 0x66] + 40 * ((v31 - 1) % 0x66);
  }
  else
  {
    v9 = *v4 + 60.0;
    if (v4[1] >= v9)
      v9 = v4[1];
    if (v9 < floor(*(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((*(_QWORD *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                              + 16 * *(_QWORD *)(a1 + 144)
                              + 8)))
    {
      if (qword_10229FC90 != -1)
        dispatch_once(&qword_10229FC90, &stru_10213EBE0);
      v10 = qword_10229FC98;
      if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(v5 + 8);
        v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((*(_QWORD *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a1 + 144)
                        + 8);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v11;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StandPlus,forcing minute from early stand hour,%{public}f,endTime,%{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC90 != -1)
          dispatch_once(&qword_10229FC90, &stru_10213EBE0);
        v37 = *(_QWORD *)(v5 + 8);
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 120) + ((*(_QWORD *)(a1 + 144) >> 5) & 0x7FFFFFFFFFFFFF8))
                        + 16 * *(_QWORD *)(a1 + 144)
                        + 8);
        v42 = 134349312;
        v43 = v37;
        v44 = 2050;
        v45 = v38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 0, "StandPlus,forcing minute from early stand hour,%{public}f,endTime,%{public}f", &v42, 22);
        v40 = (char *)v39;
        sub_100512490("Generic", 1, 0, 2, "void CLStandPlusMinuteEstimator::checkAndFireResetWithMinute(const CLStandPlusMinute &)", "%s\n", v39);
        if (v40 != buf)
          free(v40);
      }
      v13 = *(double *)(v5 + 8);
      v14 = *(_QWORD *)(a1 + 144);
      v15 = *(_QWORD *)(*(_QWORD *)(a1 + 120) + ((v14 >> 5) & 0x7FFFFFFFFFFFFF8));
      v16 = v15 + 16 * v14;
      v18 = *(double *)(v16 + 8);
      v17 = (double *)(v16 + 8);
      if (vabdd_f64(v13, v18) >= 60.0)
      {
        v32 = *(double *)v5;
        if (vabdd_f64(v13, *(double *)v5) >= 60.0)
        {
          *(double *)buf = v13 + -60.0;
          *(double *)&buf[8] = v13;
        }
        else
        {
          *(_QWORD *)buf = *(_QWORD *)v5;
          *(double *)&buf[8] = v32 + 60.0;
        }
        sub_1004CD550(a1 + 112, buf);
      }
      else
      {
        v19 = v13 + -60.0;
        v20 = *(double *)v5;
        if (*(double *)v5 >= v19)
          v19 = *(double *)v5;
        *(double *)(v15 + 16 * *(_QWORD *)(a1 + 144)) = v19;
        v21 = v20 + 60.0;
        if (v20 + 60.0 < *(double *)(v5 + 8))
          v21 = *(double *)(v5 + 8);
        *v17 = v21;
      }
    }
  }
  if (!*(_BYTE *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 32) = 1;
    v33 = *(_OWORD *)(v5 + 16);
    v41[0] = *(_OWORD *)v5;
    v41[1] = v33;
    sub_1004CCD40((uint64_t *)a1, (uint64_t *)v41);
  }
}

int64x2_t sub_1004CD550(uint64_t a1, _OWORD *a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  int64x2_t result;

  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
  {
    sub_1004CEED0((void **)a1);
    v4 = *(_QWORD *)(a1 + 32);
  }
  v5 = *(_QWORD *)(a1 + 8);
  v6 = (_QWORD *)(v5 + 8 * (v4 >> 8));
  v7 = *v6 + 16 * v4;
  if (*(_QWORD *)(a1 + 16) == v5)
    v7 = 0;
  if (v7 == *v6)
    v7 = *(v6 - 1) + 4096;
  *(_OWORD *)(v7 - 16) = *a2;
  result = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_101BB2F70);
  *(int64x2_t *)(a1 + 32) = result;
  return result;
}

uint64_t sub_1004CD5CC(uint64_t a1, unint64_t a2, __int128 *a3)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  if (a2)
    sub_1004CD618((_QWORD *)a1, a2, a3);
  return a1;
}

void sub_1004CD604(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10002E778(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004CD618(_QWORD *a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v6 = a1[1];
  v7 = a1[2];
  if (v7 == v6)
    v8 = 0;
  else
    v8 = 170 * ((v7 - v6) >> 3) - 1;
  v9 = a1[5] + a1[4];
  v10 = v8 - v9;
  v11 = a2 > v10;
  v12 = a2 - v10;
  if (v11)
  {
    sub_1004CD768(a1, v12);
    v6 = a1[1];
    v7 = a1[2];
    v9 = a1[4] + a1[5];
  }
  v13 = (_QWORD *)(v6 + 8 * (v9 / 0xAA));
  if (v7 == v6)
    v14 = 0;
  else
    v14 = *v13 + 24 * (v9 % 0xAA);
  v22 = (_QWORD *)(v6 + 8 * (v9 / 0xAA));
  v23 = v14;
  result = sub_1004CDD14(&v22, a2);
  v16 = v23;
  if (v14 != v23)
  {
    v17 = v22;
    do
    {
      if (v13 == v17)
        v18 = v16;
      else
        v18 = *v13 + 4080;
      if (v14 == v18)
      {
        v18 = v14;
      }
      else
      {
        v19 = v14;
        do
        {
          v20 = *a3;
          *(_QWORD *)(v19 + 16) = *((_QWORD *)a3 + 2);
          *(_OWORD *)v19 = v20;
          v19 += 24;
        }
        while (v19 != v18);
      }
      a1[5] -= 0x5555555555555555 * ((uint64_t)(v18 - v14) >> 3);
      if (v13 == v17)
        break;
      v21 = v13[1];
      ++v13;
      v14 = v21;
    }
    while (v21 != v16);
  }
  return result;
}

void sub_1004CD768(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if (v5 % 0xAA)
    v6 = v5 / 0xAA + 1;
  else
    v6 = v5 / 0xAA;
  v7 = a1[4];
  if (v6 >= v7 / 0xAA)
    v8 = v7 / 0xAA;
  else
    v8 = v6;
  if (v6 <= v7 / 0xAA)
  {
    for (a1[4] = v7 - 170 * v8; v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0xFF0uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 169;
          else
            v64 = 170;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - 170 * v8;
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = -170 * v8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0xFF0uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] += v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1004CDCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004CDD14(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x5555555555555555 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 169 - v3;
      v6 = &v2[-(v5 / 0xAA)];
      *result = v6;
      v4 = *v6 + 24 * (170 * (v5 / 0xAA) - v5) + 4056;
    }
    else
    {
      *result = &v2[v3 / 0xAA];
      v4 = v2[v3 / 0xAA] + 24 * (v3 % 0xAA);
    }
    result[1] = v4;
  }
  return result;
}

void sub_1004CDDB0(id a1)
{
  qword_10229FC98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Calorimetry");
}

uint64_t sub_1004CDDDC(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 85;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 170;
LABEL_7:
    a1[4] = v8;
  }
  sub_1004CDE7C(a1);
  result = sub_1004CE020((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1004CDE7C(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_10047FDC4((uint64_t)a1, 0);
    sub_1004CDEEC(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_1004CDF60((uint64_t)a1);
}

uint64_t sub_1004CDEEC(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 170 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA)
    a2 = 1;
  if (v5 < 0x154)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void sub_1004CDF60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

uint64_t sub_1004CE020(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_1004CDF60(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

_QWORD *sub_1004CE08C(_QWORD *result, uint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  if (a2)
  {
    v2 = (_QWORD *)*result;
    v3 = a2 - 0x3333333333333333 * ((uint64_t)(result[1] - *(_QWORD *)*result) >> 3);
    if ((uint64_t)v3 < 1)
    {
      v5 = 101 - v3;
      v6 = &v2[-(v5 / 0x66)];
      *result = v6;
      v4 = *v6 + 40 * (102 * (v5 / 0x66) - v5) + 4040;
    }
    else
    {
      *result = &v2[v3 / 0x66];
      v4 = v2[v3 / 0x66] + 40 * (v3 % 0x66);
    }
    result[1] = v4;
  }
  return result;
}

uint64_t sub_1004CE138(uint64_t a1, int a2)
{
  unint64_t v2;
  int v4;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2 < 0x66)
    a2 = 1;
  if (v2 < 0xCC)
    v4 = a2;
  else
    v4 = 0;
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(_QWORD *)(a1 + 8) += 8;
    *(_QWORD *)(a1 + 32) -= 102;
  }
  return v4 ^ 1u;
}

uint64_t sub_1004CE194(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int v7;

  v3 = a1[1];
  v2 = a1[2];
  if (v2 == v3)
    v4 = 0;
  else
    v4 = 102 * ((v2 - v3) >> 3) - 1;
  v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x66)
    a2 = 1;
  if (v5 < 0xCC)
    v7 = a2;
  else
    v7 = 0;
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

__n128 sub_1004CE208@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1004CE2D4(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4080;
    }
    v18 = *a1 + 4080;
    v19 = a2;
  }
  sub_1004CE2D4(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1004CE2D4@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  void *result;
  uint64_t v14;
  char *v15;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&a4[-v10] >> 3);
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3)) < v12)
        v12 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - a1) >> 3);
      v11 -= 40 * v12;
      a4 -= 40 * v12;
      if (v12)
        result = memmove(a4, v11, 40 * v12 - 7);
      if (v11 == a1)
        break;
      v14 = *--v6;
      v10 = v14;
      a4 = (char *)(v14 + 4080);
    }
    if ((char *)(*v6 + 4080) == a4)
    {
      v15 = (char *)v6[1];
      ++v6;
      a4 = v15;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1004CE3C0(_QWORD *a1, _BYTE *a2, _BYTE **a3, _BYTE *a4, uint64_t a5)
{
  void **v7;
  char *v8;
  _QWORD *v10;
  _BYTE *i;
  _BYTE *v12;
  double result;
  uint64_t v14;
  __int128 v15;

  v7 = *(void ***)a5;
  v8 = *(char **)(a5 + 8);
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = (_BYTE *)(*a1 + 4080); ; i = v12 + 4080)
    {
      sub_1004CE450(a2, v8, i, v7, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (void **)v15;
      *(_QWORD *)a5 = v15;
      *(_QWORD *)(a5 + 8) = v8;
      if (v10 == a3)
        break;
      v12 = (_BYTE *)*v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_1004CE450(a2, v8, a4, v7, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void *sub_1004CE450@<X0>(_BYTE *__src@<X1>, char *__dst@<X4>, _BYTE *a3@<X2>, void **a4@<X3>, _QWORD *a5@<X8>)
{
  void **v6;
  _BYTE *v7;
  _BYTE *v9;
  char *v10;
  int64_t v11;
  unint64_t v12;
  void *result;
  char *v14;

  v6 = a4;
  v7 = __src;
  if (__src == a3)
  {
    v9 = __src;
  }
  else
  {
    v9 = a3;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - __dst + 4080) >> 3);
      v12 = (uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3)) >= v11 ? v11 : 0xCCCCCCCCCCCCCCCDLL * ((v9 - v7) >> 3);
      if (v12)
        result = memmove(__dst, v7, 40 * v12 - 7);
      v7 += 40 * v12;
      if (v7 == v9)
        break;
      v14 = (char *)*v6++;
      v10 = v14;
      __dst = v14;
    }
    __dst += 40 * v12;
    if ((char *)*(v6 - 1) + 4080 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = __dst;
  return result;
}

void sub_1004CE540(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x66;
  v4 = v2 - 102;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004CE808(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004CE854(uint64_t a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *(_QWORD **)a1;
  if (a2)
  {
    v4 = a2 + ((uint64_t)(*(_QWORD *)(a1 + 8) - *result) >> 4);
    if (v4 < 1)
      result -= (unint64_t)(255 - v4) >> 8;
    else
      result += (unint64_t)v4 >> 8;
  }
  return result;
}

__n128 sub_1004CE8B0@<Q0>(char **a1@<X1>, char *a2@<X2>, char **a3@<X3>, char *a4@<X4>, _QWORD *a5@<X5>, char *a6@<X6>, __n128 *a7@<X8>)
{
  char *v12;
  char **v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_1004CE97C(v12, v14, v15, v16, &v21);
      v16 = (char *)v22.n128_u64[1];
      v15 = (_QWORD *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_1004CE97C(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_1004CE97C@<X0>(char *a1@<X1>, char *a2@<X2>, _QWORD *a3@<X3>, char *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  void *result;
  uint64_t v15;
  char *v16;

  v6 = a3;
  if (a1 == a2)
  {
    v9 = a1;
  }
  else
  {
    v9 = a2;
    v10 = *a3;
    v11 = a2;
    while (1)
    {
      v12 = (uint64_t)&a4[-v10];
      if ((v11 - a1) >> 4 >= v12 >> 4)
        v13 = v12 >> 4;
      else
        v13 = (v11 - a1) >> 4;
      v11 -= 16 * v13;
      a4 -= 16 * v13;
      if (v13)
        result = memmove(a4, v11, 16 * v13);
      if (v11 == a1)
        break;
      v15 = *--v6;
      v10 = v15;
      a4 = (char *)(v15 + 4096);
    }
    if ((char *)(*v6 + 4096) == a4)
    {
      v16 = (char *)v6[1];
      ++v6;
      a4 = v16;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = a4;
  return result;
}

double sub_1004CEA34(char **a1, char *__src, char **a3, char *a4, uint64_t a5)
{
  char **v8;
  char *v9;
  char *v10;
  void **v11;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  if (a1 == a3)
  {
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
    v10 = __src;
  }
  else
  {
    v8 = a1 + 1;
    sub_1004CEB00(__src, *(char **)(a5 + 8), *a1 + 4096, *(void ***)a5, &v14);
    for (*(_OWORD *)a5 = v15; v8 != a3; *(_OWORD *)a5 = v15)
    {
      v9 = *v8++;
      sub_1004CEB00(v9, *(char **)(a5 + 8), v9 + 4096, *(void ***)a5, &v14);
    }
    v10 = *a3;
    v11 = *(void ***)a5;
    v12 = *(char **)(a5 + 8);
  }
  sub_1004CEB00(v10, v12, a4, v11, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

char *sub_1004CEB00@<X0>(char *__src@<X0>, char *__dst@<X3>, char *a3@<X1>, void **a4@<X2>, char **a5@<X8>)
{
  void **v6;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;

  v6 = a4;
  if (__src != a3)
  {
    v9 = __src;
    v6 = a4 + 1;
    v10 = (char *)*a4;
    while (1)
    {
      v11 = v10 - __dst + 4096;
      v12 = (a3 - v9) >> 4 >= v11 >> 4 ? v11 >> 4 : (a3 - v9) >> 4;
      if (v12)
        __src = (char *)memmove(__dst, v9, 16 * v12);
      v9 += 16 * v12;
      if (v9 == a3)
        break;
      v13 = (char *)*v6++;
      v10 = v13;
      __dst = v13;
    }
    __dst += 16 * v12;
    if ((char *)*(v6 - 1) + 4096 == __dst)
      __dst = (char *)*v6;
    else
      --v6;
  }
  *a5 = a3;
  a5[1] = (char *)v6;
  a5[2] = __dst;
  return __src;
}

void sub_1004CEBBC(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1004CEE84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1004CEED0(void **a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void *v41;
  void *__p;
  char *v43;
  char *v44;
  char *v45;
  _QWORD *v46;

  v2 = a1[1];
  v3 = a1[2];
  v4 = v3 - v2;
  if (v3 == v2)
    v5 = 0;
  else
    v5 = 32 * (v3 - v2) - 1;
  v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(_QWORD)a1[5]] < 0x100)
  {
    v7 = (uint64_t)(a1 + 3);
    v8 = a1[3];
    v9 = *a1;
    v10 = v8 - (_BYTE *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9)
        v11 = 1;
      else
        v11 = v10 >> 2;
      v46 = a1 + 3;
      __p = sub_10025E6A0(v7, v11);
      v43 = (char *)__p;
      v44 = (char *)__p;
      v45 = (char *)__p + 8 * v12;
      v41 = operator new(0x1000uLL);
      sub_10003732C(&__p, &v41);
      v13 = (char *)a1[1];
      v14 = v44;
      if (v13 == a1[2])
      {
        v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            v15 = v43 - (_BYTE *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p)
                v23 = 1;
              else
                v23 = (v14 - (_BYTE *)__p) >> 2;
              v24 = (char *)sub_10025E6A0((uint64_t)v46, v23);
              v26 = v43;
              v14 = &v24[8 * (v23 >> 2)];
              v27 = v44 - v43;
              if (v44 != v43)
              {
                v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                v28 = 8 * (v27 >> 3);
                v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  v30 = *(_QWORD *)v26;
                  v26 += 8;
                  *(_QWORD *)v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              v31 = __p;
              __p = v24;
              v43 = &v24[8 * (v23 >> 2)];
              v44 = v14;
              v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                v14 = v44;
              }
            }
            else
            {
              v16 = v15 >> 3;
              v17 = v15 >> 3 < -1;
              v18 = (v15 >> 3) + 2;
              if (v17)
                v19 = v18;
              else
                v19 = v16 + 1;
              v20 = &v43[-8 * (v19 >> 1)];
              v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                v14 = v43;
              }
              v22 = &v14[-8 * (v19 >> 1)];
              v14 = &v20[v21];
              v43 = v22;
              v44 = &v20[v21];
            }
          }
          v32 = *(_QWORD *)v13;
          v13 += 8;
          *(_QWORD *)v14 = v32;
          v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        v33 = (char *)a1[1];
      }
      v36 = *a1;
      v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __p = v36;
      v43 = v33;
      v38 = (char *)a1[3];
      v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      v44 = v13;
      v45 = v38;
      if (v14 - v37 == 8)
        v40 = 128;
      else
        v40 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v40;
      if (v13 != v33)
        v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      if (v36)
        operator delete(v36);
    }
    else
    {
      if (v2 == v9)
      {
        __p = operator new(0x1000uLL);
        sub_100212218(a1, &__p);
        v34 = a1[2];
        __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __p = operator new(0x1000uLL);
      }
      sub_100343094((uint64_t)a1, &__p);
      if ((_BYTE *)a1[2] - (_BYTE *)a1[1] == 8)
        v35 = 128;
      else
        v35 = (uint64_t)a1[4] + 256;
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 256;
    __p = (void *)*((_QWORD *)v3 - 1);
    a1[2] = v3 - 8;
    sub_100343094((uint64_t)a1, &__p);
  }
}

void sub_1004CF194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  void *v12;

  operator delete(v12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1004CF1E0(uint64_t result, int a2, int a3, double a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = a2;
  *(_DWORD *)(result + 20) = a3;
  *(double *)(result + 24) = a4;
  return result;
}

BOOL sub_1004CF1F4(uint64_t a1, double a2)
{
  int v4;

  sub_1004CF248((double *)a1, a2);
  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == *(_DWORD *)(a1 + 16))
    *(double *)(a1 + 8) = a2;
  if (v4 >= 1)
    *(_DWORD *)a1 = v4 - 1;
  return v4 > 0;
}

uint64_t sub_1004CF248(double *a1, double a2)
{
  double v3;
  double v4;
  double v5;
  uint64_t result;
  int v7;
  int v8;

  v3 = a1[1];
  v4 = vabdd_f64(a2, v3);
  v5 = a1[3];
  if (v4 < v5)
    return *(unsigned int *)a1;
  result = *((unsigned int *)a1 + 4);
  if (v4 >= v5 * (double)(int)result)
  {
    *(_DWORD *)a1 = result;
  }
  else
  {
    v7 = vcvtmd_s64_f64(v4 / v5);
    v8 = *(_DWORD *)a1 + *((_DWORD *)a1 + 5) * v7;
    if (v8 >= (int)result)
      result = result;
    else
      result = v8;
    *(_DWORD *)a1 = result;
    a2 = v3 + (double)v7 * v5;
  }
  a1[1] = a2;
  return result;
}

BOOL sub_1004CF2B4(double *a1, double a2)
{
  sub_1004CF248(a1, a2);
  return *(_DWORD *)a1 > 0;
}

BOOL sub_1004CF2E0(uint64_t a1, double a2)
{
  return vabdd_f64(a2, *(double *)(a1 + 8)) > *(double *)(a1 + 24) * (double)*(int *)(a1 + 16);
}

uint64_t sub_1004CF5F0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t result;
  unint64_t v21;
  int v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    while (2)
    {
      if (!*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      {
        v4 = 0;
        v5 = 0;
        v6 = 0;
        while (1)
        {
          v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v8 = v7 + 1;
          if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
          v6 |= (unint64_t)(v9 & 0x7F) << v4;
          if ((v9 & 0x80) == 0)
            goto LABEL_11;
          v4 += 7;
          v10 = v5++ >= 9;
          if (v10)
          {
            v6 = 0;
            v11 = OBJC_IVAR___PBDataReader__error;
            v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
            goto LABEL_13;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v6 = 0;
LABEL_13:
        if (v12)
          v13 = 1;
        else
          v13 = (v6 & 7) == 4;
        if (!v13)
        {
          switch((v6 >> 3))
          {
            case 1u:
              v14 = 0;
              v15 = 0;
              v16 = 0;
              break;
            case 2u:
              v21 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v21 <= 0xFFFFFFFFFFFFFFFBLL && v21 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v21);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v21 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 16;
              goto LABEL_71;
            case 3u:
              v23 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v23 <= 0xFFFFFFFFFFFFFFFBLL && v23 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v23);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 40;
              goto LABEL_71;
            case 4u:
              v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v24 <= 0xFFFFFFFFFFFFFFFBLL && v24 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 36;
              goto LABEL_71;
            case 5u:
              v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v25 <= 0xFFFFFFFFFFFFFFFBLL && v25 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v25 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 8;
              goto LABEL_71;
            case 6u:
              v26 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v26 <= 0xFFFFFFFFFFFFFFFBLL && v26 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v26);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 24;
              goto LABEL_71;
            case 7u:
              v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v27 <= 0xFFFFFFFFFFFFFFFBLL && v27 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v27 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 20;
              goto LABEL_71;
            case 8u:
              v28 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v28 <= 0xFFFFFFFFFFFFFFFBLL && v28 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v28);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 28;
              goto LABEL_71;
            case 9u:
              v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
              if (v29 <= 0xFFFFFFFFFFFFFFFBLL && v29 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              {
                v22 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
                *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 4;
              }
              else
              {
                *(_BYTE *)(a2 + v11) = 1;
                v22 = 0;
              }
              v30 = 32;
LABEL_71:
              *(_DWORD *)(a1 + v30) = v22;
              goto LABEL_72;
            default:
              result = PBReaderSkipValueWithTag(a2);
              if (!(_DWORD)result)
                return result;
LABEL_72:
              if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
                return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
              continue;
          }
          while (1)
          {
            v17 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v18 = v17 + 1;
            if (v17 == -1 || v18 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v19 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v17);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v18;
            v16 |= (unint64_t)(v19 & 0x7F) << v14;
            if ((v19 & 0x80) == 0)
              goto LABEL_52;
            v14 += 7;
            v10 = v15++ >= 9;
            if (v10)
            {
              LODWORD(v16) = 0;
              goto LABEL_54;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_52:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v16) = 0;
LABEL_54:
          *(_DWORD *)(a1 + 12) = v16;
          goto LABEL_72;
        }
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1004D02F8(uint64_t a1, int a2, char a3, char a4)
{
  uint64_t result;

  result = sub_1005821F4(a1, a2);
  *(_QWORD *)result = off_10213EC10;
  *(_BYTE *)(result + 200) = a3;
  *(_BYTE *)(result + 201) = a4;
  *(_BYTE *)(result + 202) = 0;
  *(_QWORD *)(result + 208) = 0;
  *(_QWORD *)(result + 216) = 0;
  return result;
}

uint64_t sub_1004D0338(_QWORD *a1)
{
  *a1 = off_10213EC10;
  sub_1004D063C((uint64_t)a1);
  sub_100261F44((uint64_t)(a1 + 26));
  return sub_100582BD8((uint64_t)a1);
}

void sub_1004D0378(_QWORD *a1)
{
  sub_1004D0338(a1);
  operator delete();
}

void sub_1004D039C(uint64_t a1)
{
  _BOOL4 v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  uint64_t v10;
  uint8_t buf[4];
  uint64_t v12;

  sub_1004D057C(a1, (double *)(a1 + 40));
  if (*(_BYTE *)(a1 + 201))
  {
    v2 = sub_101082B90(*(_QWORD *)(a1 + 208), 0);
    *(_BYTE *)(a1 + 202) = v2;
    if (v2)
    {
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10213EC68);
      v3 = qword_10229FD28;
      if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
      {
        v4 = sub_100A0A3A0(*(_QWORD *)(a1 + 208));
        *(_DWORD *)buf = 134349056;
        v12 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fast path has been initialized,serviceRef,%{public}p", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD20 != -1)
          dispatch_once(&qword_10229FD20, &stru_10213EC68);
        v5 = qword_10229FD28;
        v6 = sub_100A0A3A0(*(_QWORD *)(a1 + 208));
        v9 = 134349056;
        v10 = v6;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "Fast path has been initialized,serviceRef,%{public}p", &v9, 12);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::start()", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
    }
  }
}

void sub_1004D057C(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  _DWORD v11[2];
  char v12;
  __int128 v13;

  v5 = (uint64_t *)(a1 + 208);
  v4 = *(_QWORD *)(a1 + 208);
  if (!v4)
  {
    v6 = *(unsigned __int8 *)(a1 + 200);
    v7 = (uint64_t *)sub_100A07FA0();
    v11[0] = 65292;
    v11[1] = v6;
    v12 = 0;
    sub_1004D0828(v7, (uint64_t)v11, (uint64_t *)&v13);
    sub_1002B7674((uint64_t)v5, &v13);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
    if (*((_QWORD *)&v13 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v4 = *v5;
  }
  sub_10006B4E0(v4, *a2);
  sub_100A0A4BC(*(uint64_t **)(a1 + 208), (uint64_t)sub_1004D08E8, a1);
}

void sub_1004D063C(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  _BYTE buf[1632];

  *(_QWORD *)buf = 0;
  sub_1004D057C(a1, (double *)buf);
  if (*(_BYTE *)(a1 + 202))
  {
    *(_BYTE *)(a1 + 202) = 0;
    sub_101082B18(*(_QWORD *)(a1 + 208));
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    v2 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      v3 = sub_100A0A3A0(*(_QWORD *)(a1 + 208));
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Fast path closed,serviceRef,%{public}p", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10213EC68);
      v4 = qword_10229FD28;
      v5 = sub_100A0A3A0(*(_QWORD *)(a1 + 208));
      v8 = 134349056;
      v9 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v4, 0, "Fast path closed,serviceRef,%{public}p", &v8, 12);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSensorFusionServiceSPU::stop()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_1004D0818(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(a1 + 40) = *a2;
  sub_1004D057C(a1, (double *)(a1 + 40));
}

void sub_1004D0828(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t *v13;

  v13 = a1;
  sub_1004D1298((int *)a2, (int *)(a2 + 4), (char *)(a2 + 8), (uint64_t *)&v13, a3);
  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  sub_100A083CC(a1, &v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1004D08CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44(v9);
  _Unwind_Resume(a1);
}

void sub_1004D08E8(uint64_t a1, float32x4_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  float32x4_t v8[3];
  int v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  char v13;
  uint64_t v14;

  v8[0] = 0uLL;
  v7 = 0xBFF0000000000000;
  sub_10012C97C(v8, a2);
  v9 = 0;
  memset(&v8[1], 0, 32);
  v10 = xmmword_101BB2F90;
  v11 = 0x1FF00000000;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (sub_1004D0A54(a5, 0, (uint64_t)&v7, (float32x4_t)xmmword_101BB2F90))
    sub_100582E8C(a1, (uint64_t)&v7);
}

void sub_1004D0974(uint64_t a1, uint64_t a2, float32x4_t a3)
{
  uint64_t v5;
  uint64_t v6;
  float32x4_t v7;
  const void *v8;
  float32x4_t *v9;
  float32x4_t v10;

  v5 = *(_QWORD *)(a1 + 208);
  if (v5)
  {
    if (*(_BYTE *)(a1 + 202) && (v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5)) != 0)
    {
      v8 = (const void *)v6;
      sub_1004D0A54(v6, 0, a2, v7);
      CFRelease(v8);
    }
    else
    {
      sub_100582DB8(a1, a2);
    }
  }
  else
  {
    *(_QWORD *)a2 = 0xBFF0000000000000;
    v9 = (float32x4_t *)(a2 + 8);
    v10 = 0uLL;
    sub_10012C97C(&v10, a3);
    if (v9 != &v10)
      *v9 = v10;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 96) = 0;
    *(_QWORD *)(a2 + 36) = 0;
    *(_QWORD *)(a2 + 52) = 0;
    *(_QWORD *)(a2 + 44) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 88) = 0;
  }
}

BOOL sub_1004D0A54(uint64_t a1, int a2, uint64_t a3, float32x4_t a4)
{
  _BYTE *v7;
  unint64_t TimeStamp;
  double v9;
  __int128 v10;
  __int32 v11;
  NSObject *v12;
  _BOOL8 result;
  _BYTE *v14;
  double v15;
  NSObject *v16;
  _BYTE *v17;
  int v18;
  __int128 v19;
  __int32 v20;
  NSObject *v21;
  _BOOL4 v22;
  _BYTE *v23;
  double v24;
  float v25;
  float v26;
  uint64_t v28;
  float v29;
  float v30;
  float v37;
  float v38;
  uint64_t v39;
  int v40;
  int v41;
  __int128 v42;
  int v43;
  NSObject *v44;
  _BOOL4 v45;
  float32x2_t v46;
  float32x2_t v47;
  float v48;
  int __dst;
  uint64_t v50;
  float32x4_t v51;
  float32x4_t v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  int v57;
  float v58;
  float32x2_t v59;
  float v60;
  uint64_t v61;
  int v62;
  int64_t v63;
  _BYTE *v64;
  _BYTE v65[18];
  _BYTE buf[1638];

  *(_QWORD *)a3 = 0xBFF0000000000000;
  v7 = (_BYTE *)(a3 + 8);
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  sub_10012C97C((float32x4_t *)buf, a4);
  if (v7 != buf)
    *(_OWORD *)v7 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 96) = 0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_DWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_BYTE *)(a3 + 88) = 0;
  if (!a1)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    v12 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning Device motion event ref invalid", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    LOWORD(__dst) = 0;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "#Warning Device motion event ref invalid", &__dst, 2);
LABEL_30:
    v17 = v14;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLSensorFusionServiceSPU::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)", "%s\n", v15);
    goto LABEL_31;
  }
  v63 = 0;
  v64 = 0;
  IOHIDEventGetVendorDefinedData(a1, &v64, &v63);
  if (!v64 || v63 <= 0)
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    v16 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Empty payload, returning", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    LOWORD(__dst) = 0;
    v15 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 1, "Empty payload, returning", &__dst, 2);
    goto LABEL_30;
  }
  TimeStamp = IOHIDEventGetTimeStamp(a1);
  v9 = sub_100127828(TimeStamp);
  sub_10012BC38(&__dst, v64, v63);
  if (__dst <= 3u)
  {
    if (__dst == 2)
    {
      if (a2 && v50 != a2)
        return 0;
      *(float32x4_t *)buf = v52;
      sub_10012C97C((float32x4_t *)buf, v52);
      v25 = v51.f32[3] - v60;
      v46 = vsub_f32(*(float32x2_t *)&v51.i32[1], v59);
      v47 = v46;
      v48 = v51.f32[3] - v60;
      v26 = sub_10012C7A4((float *)buf);
      v28 = 0;
      v29 = 0.0;
      do
      {
        v29 = v29 + (float)(v47.f32[v28] * v47.f32[v28]);
        ++v28;
      }
      while (v28 != 3);
      v30 = sqrtf(v29);
      _V4.S[1] = v46.i32[1];
      __asm { FMLA            S2, S1, V4.S[1] }
      v37 = vmlas_n_f32(_S2, v26, v46.f32[0]);
      v38 = v30 * sqrtf(1.0 - (float)((float)(v37 / v30) * (float)(v37 / v30)));
      v39 = sub_1000A5944();
      sub_10012C904(v39, v58, fabsf(v38));
      v41 = v40;
      *(double *)a3 = v9;
      *(float32x4_t *)v65 = v52;
      sub_10012C97C((float32x4_t *)v65, v52);
      if (v7 != v65)
        *(_OWORD *)v7 = *(_OWORD *)v65;
      *(_QWORD *)&v42 = v56;
      *((_QWORD *)&v42 + 1) = v53;
      v43 = v54;
      *(_DWORD *)(a3 + 24) = v55;
      *(_OWORD *)(a3 + 28) = v42;
      *(_DWORD *)(a3 + 44) = v43;
      *(float32x2_t *)(a3 + 48) = v46;
      *(_BYTE *)(a3 + 80) = BYTE1(__dst);
      LODWORD(v42) = v57;
      *(float *)(a3 + 56) = v25;
      *(_DWORD *)(a3 + 60) = v42;
      *(_DWORD *)(a3 + 64) = v41;
      *(_QWORD *)(a3 + 68) = v61;
      *(_DWORD *)(a3 + 76) = v62;
      *(_BYTE *)(a3 + 81) = 2;
      *(_WORD *)(a3 + 82) = HIWORD(__dst);
      *(_DWORD *)(a3 + 84) = 15;
      *(_QWORD *)(a3 + 96) = v50;
      result = 1;
      *(_BYTE *)(a3 + 88) = 0;
      return result;
    }
    if (__dst == 3)
    {
      if (!a2 || v50 == a2)
      {
        *(double *)a3 = v9;
        *(float32x4_t *)buf = v51;
        sub_10012C97C((float32x4_t *)buf, v51);
        if (v7 != buf)
          *(_OWORD *)v7 = *(_OWORD *)buf;
        *(_QWORD *)&v10 = v53;
        *((_QWORD *)&v10 + 1) = v52.i64[0];
        v11 = v52.i32[2];
        *(_DWORD *)(a3 + 24) = v52.i32[3];
        *(_OWORD *)(a3 + 28) = v10;
        *(_DWORD *)(a3 + 44) = v11;
        *(_WORD *)(a3 + 80) = 511;
        *(_OWORD *)(a3 + 48) = xmmword_101BB2FA0;
        *(_DWORD *)(a3 + 64) = -1082130432;
        *(_WORD *)(a3 + 82) = *(_WORD *)((char *)&__dst + 1);
        *(_DWORD *)(a3 + 84) = 3;
        *(_QWORD *)(a3 + 96) = v50;
        *(_BYTE *)(a3 + 88) = 0;
        return 1;
      }
      return 0;
    }
    goto LABEL_44;
  }
  if (__dst == 4)
  {
    *(double *)a3 = v9;
    *(float32x4_t *)buf = v51;
    sub_10012C97C((float32x4_t *)buf, v51);
    if (v7 != buf)
      *(_OWORD *)v7 = *(_OWORD *)buf;
    *(_QWORD *)&v19 = v53;
    v20 = v52.i32[2];
    *((_QWORD *)&v19 + 1) = v52.i64[0];
    *(_DWORD *)(a3 + 24) = v52.i32[3];
    *(_OWORD *)(a3 + 28) = v19;
    *(_DWORD *)(a3 + 44) = v20;
    *(_DWORD *)(a3 + 84) = 2;
    return 1;
  }
  if (__dst != 255)
  {
LABEL_44:
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_10213EC68);
    v21 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = __dst;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Unexpected device motion report type %{public}d, returning", buf, 8u);
    }
    v22 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v22)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_10213EC68);
      *(_DWORD *)v65 = 67240192;
      *(_DWORD *)&v65[4] = __dst;
      v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 17, "Unexpected device motion report type %{public}d, returning", v65, 8);
LABEL_67:
      v17 = v23;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLSensorFusionServiceSPU::populateDeviceMotion(IOHIDEventRef, uint32_t, CLSensorFusionService::Sample &)", "%s\n", v24);
LABEL_31:
      if (v17 != buf)
        free(v17);
      return 0;
    }
    return result;
  }
  if (v63 < 1)
    v18 = 0;
  else
    v18 = *v64;
  if (qword_10229FC80 != -1)
    dispatch_once(&qword_10229FC80, &stru_10213EC88);
  v44 = qword_10229FC88;
  if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)&buf[8] = 2048;
    *(_QWORD *)&buf[10] = v63;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "Bad device motion report,type,%d,size,%lu", buf, 0x12u);
  }
  v45 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v45)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10213EC88);
    *(_DWORD *)v65 = 67109376;
    *(_DWORD *)&v65[4] = v18;
    *(_WORD *)&v65[8] = 2048;
    *(_QWORD *)&v65[10] = v63;
    v24 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "Bad device motion report,type,%d,size,%lu", v65, 18);
    goto LABEL_67;
  }
  return result;
}

void sub_1004D1240(id a1)
{
  qword_10229FD28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DeviceMotion");
}

void sub_1004D126C(id a1)
{
  qword_10229FC88 = (uint64_t)os_log_create("com.apple.locationd.Motion", "AOP");
}

_QWORD *sub_1004D1298@<X0>(int *a1@<X1>, int *a2@<X2>, char *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0xC8uLL);
  result = sub_1004D1310(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1004D12FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004D1310(_QWORD *a1, int *a2, int *a3, char *a4, uint64_t *a5)
{
  a1[2] = 0;
  *a1 = off_10213ECB8;
  a1[1] = 0;
  sub_101082ABC((uint64_t)(a1 + 3), *a2, *a3, *a4, *a5);
  return a1;
}

void sub_1004D1358(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004D136C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213ECB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004D1380(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213ECB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004D13B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_1004D2970(uint64_t a1, uint64_t a2)
{
  char **v4;
  char **v5;
  char **v6;
  char **v7;
  char **v8;
  char **v9;
  char **v10;
  char **v11;
  char **v12;
  char **v13;
  char **v14;
  char **v15;
  char v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  BOOL v22;
  uint64_t v23;
  int v24;
  char v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  char **v32;
  char **v33;
  char **v34;
  char **v35;
  char **v36;
  uint64_t v37;
  uint64_t result;
  char v39;
  unsigned int v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  char v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  char v53;
  char v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  int v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unsigned int v65;
  uint64_t v66;
  unint64_t v67;
  char v68;
  unint64_t v69;
  unint64_t v70;
  char v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    v4 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v5 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v6 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v7 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v8 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v9 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
    do
    {
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        break;
      v16 = 0;
      v17 = 0;
      v18 = 0;
      while (1)
      {
        v19 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v20 = v19 + 1;
        if (v19 == -1 || v20 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v19);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20;
        v18 |= (unint64_t)(v21 & 0x7F) << v16;
        if ((v21 & 0x80) == 0)
          goto LABEL_12;
        v16 += 7;
        v22 = v17++ >= 9;
        if (v22)
        {
          v18 = 0;
          v23 = OBJC_IVAR___PBDataReader__error;
          v24 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
          goto LABEL_14;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_12:
      v23 = OBJC_IVAR___PBDataReader__error;
      v24 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v18 = 0;
LABEL_14:
      if (v24 || (v18 & 7) == 4)
        break;
      switch((v18 >> 3))
      {
        case 1u:
          v26 = 0;
          v27 = 0;
          v28 = 0;
          while (1)
          {
            v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v30 = v29 + 1;
            if (v29 == -1 || v30 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
              break;
            v31 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v30;
            v28 |= (unint64_t)(v31 & 0x7F) << v26;
            if ((v31 & 0x80) == 0)
              goto LABEL_83;
            v26 += 7;
            v22 = v27++ >= 9;
            if (v22)
            {
              LODWORD(v28) = 0;
              goto LABEL_85;
            }
          }
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_83:
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v28) = 0;
LABEL_85:
          v77 = *((int *)v4 + 979);
          goto LABEL_106;
        case 2u:
          v39 = 0;
          v40 = 0;
          v28 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 4u;
          while (2)
          {
            v41 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v42 = v41 + 1;
            if (v41 == -1 || v42 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v43 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v41);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v42;
              v28 |= (unint64_t)(v43 & 0x7F) << v39;
              if (v43 < 0)
              {
                v39 += 7;
                v22 = v40++ >= 9;
                if (v22)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_89;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v28) = 0;
LABEL_89:
          v77 = *((int *)v6 + 970);
          goto LABEL_106;
        case 3u:
          v44 = 0;
          v45 = 0;
          v28 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 0x20u;
          while (2)
          {
            v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v47 = v46 + 1;
            if (v46 == -1 || v47 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
              v28 |= (unint64_t)(v48 & 0x7F) << v44;
              if (v48 < 0)
              {
                v44 += 7;
                v22 = v45++ >= 9;
                if (v22)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_93;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v28) = 0;
LABEL_93:
          v77 = *((int *)v7 + 971);
          goto LABEL_106;
        case 4u:
          v49 = 0;
          v50 = 0;
          v28 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 0x10u;
          while (2)
          {
            v51 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v52 = v51 + 1;
            if (v51 == -1 || v52 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v53 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v51);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v52;
              v28 |= (unint64_t)(v53 & 0x7F) << v49;
              if (v53 < 0)
              {
                v49 += 7;
                v22 = v50++ >= 9;
                if (v22)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_97;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v28) = 0;
LABEL_97:
          v77 = *((int *)v8 + 972);
          goto LABEL_106;
        case 5u:
          v54 = 0;
          v55 = 0;
          v56 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 0x80u;
          while (2)
          {
            v57 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v58 = v57 + 1;
            if (v57 == -1 || v58 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v59 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v57);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v58;
              v56 |= (unint64_t)(v59 & 0x7F) << v54;
              if (v59 < 0)
              {
                v54 += 7;
                v22 = v55++ >= 9;
                if (v22)
                {
                  v56 = 0;
                  goto LABEL_101;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            v56 = 0;
LABEL_101:
          v78 = v56 != 0;
          v79 = *((int *)v9 + 973);
          goto LABEL_111;
        case 6u:
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 0x40u;
          v60 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v60 <= 0xFFFFFFFFFFFFFFFBLL && v60 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v61 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v60);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v60 + 4;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v61 = 0;
          }
          *(_DWORD *)(a1 + *((int *)v10 + 974)) = v61;
          continue;
        case 7u:
          v62 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v62 <= 0xFFFFFFFFFFFFFFF7 && v62 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v63 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v62);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v62 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + v23) = 1;
            v63 = 0;
          }
          v80 = *((int *)v11 + 980);
          goto LABEL_120;
        case 8u:
          v64 = 0;
          v65 = 0;
          v28 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 8u;
          while (2)
          {
            v66 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
            v67 = v66 + 1;
            if (v66 == -1 || v67 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            {
              *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            }
            else
            {
              v68 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v66);
              *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v67;
              v28 |= (unint64_t)(v68 & 0x7F) << v64;
              if (v68 < 0)
              {
                v64 += 7;
                v22 = v65++ >= 9;
                if (v22)
                {
                  LODWORD(v28) = 0;
                  goto LABEL_105;
                }
                continue;
              }
            }
            break;
          }
          if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
            LODWORD(v28) = 0;
LABEL_105:
          v77 = *((int *)v12 + 975);
LABEL_106:
          *(_DWORD *)(a1 + v77) = v28;
          continue;
        case 9u:
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 1u;
          v69 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v69 <= 0xFFFFFFFFFFFFFFF7 && v69 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v63 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v69);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v69 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v63 = 0;
          }
          v80 = *((int *)v13 + 976);
          goto LABEL_120;
        case 0xAu:
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 2u;
          v70 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v70 <= 0xFFFFFFFFFFFFFFF7 && v70 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            v63 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v70);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v70 + 8;
          }
          else
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
            v63 = 0;
          }
          v80 = *((int *)v14 + 977);
LABEL_120:
          *(_QWORD *)(a1 + v80) = v63;
          continue;
        case 0xBu:
          v71 = 0;
          v72 = 0;
          v73 = 0;
          *(_WORD *)(a1 + *((int *)v5 + 969)) |= 0x100u;
          break;
        default:
          v32 = v4;
          v33 = v6;
          v34 = v5;
          v35 = v7;
          v36 = v8;
          v37 = a1;
          result = PBReaderSkipValueWithTag(a2);
          v15 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          a1 = v37;
          v9 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v8 = v36;
          v10 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v7 = v35;
          v11 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v5 = v34;
          v14 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v6 = v33;
          v13 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          v4 = v32;
          v12 = &selRef_initWithNormalGamma_speedLB_speedUB_;
          if (!(_DWORD)result)
            return result;
          continue;
      }
      while (1)
      {
        v74 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        v75 = v74 + 1;
        if (v74 == -1 || v75 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v76 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v74);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v75;
        v73 |= (unint64_t)(v76 & 0x7F) << v71;
        if ((v76 & 0x80) == 0)
          goto LABEL_108;
        v71 += 7;
        v22 = v72++ >= 9;
        if (v22)
        {
          v73 = 0;
          goto LABEL_110;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_108:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        v73 = 0;
LABEL_110:
      v78 = v73 != 0;
      v79 = *((int *)v15 + 978);
LABEL_111:
      *(_BYTE *)(a1 + v79) = v78;
    }
    while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length));
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1004D3F58(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  ALCLMotionActivity *v17;
  uint64_t result;
  _QWORD v19[2];

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        v6 = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    if ((v6 >> 3) == 2)
    {
      v17 = objc_alloc_init(ALCLMotionActivity);

      *(_QWORD *)(a1 + 8) = v17;
      v19[0] = 0;
      v19[1] = 0;
      if (!PBReaderPlaceMark(a2, v19) || (sub_1004D2970((uint64_t)v17, a2) & 1) == 0)
        return 0;
      PBReaderRecallMark(a2, v19);
    }
    else if ((v6 >> 3) == 1)
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      while (1)
      {
        v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          break;
        v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
        *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
        v14 |= (unint64_t)(v16 & 0x7F) << v12;
        if ((v16 & 0x80) == 0)
          goto LABEL_32;
        v12 += 7;
        v9 = v13++ >= 9;
        if (v9)
        {
          LODWORD(v14) = 0;
          goto LABEL_34;
        }
      }
      *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_32:
      if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
        LODWORD(v14) = 0;
LABEL_34:
      *(_DWORD *)(a1 + 16) = v14;
    }
    else
    {
      result = PBReaderSkipValueWithTag(a2);
      if (!(_DWORD)result)
        return result;
    }
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_1004D4CB0(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  int v12;
  unint64_t v14;
  uint64_t v15;
  ALActivityOverrideMsg *v16;
  ALCLBodyMetrics *v17;
  ALMotionState *v18;
  ALCLNatalieDataDeprecated *v19;
  ALCLStrideCalEntryDeprecated *v20;
  ALCLJacksonData *v21;
  ALCLSedentaryAlarmData *v22;
  ALCLAllDayHeartRate *v23;
  ALCMCoarseElevationDeprecated *v24;
  ALCMFitnessTracking *v25;
  ALCLOdometer *v26;
  ALCMCoarseElevation *v27;
  ALCMCalorieData *v28;
  uint64_t result;
  ALCLSedentaryAlarmDataDeprecated *v30;
  ALCLStepCountEntry *v31;
  ALCLSessionCatherine *v32;
  ALCLStrideCalEntry *v33;
  ALCMCalorieDataDeprecated *v34;
  ALCLElevationDeprecated *v35;
  ALCLIDSStatus *v36;
  ALCLStairClimbingModel *v37;
  ALCLRowingModel *v38;
  ALCMExerciseMinute *v39;
  ALCMWorkoutEventDeprecated *v40;
  ALCMElevation *v41;
  ALCMWorkoutEvent *v42;
  uint64_t v43;
  uint64_t v44;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      if (v5++ >= 9)
      {
        v6 = 0;
        v11 = OBJC_IVAR___PBDataReader__error;
        v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = OBJC_IVAR___PBDataReader__error;
    v12 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v12 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((v6 >> 3))
    {
      case 1u:
        v14 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v14 <= 0xFFFFFFFFFFFFFFF7 && v14 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v15 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v14);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v14 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + v11) = 1;
          v15 = 0;
        }
        *(_QWORD *)(a1 + 8) = v15;
        goto LABEL_101;
      case 2u:
        v16 = objc_alloc_init(ALActivityOverrideMsg);

        *(_QWORD *)(a1 + 16) = v16;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004D3F58((uint64_t)v16, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 3u:
        v17 = objc_alloc_init(ALCLBodyMetrics);

        *(_QWORD *)(a1 + 32) = v17;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004CF5F0((uint64_t)v17, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 4u:
        v18 = objc_alloc_init(ALMotionState);

        *(_QWORD *)(a1 + 120) = v18;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004B7EF4((uint64_t)v18, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 5u:
        v19 = objc_alloc_init(ALCLNatalieDataDeprecated);

        *(_QWORD *)(a1 + 128) = v19;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_101063454((uint64_t)v19, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 6u:
        v30 = objc_alloc_init(ALCLSedentaryAlarmDataDeprecated);

        *(_QWORD *)(a1 + 160) = v30;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100EE3AD0((uint64_t)v30, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 7u:
        v31 = objc_alloc_init(ALCLStepCountEntry);

        *(_QWORD *)(a1 + 184) = v31;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004BFBFC((uint64_t)v31, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 8u:
        v20 = objc_alloc_init(ALCLStrideCalEntryDeprecated);

        *(_QWORD *)(a1 + 200) = v20;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1005CA4C4((uint64_t)v20, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 9u:
        v32 = objc_alloc_init(ALCLSessionCatherine);

        *(_QWORD *)(a1 + 168) = v32;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100798B88((uint64_t)v32, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xAu:
        v21 = objc_alloc_init(ALCLJacksonData);

        *(_QWORD *)(a1 + 112) = v21;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100549368((uint64_t)v21, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xBu:
        v33 = objc_alloc_init(ALCLStrideCalEntry);

        *(_QWORD *)(a1 + 192) = v33;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004BB7FC((uint64_t)v33, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xCu:
        v22 = objc_alloc_init(ALCLSedentaryAlarmData);

        *(_QWORD *)(a1 + 152) = v22;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1004C25E0((uint64_t)v22, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xDu:
        v23 = objc_alloc_init(ALCLAllDayHeartRate);

        *(_QWORD *)(a1 + 24) = v23;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1009884D0((uint64_t)v23, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xEu:
        v34 = objc_alloc_init(ALCMCalorieDataDeprecated);

        *(_QWORD *)(a1 + 48) = v34;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100B58FD4((uint64_t)v34, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0xFu:
        v24 = objc_alloc_init(ALCMCoarseElevationDeprecated);

        *(_QWORD *)(a1 + 64) = v24;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100FF7858((uint64_t)v24, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x10u:
        v25 = objc_alloc_init(ALCMFitnessTracking);

        *(_QWORD *)(a1 + 96) = v25;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_101445F80((uint64_t)v25, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x11u:
        v26 = objc_alloc_init(ALCLOdometer);

        *(_QWORD *)(a1 + 136) = v26;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1014639A8((uint64_t)v26, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x12u:
        v35 = objc_alloc_init(ALCLElevationDeprecated);

        *(_QWORD *)(a1 + 80) = v35;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100C5A35C((uint64_t)v35, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x13u:
        v36 = objc_alloc_init(ALCLIDSStatus);

        *(_QWORD *)(a1 + 104) = v36;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100A47210((uint64_t)v36, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x14u:
        v37 = objc_alloc_init(ALCLStairClimbingModel);

        *(_QWORD *)(a1 + 176) = v37;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100959B58((uint64_t)v37, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x15u:
        v38 = objc_alloc_init(ALCLRowingModel);

        *(_QWORD *)(a1 + 144) = v38;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || !sub_1009A3604((uint64_t)v38, a2))
          return 0;
        goto LABEL_100;
      case 0x16u:
        v39 = objc_alloc_init(ALCMExerciseMinute);

        *(_QWORD *)(a1 + 88) = v39;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1012460A4((uint64_t)v39, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x17u:
        v40 = objc_alloc_init(ALCMWorkoutEventDeprecated);

        *(_QWORD *)(a1 + 216) = v40;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_10104CC14((uint64_t)v40, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x18u:
        v41 = objc_alloc_init(ALCMElevation);

        *(_QWORD *)(a1 + 72) = v41;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_100496E28((uint64_t)v41, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x19u:
        v27 = objc_alloc_init(ALCMCoarseElevation);

        *(_QWORD *)(a1 + 56) = v27;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || !sub_100954028((uint64_t)v27, a2))
          return 0;
        goto LABEL_100;
      case 0x1Au:
        v28 = objc_alloc_init(ALCMCalorieData);

        *(_QWORD *)(a1 + 40) = v28;
        v43 = 0;
        v44 = 0;
        if (!PBReaderPlaceMark(a2, &v43) || (sub_1007A5C94((uint64_t)v28, a2) & 1) == 0)
          return 0;
        goto LABEL_100;
      case 0x1Bu:
        v42 = objc_alloc_init(ALCMWorkoutEvent);

        *(_QWORD *)(a1 + 208) = v42;
        v43 = 0;
        v44 = 0;
        if (PBReaderPlaceMark(a2, &v43) && (sub_1013AD924((uint64_t)v42, a2) & 1) != 0)
        {
LABEL_100:
          PBReaderRecallMark(a2, &v43);
LABEL_101:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_101;
    }
  }
}

void sub_1004D6E04(_QWORD *a1, void *a2)
{
  *a1 = a2;
  a1[1] = 0;
  operator new();
}

void sub_1004D72F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10055D4D0(v2);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1004D73B8(_QWORD *a1)
{
  _QWORD *v2;
  void *v3;
  NSFileHandle *v4;
  NSFileHandle *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  uint64_t v10;
  id v11;
  uint64_t v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  id v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  id v20;
  __int16 v21;
  uint64_t v22;

  v2 = a1 + 4;
  (*(void (**)(_QWORD *))(a1[4] + 16))(a1 + 4);
  if (!-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", *a1))-[NSFileManager createFileAtPath:contents:attributes:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "createFileAtPath:contents:attributes:", *a1, 0, 0);
  v3 = (void *)a1[1];
  if (v3)
  {
    objc_msgSend(v3, "closeFile");

  }
  v4 = +[NSFileHandle fileHandleForWritingAtPath:](NSFileHandle, "fileHandleForWritingAtPath:", *a1);
  v5 = v4;
  a1[1] = v4;
  if (v4)
  {
    -[NSFileHandle seekToEndOfFile](v4, "seekToEndOfFile");
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213ED40);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v7 = objc_msgSend((id)*a1, "UTF8String");
      v8 = a1[1];
      *(_DWORD *)buf = 136315394;
      v20 = v7;
      v21 = 2048;
      v22 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLActivityLoggerWriter open log file filePath is %s, file is %p.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213ED40);
      v10 = qword_1022A02D8;
      v11 = objc_msgSend((id)*a1, "UTF8String");
      v12 = a1[1];
      v15 = 136315394;
      v16 = v11;
      v17 = 2048;
      v18 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 2, "CLActivityLoggerWriter open log file filePath is %s, file is %p.", (const char *)&v15, 22);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityLoggerWriter::open()", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  (*(void (**)(_QWORD *))(*v2 + 24))(v2);
  return v5 != 0;
}

void sub_1004D7640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1004D7670(uint64_t a1)
{
  uint64_t v1;
  id v2;

  v1 = a1 + 32;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 32) + 16))(a1 + 32);
  v2 = objc_msgSend(*(id *)(v1 - 24), "offsetInFile");
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  return v2;
}

void sub_1004D76D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004D76E8(_QWORD *a1, void *a2)
{
  uint64_t v4;
  id v5;
  unsigned __int16 v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  unsigned __int16 v13;
  _QWORD *v14;
  pthread_mutex_t *v15;
  __int16 v16;
  _DWORD v17[4];
  uint8_t buf[4];
  int v19;

  v4 = a1[4];
  v14 = a1 + 4;
  (*(void (**)(void))(v4 + 16))();
  v16 = 256;
  if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", *a1)&& a1[1]|| sub_1004D73B8(a1))
  {
    v5 = objc_msgSend(a2, "data");
    v6 = (unsigned __int16)objc_msgSend(v5, "length");
    v13 = v6;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213ED40);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67109120;
      v19 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLoggerWriter logData, prepare to log %d bytes", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213ED40);
      v17[0] = 67109120;
      v17[1] = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CLActivityLoggerWriter logData, prepare to log %d bytes", v17);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityLoggerWriter::logData(PBCodable *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
    v8 = a1[2];
    while (1)
    {
      v9 = (**(uint64_t (***)(uint64_t, id))v8)(v8, v5);
      if (!(_DWORD)v9)
        break;
      v8 = *(_QWORD *)(v8 + 8);
      if (!v8)
      {
        objc_msgSend((id)a1[1], "writeData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", &v13, 2));
        objc_msgSend((id)a1[1], "writeData:", v5);
        break;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  if ((_BYTE)v16)
    pthread_mutex_unlock(v15);
  else
    (*(void (**)(_QWORD *))(*v14 + 24))(v14);
  return v9;
}

void sub_1004D7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_1004D7B60(id *a1)
{

  objc_msgSend(a1[1], "closeFile");
  sub_10055D4D0(a1 + 4);
  sub_100261F44((uint64_t)(a1 + 2));
  return a1;
}

void sub_1004D7BB0(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1004D7BDC(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004D7C34(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

void sub_1004D7C58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004D7C7C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1004D7C94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004D7CD4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004D7D2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D7D4C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1004D7D64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004D7DA4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004D7DFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004D7E1C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1004D7E34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004D7F1C()
{
  operator delete();
}

void sub_1004D821C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D87EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D893C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D8DE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004D8F24(id a1)
{
  qword_1022A0158 = (uint64_t)os_log_create("com.apple.locationd.Position", "Gathering");
}

uint64_t sub_1004D8F50(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100752EC4(result);
    operator delete();
  }
  return result;
}

void sub_1004D8F8C(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceSubscription::onFenceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213EF78);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceSubscription::onFenceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213EF78);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceSubscription::onFenceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004E2D98(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004D9144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1004D9164(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceSubscription::onBTLEFenceNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213EF78);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceSubscription::onBTLEFenceNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213EF78);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceSubscription::onBTLEFenceNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004E4924(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004D931C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1004D9340@<X0>(uint64_t a1@<X8>)
{
  uint64_t i;
  _BYTE *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *result;
  uint64_t v10;
  _QWORD v11[3];
  _QWORD *v12;
  _QWORD v13[3];
  _QWORD *v14;
  _QWORD v15[3];
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _QWORD v21[3];
  _BYTE v22[32];

  v15[0] = off_10213F080;
  v15[1] = sub_1004D9664;
  v15[2] = 0;
  v16 = v15;
  sub_1015A2E04(v17, "kCLConnectionMessageRegionState");
  sub_1004E5660((uint64_t)&v18, (uint64_t)v15);
  v13[0] = off_10213F110;
  v13[1] = sub_1004DD31C;
  v13[2] = 0;
  v14 = v13;
  sub_1015A2E04(v19, "kCLConnectionMessageRegionMonitoring");
  sub_1004E5660((uint64_t)&v20, (uint64_t)v13);
  v11[0] = off_10213F080;
  v11[1] = sub_1004E1C38;
  v11[2] = 0;
  v12 = v11;
  sub_1015A2E04(v21, "kCLConnectionMessageChangeFencesStateMatchingHandoffTags");
  sub_1004E5660((uint64_t)v22, (uint64_t)v11);
  sub_1004E6610(a1, (unsigned __int8 *)v17, 3);
  for (i = 0; i != -21; i -= 7)
  {
    v3 = *(_BYTE **)&v22[i * 8 + 24];
    if (&v22[i * 8] == v3)
    {
      v3 = &v22[i * 8];
      v4 = 4;
    }
    else
    {
      if (!v3)
        goto LABEL_7;
      v4 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_7:
    if (SHIBYTE(v21[i + 2]) < 0)
      operator delete((void *)v21[i]);
  }
  v5 = v12;
  if (v12 == v11)
  {
    v6 = 4;
    v5 = v11;
LABEL_14:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  else if (v12)
  {
    v6 = 5;
    goto LABEL_14;
  }
  v7 = v14;
  if (v14 == v13)
  {
    v8 = 4;
    v7 = v13;
LABEL_19:
    (*(void (**)(void))(*v7 + 8 * v8))();
  }
  else if (v14)
  {
    v8 = 5;
    goto LABEL_19;
  }
  result = v16;
  if (v16 == v15)
  {
    v10 = 4;
    result = v15;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  else if (v16)
  {
    v10 = 5;
    return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v10))();
  }
  return result;
}

void sub_1004D9558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t *a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  uint64_t i;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;

  for (i = 112; i != -56; i -= 56)
    sub_1004E21A4((uint64_t)(&a21 + i));
  v23 = a12;
  if (a12 == &a9)
  {
    v24 = 4;
    v23 = &a9;
  }
  else
  {
    if (!a12)
      goto LABEL_8;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_8:
  v25 = a16;
  if (a16 == &a13)
  {
    v26 = 4;
    v25 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_13;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_13:
  v27 = a20;
  if (a20 == &a17)
  {
    v28 = 4;
    v27 = &a17;
  }
  else
  {
    if (!a20)
      goto LABEL_18;
    v28 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v27 + 8 * v28))();
LABEL_18:
  _Unwind_Resume(a1);
}

void sub_1004D9664(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  const __CFString *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  NSObject *v28;
  uint64_t p_src;
  std::string *v30;
  uint64_t v31;
  const __CFDictionary *Dictionary;
  std::string::size_type size;
  std::string::size_type v34;
  std::string::size_type v35;
  id v36;
  std::string *p_str;
  id v38;
  NSObject *v39;
  uint64_t v40;
  uint64_t p_p;
  void *v42;
  __int128 *v43;
  const char *v44;
  char *v45;
  int v46;
  NSObject *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  NSObject *v59;
  uint64_t v60;
  void *v61;
  const char *v62;
  char *v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  std::string *v69;
  const __CFString *v70;
  id v71;
  id v72;
  id v73;
  id v74;
  void *v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  std::string *v79;
  id v80;
  id v81;
  id v82;
  const __CFDictionary *v83;
  uint64_t v84;
  NSArray *v85;
  NSObject *v86;
  NSObject *v87;
  NSObject *v88;
  const char *v89;
  char *v90;
  NSObject *v91;
  std::string *v92;
  NSObject *v93;
  std::string *v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  NSObject *v99;
  const char *v100;
  NSObject *v101;
  const char *v102;
  NSObject *v103;
  const char *v104;
  NSObject *v105;
  const char *v106;
  NSObject *v107;
  const char *v108;
  NSObject *v109;
  const char *v110;
  NSObject *v111;
  const char *v112;
  NSObject *v113;
  const char *v114;
  NSObject *v115;
  const char *v116;
  const char *v117;
  NSObject *v118;
  const char *v119;
  NSObject *v120;
  NSObject *v121;
  NSObject *v122;
  NSArray *v123;
  id v124;
  uint64_t i;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  std::string *v129;
  const char *v130;
  char *v131;
  NSObject *v132;
  const char *v133;
  char *v134;
  NSObject *v135;
  const char *v136;
  const char *v137;
  __int128 *v138;
  std::string *v139;
  std::string *v140;
  const char *v141;
  char *v142;
  void *v143;
  __int128 *v144;
  __int128 *v145;
  std::string *v146;
  const char *v147;
  char *v148;
  __int128 *v149;
  __int128 *v150;
  std::string *v151;
  const char *v152;
  char *v153;
  void *v154;
  const char *v155;
  const char *v156;
  const char *v157;
  const char *v158;
  _QWORD v159[4];
  _BYTE v160[120];
  __int128 v161[15];
  void *v162[2];
  char v163;
  __int128 v164;
  void *v165;
  std::string v166;
  __int128 __dst;
  uint64_t v168;
  __int128 v169[15];
  std::string v170;
  __int128 v171;
  void *v172;
  std::string v173;
  __int128 v174;
  uint64_t v175;
  BOOL v176;
  BOOL v177;
  int v178;
  uint64_t v179;
  uint64_t v180;
  CFTypeRef v181;
  std::string v182;
  _BYTE v183[16];
  std::string __str;
  __int128 __p;
  void *v186;
  __int128 __src;
  uint64_t v188;
  __int16 v189;
  __int16 v190;
  std::string v191;
  int v192;
  void *v193[3];
  std::string *v194;
  __int16 v195;
  std::string *v196;
  int v197;
  _BYTE v198[12];
  _BYTE buf[32];
  __int16 v200;
  std::string *v201;
  uint64_t v202;
  int v203;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v192 = 0;
  memset(&v191, 0, sizeof(v191));
  v190 = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageRegionTypeKey"));
  if (v5 && (sub_1001C13CC(v5, &v192) & 1) != 0)
  {
    v6 = (const __CFString *)objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageNameKey"));
    if (v6 && sub_1001C0048(v6, &v191))
    {
      v7 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageNotifyOnEntryKey"));
      if (v7 && (sub_1001E4B1C(v7, (BOOL *)&v190 + 1) & 1) != 0)
      {
        v8 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageNotifyOnExitKey"));
        if (v8 && (sub_1001E4B1C(v8, (BOOL *)&v190) & 1) != 0)
        {
          v189 = 0;
          v9 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageConservativeEntry"));
          if (v9 && (sub_1001E4B1C(v9, (BOOL *)&v189 + 1) & 1) != 0)
          {
            v10 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageEmergencyKey"));
            if (v10 && (sub_1001E4B1C(v10, (BOOL *)&v189) & 1) != 0)
            {
              if (!(_BYTE)v189 || (sub_1004E2360(a1) & 1) != 0)
              {
                sub_1015A2E04(&__src, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
                __p = 0uLL;
                v186 = 0;
                v11 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageOnBehalfOfKey"));
                if (v11)
                {
                  sub_1015A2E04(&__str, (char *)objc_msgSend(v11, "UTF8String"));
                  sub_1001AE67C(&__str, (uint64_t)buf);
                  sub_1001A885C((uint64_t)buf, (uint64_t)v193);
                  if (SHIBYTE(v186) < 0)
                    operator delete((void *)__p);
                  __p = *(_OWORD *)v193;
                  v186 = v193[2];
                  HIBYTE(v193[2]) = 0;
                  LOBYTE(v193[0]) = 0;
                  sub_100010174((uint64_t)buf);
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(__str.__r_.__value_.__l.__data_);
                }
                else
                {
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                  v28 = qword_1022A0068;
                  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
                  {
                    p_src = (uint64_t)&__src;
                    if (v188 < 0)
                      p_src = __src;
                    v30 = &v191;
                    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v30 = (std::string *)v191.__r_.__value_.__r.__words[0];
                    *(_DWORD *)buf = 136381187;
                    *(_QWORD *)&buf[4] = "kCLConnectionMessageOnBehalfOfKey";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = p_src;
                    *(_WORD *)&buf[22] = 2081;
                    *(_QWORD *)&buf[24] = v30;
                    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get value for key %{private}s, %{public}s/%{private}s", buf, 0x20u);
                  }
                  if (sub_1001BFF7C(115, 2))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                    v128 = &__src;
                    if (v188 < 0)
                      v128 = (__int128 *)__src;
                    v129 = &v191;
                    if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v129 = (std::string *)v191.__r_.__value_.__r.__words[0];
                    LODWORD(v193[0]) = 136381187;
                    *(void **)((char *)v193 + 4) = "kCLConnectionMessageOnBehalfOfKey";
                    WORD2(v193[1]) = 2082;
                    *(void **)((char *)&v193[1] + 6) = v128;
                    HIWORD(v193[2]) = 2081;
                    v194 = v129;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Couldn't get value for key %{private}s, %{public}s/%{private}s", v193, 32);
                    v131 = (char *)v130;
                    sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v130);
                    if (v131 != buf)
                      free(v131);
                  }
                }
                v31 = HIBYTE(v186);
                if (SHIBYTE(v186) < 0)
                  v31 = *((_QWORD *)&__p + 1);
                if (v31 && (sub_1004E2204(a1) & 1) == 0)
                {
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                  v39 = qword_1022A0068;
                  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
                  {
                    v40 = *(_QWORD *)(a1 + 24);
                    p_p = (uint64_t)&__p;
                    if (SHIBYTE(v186) < 0)
                      p_p = __p;
                    *(_DWORD *)buf = 138543618;
                    *(_QWORD *)&buf[4] = v40;
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = p_p;
                    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", buf, 0x16u);
                  }
                  if (sub_1001BFF7C(115, 0))
                  {
                    bzero(buf, 0x65CuLL);
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                    v42 = *(void **)(a1 + 24);
                    v43 = &__p;
                    if (SHIBYTE(v186) < 0)
                      v43 = (__int128 *)__p;
                    LODWORD(v193[0]) = 138543618;
                    *(void **)((char *)v193 + 4) = v42;
                    WORD2(v193[1]) = 2082;
                    *(void **)((char *)&v193[1] + 6) = v43;
                    LODWORD(v157) = 22;
                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", v193, v157);
                    v45 = (char *)v44;
                    sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v44);
                    if (v45 != buf)
                      free(v45);
                  }
                  goto LABEL_481;
                }
                Dictionary = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
                sub_1001C1D6C((int)v183, Dictionary);
                sub_1015A2E04(&__str, "");
                sub_1015A2E04(&v182, "");
                sub_1000BCB64((uint64_t)v183, "kCLConnectionMessageDeviceIDKey", &__str);
                size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __str.__r_.__value_.__l.__size_;
                if (size)
                {
                  if ((sub_1004E2448(a1) & 1) == 0)
                  {
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                    v59 = qword_1022A01C8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                    {
                      v60 = *(_QWORD *)(a1 + 24);
                      *(_DWORD *)buf = 138543362;
                      *(_QWORD *)&buf[4] = v60;
                      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
                    }
                    if (sub_1001BFF7C(115, 0))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v61 = *(void **)(a1 + 24);
                      LODWORD(v193[0]) = 138543362;
                      *(void **)((char *)v193 + 4) = v61;
                      LODWORD(v157) = 12;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", v193, v157);
                      v63 = (char *)v62;
                      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v62);
LABEL_380:
                      if (v63 != buf)
                        free(v63);
                    }
                    goto LABEL_476;
                  }
                  sub_1000BCB64((uint64_t)v183, "kCLConnectionMessageHandoffTagKey", &v182);
                  v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v34 = __str.__r_.__value_.__l.__size_;
                  if (v34)
                  {
                    v35 = HIBYTE(v182.__r_.__value_.__r.__words[2]);
                    if ((v182.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v35 = v182.__r_.__value_.__l.__size_;
                    if (!v35)
                    {
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v91 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        v92 = &v191;
                        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v92 = (std::string *)v191.__r_.__value_.__r.__words[0];
                        *(_DWORD *)buf = 68289282;
                        *(_DWORD *)&buf[4] = 0;
                        *(_WORD *)&buf[8] = 2082;
                        *(_QWORD *)&buf[10] = "";
                        *(_WORD *)&buf[18] = 2082;
                        *(_QWORD *)&buf[20] = v92;
                        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      }
                      v93 = qword_1022A01C8;
                      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                      {
                        v94 = &v191;
                        if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                          v94 = (std::string *)v191.__r_.__value_.__r.__words[0];
                        *(_DWORD *)buf = 68289282;
                        *(_DWORD *)&buf[4] = 0;
                        *(_WORD *)&buf[8] = 2082;
                        *(_QWORD *)&buf[10] = "";
                        *(_WORD *)&buf[18] = 2082;
                        *(_QWORD *)&buf[20] = v94;
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v93, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region", "{\"msg%{public}.0s\":\"#FenceHandoff handleMessageRegionState HandoffTag is empty for handed off region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                      }
                      goto LABEL_476;
                    }
                  }
                  v36 = objc_alloc((Class)NSUUID);
                  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    p_str = &__str;
                  else
                    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                  v38 = objc_msgSend(v36, "initWithUUIDString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_str));
                }
                else
                {
                  v38 = 0;
                }
                v46 = v192;
                switch(v192)
                {
                  case 0:
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                    v66 = qword_1022A01C8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
                    {
                      v67 = (uint64_t)&__p;
                      if (SHIBYTE(v186) < 0)
                        v67 = __p;
                      v68 = (uint64_t)&__src;
                      if (v188 < 0)
                        v68 = __src;
                      v69 = &v191;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v69 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = v67;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v68;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = v69;
                      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "iB: requesting, kCLClientRegionBeacon for, [%s]/%s/%s", buf, 0x20u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v144 = &__p;
                      if (SHIBYTE(v186) < 0)
                        v144 = (__int128 *)__p;
                      v145 = &__src;
                      if (v188 < 0)
                        v145 = (__int128 *)__src;
                      v146 = &v191;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v146 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      LODWORD(v193[0]) = 136315650;
                      *(void **)((char *)v193 + 4) = v144;
                      WORD2(v193[1]) = 2080;
                      *(void **)((char *)&v193[1] + 6) = v145;
                      HIWORD(v193[2]) = 2080;
                      v194 = v146;
                      LODWORD(v157) = 32;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 2, "iB: requesting, kCLClientRegionBeacon for, [%s]/%s/%s", (const char *)v193, v157, v158);
                      v148 = (char *)v147;
                      sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v147);
                      if (v148 != buf)
                        free(v148);
                    }
                    sub_1004E5948((uint64_t)v193, &__src, (__int128 *)&v191, &__p);
                    v70 = (const __CFString *)objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageProximityUUIDKey"));
                    if (v70 && sub_1001C0048(v70, (std::string *)&v193[1]))
                    {
                      v71 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMajorKey"));
                      if (v71 && (sub_100526BFC(v71, &v195) & 1) != 0)
                      {
                        v72 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMinorKey"));
                        if (v72 && (sub_100526BFC(v72, &v196) & 1) != 0)
                        {
                          LODWORD(v181) = 0;
                          v73 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageRegionDefinitionKey"));
                          if (v73 && (sub_1001C13CC(v73, &v181) & 1) != 0)
                          {
                            *(_DWORD *)((char *)&v196 + 2) = v181 & 7;
                            LOBYTE(v180) = 0;
                            v74 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageNotifyEntryStateOnDisplayKey"));
                            if (v74 && (sub_1001E4B1C(v74, (BOOL *)&v180) & 1) != 0)
                            {
                              if (HIBYTE(v190))
                                v197 |= 1u;
                              if ((_BYTE)v190)
                                v197 |= 2u;
                              if ((_BYTE)v180)
                                v197 |= 4u;
                              if (HIBYTE(v189))
                                v197 |= 4u;
                              v75 = *(void **)(*(_QWORD *)sub_1001B5A8C(a1) + 16);
                              v159[0] = _NSConcreteStackBlock;
                              v159[1] = 3321888768;
                              v159[2] = sub_1004E2D80;
                              v159[3] = &unk_10213EF18;
                              sub_1004E5FB0((uint64_t)v160, (uint64_t)v193);
                              objc_msgSend(v75, "doAsync:", v159);
                              sub_100114750((uint64_t)v160);
                              sub_100114750((uint64_t)v193);
                              goto LABEL_475;
                            }
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            v121 = qword_1022A01D8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                              _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (!sub_1001BFF7C(115, 0))
                              goto LABEL_342;
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            *(_DWORD *)v198 = 136446210;
                            *(_QWORD *)&v198[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                            LODWORD(v157) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v198, v157);
                            v90 = (char *)v156;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v156);
                          }
                          else
                          {
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            v115 = qword_1022A01D8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "kCLConnectionMessageRegionDefinitionKey";
                              _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (!sub_1001BFF7C(115, 0))
                              goto LABEL_342;
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            *(_DWORD *)v198 = 136446210;
                            *(_QWORD *)&v198[4] = "kCLConnectionMessageRegionDefinitionKey";
                            LODWORD(v157) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v198, v157);
                            v90 = (char *)v116;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v116);
                          }
                        }
                        else
                        {
                          if (qword_1022A01D0 != -1)
                            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                          v109 = qword_1022A01D8;
                          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "kCLConnectionMessageMinorKey";
                            _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_342;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01D0 != -1)
                            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                          *(_DWORD *)v198 = 136446210;
                          *(_QWORD *)&v198[4] = "kCLConnectionMessageMinorKey";
                          LODWORD(v157) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v198, v157);
                          v90 = (char *)v110;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v110);
                        }
                      }
                      else
                      {
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        v103 = qword_1022A01D8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "kCLConnectionMessageMajorKey";
                          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (!sub_1001BFF7C(115, 0))
                          goto LABEL_342;
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        *(_DWORD *)v198 = 136446210;
                        *(_QWORD *)&v198[4] = "kCLConnectionMessageMajorKey";
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v198, v157);
                        v90 = (char *)v104;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v104);
                      }
                    }
                    else
                    {
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      v88 = qword_1022A01D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessageProximityUUIDKey";
                        _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_342;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      *(_DWORD *)v198 = 136446210;
                      *(_QWORD *)&v198[4] = "kCLConnectionMessageProximityUUIDKey";
                      LODWORD(v157) = 12;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v198, v157);
                      v90 = (char *)v89;
                      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v89);
                    }
                    if (v90 != buf)
                      free(v90);
LABEL_342:
                    sub_100114750((uint64_t)v193);
                    goto LABEL_476;
                  case 1:
                  case 3:
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                    v47 = qword_1022A0068;
                    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                    {
                      v48 = "kCLClientRegionCircular";
                      if (v46 == 3)
                        v48 = "kCLClientRegionSignificant";
                      v49 = (uint64_t)&__p;
                      if (SHIBYTE(v186) < 0)
                        v49 = __p;
                      v50 = (uint64_t)&__src;
                      if (v188 < 0)
                        v50 = __src;
                      v51 = &v191;
                      *(_DWORD *)buf = 136446978;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v51 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      *(_QWORD *)&buf[4] = v48;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v49;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = v50;
                      v200 = 2080;
                      v201 = v51;
                      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEBUG, "Fence: requesting, %{public}s for, [%s]/%s/%s", buf, 0x2Au);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0060 != -1)
                        dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                      v137 = "kCLClientRegionCircular";
                      if (v46 == 3)
                        v137 = "kCLClientRegionSignificant";
                      v138 = &__p;
                      if (SHIBYTE(v186) < 0)
                        v138 = (__int128 *)__p;
                      v139 = (std::string *)&__src;
                      if (v188 < 0)
                        v139 = (std::string *)__src;
                      v140 = &v191;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v140 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      LODWORD(v193[0]) = 136446978;
                      *(void **)((char *)v193 + 4) = (void *)v137;
                      WORD2(v193[1]) = 2080;
                      *(void **)((char *)&v193[1] + 6) = v138;
                      HIWORD(v193[2]) = 2080;
                      v194 = v139;
                      v195 = 2080;
                      v196 = v140;
                      LODWORD(v157) = 42;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: requesting, %{public}s for, [%s]/%s/%s", v193, v157);
                      v142 = (char *)v141;
                      sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v141);
                      if (v142 != buf)
                        free(v142);
                    }
                    *(_QWORD *)v198 = 0;
                    v181 = 0;
                    v180 = 0;
                    v179 = 0;
                    v52 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageLatitudeKey"));
                    if (v52 && (sub_1001FDC34(v52, v198) & 1) != 0)
                    {
                      v53 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageLongitudeKey"));
                      if (v53 && (sub_1001FDC34(v53, &v181) & 1) != 0)
                      {
                        v54 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageRadiusKey"));
                        if (v54 && (sub_1001FDC34(v54, &v180) & 1) != 0)
                        {
                          v55 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageDesiredAccuracyKey"));
                          if (v55 && (sub_1001FDC34(v55, &v179) & 1) != 0)
                          {
                            v178 = 0;
                            v56 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageReferenceFrameKey"));
                            if (v56 && (sub_1001C13CC(v56, &v178) & 1) != 0)
                            {
                              v177 = 0;
                              v57 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitoringNearby"));
                              if (v57 && (sub_1001E4B1C(v57, &v177) & 1) != 0)
                              {
                                v176 = 0;
                                v58 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageLowPowerFenceKey"));
                                if (v58 && (sub_1001E4B1C(v58, &v176) & 1) != 0)
                                {
                                  if (SHIBYTE(v188) < 0)
                                  {
                                    sub_100115CE4(&v174, (void *)__src, *((unint64_t *)&__src + 1));
                                  }
                                  else
                                  {
                                    v174 = __src;
                                    v175 = v188;
                                  }
                                  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                                    sub_100115CE4(&v173, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
                                  else
                                    v173 = v191;
                                  if (SHIBYTE(v186) < 0)
                                  {
                                    sub_100115CE4(&v171, (void *)__p, *((unint64_t *)&__p + 1));
                                  }
                                  else
                                  {
                                    v171 = __p;
                                    v172 = v186;
                                  }
                                  if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
                                    sub_100115CE4(&v170, v182.__r_.__value_.__l.__data_, v182.__r_.__value_.__l.__size_);
                                  else
                                    v170 = v182;
                                  sub_100C3B6CC(buf);
                                  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v170.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(v172) < 0)
                                    operator delete((void *)v171);
                                  if (SHIBYTE(v173.__r_.__value_.__r.__words[2]) < 0)
                                    operator delete(v173.__r_.__value_.__l.__data_);
                                  if (SHIBYTE(v175) < 0)
                                    operator delete((void *)v174);
                                  if (HIBYTE(v190))
                                    v202 |= 1uLL;
                                  if ((_BYTE)v190)
                                    v202 |= 2uLL;
                                  if (v176)
                                    v202 |= 0x20uLL;
                                  if (v46 == 3)
                                    v202 |= 0x80uLL;
                                  if (HIBYTE(v189))
                                    v202 |= 4uLL;
                                  if (v177)
                                    v202 |= 0x40uLL;
                                  if ((_BYTE)v189)
                                    v202 |= 0x10uLL;
                                  v203 = v178;
                                  v154 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                                  sub_1004E5748((char *)v169, (__int128 *)buf);
                                  objc_msgSend(v154, "requestRegionState:", sub_1004E2AE4(v169));
                                  sub_1004E2BD0((uint64_t)v169);
                                  sub_1004E2BD0((uint64_t)buf);
                                  goto LABEL_475;
                                }
                                if (qword_1022A01D0 != -1)
                                  dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                                v135 = qword_1022A01D8;
                                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "kCLConnectionMessageLowPowerFenceKey";
                                  _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_1001BFF7C(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A01D0 != -1)
                                    dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                                  LODWORD(v193[0]) = 136446210;
                                  *(void **)((char *)v193 + 4) = "kCLConnectionMessageLowPowerFenceKey";
                                  LODWORD(v157) = 12;
                                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                                  v63 = (char *)v136;
                                  sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v136);
                                  goto LABEL_380;
                                }
                              }
                              else
                              {
                                if (qword_1022A01D0 != -1)
                                  dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                                v122 = qword_1022A01D8;
                                if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "kCLConnectionMessageMonitoringNearby";
                                  _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_1001BFF7C(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A01D0 != -1)
                                    goto LABEL_495;
                                  goto LABEL_285;
                                }
                              }
                            }
                            else
                            {
                              if (qword_1022A01D0 != -1)
                                dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                              v118 = qword_1022A01D8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_1001BFF7C(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01D0 != -1)
                                  dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                                LODWORD(v193[0]) = 136446210;
                                *(void **)((char *)v193 + 4) = "kCLConnectionMessageReferenceFrameKey";
                                LODWORD(v157) = 12;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                                v63 = (char *)v119;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v119);
                                goto LABEL_380;
                              }
                            }
                          }
                          else
                          {
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            v111 = qword_1022A01D8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "kCLConnectionMessageDesiredAccuracyKey";
                              _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_1001BFF7C(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A01D0 != -1)
                                dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                              LODWORD(v193[0]) = 136446210;
                              *(void **)((char *)v193 + 4) = "kCLConnectionMessageDesiredAccuracyKey";
                              LODWORD(v157) = 12;
                              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                              v63 = (char *)v112;
                              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v112);
                              goto LABEL_380;
                            }
                          }
                        }
                        else
                        {
                          if (qword_1022A01D0 != -1)
                            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                          v105 = qword_1022A01D8;
                          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "kCLConnectionMessageRadiusKey";
                            _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (sub_1001BFF7C(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01D0 != -1)
                              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                            LODWORD(v193[0]) = 136446210;
                            *(void **)((char *)v193 + 4) = "kCLConnectionMessageRadiusKey";
                            LODWORD(v157) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                            v63 = (char *)v106;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v106);
                            goto LABEL_380;
                          }
                        }
                      }
                      else
                      {
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        v99 = qword_1022A01D8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "kCLConnectionMessageLongitudeKey";
                          _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01D0 != -1)
                            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                          LODWORD(v193[0]) = 136446210;
                          *(void **)((char *)v193 + 4) = "kCLConnectionMessageLongitudeKey";
                          LODWORD(v157) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                          v63 = (char *)v100;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v100);
                          goto LABEL_380;
                        }
                      }
                    }
                    else
                    {
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      v64 = qword_1022A01D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessageLatitudeKey";
                        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        LODWORD(v193[0]) = 136446210;
                        *(void **)((char *)v193 + 4) = "kCLConnectionMessageLatitudeKey";
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                        v63 = (char *)v65;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v65);
                        goto LABEL_380;
                      }
                    }
                    goto LABEL_476;
                  case 2:
                    if ((sub_1004E22EC(a1) & 1) == 0)
                    {
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v95 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        v96 = *(_QWORD *)(a1 + 24);
                        *(_DWORD *)buf = 138543362;
                        *(_QWORD *)&buf[4] = v96;
                        _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v97 = *(void **)(a1 + 24);
                        LODWORD(v193[0]) = 138543362;
                        *(void **)((char *)v193 + 4) = v97;
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", v193, v157);
                        v63 = (char *)v98;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v98);
                        goto LABEL_380;
                      }
                      goto LABEL_476;
                    }
                    if (qword_1022A0060 != -1)
                      dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                    v76 = qword_1022A0068;
                    if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                    {
                      v77 = (uint64_t)&__p;
                      if (SHIBYTE(v186) < 0)
                        v77 = __p;
                      v78 = (uint64_t)&__src;
                      if (v188 < 0)
                        v78 = __src;
                      v79 = &v191;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v79 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      *(_DWORD *)buf = 136315650;
                      *(_QWORD *)&buf[4] = v77;
                      *(_WORD *)&buf[12] = 2080;
                      *(_QWORD *)&buf[14] = v78;
                      *(_WORD *)&buf[22] = 2080;
                      *(_QWORD *)&buf[24] = v79;
                      _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "Fence: requesting, kCLClientRegionPolygonal for, [%s]/%s/%s", buf, 0x20u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A0060 != -1)
                        dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                      v149 = &__p;
                      if (SHIBYTE(v186) < 0)
                        v149 = (__int128 *)__p;
                      v150 = &__src;
                      if (v188 < 0)
                        v150 = (__int128 *)__src;
                      v151 = &v191;
                      if ((v191.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v151 = (std::string *)v191.__r_.__value_.__r.__words[0];
                      LODWORD(v193[0]) = 136315650;
                      *(void **)((char *)v193 + 4) = v149;
                      WORD2(v193[1]) = 2080;
                      *(void **)((char *)&v193[1] + 6) = v150;
                      HIWORD(v193[2]) = 2080;
                      v194 = v151;
                      LODWORD(v157) = 32;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: requesting, kCLClientRegionPolygonal for, [%s]/%s/%s", (const char *)v193, v157, v158);
                      v153 = (char *)v152;
                      sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v152);
                      if (v153 != buf)
                        free(v153);
                    }
                    LODWORD(v179) = 0;
                    v178 = 0;
                    v177 = 0;
                    v80 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageReferenceFrameKey"));
                    if (!v80 || (sub_1001C13CC(v80, &v179) & 1) == 0)
                    {
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      v101 = qword_1022A01D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessageReferenceFrameKey";
                        _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        LODWORD(v193[0]) = 136446210;
                        *(void **)((char *)v193 + 4) = "kCLConnectionMessageReferenceFrameKey";
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                        v63 = (char *)v102;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v102);
                        goto LABEL_380;
                      }
                      goto LABEL_476;
                    }
                    v81 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageMonitoringNearby"));
                    if (!v81 || (sub_1001E4B1C(v81, &v177) & 1) == 0)
                    {
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      v107 = qword_1022A01D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessageMonitoringNearby";
                        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01D0 != -1)
LABEL_495:
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
LABEL_285:
                        LODWORD(v193[0]) = 136446210;
                        *(void **)((char *)v193 + 4) = "kCLConnectionMessageMonitoringNearby";
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                        v63 = (char *)v108;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v108);
                        goto LABEL_380;
                      }
                      goto LABEL_476;
                    }
                    v82 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePolygonalVerticesCountKey"));
                    if (!v82 || (sub_1001C13CC(v82, &v178) & 1) == 0)
                    {
                      if (qword_1022A01D0 != -1)
                        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                      v113 = qword_1022A01D8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessagePolygonalVerticesCountKey";
                        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01D0 != -1)
                          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                        LODWORD(v193[0]) = 136446210;
                        *(void **)((char *)v193 + 4) = "kCLConnectionMessagePolygonalVerticesCountKey";
                        LODWORD(v157) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, v157);
                        v63 = (char *)v114;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v114);
                        goto LABEL_380;
                      }
                      goto LABEL_476;
                    }
                    v83 = (const __CFDictionary *)CLConnectionMessage::getDictionary(*a2);
                    sub_1001C1D6C((int)v198, v83);
                    v181 = 0;
                    if (sub_100527540((uint64_t)v198, CFSTR("kCLConnectionMessagePolygonalVerticesKey"), &v181))
                    {
                      v180 = 0;
                      v85 = +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedArrayOfObjectsOfClass:fromData:error:", objc_opt_class(_CLVertex, v84), v181, &v180);
                      if (v180)
                      {
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v86 = qword_1022A01C8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2114;
                          *(_QWORD *)&buf[20] = v180;
                          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleMessageRegionState\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        }
                        v87 = qword_1022A01C8;
                        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                        {
                          *(_DWORD *)buf = 68289282;
                          *(_DWORD *)&buf[4] = 0;
                          *(_WORD *)&buf[8] = 2082;
                          *(_QWORD *)&buf[10] = "";
                          *(_WORD *)&buf[18] = 2114;
                          *(_QWORD *)&buf[20] = v180;
                          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v87, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to get vertices from data in handleMessageRegionState", "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleMessageRegionState\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                        }
LABEL_336:
                        sub_10011A5A8(v198);
LABEL_476:
                        if (SHIBYTE(v182.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v182.__r_.__value_.__l.__data_);
                        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(__str.__r_.__value_.__l.__data_);
                        sub_10011A5A8(v183);
LABEL_481:
                        if (SHIBYTE(v186) < 0)
                          operator delete((void *)__p);
                        if (SHIBYTE(v188) < 0)
                          operator delete((void *)__src);
                        goto LABEL_65;
                      }
                      v123 = v85;
                      v124 = -[NSArray count](v85, "count");
                      if (v178 == (_DWORD)v124)
                      {
                        memset(v193, 0, sizeof(v193));
                        sub_1002B1350(v193, v178);
                        if (v178 >= 1)
                        {
                          for (i = 0; i < v178; ++i)
                          {
                            objc_msgSend(-[NSArray objectAtIndexedSubscript:](v123, "objectAtIndexedSubscript:", i), "coordinate");
                            *(_QWORD *)buf = v126;
                            objc_msgSend(-[NSArray objectAtIndexedSubscript:](v123, "objectAtIndexedSubscript:", i), "coordinate");
                            *(_QWORD *)&buf[8] = v127;
                            sub_1004E2C4C(v193, buf);
                          }
                        }
                        if (SHIBYTE(v188) < 0)
                        {
                          sub_100115CE4(&__dst, (void *)__src, *((unint64_t *)&__src + 1));
                        }
                        else
                        {
                          __dst = __src;
                          v168 = v188;
                        }
                        if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
                          sub_100115CE4(&v166, v191.__r_.__value_.__l.__data_, v191.__r_.__value_.__l.__size_);
                        else
                          v166 = v191;
                        if (SHIBYTE(v186) < 0)
                        {
                          sub_100115CE4(&v164, (void *)__p, *((unint64_t *)&__p + 1));
                        }
                        else
                        {
                          v164 = __p;
                          v165 = v186;
                        }
                        sub_1015A2E04(v162, "");
                        sub_100C3B6D0(buf, (uint64_t)&__dst, (uint64_t)&v166, (uint64_t)&v164, (uint64_t)v193, -1, (uint64_t)v162, 0, 0);
                        if (v163 < 0)
                          operator delete(v162[0]);
                        if (SHIBYTE(v165) < 0)
                          operator delete((void *)v164);
                        if (SHIBYTE(v166.__r_.__value_.__r.__words[2]) < 0)
                          operator delete(v166.__r_.__value_.__l.__data_);
                        if (SHIBYTE(v168) < 0)
                          operator delete((void *)__dst);
                        if (HIBYTE(v190))
                          v202 |= 1uLL;
                        if ((_BYTE)v190)
                          v202 |= 2uLL;
                        if (HIBYTE(v189))
                          v202 |= 4uLL;
                        if (v177)
                          v202 |= 8uLL;
                        if ((_BYTE)v189)
                          v202 |= 0x10uLL;
                        v203 = v179;
                        v143 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                        sub_1004E5748((char *)v161, (__int128 *)buf);
                        objc_msgSend(v143, "requestRegionState:", sub_1004E2AE4(v161));
                        sub_1004E2BD0((uint64_t)v161);
                        sub_1004E2BD0((uint64_t)buf);
                        if (v193[0])
                        {
                          v193[1] = v193[0];
                          operator delete(v193[0]);
                        }
                        sub_10011A5A8(v198);
                        goto LABEL_475;
                      }
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v132 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 67240448;
                        *(_DWORD *)&buf[4] = v178;
                        *(_WORD *)&buf[8] = 2050;
                        *(_QWORD *)&buf[10] = v124;
                        _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_336;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      LODWORD(v193[0]) = 67240448;
                      HIDWORD(v193[0]) = v178;
                      LOWORD(v193[1]) = 2050;
                      *(void **)((char *)&v193[1] + 2) = v124;
                      LODWORD(v157) = 18;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", v193, v157);
                      v134 = (char *)v133;
                      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v133);
                    }
                    else
                    {
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v120 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "kCLConnectionMessagePolygonalVerticesKey";
                        _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                      }
                      if (!sub_1001BFF7C(115, 0))
                        goto LABEL_336;
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      LODWORD(v193[0]) = 136446210;
                      *(void **)((char *)v193 + 4) = "kCLConnectionMessagePolygonalVerticesKey";
                      LODWORD(v157) = 12;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v193, v157);
                      v134 = (char *)v155;
                      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v155);
                    }
                    if (v134 != buf)
                      free(v134);
                    goto LABEL_336;
                  default:
LABEL_475:

                    goto LABEL_476;
                }
              }
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
              v24 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                v25 = *(_QWORD *)(a1 + 24);
                *(_DWORD *)buf = 138543362;
                *(_QWORD *)&buf[4] = v25;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                v26 = *(void **)(a1 + 24);
                LODWORD(v193[0]) = 138543362;
                *(void **)((char *)v193 + 4) = v26;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", v193, 12);
                v14 = (char *)v27;
                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v27);
LABEL_321:
                if (v14 != buf)
                  free(v14);
              }
            }
            else
            {
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
              v23 = qword_1022A01D8;
              if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "kCLConnectionMessageEmergencyKey";
                _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01D0 != -1)
                  dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
                LODWORD(v193[0]) = 136446210;
                *(void **)((char *)v193 + 4) = "kCLConnectionMessageEmergencyKey";
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
                v14 = (char *)v117;
                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v117);
                goto LABEL_321;
              }
            }
          }
          else
          {
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
            v21 = qword_1022A01D8;
            if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "kCLConnectionMessageConservativeEntry";
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01D0 != -1)
                dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
              LODWORD(v193[0]) = 136446210;
              *(void **)((char *)v193 + 4) = "kCLConnectionMessageConservativeEntry";
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
              v14 = (char *)v22;
              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v22);
              goto LABEL_321;
            }
          }
        }
        else
        {
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
          v19 = qword_1022A01D8;
          if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnExitKey";
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01D0 != -1)
              dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
            LODWORD(v193[0]) = 136446210;
            *(void **)((char *)v193 + 4) = "kCLConnectionMessageNotifyOnExitKey";
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
            v14 = (char *)v20;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v20);
            goto LABEL_321;
          }
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
        v17 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
          LODWORD(v193[0]) = 136446210;
          *(void **)((char *)v193 + 4) = "kCLConnectionMessageNotifyOnEntryKey";
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
          v14 = (char *)v18;
          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v18);
          goto LABEL_321;
        }
      }
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageNameKey";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
        LODWORD(v193[0]) = 136446210;
        *(void **)((char *)v193 + 4) = "kCLConnectionMessageNameKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
        v14 = (char *)v16;
        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v16);
        goto LABEL_321;
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
    v12 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageRegionTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
      LODWORD(v193[0]) = 136446210;
      *(void **)((char *)v193 + 4) = "kCLConnectionMessageRegionTypeKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", v193, 12);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleMessageRegionState(std::shared_ptr<CLConnectionMessage>)", "%s\n", v13);
      goto LABEL_321;
    }
  }
LABEL_65:
  if (SHIBYTE(v191.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v191.__r_.__value_.__l.__data_);

}

void sub_1004DCFF4(_Unwind_Exception *a1)
{
  void *v1;

  if (SLOBYTE(STACK[0x3C7]) < 0)
    operator delete((void *)STACK[0x3B0]);
  if (SLOBYTE(STACK[0x3EF]) < 0)
    operator delete((void *)STACK[0x3D8]);
  sub_10011A5A8(&STACK[0x3C8]);
  if (SLOBYTE(STACK[0x407]) < 0)
    operator delete((void *)STACK[0x3F0]);
  if (SLOBYTE(STACK[0x427]) < 0)
    operator delete((void *)STACK[0x410]);
  if (SLOBYTE(STACK[0x447]) < 0)
    operator delete((void *)STACK[0x430]);

  _Unwind_Resume(a1);
}

void sub_1004DD31C(uint64_t a1, BOOL a2, uint64_t a3)
{
  id v5;
  std::string::size_type size;
  NSObject *v7;
  const char *v8;
  char *v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  NSObject *v20;
  const char *v21;
  NSObject *v22;
  uint64_t p_src;
  uint64_t v24;
  std::string::size_type v25;
  id v26;
  std::string *v27;
  id v28;
  NSObject *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  std::string::size_type v33;
  std::string::size_type v34;
  int v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t p_p;
  void *v48;
  __int128 *v49;
  const char *v50;
  char *v51;
  NSObject *v52;
  uint64_t v53;
  NSObject *v54;
  uint64_t v55;
  const char *v56;
  const char *v57;
  void *v58;
  _BYTE *v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSArray *v65;
  id v66;
  NSObject *v67;
  int v68;
  NSObject *v69;
  const char *v70;
  char *v71;
  NSObject *v72;
  uint64_t v73;
  void *v74;
  const char *v75;
  NSObject *v76;
  const char *v77;
  char *v78;
  NSObject *v79;
  const char *v80;
  NSObject *v81;
  const char *v82;
  NSObject *v83;
  uint64_t v84;
  void *v85;
  const char *v86;
  NSObject *v87;
  const char *v88;
  NSObject *v89;
  const char *v90;
  NSObject *v91;
  uint64_t v92;
  void *v93;
  const char *v94;
  NSObject *v95;
  uint64_t v96;
  void *v97;
  const char *v98;
  NSObject *v99;
  const char *v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  const char *v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  NSObject *v111;
  const char *v112;
  NSObject *v113;
  const char *v114;
  NSObject *v115;
  const char *v116;
  void *v117;
  __int128 *v118;
  NSObject *v119;
  const char *v120;
  void *v121;
  NSObject *v122;
  const char *v123;
  void *v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  const char *v130;
  NSObject *v131;
  const char *v132;
  NSObject *v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  __int128 *v138;
  uint64_t v139;
  const char *v140;
  char *v141;
  NSObject *v142;
  const char *v143;
  void *v144;
  NSObject *v145;
  const char *v146;
  void *v147;
  __int128 *v148;
  __int128 *v149;
  uint64_t v150;
  const char *v151;
  char *v152;
  __int128 *v153;
  __int128 *v154;
  uint64_t v155;
  const char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  const char *v161;
  __int128 *v162;
  __int128 *v163;
  uint64_t v164;
  const char *v165;
  char *v166;
  __int128 *v167;
  __int128 *v168;
  uint64_t v169;
  const char *v170;
  char *v171;
  uint64_t v172;
  _QWORD v173[4];
  _BYTE v174[120];
  _QWORD v175[4];
  _BYTE v176[120];
  __int128 v177[15];
  __int128 v178;
  void *v179;
  __int128 v180;
  uint64_t v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184[15];
  void *v185[2];
  char v186;
  __int128 v187;
  void *v188;
  __int128 v189;
  uint64_t v190;
  __int128 v191;
  uint64_t v192;
  __int128 v193[15];
  __int128 v194;
  void *v195;
  __int128 v196;
  uint64_t v197;
  __int128 __dst;
  uint64_t v199;
  __int128 v200[9];
  std::string v201;
  __int128 v202;
  void *v203;
  __int128 v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  BOOL v208[6];
  BOOL v209;
  BOOL v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  std::string v214;
  std::string v215;
  std::string __str;
  __int128 __p;
  void *v218;
  __int128 __src;
  uint64_t v220;
  __int128 v221;
  uint64_t v222;
  __int16 v223;
  char v224;
  char v225;
  const __CFString *v226;
  int v227;
  BOOL v228;
  _BYTE v229[12];
  __int16 v230;
  uint64_t v231;
  __int16 v232;
  uint64_t v233;
  void *v234[3];
  uint64_t v235;
  __int16 v236;
  uint64_t v237;
  __int16 v238;
  uint64_t v239;
  __int16 v240;
  uint64_t v241;
  __int16 v242;
  uint64_t v243;
  int v244;
  _BYTE buf[32];
  __int16 v246;
  uint64_t v247;
  __int16 v248;
  uint64_t v249;
  __int16 v250;
  uint64_t v251;
  __int16 v252;
  uint64_t v253;
  uint64_t v254;
  int v255;

  v228 = a2;
  v5 = objc_alloc_init((Class)NSAutoreleasePool);
  v227 = 0;
  v226 = 0;
  v225 = 1;
  v224 = 1;
  if ((sub_1001E4B84(a3, "kCLConnectionMessageRegionTypeKey", &v227) & 1) != 0)
  {
    if ((sub_1001E4874(a3, "kCLConnectionMessageSubscribeKey", &v228) & 1) != 0)
    {
      if ((sub_1005268D0(a3, "kCLConnectionMessageNameKey", (CFTypeRef *)&v226) & 1) != 0)
      {
        if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyOnEntryKey", (BOOL *)&v225) & 1) != 0)
        {
          if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyOnExitKey", (BOOL *)&v224) & 1) != 0)
          {
            v223 = 0;
            if ((sub_1001E4874(a3, "kCLConnectionMessageConservativeEntry", (BOOL *)&v223 + 1) & 1) != 0)
            {
              if ((sub_1001E4874(a3, "kCLConnectionMessageEmergencyKey", (BOOL *)&v223) & 1) != 0)
              {
                if (!(_BYTE)v223 || (sub_1004E2360(a1) & 1) != 0)
                {
                  sub_1001A486C(v226, (uint64_t)&v221);
                  sub_1015A2E04(&__src, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
                  sub_1015A2E04(&__p, "");
                  sub_1015A2E04(&__str, "");
                  if (sub_1000BCB64(a3, "kCLConnectionMessageOnBehalfOfKey", &__str))
                  {
                    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      size = __str.__r_.__value_.__l.__size_;
                    if (size)
                    {
                      if ((sub_1004E2204(a1) & 1) == 0)
                      {
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v45 = qword_1022A01C8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                        {
                          v46 = *(_QWORD *)(a1 + 24);
                          p_p = (uint64_t)&__p;
                          if (SHIBYTE(v218) < 0)
                            p_p = __p;
                          *(_DWORD *)buf = 138543618;
                          *(_QWORD *)&buf[4] = v46;
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = p_p;
                          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", buf, 0x16u);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          v48 = *(void **)(a1 + 24);
                          v49 = &__p;
                          if (SHIBYTE(v218) < 0)
                            v49 = (__int128 *)__p;
                          LODWORD(v234[0]) = 138543618;
                          *(void **)((char *)v234 + 4) = v48;
                          WORD2(v234[1]) = 2082;
                          *(void **)((char *)&v234[1] + 6) = v49;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to act as a proxy service to %{public}s", v234, 22);
                          v51 = (char *)v50;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v50);
                          if (v51 != buf)
                            free(v51);
                        }
                        goto LABEL_425;
                      }
                      sub_1001AE67C(&__str, (uint64_t)buf);
                      sub_1001A885C((uint64_t)buf, (uint64_t)v234);
                      if (SHIBYTE(v218) < 0)
                        operator delete((void *)__p);
                      __p = *(_OWORD *)v234;
                      v218 = v234[2];
                      HIBYTE(v234[2]) = 0;
                      LOBYTE(v234[0]) = 0;
                      sub_100010174((uint64_t)buf);
                    }
                  }
                  else
                  {
                    if (qword_1022A01C0 != -1)
                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                    v22 = qword_1022A01C8;
                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
                    {
                      p_src = (uint64_t)&__src;
                      if (v220 < 0)
                        p_src = __src;
                      v24 = (uint64_t)&v221;
                      if (v222 < 0)
                        v24 = v221;
                      *(_DWORD *)buf = 136381187;
                      *(_QWORD *)&buf[4] = "kCLConnectionMessageOnBehalfOfKey";
                      *(_WORD *)&buf[12] = 2081;
                      *(_QWORD *)&buf[14] = p_src;
                      *(_WORD *)&buf[22] = 2081;
                      *(_QWORD *)&buf[24] = v24;
                      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't get value for key %{private}s, %{private}s/%{private}s", buf, 0x20u);
                    }
                    if (sub_1001BFF7C(115, 2))
                    {
                      bzero(buf, 0x65CuLL);
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v138 = &__src;
                      if (v220 < 0)
                        v138 = (__int128 *)__src;
                      v139 = (uint64_t)&v221;
                      if (v222 < 0)
                        v139 = v221;
                      LODWORD(v234[0]) = 136381187;
                      *(void **)((char *)v234 + 4) = "kCLConnectionMessageOnBehalfOfKey";
                      WORD2(v234[1]) = 2081;
                      *(void **)((char *)&v234[1] + 6) = v138;
                      HIWORD(v234[2]) = 2081;
                      v235 = v139;
                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#Warning Couldn't get value for key %{private}s, %{private}s/%{private}s", v234, 32);
                      v141 = (char *)v140;
                      sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v140);
                      if (v141 != buf)
                        free(v141);
                    }
                  }
                  sub_1015A2E04(&v215, "");
                  sub_1000BCB64(a3, "kCLConnectionMessageDeviceIDKey", &v215);
                  v25 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
                  if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v25 = v215.__r_.__value_.__l.__size_;
                  if (v25)
                  {
                    if ((sub_1004E2448(a1) & 1) == 0)
                    {
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v40 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        v41 = *(_QWORD *)(a1 + 24);
                        *(_DWORD *)buf = 138543362;
                        *(_QWORD *)&buf[4] = v41;
                        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
                      }
                      if (sub_1001BFF7C(115, 0))
                      {
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v42 = *(void **)(a1 + 24);
                        LODWORD(v234[0]) = 138543362;
                        *(void **)((char *)v234 + 4) = v42;
                        LODWORD(v172) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", v234, v172);
                        v44 = (char *)v43;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v43);
                        if (v44 != buf)
                          free(v44);
                      }
                      goto LABEL_423;
                    }
                    v26 = objc_alloc((Class)NSUUID);
                    if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v27 = &v215;
                    else
                      v27 = (std::string *)v215.__r_.__value_.__r.__words[0];
                    v28 = objc_msgSend(v26, "initWithUUIDString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v27));
                  }
                  sub_1015A2E04(&v214, "");
                  sub_1000BCB64(a3, "kCLConnectionMessageHandoffTagKey", &v214);
                  v33 = HIBYTE(v215.__r_.__value_.__r.__words[2]);
                  if ((v215.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v33 = v215.__r_.__value_.__l.__size_;
                  if (v33)
                  {
                    v34 = HIBYTE(v214.__r_.__value_.__r.__words[2]);
                    if ((v214.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v34 = v214.__r_.__value_.__l.__size_;
                    if (!v34)
                    {
                      if (qword_1022A01C0 != -1)
                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      v52 = qword_1022A01C8;
                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                      {
                        v53 = (uint64_t)&v221;
                        if (v222 < 0)
                          v53 = v221;
                        *(_DWORD *)buf = 68289282;
                        *(_DWORD *)&buf[4] = 0;
                        *(_WORD *)&buf[8] = 2082;
                        *(_QWORD *)&buf[10] = "";
                        *(_WORD *)&buf[18] = 2082;
                        *(_QWORD *)&buf[20] = v53;
                        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#FenceHandoff Handoff is empty for a handed of region\", \"fenceName\":%{public, location:escape_only}s}", buf, 0x1Cu);
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                      }
                      v54 = qword_1022A01C8;
                      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                      {
                        v55 = (uint64_t)&v221;
                        if (v222 < 0)
                          v55 = v221;
                        *(_DWORD *)buf = 68289282;
                        *(_DWORD *)&buf[4] = 0;
                        *(_WORD *)&buf[8] = 2082;
                        *(_QWORD *)&buf[10] = "";
                        *(_WORD *)&buf[18] = 2082;
                        *(_QWORD *)&buf[20] = v55;
                        v56 = "#FenceHandoff Handoff is empty for a handed of region";
                        v57 = "{\"msg%{public}.0s\":\"#FenceHandoff Handoff is empty for a handed of region\", \"fenceNam"
                              "e\":%{public, location:escape_only}s}";
LABEL_167:
                        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v54, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v56, v57, buf, 0x1Cu);
                      }
                      goto LABEL_421;
                    }
                  }
                  switch(v227)
                  {
                    case 0:
                      sub_1004E5948((uint64_t)v234, &__src, &v221, &__p);
                      if (sub_1000BCB64(a3, "kCLConnectionMessageProximityUUIDKey", (std::string *)&v234[1]))
                      {
                        if ((sub_100525CE4(a3, "kCLConnectionMessageMajorKey", &v236) & 1) != 0)
                        {
                          if ((sub_100525CE4(a3, "kCLConnectionMessageMinorKey", &v237) & 1) != 0)
                          {
                            LODWORD(v213) = 0;
                            if ((sub_1001E4B84(a3, "kCLConnectionMessageRegionDefinitionKey", &v213) & 1) != 0)
                            {
                              *(_DWORD *)((char *)&v237 + 2) = v213 & 7;
                              LOBYTE(v212) = 0;
                              if ((sub_1001E4874(a3, "kCLConnectionMessageNotifyEntryStateOnDisplayKey", (BOOL *)&v212) & 1) != 0)
                              {
                                if (v225)
                                  v244 |= 1u;
                                if (v224)
                                  v244 |= 2u;
                                if ((_BYTE)v212)
                                  v244 |= 4u;
                                if (HIBYTE(v223))
                                  v244 |= 8u;
                                if (!v228)
                                {
                                  v124 = *(void **)(*(_QWORD *)sub_1001B5A8C(a1) + 16);
                                  v173[0] = _NSConcreteStackBlock;
                                  v173[1] = 3321888768;
                                  v173[2] = sub_1004E2D68;
                                  v173[3] = &unk_10213EF18;
                                  v59 = v174;
                                  sub_1004E5FB0((uint64_t)v174, (uint64_t)v234);
                                  objc_msgSend(v124, "doAsync:", v173);
                                  goto LABEL_408;
                                }
                                if (sub_101271D04((uint64_t)v234))
                                {
                                  v58 = *(void **)(*(_QWORD *)sub_1001B5A8C(a1) + 16);
                                  v175[0] = _NSConcreteStackBlock;
                                  v175[1] = 3321888768;
                                  v175[2] = sub_1004E2D38;
                                  v175[3] = &unk_10213EF18;
                                  v59 = v176;
                                  sub_1004E5FB0((uint64_t)v176, (uint64_t)v234);
                                  objc_msgSend(v58, "doAsync:", v175);
                                  sub_100FFB224(a1);
LABEL_408:
                                  sub_100114750((uint64_t)v59);
                                  sub_100114750((uint64_t)v234);
                                  v68 = 1;
                                  goto LABEL_397;
                                }
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                v125 = qword_1022A01C8;
                                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                {
                                  v126 = (uint64_t)&__p;
                                  if (SHIBYTE(v218) < 0)
                                    v126 = __p;
                                  v127 = (uint64_t)&__src;
                                  if (v220 < 0)
                                    v127 = __src;
                                  v128 = (uint64_t)&v221;
                                  if (v222 < 0)
                                    v128 = v221;
                                  *(_DWORD *)buf = 136446722;
                                  *(_QWORD *)&buf[4] = v126;
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v127;
                                  *(_WORD *)&buf[22] = 2082;
                                  *(_QWORD *)&buf[24] = v128;
                                  _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_FAULT, "Invalid beacon region request [%{public}s]/%{public}s/%{public}s.", buf, 0x20u);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_420;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                v158 = (uint64_t)&__p;
                                if (SHIBYTE(v218) < 0)
                                  v158 = __p;
                                v159 = (uint64_t)&__src;
                                if (v220 < 0)
                                  v159 = __src;
                                v160 = (uint64_t)&v221;
                                if (v222 < 0)
                                  v160 = v221;
                                *(_DWORD *)v229 = 136446722;
                                *(_QWORD *)&v229[4] = v158;
                                v230 = 2082;
                                v231 = v159;
                                v232 = 2082;
                                v233 = v160;
                                LODWORD(v172) = 32;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Invalid beacon region request [%{public}s]/%{public}s/%{public}s.", v229, v172);
                                v78 = (char *)v161;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v161);
LABEL_580:
                                if (v78 != buf)
                                  free(v78);
                                goto LABEL_420;
                              }
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              v113 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                                _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_1001BFF7C(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                *(_DWORD *)v229 = 136446210;
                                *(_QWORD *)&v229[4] = "kCLConnectionMessageNotifyEntryStateOnDisplayKey";
                                LODWORD(v172) = 12;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v229, v172);
                                v78 = (char *)v114;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v114);
                                goto LABEL_580;
                              }
                            }
                            else
                            {
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              v99 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "kCLConnectionMessageRegionDefinitionKey";
                                _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (sub_1001BFF7C(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                *(_DWORD *)v229 = 136446210;
                                *(_QWORD *)&v229[4] = "kCLConnectionMessageRegionDefinitionKey";
                                LODWORD(v172) = 12;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v229, v172);
                                v78 = (char *)v100;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v100);
                                goto LABEL_580;
                              }
                            }
                          }
                          else
                          {
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            v89 = qword_1022A01C8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "kCLConnectionMessageMinorKey";
                              _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_1001BFF7C(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              *(_DWORD *)v229 = 136446210;
                              *(_QWORD *)&v229[4] = "kCLConnectionMessageMinorKey";
                              LODWORD(v172) = 12;
                              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v229, v172);
                              v78 = (char *)v90;
                              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v90);
                              goto LABEL_580;
                            }
                          }
                        }
                        else
                        {
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          v87 = qword_1022A01C8;
                          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "kCLConnectionMessageMajorKey";
                            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (sub_1001BFF7C(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            *(_DWORD *)v229 = 136446210;
                            *(_QWORD *)&v229[4] = "kCLConnectionMessageMajorKey";
                            LODWORD(v172) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v229, v172);
                            v78 = (char *)v88;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v88);
                            goto LABEL_580;
                          }
                        }
                      }
                      else
                      {
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v76 = qword_1022A01C8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "kCLConnectionMessageProximityUUIDKey";
                          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          *(_DWORD *)v229 = 136446210;
                          *(_QWORD *)&v229[4] = "kCLConnectionMessageProximityUUIDKey";
                          LODWORD(v172) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v229, v172);
                          v78 = (char *)v77;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v77);
                          goto LABEL_580;
                        }
                      }
LABEL_420:
                      sub_100114750((uint64_t)v234);
LABEL_421:
                      if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v214.__r_.__value_.__l.__data_);
LABEL_423:
                      if (SHIBYTE(v215.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v215.__r_.__value_.__l.__data_);
LABEL_425:
                      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(__str.__r_.__value_.__l.__data_);
                      if (SHIBYTE(v218) < 0)
                        operator delete((void *)__p);
                      if (SHIBYTE(v220) < 0)
                        operator delete((void *)__src);
                      if (SHIBYTE(v222) < 0)
                        operator delete((void *)v221);
                      goto LABEL_433;
                    case 1:
                    case 3:
                      *(_QWORD *)v229 = 0;
                      v213 = 0;
                      v212 = 0;
                      v211 = 0;
                      v210 = 0;
                      if ((sub_1001E4874(a3, "kCLConnectionMessageMonitoringNearby", &v210) & 1) != 0)
                      {
                        v35 = v227;
                        if (v227 == 3 && (sub_1004E24BC(a1) & 1) == 0)
                        {
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          v83 = qword_1022A01C8;
                          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                          {
                            v84 = *(_QWORD *)(a1 + 24);
                            *(_DWORD *)buf = 138543362;
                            *(_QWORD *)&buf[4] = v84;
                            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use significant", buf, 0xCu);
                          }
                          if (sub_1001BFF7C(115, 0))
                          {
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            v85 = *(void **)(a1 + 24);
                            LODWORD(v234[0]) = 138543362;
                            *(void **)((char *)v234 + 4) = v85;
                            LODWORD(v172) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to use significant", v234, v172);
                            v71 = (char *)v86;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v86);
                            goto LABEL_522;
                          }
                        }
                        else
                        {
                          v209 = 0;
                          if ((sub_1001E4874(a3, "kCLConnectionMessageLowPowerFenceKey", &v209) & 1) != 0)
                          {
                            if (v209 && (sub_1004E23D4(a1) & 1) == 0)
                            {
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              v91 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                              {
                                v92 = *(_QWORD *)(a1 + 24);
                                *(_DWORD *)buf = 138543362;
                                *(_QWORD *)&buf[4] = v92;
                                _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use low power fence", buf, 0xCu);
                              }
                              if (sub_1001BFF7C(115, 0))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                v93 = *(void **)(a1 + 24);
                                LODWORD(v234[0]) = 138543362;
                                *(void **)((char *)v234 + 4) = v93;
                                LODWORD(v172) = 12;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to use low power fence", v234, v172);
                                v71 = (char *)v94;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v94);
                                goto LABEL_522;
                              }
                            }
                            else
                            {
                              sub_10052502C(a1 + 72, a3);
                              *(_BYTE *)(a1 + 65) = 1;
                              if (!*(_BYTE *)(a1 + 64))
                                goto LABEL_396;
                              if (!v228)
                              {
                                if (qword_1022A0060 != -1)
                                  dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                v101 = qword_1022A0068;
                                if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
                                {
                                  v102 = (uint64_t)&__p;
                                  if (SHIBYTE(v218) < 0)
                                    v102 = __p;
                                  v103 = (uint64_t)&__src;
                                  if (v220 < 0)
                                    v103 = __src;
                                  v104 = (uint64_t)&v221;
                                  if (v222 < 0)
                                    v104 = v221;
                                  *(_DWORD *)buf = 136446723;
                                  *(_QWORD *)&buf[4] = v102;
                                  *(_WORD *)&buf[12] = 2082;
                                  *(_QWORD *)&buf[14] = v103;
                                  *(_WORD *)&buf[22] = 2081;
                                  *(_QWORD *)&buf[24] = v104;
                                  _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "Removing geographic fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                                }
                                if (sub_1001BFF7C(115, 2))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A0060 != -1)
                                    dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                  v148 = &__p;
                                  if (SHIBYTE(v218) < 0)
                                    v148 = (__int128 *)__p;
                                  v149 = &__src;
                                  if (v220 < 0)
                                    v149 = (__int128 *)__src;
                                  v150 = (uint64_t)&v221;
                                  if (v222 < 0)
                                    v150 = v221;
                                  LODWORD(v234[0]) = 136446723;
                                  *(void **)((char *)v234 + 4) = v148;
                                  WORD2(v234[1]) = 2082;
                                  *(void **)((char *)&v234[1] + 6) = v149;
                                  HIWORD(v234[2]) = 2081;
                                  v235 = v150;
                                  LODWORD(v172) = 32;
                                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Removing geographic fence [%{public}s]/%{public}s/%{private}s", v234, v172);
                                  v152 = (char *)v151;
                                  sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v151);
                                  if (v152 != buf)
                                    free(v152);
                                }
                                if (SHIBYTE(v220) < 0)
                                {
                                  sub_100115CE4(&__dst, (void *)__src, *((unint64_t *)&__src + 1));
                                }
                                else
                                {
                                  __dst = __src;
                                  v199 = v220;
                                }
                                if (SHIBYTE(v222) < 0)
                                {
                                  sub_100115CE4(&v196, (void *)v221, *((unint64_t *)&v221 + 1));
                                }
                                else
                                {
                                  v196 = v221;
                                  v197 = v222;
                                }
                                if (SHIBYTE(v218) < 0)
                                {
                                  sub_100115CE4(&v194, (void *)__p, *((unint64_t *)&__p + 1));
                                }
                                else
                                {
                                  v194 = __p;
                                  v195 = v218;
                                }
                                sub_1001158A8(buf, (uint64_t)&__dst, (uint64_t)&v196, (uint64_t)&v194);
                                if (SHIBYTE(v195) < 0)
                                  operator delete((void *)v194);
                                if (SHIBYTE(v197) < 0)
                                  operator delete((void *)v196);
                                if (SHIBYTE(v199) < 0)
                                  operator delete((void *)__dst);
                                v117 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                                sub_1004E5748((char *)v193, (__int128 *)buf);
                                objc_msgSend(v117, "removeFence:", sub_1004E2AE4(v193));
                                v118 = v193;
                                goto LABEL_394;
                              }
                              if ((sub_1001FD98C(a3, "kCLConnectionMessageLatitudeKey", v229) & 1) != 0)
                              {
                                if ((sub_1001FD98C(a3, "kCLConnectionMessageLongitudeKey", &v213) & 1) != 0)
                                {
                                  if ((sub_1001FD98C(a3, "kCLConnectionMessageRadiusKey", &v212) & 1) != 0)
                                  {
                                    if ((sub_1001FD98C(a3, "kCLConnectionMessageDesiredAccuracyKey", &v211) & 1) != 0)
                                    {
                                      *(_DWORD *)v208 = 0;
                                      if ((sub_1001E4B84(a3, "kCLConnectionMessageReferenceFrameKey", v208) & 1) != 0)
                                      {
                                        if (qword_1022A0060 != -1)
                                          dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                        v36 = qword_1022A0068;
                                        if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
                                        {
                                          v37 = (uint64_t)&__p;
                                          if (SHIBYTE(v218) < 0)
                                            v37 = __p;
                                          v38 = (uint64_t)&__src;
                                          if (v220 < 0)
                                            v38 = __src;
                                          v39 = (uint64_t)&v221;
                                          if (v222 < 0)
                                            v39 = v221;
                                          *(_DWORD *)buf = 136447747;
                                          *(_QWORD *)&buf[4] = v37;
                                          *(_WORD *)&buf[12] = 2082;
                                          *(_QWORD *)&buf[14] = v38;
                                          *(_WORD *)&buf[22] = 2081;
                                          *(_QWORD *)&buf[24] = v39;
                                          v246 = 2049;
                                          v247 = *(_QWORD *)v229;
                                          v248 = 2049;
                                          v249 = v213;
                                          v250 = 2050;
                                          v251 = v212;
                                          v252 = 2050;
                                          v253 = v211;
                                          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Adding geographic fence [%{public}s]/%{public}s/%{private}s, center, %{private}f, %{private}f, radius, %{public}.2f, desiredAccuracy, %{public}.2f", buf, 0x48u);
                                        }
                                        if (sub_1001BFF7C(115, 2))
                                        {
                                          bzero(buf, 0x65CuLL);
                                          if (qword_1022A0060 != -1)
                                            dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                          v167 = &__p;
                                          if (SHIBYTE(v218) < 0)
                                            v167 = (__int128 *)__p;
                                          v168 = &__src;
                                          if (v220 < 0)
                                            v168 = (__int128 *)__src;
                                          v169 = (uint64_t)&v221;
                                          if (v222 < 0)
                                            v169 = v221;
                                          LODWORD(v234[0]) = 136447747;
                                          *(void **)((char *)v234 + 4) = v167;
                                          WORD2(v234[1]) = 2082;
                                          *(void **)((char *)&v234[1] + 6) = v168;
                                          HIWORD(v234[2]) = 2081;
                                          v235 = v169;
                                          v236 = 2049;
                                          v237 = *(_QWORD *)v229;
                                          v238 = 2049;
                                          v239 = v213;
                                          v240 = 2050;
                                          v241 = v212;
                                          v242 = 2050;
                                          v243 = v211;
                                          LODWORD(v172) = 72;
                                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "Adding geographic fence [%{public}s]/%{public}s/%{private}s, center, %{private}f, %{private}f, radius, %{public}.2f, desiredAccuracy, %{public}.2f", v234, v172);
                                          v171 = (char *)v170;
                                          sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v170);
                                          if (v171 != buf)
                                            free(v171);
                                        }
                                        if (SHIBYTE(v220) < 0)
                                        {
                                          sub_100115CE4(&v206, (void *)__src, *((unint64_t *)&__src + 1));
                                        }
                                        else
                                        {
                                          v206 = __src;
                                          v207 = v220;
                                        }
                                        if (SHIBYTE(v222) < 0)
                                        {
                                          sub_100115CE4(&v204, (void *)v221, *((unint64_t *)&v221 + 1));
                                        }
                                        else
                                        {
                                          v204 = v221;
                                          v205 = v222;
                                        }
                                        if (SHIBYTE(v218) < 0)
                                        {
                                          sub_100115CE4(&v202, (void *)__p, *((unint64_t *)&__p + 1));
                                        }
                                        else
                                        {
                                          v202 = __p;
                                          v203 = v218;
                                        }
                                        if (SHIBYTE(v214.__r_.__value_.__r.__words[2]) < 0)
                                          sub_100115CE4(&v201, v214.__r_.__value_.__l.__data_, v214.__r_.__value_.__l.__size_);
                                        else
                                          v201 = v214;
                                        sub_100C3B6CC(buf);
                                        if (SHIBYTE(v201.__r_.__value_.__r.__words[2]) < 0)
                                          operator delete(v201.__r_.__value_.__l.__data_);
                                        if (SHIBYTE(v203) < 0)
                                          operator delete((void *)v202);
                                        if (SHIBYTE(v205) < 0)
                                          operator delete((void *)v204);
                                        if (SHIBYTE(v207) < 0)
                                          operator delete((void *)v206);
                                        if (v225)
                                          v254 |= 1uLL;
                                        if (v224)
                                          v254 |= 2uLL;
                                        if (v209)
                                          v254 |= 0x20uLL;
                                        if (v35 == 3)
                                          v254 |= 0x80uLL;
                                        if (HIBYTE(v223))
                                          v254 |= 4uLL;
                                        if ((_BYTE)v223)
                                          v254 |= 0x10uLL;
                                        if (v210)
                                          v254 |= 0x40uLL;
                                        v255 = *(_DWORD *)v208;
                                        v144 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                                        sub_1004E5748((char *)v200, (__int128 *)buf);
                                        objc_msgSend(v144, "addFence:", sub_1004E2AE4(v200));
                                        sub_1004E2BD0((uint64_t)v200);
                                        sub_100FFB224(a1);
                                        goto LABEL_395;
                                      }
                                      if (qword_1022A01C0 != -1)
                                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                      v133 = qword_1022A01C8;
                                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                      {
                                        *(_DWORD *)buf = 136446210;
                                        *(_QWORD *)&buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                        _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                      }
                                      if (sub_1001BFF7C(115, 0))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_1022A01C0 != -1)
                                          goto LABEL_602;
                                        goto LABEL_341;
                                      }
                                    }
                                    else
                                    {
                                      if (qword_1022A01C0 != -1)
                                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                      v131 = qword_1022A01C8;
                                      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                      {
                                        *(_DWORD *)buf = 136446210;
                                        *(_QWORD *)&buf[4] = "kCLConnectionMessageDesiredAccuracyKey";
                                        _os_log_impl((void *)&_mh_execute_header, v131, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                      }
                                      if (sub_1001BFF7C(115, 0))
                                      {
                                        bzero(buf, 0x65CuLL);
                                        if (qword_1022A01C0 != -1)
                                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                        LODWORD(v234[0]) = 136446210;
                                        *(void **)((char *)v234 + 4) = "kCLConnectionMessageDesiredAccuracyKey";
                                        LODWORD(v172) = 12;
                                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                        v71 = (char *)v132;
                                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v132);
                                        goto LABEL_522;
                                      }
                                    }
                                  }
                                  else
                                  {
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    v122 = qword_1022A01C8;
                                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)buf = 136446210;
                                      *(_QWORD *)&buf[4] = "kCLConnectionMessageRadiusKey";
                                      _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                    }
                                    if (sub_1001BFF7C(115, 0))
                                    {
                                      bzero(buf, 0x65CuLL);
                                      if (qword_1022A01C0 != -1)
                                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                      LODWORD(v234[0]) = 136446210;
                                      *(void **)((char *)v234 + 4) = "kCLConnectionMessageRadiusKey";
                                      LODWORD(v172) = 12;
                                      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                      v71 = (char *)v123;
                                      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v123);
                                      goto LABEL_522;
                                    }
                                  }
                                }
                                else
                                {
                                  if (qword_1022A01C0 != -1)
                                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                  v115 = qword_1022A01C8;
                                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "kCLConnectionMessageLongitudeKey";
                                    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                  }
                                  if (sub_1001BFF7C(115, 0))
                                  {
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    LODWORD(v234[0]) = 136446210;
                                    *(void **)((char *)v234 + 4) = "kCLConnectionMessageLongitudeKey";
                                    LODWORD(v172) = 12;
                                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                    v71 = (char *)v116;
                                    sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v116);
                                    goto LABEL_522;
                                  }
                                }
                              }
                              else
                              {
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                v105 = qword_1022A01C8;
                                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "kCLConnectionMessageLatitudeKey";
                                  _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (sub_1001BFF7C(115, 0))
                                {
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A01C0 != -1)
                                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                  LODWORD(v234[0]) = 136446210;
                                  *(void **)((char *)v234 + 4) = "kCLConnectionMessageLatitudeKey";
                                  LODWORD(v172) = 12;
                                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                  v71 = (char *)v106;
                                  sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v106);
                                  goto LABEL_522;
                                }
                              }
                            }
                          }
                          else
                          {
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            v79 = qword_1022A01C8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "kCLConnectionMessageLowPowerFenceKey";
                              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                            }
                            if (sub_1001BFF7C(115, 0))
                            {
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              LODWORD(v234[0]) = 136446210;
                              *(void **)((char *)v234 + 4) = "kCLConnectionMessageLowPowerFenceKey";
                              LODWORD(v172) = 12;
                              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                              v71 = (char *)v80;
                              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v80);
                              goto LABEL_522;
                            }
                          }
                        }
                      }
                      else
                      {
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v69 = qword_1022A01C8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                        {
                          *(_DWORD *)buf = 136446210;
                          *(_QWORD *)&buf[4] = "kCLConnectionMessageMonitoringNearby";
                          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                        }
                        if (sub_1001BFF7C(115, 0))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          LODWORD(v234[0]) = 136446210;
                          *(void **)((char *)v234 + 4) = "kCLConnectionMessageMonitoringNearby";
                          LODWORD(v172) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                          v71 = (char *)v70;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v70);
                          goto LABEL_522;
                        }
                      }
                      goto LABEL_421;
                    case 2:
                      if ((sub_1004E22EC(a1) & 1) != 0)
                      {
                        v208[0] = 0;
                        if ((sub_1001E4874(a3, "kCLConnectionMessageMonitoringNearby", v208) & 1) != 0)
                        {
                          if (v208[0] && (sub_1004E2278(a1) & 1) == 0)
                          {
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            v95 = qword_1022A01C8;
                            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                            {
                              v96 = *(_QWORD *)(a1 + 24);
                              *(_DWORD *)buf = 138543362;
                              *(_QWORD *)&buf[4] = v96;
                              _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to monitor while nearby", buf, 0xCu);
                            }
                            if (!sub_1001BFF7C(115, 0))
                              goto LABEL_421;
                            bzero(buf, 0x65CuLL);
                            if (qword_1022A01C0 != -1)
                              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                            v97 = *(void **)(a1 + 24);
                            LODWORD(v234[0]) = 138543362;
                            *(void **)((char *)v234 + 4) = v97;
                            LODWORD(v172) = 12;
                            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to monitor while nearby", v234, v172);
                            v71 = (char *)v98;
                            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v98);
                          }
                          else
                          {
                            if (!*(_BYTE *)(a1 + 64))
                              goto LABEL_396;
                            if (!v228)
                            {
                              if (qword_1022A0060 != -1)
                                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                              v107 = qword_1022A0068;
                              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                              {
                                v108 = (uint64_t)&__p;
                                if (SHIBYTE(v218) < 0)
                                  v108 = __p;
                                v109 = (uint64_t)&__src;
                                if (v220 < 0)
                                  v109 = __src;
                                v110 = (uint64_t)&v221;
                                if (v222 < 0)
                                  v110 = v221;
                                *(_DWORD *)buf = 136446723;
                                *(_QWORD *)&buf[4] = v108;
                                *(_WORD *)&buf[12] = 2082;
                                *(_QWORD *)&buf[14] = v109;
                                *(_WORD *)&buf[22] = 2081;
                                *(_QWORD *)&buf[24] = v110;
                                _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEBUG, "Removing geographic polygonal fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                              }
                              if (sub_1001BFF7C(115, 2))
                              {
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A0060 != -1)
                                  dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                v153 = &__p;
                                if (SHIBYTE(v218) < 0)
                                  v153 = (__int128 *)__p;
                                v154 = &__src;
                                if (v220 < 0)
                                  v154 = (__int128 *)__src;
                                v155 = (uint64_t)&v221;
                                if (v222 < 0)
                                  v155 = v221;
                                LODWORD(v234[0]) = 136446723;
                                *(void **)((char *)v234 + 4) = v153;
                                WORD2(v234[1]) = 2082;
                                *(void **)((char *)&v234[1] + 6) = v154;
                                HIWORD(v234[2]) = 2081;
                                v235 = v155;
                                LODWORD(v172) = 32;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Removing geographic polygonal fence [%{public}s]/%{public}s/%{private}s", v234, v172);
                                v157 = (char *)v156;
                                sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v156);
                                if (v157 != buf)
                                  free(v157);
                              }
                              if (SHIBYTE(v220) < 0)
                              {
                                sub_100115CE4(&v182, (void *)__src, *((unint64_t *)&__src + 1));
                              }
                              else
                              {
                                v182 = __src;
                                v183 = v220;
                              }
                              if (SHIBYTE(v222) < 0)
                              {
                                sub_100115CE4(&v180, (void *)v221, *((unint64_t *)&v221 + 1));
                              }
                              else
                              {
                                v180 = v221;
                                v181 = v222;
                              }
                              if (SHIBYTE(v218) < 0)
                              {
                                sub_100115CE4(&v178, (void *)__p, *((unint64_t *)&__p + 1));
                              }
                              else
                              {
                                v178 = __p;
                                v179 = v218;
                              }
                              sub_1001158A8(buf, (uint64_t)&v182, (uint64_t)&v180, (uint64_t)&v178);
                              if (SHIBYTE(v179) < 0)
                                operator delete((void *)v178);
                              if (SHIBYTE(v181) < 0)
                                operator delete((void *)v180);
                              if (SHIBYTE(v183) < 0)
                                operator delete((void *)v182);
                              v121 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                              sub_1004E5748((char *)v177, (__int128 *)buf);
                              objc_msgSend(v121, "removeFence:", sub_1004E2AE4(v177));
                              v118 = v177;
LABEL_394:
                              sub_1004E2BD0((uint64_t)v118);
LABEL_395:
                              sub_1004E2BD0((uint64_t)buf);
                              goto LABEL_396;
                            }
                            LODWORD(v212) = 0;
                            LODWORD(v211) = 0;
                            *(_QWORD *)v229 = 0;
                            if ((sub_1001E4B84(a3, "kCLConnectionMessageReferenceFrameKey", &v212) & 1) != 0)
                            {
                              if ((sub_1001E4B84(a3, "kCLConnectionMessagePolygonalVerticesCountKey", &v211) & 1) != 0)
                              {
                                if (sub_100527540(a3, CFSTR("kCLConnectionMessagePolygonalVerticesKey"), (CFTypeRef *)v229))
                                {
                                  if (qword_1022A0060 != -1)
                                    dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                  v60 = qword_1022A0068;
                                  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
                                  {
                                    v61 = (uint64_t)&__p;
                                    if (SHIBYTE(v218) < 0)
                                      v61 = __p;
                                    v62 = (uint64_t)&__src;
                                    if (v220 < 0)
                                      v62 = __src;
                                    v63 = (uint64_t)&v221;
                                    if (v222 < 0)
                                      v63 = v221;
                                    *(_DWORD *)buf = 136446723;
                                    *(_QWORD *)&buf[4] = v61;
                                    *(_WORD *)&buf[12] = 2082;
                                    *(_QWORD *)&buf[14] = v62;
                                    *(_WORD *)&buf[22] = 2081;
                                    *(_QWORD *)&buf[24] = v63;
                                    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "Adding geographic polygonal fence [%{public}s]/%{public}s/%{private}s", buf, 0x20u);
                                  }
                                  if (sub_1001BFF7C(115, 2))
                                  {
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A0060 != -1)
                                      dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                                    v162 = &__p;
                                    if (SHIBYTE(v218) < 0)
                                      v162 = (__int128 *)__p;
                                    v163 = &__src;
                                    if (v220 < 0)
                                      v163 = (__int128 *)__src;
                                    v164 = (uint64_t)&v221;
                                    if (v222 < 0)
                                      v164 = v221;
                                    LODWORD(v234[0]) = 136446723;
                                    *(void **)((char *)v234 + 4) = v162;
                                    WORD2(v234[1]) = 2082;
                                    *(void **)((char *)&v234[1] + 6) = v163;
                                    HIWORD(v234[2]) = 2081;
                                    v235 = v164;
                                    LODWORD(v172) = 32;
                                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Adding geographic polygonal fence [%{public}s]/%{public}s/%{private}s", v234, v172);
                                    v166 = (char *)v165;
                                    sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v165);
                                    if (v166 != buf)
                                      free(v166);
                                  }
                                  v213 = 0;
                                  v65 = +[NSKeyedUnarchiver unarchivedArrayOfObjectsOfClass:fromData:error:](NSKeyedUnarchiver, "unarchivedArrayOfObjectsOfClass:fromData:error:", objc_opt_class(_CLVertex, v64), *(_QWORD *)v229, &v213);
                                  v66 = -[NSArray count](v65, "count");
                                  if (v213)
                                  {
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    v67 = qword_1022A01C8;
                                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)buf = 68289282;
                                      *(_DWORD *)&buf[4] = 0;
                                      *(_WORD *)&buf[8] = 2082;
                                      *(_QWORD *)&buf[10] = "";
                                      *(_WORD *)&buf[18] = 2114;
                                      *(_QWORD *)&buf[20] = v213;
                                      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleRequestRegionMonitoring\", \"error\":%{public, location:escape_only}@}", buf, 0x1Cu);
                                      if (qword_1022A01C0 != -1)
                                        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    }
                                    v54 = qword_1022A01C8;
                                    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
                                    {
                                      *(_DWORD *)buf = 68289282;
                                      *(_DWORD *)&buf[4] = 0;
                                      *(_WORD *)&buf[8] = 2082;
                                      *(_QWORD *)&buf[10] = "";
                                      *(_WORD *)&buf[18] = 2114;
                                      *(_QWORD *)&buf[20] = v213;
                                      v56 = "Unable to get vertices from data in handleRequestRegionMonitoring";
                                      v57 = "{\"msg%{public}.0s\":\"Unable to get vertices from data in handleRequestRegi"
                                            "onMonitoring\", \"error\":%{public, location:escape_only}@}";
                                      goto LABEL_167;
                                    }
                                    goto LABEL_421;
                                  }
                                  v134 = v66;
                                  if ((_DWORD)v211 == (_DWORD)v66)
                                  {
                                    if (kCLPolygonalRegionMinVertices <= (unint64_t)(int)v211
                                      && kCLPolygonalRegionMaxVertices >= (unint64_t)(int)v211)
                                    {
                                      memset(v234, 0, sizeof(v234));
                                      sub_1002B1350(v234, (int)v211);
                                      if ((int)v211 >= 1)
                                      {
                                        v135 = 0;
                                        do
                                        {
                                          objc_msgSend(-[NSArray objectAtIndexedSubscript:](v65, "objectAtIndexedSubscript:", v135), "coordinate");
                                          *(_QWORD *)buf = v136;
                                          objc_msgSend(-[NSArray objectAtIndexedSubscript:](v65, "objectAtIndexedSubscript:", v135), "coordinate");
                                          *(_QWORD *)&buf[8] = v137;
                                          sub_1004E2C4C(v234, buf);
                                          ++v135;
                                        }
                                        while (v135 < (int)v211);
                                      }
                                      if (SHIBYTE(v220) < 0)
                                      {
                                        sub_100115CE4(&v191, (void *)__src, *((unint64_t *)&__src + 1));
                                      }
                                      else
                                      {
                                        v191 = __src;
                                        v192 = v220;
                                      }
                                      if (SHIBYTE(v222) < 0)
                                      {
                                        sub_100115CE4(&v189, (void *)v221, *((unint64_t *)&v221 + 1));
                                      }
                                      else
                                      {
                                        v189 = v221;
                                        v190 = v222;
                                      }
                                      if (SHIBYTE(v218) < 0)
                                      {
                                        sub_100115CE4(&v187, (void *)__p, *((unint64_t *)&__p + 1));
                                      }
                                      else
                                      {
                                        v187 = __p;
                                        v188 = v218;
                                      }
                                      sub_1015A2E04(v185, "");
                                      sub_100C3B6D0(buf, (uint64_t)&v191, (uint64_t)&v189, (uint64_t)&v187, (uint64_t)v234, -1, (uint64_t)v185, 0, 0);
                                      if (v186 < 0)
                                        operator delete(v185[0]);
                                      if (SHIBYTE(v188) < 0)
                                        operator delete((void *)v187);
                                      if (SHIBYTE(v190) < 0)
                                        operator delete((void *)v189);
                                      if (SHIBYTE(v192) < 0)
                                        operator delete((void *)v191);
                                      if (v225)
                                        v254 |= 1uLL;
                                      if (v224)
                                        v254 |= 2uLL;
                                      if (HIBYTE(v223))
                                        v254 |= 4uLL;
                                      if (v208[0])
                                        v254 |= 8uLL;
                                      if ((_BYTE)v223)
                                        v254 |= 0x10uLL;
                                      v255 = v212;
                                      v147 = *(void **)(*(_QWORD *)sub_1001B5BF8(a1) + 16);
                                      sub_1004E5748((char *)v184, (__int128 *)buf);
                                      objc_msgSend(v147, "addFence:", sub_1004E2AE4(v184));
                                      sub_1004E2BD0((uint64_t)v184);
                                      sub_100FFB224(a1);
                                      sub_1004E2BD0((uint64_t)buf);
                                      if (v234[0])
                                      {
                                        v234[1] = v234[0];
                                        operator delete(v234[0]);
                                      }
LABEL_396:
                                      v68 = 1;
LABEL_397:
                                      if ((v68 & sub_1001A638C(a1)) == 1)
                                        sub_1001A765C(a1);
                                      goto LABEL_421;
                                    }
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    v145 = qword_1022A01C8;
                                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)buf = 67240192;
                                      *(_DWORD *)&buf[4] = v211;
                                      _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_FAULT, "Number of vertices received invalid, %{public}d, monitoring", buf, 8u);
                                    }
                                    if (!sub_1001BFF7C(115, 0))
                                      goto LABEL_421;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    LODWORD(v234[0]) = 67240192;
                                    HIDWORD(v234[0]) = v211;
                                    LODWORD(v172) = 8;
                                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Number of vertices received invalid, %{public}d, monitoring", v234, v172);
                                    v71 = (char *)v146;
                                    sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v146);
                                  }
                                  else
                                  {
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    v142 = qword_1022A01C8;
                                    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                    {
                                      *(_DWORD *)buf = 67240448;
                                      *(_DWORD *)&buf[4] = v211;
                                      *(_WORD *)&buf[8] = 2050;
                                      *(_QWORD *)&buf[10] = v134;
                                      _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_FAULT, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", buf, 0x12u);
                                    }
                                    if (!sub_1001BFF7C(115, 0))
                                      goto LABEL_421;
                                    bzero(buf, 0x65CuLL);
                                    if (qword_1022A01C0 != -1)
                                      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                    LODWORD(v234[0]) = 67240448;
                                    HIDWORD(v234[0]) = v211;
                                    LOWORD(v234[1]) = 2050;
                                    *(void **)((char *)&v234[1] + 2) = v134;
                                    LODWORD(v172) = 18;
                                    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Number of vertices received doesn't match stored, %{public}d, %{public}lu", v234, v172);
                                    v71 = (char *)v143;
                                    sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v143);
                                  }
                                }
                                else
                                {
                                  if (qword_1022A01C0 != -1)
                                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                  v129 = qword_1022A01C8;
                                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                  {
                                    *(_DWORD *)buf = 136446210;
                                    *(_QWORD *)&buf[4] = "kCLConnectionMessagePolygonalVerticesKey";
                                    _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                  }
                                  if (!sub_1001BFF7C(115, 0))
                                    goto LABEL_421;
                                  bzero(buf, 0x65CuLL);
                                  if (qword_1022A01C0 != -1)
                                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                  LODWORD(v234[0]) = 136446210;
                                  *(void **)((char *)v234 + 4) = "kCLConnectionMessagePolygonalVerticesKey";
                                  LODWORD(v172) = 12;
                                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                  v71 = (char *)v130;
                                  sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v130);
                                }
                              }
                              else
                              {
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                v119 = qword_1022A01C8;
                                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                                {
                                  *(_DWORD *)buf = 136446210;
                                  *(_QWORD *)&buf[4] = "kCLConnectionMessagePolygonalVerticesCountKey";
                                  _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                                }
                                if (!sub_1001BFF7C(115, 0))
                                  goto LABEL_421;
                                bzero(buf, 0x65CuLL);
                                if (qword_1022A01C0 != -1)
                                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                                LODWORD(v234[0]) = 136446210;
                                *(void **)((char *)v234 + 4) = "kCLConnectionMessagePolygonalVerticesCountKey";
                                LODWORD(v172) = 12;
                                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                                v71 = (char *)v120;
                                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v120);
                              }
                            }
                            else
                            {
                              if (qword_1022A01C0 != -1)
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                              v111 = qword_1022A01C8;
                              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                              {
                                *(_DWORD *)buf = 136446210;
                                *(_QWORD *)&buf[4] = "kCLConnectionMessageReferenceFrameKey";
                                _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                              }
                              if (!sub_1001BFF7C(115, 0))
                                goto LABEL_421;
                              bzero(buf, 0x65CuLL);
                              if (qword_1022A01C0 != -1)
LABEL_602:
                                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
LABEL_341:
                              LODWORD(v234[0]) = 136446210;
                              *(void **)((char *)v234 + 4) = "kCLConnectionMessageReferenceFrameKey";
                              LODWORD(v172) = 12;
                              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                              v71 = (char *)v112;
                              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v112);
                            }
                          }
                        }
                        else
                        {
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          v81 = qword_1022A01C8;
                          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                          {
                            *(_DWORD *)buf = 136446210;
                            *(_QWORD *)&buf[4] = "kCLConnectionMessageMonitoringNearby";
                            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                          }
                          if (!sub_1001BFF7C(115, 0))
                            goto LABEL_421;
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A01C0 != -1)
                            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                          LODWORD(v234[0]) = 136446210;
                          *(void **)((char *)v234 + 4) = "kCLConnectionMessageMonitoringNearby";
                          LODWORD(v172) = 12;
                          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, v172);
                          v71 = (char *)v82;
                          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v82);
                        }
                      }
                      else
                      {
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v72 = qword_1022A01C8;
                        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                        {
                          v73 = *(_QWORD *)(a1 + 24);
                          *(_DWORD *)buf = 138543362;
                          *(_QWORD *)&buf[4] = v73;
                          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", buf, 0xCu);
                        }
                        if (!sub_1001BFF7C(115, 0))
                          goto LABEL_421;
                        bzero(buf, 0x65CuLL);
                        if (qword_1022A01C0 != -1)
                          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                        v74 = *(void **)(a1 + 24);
                        LODWORD(v234[0]) = 138543362;
                        *(void **)((char *)v234 + 4) = v74;
                        LODWORD(v172) = 12;
                        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have appropriate entitlement to use polygonal regions", v234, v172);
                        v71 = (char *)v75;
                        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v75);
                      }
LABEL_522:
                      if (v71 != buf)
                        free(v71);
                      goto LABEL_421;
                    default:
                      v68 = 0;
                      goto LABEL_397;
                  }
                }
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                v29 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                {
                  v30 = *(_QWORD *)(a1 + 24);
                  *(_DWORD *)buf = 138543362;
                  *(_QWORD *)&buf[4] = v30;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                  v31 = *(void **)(a1 + 24);
                  LODWORD(v234[0]) = 138543362;
                  *(void **)((char *)v234 + 4) = v31;
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Client %{public}@ does not have the appropriate entitlement to act as an emergency service", v234, 12);
                  v9 = (char *)v32;
                  sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v32);
LABEL_99:
                  if (v9 != buf)
                    free(v9);
                }
              }
              else
              {
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                v20 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "kCLConnectionMessageEmergencyKey";
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 0))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                  LODWORD(v234[0]) = 136446210;
                  *(void **)((char *)v234 + 4) = "kCLConnectionMessageEmergencyKey";
                  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
                  v9 = (char *)v21;
                  sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v21);
                  goto LABEL_99;
                }
              }
            }
            else
            {
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
              v18 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "kCLConnectionMessageConservativeEntry";
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_10213EF98);
                LODWORD(v234[0]) = 136446210;
                *(void **)((char *)v234 + 4) = "kCLConnectionMessageConservativeEntry";
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
                v9 = (char *)v19;
                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v19);
                goto LABEL_99;
              }
            }
          }
          else
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
            v16 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnExitKey";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_10213EF98);
              LODWORD(v234[0]) = 136446210;
              *(void **)((char *)v234 + 4) = "kCLConnectionMessageNotifyOnExitKey";
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
              v9 = (char *)v17;
              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v17);
              goto LABEL_99;
            }
          }
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          v14 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "kCLConnectionMessageNotifyOnEntryKey";
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
            LODWORD(v234[0]) = 136446210;
            *(void **)((char *)v234 + 4) = "kCLConnectionMessageNotifyOnEntryKey";
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
            v9 = (char *)v15;
            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v15);
            goto LABEL_99;
          }
        }
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v12 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "kCLConnectionMessageNameKey";
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          LODWORD(v234[0]) = 136446210;
          *(void **)((char *)v234 + 4) = "kCLConnectionMessageNameKey";
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
          v9 = (char *)v13;
          sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v13);
          goto LABEL_99;
        }
      }
    }
    else
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
      v10 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "kCLConnectionMessageSubscribeKey";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        LODWORD(v234[0]) = 136446210;
        *(void **)((char *)v234 + 4) = "kCLConnectionMessageSubscribeKey";
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
        v9 = (char *)v11;
        sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v11);
        goto LABEL_99;
      }
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "kCLConnectionMessageRegionTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
      LODWORD(v234[0]) = 136446210;
      *(void **)((char *)v234 + 4) = "kCLConnectionMessageRegionTypeKey";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Couldn't get value for key %{public}s", v234, 12);
      v9 = (char *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleRequestRegionMonitoring(BOOL, const CLNameValuePair &)", "%s\n", v8);
      goto LABEL_99;
    }
  }
LABEL_433:

}

void sub_1004E1880(_Unwind_Exception *a1)
{
  void *v1;

  if (SLOBYTE(STACK[0x6FF]) < 0)
    operator delete((void *)STACK[0x6E8]);
  if (SLOBYTE(STACK[0x717]) < 0)
    operator delete((void *)STACK[0x700]);
  if (SLOBYTE(STACK[0x72F]) < 0)
    operator delete((void *)STACK[0x718]);
  if (SLOBYTE(STACK[0x747]) < 0)
    operator delete((void *)STACK[0x730]);
  if (SLOBYTE(STACK[0x75F]) < 0)
    operator delete((void *)STACK[0x748]);
  if (SLOBYTE(STACK[0x777]) < 0)
    operator delete((void *)STACK[0x760]);

  _Unwind_Resume(a1);
}

void sub_1004E1C38(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  NSObject *v5;
  void *v6;
  void *Dictionary;
  id v8;
  id v9;
  NSError *v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  id v19;
  NSObject *v20;
  id v21;
  int v22;
  uint64_t v23;
  uint8_t buf[4];
  _BYTE v25[14];
  __int16 v26;
  id v27;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
  v5 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(void **)(a1 + 24);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v25 = 0;
    *(_WORD *)&v25[4] = 2082;
    *(_QWORD *)&v25[6] = "";
    v26 = 2114;
    v27 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#FenceHandoff handleChangeFencesStateMatchingHandoffTags\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((sub_1004E2448(a1) & 1) != 0)
  {
    if (!*(_BYTE *)(a1 + 64))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
      v16 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(void **)(a1 + 24);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(_QWORD *)&v25[6] = "";
        v26 = 2114;
        v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warn #FenceHandoff fence manager doesn't exist yet!\", \"Client\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      v10 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", kCLErrorDomain, 5, 0);
      goto LABEL_23;
    }
    Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
    v8 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageHandoffTagKey"));
    v9 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageUUIDKey")));
    if (v9)
    {
      objc_msgSend(*(id *)(*(_QWORD *)sub_1001B5BF8(a1) + 16), "requestChangeFencesStateMatchingHandoffTags:forDeviceID:", v8, v9);
      v10 = 0;
LABEL_23:
      objc_msgSend(+[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary"), "setObject:forKeyedSubscript:", v10, CFSTR("kCLConnectionMessageErrorKey"));
      CLConnectionMessage::sendReply(*a2);
      goto LABEL_24;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
    v18 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v19 = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageUUIDKey")), "UTF8String");
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 2082;
      v27 = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to create uuid object\", \"uuidString\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10213EFB8);
    }
    v20 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v21 = objc_msgSend(objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageUUIDKey")), "UTF8String");
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = "";
      v26 = 2082;
      v27 = v21;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to create uuid object", "{\"msg%{public}.0s\":\"Unable to create uuid object\", \"uuidString\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v25 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
      v13 = *(_QWORD *)(a1 + 24);
      v22 = 138543362;
      v23 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "#Warning #FenceHandoff %{public}@ does not have the appropriate entitlement for fence handoff service", &v22, 12);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::handleChangeFencesStateMatchingHandoffTags(std::shared_ptr<CLConnectionMessage>)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
LABEL_24:

}

void sub_1004E2160(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1004E21A4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1004E2204(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.locationd.region_proxy_service");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E225C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2278(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.locationd.region_while_nearby");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E22D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E22EC(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.location.region_polygonal");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E2344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2360(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.location.region_aggressive");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E23B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E23D4(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.location.region_low_power");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E242C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2448(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.locationd.region_fence_handoff");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E24A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E24BC(uint64_t a1)
{
  uint64_t v2;
  void *__p;
  char v5;

  sub_1015A2E04(&__p, "com.apple.locationd.significant_region");
  v2 = sub_1002255E0(a1);
  if (v5 < 0)
    operator delete(__p);
  return v2;
}

void sub_1004E2514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E2530(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  void *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSData *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  int v22;
  void *v23[2];
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  void *v31[2];
  unsigned __int8 v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  uint64_t buf;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t v41;

  sub_100528888(a2, "kCLConnectionMessageNameKey", (char *)(a1 + 24));
  sub_100204320((std::string *)(a1 + 48), (uint64_t)v23);
  sub_1001A8D50((uint64_t)v23);
  v4 = v32;
  if ((v32 & 0x80u) != 0)
    v4 = (unint64_t)v31[1];
  if (v4)
  {
    sub_1001A8D50((uint64_t)v23);
    v5 = (char *)v31;
  }
  else
  {
    v5 = (char *)&v27;
  }
  sub_100528888(a2, "kCLConnectionMessageOnBehalfOfKey", v5);
  LODWORD(buf) = *(_DWORD *)(a1 + 180);
  sub_10011B4E4(a2, "kCLConnectionMessageReferenceFrameKey", &buf);
  v6 = *(void **)(a1 + 216);
  if (v6)
    v7 = (char *)objc_msgSend(objc_msgSend(v6, "UUIDString"), "UTF8String");
  else
    v7 = "";
  sub_1005285B4(a2, "kCLConnectionMessageDeviceIDKey", v7);
  sub_100528888(a2, "kCLConnectionMessageHandoffTagKey", (char *)(a1 + 192));
  LOBYTE(buf) = *(_BYTE *)(a1 + 160) & 1;
  sub_10011B47C(a2, "kCLConnectionMessageNotifyOnEntryKey", &buf);
  LOBYTE(buf) = (*(_BYTE *)(a1 + 160) & 2) != 0;
  sub_10011B47C(a2, "kCLConnectionMessageNotifyOnExitKey", &buf);
  LOBYTE(buf) = (*(_BYTE *)(a1 + 160) & 4) != 0;
  sub_10011B47C(a2, "kCLConnectionMessageConservativeEntry", &buf);
  LOBYTE(buf) = (*(_BYTE *)(a1 + 160) & 0x10) != 0;
  sub_10011B47C(a2, "kCLConnectionMessageEmergencyKey", &buf);
  if (*(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224))
  {
    LOBYTE(v21) = (*(_BYTE *)(a1 + 160) & 0x40) != 0;
    sub_10011B47C(a2, "kCLConnectionMessageMonitoringNearby", &v21);
    if ((*(_BYTE *)(a1 + 160) & 0x80) != 0)
      LODWORD(buf) = 3;
    else
      LODWORD(buf) = 1;
    sub_10011B4E4(a2, "kCLConnectionMessageRegionTypeKey", &buf);
    sub_10018A4CC(a2, "kCLConnectionMessageLatitudeKey", (const void *)(a1 + 72));
    sub_10018A4CC(a2, "kCLConnectionMessageLongitudeKey", (const void *)(a1 + 80));
    sub_10018A4CC(a2, "kCLConnectionMessageRadiusKey", (const void *)(a1 + 88));
    sub_10018A4CC(a2, "kCLConnectionMessageDesiredAccuracyKey", (const void *)(a1 + 104));
    LOBYTE(buf) = (*(_BYTE *)(a1 + 160) & 0x20) != 0;
    sub_10011B47C(a2, "kCLConnectionMessageLowPowerFenceKey", &buf);
    goto LABEL_27;
  }
  LOBYTE(buf) = (*(_BYTE *)(a1 + 160) & 8) != 0;
  sub_10011B47C(a2, "kCLConnectionMessageMonitoringNearby", &buf);
  LODWORD(buf) = 2;
  sub_10011B4E4(a2, "kCLConnectionMessageRegionTypeKey", &buf);
  v8 = *(_QWORD *)(a1 + 232) - *(_QWORD *)(a1 + 224);
  v9 = (unint64_t)v8 >> 4;
  v22 = (unint64_t)v8 >> 4;
  v10 = (int)(v8 >> 4);
  v11 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", v10);
  if ((int)v9 >= 1)
  {
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = objc_msgSend(objc_alloc((Class)_CLVertex), "initWithClientCoordinate:", *(double *)(*(_QWORD *)(a1 + 224) + v12), *(double *)(*(_QWORD *)(a1 + 224) + v12 + 8));
      objc_msgSend(v11, "addObject:", v14);

      ++v13;
      v12 += 16;
    }
    while (v13 < v10);
  }
  v21 = 0;
  v15 = +[NSKeyedArchiver archivedDataWithRootObject:requiringSecureCoding:error:](NSKeyedArchiver, "archivedDataWithRootObject:requiringSecureCoding:error:", v11, 1, &v21);
  if (!v21)
  {
    v19 = (uint64_t)v15;

    sub_10011B4E4(a2, "kCLConnectionMessagePolygonalVerticesCountKey", &v22);
    sub_10011B54C(a2, "kCLConnectionMessagePolygonalVerticesKey", v19);
LABEL_27:
    v18 = 1;
    goto LABEL_28;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_10213EF98);
  v16 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    buf = 68289282;
    v38 = 2082;
    v39 = "";
    v40 = 2114;
    v41 = v21;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Unable to encode vertices in populateGeographicRegion\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
  }
  v17 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    buf = 68289282;
    v38 = 2082;
    v39 = "";
    v40 = 2114;
    v41 = v21;
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Unable to encode vertices in populateGeographicRegion", "{\"msg%{public}.0s\":\"Unable to encode vertices in populateGeographicRegion\", \"error\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
  }
  v18 = 0;
LABEL_28:
  if (v36 < 0)
    operator delete(__p);
  if (v34 < 0)
    operator delete(v33);
  if ((char)v32 < 0)
    operator delete(v31[0]);
  if (v30 < 0)
    operator delete(v29);
  if (v28 < 0)
    operator delete(v27);
  if (v26 < 0)
    operator delete(v25);
  if (v24 < 0)
    operator delete(v23[0]);
  return v18;
}

void sub_1004E2A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1004E2AE4(__int128 *a1)
{
  id v1;
  _QWORD v3[4];
  void *v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  id v12;
  void *__p;
  void *v14;

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3321888768;
  v3[2] = sub_1004E6B0C;
  v3[3] = &unk_10213F180;
  sub_1004E5748((char *)&v4, a1);
  v1 = objc_msgSend(v3, "copy");
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }

  if (v11 < 0)
    operator delete(v10);
  if (v9 < 0)
    operator delete(v8);
  if (v7 < 0)
    operator delete(v6);
  if (v5 < 0)
    operator delete(v4);
  return v1;
}

void sub_1004E2BBC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E2BD0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E2BD0(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 224);
  if (v2)
  {
    *(_QWORD *)(a1 + 232) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1004E2C4C(void **a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;

  v6 = (unint64_t)a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = ((char *)v7 - (_BYTE *)*a1) >> 4;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 60)
      sub_100259694();
    v11 = v5 - (_QWORD)*a1;
    if (v11 >> 3 > v10)
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
      v13 = (char *)sub_10028E224(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v9];
    v15 = &v13[16 * v12];
    *(_OWORD *)v14 = *a2;
    v8 = v14 + 16;
    v17 = (char *)*a1;
    v16 = (char *)a1[1];
    if (v16 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v16 - 1);
        v14 -= 16;
        v16 -= 16;
      }
      while (v16 != v17);
      v16 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v8;
    a1[2] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[1] = v8;
}

uint64_t sub_1004E2D38(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 216))(a2, a1 + 32);
}

uint64_t sub_1004E2D50(uint64_t a1, uint64_t a2)
{
  return sub_1004E5FB0(a1 + 32, a2 + 32);
}

uint64_t sub_1004E2D5C(uint64_t a1)
{
  return sub_100114750(a1 + 32);
}

uint64_t sub_1004E2D68(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 240))(a2, a1 + 32);
}

uint64_t sub_1004E2D80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 248))(a2, a1 + 32);
}

void sub_1004E2D98(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  unint64_t v9;
  void **v10;
  unsigned __int8 *v11;
  NSObject *v12;
  int v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  int v17;
  _BOOL4 v18;
  double v19;
  uint64_t v20;
  const char *v21;
  _BYTE *v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  NSObject *v27;
  NSObject *v28;
  int v29;
  const char *v30;
  _BYTE *v31;
  int v32;
  const char *v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  NSObject *v37;
  const void *v38;
  uint64_t v39;
  NSObject *v40;
  _BYTE *v41;
  uint64_t v42;
  _BYTE *v43;
  char *v44;
  NSObject *v45;
  _BYTE *v46;
  uint64_t v47;
  _BYTE *v48;
  NSObject *v49;
  NSObject *v50;
  unsigned int v51;
  NSObject *v52;
  int v53;
  char *v54;
  char *v55;
  int v56;
  int v57;
  _BYTE *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  double v64;
  uint64_t v65;
  const char *v66;
  _BYTE *v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  _BYTE *v76;
  int v77;
  const char *v78;
  const void *v79;
  int v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  _BYTE *v84;
  char *v85;
  int v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  const char *v91;
  int v92;
  const char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  _BYTE v104[16];
  _BYTE v105[16];
  void *__p[2];
  unsigned __int8 v107;
  _BYTE v108[12];
  __int16 v109;
  _BYTE *v110;
  __int16 v111;
  _BYTE v112[18];
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  int v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  _BOOL4 v122;
  __int16 v123;
  _BOOL4 v124;
  __int16 v125;
  int v126;
  __int16 v127;
  _BOOL4 v128;
  __int16 v129;
  int v130;
  _BYTE v131[12];
  char v132;
  _BYTE buf[12];
  __int16 v134;
  _BYTE *v135;
  __int16 v136;
  _BYTE v137[18];
  __int16 v138;
  uint64_t v139;
  __int16 v140;
  uint64_t v141;
  __int16 v142;
  int v143;
  __int16 v144;
  uint64_t v145;
  __int16 v146;
  _BOOL4 v147;
  __int16 v148;
  _BOOL4 v149;
  __int16 v150;
  int v151;
  __int16 v152;
  _BOOL4 v153;
  __int16 v154;
  int v155;

  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
  v7 = *(unsigned __int8 *)(a4 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (void *)*(unsigned __int8 *)(a4 + 23);
  else
    v8 = *(void **)(a4 + 8);
  v9 = v107;
  if ((v107 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  if (v8 != (void *)v9)
    goto LABEL_153;
  if ((v107 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a4, v10, *(_QWORD *)(a4 + 8)))
      goto LABEL_153;
    goto LABEL_17;
  }
  if (!*(_BYTE *)(a4 + 23))
  {
LABEL_17:
    sub_100119F3C(v105);
    sub_100119F3C(v104);
    if ((*(_BYTE *)(a4 + 161) & 1) == 0)
    {
      switch(*a3)
      {
        case 0:
        case 1:
          if (sub_1004E2530(a4, (uint64_t)v105))
          {
            *(_DWORD *)buf = *a3 != 0;
            sub_10011B4E4((uint64_t)v105, "kCLConnectionMessageEventKey", buf);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            v102 = (uint64_t *)(a4 + 500);
            v12 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v13 = *a3;
              v14 = *(char *)(a4 + 23);
              v15 = *(_BYTE **)a4;
              v16 = *(_QWORD *)(a4 + 24);
              v17 = *(char *)(a4 + 47);
              v94 = *v102;
              v95 = *(_QWORD *)(a4 + 508);
              v96 = *(_QWORD *)(a4 + 516);
              v98 = *(_DWORD *)(a4 + 592);
              v100 = *(_QWORD *)(a4 + 152);
              v18 = sub_1004E458C(a4);
              v19 = *(double *)(a4 + 96);
              if (v17 >= 0)
                v20 = a4 + 24;
              else
                v20 = v16;
              v21 = "exit";
              if (v14 >= 0)
                v22 = (_BYTE *)a4;
              else
                v22 = v15;
              v23 = *(_DWORD *)(a4 + 160);
              if (!v13)
                v21 = "entry";
              v25 = *(_QWORD *)(a4 + 224);
              v24 = *(_QWORD *)(a4 + 232);
              v26 = *(unsigned __int8 *)(a4 + 188);
              *(_DWORD *)buf = 136383747;
              *(_QWORD *)&buf[4] = v21;
              v134 = 2082;
              v135 = v22;
              v136 = 2081;
              *(_QWORD *)v137 = v20;
              *(_WORD *)&v137[8] = 2049;
              *(_QWORD *)&v137[10] = v94;
              v138 = 2049;
              v139 = v95;
              v140 = 2050;
              v141 = v96;
              v142 = 1026;
              v143 = v98;
              v144 = 2049;
              v145 = v100;
              v146 = 1025;
              v147 = v18;
              v148 = 1025;
              v149 = v19 >= 7000.0;
              v150 = 1025;
              v151 = (v23 >> 4) & 1;
              v152 = 1025;
              v153 = v24 != v25;
              v154 = 1025;
              v155 = v26;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Notifying client of fence %{private}s for %{public}s/%{private}s (location <%{private}+.8f,%{private}+.8f> acc %{public}.2f type %{public}d, \t\t\t\t\t\t\tsinceLast,%{private}.1f, fence,%{private}d,%{private}d,%{private}d,%{private}d,%{private}d", buf, 0x6Cu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              v56 = *a3;
              v57 = *(char *)(a4 + 23);
              v58 = *(_BYTE **)a4;
              v59 = *(_QWORD *)(a4 + 24);
              v60 = *(char *)(a4 + 47);
              v61 = *v102;
              v62 = *(_QWORD *)(a4 + 508);
              v97 = *(_QWORD *)(a4 + 516);
              v99 = *(_DWORD *)(a4 + 592);
              v101 = qword_1022A0068;
              v103 = *(_QWORD *)(a4 + 152);
              v63 = sub_1004E458C(a4);
              v64 = *(double *)(a4 + 96);
              if (v60 >= 0)
                v65 = a4 + 24;
              else
                v65 = v59;
              v66 = "exit";
              if (v57 >= 0)
                v67 = (_BYTE *)a4;
              else
                v67 = v58;
              v68 = *(_DWORD *)(a4 + 160);
              if (!v56)
                v66 = "entry";
              v70 = *(_QWORD *)(a4 + 224);
              v69 = *(_QWORD *)(a4 + 232);
              v71 = *(unsigned __int8 *)(a4 + 188);
              *(_DWORD *)v108 = 136383747;
              *(_QWORD *)&v108[4] = v66;
              v109 = 2082;
              v110 = v67;
              v111 = 2081;
              *(_QWORD *)v112 = v65;
              *(_WORD *)&v112[8] = 2049;
              *(_QWORD *)&v112[10] = v61;
              v113 = 2049;
              v114 = v62;
              v115 = 2050;
              v116 = v97;
              v117 = 1026;
              v118 = v99;
              v119 = 2049;
              v120 = v103;
              v121 = 1025;
              v122 = v63;
              v123 = 1025;
              v124 = v64 >= 7000.0;
              v125 = 1025;
              v126 = (v68 >> 4) & 1;
              v127 = 1025;
              v128 = v69 != v70;
              v129 = 1025;
              v130 = v71;
              v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v101, 2, "Notifying client of fence %{private}s for %{public}s/%{private}s (location <%{private}+.8f,%{private}+.8f> acc %{public}.2f type %{public}d, \t\t\t\t\t\t\tsinceLast,%{private}.1f, fence,%{private}d,%{private}d,%{private}d,%{private}d,%{private}d", v108, 108);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v72);
              if (v72 != buf)
                free(v72);
            }
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E45DC(a1, buf);
          }
          break;
        case 2:
          if (sub_1004E2530(a4, (uint64_t)v105))
          {
            *(_QWORD *)buf = 6;
            sub_1005282E8((uint64_t)v105, "kCLConnectionMessageErrorKey", buf);
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E4684(a1, buf);
          }
          break;
        case 3:
          if (sub_1004E2530(a4, (uint64_t)v105))
          {
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E472C(a1, buf);
          }
          break;
        case 4:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10213EFD8);
          v27 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Fence: received, kNotificationFenceFailure", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            *(_WORD *)v108 = 0;
            v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: received, kNotificationFenceFailure", v108, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v54);
            if (v54 != buf)
              free(v54);
          }
          if ((sub_1004E2530(a4, (uint64_t)v105) & 1) == 0)
            sub_100528888((uint64_t)v105, "kCLConnectionMessageNameKey", (char *)(a4 + 24));
          *(_QWORD *)buf = 5;
          sub_1005282E8((uint64_t)v105, "kCLConnectionMessageErrorKey", buf);
          *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
          sub_1004E4684(a1, buf);
          break;
        case 5:
          if ((sub_1004E2530(a4, (uint64_t)v105) & 1) != 0)
          {
            v34 = *(unsigned __int8 *)(a4 + 271);
            if ((v34 & 0x80u) != 0)
              v34 = *(_QWORD *)(a4 + 256);
            if (v34)
            {
              sub_100119F3C(v108);
              if ((sub_1004E2530(a4 + 248, (uint64_t)v108) & 1) == 0)
              {
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                v35 = qword_1022A0068;
                if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't populate alternate region", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0060 != -1)
                    dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                  *(_WORD *)v131 = 0;
                  v90 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Warning Couldn't populate alternate region", v131, 2);
                  sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v90);
                  if (v90 != buf)
                    free(v90);
                }
                sub_100528888((uint64_t)v105, "kCLConnectionMessageNameKey", (char *)(a4 + 24));
              }
              sub_1000CADE4((uint64_t)v105, "kCLConnectionMessageAlternateRegionKey", (uint64_t)v108);
              sub_10011A5A8(v108);
            }
            else
            {
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              v50 = qword_1022A0068;
              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEBUG, "No alternate region available", buf, 2u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                *(_WORD *)v108 = 0;
                v89 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "No alternate region available", v108, 2);
                sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v89);
                if (v89 != buf)
                  free(v89);
              }
            }
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E47D4(a1, buf);
            goto LABEL_138;
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10213EFD8);
          v45 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
          {
            sub_100C3B9BC(a4, buf);
            v46 = v136 >= 0 ? buf : *(_BYTE **)buf;
            *(_DWORD *)v108 = 136315138;
            *(_QWORD *)&v108[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#Warning Can't populate fence, %s", v108, 0xCu);
            if (SHIBYTE(v136) < 0)
              operator delete(*(void **)buf);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            v47 = qword_1022A0068;
            sub_100C3B9BC(a4, v108);
            if (v111 >= 0)
              v48 = v108;
            else
              v48 = *(_BYTE **)v108;
            *(_DWORD *)v131 = 136315138;
            *(_QWORD *)&v131[4] = v48;
            v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 0, "#Warning Can't populate fence, %s", v131);
            if (SHIBYTE(v111) < 0)
              operator delete(*(void **)v108);
            sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v44);
            goto LABEL_121;
          }
          break;
        case 6:
          goto LABEL_43;
        case 7:
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10213EFD8);
          v36 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Fence: received, kNotificationFenceNotAuthorized", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            *(_WORD *)v108 = 0;
            v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: received, kNotificationFenceNotAuthorized", v108, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v55);
            if (v55 != buf)
              free(v55);
          }
          if ((sub_1004E2530(a4, (uint64_t)v105) & 1) != 0)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            v37 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a4 + 23) >= 0)
                v38 = (const void *)a4;
              else
                v38 = *(const void **)a4;
              if (*(char *)(a4 + 47) >= 0)
                v39 = a4 + 24;
              else
                v39 = *(_QWORD *)(a4 + 24);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = v38;
              v134 = 2082;
              v135 = (_BYTE *)v39;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#Notice Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %{public}s, fence, %{public}s", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              if (*(char *)(a4 + 23) >= 0)
                v79 = (const void *)a4;
              else
                v79 = *(const void **)a4;
              v80 = *(char *)(a4 + 47);
              v83 = *(_BYTE **)(a4 + 24);
              v82 = a4 + 24;
              v81 = v83;
              if (v80 >= 0)
                v84 = (_BYTE *)v82;
              else
                v84 = v81;
              *(_DWORD *)v108 = 136446466;
              *(_QWORD *)&v108[4] = v79;
              v109 = 2082;
              v110 = v84;
              LODWORD(v91) = 22;
              v85 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 0, "#Notice Fence: kNotificationFenceNotAuthorized, bundle not authorized for location, %{public}s, fence, %{public}s", v108, v91);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v85);
              if (v85 != buf)
                free(v85);
            }
            *(_QWORD *)buf = 4;
            sub_1005282E8((uint64_t)v105, "kCLConnectionMessageErrorKey", buf);
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E4684(a1, buf);
            break;
          }
          if (qword_1022A0060 != -1)
            dispatch_once(&qword_1022A0060, &stru_10213EFD8);
          v49 = qword_1022A0068;
          if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_FAULT, "Fence: kNotificationFenceNotAuthorized, failed to populate fence", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            *(_WORD *)v108 = 0;
            LODWORD(v91) = 2;
            v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: kNotificationFenceNotAuthorized, failed to populate fence", v108, v91);
            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v44);
            if (v44 != buf)
              goto LABEL_131;
          }
          break;
        case 8:
          if ((sub_100FFB2EC(a1) & 1) == 0)
            break;
LABEL_43:
          if ((sub_1004E2530(a4, (uint64_t)v105) & 1) != 0)
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            v28 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
            {
              v29 = *a3;
              sub_100C3B9BC(a4, v108);
              v30 = "kNotificationFenceState";
              if (v29 != 8)
                v30 = "kNotificationRegionStateRequest";
              v31 = *(_BYTE **)v108;
              if (v111 >= 0)
                v31 = v108;
              v32 = *(_DWORD *)(a4 + 652);
              if ((v32 + 1) > 4)
                v33 = "---";
              else
                v33 = (&off_10213F1E0)[v32 + 1];
              *(_DWORD *)buf = 136315906;
              *(_QWORD *)&buf[4] = v30;
              v134 = 2080;
              v135 = v31;
              v136 = 1024;
              *(_DWORD *)v137 = v32;
              *(_WORD *)&v137[4] = 2080;
              *(_QWORD *)&v137[6] = v33;
              _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Fence: received, %s, %s, state, %d, %s", buf, 0x26u);
              if (SHIBYTE(v111) < 0)
                operator delete(*(void **)v108);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              v73 = qword_1022A0068;
              v74 = *a3;
              sub_100C3B9BC(a4, v131);
              v75 = "kNotificationFenceState";
              if (v74 != 8)
                v75 = "kNotificationRegionStateRequest";
              v76 = *(_BYTE **)v131;
              if (v132 >= 0)
                v76 = v131;
              v77 = *(_DWORD *)(a4 + 652);
              if ((v77 + 1) > 4)
                v78 = "---";
              else
                v78 = (&off_10213F1E0)[v77 + 1];
              *(_DWORD *)v108 = 136315906;
              *(_QWORD *)&v108[4] = v75;
              v109 = 2080;
              v110 = v76;
              v111 = 1024;
              *(_DWORD *)v112 = v77;
              *(_WORD *)&v112[4] = 2080;
              *(_QWORD *)&v112[6] = v78;
              LODWORD(v91) = 38;
              v88 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 2, "Fence: received, %s, %s, state, %d, %s", v108, v91, v92, v93);
              if (v132 < 0)
                operator delete(*(void **)v131);
              sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v88);
              if (v88 != buf)
                free(v88);
            }
            v51 = *(_DWORD *)(a4 + 652) + 1;
            if (v51 >= 3)
            {
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              v52 = qword_1022A0068;
              if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
              {
                v53 = *(_DWORD *)(a4 + 652);
                *(_DWORD *)buf = 67240192;
                *(_DWORD *)&buf[4] = v53;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "Fence: unknown state, %{public}d", buf, 8u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0060 != -1)
                  dispatch_once(&qword_1022A0060, &stru_10213EFD8);
                v86 = *(_DWORD *)(a4 + 652);
                *(_DWORD *)v108 = 67240192;
                *(_DWORD *)&v108[4] = v86;
                LODWORD(v91) = 8;
                v87 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 17, "Fence: unknown state, %{public}d", v108, v91);
                sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v87);
                if (v87 != buf)
                  free(v87);
              }
              v51 = 0;
            }
            *(_DWORD *)buf = v51;
            sub_10011B4E4((uint64_t)v105, "kCLConnectionMessageStatusKey", buf);
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E44E4(a1, buf);
          }
          else
          {
            if (qword_1022A0060 != -1)
              dispatch_once(&qword_1022A0060, &stru_10213EFD8);
            v40 = qword_1022A0068;
            if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_FAULT))
            {
              sub_100C3B9BC(a4, buf);
              v41 = v136 >= 0 ? buf : *(_BYTE **)buf;
              *(_DWORD *)v108 = 136315138;
              *(_QWORD *)&v108[4] = v41;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Fence: kNotificationRegionStateRequest, failed to populateGeographicRegion, %s", v108, 0xCu);
              if (SHIBYTE(v136) < 0)
                operator delete(*(void **)buf);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0060 != -1)
                dispatch_once(&qword_1022A0060, &stru_10213EFD8);
              v42 = qword_1022A0068;
              sub_100C3B9BC(a4, v108);
              if (v111 >= 0)
                v43 = v108;
              else
                v43 = *(_BYTE **)v108;
              *(_DWORD *)v131 = 136315138;
              *(_QWORD *)&v131[4] = v43;
              v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v42, 17, "Fence: kNotificationRegionStateRequest, failed to populateGeographicRegion, %s", v131);
              if (SHIBYTE(v111) < 0)
                operator delete(*(void **)v108);
              sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::onFenceNotification(int, const CLFenceManager_Type::Notification &, const CLFenceManager_Type::NotificationData &)", "%s\n", v44);
LABEL_121:
              if (v44 != buf)
LABEL_131:
                free(v44);
            }
          }
          break;
        case 9:
LABEL_138:
          if ((sub_1004E2530(a4, (uint64_t)v105) & 1) != 0)
          {
            *(_QWORD *)buf = *(_QWORD *)(a4 + 656);
            sub_10018A4CC((uint64_t)v105, "kCLConnectionMessageRegionWatchdogSinceLast", buf);
            *(_QWORD *)buf = sub_10011A5AC((uint64_t)v105);
            sub_1004E487C(a1, buf);
          }
          break;
        default:
          break;
      }
    }
    sub_10011A5A8(v104);
    sub_10011A5A8(v105);
    goto LABEL_153;
  }
  v11 = (unsigned __int8 *)a4;
  while (*v11 == *(unsigned __int8 *)v10)
  {
    ++v11;
    v10 = (void **)((char *)v10 + 1);
    if (!--v7)
      goto LABEL_17;
  }
LABEL_153:
  if ((char)v107 < 0)
    operator delete(__p[0]);
}

void sub_1004E43DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  sub_10011A5A8(&a28);
  sub_10011A5A8(&a18);
  sub_10011A5A8(&a20);
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1004E44E4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1B0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E4578(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1004E458C(uint64_t a1)
{
  return *(double *)(a1 + 96) <= 400.0
      && !*(_BYTE *)(a1 + 188)
      && *(_DWORD *)(a1 + 180) != 2
      && *(_QWORD *)(a1 + 232) == *(_QWORD *)(a1 + 224)
      && (*(_BYTE *)(a1 + 160) & 0x20) == 0;
}

void sub_1004E45DC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1B8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E4670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E4684(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1C0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E4718(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E472C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1C8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E47C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E47D4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1D0, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E4868(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E487C(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10213F1D8, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E4910(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E4924(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  void *v8;
  unint64_t v9;
  const void **v10;
  void **v11;
  unsigned __int8 *v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  const void **v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  _BYTE v56[16];
  void *__p[2];
  unsigned __int8 v58;
  int v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  _BYTE buf[12];
  __int16 v64;
  uint64_t v65;

  sub_1015A2E04(__p, (char *)objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "legacyClientKey"), "UTF8String"));
  v7 = *(unsigned __int8 *)(a4 + 63);
  if ((v7 & 0x80u) == 0)
    v8 = (void *)*(unsigned __int8 *)(a4 + 63);
  else
    v8 = *(void **)(a4 + 48);
  v9 = v58;
  if ((v58 & 0x80u) != 0)
    v9 = (unint64_t)__p[1];
  if (v8 != (void *)v9)
    goto LABEL_97;
  v10 = (const void **)(a4 + 40);
  if ((v58 & 0x80u) == 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*v10, v11, *(_QWORD *)(a4 + 48)))
      goto LABEL_97;
LABEL_17:
    sub_100119F3C(v56);
    if ((sub_100B0954C(a4, (uint64_t)v56) & 1) == 0 || (*(_BYTE *)(a4 + 113) & 1) != 0)
      goto LABEL_96;
    v13 = *a3;
    if (*a3 == 3)
    {
      if (!*(_DWORD *)(a4 + 120))
      {
        v24 = *(_DWORD *)(a4 + 168);
        if (v24 == 2)
          v25 = 1;
        else
          v25 = 2 * (v24 == 4);
        *(_DWORD *)buf = v25;
        sub_10011B4E4((uint64_t)v56, "kCLConnectionMessageStatusKey", buf);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v26 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v27 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0)
            v28 = a4 + 40;
          else
            v28 = *(_QWORD *)(a4 + 40);
          if (*(char *)(a4 + 111) < 0)
            v27 = *(_QWORD *)(a4 + 88);
          *(_DWORD *)buf = 136446467;
          *(_QWORD *)&buf[4] = v28;
          v64 = 2081;
          v65 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionState for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          v50 = *(_QWORD *)(a4 + 88);
          v49 = a4 + 88;
          v48 = v50;
          if (*(char *)(v49 - 25) >= 0)
            v51 = v10;
          else
            v51 = *(const void ***)(v49 - 48);
          if (*(char *)(v49 + 23) >= 0)
            v48 = v49;
          v59 = 136446467;
          v60 = (uint64_t)v51;
          v61 = 2081;
          v62 = v48;
          v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "@iB: Sending kCLConnectionMessageRegionState for region,'%{public}s/%{private}s'.", &v59, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v52);
          if (v52 != buf)
            free(v52);
        }
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v56);
        sub_1004E44E4(a1, buf);
        goto LABEL_96;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
      v21 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0)
          v23 = a4 + 40;
        else
          v23 = *(_QWORD *)(a4 + 40);
        if (*(char *)(a4 + 111) < 0)
          v22 = *(_QWORD *)(a4 + 88);
        *(_DWORD *)buf = 136446467;
        *(_QWORD *)&buf[4] = v23;
        v64 = 2081;
        v65 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v40 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0)
          v41 = a4 + 40;
        else
          v41 = *(_QWORD *)(a4 + 40);
        if (*(char *)(a4 + 111) < 0)
          v40 = *(_QWORD *)(a4 + 88);
        v59 = 136446467;
        v60 = v41;
        v61 = 2081;
        v62 = v40;
        v42 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", &v59, 22);
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v42);
        if (v42 != buf)
          free(v42);
      }
      if (*(_DWORD *)(a4 + 120) == 1)
        *(_QWORD *)buf = 4;
      else
        *(_QWORD *)buf = 5;
    }
    else
    {
      if (v13 == 2)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v17 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v18 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0)
            v19 = a4 + 40;
          else
            v19 = *(_QWORD *)(a4 + 40);
          if (*(char *)(a4 + 111) < 0)
            v18 = *(_QWORD *)(a4 + 88);
          *(_DWORD *)buf = 136446467;
          *(_QWORD *)&buf[4] = v19;
          v64 = 2081;
          v65 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoring for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          v34 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0)
            v35 = a4 + 40;
          else
            v35 = *(_QWORD *)(a4 + 40);
          if (*(char *)(a4 + 111) < 0)
            v34 = *(_QWORD *)(a4 + 88);
          v59 = 136446467;
          v60 = v35;
          v61 = 2081;
          v62 = v34;
          v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "@iB: Sending kCLConnectionMessageRegionMonitoring for region,'%{public}s/%{private}s'.", &v59, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v36);
          if (v36 != buf)
            free(v36);
        }
        v20 = *(_DWORD *)(a4 + 168);
        if (v20 == 4)
        {
          *(_DWORD *)buf = 1;
          sub_10011B4E4((uint64_t)v56, "kCLConnectionMessageEventKey", buf);
        }
        else if (v20 == 2)
        {
          *(_DWORD *)buf = 0;
          sub_10011B4E4((uint64_t)v56, "kCLConnectionMessageEventKey", buf);
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          v32 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
          {
            v33 = *(_DWORD *)(a4 + 168);
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)&buf[4] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Unsupported region transition state,%{public}d will not be reported.", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_10213EF98);
            v53 = *(_DWORD *)(a4 + 168);
            v59 = 67240192;
            LODWORD(v60) = v53;
            LODWORD(v55) = 8;
            v54 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "Unsupported region transition state,%{public}d will not be reported.", &v59, v55);
            sub_100512490("Generic", 1, 0, 0, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v54);
            if (v54 != buf)
              free(v54);
          }
        }
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v56);
        sub_1004E45DC(a1, buf);
        goto LABEL_96;
      }
      if (v13)
      {
LABEL_96:
        sub_10011A5A8(v56);
        goto LABEL_97;
      }
      if (!*(_DWORD *)(a4 + 120))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v29 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v30 = a4 + 88;
          if (*(char *)(a4 + 63) >= 0)
            v31 = a4 + 40;
          else
            v31 = *(_QWORD *)(a4 + 40);
          if (*(char *)(a4 + 111) < 0)
            v30 = *(_QWORD *)(a4 + 88);
          *(_DWORD *)buf = 136446467;
          *(_QWORD *)&buf[4] = v31;
          v64 = 2081;
          v65 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%{public}s/%{private}s'.", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_10213EF98);
          v45 = *(_QWORD *)(a4 + 88);
          v44 = a4 + 88;
          v43 = v45;
          if (*(char *)(v44 - 25) >= 0)
            v46 = v10;
          else
            v46 = *(const void ***)(v44 - 48);
          if (*(char *)(v44 + 23) >= 0)
            v43 = v44;
          v59 = 136446467;
          v60 = (uint64_t)v46;
          v61 = 2081;
          v62 = v43;
          v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "@iB: Sending kCLConnectionMessageRegionMonitoringSetupCompleted for region,'%{public}s/%{private}s'.", &v59, 22);
          sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v47);
          if (v47 != buf)
            free(v47);
        }
        *(_QWORD *)buf = sub_10011A5AC((uint64_t)v56);
        sub_1004E472C(a1, buf);
        goto LABEL_96;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
      v14 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v15 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0)
          v16 = a4 + 40;
        else
          v16 = *(_QWORD *)(a4 + 40);
        if (*(char *)(a4 + 111) < 0)
          v15 = *(_QWORD *)(a4 + 88);
        *(_DWORD *)buf = 136446467;
        *(_QWORD *)&buf[4] = v16;
        v64 = 2081;
        v65 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_10213EF98);
        v37 = a4 + 88;
        if (*(char *)(a4 + 63) >= 0)
          v38 = a4 + 40;
        else
          v38 = *(_QWORD *)(a4 + 40);
        if (*(char *)(a4 + 111) < 0)
          v37 = *(_QWORD *)(a4 + 88);
        v59 = 136446467;
        v60 = v38;
        v61 = 2081;
        v62 = v37;
        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "@iB: Sending kCLConnectionMessageRegionMonitoringError for region,'%{public}s/%{private}s'.", &v59, 22);
        sub_100512490("Generic", 1, 0, 2, "void CLFenceSubscription::onBTLEFenceNotification(int, const CLBTLEFenceManager_Type::Notification &, const CLBTLEFenceManager_Type::NotificationData &)", "%s\n", v39);
        if (v39 != buf)
          free(v39);
      }
      if (*(_DWORD *)(a4 + 120) == 1)
        *(_QWORD *)buf = 4;
      else
        *(_QWORD *)buf = 5;
    }
    sub_1005282E8((uint64_t)v56, "kCLConnectionMessageErrorKey", buf);
    *(_QWORD *)buf = sub_10011A5AC((uint64_t)v56);
    sub_1004E4684(a1, buf);
    goto LABEL_96;
  }
  if (!*(_BYTE *)(a4 + 63))
    goto LABEL_17;
  v12 = (unsigned __int8 *)(a4 + 40);
  while (*v12 == *(unsigned __int8 *)v11)
  {
    ++v12;
    v11 = (void **)((char *)v11 + 1);
    if (!--v7)
      goto LABEL_17;
  }
LABEL_97:
  if ((char)v58 < 0)
    operator delete(__p[0]);
}

void sub_1004E55B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_10011A5A8(&a12);
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1004E5634(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1004E5660(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;

  v3 = (_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(_QWORD *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (_QWORD *)(a1 + 24);
  }
  *v3 = 0;
  return a1;
}

void sub_1004E56C4(id a1)
{
  qword_1022A01C8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Client");
}

void sub_1004E56F0(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_1004E571C(id a1)
{
  qword_1022A0068 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeoFencing");
}

char *sub_1004E5748(char *__dst, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  id v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4(__dst + 24, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)__dst + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4(__dst + 48, *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *((_QWORD *)__dst + 8) = *((_QWORD *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  v7 = *(__int128 *)((char *)a2 + 72);
  v8 = *(__int128 *)((char *)a2 + 88);
  v9 = *(__int128 *)((char *)a2 + 104);
  *(_OWORD *)(__dst + 120) = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(__dst + 104) = v9;
  *(_OWORD *)(__dst + 88) = v8;
  *(_OWORD *)(__dst + 72) = v7;
  v10 = *(__int128 *)((char *)a2 + 136);
  v11 = *(__int128 *)((char *)a2 + 152);
  v12 = *(__int128 *)((char *)a2 + 168);
  *(_QWORD *)(__dst + 181) = *(_QWORD *)((char *)a2 + 181);
  *(_OWORD *)(__dst + 168) = v12;
  *(_OWORD *)(__dst + 152) = v11;
  *(_OWORD *)(__dst + 136) = v10;
  if (*((char *)a2 + 215) < 0)
  {
    sub_100115CE4(__dst + 192, *((void **)a2 + 24), *((_QWORD *)a2 + 25));
  }
  else
  {
    v13 = a2[12];
    *((_QWORD *)__dst + 26) = *((_QWORD *)a2 + 26);
    *((_OWORD *)__dst + 12) = v13;
  }
  *((_QWORD *)__dst + 27) = 0;
  v14 = *((id *)a2 + 27);
  *((_QWORD *)__dst + 28) = 0;
  *((_QWORD *)__dst + 27) = v14;
  *((_QWORD *)__dst + 29) = 0;
  *((_QWORD *)__dst + 30) = 0;
  sub_1002AE804((_QWORD *)__dst + 28, *((const void **)a2 + 28), *((_QWORD *)a2 + 29), (uint64_t)(*((_QWORD *)a2 + 29) - *((_QWORD *)a2 + 28)) >> 4);
  return __dst;
}

void sub_1004E58A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

id *sub_1004E591C(id *a1)
{

  return a1;
}

uint64_t sub_1004E5948(uint64_t a1, __int128 *a2, __int128 *a3, __int128 *a4)
{
  __int128 v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;

  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = off_10213F008;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 40) = v7;
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v8 = *a4;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 64) = v8;
  }
  v9 = (_BYTE *)(a1 + 88);
  if (*((char *)a3 + 23) < 0)
  {
    sub_100115CE4(v9, *(void **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v10 = *a3;
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v9 = v10;
  }
  *(_DWORD *)(a1 + 112) = 0;
  return a1;
}

void sub_1004E5A28(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  *(_QWORD *)v1 = off_10213F058;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v4);
  _Unwind_Resume(exception_object);
}

void sub_1004E5A84(uint64_t a1)
{
  sub_100114750(a1);
  operator delete();
}

uint64_t sub_1004E5AA8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void **v20;
  uint64_t v21;
  void *__p[2];
  unsigned __int8 v24;
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;

  sub_1004E5E40((uint64_t)&v25);
  v4 = sub_100263F7C(&v25, (uint64_t)"[", 1);
  v5 = *(char *)(a1 + 87);
  if (v5 >= 0)
    v6 = a1 + 64;
  else
    v6 = *(_QWORD *)(a1 + 64);
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a1 + 87);
  else
    v7 = *(_QWORD *)(a1 + 72);
  v8 = sub_100263F7C(v4, v6, v7);
  v9 = sub_100263F7C(v8, (uint64_t)"]/", 2);
  v10 = *(char *)(a1 + 63);
  if (v10 >= 0)
    v11 = a1 + 40;
  else
    v11 = *(_QWORD *)(a1 + 40);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 63);
  else
    v12 = *(_QWORD *)(a1 + 48);
  v13 = sub_100263F7C(v9, v11, v12);
  v14 = sub_100263F7C(v13, (uint64_t)"/", 1);
  v15 = *(char *)(a1 + 111);
  if (v15 >= 0)
    v16 = a1 + 88;
  else
    v16 = *(_QWORD *)(a1 + 88);
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a1 + 111);
  else
    v17 = *(_QWORD *)(a1 + 96);
  v18 = sub_100263F7C(v14, v16, v17);
  v19 = sub_100263F7C(v18, (uint64_t)"/", 1);
  sub_1004E5D0C(a1, __p);
  if ((v24 & 0x80u) == 0)
    v20 = __p;
  else
    v20 = (void **)__p[0];
  if ((v24 & 0x80u) == 0)
    v21 = v24;
  else
    v21 = (uint64_t)__p[1];
  sub_100263F7C(v19, (uint64_t)v20, v21);
  if ((char)v24 < 0)
    operator delete(__p[0]);
  std::stringbuf::str(a2, v26);
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_1004E5C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  sub_1004E5F2C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E5C7C(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1004E5CBC(uint64_t a1)
{
  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  operator delete();
}

uint64_t sub_1004E5D0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  _QWORD v11[10];
  char v12;
  uint64_t v13;

  sub_1004E5E40((uint64_t)&v10);
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v4 = *(char *)(a1 + 31);
    v5 = v4 >= 0 ? a1 + 8 : *(_QWORD *)(a1 + 8);
    v6 = v4 >= 0 ? *(unsigned __int8 *)(a1 + 31) : *(_QWORD *)(a1 + 16);
    sub_100263F7C(&v10, v5, v6);
    if ((*(_BYTE *)(a1 + 36) & 2) != 0)
    {
      v7 = sub_100263F7C(&v10, (uint64_t)".", 1);
      std::ostream::operator<<(v7, *(unsigned __int16 *)(a1 + 32));
      if ((*(_BYTE *)(a1 + 36) & 4) != 0)
      {
        v8 = sub_100263F7C(&v10, (uint64_t)".", 1);
        std::ostream::operator<<(v8, *(unsigned __int16 *)(a1 + 34));
      }
    }
  }
  std::stringbuf::str(a2, v11);
  if (v12 < 0)
    operator delete((void *)v11[8]);
  std::streambuf::~streambuf(v11);
  return std::ios::~ios(&v13);
}

void sub_1004E5E2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E5F2C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E5E40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;

  v2 = a1 + 8;
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 8));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf(v2);
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1004E5F04(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::ostream::~ostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004E5F2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v3 = a1 + 8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf(v3);
  std::ios::~ios(a1 + 112);
  return a1;
}

uint64_t sub_1004E5FB0(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;

  *(_QWORD *)a1 = off_10213F058;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 8), *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)a1 = off_10213F008;
  if (*(char *)(a2 + 63) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 40), *(void **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 64), *(void **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v6;
  }
  v7 = (_BYTE *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_100115CE4(v7, *(void **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)v7 = v8;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  return a1;
}

void sub_1004E60D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  uint64_t v5;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  *(_QWORD *)v1 = v5 + 16;
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1004E6124()
{
  operator delete();
}

__n128 sub_1004E6138(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10213F080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1004E6174(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10213F080;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1004E6198(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  sub_1004E61E8(a1 + 8, a2, a3);
}

uint64_t sub_1004E61A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004E61DC()
{
}

void sub_1004E61E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  void (*v5)(_QWORD *, uint64_t *);
  uint64_t v6;
  _QWORD *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = *a3;
  v3 = (std::__shared_weak_count *)a3[1];
  v15 = v3;
  *a3 = 0;
  a3[1] = 0;
  v5 = *(void (**)(_QWORD *, uint64_t *))a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (_QWORD *)(a2 + (v6 >> 1));
  if ((v6 & 1) != 0)
    v5 = *(void (**)(_QWORD *, uint64_t *))(*v7 + v5);
  v16 = v4;
  v17 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v5(v7, &v16);
  v10 = v17;
  if (v17)
  {
    v11 = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v15)
  {
    v13 = (unint64_t *)&v15->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1004E62BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_1004E62D8(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = off_10213F110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1004E6314(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = off_10213F110;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1004E6338(uint64_t a1, uint64_t a2, __int128 *a3)
{
  sub_1004E6388(a1 + 8, a2, a3);
}

uint64_t sub_1004E6340(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1004E637C()
{
}

void sub_1004E6388(uint64_t a1, uint64_t a2, __int128 *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  sub_1004E640C(a1, a2, (CLConnectionMessage **)&v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1004E63F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    sub_1018FBC0C(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E640C(uint64_t a1, uint64_t a2, CLConnectionMessage **a3)
{
  NSSet *v6;
  const __CFDictionary *DictionaryOfClasses;
  void (*v8)(_QWORD *, BOOL, uint8_t *);
  uint64_t v9;
  _QWORD *v10;
  NSObject *v11;
  NSObject *v12;
  BOOL v14;
  uint8_t v15[16];
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;

  v6 = (NSSet *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  DictionaryOfClasses = (const __CFDictionary *)CLConnectionMessage::getDictionaryOfClasses(*a3, v6);
  sub_1001C1D6C((int)v15, DictionaryOfClasses);
  v14 = 0;
  if ((sub_1001E4874((uint64_t)v15, "kCLConnectionMessageSubscribeKey", &v14) & 1) != 0)
  {
    v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))a1;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (_QWORD *)(a2 + (v9 >> 1));
    if ((v9 & 1) != 0)
      v8 = *(void (**)(_QWORD *, BOOL, uint8_t *))(*v10 + v8);
    v8(v10, v14, v15);
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_10213EF98);
    v11 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_10213EF98);
    }
    v12 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      *(_DWORD *)buf = 68289026;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Couldn't get value for kCLConnectionMessageSubscribeKey key", "{\"msg%{public}.0s\":\"Couldn't get value for kCLConnectionMessageSubscribeKey key\"}", buf, 0x12u);
    }
  }
  return sub_10011A5A8(v15);
}

void sub_1004E65F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004E6610(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    v5 = 56 * a3;
    do
    {
      sub_1004E6688(a1, a2, (__int128 *)a2);
      a2 += 56;
      v5 -= 56;
    }
    while (v5);
  }
  return a1;
}

void sub_1004E6674(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E6A98(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1004E6688(uint64_t a1, unsigned __int8 *a2, __int128 *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD v25[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = sub_10025A024(a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v3 = v8;
      if (v8 >= v10)
        v3 = v8 % v10;
    }
    else
    {
      v3 = (v10 - 1) & v8;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v9)
        {
          if ((sub_10025A4CC(a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v15 >= v10)
              v15 %= v10;
          }
          else
          {
            v15 &= v10 - 1;
          }
          if (v15 != v3)
            break;
        }
      }
    }
  }
  sub_1004E6908(a1, v9, a3, (uint64_t)v25);
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v17 = *(float *)(a1 + 32);
  if (!v10 || (float)(v17 * (float)v10) < v16)
  {
    v18 = 1;
    if (v10 >= 3)
      v18 = (v10 & (v10 - 1)) != 0;
    v19 = v18 | (2 * v10);
    v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20)
      v21 = v20;
    else
      v21 = v19;
    sub_10012E444(a1, v21);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v3 = v9 % v10;
      else
        v3 = v9;
    }
    else
    {
      v3 = (v10 - 1) & v9;
    }
  }
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v22)
  {
    *(_QWORD *)v25[0] = *v22;
    *v22 = v25[0];
  }
  else
  {
    *(_QWORD *)v25[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v25[0])
    {
      v23 = *(_QWORD *)(*(_QWORD *)v25[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v23 >= v10)
          v23 %= v10;
      }
      else
      {
        v23 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = v25[0];
    }
  }
  i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v7;
  sub_1004E69F0((uint64_t)v25, 0);
  return i;
}

void sub_1004E68F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004E69F0((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004E6908@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *result;

  v7 = a1 + 16;
  v8 = operator new(0x48uLL);
  *(_QWORD *)a4 = v8;
  *(_QWORD *)(a4 + 8) = v7;
  *(_BYTE *)(a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  result = sub_1004E697C(v8 + 2, a3);
  *(_BYTE *)(a4 + 16) = 1;
  return result;
}

void sub_1004E6964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004E69F0(v1, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004E697C(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;

  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  sub_100270E34((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_1004E69D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1004E69F0(uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      sub_1004E6A34((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

void sub_1004E6A34(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (_QWORD *)(a1 + 24);
  v3 = *(_QWORD **)(a1 + 48);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1004E6A98(uint64_t a1)
{
  void *v2;

  sub_1004E6AD0(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_1004E6AD0(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_1004E6A34((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

char *sub_1004E6B0C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1004E5748(a2, (__int128 *)(a1 + 32));
}

char *sub_1004E6B18(uint64_t a1, uint64_t a2)
{
  return sub_1004E5748((char *)(a1 + 32), (__int128 *)(a2 + 32));
}

void sub_1004E6B24(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 256);
  if (v2)
  {
    *(_QWORD *)(a1 + 264) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

_QWORD *sub_1004E6BA4@<X0>(char **a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x70uLL);
  result = sub_1004E6C04(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1004E6BF0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004E6C04(_QWORD *a1, char **a2, _QWORD *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = off_10213D5E0;
  a1[1] = 0;
  sub_1004E6C68((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1004E6C54(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004E6C68(uint64_t a1, uint64_t a2, char **a3, _QWORD *a4)
{
  void *__p[2];
  char v7;

  sub_1015A2E04(__p, *a3);
  CLConnectionMessage::CLConnectionMessage(a2, __p, *a4);
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1004E6CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004E6D7C(id a1)
{
  qword_1023014E0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLHRRecoveryServiceSilo"));
}

void sub_1004E6E30(id a1)
{
  sub_100197040();
  if (sub_100195F08())
    byte_1023014F0 = 1;
}

void sub_1004E7518(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_100261F44((uint64_t)va);
  operator delete();
}

void sub_1004E756C()
{
  operator new();
}

void sub_1004E76E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  operator delete();
}

id sub_1004E772C(void *__src, void *a2)
{
  _BYTE __dst[280];

  memcpy(__dst, __src, sizeof(__dst));
  return objc_msgSend(a2, "onHRRecoveryEstimate:", __dst);
}

id sub_1004E7774(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onCatherineNotification:data:", a2, a3);
}

id sub_1004E7784(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return objc_msgSend(a4, "onNatalimetryNotification:data:", a2, a3);
}

void sub_1004E7ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004E7AF0(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1004E7DA4(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1004E8058(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::setExpirationRule(CFTimeInterval) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_1004E830C(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_10229FF60 != -1)
    dispatch_once(&qword_10229FF60, &stru_10213F268);
  v2 = qword_10229FF68;
  if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Aggregating HRRecovery db records", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10213F268);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "Aggregating HRRecovery db records", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLHRRecoveryService setUpAggregationOnTimer]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  sub_1004E84D8(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24));
  sub_1004E8A4C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
  return sub_1004E8FC0(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 72));
}

uint64_t sub_1004E84D8(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1004EC2A8(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1004EC2A8(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1004EC2A8(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1004E8A4C(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1004EC4D0(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1004EC4D0(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1004EC4D0(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1004E8FC0(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10213F378);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1004EC6CC(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10213F378);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1004EC6CC(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10213F378);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1004EC6CC(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::aggregateRecords() [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

void sub_1004EA100(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10213F268);
    v3 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HRRecovery successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10213F268);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 0, "HRRecovery successfully pushed to HKHealthStore", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "-[CLHRRecoveryService storeHRRecoveryToHealthKit:]_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FF60 != -1)
      dispatch_once(&qword_10229FF60, &stru_10213F268);
    v8 = qword_10229FF68;
    if (os_log_type_enabled((os_log_t)qword_10229FF68, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, HRRecovery, saveObjects failed on, %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF60 != -1)
        dispatch_once(&qword_10229FF60, &stru_10213F268);
      v11 = 138543362;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF68, 16, "HKHealthStore, HRRecovery, saveObjects failed on, %{public}@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "-[CLHRRecoveryService storeHRRecoveryToHealthKit:]_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_1004EA4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004EA84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  sub_100261F44((uint64_t)&a57);
  _Unwind_Resume(a1);
}

void sub_1004EB4C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102301558);
  _Unwind_Resume(a1);
}

NSDictionary *sub_1004EB508(uint64_t a1)
{
  float v2;
  unint64_t v3;
  unint64_t v4;
  float v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  float v31;
  unint64_t v32;
  unint64_t v33;
  NSDictionary *v34;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  void *v39;
  _BYTE *v40;
  uint64_t v41;
  void *v42;
  _BYTE *v43;
  uint64_t v44;
  _QWORD v45[40];
  _QWORD v46[40];

  v45[0] = CFSTR("age_bin");
  v2 = *(float *)(*(_QWORD *)(a1 + 32) + 100);
  v43 = 0;
  v44 = 0;
  v42 = 0;
  sub_10027205C(&v42, (const void *)qword_102301520, unk_102301528, (unk_102301528 - qword_102301520) >> 2);
  if (v43 == v42)
  {
    v3 = 0;
  }
  else
  {
    v3 = 0;
    v4 = (v43 - (_BYTE *)v42) >> 2;
    if (v4 <= 1)
      v4 = 1;
    while (*((float *)v42 + v3) < v2)
    {
      if (v4 == ++v3)
      {
        v3 = v4;
        break;
      }
    }
  }
  v46[0] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v3);
  v45[1] = CFSTR("gender");
  v46[1] = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 96));
  v45[2] = CFSTR("useBetaBlocker");
  v46[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 108));
  v45[3] = CFSTR("userBMI_bin");
  v5 = *(float *)(*(_QWORD *)(a1 + 32) + 104);
  v40 = 0;
  v41 = 0;
  v39 = 0;
  sub_10027205C(&v39, (const void *)qword_102301540, unk_102301548, (unk_102301548 - qword_102301540) >> 2);
  if (v40 == v39)
  {
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = (v40 - (_BYTE *)v39) >> 2;
    if (v7 <= 1)
      v7 = 1;
    while (*((float *)v39 + v6) < v5)
    {
      if (v7 == ++v6)
      {
        v6 = v7;
        break;
      }
    }
  }
  v46[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v45[4] = CFSTR("restingHR");
  LODWORD(v8) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 220);
  v46[4] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v8);
  v45[5] = CFSTR("hrmax");
  LODWORD(v9) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 224);
  v46[5] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v9);
  v45[6] = CFSTR("HRRecoveryEstimateStatus");
  v46[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 112));
  v45[7] = CFSTR("diffTimeRecoveryOnsetWorkout");
  v46[7] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 120));
  v45[8] = CFSTR("diffTimeTDropWorkoutEnd");
  v46[8] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 128));
  v45[9] = CFSTR("hrRecovery");
  v46[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v45[10] = CFSTR("hrRecoverySession");
  v46[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v45[11] = CFSTR("peakHR");
  LODWORD(v10) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 144);
  v46[11] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v10);
  v45[12] = CFSTR("steadyStateHR");
  LODWORD(v11) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 148);
  v46[12] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v11);
  v45[13] = CFSTR("hrMinAdjusted");
  LODWORD(v12) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 152);
  v46[13] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v12);
  v45[14] = CFSTR("observedHRRecovery");
  LODWORD(v13) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 156);
  v46[14] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v13);
  v45[15] = CFSTR("recoveryLoad");
  LODWORD(v14) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 160);
  v46[15] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v14);
  v45[16] = CFSTR("maxRecoveryHR");
  LODWORD(v15) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 164);
  v46[16] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v15);
  v45[17] = CFSTR("minRecoveryHR");
  LODWORD(v16) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
  v46[17] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v16);
  v45[18] = CFSTR("recoveryMetsMean");
  LODWORD(v17) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 172);
  v46[18] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v17);
  v45[19] = CFSTR("recoveryMetsStdDev");
  LODWORD(v18) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 176);
  v46[19] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v18);
  v45[20] = CFSTR("biasAdjustment");
  LODWORD(v19) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 180);
  v46[20] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v19);
  v45[21] = CFSTR("isOtherwiseEligibleForLongitudinal");
  v46[21] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 184));
  v45[22] = CFSTR("hrRecoveryReference");
  LODWORD(v20) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 188);
  v46[22] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v20);
  v45[23] = CFSTR("hrRecoveryReferencePeak");
  LODWORD(v21) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 192);
  v46[23] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v21);
  v45[24] = CFSTR("hrOneMinPostRecovery");
  LODWORD(v22) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 196);
  v46[24] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v22);
  v45[25] = CFSTR("hrOneMinExponential");
  LODWORD(v23) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 200);
  v46[25] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v23);
  v45[26] = CFSTR("isEligibleForHK");
  v46[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 204));
  v45[27] = CFSTR("minHRAfterWorkoutEnd");
  LODWORD(v24) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 208);
  v46[27] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v24);
  v45[28] = CFSTR("maxHRAfterWorkoutEnd");
  LODWORD(v25) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 212);
  v46[28] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v25);
  v45[29] = CFSTR("oneMinusFHRAfterWorkoutEnd");
  LODWORD(v26) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 216);
  v46[29] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v26);
  v45[30] = CFSTR("peakHrOneMinusFhr");
  LODWORD(v27) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 228);
  v46[30] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v27);
  v45[31] = CFSTR("vo2MaxEstimationStatus");
  v46[31] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 232));
  v45[32] = CFSTR("VO2MaxValue");
  v46[32] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 236));
  v45[33] = CFSTR("lambda");
  LODWORD(v28) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 240);
  v46[33] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v28);
  v45[34] = CFSTR("mse");
  LODWORD(v29) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 244);
  v46[34] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v29);
  v45[35] = CFSTR("evs");
  LODWORD(v30) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 248);
  v46[35] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v30);
  v45[36] = CFSTR("sessionType");
  v46[36] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 252));
  v45[37] = CFSTR("workoutType");
  v46[37] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 256));
  v45[38] = CFSTR("sessionDuration_bin");
  v31 = *(float *)(*(_QWORD *)(a1 + 32) + 264);
  v37 = 0;
  v38 = 0;
  __p = 0;
  sub_10027205C(&__p, (const void *)qword_102301500, unk_102301508, (unk_102301508 - qword_102301500) >> 2);
  if (v37 == __p)
  {
    v32 = 0;
  }
  else
  {
    v32 = 0;
    v33 = (v37 - (_BYTE *)__p) >> 2;
    if (v33 <= 1)
      v33 = 1;
    while (*((float *)__p + v32) < v31)
    {
      if (v33 == ++v32)
      {
        v32 = v33;
        break;
      }
    }
  }
  v46[38] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v32);
  v45[39] = CFSTR("LyonAlgVersion");
  v46[39] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 268));
  v34 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v46, v45, 40);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v42)
  {
    v43 = v42;
    operator delete(v42);
  }
  return v34;
}

void sub_1004EBCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16)
{
  _Unwind_Resume(exception_object);
}

void sub_1004EBF00(id a1)
{
  qword_10229FF68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HRRecovery");
}

_QWORD *sub_1004EBF2C@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x170uLL);
  result = sub_1004EBF84(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004EBF70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004EBF84(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F298;
  sub_101350F6C(a1 + 3, *a2);
  return a1;
}

void sub_1004EBFC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004EBFD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F298;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004EBFE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F298;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004EC01C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1004EC02C@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x190uLL);
  result = sub_1004EC084(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004EC070(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004EC084(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F2E8;
  sub_10103F618(a1 + 3, *a2);
  return a1;
}

void sub_1004EC0C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004EC0D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F2E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004EC0E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F2E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004EC11C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_1004EC12C@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1F0uLL);
  result = sub_1004EC184(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004EC170(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004EC184(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F338;
  sub_100B0DE2C(a1 + 3, *a2);
  return a1;
}

void sub_1004EC1C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004EC1D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F338;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004EC1E8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F338;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004EC21C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_1004EC22C(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100261F44(a2 + 80);
    sub_100261F44(a2 + 64);
    sub_100261F44(a2 + 48);
    operator delete();
  }
}

void sub_1004EC27C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1004EC2A8(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F398);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F398);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoveryInputHR, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoveryInputHR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_1004EC4A4(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_1004EC4D0(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F398);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F398);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoveryInputWR, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoveryInputWR, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

uint64_t sub_1004EC6CC(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F398);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F398);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<HRRecoverySession, CLActivityDB::ClassBDataProtectionPolicy>::estimateRecordsNeeded(const CLAggregationRules &) [T = HRRecoverySession, DataProtectionPolicy = CLActivityDB::ClassBDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_1004EC96C(id a1)
{
  qword_102301578 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLActivityLoggerAdapterSilo"));
}

uint64_t sub_1004ECA24(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004ECB50;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301588 != -1)
    dispatch_once(&qword_102301588, block);
  return qword_102310890;
}

void sub_1004ECB50()
{
  operator new();
}

void sub_1004ECB98()
{
  operator delete();
}

void sub_1004ECBBC(_QWORD *a1, uint64_t a2)
{
  std::string *v3;
  NSString *v4;
  std::string __p[68];

  *a1 = a2;
  sub_100584F4C(0, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = __p;
  else
    v3 = (std::string *)__p[0].__r_.__value_.__r.__words[0];
  v4 = -[NSString stringByAppendingPathComponent:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3), "stringByAppendingPathComponent:", CFSTR("activityLog.pb"));
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  a1[1] = v4;
  a1[2] = 0;
  sub_1004D73B4(a1 + 3, v4);
}

void sub_1004ECEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  sub_10112C570(v20);
  sub_1004D7BAC(v19);
  v22 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v18 + 16) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  _Unwind_Resume(a1);
}

void sub_1004ECF1C(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id *v23;

  CLProfilingIdentify("CLActivityLogger::onFitnessDataCollectionSettingChangedNotification");
  objc_msgSend(objc_msgSend(*a2, "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213F3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLActivityLogger::onFitnessDataCollectionSettingChangedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213F3F8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLActivityLogger::onFitnessDataCollectionSettingChangedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*a2, "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1004EDBAC;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_1004ED11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1004ED13C(uint64_t a1, int *a2, unsigned int *a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLActivityLogger::onMotionStateMediatorNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10213F3F8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLActivityLogger::onMotionStateMediatorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10213F3F8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLActivityLogger::onMotionStateMediatorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1004ED3B4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1004ED2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004ED314(uint64_t a1)
{
  __CFNotificationCenter *DarwinNotifyCenter;
  __CFNotificationCenter *v3;
  uint64_t v4;
  uint64_t v5;

  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(DarwinNotifyCenter, (const void *)a1, CFSTR("NanoLifestyleEnableFitnessDataCollectionSettingDidChangeNotification"), 0);
  v3 = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterRemoveObserver(v3, (const void *)a1, CFSTR("com.apple.managedconfiguration.defaultsdidchange"), 0);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);

  *(_QWORD *)(a1 + 8) = 0;
  sub_10112C570(a1 + 72);
  sub_1004D7BAC(a1 + 24);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

void sub_1004ED3B4(uint64_t a1, uint64_t a2, int *a3, unsigned int *a4)
{
  NSObject *v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  ALActivityLog *v16;
  NSObject *v17;
  id v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  uint8_t *v31;
  int v32;
  uint64_t v33;
  int v34;
  double v35;
  __int16 v36;
  uint64_t v37;
  uint8_t buf[4];
  _BYTE v39[10];
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;

  objc_msgSend(*(id *)a1, "silo");
  if (*a3 == 1)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F3D8);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v8 = *a4;
      v9 = a4[2];
      v10 = a4[3];
      v11 = a4[5];
      v12 = a4[6];
      v13 = a4[15];
      v14 = *((_QWORD *)a4 + 8);
      v15 = *((_QWORD *)a4 + 11);
      *(_DWORD *)buf = 67110912;
      *(_DWORD *)v39 = v8;
      *(_WORD *)&v39[4] = 1024;
      *(_DWORD *)&v39[6] = v9;
      v40 = 1024;
      v41 = v10;
      v42 = 1024;
      v43 = v11;
      v44 = 1024;
      v45 = v12;
      v46 = 1024;
      v47 = v13;
      v48 = 2048;
      v49 = v14;
      v50 = 2048;
      v51 = v15;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}", buf, 0x3Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F3D8);
      v23 = a4[2];
      v24 = a4[3];
      v25 = a4[5];
      v26 = a4[15];
      v27 = *((double *)a4 + 8);
      v28 = *((_QWORD *)a4 + 11);
      WORD2(v33) = 1024;
      HIWORD(v33) = v23;
      LOWORD(v34) = HIWORD(v25);
      HIWORD(v34) = 1024;
      LOWORD(v35) = 1024;
      *(_DWORD *)((char *)&v35 + 2) = v26;
      HIWORD(v35) = 2048;
      v36 = 2048;
      v37 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger, kNotificationActivityOverride,overrideAction,%d,activity{State,%d,Confidence,%d,MountedState,%d,MountedConfidence,%d,exitState,%d,estExitTime,%f,startTime,%f}", &v32, 58, 67110912, HIDWORD(v33), v24, v34, v35, v27);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v16 = objc_alloc_init(ALActivityLog);
    -[ALActivityLog setTimestamp:](v16, "setTimestamp:", CFAbsoluteTimeGetCurrent());
    -[ALActivityLog setActivityOverrideMsg:](v16, "setActivityOverrideMsg:", objc_alloc_init(ALActivityOverrideMsg));
    -[ALActivityOverrideMsg setOverrideAction:](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "setOverrideAction:", *a4);
    -[ALActivityOverrideMsg setActivity:](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "setActivity:", objc_alloc_init(ALCLMotionActivity));
    -[ALCLMotionActivity setType:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setType:", a4[2]);
    -[ALCLMotionActivity setConfidence:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setConfidence:", a4[3]);
    -[ALCLMotionActivity setMountedState:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setMountedState:", a4[5]);
    -[ALCLMotionActivity setMountedConfidence:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setMountedConfidence:", a4[6]);
    -[ALCLMotionActivity setExitState:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setExitState:", a4[15]);
    -[ALCLMotionActivity setEstExitTime:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setEstExitTime:", *((double *)a4 + 8));
    -[ALCLMotionActivity setStartTime:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setStartTime:", *((double *)a4 + 11));
    -[ALCLMotionActivity setTimestamp:](-[ALActivityOverrideMsg activity](-[ALActivityLog activityOverrideMsg](v16, "activityOverrideMsg"), "activity"), "setTimestamp:", *((double *)a4 + 6));
    objc_msgSend(*(id *)a1, "silo");
    if (*(_BYTE *)(a1 + 72))
      sub_1004D76E8((_QWORD *)(a1 + 24), v16);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F3D8);
    v17 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      v18 = objc_msgSend(-[ALActivityLog formattedText](v16, "formattedText"), "UTF8String");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)v39 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "CLActivityLogger,log kNotificationActivityOverride:%s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F3D8);
      v19 = qword_10229FC78;
      objc_msgSend(-[ALActivityLog formattedText](v16, "formattedText"), "UTF8String");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "CLActivityLogger,log kNotificationActivityOverride:%s", &v32);
LABEL_30:
      v31 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLActivityLogger::onMotionStateMediatorNotification(int, const CLMotionStateMediator_Type::Notification &, const CLMotionStateMediator_Type::NotificationData &)", "%s\n", v20);
      if (v31 != buf)
        free(v31);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F3D8);
    v21 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v22 = *a3;
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)v39 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#Warning CLActivityLogger, Unhandled notification %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_10213F3D8);
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning CLActivityLogger, Unhandled notification %d", &v32);
      goto LABEL_30;
    }
  }
}

void sub_1004ED9E8(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10213F3D8);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLActivityLogger, dataCollection setting changed", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10213F3D8);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "CLActivityLogger, dataCollection setting changed", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLActivityLogger::onFitnessDataCollectionSettingChangedNotification(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10112A7A4(a1 + 72);
}

void sub_1004EDB80(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1004EDBAC(uint64_t a1)
{
  sub_1004ED9E8(*(_QWORD *)(a1 + 32));
}

void sub_1004EDBB4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_1004EDBE0()
{
  sub_1015A2E04(qword_102301560, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102301560, (void *)&_mh_execute_header);
}

void sub_1004EDCC8(id a1)
{
  qword_1023015A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLHarvestControllerSilo"));
}

void sub_1004EDD38(id a1)
{
  NSObject *v1;
  const char *v2;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  uint8_t *v7;
  uint64_t v8;
  _QWORD v9[2];
  uint8_t buf[4];
  int v11;

  if (!sub_10075BF40())
    byte_1023015B8 = 1;
  if (sub_10075F4B4())
  {
    byte_1023015B8 = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    v1 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Harvest is not supported in multiuser mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "Harvest is not supported in multiuser mode", v9, 2, v9[0]);
LABEL_31:
      v7 = (uint8_t *)v2;
      sub_100512490("Generic", 1, 0, 2, "+[CLHarvesterService isSupported]_block_invoke", "%s\n", v2);
      if (v7 != buf)
        free(v7);
    }
  }
  else if (sub_100761E88())
  {
    byte_1023015B8 = 0;
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Harvest is not supported in diagnostics mode", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
      LOWORD(v9[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "Harvest is not supported in diagnostics mode", v9, 2, v9[0]);
      goto LABEL_31;
    }
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v11 = byte_1023015B8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLHarvesterService is supported, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    LODWORD(v9[0]) = 67240192;
    HIDWORD(v9[0]) = byte_1023015B8;
    LODWORD(v8) = 8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "CLHarvesterService is supported, %{public}d", v9, v8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "+[CLHarvesterService isSupported]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_1004EE228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004EE4A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1004F0558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,char a41,uint64_t a42,char a43)
{
  sub_100261F44((uint64_t)&a39);
  sub_100261F44((uint64_t)&a41);
  sub_100261F44((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_1004F0820()
{
  JUMPOUT(0x1004F07D0);
}

void sub_1004F082C()
{
  JUMPOUT(0x1004F07D8);
}

void sub_1004F0CB0()
{
  operator delete();
}

void sub_1004F0D08(id a1)
{
  NSObject *v1;
  _DWORD v2[2];
  __int16 v3;
  const char *v4;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  v1 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v2[0] = 68289026;
    v2[1] = 0;
    v3 = 2082;
    v4 = "";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Classifier has been set up\"}", (uint8_t *)v2, 0x12u);
  }
}

void sub_1004F0DDC(id a1, int a2)
{
  NSObject *v2;
  _DWORD v3[2];
  __int16 v4;
  const char *v5;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  v2 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v3[0] = 68289026;
    v3[1] = 0;
    v4 = 2082;
    v5 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"flushing archivemanager to disk as result of a darwin notification.\"}", (uint8_t *)v3, 0x12u);
  }
}

id sub_1004F0EB0(uint64_t a1)
{
  void *v1;
  _QWORD v3[5];

  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_1004F0F08;
  v3[3] = &unk_10212BB58;
  v1 = *(void **)(a1 + 32);
  v3[4] = *(_QWORD *)(a1 + 40);
  return objc_msgSend(v1, "async:", v3);
}

void sub_1004F0F08(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[4];
  int v8;
  __int16 v9;
  const char *v10;

  if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Reload harvest rules and settings\"}", buf, 0x12u);
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    v3 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Shutting down. Do not reload harvest rules and settings", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10213F4E0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "Shutting down. Do not reload harvest rules and settings", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "-[CLHarvesterService beginService]_block_invoke", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

uint64_t sub_1004F113C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(+[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration"), "countryCode");
  if (objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 160), "isEqualToString:", CFSTR("CN"))
    && (objc_msgSend(v2, "isEqualToString:", CFSTR("CN")) & 1) == 0)
  {
    sub_1005904FC(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
  }
  objc_msgSend(*(id *)(a1 + 32), "setLastCountryCode:", v2);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "refresh");
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 64) + 48))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_1004F1370(uint64_t a1)
{
  sub_100346F9C((_QWORD *)(*(_QWORD *)(a1 + 32) + 64));
}

void sub_1004F17A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1004F17D4(void *a1, uint64_t a2)
{
  uint64_t v2;
  id v3;
  uint64_t v4;
  _BOOL8 result;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  v3 = objc_msgSend(a1, "valueForEntitlement:", a2);
  if (v3)
  {
    v4 = objc_opt_class(NSNumber, v2);
    if ((objc_opt_isKindOfClass(v3, v4) & 1) != 0 && (objc_msgSend(v3, "BOOLValue") & 1) != 0)
      return 1;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10213F4E0);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "connecting process isn't entitled, they shall not pass %{public}@", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10213F4E0);
    v9 = 138543362;
    v10 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 0, "connecting process isn't entitled, they shall not pass %{public}@", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "BOOL connectionHasEntitlement(NSXPCConnection *, NSString *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
    return 0;
  }
  return result;
}

void sub_1004F1F38(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

_QWORD *sub_1004F1F64@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x158uLL);
  result = sub_1004F1FBC(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F1FA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F1FBC(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F510;
  sub_1013235B0(a1 + 3, *a2);
  return a1;
}

void sub_1004F1FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F200C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F2020(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2054(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F2064@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x4D8uLL);
  result = sub_1004F20C4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1004F20B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F20C4(_QWORD *a1, uint64_t *a2, __int128 *a3)
{
  char v5;

  a1[2] = 0;
  *a1 = off_10213F560;
  a1[1] = 0;
  sub_1004F2180((uint64_t)&v5, (uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1004F2114(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F2128(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F560;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F213C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F560;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2170(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F2180(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v9;

  v5 = *a3;
  v9 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  sub_10058D240(a2, v5, &v9);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1004F21F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2208@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x48uLL);
  result = sub_1004F2260(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F224C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2260(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F5B0;
  sub_10052BF7C(a1 + 3, *a2);
  return a1;
}

void sub_1004F229C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F22B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F5B0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F22C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F5B0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F22F8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F2308@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x120uLL);
  result = sub_1004F2380(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1004F236C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2380(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t *a4, _QWORD *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_10213F600;
  a1[1] = 0;
  sub_1004F2444((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1004F23D8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F23EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F600;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F2400(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F600;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2434(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F2444(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, uint64_t *a5, _QWORD *a6)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  __int128 v28;

  v7 = *a3;
  v28 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v8 = (std::__shared_weak_count *)a5[1];
  v26 = *a5;
  v27 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v12 = *a6 + 32;
  else
    v12 = 0;
  v24 = v12;
  v25 = v11;
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_100986B44(a2, v7, &v28, &v26, &v24);
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = (std::__shared_weak_count *)*((_QWORD *)&v28 + 1);
  if (*((_QWORD *)&v28 + 1))
  {
    v22 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1004F257C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F25A0@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0xF8uLL);
  result = sub_1004F25F8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F25E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F25F8(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F650;
  sub_1012DB6B8(a1 + 3, *a2);
  return a1;
}

void sub_1004F2634(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F2648(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F650;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F265C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F650;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2690(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F26A0@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, uint64_t *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X8>)
{
  _QWORD *v14;
  _QWORD *result;

  v14 = operator new(0x1A0uLL);
  result = sub_1004F2730(v14, a1, a2, a3, a4, a5, a6);
  *a7 = v14 + 3;
  a7[1] = v14;
  return result;
}

void sub_1004F271C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2730(_QWORD *a1, uint64_t *a2, __int128 *a3, uint64_t *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7)
{
  char v9;

  a1[2] = 0;
  *a1 = off_10213F6A0;
  a1[1] = 0;
  sub_1004F27FC((uint64_t)&v9, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7);
  return a1;
}

void sub_1004F2790(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F27A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F6A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F27B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F6A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F27EC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F27FC(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, uint64_t *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  __int128 v47;

  v9 = *a3;
  v47 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v10 = (std::__shared_weak_count *)a5[1];
  v45 = *a5;
  v46 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v14 = *a6 + 16;
  else
    v14 = 0;
  v43 = v14;
  v44 = v13;
  if (v13)
  {
    v15 = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = (std::__shared_weak_count *)a7[1];
  v41 = *a7;
  v42 = v17;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = (std::__shared_weak_count *)a8[1];
  if (*a8)
    v21 = *a8 + 8;
  else
    v21 = 0;
  v39 = v21;
  v40 = v20;
  if (v20)
  {
    v22 = (unint64_t *)&v20->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  sub_10108092C(a2, v9, &v47, &v45, &v43, &v41, &v39);
  v24 = v40;
  if (v40)
  {
    v25 = (unint64_t *)&v40->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = v42;
  if (v42)
  {
    v28 = (unint64_t *)&v42->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v44;
  if (v44)
  {
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v46;
  if (v46)
  {
    v34 = (unint64_t *)&v46->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
  if (*((_QWORD *)&v47 + 1))
  {
    v37 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1004F29F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44((uint64_t)&a15);
  sub_100261F44(v15 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2A2C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F2A84(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F2A70(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2A84(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F6F0;
  sub_10087B114(a1 + 3, *a2);
  return a1;
}

void sub_1004F2AC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F2AD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F6F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F2AE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F6F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2B1C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F2B2C@<X0>(__int128 *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;
  _QWORD *result;

  v10 = operator new(0x2C8uLL);
  result = sub_1004F2BA4(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  return result;
}

void sub_1004F2B90(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2BA4(_QWORD *a1, __int128 *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  char v7;

  a1[2] = 0;
  *a1 = off_10213F740;
  a1[1] = 0;
  sub_1004F2C68((uint64_t)&v7, (uint64_t)(a1 + 3), a2, a3, a4, a5);
  return a1;
}

void sub_1004F2BFC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F2C10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F740;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F2C24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F740;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2C58(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F2C68(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  __int128 v33;

  v33 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v6 = (std::__shared_weak_count *)a4[1];
  v31 = *a4;
  v32 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a5[1];
  v29 = *a5;
  v30 = v9;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = (std::__shared_weak_count *)a6[1];
  v27 = *a6;
  v28 = v12;
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  sub_10135AAE8(a2, &v33, &v31, &v29, &v27);
  v15 = v28;
  if (v28)
  {
    v16 = (unint64_t *)&v28->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v30;
  if (v30)
  {
    v19 = (unint64_t *)&v30->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  v21 = v32;
  if (v32)
  {
    v22 = (unint64_t *)&v32->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v33 + 1);
  if (*((_QWORD *)&v33 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v33 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1004F2DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2E18@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x40uLL);
  result = sub_1004F2E78(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1004F2E64(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2E78(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  a1[2] = 0;
  *a1 = off_10213F790;
  a1[1] = 0;
  sub_100C13BD4(a1 + 3, *a2, *a3);
  return a1;
}

void sub_1004F2EB8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F2ECC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F790;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F2EE0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F790;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F2F14(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F2F24@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x258uLL);
  result = sub_1004F2FC4(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F2FB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F2FC4(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213F7E0;
  a1[1] = 0;
  sub_1004F3098((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F302C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3040(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F7E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F3054(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F7E0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F3088(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F3098(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_1012D92B8)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F3244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3270@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x90uLL);
  result = sub_1004F32C8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F32B4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F32C8(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F830;
  sub_100C2050C(a1 + 3, *a2);
  return a1;
}

void sub_1004F3304(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3318(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F830;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F332C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F830;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F3360(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F3370(uint64_t a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  _QWORD *v15;

  v15 = operator new(0x898uLL);
  sub_1004F3410(v15, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1004F33FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3410(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8)
{
  char v8;

  a1[2] = 0;
  *a1 = off_10213F880;
  a1[1] = 0;
  sub_1004F34E4((uint64_t)&v8, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
}

void sub_1004F3478(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F348C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F34A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F880;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F34D4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F34E4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  __int128 v25;

  v10 = *a3;
  v25 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v24[0] = v12;
  v24[1] = v11;
  if (v11)
  {
    v13 = (unint64_t *)(v11 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v23[0] = v16;
  v23[1] = v15;
  if (v15)
  {
    v17 = (unint64_t *)(v15 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = a7[1];
  v22[0] = *a7;
  v22[1] = v19;
  if (v19)
  {
    v20 = (unint64_t *)(v19 + 8);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  sub_100CA2164(a2, v10, &v25, v24, v23, v22, *a8, *a9);
}

void sub_1004F3694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44(v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F36C0@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F3718(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F3704(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3718(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F8D0;
  sub_1007AACFC(a1 + 3, *a2);
  return a1;
}

void sub_1004F3754(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F8D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F377C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F8D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F37B0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F37C0@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x1E8uLL);
  result = sub_1004F3870(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1004F385C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3870(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = off_10213F920;
  a1[1] = 0;
  sub_1004F3948((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1004F38DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F38F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F920;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F3904(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F920;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F3938(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F3948(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;

  v11 = *a3;
  v49 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v12 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v13 = *a5 + 24;
  else
    v13 = 0;
  v47 = v13;
  v48 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v17 = *a6 + 8;
  else
    v17 = 0;
  v45 = v17;
  v46 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a7[1];
  v43 = *a7;
  v44 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)a8[1];
  v41 = *a8;
  v42 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_1010C7FE0(a2, v11, &v49, &v47, &v45, &v43, &v41, *a9, *a10);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1004F3B54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44(v3 - 48);
  sub_100261F44(v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3B88@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x240uLL);
  result = sub_1004F3C38(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1004F3C24(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3C38(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = off_10213F970;
  a1[1] = 0;
  sub_1004F3D10((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1004F3CA4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3CB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F3CCC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F3D00(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F3D10(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;

  v11 = *a3;
  v49 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v12 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v13 = *a5 + 24;
  else
    v13 = 0;
  v47 = v13;
  v48 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v17 = *a6 + 8;
  else
    v17 = 0;
  v45 = v17;
  v46 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a7[1];
  v43 = *a7;
  v44 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)a8[1];
  v41 = *a8;
  v42 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_100F10FD4(a2, v11, &v49, &v47, &v45, &v43, &v41, *a9, *a10);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1004F3F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44(v3 - 48);
  sub_100261F44(v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3F50@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x160uLL);
  result = sub_1004F3FA8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F3F94(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F3FA8(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213F9C0;
  sub_1008A1AE0((uint64_t)(a1 + 3), *a2);
  return a1;
}

void sub_1004F3FE4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F3FF8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213F9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F400C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213F9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F4040(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F4050@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x320uLL);
  result = sub_1004F40F0(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F40DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F40F0(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FA10;
  a1[1] = 0;
  sub_1004F41C4((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F4158(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F416C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F4180(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F41B4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F41C4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_100CABBF0)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F4370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F439C@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x5B0uLL);
  result = sub_1004F443C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F4428(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F443C(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FA60;
  a1[1] = 0;
  sub_1004F4510((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F44A4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F44B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F44CC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F4500(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F4510(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_100CE8A3C)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F46BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F46E8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F4740(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F472C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F4740(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FAB0;
  sub_100932660(a1 + 3, *a2);
  return a1;
}

void sub_1004F477C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F4790(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F47A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F47D8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F47E8@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9, uint64_t *a10)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x4F8uLL);
  result = sub_1004F4898(v17, a1, a2, a3, a4, a5, a6, a7, a9, a10);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1004F4884(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F4898(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  char v12;

  a1[2] = 0;
  *a1 = off_10213FB00;
  a1[1] = 0;
  sub_1004F4974((uint64_t)&v12, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10);
  return a1;
}

void sub_1004F4908(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F491C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F4930(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F4964(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F4974(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  __int128 v58;

  v12 = *a3;
  v58 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v13 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v14 = *a5 + 24;
  else
    v14 = 0;
  v56 = v14;
  v57 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v17 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v18 = *a6 + 8;
  else
    v18 = 0;
  v54 = v18;
  v55 = v17;
  if (v17)
  {
    v19 = (unint64_t *)&v17->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  v21 = a7[1];
  v52 = *a7;
  v53 = (std::__shared_weak_count *)v21;
  if (v21)
  {
    v22 = (unint64_t *)(v21 + 8);
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
  }
  v24 = (std::__shared_weak_count *)a8[1];
  v50 = *a8;
  v51 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = (std::__shared_weak_count *)a9[1];
  v48 = *a9;
  v49 = v27;
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
  }
  sub_101200074(a2, v12, &v58, &v56, &v54, &v52, &v50, &v48, *a10, *a11);
  v30 = v49;
  if (v49)
  {
    v31 = (unint64_t *)&v49->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v51;
  if (v51)
  {
    v34 = (unint64_t *)&v51->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  v36 = v53;
  if (v53)
  {
    v37 = (unint64_t *)&v53->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = v55;
  if (v55)
  {
    v40 = (unint64_t *)&v55->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v42 = v57;
  if (v57)
  {
    v43 = (unint64_t *)&v57->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
  if (*((_QWORD *)&v58 + 1))
  {
    v46 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
}

void sub_1004F4BE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  uint64_t v11;
  va_list va2;
  uint64_t v13;
  va_list va3;

  va_start(va3, a3);
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v11 = va_arg(va3, _QWORD);
  v13 = va_arg(va3, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44((uint64_t)va3);
  sub_100261F44(v3 - 48);
  sub_100261F44(v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F4C1C@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F4C74(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F4C60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F4C74(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FB50;
  sub_101083768(a1 + 3, *a2);
  return a1;
}

void sub_1004F4CB0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F4CC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FB50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F4CD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FB50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F4D0C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F4D1C@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x248uLL);
  result = sub_1004F4DBC(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F4DA8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F4DBC(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FBA0;
  a1[1] = 0;
  sub_1004F4E90((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F4E24(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F4E38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FBA0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F4E4C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FBA0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F4E80(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F4E90(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_100C35E44)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5068@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1004F50C0(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F50AC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F50C0(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FBF0;
  sub_10042AE78(a1 + 3, *a2);
  return a1;
}

void sub_1004F50FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F5110(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FBF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F5124(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FBF0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F5158(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F5168@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x1E0uLL);
  result = sub_1004F5208(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F51F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5208(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FC40;
  a1[1] = 0;
  sub_1004F52DC((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F5270(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F5284(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FC40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F5298(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FC40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F52CC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F52DC(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_1004296E0)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F5488(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F54B4@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F550C(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F54F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F550C(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FC90;
  sub_10129F470(a1 + 3, *a2);
  return a1;
}

void sub_1004F5548(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F555C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FC90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F5570(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FC90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F55A4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F55B4@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x198uLL);
  result = sub_1004F5654(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F5640(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5654(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FCE0;
  a1[1] = 0;
  sub_1004F5728((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F56BC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F56D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FCE0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F56E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FCE0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F5718(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F5728(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_100614784)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F58D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5900@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F5958(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F5944(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5958(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FD30;
  sub_10139B7CC(a1 + 3, *a2);
  return a1;
}

void sub_1004F5994(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F59A8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FD30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F59BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FD30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F59F0(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F5A00@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  _QWORD *v19;
  _QWORD *result;

  v19 = operator new(0x4C0uLL);
  result = sub_1004F5AC0(v19, a1, a2, a3, a4, a5, a6, a7, a9, a10, a11);
  *a8 = v19 + 3;
  a8[1] = v19;
  return result;
}

void sub_1004F5AAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5AC0(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11)
{
  char v13;

  a1[2] = 0;
  *a1 = off_10213FD80;
  a1[1] = 0;
  sub_1004F5BA4((uint64_t)&v13, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
  return a1;
}

void sub_1004F5B38(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F5B4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FD80;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F5B60(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FD80;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F5B94(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F5BA4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10, uint64_t *a11, uint64_t *a12)
{
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  __int128 v67;

  v13 = *a3;
  v67 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v14 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v15 = *a5 + 24;
  else
    v15 = 0;
  v65 = v15;
  v66 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v19 = *a6 + 8;
  else
    v19 = 0;
  v63 = v19;
  v64 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = a7[1];
  v61 = *a7;
  v62 = (std::__shared_weak_count *)v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  v25 = (std::__shared_weak_count *)a8[1];
  v59 = *a8;
  v60 = v25;
  if (v25)
  {
    v26 = (unint64_t *)&v25->__shared_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)a9[1];
  v57 = *a9;
  v58 = v28;
  if (v28)
  {
    v29 = (unint64_t *)&v28->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  v31 = (std::__shared_weak_count *)a10[1];
  v55 = *a10;
  v56 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  sub_100EF4EB4(a2, v13, &v67, &v65, &v63, &v61, &v59, &v57, &v55, *a11, *a12);
  v34 = v56;
  if (v56)
  {
    v35 = (unint64_t *)&v56->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v58;
  if (v58)
  {
    v38 = (unint64_t *)&v58->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v60;
  if (v60)
  {
    v41 = (unint64_t *)&v60->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  v43 = v62;
  if (v62)
  {
    v44 = (unint64_t *)&v62->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = v64;
  if (v64)
  {
    v47 = (unint64_t *)&v64->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v49 = v66;
  if (v66)
  {
    v50 = (unint64_t *)&v66->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
  if (*((_QWORD *)&v67 + 1))
  {
    v53 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1004F5E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  va_list va1;
  uint64_t v12;
  uint64_t v13;
  va_list va2;
  uint64_t v15;
  va_list va3;

  va_start(va3, a5);
  va_start(va2, a5);
  va_start(va1, a5);
  va_start(va, a5);
  v7 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v10 = va_arg(va2, _QWORD);
  v12 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v13 = va_arg(va3, _QWORD);
  v15 = va_arg(va3, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44((uint64_t)va3);
  sub_100261F44(v5 - 64);
  sub_100261F44(v5 - 48);
  sub_100261F44(v5 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5EB8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x30uLL);
  result = sub_1004F5F10(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F5EFC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F5F10(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FDD0;
  sub_100D6FE0C(a1 + 3, *a2);
  return a1;
}

void sub_1004F5F4C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F5F60(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FDD0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F5F74(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FDD0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F5FA8(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F5FB8@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t *a7@<X7>, _QWORD *a8@<X8>, uint64_t *a9)
{
  _QWORD *v17;
  _QWORD *result;

  v17 = operator new(0x1E0uLL);
  result = sub_1004F6068(v17, a1, a2, a3, a4, a5, a6, a7, a9);
  *a8 = v17 + 3;
  a8[1] = v17;
  return result;
}

void sub_1004F6054(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F6068(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9)
{
  char v11;

  a1[2] = 0;
  *a1 = off_10213FE20;
  a1[1] = 0;
  sub_1004F6140((uint64_t)&v11, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8, a9);
  return a1;
}

void sub_1004F60D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F60E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FE20;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F60FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FE20;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F6130(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F6140(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, uint64_t *a8, uint64_t *a9, uint64_t *a10)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  __int128 v49;

  v11 = *a3;
  v49 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v12 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v13 = *a5 + 24;
  else
    v13 = 0;
  v47 = v13;
  v48 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v17 = *a6 + 8;
  else
    v17 = 0;
  v45 = v17;
  v46 = v16;
  if (v16)
  {
    v18 = (unint64_t *)&v16->__shared_owners_;
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  v20 = a7[1];
  v43 = *a7;
  v44 = (std::__shared_weak_count *)v20;
  if (v20)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = (std::__shared_weak_count *)a8[1];
  v41 = *a8;
  v42 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  sub_1013F61A4(a2, v11, &v49, &v47, &v45, &v43, &v41, *a9, *a10);
  v26 = v42;
  if (v42)
  {
    v27 = (unint64_t *)&v42->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = v46;
  if (v46)
  {
    v33 = (unint64_t *)&v46->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v48;
  if (v48)
  {
    v36 = (unint64_t *)&v48->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)*((_QWORD *)&v49 + 1);
  if (*((_QWORD *)&v49 + 1))
  {
    v39 = (unint64_t *)(*((_QWORD *)&v49 + 1) + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_1004F634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  uint64_t v5;
  va_list va;
  uint64_t v7;
  uint64_t v8;
  va_list va1;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v5 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v8 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  sub_100261F44(v3 - 48);
  sub_100261F44(v3 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F6380@<X0>(_QWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x78uLL);
  result = sub_1004F63D8(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F63C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F63D8(_QWORD *a1, _QWORD *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FE70;
  sub_100F51CD0(a1 + 3, *a2);
  return a1;
}

void sub_1004F6414(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F6428(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FE70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F643C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FE70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F6470(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F6480@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x230uLL);
  result = sub_1004F6520(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F650C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F6520(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FEC0;
  a1[1] = 0;
  sub_1004F65F4((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F6588(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F659C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FEC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F65B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FEC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F65E4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F65F4(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_1013FC9C0)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F67A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F67CC@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x28uLL);
  result = sub_1004F6824(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1004F6810(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F6824(_QWORD *a1, uint64_t *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_10213FF10;
  sub_100F989D4(a1 + 3, *a2);
  return a1;
}

void sub_1004F6860(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F6874(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FF10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F6888(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FF10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F68BC(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_1004F68CC@<X0>(uint64_t *a1@<X1>, __int128 *a2@<X2>, _QWORD *a3@<X3>, _QWORD *a4@<X4>, uint64_t *a5@<X5>, _QWORD *a6@<X6>, _QWORD *a7@<X7>, _QWORD *a8@<X8>)
{
  _QWORD *v16;
  _QWORD *result;

  v16 = operator new(0x1B0uLL);
  result = sub_1004F696C(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_1004F6958(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004F696C(_QWORD *a1, uint64_t *a2, __int128 *a3, _QWORD *a4, _QWORD *a5, uint64_t *a6, _QWORD *a7, _QWORD *a8)
{
  char v10;

  a1[2] = 0;
  *a1 = off_10213FF60;
  a1[1] = 0;
  sub_1004F6A40((uint64_t)&v10, (uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_1004F69D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1004F69E8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_10213FF60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004F69FC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_10213FF60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_1004F6A30(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1004F6A40(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4, _QWORD *a5, _QWORD *a6, uint64_t *a7, _QWORD *a8, _QWORD *a9)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  __int128 v40;

  v10 = *a3;
  v40 = *a4;
  *(_QWORD *)a4 = 0;
  *((_QWORD *)a4 + 1) = 0;
  v11 = (std::__shared_weak_count *)a5[1];
  if (*a5)
    v12 = *a5 + 24;
  else
    v12 = 0;
  v38 = v12;
  v39 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a6[1];
  if (*a6)
    v16 = *a6 + 8;
  else
    v16 = 0;
  v36 = v16;
  v37 = v15;
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)a7[1];
  v34 = *a7;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  ((void (*)(uint64_t, uint64_t, __int128 *, uint64_t *, uint64_t *, uint64_t *, _QWORD, _QWORD))sub_100531518)(a2, v10, &v40, &v38, &v36, &v34, *a8, *a9);
  v22 = v35;
  if (v35)
  {
    v23 = (unint64_t *)&v35->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v37;
  if (v37)
  {
    v26 = (unint64_t *)&v37->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = v39;
  if (v39)
  {
    v29 = (unint64_t *)&v39->__shared_owners_;
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
  if (*((_QWORD *)&v40 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
}

void sub_1004F6BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;

  sub_100261F44((uint64_t)&a9);
  sub_100261F44((uint64_t)&a11);
  sub_100261F44((uint64_t)&a13);
  sub_100261F44(v13 - 32);
  _Unwind_Resume(a1);
}

char *sub_1004F6C18(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = sub_1002AE87C(result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1004F6CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1002A3684(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F6CB8(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_100FC31AC(result);
    operator delete();
  }
  return result;
}

BOOL sub_1004F6CF4()
{
  return os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_FAULT);
}

BOOL sub_1004F6D08()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 520), OS_LOG_TYPE_INFO);
}

BOOL sub_1004F6D18()
{
  uint64_t v0;

  return os_signpost_enabled(*(os_log_t *)(v0 + 520));
}

void sub_1004F6D24()
{
  unsigned __int8 v0;
  _OWORD v1[5];
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A19C8);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A19C8))
    {
      v2 = 0x7FFFFFFF00000000;
      v1[2] = xmmword_101BB3B60;
      v1[3] = unk_101BB3B70;
      v1[4] = xmmword_101BB3B80;
      v1[0] = xmmword_101BB3B40;
      v1[1] = unk_101BB3B50;
      sub_100428DFC((uint64_t)&unk_1022A19B0, (int *)v1, 11);
      __cxa_atexit((void (*)(void *))sub_100427E4C, &unk_1022A19B0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A19C8);
    }
  }
}

void sub_1004F6DF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A19C8);
  _Unwind_Resume(a1);
}

void sub_1004F6E10()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1004F6EAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1004F6EC4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1004F6F50(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F6F68()
{
  sub_1015A2E04(qword_102301590, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_102301590, (void *)&_mh_execute_header);
}

uint64_t sub_1004F7030(uint64_t a1)
{
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  *(CFAbsoluteTime *)a1 = CFAbsoluteTimeGetCurrent();
  sub_10087DC68((_QWORD *)(a1 + 8));
  sub_1015A2E04(v5, "CLWifiAssociatedApHarvestDatabase");
  sub_1015A2E04(__p, "CLSubHarvesterWifiAssociatedAp");
  sub_10136E244(a1 + 24, v5, __p);
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  return a1;
}

void sub_1004F70C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  sub_100261F44(v20);
  _Unwind_Resume(a1);
}

void sub_1004F7110(uint64_t a1)
{
  uint64_t v1;
  _BOOL4 v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  char *v6;
  NSObject *v7;
  void **v8;
  void **v9;
  char *v10;
  void *__p[2];
  char v12;
  int v13;
  void **v14;
  uint8_t buf[1640];

  v1 = a1 + 8;
  v2 = sub_1000CC504(*(_QWORD *)(a1 + 8));
  sub_1000CE11C(v1 + 16, v2);
  sub_1000CC970((double *)(v1 + 16));
  if (!sub_1000CC504(*(_QWORD *)v1))
  {
    sub_10087DC68(buf);
    sub_1002B7674(v1, (__int128 *)buf);
    v3 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v4 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    if (sub_1000CC504(*(_QWORD *)v1))
      v6 = "success";
    else
      v6 = "fail";
    sub_1015A2E04(__p, v6);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213FFA0);
    v7 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      v8 = __p;
      if (v12 < 0)
        v8 = (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "CLSubHarvesterWifiAssociatedAp, re-initialize database: %s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213FFA0);
      v9 = __p;
      if (v12 < 0)
        v9 = (void **)__p[0];
      v13 = 136315138;
      v14 = v9;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CLSubHarvesterWifiAssociatedAp, re-initialize database: %s", (const char *)&v13);
      sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::reinitializeWifiAssociatedApHarvestDatabaseIfInvalid()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    if (v12 < 0)
      operator delete(__p[0]);
  }
}

void sub_1004F7388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004F73B0(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10213FFA0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Clearing associated AP harvest data in WifiAssociatedApHarvestDatabase [GPS Harvest]", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213FFA0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Clearing associated AP harvest data in WifiAssociatedApHarvestDatabase [GPS Harvest]", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::clearHarvest()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  sub_10067F6A0(*(_QWORD *)(a1 + 8));
}

void sub_1004F7548(uint64_t a1)
{
  uint64_t *v2;
  double v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  double v7;
  int v8;
  double v9;
  uint8_t buf[4];
  double v11;

  v2 = sub_1000A3224();
  v3 = sub_1000A14F8(v2);
  v7 = v3;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10213FFA0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134283521;
    v11 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Purging GPS harvest samples older than %{private}.1fs in WifiAssociatedApHarvestDatabase", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213FFA0);
    v8 = 134283521;
    v9 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "Purging GPS harvest samples older than %{private}.1fs in WifiAssociatedApHarvestDatabase", &v8, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLSubHarvesterWifiAssociatedAp::purgeOlderGpsHarvestSamples()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  sub_10067D760(*(_QWORD *)(a1 + 8), (uint64_t)&v7);
}

void sub_1004F7714(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_1004F7740()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0328);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0328))
    {
      qword_1022A0310 = 0;
      qword_1022A0318 = 0;
      qword_1022A0320 = 0;
      v1 = operator new(6uLL);
      qword_1022A0318 = (uint64_t)(v1 + 3);
      qword_1022A0320 = (uint64_t)(v1 + 3);
      *(_DWORD *)v1 = 151521030;
      v1[2] = 3082;
      qword_1022A0310 = (uint64_t)v1;
      __cxa_atexit((void (*)(void *))sub_10024F368, &qword_1022A0310, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0328);
    }
  }
}

void sub_1004F77DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0328);
  _Unwind_Resume(a1);
}

void sub_1004F77F4()
{
  unsigned __int8 v0;
  _WORD *v1;

  v0 = atomic_load((unsigned __int8 *)&qword_1022A0348);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1022A0348))
    {
      qword_1022A0330 = 0;
      qword_1022A0338 = 0;
      qword_1022A0340 = 0;
      v1 = operator new(2uLL);
      qword_1022A0330 = (uint64_t)v1;
      *v1 = 256;
      qword_1022A0338 = (uint64_t)(v1 + 1);
      qword_1022A0340 = (uint64_t)(v1 + 1);
      __cxa_atexit((void (*)(void *))sub_10024F398, &qword_1022A0330, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_1022A0348);
    }
  }
}

void sub_1004F7880(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1022A0348);
  _Unwind_Resume(a1);
}

void sub_1004F793C(id a1)
{
  qword_1023015D0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVisionNotifierSilo"));
}

id sub_1004F7BD8(uint64_t a1)
{
  double v2;
  id result;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  double v11;
  __int16 v12;
  uint64_t v13;
  uint8_t buf[4];
  double v15;
  __int16 v16;
  uint64_t v17;

  v2 = sub_1001FCBB4();
  result = objc_msgSend(*(id *)(a1 + 32), "hasSessionTimedOut:");
  if ((_DWORD)result)
  {
    if (qword_1022A00C0 != -1)
      dispatch_once(&qword_1022A00C0, &stru_102140030);
    v4 = qword_1022A00C8;
    if (os_log_type_enabled((os_log_t)qword_1022A00C8, OS_LOG_TYPE_ERROR))
    {
      objc_msgSend(*(id *)(a1 + 32), "lastARKitUpdate");
      *(_DWORD *)buf = 134349312;
      v15 = v2;
      v16 = 2050;
      v17 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLVN,sessionTimerHandler,Session has timed out without end notification,nowMachContinuousTime,%{public}.3lf,lastARKitUpdate,%{public}.3lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00C0 != -1)
        dispatch_once(&qword_1022A00C0, &stru_102140030);
      v6 = qword_1022A00C8;
      objc_msgSend(*(id *)(a1 + 32), "lastARKitUpdate");
      v10 = 134349312;
      v11 = v2;
      v12 = 2050;
      v13 = v7;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "CLVN,sessionTimerHandler,Session has timed out without end notification,nowMachContinuousTime,%{public}.3lf,lastARKitUpdate,%{public}.3lf", &v10, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "-[CLVisionNotifier beginService]_block_invoke", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return objc_msgSend(*(id *)(a1 + 32), "closeSessionWithState:fromClient:", 2, CFSTR("com.apple.locationd.CLVisionNotifier"));
  }
  return result;
}

id sub_1004F868C(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleVIOEstimation:fromClient:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_1004F8A24(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleVLLocalizationResult:fromClient:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

id sub_1004F8D84(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleARSessionState:fromClient:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

id sub_1004F8FE8(uint64_t a1, void *a2)
{
  return _objc_msgSend(a2, "handleARSessionState:fromClient:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1004F90C0(id a1)
{
  qword_1022A00C8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Vision");
}

_QWORD *sub_1004F90EC(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

_QWORD *sub_1004F9138(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;

  v2 = (_QWORD *)a1[3];
  if (v2 == a1)
  {
    v3 = 4;
    v2 = a1;
    goto LABEL_5;
  }
  if (v2)
  {
    v3 = 5;
LABEL_5:
    (*(void (**)(void))(*v2 + 8 * v3))();
  }
  return a1;
}

void sub_1004F9228(id a1)
{
  qword_102301660 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLOdometerNotifierSilo"));
}

uint64_t sub_1004F92DC(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004FA284;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301680 != -1)
    dispatch_once(&qword_102301680, block);
  return qword_102310898;
}

void sub_1004F947C(id a1)
{
  sub_100197040();
  if (sub_1000C4240())
    byte_102301670 = 1;
}

void sub_1004F95C0(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  int32x2_t *v10;
  int32x2_t v11;
  int32x2_t v12;
  int32x2_t *v13;
  int32x2_t *v14;
  uint64_t v15;

  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  __asm { FMOV            V2.2D, #-1.0 }
  *(_OWORD *)(a2 + 24) = _Q2;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  sub_10107C96C(*(_QWORD *)(a1 + 112), (void **)&v13, a3, a4);
  v10 = v13;
  if ((unint64_t)((char *)v14 - (char *)v13) < 0x41)
  {
    if (!v13)
      return;
  }
  else
  {
    v11 = v14[-4];
    v12 = v14[-3];
    *(int32x2_t *)(a2 + 24) = v13[11];
    *(int32x2_t *)(a2 + 32) = v11;
    *(int32x2_t *)(a2 + 40) = vsub_s32(v12, v10[5]);
  }
  v14 = v10;
  operator delete(v10);
}

void sub_1004F9644(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1004F96E4(uint64_t a1, void *a2)
{
  *(_QWORD *)sub_1004F99C0(a1, "CLOdometerNotifier", a2) = off_1021400A0;
  operator new();
}

void sub_1004F98E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void **v5;

  if (*(char *)(v1 + 911) < 0)
    operator delete(*v5);
  sub_1000F34E0(v4);
  if (*(char *)(v1 + 839) < 0)
    operator delete(*(void **)(v1 + 816));
  sub_100261F44(v3);
  sub_100261F44(v2);
  sub_1004FA15C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1004F99C0(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_1021404C8;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_1004F9A40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1004F9A5C(std::string::size_type a1@<X0>, _QWORD *a2@<X8>)
{
  NSArray *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  const char *v9;
  char *v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  std::string __p;
  _BYTE buf[12];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  _BYTE v31[128];

  v3 = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, 0x408uLL, 0);
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v13;
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)v13 != v5)
        objc_enumerationMutation(v3);
      v7 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(*((_QWORD *)&v12 + 1) + 8 * v6), "stringByAppendingPathComponent:", CFSTR("LocationBundles/")), "stringByAppendingPathComponent:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a1)), "stringByAppendingPathExtension:", CFSTR("bundle"));
      if (-[NSFileManager fileExistsAtPath:](+[NSFileManager defaultManager](NSFileManager, "defaultManager"), "fileExistsAtPath:", v7))
      {
        break;
      }
      if (v4 == (id)++v6)
      {
        v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v12, v31, 16);
        if (v4)
          goto LABEL_3;
        goto LABEL_27;
      }
    }
    if (!v7)
      goto LABEL_27;
    sub_1015A2E04(&__p, (char *)objc_msgSend(v7, "UTF8String"));
    sub_1001B8590(&__p, (uint64_t)buf);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1001A885C((uint64_t)buf, (uint64_t)a2);
    if (v30 < 0)
      operator delete(v29);
    if (v28 < 0)
      operator delete(v27);
    if (v26 < 0)
      operator delete(v25);
    if (v24 < 0)
      operator delete(v23);
    if (v22 < 0)
      operator delete(v21);
    if (v20 < 0)
      operator delete(v19);
    if (v18 < 0)
      operator delete(*(void **)buf);
  }
  else
  {
LABEL_27:
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102140258);
    v8 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Unable to resolve bundle path for service: %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102140258);
      LODWORD(__p.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = a1;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 17, "Unable to resolve bundle path for service: %{public}s", &__p, 12);
      v10 = (char *)v9;
      sub_100512490("Generic", 1, 0, 0, "static std::string CLOdometerNotifier::getClientKeyFromServiceName(const char *)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    sub_1015A2E04(a2, "");
  }
}

void sub_1004F9DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
  sub_100010174((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_1004F9DFC(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021406A8);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021406A8);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLSignificantElevation>::setExpirationRule(CFTimeInterval) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_1004FA0B0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  _QWORD handler[5];

  v2 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
  *(_QWORD *)(a1 + 872) = v2;
  dispatch_source_set_timer(v2, 0, 0xD18C2E2800uLL, 0xDF8475800uLL);
  v3 = *(NSObject **)(a1 + 872);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1004FA3F8;
  handler[3] = &unk_10212ECA0;
  handler[4] = a1;
  dispatch_source_set_event_handler(v3, handler);
  dispatch_resume(*(dispatch_object_t *)(a1 + 872));
}

uint64_t sub_1004FA15C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021404C8;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1004FA1D0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021400A0;

  *(_QWORD *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 108) = 1;
  if (*(char *)(a1 + 911) < 0)
    operator delete(*(void **)(a1 + 888));
  sub_1000F34E0((_QWORD *)(a1 + 840));
  if (*(char *)(a1 + 839) < 0)
    operator delete(*(void **)(a1 + 816));
  sub_100261F44(a1 + 128);
  sub_100261F44(a1 + 112);
  return sub_1004FA15C(a1);
}

void sub_1004FA254(uint64_t a1)
{

  *(_QWORD *)(a1 + 880) = 0;
  *(_BYTE *)(a1 + 108) = 1;
}

uint64_t sub_1004FA284()
{
  uint64_t result;

  sub_100197040();
  if (sub_100195F08())
    operator new();
  sub_100197040();
  result = sub_1000C4240();
  if ((_DWORD)result)
    operator new();
  return result;
}

void sub_1004FA30C()
{
  operator delete();
}

uint64_t sub_1004FA344(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1004FA3B8;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301690 != -1)
    dispatch_once(&qword_102301690, block);
  return byte_102301688;
}

id sub_1004FA3B8(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLOdometerNotifier"));
  byte_102301688 = (char)result;
  return result;
}

uint64_t sub_1004FA3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A25B0);
}

uint64_t sub_1004FA3F8(uint64_t a1)
{
  return sub_1004FA404(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 128));
}

uint64_t sub_1004FA404(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021406A8);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021406A8);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021406A8);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021406A8);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_1004FC238(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021406A8);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_1004FC238(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021406A8);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_1004FC238(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSignificantElevation>::aggregateRecords() [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

uint64_t sub_1004FA978(uint64_t a1, __int128 *a2)
{
  double *v3;
  __int128 v4;
  __int128 v5;
  double Current;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  uint8_t buf[4];
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  v3 = *(double **)(a1 + 32);
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v23 = 0u;
  v24 = 0u;
  v4 = a2[1];
  v19 = *a2;
  v20 = v4;
  v5 = a2[3];
  v21 = a2[2];
  v22 = v5;
  Current = CFAbsoluteTimeGetCurrent();
  if (Current - v3[114] > 15.0)
  {
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102140278);
    v7 = qword_10229FD78;
    if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEFAULT))
    {
      v8 = *((_QWORD *)a2 + 3);
      v9 = *((_QWORD *)a2 + 4);
      v10 = *((_DWORD *)a2 + 10);
      v11 = *((_DWORD *)a2 + 11);
      *(_DWORD *)buf = 134349825;
      v40 = v8;
      v41 = 2050;
      v42 = v9;
      v43 = 1025;
      v44 = v10;
      v45 = 1025;
      v46 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "SignificantElevation,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{private}d,descended,%{private}d", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD70 != -1)
        dispatch_once(&qword_10229FD70, &stru_102140278);
      v13 = *((_QWORD *)a2 + 3);
      v14 = *((_QWORD *)a2 + 4);
      v15 = *((_DWORD *)a2 + 10);
      v16 = *((_DWORD *)a2 + 11);
      v31 = 134349825;
      v32 = v13;
      v33 = 2050;
      v34 = v14;
      v35 = 1025;
      v36 = v15;
      v37 = 1025;
      v38 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 0, "SignificantElevation,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{private}d,descended,%{private}d", &v31, 34, v19, v20, v21, v22, v23, v24, v25, v26, v27,
        v28,
        v29,
        v30);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifier::setUpDbUpdateFinishedHandler()_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v3[114] = Current;
  }
  *(_DWORD *)buf = 6;
  return (*(uint64_t (**)(double *, uint8_t *, __int128 *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 152))(v3, buf, &v19, 1, 0xFFFFFFFFLL, 0);
}

id sub_1004FABF8(uint64_t a1)
{
  _QWORD *v1;
  id v2;
  NSObject *v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_QWORD *)(a1 + 888);
  if (*(char *)(a1 + 911) < 0)
    v1 = (_QWORD *)*v1;
  v2 = objc_msgSend(objc_msgSend(*(id *)(a1 + 880), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v1)), "isAuthorizedForServiceTypeMask:", 16);
  if ((v2 & 1) == 0)
  {
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102140258);
    v3 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Motion calibration system service is disabled.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_102140258);
      v7[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 0, "Motion calibration system service is disabled.", v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLOdometerNotifier::checkAuthorization() const", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  return v2;
}

void sub_1004FADC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v5[3];

  v2 = (uint64_t *)(a1 + 840);
  v5[0] = sub_10132CD68(a2);
  v5[1] = v3;
  v5[2] = v4;
  sub_10132CD78(v2, (uint64_t)v5);
}

uint64_t sub_1004FAE08(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102140748;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_1004FAEDC()
{
  operator new();
}

void sub_1004FAF88(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1004FAFC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102140238);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

BOOL sub_1004FB238(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140238);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1004FB4B8(uint64_t a1, int *a2, _OWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  v14 = v11[3];
  a3[2] = v11[2];
  a3[3] = v14;
  *a3 = v12;
  a3[1] = v13;
  v15 = v11[4];
  v16 = v11[5];
  v17 = v11[7];
  a3[6] = v11[6];
  a3[7] = v17;
  a3[4] = v15;
  a3[5] = v16;
  v18 = v11[8];
  v19 = v11[9];
  v20 = v11[11];
  a3[10] = v11[10];
  a3[11] = v20;
  a3[8] = v18;
  a3[9] = v19;
  return 1;
}

uint64_t sub_1004FB540(uint64_t a1, int *a2, _OWORD *a3)
{
  char *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t **v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  int v18;
  __int128 v19;
  int *v20;

  v6 = (char *)operator new(0xD8uLL);
  v7 = a3[9];
  *(_OWORD *)(v6 + 152) = a3[8];
  *(_OWORD *)(v6 + 168) = v7;
  v8 = a3[11];
  *(_OWORD *)(v6 + 184) = a3[10];
  *(_OWORD *)(v6 + 200) = v8;
  v9 = a3[5];
  *(_OWORD *)(v6 + 88) = a3[4];
  *(_OWORD *)(v6 + 104) = v9;
  v10 = a3[7];
  *(_OWORD *)(v6 + 120) = a3[6];
  *(_OWORD *)(v6 + 136) = v10;
  v11 = a3[1];
  *(_OWORD *)(v6 + 24) = *a3;
  *(_OWORD *)(v6 + 40) = v11;
  v12 = a3[3];
  *(_OWORD *)(v6 + 56) = a3[2];
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_1021406D8;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 72) = v12;
  *(_QWORD *)&v19 = v6 + 24;
  *((_QWORD *)&v19 + 1) = v6;
  v18 = *a2;
  v20 = &v18;
  v13 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v18, (uint64_t)&unk_101B9EB60, &v20);
  sub_1002B7674((uint64_t)(v13 + 8), &v19);
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return 1;
}

void sub_1004FB654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FB668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[12];

  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_1004FB6B8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140238);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140238);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102140238);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102140238);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102140238);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::listClients() [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_1004FBC64(uint64_t a1)
{
  sub_1004FC8AC(a1);
  operator delete();
}

void sub_1004FBC88(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_1004FBCB4(id a1)
{
  qword_10229FDF8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Odometer");
}

void sub_1004FBCE0(id a1)
{
  qword_10229FD78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Pressure");
}

void sub_1004FBD10()
{
  operator delete();
}

_QWORD *sub_1004FBD24()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021402A8;
  return result;
}

void sub_1004FBD48(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021402A8;
}

double sub_1004FBD60(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;

  v2 = *a2;
  result = **a2;
  v4 = 0.0;
  while (v2 != a2[1])
  {
    v4 = v4 + v2[2];
    v2 += 3;
  }
  return result;
}

uint64_t sub_1004FBD8C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1004FBDC8()
{
}

void sub_1004FBDD8()
{
  operator delete();
}

_QWORD *sub_1004FBDEC()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102140338;
  return result;
}

void sub_1004FBE10(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102140338;
}

double sub_1004FBE28(uint64_t a1, double **a2)
{
  double *v2;
  double result;
  double v4;
  double *v5;

  v2 = a2[1];
  result = **a2;
  v4 = 0.0;
  if (*a2 != v2)
  {
    v5 = *a2;
    do
    {
      v4 = v4 + v5[2];
      v5 += 3;
    }
    while (v5 != v2);
  }
  return result;
}

uint64_t sub_1004FBE78(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1004FBEB4()
{
}

void sub_1004FBEC4()
{
  operator delete();
}

_QWORD *sub_1004FBED8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_1021403B8;
  return result;
}

void sub_1004FBEFC(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1021403B8;
}

BOOL sub_1004FBF14(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) >= 0.0;
}

uint64_t sub_1004FBF24(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1004FBF60()
{
}

void sub_1004FBF70()
{
  operator delete();
}

_QWORD *sub_1004FBF84()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = off_102140448;
  return result;
}

void sub_1004FBFA8(uint64_t a1, _QWORD *a2)
{
  *a2 = off_102140448;
}

BOOL sub_1004FBFC0(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) > 2.22044605e-16;
}

uint64_t sub_1004FBFD8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

_UNKNOWN **sub_1004FC014()
{
}

void sub_1004FC020(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004FC078(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FC098(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1004FC0B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004FC0F0(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004FC154(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10041D2EC((uint64_t *)va, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1004FC16C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
  {
    sub_10041D328(result);
    operator delete();
  }
  return result;
}

uint64_t sub_1004FC1A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004FC1E0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_1004FC20C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_1004FC238(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102140688);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102140688);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSignificantElevation>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSignificantElevation, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_1004FC434(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1021406D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1004FC448(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1021406D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

id sub_1004FC484(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t buf[4];
  id v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  unint64_t v15;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_1004FC80C((uint64_t)&v8 + 7, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB4D9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v11 = v2;
      v12 = 2048;
      v13 = 0;
      v14 = 2080;
      v15 = 0x8000000101BB4D9CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102140718);
    LODWORD(v9) = 134218498;
    HIDWORD(v9) = (_DWORD)v2;
    LODWORD(v8) = 32;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v9, v8, v9);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLOdometerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:241:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

id sub_1004FC80C(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B0F0))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)192)
      sub_1018FD0F4();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_1004FC880(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

uint64_t sub_1004FC8AC(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102140748;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1004FC90C()
{
  operator new();
}

uint64_t sub_1004FC9C4(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

BOOL sub_1004FC9E4()
{
  return os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT);
}

uint64_t sub_1004FC9F8()
{
  qword_1023015E0 = (uint64_t)off_1021402A8;
  qword_1023015F8 = (uint64_t)&qword_1023015E0;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_1023015E0, (void *)&_mh_execute_header);
  qword_102301600 = (uint64_t)off_102140338;
  qword_102301618 = (uint64_t)&qword_102301600;
  __cxa_atexit((void (*)(void *))sub_1004F90EC, &qword_102301600, (void *)&_mh_execute_header);
  qword_102301620 = (uint64_t)off_1021403B8;
  qword_102301638 = (uint64_t)&qword_102301620;
  __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102301620, (void *)&_mh_execute_header);
  qword_102301640 = (uint64_t)off_102140448;
  qword_102301658 = (uint64_t)&qword_102301640;
  return __cxa_atexit((void (*)(void *))sub_1004F9138, &qword_102301640, (void *)&_mh_execute_header);
}

void sub_1004FD220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id location)
{
  id *v28;

  objc_destroyWeak(v28);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

_QWORD *sub_1004FD24C(uint64_t a1)
{
  NSObject *v2;
  _QWORD *result;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  if (qword_1022A0080 != -1)
    dispatch_once(&qword_1022A0080, &stru_102140790);
  v2 = qword_1022A0088;
  if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v10 = "-[CLEEDCoexMonitorThermal initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#EED2CXTH,%{public}s ThermalMitigation Disabled, returning with nominal.", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_102140790);
    v7 = 136446210;
    v8 = "-[CLEEDCoexMonitorThermal initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke";
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0088, 0, "#EED2CXTH,%{public}s ThermalMitigation Disabled, returning with nominal.", &v7, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "-[CLEEDCoexMonitorThermal initWithQueue:mitigationConfig:cachedCoexMetricData:eventCB:coexMetricUpdateCB:]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  result = *(_QWORD **)(a1 + 32);
  v4 = result[2];
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t, id, _QWORD))(v4 + 16))(v4, objc_msgSend(result, "getMitigationForCurrentlevel"), 0);
  return result;
}

id sub_1004FD424(uint64_t a1)
{
  id result;

  result = objc_loadWeak((id *)(a1 + 32));
  if (result)
    return _objc_msgSend(result, "queryThermalLevel");
  return result;
}

id sub_1004FD448(uint64_t a1)
{
  return _objc_msgSend(*(id *)(a1 + 32), "queryThermalLevel");
}

void sub_1004FE8B0(id a1)
{
  qword_1022A0088 = (uint64_t)os_log_create("com.apple.locationd.Position", "Emergency");
}

void sub_1004FEC7C()
{
  operator new();
}

void sub_1004FED3C()
{
  operator delete();
}

void sub_1004FEDC4(double **a1, uint64_t a2, double a3)
{
  double *v3;
  double *v4;
  double *v5;
  double v7;
  double v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  _QWORD *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  double *v25;
  double *v26;
  double *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _QWORD v32[4];
  double v33;
  double v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  _OWORD v41[5];
  uint64_t v42;

  v3 = *(double **)a2;
  *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
  v4 = *a1;
  v5 = a1[1];
  if (v5 != *a1)
  {
    v7 = v4[2] - a3 + 0.0;
    v8 = v7 * v4[5] / 3600.0 + 0.0;
    v33 = v8;
    v34 = v7;
    v9 = *((_OWORD *)v4 + 2);
    v10 = *((_QWORD *)v4 + 10);
    v11 = *((_OWORD *)v4 + 4);
    v38 = *((_OWORD *)v4 + 3);
    v39 = v11;
    v40 = v10;
    v37 = v9;
    v12 = *((_OWORD *)v4 + 1);
    v35 = *(_OWORD *)v4;
    v36 = v12;
    if (v7 >= 60.0)
    {
      v14 = (_QWORD *)(a2 + 16);
      v15 = *(double *)&v36;
      do
      {
        v16 = v7 + -60.0;
        v17 = v15 - (v7 + -60.0) + -60.0;
        v18 = v8 * 3600.0 / v7;
        if ((unint64_t)v3 >= *v14)
        {
          v19 = *(double **)a2;
          v20 = ((uint64_t)v3 - *(_QWORD *)a2) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_100259694();
          v22 = *v14 - (_QWORD)v19;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23)
          {
            v24 = (char *)sub_10028E224(a2 + 16, v23);
            v19 = *(double **)a2;
            v3 = *(double **)(a2 + 8);
          }
          else
          {
            v24 = 0;
          }
          v25 = (double *)&v24[16 * v20];
          *v25 = v17;
          v25[1] = v18;
          v26 = v25;
          if (v3 != v19)
          {
            do
            {
              *((_OWORD *)v26 - 1) = *((_OWORD *)v3 - 1);
              v26 -= 2;
              v3 -= 2;
            }
            while (v3 != v19);
            v19 = *(double **)a2;
          }
          v3 = v25 + 2;
          *(_QWORD *)a2 = v26;
          *(_QWORD *)(a2 + 8) = v25 + 2;
          *(_QWORD *)(a2 + 16) = &v24[16 * v23];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *v3 = v17;
          v3[1] = v18;
          v3 += 2;
          v8 = v33;
          v7 = v34;
          v16 = v34 + -60.0;
        }
        *(_QWORD *)(a2 + 8) = v3;
        v8 = v8 - v8 * 60.0 / v7;
        v33 = v8;
        v34 = v16;
        v7 = v16;
      }
      while (v16 >= 60.0);
      v4 = *a1;
      v5 = a1[1];
    }
    v27 = v4 + 11;
    v32[0] = &v34;
    v32[1] = &v33;
    v32[2] = &v35;
    v32[3] = a2;
    while (v27 != v5)
    {
      v28 = *((_OWORD *)v27 + 1);
      v41[0] = *(_OWORD *)v27;
      v41[1] = v28;
      v29 = *((_OWORD *)v27 + 2);
      v30 = *((_OWORD *)v27 + 3);
      v31 = *((_OWORD *)v27 + 4);
      v42 = *((_QWORD *)v27 + 10);
      v41[3] = v30;
      v41[4] = v31;
      v41[2] = v29;
      sub_1004FF038((uint64_t)v32, (uint64_t)v41);
      v27 += 11;
    }
  }
}

void sub_1004FF038(uint64_t a1, uint64_t a2)
{
  double v3;
  double v4;
  NSObject *v5;
  double v7;
  double v8;
  double v9;
  double *v10;
  double v11;
  uint64_t v12;
  double v13;
  double v14;
  double *v15;
  unint64_t v16;
  double *v17;
  double *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  double *v24;
  char *v25;
  double *v26;
  double *v27;
  double i;
  uint64_t v29;
  double v30;
  double v31;
  double *v32;
  unint64_t v33;
  double *v34;
  double *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  double *v41;
  double *v42;
  double *v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  const char *v49;
  uint8_t *v50;
  __int16 v51[8];
  uint8_t buf[1640];

  v3 = *(double *)(a2 + 16);
  v4 = *(double *)(*(_QWORD *)(a1 + 16) + 16);
  if (v3 >= v4)
  {
    v7 = v3 - v4;
    v8 = v7 + **(double **)a1;
    if (v8 >= 60.0)
    {
      v9 = v8 + -60.0;
      v10 = *(double **)(a1 + 8);
      v11 = *v10 + (v7 - (v8 + -60.0)) * *(double *)(a2 + 40) / 3600.0;
      *v10 = v11;
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(double *)(a2 + 16) - (v8 + -60.0) + -60.0;
      v14 = v11 * 3600.0 / 60.0;
      v15 = *(double **)(v12 + 8);
      v16 = *(_QWORD *)(v12 + 16);
      if ((unint64_t)v15 >= v16)
      {
        v18 = *(double **)v12;
        v19 = ((uint64_t)v15 - *(_QWORD *)v12) >> 4;
        v20 = v19 + 1;
        if ((unint64_t)(v19 + 1) >> 60)
LABEL_49:
          sub_100259694();
        v21 = v16 - (_QWORD)v18;
        if (v21 >> 3 > v20)
          v20 = v21 >> 3;
        if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
          v22 = 0xFFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
        {
          v23 = (char *)sub_10028E224(v12 + 16, v22);
          v18 = *(double **)v12;
          v15 = *(double **)(v12 + 8);
        }
        else
        {
          v23 = 0;
        }
        v24 = (double *)&v23[16 * v19];
        v25 = &v23[16 * v22];
        *v24 = v13;
        v24[1] = v14;
        v17 = v24 + 2;
        if (v15 != v18)
        {
          do
          {
            *((_OWORD *)v24 - 1) = *((_OWORD *)v15 - 1);
            v24 -= 2;
            v15 -= 2;
          }
          while (v15 != v18);
          v18 = *(double **)v12;
        }
        *(_QWORD *)v12 = v24;
        *(_QWORD *)(v12 + 8) = v17;
        *(_QWORD *)(v12 + 16) = v25;
        if (v18)
          operator delete(v18);
      }
      else
      {
        *v15 = v13;
        v15[1] = v14;
        v17 = v15 + 2;
      }
      *(_QWORD *)(v12 + 8) = v17;
      v26 = *(double **)a1;
      *v26 = v9;
      v27 = *(double **)(a1 + 8);
      *v27 = v9 * *(double *)(a2 + 40) / 3600.0;
      for (i = *v26; i >= 60.0; *v43 = i)
      {
        v29 = *(_QWORD *)(a1 + 24);
        v30 = *(double *)(a2 + 16) - (i + -60.0) + -60.0;
        v31 = *v27 * 3600.0 / i;
        v32 = *(double **)(v29 + 8);
        v33 = *(_QWORD *)(v29 + 16);
        if ((unint64_t)v32 >= v33)
        {
          v35 = *(double **)v29;
          v36 = ((uint64_t)v32 - *(_QWORD *)v29) >> 4;
          v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 60)
            goto LABEL_49;
          v38 = v33 - (_QWORD)v35;
          if (v38 >> 3 > v37)
            v37 = v38 >> 3;
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFF0)
            v39 = 0xFFFFFFFFFFFFFFFLL;
          else
            v39 = v37;
          if (v39)
          {
            v40 = (char *)sub_10028E224(v29 + 16, v39);
            v35 = *(double **)v29;
            v32 = *(double **)(v29 + 8);
          }
          else
          {
            v40 = 0;
          }
          v41 = (double *)&v40[16 * v36];
          *v41 = v30;
          v41[1] = v31;
          v42 = v41;
          if (v32 != v35)
          {
            do
            {
              *((_OWORD *)v42 - 1) = *((_OWORD *)v32 - 1);
              v42 -= 2;
              v32 -= 2;
            }
            while (v32 != v35);
            v35 = *(double **)v29;
          }
          v34 = v41 + 2;
          *(_QWORD *)v29 = v42;
          *(_QWORD *)(v29 + 8) = v41 + 2;
          *(_QWORD *)(v29 + 16) = &v40[16 * v39];
          if (v35)
            operator delete(v35);
        }
        else
        {
          *v32 = v30;
          v32[1] = v31;
          v34 = v32 + 2;
        }
        *(_QWORD *)(v29 + 8) = v34;
        v43 = *(double **)a1;
        v27 = *(double **)(a1 + 8);
        *v27 = *v27 + *v27 * -60.0 / **(double **)a1;
        i = *v43 + -60.0;
      }
    }
    else
    {
      **(double **)a1 = v8;
      **(double **)(a1 + 8) = **(double **)(a1 + 8) + v7 * *(double *)(a2 + 40) / 3600.0;
    }
    v44 = *(_QWORD *)(a1 + 16);
    v45 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v44 = *(_OWORD *)a2;
    *(_OWORD *)(v44 + 16) = v45;
    v46 = *(_OWORD *)(a2 + 32);
    v47 = *(_OWORD *)(a2 + 48);
    v48 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(v44 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(v44 + 48) = v47;
    *(_OWORD *)(v44 + 64) = v48;
    *(_OWORD *)(v44 + 32) = v46;
  }
  else
  {
    if (qword_10229FE10 != -1)
      dispatch_once(&qword_10229FE10, &stru_102140A50);
    v5 = qword_10229FE18;
    if (os_log_type_enabled((os_log_t)qword_10229FE18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "METMinutes,time rolled back", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE10 != -1)
        dispatch_once(&qword_10229FE10, &stru_102140A50);
      v51[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE18, 16, "METMinutes,time rolled back", v51, 2);
      v50 = (uint8_t *)v49;
      sub_100512490("Generic", 1, 0, 0, "auto CLMetMinuteEstimator::estimateMetMinutes(CLMotionTimeRange, std::vector<CLNatalieData> &, std::vector<CLMetMinute> &)::(anonymous class)::operator()(const CLNatalieData) const", "%s\n", v49);
      if (v50 != buf)
        free(v50);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8) = **(_QWORD **)(a1 + 24);
  }
}

void sub_1004FF4F8(id a1)
{
  qword_10229FE18 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Health");
}

void sub_1004FF524(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004FF57C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FF59C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1004FF5B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004FF5F4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004FF64C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FF66C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1004FF684(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004FF6C4(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1004FF71C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1004FF73C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_1004FF754(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1004FF838(id a1)
{
  qword_102301698 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLDistributedSensingServiceSilo"));
}

void sub_1004FFAE4(id a1)
{
  qword_1023016A8 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLVO2MaxCloudKitManagerSilo"));
}

void sub_1004FFB98(id a1)
{
  sub_100197040();
  if ((sub_1000C4240() & 1) != 0 || (sub_100197040(), sub_100195F08()))
    byte_1023016B8 = 1;
}

void sub_100500444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10050049C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onDataProtectionNotification:data:", a2, a3);
}

id sub_1005004AC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return _objc_msgSend(a4, "onFitnessTrackingNotification:data:", a2, a3);
}

void sub_10050099C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100501114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v12;
  va_list va;
  uint64_t v14;
  va_list va1;

  va_start(va1, a11);
  va_start(va, a11);
  v12 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100131740((id *)va1);
  _Unwind_Resume(a1);
}

void sub_100501154(uint64_t a1, xpc_activity_t activity)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint8_t *v7;
  xpc_object_t v8;
  int64_t int64;
  NSObject *v10;
  xpc_activity_state_t v11;
  xpc_activity_state_t v12;
  const char *v13;
  uint8_t *v14;
  xpc_activity_state_t v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  const char *v22;
  __int16 v23;
  xpc_activity_state_t v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  xpc_activity_state_t state;
  __int16 v31;
  uint64_t v32;

  if (xpc_activity_get_state(activity))
  {
    objc_msgSend(*(id *)(a1 + 32), "onSyncActivity:", activity);
    if (xpc_activity_get_state(activity) == 2 && !xpc_activity_set_state(activity, 4))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v4 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        v28 = "com.apple.vo2max.CloudKitManager";
        v29 = 2050;
        state = xpc_activity_get_state(activity);
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        v5 = qword_10229FEC8;
        v21 = 136446466;
        v22 = "com.apple.vo2max.CloudKitManager";
        v23 = 2050;
        v24 = xpc_activity_get_state(activity);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 17, "Failed to mark %{public}s activity as Continue. Current state is %{public}ld", &v21, 22);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
    }
  }
  else
  {
    v8 = xpc_activity_copy_criteria(activity);
    if (!v8)
      v8 = xpc_dictionary_create(0, 0, 0);
    int64 = xpc_dictionary_get_int64(v8, XPC_ACTIVITY_DELAY);
    if (int64 == *(_QWORD *)(a1 + 40))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v10 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446466;
        v28 = "com.apple.vo2max.CloudKitManager";
        v29 = 2050;
        state = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s activity already scheduled with a delay of %{public}lld seconds", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        v12 = *(_QWORD *)(a1 + 40);
        v21 = 136446466;
        v22 = "com.apple.vo2max.CloudKitManager";
        v23 = 2050;
        v24 = v12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "XPC_CHECK_IN: %{public}s activity already scheduled with a delay of %{public}lld seconds", &v21, 22);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
    else
    {
      v15 = int64;
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v16 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 136446722;
        v28 = "com.apple.vo2max.CloudKitManager";
        v29 = 2050;
        state = v15;
        v31 = 2050;
        v32 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        v18 = *(_QWORD *)(a1 + 40);
        v21 = 136446722;
        v22 = "com.apple.vo2max.CloudKitManager";
        v23 = 2050;
        v24 = v15;
        v25 = 2050;
        v26 = v18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "XPC_CHECK_IN: %{public}s: Overwriting previous delay (%{public}lld) with a new delay of %{public}lld seconds", &v21, 32);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager setUpSyncActivity]_block_invoke", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_DELAY, *(_QWORD *)(a1 + 40));
      xpc_dictionary_set_int64(v8, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_HOUR);
      xpc_dictionary_set_string(v8, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_REQUIRES_CLASS_B, 1);
      xpc_dictionary_set_BOOL(v8, XPC_ACTIVITY_ALLOW_BATTERY, 1);
      xpc_activity_set_criteria(activity, v8);
    }
    xpc_release(v8);
  }
}

void sub_100501B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005026CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100502754(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "validateAccount");
}

void sub_1005027BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD block[7];

  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100502840;
  block[3] = &unk_10212BBA8;
  block[4] = a3;
  block[5] = a2;
  block[6] = *(_QWORD *)(a1 + 32);
  dispatch_async(v6, block);
}

void sub_100502840(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  void *v8;
  NSObject *v9;
  id v10;
  uint64_t v11;
  id v12;
  const char *v13;
  NSObject *v14;
  id v15;
  uint64_t v16;
  id v17;
  uint8_t *v18;
  _QWORD v19[5];
  int v20;
  id v21;
  uint8_t buf[4];
  id v23;

  if (!*(_QWORD *)(a1 + 32))
  {
    if (objc_msgSend(*(id *)(a1 + 40), "accountStatus") == (id)1)
    {
      if ((objc_msgSend(*(id *)(a1 + 40), "supportsDeviceToDeviceEncryption") & 1) != 0)
      {
        v7 = *(_QWORD *)(a1 + 48);
        v8 = *(void **)(v7 + 208);
        v19[0] = _NSConcreteStackBlock;
        v19[1] = 3221225472;
        v19[2] = sub_100502CDC;
        v19[3] = &unk_102140C40;
        v19[4] = v7;
        objc_msgSend(v8, "fetchUserRecordIDWithCompletionHandler:", v19);
        return;
      }
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v14 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
      {
        v15 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 208), "containerIdentifier");
        *(_DWORD *)buf = 138543362;
        v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "iCloud account for container %{public}@ doesn't support device to device encryption", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_27;
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v16 = qword_10229FEC8;
      v17 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 208), "containerIdentifier");
      v20 = 138543362;
      v21 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 16, "iCloud account for container %{public}@ doesn't support device to device encryption", &v20, 12);
    }
    else
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v9 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
      {
        v10 = objc_msgSend(*(id *)(a1 + 40), "accountStatus");
        *(_DWORD *)buf = 134349056;
        v23 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "iCloud account is not available, status: %{public}ld", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_27;
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v11 = qword_10229FEC8;
      v12 = objc_msgSend(*(id *)(a1 + 40), "accountStatus");
      v20 = 134349056;
      v21 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 16, "iCloud account is not available, status: %{public}ld", &v20, 12);
    }
    v18 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v13);
    if (v18 != buf)
      free(v18);
LABEL_27:
    objc_msgSend(*(id *)(a1 + 48), "stopSyncing:", 0);
    return;
  }
  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102140CF0);
  v2 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
  {
    v3 = *(void **)(a1 + 32);
    *(_DWORD *)buf = 138543362;
    v23 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error determining account status: %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v4 = *(void **)(a1 + 32);
    v20 = 138543362;
    v21 = v4;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "Error determining account status: %{public}@", &v20, 12);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

void sub_100502CDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];

  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100502D60;
  block[3] = &unk_10212BBA8;
  v7 = *(_QWORD *)(a1 + 32);
  block[4] = a3;
  block[5] = v7;
  block[6] = a2;
  dispatch_async(v6, block);
}

void sub_100502D60(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint8_t *v6;
  id v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  __int128 v20;
  uint8_t buf[4];
  uint64_t v22;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v2 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      v3 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v22 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "Error getting user record: %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v4 = *(_QWORD *)(a1 + 32);
      LODWORD(v20) = 138543362;
      *(_QWORD *)((char *)&v20 + 4) = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "Error getting user record: %{public}@", &v20, 12, v20);
LABEL_10:
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v5);
      if (v6 != buf)
        free(v6);
      return;
    }
    return;
  }
  v7 = objc_msgSend(*(id *)(a1 + 40), "getUserRecordIDName");
  if (!v7)
    goto LABEL_27;
  if ((objc_msgSend(v7, "isEqual:", objc_msgSend(*(id *)(a1 + 48), "recordName")) & 1) == 0)
  {
    if (objc_msgSend(*(id *)(a1 + 40), "shouldKeepLocalDataOnAccountChange"))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v8 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "iCloud account has changed. Due to testing override, will not delete local VO2Max data but will still delete sync engine metadata.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        LOWORD(v20) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "iCloud account has changed. Due to testing override, will not delete local VO2Max data but will still delete sync engine metadata.", &v20, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      objc_msgSend(*(id *)(a1 + 40), "stopSyncing:", 1);
    }
    else
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v9 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "[CKManager] iCloud account has changed. Deleting sync engine metadata", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        LOWORD(v20) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "[CKManager] iCloud account has changed. Deleting sync engine metadata", &v20, 2);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      objc_msgSend(*(id *)(a1 + 40), "stopSyncing:", 1);
      objc_msgSend(*(id *)(a1 + 40), "deleteLocalVO2MaxData");
    }
LABEL_27:
    objc_msgSend(*(id *)(a1 + 40), "setUserRecordIDName:", objc_msgSend(*(id *)(a1 + 48), "recordName"));
  }
  if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 216))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v10 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Will attempt to initialize the sync engine if/after device has been unlocked.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Will attempt to initialize the sync engine if/after device has been unlocked.", &v20, v19);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager validateAccount]_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 64);
    if (v11)
    {
      objc_msgSend(*(id *)(v11 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v11 + 8), 0, 0);
      return;
    }
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v12 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Attempting registration when fDataProtectionClient is not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      LOWORD(v20) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "Attempting registration when fDataProtectionClient is not initialized", &v20, v19, v20);
      goto LABEL_10;
    }
  }
}

void sub_1005037F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  _QWORD block[7];

  v6 = objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "universe"), "silo"), "queue");
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100503874;
  block[3] = &unk_10212BBA8;
  v7 = *(_QWORD *)(a1 + 32);
  block[4] = a3;
  block[5] = v7;
  block[6] = a2;
  dispatch_async(v6, block);
}

void sub_100503874(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  int v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  id v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *i;
  id v15;
  uint64_t v16;
  NSObject *v17;
  void *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  uint8_t *v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[128];
  int v33;
  id v34;
  __int16 v35;
  uint64_t v36;
  uint8_t buf[4];
  id v38;
  __int16 v39;
  uint64_t v40;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v2 = qword_10229FEC8;
    if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_ERROR))
    {
      v3 = *(void **)(a1 + 32);
      *(_DWORD *)buf = 138543362;
      v38 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "[CKManager] Error fetching record zones: %{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v18 = *(void **)(a1 + 32);
      v33 = 138543362;
      v34 = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 16, "[CKManager] Error fetching record zones: %{public}@", &v33, 12);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 0, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    v4 = a1 + 40;
    v5 = 3;
  }
  else
  {
    if (*(_QWORD *)(a1 + 48))
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v6 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
      {
        v7 = objc_msgSend(*(id *)(a1 + 48), "count");
        v8 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 134349314;
        v38 = v7;
        v39 = 2112;
        v40 = v8;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[CKManager] Deleting %{public}lu zones: %@", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        v21 = qword_10229FEC8;
        v22 = objc_msgSend(*(id *)(a1 + 48), "count");
        v23 = *(_QWORD *)(a1 + 48);
        v33 = 134349314;
        v34 = v22;
        v35 = 2112;
        v36 = v23;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 0, "[CKManager] Deleting %{public}lu zones: %@", &v33, 22);
        v25 = (uint8_t *)v24;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v24);
        if (v25 != buf)
          free(v25);
      }
      v9 = objc_msgSend(objc_alloc((Class)NSMutableArray), "initWithCapacity:", objc_msgSend(*(id *)(a1 + 48), "count"));
      v28 = 0u;
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v10 = *(void **)(a1 + 48);
      v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
      if (v11)
      {
        v12 = v11;
        v13 = *(_QWORD *)v29;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(_QWORD *)v29 != v13)
              objc_enumerationMutation(v10);
            v15 = objc_msgSend(objc_alloc((Class)CKSyncEnginePendingZoneDelete), "initWithZoneID:", objc_msgSend(*(id *)(*((_QWORD *)&v28 + 1) + 8 * (_QWORD)i), "zoneID"));
            objc_msgSend(v9, "addObject:", v15);

          }
          v12 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v28, v32, 16);
        }
        while (v12);
      }
      v16 = *(_QWORD *)(a1 + 40);
      v4 = a1 + 40;
      objc_msgSend(objc_msgSend(*(id *)(v16 + 216), "state"), "addPendingDatabaseChanges:", v9);

    }
    else
    {
      if (qword_10229FEC0 != -1)
        dispatch_once(&qword_10229FEC0, &stru_102140CF0);
      v17 = qword_10229FEC8;
      if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "[CKManager] No zones to delete", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FEC0 != -1)
          dispatch_once(&qword_10229FEC0, &stru_102140CF0);
        LOWORD(v33) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 2, "[CKManager] No zones to delete", &v33, 2);
        v27 = (uint8_t *)v26;
        sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager deleteCloudKitRecords]_block_invoke", "%s\n", v26);
        if (v27 != buf)
          free(v27);
      }
      v4 = a1 + 40;
    }
    v5 = 4;
  }
  *(_DWORD *)(*(_QWORD *)v4 + 200) = v5;
}

void sub_100503EA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100504134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100504C78(id a1, NSError *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  NSError *v7;
  uint8_t buf[4];
  NSError *v9;

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102140CF0);
  v3 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sync engine fetch complete for output records: %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v6 = 138543362;
    v7 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Sync engine fetch complete for output records: %{public}@", &v6, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager initializeSyncEngine]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_100504E20(id a1, NSError *a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  int v6;
  NSError *v7;
  uint8_t buf[4];
  NSError *v9;

  if (qword_10229FEC0 != -1)
    dispatch_once(&qword_10229FEC0, &stru_102140CF0);
  v3 = qword_10229FEC8;
  if (os_log_type_enabled((os_log_t)qword_10229FEC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Sync engine fetch complete for input records: %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FEC0 != -1)
      dispatch_once(&qword_10229FEC0, &stru_102140CF0);
    v6 = 138543362;
    v7 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FEC8, 0, "Sync engine fetch complete for input records: %{public}@", &v6, 12);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "-[CLVO2MaxCloudKitManager initializeSyncEngine]_block_invoke", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
}

void sub_100505FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100506018(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 16)) >> 31;
}

BOOL sub_100506038(uint64_t a1, uint64_t a2)
{
  return uuid_compare((const unsigned __int8 *)(a1 + 16), (const unsigned __int8 *)(a2 + 16)) == 0;
}

void sub_100506B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100507A44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_1005094DC(uint64_t a1)
{
  _QWORD v3[31];
  _QWORD v4[31];

  v3[0] = CFSTR("phoneSyncEngineEnabled");
  v4[0] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 216) != 0);
  v3[1] = CFSTR("phoneOutputSaveQueuedCount");
  v4[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 116));
  v3[2] = CFSTR("phoneOutputSaveAttemptedCount");
  v4[2] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 120));
  v3[3] = CFSTR("phoneOutputSaveSuccessCount");
  v4[3] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 124));
  v3[4] = CFSTR("phoneOutputSaveFailureCount");
  v4[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 128));
  v3[5] = CFSTR("phoneOutputFetchSuccessCount");
  v4[5] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 132));
  v3[6] = CFSTR("phoneOutputFetchFailureCount");
  v4[6] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 136));
  v3[7] = CFSTR("phoneInputSaveQueuedCount");
  v4[7] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 140));
  v3[8] = CFSTR("phoneInputSaveAttemptedCount");
  v4[8] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 144));
  v3[9] = CFSTR("phoneInputSaveSuccessCount");
  v4[9] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 148));
  v3[10] = CFSTR("phoneInputSaveFailureCount");
  v4[10] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 152));
  v3[11] = CFSTR("phoneInputFetchSuccessCount");
  v4[11] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 156));
  v3[12] = CFSTR("phoneInputFetchFailureCount");
  v4[12] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 160));
  v3[13] = CFSTR("phoneForcedFetchRequestedCount");
  v4[13] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(*(_QWORD *)(a1 + 32) + 164));
  v3[14] = CFSTR("phoneSecondsOfDataCollection");
  v4[14] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(*(_QWORD *)(a1 + 32) + 168));
  v3[15] = CFSTR("numPairedWatches");
  v4[15] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 104));
  v3[16] = CFSTR("watchSyncEngineEnabled");
  v4[16] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(unsigned __int8 *)(a1 + 40));
  v3[17] = CFSTR("watchOutputSaveQueuedCount");
  v4[17] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 44));
  v3[18] = CFSTR("watchOutputSaveAttemptedCount");
  v4[18] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 48));
  v3[19] = CFSTR("watchOutputSaveSuccessCount");
  v4[19] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 52));
  v3[20] = CFSTR("watchOutputSaveFailureCount");
  v4[20] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 56));
  v3[21] = CFSTR("watchOutputFetchSuccessCount");
  v4[21] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 60));
  v3[22] = CFSTR("watchOutputFetchFailureCount");
  v4[22] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 64));
  v3[23] = CFSTR("watchInputSaveQueuedCount");
  v4[23] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 68));
  v3[24] = CFSTR("watchInputSaveAttemptedCount");
  v4[24] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 72));
  v3[25] = CFSTR("watchInputSaveSuccessCount");
  v4[25] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 76));
  v3[26] = CFSTR("watchInputSaveFailureCount");
  v4[26] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 80));
  v3[27] = CFSTR("watchInputFetchSuccessCount");
  v4[27] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 84));
  v3[28] = CFSTR("watchInputFetchFailureCount");
  v4[28] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 88));
  v3[29] = CFSTR("watchForcedFetchRequestedCount");
  v4[29] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a1 + 92));
  v3[30] = CFSTR("watchSecondsOfDataCollection");
  v4[30] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 96));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v4, v3, 31);
}

void sub_10050C41C(id a1)
{
  qword_10229FEC8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "VO2Max");
}

Class sub_10050C448()
{
  Class result;

  if (qword_1023016D0 != -1)
    dispatch_once(&qword_1023016D0, &stru_102140D10);
  result = objc_getClass("NRPairedDeviceRegistry");
  qword_1023016C8 = (uint64_t)result;
  off_1022A2738 = sub_10050C4A4;
  return result;
}

uint64_t sub_10050C4A4()
{
  return qword_1023016C8;
}

void sub_10050C4B0(id a1)
{
  qword_1023016D8 = (uint64_t)dlopen("/System/Library/PrivateFrameworks/NanoRegistry.framework/NanoRegistry", 2);
}

_QWORD *sub_10050C4D8@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x1C0uLL);
  result = sub_10050C530(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10050C51C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10050C530(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102140D40;
  sub_1009D5680(a1 + 3, *a2);
  return a1;
}

void sub_10050C56C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10050C580(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102140D40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10050C594(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102140D40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10050C5C8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

_QWORD *sub_10050C5D8@<X0>(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x70uLL);
  result = sub_10050C630(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_10050C61C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_10050C630(_QWORD *a1, uint64_t *a2)
{
  char v4;

  a1[2] = 0;
  *a1 = off_102140D90;
  a1[1] = 0;
  sub_10050C704((uint64_t)&v4, (uint64_t)(a1 + 3), a2);
  return a1;
}

void sub_10050C67C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10050C690(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102140D90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10050C6A4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102140D90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_10050C6D8(uint64_t a1)
{
  uint64_t v1;

  v1 = a1 + 24;
  sub_10050C79C((_QWORD *)(a1 + 64));
  return sub_100261F44(v1);
}

void sub_10050C704(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v3 = (std::__shared_weak_count *)a3[1];
  v9 = *a3;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  sub_101108E08(a2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_10050C788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10050C79C(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 18;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 36;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_10050C830(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_101412C2C(a2 + 1320);
    sub_100CFDBB8(a2 + 984);
    sub_100CF57B8(a2 + 496);
    sub_101071774(a2);
    operator delete();
  }
}

void sub_10050C884(__n128 *a1, __n128 *a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4, char a5)
{
  __n128 *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 *v16;
  uint64_t v17;
  __n128 *v18;
  __n128 *v19;
  __n128 *v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  unsigned int (*v30)(_QWORD, _QWORD);
  __n128 v31;
  __n128 v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __int128 *v37;
  char v38;
  BOOL v39;
  unsigned int (*v40)(_QWORD, _QWORD);
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  __n128 v54;
  _OWORD v55[5];
  _OWORD v56[5];
  _OWORD v57[5];
  _OWORD v58[5];
  __n128 v59;
  __n128 v60;
  __n128 v61;
  __n128 v62;
  __n128 v63;

uint64_t sub_10050CC54(uint64_t result, _OWORD *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  uint64_t (*v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  uint64_t (*v22)(_QWORD, _QWORD);
  __int128 v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[5];
  _OWORD v29[5];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[5];
  _OWORD v36[5];

  if ((_OWORD *)result != a2)
  {
    v4 = (_OWORD *)result;
    v5 = (_OWORD *)(result + 80);
    if ((_OWORD *)(result + 80) != a2)
    {
      v7 = 0;
      v8 = (_OWORD *)result;
      do
      {
        v9 = v8;
        v8 = v5;
        v10 = *a3;
        v11 = v8[3];
        v36[2] = v8[2];
        v36[3] = v11;
        v36[4] = v8[4];
        v12 = v8[1];
        v36[0] = *v8;
        v36[1] = v12;
        v14 = v9[1];
        v13 = v9[2];
        v15 = v9[4];
        v35[3] = v9[3];
        v35[4] = v15;
        v35[1] = v14;
        v35[2] = v13;
        v35[0] = *v9;
        result = v10(v36, v35);
        if ((_DWORD)result)
        {
          v16 = v8[3];
          v32 = v8[2];
          v33 = v16;
          v34 = v8[4];
          v17 = v8[1];
          v30 = *v8;
          v31 = v17;
          v18 = v7;
          while (1)
          {
            v19 = (_OWORD *)((char *)v4 + v18);
            v20 = *(_OWORD *)((char *)v4 + v18 + 48);
            v19[7] = *(_OWORD *)((char *)v4 + v18 + 32);
            v19[8] = v20;
            v19[9] = *(_OWORD *)((char *)v4 + v18 + 64);
            v21 = *(_OWORD *)((char *)v4 + v18 + 16);
            v19[5] = *(_OWORD *)((char *)v4 + v18);
            v19[6] = v21;
            if (!v18)
              break;
            v22 = *a3;
            v29[2] = v32;
            v29[3] = v33;
            v29[4] = v34;
            v29[0] = v30;
            v29[1] = v31;
            v23 = *(v19 - 2);
            v28[2] = *(v19 - 3);
            v28[3] = v23;
            v28[4] = *(v19 - 1);
            v24 = *(v19 - 4);
            v28[0] = *(v19 - 5);
            v28[1] = v24;
            result = v22(v29, v28);
            v18 -= 80;
            if ((result & 1) == 0)
            {
              v25 = (_OWORD *)((char *)v4 + v18 + 80);
              goto LABEL_10;
            }
          }
          v25 = v4;
LABEL_10:
          v26 = v33;
          v25[2] = v32;
          v25[3] = v26;
          v25[4] = v34;
          v27 = v31;
          *v25 = v30;
          v25[1] = v27;
        }
        v5 = v8 + 5;
        v7 += 80;
      }
      while (v8 + 5 != a2);
    }
  }
  return result;
}

uint64_t sub_10050CDE8(uint64_t result, _OWORD *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  _OWORD *v4;
  _OWORD *i;
  _OWORD *v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD *v16;
  _OWORD *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t (*v22)(_QWORD, _QWORD);
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _OWORD v28[5];
  _OWORD v29[5];
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  _OWORD v35[5];
  _OWORD v36[5];

  if ((_OWORD *)result != a2)
  {
    v4 = (_OWORD *)result;
    for (i = (_OWORD *)(result + 80); v4 + 5 != a2; i = v4 + 5)
    {
      v7 = v4;
      v4 = i;
      v8 = *a3;
      v9 = v4[3];
      v36[2] = v4[2];
      v36[3] = v9;
      v36[4] = v4[4];
      v10 = v4[1];
      v36[0] = *v4;
      v36[1] = v10;
      v12 = v7[1];
      v11 = v7[2];
      v13 = v7[4];
      v35[3] = v7[3];
      v35[4] = v13;
      v35[1] = v12;
      v35[2] = v11;
      v35[0] = *v7;
      result = v8(v36, v35);
      if ((_DWORD)result)
      {
        v14 = v4[3];
        v32 = v4[2];
        v33 = v14;
        v34 = v4[4];
        v15 = v4[1];
        v30 = *v4;
        v31 = v15;
        v16 = v4;
        do
        {
          v17 = v16 - 5;
          v18 = *(v16 - 4);
          v19 = *(v16 - 2);
          v20 = *(v16 - 1);
          v16[2] = *(v16 - 3);
          v16[3] = v19;
          v16[4] = v20;
          v21 = *(v16 - 6);
          *v16 = *(v16 - 5);
          v16[1] = v18;
          v22 = *a3;
          v29[2] = v32;
          v29[3] = v33;
          v29[4] = v34;
          v29[0] = v30;
          v29[1] = v31;
          v23 = *(v16 - 10);
          v24 = *(v16 - 9);
          v25 = *(v16 - 8);
          v28[3] = *(v16 - 7);
          v28[4] = v21;
          v28[1] = v24;
          v28[2] = v25;
          v28[0] = v23;
          result = v22(v29, v28);
          v16 = v17;
        }
        while ((result & 1) != 0);
        v26 = v33;
        v17[2] = v32;
        v17[3] = v26;
        v17[4] = v34;
        v27 = v31;
        *v17 = v30;
        v17[1] = v27;
      }
    }
  }
  return result;
}

uint64_t sub_10050CF50(_OWORD *a1, _OWORD *a2, _OWORD *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  unsigned int (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  char v13;
  unsigned int (*v14)(_QWORD, _QWORD);
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int (*v41)(_QWORD, _QWORD);
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  unsigned int (*v65)(_QWORD, _QWORD);
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _OWORD v80[5];
  _OWORD v81[5];
  _OWORD v82[5];
  _OWORD v83[5];
  _OWORD v84[5];
  _OWORD v85[5];
  _OWORD v86[5];
  _OWORD v87[5];
  _OWORD v88[5];
  _OWORD v89[5];
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;

  v8 = *a4;
  v9 = a2[3];
  v89[2] = a2[2];
  v89[3] = v9;
  v89[4] = a2[4];
  v10 = a2[1];
  v89[0] = *a2;
  v89[1] = v10;
  v11 = a1[3];
  v88[2] = a1[2];
  v88[3] = v11;
  v88[4] = a1[4];
  v12 = a1[1];
  v88[0] = *a1;
  v88[1] = v12;
  v13 = v8(v89, v88);
  v14 = *a4;
  if ((v13 & 1) != 0)
  {
    v15 = a3[3];
    v83[2] = a3[2];
    v83[3] = v15;
    v83[4] = a3[4];
    v16 = a3[1];
    v83[0] = *a3;
    v83[1] = v16;
    v17 = a2[3];
    v82[2] = a2[2];
    v82[3] = v17;
    v82[4] = a2[4];
    v18 = a2[1];
    v82[0] = *a2;
    v82[1] = v18;
    if (v14(v83, v82))
    {
      v19 = a1[3];
      v92 = a1[2];
      v93 = v19;
      v94 = a1[4];
      v20 = a1[1];
      v90 = *a1;
      v91 = v20;
      *a1 = *a3;
      v21 = a3[4];
      v23 = a3[1];
      v22 = a3[2];
      a1[3] = a3[3];
      a1[4] = v21;
      a1[1] = v23;
      a1[2] = v22;
      v24 = v94;
      v25 = v92;
      a3[3] = v93;
      a3[4] = v24;
      a3[2] = v25;
      v26 = v90;
      v27 = v91;
      result = 1;
LABEL_9:
      *a3 = v26;
      a3[1] = v27;
      return result;
    }
    v57 = a1[3];
    v92 = a1[2];
    v93 = v57;
    v94 = a1[4];
    v58 = a1[1];
    v90 = *a1;
    v91 = v58;
    *a1 = *a2;
    v59 = a2[4];
    v61 = a2[1];
    v60 = a2[2];
    a1[3] = a2[3];
    a1[4] = v59;
    a1[1] = v61;
    a1[2] = v60;
    v62 = v94;
    v63 = v92;
    a2[3] = v93;
    a2[4] = v62;
    v64 = v91;
    *a2 = v90;
    a2[1] = v64;
    a2[2] = v63;
    v65 = *a4;
    v67 = *a3;
    v66 = a3[1];
    v68 = a3[4];
    v81[3] = a3[3];
    v81[4] = v68;
    v69 = a3[2];
    v81[1] = v66;
    v81[2] = v69;
    v70 = *a2;
    v71 = a2[1];
    v72 = a2[3];
    v80[4] = a2[4];
    v81[0] = v67;
    v80[2] = a2[2];
    v80[3] = v72;
    v80[0] = v70;
    v80[1] = v71;
    if (v65(v81, v80))
    {
      v73 = a2[3];
      v92 = a2[2];
      v93 = v73;
      v94 = a2[4];
      v74 = a2[1];
      v90 = *a2;
      v91 = v74;
      *a2 = *a3;
      v75 = a3[4];
      v77 = a3[1];
      v76 = a3[2];
      a2[3] = a3[3];
      a2[4] = v75;
      a2[1] = v77;
      a2[2] = v76;
      v78 = v94;
      v79 = v92;
      a3[3] = v93;
      a3[4] = v78;
      a3[2] = v79;
      v26 = v90;
      v27 = v91;
      result = 2;
      goto LABEL_9;
    }
  }
  else
  {
    v29 = a3[3];
    v87[2] = a3[2];
    v87[3] = v29;
    v87[4] = a3[4];
    v30 = a3[1];
    v87[0] = *a3;
    v87[1] = v30;
    v31 = a2[3];
    v86[2] = a2[2];
    v86[3] = v31;
    v86[4] = a2[4];
    v32 = a2[1];
    v86[0] = *a2;
    v86[1] = v32;
    result = ((uint64_t (*)(_OWORD *, _OWORD *))v14)(v87, v86);
    if (!(_DWORD)result)
      return result;
    v33 = a2[3];
    v92 = a2[2];
    v93 = v33;
    v94 = a2[4];
    v34 = a2[1];
    v90 = *a2;
    v91 = v34;
    *a2 = *a3;
    v35 = a3[4];
    v37 = a3[1];
    v36 = a3[2];
    a2[3] = a3[3];
    a2[4] = v35;
    a2[1] = v37;
    a2[2] = v36;
    v38 = v94;
    v39 = v92;
    a3[3] = v93;
    a3[4] = v38;
    v40 = v91;
    *a3 = v90;
    a3[1] = v40;
    a3[2] = v39;
    v41 = *a4;
    v43 = *a2;
    v42 = a2[1];
    v44 = a2[4];
    v85[3] = a2[3];
    v85[4] = v44;
    v45 = a2[2];
    v85[1] = v42;
    v85[2] = v45;
    v46 = *a1;
    v47 = a1[1];
    v48 = a1[3];
    v84[4] = a1[4];
    v85[0] = v43;
    v84[2] = a1[2];
    v84[3] = v48;
    v84[0] = v46;
    v84[1] = v47;
    if (v41(v85, v84))
    {
      v49 = a1[3];
      v92 = a1[2];
      v93 = v49;
      v94 = a1[4];
      v50 = a1[1];
      v90 = *a1;
      v91 = v50;
      *a1 = *a2;
      v51 = a2[4];
      v53 = a2[1];
      v52 = a2[2];
      a1[3] = a2[3];
      a1[4] = v51;
      a1[1] = v53;
      a1[2] = v52;
      v54 = v94;
      v55 = v92;
      a2[3] = v93;
      a2[4] = v54;
      v56 = v91;
      result = 2;
      *a2 = v90;
      a2[1] = v56;
      a2[2] = v55;
      return result;
    }
  }
  return 1;
}

_OWORD *sub_10050D284(_OWORD *a1, _OWORD *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  _OWORD *v4;
  __int128 v6;
  __int128 v7;
  uint64_t (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t (*v15)(_QWORD, _QWORD);
  __int128 v16;
  __int128 v17;
  char v18;
  _OWORD *v19;
  uint64_t (*v20)(_QWORD, _QWORD);
  __int128 v21;
  __int128 v22;
  int v23;
  _OWORD *v24;
  uint64_t (*v25)(_QWORD, _QWORD);
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unsigned int (*v41)(_QWORD, _QWORD);
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t (*v46)(_QWORD, _QWORD);
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v55[5];
  _OWORD v56[5];
  _OWORD v57[5];
  _OWORD v58[5];
  _OWORD v59[5];
  _OWORD v60[5];
  _OWORD v61[5];
  _OWORD v62[5];
  _OWORD v63[5];
  _OWORD v64[5];
  _OWORD v65[5];
  _OWORD v66[5];
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;

  v4 = a2;
  v6 = a1[3];
  v69 = a1[2];
  v70 = v6;
  v71 = a1[4];
  v7 = a1[1];
  v67 = *a1;
  v68 = v7;
  v8 = *a3;
  v66[2] = v69;
  v66[3] = v6;
  v66[4] = v71;
  v66[0] = v67;
  v66[1] = v7;
  v9 = *(a2 - 5);
  v10 = *(a2 - 4);
  v11 = *(a2 - 3);
  v12 = *(a2 - 1);
  v65[3] = *(a2 - 2);
  v65[4] = v12;
  v65[1] = v10;
  v65[2] = v11;
  v65[0] = v9;
  if ((v8(v66, v65) & 1) != 0)
  {
    v13 = a1;
    do
    {
      v14 = v13 + 5;
      v15 = *a3;
      v64[2] = v69;
      v64[3] = v70;
      v64[4] = v71;
      v64[0] = v67;
      v64[1] = v68;
      v16 = v13[8];
      v63[2] = v13[7];
      v63[3] = v16;
      v63[4] = v13[9];
      v17 = v13[6];
      v63[0] = v13[5];
      v63[1] = v17;
      v18 = v15(v64, v63);
      v13 = v14;
    }
    while ((v18 & 1) == 0);
  }
  else
  {
    v19 = a1 + 5;
    do
    {
      v14 = v19;
      if (v19 >= v4)
        break;
      v20 = *a3;
      v62[2] = v69;
      v62[3] = v70;
      v62[4] = v71;
      v62[0] = v67;
      v62[1] = v68;
      v21 = v14[3];
      v61[2] = v14[2];
      v61[3] = v21;
      v61[4] = v14[4];
      v22 = v14[1];
      v61[0] = *v14;
      v61[1] = v22;
      v23 = v20(v62, v61);
      v19 = v14 + 5;
    }
    while (!v23);
  }
  if (v14 >= v4)
  {
    v24 = v4;
  }
  else
  {
    do
    {
      v24 = v4 - 5;
      v25 = *a3;
      v60[2] = v69;
      v60[3] = v70;
      v60[4] = v71;
      v60[0] = v67;
      v60[1] = v68;
      v26 = *(v4 - 2);
      v59[2] = *(v4 - 3);
      v59[3] = v26;
      v59[4] = *(v4 - 1);
      v27 = *(v4 - 4);
      v59[0] = *(v4 - 5);
      v59[1] = v27;
      v4 -= 5;
    }
    while ((v25(v60, v59) & 1) != 0);
  }
  while (v14 < v24)
  {
    v72 = *v14;
    v28 = v14[1];
    v29 = v14[2];
    v30 = v14[4];
    v75 = v14[3];
    v76 = v30;
    v73 = v28;
    v74 = v29;
    v31 = v24[4];
    v33 = v24[1];
    v32 = v24[2];
    v14[3] = v24[3];
    v14[4] = v31;
    v14[1] = v33;
    v14[2] = v32;
    *v14 = *v24;
    v34 = v76;
    v36 = v73;
    v35 = v74;
    v24[3] = v75;
    v24[4] = v34;
    v24[1] = v36;
    v24[2] = v35;
    *v24 = v72;
    do
    {
      v58[2] = v69;
      v58[3] = v70;
      v58[4] = v71;
      v58[0] = v67;
      v58[1] = v68;
      v38 = v14[6];
      v37 = v14[7];
      v39 = v14[9];
      v57[3] = v14[8];
      v57[4] = v39;
      v57[1] = v38;
      v57[2] = v37;
      v40 = v14[5];
      v14 += 5;
      v41 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v57[0] = v40;
    }
    while (!v41(v58, v57));
    do
    {
      v56[2] = v69;
      v56[3] = v70;
      v56[4] = v71;
      v56[0] = v67;
      v56[1] = v68;
      v43 = *(v24 - 4);
      v42 = *(v24 - 3);
      v44 = *(v24 - 1);
      v55[3] = *(v24 - 2);
      v55[4] = v44;
      v55[1] = v43;
      v55[2] = v42;
      v45 = *(v24 - 5);
      v24 -= 5;
      v46 = *a3;
      v55[0] = v45;
    }
    while ((v46(v56, v55) & 1) != 0);
  }
  v47 = v14 - 5;
  if (v14 - 5 != a1)
  {
    *a1 = *v47;
    v48 = *(v14 - 4);
    v49 = *(v14 - 3);
    v50 = *(v14 - 1);
    a1[3] = *(v14 - 2);
    a1[4] = v50;
    a1[1] = v48;
    a1[2] = v49;
  }
  *v47 = v67;
  v51 = v68;
  v52 = v69;
  v53 = v71;
  *(v14 - 2) = v70;
  *(v14 - 1) = v53;
  *(v14 - 4) = v51;
  *(v14 - 3) = v52;
  return v14;
}

__int128 *sub_10050D564(__int128 *a1, __int128 *a2, uint64_t (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t (*v9)(_QWORD, _QWORD);
  __int128 v10;
  __int128 v11;
  __int128 *v12;
  __int128 *v13;
  __int128 *v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  __int128 v16;
  __int128 v17;
  uint64_t (*v18)(_QWORD, _QWORD);
  __int128 v19;
  __int128 v20;
  __int128 *v21;
  __int128 *v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t (*v35)(_QWORD, _QWORD);
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int (*v40)(_QWORD, _QWORD);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v48[5];
  _OWORD v49[5];
  _OWORD v50[5];
  _OWORD v51[5];
  _OWORD v52[5];
  _OWORD v53[5];
  _OWORD v54[5];
  _OWORD v55[5];
  _OWORD v56[5];
  _OWORD v57[5];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;

  v6 = 0;
  v7 = a1[3];
  v60 = a1[2];
  v61 = v7;
  v62 = a1[4];
  v8 = a1[1];
  v58 = *a1;
  v59 = v8;
  do
  {
    v9 = *a3;
    v10 = a1[v6 + 8];
    v57[2] = a1[v6 + 7];
    v57[3] = v10;
    v57[4] = a1[v6 + 9];
    v11 = a1[v6 + 6];
    v57[0] = a1[v6 + 5];
    v57[1] = v11;
    v56[2] = v60;
    v56[3] = v61;
    v56[4] = v62;
    v56[0] = v58;
    v56[1] = v59;
    v6 += 5;
  }
  while ((v9(v57, v56) & 1) != 0);
  v12 = &a1[v6];
  v13 = &a1[v6 - 5];
  if (v6 == 5)
  {
    while (v12 < a2)
    {
      v18 = *a3;
      v14 = a2 - 5;
      v19 = *(a2 - 2);
      v55[2] = *(a2 - 3);
      v55[3] = v19;
      v55[4] = *(a2 - 1);
      v20 = *(a2 - 4);
      v55[0] = *(a2 - 5);
      v55[1] = v20;
      v54[2] = v60;
      v54[3] = v61;
      v54[4] = v62;
      v54[0] = v58;
      v54[1] = v59;
      a2 -= 5;
      if ((v18(v55, v54) & 1) != 0)
        goto LABEL_9;
    }
    v14 = a2;
  }
  else
  {
    do
    {
      v14 = a2 - 5;
      v15 = (unsigned int (*)(_QWORD, _QWORD))*a3;
      v16 = *(a2 - 2);
      v53[2] = *(a2 - 3);
      v53[3] = v16;
      v53[4] = *(a2 - 1);
      v17 = *(a2 - 4);
      v53[0] = *(a2 - 5);
      v53[1] = v17;
      v52[2] = v60;
      v52[3] = v61;
      v52[4] = v62;
      v52[0] = v58;
      v52[1] = v59;
      a2 -= 5;
    }
    while (!v15(v53, v52));
  }
LABEL_9:
  if (v12 < v14)
  {
    v21 = v12;
    v22 = v14;
    do
    {
      v23 = v21[3];
      v65 = v21[2];
      v66 = v23;
      v67 = v21[4];
      v24 = v21[1];
      v63 = *v21;
      v64 = v24;
      v26 = v22[1];
      v25 = v22[2];
      v27 = v22[4];
      v21[3] = v22[3];
      v21[4] = v27;
      v21[1] = v26;
      v21[2] = v25;
      *v21 = *v22;
      *v22 = v63;
      v28 = v64;
      v29 = v65;
      v30 = v67;
      v22[3] = v66;
      v22[4] = v30;
      v22[1] = v28;
      v22[2] = v29;
      do
      {
        v51[0] = v21[5];
        v31 = v21[6];
        v32 = v21[7];
        v33 = v21[8];
        v34 = v21[9];
        v21 += 5;
        v35 = *a3;
        v51[3] = v33;
        v51[4] = v34;
        v51[1] = v31;
        v51[2] = v32;
        v50[2] = v60;
        v50[3] = v61;
        v50[4] = v62;
        v50[0] = v58;
        v50[1] = v59;
      }
      while ((v35(v51, v50) & 1) != 0);
      do
      {
        v49[0] = *(v22 - 5);
        v36 = *(v22 - 4);
        v37 = *(v22 - 3);
        v38 = *(v22 - 2);
        v39 = *(v22 - 1);
        v22 -= 5;
        v40 = (unsigned int (*)(_QWORD, _QWORD))*a3;
        v49[3] = v38;
        v49[4] = v39;
        v49[1] = v36;
        v49[2] = v37;
        v48[2] = v60;
        v48[3] = v61;
        v48[4] = v62;
        v48[0] = v58;
        v48[1] = v59;
      }
      while (!v40(v49, v48));
    }
    while (v21 < v22);
    v13 = v21 - 5;
  }
  if (v13 != a1)
  {
    *a1 = *v13;
    v41 = v13[1];
    v42 = v13[2];
    v43 = v13[4];
    a1[3] = v13[3];
    a1[4] = v43;
    a1[1] = v41;
    a1[2] = v42;
  }
  *v13 = v58;
  v44 = v59;
  v45 = v60;
  v46 = v62;
  v13[3] = v61;
  v13[4] = v46;
  v13[1] = v44;
  v13[2] = v45;
  return v13;
}

BOOL sub_10050D82C(__int128 *a1, __int128 *a2, unsigned int (**a3)(_QWORD, _QWORD))
{
  unint64_t v6;
  _BOOL8 result;
  unsigned int (*v8)(_QWORD, _QWORD);
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 *v22;
  __int128 *v23;
  uint64_t v24;
  int v25;
  unsigned int (*v26)(_QWORD, _QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  unsigned int (*v38)(_QWORD, _QWORD);
  __int128 v39;
  __int128 v40;
  __int128 *v41;
  __int128 v42;
  __int128 v43;
  _OWORD v44[5];
  _OWORD v45[5];
  _OWORD v46[5];
  _OWORD v47[5];
  _OWORD v48[5];
  _OWORD v49[5];
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;

  v6 = 0xCCCCCCCCCCCCCCCDLL * (a2 - a1);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = *a3;
      v9 = *(a2 - 2);
      v49[2] = *(a2 - 3);
      v49[3] = v9;
      v49[4] = *(a2 - 1);
      v10 = *(a2 - 4);
      v49[0] = *(a2 - 5);
      v49[1] = v10;
      v11 = a1[3];
      v48[2] = a1[2];
      v48[3] = v11;
      v48[4] = a1[4];
      v12 = a1[1];
      v48[0] = *a1;
      v48[1] = v12;
      if (!v8(v49, v48))
        return 1;
      v13 = a2 - 5;
      v14 = a1[3];
      v52 = a1[2];
      v53 = v14;
      v54 = a1[4];
      v15 = a1[1];
      v50 = *a1;
      v51 = v15;
      *a1 = *(a2 - 5);
      v16 = *(a2 - 1);
      v18 = *(a2 - 4);
      v17 = *(a2 - 3);
      a1[3] = *(a2 - 2);
      a1[4] = v16;
      a1[1] = v18;
      a1[2] = v17;
      v19 = v54;
      v20 = v52;
      v13[3] = v53;
      v13[4] = v19;
      v21 = v51;
      result = 1;
      *v13 = v50;
      v13[1] = v21;
      v13[2] = v20;
      return result;
    case 3uLL:
      sub_10050CF50(a1, a1 + 5, a2 - 5, a3);
      return 1;
    case 4uLL:
      sub_10050DB18(a1, a1 + 5, a1 + 10, a2 - 5, a3);
      return 1;
    case 5uLL:
      sub_10050DD2C(a1, a1 + 5, a1 + 10, a1 + 15, a2 - 5, a3);
      return 1;
    default:
      v22 = a1 + 10;
      sub_10050CF50(a1, a1 + 5, a1 + 10, a3);
      v23 = a1 + 15;
      if (a1 + 15 == a2)
        return 1;
      v24 = 0;
      v25 = 0;
      break;
  }
  while (1)
  {
    v26 = *a3;
    v27 = v23[3];
    v47[2] = v23[2];
    v47[3] = v27;
    v47[4] = v23[4];
    v28 = v23[1];
    v47[0] = *v23;
    v47[1] = v28;
    v30 = v22[1];
    v29 = v22[2];
    v31 = v22[4];
    v46[3] = v22[3];
    v46[4] = v31;
    v46[1] = v30;
    v46[2] = v29;
    v46[0] = *v22;
    if (v26(v47, v46))
    {
      v32 = v23[3];
      v52 = v23[2];
      v53 = v32;
      v54 = v23[4];
      v33 = v23[1];
      v50 = *v23;
      v51 = v33;
      v34 = v24;
      while (1)
      {
        v35 = (__int128 *)((char *)a1 + v34);
        v36 = *(__int128 *)((char *)a1 + v34 + 208);
        v35[17] = *(__int128 *)((char *)a1 + v34 + 192);
        v35[18] = v36;
        v35[19] = *(__int128 *)((char *)a1 + v34 + 224);
        v37 = *(__int128 *)((char *)a1 + v34 + 176);
        v35[15] = *(__int128 *)((char *)a1 + v34 + 160);
        v35[16] = v37;
        if (v34 == -160)
          break;
        v38 = *a3;
        v45[2] = v52;
        v45[3] = v53;
        v45[4] = v54;
        v45[0] = v50;
        v45[1] = v51;
        v39 = v35[8];
        v44[2] = v35[7];
        v44[3] = v39;
        v44[4] = v35[9];
        v40 = v35[6];
        v44[0] = v35[5];
        v44[1] = v40;
        v34 -= 80;
        if ((((uint64_t (*)(_OWORD *, _OWORD *))v38)(v45, v44) & 1) == 0)
        {
          v41 = (__int128 *)((char *)a1 + v34 + 240);
          goto LABEL_12;
        }
      }
      v41 = a1;
LABEL_12:
      v42 = v53;
      v41[2] = v52;
      v41[3] = v42;
      v41[4] = v54;
      v43 = v51;
      *v41 = v50;
      v41[1] = v43;
      if (++v25 == 8)
        return v23 + 5 == a2;
    }
    v22 = v23;
    v24 += 80;
    v23 += 5;
    if (v23 == a2)
      return 1;
  }
}

double sub_10050DB18(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, unsigned int (**a5)(_QWORD, _QWORD))
{
  unsigned int (*v10)(_QWORD, _QWORD);
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  unsigned int (*v24)(_QWORD, _QWORD);
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  unsigned int (*v40)(_QWORD, _QWORD);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[5];
  _OWORD v57[5];
  _OWORD v58[5];
  _OWORD v59[5];
  _OWORD v60[5];
  _OWORD v61[5];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;

  sub_10050CF50(a1, a2, a3, a5);
  v10 = *a5;
  v11 = a4[3];
  v61[2] = a4[2];
  v61[3] = v11;
  v61[4] = a4[4];
  v12 = a4[1];
  v61[0] = *a4;
  v61[1] = v12;
  v13 = a3[3];
  v60[2] = a3[2];
  v60[3] = v13;
  v60[4] = a3[4];
  v14 = a3[1];
  v60[0] = *a3;
  v60[1] = v14;
  if (v10(v61, v60))
  {
    v16 = a3[3];
    v64 = a3[2];
    v65 = v16;
    v66 = a3[4];
    v17 = a3[1];
    v62 = *a3;
    v63 = v17;
    *a3 = *a4;
    v18 = a4[4];
    v20 = a4[1];
    v19 = a4[2];
    a3[3] = a4[3];
    a3[4] = v18;
    a3[1] = v20;
    a3[2] = v19;
    v21 = v66;
    v22 = v64;
    a4[3] = v65;
    a4[4] = v21;
    v23 = v63;
    *a4 = v62;
    a4[1] = v23;
    a4[2] = v22;
    v24 = *a5;
    v26 = *a3;
    v25 = a3[1];
    v27 = a3[4];
    v59[3] = a3[3];
    v59[4] = v27;
    v28 = a3[2];
    v59[1] = v25;
    v59[2] = v28;
    v29 = *a2;
    v30 = a2[1];
    v31 = a2[3];
    v58[4] = a2[4];
    v59[0] = v26;
    v58[2] = a2[2];
    v58[3] = v31;
    v58[0] = v29;
    v58[1] = v30;
    if (v24(v59, v58))
    {
      v32 = a2[3];
      v64 = a2[2];
      v65 = v32;
      v66 = a2[4];
      v33 = a2[1];
      v62 = *a2;
      v63 = v33;
      *a2 = *a3;
      v34 = a3[4];
      v36 = a3[1];
      v35 = a3[2];
      a2[3] = a3[3];
      a2[4] = v34;
      a2[1] = v36;
      a2[2] = v35;
      v37 = v66;
      v38 = v64;
      a3[3] = v65;
      a3[4] = v37;
      v39 = v63;
      *a3 = v62;
      a3[1] = v39;
      a3[2] = v38;
      v40 = *a5;
      v42 = *a2;
      v41 = a2[1];
      v43 = a2[4];
      v57[3] = a2[3];
      v57[4] = v43;
      v44 = a2[2];
      v57[1] = v41;
      v57[2] = v44;
      v45 = *a1;
      v46 = a1[1];
      v47 = a1[3];
      v56[4] = a1[4];
      v57[0] = v42;
      v56[2] = a1[2];
      v56[3] = v47;
      v56[0] = v45;
      v56[1] = v46;
      if (v40(v57, v56))
      {
        v48 = a1[3];
        v64 = a1[2];
        v65 = v48;
        v66 = a1[4];
        v49 = a1[1];
        v62 = *a1;
        v63 = v49;
        *a1 = *a2;
        v50 = a2[4];
        v52 = a2[1];
        v51 = a2[2];
        a1[3] = a2[3];
        a1[4] = v50;
        a1[1] = v52;
        a1[2] = v51;
        v53 = v66;
        v54 = v64;
        a2[3] = v65;
        a2[4] = v53;
        result = *(double *)&v62;
        v55 = v63;
        *a2 = v62;
        a2[1] = v55;
        a2[2] = v54;
      }
    }
  }
  return result;
}

double sub_10050DD2C(__int128 *a1, __int128 *a2, __int128 *a3, __int128 *a4, __int128 *a5, unsigned int (**a6)(_QWORD, _QWORD))
{
  unsigned int (*v12)(_QWORD, _QWORD);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  unsigned int (*v26)(_QWORD, _QWORD);
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  unsigned int (*v42)(_QWORD, _QWORD);
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  unsigned int (*v58)(_QWORD, _QWORD);
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  _OWORD v74[5];
  _OWORD v75[5];
  _OWORD v76[5];
  _OWORD v77[5];
  _OWORD v78[5];
  _OWORD v79[5];
  _OWORD v80[5];
  _OWORD v81[5];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;

  sub_10050DB18(a1, a2, a3, a4, a6);
  v12 = *a6;
  v13 = a5[3];
  v81[2] = a5[2];
  v81[3] = v13;
  v81[4] = a5[4];
  v14 = a5[1];
  v81[0] = *a5;
  v81[1] = v14;
  v15 = a4[3];
  v80[2] = a4[2];
  v80[3] = v15;
  v80[4] = a4[4];
  v16 = a4[1];
  v80[0] = *a4;
  v80[1] = v16;
  if (v12(v81, v80))
  {
    v18 = a4[3];
    v84 = a4[2];
    v85 = v18;
    v86 = a4[4];
    v19 = a4[1];
    v82 = *a4;
    v83 = v19;
    *a4 = *a5;
    v20 = a5[4];
    v22 = a5[1];
    v21 = a5[2];
    a4[3] = a5[3];
    a4[4] = v20;
    a4[1] = v22;
    a4[2] = v21;
    v23 = v86;
    v24 = v84;
    a5[3] = v85;
    a5[4] = v23;
    v25 = v83;
    *a5 = v82;
    a5[1] = v25;
    a5[2] = v24;
    v26 = *a6;
    v28 = *a4;
    v27 = a4[1];
    v29 = a4[4];
    v79[3] = a4[3];
    v79[4] = v29;
    v30 = a4[2];
    v79[1] = v27;
    v79[2] = v30;
    v31 = *a3;
    v32 = a3[1];
    v33 = a3[3];
    v78[4] = a3[4];
    v79[0] = v28;
    v78[2] = a3[2];
    v78[3] = v33;
    v78[0] = v31;
    v78[1] = v32;
    if (v26(v79, v78))
    {
      v34 = a3[3];
      v84 = a3[2];
      v85 = v34;
      v86 = a3[4];
      v35 = a3[1];
      v82 = *a3;
      v83 = v35;
      *a3 = *a4;
      v36 = a4[4];
      v38 = a4[1];
      v37 = a4[2];
      a3[3] = a4[3];
      a3[4] = v36;
      a3[1] = v38;
      a3[2] = v37;
      v39 = v86;
      v40 = v84;
      a4[3] = v85;
      a4[4] = v39;
      v41 = v83;
      *a4 = v82;
      a4[1] = v41;
      a4[2] = v40;
      v42 = *a6;
      v44 = *a3;
      v43 = a3[1];
      v45 = a3[4];
      v77[3] = a3[3];
      v77[4] = v45;
      v46 = a3[2];
      v77[1] = v43;
      v77[2] = v46;
      v47 = *a2;
      v48 = a2[1];
      v49 = a2[3];
      v76[4] = a2[4];
      v77[0] = v44;
      v76[2] = a2[2];
      v76[3] = v49;
      v76[0] = v47;
      v76[1] = v48;
      if (v42(v77, v76))
      {
        v50 = a2[3];
        v84 = a2[2];
        v85 = v50;
        v86 = a2[4];
        v51 = a2[1];
        v82 = *a2;
        v83 = v51;
        *a2 = *a3;
        v52 = a3[4];
        v54 = a3[1];
        v53 = a3[2];
        a2[3] = a3[3];
        a2[4] = v52;
        a2[1] = v54;
        a2[2] = v53;
        v55 = v86;
        v56 = v84;
        a3[3] = v85;
        a3[4] = v55;
        v57 = v83;
        *a3 = v82;
        a3[1] = v57;
        a3[2] = v56;
        v58 = *a6;
        v60 = *a2;
        v59 = a2[1];
        v61 = a2[4];
        v75[3] = a2[3];
        v75[4] = v61;
        v62 = a2[2];
        v75[1] = v59;
        v75[2] = v62;
        v63 = *a1;
        v64 = a1[1];
        v65 = a1[3];
        v74[4] = a1[4];
        v75[0] = v60;
        v74[2] = a1[2];
        v74[3] = v65;
        v74[0] = v63;
        v74[1] = v64;
        if (v58(v75, v74))
        {
          v66 = a1[3];
          v84 = a1[2];
          v85 = v66;
          v86 = a1[4];
          v67 = a1[1];
          v82 = *a1;
          v83 = v67;
          *a1 = *a2;
          v68 = a2[4];
          v70 = a2[1];
          v69 = a2[2];
          a1[3] = a2[3];
          a1[4] = v68;
          a1[1] = v70;
          a1[2] = v69;
          v71 = v86;
          v72 = v84;
          a2[3] = v85;
          a2[4] = v71;
          result = *(double *)&v82;
          v73 = v83;
          *a2 = v82;
          a2[1] = v73;
          a2[2] = v72;
        }
      }
    }
  }
  return result;
}

__n128 *sub_10050DFD4(uint64_t a1, __n128 *a2, __n128 *a3, unsigned int (**a4)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 *v12;
  __n128 *v13;
  __n128 *v14;
  unsigned int (*v15)(_OWORD *, _OWORD *);
  __n128 v16;
  __n128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  int64_t v28;
  __n128 *v29;
  __n128 v30;
  __n128 v31;
  __n128 *v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  _OWORD v42[5];
  _OWORD v43[5];
  __n128 v44;
  __n128 v45;
  __n128 v46;
  __n128 v47;
  __n128 v48;

  if ((__n128 *)a1 != a2)
  {
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 80;
    if ((uint64_t)a2 - a1 >= 81)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (__n128 *)(a1 + 80 * v10);
      do
      {
        sub_10050E23C(a1, a4, v9, v12);
        v12 -= 5;
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        v15 = (unsigned int (*)(_OWORD *, _OWORD *))*a4;
        v16 = v14[3];
        v43[2] = v14[2];
        v43[3] = v16;
        v43[4] = v14[4];
        v17 = v14[1];
        v43[0] = *v14;
        v43[1] = v17;
        v18 = *(_OWORD *)(a1 + 48);
        v42[2] = *(_OWORD *)(a1 + 32);
        v42[3] = v18;
        v42[4] = *(_OWORD *)(a1 + 64);
        v19 = *(_OWORD *)(a1 + 16);
        v42[0] = *(_OWORD *)a1;
        v42[1] = v19;
        if (v15(v43, v42))
        {
          v20 = v14[3];
          v46 = v14[2];
          v47 = v20;
          v48 = v14[4];
          v21 = v14[1];
          v44 = *v14;
          v45 = v21;
          *v14 = *(__n128 *)a1;
          v22 = *(__n128 *)(a1 + 64);
          v24 = *(__n128 *)(a1 + 16);
          v23 = *(__n128 *)(a1 + 32);
          v14[3] = *(__n128 *)(a1 + 48);
          v14[4] = v22;
          v14[1] = v24;
          v14[2] = v23;
          v25 = v48;
          v26 = v46;
          *(__n128 *)(a1 + 48) = v47;
          *(__n128 *)(a1 + 64) = v25;
          v27 = v45;
          *(__n128 *)a1 = v44;
          *(__n128 *)(a1 + 16) = v27;
          *(__n128 *)(a1 + 32) = v26;
          sub_10050E23C(a1, a4, v9, (__n128 *)a1);
        }
        v14 += 5;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 81)
    {
      v28 = v8 / 0x50uLL;
      v29 = a2 - 5;
      do
      {
        v30 = *(__n128 *)(a1 + 48);
        v46 = *(__n128 *)(a1 + 32);
        v47 = v30;
        v48 = *(__n128 *)(a1 + 64);
        v31 = *(__n128 *)(a1 + 16);
        v44 = *(__n128 *)a1;
        v45 = v31;
        v32 = (__n128 *)sub_10050E49C((_OWORD *)a1, (unsigned int (**)(_OWORD *, _OWORD *))a4, v28);
        if (v29 == v32)
        {
          v38 = v47;
          v32[2] = v46;
          v32[3] = v38;
          v32[4] = v48;
          v39 = v45;
          *v32 = v44;
          v32[1] = v39;
        }
        else
        {
          *v32 = *v29;
          v33 = v29[1];
          v34 = v29[2];
          v35 = v29[4];
          v32[3] = v29[3];
          v32[4] = v35;
          v32[1] = v33;
          v32[2] = v34;
          v36 = v47;
          v29[2] = v46;
          v29[3] = v36;
          v29[4] = v48;
          v37 = v45;
          *v29 = v44;
          v29[1] = v37;
          sub_10050E5C8(a1, (uint64_t)&v32[5], a4, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)&v32[5] - a1) >> 4));
        }
        v29 -= 5;
      }
      while (v28-- > 2);
    }
    return v13;
  }
  return a3;
}

__n128 sub_10050E23C(uint64_t a1, unsigned int (**a2)(_QWORD, _QWORD), uint64_t a3, __n128 *a4)
{
  unint64_t v4;
  __n128 *v5;
  int64_t v7;
  int64_t v10;
  __n128 *v11;
  int64_t v12;
  __n128 v13;
  __n128 v14;
  __n128 v15;
  __n128 v16;
  __n128 v17;
  __n128 v18;
  unsigned int (*v19)(_QWORD, _QWORD);
  unsigned int (*v20)(_QWORD, _QWORD);
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;
  __n128 result;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  __n128 v33;
  __n128 v34;
  __n128 v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unsigned int (*v39)(_QWORD, _QWORD);
  unsigned int (*v40)(_QWORD, _QWORD);
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  _OWORD v45[5];
  _OWORD v46[5];
  _OWORD v47[5];
  _OWORD v48[5];
  __n128 v49;
  __n128 v50;
  __n128 v51;
  __n128 v52;
  __n128 v53;
  _OWORD v54[5];
  _OWORD v55[5];
  _OWORD v56[5];
  _OWORD v57[5];

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= (uint64_t)(0xCCCCCCCCCCCCCCCDLL * (((uint64_t)a4 - a1) >> 4)))
    {
      v10 = (0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4)) | 1;
      v11 = (__n128 *)(a1 + 80 * v10);
      v12 = 0x999999999999999ALL * (((uint64_t)a4 - a1) >> 4) + 2;
      if (v12 < a3)
      {
        v13 = v11[3];
        v57[2] = v11[2];
        v57[3] = v13;
        v14 = v11[5];
        v57[4] = v11[4];
        v15 = v11[1];
        v57[0] = *v11;
        v57[1] = v15;
        v16 = v11[6];
        v17 = v11[8];
        v18 = v11[9];
        v56[2] = v11[7];
        v56[3] = v17;
        v56[4] = v18;
        v19 = *a2;
        v56[0] = v14;
        v56[1] = v16;
        if (v19(v57, v56))
        {
          v11 += 5;
          v10 = v12;
        }
      }
      v20 = *a2;
      v21 = v11[3];
      v55[2] = v11[2];
      v55[3] = v21;
      v55[4] = v11[4];
      v22 = v11[1];
      v55[0] = *v11;
      v55[1] = v22;
      v23 = v5[3];
      v54[2] = v5[2];
      v54[3] = v23;
      v54[4] = v5[4];
      v24 = v5[1];
      v54[0] = *v5;
      v54[1] = v24;
      if ((((uint64_t (*)(_OWORD *, _OWORD *))v20)(v55, v54) & 1) == 0)
      {
        v26 = v5[3];
        v51 = v5[2];
        v52 = v26;
        v53 = v5[4];
        v27 = v5[1];
        v49 = *v5;
        v50 = v27;
        do
        {
          v28 = v11;
          *v5 = *v11;
          v29 = v11[1];
          v30 = v11[2];
          v31 = v11[4];
          v5[3] = v11[3];
          v5[4] = v31;
          v5[1] = v29;
          v5[2] = v30;
          if (v7 < v10)
            break;
          v32 = (2 * v10) | 1;
          v11 = (__n128 *)(a1 + 80 * v32);
          if (2 * v10 + 2 < a3)
          {
            v33 = v11[3];
            v48[2] = v11[2];
            v48[3] = v33;
            v34 = v11[5];
            v48[4] = v11[4];
            v35 = v11[1];
            v48[0] = *v11;
            v48[1] = v35;
            v36 = v11[6];
            v37 = v11[8];
            v38 = v11[9];
            v47[2] = v11[7];
            v47[3] = v37;
            v47[4] = v38;
            v39 = *a2;
            v47[0] = v34;
            v47[1] = v36;
            if (v39(v48, v47))
            {
              v11 += 5;
              v32 = 2 * v10 + 2;
            }
          }
          v40 = *a2;
          v41 = v11[3];
          v46[2] = v11[2];
          v46[3] = v41;
          v46[4] = v11[4];
          v42 = v11[1];
          v46[0] = *v11;
          v46[1] = v42;
          v45[2] = v51;
          v45[3] = v52;
          v45[4] = v53;
          v45[0] = v49;
          v45[1] = v50;
          v5 = v28;
          v10 = v32;
        }
        while (!v40(v46, v45));
        *v28 = v49;
        result = v50;
        v43 = v51;
        v44 = v53;
        v28[3] = v52;
        v28[4] = v44;
        v28[1] = result;
        v28[2] = v43;
      }
    }
  }
  return result;
}

_OWORD *sub_10050E49C(_OWORD *a1, unsigned int (**a2)(_OWORD *, _OWORD *), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(_OWORD *, _OWORD *);
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _OWORD v23[5];
  _OWORD v24[5];

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[5 * v6 + 5];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3)
    {
      v12 = *a2;
      v24[0] = *v9;
      v13 = v9[4];
      v15 = v9[1];
      v14 = v9[2];
      v24[3] = v9[3];
      v24[4] = v13;
      v24[1] = v15;
      v24[2] = v14;
      v17 = v9[6];
      v16 = v9[7];
      v18 = v9[9];
      v23[3] = v9[8];
      v23[4] = v18;
      v23[1] = v17;
      v23[2] = v16;
      v23[0] = v9[5];
      if (v12(v24, v23))
      {
        v9 += 5;
        v10 = v11;
      }
    }
    *a1 = *v9;
    v19 = v9[1];
    v20 = v9[2];
    v21 = v9[4];
    a1[3] = v9[3];
    a1[4] = v21;
    a1[1] = v19;
    a1[2] = v20;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

__n128 sub_10050E5C8(uint64_t a1, uint64_t a2, unsigned int (**a3)(_QWORD, _QWORD), uint64_t a4)
{
  unint64_t v7;
  unsigned int (*v8)(_QWORD, _QWORD);
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  _OWORD *v15;
  __int128 v16;
  __n128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unsigned int (*v22)(_QWORD, _QWORD);
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  _OWORD v27[5];
  _OWORD v28[5];
  __int128 v29;
  __n128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _OWORD v34[5];
  _OWORD v35[5];

  if (a4 >= 2)
  {
    v7 = (unint64_t)(a4 - 2) >> 1;
    v8 = *a3;
    v9 = (_OWORD *)(a1 + 80 * v7);
    v10 = v9[3];
    v35[2] = v9[2];
    v35[3] = v10;
    v35[4] = v9[4];
    v11 = v9[1];
    v35[0] = *v9;
    v35[1] = v11;
    v12 = *(_OWORD *)(a2 - 32);
    v34[2] = *(_OWORD *)(a2 - 48);
    v34[3] = v12;
    v34[4] = *(_OWORD *)(a2 - 16);
    v13 = *(_OWORD *)(a2 - 64);
    v34[0] = *(_OWORD *)(a2 - 80);
    v34[1] = v13;
    if (v8(v35, v34))
    {
      v15 = (_OWORD *)(a2 - 80);
      v16 = *(_OWORD *)(a2 - 32);
      v31 = *(_OWORD *)(a2 - 48);
      v32 = v16;
      v33 = *(_OWORD *)(a2 - 16);
      v17 = *(__n128 *)(a2 - 64);
      v29 = *(_OWORD *)(a2 - 80);
      v30 = v17;
      do
      {
        v18 = v9;
        *v15 = *v9;
        v19 = v9[1];
        v20 = v9[2];
        v21 = v9[4];
        v15[3] = v9[3];
        v15[4] = v21;
        v15[1] = v19;
        v15[2] = v20;
        if (!v7)
          break;
        v22 = *a3;
        v7 = (v7 - 1) >> 1;
        v9 = (_OWORD *)(a1 + 80 * v7);
        v23 = v9[3];
        v28[2] = v9[2];
        v28[3] = v23;
        v28[4] = v9[4];
        v24 = v9[1];
        v28[0] = *v9;
        v28[1] = v24;
        v27[2] = v31;
        v27[3] = v32;
        v27[4] = v33;
        v27[0] = v29;
        v27[1] = v30;
        v25 = v22(v28, v27);
        v15 = v18;
      }
      while ((v25 & 1) != 0);
      v26 = v32;
      v18[2] = v31;
      v18[3] = v26;
      v18[4] = v33;
      result = v30;
      *v18 = v29;
      v18[1] = result;
    }
  }
  return result;
}

__int128 *sub_10050E73C(__int128 *a1, __int128 *a2, unsigned int (**a3)(_QWORD, _QWORD))
{
  __int128 *v5;
  unsigned int (*v6)(_QWORD, _QWORD);
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 *v14;
  unsigned int (*v15)(_QWORD, _QWORD);
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v26[5];
  _OWORD v27[5];
  _OWORD v28[5];
  _OWORD v29[5];

  if (a1 != a2)
  {
    v5 = a1 + 5;
    while (v5 != a2)
    {
      v6 = *a3;
      v29[0] = *(v5 - 5);
      v7 = *(v5 - 1);
      v9 = *(v5 - 4);
      v8 = *(v5 - 3);
      v29[3] = *(v5 - 2);
      v29[4] = v7;
      v29[1] = v9;
      v29[2] = v8;
      v11 = v5[1];
      v10 = v5[2];
      v12 = v5[4];
      v28[3] = v5[3];
      v28[4] = v12;
      v28[1] = v11;
      v28[2] = v10;
      v13 = *v5;
      v5 += 5;
      v28[0] = v13;
      if (v6(v29, v28))
      {
        v14 = v5 - 10;
        while (v5 != a2)
        {
          v15 = *a3;
          v27[0] = *v14;
          v16 = v14[4];
          v18 = v14[1];
          v17 = v14[2];
          v27[3] = v14[3];
          v27[4] = v16;
          v27[1] = v18;
          v27[2] = v17;
          v20 = v5[1];
          v19 = v5[2];
          v21 = v5[4];
          v26[3] = v5[3];
          v26[4] = v21;
          v26[1] = v20;
          v26[2] = v19;
          v26[0] = *v5;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v15)(v27, v26) & 1) == 0)
          {
            v14[5] = *v5;
            v22 = v5[1];
            v23 = v5[2];
            v24 = v5[4];
            v14[8] = v5[3];
            v14[9] = v24;
            v14[6] = v22;
            v14[7] = v23;
            v14 += 5;
          }
          v5 += 5;
        }
        return v14 + 5;
      }
    }
  }
  return a2;
}

uint64_t sub_10050E880(uint64_t result)
{
  *(_QWORD *)result = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_BYTE *)(result + 12) = 0;
  return result;
}

void sub_10050E890(uint64_t a1, int a2, int a3)
{
  NSObject *v5;
  int v6;
  void **v7;
  void **v8;
  void **v9;
  uint64_t v10;
  int v11;
  void **v12;
  void **v13;
  _BYTE *v14;
  char *v15;
  void *__p[2];
  char v17;
  _BYTE buf[12];
  __int16 v19;
  void **v20;
  char v21;
  int v22;
  void **v23;
  __int16 v24;
  _BYTE *v25;
  void *v26[2];
  char v27;

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102140DD0);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    sub_10050EB60(a2, v26);
    v6 = v27;
    v7 = (void **)v26[0];
    sub_10050EB60(a3, __p);
    v8 = v26;
    if (v6 < 0)
      v8 = v7;
    if (v17 >= 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    *(_DWORD *)buf = 136315394;
    *(_QWORD *)&buf[4] = v8;
    v19 = 2080;
    v20 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Changed from %s to %s:,", buf, 0x16u);
    if (v17 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v26, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102140DD0);
    v10 = qword_1022A0028;
    sub_10050EB60(a2, __p);
    v11 = v17;
    v12 = (void **)__p[0];
    sub_10050EB60(a3, buf);
    v13 = __p;
    if (v11 < 0)
      v13 = v12;
    if (v21 >= 0)
      v14 = buf;
    else
      v14 = *(_BYTE **)buf;
    v22 = 136315394;
    v23 = v13;
    v24 = 2080;
    v25 = v14;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, v26, 1628, &_mh_execute_header, v10, 2, "Changed from %s to %s:,", (const char *)&v22, 22);
    if (v21 < 0)
      operator delete(*(void **)buf);
    if (v17 < 0)
      operator delete(__p[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLNavModeEstimator::logStateChange(CLNavModeClassification, CLNavModeClassification) const", "%s\n", v15);
    if (v15 != (char *)v26)
      free(v15);
  }
}

void sub_10050EB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10050EB60(int a1@<W0>, _QWORD *a2@<X8>)
{
  char *v4;
  NSObject *v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  __int128 v11;
  std::string *v12;
  __int128 v13;
  char *v14;
  const char *v15;
  void *__p[2];
  char v17;
  std::string v18;
  std::string v19;
  _BYTE v20[28];
  _BYTE buf[1624];

  switch(a1)
  {
    case 2:
      v4 = "RecentlyVehicular";
      goto LABEL_7;
    case 1:
      v4 = "RecentlyPedestrian";
      goto LABEL_7;
    case 0:
      v4 = "Uninitialized";
LABEL_7:
      sub_1015A2E04(a2, v4);
      return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102140DF0);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLNavModeEstimator.mm";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 262;
    *(_WORD *)&buf[18] = 2080;
    *(_QWORD *)&buf[20] = "false";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102140DF0);
    *(_DWORD *)v20 = 136315650;
    *(_QWORD *)&v20[4] = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Indoor/CLNavModeEstimator.mm";
    *(_WORD *)&v20[12] = 1024;
    *(_DWORD *)&v20[14] = 262;
    *(_WORD *)&v20[18] = 2080;
    *(_QWORD *)&v20[20] = "false";
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", v20, 28, v15);
    sub_100512490("Generic", 1, 0, 0, "std::string cl::to_string(CLNavModeClassification)", "%s\n", v14);
    if (v14 != buf)
      free(v14);
  }
  sub_100512450();
  sub_1015A2E04(__p, "CLNavModeClassification");
  std::operator+<char>(&v19, "unknown enum ", __p);
  v6 = std::string::append(&v19, "(");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  *(_QWORD *)&v20[16] = *((_QWORD *)&v6->__r_.__value_.__l + 2);
  *(_OWORD *)v20 = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&v18, a1);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v18;
  else
    v8 = (std::string *)v18.__r_.__value_.__r.__words[0];
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  else
    size = v18.__r_.__value_.__l.__size_;
  v10 = std::string::append((std::string *)v20, (const std::string::value_type *)v8, size);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)&buf[16] = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)buf = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append((std::string *)buf, ")");
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  a2[2] = *((_QWORD *)&v12->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if ((buf[23] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if ((v20[23] & 0x80000000) != 0)
    operator delete(*(void **)v20);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (v17 < 0)
    operator delete(__p[0]);
}

void sub_10050EF0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a35 < 0)
    operator delete(a30);
  if (a29 < 0)
    operator delete(a24);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_10050EF90(_QWORD *result, uint64_t a2, double a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;

  if (a2 != a5)
  {
    while (a3 - *(double *)(a2 + 8) <= 5.5)
    {
      a2 += 16;
      if (a2 - *result == 4096)
      {
        v5 = result[1];
        ++result;
        a2 = v5;
      }
      if (a2 == a5)
        return result;
    }
  }
  if (a2 != a5)
  {
    v6 = *result;
    v7 = *result;
    v8 = a2;
    v9 = result;
    while (1)
    {
      v8 += 16;
      if (v8 - v7 == 4096)
      {
        v10 = v9[1];
        ++v9;
        v7 = v10;
        v8 = v10;
      }
      if (v8 == a5)
        break;
      v11 = *(double *)(v8 + 8);
      if (a3 - v11 <= 5.5)
      {
        *(_QWORD *)a2 = *(_QWORD *)v8;
        *(double *)(a2 + 8) = v11;
        a2 += 16;
        if (a2 - v6 == 4096)
        {
          v12 = result[1];
          ++result;
          v6 = v12;
          a2 = v12;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_10050F044(_QWORD *a1, char *a2, uint64_t a3, char *a4, uint64_t a5)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char **v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  char **v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v35;
  uint64_t *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;

  if (a5 == a3)
    v6 = 0;
  else
    v6 = ((a5 - *(_QWORD *)a4) >> 4) + 32 * (a4 - a2) - ((a3 - *(_QWORD *)a2) >> 4);
  v7 = a1[4];
  v8 = a1[1];
  v9 = (char *)(v8 + 8 * (v7 >> 8));
  if (a1[2] == v8)
    v10 = 0;
  else
    v10 = *(_QWORD *)v9 + 16 * v7;
  v36 = (uint64_t *)v9;
  v37 = v10;
  if (v10 == a3)
    v11 = 0;
  else
    v11 = ((a3 - *(_QWORD *)a2) >> 4) + 32 * (a2 - v9) - ((v10 - *(_QWORD *)v9) >> 4);
  v12 = sub_1004CE854((uint64_t)&v36, v11);
  v35.n128_u64[0] = (unint64_t)v12;
  v35.n128_u64[1] = v13;
  if (v6 >= 1)
  {
    if (v11 <= (unint64_t)(a1[5] - v6) >> 1)
    {
      v20 = v12;
      v21 = v13;
      v22 = v36;
      v23 = v37;
      v24 = sub_1004CE854((uint64_t)&v35, v6);
      sub_10050F26C(v22, v23, v20, v21, v24, v25, &v38);
      v26 = v37;
      if (v37 != v39)
      {
        v27 = v36;
        do
        {
          v26 += 16;
          v37 = v26;
          if (v26 - *v27 == 4096)
          {
            v28 = v27[1];
            ++v27;
            v26 = v28;
            v36 = v27;
            v37 = v28;
          }
        }
        while (v26 != v39);
      }
      v29 = a1[5] - v6;
      a1[4] += v6;
      a1[5] = v29;
      while ((sub_1004A57E8((uint64_t)a1, 1) & 1) != 0)
        ;
    }
    else
    {
      v14 = (char **)sub_1004CE854((uint64_t)&v35, v6);
      v16 = a1[4] + a1[5];
      v17 = a1[1];
      v18 = (char **)(v17 + 8 * (v16 >> 8));
      if (a1[2] == v17)
        v19 = 0;
      else
        v19 = &(*v18)[16 * v16];
      v38 = v35;
      sub_10050F3C0(v14, v15, v18, v19, (char **)&v38);
      a1[5] -= v6;
      while ((sub_1004A5844(a1, 1) & 1) != 0)
        ;
    }
  }
  v30 = a1[4];
  v31 = a1[1];
  v32 = (_QWORD *)(v31 + 8 * (v30 >> 8));
  if (a1[2] == v31)
    v33 = 0;
  else
    v33 = *v32 + 16 * v30;
  v38.n128_u64[0] = (unint64_t)v32;
  v38.n128_u64[1] = v33;
  return sub_1004CE854((uint64_t)&v38, v11);
}

__n128 sub_10050F26C@<Q0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 result;
  uint64_t v21;
  __n128 v22;

  if (a1 == a3)
  {
    v19 = a2;
    v18 = a4;
    v15 = a5;
    v16 = a6;
  }
  else
  {
    v13 = a3 - 1;
    v12 = *a3;
    v14 = a4;
    v15 = a5;
    v16 = a6;
    while (1)
    {
      sub_10050F338(v12, v14, v15, v16, &v21);
      v16 = v22.n128_i64[1];
      v15 = (uint64_t *)v22.n128_u64[0];
      if (v13 == a1)
        break;
      v17 = *v13--;
      v12 = v17;
      v14 = v17 + 4096;
    }
    v18 = *a1 + 4096;
    v19 = a2;
  }
  sub_10050F338(v19, v18, v15, v16, &v21);
  result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = a4;
  a7[1] = result;
  return result;
}

void sub_10050F338(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X3>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *a3;
    v6 = a2;
    while (1)
    {
      if ((v6 - a1) >> 4 >= (a4 - v5) >> 4)
        v7 = (a4 - v5) >> 4;
      else
        v7 = (v6 - a1) >> 4;
      if (v7)
      {
        v8 = (uint64_t *)(v6 - 8);
        v9 = -16 * v7;
        do
        {
          *(_QWORD *)(a4 - 16) = *(v8 - 1);
          a4 -= 16;
          v10 = *v8;
          v8 -= 2;
          *(_QWORD *)(a4 + 8) = v10;
          v9 += 16;
        }
        while (v9);
      }
      v6 -= 16 * v7;
      if (v6 == a1)
        break;
      v11 = *--a3;
      v5 = v11;
      a4 = v11 + 4096;
    }
    if (v5 + 4096 == a4)
    {
      v12 = a3[1];
      ++a3;
      a4 = v12;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

double sub_10050F3C0(char **a1, char *a2, char **a3, char *a4, char **a5)
{
  char *v7;
  char *v8;
  char **v10;
  char *i;
  char *v12;
  double result;
  char *v14;
  __int128 v15;

  v7 = *a5;
  v8 = a5[1];
  if (a1 != a3)
  {
    v10 = a1 + 1;
    for (i = *a1 + 4096; ; i = v12 + 4096)
    {
      sub_10050F450(a2, i, v7, v8, &v14);
      v8 = (char *)*((_QWORD *)&v15 + 1);
      v7 = (char *)v15;
      *a5 = (char *)v15;
      a5[1] = v8;
      if (v10 == a3)
        break;
      v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  sub_10050F450(a2, a4, v7, v8, &v14);
  result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_10050F450(char *a1@<X1>, char *a2@<X2>, char *a3@<X3>, char *a4@<X4>, char **a5@<X8>)
{
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  char *v10;

  if (a1 == a2)
  {
    a2 = a1;
  }
  else
  {
    v5 = *(_QWORD **)a3;
    while (1)
    {
      v6 = (char *)(v5 + 512);
      if ((a2 - a1) >> 4 >= (v6 - a4) >> 4)
        v7 = (v6 - a4) >> 4;
      else
        v7 = (a2 - a1) >> 4;
      if (v7)
      {
        v8 = &a1[16 * v7];
        do
        {
          *(_QWORD *)a4 = *(_QWORD *)a1;
          *((_QWORD *)a4 + 1) = *((_QWORD *)a1 + 1);
          a4 += 16;
          a1 += 16;
        }
        while (a1 != v8);
        a1 = v8;
      }
      if (a1 == a2)
        break;
      v9 = (_QWORD *)*((_QWORD *)a3 + 1);
      a3 += 8;
      v5 = v9;
      a4 = (char *)v9;
    }
    if (v6 == a4)
    {
      v10 = (char *)*((_QWORD *)a3 + 1);
      a3 += 8;
      a4 = v10;
    }
  }
  *a5 = a2;
  a5[1] = a3;
  a5[2] = a4;
}

void sub_10050F4D8(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10050F504(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10050F530(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_1004A4854((_QWORD *)(a2 + 24));
    if (*(_BYTE *)(a2 + 8))
      *(_BYTE *)(a2 + 8) = 0;
    operator delete();
  }
}

_QWORD *sub_10050F57C(uint64_t a1)
{
  _QWORD *result;

  result = (_QWORD *)sub_100E33344(a1, 0);
  *result = &off_102140E20;
  return result;
}

void sub_10050F5A4(uint64_t a1)
{
  sub_10049BCA4(a1);
  operator delete();
}

void sub_10050F66C(id a1)
{
  qword_1023016E0 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLMotionCuesServiceAdapterSilo"));
}

void sub_10050F748()
{
  operator delete();
}

uint64_t sub_10050F7A4(uint64_t result, uint64_t a2)
{
  _DWORD *v2;
  uint64_t v3;
  __CFNotificationCenter *LocalCenter;
  NSObject *v5;
  int v6;
  int v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  int v23;
  int v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  NSObject *v28;
  const char *v29;
  char *v30;
  const char *v31;
  char *v32;
  const char *v33;
  char *v34;
  const char *v35;
  char *v36;
  float v37;
  float v38;
  float v39;
  int v40;
  double v41;
  _OWORD buf[102];

  v2 = (_DWORD *)result;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 2;
  *(_QWORD *)(result + 16) = 0;
  v3 = result + 16;
  *(_QWORD *)(result + 24) = 0;
  if (&__AXSMotionCuesMode)
  {
    *(_DWORD *)(result + 8) = _AXSMotionCuesMode();
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, v2, (CFNotificationCallback)sub_100510184, kAXSMotionCuesPreferenceDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    if (!v2[2])
    {
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v5 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle enabled", (uint8_t *)buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        LOWORD(v40) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Only In Vehicle enabled", &v40, 2);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v29);
        if (v30 != (char *)buf)
          free(v30);
      }
      operator new();
    }
    if (!*(_QWORD *)v3)
      goto LABEL_43;
    v39 = 0.0;
    sub_1001E4804(buf);
    v6 = sub_100526804(*(uint64_t *)&buf[0], "OverridesMotionCuesLowVehicleMinConfidence", &v39);
    v7 = v6;
    v8 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (!*((_QWORD *)&buf[0] + 1))
      goto LABEL_14;
    v9 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
      if (!v7)
        goto LABEL_21;
    }
    else
    {
LABEL_14:
      if (!v6)
        goto LABEL_21;
    }
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102140F08);
    v11 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134217984;
      *(double *)((char *)buf + 4) = v39;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting min confidence to %f", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v40 = 134217984;
      v41 = v39;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Setting min confidence to %f", COERCE_DOUBLE(&v40));
      v32 = (char *)v31;
      sub_100512490("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v31);
      if (v32 != (char *)buf)
        free(v32);
    }
    _S0 = v39;
    __asm { FCVT            H0, S0 }
    *(_WORD *)(*(_QWORD *)v3 + 1176) = LOWORD(_S0);
LABEL_21:
    v38 = 0.0;
    sub_1001E4804(buf);
    v17 = sub_100526804(*(uint64_t *)&buf[0], "OverridesMotionCuesCooldownInterval", &v38);
    v18 = v17;
    v19 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (!*((_QWORD *)&buf[0] + 1))
      goto LABEL_25;
    v20 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v18)
        goto LABEL_26;
    }
    else
    {
LABEL_25:
      if (v17)
      {
LABEL_26:
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        v22 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
        {
          LODWORD(buf[0]) = 134217984;
          *(double *)((char *)buf + 4) = v38;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting cooldown interval to %f", (uint8_t *)buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102140F08);
          v40 = 134217984;
          v41 = v38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Setting cooldown interval to %f", COERCE_DOUBLE(&v40));
          v34 = (char *)v33;
          sub_100512490("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v33);
          if (v34 != (char *)buf)
            free(v34);
        }
        *(double *)(*(_QWORD *)v3 + 288) = v38;
      }
    }
    v37 = 0.0;
    sub_1001E4804(buf);
    v23 = sub_100526804(*(uint64_t *)&buf[0], "OverridesMotionCuesSessionTimeout", &v37);
    v24 = v23;
    v25 = (std::__shared_weak_count *)*((_QWORD *)&buf[0] + 1);
    if (!*((_QWORD *)&buf[0] + 1))
      goto LABEL_36;
    v26 = (unint64_t *)(*((_QWORD *)&buf[0] + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      if (!v24)
        goto LABEL_43;
    }
    else
    {
LABEL_36:
      if (!v23)
        goto LABEL_43;
    }
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102140F08);
    v28 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
    {
      LODWORD(buf[0]) = 134217984;
      *(double *)((char *)buf + 4) = v37;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Setting session timeout to %f", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v40 = 134217984;
      v41 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Setting session timeout to %f", COERCE_DOUBLE(&v40));
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "CLMotionCuesService::CLMotionCuesService(id<CLIntersiloUniverse>)", "%s\n", v35);
      if (v36 != (char *)buf)
        free(v36);
    }
    *(double *)(*(_QWORD *)v3 + 296) = v37;
LABEL_43:
    sub_1013DF780();
  }
  return result;
}

void sub_1005100E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_100510924(v2, 0);
  _Unwind_Resume(a1);
}

void sub_100510184(uint64_t a1, id *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[9];
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id *v23;

  CLProfilingIdentify("CLMotionCuesService::onAXSMotionCuesPreferenceDidChange");
  objc_msgSend(objc_msgSend(*a2, "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102140EE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesService::onAXSMotionCuesPreferenceDidChange", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140EE8);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a2;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesService::onAXSMotionCuesPreferenceDidChange\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v12 = objc_msgSend(*a2, "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100510FB0;
  v13[3] = &unk_1021382B0;
  v13[4] = a2;
  v13[5] = a1;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  objc_msgSend(v12, "sync:", v13);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_100510384(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1005103A4(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLMotionCuesService::onMobileAssetNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102140EE8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionCuesService::onMobileAssetNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140EE8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionCuesService::onMobileAssetNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100510960((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10051055C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10051057C(uint64_t *a1)
{
  __CFNotificationCenter *LocalCenter;
  uint64_t v3;

  LocalCenter = CFNotificationCenterGetLocalCenter();
  CFNotificationCenterRemoveObserver(LocalCenter, a1, kAXSMotionCuesPreferenceDidChangeNotification, 0);
  objc_msgSend(*(id *)(a1[3] + 16), "unregister:forNotification:", *(_QWORD *)(a1[3] + 8), 9);
  v3 = a1[3];
  a1[3] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_100510924(a1 + 2, 0);
  return a1;
}

uint64_t sub_1005105F0(uint64_t a1)
{
  uint64_t result;
  NSObject *v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  const char *v7;
  uint8_t *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  result = _AXSMotionCuesMode();
  if ((_DWORD)result != *(_DWORD *)(a1 + 8))
  {
    *(_DWORD *)(a1 + 8) = result;
    if (!(_DWORD)result)
    {
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v4 = qword_1022A0308;
      if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle enabled", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        v9[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Only In Vehicle enabled", v9, 2);
        v8 = (uint8_t *)v7;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onAXSMotionCuesPreferenceDidChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v7);
        if (v8 != buf)
          free(v8);
      }
      operator new();
    }
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102140F08);
    v3 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "[CLMotionCuesService] Only In Vehicle disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 2, "[CLMotionCuesService] Only In Vehicle disabled", v9, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onAXSMotionCuesPreferenceDidChange(CFNotificationCenterRef, CFStringRef, const void *, CFDictionaryRef)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    return sub_100510924((uint64_t *)(a1 + 16), 0);
  }
  return result;
}

void sub_1005108F8()
{
  operator delete();
}

uint64_t sub_100510924(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10103E33C();
    operator delete();
  }
  return result;
}

double sub_100510960(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  int v8;
  double result;
  NSObject *v10;
  NSObject *v16;
  NSObject *v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  float v27;
  uint64_t v28;
  int v29;
  double v30;
  uint8_t buf[4];
  double v32;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0300 != -1)
      dispatch_once(&qword_1022A0300, &stru_102140F08);
    v7 = qword_1022A0308;
    if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_INFO))
    {
      v8 = *a3;
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA,notification,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0300 != -1)
        dispatch_once(&qword_1022A0300, &stru_102140F08);
      v18 = *a3;
      v29 = 67240192;
      LODWORD(v30) = v18;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 1, "[CLMotionCuesService] MA-OTA,notification,%{public}d", &v29, 8);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v19);
      if (v20 != buf)
        free(v20);
    }
    if (*a3 == 9)
    {
      v28 = 0;
      v27 = 0.0;
      if (sub_100526804(a4, "OverridesMotionCuesLowVehicleMinConfidence", (float *)&v28 + 1))
      {
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        v10 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v32 = *((float *)&v28 + 1);
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesLowVehicleMinConfidence config available, value %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102140F08);
          v29 = 134217984;
          v30 = *((float *)&v28 + 1);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 1, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesLowVehicleMinConfidence config available, value %f", COERCE_DOUBLE(&v29));
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        _S0 = HIDWORD(v28);
        __asm { FCVT            H0, S0 }
        *(_WORD *)(*(_QWORD *)(a1 + 16) + 1176) = _S0;
      }
      if (sub_100526804(a4, "OverridesMotionCuesCooldownInterval", (float *)&v28))
      {
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        v16 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v32 = *(float *)&v28;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesCooldownInterval config available, value %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102140F08);
          v29 = 134217984;
          v30 = *(float *)&v28;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 1, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesCooldownInterval config available, value %f", COERCE_DOUBLE(&v29));
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        *(double *)(*(_QWORD *)(a1 + 16) + 288) = *(float *)&v28;
      }
      if (sub_100526804(a4, "OverridesMotionCuesSessionTimeout", &v27))
      {
        if (qword_1022A0300 != -1)
          dispatch_once(&qword_1022A0300, &stru_102140F08);
        v17 = qword_1022A0308;
        if (os_log_type_enabled((os_log_t)qword_1022A0308, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v32 = v27;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesSessionTimeout config available, value %f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0300 != -1)
            dispatch_once(&qword_1022A0300, &stru_102140F08);
          v29 = 134217984;
          v30 = v27;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0308, 1, "[CLMotionCuesService] MA-OTA, OverridesMotionCuesSessionTimeout config available, value %f", COERCE_DOUBLE(&v29));
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 2, "void CLMotionCuesService::onMobileAssetNotification(int, const CLMobileAssetManager_Type::Notification &, const CLMobileAssetManager_Type::NotificationData &)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
        result = v27;
        *(double *)(*(_QWORD *)(a1 + 16) + 296) = v27;
      }
    }
  }
  return result;
}

uint64_t sub_100510FB0(uint64_t a1)
{
  return sub_1005105F0(*(_QWORD *)(a1 + 32));
}

void sub_100510FB8(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100510FE4(id a1)
{
  qword_1022A0308 = (uint64_t)os_log_create("com.apple.locationd.Motion", "MotionCues");
}

uint64_t *sub_100511010(uint64_t **a1, uint64_t *a2)
{
  uint64_t *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_10051057C(result);
    operator delete();
  }
  return result;
}

uint64_t sub_10051104C(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _BYTE v6[232];

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a3 + 48) + 48))(*(_QWORD *)(a3 + 48));
  if ((_DWORD)result)
  {
    result = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a3 + 48) + 24))(*(_QWORD *)(a3 + 48), v6, a1);
    if (v6[208])
      return sub_1004C5730(*(_QWORD *)(a3 + 56));
  }
  return result;
}

uint64_t sub_1005110E4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 56) + 48))(*(_QWORD *)(a2 + 56));
}

void sub_1005110F4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  float v8;
  float v9;
  float v10;
  double v11;
  float v12;
  int v13;
  float v14;
  double v15;
  double v16;
  float v17;
  float v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint8_t *v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  double v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  int v46;
  __int16 v47;
  double v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  uint8_t buf[4];
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  double v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  int v74;
  __int16 v75;
  double v76;
  __int16 v77;
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  __int16 v81;
  uint64_t v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;

  v4 = *(_QWORD *)(a1 + 912);
  v5 = *(_QWORD *)(a1 + 928);
  v29 = *(_QWORD *)(a1 + 944);
  v30 = *(_QWORD *)(a1 + 920);
  v6 = *(int *)(a1 + 972);
  v7 = *(_DWORD *)(a1 + 976);
  v8 = *(float *)(a1 + 984);
  v9 = *(float *)(a1 + 988);
  v10 = v8 * flt_101BB5108[v6];
  if (v8 >= 0.0833)
  {
    v14 = (float)*(unsigned int *)(a1 + 1352);
    switch((int)v6)
    {
      case 2:
        v15 = v14 * -1.44 + v10 * 2.06;
        v16 = 7.77;
        break;
      case 3:
        v15 = v14 * -0.62 + v10 * 5.5;
        v16 = 4.44;
        break;
      case 4:
        v15 = v14 * -1.44 + v10 * 2.06;
        v16 = 8.77;
        break;
      default:
        v15 = v14 * -0.61 + v10 * 2.0;
        v16 = 6.59;
        break;
    }
    v11 = v15 + v16;
    if (v9 >= 0.0)
    {
      if (v9 <= 20.0)
      {
        v13 = 0;
        v12 = 1.4;
      }
      else
      {
        v13 = 0;
        if (v9 <= 80.0)
          v12 = (float)(v9 * -0.0033) + 1.466;
        else
          v12 = 1.2;
      }
    }
    else
    {
      v13 = 0;
      v12 = 1.3;
    }
  }
  else
  {
    v11 = 2.0999999;
    if ((_DWORD)v6 == 6)
      v11 = 6.0;
    v12 = 1.0;
    v13 = 3;
  }
  v17 = v11;
  if (qword_10229FCA0 != -1)
    dispatch_once(&qword_10229FCA0, &stru_102140F78);
  v18 = v12 * v17;
  v19 = qword_10229FCA8;
  if (os_log_type_enabled((os_log_t)qword_10229FCA8, OS_LOG_TYPE_DEBUG))
  {
    v20 = *(_QWORD *)(a1 + 120);
    v21 = *(_QWORD *)(a1 + 128);
    *(_DWORD *)buf = 134221312;
    v60 = v20;
    v61 = 2048;
    v62 = v21;
    v63 = 1024;
    v64 = v7;
    v65 = 1024;
    v66 = v6;
    v67 = 2048;
    v68 = v17;
    v69 = 2048;
    v70 = v5;
    v71 = 2048;
    v72 = v10;
    v73 = 1024;
    v74 = v13;
    v75 = 2048;
    v76 = v8;
    v77 = 2048;
    v78 = v4;
    v79 = 2048;
    v80 = v30;
    v81 = 2048;
    v82 = v29;
    v83 = 2048;
    v84 = v18;
    v85 = 2048;
    v86 = v9;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f", buf, 0x82u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCA0 != -1)
      dispatch_once(&qword_10229FCA0, &stru_102140F78);
    v24 = *(_QWORD *)(a1 + 120);
    v25 = *(_QWORD *)(a1 + 128);
    v31 = 134221312;
    v32 = v24;
    v33 = 2048;
    v34 = v25;
    v35 = 1024;
    v36 = v7;
    v37 = 1024;
    v38 = v6;
    v39 = 2048;
    v40 = v17;
    v41 = 2048;
    v42 = v5;
    v43 = 2048;
    v44 = v10;
    v45 = 1024;
    v46 = v13;
    v47 = 2048;
    v48 = v8;
    v49 = 2048;
    v50 = v4;
    v51 = 2048;
    v52 = v30;
    v53 = 2048;
    v54 = v29;
    v55 = 2048;
    v56 = v18;
    v57 = 2048;
    v58 = v9;
    LODWORD(v28) = 130;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCA8, 2, "startTime,%f,endTime,%f,numberOfStrokes,%d,strokeType,%d,epochMets,%f,timestamp,%f,speed,%f,metSource,%d,strokeRate,%f,entryStartTime,%f,entryEndTime,%f,distance,%f,scaledMets,%f,historicalTurnsPerSession,%f", COERCE_DOUBLE(&v31), v28, v29, v30);
    v27 = (uint8_t *)v26;
    sub_100512490("Generic", 1, 0, 2, "virtual CLMetsInfo CLCalorieSwimmingModel::computeMETS(const CLNatalieModelInput &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  if (v8 < 0.0833)
  {
    v22 = sub_10009ED0C();
    sub_10134CE0C(v22);
  }
  v23 = sub_10009ED0C();
  sub_10134C7D8(v23, v6);
  *(_DWORD *)a2 = 0;
  *(float *)(a2 + 4) = v17;
  *(_DWORD *)(a2 + 8) = 0;
  *(float *)(a2 + 12) = v17;
  *(_DWORD *)(a2 + 16) = 0;
  *(float *)(a2 + 20) = v18;
  *(_DWORD *)(a2 + 24) = v13;
  *(_DWORD *)(a2 + 28) = 0;
  *(_QWORD *)(a2 + 32) = 0xB00000003;
}

void sub_1005115E8(id a1)
{
  qword_10229FCA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Swimming");
}

uint64_t sub_1005119C8(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  BOOL v9;
  int v10;
  char v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  char v16;
  uint64_t result;
  char v18;
  unsigned int v19;
  unint64_t v20;
  char v21;
  char v22;
  unsigned int v23;
  unint64_t v24;
  char v25;
  char v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  unsigned int v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t v36;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v7 == -1 || v7 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v8 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v7 + 1;
      v6 |= (unint64_t)(v8 & 0x7F) << v4;
      if ((v8 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v9 = v5++ >= 9;
      if (v9)
      {
        LODWORD(v6) = 0;
        v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v10 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v10 || (v6 & 7) == 4)
      break;
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        v12 = 0;
        v13 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 2u;
        while (1)
        {
          v15 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v15 == -1 || v15 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v16 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v15);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v15 + 1;
          v14 |= (unint64_t)(v16 & 0x7F) << v12;
          if ((v16 & 0x80) == 0)
            goto LABEL_56;
          v12 += 7;
          v9 = v13++ >= 9;
          if (v9)
          {
            LODWORD(v14) = 0;
            goto LABEL_58;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_56:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_58:
        v36 = 16;
        goto LABEL_67;
      case 2u:
        v18 = 0;
        v19 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 4u;
        while (2)
        {
          v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v20 == -1 || v20 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v21 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 1;
            v14 |= (unint64_t)(v21 & 0x7F) << v18;
            if (v21 < 0)
            {
              v18 += 7;
              v9 = v19++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_62;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_62:
        v36 = 20;
        goto LABEL_67;
      case 3u:
        v22 = 0;
        v23 = 0;
        v14 = 0;
        *(_BYTE *)(a1 + 32) |= 8u;
        while (2)
        {
          v24 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v24 == -1 || v24 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v25 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v24);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v24 + 1;
            v14 |= (unint64_t)(v25 & 0x7F) << v22;
            if (v25 < 0)
            {
              v22 += 7;
              v9 = v23++ >= 9;
              if (v9)
              {
                LODWORD(v14) = 0;
                goto LABEL_66;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v14) = 0;
LABEL_66:
        v36 = 24;
LABEL_67:
        *(_DWORD *)(a1 + v36) = v14;
        continue;
      case 4u:
        v26 = 0;
        v27 = 0;
        v28 = 0;
        *(_BYTE *)(a1 + 32) |= 0x10u;
        while (2)
        {
          v29 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          if (v29 == -1 || v29 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v30 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v29);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v29 + 1;
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if (v30 < 0)
            {
              v26 += 7;
              v9 = v27++ >= 9;
              if (v9)
              {
                v28 = 0;
                goto LABEL_71;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v28 = 0;
LABEL_71:
        *(_BYTE *)(a1 + 28) = v28 != 0;
        continue;
      case 5u:
        v31 = 0;
        v32 = 0;
        v33 = 0;
        *(_BYTE *)(a1 + 32) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v34 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      if (v34 == -1 || v34 >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v34);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34 + 1;
      v33 |= (unint64_t)(v35 & 0x7F) << v31;
      if ((v35 & 0x80) == 0)
        goto LABEL_73;
      v31 += 7;
      v9 = v32++ >= 9;
      if (v9)
      {
        v33 = 0;
        goto LABEL_75;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_73:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v33 = 0;
LABEL_75:
    *(_QWORD *)(a1 + 8) = v33;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

const char *sub_10051242C(unsigned int a1)
{
  if (a1 > 5)
    return "NONE";
  else
    return off_102140F98[a1];
}

uint64_t sub_100512450()
{
  uint64_t v0;

  v0 = sub_1001BFFCC();
  return sub_100ACF7E4(v0);
}

BOOL sub_100512464()
{
  uint64_t v0;

  v0 = sub_1001BFFCC();
  return sub_100AD0388(v0);
}

uint64_t sub_10051247C()
{
  uint64_t v0;

  v0 = sub_1001BFFCC();
  return sub_100AD03D4(v0);
}

uint64_t sub_100512490(const char *a1, uint64_t a2, int a3, uint64_t a4, const char *a5, char *a6, ...)
{
  uint64_t v12;
  uint64_t result;
  va_list va;

  va_start(va, a6);
  v12 = sub_1001BFFCC();
  if (a3)
    result = sub_100ACE538(v12, a1, a2, a4, a5, a6, va);
  else
    result = sub_100ACE160(v12, a1, a2, a4, a5, a6, va);
  if (off_1023016F8)
    return off_1023016F8(qword_1023016F0, a1, a2, a4, a5, a6, va);
  return result;
}

uint64_t sub_100512544()
{
  if (qword_102301700 != -1)
    dispatch_once(&qword_102301700, &stru_1021410C8);
  return dword_1022A2878;
}

void sub_100512584(id a1)
{
  uint64_t v1;
  int v2;
  int v3;

  v3 = 0;
  if (sub_1001FD94C())
  {
    v1 = sub_1001FD94C();
    if (sub_1001E4B84(v1, "gpsUtcLeapSeconds", &v3))
    {
      if (v3 >= 1)
      {
        v2 = 18 - v3;
        if (v3 >= 0x12)
          v2 = v3 - 18;
        if (v2 <= 19)
          dword_1022A2878 = v3;
      }
    }
  }
}

BOOL sub_1005125F0(_BOOL8 result)
{
  int v1;
  uint64_t v2;
  int v3;

  v3 = result;
  if ((int)result >= 1)
  {
    v1 = 18 - result;
    if (result >= 0x12)
      v1 = result - 18;
    if (v1 <= 19)
    {
      v2 = sub_1001FD94C();
      result = sub_10011B4E4(v2, "gpsUtcLeapSeconds", &v3);
      dword_1022A2878 = v3;
    }
  }
  return result;
}

void sub_10051264C(CFTypeRef cf)
{
  NSObject *v2;
  double v3;
  uint8_t *v4;
  uint8_t *v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  double v10;
  uint8_t *v11;
  int v12;
  CFTypeRef v13;
  uint8_t buf[4];
  CFTypeRef v15;

  if (!qword_102301708)
    goto LABEL_16;
  if ((CFTypeRef)qword_102301708 == cf)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning Setting CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      LOWORD(v12) = 0;
      v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning Setting CLCommon's runloop after it was already established", &v12, 2);
      v5 = v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n", v10);
      goto LABEL_33;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "Changing CLCommon's runloop after it was already established", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      LOWORD(v12) = 0;
      v3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Changing CLCommon's runloop after it was already established", &v12, 2);
      v5 = v4;
      sub_100512490("Generic", 1, 0, 0, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n", v3);
LABEL_33:
      if (v5 != buf)
        free(v5);
    }
  }
LABEL_16:
  if (cf)
    CFRetain(cf);
  if (qword_102301708)
    CFRelease((CFTypeRef)qword_102301708);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    v15 = cf;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "CLCommonSetRunLoop, %p", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v12 = 134217984;
    v13 = cf;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CLCommonSetRunLoop, %p", &v12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCommonSetRunLoop(CFRunLoopRef)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  qword_102301708 = (uint64_t)cf;
}

BOOL sub_100512A64(double a1, double a2, double a3)
{
  return vabdd_f64(a1, a2) < a3;
}

BOOL sub_100512A74(double a1, double a2, double a3, double a4, double a5)
{
  _BOOL4 v5;

  v5 = vabdd_f64(a1, a3) < a5;
  return vabdd_f64(a2, a4) < a5 && v5;
}

double sub_100512A90(double a1)
{
  return a1 * 57.2957795;
}

void sub_100512AA0(long double a1, long double a2)
{
  fmod(a1, 360.0);
  fmod(a2, 360.0);
}

void sub_100512B2C(long double a1)
{
  fmod(a1, 360.0);
}

uint64_t sub_100512BB4(const std::string *a1, unsigned __int8 a2, uint64_t *a3)
{
  _QWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  void (__cdecl **v9)(std::basic_stringstream<char> *__hidden);
  void *__p[2];
  uint64_t v12;
  void (__cdecl **v13[3])(std::basic_stringstream<char> *__hidden);
  _QWORD v14[10];
  char v15;
  uint64_t v16;

  sub_100512D24(v13, a1, 24);
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  while (1)
  {
    v5 = sub_1004ACBE4(v13, (uint64_t)__p, a2);
    if ((*((_BYTE *)v5 + *(_QWORD *)(*v5 - 24) + 32) & 5) != 0)
      break;
    v6 = a3[1];
    if (v6 >= a3[2])
    {
      v8 = sub_1015E796C(a3, (__int128 *)__p);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_100115CE4((_BYTE *)a3[1], __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v7 = *(_OWORD *)__p;
        *(_QWORD *)(v6 + 16) = v12;
        *(_OWORD *)v6 = v7;
      }
      v8 = v6 + 24;
      a3[1] = v6 + 24;
    }
    a3[1] = v8;
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
  *(void (__cdecl ***)(std::basic_stringstream<char> *__hidden))((char *)v13
  v13[2] = v9;
  if (v15 < 0)
    operator delete((void *)v14[8]);
  std::streambuf::~streambuf(v14);
  return std::ios::~ios(&v16);
}

void sub_100512CF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_100512D24(void (__cdecl ***a1)(std::basic_stringstream<char> *__hidden this), const std::string *a2, int a3))(std::basic_stringstream<char> *__hidden this)
{
  _QWORD *v5;
  uint64_t v6;
  void (__cdecl **v7)(std::basic_stringstream<char> *__hidden);
  void (__cdecl **v8)(std::basic_stringstream<char> *__hidden);
  std::ios_base *v9;
  void (__cdecl **v10)(std::basic_stringstream<char> *__hidden);
  uint64_t v11;
  void (__cdecl **v12)(std::basic_stringstream<char> *__hidden);

  v5 = a1 + 2;
  v6 = (uint64_t)(a1 + 3);
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 3);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  a1[2] = v10;
  *(_QWORD *)((char *)*(v10 - 3) + (_QWORD)v5) = v11;
  *a1 = v12;
  sub_1004ADD38(v6, a2, a3);
  return a1;
}

void sub_100512E1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  std::iostream::~basic_iostream(v2, v3 + 8);
  std::ios::~ios(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100512E44(const char *a1)
{
  passwd *v2;
  uid_t pw_uid;
  gid_t pw_gid;

  v2 = getpwnam("mobile");
  if (v2)
  {
    pw_uid = v2->pw_uid;
    pw_gid = v2->pw_gid;
  }
  else
  {
    pw_uid = 501;
    pw_gid = 501;
  }
  return lchown(a1, pw_uid, pw_gid);
}

uint64_t sub_100512E84(_BYTE *a1, uid_t a2, gid_t a3)
{
  int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t result;
  stat v10;
  char v11[1024];

  bzero(v11, 0x400uLL);
  v6 = *a1;
  if (!*a1)
    return 1;
  v7 = 0;
  v8 = a1 + 1;
  while (1)
  {
    v11[v7] = v6;
    if (v6 != 47 || !stat(v11, &v10))
      goto LABEL_7;
    if (mkdir(v11, 0x1FFu))
      return 0;
    lchown(v11, a2, a3);
    lchmod(v11, 0x1C0u);
LABEL_7:
    result = 1;
    if (v7 <= 0x3FD)
    {
      v6 = v8[v7++];
      if (v6)
        continue;
    }
    return result;
  }
}

uint64_t sub_100512F7C(const char *a1, uid_t a2, gid_t a3, mode_t a4)
{
  lchown(a1, a2, a3);
  return lchmod(a1, a4);
}

BOOL sub_100512FA8(const char *a1)
{
  return unlink(a1) == 0;
}

BOOL sub_100512FC4(const char *a1)
{
  return rmdir(a1) == 0;
}

BOOL sub_100512FE0(const std::__fs::filesystem::path *a1, const std::__fs::filesystem::path *a2, std::error_code *a3)
{
  int v3;

  rename(a1, a2, a3);
  return v3 == 0;
}

uint64_t sub_100512FFC(const char *a1, const char *a2)
{
  void *v4;
  FILE *v5;
  FILE *v6;
  FILE *v7;
  FILE *v8;
  size_t v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  int v14;
  uint64_t v15;
  int v16;
  const char *v17;
  uint8_t *v18;
  NSObject *v19;
  int v20;
  NSObject *v21;
  uint64_t v23;
  int v24;
  const char *v25;
  uint8_t *v26;
  uint8_t *v27;
  _BYTE v28[18];
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;

  v4 = malloc_type_malloc(0x400uLL, 0x93D02233uLL);
  if (!v4)
    goto LABEL_31;
  v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v14 = *__error();
      *(_DWORD *)buf = 136446466;
      v30 = a1;
      v31 = 1026;
      v32 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    v11 = 0;
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_39;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v15 = qword_1022A02D8;
    v16 = *__error();
    *(_DWORD *)v28 = 136446466;
    *(_QWORD *)&v28[4] = a1;
    *(_WORD *)&v28[12] = 1026;
    *(_DWORD *)&v28[14] = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 17, "cannot open source file: %{public}s, errno %{public}d", v28, 18);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
LABEL_31:
    v11 = 0;
    goto LABEL_39;
  }
  v6 = v5;
  v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v20 = *__error();
      *(_DWORD *)buf = 136446466;
      v30 = a2;
      v31 = 1026;
      v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v23 = qword_1022A02D8;
      v24 = *__error();
      *(_DWORD *)v28 = 136446466;
      *(_QWORD *)&v28[4] = a2;
      *(_WORD *)&v28[12] = 1026;
      *(_DWORD *)&v28[14] = v24;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v23, 17, "cannot open target file: %{public}s, errno %{public}d", v28, 18);
      v26 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
    fclose(v6);
    goto LABEL_31;
  }
  v8 = v7;
  while (1)
  {
    if (feof(v6))
    {
      v11 = 1;
      goto LABEL_38;
    }
    v9 = fread(v4, 1uLL, 0x400uLL, v6);
    if (v9 == -1)
      break;
    if (v9 != fwrite(v4, 1uLL, v9, v8))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v10 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446210;
        v30 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s", buf, 0xCu);
      }
      v11 = 0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        *(_DWORD *)v28 = 136446210;
        *(_QWORD *)&v28[4] = a2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "error writing target file: %{public}s", v28, 12, *(_OWORD *)v28);
LABEL_47:
        v27 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 0, "int CLCommonCopyFile(const char *, const char *)", "%s\n", v12);
        if (v27 != buf)
          free(v27);
        v11 = 0;
        goto LABEL_38;
      }
      goto LABEL_38;
    }
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v21 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    v30 = a1;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
  }
  v11 = 0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    *(_DWORD *)v28 = 136446210;
    *(_QWORD *)&v28[4] = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "error reading source file: %{public}s", v28, 12, *(_OWORD *)v28);
    goto LABEL_47;
  }
LABEL_38:
  fclose(v6);
  fclose(v8);
LABEL_39:
  free(v4);
  return v11;
}

uint64_t sub_100513660(const char *a1, const char *a2)
{
  void *v4;
  FILE *v5;
  FILE *v6;
  FILE *v7;
  FILE *v8;
  BZFILE *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  size_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  int v17;
  char *v18;
  NSObject *v19;
  int v20;
  NSObject *v22;
  const char *v23;
  NSObject *v24;
  uint8_t *v25;
  uint64_t v26;
  int v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _BYTE v31[24];
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  int v35;

  HIDWORD(v30) = 0;
  v4 = malloc_type_malloc(0x400uLL, 0x72AACFCCuLL);
  if (!v4)
    goto LABEL_37;
  v5 = fopen(a1, "rb");
  if (!v5)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v15 = *__error();
      *(_DWORD *)buf = 136446466;
      v33 = a1;
      v34 = 1026;
      v35 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "cannot open source file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    v11 = 0;
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_38;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v16 = qword_1022A02D8;
    v17 = *__error();
    *(_DWORD *)v31 = 136446466;
    *(_QWORD *)&v31[4] = a1;
    *(_WORD *)&v31[12] = 1026;
    *(_DWORD *)&v31[14] = v17;
    LODWORD(v30) = 18;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 17, "cannot open source file: %{public}s, errno %{public}d", v31, v30);
    sub_100512490("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
LABEL_37:
    v11 = 0;
    goto LABEL_38;
  }
  v6 = v5;
  v7 = fopen(a2, "wb");
  if (!v7)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v20 = *__error();
      *(_DWORD *)buf = 136446466;
      v33 = a1;
      v34 = 1026;
      v35 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "cannot open target file: %{public}s, errno %{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v26 = qword_1022A02D8;
      v27 = *__error();
      *(_DWORD *)v31 = 136446466;
      *(_QWORD *)&v31[4] = a1;
      *(_WORD *)&v31[12] = 1026;
      *(_DWORD *)&v31[14] = v27;
      LODWORD(v30) = 18;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 17, "cannot open target file: %{public}s, errno %{public}d", v31, v30);
      sub_100512490("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    fclose(v6);
    goto LABEL_37;
  }
  v8 = v7;
  v9 = BZ2_bzWriteOpen((int *)&v30 + 1, v7, 1, 0, 0);
  if (HIDWORD(v30))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446466;
      v33 = a2;
      v34 = 1026;
      v35 = HIDWORD(v30);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "cannot open compression stream: %{public}s, bzerror %{public}d", buf, 0x12u);
    }
    v11 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      *(_DWORD *)v31 = 136446466;
      *(_QWORD *)&v31[4] = a2;
      *(_WORD *)&v31[12] = 1026;
      *(_DWORD *)&v31[14] = HIDWORD(v30);
      LODWORD(v30) = 18;
      v23 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "cannot open compression stream: %{public}s, bzerror %{public}d", v31, v30, *(_OWORD *)v31, *(_QWORD *)&v31[16]);
LABEL_58:
      v25 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v23);
      if (v25 != buf)
        free(v25);
      v11 = 0;
    }
  }
  else
  {
    while (1)
    {
      if (feof(v6))
      {
        v11 = 1;
        goto LABEL_10;
      }
      v13 = fread(v4, 1uLL, 0x400uLL, v6);
      if (v13 == -1)
        break;
      BZ2_bzWrite((int *)&v30 + 1, v9, v4, v13);
      if (HIDWORD(v30))
      {
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        v24 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 136446466;
          v33 = a2;
          v34 = 1026;
          v35 = HIDWORD(v30);
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "error writing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
        }
        v11 = 0;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141108);
          *(_DWORD *)v31 = 136446466;
          *(_QWORD *)&v31[4] = a2;
          *(_WORD *)&v31[12] = 1026;
          *(_DWORD *)&v31[14] = HIDWORD(v30);
          LODWORD(v30) = 18;
          v23 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "error writing target file: %{public}s, bzerror: %{public}d", v31, v30, *(_OWORD *)v31, *(_QWORD *)&v31[16]);
          goto LABEL_58;
        }
        goto LABEL_10;
      }
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v22 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v33 = a1;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "error reading source file: %{public}s", buf, 0xCu);
    }
    v11 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      *(_DWORD *)v31 = 136446210;
      *(_QWORD *)&v31[4] = a1;
      LODWORD(v30) = 12;
      v23 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "error reading source file: %{public}s", v31, v30, *(_OWORD *)v31, *(_QWORD *)&v31[16]);
      goto LABEL_58;
    }
  }
LABEL_10:
  fclose(v6);
  if (v9)
  {
    BZ2_bzWriteClose((int *)&v30 + 1, v9, 0, 0, 0);
    if (HIDWORD(v30))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 136446466;
        v33 = a2;
        v34 = 1026;
        v35 = HIDWORD(v30);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "error closing target file: %{public}s, bzerror: %{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        *(_DWORD *)v31 = 136446466;
        *(_QWORD *)&v31[4] = a2;
        *(_WORD *)&v31[12] = 1026;
        *(_DWORD *)&v31[14] = HIDWORD(v30);
        LODWORD(v30) = 18;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "error closing target file: %{public}s, bzerror: %{public}d", v31, v30);
        sub_100512490("Generic", 1, 0, 0, "int CLCommonBzipFile(const char *, const char *)", "%s\n", v29);
        if (v29 != (char *)buf)
          free(v29);
      }
    }
  }
  fclose(v8);
LABEL_38:
  free(v4);
  return v11;
}

BOOL sub_100513F8C(char *a1, const char *a2)
{
  void *v3;
  NSObject *v4;
  FILE *v5;
  gzFile_s *v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BOOL8 v11;
  int v12;
  size_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  NSObject *v23;
  int v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  int v30;
  const char *v31;
  NSObject *v32;
  double v33;
  double v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  int v41;
  const char *v42;
  uint64_t v43;
  int v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  off_t v51;
  id v52[2];
  int v53;
  void *v54;
  __int16 v55;
  _BYTE v56[30];
  _BYTE v57[6];
  __int16 v58;
  double v59;
  uint8_t buf[4];
  void *v61;
  __int16 v62;
  _BYTE v63[30];
  _BYTE v64[6];
  __int16 v65;
  double v66;

  v49 = a1;
  sub_100131938(v52, (uint64_t)-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("decompress:%@"), -[NSString lastPathComponent](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), "lastPathComponent")), "UTF8String"), 0);
  v50 = 0;
  v51 = 0;
  v3 = malloc_type_malloc(0x4000uLL, 0x75D93B42uLL);
  if (!v3)
  {
    v11 = 0;
    v9 = 0;
    v7 = 0;
    goto LABEL_56;
  }
  if (!sub_100514CCC(v49, (double *)&v50, 0, 0, &v51))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v20 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v61 = v49;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't stat, %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_37;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v53 = 136446210;
    v54 = v49;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "CLCommonGzipDecompressFile, can't stat, %{public}s", &v53, 12);
    v22 = (uint8_t *)v21;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v21);
    goto LABEL_79;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    v61 = v49;
    v62 = 2080;
    *(_QWORD *)v63 = a2;
    *(_WORD *)&v63[8] = 2048;
    *(_QWORD *)&v63[10] = v51;
    *(_WORD *)&v63[18] = 2048;
    *(_QWORD *)&v63[20] = v50;
    *(_WORD *)&v63[28] = 1024;
    *(_DWORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v53 = 136316162;
    v54 = v49;
    v55 = 2080;
    *(_QWORD *)v56 = a2;
    *(_WORD *)&v56[8] = 2048;
    *(_QWORD *)&v56[10] = v51;
    *(_WORD *)&v56[18] = 2048;
    *(_QWORD *)&v56[20] = v50;
    *(_WORD *)&v56[28] = 1024;
    *(_DWORD *)v57 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CLCommonGzipDecompressFile, from, %s, to, %s, size, %llu, cTime, %.1lf, isOK, %d", (const char *)&v53, 48, v48, *(double *)&v49, v50);
    v39 = (uint8_t *)v38;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v38);
    if (v39 != buf)
      free(v39);
  }
  v5 = fopen(a2, "wb");
  if (v5)
  {
    v6 = gzopen(v49, "rb");
    if (v6)
    {
      v7 = 0;
      v8 = 0;
      do
      {
        v9 = v8;
        v10 = gzeof(v6);
        v11 = v10 != 0;
        if (v10)
          goto LABEL_53;
        v12 = gzread(v6, v3, 0x4000u);
        if (v12 <= 0)
        {
          if (qword_1022A02D0 != -1)
            dispatch_once(&qword_1022A02D0, &stru_102141108);
          v27 = qword_1022A02D8;
          if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
          {
            v28 = *__error();
            *(_DWORD *)buf = 136446722;
            v61 = v49;
            v62 = 1026;
            *(_DWORD *)v63 = v28;
            *(_WORD *)&v63[4] = 1026;
            *(_DWORD *)&v63[6] = v12;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, error reading source file: %{public}s, errno, %{public}d, read, %{public}d", buf, 0x18u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A02D0 != -1)
              dispatch_once(&qword_1022A02D0, &stru_102141108);
            v29 = qword_1022A02D8;
            v30 = *__error();
            v53 = 136446722;
            v54 = v49;
            v55 = 1026;
            *(_DWORD *)v56 = v30;
            *(_WORD *)&v56[4] = 1026;
            *(_DWORD *)&v56[6] = v12;
            LODWORD(v47) = 24;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 17, "CLCommonGzipDecompressFile, error reading source file: %{public}s, errno, %{public}d, read, %{public}d", &v53, v47);
            v19 = (uint8_t *)v31;
            sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v31);
            if (v19 != buf)
              goto LABEL_52;
          }
          goto LABEL_53;
        }
        v13 = fwrite(v3, 1uLL, v12, v5);
        v7 += v12;
        v8 = v9 + v13;
      }
      while (v13 == v12);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v14 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v15 = *__error();
        *(_DWORD *)buf = 136446722;
        v61 = (void *)a2;
        v62 = 1026;
        *(_DWORD *)v63 = v15;
        *(_WORD *)&v63[4] = 2050;
        *(_QWORD *)&v63[6] = v13;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't write, %{public}s, errno, %{public}d, write, %{public}zu", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        v16 = qword_1022A02D8;
        v17 = *__error();
        v53 = 136446722;
        v54 = (void *)a2;
        v55 = 1026;
        *(_DWORD *)v56 = v17;
        *(_WORD *)&v56[4] = 2050;
        *(_QWORD *)&v56[6] = v13;
        LODWORD(v47) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 17, "CLCommonGzipDecompressFile, can't write, %{public}s, errno, %{public}d, write, %{public}zu", &v53, v47);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v18);
        if (v19 != buf)
LABEL_52:
          free(v19);
      }
LABEL_53:
      gzclose(v6);
    }
    else
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v25 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        v26 = *__error();
        *(_DWORD *)buf = 136446466;
        v61 = v49;
        v62 = 1026;
        *(_DWORD *)v63 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        v43 = qword_1022A02D8;
        v44 = *__error();
        v53 = 136446466;
        v54 = v49;
        v55 = 1026;
        *(_DWORD *)v56 = v44;
        LODWORD(v47) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 17, "CLCommonGzipDecompressFile, can't open, file_path_from, %{public}s, errno, %{public}d", &v53, v47);
        v46 = (uint8_t *)v45;
        sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v45);
        if (v46 != buf)
          free(v46);
      }
      v7 = 0;
      v9 = 0;
      v11 = 0;
    }
    fclose(v5);
    goto LABEL_55;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v23 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    v24 = *__error();
    *(_DWORD *)buf = 136446466;
    v61 = (void *)a2;
    v62 = 1026;
    *(_DWORD *)v63 = v24;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_FAULT, "CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v40 = qword_1022A02D8;
    v41 = *__error();
    v53 = 136446466;
    v54 = (void *)a2;
    v55 = 1026;
    *(_DWORD *)v56 = v41;
    LODWORD(v47) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v40, 17, "CLCommonGzipDecompressFile, can't open, file_path_to, %{public}s, errno %{public}d", &v53, v47);
    v22 = (uint8_t *)v42;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v42);
LABEL_79:
    if (v22 != buf)
      free(v22);
  }
LABEL_37:
  v11 = 0;
  v9 = 0;
  v7 = 0;
LABEL_55:
  free(v3);
LABEL_56:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v32 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    if (v9)
      v33 = (double)v51 / (double)v9;
    else
      v33 = 0.0;
    *(_DWORD *)buf = 136316674;
    v61 = v49;
    v62 = 2080;
    *(_QWORD *)v63 = a2;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&v63[10] = v11;
    *(_WORD *)&v63[14] = 2048;
    *(_QWORD *)&v63[16] = v51;
    *(_WORD *)&v63[24] = 1024;
    *(_DWORD *)&v63[26] = v7;
    *(_WORD *)v64 = 1024;
    *(_DWORD *)&v64[2] = v9;
    v65 = 2048;
    v66 = v33;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf", buf, 0x3Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    if (v9)
      v35 = (double)v51 / (double)v9;
    else
      v35 = 0.0;
    v53 = 136316674;
    v54 = v49;
    v55 = 2080;
    *(_QWORD *)v56 = a2;
    *(_WORD *)&v56[8] = 1024;
    *(_DWORD *)&v56[10] = v11;
    *(_WORD *)&v56[14] = 2048;
    *(_QWORD *)&v56[16] = v51;
    *(_WORD *)&v56[24] = 1024;
    *(_DWORD *)&v56[26] = v7;
    *(_WORD *)v57 = 1024;
    *(_DWORD *)&v57[2] = v9;
    v58 = 2048;
    v59 = v35;
    LODWORD(v47) = 60;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "CLCommonGzipDecompressFile, from, %s, to, %s, isOK, %d, fileSize, %llu, totalReadBytes, %u, totalWrittenBytes, %u, compression, %.4lf", (const char *)&v53, v47, v48, v49, v50, v51, *(double *)v52);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonGzipDecompressFile(const char *, const char *)", "%s\n", v36);
    if (v37 != buf)
      free(v37);
  }
  sub_100131740(v52);
  return v11;
}

void sub_100514C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

BOOL sub_100514CCC(const char *a1, double *a2, double *a3, double *a4, off_t *a5)
{
  int v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  stat v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  int v23;

  memset(&v15, 0, sizeof(v15));
  v10 = stat(a1, &v15);
  if (v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      v21 = a1;
      v22 = 1024;
      v23 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v16 = 136315394;
      v17 = a1;
      v18 = 1024;
      v19 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CLCommonGetFileTimestamps, failed to stat file, %s, ret, %d", (const char *)&v16, 18);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonGetFileTimestamps(const char *, CFAbsoluteTime *, CFAbsoluteTime *, CFAbsoluteTime *, off_t *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  else
  {
    if (a2)
      *a2 = (double)(v15.st_ctimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    if (a3)
      *a3 = (double)(v15.st_mtimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    if (a4)
      *a4 = (double)(v15.st_atimespec.tv_sec - (uint64_t)kCFAbsoluteTimeIntervalSince1970);
    if (a5)
      *a5 = v15.st_size;
  }
  return v10 == 0;
}

uint64_t sub_100514F40(const char *a1, const char *a2)
{
  uint64_t v4;
  id v6[2];

  sub_100131938(v6, (uint64_t)-[NSString UTF8String](+[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("compress:%@"), -[NSString lastPathComponent](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), "lastPathComponent")), "UTF8String"), 0);
  v4 = sub_100513660(a1, a2);
  sub_100131740(v6);
  return v4;
}

void sub_100514FCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100514FE0(const __CFString *a1, double *a2)
{
  const char *CStringPtr;
  char *v5;
  time_t v6;
  uint64_t v7;
  tm usedBufLen;
  CFRange v10;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v5 = 0;
LABEL_3:
    if (strptime(CStringPtr, "%a, %d %b %Y %T %Z", &usedBufLen))
    {
      v6 = mktime(&usedBufLen);
      if (v6 != -1)
      {
        *a2 = (double)v6 - kCFAbsoluteTimeIntervalSince1970;
        v7 = 1;
        if (!v5)
          return v7;
        goto LABEL_13;
      }
    }
    goto LABEL_12;
  }
  *(_QWORD *)&usedBufLen.tm_sec = 0;
  v10.length = CFStringGetLength(a1);
  v10.location = 0;
  CFStringGetBytes(a1, v10, 0x8000100u, 0, 0, 0, 0, (CFIndex *)&usedBufLen.tm_sec);
  if (!*(_QWORD *)&usedBufLen.tm_sec)
  {
    v5 = 0;
    goto LABEL_12;
  }
  ++*(_QWORD *)&usedBufLen.tm_sec;
  v5 = (char *)malloc_type_malloc(*(size_t *)&usedBufLen.tm_sec, 0x4162A72uLL);
  if (v5 && CFStringGetCString(a1, v5, *(CFIndex *)&usedBufLen.tm_sec, 0x8000100u))
  {
    CStringPtr = v5;
    goto LABEL_3;
  }
LABEL_12:
  v7 = 0;
  if (v5)
LABEL_13:
    free(v5);
  return v7;
}

uint64_t sub_100515108(const __CFDictionary *a1, double *a2, double *a3)
{
  uint64_t result;
  double v6;
  NSObject *v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  CFAbsoluteTime v15;
  const char *v16;
  uint8_t *v17;
  double v18;
  int v19;
  double v20;
  __int16 v21;
  double v22;
  __int16 v23;
  double v24;
  __int16 v25;
  CFAbsoluteTime v26;
  uint8_t buf[4];
  double v28;
  __int16 v29;
  double v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;

  result = (uint64_t)CFDictionaryGetValue(a1, CFSTR("Date"));
  if (result)
  {
    result = sub_100514FE0((const __CFString *)result, a3);
    if ((_DWORD)result)
    {
      if (*a2 >= 0.0)
        v6 = *a2 * 0.5;
      else
        v6 = 0.0;
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v8 = *a3;
        v9 = v6 + *a3;
        v10 = *a2;
        *(_DWORD *)buf = 134218752;
        v28 = v8;
        v29 = 2048;
        v30 = v9;
        v31 = 2048;
        v32 = v10;
        v33 = 2048;
        v34 = CFAbsoluteTimeGetCurrent() - v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        v11 = qword_1022A02D8;
        v12 = *a3;
        v13 = v6 + *a3;
        v14 = *a2;
        v15 = CFAbsoluteTimeGetCurrent() - v13;
        v19 = 134218752;
        v20 = v12;
        v21 = 2048;
        v22 = v13;
        v23 = 2048;
        v24 = v14;
        v25 = 2048;
        v26 = v15;
        LODWORD(v18) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v11, 2, "http date string is converted to timestamp %.3f and adjusted to %.3f by %.3fs RTT (%.3fs diff from systime)", COERCE_DOUBLE(&v19), v18);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "int CLCommonGetTimeFromHttpHeaderAndRtt(CFDictionaryRef, const CFTimeInterval *, CFAbsoluteTime *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      return 1;
    }
  }
  return result;
}

CFStringRef sub_100515378(CFDictionaryRef formatOptions, CFAbsoluteTime a2)
{
  if (formatOptions)
    return CFDateFormatterCreateStringWithAbsoluteTime(kCFAllocatorDefault, formatOptions, a2);
  else
    return CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%.3f"), *(_QWORD *)&a2);
}

CFStringRef sub_1005153C0(CFAbsoluteTime a1)
{
  const __CFLocale *v2;
  const __CFLocale *v3;

  if (!qword_102301710)
  {
    v2 = CFLocaleCreate(kCFAllocatorDefault, CFSTR("en_US"));
    if (v2)
    {
      v3 = v2;
      qword_102301710 = (uint64_t)CFDateFormatterCreate(kCFAllocatorDefault, v2, kCFDateFormatterLongStyle, kCFDateFormatterLongStyle);
      CFRelease(v3);
    }
  }
  return sub_100515378((CFDictionaryRef)qword_102301710, a1);
}

double sub_100515444()
{
  time_t v0;
  double result;
  tm v2;

  v0 = qword_102301718;
  if (!qword_102301718)
  {
    memset(&v2, 0, sizeof(v2));
    if (!strptime("Aug 13 2024 21:10:55", "%b %d %Y %H:%M:%S", &v2))
      return 0.0;
    v0 = mktime(&v2);
    qword_102301718 = v0;
  }
  result = (double)v0 - kCFAbsoluteTimeIntervalSince1970;
  if (v0 <= 0)
    return 0.0;
  return result;
}

uint64_t sub_1005154D0()
{
  return ((sub_100515444() + -259200.0 + 662342400.0) / 604800.0);
}

BOOL sub_10051550C(int a1, unsigned int a2)
{
  double v4;

  v4 = sub_100515444() + -259200.0;
  return sub_100515558(a1, a2) < v4;
}

double sub_100515558(int a1, unsigned int a2)
{
  if (qword_102301700 != -1)
    dispatch_once(&qword_102301700, &stru_1021410C8);
  return (double)a2 / 1000.0 + (double)(604800 * a1) + -662342400.0 - (double)dword_1022A2878;
}

double sub_1005155E0(unint64_t a1)
{
  return sub_100515558(a1 / 0x240C8400, a1 % 0x240C8400);
}

void sub_10051560C(double *a1, double *a2, double a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v14;

  v14 = atomic_load((unsigned __int8 *)&qword_102301748);
  if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_102301748))
  {
    sub_1002433B8((uint64_t)dbl_102301720);
    __cxa_guard_release(&qword_102301748);
  }
  sub_1010B99DC(dbl_102301720, a1, a2, a3, a4, 0.0, a5, a6, a7);
}

void sub_1005156BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102301748);
  _Unwind_Resume(a1);
}

long double sub_1005156D4(double a1, double a2, double a3, double a4)
{
  long double v4;

  v4 = atan2(a1 - a3, a4 - a2);
  return fmod(v4 + 4.71238898, 6.28318531) * 57.2957795;
}

BOOL sub_100515714(double a1)
{
  return a1 >= -90.0 && a1 <= 90.0;
}

BOOL sub_100515738(double a1)
{
  return a1 >= -180.0 && a1 <= 180.0;
}

BOOL sub_10051575C(double a1)
{
  return a1 > 0.0;
}

double sub_100515768(double *a1, double *a2, double a3, double a4, double a5, double a6)
{
  double v8;
  double v9;
  double v10;
  __double2 v11;
  __double2 v12;
  __double2 v13;
  long double v14;
  long double v15;
  long double v16;
  double result;

  v8 = a4 * 0.0174532925;
  v9 = a5 * 0.0174532925;
  v10 = a6 / 6378137.0;
  v11 = __sincos_stret(a3 * 0.0174532925);
  v12 = __sincos_stret(v10);
  v13 = __sincos_stret(v9);
  v14 = asin(v13.__cosval * (v11.__cosval * v12.__sinval) + v11.__sinval * v12.__cosval);
  v15 = sin(v14);
  v16 = atan2(v11.__cosval * (v13.__sinval * v12.__sinval), v12.__cosval - v11.__sinval * v15);
  *a1 = v14 / 0.0174532925;
  result = (v8 + v16) / 0.0174532925;
  *a2 = result;
  return result;
}

void sub_100515834(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v14;
  double v15;
  double v16;
  double v17;

  if (a1 && a2 && a3)
  {
    if (a4)
    {
      v16 = 0.0;
      sub_100515768(&v16, &v17, a5, a6, 0.0, a7);
      v14 = vabdd_f64(v16, a5);
      sub_100515768(&v17, &v16, a5, a6, 90.0, a7);
      v15 = vabdd_f64(v16, a6);
      *a1 = a5 - v14;
      *a3 = v14 + a5;
      *a2 = a6 - v15;
      *a4 = v15 + a6;
    }
  }
}

uint64_t sub_100515900(const __CFString *a1, const __CFString *a2, _BYTE *a3)
{
  CFPropertyListRef v4;
  const void *v5;
  CFTypeID v6;
  uint64_t v7;
  int valuePtr;

  if (a3)
    *a3 = 0;
  v4 = CFPreferencesCopyValue(a1, a2, CFSTR("mobile"), kCFPreferencesAnyHost);
  if (!v4)
    return 0;
  v5 = v4;
  v6 = CFGetTypeID(v4);
  if (v6 == CFBooleanGetTypeID())
  {
    if (a3)
      *a3 = 1;
    v7 = CFEqual(v5, kCFBooleanTrue);
  }
  else if (v6 == CFNumberGetTypeID() && !CFNumberIsFloatType((CFNumberRef)v5))
  {
    if (a3)
      *a3 = 1;
    valuePtr = 0;
    CFNumberGetValue((CFNumberRef)v5, kCFNumberIntType, &valuePtr);
    v7 = valuePtr != 0;
  }
  else
  {
    v7 = 0;
  }
  CFRelease(v5);
  return v7;
}

uint64_t sub_1005159F0(uint64_t result)
{
  byte_1023108A0 = result;
  return result;
}

void sub_1005159FC()
{
  int v0;
  BOOL v1;
  int v2;
  char v3;

  os_unfair_lock_lock((os_unfair_lock_t)&unk_102301750);
  v3 = 0;
  v0 = sub_100515900(CFSTR("LocationServicesEnabledIn8.0"), CFSTR("com.apple.locationd"), &v3);
  if (v3)
    v1 = v0 == 0;
  else
    v1 = 1;
  v2 = !v1;
  dword_1022A287C = v2;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301750);
}

void sub_100515A68(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_102301750);
  _Unwind_Resume(a1);
}

BOOL sub_100515A84()
{
  int v0;
  BOOL v1;
  char v3;

  v3 = 0;
  v0 = sub_100515900(CFSTR("AuthorizationPromptMapDisplayEnabled"), CFSTR("com.apple.locationd"), &v3);
  if (v3)
    v1 = v0 == 0;
  else
    v1 = 0;
  return !v1;
}

BOOL sub_100515AC8()
{
  int v0;
  NSObject *v1;
  const char *v3;
  uint8_t *v4;
  unsigned __int8 v5;
  _DWORD v6[2];
  __int16 v7;
  int v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  int v12;

  v5 = 0;
  v0 = sub_100515900(CFSTR("GpsNetworkCtrl"), CFSTR("com.apple.locationd"), &v5);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v1 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v10 = v0;
    v11 = 1024;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "GPS_NETWORK: enabled %d found %d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v6[0] = 67109376;
    v6[1] = v0;
    v7 = 1024;
    v8 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "GPS_NETWORK: enabled %d found %d", v6, 14);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonIsGpsNetworkTestMode()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  return v0 != 0;
}

double sub_100515CB4()
{
  NSObject *v0;
  double v1;
  const char *v2;
  unint64_t v3;
  NSObject *v4;
  int v5;
  int *v6;
  char *v7;
  uint64_t v8;
  int v9;
  int *v10;
  char *v11;
  uint8_t *v12;
  size_t v14;
  int v15;
  _DWORD v16[2];
  __int16 v17;
  char *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  char *v22;

  v15 = 0;
  v14 = 4;
  if ((byte_102301760 & 1) == 0)
  {
    if (sysctlnametomib("kern.monotonicclock", dword_102301764, (size_t *)&dword_1022A2880))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v0 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_FAULT, "Error occurred, no mib to monotonic clock conversion", buf, 2u);
      }
      v1 = -1.0;
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141108);
        LOWORD(v16[0]) = 0;
        v2 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Error occurred, no mib to monotonic clock conversion", v16, 2, v14);
LABEL_21:
        v12 = (uint8_t *)v2;
        sub_100512490("Generic", 1, 0, 0, "double CLCommonGetKernelMonotonicClock()", "%s\n", v2);
        if (v12 != buf)
          free(v12);
        return v1;
      }
      return v1;
    }
    byte_102301760 = 1;
  }
  if (!sysctl(dword_102301764, dword_1022A2880, &v15, &v14, 0, 0))
  {
    LODWORD(v3) = v15;
    return (double)v3 + 0.5;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    v5 = *__error();
    v6 = __error();
    v7 = strerror(*v6);
    *(_DWORD *)buf = 67240450;
    v20 = v5;
    v21 = 2082;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Error occurred %{public}d %{public}s", buf, 0x12u);
  }
  v1 = -1.0;
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v8 = qword_1022A02D8;
    v9 = *__error();
    v10 = __error();
    v11 = strerror(*v10);
    v16[0] = 67240450;
    v16[1] = v9;
    v17 = 2082;
    v18 = v11;
    v2 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "Error occurred %{public}d %{public}s", v16, 18, v14);
    goto LABEL_21;
  }
  return v1;
}

void sub_100516010(FILE *a1)
{
  uint32_t v2;
  uint64_t v3;
  uint32_t v4;
  const char *image_name;
  size_t v6;
  int v7;
  const mach_header *image_header;
  const mach_header *v9;
  const mach_header *v10;
  uint32_t ncmds;
  const mach_header *v12;
  int32_t *p_cputype;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  int v19;
  const mach_header **v20;
  uint64_t i;
  char *v22;
  __int128 v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t j;
  const char *v28;
  unint64_t *v29;
  _OWORD v30[2];
  __int128 v31;
  uint64_t v32;

  v2 = _dyld_image_count();
  v3 = v2;
  v29 = (unint64_t *)malloc_type_calloc(v2, 0x38uLL, 0x105004076241286uLL);
  if (v2 && v29)
  {
    v4 = 0;
    do
    {
      image_name = _dyld_get_image_name(v4);
      v6 = (size_t)&image_name[strlen(image_name) + 1];
      do
      {
        v7 = *(unsigned __int8 *)(v6 - 2);
        --v6;
      }
      while (v7 != 47);
      image_header = _dyld_get_image_header(v4);
      v9 = image_header;
      v10 = *(const mach_header **)&image_header->cputype;
      ncmds = image_header->ncmds;
      if (ncmds)
      {
        v12 = 0;
        p_cputype = &image_header[1].cputype;
        do
        {
          if (*p_cputype == 1)
          {
            if (!strncmp((const char *)p_cputype + 8, "__TEXT", 6uLL))
              v12 = (const mach_header *)((char *)v12 + p_cputype[7]);
          }
          else if (*p_cputype == 27)
          {
            v30[0] = *(_OWORD *)(p_cputype + 2);
          }
          p_cputype = (int32_t *)((char *)p_cputype + p_cputype[1]);
          --ncmds;
        }
        while (ncmds);
      }
      else
      {
        v12 = 0;
      }
      v14 = 0;
      v15 = v29;
      while (1)
      {
        v17 = *v15;
        v15 += 7;
        v16 = v17;
        if (v17 >= (unint64_t)v9 || v16 == 0)
          break;
        if (v3 == ++v14)
        {
          v14 = v3;
          v19 = v3;
          goto LABEL_24;
        }
      }
      v19 = v14;
LABEL_24:
      v20 = (const mach_header **)&v29[7 * v14];
      memmove(v20 + 7, v20, 56 * (v3 + ~v19));
      *v20 = v9;
      v20[1] = v12;
      *((_OWORD *)v20 + 1) = v30[0];
      v20[4] = (const mach_header *)image_name;
      v20[5] = (const mach_header *)v6;
      v20[6] = v10;
      ++v4;
    }
    while (v4 != (_DWORD)v3);
  }
  fwrite("Binary Images:\n", 0xFuLL, 1uLL, a1);
  if ((_DWORD)v3)
  {
    for (i = 0; i != v3; ++i)
    {
      v22 = (char *)&v29[7 * i];
      v23 = *((_OWORD *)v22 + 1);
      v30[0] = *(_OWORD *)v22;
      v30[1] = v23;
      v31 = *((_OWORD *)v22 + 2);
      v32 = *((_QWORD *)v22 + 6);
      v24 = "other";
      if ((_DWORD)v32 != 16777228)
      {
        v25 = "unknown";
        if (HIDWORD(v32) == 9)
          v25 = "armv7";
        v24 = "armv6";
        if (HIDWORD(v32) != 6)
          v24 = v25;
      }
      v28 = v24;
      if (i)
        v26 = 32;
      else
        v26 = 43;
      fprintf(a1, "%16p - %lld %c%s %s <", *(const void **)&v30[0], (_QWORD)((v30[0] + __PAIR128__(-1, 0)) >> 64), v26, *((const char **)&v31 + 1), v28);
      for (j = 16; j != 32; ++j)
        fprintf(a1, "%02X", *((unsigned __int8 *)v30 + j));
      fprintf(a1, "> %s\n", (const char *)v31);
    }
  }
  free(v29);
}

uint64_t sub_100516300(unint64_t a1)
{
  return byte_101BB5224[a1 >> 4]
       + byte_101BB5224[(a1 >> 8) & 0xF]
       + byte_101BB5224[(unsigned __int16)a1 >> 12]
       + byte_101BB5224[a1 & 0xF]
       + byte_101BB5224[(a1 >> 16) & 0xF]
       + byte_101BB5224[(a1 >> 20) & 0xF]
       + byte_101BB5224[(a1 >> 24) & 0xF]
       + byte_101BB5224[(unint64_t)a1 >> 28];
}

CFTypeRef sub_10051636C(CFStringRef filePath, const __CFString *a2)
{
  CFURLRef v3;
  CFURLRef v4;
  __CFBundle *Unique;
  __CFBundle *v6;
  CFTypeRef ValueForInfoDictionaryKey;
  CFTypeRef v8;

  if (!filePath)
    return 0;
  v3 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, filePath, kCFURLPOSIXPathStyle, 1u);
  if (!v3)
    return 0;
  v4 = v3;
  Unique = (__CFBundle *)_CFBundleCreateUnique(kCFAllocatorDefault, v3);
  if (Unique)
  {
    v6 = Unique;
    ValueForInfoDictionaryKey = CFBundleGetValueForInfoDictionaryKey(Unique, a2);
    v8 = ValueForInfoDictionaryKey;
    if (ValueForInfoDictionaryKey)
      CFRetain(ValueForInfoDictionaryKey);
    CFRelease(v6);
  }
  else
  {
    v8 = 0;
  }
  CFRelease(v4);
  return v8;
}

uint64_t sub_10051640C()
{
  uint64_t v0;

  v0 = sub_100197BE0();
  return sub_10105DF18(v0);
}

uint64_t sub_100516420(uint64_t a1, __int128 *a2, unint64_t a3)
{
  uint64_t v4;

  *(_QWORD *)(a1 + 16) = 0;
  v4 = a1 + 16;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (a3)
  {
    sub_100259C18((_QWORD *)a1, a3);
    *(_QWORD *)(a1 + 8) = sub_10028E070(v4, a2, (__int128 *)((char *)a2 + 24 * a3), *(char **)(a1 + 8));
  }
  return a1;
}

void sub_10051649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_100259608(&a9);
  _Unwind_Resume(a1);
}

void **sub_1005164BC(void **a1)
{
  void **v3;

  v3 = a1;
  sub_100259608(&v3);
  return a1;
}

void sub_1005164F0(const char *a1)
{
  NSObject *v2;
  int v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  const char *v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __darwin_time_t v18;
  __int16 v19;
  __darwin_time_t v20;
  __int16 v21;
  off_t v22;
  stat v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  int v27;
  __int16 v28;
  __darwin_time_t tv_sec;
  __int16 v30;
  __darwin_time_t v31;
  __int16 v32;
  off_t st_size;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136315138;
    v25 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "TILE: delete file, %s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v23.st_dev = 136315138;
    *(_QWORD *)&v23.st_mode = a1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: delete file, %s", (const char *)&v23);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  memset(&v23, 0, sizeof(v23));
  v3 = stat(a1, &v23);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141108);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136316162;
    v25 = a1;
    v26 = 1024;
    v27 = v3;
    v28 = 2048;
    tv_sec = v23.st_mtimespec.tv_sec;
    v30 = 2048;
    v31 = v23.st_ctimespec.tv_sec;
    v32 = 2048;
    st_size = v23.st_size;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld", buf, 0x30u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v13 = 136316162;
    v14 = a1;
    v15 = 1024;
    v16 = v3;
    v17 = 2048;
    v18 = v23.st_mtimespec.tv_sec;
    v19 = 2048;
    v20 = v23.st_ctimespec.tv_sec;
    v21 = 2048;
    v22 = v23.st_size;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: stat, %s, ret, %d, mtime, %lu, ctime, %lu, size, %lld", (const char *)&v13, 48);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (!v3)
  {
    v5 = unlink(a1);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141108);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315394;
      v25 = a1;
      v26 = 1024;
      v27 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "TILE: unlink, %s, ret, %d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141108);
      v13 = 136315394;
      v14 = a1;
      v15 = 1024;
      v16 = v5;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: unlink, %s, ret, %d", (const char *)&v13, 18);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLCommonDeleteFileIfExists(const char *)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
}

BOOL sub_1005169DC(const char *a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL8 result;
  uint64_t v10;
  NSObject *v11;
  int v12;
  _BOOL4 v13;
  uint64_t v14;
  int v15;
  uint8_t *v16;
  int v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  int v21;
  NSObject *v22;
  char *v23;
  _BYTE v24[12];
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  int v42;

  if (!a1)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    v7 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "CLCommonSetFileProtectionClass,sFilename==nullptr", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v8)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    *(_WORD *)v24 = 0;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 17, "CLCommonSetFileProtectionClass,sFilename==nullptr", v24, 2, *(_QWORD *)v24);
LABEL_21:
    v16 = (uint8_t *)v10;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n");
LABEL_22:
    if (v16 != buf)
      free(v16);
    return 0;
  }
  v4 = open(a1, 2);
  if (v4 < 0)
  {
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    v11 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_ERROR))
    {
      v12 = *__error();
      *(_DWORD *)buf = 67240192;
      LODWORD(v34) = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "CLCommonSetFileProtectionClass,open,errno,%{public}d", buf, 8u);
    }
    v13 = sub_1001BFF7C(115, 0);
    result = 0;
    if (!v13)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    v14 = qword_1022A02A8;
    v15 = *__error();
    *(_DWORD *)v24 = 67240192;
    *(_DWORD *)&v24[4] = v15;
    v10 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 16, "CLCommonSetFileProtectionClass,open,errno,%{public}d", v24, 8, *(_QWORD *)v24);
    goto LABEL_21;
  }
  v5 = v4;
  v6 = fcntl(v4, 63);
  if (v6 == (_DWORD)a2)
  {
    close(v5);
LABEL_34:
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    v22 = qword_1022A02A8;
    if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136315906;
      v34 = a1;
      v35 = 1026;
      v36 = v6;
      v37 = 1026;
      v38 = a2;
      v39 = 1026;
      v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d", buf, 0x1Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_102141128);
      *(_DWORD *)v24 = 136315906;
      *(_QWORD *)&v24[4] = a1;
      v25 = 1026;
      v26 = v6;
      v27 = 1026;
      v28 = a2;
      v29 = 1026;
      v30 = 0;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d", v24, 30);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    return 1;
  }
  v17 = fcntl(v5, 64, a2);
  close(v5);
  if (!v17)
    goto LABEL_34;
  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_102141128);
  v18 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
  {
    v19 = *__error();
    *(_DWORD *)buf = 136316162;
    v34 = a1;
    v35 = 1026;
    v36 = v6;
    v37 = 1026;
    v38 = a2;
    v39 = 1026;
    v40 = v17;
    v41 = 1026;
    v42 = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#Warning,CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d,errno,%{public}d", buf, 0x24u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_102141128);
    v20 = qword_1022A02A8;
    v21 = *__error();
    *(_DWORD *)v24 = 136316162;
    *(_QWORD *)&v24[4] = a1;
    v25 = 1026;
    v26 = v6;
    v27 = 1026;
    v28 = a2;
    v29 = 1026;
    v30 = v17;
    v31 = 1026;
    v32 = v21;
    v16 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 1, "#Warning,CLCommonSetFileProtectionClass,%s,oldPc,%{public}d,newPc,%{public}d,ret,%{public}d,errno,%{public}d", v24, 36);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCommonSetFileProtectionClass(const char *, int)", "%s\n");
    goto LABEL_22;
  }
  return result;
}

BOOL sub_10051700C(void *a1)
{
  uuid_t uu;

  memset(uu, 0, sizeof(uu));
  return uuid_parse((const char *)objc_msgSend(a1, "UTF8String"), uu) == 0;
}

double sub_100517068(int a1, int a2, int a3)
{
  int v3;
  double v4;

  if (a3 >= a1)
    v3 = a1;
  else
    v3 = a3;
  v4 = pow((double)a2, (double)(v3 & ~(v3 >> 31)));
  return v4 + (double)rand() / 2147483650.0 * v4;
}

double sub_1005170B4(double a1)
{
  double v1;

  if (a1 < 0.0)
    return 180.0;
  v1 = 1.0;
  if (a1 <= 15.0)
  {
    v1 = 4.0;
    if (a1 <= 10.0)
    {
      v1 = 10.0;
      if (a1 <= 8.0)
      {
        v1 = 15.0;
        if (a1 <= 5.0)
        {
          if (a1 <= 3.0)
          {
            v1 = 25.0;
            if (a1 <= 2.5)
              return dbl_101BB5250[a1 > 1.0];
          }
          else
          {
            return 19.9;
          }
        }
      }
    }
  }
  return v1;
}

id sub_100517150(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(a1, "objectForInfoDictionaryKey:", CFSTR("NSWidgetWantsLocation"));
  v3 = objc_opt_class(NSNumber, v2);
  if ((objc_opt_isKindOfClass(v1, v3) & 1) != 0)
    return objc_msgSend(v1, "BOOLValue");
  else
    return 0;
}

uint64_t sub_1005171A8(int a1, int a2, char a3, char a4, unsigned int a5, int a6, int a7)
{
  if (a7)
  {
    if ((a3 & 1) != 0 || (a4 & 1) != 0 || a5)
    {
      if (a2 | a1)
        return 1;
      else
        return a5;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (a2 | a1)
      a6 = 1;
    return a6 | a5;
  }
}

uint64_t sub_1005171E4(int a1)
{
  return a1 ^ 1u;
}

uint64_t sub_1005171EC(void *a1, int a2, int a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v6 = objc_msgSend(objc_msgSend(a1, "objectForKeyedSubscript:", CFSTR("LocationRestricted")), "BOOLValue");
  v7 = objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("TemporaryAuthorization")), "unsignedIntValue");
  v8 = objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("CorrectiveCompensationEnabled")), "unsignedIntValue");
  if (objc_msgSend(a1, "objectForKey:", CFSTR("AuthorizationUpgradeAvailable")))
    v9 = objc_msgSend(objc_msgSend(a1, "objectForKey:", CFSTR("AuthorizationUpgradeAvailable")), "BOOLValue") ^ 1;
  else
    LOBYTE(v9) = 0;
  v10 = 3;
  if (a3)
    v10 = 0;
  v11 = v10 | (a2 == 2);
  if (v6)
    v11 |= 4uLL;
  v12 = v8 == 2 && (v7 & 2) == 0;
  v13 = v11 | 0x40;
  if (!v12)
    v13 = v11;
  if (((a2 == 1) & v9) != 0)
    v14 = v13 | 0x400;
  else
    v14 = v13;
  return v14 | (v7 << 8) & 0x800;
}

std::string *sub_100517300(int a1, std::string *this, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v5;
  std::string *v7;
  std::string::value_type *v8;
  unsigned int v9;

  if ((unint64_t)(a4 - 0x7FFFFFFFFFFFFFFFLL) > 0x8000000000000001)
  {
    v5 = a4;
    std::string::resize(this, 2 * a4, 48);
    if ((this->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = this;
    else
      v7 = (std::string *)this->__r_.__value_.__r.__words[0];
    v8 = &v7->__r_.__value_.__s.__data_[1];
    do
    {
      v9 = *a3++;
      *v8 = a0123456789abcd_0[v9 & 0xF];
      *(v8 - 1) = a0123456789abcd_0[(unint64_t)v9 >> 4];
      v8 += 2;
      --v5;
    }
    while (v5);
  }
  else if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  return this;
}

void sub_1005173B8(int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, std::string *a4@<X8>)
{
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  sub_100517300(a1, &__p, a2, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_100115CE4(a4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *a4 = __p;
  }
}

void sub_10051742C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100517448(int a1@<W0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  sub_1005173B8(a1, *(unsigned __int8 **)a2, *(_QWORD *)(a2 + 8) - *(_QWORD *)a2, a3);
}

unint64_t *sub_100517458(int a1, unint64_t *a2, unsigned __int8 *a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v13;
  unint64_t v14;
  int v15;
  char v16;
  char v17;
  char v18;
  char v19;
  int v20;
  char v21;
  char v22;
  char v23;
  uint64_t v24;
  unsigned __int8 *v25;

  v5 = a3[23];
  if ((v5 & 0x80u) != 0)
    v5 = *((_QWORD *)a3 + 1);
  v6 = v5 >> 1;
  v8 = *a2;
  v7 = a2[1];
  v9 = v7 - *a2;
  if (v6 <= v9)
  {
    if (v6 < v9)
    {
      v7 = v8 + v6;
      a2[1] = v8 + v6;
    }
  }
  else
  {
    sub_1005176A0(a2, v6 - v9);
    v8 = *a2;
    v7 = a2[1];
  }
  v10 = a3[23];
  v11 = (char)v10;
  if ((v10 & 0x80u) != 0)
    v10 = *((_QWORD *)a3 + 1);
  if (v10 >= 1 && v8 < v7)
  {
    v13 = *(unsigned __int8 **)a3;
    if (v11 >= 0)
      v13 = a3;
    v14 = v8 + 1;
    do
    {
      v15 = *v13;
      if ((v15 - 65) >= 6)
        v16 = 0;
      else
        v16 = -55;
      if ((v15 - 97) >= 6)
        v17 = v16;
      else
        v17 = -87;
      if ((v15 - 48) >= 0xA)
        v18 = v17;
      else
        v18 = -48;
      v19 = 16 * (v18 + v15);
      *(_BYTE *)(v14 - 1) = v19;
      v20 = v13[1];
      if ((v20 - 65) >= 6)
        v21 = 0;
      else
        v21 = -55;
      if ((v20 - 97) >= 6)
        v22 = v21;
      else
        v22 = -87;
      if ((v20 - 48) >= 0xA)
        v23 = v22;
      else
        v23 = -48;
      *(_BYTE *)(v14 - 1) = (v23 + v20) | v19;
      v24 = a3[23];
      if ((v24 & 0x80u) == 0)
        v25 = a3;
      else
        v25 = *(unsigned __int8 **)a3;
      if ((v24 & 0x80u) != 0)
        v24 = *((_QWORD *)a3 + 1);
      v13 += 2;
    }
    while (v13 < &v25[v24] && v14++ < a2[1]);
  }
  return a2;
}

void sub_100517598(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_1005175C4(id a1)
{
  qword_1022A02A8 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Utility");
}

unsigned __int8 *sub_1005175F0(unsigned __int8 *a1, unsigned __int8 *a2, const char **a3)
{
  unsigned __int8 *v3;
  const char *v5;
  size_t v6;
  unsigned __int8 *v7;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *a3;
    v6 = strlen(*a3);
    while (1)
    {
      if ((char)v3[23] < 0)
      {
        if (v6 == *((_QWORD *)v3 + 1))
        {
          if (v6 == -1)
LABEL_14:
            sub_10035AD9C();
          v7 = *(unsigned __int8 **)v3;
LABEL_10:
          if (!memcmp(v7, v5, v6))
            return v3;
        }
      }
      else if (v6 == v3[23])
      {
        v7 = v3;
        if (v6 == -1)
          goto LABEL_14;
        goto LABEL_10;
      }
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

void sub_1005176A0(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      sub_100259694();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

double sub_1005177C8@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  float v3;
  double result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 3;
  *(_DWORD *)(a2 + 32) = 3;
  v3 = sub_1011B9874(*(_DWORD *)(a1 + 152));
  *(float *)(a2 + 20) = v3;
  *(_DWORD *)(a2 + 24) = 3;
  *(float *)(a2 + 28) = v3;
  *(_QWORD *)&result = 3;
  *(_QWORD *)(a2 + 32) = 3;
  return result;
}

_QWORD *sub_100517814(_QWORD *a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_1005178E0((uint64_t)a1, "ActiveConfig", a2, (uint64_t)__p, 1, 30.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *a1 = off_102141218;
  a1[9] = off_1021412C8;
  sub_100E81598(a1 + 53, 0, 0);
  (*(void (**)(_QWORD *))(*a1 + 112))(a1);
  return a1;
}

void sub_1005178B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005178E0(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102141508;
  *(_QWORD *)(a1 + 72) = off_1021415B0;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102141508;
  *(_QWORD *)(a1 + 72) = off_1021415B0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 240) = 0;
  sub_1015A2E04((_QWORD *)(a1 + 248), "");
  sub_1015A2E04((_QWORD *)(a1 + 272), "");
  sub_1015A2E04((_QWORD *)(a1 + 296), "");
  sub_1015A2E04((_QWORD *)(a1 + 320), "");
  *(_DWORD *)(a1 + 344) = 12000;
  *(_QWORD *)(a1 + 352) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 360));
  *(_QWORD *)(a1 + 360) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_100517CEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;

  sub_10187E514((uint64_t)&a19);
  v24[44] = off_10213DEB0;
  sub_100427950(v28);
  sub_1005183EC(v27);
  sub_10051C170(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_100517DE8()
{
  JUMPOUT(0x100517DC8);
}

uint64_t sub_100517DF0(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 72) = off_1021415B0;
  v2 = a1 + 72;
  *(_QWORD *)a1 = off_102141508;
  *(_QWORD *)(a1 + 352) = off_10213DEB0;
  sub_100427950((_QWORD *)(a1 + 360));
  if (*(char *)(a1 + 343) < 0)
    operator delete(*(void **)(a1 + 320));
  if (*(char *)(a1 + 319) < 0)
    operator delete(*(void **)(a1 + 296));
  if (*(char *)(a1 + 295) < 0)
    operator delete(*(void **)(a1 + 272));
  if (*(char *)(a1 + 271) < 0)
    operator delete(*(void **)(a1 + 248));
  sub_10051C170((_QWORD *)(a1 + 176));
  sub_101138068(v2);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_100427950((_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100517EB4(uint64_t a1)
{
  return sub_100517DF0(a1 - 72);
}

void sub_100517EBC(uint64_t a1)
{
  sub_100517DF0(a1);
  operator delete();
}

void sub_100517EE0(uint64_t a1)
{
  sub_100517DF0(a1 - 72);
  operator delete();
}

uint64_t sub_100517F08(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM ActiveConfig WHERE bundleIdentifier = ?");
  return result;
}

void sub_10051814C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100518178(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    v6 = *a2;
    v5 = a2[1];
    if (v5 != *a2)
    {
      do
      {
        v5 -= 120;
        sub_10051C2A4((uint64_t)(a2 + 2), v5);
      }
      while (v5 != v6);
    }
    a2[1] = v6;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "SELECT * from ActiveConfig");
  }
  return result;
}

void sub_100518304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_1005183EC((uint64_t)&a9);
  if (v29)
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
  _Unwind_Resume(a1);
}

uint64_t sub_100518390(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  sub_1005186C8(a1, a2);
  return 0;
}

uint64_t sub_1005183EC(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_10051844C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  const char *v11;
  uint8_t *v12;
  _WORD v13[8];
  uint64_t v14[3];
  __int16 v15;
  uint8_t buf[1640];

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  v14[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v15 = 256;
  if ((sub_10008950C(v6) & 1) != 0)
  {
    sub_100087AF4((_QWORD *)(a1 + 424), v14);
    if (v14[0])
    {
      sub_100518390(v14, a2);
      v7 = 100;
    }
    else
    {
      if (qword_10229FF20 != -1)
        dispatch_once(&qword_10229FF20, &stru_102141358);
      v8 = qword_10229FF28;
      if (os_log_type_enabled((os_log_t)qword_10229FF28, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "ActiveConfigRecorderDb: failed to prepare queryForBestFit #InvalidPreparedSQLStatement", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FF20 != -1)
          dispatch_once(&qword_10229FF20, &stru_102141358);
        v13[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF28, 17, "ActiveConfigRecorderDb: failed to prepare queryForBestFit #InvalidPreparedSQLStatement", v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "CMError CLActiveConfigRecorderDb::queryForBestFitConfig(ConfigSummary &) const", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
      v7 = 112;
    }
    v9 = v14[0];
    v14[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  else
  {
    v7 = 109;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v7;
}

void sub_100518670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  if (a6)
    (*(void (**)(uint64_t))(*(_QWORD *)a6 + 8))(a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1005186BC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_1005186C8(a2, a3);
}

std::string *sub_1005186C8(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  const unsigned __int8 *v8;
  sqlite3_stmt *v9;
  const unsigned __int8 *v10;
  sqlite3_stmt *v11;
  const unsigned __int8 *v12;
  sqlite3_stmt *v13;
  const unsigned __int8 *v14;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_QWORD *)a2 = sqlite3_column_int(v4, 0);
  v5 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 8) = sqlite3_column_double(v5, 1);
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 16) = sqlite3_column_int(v6, 2);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v8 = sqlite3_column_text(v7, 3);
  std::string::assign((std::string *)(a2 + 24), (const std::string::value_type *)v8);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v10 = sqlite3_column_text(v9, 4);
  std::string::assign((std::string *)(a2 + 48), (const std::string::value_type *)v10);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_text(v11, 5);
  std::string::assign((std::string *)(a2 + 72), (const std::string::value_type *)v12);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v14 = sqlite3_column_text(v13, 6);
  return std::string::assign((std::string *)(a2 + 96), (const std::string::value_type *)v14);
}

BOOL sub_100518794(uint64_t a1)
{
  _BOOL8 result;

  result = sub_1000CC4F4(*(_QWORD *)(a1 + 80));
  if (result)
  {
    sub_100518874(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "ActiveConfig", (const char **)&off_102141378, (const std::string::value_type **)&off_1022A2888, 0);
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "CREATE UNIQUE INDEX IF NOT EXISTS ix_ActiveConfig_studyId ON ActiveConfig(studyId)");
  }
  return result;
}

void sub_100518850(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

BOOL sub_100518874(uint64_t a1)
{
  _BOOL8 result;
  const char *v3;
  int v4;
  __int16 v5;
  char v6;
  char v7;

  result = sub_100635B3C(*(_QWORD *)(a1 + 80), "ActiveConfig");
  if (result)
  {
    v3 = "startTime";
    v4 = 5;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "ActiveConfig", (uint64_t)"startTime", (uint64_t)&v3);
  }
  return result;
}

void sub_100518C18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  uint64_t v59;

  if (a19 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a21);
  if (v59)
    (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  sub_1018B38B4((uint64_t)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_100518CB0(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "DELETE FROM ActiveConfig");
  return result;
}

void sub_100518D44(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100518D64(uint64_t a1)
{
  return sub_100518CB0(a1 - 72);
}

uint64_t sub_100518D6C(uint64_t a1)
{
  uint64_t result;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
    sub_1000CDA68(*(_QWORD *)(a1 + 80), "REPLACE INTO ActiveConfig (startTime, priority, configId, bundleIdentifier, studyId, parameterDictionary) VALUES (?, ?, ?, ?, ?, ?)");
  return result;
}

void sub_100518EB8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100518ED8(uint64_t a1, void *a2)
{
  NSObject *v4;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  size_t v8;
  std::string *v9;
  void **v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  void *v14;
  char v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v20;
  std::string *v21;
  void *v22[2];
  int64_t v23;
  std::string v24;
  void *__p[4];
  std::string buf[68];

  if (!sub_100635E80(*(_QWORD *)(a1 + 80), (char *)a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021415F0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf[0].__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf[0].__r_.__value_.__r.__words + 4) = (std::string::size_type)a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#Notice %{public}s needs autoincrement migration", (uint8_t *)buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021415F0);
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice %{public}s needs autoincrement migration", __p, 12);
      v21 = (std::string *)v20;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLActivityRecorderDb<ConfigSummary>::migrateDbConstraints(const char *, const CLSqliteDatabase::ColumnInfo *, const char **) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v20);
      if (v21 != buf)
        free(v21);
    }
    memset(__p, 0, 24);
    sub_1015A2E04(buf, (char *)a2);
    v5 = std::string::append(buf, "AutoIncr");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v23 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)v22 = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_1015A2E04(buf, (char *)a2);
    v7 = std::string::append(buf, "Index");
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    sub_10001E638(*(_QWORD *)(a1 + 80));
    if (SHIBYTE(__p[2]) >= 0)
      v8 = HIBYTE(__p[2]);
    else
      v8 = (size_t)__p[1];
    v9 = buf;
    sub_100259584((uint64_t)buf, v8 + 21);
    if ((buf[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v9 = (std::string *)buf[0].__r_.__value_.__r.__words[0];
    if (v8)
    {
      if (SHIBYTE(__p[2]) >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      memmove(v9, v10, v8);
    }
    strcpy((char *)v9 + v8, "DROP TABLE IF EXISTS ");
    if (v23 >= 0)
      v11 = v22;
    else
      v11 = (void **)v22[0];
    if (v23 >= 0)
      v12 = HIBYTE(v23);
    else
      v12 = (std::string::size_type)v22[1];
    v13 = std::string::append(buf, (const std::string::value_type *)v11, v12);
    v14 = (void *)v13->__r_.__value_.__r.__words[0];
    v24.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v24.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p[2]) < 0)
      operator delete(__p[0]);
    __p[0] = v14;
    __p[1] = v24.__r_.__value_.__l.__data_;
    *(void **)((char *)&__p[1] + 7) = *(void **)((char *)v24.__r_.__value_.__r.__words + 7);
    HIBYTE(__p[2]) = v15;
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf[0].__r_.__value_.__l.__data_);
      v15 = HIBYTE(__p[2]);
      v14 = __p[0];
    }
    if (v15 >= 0)
      v16 = (char *)__p;
    else
      v16 = (char *)v14;
    sub_1000CDA68(*(_QWORD *)(a1 + 80), v16);
  }
  v17 = *(_QWORD *)(a1 + 80);
  if (*(uint64_t *)(v17 + 88) <= 0)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = *(_QWORD *)(v17 + 88);
  sub_100053048(v17, v18);
  return 0;
}

void sub_10051A070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (a60 < 0)
    operator delete(a55);
  _Unwind_Resume(a1);
}

uint64_t sub_10051A390(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1018FD5FC(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_10051A678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  uint64_t v38;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  sub_1018B38B4((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10051A73C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021415F0);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021415F0);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021415F0);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<ConfigSummary>::setDatabaseAccessible() [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_10051ADB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_10051ADE4(uint64_t a1, uint64_t a2, __int128 *a3)
{
  __int128 v5;

  v5 = *a3;
  *(_DWORD *)(a2 + 16) = *((_DWORD *)a3 + 4);
  *(_OWORD *)a2 = v5;
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)a3 + 1);
  std::string::operator=((std::string *)(a2 + 48), (const std::string *)a3 + 2);
  std::string::operator=((std::string *)(a2 + 72), (const std::string *)a3 + 3);
  return std::string::operator=((std::string *)(a2 + 96), (const std::string *)a3 + 4);
}

id *sub_10051AE40(uint64_t *a1, __int128 *a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  uint64_t v23;
  const char *v24;
  uint8_t *v25;
  double v26;
  const char *v27;
  uint8_t *v28;
  const char *v29;
  uint8_t *v30;
  double v31;
  uint64_t v32;
  double v33;
  int v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  char v42;
  id v43[2];
  int v44;
  double v45;
  __int16 v46;
  uint64_t v47;
  uint8_t buf[4];
  double v49;
  __int16 v50;
  uint64_t v51;

  v43[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v43[1] = 0;
  if (*((double *)a1 + 29) <= 0.0
    || !(*(unsigned int (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 136))(a1, a1 + 28, a2))
  {
    if ((a3 & 1) == 0)
      sub_10001E638(a1[10]);
    v32 = 0;
    v33 = 0.0;
    v34 = 0;
    sub_1015A2E04(&v35, "");
    sub_1015A2E04(&v37, "");
    sub_1015A2E04(&v39, "");
    sub_1015A2E04(&__p, "");
    v6 = (*(uint64_t (**)(uint64_t *, uint64_t *))(*a1 + 104))(a1, &v32);
    if (v6 != 1)
    {
      if (v6)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021415F0);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021415F0);
          LOWORD(v44) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v44, 2);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
LABEL_43:
        if (v42 < 0)
          operator delete(__p);
        if (v40 < 0)
          operator delete(v39);
        if (v38 < 0)
          operator delete(v37);
        if (v36 < 0)
        {
          operator delete(v35);
          if ((a3 & 1) != 0)
            return sub_100131740(v43);
        }
        else if ((a3 & 1) != 0)
        {
          return sub_100131740(v43);
        }
        sub_10001E99C(a1[10]);
        return sub_100131740(v43);
      }
      v7 = *((double *)a2 + 1);
      v8 = v33;
      v9 = v7 - v33;
      if (v7 - v33 < 0.0)
        v9 = -(v7 - v33);
      if (v9 > 604800.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021415F0);
        v10 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          v11 = *((_QWORD *)a2 + 1);
          *(_DWORD *)buf = 134349312;
          v49 = v33;
          v50 = 2050;
          v51 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021415F0);
          v23 = *((_QWORD *)a2 + 1);
          v44 = 134349312;
          v45 = v33;
          v46 = 2050;
          v47 = v23;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v44, 22);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
        v7 = *((double *)a2 + 1);
        v8 = v33;
      }
      if (v7 < v8)
      {
        if (v8 - v7 < 10.0)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021415F0);
          v12 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
          {
            v13 = *((double *)a2 + 1);
            *(_DWORD *)buf = 134217984;
            v49 = v13;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021415F0);
            v26 = *((double *)a2 + 1);
            v44 = 134217984;
            v45 = v26;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v44));
            v28 = (uint8_t *)v27;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v27);
            if (v28 != buf)
              free(v28);
          }
          (*(void (**)(uint64_t *, __int128 *))(*a1 + 88))(a1, a2);
          goto LABEL_42;
        }
        v17 = v7 - v8;
        v18 = *((float *)a1 + 34);
        if (qword_10229FC70 != -1)
        {
          v31 = *((float *)a1 + 34);
          dispatch_once(&qword_10229FC70, &stru_1021415F0);
          v18 = v31;
        }
        v19 = v17 - v18;
        v20 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          v49 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021415F0);
          v44 = 134217984;
          v45 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v44));
          v30 = (uint8_t *)v29;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<ConfigSummary>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = ConfigSummary, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v29);
          if (v30 != buf)
            free(v30);
        }
        (*(void (**)(uint64_t *, double))(*a1 + 96))(a1, v19);
      }
      (*(void (**)(uint64_t *, uint64_t *, uint64_t *, __int128 *))(*a1 + 144))(a1, &v32, a1 + 28, a2);
    }
    (*(void (**)(uint64_t *, __int128 *, uint64_t))(*a1 + 120))(a1, a2, 1);
LABEL_42:
    v21 = *a2;
    *((_DWORD *)a1 + 60) = *((_DWORD *)a2 + 4);
    *((_OWORD *)a1 + 14) = v21;
    std::string::operator=((std::string *)(a1 + 31), (const std::string *)a2 + 1);
    std::string::operator=((std::string *)(a1 + 34), (const std::string *)a2 + 2);
    std::string::operator=((std::string *)(a1 + 37), (const std::string *)a2 + 3);
    std::string::operator=((std::string *)(a1 + 40), (const std::string *)a2 + 4);
    goto LABEL_43;
  }
  (*(void (**)(uint64_t *, uint64_t *, __int128 *))(*a1 + 72))(a1, a1 + 28, a2);
  return sub_100131740(v43);
}

void sub_10051B63C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,id a36)
{
  sub_1005183EC((uint64_t)&a12);
  sub_100131740(&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_10051B6C0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1018FD768(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_10051B920(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FD8D4(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_10051BB58(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FDA40(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_10051BD80(uint64_t a1)
{
  return sub_10051A73C(a1 - 72);
}

void sub_10051BD88(id a1)
{
  qword_10229FF28 = (uint64_t)os_log_create("com.apple.locationd.Motion", "ContextConfiguration");
}

uint64_t sub_10051BDB4(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _Unwind_Exception *v15;
  uint64_t v16;
  void *__p[2];
  unsigned __int8 v18;
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  _QWORD v22[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v20);
  if ((SHIBYTE(v21) & 0x80000000) == 0)
  {
    if (HIBYTE(v21))
      goto LABEL_3;
LABEL_20:
    v15 = (_Unwind_Exception *)sub_1018FDBAC(v4);
    sub_1005183EC((uint64_t)__p);
    v16 = v19;
    v19 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
    sub_1018B38B4((uint64_t)v20);
    _Unwind_Resume(v15);
  }
  v14 = v20[1];
  operator delete(v20[0]);
  if (!v14)
    goto LABEL_20;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    v7 = *a2;
    v6 = a2[1];
    if (v6 != *a2)
    {
      do
      {
        v6 -= 120;
        sub_10051C2A4((uint64_t)(a2 + 2), v6);
      }
      while (v6 != v7);
    }
    a2[1] = v7;
    sub_100263E50((uint64_t)v20);
    v8 = sub_100263F7C(&v21, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v18 & 0x80u) == 0)
      v9 = __p;
    else
      v9 = (void **)__p[0];
    if ((v18 & 0x80u) == 0)
      v10 = v18;
    else
      v10 = (uint64_t)__p[1];
    v11 = sub_100263F7C(v8, (uint64_t)v9, v10);
    sub_100263F7C(v11, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v18 < 0)
      operator delete(__p[0]);
    v12 = a1[10];
    std::stringbuf::str(__p, v22);
    if ((v18 & 0x80u) == 0)
      v13 = (char *)__p;
    else
      v13 = (char *)__p[0];
    sub_1000CDA68(v12, v13);
  }
  return result;
}

void sub_10051C144(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10051C170(_QWORD *a1)
{
  _QWORD *v2;
  void **v3;
  void **v4;
  unint64_t v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;

  v2 = a1 + 5;
  v3 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (v4 == v3)
  {
    v4 = (void **)a1[1];
  }
  else
  {
    v5 = a1[4];
    v6 = &v3[v5 / 0x22];
    v7 = (uint64_t)*v6 + 120 * (v5 % 0x22);
    v8 = (unint64_t)v3[(a1[5] + v5) / 0x22] + 120 * ((a1[5] + v5) % 0x22);
    if (v7 != v8)
    {
      do
      {
        sub_10051C2A4((uint64_t)v2, v7);
        v7 += 120;
        if (v7 - (_QWORD)*v6 == 4080)
        {
          v9 = (uint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v3 = (void **)a1[1];
      v4 = (void **)a1[2];
    }
  }
  *v2 = 0;
  v10 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      v4 = (void **)a1[2];
      v3 = (void **)(a1[1] + 8);
      a1[1] = v3;
      v10 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 17;
  }
  else
  {
    if (v11 != 2)
      goto LABEL_16;
    v12 = 34;
  }
  a1[4] = v12;
LABEL_16:
  while (v3 != v4)
  {
    v13 = *v3++;
    operator delete(v13);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_10051C2A4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0)
    operator delete(*(void **)(a2 + 96));
  if (*(char *)(a2 + 95) < 0)
    operator delete(*(void **)(a2 + 72));
  if (*(char *)(a2 + 71) < 0)
    operator delete(*(void **)(a2 + 48));
  if (*(char *)(a2 + 47) < 0)
    operator delete(*(void **)(a2 + 24));
}

uint64_t sub_10051C308(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xEEEEEEEEEEEEEEEFLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x222222222222222)
    sub_100259694();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xEEEEEEEEEEEEEEEFLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x111111111111111)
    v9 = 0x222222222222222;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_100313328(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = &v10[120 * v4];
  v16 = &v10[120 * v9];
  sub_10051C40C((uint64_t)v14, a2);
  v15 = v14 + 120;
  sub_10051C558(a1, &v13);
  v11 = a1[1];
  sub_10051C744(&v13);
  return v11;
}

void sub_10051C3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10051C744((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10051C40C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  _BYTE *v8;
  __int128 v9;

  v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 24), *((void **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v5 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 48), *((void **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v6 = a2[3];
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_100115CE4((_BYTE *)(a1 + 72), *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  v8 = (_BYTE *)(a1 + 96);
  if (*((char *)a2 + 119) < 0)
  {
    sub_100115CE4(v8, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v9 = a2[6];
    *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
    *(_OWORD *)v8 = v9;
  }
  return a1;
}

void sub_10051C50C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[95] < 0)
    operator delete(*v4);
  if (v1[71] < 0)
    operator delete(*v3);
  if (v1[47] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10051C558(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_10051C5CC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10051C5CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD v16[3];
  char v17;
  __int128 v18;
  __int128 v19;

  v7 = a7;
  *(_QWORD *)&v19 = a6;
  *((_QWORD *)&v19 + 1) = a7;
  v18 = v19;
  v16[0] = a1;
  v16[1] = &v18;
  v16[2] = &v19;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 120);
      *(_DWORD *)(v9 - 104) = *(_DWORD *)(a3 - 104);
      *(_OWORD *)(v9 - 120) = v10;
      v11 = *(_OWORD *)(a3 - 96);
      *(_QWORD *)(v9 - 80) = *(_QWORD *)(a3 - 80);
      *(_OWORD *)(v9 - 96) = v11;
      *(_QWORD *)(a3 - 88) = 0;
      *(_QWORD *)(a3 - 80) = 0;
      *(_QWORD *)(a3 - 96) = 0;
      v12 = *(_OWORD *)(a3 - 72);
      *(_QWORD *)(v9 - 56) = *(_QWORD *)(a3 - 56);
      *(_OWORD *)(v9 - 72) = v12;
      *(_QWORD *)(a3 - 64) = 0;
      *(_QWORD *)(a3 - 56) = 0;
      *(_QWORD *)(a3 - 72) = 0;
      v13 = *(_OWORD *)(a3 - 48);
      *(_QWORD *)(v9 - 32) = *(_QWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 48) = v13;
      *(_QWORD *)(a3 - 48) = 0;
      *(_QWORD *)(a3 - 40) = 0;
      *(_QWORD *)(a3 - 32) = 0;
      v14 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 120;
      *(_QWORD *)(a3 - 24) = 0;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      v7 -= 120;
      a3 -= 120;
    }
    while (a3 != a5);
    *((_QWORD *)&v19 + 1) = v9;
  }
  v17 = 1;
  sub_10051C6C0((uint64_t)v16);
  return a6;
}

uint64_t sub_10051C6C0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_10051C6F4((uint64_t *)a1);
  return a1;
}

void sub_10051C6F4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(a1[2] + 8);
  v2 = *(_QWORD *)(a1[1] + 8);
  if (v1 != v2)
  {
    v3 = *a1;
    do
    {
      sub_10051C2A4(v3, v1);
      v1 += 120;
    }
    while (v1 != v2);
  }
}

void **sub_10051C744(void **a1)
{
  sub_10051C774(a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_10051C774(_QWORD *a1)
{
  uint64_t i;
  uint64_t v2;
  uint64_t v4;

  v2 = a1[1];
  for (i = a1[2]; i != v2; i = a1[2])
  {
    v4 = a1[4];
    a1[2] = i - 120;
    sub_10051C2A4(v4, i - 120);
  }
}

void sub_10051C824(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x100;
  v4 = v2 - 256;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10051CAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_BYTE *sub_10051CB38(_BYTE *__dst, unsigned __int8 *a2, size_t a3)
{
  unsigned int v4;
  uint64_t v5;

  if (a3 && ((v4 = *a2 - 1, v4 > 4) ? (v5 = 0) : (v5 = qword_101BB52F0[(char)v4]), v5 == a3))
    memcpy(__dst, a2, a3);
  else
    *__dst = -1;
  return __dst;
}

_QWORD *sub_10051CBA0(_QWORD *a1)
{
  uint64_t v2;
  _QWORD v4[5];

  *a1 = off_102141620;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  v2 = sub_100127B9C();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_10051CC44;
  v4[3] = &unk_10212ECA0;
  v4[4] = a1;
  sub_1000A50A8(v2, (uint64_t)v4);
  return a1;
}

void sub_10051CC24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_10051CFC0((uint64_t *)(v2 + 24), 0);
  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10051CC44(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  __int128 v8;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = (uint64_t *)sub_100A07FA0();
  v6 = 0x140000FF0CLL;
  v7 = 0;
  sub_1018E4078(v2, (uint64_t)&v6, (uint64_t *)&v8);
  sub_1002B7674(v1 + 8, &v8);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  sub_100A0A4BC(*(uint64_t **)(v1 + 8), (uint64_t)nullsub_201, v1);
  sub_100A0A610(*(_QWORD *)(v1 + 8), (uint64_t)sub_10051CDF0, v1);
  sub_100A0A544(*(_QWORD *)(v1 + 8), (uint64_t)sub_10051CDF0, v1);
  sub_100A0A6B8(*(_QWORD *)(v1 + 8), (uint64_t)sub_10051CDF0, v1);
  operator new();
}

void sub_10051CDB4(uint64_t a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  operator delete();
}

uint64_t sub_10051CDF0(_QWORD *a1)
{
  uint64_t *v2;

  v2 = (uint64_t *)a1[3];
  sub_1011E407C(v2);
  sub_1011E4404(v2);
  return (*(uint64_t (**)(_QWORD *))(*a1 + 16))(a1);
}

_QWORD *sub_10051CE2C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102141620;
  v2 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v2);
  return a1;
}

_QWORD *sub_10051CE70(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_102141620;
  v2 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v2);
  return a1;
}

void sub_10051CEB4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = off_102141620;
  v1 = (uint64_t)(a1 + 1);
  sub_10051CFC0(a1 + 3, 0);
  sub_100261F44(v1);
  operator delete();
}

unint64_t sub_10051CF08()
{
  return ((unint64_t)sub_1001B7910() >> 8) & 1;
}

BOOL sub_10051CF20(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v7;
  int v8;

  sub_100127B9C();
  sub_100127BDC();
  if ((sub_1001B7910() & 0x100) == 0)
    sub_1018FDD18();
  v8 = 0;
  v7 = 4;
  return sub_1011E4FF0(*(_QWORD *)(a1 + 24), a2, a3, (uint64_t)&v8, (uint64_t)&v7) == 0;
}

void sub_10051CF94(id a1)
{
  qword_10229FC68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Eclipse");
}

uint64_t sub_10051CFC0(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1011E4400();
    operator delete();
  }
  return result;
}

id sub_10051D500(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;

  v3 = objc_msgSend(objc_alloc((Class)CKRecordID), "initWithRecordName:zoneID:", a2, objc_msgSend(*(id *)(a1 + 32), "zoneIDForZoneName:", *(_QWORD *)(a1 + 40)));
  v4 = objc_alloc((Class)CKSyncEnginePendingRecordZoneChange);
  v5 = objc_msgSend(v4, "initWithRecordID:type:", v3, CKSyncEnginePendingRecordZoneChangeTypeSave);

  return objc_msgSend(*(id *)(a1 + 48), "addObject:", v5);
}

BOOL sub_10051DBC4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = a1 + 14;
  (*(void (**)(_QWORD *))(a1[14] + 16))(a1 + 14);
  LODWORD(a2) = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 104))(a1, a2);
  (*(void (**)(_QWORD *))(*v4 + 24))(v4);
  return (_DWORD)a2 == 0;
}

void sub_10051DC48(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10051EB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_10051F2B8(uint64_t a1, void *a2)
{
  return sub_100F65928(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), a2);
}

void sub_100520134(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v2)
    sub_100F66224(v2, a2);
}

void sub_1005203D0(id a1, CKRecordZone *a2, unint64_t a3, BOOL *a4)
{
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  NSString *v10;
  uint8_t buf[4];
  NSString *v12;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v5 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[CloudKit] Successfully saved zone %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    v9 = 138543362;
    v10 = -[CKRecordZoneID zoneName](-[CKRecordZone zoneID](a2, "zoneID"), "zoneName");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "[CloudKit] Successfully saved zone %{public}@", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

id sub_100520594(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  uint8_t buf[4];
  id v12;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    v12 = objc_msgSend(a2, "zoneName");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[CloudKit] Successfully deleted zone ID %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    v9 = 138543362;
    v10 = objc_msgSend(a2, "zoneName");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 0, "[CloudKit] Successfully deleted zone ID %{public}@", &v9, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  return objc_msgSend(*(id *)(a1 + 32), "handleZoneDeleted:", a2);
}

id sub_100520760(uint64_t a1, void *a2)
{
  NSObject *v4;
  id result;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  id v10;
  __int16 v11;
  id v12;
  uint8_t buf[4];
  id v14;
  __int16 v15;
  id v16;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v14 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    v15 = 2114;
    v16 = objc_msgSend(a2, "error");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to save zone changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    v9 = 138543618;
    v10 = objc_msgSend(objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"), "zoneName");
    v11 = 2114;
    v12 = objc_msgSend(a2, "error");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "[CloudKit] Failed to save zone changes %{public}@. Error: %{public}@", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  result = objc_msgSend(objc_msgSend(a2, "error"), "code");
  if (result == (id)112)
    return objc_msgSend(*(id *)(a1 + 32), "deleteZone:", objc_msgSend(objc_msgSend(a2, "recordZone"), "zoneID"));
  return result;
}

void sub_100520998(id a1, CKRecordZoneID *a2, NSError *a3, BOOL *a4)
{
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  NSString *v11;
  __int16 v12;
  NSError *v13;
  uint8_t buf[4];
  NSString *v15;
  __int16 v16;
  NSError *v17;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v6 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 138543618;
    v15 = -[CKRecordZoneID zoneName](a2, "zoneName");
    v16 = 2114;
    v17 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "[CloudKit] Failed to delete zone %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v7 = qword_10229FFA8;
    v10 = 138543618;
    v11 = -[CKRecordZoneID zoneName](a2, "zoneName");
    v12 = 2114;
    v13 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 17, "[CloudKit] Failed to delete zone %{public}@. Error: %{public}@", &v10, 22);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentDatabaseChanges:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
}

void sub_100520E14(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  const char *v10;
  uint8_t *v11;
  uint64_t v12;
  int v13;
  id v14;
  uint8_t buf[4];
  id v16;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v16 = objc_msgSend(a2, "recordID");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] Successfully saved records %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v7 = qword_10229FFA8;
    v13 = 138543362;
    v14 = objc_msgSend(a2, "recordID");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "[CloudKit] Successfully saved records %{public}@", &v13, 12);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v5
    && (sub_100F65FA0(v5, objc_msgSend(a2, "recordID"), +[CMHealthColdStorageUtils getSystemFieldsFromCKRecord:](CMHealthColdStorageUtils, "getSystemFieldsFromCKRecord:", a2)) & 1) == 0)
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] SentRecordChanges: Failed to update local system fields for saved record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102141840);
      LOWORD(v13) = 0;
      LODWORD(v12) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[CloudKit] SentRecordChanges: Failed to update local system fields for saved record", &v13, v12);
      v11 = (uint8_t *)v10;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v10);
      if (v11 != buf)
        free(v11);
    }
  }
}

void sub_100521140(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  void *v13;
  uint8_t buf[4];
  void *v15;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 138543362;
    v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "[CloudKit] Successfully deleted records %{public}@", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v12 = 138543362;
    v13 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[CloudKit] Successfully deleted records %{public}@", &v12, 12);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 24);
  if (v5 && (sub_100F65FA0(v5, a2, 0) & 1) == 0)
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] SentRecordChanges: Failed to update local system fields for failed record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102141840);
      LOWORD(v12) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[CloudKit] SentRecordChanges: Failed to update local system fields for failed record", &v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100521438(uint64_t a1, void *a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  const char *v7;
  uint8_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  id v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  id v19;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v4 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v17 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    v18 = 2114;
    v19 = objc_msgSend(a2, "error");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to save record changes %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v6 = qword_10229FFA8;
    v12 = 138543618;
    v13 = objc_msgSend(objc_msgSend(a2, "record"), "recordID");
    v14 = 2114;
    v15 = objc_msgSend(a2, "error");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v6, 16, "[CloudKit] Failed to save record changes %{public}@. Error: %{public}@", &v12, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  sub_100F66380(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24), (uint64_t)objc_msgSend(a2, "error"));
  if (CKErrorIsCode(objc_msgSend(a2, "error"), 14))
  {
    objc_msgSend(*(id *)(a1 + 32), "handleServerRecordChanged:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "error"), "userInfo"), "objectForKeyedSubscript:", CKRecordChangedErrorServerRecordKey));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 11))
  {
    objc_msgSend(*(id *)(a1 + 32), "handleUnknownItem:", objc_msgSend(a2, "record"));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 26))
  {
    objc_msgSend(*(id *)(a1 + 32), "handleZoneNotFound:", objc_msgSend(a2, "record"));
  }
  else if (CKErrorIsCode(objc_msgSend(a2, "error"), 112))
  {
    objc_msgSend(*(id *)(a1 + 32), "deleteZone:", objc_msgSend(objc_msgSend(objc_msgSend(a2, "record"), "recordID"), "zoneID"));
  }
  else
  {
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v5 = qword_10229FFA8;
    if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "[CloudKit] Unhandled error, ignoring failed record", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FFA0 != -1)
        dispatch_once(&qword_10229FFA0, &stru_102141840);
      LOWORD(v12) = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 2, "[CloudKit] Unhandled error, ignoring failed record", &v12, v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

void sub_100521858(id a1, CKRecordID *a2, NSError *a3, BOOL *a4)
{
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  int v9;
  CKRecordID *v10;
  __int16 v11;
  NSError *v12;
  uint8_t buf[4];
  CKRecordID *v14;
  __int16 v15;
  NSError *v16;

  if (qword_10229FFA0 != -1)
    dispatch_once(&qword_10229FFA0, &stru_102141840);
  v6 = qword_10229FFA8;
  if (os_log_type_enabled((os_log_t)qword_10229FFA8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 138543618;
    v14 = a2;
    v15 = 2114;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "[CloudKit] Failed to delete record %{public}@. Error: %{public}@", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FFA0 != -1)
      dispatch_once(&qword_10229FFA0, &stru_102141840);
    v9 = 138543618;
    v10 = a2;
    v11 = 2114;
    v12 = a3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FFA8, 16, "[CloudKit] Failed to delete record %{public}@. Error: %{public}@", &v9, 22);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 0, "-[CMHealthColdStorageCloudKitManager handleSentRecordZoneChanges:]_block_invoke", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
}

void sub_100522AD4(id a1)
{
  qword_10229FFA8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "HealthColdStorage");
}

_QWORD *sub_100522B00@<X0>(unsigned __int8 *a1@<X1>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = operator new(0x190uLL);
  result = sub_100522B58(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_100522B44(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_100522B58(_QWORD *a1, unsigned __int8 *a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_102141870;
  sub_100E2F434(a1 + 3, *a2);
  return a1;
}

void sub_100522B94(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100522BA8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102141870;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100522BBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102141870;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100522BF0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24);
}

void sub_100523A68(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

double sub_100523A94(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)a1 = a2;
  result = -1.0;
  *(_OWORD *)(a1 + 8) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 24) = xmmword_101BAFC90;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  *(_OWORD *)(a1 + 64) = xmmword_101BAFC90;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 100) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

BOOL sub_100523AD4(uint64_t a1)
{
  return *(double *)(a1 + 8) > 0.0;
}

void sub_100523AE4(uint64_t a1)
{
  int v2;
  char v3;
  double Current;
  double v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  __int16 v24[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 8) <= 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 8) = CFAbsoluteTimeGetCurrent();
    if (*(double *)(a1 + 88) > 0.0)
    {
      v2 = *(_DWORD *)(a1 + 96);
      v3 = *(_BYTE *)(a1 + 100);
      Current = CFAbsoluteTimeGetCurrent();
      v5 = Current;
      v6 = *(_QWORD *)(a1 + 120);
      v7 = *(_QWORD *)(a1 + 112);
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a1 + 104);
        v10 = (uint64_t)(v7 - v9) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          sub_100259694();
        v12 = v6 - v9;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v14 = (char *)sub_10028E224(a1 + 120, v13);
        else
          v14 = 0;
        v15 = &v14[16 * v10];
        v16 = &v14[16 * v13];
        *(double *)v15 = v5;
        *((_DWORD *)v15 + 2) = v2;
        v15[12] = v3;
        v8 = v15 + 16;
        v18 = *(_QWORD *)(a1 + 104);
        v17 = *(_QWORD *)(a1 + 112);
        if (v17 != v18)
        {
          do
          {
            v19 = *(_QWORD *)(v17 - 16);
            v17 -= 16;
            v20 = *(_QWORD *)(v17 + 5);
            *((_QWORD *)v15 - 2) = v19;
            v15 -= 16;
            *(_QWORD *)(v15 + 5) = v20;
          }
          while (v17 != v18);
          v17 = *(_QWORD *)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v15;
        *(_QWORD *)(a1 + 112) = v8;
        *(_QWORD *)(a1 + 120) = v16;
        if (v17)
          operator delete((void *)v17);
      }
      else
      {
        *(double *)v7 = Current;
        *(_DWORD *)(v7 + 8) = v2;
        v8 = (char *)(v7 + 16);
        *(_BYTE *)(v7 + 12) = v3;
      }
      *(_QWORD *)(a1 + 112) = v8;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v21 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start navigation session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v24[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "HARVEST NAVIGATION SESSION: start navigation session", v24, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::start()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
}

void sub_100523D80(uint64_t a1)
{
  int v2;
  char v3;
  double Current;
  double v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  unint64_t v32;
  uint64_t v33;
  double v34;
  int v35;
  int v36;
  uint64_t v37;
  void **v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  double v47;
  unint64_t v48;
  uint64_t v49;
  double v50;
  int v51;
  int v52;
  char *v53;
  double v54;
  double v55;
  void *v56[2];
  double v57;
  _BYTE __p[12];
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  int v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  double v74;
  __int16 v75;
  int v76;
  __int16 v77;
  double v78;
  __int16 v79;
  int v80;
  uint8_t buf[4];
  _BYTE *v82;
  __int16 v83;
  uint64_t v84;
  __int16 v85;
  uint64_t v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  int v94;
  __int16 v95;
  uint64_t v96;
  __int16 v97;
  double v98;
  __int16 v99;
  int v100;
  __int16 v101;
  double v102;
  __int16 v103;
  int v104;

  if (*(double *)(a1 + 8) >= 0.0 && *(double *)(a1 + 24) <= 0.0 && *(double *)(a1 + 40) <= 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 16) = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 8);
    *(_QWORD *)(a1 + 8) = 0xBFF0000000000000;
    if (*(double *)(a1 + 88) > 0.0)
    {
      v2 = *(_DWORD *)(a1 + 96);
      v3 = *(_BYTE *)(a1 + 100);
      Current = CFAbsoluteTimeGetCurrent();
      v5 = Current;
      v6 = *(_QWORD *)(a1 + 120);
      v7 = *(_QWORD *)(a1 + 112);
      if (v7 >= v6)
      {
        v9 = *(_QWORD *)(a1 + 104);
        v10 = (uint64_t)(v7 - v9) >> 4;
        v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 60)
          sub_100259694();
        v12 = v6 - v9;
        if (v12 >> 3 > v11)
          v11 = v12 >> 3;
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v11;
        if (v13)
          v14 = (char *)sub_10028E224(a1 + 120, v13);
        else
          v14 = 0;
        v15 = &v14[16 * v10];
        v16 = &v14[16 * v13];
        *(double *)v15 = v5;
        *((_DWORD *)v15 + 2) = v2;
        v15[12] = v3;
        v8 = v15 + 16;
        v18 = *(_QWORD *)(a1 + 104);
        v17 = *(_QWORD *)(a1 + 112);
        if (v17 != v18)
        {
          do
          {
            v19 = *(_QWORD *)(v17 - 16);
            v17 -= 16;
            v20 = *(_QWORD *)(v17 + 5);
            *((_QWORD *)v15 - 2) = v19;
            v15 -= 16;
            *(_QWORD *)(v15 + 5) = v20;
          }
          while (v17 != v18);
          v17 = *(_QWORD *)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v15;
        *(_QWORD *)(a1 + 112) = v8;
        *(_QWORD *)(a1 + 120) = v16;
        if (v17)
          operator delete((void *)v17);
      }
      else
      {
        *(double *)v7 = Current;
        *(_DWORD *)(v7 + 8) = v2;
        v8 = (char *)(v7 + 16);
        *(_BYTE *)(v7 + 12) = v3;
      }
      *(_QWORD *)(a1 + 112) = v8;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v21 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
    {
LABEL_35:
      if (!sub_1001BFF7C(115, 2))
      {
LABEL_36:
        *(_OWORD *)(a1 + 8) = xmmword_101BAFC90;
        *(_OWORD *)(a1 + 24) = xmmword_101BAFC90;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
        *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
        *(_OWORD *)(a1 + 64) = xmmword_101BAFC90;
        *(_BYTE *)(a1 + 80) = 0;
        *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 104);
        return;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v37 = qword_1022A0208;
      (*(void (**)(void **__return_ptr))(**(_QWORD **)a1 + 16))(v56);
      if (v57 >= 0.0)
        v38 = v56;
      else
        v38 = (void **)v56[0];
      v39 = *(_QWORD *)(a1 + 16);
      v40 = *(_QWORD *)(a1 + 32);
      v42 = *(_QWORD *)(a1 + 48);
      v41 = *(_QWORD *)(a1 + 56);
      v43 = *(_QWORD *)(a1 + 72);
      v44 = *(unsigned __int8 *)(a1 + 80);
      v45 = *(_QWORD *)(a1 + 104);
      v46 = *(_QWORD *)(a1 + 112);
      v47 = -1.0;
      v48 = v46 - v45;
      v49 = (v46 - v45) >> 4;
      if (v46 == v45)
      {
        v51 = -1;
        v50 = -1.0;
      }
      else
      {
        v50 = *(float *)(v45 + 8);
        v51 = *(unsigned __int8 *)(v45 + 12);
        if (v48 >= 0x11)
        {
          v47 = *(float *)(v46 - 8);
          v52 = *(unsigned __int8 *)(v46 - 4);
LABEL_48:
          *(_DWORD *)__p = 136317954;
          *(_QWORD *)&__p[4] = v38;
          v59 = 2048;
          v60 = v39;
          v61 = 2048;
          v62 = v40;
          v63 = 2048;
          v64 = v42;
          v65 = 2048;
          v66 = v41;
          v67 = 2048;
          v68 = v43;
          v69 = 1024;
          v70 = v44;
          v71 = 2048;
          v72 = v49;
          v73 = 2048;
          v74 = v50;
          v75 = 1024;
          v76 = v51;
          v77 = 2048;
          v78 = v47;
          v79 = 1024;
          v80 = v52;
          LODWORD(v54) = 110;
          v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "HARVEST NAVIGATION SESSION: stop navigation session, identifier, %s, duration, %.3f, automtiveActivityDuration, %.3f, isVehicleConnectedDuration, %.3f, gpsDuration, %.3f, proactiveGpsDuration, %.3f, mapsUsed, %d, batteryStates, %lu, beggining, level, %f, charging, %d, end, level, %f, charging, %d", __p, v54, v55, *(double *)v56, *(double *)&v56[1], v57);
          if (SHIBYTE(v57) < 0)
            operator delete(v56[0]);
          sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::stop()", "%s\n", v53);
          if (v53 != (char *)buf)
            free(v53);
          goto LABEL_36;
        }
      }
      v52 = -1;
      goto LABEL_48;
    }
    (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)a1 + 16))(__p);
    if (v61 >= 0)
      v22 = __p;
    else
      v22 = *(_BYTE **)__p;
    v23 = *(_QWORD *)(a1 + 16);
    v24 = *(_QWORD *)(a1 + 32);
    v26 = *(_QWORD *)(a1 + 48);
    v25 = *(_QWORD *)(a1 + 56);
    v27 = *(_QWORD *)(a1 + 72);
    v28 = *(unsigned __int8 *)(a1 + 80);
    v29 = *(_QWORD *)(a1 + 104);
    v30 = *(_QWORD *)(a1 + 112);
    v31 = -1.0;
    v32 = v30 - v29;
    v33 = (v30 - v29) >> 4;
    if (v30 == v29)
    {
      v35 = -1;
      v34 = -1.0;
    }
    else
    {
      v34 = *(float *)(v29 + 8);
      v35 = *(unsigned __int8 *)(v29 + 12);
      if (v32 >= 0x11)
      {
        v31 = *(float *)(v30 - 8);
        v36 = *(unsigned __int8 *)(v30 - 4);
        goto LABEL_33;
      }
    }
    v36 = -1;
LABEL_33:
    *(_DWORD *)buf = 136317954;
    v82 = v22;
    v83 = 2048;
    v84 = v23;
    v85 = 2048;
    v86 = v24;
    v87 = 2048;
    v88 = v26;
    v89 = 2048;
    v90 = v25;
    v91 = 2048;
    v92 = v27;
    v93 = 1024;
    v94 = v28;
    v95 = 2048;
    v96 = v33;
    v97 = 2048;
    v98 = v34;
    v99 = 1024;
    v100 = v35;
    v101 = 2048;
    v102 = v31;
    v103 = 1024;
    v104 = v36;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HARVEST NAVIGATION SESSION: stop navigation session, identifier, %s, duration, %.3f, automtiveActivityDuration, %.3f, isVehicleConnectedDuration, %.3f, gpsDuration, %.3f, proactiveGpsDuration, %.3f, mapsUsed, %d, batteryStates, %lu, beggining, level, %f, charging, %d, end, level, %f, charging, %d", buf, 0x6Eu);
    if (SHIBYTE(v61) < 0)
      operator delete(*(void **)__p);
    goto LABEL_35;
  }
}

void sub_100524278(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 24) <= 0.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start automotive activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "HARVEST NAVIGATION SESSION: start automotive activity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::startAutomotiveActivity()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    *(CFAbsoluteTime *)(a1 + 24) = CFAbsoluteTimeGetCurrent();
    sub_100523AE4(a1);
  }
}

void sub_100524424(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 24) >= 0.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: stop automotive activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v4[0] = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "HARVEST NAVIGATION SESSION: stop automotive activity", v4, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::stopAutomotiveActivity()", "%s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
    *(double *)(a1 + 32) = *(double *)(a1 + 32) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 24);
    *(_QWORD *)(a1 + 24) = 0xBFF0000000000000;
    sub_100523D80(a1);
  }
}

void sub_1005245E4(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 40) <= 0.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: start vehicle connected", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "HARVEST NAVIGATION SESSION: start vehicle connected", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::startVehicleConnected()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    *(CFAbsoluteTime *)(a1 + 40) = CFAbsoluteTimeGetCurrent();
    sub_100523AE4(a1);
  }
}

void sub_100524790(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (*(double *)(a1 + 40) >= 0.0)
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_102141930);
    v2 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "HARVEST NAVIGATION SESSION: stop vehicle connected", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_102141930);
      v4[0] = 0;
      v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "HARVEST NAVIGATION SESSION: stop vehicle connected", v4, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLNavigationSession::stopVehicleConnected()", "%s\n", v3);
      if (v3 != (char *)buf)
        free(v3);
    }
    *(double *)(a1 + 48) = *(double *)(a1 + 48) + CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
    sub_100523D80(a1);
  }
}

double sub_100524950(uint64_t a1, double result)
{
  if (*(double *)(a1 + 8) > 0.0)
  {
    result = *(double *)(a1 + 56) + result;
    *(double *)(a1 + 56) = result;
  }
  return result;
}

void sub_10052496C(uint64_t a1)
{
  if (*(double *)(a1 + 8) > 0.0 && *(double *)(a1 + 64) <= 0.0)
    *(CFAbsoluteTime *)(a1 + 64) = CFAbsoluteTimeGetCurrent();
}

double sub_1005249A8(double *a1)
{
  double result;

  result = a1[1];
  if (result > 0.0)
  {
    result = a1[8];
    if (result >= 0.0)
    {
      result = a1[9] + CFAbsoluteTimeGetCurrent() - a1[8];
      a1[9] = result;
      a1[8] = -1.0;
    }
  }
  return result;
}

uint64_t sub_1005249F8(uint64_t result)
{
  *(_BYTE *)(result + 80) = 1;
  return result;
}

void sub_100524A04(uint64_t a1, int a2, float a3)
{
  double Current;
  _OWORD *v7;
  double *v8;
  double *v9;
  uint64_t v10;
  unint64_t v11;
  _OWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 88) = Current;
  v7 = (_OWORD *)(a1 + 88);
  *(float *)(a1 + 96) = a3;
  *(_BYTE *)(a1 + 100) = a2;
  if (*(double *)(a1 + 8) > 0.0)
  {
    v8 = *(double **)(a1 + 104);
    v9 = *(double **)(a1 + 112);
    v10 = (char *)v9 - (char *)v8;
    if (v9 == v8 || *((unsigned __int8 *)v9 - 4) != a2 || Current - *(v9 - 2) >= 300.0)
    {
      v11 = *(_QWORD *)(a1 + 120);
      if ((unint64_t)v9 >= v11)
      {
        v13 = v10 >> 4;
        v14 = (v10 >> 4) + 1;
        if (v14 >> 60)
          sub_100259694();
        v15 = v11 - (_QWORD)v8;
        if (v15 >> 3 > v14)
          v14 = v15 >> 3;
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v14;
        if (v16)
          v17 = (char *)sub_10028E224(a1 + 120, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v13];
        v19 = &v17[16 * v16];
        *(_OWORD *)v18 = *v7;
        v12 = v18 + 16;
        v21 = *(_QWORD *)(a1 + 104);
        v20 = *(_QWORD *)(a1 + 112);
        if (v20 != v21)
        {
          do
          {
            v22 = *(_QWORD *)(v20 - 16);
            v20 -= 16;
            v23 = *(_QWORD *)(v20 + 5);
            *((_QWORD *)v18 - 2) = v22;
            v18 -= 16;
            *(_QWORD *)(v18 + 5) = v23;
          }
          while (v20 != v21);
          v20 = *(_QWORD *)(a1 + 104);
        }
        *(_QWORD *)(a1 + 104) = v18;
        *(_QWORD *)(a1 + 112) = v12;
        *(_QWORD *)(a1 + 120) = v19;
        if (v20)
          operator delete((void *)v20);
      }
      else
      {
        *(_OWORD *)v9 = *v7;
        v12 = v9 + 2;
      }
      *(_QWORD *)(a1 + 112) = v12;
    }
  }
}

void sub_100524B44(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

BOOL sub_100524B70(const char *a1, int a2, uint64_t a3)
{
  xmlBuffer *v6;
  xmlBuffer *v7;
  xmlTextWriter *v8;
  xmlTextWriter *v9;
  int v10;
  _BOOL8 v11;
  xmlChar *v12;
  int v13;
  NSObject *v14;
  char *v16;
  int v17;
  xmlChar *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  xmlChar *v22;
  _BYTE buf[1624];

  v6 = xmlBufferCreate();
  if (!v6)
    return 0;
  v7 = v6;
  v8 = xmlNewTextWriterMemory(v6, 0);
  if (v8)
  {
    v9 = v8;
    v10 = xmlTextWriterWriteBase64(v8, a1, 0, a2);
    v11 = v10 != -1;
    if (v10 != -1)
    {
      xmlTextWriterFlush(v9);
      v12 = (xmlChar *)xmlBufferContent(v7);
      v13 = xmlBufferLength(v7);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v14 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v12;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v12;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "processed %p %d to (%s)", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v17 = 134218498;
        v18 = v12;
        v19 = 1024;
        v20 = v13;
        v21 = 2080;
        v22 = v12;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "processed %p %d to (%s)", &v17, 28);
        sub_100512490("Generic", 1, 0, 2, "static BOOL CLNameValuePair::encodeBase64(const void *, unsigned long, std::string &)", "%s\n", v16);
        if (v16 != buf)
          free(v16);
      }
      sub_10035ACF4(buf, v12, v13);
      if (*(char *)(a3 + 23) < 0)
        operator delete(*(void **)a3);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
    }
    xmlFreeTextWriter(v9);
  }
  else
  {
    v11 = 0;
  }
  xmlBufferFree(v7);
  return v11;
}

_QWORD *sub_100524E10(_QWORD *a1, CFTypeRef cf)
{
  *a1 = off_102141960;
  a1[1] = cf;
  CFRetain(cf);
  return a1;
}

void sub_100524E44(_QWORD *a1)
{
  sub_10011A56C(a1);
  operator delete();
}

_QWORD *sub_100524E68(_QWORD *a1, uint64_t a2)
{
  CFMutableDictionaryRef MutableCopy;
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  *a1 = off_102141960;
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a2 + 8));
  a1[1] = MutableCopy;
  if (!MutableCopy)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create new mutable dictionary", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "CLNameValuePair::CLNameValuePair(const CLNameValuePair &)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1;
}

uint64_t sub_10052502C(uint64_t a1, uint64_t a2)
{
  const void *v4;
  CFMutableDictionaryRef MutableCopy;
  NSObject *v6;
  char *v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (a1 != a2)
  {
    v4 = *(const void **)(a1 + 8);
    if (v4)
      CFRelease(v4);
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, *(CFDictionaryRef *)(a2 + 8));
    *(_QWORD *)(a1 + 8) = MutableCopy;
    if (!MutableCopy)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v6 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create new mutable dictionary", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v9[0] = 0;
        v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create new mutable dictionary", v9, 2);
        sub_100512490("Generic", 1, 0, 0, "CLNameValuePair &CLNameValuePair::operator=(const CLNameValuePair &)", "%s\n", v8);
        if (v8 != (char *)buf)
          free(v8);
      }
    }
  }
  return a1;
}

const __CFString *sub_1005251F8()
{
  return CFSTR("Memory");
}

uint64_t sub_100525204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 928))(a3, a1, a2);
}

uint64_t sub_100525220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 896))(a3, a1, a2);
}

uint64_t sub_10052523C(void *context, uint64_t a2, int a3)
{
  const __CFDictionary *v4;
  void (__cdecl *v5)(const void *, const void *, void *);

  v4 = *(const __CFDictionary **)(a2 + 8);
  if (a3)
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_100525220;
  else
    v5 = (void (__cdecl *)(const void *, const void *, void *))sub_100525204;
  CFDictionaryApplyFunction(v4, v5, context);
  return (*(uint64_t (**)(void *))(*(_QWORD *)context + 848))(context);
}

uint64_t sub_100525288(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 872))(a1);
}

id sub_100525294(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  const char *v7;
  uint8_t *v8;
  CFTypeRef cf;
  int v10;
  uint64_t v11;
  uint8_t buf[4];
  uint64_t v13;

  cf = 0;
  v3 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 768))(a1, &cf);
  if ((_DWORD)v3)
  {
    v4 = sub_100014F6C(v3, a2, (void *)cf, 2);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v13 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Could not serialize data for file %{public}s", buf, 0xCu);
    }
    v4 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = 136446210;
      v11 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not serialize data for file %{public}s", &v10, 12);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::saveToFile(const char *) const", "%s\n", v7);
      if (v8 != buf)
        free(v8);
      v4 = 0;
    }
  }
  if (cf)
    CFRelease(cf);
  return v4;
}

void sub_100525484(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 880))(a1, v5, a3);
  CFRelease(v5);
}

uint64_t sub_1005254E4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 880))(a1);
}

uint64_t sub_1005254F0(CFMutableDictionaryRef *a1)
{
  CFDictionaryRemoveAllValues(a1[1]);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

void sub_100525520(uint64_t a1, const __CFString *a2, unsigned int a3)
{
  CFTypeID v6;
  NSObject *v7;
  int v8;
  _BYTE *v9;
  CFTypeID v10;
  _BYTE *v11;
  uint64_t v12;
  int v13;
  void **v14;
  CFTypeID v15;
  void **v16;
  char *v17;
  char *v18;
  NSObject *v19;
  int v20;
  _BYTE *v21;
  CFIndex Count;
  _BYTE *v23;
  uint64_t v24;
  int v25;
  void **v26;
  CFIndex v27;
  void **v28;
  char *v29;
  void *v30[2];
  char v31;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v34;
  unsigned int v35;
  __int16 v36;
  CFTypeID v37;
  uint8_t buf[4];
  _BYTE *v39;
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  CFTypeID v43;

  if ((a3 & 0x80000000) != 0)
  {
    (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
    return;
  }
  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return;
  v6 = CFGetTypeID(cf);
  if (v6 != CFArrayGetTypeID())
  {
    if (!a3)
    {
      (*(void (**)(uint64_t, const __CFString *))(*(_QWORD *)a1 + 888))(a1, a2);
      goto LABEL_40;
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v8 = SBYTE3(v37);
      v9 = *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      v11 = __p;
      *(_DWORD *)buf = 136446722;
      if (v8 < 0)
        v11 = v9;
      v39 = v11;
      v40 = 1026;
      v41 = a3;
      v42 = 2050;
      v43 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in non-array type %{public}lu", buf, 0x1Cu);
      if (SBYTE3(v37) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v12 = qword_1022A02D8;
    sub_1001A486C(a2, (uint64_t)v30);
    v13 = v31;
    v14 = (void **)v30[0];
    v15 = CFGetTypeID(cf);
    v16 = v30;
    *(_DWORD *)__p = 136446722;
    if (v13 < 0)
      v16 = v14;
    *(_QWORD *)&__p[4] = v16;
    v34 = 1026;
    v35 = a3;
    v36 = 2050;
    v37 = v15;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 17, "key %{public}s does not have element %{public}d in non-array type %{public}lu", __p, 28);
    v18 = v17;
    if (v31 < 0)
      operator delete(v30[0]);
LABEL_37:
    sub_100512490("Generic", 1, 0, 0, "virtual void CLNameValuePair::clearInternal(const CFStringRef, int)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
    goto LABEL_40;
  }
  if (CFArrayGetCount((CFArrayRef)cf) <= a3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v19 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v20 = SBYTE3(v37);
      v21 = *(_BYTE **)__p;
      Count = CFArrayGetCount((CFArrayRef)cf);
      v23 = __p;
      *(_DWORD *)buf = 136446722;
      if (v20 < 0)
        v23 = v21;
      v39 = v23;
      v40 = 1026;
      v41 = a3;
      v42 = 2050;
      v43 = Count;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "key %{public}s does not have element %{public}d in array of size %{public}ld", buf, 0x1Cu);
      if (SBYTE3(v37) < 0)
        operator delete(*(void **)__p);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_40;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v24 = qword_1022A02D8;
    sub_1001A486C(a2, (uint64_t)v30);
    v25 = v31;
    v26 = (void **)v30[0];
    v27 = CFArrayGetCount((CFArrayRef)cf);
    v28 = v30;
    *(_DWORD *)__p = 136446722;
    if (v25 < 0)
      v28 = v26;
    *(_QWORD *)&__p[4] = v28;
    v34 = 1026;
    v35 = a3;
    v36 = 2050;
    v37 = v27;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 17, "key %{public}s does not have element %{public}d in array of size %{public}ld", __p, 28);
    v18 = v29;
    if (v31 < 0)
      operator delete(v30[0]);
    goto LABEL_37;
  }
  CFArrayRemoveValueAtIndex((CFMutableArrayRef)cf, a3);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 848))(a1);
LABEL_40:
  CFRelease(cf);
}

void sub_100525A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100525A5C(CFMutableDictionaryRef *a1, const void *a2)
{
  CFDictionaryRemoveValue(a1[1], a2);
  return (*((uint64_t (**)(CFMutableDictionaryRef *))*a1 + 106))(a1);
}

void sub_100525A8C(uint64_t a1)
{
  CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
  operator new[]();
}

void sub_100525BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100525C10(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, NSString *))(*(_QWORD *)a1 + 920))(a1, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2));
}

uint64_t sub_100525C4C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 920))(a1);
}

uint64_t sub_100525C58(uint64_t a1, const char *a2, CFTypeRef *a3, uint64_t a4)
{
  CFStringRef v7;
  uint64_t v8;

  v7 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  *a3 = 0;
  v8 = (*(uint64_t (**)(uint64_t, CFStringRef, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, v7, a3, a4);
  if ((_DWORD)v8 && *a3)
    CFAutorelease(*a3);
  if (v7)
    CFRelease(v7);
  return v8;
}

uint64_t sub_100525CE4(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100525D54(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_100525D54(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  *(_DWORD *)buf = 0;
  v6 = sub_1001C13CC(cf, buf);
  if ((_DWORD)v6)
  {
    *a3 = *(_WORD *)buf;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, uint16_t &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_100525F9C(uint64_t a1, const char *a2, _WORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10052600C(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_10052600C(uint64_t a1, uint64_t a2, _WORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  CFTypeRef cf;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_100526C38(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v20 = v8;
      v21 = 2112;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v15 = 138412546;
      v16 = v11;
      v17 = 2112;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v15, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, short &, int) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_100526244(uint64_t a1, const char *a2, _DWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1000B1180(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1005262B4(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100526324(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_100526324(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  CFTypeRef cf;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  uint64_t v19;
  __int16 v20;
  uint64_t v21;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_1000ABE08(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v19 = v8;
      v20 = 2112;
      v21 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v14 = 138412546;
      v15 = v11;
      v16 = 2112;
      v17 = a2;
      v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v14, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, int64_t &, int) const", "%s\n", v12);
      if (v12 != (char *)buf)
        free(v12);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_10052655C(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1005265CC(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_1005265CC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  CFTypeRef cf;
  int v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  uint8_t buf[4];
  uint64_t v20;
  __int16 v21;
  uint64_t v22;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v6 = sub_100526E38(cf, a3);
  if ((v6 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v20 = v8;
      v21 = 2112;
      v22 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v15 = 138412546;
      v16 = v11;
      v17 = 2112;
      v18 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "Unsupported type at %@:%@ (domain:key)", &v15, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, long &, int) const", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  if (cf)
    CFRelease(cf);
  return v6;
}

uint64_t sub_100526804(uint64_t a1, const char *a2, float *a3)
{
  CFStringRef v5;
  uint64_t v6;
  float v7;
  double v9;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v9 = 0.0;
  v6 = sub_1001FD9FC(a1, (uint64_t)v5, &v9);
  if ((_DWORD)v6)
  {
    v7 = v9;
    *a3 = v7;
  }
  if (v5)
    CFRelease(v5);
  return v6;
}

float sub_10052688C(uint64_t a1, uint64_t a2, float *a3)
{
  float result;
  double v5;

  v5 = 0.0;
  if (sub_1001FD9FC(a1, a2, &v5))
  {
    result = v5;
    *a3 = result;
  }
  return result;
}

uint64_t sub_1005268D0(uint64_t a1, const char *a2, CFTypeRef *a3)
{
  const __CFString *v5;
  uint64_t v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1001C3D30(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100526940(uint64_t a1, const char *a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  CFStringRef v9;
  _BOOL8 v10;

  v9 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v10 = sub_1005269BC(a1, (uint64_t)v9, a3, a4, a5);
  CFRelease(v9);
  return v10;
}

BOOL sub_1005269BC(uint64_t a1, uint64_t a2, const UInt8 **a3, _DWORD *a4, uint64_t a5)
{
  _BOOL8 v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  CFTypeRef cf;
  int v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *, uint64_t))(*(_QWORD *)a1 + 904))(a1, a2, &cf, a5))return 0;
  v9 = sub_100527828(cf, a3, a4);
  if (!v9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      *(_DWORD *)buf = 138412546;
      v23 = v11;
      v24 = 2112;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Unsupported type at %@:%@ (domain:key)", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v13 = qword_1022A02D8;
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 840))(a1);
      v18 = 138412546;
      v19 = v14;
      v20 = 2112;
      v21 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "Unsupported type at %@:%@ (domain:key)", &v18, 22);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, const char *&, unsigned int &, int) const", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
  }
  CFRelease(cf);
  return v9;
}

uint64_t sub_100526BFC(const void *a1, _WORD *a2)
{
  uint64_t result;
  int v4;

  v4 = 0;
  result = sub_1001C13CC(a1, &v4);
  if ((_DWORD)result)
    *a2 = v4;
  return result;
}

uint64_t sub_100526C38(const void *a1, _WORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  _WORD v12[8];
  uint8_t buf[1640];

  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v10 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v10 != TypeID)
      return result;
    result = sub_1001E4B1C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberSInt16Type, a2))
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get value", v12, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, short &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

uint64_t sub_100526E38(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  NSObject *v5;
  _BOOL4 v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  _WORD v12[8];
  uint8_t buf[1640];

  v4 = CFGetTypeID(a1);
  if (v4 != CFNumberGetTypeID())
  {
    buf[0] = 0;
    v10 = CFGetTypeID(a1);
    TypeID = CFBooleanGetTypeID();
    result = 0;
    if (v10 != TypeID)
      return result;
    result = sub_1001E4B1C(a1, (BOOL *)buf);
    if (!(_DWORD)result)
      return result;
    *a2 = buf[0];
    return 1;
  }
  if (CFNumberGetValue((CFNumberRef)a1, kCFNumberLongType, a2))
    return 1;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "could not get value", buf, 2u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v12[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not get value", v12, 2);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, long &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

BOOL sub_100527038(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID TypeID;
  NSObject *v6;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFTypeID v12;
  __int16 v13;
  CFTypeID v14;
  uint8_t buf[4];
  CFTypeID v16;
  __int16 v17;
  CFTypeID v18;

  v4 = CFGetTypeID(a1);
  TypeID = CFDictionaryGetTypeID();
  if (v4 == TypeID)
  {
    sub_10052AA44(a2, (CFDictionaryRef)a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v16 = CFGetTypeID(a1);
      v17 = 2050;
      v18 = CFDictionaryGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v8 = qword_1022A02D8;
      v11 = 134349312;
      v12 = CFGetTypeID(a1);
      v13 = 2050;
      v14 = CFDictionaryGetTypeID();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "type IDs do not match - %{public}lu vs %{public}lu", &v11, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CLNameValuePair &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v4 == TypeID;
}

BOOL sub_100527258(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  uint64_t v13;
  void **v14;
  CFTypeID v15;
  CFTypeID v16;
  char *v17;
  char *v18;
  void *v19[2];
  char v20;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v23;
  CFTypeID v24;
  __int16 v25;
  CFTypeID v26;
  uint8_t buf[4];
  _BYTE *v28;
  __int16 v29;
  CFTypeID v30;
  __int16 v31;
  CFTypeID v32;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFArrayGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v9 = v25 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFArrayGetTypeID();
      *(_DWORD *)buf = 136446722;
      v28 = v9;
      v29 = 2050;
      v30 = v10;
      v31 = 2050;
      v32 = TypeID;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v25) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v13 = qword_1022A02D8;
      v14 = v19;
      sub_1001A486C(a2, (uint64_t)v19);
      if (v20 < 0)
        v14 = (void **)v19[0];
      v15 = CFGetTypeID(cf);
      v16 = CFArrayGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v14;
      v23 = 2050;
      v24 = v15;
      v25 = 2050;
      v26 = v16;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", __p, 32);
      v18 = v17;
      if (v20 < 0)
        operator delete(v19[0]);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFArrayRef &) const", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_100527508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100527540(uint64_t a1, const __CFString *a2, CFTypeRef *a3)
{
  CFTypeID v5;
  BOOL v6;
  _BOOL8 v7;
  NSObject *v8;
  _BYTE *v9;
  CFTypeID v10;
  CFTypeID TypeID;
  uint64_t v13;
  void **v14;
  CFTypeID v15;
  CFTypeID v16;
  char *v17;
  void *v18[2];
  char v19;
  CFTypeRef cf;
  _BYTE __p[12];
  __int16 v22;
  CFTypeID v23;
  __int16 v24;
  CFTypeID v25;
  uint8_t buf[4];
  _BYTE *v27;
  __int16 v28;
  CFTypeID v29;
  __int16 v30;
  CFTypeID v31;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, const __CFString *, CFTypeRef *))(*(_QWORD *)a1 + 904))(a1, a2, &cf))
    return 0;
  v5 = CFGetTypeID(cf);
  v6 = v5 == CFDataGetTypeID();
  v7 = v6;
  if (v6)
  {
    *a3 = cf;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v9 = v24 >= 0 ? __p : *(_BYTE **)__p;
      v10 = CFGetTypeID(cf);
      TypeID = CFDataGetTypeID();
      *(_DWORD *)buf = 136446722;
      v27 = v9;
      v28 = 2050;
      v29 = v10;
      v30 = 2050;
      v31 = TypeID;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", buf, 0x20u);
      if (SHIBYTE(v24) < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v13 = qword_1022A02D8;
      v14 = v18;
      sub_1001A486C(a2, (uint64_t)v18);
      if (v19 < 0)
        v14 = (void **)v18[0];
      v15 = CFGetTypeID(cf);
      v16 = CFDataGetTypeID();
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v14;
      v22 = 2050;
      v23 = v15;
      v24 = 2050;
      v25 = v16;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 17, "type IDs do not match for key %{public}s - %{public}lu vs %{public}lu", __p, 32);
      if (v19 < 0)
        operator delete(v18[0]);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::get(CFStringRef, CFDataRef &, int) const", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
  }
  CFAutorelease(cf);
  return v7;
}

void sub_1005277F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100527828(const void *a1, const UInt8 **a2, _DWORD *a3)
{
  CFTypeID v6;
  CFTypeID TypeID;
  NSObject *v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  int v13;
  CFTypeID v14;
  __int16 v15;
  CFTypeID v16;
  uint8_t buf[4];
  CFTypeID v18;
  __int16 v19;
  CFTypeID v20;

  v6 = CFGetTypeID(a1);
  TypeID = CFDataGetTypeID();
  if (v6 == TypeID)
  {
    *a2 = CFDataGetBytePtr((CFDataRef)a1);
    *a3 = CFDataGetLength((CFDataRef)a1);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v18 = CFGetTypeID(a1);
      v19 = 2050;
      v20 = CFDataGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      v13 = 134349312;
      v14 = CFGetTypeID(a1);
      v15 = 2050;
      v16 = CFDataGetTypeID();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "type IDs do not match - %{public}lu vs %{public}lu", &v13, 22);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, const char *&, unsigned int &)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return v6 == TypeID;
}

BOOL sub_100527A58(uint64_t a1, const void *a2)
{
  return CFDictionaryContainsKey(*(CFDictionaryRef *)(a1 + 8), a2) != 0;
}

BOOL sub_100527A78(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100527AE0(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100527AE0(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *valuePtr[2];
  char v17;

  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)valuePtr);
      v7 = v17 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const uint16_t &)", "%s\n", v11);
      if (v11 != (char *)valuePtr)
        free(v11);
    }
  }
  return v5 != 0;
}

BOOL sub_100527D50(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100527DB8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100527DB8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const short &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_10052801C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100528084(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100528084(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const int64_t &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_1005282E8(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100528350(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100528350(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const long &)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v5 != 0;
}

BOOL sub_1005285B4(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10052861C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10052861C(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  _BYTE buf[12];
  char v13;
  int v14;
  _BYTE *v15;
  void *__p[2];
  char v17;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 896))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v17 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v17 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v13 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v14 = 136446210;
      v15 = v10;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v14, 12);
      if (v13 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::set(CFStringRef, const char *)", "%s\n", v11);
      if (v11 != (char *)__p)
        free(v11);
    }
  }
  return v5 != 0;
}

BOOL sub_100528888(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_10052861C(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_1005288FC(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_10052861C(a1, a2, a3);
}

uint64_t sub_100528910(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 896))(a1);
  return 1;
}

CFNumberRef sub_100528930(unsigned __int16 *a1)
{
  int valuePtr;

  valuePtr = *a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, &valuePtr);
}

CFNumberRef sub_100528968(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, valuePtr);
}

CFNumberRef sub_100528980(unsigned int *a1)
{
  uint64_t valuePtr;

  valuePtr = *a1;
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, &valuePtr);
}

CFNumberRef sub_1005289B8(void *valuePtr)
{
  return CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat64Type, valuePtr);
}

uint64_t sub_1005289D0(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_100528A3C(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_100528A5C(uint64_t a1, const char *a2, _BYTE *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100528AC4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100528AC4(uint64_t a1, const __CFString *a2, _BYTE *a3)
{
  CFTypeRef *v5;
  CFTypeRef v6;
  NSObject *v7;
  void **v8;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  _BYTE buf[12];
  char v15;
  int v16;
  _BYTE *v17;
  void *__p[2];
  char v19;

  v5 = (CFTypeRef *)&kCFBooleanTrue;
  if (!*a3)
    v5 = (CFTypeRef *)&kCFBooleanFalse;
  v6 = *v5;
  CFRetain(*v5);
  if (v6)
  {
    (*(void (**)(uint64_t, const __CFString *, CFTypeRef))(*(_QWORD *)a1 + 928))(a1, a2, v6);
    CFRelease(v6);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v8 = v19 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v19 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v10 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v15 >= 0)
        v11 = buf;
      else
        v11 = *(_BYTE **)buf;
      v16 = 136446210;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v10, 17, "could not create cf type for key %{public}s", &v16, 12);
      v13 = v12;
      if (v15 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const BOOL &)", "%s\n", v13);
      if (v13 != (char *)__p)
        free(v13);
    }
  }
  return v6 != 0;
}

BOOL sub_100528D38(uint64_t a1, const char *a2, unsigned __int16 *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100528DA0(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100528DA0(uint64_t a1, const __CFString *a2, unsigned __int16 *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *valuePtr[2];
  char v18;

  LODWORD(valuePtr[0]) = *a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)valuePtr);
      v7 = v18 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint16_t &)", "%s\n", v12);
      if (v12 != (char *)valuePtr)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_100529010(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100529078(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100529078(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const short &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_1005292DC(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100529344(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100529344(uint64_t a1, const __CFString *a2, unsigned int *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *valuePtr[2];
  char v18;

  valuePtr[0] = (void *)*a3;
  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, valuePtr);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)valuePtr);
      v7 = v18 >= 0 ? valuePtr : (void **)valuePtr[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(valuePtr[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(valuePtr, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, valuePtr, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const uint32_t &)", "%s\n", v12);
      if (v12 != (char *)valuePtr)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_1005295B4(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10052961C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10052961C(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int64_t &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_100529880(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_1005298E8(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_1005298E8(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt32Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const int &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_100529B4C(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100529BB4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100529BB4(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const long &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_100529E18(uint64_t a1, const char *a2, const void *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100529E80(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_100529E80(uint64_t a1, const __CFString *a2, const void *a3)
{
  CFNumberRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat64Type, a3);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFNumberRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const double &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_10052A0E4(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10052A14C(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10052A14C(uint64_t a1, const __CFString *a2, char *cStr)
{
  CFStringRef v5;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
  if (v5)
  {
    (*(void (**)(uint64_t, const __CFString *, CFStringRef))(*(_QWORD *)a1 + 928))(a1, a2, v5);
    CFRelease(v5);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const char *)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return v5 != 0;
}

BOOL sub_10052A3B8(uint64_t a1, const char *a2, char *a3)
{
  const __CFString *v5;
  char *v6;
  _BOOL8 v7;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  if (a3[23] >= 0)
    v6 = a3;
  else
    v6 = *(char **)a3;
  v7 = sub_10052A14C(a1, v5, v6);
  if (v5)
    CFRelease(v5);
  return v7;
}

BOOL sub_10052A42C(uint64_t a1, const __CFString *a2, char *a3)
{
  if (a3[23] < 0)
    a3 = *(char **)a3;
  return sub_10052A14C(a1, a2, a3);
}

uint64_t sub_10052A440(uint64_t a1, const char *a2, uint64_t a3)
{
  CFStringRef v5;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  (*(void (**)(uint64_t, CFStringRef, uint64_t))(*(_QWORD *)a1 + 928))(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return 1;
}

uint64_t sub_10052A4AC(uint64_t a1)
{
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 928))(a1);
  return 1;
}

BOOL sub_10052A4CC(uint64_t a1, const char *a2, uint64_t a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10052A534(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

BOOL sub_10052A534(uint64_t a1, const __CFString *a2, uint64_t a3)
{
  CFDictionaryRef Copy;
  NSObject *v6;
  void **v7;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  _BYTE buf[12];
  char v14;
  int v15;
  _BYTE *v16;
  void *__p[2];
  char v18;

  Copy = CFDictionaryCreateCopy(kCFAllocatorDefault, *(CFDictionaryRef *)(a3 + 8));
  if (Copy)
  {
    (*(void (**)(uint64_t, const __CFString *, CFDictionaryRef))(*(_QWORD *)a1 + 928))(a1, a2, Copy);
    CFRelease(Copy);
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(a2, (uint64_t)__p);
      v7 = v18 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "could not create cf type for key %{public}s", buf, 0xCu);
      if (v18 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      sub_1001A486C(a2, (uint64_t)buf);
      if (v14 >= 0)
        v10 = buf;
      else
        v10 = *(_BYTE **)buf;
      v15 = 136446210;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 17, "could not create cf type for key %{public}s", &v15, 12);
      v12 = v11;
      if (v14 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::insert(CFStringRef, const CLNameValuePair &)", "%s\n", v12);
      if (v12 != (char *)__p)
        free(v12);
    }
  }
  return Copy != 0;
}

uint64_t sub_10052A798(uint64_t a1, uint64_t a2, const void *a3)
{
  CFTypeID v6;
  void *Mutable;
  CFTypeID v8;
  CFTypeRef arg;
  CFRange v11;

  arg = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &arg))
  {
    CFAutorelease(arg);
    v6 = CFGetTypeID(arg);
    if (v6 == CFArrayGetTypeID())
    {
      Mutable = (void *)arg;
    }
    else
    {
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      CFAutorelease(Mutable);
      CFArrayAppendValue((CFMutableArrayRef)Mutable, arg);
    }
    v8 = CFGetTypeID(a3);
    if (v8 == CFArrayGetTypeID())
    {
      v11.length = CFArrayGetCount((CFArrayRef)a3);
      v11.location = 0;
      CFArrayAppendArray((CFMutableArrayRef)Mutable, (CFArrayRef)a3, v11);
    }
    else
    {
      CFArrayAppendValue((CFMutableArrayRef)Mutable, a3);
    }
  }
  else
  {
    Mutable = (void *)a3;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 896))(a1, a2, Mutable);
}

uint64_t sub_10052A8A8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1);
}

CFIndex sub_10052A8B4(uint64_t a1)
{
  return CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 8));
}

uint64_t sub_10052A8CC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1);
}

uint64_t sub_10052A8D8(uint64_t a1, uint64_t a2)
{
  CFTypeID v2;
  CFIndex Count;
  CFTypeRef cf;

  cf = 0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 912))(a1, a2, &cf))
    return 0xFFFFFFFFLL;
  v2 = CFGetTypeID(cf);
  if (v2 == CFArrayGetTypeID())
    Count = CFArrayGetCount((CFArrayRef)cf);
  else
    Count = 1;
  CFRelease(cf);
  return Count;
}

BOOL sub_10052A950(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 856))(a1) < 1;
}

BOOL sub_10052A974(uint64_t a1, const char *a2)
{
  CFStringRef v3;

  v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  LODWORD(a1) = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return (int)a1 < 1;
}

BOOL sub_10052A9D4(uint64_t a1)
{
  return (*(int (**)(uint64_t))(*(_QWORD *)a1 + 864))(a1) < 1;
}

BOOL sub_10052A9F8(uint64_t a1, CFDataRef *a2)
{
  CFDataRef Data;

  Data = CFPropertyListCreateData(kCFAllocatorDefault, *(CFPropertyListRef *)(a1 + 8), kCFPropertyListXMLFormat_v1_0, 0, 0);
  *a2 = Data;
  return Data != 0;
}

uint64_t sub_10052AA44(_QWORD *a1, CFDictionaryRef theDict)
{
  const void *v4;
  uint64_t v5;

  if (theDict)
  {
    v4 = (const void *)a1[1];
    if (v4)
      CFRelease(v4);
    a1[1] = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    v5 = 106;
  }
  else
  {
    v5 = 109;
  }
  return (*(uint64_t (**)(_QWORD *))(*a1 + 8 * v5))(a1);
}

void sub_10052AAA8(uint64_t a1)
{
  NSObject *v1;
  void **v2;
  void **v3;
  const char *v4;
  uint8_t *v5;
  void *__p[2];
  uint64_t v7;
  int v8;
  void **v9;
  uint8_t buf[4];
  void **v11;

  __p[0] = 0;
  __p[1] = 0;
  v7 = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 800))(a1, __p);
  if (qword_1022A02E0 != -1)
    dispatch_once(&qword_1022A02E0, &stru_102141D58);
  v1 = qword_1022A02E8;
  if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
  {
    v2 = __p;
    if (v7 < 0)
      v2 = (void **)__p[0];
    *(_DWORD *)buf = 136315138;
    v11 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "%s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02E0 != -1)
      dispatch_once(&qword_1022A02E0, &stru_102141D58);
    v3 = __p;
    if (v7 < 0)
      v3 = (void **)__p[0];
    v8 = 136315138;
    v9 = v3;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02E8, 2, "%s", (const char *)&v8);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLNameValuePair::print() const", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
}

void sub_10052AC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052ACB4(uint64_t a1, std::string *this)
{
  const __CFDictionary *v4;
  std::string context;

  v4 = *(const __CFDictionary **)(a1 + 8);
  if (v4 && CFDictionaryGetCount(v4))
  {
    memset(&context, 0, sizeof(context));
    CFDictionaryApplyFunction(*(CFDictionaryRef *)(a1 + 8), (CFDictionaryApplierFunction)sub_10052AD5C, &context);
    std::string::operator=(this, &context);
    if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
      operator delete(context.__r_.__value_.__l.__data_);
  }
  else
  {
    std::string::assign(this, "<empty>\n");
  }
}

void sub_10052AD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052AD5C(const __CFString *a1, const __CFString *a2, std::string *a3)
{
  CFTypeID v6;
  CFTypeID v7;
  int v8;
  std::string::size_type v9;
  CFIndex Count;
  std::string *p_p;
  CFTypeID v12;
  CFTypeID TypeID;
  CFTypeID v14;
  CFRange v15;
  std::string *v16;
  CFTypeID v17;
  std::string *v18;
  std::string *p_context;
  CFTypeID v20;
  std::string *v21;
  CFTypeID v22;
  std::string context;
  std::string __p;
  char __str[256];

  v6 = CFGetTypeID(a1);
  if (v6 == CFStringGetTypeID())
  {
    memset(&__p, 0, sizeof(__p));
    sub_1001C0048(a1, &__p);
    v7 = CFGetTypeID(a2);
    if (v7 == CFDictionaryGetTypeID())
    {
      v8 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
      v9 = __p.__r_.__value_.__r.__words[0];
      Count = CFDictionaryGetCount((CFDictionaryRef)a2);
      p_p = &__p;
      if (v8 < 0)
        p_p = (std::string *)v9;
      snprintf(__str, 0x100uLL, "%s = <dictionary (%ld entries)>:\n", (const char *)p_p, Count);
      std::string::append(a3, __str);
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_10052AD5C, a3);
    }
    else
    {
      v14 = CFGetTypeID(a2);
      if (v14 == CFArrayGetTypeID())
      {
        v15.length = CFArrayGetCount((CFArrayRef)a2);
        v16 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v16 = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_OWORD *)&context.__r_.__value_.__l.__data_ = (unint64_t)v16;
        context.__r_.__value_.__r.__words[2] = (std::string::size_type)a3;
        v15.location = 0;
        CFArrayApplyFunction((CFArrayRef)a2, v15, (CFArrayApplierFunction)sub_10052BB54, &context);
      }
      else
      {
        v17 = CFGetTypeID(a2);
        if (v17 == CFStringGetTypeID())
        {
          memset(&context, 0, sizeof(context));
          if (sub_1001C0048(a2, &context))
          {
            v18 = &__p;
            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v18 = (std::string *)__p.__r_.__value_.__r.__words[0];
            p_context = &context;
            if ((context.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              p_context = (std::string *)context.__r_.__value_.__r.__words[0];
            snprintf(__str, 0x100uLL, "%s = %s\n", (const char *)v18, (const char *)p_context);
          }
          std::string::append(a3, __str);
          if (SHIBYTE(context.__r_.__value_.__r.__words[2]) < 0)
            operator delete(context.__r_.__value_.__l.__data_);
        }
        else
        {
          v20 = CFGetTypeID(a2);
          if (v20 == CFNumberGetTypeID())
          {
            context.__r_.__value_.__r.__words[0] = 0;
            if (sub_1001FDC34(a2, &context))
            {
              v21 = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
              snprintf(__str, 0x100uLL, "%s = %0.6f\n", (const char *)v21, *(double *)&context.__r_.__value_.__l.__data_);
            }
            std::string::append(a3, __str);
          }
          else
          {
            v22 = CFGetTypeID(a2);
            if (v22 == CFBooleanGetTypeID())
            {
              CFBooleanGetValue((CFBooleanRef)a2);
              snprintf(__str, 0x100uLL, "%s = %d\n");
            }
            else
            {
              CFGetTypeID(a2);
              snprintf(__str, 0x100uLL, "%s = <unhandled value type %lu>\n");
            }
            std::string::append(a3, __str);
          }
        }
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v12 = CFGetTypeID(a1);
    TypeID = CFStringGetTypeID();
    snprintf(__str, 0x100uLL, "type ID does not match - %lu vs %lu\n", v12, TypeID);
    std::string::append(a3, __str);
  }
}

void sub_10052B080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052B0C8(const __CFString *a1, const __CFString *a2)
{
  CFTypeID v4;
  CFTypeID v5;
  NSObject *v6;
  int v7;
  std::string::size_type v8;
  CFIndex Count;
  std::string *v10;
  CFTypeID v11;
  CFRange v12;
  std::string *v13;
  CFTypeID v14;
  NSObject *v15;
  std::string *v16;
  std::string *p_p;
  CFTypeID v18;
  NSObject *v19;
  std::string *v20;
  std::string *v21;
  const char *v22;
  char *v23;
  CFTypeID v24;
  NSObject *v25;
  int v26;
  std::string::size_type v27;
  int Value;
  std::string *v29;
  uint64_t v30;
  int v31;
  std::string::size_type v32;
  int v33;
  std::string *v34;
  const char *v35;
  NSObject *v36;
  int v37;
  std::string::size_type v38;
  CFTypeID v39;
  std::string *v40;
  uint64_t v41;
  int v42;
  std::string::size_type v43;
  CFIndex v44;
  std::string *v45;
  const char *v46;
  char *v47;
  std::string *v48;
  std::string *v49;
  const char *v50;
  char *v51;
  uint64_t v52;
  int v53;
  std::string::size_type v54;
  CFTypeID v55;
  std::string *v56;
  const char *v57;
  double v58;
  std::string v59;
  _BYTE v60[12];
  __int16 v61;
  std::string *v62;
  std::string __p;
  _BYTE buf[1632];

  v4 = CFGetTypeID(a1);
  if (v4 == CFStringGetTypeID())
  {
    memset(&v59, 0, sizeof(v59));
    sub_1001C0048(a1, &v59);
    v5 = CFGetTypeID(a2);
    if (v5 == CFDictionaryGetTypeID())
    {
      if (qword_1022A02E0 != -1)
        dispatch_once(&qword_1022A02E0, &stru_102141D58);
      v6 = qword_1022A02E8;
      if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
      {
        v7 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
        v8 = v59.__r_.__value_.__r.__words[0];
        Count = CFDictionaryGetCount((CFDictionaryRef)a2);
        v10 = &v59;
        if (v7 < 0)
          v10 = (std::string *)v8;
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v10;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = Count;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "\t%s = <dictionary (%ld entries)>:", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v41 = qword_1022A02E8;
        v42 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
        v43 = v59.__r_.__value_.__r.__words[0];
        v44 = CFDictionaryGetCount((CFDictionaryRef)a2);
        v45 = &v59;
        if (v42 < 0)
          v45 = (std::string *)v43;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v45;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v44;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v41, 2, "\t%s = <dictionary (%ld entries)>:", (const char *)&__p, 22);
        v47 = (char *)v46;
        sub_100512490("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v46);
        if (v47 != buf)
          free(v47);
      }
      CFDictionaryApplyFunction((CFDictionaryRef)a2, (CFDictionaryApplierFunction)sub_10052B0C8, 0);
      goto LABEL_63;
    }
    v11 = CFGetTypeID(a2);
    if (v11 == CFArrayGetTypeID())
    {
      v12.length = CFArrayGetCount((CFArrayRef)a2);
      *(_OWORD *)&buf[8] = 0uLL;
      v13 = &v59;
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v13 = (std::string *)v59.__r_.__value_.__r.__words[0];
      *(_QWORD *)buf = v13;
      v12.location = 0;
      CFArrayApplyFunction((CFArrayRef)a2, v12, (CFArrayApplierFunction)sub_10052BAE0, buf);
      goto LABEL_63;
    }
    v14 = CFGetTypeID(a2);
    if (v14 == CFStringGetTypeID())
    {
      memset(&__p, 0, sizeof(__p));
      if (sub_1001C0048(a2, &__p))
      {
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v15 = qword_1022A02E8;
        if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
        {
          v16 = &v59;
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v16 = (std::string *)v59.__r_.__value_.__r.__words[0];
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v16;
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = p_p;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "\t%s = %s", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02E0 != -1)
            dispatch_once(&qword_1022A02E0, &stru_102141D58);
          v48 = &v59;
          if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v48 = (std::string *)v59.__r_.__value_.__r.__words[0];
          v49 = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v49 = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)v60 = 136315394;
          *(_QWORD *)&v60[4] = v48;
          v61 = 2080;
          v62 = v49;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02E8, 2, "\t%s = %s", v60, 22);
          v51 = (char *)v50;
          sub_100512490("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v50);
          if (v51 != buf)
            free(v51);
        }
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_63;
    }
    v18 = CFGetTypeID(a2);
    if (v18 == CFNumberGetTypeID())
    {
      *(_QWORD *)v60 = 0;
      if (!sub_1001FDC34(a2, v60))
        goto LABEL_63;
      if (qword_1022A02E0 != -1)
        dispatch_once(&qword_1022A02E0, &stru_102141D58);
      v19 = qword_1022A02E8;
      if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
      {
        v20 = &v59;
        if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v20 = (std::string *)v59.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 136315394;
        *(_QWORD *)&buf[4] = v20;
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = *(_QWORD *)v60;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "\t%s = %0.6f", buf, 0x16u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_63;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02E0 != -1)
        dispatch_once(&qword_1022A02E0, &stru_102141D58);
      v21 = &v59;
      if ((v59.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v21 = (std::string *)v59.__r_.__value_.__r.__words[0];
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = *(_QWORD *)v60;
      LODWORD(v58) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02E8, 2, "\t%s = %0.6f", (const char *)&__p, v58);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v22);
      if (v23 == buf)
        goto LABEL_63;
    }
    else
    {
      v24 = CFGetTypeID(a2);
      if (v24 == CFBooleanGetTypeID())
      {
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v25 = qword_1022A02E8;
        if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
        {
          v26 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
          v27 = v59.__r_.__value_.__r.__words[0];
          Value = CFBooleanGetValue((CFBooleanRef)a2);
          v29 = &v59;
          if (v26 < 0)
            v29 = (std::string *)v27;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v29;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = Value;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "\t%s = %d", buf, 0x12u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v30 = qword_1022A02E8;
        v31 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
        v32 = v59.__r_.__value_.__r.__words[0];
        v33 = CFBooleanGetValue((CFBooleanRef)a2);
        v34 = &v59;
        if (v31 < 0)
          v34 = (std::string *)v32;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v34;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 1024;
        *(_DWORD *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v33;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v30, 2, "\t%s = %d", (const char *)&__p, 18);
        v23 = (char *)v35;
        sub_100512490("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v35);
      }
      else
      {
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v36 = qword_1022A02E8;
        if (os_log_type_enabled((os_log_t)qword_1022A02E8, OS_LOG_TYPE_DEBUG))
        {
          v37 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
          v38 = v59.__r_.__value_.__r.__words[0];
          v39 = CFGetTypeID(a2);
          v40 = &v59;
          if (v37 < 0)
            v40 = (std::string *)v38;
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v40;
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v39;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "\t%s = <unhandled value type %lu>", buf, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_63;
        bzero(buf, 0x65CuLL);
        if (qword_1022A02E0 != -1)
          dispatch_once(&qword_1022A02E0, &stru_102141D58);
        v52 = qword_1022A02E8;
        v53 = SHIBYTE(v59.__r_.__value_.__r.__words[2]);
        v54 = v59.__r_.__value_.__r.__words[0];
        v55 = CFGetTypeID(a2);
        v56 = &v59;
        if (v53 < 0)
          v56 = (std::string *)v54;
        LODWORD(__p.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
        *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v55;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v52, 2, "\t%s = <unhandled value type %lu>", (const char *)&__p, 22);
        v23 = (char *)v57;
        sub_100512490("Generic", 1, 0, 2, "static void CLNameValuePair::printKeyValue(const void *, const void *, void *)", "%s\n", v57);
      }
      if (v23 == buf)
      {
LABEL_63:
        if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v59.__r_.__value_.__l.__data_);
        return;
      }
    }
    free(v23);
    goto LABEL_63;
  }
}

void sub_10052BA74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10052BAE0(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_10052B0C8(v4, a1);
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

void sub_10052BB54(uint64_t a1, uint64_t a2)
{
  CFStringRef v4;

  v4 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%s[%d]"), *(_QWORD *)a2, *(unsigned int *)(a2 + 8));
  sub_10052AD5C(v4, a1, *(_QWORD *)(a2 + 16));
  ++*(_DWORD *)(a2 + 8);
  CFRelease(v4);
}

BOOL sub_10052BBCC(const void *a1, _QWORD *a2)
{
  CFTypeID v4;
  CFTypeID TypeID;
  NSObject *v6;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  int v11;
  CFTypeID v12;
  __int16 v13;
  CFTypeID v14;
  uint8_t buf[4];
  CFTypeID v16;
  __int16 v17;
  CFTypeID v18;

  v4 = CFGetTypeID(a1);
  TypeID = CFStringGetTypeID();
  if (v4 == TypeID)
  {
    *a2 = a1;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      v16 = CFGetTypeID(a1);
      v17 = 2050;
      v18 = CFStringGetTypeID();
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "type IDs do not match - %{public}lu vs %{public}lu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v8 = qword_1022A02D8;
      v11 = 134349312;
      v12 = CFGetTypeID(a1);
      v13 = 2050;
      v14 = CFStringGetTypeID();
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v8, 17, "type IDs do not match - %{public}lu vs %{public}lu", &v11, 22);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 0, "static BOOL CLNameValuePair::fromCfType(const CFTypeRef, CFStringRef &)", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
  return v4 == TypeID;
}

void sub_10052BDE4(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

void sub_10052BE10(id a1)
{
  qword_1022A01D8 = (uint64_t)os_log_create("com.apple.locationd.Core", "Core");
}

void sub_10052BE3C(id a1)
{
  qword_1022A02E8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Direct_deprecated");
}

_QWORD *sub_10052BEF4(_QWORD *a1, uint64_t a2)
{
  *a1 = off_102141D88;
  a1[1] = a2;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = -[CLHarvestAccessoryLocationProviderAdapter initWithMonitorGpsExternal:]([CLHarvestAccessoryLocationProviderAdapter alloc], "initWithMonitorGpsExternal:", a1);
  return a1;
}

void sub_10052BF50(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_1018FDEE4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10052BF80(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_102141D88;

  v2 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_10052BFEC(uint64_t a1)
{
  sub_10052BF80(a1);
  operator delete();
}

uint64_t sub_10052C010(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

id sub_10052C030(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2, 0);
}

id sub_10052C044(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 16) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8), a2);
}

id sub_10052C054(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, 0);
}

id sub_10052C068(uint64_t a1, uint64_t a2)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 24) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 24) + 8), a2, 0);
}

void sub_10052C07C()
{
  sub_100E087CC();
}

void sub_10052C148(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMonitorGpsExternal::onGpsNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102141DF8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMonitorGpsExternal::onGpsNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102141DF8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMonitorGpsExternal::onGpsNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a4 + 40) + 32))(*(_QWORD *)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10052C318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10052C338(uint64_t a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMonitorGpsExternal::onAccessoryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102141DF8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMonitorGpsExternal::onAccessoryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102141DF8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMonitorGpsExternal::onAccessoryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  (*(void (**)(_QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a4 + 40) + 32))(*(_QWORD *)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10052C508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10052C528(uint64_t a1, void *a2)
{
  return sub_100988264(*(_QWORD *)(a1 + 40), a2);
}

void sub_10052C530(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

uint64_t sub_10052C55C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  *(_QWORD *)a1 = off_102141E28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2;
  *(_QWORD *)(a1 + 40) = off_102141E98;
  v7 = operator new(0x20uLL);
  v7[1] = 0;
  v7[2] = 0;
  *v7 = off_102141ED0;
  *((_DWORD *)v7 + 6) = 31337;
  *(_QWORD *)(a1 + 48) = v7 + 3;
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = a3;
  *(_QWORD *)(a1 + 72) = a4;
  *(_WORD *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  return a1;
}

uint64_t sub_10052C5EC(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_102141E28;
  sub_10052D8AC(a1);
  objc_msgSend(*(id *)(a1 + 8), "invalidateAndCancel");

  *(_QWORD *)(a1 + 8) = 0;
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_100090A0C((_QWORD *)(a1 + 40));
  return a1;
}

void sub_10052C65C(uint64_t a1)
{
  sub_10052C5EC(a1);
  operator delete();
}

BOOL sub_10052C680(uint64_t a1, uint64_t a2, NSMutableURLRequest *a3, double *a4)
{
  id v8;
  NSURLSessionConfiguration *v9;
  NSURLSession *v10;
  NSURLSession *v11;
  NSURL *v12;
  NSURL *v13;
  NSMutableURLRequest *v14;
  NSMutableURLRequest *v15;
  NSObject *v16;
  double v17;
  NSObject *v18;
  double v19;
  NSURL *v20;
  uint64_t *p_shared_weak_owners;
  unint64_t v22;
  id v23;
  _BOOL8 v24;
  NSObject *v25;
  NSMutableURLRequest *v26;
  NSObject *v27;
  double v28;
  uint64_t v29;
  double v30;
  const char *v31;
  const char *v32;
  NSObject *v33;
  NSObject *v34;
  NSObject *v35;
  uint32_t v36;
  NSObject *v38;
  uint64_t v39;
  NSObject *v40;
  NSMutableURLRequest *v41;
  NSObject *v42;
  NSMutableURLRequest *v43;
  _QWORD v44[6];
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint8_t buf[4];
  int v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  double v53;
  __int16 v54;
  NSMutableURLRequest *v55;

  if (!*(_QWORD *)(a1 + 8))
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "operationQueue");
    v9 = +[NSURLSessionConfiguration defaultSessionConfiguration](NSURLSessionConfiguration, "defaultSessionConfiguration");
    if (qword_1023017A8 != -1)
      dispatch_once(&qword_1023017A8, &stru_102141F10);
    v10 = +[NSURLSession sessionWithConfiguration:delegate:delegateQueue:](NSURLSession, "sessionWithConfiguration:delegate:delegateQueue:", v9, qword_1023017B0, v8);
    *(_QWORD *)(a1 + 8) = v10;
    v11 = v10;
  }
  if (*a4 <= 0.0)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v27 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      v28 = *a4;
      *(_DWORD *)buf = 68289282;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2050;
      v53 = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid timeout\", \"Timeout_s\":\"%{public}.09f\"}", buf, 0x1Cu);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v29 = qword_1022A0298;
    if (!os_signpost_enabled((os_log_t)qword_1022A0298))
      return 0;
    v30 = *a4;
    *(_DWORD *)buf = 68289282;
    v49 = 0;
    v50 = 2082;
    v51 = "";
    v52 = 2050;
    v53 = v30;
    v31 = "Ignoring new #filedownload request with invalid timeout";
    v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid timeout\", \"Timeout_s\":\"%{public}.09f\"}";
LABEL_52:
    v35 = v29;
    v36 = 28;
    goto LABEL_53;
  }
  v12 = +[NSURL URLWithString:](NSURL, "URLWithString:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2, *a4));
  if (!v12)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v33 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2081;
      v53 = *(double *)&a2;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src string\", \"URLString\":%{private, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v29 = qword_1022A0298;
    if (!os_signpost_enabled((os_log_t)qword_1022A0298))
      return 0;
    *(_DWORD *)buf = 68289283;
    v49 = 0;
    v50 = 2082;
    v51 = "";
    v52 = 2081;
    v53 = *(double *)&a2;
    v31 = "Ignoring new #filedownload request with invalid src string";
    v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src string\", \"URLString\":%{private, "
          "location:escape_only}s}";
    goto LABEL_52;
  }
  v13 = v12;
  v14 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", v12);
  if (!v14)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v34 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289283;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = *(double *)&v13;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src url\", \"URL\":%{private, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v29 = qword_1022A0298;
    if (!os_signpost_enabled((os_log_t)qword_1022A0298))
      return 0;
    *(_DWORD *)buf = 68289283;
    v49 = 0;
    v50 = 2082;
    v51 = "";
    v52 = 2113;
    v53 = *(double *)&v13;
    v31 = "Ignoring new #filedownload request with invalid src url";
    v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid src url\", \"URL\":%{private, location:escape_only}@}";
    goto LABEL_52;
  }
  v15 = v14;
  -[NSMutableURLRequest setTimeoutInterval:](v14, "setTimeoutInterval:", *a4);
  -[NSMutableURLRequest setAllowsCellularAccess:](v15, "setAllowsCellularAccess:", *(unsigned __int8 *)(a1 + 80));
  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v16 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      v17 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 16), "originalRequest"));
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = v17;
      v54 = 2113;
      v55 = v15;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Dropping uncancelled #filedownload to service new request\", \"OriginalRequest\":%{private, location:escape_only}@, \"NewRequest\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v18 = qword_1022A0298;
    if (os_signpost_enabled((os_log_t)qword_1022A0298))
    {
      v19 = COERCE_DOUBLE(objc_msgSend(*(id *)(a1 + 16), "originalRequest"));
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = v19;
      v54 = 2113;
      v55 = v15;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Dropping uncancelled #filedownload to service new request", "{\"msg%{public}.0s\":\"Dropping uncancelled #filedownload to service new request\", \"OriginalRequest\":%{private, location:escape_only}@, \"NewRequest\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    sub_10052D1B0(a1);
  }
  *(_QWORD *)(a1 + 96) = 0;
  v20 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a3), 0);
  *(_QWORD *)(a1 + 24) = v20;
  if (!v20)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v38 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = *(double *)&v15;
      v54 = 2081;
      v55 = a3;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid dst string\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFileString\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v39 = qword_1022A0298;
    if (!os_signpost_enabled((os_log_t)qword_1022A0298))
      return 0;
    *(_DWORD *)buf = 68289539;
    v49 = 0;
    v50 = 2082;
    v51 = "";
    v52 = 2113;
    v53 = *(double *)&v15;
    v54 = 2081;
    v55 = a3;
    v31 = "Ignoring new #filedownload request with invalid dst string";
    v32 = "{\"msg%{public}.0s\":\"Ignoring new #filedownload request with invalid dst string\", \"NewRequest\":%{private,"
          " location:escape_only}@, \"LocalFileString\":%{private, location:escape_only}s}";
    v35 = v39;
    v36 = 38;
LABEL_53:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v35, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v31, v32, buf, v36);
    return 0;
  }
  sub_10052D218(a1 + 40, &v46);
  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3321888768;
  v44[2] = sub_10052D29C;
  v44[3] = &unk_102141E48;
  v44[4] = a1;
  v44[5] = v46;
  v45 = v47;
  if (v47)
  {
    p_shared_weak_owners = &v47->__shared_weak_owners_;
    do
      v22 = __ldxr((unint64_t *)p_shared_weak_owners);
    while (__stxr(v22 + 1, (unint64_t *)p_shared_weak_owners));
  }
  v23 = objc_msgSend(*(id *)(a1 + 8), "downloadTaskWithRequest:completionHandler:", v15, v44);
  *(_QWORD *)(a1 + 16) = v23;
  v24 = v23 != 0;
  if (v23)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v25 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
    {
      v26 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = *(double *)&v15;
      v54 = 2113;
      v55 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Created task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
    }
    if (*(_BYTE *)(a1 + 81))
      operator new();
    if (!*(_QWORD *)(a1 + 104))
      *(_QWORD *)(a1 + 104) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDownloadOSTransaction");
    objc_msgSend(*(id *)(a1 + 16), "resume");
  }
  else
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v40 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_FAULT))
    {
      v41 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = *(double *)&v15;
      v54 = 2113;
      v55 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not create task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v42 = qword_1022A0298;
    if (os_signpost_enabled((os_log_t)qword_1022A0298))
    {
      v43 = *(NSMutableURLRequest **)(a1 + 24);
      *(_DWORD *)buf = 68289539;
      v49 = 0;
      v50 = 2082;
      v51 = "";
      v52 = 2113;
      v53 = *(double *)&v15;
      v54 = 2113;
      v55 = v43;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not create task for #filedownload request", "{\"msg%{public}.0s\":\"Could not create task for #filedownload request\", \"NewRequest\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
    }
  }
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  return v24;
}

void sub_10052D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a21)
    std::__shared_weak_count::__release_weak(a21);
  if (a23)
    std::__shared_weak_count::__release_weak(a23);
  _Unwind_Resume(exception_object);
}

void sub_10052D1B0(uint64_t a1)
{
  uint64_t v2;

  sub_100090A50(a1 + 40);

  *(_QWORD *)(a1 + 24) = 0;
  objc_msgSend(*(id *)(a1 + 16), "cancel");

  *(_QWORD *)(a1 + 16) = 0;
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);

  *(_QWORD *)(a1 + 104) = 0;
}

void sub_10052D218(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    *a2 = v2;
    a2[1] = v3;
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  else
  {
    *a2 = v2;
    a2[1] = 0;
  }
}

void sub_10052D29C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a1 + 48);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(v4 + 8) != -1)
      sub_10052D2BC(v5, a2, a3, a4);
  }
}

void sub_10052D2BC(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  void (*v11)(uint64_t, BOOL, _QWORD);
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  id v29;
  id v30;
  uint8_t buf[4];
  int v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  void *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  id v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  id v44;

  v30 = a4;
  if (a4)
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v7 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
    {
      v8 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289795;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2113;
      v36 = a3;
      v37 = 2113;
      v38 = v8;
      v39 = 2113;
      v40 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x30u);
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
    }
    v9 = qword_1022A0298;
    if (os_signpost_enabled((os_log_t)qword_1022A0298))
    {
      v10 = *(_QWORD *)(a1 + 24);
      *(_DWORD *)buf = 68289795;
      v32 = 0;
      v33 = 2082;
      v34 = "";
      v35 = 2113;
      v36 = a3;
      v37 = 2113;
      v38 = v10;
      v39 = 2113;
      v40 = a4;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v9, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error on #filedownload task completion", "{\"msg%{public}.0s\":\"Error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x30u);
    }
    *(_QWORD *)(a1 + 96) = objc_msgSend(a4, "code");
  }
  else
  {
    v13 = sub_10052D9A8(a3, a2);
    *(_QWORD *)(a1 + 96) = v13;
    if (v13)
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
      v14 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
      {
        v15 = *(_QWORD *)(a1 + 24);
        v16 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 68289795;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2113;
        v36 = a3;
        v37 = 2113;
        v38 = v15;
        v39 = 1025;
        LODWORD(v40) = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Protocol error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d}", buf, 0x2Cu);
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102141F30);
      }
      v17 = qword_1022A0298;
      if (os_signpost_enabled((os_log_t)qword_1022A0298))
      {
        v18 = *(_QWORD *)(a1 + 24);
        v19 = *(_QWORD *)(a1 + 96);
        *(_DWORD *)buf = 68289795;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2113;
        v36 = a3;
        v37 = 2113;
        v38 = v18;
        v39 = 1025;
        LODWORD(v40) = v19;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v17, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Protocol error on #filedownload task completion", "{\"msg%{public}.0s\":\"Protocol error on #filedownload task completion\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"ResultCode\":%{private}d}", buf, 0x2Cu);
      }
    }
    else
    {
      if (qword_1022A0290 != -1)
        dispatch_once(&qword_1022A0290, &stru_102141F30);
      v20 = qword_1022A0298;
      if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_DEFAULT))
      {
        v21 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 68289539;
        v32 = 0;
        v33 = 2082;
        v34 = "";
        v35 = 2113;
        v36 = a3;
        v37 = 2113;
        v38 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#filedownload task completed successfully\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@}", buf, 0x26u);
      }
      if (!-[NSFileManager replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:](+[NSFileManager defaultManager](NSFileManager, "defaultManager", 0), "replaceItemAtURL:withItemAtURL:backupItemName:options:resultingItemURL:error:", *(_QWORD *)(a1 + 24), a2, 0, 1, &v29, &v30)|| (v22 = objc_msgSend(*(id *)(a1 + 24), "absoluteString"), (objc_msgSend(v22, "isEqual:", objc_msgSend(v29, "absoluteString")) & 1) == 0))
      {
        if (qword_1022A0290 != -1)
          dispatch_once(&qword_1022A0290, &stru_102141F30);
        v23 = qword_1022A0298;
        if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_ERROR))
        {
          v24 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 68290307;
          v32 = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2113;
          v36 = a3;
          v37 = 2113;
          v38 = v24;
          v39 = 2113;
          v40 = v29;
          v41 = 2113;
          v42 = a2;
          v43 = 2113;
          v44 = v30;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Error writing file to disk for completed #filedownload task\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"LostAndFile\":%{private, location:escape_only}@, \"TempFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x44u);
          if (qword_1022A0290 != -1)
            dispatch_once(&qword_1022A0290, &stru_102141F30);
        }
        v25 = qword_1022A0298;
        if (os_signpost_enabled((os_log_t)qword_1022A0298))
        {
          v26 = *(_QWORD *)(a1 + 24);
          *(_DWORD *)buf = 68290307;
          v32 = 0;
          v33 = 2082;
          v34 = "";
          v35 = 2113;
          v36 = a3;
          v37 = 2113;
          v38 = v26;
          v39 = 2113;
          v40 = v29;
          v41 = 2113;
          v42 = a2;
          v43 = 2113;
          v44 = v30;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v25, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Error writing file to disk for completed #filedownload task", "{\"msg%{public}.0s\":\"Error writing file to disk for completed #filedownload task\", \"Response\":%{private, location:escape_only}@, \"LocalFile\":%{private, location:escape_only}@, \"LostAndFile\":%{private, location:escape_only}@, \"TempFile\":%{private, location:escape_only}@, \"Error\":%{private, location:escape_only}@}", buf, 0x44u);
        }
        v27 = objc_msgSend(v30, "code");
        v28 = 512;
        if (v27)
          v28 = (uint64_t)v27;
        *(_QWORD *)(a1 + 96) = v28;
      }
    }
  }
  v11 = *(void (**)(uint64_t, BOOL, _QWORD))(a1 + 64);
  if (v11)
    v11(a1, *(_QWORD *)(a1 + 96) == 0, *(_QWORD *)(a1 + 72));
  sub_10052D1B0(a1);
}

void sub_10052D8AC(uint64_t a1)
{
  NSObject *v2;
  id v3;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;
  __int16 v7;
  id v8;

  if (*(_QWORD *)(a1 + 16))
  {
    if (qword_1022A0290 != -1)
      dispatch_once(&qword_1022A0290, &stru_102141F30);
    v2 = qword_1022A0298;
    if (os_log_type_enabled((os_log_t)qword_1022A0298, OS_LOG_TYPE_INFO))
    {
      v3 = objc_msgSend(*(id *)(a1 + 16), "originalRequest");
      v4[0] = 68289283;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      v7 = 2113;
      v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Cancelling task for #filedownload request\", \"OriginalRequest\":%{private, location:escape_only}@}", (uint8_t *)v4, 0x1Cu);
    }
  }
  sub_10052D1B0(a1);
}

uint64_t sub_10052D9A8(void *a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  uint64_t result;

  v3 = objc_opt_class(NSHTTPURLResponse, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) == 0)
    return 0;
  v4 = objc_msgSend(a1, "statusCode");
  switch((unint64_t)v4)
  {
    case 0x191uLL:
    case 0x197uLL:
      result = -1013;
      break;
    case 0x192uLL:
    case 0x195uLL:
    case 0x196uLL:
      goto LABEL_7;
    case 0x193uLL:
      result = -1102;
      break;
    case 0x194uLL:
      result = -1100;
      break;
    default:
      if (v4 == (id)200)
        return 0;
LABEL_7:
      result = -1;
      break;
  }
  return result;
}

void sub_10052DAB0(_QWORD *a1)
{
  sub_100090A0C(a1);
  operator delete();
}

void sub_10052DAD4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102141ED0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10052DAE8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102141ED0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10052DB1C(id a1)
{
  qword_1023017B0 = objc_alloc_init(CLFileDownloadTaskDelegate);
}

void sub_10052DB40(id a1)
{
  qword_1022A0298 = (uint64_t)os_log_create("com.apple.locationd.Utility", "Network");
}

uint64_t sub_10052DB6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;

  if ((*(_BYTE *)(a2 + 52) & 2) == 0)
    return 0;
  v2 = *(_QWORD *)(a2 + 40);
  if (!v2)
    v2 = *(_QWORD *)(qword_102313BA0 + 40);
  if ((*(_BYTE *)(v2 + 493) & 4) == 0)
    return 0;
  v4 = *(_QWORD *)(v2 + 344);
  if (!v4)
    v4 = *(_QWORD *)(qword_102310D28 + 344);
  return *(_BYTE *)(v4 + 36) & 1;
}

void sub_10052DBC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  __int128 v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  int v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  __int16 v24;
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  unsigned int v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102141F50);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v22 = 68289026;
    v23 = 0;
    v24 = 2082;
    v25 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,logDecodedTileHeader\"}", (uint8_t *)&v22, 0x12u);
  }
  v6 = *(_QWORD *)(a2 + 40);
  if (!v6)
    v6 = *(_QWORD *)(qword_102313BA0 + 40);
  v7 = *(_QWORD *)(v6 + 344);
  if (!v7)
    v7 = *(_QWORD *)(qword_102310D28 + 344);
  v8 = *(_QWORD *)(v7 + 8);
  if (!v8)
    v8 = *(_QWORD *)(qword_102313F88 + 8);
  v9 = *(_DWORD *)(v8 + 48);
  if ((v9 & 1) != 0)
  {
    v10 = *(_QWORD *)(v8 + 8);
    if (!v10)
      v10 = *(_QWORD *)(qword_102313F98 + 8);
    v11 = *(_DWORD *)(v10 + 20) & 1;
    if ((~v9 & 0x3E) == 0 && v11 != 0)
    {
      v13 = *(_OWORD *)(v8 + 24);
      *(_OWORD *)(a3 + 80) = v13;
      *(_DWORD *)(a3 + 36) = *(_DWORD *)(v8 + 40);
      LODWORD(v13) = *(_DWORD *)(v8 + 16);
      *(double *)(a3 + 72) = (double)(unint64_t)v13;
      v14 = *(_QWORD *)(v8 + 8);
      if (!v14)
        v14 = *(_QWORD *)(qword_102313F98 + 8);
      *(_QWORD *)(a3 + 56) = *(_QWORD *)(v14 + 8);
      *(_DWORD *)(a3 + 44) = *(_DWORD *)(v8 + 20);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102141F50);
      v15 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v16 = *(_QWORD *)(a3 + 56);
        v17 = *(_DWORD *)(a3 + 44);
        v18 = *(_DWORD *)(a3 + 36);
        v19 = *(double *)(a3 + 72);
        v20 = *(_QWORD *)(a3 + 80);
        v21 = *(_QWORD *)(a3 + 88);
        v22 = 68290563;
        v23 = 0;
        v24 = 2082;
        v25 = "";
        v26 = 2050;
        v27 = v16;
        v28 = 1026;
        v29 = v17;
        v30 = 1026;
        v31 = v18;
        v32 = 1026;
        v33 = v19;
        v34 = 2049;
        v35 = v20;
        v36 = 2049;
        v37 = v21;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,tileHeaderFields\", \"creation_timestamp_s\":\"%{public}f\", \"tile_content_iod_number\":%{public}u, \"tile_format_version\":%{public}u, \"expiration_age_s\":%{public}u, \"tile_south_west_corner_latitude_deg\":\"%{private}f\", \"tile_south_west_corner_longitude_deg\":\"%{private}f\"}", (uint8_t *)&v22, 0x42u);
      }
    }
  }
}

uint64_t sub_10052DE48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  const char *v13;
  __int16 v14;
  std::string __p;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102141F50);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0)
      v6 = a2;
    else
      v6 = *(_QWORD *)a2;
    *(_DWORD *)buf = 68289282;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,readFirstProtobuf\", \"tileFile\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  memset(&__p, 0, sizeof(__p));
  if (!sub_10005DE60(a2, &__p))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102141F70);
    v8 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#RTTMA,CLRayTracingTileHeaderDecoder,error,failed to create/open protobuf input stream", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_24;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102141F70);
    v14 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,CLRayTracingTileHeaderDecoder,error,failed to create/open protobuf input stream", &v14, 2);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileHeaderDecoder::readFirstProtobuf(const std::string &, ::CLP::LogEntry::LogEntry &) const", "%s\n", v9);
    goto LABEL_31;
  }
  if ((wireless_diagnostics::google::protobuf::MessageLite::ParseFromString(a3, &__p) & 1) != 0)
  {
    v7 = 1;
    goto LABEL_25;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102141F70);
  v11 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#RTTMA,CLRayTracingTileHeaderDecoder,error,cannot ParseFromString()", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102141F70);
    v14 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#RTTMA,CLRayTracingTileHeaderDecoder,error,cannot ParseFromString()", &v14, 2);
    v10 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLRayTracingTileHeaderDecoder::readFirstProtobuf(const std::string &, ::CLP::LogEntry::LogEntry &) const", "%s\n", v13);
LABEL_31:
    if (v10 != buf)
      free(v10);
  }
LABEL_24:
  v7 = 0;
LABEL_25:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_10052E1DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052E200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  __int16 v12;
  const char *v13;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102141F50);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v11 = 68289026;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,decodeHeader\"}", (uint8_t *)&v11, 0x12u);
  }
  v6 = sub_100166054(&v11);
  v7 = sub_10052DE48((uint64_t)v6, a2, (uint64_t)&v11);
  if ((v7 & 1) != 0 && (v8 = sub_10052DB6C(v7, (uint64_t)&v11), (_DWORD)v8))
  {
    sub_10052DBC0(v8, (uint64_t)&v11, a3);
    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  sub_100166004(&v11);
  return v9;
}

void sub_10052E32C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10052E348(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  NSObject *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  uint64_t v19;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102141F50);
  v5 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v16 = 68289026;
    v17 = 2082;
    v18 = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLRayTracingTileHeaderDecoder,tileIod\"}", (uint8_t *)&v16, 0x12u);
  }
  v6 = sub_100166054(&v16);
  v7 = sub_10052DE48((uint64_t)v6, a2, (uint64_t)&v16);
  if ((v7 & 1) == 0 || !sub_10052DB6C(v7, (uint64_t)&v16))
    goto LABEL_14;
  v8 = v19;
  v9 = v19;
  if (!v19)
    v9 = *(_QWORD *)(qword_102313BA0 + 40);
  v10 = *(_QWORD *)(v9 + 344);
  if (!v10)
    v10 = *(_QWORD *)(qword_102310D28 + 344);
  v11 = *(_QWORD *)(v10 + 8);
  if (!v11)
    v11 = *(_QWORD *)(qword_102313F88 + 8);
  if ((*(_BYTE *)(v11 + 48) & 4) != 0)
  {
    if (!v19)
      v8 = *(_QWORD *)(qword_102313BA0 + 40);
    v14 = *(_QWORD *)(v8 + 344);
    if (!v14)
      v14 = *(_QWORD *)(qword_102310D28 + 344);
    v15 = *(_QWORD *)(v14 + 8);
    if (!v15)
      v15 = *(_QWORD *)(qword_102313F88 + 8);
    *a3 = *(_DWORD *)(v15 + 20);
    v12 = 1;
  }
  else
  {
LABEL_14:
    v12 = 0;
  }
  sub_100166004(&v16);
  return v12;
}

void sub_10052E508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100166004(&a9);
  _Unwind_Resume(a1);
}

void sub_10052E524(id a1)
{
  qword_1022A0048 = (uint64_t)os_log_create("com.apple.locationd.Position", "GeneralCLX");
}

void sub_10052E550(id a1)
{
  qword_1022A0028 = (uint64_t)os_log_create("com.apple.locationd.Position", "Position");
}

void sub_10052E57C(uint64_t a1, uint64_t a2, uint64_t a3, const __CFDictionary *a4)
{
  int v7;
  CFStringRef v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  __int128 *p_p;
  uint64_t v16;
  NSObject *v17;
  std::string *v18;
  __int128 *v19;
  NSObject *v20;
  uint64_t v21;
  const char *v22;
  char *v23;
  std::string *v24;
  const char *v25;
  char *v26;
  std::string v27;
  _QWORD v28[2];
  int v29;
  std::string *v30;
  __int128 __p;
  char v32;

  if (*(_BYTE *)(a2 + 32))
    v7 = 1;
  else
    v7 = sub_1001DFAE8();
  sub_1001E4804(&__p);
  v27.__r_.__value_.__s.__data_[0] = 0;
  v8 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsPowerLogEnabled", 0x8000100u, kCFAllocatorNull);
  v9 = sub_1001E48E4(__p, (uint64_t)v8, (BOOL *)&v27);
  CFRelease(v8);
  v10 = v27.__r_.__value_.__s.__data_[0];
  v11 = (std::__shared_weak_count *)*((_QWORD *)&__p + 1);
  if (*((_QWORD *)&__p + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&__p + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v9 ^ 1;
  if (v10)
    v14 = 1;
  if ((v7 & v14 & 1) != 0)
  {
    std::operator+<char>(&__p, "MiLo", a3);
    if (v32 >= 0)
      p_p = &__p;
    else
      p_p = (__int128 *)__p;
    sub_10019DFF0((uint64_t)a4, (uint64_t)p_p);
    if (v32 < 0)
      operator delete((void *)__p);
    sub_100119F3C(v28);
    sub_10052AA44(v28, a4);
    if (*(_BYTE *)(a2 + 32))
    {
      v16 = *(_QWORD *)(a2 + 24);
      if (!v16)
        sub_10025FD1C();
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v16 + 48))(v16, v28);
    }
    memset(&v27, 0, sizeof(v27));
    sub_10052ACB4((uint64_t)v28, &v27);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102141F90);
    v17 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      v18 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v18 = (std::string *)v27.__r_.__value_.__r.__words[0];
      LODWORD(__p) = 136380675;
      *(_QWORD *)((char *)&__p + 4) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "Wrote microlocation metrics to power log: %{private}s", (uint8_t *)&__p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&__p, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102141F90);
      v24 = &v27;
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v24 = (std::string *)v27.__r_.__value_.__r.__words[0];
      v29 = 136380675;
      v30 = v24;
      _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Wrote microlocation metrics to power log: %{private}s", &v29, 12);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationPowerLog::logMetrics(std::optional<ObserverPowerLogFunction>, std::string, NSDictionary *) const", "%s\n", v25);
      if (v26 != (char *)&__p)
        free(v26);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    v19 = (__int128 *)v28;
LABEL_38:
    sub_10011A5A8(v19);
    return;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102141F90);
  v20 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p) = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "PowerLog is not enabled so not writing microlocation metrics", (uint8_t *)&__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102141F90);
    LOWORD(v27.__r_.__value_.__l.__data_) = 0;
    _os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A00F8, 2, "PowerLog is not enabled so not writing microlocation metrics", &v27, 2);
    v23 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationPowerLog::logMetrics(std::optional<ObserverPowerLogFunction>, std::string, NSDictionary *) const", "%s\n", v22);
    if (v23 != (char *)&__p)
      free(v23);
  }
  if (*(_BYTE *)(a2 + 32))
  {
    sub_100119F3C(&__p);
    v21 = *(_QWORD *)(a2 + 24);
    if (!v21)
      sub_10025FD1C();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v21 + 48))(v21, &__p);
    v19 = &__p;
    goto LABEL_38;
  }
}

void sub_10052EA28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a16 < 0)
    operator delete(__p);
  sub_10011A5A8(&a18);
  _Unwind_Resume(a1);
}

void sub_10052EA98(id a1)
{
  qword_1022A00F8 = (uint64_t)os_log_create("com.apple.locationd.Position", "Microlocation");
}

void sub_10052EAC4(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  sub_100E8CB0C(a1, 1);
  *v3 = off_102141FC0;
  v3[8] = a2;
}

uint64_t sub_10052EB00(uint64_t a1, double a2)
{
  uint64_t result;
  double v3;

  v3 = a2;
  result = *(_QWORD *)(a1 + 64);
  if (result)
    return (*(uint64_t (**)(uint64_t, double *))(*(_QWORD *)result + 16))(result, &v3);
  return result;
}

BOOL sub_10052EB34(uint64_t a1, uint64_t a2)
{
  return *(double *)(a2 + 16) + *(double *)(a2 + 24) > 75.0 || sub_1011A1E48(a2);
}

_QWORD *sub_10052EB5C(_QWORD *a1)
{
  *a1 = off_102142018;
  sub_10047F660(a1 + 2);
  return a1;
}

void sub_10052EB90(_QWORD *a1)
{
  *a1 = off_102142018;
  sub_10047F660(a1 + 2);
  operator delete();
}

id sub_10052F1B0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "toggleProactiveVehicleDetection:", 0);
}

id sub_100530028(uint64_t a1, uint64_t a2, __int128 *a3, void *a4)
{
  __int128 v5;
  uint64_t v6;

  v5 = *a3;
  v6 = *((_QWORD *)a3 + 2);
  return objc_msgSend(a4, "providerOnVehicleStateNotification:", &v5);
}

id sub_10053005C(uint64_t a1, uint64_t a2, _BYTE *a3, void *a4)
{
  BOOL v4;

  if (a3[1])
    v4 = *a3 == 0;
  else
    v4 = 1;
  if (v4)
    return _objc_msgSend(a4, "providerFitnessTrackingNotification:", 0);
  else
    return _objc_msgSend(a4, "providerFitnessTrackingNotification:", 1);
}

void sub_10053097C(id a1)
{
  qword_10229FEE8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "DistributedSensing");
}

void sub_100530F50(id a1, BOOL a2, NSError *a3)
{
  NSObject *v3;
  double v4;
  uint8_t *v5;
  uint8_t *v6;
  NSObject *v8;
  double v9;
  uint8_t *v10;
  int v11;
  NSError *v12;
  uint8_t buf[4];
  NSError *v14;

  if (a2)
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102142078);
    v3 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Fall event successfully pushed to HKHealthStore", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102142078);
      LOWORD(v11) = 0;
      v4 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 0, "Fall event successfully pushed to HKHealthStore", &v11, 2);
      v6 = v5;
      sub_100512490("Generic", 1, 0, 2, "+[CLFallHealthKitManager recordFallEventInHealthKit:]_block_invoke", "%s\n", v4);
LABEL_19:
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_10229FD90 != -1)
      dispatch_once(&qword_10229FD90, &stru_102142078);
    v8 = qword_10229FD98;
    if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412290;
      v14 = a3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "HKHealthStore, saveObjects failed on, %@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD90 != -1)
        dispatch_once(&qword_10229FD90, &stru_102142078);
      v11 = 138412290;
      v12 = a3;
      v9 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD98, 16, "HKHealthStore, saveObjects failed on, %@", &v11, 12);
      v6 = v10;
      sub_100512490("Generic", 1, 0, 0, "+[CLFallHealthKitManager recordFallEventInHealthKit:]_block_invoke", "%s\n", v9);
      goto LABEL_19;
    }
  }
}

void sub_100531210(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

uint64_t sub_10053123C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  __int128 v33[3];
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t buf;
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;

  v10 = (std::__shared_weak_count *)a4[1];
  v38 = *a4;
  v39 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = (std::__shared_weak_count *)a5[1];
  v36 = *a5;
  v37 = v13;
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (std::__shared_weak_count *)a6[1];
  v34 = *a6;
  v35 = v16;
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v33[0] = xmmword_1023017B8;
  v33[1] = unk_1023017C8;
  v33[2] = xmmword_1023017D8;
  sub_100D04860(a1, a2, 13, &v38, &v36, &v34, a8, a7, v33);
  v19 = v35;
  if (v35)
  {
    v20 = (unint64_t *)&v35->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v37;
  if (v37)
  {
    v23 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = v39;
  if (v39)
  {
    v26 = (unint64_t *)&v39->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)a1 = off_1021420A8;
  *(_QWORD *)(a1 + 352) = *a3;
  v28 = a3[1];
  *(_QWORD *)(a1 + 360) = v28;
  if (v28)
  {
    v29 = (unint64_t *)(v28 + 8);
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
  }
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;
  *(_BYTE *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 392) = 0;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021421B0);
  v31 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289282;
    v41 = 2082;
    v42 = "";
    v43 = 2050;
    v44 = 13;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"construction\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}", (uint8_t *)&buf, 0x1Cu);
  }
  *(_QWORD *)(a1 + 368) = objc_msgSend(*(id *)(a1 + 72), "classifyingStoreForHarvesterWithSubArchiving:itemCountThresholdForAutoCleanUp:", 13, 500);
  return a1;
}

void sub_1005314DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  va_list va1;
  uint64_t v15;
  va_list va2;

  va_start(va2, a9);
  va_start(va1, a9);
  va_start(va, a9);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD);
  v15 = va_arg(va2, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t sub_10053151C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021420A8;

  sub_100261F44(a1 + 352);
  return sub_100429668(a1);
}

void sub_100531560(uint64_t a1)
{
  sub_10053151C(a1);
  operator delete();
}

uint64_t sub_100531588()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1023017F0);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1023017F0))
  {
    byte_1023017E8 = sub_100762268();
    __cxa_guard_release(&qword_1023017F0);
  }
  return byte_1023017E8;
}

void sub_1005315E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023017F0);
  _Unwind_Resume(a1);
}

uint64_t sub_1005315F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  NSObject *v6;
  void **v7;
  void *__p[2];
  char v10;
  _QWORD v11[2];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  void **v19;

  sub_100119F3C(v11);
  v4 = a1 + 280;
  v5 = unk_1023017C8;
  *(_OWORD *)v4 = xmmword_1023017B8;
  *(_OWORD *)(v4 + 16) = v5;
  *(_OWORD *)(v4 + 25) = unk_1023017D1;
  if (sub_100006BB4(a2, "Ionosphere", v11))
    sub_1011E7A6C(v4, (uint64_t)v11);
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021421B0);
  v6 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    sub_1011E7898((double *)v4, __p);
    if (v10 >= 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    *(_DWORD *)buf = 68289539;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = 13;
    v18 = 2081;
    v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"harvest-apply-rules\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"rules\":%{private, location:escape_only}s}", buf, 0x26u);
    if (v10 < 0)
      operator delete(__p[0]);
  }
  return sub_10011A5A8(v11);
}

void sub_10053177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_10053179C(uint64_t a1)
{
  id v2;
  NSArray *v3;
  id v4;
  id v5;
  uint64_t v6;
  void *i;
  void *v8;
  _QWORD v9[6];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  _BYTE v14[128];
  _QWORD v15[3];

  v2 = objc_alloc_init((Class)CLPIonosphereCollectionRequest);
  objc_msgSend(v2, "setMeta:", +[CLPMeta meta](CLPMeta, "meta"));
  v15[0] = objc_msgSend(*(id *)(a1 + 368), "homeArchive");
  v15[1] = objc_msgSend(*(id *)(a1 + 368), "workArchive");
  v15[2] = objc_msgSend(*(id *)(a1 + 368), "mainArchive");
  v3 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v15, 3);
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v4 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
  if (v4)
  {
    v5 = v4;
    v6 = *(_QWORD *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(_QWORD *)v11 != v6)
          objc_enumerationMutation(v3);
        v8 = *(void **)(*((_QWORD *)&v10 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v8, "overwritePrimaryObject:", v2);
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        v9[2] = sub_10053193C;
        v9[3] = &unk_102142178;
        v9[4] = v8;
        v9[5] = a1;
        objc_msgSend(v8, "iterateSubArchivesWithHandler:", v9);
      }
      v5 = -[NSArray countByEnumeratingWithState:objects:count:](v3, "countByEnumeratingWithState:objects:count:", &v10, v14, 16);
    }
    while (v5);
  }

}

id sub_10053193C(uint64_t a1, void *a2)
{
  uint64_t v4;
  id v5;
  CLHUploadRequest *v6;
  id result;

  v4 = *(_QWORD *)(a1 + 40);
  if (objc_msgSend(a2, "count"))
  {
    v5 = objc_msgSend(a2, "mappedDataByDestructivelyCombiningPrimaryAndSecondaryData");
    if (v5)
    {
      v6 = -[CLHUploadRequest initWithPayload:]([CLHUploadRequest alloc], "initWithPayload:", v5);
      -[CLHUploadRequest setEndpoint:](v6, "setEndpoint:", objc_msgSend(objc_msgSend(*(id *)(v4 + 80), "endpointSelector"), "ionosphereEndpoint"));
      objc_msgSend(*(id *)(v4 + 80), "submitRequest:", v6);

    }
  }
  result = objc_msgSend(a2, "count");
  if (!result)
    return _objc_msgSend(*(id *)(a1 + 32), "deleteSubArchiveIfInactive:", a2);
  return result;
}

uint64_t sub_1005319E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 24))(v2, v3, 2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 24))(v4, v5, 3);
  return 1;
}

uint64_t sub_100531A4C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 56);
  v3 = sub_100201404(a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v3, 2);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = sub_100201404(a1);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v5, 3);
}

id sub_100531AA8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 368), "count");
}

id sub_100531AB0(uint64_t a1)
{
  double v2;

  v2 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 56) + 64))(*(_QWORD *)(a1 + 56));
  return objc_msgSend(*(id *)(a1 + 368), "pruneSecondaryDataOlderThan:", v2 - (*(double (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1));
}

id sub_100531B00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 368), "eraseAllData");
}

void sub_100531B08(uint64_t a1, int a2, int a3, CLMotionActivity *this)
{
  int v6;
  NSObject *v7;
  uint64_t type;
  int v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  int v18;
  __int16 v19;
  int v20;

  if ((CLMotionActivity::isStatic(this) & 1) != 0)
    v6 = 0;
  else
    v6 = CLMotionActivity::isUnclassifiedMoving(this) ^ 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021421B0);
  v7 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    type = this->type;
    v9 = *(unsigned __int8 *)(a1 + 400);
    v10[0] = 68290051;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = 13;
    v15 = 2049;
    v16 = type;
    v17 = 1025;
    v18 = v9;
    v19 = 1025;
    v20 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Received motion state\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"data.activity.type\":%{private}lu, \"current fIsMoving\":%{private}hhd, \"new isMoving\":%{private}hhd}", (uint8_t *)v10, 0x32u);
  }
  *(_BYTE *)(a1 + 400) = v6;
}

void sub_100531C48(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  double v6;
  double v7;
  double v8;
  int *v9;
  uint64_t v10;
  double v11;
  int *v12;
  const char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint32_t v16;
  BOOL v17;
  double v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  double v25;
  double v26;
  uint64_t v29;
  NSArray *v30;
  id v31;
  id v32;
  uint64_t v33;
  void *v34;
  void *v35;
  id v36;
  int *v37;
  NSObject *v38;
  double v39;
  id v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _OWORD *v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  _OWORD v62[8];
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int16 v68;
  CNTimeSpan v69;
  int64x2_t v70;
  uint64_t v71;
  CNTimeSpan v72;
  int64x2_t v73;
  int64x2_t v74;
  int64x2_t v75;
  int64x2_t v76;
  int64x2_t v77;
  int64x2_t v78;
  int64x2_t v79;
  uint8_t buf[4];
  int v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  double v87;
  __int16 v88;
  double v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  uint64_t v109;
  __int16 v110;
  uint64_t v111;
  __int16 v112;
  double v113;
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  uint64_t v125;
  __int16 v126;
  uint64_t v127;
  _BYTE v128[128];
  _QWORD v129[3];
  int64x2_t v130;
  uint64_t v131;
  double v132[3];

  v6 = sub_1001FCBB4();
  v7 = *(double *)(a1 + 376);
  if (v7 != 0.0)
  {
    v8 = v6 - v7;
    v9 = sub_100FC2FAC();
    if (v8 < sub_100C3C620((uint64_t)v9))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021421B0);
      v10 = qword_1022A0208;
      if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(double *)(a1 + 376);
        v12 = sub_100FC2FAC();
        *(_DWORD *)buf = 68289795;
        v81 = 0;
        v82 = 2082;
        v83 = "";
        v84 = 2050;
        v85 = *(_QWORD *)&v6;
        v86 = 2049;
        v87 = v11;
        v88 = 2049;
        v89 = sub_100C3C620((uint64_t)v12);
        v13 = "{\"msg%{public}.0s\":\"Ionosphere Harvest: Skipping, required interval has not passed:\", \"Current\":\"%{"
              "public}f\", \"LastIonosphereCollection\":\"%{private}f\", \"CollectionInterval\":\"%{private}f\"}";
        v14 = v10;
        v15 = OS_LOG_TYPE_DEBUG;
        v16 = 48;
LABEL_62:
        _os_log_impl((void *)&_mh_execute_header, v14, v15, v13, buf, v16);
        return;
      }
      return;
    }
  }
  if (!*(_BYTE *)(a1 + 400))
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_1021421B0);
    v22 = qword_1022A0208;
    if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 68289282;
    v81 = 0;
    v82 = 2082;
    v83 = "";
    v84 = 2050;
    v85 = 13;
    v13 = "{\"msg%{public}.0s\":\"Skipping, motion state is static or unclassified moving.\", \"subHarvester\":%{public, "
          "location:CLSubHarvesterIdentifier}lld}";
    v14 = v22;
    v15 = OS_LOG_TYPE_DEBUG;
    goto LABEL_61;
  }
  v68 = 0;
  v69.var0 = 0;
  v69.var1 = 0.0;
  CNTimeSpan::SetTimeSpan(&v69, 0, 0.0);
  v60 = vdupq_n_s64(0x7FF8000000000000uLL);
  v70 = v60;
  v72.var0 = 0;
  v72.var1 = 0.0;
  v71 = 0x7FF8000000000000;
  CNTimeSpan::SetTimeSpan(&v72, 0, 0.0);
  v73 = v60;
  v74 = v60;
  v75 = v60;
  v76 = v60;
  v77 = v60;
  v78 = v60;
  v79 = v60;
  if ((*(unsigned int (**)(_QWORD, __int16 *))(**(_QWORD **)(a1 + 352) + 16))(*(_QWORD *)(a1 + 352), &v68))
    v17 = v68 == 0;
  else
    v17 = 1;
  if (v17 || HIBYTE(v68) == 0)
    return;
  v19 = v72.var1 + (double)v72.var0;
  if (v19 - *(double *)(a1 + 384) >= 1.0)
  {
    v130 = v70;
    v131 = v71;
    if (cnnavigation::ECEFToLLA(&v130, 1, v132))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021421B0);
      v23 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 68289282;
      v81 = 0;
      v82 = 2082;
      v83 = "";
      v84 = 2050;
      v85 = 13;
      v13 = "{\"msg%{public}.0s\":\"ECEF to LLA conversion failed.\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld}";
    }
    else
    {
      v24 = (id)objc_opt_new(CLPIonosphereData);
      objc_msgSend(v24, "setLatitudeDeg:", v132[0] * 57.2957795);
      objc_msgSend(v24, "setLongitudeDeg:", v132[1] * 57.2957795);
      objc_msgSend(v24, "setGeodeticAltitudeM:", v132[2]);
      v25 = v69.var1 + (double)v69.var0;
      v26 = fabs(v25);
      if ((unint64_t)(*(_QWORD *)&v26 - 0x10000000000000) >> 53 < 0x3FF
        || (unint64_t)(*(_QWORD *)&v26 - 1) < 0xFFFFFFFFFFFFFLL
        || COERCE__INT64(v69.var1 + (double)v69.var0) == 0)
      {
        v58 = a4;
        objc_msgSend(v24, "setEstimatorAgeSec:", v69.var1 + (double)v69.var0);
        objc_msgSend(v24, "setApplicableTimeSec:", v19);
        objc_msgSend(v24, "setHmaxKm:", *(double *)v73.i64);
        objc_msgSend(v24, "setVtec0:", *(double *)&v73.i64[1]);
        objc_msgSend(v24, "setD2vtecDphi2:", *(double *)v76.i64);
        objc_msgSend(v24, "setD2vtecDtheta2:", *(double *)v75.i64);
        objc_msgSend(v24, "setD2vtecDthetaphi:", *(double *)&v75.i64[1]);
        objc_msgSend(v24, "setDvtecDphi:", *(double *)&v74.i64[1]);
        objc_msgSend(v24, "setDvtecDtheta:", *(double *)v74.i64);
        objc_msgSend(v24, "setPhmaxHmaxKm2:", *(double *)&v76.i64[1]);
        objc_msgSend(v24, "setPvtec0Vtec0:", *(double *)v77.i64);
        objc_msgSend(v24, "setPdvtecDthetaDvtecDtheta:", *(double *)&v77.i64[1]);
        objc_msgSend(v24, "setPdvtecDphiDvtecDphi:", *(double *)v78.i64);
        objc_msgSend(v24, "setPd2vtecDtheta2D2vtecDtheta2:", *(double *)&v78.i64[1]);
        objc_msgSend(v24, "setPd2vtecDthetadphiD2vtecDthetadphi:", *(double *)v79.i64);
        v57 = v24;
        objc_msgSend(v24, "setPd2vtecDphi2D2vtecDphi2:", *(double *)&v79.i64[1]);
        v129[0] = objc_msgSend(*(id *)(a1 + 368), "homeArchive");
        v129[1] = objc_msgSend(*(id *)(a1 + 368), "workArchive");
        v29 = a1;
        v129[2] = objc_msgSend(*(id *)(a1 + 368), "mainArchive");
        v30 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v129, 3);
        v64 = 0u;
        v65 = 0u;
        v66 = 0u;
        v67 = 0u;
        v31 = -[NSArray countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v64, v128, 16);
        if (v31)
        {
          v32 = v31;
          v33 = *(_QWORD *)v65;
          do
          {
            v34 = 0;
            do
            {
              if (*(_QWORD *)v65 != v33)
                objc_enumerationMutation(v30);
              v35 = *(void **)(*((_QWORD *)&v64 + 1) + 8 * (_QWORD)v34);
              v36 = objc_msgSend(v35, "count");
              v37 = sub_100FC2FAC();
              if ((unint64_t)v36 >= sub_100217A98((unsigned int *)v37)
                || v36 && v25 < *(double *)(v29 + 392))
              {
                if (qword_1022A0200 != -1)
                  dispatch_once(&qword_1022A0200, &stru_1021421B0);
                v38 = qword_1022A0208;
                if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
                {
                  v39 = *(double *)(v29 + 392);
                  *(_DWORD *)buf = 68289794;
                  v81 = 0;
                  v82 = 2082;
                  v83 = "";
                  v84 = 2050;
                  v85 = (uint64_t)v36;
                  v86 = 2050;
                  v87 = v25;
                  v88 = 2050;
                  v89 = v39;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Ionosphere Harvest: rotating subarchive\", \"archiveCount\":%{public}lu, \"estimatorAgeSec\":\"%{public}f\", \"fLastEstimatorAgeSec\":\"%{public}f\"}", buf, 0x30u);
                }
                objc_msgSend(v35, "generateNewSubArchive");
              }
              v34 = (char *)v34 + 1;
            }
            while (v32 != v34);
            v32 = -[NSArray countByEnumeratingWithState:objects:count:](v30, "countByEnumeratingWithState:objects:count:", &v64, v128, 16);
          }
          while (v32);
        }
        v40 = objc_alloc((Class)CLPLocation);
        v41 = v58[7];
        v62[6] = v58[6];
        v62[7] = v41;
        v63[0] = v58[8];
        *(_OWORD *)((char *)v63 + 12) = *(_OWORD *)((char *)v58 + 140);
        v42 = v58[3];
        v62[2] = v58[2];
        v62[3] = v42;
        v43 = v58[5];
        v62[4] = v58[4];
        v62[5] = v43;
        v44 = v58[1];
        v62[0] = *v58;
        v62[1] = v44;
        objc_msgSend(*(id *)(v29 + 368), "writeSecondaryObject:collectedAt:toField:", v57, objc_msgSend(v40, "initWithDaemonLocation:", v62), 2);
        *(double *)(v29 + 376) = v6;
        *(double *)(v29 + 384) = v19;
        *(double *)(v29 + 392) = v25;
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_1021421B0);
        v45 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
        {
          v46 = v70;
          v47 = v71;
          v48 = v73;
          v50 = v75.i64[1];
          v49 = v76.i64[0];
          v51 = v75.i64[0];
          v59 = v74.i64[1];
          v61 = v74.i64[0];
          objc_msgSend(v57, "latitudeDeg");
          v53 = v52;
          objc_msgSend(v57, "longitudeDeg");
          v55 = v54;
          objc_msgSend(v57, "geodeticAltitudeM");
          *(_DWORD *)buf = 68294659;
          v81 = 0;
          v82 = 2082;
          v83 = "";
          v84 = 2049;
          v85 = *(_QWORD *)&v19;
          v86 = 2049;
          v87 = *(double *)v46.i64;
          v88 = 2049;
          v89 = *(double *)&v46.i64[1];
          v90 = 2049;
          v91 = v47;
          v92 = 2049;
          v93 = v48.i64[0];
          v94 = 2049;
          v95 = v48.i64[1];
          v96 = 2049;
          v97 = v49;
          v98 = 2049;
          v99 = v51;
          v100 = 2049;
          v101 = v50;
          v102 = 2049;
          v103 = v59;
          v104 = 2049;
          v105 = v61;
          v106 = 2049;
          v107 = v53;
          v108 = 2049;
          v109 = v55;
          v110 = 2049;
          v111 = v56;
          v112 = 2049;
          v113 = v25;
          v114 = 2049;
          v115 = v76.i64[1];
          v116 = 2049;
          v117 = v77.i64[0];
          v118 = 2049;
          v119 = v77.i64[1];
          v120 = 2049;
          v121 = v78.i64[0];
          v122 = 2049;
          v123 = v78.i64[1];
          v124 = 2049;
          v125 = v79.i64[0];
          v126 = 2049;
          v127 = v79.i64[1];
          v13 = "{\"msg%{public}.0s\":\"Harvested IonosphereParameters:\", \"applicable_time\":\"%{private}f\", \"applica"
                "ble_position_x_ecef_\":\"%{private}f\", \"applicable_position_y_ecef_\":\"%{private}f\", \"applicable_po"
                "sition_z_ecef_\":\"%{private}f\", \"hmax_\":\"%{private}f\", \"vtec0_\":\"%{private}f\", \"d2vtec_dphi2_"
                "\":\"%{private}f\", \"d2vtec_dtheta2_\":\"%{private}f\", \"d2vtec_dthetadphi_\":\"%{private}f\", \"dvtec"
                "_dphi_\":\"%{private}f\", \"dvtec_dtheta_\":\"%{private}f\", \"latitudeDeg\":\"%{private}f\", \"longitud"
                "eDeg\":\"%{private}f\", \"altitudeM\":\"%{private}f\", \"estimator_time_duration\":\"%{private}f\", \"ph"
                "max_hmax_\":\"%{private}f\", \"pvtec0_vtec0_\":\"%{private}f\", \"pdvtec_dtheta_dvtec_dtheta_\":\"%{priv"
                "ate}f\", \"pdvtec_dphi_dvtec_dphi_\":\"%{private}f\", \"pd2vtec_dtheta2_d2vtec_dtheta2_\":\"%{private}f\""
                ", \"pd2vtec_dthetadphi_d2vtec_dthetadphi_\":\"%{private}f\", \"pd2vtec_dphi2_d2vtec_dphi2_\":\"%{private}f\"}";
          v14 = v45;
          v15 = OS_LOG_TYPE_DEBUG;
          v16 = 238;
          goto LABEL_62;
        }
        return;
      }
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_1021421B0);
      v23 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        return;
      *(_DWORD *)buf = 68289282;
      v81 = 0;
      v82 = 2082;
      v83 = "";
      v84 = 2050;
      v85 = 13;
      v13 = "{\"msg%{public}.0s\":\"parameter_estimation_time_duration_ is not a valid value\", \"subHarvester\":%{public"
            ", location:CLSubHarvesterIdentifier}lld}";
    }
    v14 = v23;
    v15 = OS_LOG_TYPE_DEFAULT;
LABEL_61:
    v16 = 28;
    goto LABEL_62;
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_1021421B0);
  v20 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
  {
    v21 = *(double *)(a1 + 384);
    *(_DWORD *)buf = 68289539;
    v81 = 0;
    v82 = 2082;
    v83 = "";
    v84 = 2049;
    v85 = *(_QWORD *)&v19;
    v86 = 2049;
    v87 = v21;
    v13 = "{\"msg%{public}.0s\":\"Ionosphere Harvest: Already harvested at time:\", \"applicable_time\":\"%{private}f\", "
          "\"LastApplicableTimeHarvested\":\"%{private}f\"}";
    v14 = v20;
    v15 = OS_LOG_TYPE_DEFAULT;
    v16 = 38;
    goto LABEL_62;
  }
}

void sub_1005325D0(id a1)
{
  qword_1022A0208 = (uint64_t)os_log_create("com.apple.locationd.Core", "Harvester");
}

uint64_t sub_1005325FC()
{
  return sub_1011E780C((uint64_t)&xmmword_1023017B8, 1, 2, 2, 0, 0.0, 21600.0, 21600.0);
}

uint64_t sub_100532638(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10087DA44(a1, &off_1021421D0);
  sub_10087DA44(v2 + 64, &off_1021421D0);
  sub_10087DA44(a1 + 128, &off_1021421D0);
  sub_10087DA44(a1 + 192, &off_1021421D0);
  sub_10087DA44(a1 + 256, &off_1021421D0);
  *(_BYTE *)(a1 + 320) = 1;
  *(_QWORD *)(a1 + 336) = 0x25A00000000;
  *(_DWORD *)(a1 + 332) = 1031798784;
  *(_BYTE *)(a1 + 2752) = 1;
  *(_QWORD *)(a1 + 2768) = 0x25A00000000;
  *(_DWORD *)(a1 + 2764) = 1031798784;
  *(_BYTE *)(a1 + 5184) = 1;
  *(_QWORD *)(a1 + 5200) = 0x25A00000000;
  *(_BYTE *)(a1 + 7616) = 1;
  *(_DWORD *)(a1 + 5196) = 1031798784;
  *(_QWORD *)(a1 + 7632) = 0x25A00000000;
  *(_DWORD *)(a1 + 7628) = 1031798784;
  *(_OWORD *)(a1 + 10048) = 0u;
  return a1;
}

uint64_t sub_1005326EC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4, uint64_t a5)
{
  float v10;
  BOOL v11;
  float v12;
  float v13;
  float v14;
  int v15;
  uint64_t v17;
  float v18;
  float v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  float v24;
  int v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int16 v29[644];
  int v30[28];
  uint64_t v31;
  int v32[28];
  uint64_t v33;
  unsigned __int16 v34[1208];

  sub_100532914(a1, (float *)a2, a3);
  if (*(_QWORD *)(a1 + 10048) < 0x40uLL)
    return 0;
  v10 = *(float *)(a4 + 16);
  v11 = *(float *)(a4 + 24) > 30.0 && v10 == 0.0;
  v12 = v10 * 60.0;
  if (v11)
    v13 = 46.154;
  else
    v13 = v12;
  v14 = (float)(480.0 / v13) / 0.04;
  if (v13 <= 20.0)
    v14 = 600.0;
  v15 = (int)fmaxf(v14, 320.0);
  if (*(unsigned __int16 *)(a1 + 2770) < v15)
    return 0;
  *(_QWORD *)v34 = 0x25A00000000;
  sub_100532BD0((unsigned __int16 *)a1, a3, v34);
  v33 = 0;
  memset(v32, 0, sizeof(v32));
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  v28 = 0;
  sub_10053302C(a1, v15, v34, (uint64_t)v32, (uint64_t)v30, &v28, v13);
  v26 = 0;
  v27 = 0;
  if (v28 < 2)
  {
    v20 = 0;
    v18 = 0.0;
    v19 = 0.0;
  }
  else
  {
    v18 = sub_1005331C0(v13, v17, v32, v30, v28, &v27, &v26);
    v25 = 0;
    v19 = sub_10053332C(a1, v27, v26, v34, (float *)&v25);
    v20 = v25;
  }
  *(_QWORD *)v29 = 0x14000000000;
  sub_1005333A0(v17, v34, v29);
  v22 = v21;
  v24 = sub_10053347C(v23, v29);
  *(_DWORD *)(a5 + 20) = v20;
  *(float *)(a5 + 24) = v19;
  *(float *)(a5 + 12) = v24;
  *(float *)(a5 + 16) = v18;
  *(_DWORD *)(a5 + 8) = v22;
  *(_QWORD *)a5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 10048) = 0;
  return 1;
}

void sub_100532914(uint64_t a1, float *a2, int *a3)
{
  float v6;
  float v7;
  float v8;
  float v9;
  float v10;
  int v11;
  float v12;
  float v13;
  float v14;
  float v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  float v22;
  float v23;
  float v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  float v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  float v42[9];
  float v43[9];

  ++*(_QWORD *)(a1 + 10056);
  v6 = sub_10012C7A4(a2);
  v7 = a2[4];
  sub_100B61F44(a2, v43);
  v8 = sub_1011A2C08((uint64_t)v43);
  v10 = v9;
  v11 = *a3;
  LODWORD(a3) = a3[1];
  sub_100B61F44(a2, v42);
  sub_10053352C((uint64_t)v42, (uint64_t)v43);
  v12 = sub_1005335A4((uint64_t)v43, a2 + 4);
  v14 = v13;
  v15 = v7 + v6;
  if (v11 != (_DWORD)a3)
    v15 = -(float)(v7 + v6);
  sub_10087DA48((unsigned __int16 *)a1, v15);
  v17 = v16;
  sub_10087DA48((unsigned __int16 *)(a1 + 64), v12);
  v19 = v18;
  sub_10087DA48((unsigned __int16 *)(a1 + 128), v14);
  v21 = v20;
  sub_10087DA48((unsigned __int16 *)(a1 + 192), v8);
  v23 = v22;
  sub_10087DA48((unsigned __int16 *)(a1 + 256), v10);
  if (*(_QWORD *)(a1 + 10056) >= 4uLL)
  {
    v25 = *(unsigned __int16 *)(a1 + 338);
    v26 = *(unsigned int *)(a1 + 340);
    v27 = *(unsigned __int16 *)(a1 + 336);
    if (v27 + v25 >= v26)
      v28 = *(unsigned int *)(a1 + 340);
    else
      v28 = 0;
    *(_DWORD *)(a1 + 336 + 4 * (v27 + v25 - v28) + 8) = v17;
    if (v26 <= v25)
    {
      if (v27 + 1 < v26)
        LOWORD(v26) = 0;
      *(_WORD *)(a1 + 336) = v27 + 1 - v26;
    }
    else
    {
      *(_WORD *)(a1 + 338) = v25 + 1;
    }
    *(_BYTE *)(a1 + 320) = 1;
    v29 = *(unsigned __int16 *)(a1 + 2770);
    v30 = *(unsigned int *)(a1 + 2772);
    v31 = *(unsigned __int16 *)(a1 + 2768);
    if (v31 + v29 >= v30)
      v32 = *(unsigned int *)(a1 + 2772);
    else
      v32 = 0;
    *(_DWORD *)(a1 + 2768 + 4 * (v31 + v29 - v32) + 8) = v19;
    if (v30 <= v29)
    {
      if (v31 + 1 < v30)
        LOWORD(v30) = 0;
      *(_WORD *)(a1 + 2768) = v31 + 1 - v30;
    }
    else
    {
      *(_WORD *)(a1 + 2770) = v29 + 1;
    }
    *(_BYTE *)(a1 + 2752) = 1;
    v33 = *(unsigned __int16 *)(a1 + 5202);
    v34 = *(unsigned int *)(a1 + 5204);
    v35 = *(unsigned __int16 *)(a1 + 5200);
    if (v35 + v33 >= v34)
      v36 = *(unsigned int *)(a1 + 5204);
    else
      v36 = 0;
    *(_DWORD *)(a1 + 5200 + 4 * (v35 + v33 - v36) + 8) = v21;
    if (v34 <= v33)
    {
      if (v35 + 1 < v34)
        LOWORD(v34) = 0;
      *(_WORD *)(a1 + 5200) = v35 + 1 - v34;
    }
    else
    {
      *(_WORD *)(a1 + 5202) = v33 + 1;
    }
    *(_BYTE *)(a1 + 5184) = 1;
    v37 = atan2f(v24, v23);
    v38 = *(unsigned __int16 *)(a1 + 7634);
    v39 = *(unsigned int *)(a1 + 7636);
    v40 = *(unsigned __int16 *)(a1 + 7632);
    if (v40 + v38 >= v39)
      v41 = *(unsigned int *)(a1 + 7636);
    else
      v41 = 0;
    *(float *)(a1 + 7632 + 4 * (v40 + v38 - v41) + 8) = v37;
    if (v39 <= v38)
    {
      if (v40 + 1 < v39)
        LOWORD(v39) = 0;
      *(_WORD *)(a1 + 7632) = v40 + 1 - v39;
    }
    else
    {
      *(_WORD *)(a1 + 7634) = v38 + 1;
    }
    *(_BYTE *)(a1 + 7616) = 1;
    ++*(_QWORD *)(a1 + 10048);
    *(_QWORD *)(a1 + 10056) = 0;
  }
}

void sub_100532BD0(unsigned __int16 *a1, _DWORD *a2, unsigned __int16 *a3)
{
  float v6;
  unsigned int v7;
  __float2 v8;
  unint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  unsigned __int16 v13;
  float v14;
  float v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  float v19;
  float v20;
  unint64_t v21;
  uint64_t v22;
  __int16 v23;
  unint64_t v24;
  float v25;
  int v26;
  unint64_t v27;
  float v28;
  float v29;
  float v30;
  float v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  float v38;
  float v39;
  float v40;
  float v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unsigned __int16 v47[1208];
  char v48;
  int v49;
  unsigned __int16 v50[1208];

  v6 = sub_100533840((uint64_t)a1, a2);
  *(_QWORD *)v50 = 0x25A00000000;
  v49 = 1031798784;
  *(_QWORD *)v47 = 0x25A00000000;
  v7 = a1[1385];
  if (a1[2601] < v7)
    v7 = a1[2601];
  if (v7)
  {
    v8 = __sincosf_stret(v6);
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    do
    {
      v14 = *(float *)sub_1004784C4(a1 + 1384, v9);
      v15 = (float)(v8.__sinval * *(float *)sub_1004784C4(a1 + 2600, v9)) + (float)(v8.__cosval * v14);
      v16 = v12 + (unint64_t)v11;
      if (v16 >= 0x25A)
        v17 = -602;
      else
        v17 = 0;
      *(float *)&v50[2 * v17 + 4 + 2 * v16] = v15;
      if (v11 > 0x259u)
      {
        if (v12 >= 0x259u)
          v18 = -602;
        else
          v18 = 0;
        v12 += v18 + 1;
      }
      else
      {
        ++v11;
      }
      v19 = *(float *)sub_1004784C4(a1 + 1384, v9);
      v20 = (float)(v8.__cosval * *(float *)sub_1004784C4(a1 + 2600, v9)) + (float)((float)-v8.__sinval * v19);
      v21 = v13 + (unint64_t)v10;
      if (v21 >= 0x25A)
        v22 = -602;
      else
        v22 = 0;
      *(float *)&v47[2 * v22 + 4 + 2 * v21] = v20;
      if (v10 > 0x259u)
      {
        if (v13 >= 0x259u)
          v23 = -602;
        else
          v23 = 0;
        v13 += v23 + 1;
      }
      else
      {
        ++v10;
      }
      ++v9;
      if (a1[2601] >= a1[1385])
        v24 = a1[1385];
      else
        v24 = a1[2601];
    }
    while (v9 < v24);
    v50[1] = v11;
    v47[1] = v10;
  }
  else
  {
    v10 = 0;
    v11 = 0;
    v13 = 0;
    v12 = 0;
  }
  v50[0] = v12;
  v48 = 1;
  v47[0] = v13;
  if (a2[1] == 1)
    v25 = 1.0;
  else
    v25 = -1.0;
  v26 = v11;
  if (v10 < v11)
    v26 = v10;
  if (*a2 == 1)
  {
    if (v26)
    {
      v27 = 0;
      do
      {
        v28 = *(float *)sub_1004784C4(v50, v27);
        v29 = *(float *)sub_1004784C4(v47, v27);
        v30 = *(float *)sub_1004784C4(v47, v27);
        v31 = sqrt(v28 * v28 + v29 * v29) * (float)((float)(v25 * v30) / fabsf(*(float *)sub_1004784C4(v47, v27)));
        v32 = a3[1];
        v33 = *((unsigned int *)a3 + 1);
        v34 = *a3;
        if (v34 + v32 >= v33)
          v35 = *((unsigned int *)a3 + 1);
        else
          v35 = 0;
        *(float *)&a3[2 * (v34 + v32 - v35) + 4] = v31;
        if (v33 <= v32)
        {
          if (v34 + 1 < v33)
            LOWORD(v33) = 0;
          *a3 = v34 + 1 - v33;
        }
        else
        {
          a3[1] = v32 + 1;
        }
        ++v27;
        if (v47[1] >= v50[1])
          v36 = v50[1];
        else
          v36 = v47[1];
      }
      while (v27 < v36);
    }
  }
  else if (v26)
  {
    v37 = 0;
    do
    {
      v38 = *(float *)sub_1004784C4(v50, v37);
      v39 = *(float *)sub_1004784C4(v47, v37);
      v40 = *(float *)sub_1004784C4(v50, v37);
      v41 = sqrt(v38 * v38 + v39 * v39) * (float)((float)(v25 * v40) / fabsf(*(float *)sub_1004784C4(v50, v37)));
      v42 = a3[1];
      v43 = *((unsigned int *)a3 + 1);
      v44 = *a3;
      if (v44 + v42 >= v43)
        v45 = *((unsigned int *)a3 + 1);
      else
        v45 = 0;
      *(float *)&a3[2 * (v44 + v42 - v45) + 4] = v41;
      if (v43 <= v42)
      {
        if (v44 + 1 < v43)
          LOWORD(v43) = 0;
        *a3 = v44 + 1 - v43;
      }
      else
      {
        a3[1] = v42 + 1;
      }
      ++v37;
      if (v47[1] >= v50[1])
        v46 = v50[1];
      else
        v46 = v47[1];
    }
    while (v37 < v46);
  }
}

void sub_10053302C(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5, _QWORD *a6, float a7)
{
  float v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _OWORD v19[7];
  uint64_t v20;
  _OWORD v21[7];
  uint64_t v22;

  if (a7 >= 46.0)
  {
    v11 = 0.28571;
  }
  else if (a7 <= 12.0)
  {
    v11 = 1.4286;
  }
  else
  {
    v11 = (float)(60.0 / a7) / 3.5;
  }
  v17 = 0;
  v18 = 0;
  v22 = 0;
  memset(v21, 0, sizeof(v21));
  v20 = 0;
  memset(v19, 0, sizeof(v19));
  v12 = sub_100533AC4(a1, a2, (uint64_t)v21, (uint64_t)v19, &v18, &v17, v11);
  v13 = v18;
  sub_100533CB4(0.08, v12, (uint64_t)v21, v18, a3, 1);
  v14 = v17;
  sub_100533CB4(0.08, v15, (uint64_t)v19, v17, a3, 0);
  sub_100533DC4((float)((float)(v11 * 3.5) * 0.7) / 5.0, (float)((float)(v11 * 3.5) * 0.75) * 0.5, v16, v21, (uint64_t)v19, v13, v14, a4, a5, a6);
}

float sub_1005331C0(float a1, uint64_t a2, int *a3, int *a4, unint64_t a5, _QWORD *a6, _QWORD *a7)
{
  float v7;
  char v8;
  uint64_t v9;
  int *v10;
  int v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  uint64_t v16;
  float v17;
  float v18;
  float v19;
  int v20;
  int v21;
  float v22;
  float v23;
  BOOL v24;
  int v25;
  int v26;
  float v27;
  float v28;
  float v29;
  float v30;

  v7 = 0.0;
  if (a5 < 2)
    return v7;
  v8 = 0;
  v9 = 30;
  if (a5 < 0x1E)
    v9 = a5;
  v12 = *a3;
  v10 = a3 + 1;
  v11 = v12;
  v15 = *a4;
  v13 = a4 + 1;
  v14 = v15;
  v16 = v9 - 1;
  v17 = 3.4028e38;
  v18 = 3.4028e38;
  v19 = 3.4028e38;
  do
  {
    v20 = v14;
    v21 = *v13++;
    v14 = v21;
    v22 = (double)(v21 - v20) * 0.04;
    v23 = 60.0 / v22;
    if (a1 >= 46.154)
      v24 = v23 > 34.615;
    else
      v24 = fabsf((float)(v23 - a1) / a1) < 0.25;
    v26 = *v10++;
    v25 = v26;
    v27 = (double)(v26 - v11) * 0.04;
    v28 = vabds_f32(v27, v22);
    if (v28 >= v19)
      v24 = 0;
    v29 = v28;
    if (v24)
      goto LABEL_11;
    if ((v8 & 1) != 0)
    {
      v8 = 1;
    }
    else
    {
      if (v28 < v18)
      {
        v29 = v19;
LABEL_11:
        *a6 = v11;
        *a7 = v25;
        v19 = v29;
        v8 = v24;
        v17 = v22;
        goto LABEL_18;
      }
      v8 = 0;
    }
    v28 = v18;
LABEL_18:
    v11 = v25;
    v18 = v28;
    --v16;
  }
  while (v16);
  v30 = 60.0 / v17;
  if (a1 >= 46.0 || vabds_f32(v30, a1) < (float)(a1 * 0.25))
    a1 = fminf(v30, 120.0);
  v7 = 0.0;
  if (a1 >= 0.0)
    return a1;
  return v7;
}

float sub_10053332C(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 *a4, float *a5)
{
  int v8;
  uint64_t v9;
  float v10;
  float result;
  unint64_t v12;

  v12 = 0;
  sub_100534400(a1, a2, a3, a4, &v12);
  *(_DWORD *)a5 = v8;
  sub_1005346C0(v9, a2, a4, v12);
  result = *a5 / v10;
  if (result > 5.0)
    result = 5.0;
  if (result < 0.0)
    return 0.0;
  return result;
}

void sub_1005333A0(uint64_t a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v7;
  float v8;
  float v9;
  float *v10;
  float *v11;
  int v12;

  v3 = a2[1];
  v4 = v3 - 320;
  if (v3 >= 0x140)
  {
    v7 = 0;
    v8 = -3.4028e38;
    v9 = 3.4028e38;
    do
    {
      v10 = (float *)sub_1004784C4(a2, v4 + v7);
      if (v8 < *v10)
        v8 = *v10;
      v11 = (float *)sub_1004784C4(a2, v4 + v7);
      if (*v11 < v9)
        v9 = *v11;
      v12 = *(_DWORD *)sub_1004784C4(a2, v4 + v7);
      *(_DWORD *)sub_1004784C4(a3, v7++) = v12;
    }
    while (v7 != 320);
  }
}

float sub_10053347C(uint64_t a1, unsigned __int16 *a2)
{
  float v3;
  float v4;
  int v5;
  _BYTE v7[2200];
  _DWORD v8[128];

  sub_1014022D8(v7);
  sub_1014022DC((uint64_t)v7, v8, a2);
  v3 = sub_100D043B4(25, 0x80uLL, 0.1);
  LODWORD(a2) = sub_100D041E0(v3);
  v4 = sub_100D043B4(25, 0x80uLL, 10.0);
  v5 = sub_100D041E0(v4);
  return sqrtf(fabsf(sub_100D04400((int)a2, v5, (uint64_t)v8)));
}

float *sub_10053352C(uint64_t a1, uint64_t a2)
{
  unint64_t i;
  unint64_t j;
  float v6;
  float *result;

  for (i = 0; i != 3; ++i)
  {
    for (j = 0; j != 3; ++j)
    {
      v6 = sub_100534784(a1, i, j);
      result = (float *)sub_100534AE0(a2, j, i);
      *result = v6;
    }
  }
  return result;
}

float sub_1005335A4(uint64_t a1, float *a2)
{
  unint64_t i;
  float v5;
  unint64_t j;
  float v7;
  float v8;
  float *v9;
  float v11;

  for (i = 0; i != 3; ++i)
  {
    v5 = sub_100534784(a1, i, 0) * *a2;
    *(float *)sub_100534E68((uint64_t)&v11, i) = v5;
    for (j = 1; j != 3; ++j)
    {
      v7 = sub_100534784(a1, i, j);
      v8 = sub_100533668((uint64_t)a2, j);
      v9 = (float *)sub_100534E68((uint64_t)&v11, i);
      *v9 = *v9 + (float)(v7 * v8);
    }
  }
  return v11;
}

float sub_100533668(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 271,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T CMVector<float, 3>::operator[](const size_t) const [T = float, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return *(float *)(a1 + 4 * a2);
}

float sub_100533840(uint64_t a1, _DWORD *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  float v11;
  unsigned __int16 *v12;
  double v13;
  float *v14;
  float v15;
  float v16;
  double v17;
  double v18;
  _OWORD v20[80];
  float __dst[320];

  if (*(unsigned __int16 *)(a1 + 7634) <= 0x140u)
    v4 = 320;
  else
    v4 = *(unsigned __int16 *)(a1 + 7634);
  v5 = (v4 - 320);
  if (v5 >= *(unsigned __int16 *)(a1 + 7634))
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    v8 = (v4 - 320);
    do
    {
      if (*(float *)sub_1004784C4((unsigned __int16 *)(a1 + 7632), v8) >= 1.57079633)
      {
        ++v7;
      }
      else if (*(float *)sub_1004784C4((unsigned __int16 *)(a1 + 7632), v8) <= -1.57079633)
      {
        ++v6;
      }
      ++v8;
    }
    while (v8 < *(unsigned __int16 *)(a1 + 7634));
  }
  v9 = 0;
  v10 = v6 <= 0 || v7 <= 0;
  memset(&v20[30], 0, 32);
  if (v10)
    v11 = 0.0;
  else
    v11 = 6.2832;
  memset(v20, 0, 480);
  v12 = (unsigned __int16 *)(a1 + 7632);
  do
  {
    v13 = *(float *)sub_1004784C4(v12, v5 + v9);
    v14 = (float *)sub_1004784C4(v12, v5 + v9);
    if (v13 <= -1.57079633)
      v15 = v11;
    else
      v15 = -0.0;
    *((float *)v20 + v9++) = *v14 + v15;
  }
  while (v9 != 320);
  memcpy(__dst, v20, sizeof(__dst));
  sub_100A409B0((char *)__dst, 4uLL, 0x140uLL, (uint64_t (*)(char *, char *))sub_100533AB0);
  v16 = dbl_101BB58B0[*a2 == 1] + __dst[159];
  v17 = v16;
  if (v16 > 3.14159265)
  {
    v18 = -6.28318531;
LABEL_29:
    v16 = v17 + v18;
    return v16 + 0.0;
  }
  if (v17 < -3.14159265)
  {
    v18 = 6.28318531;
    goto LABEL_29;
  }
  return v16 + 0.0;
}

BOOL sub_100533AB0(float *a1, float *a2)
{
  return *a1 > *a2;
}

unint64_t sub_100533AC4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unint64_t *a5, unint64_t *a6, float a7)
{
  unint64_t result;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  float *v19;
  float v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  float *v25;
  float v26;
  unint64_t v27;
  int v29;
  int v30;
  _OWORD v31[7];
  uint64_t v32;
  _BYTE v33[112];
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v29 = 30;
  v30 = 30;
  v34 = 0;
  memset(v33, 0, sizeof(v33));
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  result = sub_100533E9C(a1, a2, &v30, &v29, (uint64_t)v33, (uint64_t)v31);
  v15 = a1 + 320;
  v16 = (*(unsigned __int16 *)(a1 + 338) - a2) & ~((*(unsigned __int16 *)(a1 + 338) - a2) >> 31);
  if (v30 >= 1)
  {
    if (v30 >= 30)
      v17 = 30;
    else
      v17 = v30;
    v18 = v17 - 1;
    v19 = (float *)v33;
    do
    {
      v20 = *v19++;
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v21 = sub_10053406C(-1.0, v20, result, v16, 2, v15, (uint64_t)&v35);
      result = sub_1005342A8(a7, -1.0, v21, a3, v15, (int *)&v35, v21);
      *a5 = result;
    }
    while (result <= 5 && v18-- != 0);
  }
  if (v29 >= 1)
  {
    if (v29 >= 30)
      v23 = 30;
    else
      v23 = v29;
    v24 = v23 - 1;
    v25 = (float *)v31;
    do
    {
      v26 = *v25++;
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      v38 = 0u;
      v39 = 0u;
      v36 = 0u;
      v37 = 0u;
      v35 = 0u;
      v27 = sub_10053406C(1.0, v26, result, v16, 2, v15, (uint64_t)&v35);
      result = sub_1005342A8(a7, 1.0, v27, a4, v15, (int *)&v35, v27);
      *a6 = result;
    }
    while (result <= 5 && v24-- != 0);
  }
  return result;
}

void sub_100533CB4(float a1, uint64_t a2, uint64_t a3, unint64_t a4, unsigned __int16 *a5, int a6)
{
  float v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  float *v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  float v19;

  if (a6)
    v6 = -1.0;
  else
    v6 = 1.0;
  if (a4 >= 0x1E)
    v7 = 30;
  else
    v7 = a4;
  if (v7)
  {
    v10 = 0;
    v11 = vcvtmd_s64_f64(a1 / 0.04);
    do
    {
      v12 = *(unsigned int *)(a3 + 4 * v10);
      if ((int)v12 >= 1 && v12 < a5[1])
      {
        v14 = (float *)sub_1004784C4(a5, v12);
        v15 = *(_DWORD *)(a3 + 4 * v10);
        v16 = (v15 - v11) & ~((int)(v15 - v11) >> 31);
        v17 = v11 + 1 + v15;
        v18 = v17 >= a5[1] ? a5[1] : v17;
        if ((int)v16 < (int)v18)
        {
          v19 = v6 * *v14;
          do
          {
            if ((float)(v6 * *(float *)sub_1004784C4(a5, v16)) > v19)
            {
              v19 = v6 * *(float *)sub_1004784C4(a5, v16);
              *(_DWORD *)(a3 + 4 * v10) = v16;
            }
            ++v16;
          }
          while (v18 != v16);
        }
      }
      ++v10;
    }
    while (v10 != v7);
  }
}

void sub_100533DC4(float a1, float a2, uint64_t a3, _DWORD *a4, uint64_t a5, unint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  uint64_t v10;
  unint64_t v11;
  signed int v12;
  signed int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  signed int v22;

  if (a6 && a7)
  {
    v10 = 0;
    v11 = 0;
    v12 = vcvtmd_s64_f64(a1 / 0.04);
    v13 = vcvtmd_s64_f64(a2 / 0.04);
    v14 = a7 - 1;
    if (a7 - 1 >= 0x1D)
      v14 = 29;
    v15 = 30;
    if (a6 >= 0x1E)
      v16 = 30;
    else
      v16 = a6;
    v17 = *a4 - v13;
    if (a7 < 0x1E)
      v15 = a7;
    v18 = -1;
    do
    {
      v19 = a4[v10];
      if (*(_DWORD *)(a5 + 4 * v14) <= v19)
        break;
      if (v19 - v17 >= v13)
      {
        v20 = v18;
        while (1)
        {
          v21 = v20 + 1;
          if (v20 + 1 >= v15)
            break;
          v22 = *(_DWORD *)(a5 + 4 * v20++ + 4) - v19;
          if (v22 >= v12)
          {
            *(_DWORD *)(a8 + 4 * v11) = v19;
            *(_DWORD *)(a9 + 4 * v11) = *(_DWORD *)(a5 + 4 * v21);
            v17 = *(_DWORD *)(a5 + 4 * v21);
            *a10 = ++v11;
            v18 = v21;
            break;
          }
        }
      }
      if (++v10 >= v16)
        break;
    }
    while (v11 < 0x1E);
  }
}

uint64_t sub_100533E9C(uint64_t result, int a2, int *a3, _DWORD *a4, uint64_t a5, uint64_t a6)
{
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t i;
  float v24;
  uint64_t v25;
  float v26;

  v10 = *(unsigned __int16 *)(result + 338);
  v11 = (v10 - a2) & ~((int)(v10 - a2) >> 31);
  if (v11 >= v10)
  {
    v15 = 3.4028e38;
    v17 = -3.4028e38;
  }
  else
  {
    v12 = result;
    v13 = (unsigned __int16 *)(result + 336);
    v14 = -3.4028e38;
    v15 = 3.4028e38;
    do
    {
      v16 = (float *)sub_1004784C4(v13, v11);
      if (v14 < *v16)
        v14 = *v16;
      result = sub_1004784C4(v13, v11);
      if (*(float *)result < v15)
        v15 = *(float *)result;
      ++v11;
    }
    while (v11 < *(unsigned __int16 *)(v12 + 338));
    v17 = v14 + -1.0;
  }
  v18 = -1.0 - v15;
  if ((float)(-1.0 - v15) < 0.4)
    v18 = 0.4;
  if (v18 < 0.9)
    v18 = 0.9;
  if (v17 < 0.5)
    v17 = 0.5;
  if (v17 < 0.9)
    v17 = 0.9;
  v19 = vcvtpd_s64_f64((v18 + 0.7) / 0.1);
  if (v19 >= 30)
    v19 = 30;
  *a3 = v19;
  v20 = vcvtpd_s64_f64((v17 + 0.1) / 0.1);
  if (v20 >= 30)
    LODWORD(v21) = 30;
  else
    LODWORD(v21) = v20;
  *a4 = v21;
  v22 = *a3;
  if ((int)v22 >= 1)
  {
    for (i = 0; i != v22; ++i)
    {
      v24 = v18;
      if (i)
        v24 = *(float *)(a5 + 4 * (i - 1)) + -0.1;
      *(float *)(a5 + 4 * i) = v24;
    }
  }
  if (v20 >= 1)
  {
    v25 = 0;
    if ((int)v21 <= 1)
      v21 = 1;
    else
      v21 = v21;
    do
    {
      v26 = v17;
      if (v25)
        v26 = *(float *)(a6 + 4 * (v25 - 1)) + -0.1;
      *(float *)(a6 + 4 * v25++) = v26;
    }
    while (v21 != v25);
  }
  return result;
}

unint64_t sub_10053406C(float a1, float a2, uint64_t a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  unint64_t v10;
  int v11;
  double v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unsigned __int16 *v17;
  signed int v18;
  unint64_t v19;
  signed int v20;
  unint64_t v21;
  unsigned int v22;
  int v23;
  float v24;
  signed int v25;
  unint64_t v26;
  int v27;
  unsigned int v28;
  int v29;
  float v30;
  int v31;
  int v34;
  int v35;
  int v36;
  unint64_t v37;

  v10 = 0;
  if (a5 >= 0)
    v11 = a5;
  else
    v11 = a5 + 1;
  v12 = (double)(v11 >> 1);
  if (v12 < 1.0)
    v12 = 1.0;
  v13 = (int)v12;
  v14 = a4 & ~(a4 >> 31);
  if ((int)v12 <= 1)
    v15 = 1;
  else
    v15 = (int)v12;
  v16 = v15 + 1;
  v17 = (unsigned __int16 *)(a6 + 16);
  v34 = 2 * v13;
  v35 = v15;
  v36 = (int)v12;
  do
  {
    v18 = *(unsigned __int16 *)(a6 + 18);
    if (v14 >= v18 - v16)
      break;
    v19 = v14 & ~(v14 >> 31);
    if (v19 < v18)
    {
      while ((float)(*(float *)sub_1004784C4(v17, v19) * a1) <= a2)
      {
        if (++v19 >= *(unsigned __int16 *)(a6 + 18))
          goto LABEL_16;
      }
      v18 = v19;
    }
LABEL_16:
    v14 = v18 + 1;
    if (v18 >= v15)
    {
      v20 = *(unsigned __int16 *)(a6 + 18);
      if (v18 < v20 - v16)
      {
        v21 = (v18 - v13) & ~((v18 - v13) >> 31);
        if (v18 >= v20)
          v22 = *(unsigned __int16 *)(a6 + 18);
        else
          v22 = v18;
        if (v21 >= v22)
        {
          v23 = 0;
        }
        else
        {
          v23 = 0;
          do
          {
            v24 = *(float *)sub_1004784C4(v17, v18);
            if ((float)((float)(a1 * v24) - (float)(*(float *)sub_1004784C4(v17, v21) * a1)) > 0.0)
              ++v23;
            ++v21;
            v20 = *(unsigned __int16 *)(a6 + 18);
            if (v18 >= v20)
              v25 = *(unsigned __int16 *)(a6 + 18);
            else
              v25 = v18;
          }
          while (v21 < v25);
        }
        v37 = v10;
        v26 = v14 & ~(v14 >> 31);
        v27 = v18 + v13;
        v28 = v20 - 1;
        if ((int)v28 >= v27)
          v28 = v27;
        if (v26 <= v28)
        {
          v29 = 0;
          do
          {
            v30 = *(float *)sub_1004784C4(v17, v18);
            if ((float)((float)(a1 * v30) - (float)(*(float *)sub_1004784C4(v17, v26) * a1)) > 0.0)
              ++v29;
            ++v26;
            v31 = *(unsigned __int16 *)(a6 + 18) - 1;
            if (v31 >= v27)
              v31 = v27;
          }
          while (v26 <= v31);
        }
        else
        {
          v29 = 0;
        }
        if (v29 + v23 >= v34)
        {
          *(_DWORD *)(a7 + 4 * v37) = v18;
          v14 = v27 + 1;
          v10 = v37 + 1;
        }
        else
        {
          v10 = v37;
        }
        v15 = v35;
        v13 = v36;
      }
    }
  }
  while (v10 < 0x1E);
  return v10;
}

uint64_t sub_1005342A8(float a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, int *a6, int a7)
{
  uint64_t v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned __int16 *v16;
  unint64_t v17;
  float v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  int v25;

  if (a7 < 1)
    return 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = vcvtmd_s64_f64(a1 / 0.04);
  if (a7 >= 30)
    v15 = 30;
  else
    v15 = a7;
  v16 = (unsigned __int16 *)(a5 + 16);
  do
  {
    v17 = a6[v11];
    if ((int)v17 > v12 && (int)v17 >= 1 && v17 < *(unsigned __int16 *)(a5 + 18))
    {
      v20 = *(float *)sub_1004784C4(v16, v17) * a2;
      *(_DWORD *)(a4 + 4 * v13) = a6[v11];
      v21 = a6;
      v22 = v15;
      do
      {
        v23 = *v21;
        v24 = a6[v11];
        if ((int)v23 >= (int)((v24 - v14) & ~((int)(v24 - v14) >> 31)))
        {
          v25 = v24 + v14;
          if (*(unsigned __int16 *)(a5 + 18) - 1 < v25)
            v25 = *(unsigned __int16 *)(a5 + 18) - 1;
          if ((int)v23 <= v25 && (float)(*(float *)sub_1004784C4(v16, v23) * a2) > v20)
          {
            v20 = *(float *)sub_1004784C4(v16, *v21) * a2;
            *(_DWORD *)(a4 + 4 * v13) = *v21;
          }
        }
        ++v21;
        --v22;
      }
      while (v22);
      v12 = a6[v11] + v14;
      ++v13;
    }
    ++v11;
  }
  while (v11 != v15);
  return v13;
}

void sub_100534400(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 *a4, _QWORD *a5)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v10;
  uint64_t v11;
  float *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t v16;
  double v17;
  double v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  float v28;
  float v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  double v34;
  float v35;
  uint64_t v36;
  double v37;
  char *v38;
  uint64_t v39;
  float v40;
  float v41;
  float v42;
  float v43;
  float v44;
  float v45;
  uint64_t v46;

  v5 = a4[1] - 1;
  if (v5 >= a3)
    v5 = a3;
  v6 = v5 - a2;
  if (v5 > a2)
  {
    v10 = v6 + 1;
    v11 = 4 * (v6 + 1);
    __chkstk_darwin(a1);
    v14 = (char *)&v46 - v13;
    if ((v15 & 1) == 0)
    {
      v16 = 0;
      do
      {
        if (v16)
        {
          v17 = *(float *)&v14[4 * v16 - 4];
          v12 = (float *)sub_1004784C4(a4, a2 + v16);
          v18 = v17 + *v12 * 0.04 * 9.81000042;
        }
        else
        {
          v18 = 0.0;
        }
        v19 = v18;
        *(float *)&v14[4 * v16++] = v19;
      }
      while (v10 != v16);
      __chkstk_darwin(v12);
      v23 = __chkstk_darwin(v20);
      v26 = (char *)&v46 - v25;
      if (v6 != -1)
      {
        v27 = 0;
        v28 = (float)(*(float *)&v23 - v24) / (float)v6;
        do
        {
          if (v27)
            v29 = v28 + *(float *)(v22 + 4 * v27 - 4);
          else
            v29 = 0.0;
          *(float *)(v22 + 4 * v27) = v29;
          *(float *)&v26[4 * v27] = *(float *)&v14[4 * v27] - v29;
          ++v27;
        }
        while (v10 != v27);
        __chkstk_darwin(v21);
        v32 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v33 = 0;
        do
        {
          if (v33)
            v34 = *(float *)&v32[4 * v33 - 4] + *(float *)(v31 + 4 * v33) * 0.04;
          else
            v34 = 0.0;
          v35 = v34;
          *(float *)&v32[4 * v33++] = v35;
        }
        while (v10 != v33);
        v37 = __chkstk_darwin(v30);
        v38 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
        v39 = 0;
        v42 = 0.0;
        v43 = (float)(v40 - v41) / *(float *)&v37;
        do
        {
          v44 = 0.0;
          if (v39)
            v44 = v43 + *(float *)&v38[4 * v39 - 4];
          *(float *)&v38[4 * v39] = v44;
          v45 = vabds_f32(*(float *)(v36 + 4 * v39), v44);
          if (v42 < v45)
          {
            *a5 = v39;
            v42 = v45;
          }
          ++v39;
        }
        while (v10 != v39);
      }
    }
  }
}

void sub_1005346C0(uint64_t a1, uint64_t a2, unsigned __int16 *a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v8;
  float v9;
  float v10;
  unint64_t v11;

  v4 = a3[1] - a2;
  if (v4 >= a4)
    v4 = a4;
  if (v4)
  {
    v8 = 0;
    v9 = 0.0;
    do
    {
      if (fabsf(*(float *)sub_1004784C4(a3, a2 + v8)) < 0.8)
      {
        v10 = v9 + 0.04;
        v9 = v10;
      }
      ++v8;
      v11 = a3[1] - a2;
      if (v11 >= a4)
        v11 = a4;
    }
    while (v8 < v11);
  }
}

float sub_100534784(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 70,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 3;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 71,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T CMMatrix<float, 3>::operator()(size_t, size_t) const [T = float, M = 3, N = 3]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return *(float *)(a1 + 4 * (3 * a3 + a2));
}

uint64_t sub_100534AE0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  __int16 v16;
  uint64_t v17;
  uint8_t buf[4];
  unint64_t v19;
  __int16 v20;
  uint64_t v21;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a2;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v14 = 134218240;
      v15 = a2;
      v16 = 2048;
      v17 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: row < M, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 77,invalid row %zu > %zu.", (size_t)&v14, 22);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  if (a3 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v19 = a3;
      v20 = 2048;
      v21 = 3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v14 = 134218240;
      v15 = a3;
      v16 = 2048;
      v17 = 3;
      LODWORD(v13) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: col < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMMatrix.h, line 78,invalid col %zu > %zu.", (size_t)&v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "T &CMMatrix<float, 3>::operator()(size_t, size_t) [T = float, M = 3, N = 3]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  return a1 + 4 * (3 * a3 + a2);
}

void sub_100534E3C(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_100534E68(uint64_t a1, unint64_t a2)
{
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  unint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint8_t buf[4];
  unint64_t v13;
  __int16 v14;
  uint64_t v15;

  if (a2 >= 3)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021421E8);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218240;
      v13 = a2;
      v14 = 2048;
      v15 = 3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021421E8);
      v8 = 134218240;
      v9 = a2;
      v10 = 2048;
      v11 = 3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assertion failed: i < N, file /Library/Caches/com.apple.xbs/Sources/CoreLocation/Oscar/Math/CMVector.h, line 277,invalid index %zu >= %zu.", (size_t)&v8, 22);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "T &CMVector<float, 3>::operator[](const size_t) [T = float, N = 3]", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
  }
  return a1 + 4 * a2;
}

void sub_1005350E4(id a1)
{
  qword_102301810 = (uint64_t)objc_msgSend(objc_alloc((Class)CLDispatchSilo), "initWithIdentifier:", CFSTR("CLSedentaryTimerNotifierSilo"));
}

uint64_t sub_100535198(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100536384;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301830 != -1)
    dispatch_once(&qword_102301830, block);
  return qword_1023108A8;
}

void sub_100535508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053552C(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  double v6;
  int v7;
  uint64_t result;
  NSObject *v9;
  double v10;
  int v11;
  double v13;
  double v14;
  id v15;
  NSDateComponents *v16;
  NSInteger v17;
  NSInteger v18;
  NSInteger v19;
  NSObject *v20;
  double v21;
  int v22;
  double v23;
  unsigned int v24;
  double v25;
  unsigned int v26;
  unsigned int v27;
  NSObject *v28;
  double v29;
  int v30;
  uint64_t v31;
  double v32;
  int v33;
  const char *v34;
  uint8_t *v35;
  double v36;
  int v37;
  const char *v38;
  uint8_t *v39;
  double v40;
  const char *v41;
  uint8_t *v42;
  const char *v43;
  uint8_t *v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  char v48;
  char v49;
  int v50;
  double v51;
  __int16 v52;
  _BYTE v53[10];
  NSInteger v54;
  unsigned int v55;
  __int16 v56;
  double v57;
  uint8_t buf[4];
  double v59;
  __int16 v60;
  _BYTE v61[10];
  NSInteger v62;
  unsigned int v63;
  __int16 v64;
  double v65;

  if (*(_BYTE *)(a1 + 120))
  {
    if (*(_BYTE *)(a1 + 176))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v5 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0)
          v6 = *(double *)&a2;
        else
          v6 = *(double *)a2;
        v7 = *(unsigned __int8 *)(a1 + 176);
        *(_DWORD *)buf = 136446466;
        v59 = v6;
        v60 = 1026;
        *(_DWORD *)v61 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error starting,client,%{public}s,armed,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        if (*(char *)(a2 + 23) >= 0)
          v32 = *(double *)&a2;
        else
          v32 = *(double *)a2;
        v33 = *(unsigned __int8 *)(a1 + 176);
        v50 = 136446466;
        v51 = v32;
        v52 = 1026;
        *(_DWORD *)v53 = v33;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "SedentaryAlarm,Error starting,client,%{public}s,armed,%{public}d", &v50, 18);
        v35 = (uint8_t *)v34;
        sub_100512490("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v34);
        if (v35 != buf)
          free(v35);
      }
      return 108;
    }
    else
    {
      objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerStartTimeKey), "doubleValue");
      v14 = v13;
      v15 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", v13);
      v16 = -[NSCalendar components:fromDate:](+[NSCalendar currentCalendar](NSCalendar, "currentCalendar"), "components:fromDate:", 192, v15);
      v17 = -[NSDateComponents minute](v16, "minute");
      v18 = -[NSDateComponents second](v16, "second");
      if (v17 | v18)
      {
        v19 = v18;
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v20 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218496;
          v59 = v14;
          v60 = 2048;
          *(_QWORD *)v61 = v17;
          *(_WORD *)&v61[8] = 2048;
          v62 = v19;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "SedentaryAlarm,startDate sent that doesn't align with the wall hour,%f,minuteOffset,%ld,secondOffset,%ld", buf, 0x20u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021424E0);
          v50 = 134218496;
          v51 = v14;
          v52 = 2048;
          *(_QWORD *)v53 = v17;
          *(_WORD *)&v53[8] = 2048;
          v54 = v19;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "SedentaryAlarm,startDate sent that doesn't align with the wall hour,%f,minuteOffset,%ld,secondOffset,%ld", COERCE_DOUBLE(&v50), 32, v45);
          v44 = (uint8_t *)v43;
          sub_100512490("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v43);
          if (v44 != buf)
            free(v44);
        }
      }

      -[NSDate timeIntervalSinceReferenceDate](+[NSDate date](NSDate, "date"), "timeIntervalSinceReferenceDate");
      v22 = (int)(v14 - v21);
      WORD1(v45) = v22;
      objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerPeriodIntervalKey), "doubleValue");
      v24 = (int)v23;
      WORD2(v45) = (int)v23;
      objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerReminderIntervalKey), "doubleValue");
      v26 = (int)v25;
      HIWORD(v45) = (int)v25;
      v27 = objc_msgSend(objc_msgSend(a3, "objectForKeyedSubscript:", CMSedentaryTimerAutoRescheduleKey), "BOOLValue");
      LOWORD(v46) = v27;
      HIWORD(v46) = *(_DWORD *)(a1 + 268);
      v47 = *(_DWORD *)(a1 + 280);
      v48 = *(_DWORD *)(a1 + 292);
      v49 = *(_DWORD *)(a1 + 304);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v28 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0)
          v29 = *(double *)&a2;
        else
          v29 = *(double *)a2;
        *(_DWORD *)buf = 136316418;
        v59 = v29;
        v60 = 1024;
        *(_DWORD *)v61 = v22;
        *(_WORD *)&v61[4] = 1024;
        *(_DWORD *)&v61[6] = v24;
        LOWORD(v62) = 1024;
        *(_DWORD *)((char *)&v62 + 2) = v26;
        HIWORD(v62) = 1024;
        v63 = v27;
        v64 = 2048;
        v65 = v14;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,START,client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d,startDate,%f", buf, 0x2Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        if (*(char *)(a2 + 23) >= 0)
          v40 = *(double *)&a2;
        else
          v40 = *(double *)a2;
        v50 = 136316418;
        v51 = v40;
        v52 = 1024;
        *(_DWORD *)v53 = v22;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)&v53[6] = v24;
        LOWORD(v54) = 1024;
        *(_DWORD *)((char *)&v54 + 2) = v26;
        HIWORD(v54) = 1024;
        v55 = v27;
        v56 = 2048;
        v57 = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "SedentaryAlarm,START,client,%s,offset,%d,period,%d,reminder,%d,autoReschedule,%d,startDate,%f", (const char *)&v50, 46, v45, v46);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      if (v22 >= 0)
        LOWORD(v30) = v22;
      else
        v30 = -v22;
      result = 107;
      if (v24 && v26 < v24 && v24 > (unsigned __int16)v30)
      {
        v31 = sub_1001FBB04(0);
        (*(void (**)(uint64_t, char *))(*(_QWORD *)(v31 + 64) + 24))(v31 + 64, (char *)&v45 + 2);
        *(_BYTE *)(a1 + 176) = 1;
        return 100;
      }
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v9 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0)
        v10 = *(double *)&a2;
      else
        v10 = *(double *)a2;
      v11 = *(unsigned __int8 *)(a1 + 120);
      *(_DWORD *)buf = 136446466;
      v59 = v10;
      v60 = 1026;
      *(_DWORD *)v61 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "SedentaryAlarm,Error starting,client,%{public}s,fitness tracking,%{public}d", buf, 0x12u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      if (*(char *)(a2 + 23) >= 0)
        v36 = *(double *)&a2;
      else
        v36 = *(double *)a2;
      v37 = *(unsigned __int8 *)(a1 + 120);
      v50 = 136446466;
      v51 = v36;
      v52 = 1026;
      *(_DWORD *)v53 = v37;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "SedentaryAlarm,Error starting,client,%{public}s,fitness tracking,%{public}d", &v50, 18);
      v39 = (uint8_t *)v38;
      sub_100512490("Generic", 1, 0, 0, "CMError CLSedentaryTimerNotifier::startTimer(const std::string &, NSDictionary *)", "%s\n", v38);
      if (v39 != buf)
        free(v39);
    }
    return 109;
  }
  return result;
}

void sub_100535F44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100535F68(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021424E0);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,STOP", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "SedentaryAlarm,STOP", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "CMError CLSedentaryTimerNotifier::stopTimer(const std::string &)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  v3 = sub_1001FBB04(0);
  (*(void (**)(uint64_t))(*(_QWORD *)(v3 + 64) + 32))(v3 + 64);
  *(_BYTE *)(a1 + 176) = 0;
  return 100;
}

void sub_100536348(id a1)
{
  sub_100197040();
  if (sub_1000C4240() && sub_100C1DCF8())
  {
    sub_100197040();
    if (sub_100195F08())
      byte_102301820 = 1;
  }
}

void sub_100536384()
{
  operator new();
}

void sub_1005363CC()
{
  operator delete();
}

void sub_1005363F0(uint64_t a1, void *a2)
{
  uint64_t v2;

  v2 = sub_100536998(a1, "CLSedentaryTimerNotifier", a2);
  *(_QWORD *)(v2 + 112) = off_102142348;
  *(_QWORD *)v2 = off_102142258;
  *(_BYTE *)(v2 + 120) = 0;
  *(_QWORD *)(v2 + 121) = 0x10000000000000;
  *(_QWORD *)(v2 + 129) = 0;
  *(_DWORD *)(v2 + 137) = 0;
  *(_OWORD *)(v2 + 144) = 0u;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_BYTE *)(v2 + 176) = 0;
  operator new();
}

void sub_100536894()
{
  operator delete();
}

uint64_t sub_100536998(uint64_t a1, char *a2, void *a3)
{
  *(_QWORD *)a1 = off_102142510;
  sub_1015A2E04((_QWORD *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 40) = objc_msgSend(a3, "silo");
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_DWORD *)(a1 + 104) = 0;
  *(_BYTE *)(a1 + 108) = 0;
  return a1;
}

void sub_100536A18(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_100536A34(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSedentaryTimerNotifier::onFitnessTrackingNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021424C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onFitnessTrackingNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onFitnessTrackingNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10053861C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100536BEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100536C0C(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  __int128 v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSedentaryTimerNotifier::onMotionStateObserverNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021424C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onMotionStateObserverNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onMotionStateObserverNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  if (*a2 == 1)
  {
    v9 = *a3;
    *(_DWORD *)(a4 + 137) = *((_DWORD *)a3 + 4);
    *(_OWORD *)(a4 + 121) = v9;
  }
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100536DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100536DEC(uint64_t a1, _DWORD *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSedentaryTimerNotifier::onNatalimetryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021424C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSedentaryTimerNotifier::onNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSedentaryTimerNotifier::onNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100538B30(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100536FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100536FC4(uint64_t a1, int a2, char a3, double a4, double a5)
{
  uint64_t v5;
  void *v6;
  _QWORD v8[7];
  int v9;
  char v10;

  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 40);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  v8[2] = sub_100537028;
  v8[3] = &unk_102142368;
  v8[4] = v5;
  *(double *)&v8[5] = a4;
  *(double *)&v8[6] = a5;
  v9 = a2;
  v10 = a3;
  return objc_msgSend(v6, "async:", v8);
}

void sub_100537028(uint64_t a1)
{
  sub_100537040(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 56), *(_BYTE *)(a1 + 60), *(double *)(a1 + 40), *(double *)(a1 + 48));
}

void sub_100537040(uint64_t a1, int a2, unsigned __int8 a3, double a4, double a5)
{
  int v7;
  double Current;
  double v11;
  BOOL v12;
  NSObject *v13;
  CFAbsoluteTime v14;
  double v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  uint64_t v25;
  CFAbsoluteTime v26;
  uint64_t v27;
  const char *v28;
  char *v29;
  double v30;
  _OWORD v31[2];
  int v32;
  double v33;
  __int16 v34;
  double v35;
  __int16 v36;
  int v37;
  _BYTE v38[32];
  _BYTE buf[12];
  __int16 v40;
  double v41;
  __int16 v42;
  int v43;

  if (a2 <= 4)
  {
    if (*(_BYTE *)(a1 + 120))
    {
      v7 = a2;
      Current = CFAbsoluteTimeGetCurrent();
      if (v7 == 3 || !v7)
      {
        v11 = *(double *)(a1 + 121);
        v12 = Current > v11 && Current - v11 < 320.0;
        if (v12 && *(int *)(a1 + 133) >= 1)
        {
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021424E0);
          v13 = qword_10229FC78;
          if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
          {
            v14 = CFAbsoluteTimeGetCurrent();
            v15 = *(double *)(a1 + 121);
            *(_DWORD *)buf = 134218240;
            *(CFAbsoluteTime *)&buf[4] = v14;
            v40 = 2048;
            v41 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "SedentaryAlarm,InVehicleReminder,now,%.3f,motionStateTime,%.3f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FC70 != -1)
              dispatch_once(&qword_10229FC70, &stru_1021424E0);
            v25 = qword_10229FC78;
            v26 = CFAbsoluteTimeGetCurrent();
            v27 = *(_QWORD *)(a1 + 121);
            *(_DWORD *)v38 = 134218240;
            *(CFAbsoluteTime *)&v38[4] = v26;
            *(_WORD *)&v38[12] = 2048;
            *(_QWORD *)&v38[14] = v27;
            LODWORD(v30) = 22;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 0, "SedentaryAlarm,InVehicleReminder,now,%.3f,motionStateTime,%.3f", COERCE_DOUBLE(v38), v30);
            v29 = (char *)v28;
            sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v28);
            if (v29 != buf)
              free(v29);
          }
          v7 = 4;
        }
      }
      *(_DWORD *)&v38[28] = 0;
      *(double *)v38 = a4;
      *(double *)&v38[8] = a5;
      *(_DWORD *)&v38[16] = v7;
      *(_QWORD *)&v38[20] = a3;
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v16 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349568;
        *(double *)&buf[4] = a4;
        v40 = 2050;
        v41 = a5;
        v42 = 1026;
        v43 = v7;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "StandPlus,aop alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v32 = 134349568;
        v33 = a4;
        v34 = 2050;
        v35 = a5;
        v36 = 1026;
        v37 = v7;
        LODWORD(v30) = 28;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "StandPlus,aop alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d", &v32, *(_QWORD *)&v30);
        v24 = (char *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
      v17 = *(_QWORD *)(a1 + 376);
      if (v17)
      {
        sub_1004CBB00(v17, (uint64_t)v38);
      }
      else
      {
        v31[0] = *(_OWORD *)v38;
        v31[1] = *(_OWORD *)&v38[16];
        (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)a1 + 216))(a1, v31);
      }
    }
    else
    {
      sub_1015A2E04(buf, "com.apple.locationd");
      sub_100535F68(a1);
      if (SHIBYTE(v42) < 0)
        operator delete(*(void **)buf);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v18 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        v19 = *(unsigned __int8 *)(a1 + 120);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "SedentaryAlarm,STOP,fitness tracking,%d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v20 = *(unsigned __int8 *)(a1 + 120);
        *(_DWORD *)v38 = 67109120;
        *(_DWORD *)&v38[4] = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "SedentaryAlarm,STOP,fitness tracking,%d", v38);
        v22 = (char *)v21;
        sub_100512490("Generic", 1, 0, 0, "void CLSedentaryTimerNotifier::onSedentaryAlarm(const CFAbsoluteTime, const CFAbsoluteTime, const CLSedentaryAlarmType, const BOOL)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
  }
}

void sub_1005375A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005375CC(void **a1, double a2)
{
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  __int128 v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (a2 >= 0.0)
  {
    v9 = a1[2];
    v7 = (uint64_t)(a1 + 2);
    v8 = v9;
    v10 = *(_QWORD *)(v7 - 8);
    if (v10 >= (unint64_t)v9)
    {
      v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)*a1) >> 3);
      v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v8 - (_BYTE *)*a1) >> 3);
      if (2 * v14 > v13)
        v13 = 2 * v14;
      if (v14 >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v13;
      if (v15)
        v16 = (char *)sub_1002596A8(v7, v15);
      else
        v16 = 0;
      v17 = &v16[24 * v12];
      v18 = &v16[24 * v15];
      *(double *)v17 = a2;
      *((_QWORD *)v17 + 1) = 0x7FEFFFFFFFFFFFFFLL;
      v17[16] = 0;
      v11 = v17 + 24;
      v20 = (char *)*a1;
      v19 = (char *)a1[1];
      if (v19 != *a1)
      {
        do
        {
          v21 = *(_OWORD *)(v19 - 24);
          *(v17 - 8) = *(v19 - 8);
          *(_OWORD *)(v17 - 24) = v21;
          v17 -= 24;
          v19 -= 24;
        }
        while (v19 != v20);
        v19 = (char *)*a1;
      }
      *a1 = v17;
      a1[1] = v11;
      a1[2] = v18;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(double *)v10 = a2;
      *(_QWORD *)(v10 + 8) = 0x7FEFFFFFFFFFFFFFLL;
      *(_BYTE *)(v10 + 16) = 0;
      v11 = (char *)(v10 + 24);
    }
    a1[1] = v11;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142658);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349056;
      v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Programmer error, this expiration rule with time %{public}fis not valid.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102142658);
      v22 = 134349056;
      v23 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Programmer error, this expiration rule with time %{public}fis not valid.", &v22, 12);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 0, "void CLActivityAggregator<CLSedentaryAlarmData>::setExpirationRule(CFTimeInterval) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

void sub_100537880(uint64_t a1)
{
  uint64_t v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  _QWORD v10[5];
  uint64_t v11;
  std::__shared_weak_count *v12;
  int v13;

  v13 = 86400;
  v2 = sub_100127B9C();
  sub_100081C10(v2, &v11);
  v3 = sub_1001E4B84(v11, "SedentaryTimerAggregateInterval", &v13);
  v4 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (v3)
    v7 = 1000000000 * v13;
  else
    v7 = 86400000000000;
  v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)objc_msgSend(*(id *)(a1 + 40), "queue"));
  *(_QWORD *)(a1 + 256) = v8;
  dispatch_source_set_timer(v8, 0, v7, 0xDF8475800uLL);
  v9 = *(NSObject **)(a1 + 256);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100537BA0;
  v10[3] = &unk_10212ECA0;
  v10[4] = a1;
  dispatch_source_set_event_handler(v9, v10);
  dispatch_resume(*(dispatch_object_t *)(a1 + 256));
}

void sub_1005379B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1005379CC(uint64_t a1, uint64_t a2)
{
  return _objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "timeZoneDidChange:", a2);
}

uint64_t sub_1005379DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_102142510;
  objc_msgSend(*(id *)(a1 + 48), "invalidate");

  sub_10007CDDC(a1 + 80, *(_QWORD **)(a1 + 88));
  sub_1004A48E8(a1 + 56, *(_QWORD **)(a1 + 64));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_100537A50(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *a1 = off_102142258;
  a1[14] = off_102142348;
  sub_100537B50((uint64_t)a1);
  v2 = (_QWORD *)a1[47];
  a1[47] = 0;
  if (v2)
    sub_10053C228((uint64_t)(a1 + 47), v2);
  sub_10041D328((uint64_t)(a1 + 25));
  sub_100261F44((uint64_t)(a1 + 23));
  v3 = a1[20];
  a1[20] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = a1[19];
  a1[19] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = a1[18];
  a1[18] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return sub_1005379DC((uint64_t)a1);
}

uint64_t sub_100537AFC(uint64_t a1)
{
  return sub_100537A50((_QWORD *)(a1 - 112));
}

void sub_100537B04(_QWORD *a1)
{
  sub_100537A50(a1);
  operator delete();
}

void sub_100537B28(uint64_t a1)
{
  sub_100537A50((_QWORD *)(a1 - 112));
  operator delete();
}

void sub_100537B50(uint64_t a1)
{

  *(_QWORD *)(a1 + 384) = 0;
  if (*(_QWORD *)(a1 + 168))
  {
    -[NSNotificationCenter removeObserver:](+[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter"), "removeObserver:", *(_QWORD *)(a1 + 168));
    *(_QWORD *)(a1 + 168) = 0;
  }
  *(_BYTE *)(a1 + 108) = 1;
}

uint64_t sub_100537BA0(uint64_t a1)
{
  return sub_100537BAC(*(_QWORD *)(a1 + 32) + 200);
}

uint64_t sub_100537BAC(uint64_t a1)
{
  NSObject *v2;
  double v3;
  int v4;
  uint64_t v5;
  NSObject *v6;
  double v7;
  int v8;
  uint64_t v9;
  double v10;
  NSObject *v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v16;
  double v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  double v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  const char *v30;
  uint8_t *v31;
  int v32;
  _BYTE v33[10];
  int v34;
  uint8_t buf[4];
  _BYTE v36[10];
  int v37;

  if (!*(_BYTE *)(a1 + 40))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102142658);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v3 = sub_100078B88();
    v4 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v3;
    *(_WORD *)&v36[8] = 1024;
    v37 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Aggregating records start %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142658);
    v16 = qword_1022A02D8;
    v17 = sub_100078B88();
    v18 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v17;
    *(_WORD *)&v33[8] = 1024;
    v34 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 2, "Aggregating records start %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102142658);
  v6 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v7 = sub_100078B88();
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    *(_DWORD *)buf = 134218240;
    *(double *)v36 = v7;
    *(_WORD *)&v36[8] = 1024;
    v37 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Aggregating records stop %f, count ~%d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142658);
    v21 = qword_1022A02D8;
    v22 = sub_100078B88();
    v23 = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 132);
    v32 = 134218240;
    *(double *)v33 = v22;
    *(_WORD *)&v33[8] = 1024;
    v34 = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v21, 2, "Aggregating records stop %f, count ~%d", COERCE_DOUBLE(&v32), 18);
    v25 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v24);
    if (v25 != buf)
      free(v25);
  }
  v9 = *(_QWORD *)(a1 + 24);
  v10 = (double)*(int *)(v9 + 132);
  if ((double)(int)sub_10053B4A4(v9, (double **)a1) * 1.2 < v10)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142658);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v12 = *(_QWORD *)(a1 + 24);
      v13 = *(_DWORD *)(v12 + 132);
      v14 = sub_10053B4A4(v12, (double **)a1);
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v36 = v13;
      *(_WORD *)&v36[4] = 1024;
      *(_DWORD *)&v36[6] = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102142658);
      v26 = qword_1022A02D8;
      v27 = *(_QWORD *)(a1 + 24);
      v28 = *(_DWORD *)(v27 + 132);
      v29 = sub_10053B4A4(v27, (double **)a1);
      v32 = 67109376;
      *(_DWORD *)v33 = v28;
      *(_WORD *)&v33[4] = 1024;
      *(_DWORD *)&v33[6] = v29;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 0, "#Warning Number of records after aggregation is %d and it greatly exceeds the number of records estimated to be needed %d", &v32, 14);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 2, "long CLActivityAggregator<CLSedentaryAlarmData>::aggregateRecords() [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
  }
  return v5;
}

void sub_100538120(uint64_t a1, double *a2)
{
  uint64_t v3;
  void *v4;
  __int128 v5;
  void *v6;
  ALActivityLog *v7;
  _QWORD v8[5];
  __int128 v9;
  __int128 v10;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 40);
  v8[1] = 3221225472;
  v5 = *((_OWORD *)a2 + 1);
  v9 = *(_OWORD *)a2;
  v8[0] = _NSConcreteStackBlock;
  v8[2] = sub_100538254;
  v8[3] = &unk_1021382B0;
  v8[4] = v3;
  v10 = v5;
  objc_msgSend(v4, "async:", v8);
  v6 = objc_autoreleasePoolPush();
  v7 = objc_alloc_init(ALActivityLog);
  -[ALActivityLog setTimestamp:](v7, "setTimestamp:", *a2);
  -[ALActivityLog setSedentaryAlarmData:](v7, "setSedentaryAlarmData:", objc_alloc_init(ALCLSedentaryAlarmData));
  -[ALCLSedentaryAlarmData setFiredTime:](-[ALActivityLog sedentaryAlarmData](v7, "sedentaryAlarmData"), "setFiredTime:", a2[1]);
  -[ALCLSedentaryAlarmData setType:](-[ALActivityLog sedentaryAlarmData](v7, "sedentaryAlarmData"), "setType:", *((unsigned int *)a2 + 4));
  -[ALCLSedentaryAlarmData setDidWake:](-[ALActivityLog sedentaryAlarmData](v7, "sedentaryAlarmData"), "setDidWake:", *((unsigned __int8 *)a2 + 20));
  -[ALCLSedentaryAlarmData setRegularEntry:](-[ALActivityLog sedentaryAlarmData](v7, "sedentaryAlarmData"), "setRegularEntry:", 1);
  objc_msgSend(-[CLServiceVendor proxyForService:](+[CLServiceVendor sharedInstance](CLServiceVendor, "sharedInstance"), "proxyForService:", CFSTR("CLActivityLogger")), "logData:", v7);
  objc_autoreleasePoolPop(v6);
}

void sub_100538254(uint64_t a1)
{
  _QWORD *v1;
  __int128 v2;
  _OWORD v3[2];

  v1 = *(_QWORD **)(a1 + 32);
  v2 = *(_OWORD *)(a1 + 56);
  v3[0] = *(_OWORD *)(a1 + 40);
  v3[1] = v2;
  sub_100538288(v1, (uint64_t)v3);
}

void sub_100538288(_QWORD *a1, uint64_t a2)
{
  _OWORD *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  char *v10;
  _OWORD *v11;
  __int128 v12;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v14;
  void *__p;
  char *v16;
  _OWORD *v17;

  LODWORD(__p) = 0;
  if (sub_1001B7864((uint64_t)a1, (int *)&__p, 1))
  {
    __p = 0;
    v16 = 0;
    v17 = 0;
    v4 = sub_10025BA00((uint64_t)&v17, 1uLL);
    v5 = (char *)__p;
    v6 = v16;
    v8 = &v4[2 * v7];
    v9 = *(_OWORD *)(a2 + 16);
    *v4 = *(_OWORD *)a2;
    v4[1] = v9;
    v10 = (char *)(v4 + 2);
    if (v6 != v5)
    {
      v11 = v4;
      do
      {
        v12 = *((_OWORD *)v6 - 1);
        v4 = v11 - 2;
        *(v11 - 2) = *((_OWORD *)v6 - 2);
        *(v11 - 1) = v12;
        v6 -= 32;
        v11 -= 2;
      }
      while (v6 != v5);
    }
    __p = v4;
    v16 = v10;
    v17 = v8;
    if (v5)
      operator delete(v5);
    v16 = v10;
    v14 = 0;
    (*(void (**)(_QWORD *, int *, void **, _QWORD, uint64_t, _QWORD))(*a1 + 152))(a1, &v14, &__p, 0, 0xFFFFFFFFLL, 0);
    a1[31] = *(_QWORD *)(a2 + 8);
    if (__p)
    {
      v16 = (char *)__p;
      operator delete(__p);
    }
  }
  else if (*(_BYTE *)(a2 + 20))
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, CFSTR("com.apple.locationd.sedentarytimer"), 0, 0, 0);
  }
}

void sub_1005383A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1005383C4(uint64_t a1)
{
  _BYTE *v2;
  int v3;
  void *__p;
  void *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  if (sub_1013545EC(*(_QWORD *)(a1 + 184), (void **)&v7, *(double *)(a1 + 248)) == 100)
  {
    v2 = v7;
    if (v7 == v8)
      goto LABEL_6;
    __p = 0;
    v5 = 0;
    v6 = 0;
    sub_10053C1B0(&__p, v7, (uint64_t)v8, (v8 - v7) >> 5);
    v3 = 0;
    (*(void (**)(uint64_t, int *, void **, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v3, &__p, 0, 0xFFFFFFFFLL, 0);
    *(_QWORD *)(a1 + 248) = *((_QWORD *)v8 - 3);
    if (__p)
    {
      v5 = __p;
      operator delete(__p);
    }
  }
  v2 = v7;
LABEL_6:
  if (v2)
  {
    v8 = v2;
    operator delete(v2);
  }
}

void sub_100538484(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1005384BC@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  char __str[32];

  snprintf(__str, 0x20uLL, "%d", *a1);
  return sub_1015A2E04(a2, __str);
}

uint64_t sub_100538534(uint64_t a1, _DWORD *a2)
{
  if (*a2 == 1)
    return 0;
  if (!*a2)
    sub_1005383C4(a1);
  return 1;
}

uint64_t sub_100538564(uint64_t a1)
{
  _QWORD block[5];

  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1005385F0;
  block[3] = &unk_10212BB58;
  block[4] = a1;
  if (qword_102301840 != -1)
    dispatch_once(&qword_102301840, block);
  if (byte_102301838)
    return 1;
  sub_100197040();
  return sub_100195F08();
}

id sub_1005385F0(uint64_t a1)
{
  id result;

  result = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "isServiceEnabled:", CFSTR("CLSedentaryTimerNotifier"));
  byte_102301838 = (char)result;
  return result;
}

void sub_10053861C(uint64_t a1, uint64_t a2, _DWORD *a3, int *a4)
{
  int v5;
  NSObject *v6;
  int v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  int v12;
  const char *v13;
  uint8_t *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  uint64_t v19;
  _DWORD v20[2];
  __int16 v21;
  int v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  int v26;

  if (*a3 == 4)
  {
    v5 = *a4;
    if (*a4 != *(_DWORD *)(a1 + 372))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v6 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *(_DWORD *)(a1 + 372);
        *(_DWORD *)buf = 67240448;
        v24 = v7;
        v25 = 1026;
        v26 = v5;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Activity mode from %{public}d to %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v12 = *(_DWORD *)(a1 + 372);
        v20[0] = 67240448;
        v20[1] = v12;
        v21 = 1026;
        v22 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "Activity mode from %{public}d to %{public}d", v20, 14);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
      *(_DWORD *)(a1 + 372) = v5;
      if (v5 == 1)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v8 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "StandPlus, running stand minute estimator", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021424E0);
          LOWORD(v20[0]) = 0;
          LODWORD(v19) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "StandPlus, running stand minute estimator", v20, v19);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
        objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 5, 0);
        v9 = *(_QWORD **)(a1 + 376);
        *(_QWORD *)(a1 + 376) = 0;
        if (v9)
          sub_10053C228(a1 + 376, v9);
        operator new();
      }
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "StandPlus, stopping stand minute estimator", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        LOWORD(v20[0]) = 0;
        LODWORD(v19) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "StandPlus, stopping stand minute estimator", v20, v19);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLSedentaryTimerNotifier::onFitnessTrackingNotification(int, const CLFitnessTrackingNotifier_Type::Notification &, const CLFitnessTrackingNotifier_Type::NotificationData &)", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 5);
      v11 = *(_QWORD **)(a1 + 376);
      *(_QWORD *)(a1 + 376) = 0;
      if (v11)
        sub_10053C228(a1 + 376, v11);
    }
  }
  else if (!*a3)
  {
    *(_BYTE *)(a1 + 120) = *(_BYTE *)a4 & *((_BYTE *)a4 + 1);
  }
}

void sub_100538B04()
{
  operator delete();
}

void sub_100538B30(uint64_t a1, uint64_t a2, _DWORD *a3, __int128 *a4)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  if (*a3 == 5)
  {
    v8 = *(_QWORD *)(a1 + 376);
    if (v8)
      sub_1004CA9A8(v8, a4);
  }
  else if (*a3 == 2)
  {
    v4 = *a4;
    v5 = a4[1];
    v6 = a4[2];
    *(_OWORD *)(a1 + 356) = *(__int128 *)((char *)a4 + 44);
    *(_OWORD *)(a1 + 328) = v5;
    *(_OWORD *)(a1 + 344) = v6;
    *(_OWORD *)(a1 + 312) = v4;
    v7 = *(_QWORD *)(a1 + 376);
    if (v7)
      sub_1004CBAF8(v7, (uint64_t)a4);
  }
}

void sub_100538B84(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  HKQuantitySample *v8;
  void *v9;
  NSArray *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  uint8_t *v15;
  _QWORD v16[4];
  __int128 v17;
  uint64_t v18;
  HKQuantitySample *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;

  if (objc_opt_class(HKQuantityType, a2))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *a2;
      v6 = a2[1];
      v7 = *((_DWORD *)a2 + 4);
      *(_DWORD *)buf = 134349568;
      v27 = v5;
      v28 = 2050;
      v29 = v6;
      v30 = 1026;
      v31 = v7;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus,bucketStart,%{public}f,bucketEnd,%{public}f,count,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v11 = *a2;
      v12 = a2[1];
      v13 = *((_DWORD *)a2 + 4);
      v20 = 134349568;
      v21 = v11;
      v22 = 2050;
      v23 = v12;
      v24 = 1026;
      v25 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "StandPlus,bucketStart,%{public}f,bucketEnd,%{public}f,count,%{public}d", &v20, 28);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    if (*((int *)a2 + 4) >= 1)
    {
      v8 = +[HKQuantitySample quantitySampleWithType:quantity:startDate:endDate:](HKQuantitySample, "quantitySampleWithType:quantity:startDate:endDate:", +[HKQuantityType quantityTypeForIdentifier:](HKQuantityType, "quantityTypeForIdentifier:", HKQuantityTypeIdentifierAppleStandTime), +[HKQuantity quantityWithUnit:doubleValue:](HKQuantity, "quantityWithUnit:doubleValue:", +[HKUnit secondUnit](HKUnit, "secondUnit"), (double)*((int *)a2 + 4) * 60.0), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *(double *)a2), +[NSDate dateWithTimeIntervalSinceReferenceDate:](NSDate, "dateWithTimeIntervalSinceReferenceDate:", *((double *)a2 + 1)));
      v9 = *(void **)(a1 + 384);
      v19 = v8;
      v10 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v19, 1);
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      v16[2] = sub_100538E8C;
      v16[3] = &unk_1021423E8;
      v17 = *(_OWORD *)a2;
      v18 = a2[2];
      objc_msgSend(v9, "saveObjects:withCompletion:", v10, v16);
    }
  }
}

void sub_100538E8C(uint64_t a1, char a2, uint64_t a3)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  uint8_t *v8;
  uint8_t *v9;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  if ((a2 & 1) != 0)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 134349056;
      v21 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "StandPlus successfully pushed to HKHealthStore, startBucket, %{public}f", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v6 = *(_QWORD *)(a1 + 32);
      v16 = 134349056;
      v17 = v6;
      v7 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "StandPlus successfully pushed to HKHealthStore, startBucket, %{public}f", &v16, 12);
      v9 = v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)_block_invoke", "%s\n", v7);
LABEL_19:
      if (v9 != buf)
        free(v9);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 138412546;
      v21 = a3;
      v22 = 2050;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "HKHealthStore, StandPlus, saveObjects failed on, %{error}@, for startBucket, %{public}f", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v13 = *(_QWORD *)(a1 + 32);
      v16 = 138412546;
      v17 = a3;
      v18 = 2050;
      v19 = v13;
      v14 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "HKHealthStore, StandPlus, saveObjects failed on, %{error}@, for startBucket, %{public}f", &v16, 22);
      v9 = v15;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStandPlusBucket(const CLStandPlusBucket)_block_invoke", "%s\n", v14);
      goto LABEL_19;
    }
  }
}

void sub_100539190(uint64_t a1, uint64_t *a2)
{
  sub_100538B84(a1 - 112, a2);
}

void sub_100539198(uint64_t a1, uint64_t a2)
{
  double *v4;
  int v5;
  int v6;
  int v7;
  double v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  int v14;
  double v15;
  uint64_t v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  void *__p;
  double *v25;
  uint64_t v26;
  int v27;
  double v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  uint8_t buf[4];
  double v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;

  __p = 0;
  v25 = 0;
  v26 = 0;
  sub_1013545EC(*(_QWORD *)(a1 + 184), &__p, *(double *)a2);
  v4 = (double *)__p;
  if (__p == v25)
  {
    v6 = 0;
    v5 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = *((_DWORD *)v4 + 4);
      if (v7 == *(_DWORD *)(a2 + 16))
        ++v5;
      if (v7 == 2)
        ++v6;
      v4 += 4;
    }
    while (v4 != v25);
  }
  if (v5 | v6)
  {
    v8 = *(v25 - 3);
    if (v8 > *(double *)(a2 + 8))
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v9 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v38 = v8;
        v39 = 2050;
        v40 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "StandPlus,warning,time went backward,alreadyLogged,%{public}f,new,%{public}f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v20 = *(_QWORD *)(a2 + 8);
        v27 = 134349312;
        v28 = v8;
        v29 = 2050;
        v30 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "StandPlus,warning,time went backward,alreadyLogged,%{public}f,new,%{public}f", &v27, 22);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStoreSedentaryAlarm(CLSedentaryAlarmData)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v12 = *(double *)a2;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(_DWORD *)(a2 + 16);
      *(_DWORD *)buf = 134350080;
      v38 = v12;
      v39 = 2050;
      v40 = v13;
      v41 = 1026;
      v42 = v14;
      v43 = 1026;
      v44 = v5;
      v45 = 1026;
      v46 = v6;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "StandPlus,warning,attempting to log bad alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d,count,%{public}d,countReset,%{public}d", buf, 0x28u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v15 = *(double *)a2;
      v16 = *(_QWORD *)(a2 + 8);
      v17 = *(_DWORD *)(a2 + 16);
      v27 = 134350080;
      v28 = v15;
      v29 = 2050;
      v30 = v16;
      v31 = 1026;
      v32 = v17;
      v33 = 1026;
      v34 = v5;
      v35 = 1026;
      v36 = v6;
      LODWORD(v23) = 40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "StandPlus,warning,attempting to log bad alarm,startTime,%{public}f,firedTime,%{public}f,type,%{public}d,count,%{public}d,countReset,%{public}d", &v27, v23);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLSedentaryTimerNotifier::onStoreSedentaryAlarm(CLSedentaryAlarmData)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  else
  {
    sub_1005395D0(a1 + 200, (double *)a2);
  }
  if (__p)
  {
    v25 = (double *)__p;
    operator delete(__p);
  }
}

void sub_1005395A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005395D0(uint64_t a1, double *a2)
{
  uint64_t result;

  result = sub_10053C288(*(_QWORD *)(a1 + 24), a2);
  if (!*(_BYTE *)(a1 + 41))
  {
    result = sub_10008950C(*(_QWORD *)(a1 + 24) + 72);
    if ((_DWORD)result)
    {
      *(_BYTE *)(a1 + 41) = 1;
      return sub_100537BAC(a1);
    }
  }
  return result;
}

void sub_100539624(uint64_t a1, uint64_t a2)
{
  sub_100539198(a1 - 112, a2);
}

uint64_t sub_10053962C(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021426F8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100539700()
{
  operator new();
}

void sub_1005397AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  operator delete();
}

void sub_1005397E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  __int16 v18;
  int v19;
  uint8_t buf[4];
  _QWORD *v21;
  __int16 v22;
  int v23;

  HIDWORD(v15) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v15 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v21 = v11;
        v22 = 1026;
        v23 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_1021424C0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v16 = 136446466;
        v17 = v12;
        v18 = 1026;
        v19 = a2;
        LODWORD(v15) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
          &v16,
          v15);
        v14 = (uint8_t *)v13;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::removeClient(int) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v13);
        if (v14 != buf)
          free(v14);
      }
    }
  }
}

uint64_t sub_100539A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A2B38);
}

BOOL sub_100539A70(uint64_t a1, int a2, int *a3, char *a4)
{
  _BOOL8 result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  uint64_t *v28;
  char v29;
  uint64_t **v30;
  char v31;
  uint64_t **v32;
  uint64_t v33;
  char v34;
  _QWORD *v35;
  const char *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  uint8_t buf[1640];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      v39 = v10;
      v16 = *a3;
      v19 = *(_QWORD *)(v10 + 48);
      v18 = v10 + 48;
      v17 = v19;
      if (!v19)
        goto LABEL_31;
      v20 = v18;
      do
      {
        v21 = *(_DWORD *)(v17 + 28);
        v22 = v21 < v16;
        if (v21 >= v16)
          v23 = (uint64_t *)v17;
        else
          v23 = (uint64_t *)(v17 + 8);
        if (!v22)
          v20 = v17;
        v17 = *v23;
      }
      while (*v23);
      if (v20 == v18 || v16 < *(_DWORD *)(v20 + 28))
LABEL_31:
        v20 = v18;
      v24 = *(_QWORD *)(a1 + 64);
      if (!v24)
        goto LABEL_42;
      v25 = a1 + 64;
      do
      {
        v26 = *(_DWORD *)(v24 + 32);
        v27 = v26 < v16;
        if (v26 >= v16)
          v28 = (uint64_t *)v24;
        else
          v28 = (uint64_t *)(v24 + 8);
        if (!v27)
          v25 = v24;
        v24 = *v28;
      }
      while (*v28);
      if (v25 != a1 + 64 && v16 >= *(_DWORD *)(v25 + 32))
      {
        *(_QWORD *)v41 = v25;
        v33 = *(_QWORD *)(v25 + 56);
        v34 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v25 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v34;
        memset(buf, 0, 24);
        if (v20 == v18)
        {
          if ((*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
            sub_10053CA78();
          if (*(_QWORD *)buf)
          {
            *(_QWORD *)&buf[8] = *(_QWORD *)buf;
            operator delete(*(void **)buf);
          }
        }
        if (v33)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        *(_QWORD *)v41 = a1 + 64;
        v29 = byte_1022A2B39;
        HIDWORD(v38) = v16;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v29;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v30 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v30 + 8);
        v31 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v32 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v32 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v31;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v20 == v18)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(v39 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021424C0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  result = sub_1001BFF7C(115, 0);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v35 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v35 = (_QWORD *)*v35;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v35;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
      v41,
      v38);
    v37 = (uint8_t *)v36;
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v36);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

void sub_100539EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100539F10(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

BOOL sub_10053A190(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  _BYTE buf[12];
  __int16 v36;
  void **v37;
  char v38;
  int v39;
  _QWORD *v40;
  __int16 v41;
  _BYTE *v42;
  void *__p[2];
  char v44;

  HIDWORD(v34) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v34 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021424C0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v44 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v36 = 2082;
                v37 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v44 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021424C0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v38 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v39 = 136446466;
                v40 = v29;
                v41 = 2082;
                v42 = v31;
                LODWORD(v34) = 22;
                _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                  &v39,
                  v34);
                v33 = v32;
                if (v38 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v33);
                if (v33 != (char *)__p)
                  free(v33);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_10053A518(uint64_t a1, int *a2, char *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v11)
    return 0;
  if ((char *)v11 != a3)
    sub_10053CB90(a3, *(char **)v11, *(_QWORD *)(v11 + 8), (uint64_t)(*(_QWORD *)(v11 + 8) - *(_QWORD *)v11) >> 5);
  return 1;
}

uint64_t sub_10053A59C(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t **v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  __int128 v11;
  int *v12;

  sub_10053BC18(a3, &v11);
  v10 = *a2;
  v12 = &v10;
  v5 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v10, (uint64_t)&unk_101B9EB60, &v12);
  sub_1002B7674((uint64_t)(v5 + 8), &v11);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return 1;
}

void sub_10053A648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10053A65C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *__p;
  void *v5;
  uint64_t v6;

  __p = 0;
  v5 = 0;
  v6 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, &__p, a3, a4, 0);
  if (__p)
  {
    v5 = __p;
    operator delete(__p);
  }
}

void sub_10053A6B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10053A6CC(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  _QWORD **v34;
  _QWORD *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1004A6D60((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v29, *(_QWORD **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_10053BC18(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10053B6A0();
    os_activity_scope_leave(&state);
  }
}

void sub_10053ACE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10053AD34(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021424C0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_1021424C0);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_1021424C0);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021424C0);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::listClients() [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_10053B2E0(uint64_t a1)
{
  sub_10053CA18(a1);
  operator delete();
}

id sub_10053B304(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10053BD8C(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10053B350(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_10053B37C(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10053B3A8(_QWORD *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10053B400(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 24))(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053B420(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 24))(result);
  return result;
}

uint64_t sub_10053B438(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_10053B478(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10053B4A4(uint64_t a1, double **a2)
{
  double *v2;
  double *v3;
  double v4;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v3 = *a2;
  v2 = a2[1];
  v4 = (*a2)[1];
  v5 = *(float *)(a1 + 136);
  if (v4 <= v5)
    v4 = *(float *)(a1 + 136);
  v6 = v3 + 3;
  if (v3 + 3 == v2)
  {
    v7 = 0;
  }
  else
  {
    LODWORD(v7) = 0;
    v8 = *v3;
    do
    {
      v9 = *v6;
      v10 = v6[1];
      v6 += 3;
      v7 = (v7 + (int)((v9 - v8) / v4));
      if (v10 <= v5)
        v4 = *(float *)(a1 + 136);
      else
        v4 = v10;
      v8 = v9;
    }
    while (v6 != v2);
  }
  if (v4 != 1.79769313e308)
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v11 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning No expiration rule was added so the number of records will be unbounded.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Warning No expiration rule was added so the number of records will be unbounded.", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "int CLActivityRecorderDb<CLSedentaryAlarmData>::estimateRecordsNeeded(const CLAggregationRules &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return v7;
}

void sub_10053B6A0()
{
  operator new();
}

void sub_10053B744()
{
  operator delete();
}

void sub_10053B768(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_10053BD8C(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_10053BB3C(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021424C0);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021424C0);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLSedentaryTimerNotifier_Type::Notification, CLSedentaryTimerNotifier_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLSedentaryTimerNotifier_Type::Notification, NotificationData_T = CLSedentaryTimerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10053BB3C(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10053BD8C(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

uint64_t sub_10053BC18@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;

  v4 = (char *)operator new(0x30uLL);
  result = sub_10053BC70((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_10053BC5C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10053BC70(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 8) = 0u;
  *(_QWORD *)a1 = off_102142688;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_QWORD *)(a1 + 24) = 0;
  sub_10053C1B0((_QWORD *)(a1 + 24), *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 5);
  return a1;
}

void sub_10053BCC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_10053BCD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102142688;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10053BCEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102142688;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

void sub_10053BD20(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

uint64_t sub_10053BD3C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

id sub_10053BD8C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10053BDD8(a1);
  else
    return 0;
}

id sub_10053BDD8(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021426C8);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB5BACLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021426C8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021426C8);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101BB5BACLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021426C8);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLSedentaryTimerNotifier_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_10053C184(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

_QWORD *sub_10053C1B0(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1002A23D0(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_10053C20C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10053C228(uint64_t a1, _QWORD *a2)
{
  void *v3;

  if (a2)
  {
    sub_10047F660(a2 + 26);
    sub_100427A00(a2 + 20);
    sub_1004A4854(a2 + 14);
    v3 = (void *)a2[1];
    if (v3)
    {
      a2[2] = v3;
      operator delete(v3);
    }
    operator delete();
  }
}

uint64_t sub_10053C288(uint64_t a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *a2;
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, double *, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 256))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_1003432C8(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021424E0);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021424E0);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLSedentaryAlarmData>::addSuspectRecord(const T &) [T = CLSedentaryAlarmData, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_10053C678(v12, (uint64_t)a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021424E0);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021424E0);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_10053C650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10053C678(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  __n128 result;
  __int128 v10;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 16 * (v4 - v5) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_10053C704(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (_OWORD *)(*(_QWORD *)(v5 + ((v7 >> 4) & 0xFFFFFFFFFFFFFF8)) + 32 * (v7 & 0x7F));
  result = *(__n128 *)a2;
  v10 = *(_OWORD *)(a2 + 16);
  *v8 = *(_OWORD *)a2;
  v8[1] = v10;
  ++a1[5];
  return result;
}

void sub_10053C704(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0x80;
  v4 = v2 - 128;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0x1000uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0x1000uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0x1000uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_10053C9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10053CA18(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021426F8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10053CA78()
{
  operator new();
}

void sub_10053CB1C()
{
  operator delete();
}

uint64_t sub_10053CB40(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v2;
      operator delete(v2);
    }
    operator delete();
  }
  return result;
}

char *sub_10053CB90(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 5)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59)
      sub_100259694();
    v10 = v8 >> 4;
    if (v8 >> 4 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0)
      v11 = 0x7FFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1002A23D0(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 5;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_10053CC98()
{
  sub_1015A2E04(qword_1023017F8, "VO2MaxPowerBudgetEstimatorLastExtendedBudgetAllotmentReason");
  return __cxa_atexit((void (*)(void *))&std::string::~string, qword_1023017F8, (void *)&_mh_execute_header);
}

void sub_10053E0C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10053E0DC(const char *a1, float *a2)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  _BYTE v12[10];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  sub_1001E4804(&v11);
  v4 = sub_100526804(v11, a1, a2);
  v5 = v4;
  v6 = *(std::__shared_weak_count **)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_5;
  v7 = (unint64_t *)(*(_QWORD *)v12 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v4)
      return;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102142710);
  v9 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v10 = (int)*a2;
    v11 = 68289538;
    *(_WORD *)v12 = 2082;
    *(_QWORD *)&v12[2] = "";
    v13 = 2082;
    v14 = a1;
    v15 = 1026;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v11, 0x22u);
  }
}

void sub_10053E240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10053E25C(const char *a1, int *a2)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  int v10;
  uint64_t v11;
  _BYTE v12[10];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  sub_1001E4804(&v11);
  v4 = sub_1001E4B84(v11, a1, a2);
  v5 = v4;
  v6 = *(std::__shared_weak_count **)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_5;
  v7 = (unint64_t *)(*(_QWORD *)v12 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v4)
      return;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102142710);
  v9 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v10 = *a2;
    v11 = 68289538;
    *(_WORD *)v12 = 2082;
    *(_QWORD *)&v12[2] = "";
    v13 = 2082;
    v14 = a1;
    v15 = 1026;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v11, 0x22u);
  }
}

void sub_10053E3BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10053E3D8(const char *a1, uint64_t *a2)
{
  int v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[10];
  __int16 v13;
  const char *v14;
  __int16 v15;
  int v16;

  sub_1001E4804(&v11);
  v4 = sub_10052655C(v11, a1, a2);
  v5 = v4;
  v6 = *(std::__shared_weak_count **)v12;
  if (!*(_QWORD *)v12)
    goto LABEL_5;
  v7 = (unint64_t *)(*(_QWORD *)v12 + 8);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
    if (!v5)
      return;
  }
  else
  {
LABEL_5:
    if (!v4)
      return;
  }
  if (qword_10229FD90 != -1)
    dispatch_once(&qword_10229FD90, &stru_102142710);
  v9 = qword_10229FD98;
  if (os_log_type_enabled((os_log_t)qword_10229FD98, OS_LOG_TYPE_INFO))
  {
    v10 = *a2;
    v11 = 68289538;
    *(_WORD *)v12 = 2082;
    *(_QWORD *)&v12[2] = "";
    v13 = 2082;
    v14 = a1;
    v15 = 1026;
    v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Overriding behavior feature\", \"key\":%{public, location:escape_only}s, \"value\":%{public}d}", (uint8_t *)&v11, 0x22u);
  }
}

void sub_10053E538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100261F44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

__n128 sub_10053E964(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_OWORD *)(a1 + 52) = *(_OWORD *)(a2 + 52);
  result = *(__n128 *)(a2 + 68);
  *(__n128 *)(a1 + 68) = result;
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(_BYTE *)(a1 + 90) = *(_BYTE *)(a2 + 90);
  return result;
}

void sub_10053E9D8(id a1)
{
  qword_10229FD98 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Fall");
}

double sub_10053EA04(uint64_t a1)
{
  double result;

  *(_OWORD *)a1 = xmmword_101BB5C20;
  *(_OWORD *)(a1 + 16) = xmmword_101BB5C40;
  *(_QWORD *)(a1 + 32) = 0x4100000041A00000;
  *(_QWORD *)(a1 + 40) = 0xA00000018;
  *(_OWORD *)(a1 + 48) = xmmword_101BB5C50;
  *(_DWORD *)(a1 + 64) = 1110704128;
  *(_QWORD *)&result = 0x200000008;
  *(_OWORD *)(a1 + 68) = xmmword_101BB5C60;
  *(_DWORD *)(a1 + 84) = 0;
  *(_DWORD *)(a1 + 87) = 0;
  return result;
}

unint64_t sub_10053EA58(_WORD *a1, float a2)
{
  float *v3;
  uint64_t v4;
  unsigned int v5;
  float v6;
  unsigned int v7;
  float v8;
  float v9;
  int v10;
  float v11;
  float v13;
  float *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  float *v20;
  float *v21;
  uint64_t v22;
  float *v23;
  float *v24;
  float *v25;
  float *v26;
  float *v27;
  float *v28;
  float v29;
  float *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  float *v36;
  float v37;
  float v38;
  float *v40;
  float *v41;
  float *v42;
  void *__p;
  float *v44;
  float *v45;

  v3 = 0;
  v4 = 0;
  __p = 0;
  v44 = 0;
  v45 = 0;
  LOWORD(a2) = a1[2];
  *(float *)&v5 = (float)LODWORD(a2);
  v6 = *(float *)&v5 * 0.0039062;
  LOWORD(v5) = a1[3];
  *(float *)&v7 = (float)v5;
  v8 = *(float *)&v7 * 0.0039062;
  LOWORD(v7) = a1[1];
  v9 = (float)v7 * 0.0039062;
  do
  {
    v10 = (unsigned __int16)a1[v4 + 10];
    v11 = 60.0;
    if (v10 != 0x8000 && v6 <= 60.0)
    {
      v11 = (float)(__int16)v10 * 0.015625;
      v13 = v11 + (float)(v9 * 1000.0);
      if (v3 >= v45)
      {
        v14 = (float *)__p;
        v15 = ((char *)v3 - (_BYTE *)__p) >> 3;
        v16 = v15 + 1;
        if ((unint64_t)(v15 + 1) >> 61)
          sub_100259694();
        v17 = (char *)v45 - (_BYTE *)__p;
        if (((char *)v45 - (_BYTE *)__p) >> 2 > v16)
          v16 = v17 >> 2;
        if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
          v18 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
        {
          v19 = (char *)sub_10025E6A0((uint64_t)&v45, v18);
          v14 = (float *)__p;
          v3 = v44;
        }
        else
        {
          v19 = 0;
        }
        v20 = (float *)&v19[8 * v15];
        *v20 = v6;
        v20[1] = v13;
        v21 = v20;
        if (v3 != v14)
        {
          do
          {
            v22 = *((_QWORD *)v3 - 1);
            v3 -= 2;
            *((_QWORD *)v21 - 1) = v22;
            v21 -= 2;
          }
          while (v3 != v14);
          v14 = (float *)__p;
        }
        v3 = v20 + 2;
        __p = v21;
        v44 = v20 + 2;
        v45 = (float *)&v19[8 * v18];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *v3 = v6;
        v3[1] = v13;
        v3 += 2;
      }
      v44 = v3;
    }
    ++v4;
    v6 = v8 + v6;
  }
  while (v4 != 100);
  v23 = (float *)__p;
  if (__p == v3)
  {
    v38 = 0.0;
    if (!v3)
      return ((unint64_t)LODWORD(v38) << 32) | 0xE;
    goto LABEL_56;
  }
  v40 = 0;
  v41 = 0;
  v42 = 0;
  if (__p == v3 - 2)
  {
    v38 = 0.0;
    goto LABEL_55;
  }
  v24 = 0;
  do
  {
    v25 = v23;
    v23 += 2;
    v26 = v44;
    if (v23 != v44)
    {
      v27 = v24;
      v28 = v23;
      do
      {
        v11 = v28[1] - v25[1];
        v29 = v11 / (float)(*v28 - *v25);
        if (v27 >= v42)
        {
          v30 = v40;
          v31 = v27 - v40;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 62)
            sub_100259694();
          v33 = (char *)v42 - (char *)v40;
          if (((char *)v42 - (char *)v40) >> 1 > v32)
            v32 = v33 >> 1;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL)
            v34 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v35 = (char *)sub_100260634((uint64_t)&v42, v34);
            v30 = v40;
            v27 = v41;
          }
          else
          {
            v35 = 0;
          }
          v36 = (float *)&v35[4 * v31];
          *v36 = v29;
          v24 = v36 + 1;
          while (v27 != v30)
          {
            v37 = *--v27;
            v11 = v37;
            *--v36 = v37;
          }
          v40 = v36;
          v42 = (float *)&v35[4 * v34];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *v27 = v29;
          v24 = v27 + 1;
        }
        v41 = v24;
        v28 += 2;
        v27 = v24;
      }
      while (v28 != v26);
    }
  }
  while (v23 != v3 - 2);
  if (v40 == v24)
  {
    v38 = 0.0;
    if (!v24)
      goto LABEL_55;
    goto LABEL_54;
  }
  v38 = sub_10053EDE8(v40, v24, v11);
  v24 = v40;
  if (v40)
LABEL_54:
    operator delete(v24);
LABEL_55:
  v3 = (float *)__p;
  if (__p)
  {
LABEL_56:
    v44 = v3;
    operator delete(v3);
  }
  return ((unint64_t)LODWORD(v38) << 32) | 0xE;
}

void sub_10053EDA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  if (a12)
    operator delete(a12);
  _Unwind_Resume(exception_object);
}

float sub_10053EDE8(float *a1, float *a2, float a3)
{
  uint64_t v3;
  float *v4;
  unint64_t v5;
  float *v6;
  float *v8;
  float v9;
  uint64_t v10;
  float *v11;
  float v12;
  float v13;

  v3 = (char *)a2 - (char *)a1;
  if ((char *)a2 - (char *)a1 <= 3)
    sub_1018FE084();
  v4 = a1;
  v5 = (unint64_t)(v3 >> 2) >> 1;
  v6 = &a1[v5];
  if (v6 != a2)
    sub_10053EEC0(a1, &a1[v5], a2, a3);
  if (((v3 >> 2) & 0x8000000000000001) == 1)
    return *v6;
  if ((unint64_t)v3 >= 8 && v5 != 1)
  {
    v8 = v4 + 1;
    v9 = *v4;
    v10 = 4 * v5 - 4;
    v11 = v4 + 1;
    do
    {
      v12 = *v11++;
      v13 = v12;
      if (v9 < v12)
      {
        v9 = v13;
        v4 = v8;
      }
      v8 = v11;
      v10 -= 4;
    }
    while (v10);
  }
  return *v4 + (float)((float)(*v6 - *v4) * 0.5);
}

float sub_10053EEC0(float *a1, float *a2, float *a3, float result)
{
  float *v4;
  unint64_t v7;
  float *v8;
  float *v9;
  int v10;
  float *v11;
  float *v12;
  float *v13;
  float v14;
  float v15;
  float *v16;
  float v17;
  float v18;
  float v19;
  float v20;
  float *v21;
  float v22;
  float *v23;
  float v24;
  float v25;
  float v26;
  float *v27;
  float v28;
  float v29;
  float v30;

  if (a3 != a2)
  {
    v4 = a3;
    do
    {
      v7 = v4 - a1;
      if (v7 < 2)
        break;
      if (v7 == 3)
      {
        sub_10053F148(a1, a1 + 1, v4 - 1);
        return result;
      }
      if (v7 == 2)
      {
        result = *(v4 - 1);
        v30 = *a1;
        if (result < *a1)
        {
          *a1 = result;
          *(v4 - 1) = v30;
        }
        return result;
      }
      if ((char *)v4 - (char *)a1 <= 31)
        return sub_10053F1D0(a1, v4, result);
      v8 = &a1[v7 >> 1];
      v9 = v4 - 1;
      v10 = sub_10053F148(a1, v8, v4 - 1);
      result = *a1;
      if (*a1 >= *v8)
      {
        v11 = v4 - 1;
        while (--v11 != a1)
        {
          if (*v11 < *v8)
          {
            *a1 = *v11;
            *v11 = result;
            ++v10;
            goto LABEL_13;
          }
        }
        v21 = a1 + 1;
        if (result >= *v9)
        {
          while (v21 != v9)
          {
            v22 = *v21;
            if (result < *v21)
            {
              *v21++ = *v9;
              *v9 = v22;
              goto LABEL_45;
            }
            ++v21;
          }
          return result;
        }
LABEL_45:
        if (v21 == v9)
          return result;
        while (1)
        {
          v25 = *a1;
          do
          {
            v26 = *v21++;
            result = v26;
          }
          while (v25 >= v26);
          v27 = v21 - 1;
          do
          {
            v28 = *--v9;
            v29 = v28;
          }
          while (v25 < v28);
          if (v27 >= v9)
            break;
          *v27 = v29;
          *v9 = result;
        }
        a1 = v21 - 1;
        if (v27 > a2)
          return result;
      }
      else
      {
        v11 = v4 - 1;
LABEL_13:
        v12 = a1 + 1;
        if (a1 + 1 >= v11)
        {
          v16 = a1 + 1;
        }
        else
        {
          v13 = a1 + 1;
          while (1)
          {
            v14 = *v8;
            do
            {
              v15 = *v13++;
              result = v15;
            }
            while (v15 < v14);
            v16 = v13 - 1;
            do
            {
              v17 = *--v11;
              v18 = v17;
            }
            while (v17 >= v14);
            if (v16 >= v11)
              break;
            *v16 = v18;
            *v11 = result;
            ++v10;
            if (v16 == v8)
              v8 = v11;
          }
        }
        if (v16 != v8)
        {
          result = *v8;
          v19 = *v16;
          if (*v8 < *v16)
          {
            *v16 = result;
            *v8 = v19;
            ++v10;
          }
        }
        if (v16 == a2)
          return result;
        if (!v10)
        {
          if (v16 <= a2)
          {
            v23 = v16 + 1;
            while (v23 != v4)
            {
              v24 = *(v23 - 1);
              result = *v23++;
              if (result < v24)
                goto LABEL_29;
            }
          }
          else
          {
            while (v12 != v16)
            {
              v20 = *(v12 - 1);
              result = *v12++;
              if (result < v20)
                goto LABEL_29;
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2)
          a1 = v16 + 1;
        else
          v4 = v16;
      }
    }
    while (v4 != a2);
  }
  return result;
}

uint64_t sub_10053F148(float *a1, float *a2, float *a3)
{
  float v3;
  float v4;
  float v5;
  float v6;

  v3 = *a2;
  v4 = *a1;
  v5 = *a3;
  if (*a2 < *a1)
  {
    if (v5 < v3)
    {
      *a1 = v5;
      *a3 = v4;
      return 1;
    }
    *a1 = v3;
    *a2 = v4;
    if (*a3 >= v4)
      return 1;
    *a2 = *a3;
    *a3 = v4;
    return 2;
  }
  if (v5 < v3)
  {
    *a2 = v5;
    *a3 = v3;
    v6 = *a1;
    if (*a2 >= *a1)
      return 1;
    *a1 = *a2;
    *a2 = v6;
    return 2;
  }
  return 0;
}

float sub_10053F1D0(float *a1, float *a2, float result)
{
  float *v3;
  float *v4;
  float *v5;
  float *v6;
  float v7;
  float v8;

  while (a1 != a2 - 1)
  {
    v3 = a1++;
    if (v3 != a2 && a1 != a2)
    {
      result = *v3;
      v4 = a1;
      v5 = v3;
      v6 = a1;
      do
      {
        v7 = *v6++;
        v8 = v7;
        if (v7 < result)
        {
          result = v8;
          v5 = v4;
        }
        v4 = v6;
      }
      while (v6 != a2);
      if (v5 != v3)
      {
        result = *v3;
        *v3 = *v5;
        *v5 = result;
      }
    }
  }
  return result;
}

uint64_t sub_10053F244(uint64_t a1, int a2)
{
  void *__p[2];
  char v6;

  sub_1015A2E04(__p, "");
  sub_10053F3B8(a1, "CLMotionStateRecorderDb", a2, (uint64_t)__p, 1, 4.0);
  if (v6 < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = off_1021427B0;
  *(_QWORD *)(a1 + 72) = off_102142860;
  sub_100E81598((_QWORD *)(a1 + 464), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 480), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 496), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 512), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 528), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 544), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 560), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 576), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 592), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 608), 0, 0);
  sub_100E81598((_QWORD *)(a1 + 624), 0, 0);
  *(_OWORD *)(a1 + 640) = 0u;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
  return a1;
}

void sub_10053F38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053F3B8(uint64_t a1, char *a2, int a3, uint64_t a4, int a5, float a6)
{
  _QWORD *v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v16;
  uint64_t v17;
  __int16 v18;

  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  v12 = (_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 8));
  *v12 = &off_10213DEF8;
  *(_QWORD *)a1 = off_102142940;
  *(_QWORD *)(a1 + 72) = off_1021429E8;
  sub_101137D40(a1 + 72, a2, a3, a1, a6, a4, a5, 0);
  *(_QWORD *)a1 = off_102142940;
  *(_QWORD *)(a1 + 72) = off_1021429E8;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 384) = 12000;
  *(_QWORD *)(a1 + 392) = off_10213DEB0;
  sub_10042776C((_QWORD *)(a1 + 400));
  *(_QWORD *)(a1 + 400) = &off_10213DEF8;
  v13 = *(_QWORD *)(a1 + 112);
  v17 = a1 + 112;
  (*(void (**)(void))(v13 + 16))();
  v18 = 256;
  if (!a3)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      sub_100115CE4(__p, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a4;
      v16 = *(_QWORD *)(a4 + 16);
    }
    sub_1011384BC(a1 + 72);
  }
  *(_QWORD *)(a1 + 232) = 0xBFF0000000000000;
  (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
  return a1;
}

void sub_10053F760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;

  sub_10187E514((uint64_t)&a19);
  v24[49] = off_10213DEB0;
  sub_100427950(v27);
  sub_100542DDC(v26);
  sub_101138068(a12);
  *v24 = off_10213DEB0;
  sub_100427950(v25);
  _Unwind_Resume(a1);
}

void sub_10053F804()
{
  JUMPOUT(0x10053F7E4);
}

_QWORD *sub_10053F80C(_QWORD *a1)
{
  uint64_t v2;

  a1[9] = off_1021429E8;
  v2 = (uint64_t)(a1 + 9);
  *a1 = off_102142940;
  a1[49] = off_10213DEB0;
  sub_100427950(a1 + 50);
  sub_100542DDC(a1 + 22);
  sub_101138068(v2);
  *a1 = off_10213DEB0;
  sub_100427950(a1 + 1);
  return a1;
}

_QWORD *sub_10053F888(_QWORD *a1)
{
  *a1 = off_1021427B0;
  a1[9] = off_102142860;
  sub_10053F8CC((uint64_t)a1, 0, 0);
  return sub_10053F80C(a1);
}

void sub_10053F8CC(uint64_t a1, void *a2, const void *a3)
{
  const void *v6;
  uint64_t v7;

  if ((a2 != 0) == (a3 != 0))
  {

    *(_QWORD *)(a1 + 640) = a2;
    v6 = *(const void **)(a1 + 648);
    if (v6)
      _Block_release(v6);
    if (a3)
      *(_QWORD *)(a1 + 648) = _Block_copy(a3);
  }
  else
  {
    v7 = sub_1018FE0AC();
    sub_10053F940(v7);
  }
}

_QWORD *sub_10053F944(uint64_t a1)
{
  return sub_10053F888((_QWORD *)(a1 - 72));
}

void sub_10053F94C(_QWORD *a1)
{
  sub_10053F888(a1);
  operator delete();
}

void sub_10053F970(uint64_t a1)
{
  sub_10053F888((_QWORD *)(a1 - 72));
  operator delete();
}

uint64_t sub_10053F998(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  sqlite3_stmt *v6;
  CFAbsoluteTime Current;
  _BOOL4 v8;
  BOOL v9;
  uint64_t v10;
  sqlite3_stmt *v11;
  int v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint8_t buf[8];

  v3 = a1;
  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v20 = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v21 = 256;
  if (*(double *)(*(_QWORD *)(a2 + 8) - 16) != 1.79769313e308)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021428F0);
    v13 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Programmer error, we expect an expiration record!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021428F0);
      v19 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Programmer error, we expect an expiration record!", &v19, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 0, "virtual long CLMotionStateRecorderDb::aggregateRecords(const CLAggregationRules &)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    goto LABEL_21;
  }
  if (!sub_10008950C(v3 + 72))
    goto LABEL_21;
  sub_100087AF4((_QWORD *)(v3 + 496), buf);
  v6 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
  Current = CFAbsoluteTimeGetCurrent();
  v8 = sub_1000890C4(v6, 1, Current - *(double *)(*(_QWORD *)(a2 + 8) - 24));
  v9 = v8;
  v10 = *(_QWORD *)(v3 + 80);
  if (v8)
  {
    v11 = (sqlite3_stmt *)sub_100026CC8(*(uint64_t *)buf);
    sub_10023C9B0(v10, v11);
    v12 = sub_10053FC70(v3);
    *(_DWORD *)(v3 + 132) = v12;
    v3 = v12;
  }
  else
  {
    v16 = *(uint64_t *)(v10 + 88) <= 0 ? 0x7FFFFFFFFFFFFFFFLL : *(_QWORD *)(v10 + 88);
    sub_100053048(*(_QWORD *)(v3 + 80), v16);
  }
  v17 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  if (!v9)
LABEL_21:
    v3 = -1;
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v3;
}

void sub_10053FC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10053FC70(uint64_t a1)
{
  uint64_t v1;
  sqlite3_stmt *v3;
  int v4;
  sqlite3_stmt *v5;
  uint64_t v6;
  uint64_t v8;

  if (!sub_10008950C(a1 + 72))
    return 0xFFFFFFFFLL;
  sub_100087AF4((_QWORD *)(a1 + 464), &v8);
  v3 = (sqlite3_stmt *)sub_100026CC8(v8);
  v4 = sqlite3_step(v3);
  if (v4 == 100)
  {
    v5 = (sqlite3_stmt *)sub_100026CC8(v8);
    v1 = sqlite3_column_int(v5, 0);
  }
  v6 = v8;
  v8 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v4 != 100)
    return 0xFFFFFFFFLL;
  return v1;
}

void sub_10053FD00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10053FD28(uint64_t a1, uint64_t a2)
{
  return sub_10053F998(a1 - 72, a2);
}

void sub_10053FD30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  _WORD v16[8];
  uint8_t buf[1640];

  if (sub_1000CC4F4(*(_QWORD *)(a1 + 80)))
  {
    sub_10053FFFC(a1);
    sub_100634364(*(_QWORD *)(a1 + 80), "MotionStateHistory", (const char **)&qword_102301848, (const std::string::value_type **)&qword_102301AE8, 0);
    *(_QWORD *)(a1 + 464) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT COUNT(*) FROM MotionStateHistory");
    *(_QWORD *)(a1 + 472) = v2;
    *(_QWORD *)(a1 + 480) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MotionStateHistory ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 488) = v3;
    *(_QWORD *)(a1 + 496) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM MotionStateHistory WHERE startTime < ?");
    *(_QWORD *)(a1 + 504) = v4;
    *(_QWORD *)(a1 + 512) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM MotionStateHistory WHERE startTime > ?");
    *(_QWORD *)(a1 + 520) = v5;
    *(_QWORD *)(a1 + 528) = sub_10063D314(*(_QWORD *)(a1 + 80), "DELETE FROM MotionStateHistory");
    *(_QWORD *)(a1 + 536) = v6;
    *(_QWORD *)(a1 + 544) = sub_10063D314(*(_QWORD *)(a1 + 80), "INSERT INTO MotionStateHistory (startTime, timestamp, type, confidence, mounted, mountedConfidence, turn, isVehicular, isMoving, vehicleExitState, vehicularFlagsData, vehicleType) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)");
    *(_QWORD *)(a1 + 552) = v7;
    *(_QWORD *)(a1 + 560) = sub_10063D314(*(_QWORD *)(a1 + 80), "UPDATE MotionStateHistory SET startTime = startTime + ?");
    *(_QWORD *)(a1 + 568) = v8;
    *(_QWORD *)(a1 + 576) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MotionStateHistory ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 584) = v9;
    *(_QWORD *)(a1 + 592) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MotionStateHistory WHERE ? <= startTime AND startTime <= ? ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 600) = v10;
    *(_QWORD *)(a1 + 608) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MotionStateHistory WHERE startTime >= ? and startTime < ? ORDER BY startTime ASC");
    *(_QWORD *)(a1 + 616) = v11;
    *(_QWORD *)(a1 + 624) = sub_10063D314(*(_QWORD *)(a1 + 80), "SELECT * FROM MotionStateHistory WHERE startTime < ?  ORDER BY startTime DESC LIMIT 1");
    *(_QWORD *)(a1 + 632) = v12;
    *(_DWORD *)(a1 + 132) = sub_10053FC70(a1);
  }
  else
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021428F0);
    v13 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Device is locked and we are unable to open the database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021428F0);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Device is locked and we are unable to open the database", v16, 2);
      v15 = (uint8_t *)v14;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionStateRecorderDb::prepareSQLStatements()", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
  }
}

void sub_10053FFFC(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  void *__p;
  const char *v6;
  int v7;
  __int16 v8;
  char v9;
  char v10;
  uint8_t buf[16];

  if (sub_100635B3C(*(_QWORD *)(a1 + 80), "MotionStateHistory"))
  {
    v6 = "id";
    v7 = 5;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    sub_10063A8D4(*(_QWORD *)(a1 + 80), "MotionStateHistory", (uint64_t)"id", (uint64_t)&v6);
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142910);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateHistory table doesn't even exist", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142910);
    LOWORD(__p) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateHistory table doesn't even exist", &__p, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateRecorderDb::alterTableIfNecessary()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100540518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a70;
  uint64_t v70;

  if (a26 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a28);
  if (v70)
    (*(void (**)(uint64_t))(*(_QWORD *)v70 + 8))(v70);
  sub_1018B38B4((uint64_t)&a70);
  _Unwind_Resume(a1);
}

uint64_t sub_1005405B8(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  sqlite3_stmt *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 528), &v7);
    v3 = *(_QWORD *)(a1 + 80);
    v4 = (sqlite3_stmt *)sub_100026CC8(v7);
    sub_10023C9B0(v3, v4);
    v5 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v5 + 88) <= 0)
      v6 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v6 = *(_QWORD *)(v5 + 88);
    sub_100053048(v5, v6);
    *(_DWORD *)(a1 + 132) = 0;
    result = v7;
    v7 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100540640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100540664(uint64_t a1)
{
  return sub_1005405B8(a1 - 72);
}

uint64_t sub_10054066C(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  __int16 v13;
  uint64_t v14;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
    sub_100087AF4((_QWORD *)(a1 + 512), &v14);
    v5 = (sqlite3_stmt *)sub_100026CC8(v14);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v14);
      sub_10023C9B0(v6, v7);
      *(_DWORD *)(a1 + 132) = sub_10053FC70(a1);
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021428F0);
      v8 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to delete records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021428F0);
        v13 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Failed to delete records", &v13, 2);
        v12 = (uint8_t *)v11;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionStateRecorderDb::deleteRecordsAfterInsertUL(const CLMotionCoprocessorInterface::MotionState &)", "%s\n", v11);
        if (v12 != buf)
          free(v12);
      }
    }
    v9 = *(_QWORD *)(a1 + 80);
    if (*(uint64_t *)(v9 + 88) <= 0)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = *(_QWORD *)(v9 + 88);
    sub_100053048(v9, v10);
    result = v14;
    v14 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_1005408A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005408D0(uint64_t a1, double a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  uint64_t v6;
  sqlite3_stmt *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[1640];

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 560), &v12);
    v5 = (sqlite3_stmt *)sub_100026CC8(v12);
    if (sub_1000890C4(v5, 1, a2))
    {
      v6 = *(_QWORD *)(a1 + 80);
      v7 = (sqlite3_stmt *)sub_100026CC8(v12);
      sub_10023C9B0(v6, v7);
    }
    else
    {
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021428F0);
      v8 = qword_10229FCB8;
      if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Failed to shift records", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCB0 != -1)
          dispatch_once(&qword_10229FCB0, &stru_1021428F0);
        v11 = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Failed to shift records", &v11, 2);
        v10 = (uint8_t *)v9;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionStateRecorderDb::shiftRecordsByUL(CFTimeInterval)", "%s\n", v9);
        if (v10 != buf)
          free(v10);
      }
    }
    result = v12;
    v12 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100540AC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a12)
    (*(void (**)(uint64_t))(*(_QWORD *)a12 + 8))(a12);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100540AF8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  uint64_t v17;
  sqlite3_stmt *v18;
  uint64_t v19;

  result = sub_10008950C(a1 + 72);
  if ((_DWORD)result)
  {
    sub_100087AF4((_QWORD *)(a1 + 544), &v19);
    v5 = (sqlite3_stmt *)sub_100026CC8(v19);
    if (sub_1000890C4(v5, 1, *(double *)(a2 + 8)))
    {
      v6 = (sqlite3_stmt *)sub_100026CC8(v19);
      if (sub_1000890C4(v6, 2, *(double *)a2))
      {
        v7 = (sqlite3_stmt *)sub_100026CC8(v19);
        if (sub_1000CD75C(v7, 3, *(_DWORD *)(a2 + 24)))
        {
          v8 = (sqlite3_stmt *)sub_100026CC8(v19);
          if (sub_1000CD75C(v8, 4, *(unsigned __int8 *)(a2 + 28)))
          {
            v9 = (sqlite3_stmt *)sub_100026CC8(v19);
            if (sub_1000CD75C(v9, 5, *(unsigned __int8 *)(a2 + 29)))
            {
              v10 = (sqlite3_stmt *)sub_100026CC8(v19);
              if (sub_1000CD75C(v10, 6, *(unsigned __int8 *)(a2 + 30)))
              {
                v11 = (sqlite3_stmt *)sub_100026CC8(v19);
                if (sub_1000CD75C(v11, 7, *(unsigned __int8 *)(a2 + 31)))
                {
                  v12 = (sqlite3_stmt *)sub_100026CC8(v19);
                  if (sub_1000CD75C(v12, 8, *(unsigned __int8 *)(a2 + 32)))
                  {
                    v13 = (sqlite3_stmt *)sub_100026CC8(v19);
                    if (sub_1000CD75C(v13, 9, *(unsigned __int8 *)(a2 + 33)))
                    {
                      v14 = (sqlite3_stmt *)sub_100026CC8(v19);
                      if (sub_1000CD75C(v14, 10, *(unsigned __int8 *)(a2 + 35)))
                      {
                        v15 = (sqlite3_stmt *)sub_100026CC8(v19);
                        if (sub_1000CD75C(v15, 11, *(unsigned __int8 *)(a2 + 60)))
                        {
                          v16 = (sqlite3_stmt *)sub_100026CC8(v19);
                          if (sub_1000CD75C(v16, 12, *(unsigned __int8 *)(a2 + 62)))
                          {
                            v17 = *(_QWORD *)(a1 + 80);
                            v18 = (sqlite3_stmt *)sub_100026CC8(v19);
                            sub_10023C9B0(v17, v18);
                            ++*(_DWORD *)(a1 + 132);
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
    result = v19;
    v19 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void sub_100540C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

__n128 sub_100540CB8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  return result;
}

uint64_t sub_100540CC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t result;
  BOOL v6;
  _BOOL4 v7;

  v3 = *(_DWORD *)(a2 + 24);
  v4 = *(_DWORD *)(a3 + 24);
  if (v3 == v4
    && *(unsigned __int8 *)(a2 + 28) >= *(unsigned __int8 *)(a3 + 28)
    && *(unsigned __int8 *)(a2 + 60) == *(unsigned __int8 *)(a3 + 60))
  {
    return 1;
  }
  result = 1;
  if (v4 != 2 && v4 != 512)
  {
    v6 = v3 == 4 && v4 == 12;
    if (!v6 && (v3 != 16 || v4 != 32))
    {
      v7 = (v4 & 0xFFFFEFFF) == 0x2000;
      return v3 == 4096 && v7;
    }
  }
  return result;
}

uint64_t sub_100540D48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _DWORD v7[3];
  __int16 v8;
  char v9;
  __int128 v10;
  char v11;
  char v12;
  uint64_t v13;

  if (!sub_10008950C(a1 + 72))
    return 2;
  sub_100087AF4((_QWORD *)(a1 + 576), &v13);
  v4 = sub_100087C78(&v13, (uint64_t)v7);
  if (!(_DWORD)v4)
  {
    *(_OWORD *)a2 = v10;
    *(_DWORD *)(a2 + 24) = v7[1];
    *(_DWORD *)(a2 + 28) = v7[2];
    *(_WORD *)(a2 + 32) = v8;
    *(_BYTE *)(a2 + 35) = v9;
    *(_BYTE *)(a2 + 60) = v11;
    *(_BYTE *)(a2 + 62) = v12;
    *(_BYTE *)(a2 + 104) = 0;
  }
  v5 = v13;
  v13 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v4;
}

void sub_100540DFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 - 24);
  *(_QWORD *)(v1 - 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100540E20(uint64_t a1, char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char **v37;
  uint64_t v38;
  uint64_t v40;
  int v41;
  char v43[4];
  int v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56[3];
  __int16 v57;

  v4 = *(_QWORD *)(a1 + 112);
  v3 = a1 + 112;
  v5 = v3 - 40;
  v56[1] = v3;
  v40 = v3;
  (*(void (**)(void))(v4 + 16))();
  v57 = 256;
  if (sub_10008950C(v5))
  {
    sub_100087AF4((_QWORD *)(a1 + 480), v56);
    while (!sub_100087C78(v56, (uint64_t)v43))
    {
      v7 = v52;
      v6 = v53;
      v8 = v44;
      v9 = v45;
      v10 = v46;
      v11 = v47;
      v12 = v48;
      v13 = v49;
      v14 = v50;
      v15 = v51;
      v16 = v54;
      v17 = v55;
      v18 = (unint64_t)a2[1];
      v19 = (unint64_t)a2[2];
      if (v18 >= v19)
      {
        v41 = v44;
        v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - (_QWORD)*a2) >> 5);
        v22 = v21 + 1;
        if (v21 + 1 > 0x199999999999999)
          sub_100259694();
        v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v19 - (_QWORD)*a2) >> 5);
        if (2 * v23 > v22)
          v22 = 2 * v23;
        if (v23 >= 0xCCCCCCCCCCCCCCLL)
          v24 = 0x199999999999999;
        else
          v24 = v22;
        if (v24)
          v25 = (char *)sub_100542E70((uint64_t)(a2 + 2), v24);
        else
          v25 = 0;
        v26 = &v25[160 * v21];
        *(_QWORD *)v26 = v7;
        *((_QWORD *)v26 + 1) = v6;
        *((_DWORD *)v26 + 6) = v41;
        v26[28] = v9;
        v26[29] = v10;
        v26[30] = v11;
        v26[31] = v12;
        v26[32] = v13;
        v26[33] = v14;
        v26[35] = v15;
        v26[60] = v16;
        v26[62] = v17;
        v26[104] = 0;
        v28 = *a2;
        v27 = a2[1];
        v29 = v26;
        if (v27 == *a2)
        {
          v37 = a2;
        }
        else
        {
          do
          {
            v30 = *((_OWORD *)v27 - 9);
            *((_OWORD *)v29 - 10) = *((_OWORD *)v27 - 10);
            *((_OWORD *)v29 - 9) = v30;
            v31 = *((_OWORD *)v27 - 8);
            v32 = *((_OWORD *)v27 - 7);
            v33 = *((_OWORD *)v27 - 5);
            *((_OWORD *)v29 - 6) = *((_OWORD *)v27 - 6);
            *((_OWORD *)v29 - 5) = v33;
            *((_OWORD *)v29 - 8) = v31;
            *((_OWORD *)v29 - 7) = v32;
            v34 = *((_OWORD *)v27 - 4);
            v35 = *((_OWORD *)v27 - 3);
            v36 = *((_OWORD *)v27 - 1);
            *((_OWORD *)v29 - 2) = *((_OWORD *)v27 - 2);
            *((_OWORD *)v29 - 1) = v36;
            *((_OWORD *)v29 - 4) = v34;
            *((_OWORD *)v29 - 3) = v35;
            v29 -= 160;
            v27 -= 160;
          }
          while (v27 != v28);
          v37 = a2;
          v27 = *a2;
        }
        v20 = v26 + 160;
        *v37 = v29;
        v37[1] = v26 + 160;
        v37[2] = &v25[160 * v24];
        if (v27)
          operator delete(v27);
      }
      else
      {
        *(_QWORD *)v18 = v52;
        *(_QWORD *)(v18 + 8) = v6;
        *(_DWORD *)(v18 + 24) = v8;
        *(_BYTE *)(v18 + 28) = v9;
        *(_BYTE *)(v18 + 29) = v10;
        *(_BYTE *)(v18 + 30) = v11;
        *(_BYTE *)(v18 + 31) = v12;
        *(_BYTE *)(v18 + 32) = v13;
        *(_BYTE *)(v18 + 33) = v14;
        *(_BYTE *)(v18 + 35) = v15;
        *(_BYTE *)(v18 + 60) = v16;
        *(_BYTE *)(v18 + 62) = v17;
        v20 = (char *)(v18 + 160);
        *(_BYTE *)(v18 + 104) = 0;
      }
      a2[1] = v20;
    }
    v38 = v56[0];
    v56[0] = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 24))(v40);
}

void sub_1005410A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005410E0(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  _QWORD *v4;
  _QWORD *v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  uint64_t v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[10];
  char v19;
  uint64_t v20;

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if (SHIBYTE(v17) < 0)
  {
    v1 = v16[1];
    operator delete(v16[0]);
    if (v1)
    {
LABEL_3:
      if (sub_10008950C(a1 + 9))
      {
        sub_100263E50((uint64_t)v16);
        v5 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM ", 14);
        (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
        if ((v14 & 0x80u) == 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        if ((v14 & 0x80u) == 0)
          v7 = v14;
        else
          v7 = (uint64_t)__p[1];
        v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
        sub_100263F7C(v8, (uint64_t)" WHERE startTime > ? and startTime <= ? ORDER BY rowid ASC", 58);
        if ((char)v14 < 0)
          operator delete(__p[0]);
        v9 = a1[10];
        std::stringbuf::str(__p, v18);
        if ((v14 & 0x80u) == 0)
          v10 = (char *)__p;
        else
          v10 = (char *)__p[0];
        sub_1000CDA68(v9, v10);
      }
      return 2;
    }
  }
  else if (HIBYTE(v17))
  {
    goto LABEL_3;
  }
  sub_1018FE234(v4);
  v15 = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(void **)((char *)v16
  v17 = v11;
  if (v19 < 0)
    operator delete((void *)v18[8]);
  std::streambuf::~streambuf(v1);
  std::ios::~ios(&v20);
  return 2;
}

void sub_100541490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a35);
  _Unwind_Resume(a1);
}

uint64_t sub_1005414F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  _QWORD *v19;

  v3 = *(_QWORD *)(a1 + 112);
  v2 = a1 + 112;
  v4 = v2 - 40;
  v13 = v2;
  (*(void (**)(void))(v3 + 16))();
  if (!sub_10008950C(v4))
    sub_100427D28(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142910);
  v5 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    v6 = (_QWORD *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0)
      v6 = (_QWORD *)*v6;
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Database is already opened.\", \"name\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  if (*(_QWORD *)(a1 + 216))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142910);
    v7 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      v8 = *(_QWORD *)(a1 + 216);
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142910);
      v10 = *(_QWORD *)(a1 + 216);
      v14 = 134349056;
      v15 = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "In memory buffer should have been empty! Instead it had a size of %{public}lu.", &v14, 12);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::setDatabaseAccessible() [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 24))(v13);
  return 1;
}

void sub_100541AF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

id *sub_100541B28(uint64_t a1, uint64_t a2, char a3)
{
  int v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  double v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  const char *v30;
  uint8_t *v31;
  double v32;
  const char *v33;
  uint8_t *v34;
  const char *v35;
  uint8_t *v36;
  double v37;
  char v38[8];
  double v39;
  id v40[2];
  int v41;
  double v42;
  __int16 v43;
  uint64_t v44;
  uint8_t buf[4];
  double v46;
  __int16 v47;
  uint64_t v48;

  v40[0] = (id)os_transaction_create("CLActivityRecorderDb::sanitizeAndStoreRecordUL");
  v40[1] = 0;
  if (*(double *)(a1 + 232) > 0.0
    && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a1 + 224, a2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 72))(a1, a1 + 224, a2);
    return sub_100131740(v40);
  }
  if ((a3 & 1) == 0)
    sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)a1 + 104))(a1, v38);
  if (v6 == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
  else
  {
    if (v6)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142910);
      v14 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Failed to insert record due to failure from reading the most recent entry.", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142910);
        LOWORD(v41) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "Failed to insert record due to failure from reading the most recent entry.", &v41, 2);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 0, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      goto LABEL_43;
    }
    v7 = *(double *)(a2 + 8);
    v8 = v39;
    v9 = v7 - v39;
    if (v7 - v39 < 0.0)
      v9 = -(v7 - v39);
    if (v9 > 604800.0)
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142910);
      v10 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
      {
        v11 = *(_QWORD *)(a2 + 8);
        *(_DWORD *)buf = 134349312;
        v46 = v39;
        v47 = 2050;
        v48 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142910);
        v29 = *(_QWORD *)(a2 + 8);
        v41 = 134349312;
        v42 = v39;
        v43 = 2050;
        v44 = v29;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "#Notice Potential CM database inconsistency, time jump %{public}lf %{public}lf", &v41, 22);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      CLWriteStackshot("Potential CM database inconsistency, time jump", 0);
      v7 = *(double *)(a2 + 8);
      v8 = v39;
    }
    if (v7 < v8)
    {
      if (v8 - v7 < 10.0)
      {
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142910);
        v12 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
        {
          v13 = *(double *)(a2 + 8);
          *(_DWORD *)buf = 134217984;
          v46 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_102142910);
          v32 = *(double *)(a2 + 8);
          v41 = 134217984;
          v42 = v32;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the recent past.  Deleting records after %f.", COERCE_DOUBLE(&v41));
          v34 = (uint8_t *)v33;
          sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v33);
          if (v34 != buf)
            free(v34);
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 88))(a1, a2);
        goto LABEL_42;
      }
      v17 = v7 - v8;
      v18 = *(float *)(a1 + 136);
      if (qword_10229FC70 != -1)
      {
        v37 = *(float *)(a1 + 136);
        dispatch_once(&qword_10229FC70, &stru_102142910);
        v18 = v37;
      }
      v19 = v17 - v18;
      v20 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        v46 = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142910);
        v41 = 134217984;
        v42 = v19;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Entry being recorded has a startTime in the substantial past.  Shift records by %f.", COERCE_DOUBLE(&v41));
        v36 = (uint8_t *)v35;
        sub_100512490("Generic", 1, 0, 2, "virtual void CLActivityRecorderDb<CLMotionCoprocessorInterface::MotionState>::sanitizeAndStoreRecordUL(const T &, BOOL) [T = CLMotionCoprocessorInterface::MotionState, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v35);
        if (v36 != buf)
          free(v36);
      }
      (*(void (**)(uint64_t, double))(*(_QWORD *)a1 + 96))(a1, v19);
    }
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v38, a1 + 224, a2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, a2, 1);
  }
LABEL_42:
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 224) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 240) = v21;
  v22 = *(_OWORD *)(a2 + 32);
  v23 = *(_OWORD *)(a2 + 48);
  v24 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 304) = v24;
  *(_OWORD *)(a1 + 256) = v22;
  *(_OWORD *)(a1 + 272) = v23;
  v25 = *(_OWORD *)(a2 + 96);
  v26 = *(_OWORD *)(a2 + 112);
  v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 368) = v27;
  *(_OWORD *)(a1 + 320) = v25;
  *(_OWORD *)(a1 + 336) = v26;
LABEL_43:
  if ((a3 & 1) == 0)
    sub_10001E99C(*(_QWORD *)(a1 + 80));
  return sub_100131740(v40);
}

void sub_100542290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33)
{
  sub_100131740(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_1005422BC(uint64_t a1)
{
  return sub_1005414F8(a1 - 72);
}

void sub_1005422C4(id a1)
{
  qword_10229FCB8 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Activity");
}

void sub_1005422F0(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

uint64_t sub_10054231C(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    sub_1018FE3A0(v4);
    sub_100259694();
  }
  v12 = v15[1];
  operator delete(v15[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    a2[1] = *a2;
    sub_100263E50((uint64_t)v15);
    v6 = sub_100263F7C(&v16, (uint64_t)"SELECT * from ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v8 = v14;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" ORDER BY id ASC", 16);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

void sub_100542688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  uint64_t v35;

  if (v35)
    (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
  sub_1018B38B4((uint64_t)&a35);
  _Unwind_Resume(a1);
}

__n128 sub_1005426F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v3 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a3;
  *(_OWORD *)(a2 + 16) = v3;
  v4 = *(_OWORD *)(a3 + 32);
  v5 = *(_OWORD *)(a3 + 48);
  v6 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 48) = v5;
  result = *(__n128 *)(a3 + 96);
  v8 = *(_OWORD *)(a3 + 112);
  v9 = *(_OWORD *)(a3 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a3 + 128);
  *(_OWORD *)(a2 + 144) = v9;
  *(__n128 *)(a2 + 96) = result;
  *(_OWORD *)(a2 + 112) = v8;
  return result;
}

uint64_t sub_10054271C(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t result;
  _QWORD *v6;
  void **v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _Unwind_Exception *v13;
  void *__p[2];
  unsigned __int8 v15;
  void *v16[2];
  uint64_t v17;
  _QWORD v18[8];

  v4 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v16);
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if (HIBYTE(v17))
      goto LABEL_3;
LABEL_18:
    v13 = (_Unwind_Exception *)sub_1018FE50C(v4);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v16);
    _Unwind_Resume(v13);
  }
  v12 = v16[1];
  operator delete(v16[0]);
  if (!v12)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 120))(a1, a2, 1);
    sub_100263E50((uint64_t)v16);
    v6 = sub_100263F7C(&v17, (uint64_t)"DELETE FROM ", 12);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v15 & 0x80u) == 0)
      v7 = __p;
    else
      v7 = (void **)__p[0];
    if ((v15 & 0x80u) == 0)
      v8 = v15;
    else
      v8 = (uint64_t)__p[1];
    v9 = sub_100263F7C(v6, (uint64_t)v7, v8);
    sub_100263F7C(v9, (uint64_t)" WHERE startTime > ?", 20);
    if ((char)v15 < 0)
      operator delete(__p[0]);
    v10 = a1[10];
    std::stringbuf::str(__p, v18);
    if ((v15 & 0x80u) == 0)
      v11 = (char *)__p;
    else
      v11 = (char *)__p[0];
    sub_1000CDA68(v10, v11);
  }
  return result;
}

uint64_t sub_10054297C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t result;
  _QWORD *v4;
  void **v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  void *v10;
  _Unwind_Exception *v11;
  void *__p[2];
  unsigned __int8 v13;
  void *v14[2];
  uint64_t v15;
  _QWORD v16[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v14);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
    if (HIBYTE(v15))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FE678(v2);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    sub_1018B38B4((uint64_t)v14);
    _Unwind_Resume(v11);
  }
  v10 = v14[1];
  operator delete(v14[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  result = sub_10008950C(a1 + 9);
  if ((_DWORD)result)
  {
    sub_100263E50((uint64_t)v14);
    v4 = sub_100263F7C(&v15, (uint64_t)"UPDATE ", 7);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v13 & 0x80u) == 0)
      v5 = __p;
    else
      v5 = (void **)__p[0];
    if ((v13 & 0x80u) == 0)
      v6 = v13;
    else
      v6 = (uint64_t)__p[1];
    v7 = sub_100263F7C(v4, (uint64_t)v5, v6);
    sub_100263F7C(v7, (uint64_t)" SET startTime = startTime + ?", 30);
    if ((char)v13 < 0)
      operator delete(__p[0]);
    v8 = a1[10];
    std::stringbuf::str(__p, v16);
    if ((v13 & 0x80u) == 0)
      v9 = (char *)__p;
    else
      v9 = (char *)__p[0];
    sub_1000CDA68(v8, v9);
  }
  return result;
}

uint64_t sub_100542BB4(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  void *v10;
  _Unwind_Exception *v11;
  uint64_t v12;
  void *__p[2];
  unsigned __int8 v14;
  void *v15[2];
  uint64_t v16;
  _QWORD v17[8];

  v2 = (*(_QWORD *(**)(void **__return_ptr))(*a1 + 64))(v15);
  if ((SHIBYTE(v16) & 0x80000000) == 0)
  {
    if (HIBYTE(v16))
      goto LABEL_3;
LABEL_18:
    v11 = (_Unwind_Exception *)sub_1018FE7E4(v2);
    if (v12)
      (*(void (**)())(*(_QWORD *)v12 + 8))();
    sub_1018B38B4((uint64_t)v15);
    _Unwind_Resume(v11);
  }
  v10 = v15[1];
  operator delete(v15[0]);
  if (!v10)
    goto LABEL_18;
LABEL_3:
  if (sub_10008950C(a1 + 9))
  {
    sub_100263E50((uint64_t)v15);
    v3 = sub_100263F7C(&v16, (uint64_t)"SELECT * FROM ", 14);
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 64))(__p, a1);
    if ((v14 & 0x80u) == 0)
      v4 = __p;
    else
      v4 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v5 = v14;
    else
      v5 = (uint64_t)__p[1];
    v6 = sub_100263F7C(v3, (uint64_t)v4, v5);
    sub_100263F7C(v6, (uint64_t)" ORDER BY ROWID DESC LIMIT 1", 28);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v7 = a1[10];
    std::stringbuf::str(__p, v17);
    if ((v14 & 0x80u) == 0)
      v8 = (char *)__p;
    else
      v8 = (char *)__p[0];
    sub_1000CDA68(v7, v8);
  }
  return 2;
}

uint64_t sub_100542DDC(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 12;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 25;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void *sub_100542E70(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x19999999999999ALL)
    sub_10025955C();
  return operator new(160 * a2);
}

void sub_100542EB4()
{
  qword_102301848 = (uint64_t)"id";
  dword_102301850 = 1;
  word_102301854 = 1;
  byte_102301858 = 0;
  byte_102301870 = 0;
  qword_102301878 = (uint64_t)"startTime";
  dword_102301880 = 2;
  word_102301884 = 0;
  byte_102301888 = 0;
  byte_1023018A0 = 0;
  qword_1023018A8 = (uint64_t)"timestamp";
  dword_1023018B0 = 2;
  word_1023018B4 = 0;
  byte_1023018B8 = 0;
  byte_1023018D0 = 0;
  qword_1023018D8 = (uint64_t)"type";
  dword_1023018E0 = 1;
  word_1023018E4 = 0;
  byte_1023018E8 = 0;
  byte_102301900 = 0;
  qword_102301908 = (uint64_t)"confidence";
  dword_102301910 = 1;
  word_102301914 = 0;
  byte_102301918 = 0;
  byte_102301930 = 0;
  qword_102301938 = (uint64_t)"mounted";
  dword_102301940 = 1;
  word_102301944 = 0;
  byte_102301948 = 0;
  byte_102301960 = 0;
  qword_102301968 = (uint64_t)"mountedConfidence";
  dword_102301970 = 1;
  word_102301974 = 0;
  byte_102301978 = 0;
  byte_102301990 = 0;
  qword_102301998 = (uint64_t)"turn";
  dword_1023019A0 = 1;
  word_1023019A4 = 0;
  byte_1023019A8 = 0;
  byte_1023019C0 = 0;
  qword_1023019C8 = (uint64_t)"isVehicular";
  dword_1023019D0 = 1;
  word_1023019D4 = 0;
  byte_1023019D8 = 0;
  byte_1023019F0 = 0;
  qword_1023019F8 = (uint64_t)"isMoving";
  dword_102301A00 = 1;
  word_102301A04 = 0;
  byte_102301A08 = 0;
  byte_102301A20 = 0;
  qword_102301A28 = (uint64_t)"vehicleExitState";
  dword_102301A30 = 1;
  word_102301A34 = 0;
  byte_102301A38 = 0;
  byte_102301A50 = 0;
  qword_102301A58 = (uint64_t)"vehicularFlagsData";
  dword_102301A60 = 1;
  word_102301A64 = 0;
  byte_102301A68 = 0;
  byte_102301A80 = 0;
  qword_102301A88 = (uint64_t)"vehicleType";
  dword_102301A90 = 1;
  word_102301A94 = 0;
  byte_102301A98 = 0;
  byte_102301AB0 = 0;
  qword_102301AB8 = 0;
  dword_102301AC0 = 5;
  word_102301AC4 = 0;
  byte_102301AC8 = 0;
  byte_102301AE0 = 0;
  qword_102301AE8 = (uint64_t)"startTime";
  unk_102301AF0 = 0;
}

void sub_100543058(uint64_t a1@<X8>)
{
  int v6;
  double v7;
  NSObject *v9;
  double v10;
  BOOL v11;
  NSObject *v12;
  double v13;
  BOOL v14;
  NSObject *v15;
  double v16;
  _BOOL4 v17;
  NSObject *v18;
  double v19;
  _BOOL4 v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  const char *v24;
  char *v25;
  const char *v26;
  char *v27;
  const char *v28;
  char *v29;
  const char *v30;
  char *v31;
  double v32;
  unsigned __int8 v33[8];
  double v34;
  unsigned __int8 v35;
  unsigned __int8 v36;
  int v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  int v41;
  _BYTE v42[18];
  int v43;
  _BYTE v44[18];
  int v45;
  _BYTE v46[18];
  int v47;
  _BYTE v48[18];
  _BYTE buf[12];
  __int16 v50;
  uint64_t v51;

  *(_BYTE *)a1 = 0;
  __asm { FMOV            V0.2D, #10.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_101BB5E60;
  *(_QWORD *)(a1 + 40) = 0x4024000000000000;
  buf[0] = 0;
  sub_1018BF25C(&v35, "EnableMultiSportSimulation", buf, 0);
  v6 = v36;
  *(_BYTE *)a1 = v36;
  if (v6)
  {
    *(_QWORD *)buf = 0;
    sub_1018BEA14(v33, "MultiSportSimulatedPauseTime", buf, 0);
    if (v33[0])
    {
      v7 = v34;
      _NF = v34 < 10.0;
      if (v34 < 10.0)
        v7 = 10.0;
      *(double *)(a1 + 8) = v7;
      if (_NF)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142A68);
        v9 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(double *)&buf[4] = v34;
          v50 = 2048;
          v51 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set pause time %f, min time is %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102142A68);
          v47 = 134218240;
          *(double *)v48 = v34;
          *(_WORD *)&v48[8] = 2048;
          *(_QWORD *)&v48[10] = 0x4024000000000000;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "MultiSportSim, failed to set pause time %f, min time is %f", COERCE_DOUBLE(&v47), v32);
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
      }
    }
    *(_QWORD *)buf = 0;
    sub_1018BEA14((unsigned __int8 *)&v47, "MultiSportSimulatedTransitionTime", buf, 0);
    if ((_BYTE)v47)
    {
      v10 = v34;
      v11 = v34 < 10.0;
      if (v34 < 10.0)
        v10 = 10.0;
      *(double *)(a1 + 16) = v10;
      if (v11)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142A68);
        v12 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = *(_QWORD *)&v48[4];
          v50 = 2048;
          v51 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set transition time %f, min time is %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102142A68);
          v45 = 134218240;
          *(_QWORD *)v46 = *(_QWORD *)&v48[4];
          *(_WORD *)&v46[8] = 2048;
          *(_QWORD *)&v46[10] = 0x4024000000000000;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "MultiSportSim, failed to set transition time %f, min time is %f", COERCE_DOUBLE(&v45), v32);
          v25 = (char *)v24;
          sub_100512490("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
      }
    }
    *(_QWORD *)buf = 0;
    sub_1018BEA14((unsigned __int8 *)&v45, "MultiSportSimulatedLegTime", buf, 0);
    if ((_BYTE)v45)
    {
      v13 = *(double *)&v46[4];
      v14 = *(double *)&v46[4] < 10.0;
      if (*(double *)&v46[4] < 10.0)
        v13 = 20.0;
      *(double *)(a1 + 24) = v13;
      if (v14)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142A68);
        v15 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = *(_QWORD *)&v46[4];
          v50 = 2048;
          v51 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to set leg time %f, min time is %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102142A68);
          v43 = 134218240;
          *(_QWORD *)v44 = *(_QWORD *)&v46[4];
          *(_WORD *)&v44[8] = 2048;
          *(_QWORD *)&v44[10] = 0x4024000000000000;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "MultiSportSim, failed to set leg time %f, min time is %f", COERCE_DOUBLE(&v43), v32);
          v27 = (char *)v26;
          sub_100512490("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v26);
          if (v27 != buf)
            free(v27);
        }
      }
    }
    *(_QWORD *)buf = 0;
    sub_1018BEA14((unsigned __int8 *)&v43, "MultiSportSimulatedSwimmingPrewarm", buf, 0);
    if ((_BYTE)v43)
    {
      v16 = *(double *)&v44[4];
      v17 = *(double *)&v44[4] <= 0.0;
      if (*(double *)&v44[4] >= 10.0)
        v17 = 1;
      if (!v17)
        v16 = 15.0;
      *(double *)(a1 + 32) = v16;
      if (!v17)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142A68);
        v18 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = *(_QWORD *)&v44[4];
          v50 = 2048;
          v51 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102142A68);
          v41 = 134218240;
          *(_QWORD *)v42 = *(_QWORD *)&v44[4];
          *(_WORD *)&v42[8] = 2048;
          *(_QWORD *)&v42[10] = 0x4024000000000000;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", COERCE_DOUBLE(&v41), v32);
          v29 = (char *)v28;
          sub_100512490("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
      }
    }
    *(_QWORD *)buf = 0;
    sub_1018BEA14((unsigned __int8 *)&v41, "MultiSportSimulatedOutdoorCyclingPrewarm", buf, 0);
    if ((_BYTE)v41)
    {
      v19 = *(double *)&v42[4];
      v20 = *(double *)&v42[4] <= 0.0;
      if (*(double *)&v42[4] >= 10.0)
        v20 = 1;
      if (!v20)
        v19 = 10.0;
      *(double *)(a1 + 40) = v19;
      if (!v20)
      {
        if (qword_10229FE60 != -1)
          dispatch_once(&qword_10229FE60, &stru_102142A68);
        v21 = qword_10229FE68;
        if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 134218240;
          *(_QWORD *)&buf[4] = *(_QWORD *)&v42[4];
          v50 = 2048;
          v51 = 0x4024000000000000;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FE60 != -1)
            dispatch_once(&qword_10229FE60, &stru_102142A68);
          v37 = 134218240;
          v38 = *(_QWORD *)&v42[4];
          v39 = 2048;
          v40 = 0x4024000000000000;
          LODWORD(v32) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 16, "MultiSportSim, failed to swim prewarm time %f, value must be <= 0 (disable prewarm) or > %f", COERCE_DOUBLE(&v37), v32);
          v31 = (char *)v30;
          sub_100512490("Generic", 1, 0, 0, "static CLWorkoutSeriesModelSimulator::SimulationInfo CLWorkoutSeriesModelSimulator::SimulationInfo::fromDefaultsWrites()", "%s\n", v30);
          if (v31 != buf)
            free(v31);
        }
      }
    }
  }
}

uint64_t sub_100543988(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, double a7)
{
  uint64_t v10;

  v10 = sub_100E3F8D0(a1, a2, a3, a4, a5);
  *(_QWORD *)v10 = off_102142A38;
  *(double *)(v10 + 496) = a7;
  *(_OWORD *)(v10 + 504) = 0u;
  *(_OWORD *)(v10 + 520) = 0u;
  *(_OWORD *)(v10 + 536) = 0u;
  sub_100543A08(v10, a6);
  return a1;
}

void sub_1005439EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;

  sub_10047F660(v2);
  sub_100544074(v1);
  _Unwind_Resume(a1);
}

void sub_100543A08(uint64_t a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  double v17;
  unint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  char *v40;
  double v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  _BYTE buf[24];
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;

  v4 = *(void ***)(a1 + 512);
  v5 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 544) = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v4 = (void **)(*(_QWORD *)(a1 + 512) + 8);
      *(_QWORD *)(a1 + 512) = v4;
      v6 = *(_QWORD *)(a1 + 520) - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v7 = 85;
  }
  else
  {
    if (v6 >> 3 != 2)
      goto LABEL_8;
    v7 = 170;
  }
  *(_QWORD *)(a1 + 536) = v7;
LABEL_8:
  v8 = *(double *)(a1 + 496);
  HIBYTE(v41) = 1;
  v9 = *(_QWORD *)(a1 + 56);
  if (*(_QWORD *)(a1 + 64) == v9
    || (v10 = *(_QWORD *)(a1 + 80),
        v11 = *(_QWORD *)(v9 + 8 * (v10 / 0x18)) + 168 * (v10 % 0x18),
        v12 = *(_QWORD *)(v9 + 8 * ((*(_QWORD *)(a1 + 88) + v10) / 0x18)) + 168 * ((*(_QWORD *)(a1 + 88) + v10) % 0x18),
        v11 == v12))
  {
LABEL_24:
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142A68);
    v19 = qword_10229FE68;
    if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_DEFAULT))
    {
      v20 = *(_QWORD *)(a2 + 8);
      v21 = *(_QWORD *)(a2 + 16);
      v22 = *(_QWORD *)(a2 + 24);
      v23 = *(_QWORD *)(a2 + 32);
      v24 = *(_QWORD *)(a2 + 40);
      *(_DWORD *)buf = 134219008;
      *(_QWORD *)&buf[4] = v20;
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v21;
      *(_WORD *)&buf[22] = 2048;
      v53 = v22;
      v54 = 2048;
      v55 = v23;
      v56 = 2048;
      v57 = v24;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "MultiSportSimParams,pauseTime,%f,transistionTime,%f,legTime,%f,swimPrewarmTime,%f,outdoorCyclingPrewarmTime,%f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FE60 != -1)
        dispatch_once(&qword_10229FE60, &stru_102142A68);
      v31 = *(_QWORD *)(a2 + 8);
      v32 = *(_QWORD *)(a2 + 16);
      v33 = *(_QWORD *)(a2 + 24);
      v34 = *(_QWORD *)(a2 + 32);
      v35 = *(_QWORD *)(a2 + 40);
      v42 = 134219008;
      v43 = v31;
      v44 = 2048;
      v45 = v32;
      v46 = 2048;
      v47 = v33;
      v48 = 2048;
      v49 = v34;
      v50 = 2048;
      v51 = v35;
      LODWORD(v41) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 0, "MultiSportSimParams,pauseTime,%f,transistionTime,%f,legTime,%f,swimPrewarmTime,%f,outdoorCyclingPrewarmTime,%f", COERCE_DOUBLE(&v42), v41);
      v37 = (char *)v36;
      sub_100512490("Generic", 1, 0, 2, "void CLWorkoutSeriesModelSimulator::buildTestSequence(const SimulationInfo &)", "%s\n", v36);
      if (v37 != buf)
        free(v37);
    }
    return;
  }
  v13 = v8 + 5.0;
  v14 = (_QWORD *)(v9 + 8 * (v10 / 0x18));
  while (1)
  {
    v15 = *(_QWORD *)(v11 + 48);
    if (v15 > 16)
      break;
    switch(v15)
    {
      case 2:
        goto LABEL_17;
      case 4:
        v16 = operator new(0x10uLL);
        *(_QWORD *)&buf[8] = v16 + 2;
        *(_QWORD *)&buf[16] = v16 + 2;
        *v16 = 19;
        v16[1] = 0x500000004;
        *(_QWORD *)buf = v16;
        v17 = sub_1005440D8(a1, *(_QWORD *)(v11 + 48), (double *)a2, (uint64_t **)buf, (_BYTE *)&v41 + 7, v13, *(double *)(a2 + 40));
        break;
      case 5:
        v16 = operator new(0x20uLL);
        *(_QWORD *)&buf[8] = v16 + 4;
        *(_QWORD *)&buf[16] = v16 + 4;
        *(_OWORD *)v16 = xmmword_101BB5EE0;
        *((_OWORD *)v16 + 1) = unk_101BB5EF0;
        *(_QWORD *)buf = v16;
        v17 = sub_1005440D8(a1, *(_QWORD *)(v11 + 48), (double *)a2, (uint64_t **)buf, (_BYTE *)&v41 + 7, v13, 0.0);
        break;
      default:
        goto LABEL_30;
    }
LABEL_21:
    v13 = v17;
    operator delete(v16);
    v11 += 168;
    if (v11 - *v14 == 4032)
    {
      v18 = v14[1];
      ++v14;
      v11 = v18;
    }
    if (v11 == v12)
      goto LABEL_24;
  }
  if ((unint64_t)(v15 - 17) < 2)
  {
LABEL_17:
    v16 = operator new(0x20uLL);
    *(_QWORD *)&buf[8] = v16 + 4;
    *(_QWORD *)&buf[16] = v16 + 4;
    *(_OWORD *)v16 = xmmword_101BB5EC0;
    *((_OWORD *)v16 + 1) = unk_101BB5ED0;
    *(_QWORD *)buf = v16;
    v17 = sub_1005440D8(a1, *(_QWORD *)(v11 + 48), (double *)a2, (uint64_t **)buf, (_BYTE *)&v41 + 7, v13, 0.0);
    goto LABEL_21;
  }
  if (v15 == 19)
  {
    v16 = operator new(0x10uLL);
    *(_QWORD *)&buf[8] = v16 + 2;
    *(_QWORD *)&buf[16] = v16 + 2;
    *v16 = 4;
    v16[1] = &_mh_execute_header;
    *(_QWORD *)buf = v16;
    v17 = sub_1005440D8(a1, *(_QWORD *)(v11 + 48), (double *)a2, (uint64_t **)buf, (_BYTE *)&v41 + 7, v13, *(double *)(a2 + 32));
    goto LABEL_21;
  }
LABEL_30:
  if (qword_10229FE60 != -1)
    dispatch_once(&qword_10229FE60, &stru_102142A68);
  v25 = qword_10229FE68;
  if (os_log_type_enabled((os_log_t)qword_10229FE68, OS_LOG_TYPE_FAULT))
  {
    v26 = *(_QWORD *)(v11 + 48);
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "MultiSportSim,Unsported WorkoutType: %ld! nothing will be simulated", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FE60 != -1)
      dispatch_once(&qword_10229FE60, &stru_102142A68);
    v38 = *(_QWORD *)(v11 + 48);
    v42 = 134217984;
    v43 = v38;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FE68, 17, "MultiSportSim,Unsported WorkoutType: %ld! nothing will be simulated", &v42);
    v40 = (char *)v39;
    sub_100512490("Generic", 1, 0, 0, "void CLWorkoutSeriesModelSimulator::buildTestSequence(const SimulationInfo &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  v27 = *(void ***)(a1 + 512);
  v28 = *(_QWORD *)(a1 + 520);
  *(_QWORD *)(a1 + 544) = 0;
  v29 = v28 - (_QWORD)v27;
  if (v29 >= 0x11)
  {
    do
    {
      operator delete(*v27);
      v27 = (void **)(*(_QWORD *)(a1 + 512) + 8);
      *(_QWORD *)(a1 + 512) = v27;
      v29 = *(_QWORD *)(a1 + 520) - (_QWORD)v27;
    }
    while (v29 > 0x10);
  }
  if (v29 >> 3 == 1)
  {
    v30 = 85;
LABEL_41:
    *(_QWORD *)(a1 + 536) = v30;
  }
  else if (v29 >> 3 == 2)
  {
    v30 = 170;
    goto LABEL_41;
  }
}

void sub_10054404C(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_100544074(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = off_10218B4C8;
  v3 = (void **)(a1 + 112);
  sub_100544EF4(&v3);
  sub_100544F70((_QWORD *)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

double sub_1005440D8(uint64_t a1, unint64_t a2, double *a3, uint64_t **a4, _BYTE *a5, double a6, double a7)
{
  double v7;
  double v8;
  double v13;
  double v15;
  double v16;
  double v17;
  double v18;
  __n128 *v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  uint64_t v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __n128 *v30;
  __n128 v31;
  double *v32;
  __n128 *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __n128 *v39;
  __n128 v40;
  double *v41;
  __n128 *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  __n128 *v47;
  __n128 v48;
  double *v49;
  __n128 *v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  __n128 *v56;
  __n128 v57;
  unint64_t v58;
  __n128 *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  __n128 *v64;
  char *v65;
  __n128 v66;
  uint64_t *i;
  uint64_t *v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  double *v74;
  double *v75;
  __n128 *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  __n128 *v82;
  __n128 v83;
  __n128 *v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  __n128 *v90;
  __n128 v91;
  unint64_t v92;
  uint64_t v93;
  __n128 *v94;
  uint64_t v96;
  double v97;
  double v98;
  double v99;
  double v100;
  __n128 *__p;
  __n128 *v102;
  double *v103;
  __n128 *v104;
  char *v105;

  v13 = a6;
  __p = 0;
  v102 = 0;
  v105 = 0;
  if (a7 > 0.0)
  {
    v17 = a6 + a7;
    v18 = a3[3];
    v16 = v13 + a7 + v18 * 0.5 + a3[1];
    v99 = v16 + a7;
    v100 = v13 + a7 + v18 * 0.5;
    v98 = v16 + a7 + v18 * 0.5;
    v97 = v98 + a3[2];
    if (*a5)
      goto LABEL_5;
    v22 = (__n128 *)sub_1002596A8((uint64_t)&v105, 1uLL);
    v20 = (unint64_t)&v22->n128_u64[3 * v23];
    v22->n128_f64[0] = v13;
    v22->n128_u64[1] = a2;
    v22[1].n128_u64[0] = 0x200000000;
    v21 = (__n128 *)((char *)v22 + 24);
    __p = v22;
    v105 = (char *)v20;
    v102 = (__n128 *)((char *)v22 + 24);
    if ((unint64_t)&v22[1].n128_u64[1] < v20)
    {
      v22[1].n128_f64[1] = v17;
      v22[2].n128_u64[0] = a2;
      v22[2].n128_u64[1] = 2;
      v19 = v22 + 3;
      goto LABEL_25;
    }
    v13 = v13 + a7;
  }
  else
  {
    v15 = a3[3];
    v99 = v13 + v15 * 0.5 + a3[1];
    v100 = v13 + v15 * 0.5;
    v98 = v99 + v15 * 0.5;
    v97 = v98 + a3[2];
    v16 = 0.0;
    if (*a5)
    {
      v17 = v13;
LABEL_5:
      v19 = 0;
      v20 = 0;
      *a5 = 0;
      goto LABEL_27;
    }
    v21 = 0;
    v20 = 0;
  }
  v24 = __p;
  v25 = 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (char *)__p) >> 3);
  v26 = v25 + 1;
  if (v25 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)__p) >> 3);
  if (2 * v27 > v26)
    v26 = 2 * v27;
  if (v27 >= 0x555555555555555)
    v28 = 0xAAAAAAAAAAAAAAALL;
  else
    v28 = v26;
  if (v28)
  {
    v29 = (char *)sub_1002596A8((uint64_t)&v105, v28);
    v24 = __p;
    v21 = v102;
  }
  else
  {
    v29 = 0;
  }
  v30 = (__n128 *)&v29[24 * v25];
  v20 = (unint64_t)&v29[24 * v28];
  v30->n128_f64[0] = v13;
  v30->n128_u64[1] = a2;
  v30[1].n128_u64[0] = 2;
  v19 = (__n128 *)((char *)v30 + 24);
  if (v21 != v24)
  {
    do
    {
      v31 = *(__n128 *)((char *)v21 - 24);
      v30[-1].n128_u64[1] = v21[-1].n128_u64[1];
      *(__n128 *)((char *)v30 - 24) = v31;
      v30 = (__n128 *)((char *)v30 - 24);
      v21 = (__n128 *)((char *)v21 - 24);
    }
    while (v21 != v24);
    v24 = __p;
  }
  __p = v30;
  v105 = (char *)v20;
  if (v24)
  {
    operator delete(v24);
    v20 = (unint64_t)v105;
  }
  v17 = v13;
LABEL_25:
  v102 = v19;
  *a5 = 0;
  if ((unint64_t)v19 < v20)
  {
    v19->n128_f64[0] = v100;
    v19->n128_u64[1] = a2;
    v19[1].n128_u64[0] = 1;
    v32 = &v19[1].n128_f64[1];
    goto LABEL_41;
  }
LABEL_27:
  v33 = __p;
  v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)__p) >> 3);
  v35 = v34 + 1;
  if (v34 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_100259694();
  v36 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)__p) >> 3);
  if (2 * v36 > v35)
    v35 = 2 * v36;
  if (v36 >= 0x555555555555555)
    v37 = 0xAAAAAAAAAAAAAAALL;
  else
    v37 = v35;
  if (v37)
  {
    v38 = (char *)sub_1002596A8((uint64_t)&v105, v37);
    v33 = __p;
    v19 = v102;
  }
  else
  {
    v38 = 0;
  }
  v39 = (__n128 *)&v38[24 * v34];
  v20 = (unint64_t)&v38[24 * v37];
  v39->n128_f64[0] = v100;
  v39->n128_u64[1] = a2;
  v39[1].n128_u64[0] = 1;
  v32 = &v39[1].n128_f64[1];
  if (v19 != v33)
  {
    do
    {
      v40 = *(__n128 *)((char *)v19 - 24);
      v39[-1].n128_u64[1] = v19[-1].n128_u64[1];
      *(__n128 *)((char *)v39 - 24) = v40;
      v39 = (__n128 *)((char *)v39 - 24);
      v19 = (__n128 *)((char *)v19 - 24);
    }
    while (v19 != v33);
    v33 = __p;
  }
  __p = v39;
  v105 = (char *)v20;
  if (v33)
  {
    operator delete(v33);
    v20 = (unint64_t)v105;
  }
LABEL_41:
  v103 = v32;
  if (a7 > 0.0)
  {
    if ((unint64_t)v32 >= v20)
    {
      v42 = __p;
      v43 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)__p) >> 3) + 1;
      if (v43 > 0xAAAAAAAAAAAAAAALL)
        sub_100259694();
      v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)__p) >> 3);
      if (2 * v44 > v43)
        v43 = 2 * v44;
      if (v44 >= 0x555555555555555)
        v45 = 0xAAAAAAAAAAAAAAALL;
      else
        v45 = v43;
      if (v45)
      {
        v46 = (char *)sub_1002596A8((uint64_t)&v105, v45);
        v42 = __p;
      }
      else
      {
        v46 = 0;
      }
      v47 = (__n128 *)&v46[8 * (((char *)v32 - (char *)__p) >> 3)];
      v20 = (unint64_t)&v46[24 * v45];
      v47->n128_f64[0] = v16;
      v47->n128_u64[1] = a2;
      v47[1].n128_u64[0] = 0x200000000;
      v41 = &v47[1].n128_f64[1];
      if (v32 != (double *)v42)
      {
        do
        {
          v48 = *(__n128 *)(v32 - 3);
          v47[-1].n128_f64[1] = *(v32 - 1);
          *(__n128 *)((char *)v47 - 24) = v48;
          v47 = (__n128 *)((char *)v47 - 24);
          v32 -= 3;
        }
        while (v32 != (double *)v42);
        v42 = __p;
      }
      __p = v47;
      v105 = (char *)v20;
      if (v42)
      {
        operator delete(v42);
        v20 = (unint64_t)v105;
      }
    }
    else
    {
      *v32 = v16;
      *((_QWORD *)v32 + 1) = a2;
      *((_QWORD *)v32 + 2) = 0x200000000;
      v41 = v32 + 3;
    }
    v103 = v41;
    v32 = v41;
  }
  if ((unint64_t)v32 >= v20)
  {
    v50 = __p;
    v51 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)__p) >> 3);
    v52 = v51 + 1;
    if (v51 + 1 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)__p) >> 3);
    if (2 * v53 > v52)
      v52 = 2 * v53;
    if (v53 >= 0x555555555555555)
      v54 = 0xAAAAAAAAAAAAAAALL;
    else
      v54 = v52;
    if (v54)
    {
      v55 = (char *)sub_1002596A8((uint64_t)&v105, v54);
      v50 = __p;
      v32 = v103;
    }
    else
    {
      v55 = 0;
    }
    v56 = (__n128 *)&v55[24 * v51];
    v20 = (unint64_t)&v55[24 * v54];
    v56->n128_f64[0] = v99;
    v56->n128_u64[1] = a2;
    v56[1].n128_u64[0] = 2;
    v49 = &v56[1].n128_f64[1];
    if (v32 != (double *)v50)
    {
      do
      {
        v57 = *(__n128 *)(v32 - 3);
        v56[-1].n128_f64[1] = *(v32 - 1);
        *(__n128 *)((char *)v56 - 24) = v57;
        v56 = (__n128 *)((char *)v56 - 24);
        v32 -= 3;
      }
      while (v32 != (double *)v50);
      v50 = __p;
    }
    __p = v56;
    v105 = (char *)v20;
    if (v50)
    {
      operator delete(v50);
      v20 = (unint64_t)v105;
    }
  }
  else
  {
    *v32 = v99;
    *((_QWORD *)v32 + 1) = a2;
    *((_QWORD *)v32 + 2) = 2;
    v49 = v32 + 3;
  }
  if ((unint64_t)v49 >= v20)
  {
    v59 = __p;
    v60 = 0xAAAAAAAAAAAAAAABLL * (((char *)v49 - (char *)__p) >> 3) + 1;
    if (v60 > 0xAAAAAAAAAAAAAAALL)
      sub_100259694();
    v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - (_QWORD)__p) >> 3);
    if (2 * v61 > v60)
      v60 = 2 * v61;
    if (v61 >= 0x555555555555555)
      v62 = 0xAAAAAAAAAAAAAAALL;
    else
      v62 = v60;
    if (v62)
    {
      v63 = (char *)sub_1002596A8((uint64_t)&v105, v62);
      v59 = __p;
    }
    else
    {
      v63 = 0;
    }
    v64 = (__n128 *)&v63[8 * (((char *)v49 - (char *)__p) >> 3)];
    v65 = &v63[24 * v62];
    v64->n128_f64[0] = v98;
    v64->n128_u64[1] = a2;
    v64[1].n128_u64[0] = 1;
    v58 = (unint64_t)&v64[1].n128_u64[1];
    if (v49 != (double *)v59)
    {
      do
      {
        v66 = *(__n128 *)(v49 - 3);
        v64[-1].n128_f64[1] = *(v49 - 1);
        *(__n128 *)((char *)v64 - 24) = v66;
        v64 = (__n128 *)((char *)v64 - 24);
        v49 -= 3;
      }
      while (v49 != (double *)v59);
      v59 = __p;
    }
    __p = v64;
    v105 = v65;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *v49 = v98;
    *((_QWORD *)v49 + 1) = a2;
    *((_QWORD *)v49 + 2) = 1;
    v58 = (unint64_t)(v49 + 3);
  }
  v96 = a1;
  v104 = (__n128 *)v58;
  v68 = *a4;
  for (i = a4[1]; v68 != i; v68 += 2)
  {
    v69 = *v68;
    v70 = v17;
    v71 = 2.56;
    switch(*((_DWORD *)v68 + 2))
    {
      case 0:
        goto LABEL_102;
      case 1:
        v70 = v100;
        goto LABEL_99;
      case 2:
        v70 = v100;
        goto LABEL_101;
      case 3:
        v70 = v99;
        goto LABEL_99;
      case 4:
        v70 = v99;
        goto LABEL_101;
      case 5:
        v70 = v98;
        goto LABEL_99;
      case 6:
        v70 = v98;
LABEL_101:
        v71 = 2.56;
        goto LABEL_102;
      case 7:
        v70 = v97;
LABEL_99:
        v71 = -2.56;
LABEL_102:
        v8 = v70 + v71;
        break;
      default:
        break;
    }
    v72 = v17;
    v73 = 2.56;
    switch(*((_DWORD *)v68 + 3))
    {
      case 0:
        goto LABEL_113;
      case 1:
        v72 = v100;
        goto LABEL_110;
      case 2:
        v72 = v100;
        goto LABEL_112;
      case 3:
        v72 = v99;
        goto LABEL_110;
      case 4:
        v72 = v99;
        goto LABEL_112;
      case 5:
        v72 = v98;
        goto LABEL_110;
      case 6:
        v72 = v98;
LABEL_112:
        v73 = 2.56;
        goto LABEL_113;
      case 7:
        v72 = v97;
LABEL_110:
        v73 = -2.56;
LABEL_113:
        v7 = v72 + v73;
        break;
      default:
        break;
    }
    if (v7 - v8 > 3.84)
    {
      v74 = (double *)v105;
      if (v58 >= (unint64_t)v105)
      {
        v76 = __p;
        v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)__p) >> 3);
        v78 = v77 + 1;
        if (v77 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        if (0x5555555555555556 * ((v105 - (char *)__p) >> 3) > v78)
          v78 = 0x5555555555555556 * ((v105 - (char *)__p) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v105 - (char *)__p) >> 3) >= 0x555555555555555)
          v79 = 0xAAAAAAAAAAAAAAALL;
        else
          v79 = v78;
        if (v79)
        {
          v80 = (char *)sub_1002596A8((uint64_t)&v105, v79);
          v76 = __p;
          v58 = (unint64_t)v104;
        }
        else
        {
          v80 = 0;
        }
        v81 = &v80[24 * v77];
        *(double *)v81 = v8;
        *((_QWORD *)v81 + 1) = v69;
        *((_QWORD *)v81 + 2) = 0x200000000;
        v82 = (__n128 *)v81;
        if ((__n128 *)v58 != v76)
        {
          do
          {
            v83 = *(__n128 *)(v58 - 24);
            v82[-1].n128_u64[1] = *(_QWORD *)(v58 - 8);
            *(__n128 *)((char *)v82 - 24) = v83;
            v82 = (__n128 *)((char *)v82 - 24);
            v58 -= 24;
          }
          while ((__n128 *)v58 != v76);
          v76 = __p;
        }
        v74 = (double *)&v80[24 * v79];
        v75 = (double *)(v81 + 24);
        __p = v82;
        v105 = (char *)v74;
        if (v76)
        {
          operator delete(v76);
          v74 = (double *)v105;
        }
      }
      else
      {
        *(double *)v58 = v8;
        *(_QWORD *)(v58 + 8) = v69;
        v75 = (double *)(v58 + 24);
        *(_QWORD *)(v58 + 16) = 0x200000000;
      }
      if (v75 >= v74)
      {
        v84 = __p;
        v85 = 0xAAAAAAAAAAAAAAABLL * (((char *)v75 - (char *)__p) >> 3) + 1;
        if (v85 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v86 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)__p) >> 3);
        if (2 * v86 > v85)
          v85 = 2 * v86;
        if (v86 >= 0x555555555555555)
          v87 = 0xAAAAAAAAAAAAAAALL;
        else
          v87 = v85;
        if (v87)
        {
          v88 = (char *)sub_1002596A8((uint64_t)&v105, v87);
          v84 = __p;
        }
        else
        {
          v88 = 0;
        }
        v89 = &v88[8 * (((char *)v75 - (char *)__p) >> 3)];
        *(double *)v89 = v7;
        *((_QWORD *)v89 + 1) = v69;
        *((_QWORD *)v89 + 2) = &_mh_execute_header;
        v90 = (__n128 *)v89;
        if (v75 != (double *)v84)
        {
          do
          {
            v91 = *(__n128 *)(v75 - 3);
            v90[-1].n128_f64[1] = *(v75 - 1);
            *(__n128 *)((char *)v90 - 24) = v91;
            v90 = (__n128 *)((char *)v90 - 24);
            v75 -= 3;
          }
          while (v75 != (double *)v84);
          v84 = __p;
        }
        v58 = (unint64_t)(v89 + 24);
        __p = v90;
        v105 = &v88[24 * v87];
        if (v84)
          operator delete(v84);
      }
      else
      {
        *v75 = v7;
        *((_QWORD *)v75 + 1) = v69;
        v58 = (unint64_t)(v75 + 3);
        *((_QWORD *)v75 + 2) = &_mh_execute_header;
      }
      v104 = (__n128 *)v58;
    }
  }
  v92 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v58 - (_QWORD)__p) >> 3));
  if ((__n128 *)v58 == __p)
    v93 = 0;
  else
    v93 = v92;
  sub_100545004((uint64_t)__p, v58, v93, 1);
  v94 = __p;
  if (__p != v104)
  {
    do
    {
      sub_100544BAC((_QWORD *)(v96 + 504), v94);
      v94 = (__n128 *)((char *)v94 + 24);
    }
    while (v94 != v104);
    v94 = __p;
  }
  if (v94)
    operator delete(v94);
  return v97 + 2.56;
}

void sub_100544B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__n128 sub_100544BAC(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_100545CB4(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

uint64_t sub_100544C58@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  _QWORD *v4;
  uint64_t v6;
  int64x2_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  double v11;
  double v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  double *v26;
  char *v27;
  __int128 v28;
  char *v29;
  uint64_t v30;

  v4 = (_QWORD *)result;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v30 = (uint64_t)(a3 + 2);
  v6 = result + 504;
  v7 = (int64x2_t *)(result + 536);
  while (v4[68])
  {
    v8 = v4[67];
    v9 = *(_QWORD *)(v4[64] + 8 * (v8 / 0xAA));
    v10 = v8 % 0xAA;
    v11 = *(double *)(v9 + 24 * v10);
    if (v11 > *(double *)(a2 + 296))
      break;
    v12 = v11 + -5.0;
    v13 = v9 + 24 * v10;
    v15 = *(_DWORD *)(v13 + 16);
    v14 = *(_DWORD *)(v13 + 20);
    v16 = *(_QWORD *)(v13 + 8);
    v18 = (double *)a3[1];
    v17 = (double *)a3[2];
    if (v18 >= v17)
    {
      v20 = (double *)*a3;
      v21 = ((char *)v18 - (_BYTE *)*a3) >> 5;
      v22 = v21 + 1;
      if ((unint64_t)(v21 + 1) >> 59)
        sub_100259694();
      v23 = (char *)v17 - (char *)v20;
      if (v23 >> 4 > v22)
        v22 = v23 >> 4;
      if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0)
        v24 = 0x7FFFFFFFFFFFFFFLL;
      else
        v24 = v22;
      if (v24)
      {
        v25 = (char *)sub_10025BA00(v30, v24);
        v20 = (double *)*a3;
        v18 = (double *)a3[1];
      }
      else
      {
        v25 = 0;
      }
      v26 = (double *)&v25[32 * v21];
      *v26 = v11;
      v26[1] = v12;
      *((_DWORD *)v26 + 4) = v15;
      *((_DWORD *)v26 + 5) = v14;
      *((_QWORD *)v26 + 3) = v16;
      if (v18 == v20)
      {
        v29 = &v25[32 * v21];
      }
      else
      {
        v27 = &v25[32 * v21];
        do
        {
          v28 = *((_OWORD *)v18 - 1);
          v29 = v27 - 32;
          *((_OWORD *)v27 - 2) = *((_OWORD *)v18 - 2);
          *((_OWORD *)v27 - 1) = v28;
          v18 -= 4;
          v27 -= 32;
        }
        while (v18 != v20);
      }
      v19 = v26 + 4;
      *a3 = v29;
      a3[1] = v26 + 4;
      a3[2] = &v25[32 * v24];
      if (v20)
        operator delete(v20);
    }
    else
    {
      *v18 = v11;
      v18[1] = v12;
      *((_DWORD *)v18 + 4) = v15;
      *((_DWORD *)v18 + 5) = v14;
      v19 = v18 + 4;
      *((_QWORD *)v18 + 3) = v16;
    }
    a3[1] = v19;
    *v7 = vaddq_s64(*v7, (int64x2_t)xmmword_101B9DFC0);
    result = sub_10047FDC4(v6, 1);
  }
  return result;
}

void sub_100544E2C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100544E4C(_QWORD *a1)
{
  *a1 = off_102142A38;
  sub_10047F660(a1 + 63);
  return sub_100544074((uint64_t)a1);
}

void sub_100544E80(_QWORD *a1)
{
  *a1 = off_102142A38;
  sub_10047F660(a1 + 63);
  sub_100544074((uint64_t)a1);
  operator delete();
}

void sub_100544EC8(id a1)
{
  qword_10229FE68 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Workout");
}

void sub_100544EF4(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100544F70(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 12;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 24;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_10002E778((uint64_t)a1);
}

void sub_100545004(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  double v19;
  unint64_t v20;
  unint64_t v21;
  double v22;
  double v23;
  unint64_t v24;
  __int128 v25;
  double v26;
  double v27;
  __int128 v28;
  BOOL v29;
  double v30;
  unint64_t v31;
  unint64_t v32;
  double v33;
  __int128 v34;
  double v35;
  double v36;
  __int128 v37;
  unint64_t v38;
  double v39;
  __int128 v40;
  __int128 *v41;
  __int128 *v42;
  __int128 *v43;
  unint64_t v44;
  double v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  unint64_t v53;
  BOOL v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  double v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  double v69;
  unint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  int64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  int64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  double v85;
  unint64_t v86;
  __int128 v87;
  uint64_t v89;
  double v90;
  unint64_t v91;
  double v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

__int128 *sub_100545880(__int128 *result, __int128 *a2, __int128 *a3)
{
  double v3;
  double v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(double *)a2;
  v4 = *(double *)a3;
  if (*(double *)a2 >= *(double *)result)
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if (*(double *)a2 < *(double *)result)
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v13;
        *a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v16;
      *a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if (*(double *)a3 >= *(double *)a2)
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_100545970(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  __int128 *v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__int128 *)(a2 - 24);
      if (*(double *)(a2 - 24) < *(double *)a1)
      {
        v7 = *(_QWORD *)(a1 + 16);
        v8 = *(_OWORD *)a1;
        v9 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *v6;
        *(_QWORD *)(a1 + 16) = v9;
        *v6 = v8;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3uLL:
      sub_100545880((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_100545BE8(a1, a1 + 24, a1 + 48, (unint64_t *)(a2 - 24));
      return 1;
    case 5uLL:
      v18 = (__int128 *)(a1 + 24);
      v19 = (__int128 *)(a1 + 48);
      v20 = (__int128 *)(a1 + 72);
      sub_100545BE8(a1, a1 + 24, a1 + 48, (unint64_t *)(a1 + 72));
      v22 = *(double *)(a2 - 24);
      v21 = a2 - 24;
      if (v22 < *(double *)(a1 + 72))
      {
        v23 = *(_QWORD *)(a1 + 88);
        v24 = *v20;
        v25 = *(_QWORD *)(v21 + 16);
        *v20 = *(_OWORD *)v21;
        *(_QWORD *)(a1 + 88) = v25;
        *(_OWORD *)v21 = v24;
        *(_QWORD *)(v21 + 16) = v23;
        if (*(double *)v20 < *(double *)v19)
        {
          v26 = *(_QWORD *)(a1 + 64);
          v27 = *v19;
          *v19 = *v20;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v20 = v27;
          *(_QWORD *)(a1 + 88) = v26;
          if (*(double *)v19 < *(double *)v18)
          {
            v28 = *(_QWORD *)(a1 + 40);
            v29 = *v18;
            *v18 = *v19;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v19 = v29;
            *(_QWORD *)(a1 + 64) = v28;
            if (*(double *)(a1 + 24) < *(double *)a1)
            {
              v30 = *(_QWORD *)(a1 + 16);
              v31 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v18;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v18 = v31;
              *(_QWORD *)(a1 + 40) = v30;
            }
          }
        }
      }
      return 1;
    default:
      v10 = (double *)(a1 + 48);
      sub_100545880((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v11 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    v14 = *(double *)v11;
    if (*(double *)v11 < *v10)
    {
      v32 = *(_OWORD *)(v11 + 8);
      v15 = v12;
      while (1)
      {
        v16 = a1 + v15;
        *(_OWORD *)(v16 + 72) = *(_OWORD *)(a1 + v15 + 48);
        *(_QWORD *)(v16 + 88) = *(_QWORD *)(a1 + v15 + 64);
        if (v15 == -48)
          break;
        v15 -= 24;
        if (v14 >= *(double *)(v16 + 24))
        {
          v17 = a1 + v15 + 72;
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *(double *)v17 = v14;
      *(_OWORD *)(v17 + 8) = v32;
      if (++v13 == 8)
        return v11 + 24 == a2;
    }
    v10 = (double *)v11;
    v12 += 24;
    v11 += 24;
    if (v11 == a2)
      return 1;
  }
}

__n128 sub_100545BE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  __n128 result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_100545880((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  result.n128_u64[0] = *a4;
  if (*(double *)a4 < *(double *)a3)
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    a4[2] = v9;
    result.n128_u64[0] = *(_QWORD *)a3;
    if (*(double *)a3 < *(double *)a2)
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      result.n128_u64[0] = *(_QWORD *)a2;
      if (*(double *)a2 < *(double *)a1)
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

void sub_100545CB4(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_100212218(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_100343094((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_10025E6A0((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_10003732C(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1003431B0((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_100545F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100545FC8(uint64_t a1, double *a2)
{
  unsigned __int8 v4;
  unint64_t v5;
  uint64_t result;
  _QWORD v7[19];
  __int16 v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD v13[6];
  char v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[25];
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  __int16 v41;
  __int128 v42;
  __int128 v43;
  char v44;
  _BYTE v45[11];
  int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  unint64_t v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  unint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  int v96;
  unint64_t v97;
  __int16 v98;
  int v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;

  v4 = atomic_load((unsigned __int8 *)&qword_102301B10);
  if ((v4 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_102301B10))
    {
      LODWORD(v7[0]) = 8;
      sub_100546300(qword_102301AF8, v7, 1uLL);
      __cxa_atexit((void (*)(void *))sub_100546380, qword_102301AF8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_102301B10);
    }
  }
  v8 = 0;
  *(_OWORD *)v7 = xmmword_101BB1ED0;
  memset(&v7[2], 0, 135);
  v9 = xmmword_101BB1ED0;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13[0] = 0;
  *(_QWORD *)((char *)v13 + 5) = 0;
  *(_QWORD *)((char *)&v13[1] + 6) = 0;
  v14 = 0;
  memset(&v13[3], 0, 24);
  v15 = xmmword_101BB1ED0;
  v16 = 0;
  v17 = 0;
  v18 = 0xFFEFFFFFFFFFFFFFLL;
  v29 = 0;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  v25 = 0u;
  v26 = 0u;
  v27 = 0u;
  memset(v28, 0, sizeof(v28));
  v30 = 0;
  v31 = 0;
  v32 = 0xFFEFFFFFFFFFFFFFLL;
  v33 = 0;
  v34 = 0;
  v40 = 0;
  v41 = 0;
  v46 = 0;
  v39 = 0;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  v43 = 0u;
  v42 = 0u;
  v44 = 0;
  memset(v45, 0, sizeof(v45));
  v47 = 0xFFEFFFFFFFFFFFFFLL;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v63 = 0u;
  v62 = 0u;
  v61 = 0u;
  v60 = 0u;
  v59 = 0u;
  v58 = 0u;
  v57 = 0u;
  v56 = 0u;
  v55 = 0u;
  v54 = 0u;
  v53 = 0u;
  v52 = 0u;
  v51 = 0u;
  v50 = 0u;
  v49 = 0u;
  v48 = 0u;
  v67 = 0;
  v68 = 0xFFEFFFFFFFFFFFFFLL;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0xFFEFFFFFFFFFFFFFLL;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0;
  v78 = 0xFFEFFFFFFFFFFFFFLL;
  v80 = 0;
  v79 = 0;
  v81 = 0x80000000800000;
  v83 = 0;
  v82 = 0;
  v84 = xmmword_101BB1EE0;
  v85 = 0x80000000800000;
  v86 = 0u;
  v87 = 0u;
  v88 = 0;
  v89 = 0xFFEFFFFFFFFFFFFFLL;
  v90 = 0u;
  v91 = 0u;
  v92 = 0u;
  v93 = 0u;
  v94 = 0u;
  v95 = 0u;
  v96 = 0;
  v97 = 0xFFEFFFFFFFFFFFFFLL;
  v98 = 0;
  v99 = 0;
  v100 = 0xFFEFFFFFFFFFFFFFLL;
  v101 = 7;
  v102 = 0xFFEFFFFFFFFFFFFFLL;
  v103 = 0;
  v105 = 0;
  v104 = 0;
  v106 = 0;
  if (!sub_1000D03AC(a2, qword_102301AF8, (uint64_t)v7))
    return 0;
  if (*(double *)&v53 > 0.0)
  {
    v5 = *(_QWORD *)(a1 + 8) + 1;
    *(_QWORD *)(a1 + 8) = v5;
    if (v5 >= 0x24)
    {
      *(_QWORD *)(a1 + 8) = 0;
      return 2;
    }
    return 0;
  }
  result = 0;
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

void sub_1005462E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102301B10);
  _Unwind_Resume(a1);
}

_QWORD *sub_100546300(_QWORD *a1, const void *a2, unint64_t a3)
{
  char *v6;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    sub_1002720D4(a1, a3);
    v6 = (char *)a1[1];
    memmove(v6, a2, 4 * a3);
    a1[1] = &v6[4 * a3];
  }
  return a1;
}

void sub_100546364(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100546380(uint64_t a1)
{
  void *v2;

  v2 = *(void **)a1;
  if (v2)
  {
    *(_QWORD *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1005463B0(uint64_t a1, void *a2)
{
  sub_101155E0C(a1, a2);
}

uint64_t sub_1005463E4(id *a1)
{
  *a1 = off_102142AE0;
  sub_100546418(a1);
  return sub_10115681C((uint64_t)a1);
}

void sub_100546418(id *a1)
{
  objc_msgSend(a1[28], "invalidate");

  a1[28] = 0;
  objc_msgSend(a1[29], "invalidate");

  a1[29] = 0;
  objc_msgSend(a1[30], "invalidate");

  a1[30] = 0;
  objc_msgSend(a1[31], "invalidate");

  a1[31] = 0;
}

void sub_100546488(id *a1)
{
  sub_1005463E4(a1);
  operator delete();
}

void sub_1005464AC(uint64_t a1, void *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  __int128 v7;
  __int128 v8;
  int v9;
  uint8_t buf[4];
  __int128 v11;
  __int128 v12;
  int v13;

  if (a2 && objc_msgSend(a2, "length"))
  {
    objc_msgSend(a2, "getBytes:length:", buf, 40);
    if (!*(_DWORD *)buf)
    {
      v7 = v11;
      v8 = v12;
      v9 = v13;
      uuid_copy((unsigned __int8 *)&v8 + 4, (const unsigned __int8 *)&v12 + 4);
      if (*((_QWORD *)&v7 + 1))
      {
        if (*(_QWORD *)(a1 + 117) != *((_QWORD *)&v7 + 1))
          sub_1011568F0(a1, &v7);
        sub_100546878(a1);
      }
      else
      {
        sub_1005466D0(a1);
      }
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v4 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "MotionStateObserver, Invalid data received.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142C08);
      LOWORD(v7) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 17, "MotionStateObserver, Invalid data received.", &v7, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionStateObserverCompanion::receiveMotionStateUpdate(NSData *)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
}

id sub_1005466D0(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  sub_101156D08(a1);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142C08);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Disabling update timer.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver, Disabling update timer.", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::stopSessionAndTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:interval:", 1.79769313e308, 1.79769313e308);
}

id sub_100546878(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  __int16 v6;
  _QWORD v7[5];
  uint8_t buf[1640];

  objc_msgSend(*(id *)(a1 + 152), "invalidate");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_100546A5C;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(*(id *)(a1 + 152), "setHandler:", v7);
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142C08);
  v2 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Starting update timer.", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v6 = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver, Starting update timer.", &v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::startSessionTimer()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  return objc_msgSend(*(id *)(a1 + 152), "setNextFireDelay:", 90.0);
}

_QWORD *sub_100546A5C(_QWORD *result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  int v5;
  uint64_t v6;
  uint8_t buf[4];
  uint64_t v8;

  v1 = result[4];
  if (*(_DWORD *)(v1 + 117) || *(_DWORD *)(v1 + 121))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v2 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v8 = 0x4056800000000000;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MotionStateObserver, Timing out session since we have not heard a response in %f seconds.", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142C08);
      v5 = 134217984;
      v6 = 0x4056800000000000;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver, Timing out session since we have not heard a response in %f seconds.", COERCE_DOUBLE(&v5));
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::startSessionTimer()_block_invoke", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return sub_1005466D0(v1);
  }
  return result;
}

void sub_100546C2C(uint64_t a1, _DWORD *a2, unsigned __int8 *a3)
{
  int v3;

  if (*a2 == 6)
  {
    v3 = *a3;
    if (*(unsigned __int8 *)(a1 + 208) != v3)
    {
      *(_BYTE *)(a1 + 208) = v3;
      sub_100546C54(a1);
    }
  }
}

void sub_100546C54(uint64_t a1)
{
  double Current;
  BOOL v3;
  double v4;
  NSObject *v6;
  float v7;
  NSObject *v8;
  float v9;
  const char *v10;
  char *v11;
  const char *v12;
  char *v13;
  __int128 v14;
  int v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  _BYTE buf[20];
  int v23;

  if (+[CMActivityAlarmLocal activityAlarmAvailable](CMActivityAlarmLocal, "activityAlarmAvailable"))
  {
    sub_100546418((id *)a1);
    if (*(_BYTE *)(a1 + 208)
      && *(_BYTE *)(a1 + 160)
      && (*(_DWORD *)buf = 1, sub_1001B7864(a1, (int *)buf, 1)))
    {
      Current = CFAbsoluteTimeGetCurrent();
      v14 = *(_OWORD *)(a1 + 162);
      v15 = *(_DWORD *)(a1 + 178);
      v3 = Current < *(double *)&v14;
      v4 = vabdd_f64(Current, *(double *)&v14);
      if (v3 || v4 > 320.0)
      {
        v14 = 0x10000000000000uLL;
        v15 = 0;
      }
      sub_101156F5C(a1, &v14);
      v16 = 1;
      *(_OWORD *)buf = v14;
      *(_DWORD *)&buf[16] = v15;
      (*(void (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v16, buf, 0, 0xFFFFFFFFLL, 0);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142C08);
      v6 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134218496;
        *(_QWORD *)&buf[4] = v14;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = DWORD2(v14);
        *(_WORD *)&buf[18] = 1024;
        v23 = HIDWORD(v14);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,MotionState,startTime,%.3f,activityType,%d,vehicularConfidence,%d", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142C08);
        v16 = 134218496;
        v17 = v14;
        v18 = 1024;
        v19 = DWORD2(v14);
        v20 = 1024;
        v21 = HIDWORD(v14);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver,VehicularTracking,MotionState,startTime,%.3f,activityType,%d,vehicularConfidence,%d", COERCE_DOUBLE(&v16), 24, (_DWORD)v14);
        v13 = (char *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      if ((HIDWORD(v14) - 2) < 3)
      {
        v7 = *(double *)(a1 + 216) + 300.0;
        *(_QWORD *)(a1 + 240) = sub_1005470FC(a1, 4, v7);
LABEL_27:
        *(_QWORD *)(a1 + 248) = sub_1005470FC(a1, 5, 10.0);
        return;
      }
      if (HIDWORD(v14) == 1)
      {
        v9 = *(double *)(a1 + 216) + 300.0;
        *(_QWORD *)(a1 + 240) = sub_1005470FC(a1, 4, v9);
        *(_QWORD *)(a1 + 232) = sub_1005470FC(a1, 16, 10.0);
        goto LABEL_27;
      }
      if (!HIDWORD(v14))
        *(_QWORD *)(a1 + 224) = sub_1005470FC(a1, 4, 10.0);
    }
    else
    {
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102142C08);
      v8 = qword_10229FC78;
      if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,STOP", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_102142C08);
        LOWORD(v16) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver,VehicularTracking,STOP", &v16, 2);
        v11 = (char *)v10;
        sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::trackVehicularConfidenceStateMachine()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
  }
}

void sub_1005470D8(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  int v3;

  if (!*a2)
  {
    v3 = *(unsigned __int8 *)(a3 + 3);
    if (*(unsigned __int8 *)(a1 + 160) != v3)
    {
      *(_BYTE *)(a1 + 160) = v3;
      sub_100546C54(a1);
    }
  }
}

CMActivityAlarmLocal *sub_1005470FC(uint64_t a1, uint64_t a2, float a3)
{
  NSObject *v6;
  double v7;
  CMActivityAlarmLocal *v8;
  id v9;
  const char *v11;
  uint8_t *v12;
  double v13;
  _QWORD v14[5];
  _DWORD v15[2];
  __int16 v16;
  double v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  double v21;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142C08);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v19 = a2;
    v20 = 2048;
    v21 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,setActivityAlarm,%d,duration,%0.3f", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v7 = a3;
    v15[0] = 67109376;
    v15[1] = a2;
    v16 = 2048;
    v17 = v7;
    LODWORD(v13) = 18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "MotionStateObserver,VehicularTracking,setActivityAlarm,%d,duration,%0.3f", v15, v13);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "CMActivityAlarm *CLMotionStateObserverCompanion::createActivityAlarm(const CMActivityAlarmTrigger, const float)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  else
  {
    v7 = a3;
  }
  v8 = [CMActivityAlarmLocal alloc];
  v9 = objc_msgSend(*(id *)(a1 + 40), "queue");
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_100547338;
  v14[3] = &unk_102142BD0;
  v14[4] = a1;
  return -[CMActivityAlarmLocal initWithTrigger:duration:onQueue:withHandler:](v8, "initWithTrigger:duration:onQueue:withHandler:", a2, v9, v14, v7);
}

id sub_100547338(uint64_t a1, void *a2)
{
  return sub_100547340(*(_QWORD *)(a1 + 32), a2);
}

id sub_100547340(uint64_t a1, void *a2)
{
  NSObject *v4;
  id result;
  double v6;
  uint64_t v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  unsigned int v12;

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102142C08);
  v4 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v12 = objc_msgSend(a2, "trigger");
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "MotionStateObserver,VehicularTracking,onActivityAlarm,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102142C08);
    v7 = qword_10229FC78;
    v10[0] = 67109120;
    v10[1] = objc_msgSend(a2, "trigger");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "MotionStateObserver,VehicularTracking,onActivityAlarm,%d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateObserverCompanion::onActivityAlarm(CMActivityAlarm *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  result = objc_msgSend(a2, "trigger");
  if ((_DWORD)result == 16)
  {
LABEL_9:
    objc_msgSend(a2, "activityDuration");
    if (*(double *)(a1 + 216) >= v6)
      v6 = *(double *)(a1 + 216);
    *(double *)(a1 + 216) = v6;
    return (id)sub_100546C54(a1);
  }
  if ((_DWORD)result != 5)
  {
    if ((_DWORD)result != 4)
      return result;
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 216) = 0;
  return (id)sub_100546C54(a1);
}

BOOL sub_100547548(uint64_t a1, int a2, int *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _BOOL4 v12;
  _BOOL8 result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  uint64_t *v21;
  _QWORD *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  _QWORD *v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _QWORD *v30;
  __int16 v31;
  int v32;

  v5 = *(_QWORD *)(a1 + 88);
  if (!v5)
    goto LABEL_11;
  v6 = a1 + 88;
  do
  {
    v7 = *(_DWORD *)(v5 + 32);
    v8 = v7 < a2;
    if (v7 >= a2)
      v9 = (uint64_t *)v5;
    else
      v9 = (uint64_t *)(v5 + 8);
    if (!v8)
      v6 = v5;
    v5 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= a2)
  {
    v16 = *(_QWORD *)(v6 + 48);
    v14 = v6 + 48;
    v15 = v16;
    if (!v16)
      goto LABEL_29;
    v17 = *a3;
    v18 = v14;
    do
    {
      v19 = *(_DWORD *)(v15 + 28);
      v20 = v19 < v17;
      if (v19 >= v17)
        v21 = (uint64_t *)v15;
      else
        v21 = (uint64_t *)(v15 + 8);
      if (!v20)
        v18 = v15;
      v15 = *v21;
    }
    while (*v21);
    if (v18 == v14 || v17 < *(_DWORD *)(v18 + 28))
LABEL_29:
      v18 = v14;
    return v18 != v14;
  }
  else
  {
LABEL_11:
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142C28);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
    {
      v11 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 136446466;
      v30 = v11;
      v31 = 1026;
      v32 = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
        buf,
        0x12u);
    }
    v12 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v12)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102142C28);
      v22 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v22 = (_QWORD *)*v22;
      v25 = 136446466;
      v26 = v22;
      v27 = 1026;
      v28 = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
        &v25,
        18);
      v24 = (uint8_t *)v23;
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::clientRegistered(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
      if (v24 != buf)
        free(v24);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1005477C8(uint64_t a1, int *a2, uint64_t a3)
{
  char *v6;
  __int128 v7;
  uint64_t **v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v13;
  __int128 v14;
  int *v15;

  v6 = (char *)operator new(0x40uLL);
  v7 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)a3;
  *((_QWORD *)v6 + 2) = 0;
  *(_QWORD *)v6 = off_102142C58;
  *((_QWORD *)v6 + 1) = 0;
  *(_OWORD *)(v6 + 40) = v7;
  *((_DWORD *)v6 + 14) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)&v14 = v6 + 24;
  *((_QWORD *)&v14 + 1) = v6;
  v13 = *a2;
  v15 = &v13;
  v8 = sub_1004A5DC8((uint64_t **)(a1 + 56), &v13, (uint64_t)&unk_101B9EB60, &v15);
  sub_1002B7674((uint64_t)(v8 + 8), &v14);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  return 1;
}

void sub_1005478A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005478BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD v5[2];
  int v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v5, a3, a4, 0);
}

void sub_100547928(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v31[20];
  __int16 v32;
  _QWORD *v33;
  __int16 v34;
  std::__shared_weak_count *v35;
  _QWORD **v36;
  _QWORD *v37[3];
  std::__shared_weak_count *v38;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142C28);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v31 = 2082;
      *(_QWORD *)&v31[2] = "";
      *(_WORD *)&v31[10] = 2082;
      *(_QWORD *)&v31[12] = "activity";
      v32 = 2082;
      v33 = v10;
      v34 = 2050;
      v35 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v36 = v37;
      memset(v37, 0, sizeof(v37));
      v38 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v36);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v31, *(_QWORD **)&v31[8]);
      v21 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v36, v37[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0x40uLL);
      v25 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v24 + 24) = *(_OWORD *)a3;
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_102142C58;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 40) = v25;
      *((_DWORD *)v24 + 14) = *(_DWORD *)(a3 + 32);
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v31 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v26 = *(std::__shared_weak_count **)v31;
      if (*(_QWORD *)v31)
      {
        v27 = (unint64_t *)(*(_QWORD *)v31 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10054858C();
    os_activity_scope_leave(&state);
  }
}

void sub_100547F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_100547FB8(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  _QWORD *v4;
  const char *v5;
  uint8_t *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  NSObject *v13;
  _QWORD *v14;
  int v15;
  int v16;
  _QWORD *v17;
  _QWORD *v18;
  BOOL v19;
  _QWORD *v20;
  int v21;
  int v22;
  const char *v23;
  uint8_t *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  int v32;
  _QWORD *v33;
  __int16 v34;
  _QWORD v35[2];
  uint8_t buf[4];
  _QWORD *v37;
  __int16 v38;
  _QWORD v39[202];

  if (*(_BYTE *)(a1 + 108))
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142C28);
    v2 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136315138;
      v37 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "%s; already shutdown; not listing clients",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102142C28);
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v4;
      v32 = 136315138;
      v33 = v4;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; already shutdown; not listing clients",
        (const char *)&v32);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  else
  {
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142C28);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v8 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v8 = (_QWORD *)*v8;
      v9 = *(_QWORD *)(a1 + 96);
      *(_DWORD *)buf = 136315394;
      v37 = v8;
      v38 = 2048;
      v39[0] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "%s; listing clients, num clients: %zu",
        buf,
        0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102142C28);
      v27 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v27 = (_QWORD *)*v27;
      v28 = *(_QWORD *)(a1 + 96);
      v32 = 136315394;
      v33 = v27;
      v34 = 2048;
      v35[0] = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; listing clients, num clients: %zu",
        (const char *)&v32,
        22);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v10 = *(_QWORD **)(a1 + 80);
    if (v10 != (_QWORD *)(a1 + 88))
    {
      v11 = (_QWORD *)(a1 + 8);
      do
      {
        v12 = (_QWORD *)v10[5];
        if (v12 != v10 + 6)
        {
          do
          {
            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_102142C28);
            v13 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              v14 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v14 = (_QWORD *)*v11;
              v15 = *((_DWORD *)v10 + 8);
              v16 = *((_DWORD *)v12 + 7);
              *(_DWORD *)buf = 136315650;
              v37 = v14;
              v38 = 1024;
              LODWORD(v39[0]) = v15;
              WORD2(v39[0]) = 1024;
              *(_DWORD *)((char *)v39 + 6) = v16;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "%s; clients, id: %d, notification: %d",
                buf,
                0x18u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102142C28);
              v20 = (_QWORD *)(a1 + 8);
              if (*(char *)(a1 + 31) < 0)
                v20 = (_QWORD *)*v11;
              v21 = *((_DWORD *)v10 + 8);
              v22 = *((_DWORD *)v12 + 7);
              v32 = 136315650;
              v33 = v20;
              v34 = 1024;
              LODWORD(v35[0]) = v21;
              WORD2(v35[0]) = 1024;
              *(_DWORD *)((char *)v35 + 6) = v22;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 2, "%s; clients, id: %d, notification: %d",
                (const char *)&v32,
                24,
                v31);
              v24 = (uint8_t *)v23;
              sub_100512490("Generic", 1, 0, 2, "virtual void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::listClients() [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v23);
              if (v24 != buf)
                free(v24);
            }
            v17 = (_QWORD *)v12[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v12[2];
                v19 = *v18 == (_QWORD)v12;
                v12 = v18;
              }
              while (!v19);
            }
            v12 = v18;
          }
          while (v18 != v10 + 6);
        }
        v25 = (_QWORD *)v10[1];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = (_QWORD *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            v26 = (_QWORD *)v10[2];
            v19 = *v26 == (_QWORD)v10;
            v10 = v26;
          }
          while (!v19);
        }
        v10 = v26;
      }
      while (v26 != (_QWORD *)(a1 + 88));
    }
  }
}

void sub_100548560(id a1)
{
  qword_10229FC78 = (uint64_t)os_log_create("com.apple.locationd.Motion", "Motion");
}

void sub_10054858C()
{
  operator new();
}

void sub_100548624(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t *v50;
  _QWORD *v51;
  int v52;
  _QWORD *v53;
  __int16 v54;
  int v55;
  uint8_t buf[4];
  _QWORD *v57;
  __int16 v58;
  int v59;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v51 = v9;
        v13 = sub_100548B70(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 7);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v50 = v19;
              sub_1005489F8(a1, (uint64_t)&v50, (uint64_t)&v51, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v51 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 28);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 7))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 28);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v50 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102142C28);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 7);
                *(_DWORD *)buf = 136446466;
                v57 = v25;
                v58 = 1026;
                v59 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102142C28);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 7);
                v52 = 136446466;
                v53 = v45;
                v54 = 1026;
                v55 = v46;
                LODWORD(v49) = 18;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                  &v52,
                  v49);
                v48 = (uint8_t *)v47;
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v47);
                if (v48 != buf)
                  free(v48);
              }
            }
          }
          while (v14 != v51 + 6);
        }
      }
    }
  }
}

_BYTE *sub_1005489F8(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_100548B70(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_1001AFE94(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 4);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

void sub_100548AD4(id a1)
{
  qword_1022A0228 = (uint64_t)os_log_create("com.apple.locationd.Core", "Notifier");
}

void sub_100548B00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_102142C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100548B14(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_102142C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  operator delete();
}

uint64_t sub_100548B50(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

id sub_100548B70(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100548BE8(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100548DA0(a1);
  else
    return 0;
}

id sub_100548BE8(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  char v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return sub_100548F74((uint64_t)&v8, a1);
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102142C98);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101BB5FC2 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102142C98);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    *(_DWORD *)buf = 134218498;
    v10 = v2;
    v11 = 2048;
    v12 = 0;
    v13 = 2080;
    v14 = 0x8000000101BB5FC2 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
  return 0;
}

id sub_100548DA0(void *a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v7;
  int v8;
  id v9;
  __int16 v10;
  uint64_t v11;
  __int16 v12;
  unint64_t v13;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102142C98);
    v3 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BB5FC2 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v3;
    v5 = OS_LOG_TYPE_ERROR;
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102142C98);
    v7 = qword_10229FC38;
    if (!os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
      return 0;
    v8 = 134218498;
    v9 = v2;
    v10 = 2048;
    v11 = 0;
    v12 = 2080;
    v13 = 0x8000000101BB5FC2 & 0x7FFFFFFFFFFFFFFFLL;
    v4 = v7;
    v5 = OS_LOG_TYPE_FAULT;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, v5, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", (uint8_t *)&v8, 0x20u);
  return 0;
}

id sub_100548F74(uint64_t a1, void *a2)
{
  if (!objc_msgSend(a2, "cppObjectPtr")
    && objc_msgSend(objc_msgSend(a2, "compatibilityInfo"), "isEqual:", &off_10221B120))
  {
    if (objc_msgSend(objc_msgSend(a2, "serialized"), "length") != (id)36)
      sub_1018FE950();
    objc_msgSend(a2, "setCppObjectPtr:", objc_msgSend(objc_msgSend(a2, "serialized"), "bytes"));
  }
  return objc_msgSend(a2, "cppObjectPtr");
}

void sub_100548FE8(id a1)
{
  qword_10229FC38 = (uint64_t)os_log_create("com.apple.locationd.Support", "Support");
}

void sub_100549014()
{
  operator new();
}

uint64_t sub_1005490AC(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 32);
  if (result)
    operator delete();
  return result;
}

BOOL sub_1005490CC()
{
  uint64_t v0;

  return os_log_type_enabled(*(os_log_t *)(v0 + 3128), OS_LOG_TYPE_INFO);
}

uint64_t sub_100549368(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  unint64_t v20;
  int v21;
  unint64_t v22;
  char v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;

  while (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) < *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      break;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        v6 = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      v6 = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      break;
    switch((v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_41;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_43;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_41:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_43:
        v28 = 16;
        goto LABEL_48;
      case 2u:
        *(_BYTE *)(a1 + 24) |= 2u;
        v20 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v20 <= 0xFFFFFFFFFFFFFFFBLL && v20 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v20);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v20 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 12;
        goto LABEL_53;
      case 3u:
        *(_BYTE *)(a1 + 24) |= 4u;
        v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v22 <= 0xFFFFFFFFFFFFFFFBLL && v22 + 4 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v21 = *(_DWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v22 + 4;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v21 = 0;
        }
        v29 = 20;
LABEL_53:
        *(_DWORD *)(a1 + v29) = v21;
        continue;
      case 4u:
        v23 = 0;
        v24 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 24) |= 1u;
        break;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        continue;
    }
    while (1)
    {
      v25 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v26 = v25 + 1;
      if (v25 == -1 || v26 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v27 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v25);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v26;
      v15 |= (unint64_t)(v27 & 0x7F) << v23;
      if ((v27 & 0x80) == 0)
        goto LABEL_45;
      v23 += 7;
      v10 = v24++ >= 9;
      if (v10)
      {
        LODWORD(v15) = 0;
        goto LABEL_47;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_45:
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v15) = 0;
LABEL_47:
    v28 = 8;
LABEL_48:
    *(_DWORD *)(a1 + v28) = v15;
  }
  return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
}

uint64_t sub_10054A1E8(uint64_t a1, uint64_t a2)
{
  char v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  BOOL v10;
  int v11;
  char v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t result;
  char v20;
  unsigned int v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  TRANSITPbLocationFingerprintsV1 *v43;
  char v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  char v48;
  TRANSITPbLocationFingerprints *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
    return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
  while (2)
  {
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    v4 = 0;
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
      v8 = v7 + 1;
      if (v7 == -1 || v8 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        break;
      v9 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v7);
      *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v8;
      v6 |= (unint64_t)(v9 & 0x7F) << v4;
      if ((v9 & 0x80) == 0)
        goto LABEL_11;
      v4 += 7;
      v10 = v5++ >= 9;
      if (v10)
      {
        LODWORD(v6) = 0;
        v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
        goto LABEL_13;
      }
    }
    *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_11:
    v11 = *(unsigned __int8 *)(a2 + OBJC_IVAR___PBDataReader__error);
    if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
      LODWORD(v6) = 0;
LABEL_13:
    if (v11 || (v6 & 7) == 4)
      return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
    switch((unsigned __int16)(v6 >> 3))
    {
      case 1u:
        v13 = 0;
        v14 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 68) |= 0x40u;
        while (1)
        {
          v16 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v17 = v16 + 1;
          if (v16 == -1 || v17 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            break;
          v18 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v16);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v17;
          v15 |= (unint64_t)(v18 & 0x7F) << v13;
          if ((v18 & 0x80) == 0)
            goto LABEL_72;
          v13 += 7;
          v10 = v14++ >= 9;
          if (v10)
          {
            LODWORD(v15) = 0;
            goto LABEL_74;
          }
        }
        *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
LABEL_72:
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_74:
        v50 = 64;
        goto LABEL_91;
      case 2u:
        v20 = 0;
        v21 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 68) |= 0x10u;
        while (2)
        {
          v22 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v23 = v22 + 1;
          if (v22 == -1 || v23 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v24 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v22);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v23;
            v15 |= (unint64_t)(v24 & 0x7F) << v20;
            if (v24 < 0)
            {
              v20 += 7;
              v10 = v21++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_78;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_78:
        v50 = 56;
        goto LABEL_91;
      case 3u:
        v25 = 0;
        v26 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 68) |= 0x20u;
        while (2)
        {
          v27 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v28 = v27 + 1;
          if (v27 == -1 || v28 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v29 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v27);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v28;
            v15 |= (unint64_t)(v29 & 0x7F) << v25;
            if (v29 < 0)
            {
              v25 += 7;
              v10 = v26++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_82;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_82:
        v50 = 60;
        goto LABEL_91;
      case 4u:
        v30 = 0;
        v31 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 68) |= 4u;
        while (2)
        {
          v33 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v34 = v33 + 1;
          if (v33 == -1 || v34 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v35 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v33);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v34;
            v32 |= (unint64_t)(v35 & 0x7F) << v30;
            if (v35 < 0)
            {
              v30 += 7;
              v10 = v31++ >= 9;
              if (v10)
              {
                v32 = 0;
                goto LABEL_86;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v32 = 0;
LABEL_86:
        v51 = 24;
        goto LABEL_96;
      case 5u:
        *(_BYTE *)(a1 + 68) |= 1u;
        v36 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
        if (v36 <= 0xFFFFFFFFFFFFFFF7 && v36 + 8 <= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
        {
          v37 = *(_QWORD *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v36);
          *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v36 + 8;
        }
        else
        {
          *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          v37 = 0;
        }
        *(_QWORD *)(a1 + 8) = v37;
        goto LABEL_99;
      case 6u:
        v38 = 0;
        v39 = 0;
        v15 = 0;
        *(_BYTE *)(a1 + 68) |= 8u;
        while (2)
        {
          v40 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v41 = v40 + 1;
          if (v40 == -1 || v41 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v42 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v40);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v41;
            v15 |= (unint64_t)(v42 & 0x7F) << v38;
            if (v42 < 0)
            {
              v38 += 7;
              v10 = v39++ >= 9;
              if (v10)
              {
                LODWORD(v15) = 0;
                goto LABEL_90;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          LODWORD(v15) = 0;
LABEL_90:
        v50 = 40;
LABEL_91:
        *(_DWORD *)(a1 + v50) = v15;
        goto LABEL_99;
      case 7u:
        v43 = objc_alloc_init(TRANSITPbLocationFingerprintsV1);

        *(_QWORD *)(a1 + 32) = v43;
        v52 = 0;
        v53 = 0;
        if (!PBReaderPlaceMark(a2, &v52) || (sub_1011554A8(v43, a2) & 1) == 0)
          return 0;
        goto LABEL_70;
      case 8u:
        v44 = 0;
        v45 = 0;
        v32 = 0;
        *(_BYTE *)(a1 + 68) |= 2u;
        while (2)
        {
          v46 = *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos);
          v47 = v46 + 1;
          if (v46 == -1 || v47 > *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
          {
            *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) = 1;
          }
          else
          {
            v48 = *(_BYTE *)(*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__bytes) + v46);
            *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) = v47;
            v32 |= (unint64_t)(v48 & 0x7F) << v44;
            if (v48 < 0)
            {
              v44 += 7;
              v10 = v45++ >= 9;
              if (v10)
              {
                v32 = 0;
                goto LABEL_95;
              }
              continue;
            }
          }
          break;
        }
        if (*(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error))
          v32 = 0;
LABEL_95:
        v51 = 16;
LABEL_96:
        *(_QWORD *)(a1 + v51) = v32;
        goto LABEL_99;
      case 9u:
        v49 = objc_alloc_init(TRANSITPbLocationFingerprints);

        *(_QWORD *)(a1 + 48) = v49;
        v52 = 0;
        v53 = 0;
        if (PBReaderPlaceMark(a2, &v52) && (sub_100827D78(v49, a2) & 1) != 0)
        {
LABEL_70:
          PBReaderRecallMark(a2, &v52);
LABEL_99:
          if (*(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__pos) >= *(_QWORD *)(a2 + OBJC_IVAR___PBDataReader__length))
            return *(_BYTE *)(a2 + OBJC_IVAR___PBDataReader__error) == 0;
          continue;
        }
        return 0;
      default:
        result = PBReaderSkipValueWithTag(a2);
        if (!(_DWORD)result)
          return result;
        goto LABEL_99;
    }
  }
}

void sub_10054B628(uint64_t a1, int a2)
{
  _QWORD *v2;
  CLMescalSigner *v3;
  SEL v4;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 25) = 1;
  v2 = *(_QWORD **)(a1 + 32);
  if ((v2[7] != 0) == a2)
  {
    objc_msgSend(v2, "_doSigningWhenReady");
  }
  else
  {
    v3 = (CLMescalSigner *)sub_1018FEEDC();
    -[CLMescalSigner _doSigningWhenReady](v3, v4);
  }
}

uint64_t sub_10054BD10(uint64_t a1, char a2)
{
  NSObject *v3;
  uint64_t v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if ((a2 & 1) == 0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: churn failure: signing disabled", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102142D80);
      v8[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning MESCAL: churn failure: signing disabled", v8, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
    if (v4)
    {
      sub_1003C2E50(v4);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56) = 0;
    }
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

id sub_10054BED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  void *v4;
  _QWORD v6[6];
  __int128 v7;

  v6[0] = _NSConcreteStackBlock;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(void **)(*(_QWORD *)(a1 + 32) + 8);
  v6[1] = 3221225472;
  v6[2] = sub_10054BF30;
  v6[3] = &unk_102142D38;
  v6[4] = a3;
  v6[5] = a2;
  v7 = v3;
  return objc_msgSend(v4, "async:", v6);
}

id sub_10054BF30(uint64_t a1)
{
  NSObject *v2;
  id v3;
  id v5;
  id v6;
  id v7;
  NSURLRequest *v8;
  id v9;
  uint64_t v10;
  id v11;
  const char *v12;
  uint8_t *v13;
  _QWORD v14[4];
  __int128 v15;
  int v16;
  id v17;
  uint8_t buf[4];
  id v19;

  if (*(_QWORD *)(a1 + 32))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v2 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v3 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      *(_DWORD *)buf = 136446210;
      v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "MESCAL: could not load store URL bag: %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102142D80);
      v10 = qword_1022A02D8;
      v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "description"), "UTF8String");
      v16 = 136446210;
      v17 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 17, "MESCAL: could not load store URL bag: %{public}s", &v16, 12);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  else
  {
    v5 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("loc-sign-sap-version"));
    if (!v5)
      v5 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("sign-sap-version"));
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = objc_msgSend(v5, "copy");
    v6 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("loc-sign-sap-setup-cert"));
    if (!v6)
      v6 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("sign-sap-setup-cert"));
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72) = objc_msgSend(v6, "copy");
    v7 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("loc-sign-sap-setup"));
    if (!v7)
      v7 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("sign-sap-setup"));
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80) = objc_msgSend(v7, "copy");
    v8 = +[NSURLRequest requestWithURL:](NSURLRequest, "requestWithURL:", +[NSURL URLWithString:](NSURL, "URLWithString:", *(_QWORD *)(*(_QWORD *)(a1 + 48) + 72)));
    v9 = objc_msgSend(*(id *)(a1 + 48), "_mescalSignerNSURLSession");
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    v14[2] = sub_10054C224;
    v14[3] = &unk_102142D10;
    v15 = *(_OWORD *)(a1 + 48);
    objc_msgSend(objc_msgSend(v9, "dataTaskWithRequest:completionHandler:", v8, v14), "resume");
    return objc_msgSend(v9, "finishTasksAndInvalidate");
  }
}

id sub_10054C224(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v6;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (a4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: signer cert download did fail, dude: %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v15 = qword_1022A02D8;
    v17 = 136446210;
    v18 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#Warning MESCAL: signer cert download did fail, dude: %{public}s", &v17, 12);
    v14 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v16);
    if (v14 == buf)
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_26;
  }
  v8 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a2, 0, 0, 0);
  v9 = objc_msgSend(v8, "objectForKey:", CFSTR("sign-sap-setup-cert"));
  if (!v9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v11 = "Y";
      if (!v8)
        v11 = "N";
      *(_DWORD *)buf = 136446210;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "MESCAL: could not extract data from cert download (dict:%{public}s)", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v12 = "Y";
    if (!v8)
      v12 = "N";
    v17 = 136446210;
    v18 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "MESCAL: could not extract data from cert download (dict:%{public}s)", &v17, 12);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "-[CLMescalSigner _initializeMescalWithCompletion:]_block_invoke", "%s\n", v13);
    if (v14 == buf)
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_26:
    free(v14);
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_churnMescalExchangeData:withCompletion:", v9, *(_QWORD *)(a1 + 40));
}

id sub_10054CA38(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  NSObject *v6;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  uint8_t *v14;
  uint64_t v15;
  const char *v16;
  int v17;
  const char *v18;
  uint8_t buf[4];
  const char *v20;

  if (a4)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136446210;
      v20 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning MESCAL: exchange data up/download did fail, dude: %{public}s", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 2))
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v15 = qword_1022A02D8;
    v17 = 136446210;
    v18 = (const char *)objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v15, 0, "#Warning MESCAL: exchange data up/download did fail, dude: %{public}s", &v17, 12);
    v14 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke", "%s\n", v16);
    if (v14 == buf)
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    goto LABEL_26;
  }
  v8 = +[NSPropertyListSerialization propertyListWithData:options:format:error:](NSPropertyListSerialization, "propertyListWithData:options:format:error:", a2, 0, 0, 0);
  v9 = objc_msgSend(v8, "objectForKey:", CFSTR("sign-sap-setup-buffer"));
  if (!v9)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v10 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      v11 = "Y";
      if (!v8)
        v11 = "N";
      *(_DWORD *)buf = 136446210;
      v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "MESCAL: could not extract data from exchange download (dict:%{public}s)", buf, 0xCu);
    }
    if (!sub_1001BFF7C(115, 0))
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102142D80);
    v12 = "Y";
    if (!v8)
      v12 = "N";
    v17 = 136446210;
    v18 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "MESCAL: could not extract data from exchange download (dict:%{public}s)", &v17, 12);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 0, "-[CLMescalSigner _churnMescalExchangeData:withCompletion:]_block_invoke", "%s\n", v13);
    if (v14 == buf)
      return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
LABEL_26:
    free(v14);
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return _objc_msgSend(*(id *)(a1 + 32), "_churnMescalExchangeData:withCompletion:", v9, *(_QWORD *)(a1 + 40));
}

void sub_10054CDFC(id a1)
{
  qword_1022A02D8 = (uint64_t)os_log_create("com.apple.locationd.Legacy", "Generic_deprecated");
}

uint64_t sub_10054CE3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v4;
  double v5;
  int v6;
  double v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  NSObject *v11;
  uint64_t v12;
  double v14;
  uint8_t buf[8];
  _BYTE v16[10];
  __int16 v17;
  uint64_t v18;

  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)a1 = off_102142DB0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0x4034000000000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v16 = 2082;
    *(_QWORD *)&v16[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init\"}", buf, 0x12u);
  }
  sub_1001E4804(buf);
  v5 = *(double *)(a1 + 80);
  v14 = 0.0;
  v6 = sub_1001FD98C(*(uint64_t *)buf, "CLGNSSStateQueryAssertionPeriodicity_s", &v14);
  v7 = v14;
  if (!v6)
    v7 = v5;
  *(double *)(a1 + 80) = v7;
  v8 = *(std::__shared_weak_count **)v16;
  if (*(_QWORD *)v16)
  {
    v9 = (unint64_t *)(*(_QWORD *)v16 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v11 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v12 = *(_QWORD *)(a1 + 80);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v16 = 2082;
    *(_QWORD *)&v16[2] = "";
    v17 = 2050;
    v18 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,init\", \"fResponsePeriodicity\":\"%{public}0.3f\"}", buf, 0x1Cu);
  }
  return a1;
}

void sub_10054D054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  _QWORD *v3;
  uint64_t v5;
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  v5 = v3[9];
  v3[9] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  sub_10008ABA0(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10054D094(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  uint64_t v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;

  *(_QWORD *)a1 = off_102142DB0;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v2 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289026;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,CLGNSSStateQueryAssertion,Deinit\"}", (uint8_t *)v6, 0x12u);
  }
  v3 = *(void **)(a1 + 96);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 96) = 0;
  }
  v4 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  sub_10008ABA0((_QWORD *)a1);
  return a1;
}

void sub_10054D1B4(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_10054D1C4(uint64_t a1)
{
  sub_10054D094(a1);
  operator delete();
}

void sub_10054D1E8(uint64_t a1, CLConnectionMessage **a2)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  int v9;
  CLConnectionMessage *v10;
  CLConnectionMessage *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  const char *v19;
  uint8_t *v20;
  CLConnectionMessage *v21[2];
  int v22;
  uint64_t *v23;
  uint8_t buf[4];
  _QWORD v25[204];

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    LODWORD(v25[0]) = 0;
    WORD2(v25[0]) = 2082;
    *(_QWORD *)((char *)v25 + 6) = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"CLGNSSStateQueryAssertion,handleMessage\"}", buf, 0x12u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  }
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v6 + 23) >= 0)
      v7 = v6;
    else
      v7 = (uint64_t *)*v6;
    *(_DWORD *)buf = 136380675;
    v25[0] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,message,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v16 = qword_1022A01C8;
    v17 = (uint64_t *)CLConnectionMessage::name(*a2);
    if (*((char *)v17 + 23) >= 0)
      v18 = v17;
    else
      v18 = (uint64_t *)*v17;
    v22 = 136380675;
    v23 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#CLGNSSStateQueryAssertion,daemon,message,%{private}s", &v22, 12);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGNSSStateQueryAssertion::handleMessage(std::shared_ptr<CLConnectionMessage>)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  v8 = (_QWORD *)CLConnectionMessage::name(*a2);
  v9 = *((char *)v8 + 23);
  if (v9 < 0)
  {
    if (v8[1] != 37)
      return;
    v8 = (_QWORD *)*v8;
  }
  else if (v9 != 37)
  {
    return;
  }
  if (!memcmp(v8, "kCLConnectionMessageBBGnssStatusQuery", 0x25uLL))
  {
    v10 = *a2;
    v11 = a2[1];
    v21[0] = v10;
    v21[1] = v11;
    if (v11)
    {
      v12 = (unint64_t *)((char *)v11 + 8);
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    sub_10054D508(a1, v21);
    if (v11)
    {
      v14 = (unint64_t *)((char *)v11 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v11 + 16))(v11);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v11);
      }
    }
  }
}

void sub_10054D4EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10054D508(uint64_t a1, CLConnectionMessage **a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  void *Dictionary;
  id v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  int v13;
  void **v14;
  const char *v15;
  void **v16;
  NSObject *v17;
  void **v18;
  NSObject *v19;
  void **v20;
  NSObject *v21;
  void **v22;
  NSObject *v23;
  void **v24;
  NSObject *v25;
  void **v26;
  NSObject *v27;
  void **v28;
  NSObject *v29;
  int v30;
  void **v31;
  const char *v32;
  void **v33;
  void *__p[2];
  char v35;
  uint8_t buf[8];
  __int16 v37;
  const char *v38;
  __int16 v39;
  void **v40;
  __int16 v41;
  const char *v42;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(buf, "com.apple.locationd.bbgnssStatusResponse_callback");
  isEntitled = CLConnection::isEntitled(v4, buf);
  v6 = isEntitled;
  if (SBYTE3(v40) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
    {
LABEL_3:
      if ((sub_100762590() & 1) != 0)
      {
        Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
        v8 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeKey"));
        v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundleIdentifierKey"));
        v10 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageBundlePathKey"));
        if (v9)
        {
          v11 = v10;
          if (v10)
          {
            if (v8)
            {
              if (objc_msgSend(v8, "length"))
              {
                if (objc_msgSend(v9, "length") || objc_msgSend(v11, "length"))
                {
                  if (qword_1022A01C0 != -1)
                    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
                  v12 = qword_1022A01C8;
                  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
                  {
                    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
                    v13 = v35;
                    v14 = (void **)__p[0];
                    v15 = (const char *)objc_msgSend(v8, "UTF8String");
                    v16 = __p;
                    *(_DWORD *)buf = 68289538;
                    if (v13 < 0)
                      v16 = v14;
                    *(_DWORD *)&buf[4] = 0;
                    v37 = 2082;
                    v38 = "";
                    v39 = 2082;
                    v40 = v16;
                    v41 = 2082;
                    v42 = v15;
                    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,subscribed to status report\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
                    if (v35 < 0)
                      operator delete(__p[0]);
                  }
                  sub_100E087CC();
                }
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102142DF0);
                v29 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
                  v30 = v35;
                  v31 = (void **)__p[0];
                  v32 = (const char *)objc_msgSend(v8, "UTF8String");
                  v33 = __p;
                  *(_DWORD *)buf = 68289538;
                  if (v30 < 0)
                    v33 = v31;
                  *(_DWORD *)&buf[4] = 0;
                  v37 = 2082;
                  v38 = "";
                  v39 = 2082;
                  v40 = v33;
                  v41 = 2082;
                  v42 = v32;
                  _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,no beneficiary,request denied\", \"requested by\":%{public, location:escape_only}s, \"reason\":%{public, location:escape_only}s}", buf, 0x26u);
                  if (v35 < 0)
                    operator delete(__p[0]);
                }
              }
              else
              {
                if (qword_1022A01C0 != -1)
                  dispatch_once(&qword_1022A01C0, &stru_102142DF0);
                v27 = qword_1022A01C8;
                if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
                {
                  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
                  v28 = v35 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)buf = 68289282;
                  *(_DWORD *)&buf[4] = 0;
                  v37 = 2082;
                  v38 = "";
                  v39 = 2082;
                  v40 = v28;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,empty reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
                  if (v35 < 0)
                    operator delete(__p[0]);
                }
              }
            }
            else
            {
              if (qword_1022A01C0 != -1)
                dispatch_once(&qword_1022A01C0, &stru_102142DF0);
              v25 = qword_1022A01C8;
              if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
              {
                (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
                v26 = v35 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)buf = 68289282;
                *(_DWORD *)&buf[4] = 0;
                v37 = 2082;
                v38 = "";
                v39 = 2082;
                v40 = v26;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing reason,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
                if (v35 < 0)
                  operator delete(__p[0]);
              }
            }
          }
          else
          {
            if (qword_1022A01C0 != -1)
              dispatch_once(&qword_1022A01C0, &stru_102142DF0);
            v23 = qword_1022A01C8;
            if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
            {
              (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
              v24 = v35 >= 0 ? __p : (void **)__p[0];
              *(_DWORD *)buf = 68289282;
              *(_DWORD *)&buf[4] = 0;
              v37 = 2082;
              v38 = "";
              v39 = 2082;
              v40 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing bundlePath,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
              if (v35 < 0)
                operator delete(__p[0]);
            }
          }
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102142DF0);
          v21 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
            v22 = v35 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 68289282;
            *(_DWORD *)&buf[4] = 0;
            v37 = 2082;
            v38 = "";
            v39 = 2082;
            v40 = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,daemon,missing bundleID,request denied\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
            if (v35 < 0)
              operator delete(__p[0]);
          }
        }
      }
      else
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102142DF0);
        v19 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
        {
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
          v20 = v35 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)buf = 68289282;
          *(_DWORD *)&buf[4] = 0;
          v37 = 2082;
          v38 = "";
          v39 = 2082;
          v40 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,feature not supported\", \"requested by\":%{public, location:escape_only}s}", buf, 0x1Cu);
          if (v35 < 0)
            operator delete(__p[0]);
        }
      }
      goto LABEL_72;
    }
  }
  else if ((isEntitled & 1) != 0)
  {
    goto LABEL_3;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v17 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 24))(__p, a1);
    v18 = v35 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v37 = 2082;
    v38 = "";
    v39 = 2082;
    v40 = v18;
    v41 = 2082;
    v42 = "com.apple.locationd.bbgnssStatusResponse_callback";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,#warning,invalid entitlement\", \"requested by\":%{public, location:escape_only}s, \"entitlement\":%{public, location:escape_only}s}", buf, 0x26u);
    if (v35 < 0)
      operator delete(__p[0]);
  }
LABEL_72:
  sub_10054DFC8(a1, (double *)(a1 + 24));
}

void sub_10054DF8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10054DFC8(uint64_t a1, double *a2)
{
  double Current;
  double v5;
  double v6;
  NSObject *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  _BOOL4 v22;
  NSObject *v23;
  const char *v24;
  int *v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  int v31;
  NSObject *v32;
  NSObject *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *p_shared_owners;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  NSObject *v42;
  double v43;
  double *v44;
  uint64_t v45;
  uint64_t v46;
  double *v47;
  double v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  double v54;
  const char *v55;
  int *v56;
  const char *v57;
  int *v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _WORD v63[8];
  _QWORD v64[4];
  _QWORD v65[4];
  _BYTE v66[12];
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  int buf;
  _BYTE buf_4[30];
  double v81;
  _BYTE v82[10];
  __int16 v83;
  _BYTE v84[10];
  double v85;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = sub_1001FCBB4();
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v6 = Current - v5;
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v8 = *a2;
    v9 = *((_QWORD *)a2 + 1);
    v10 = *((_QWORD *)a2 + 2);
    v11 = CFAbsoluteTimeGetCurrent();
    v12 = a2[1];
    v13 = -0.0;
    if (*a2 <= 0.0)
      v14 = -0.0;
    else
      v14 = v6;
    v15 = *a2 + v14;
    if (v12 <= 0.0)
      v16 = -0.0;
    else
      v16 = v6;
    v17 = v12 + v16;
    buf = 134285057;
    v18 = a2[2];
    *(double *)buf_4 = v8;
    if (v18 > 0.0)
      v13 = v6;
    *(_WORD *)&buf_4[8] = 2049;
    *(_QWORD *)&buf_4[10] = v9;
    *(_WORD *)&buf_4[18] = 2049;
    *(_QWORD *)&buf_4[20] = v10;
    *(_WORD *)&buf_4[28] = 2049;
    v81 = v11;
    *(_WORD *)v82 = 2049;
    *(double *)&v82[2] = v15;
    v83 = 2049;
    *(double *)v84 = v17;
    *(_WORD *)&v84[8] = 2049;
    v85 = v18 + v13;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf,absoluteTime,%{private}.3lf,AbsoluteTimeOfGnssStart,%{private}.3lf,AbsoluteTimeOfGnssStop,%{private}.3lf,AbsoluteTimeOfYieldStop,%{private}.3lf", (uint8_t *)&buf, 0x48u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v61 = qword_1022A01C8;
    v43 = *a2;
    v44 = a2 + 1;
    v45 = *((_QWORD *)a2 + 1);
    v47 = a2 + 2;
    v46 = *((_QWORD *)a2 + 2);
    v48 = CFAbsoluteTimeGetCurrent();
    v49 = -0.0;
    if (*a2 <= 0.0)
      v50 = -0.0;
    else
      v50 = v6;
    v51 = *a2 + v50;
    if (*v44 <= 0.0)
      v52 = -0.0;
    else
      v52 = v6;
    v53 = *v44 + v52;
    *(_DWORD *)v66 = 134285057;
    v54 = *v47;
    if (*v47 > 0.0)
      v49 = v6;
    *(double *)&v66[4] = v43;
    v67 = 2049;
    v68 = v45;
    v69 = 2049;
    v70 = v46;
    v71 = 2049;
    v72 = v48;
    v73 = 2049;
    v74 = v51;
    v75 = 2049;
    v76 = v53;
    v77 = 2049;
    v78 = v54 + v49;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v61, 1, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient,gnssStart,%{private}.3lf,gnssStop,%{private}.3lf,gnssYield,%{private}.3lf,absoluteTime,%{private}.3lf,AbsoluteTimeOfGnssStart,%{private}.3lf,AbsoluteTimeOfGnssStop,%{private}.3lf,AbsoluteTimeOfYieldStop,%{private}.3lf", v66, 72);
    v56 = (int *)v55;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v55);
    if (v56 != &buf)
      free(v56);
  }
  if (!*(_QWORD *)(a1 + 8))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v23 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient invalid connection", (uint8_t *)&buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    *(_WORD *)v66 = 0;
    LODWORD(v60) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient invalid connection", v66, v60);
    v25 = (int *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v24);
LABEL_74:
    if (v25 != &buf)
      free(v25);
    return;
  }
  v19 = sub_1001FCBB4();
  v20 = *(double *)(a1 + 88);
  v21 = v19 - v20;
  v22 = v20 == 0.0 || v21 > *(double *)(a1 + 80) + -3.0;
  v27 = *a2;
  v26 = a2[1];
  v28 = a2[2];
  v29 = *(double *)(a1 + 48);
  v30 = *(double *)(a1 + 64);
  v31 = (v28 > *a2) ^ (v30 > v29);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v32 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68290818;
    *(_DWORD *)buf_4 = 0;
    *(_WORD *)&buf_4[4] = 2082;
    *(_QWORD *)&buf_4[6] = "";
    *(_WORD *)&buf_4[14] = 2050;
    *(double *)&buf_4[16] = v21;
    *(_WORD *)&buf_4[24] = 1026;
    *(_DWORD *)&buf_4[26] = v22;
    LOWORD(v81) = 1026;
    *(_DWORD *)((char *)&v81 + 2) = v26 > v27;
    HIWORD(v81) = 1026;
    *(_DWORD *)v82 = v28 > v27;
    *(_WORD *)&v82[4] = 1026;
    *(_DWORD *)&v82[6] = v30 > v29;
    v83 = 1026;
    *(_DWORD *)v84 = v31;
    *(_WORD *)&v84[4] = 1026;
    *(_DWORD *)&v84[6] = v22 | v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient\", \"timeSinceLastUpdate\":\"%{public}0.3f\", \"isMinTimeLapsedBetween2UpdatesToClient\":%{public}d, \"isLastSessionStopped\":%{public}d, \"didLastSessionYield\":%{public}d, \"didSessionYieldDuringLastUpdateToClient\":%{public}d, \"isStatusChangedFromPreviousUpdateToClient\":%{public}d, \"sendUpdateToCLient\":%{public}d}", (uint8_t *)&buf, 0x40u);
  }
  if (((v22 | v31) & 1) != 0)
  {
    v64[0] = CFSTR("kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStartKey");
    v65[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *a2);
    v64[1] = CFSTR("kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSStopKey");
    v65[1] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2[1]);
    v64[2] = CFSTR("kCLGNSSStateQueryAssertion_ResponseKey_LastGNSSYieldKey");
    v65[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a2[2]);
    v64[3] = CFSTR("kCLGNSSStateQueryAssertion_ResponseKey_PeriodicityKey");
    v65[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 80));
    *(_QWORD *)v66 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v65, v64, 4);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    v33 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient sent to client", (uint8_t *)&buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102142DF0);
      v63[0] = 0;
      LODWORD(v60) = 2;
      _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient sent to client", v63, v60);
      v58 = (int *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v57);
      if (v58 != &buf)
        free(v58);
    }
    *(double *)(a1 + 88) = sub_1001FCBB4();
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 40);
    objc_msgSend(*(id *)(a1 + 96), "setNextFireDelay:interval:", *(double *)(a1 + 80), *(double *)(a1 + 80));
    sub_10054F040("kCLConnectionMessageCLGNSSStateQueryAssertionResponse", v66, &buf);
    v34 = *(_QWORD *)(a1 + 8);
    v62 = *(std::__shared_weak_count **)&buf_4[4];
    if (*(_QWORD *)&buf_4[4])
    {
      v35 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    CLConnection::sendMessage(v34);
    if (v62)
    {
      p_shared_owners = (unint64_t *)&v62->__shared_owners_;
      do
        v38 = __ldaxr(p_shared_owners);
      while (__stlxr(v38 - 1, p_shared_owners));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
        std::__shared_weak_count::__release_weak(v62);
      }
    }
    v39 = *(std::__shared_weak_count **)&buf_4[4];
    if (*(_QWORD *)&buf_4[4])
    {
      v40 = (unint64_t *)(*(_QWORD *)&buf_4[4] + 8);
      do
        v41 = __ldaxr(v40);
      while (__stlxr(v41 - 1, v40));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
    }
    return;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102142DF0);
  v42 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient recently update sent to client", (uint8_t *)&buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102142DF0);
    *(_WORD *)v66 = 0;
    LODWORD(v60) = 2;
    _os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "#CLGNSSStateQueryAssertion,daemon,sendGnssStatusUpdateToClient recently update sent to client", v66, v60);
    v25 = (int *)v59;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSStateQueryAssertion::sendGnssStatusUpdateToClient(const CLLocationProvider_Type::CLGNSSStateQueryAssertionReportData &)", "%s\n", v59);
    goto LABEL_74;
  }
}

