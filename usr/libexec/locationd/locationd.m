uint64_t sub_1000066C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)v4);
  v5 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(a2 + 32);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 39) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v6 = *(_OWORD *)(a2 + 40);
  v7 = *(_OWORD *)(a2 + 56);
  v8 = *(_OWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v8;
  *(_OWORD *)(a1 + 56) = v7;
  *(_OWORD *)(a1 + 40) = v6;
  sub_10002E40C(a1 + 96, (_QWORD *)(a2 + 96));
  v9 = *(_OWORD *)(a2 + 120);
  v10 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v10;
  *(_OWORD *)(a1 + 120) = v9;
  sub_100006898(a1 + 168, (__n128 *)(a2 + 168));
  sub_100006898(a1 + 192, (__n128 *)(a2 + 192));
  sub_100006898(a1 + 216, (__n128 *)(a2 + 216));
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  sub_100006898(a1 + 248, (__n128 *)(a2 + 248));
  sub_100006898(a1 + 272, (__n128 *)(a2 + 272));
  sub_100210BBC(a1 + 296, (_QWORD *)(a2 + 296));
  sub_100210BBC(a1 + 320, (_QWORD *)(a2 + 320));
  sub_10020B514(a1 + 344, (uint64_t *)(a2 + 344));
  sub_100006898(a1 + 384, (__n128 *)(a2 + 384));
  sub_100006898(a1 + 408, (__n128 *)(a2 + 408));
  sub_100006898(a1 + 432, (__n128 *)(a2 + 432));
  sub_100006898(a1 + 456, (__n128 *)(a2 + 456));
  sub_100006898(a1 + 480, (__n128 *)(a2 + 480));
  memcpy((void *)(a1 + 504), (const void *)(a2 + 504), 0x162uLL);
  sub_100006898(a1 + 864, (__n128 *)(a2 + 864));
  sub_100006898(a1 + 888, (__n128 *)(a2 + 888));
  *(_OWORD *)(a1 + 912) = *(_OWORD *)(a2 + 912);
  sub_100006898(a1 + 928, (__n128 *)(a2 + 928));
  sub_100006898(a1 + 952, (__n128 *)(a2 + 952));
  *(_BYTE *)(a1 + 976) = *(_BYTE *)(a2 + 976);
  *(_DWORD *)(a1 + 980) = *(_DWORD *)(a2 + 980);
  *(_OWORD *)(a1 + 984) = *(_OWORD *)(a2 + 984);
  v11 = *(_OWORD *)(a2 + 1000);
  v12 = *(_OWORD *)(a2 + 1016);
  v13 = *(_OWORD *)(a2 + 1048);
  *(_OWORD *)(a1 + 1032) = *(_OWORD *)(a2 + 1032);
  *(_OWORD *)(a1 + 1048) = v13;
  *(_OWORD *)(a1 + 1000) = v11;
  *(_OWORD *)(a1 + 1016) = v12;
  v14 = *(_OWORD *)(a2 + 1064);
  v15 = *(_OWORD *)(a2 + 1080);
  v16 = *(_OWORD *)(a2 + 1096);
  *(_QWORD *)(a1 + 1112) = *(_QWORD *)(a2 + 1112);
  *(_OWORD *)(a1 + 1080) = v15;
  *(_OWORD *)(a1 + 1096) = v16;
  *(_OWORD *)(a1 + 1064) = v14;
  return a1;
}

__n128 sub_100006898(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

void sub_100006908(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const char *v19;
  uint8_t *v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  _BYTE v25[10];
  __int16 v26;
  int v27;
  uint8_t buf[4];
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  int v45;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021802A0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v3 = a1[4];
    v4 = a1[5];
    v6 = a1[2];
    v5 = a1[3];
    v7 = *a1;
    v8 = a1[1];
    v9 = *((_QWORD *)a1 + 3);
    v10 = *((_QWORD *)a1 + 4);
    v11 = a1[10];
    *(_DWORD *)buf = 67111168;
    v29 = v3;
    v30 = 1024;
    v31 = v5;
    v32 = 1024;
    v33 = v4;
    v34 = 1024;
    v35 = v6;
    v36 = 1024;
    v37 = v7;
    v38 = 1024;
    v39 = v8;
    v40 = 2048;
    v41 = v9;
    v42 = 2048;
    v43 = v10;
    v44 = 1024;
    v45 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gnssawd,PersistentDiagnostics,#gpsd,numSessions,%d,numCrash,%d,numLsOff,%d,numAbnormalExit,%d,exitCat,%d,exitPayload,%d,startDelayMs,%lld,maxDelayMs,%lld,maxDelayType,%d", buf, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021802A0);
    v12 = a1[5];
    v14 = a1[2];
    v13 = a1[3];
    v15 = a1[1];
    v16 = *((_QWORD *)a1 + 3);
    v17 = *((_QWORD *)a1 + 4);
    v18 = a1[10];
    LOWORD(v22) = 1024;
    HIWORD(v22) = v13;
    LOWORD(v23) = HIWORD(v14);
    HIWORD(v23) = 1024;
    LOWORD(v24) = 1024;
    *(_DWORD *)((char *)&v24 + 2) = v15;
    HIWORD(v24) = 2048;
    *(_WORD *)v25 = 2048;
    *(_QWORD *)&v25[2] = v17;
    v26 = 1024;
    v27 = v18;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssawd,PersistentDiagnostics,#gpsd,numSessions,%d,numCrash,%d,numLsOff,%d,numAbnormalExit,%d,exitCat,%d,exitPayload,%d,startDelayMs,%lld,maxDelayMs,%lld,maxDelayType,%d", &v21, 64, 67111168, v22, v12, v23, v24, v16, *(_DWORD *)v25);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void GNSS::PersistentDiagnostics::log() const", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

id sub_100006B68(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100248464(a1);
  else
    return 0;
}

BOOL sub_100006BB4(uint64_t a1, const char *a2, _QWORD *a3)
{
  CFStringRef v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_100219D08(a1, (uint64_t)v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

uint64_t sub_100006C24(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102146B88;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100006C84(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  NSObject *v6;
  NSObject *v7;
  _BYTE *v8;
  uint64_t *v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  int v13;
  uint64_t v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  const char *v18;
  uint8_t *v19;
  _BYTE *v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  _BYTE *v24;
  _BYTE __p[12];
  char v26;
  uint8_t buf[4];
  _QWORD v28[204];

  switch(*a3)
  {
    case 0:
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v6 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289026;
        LODWORD(v28[0]) = 0;
        WORD2(v28[0]) = 2082;
        *(_QWORD *)((char *)v28 + 6) = "";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"iB: Reset authorization by toggling beacon fences\"}", buf, 0x12u);
      }
      sub_1012E5910(a1);
    case 1:
      sub_1001A8D50(a4);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v9 = (uint64_t *)(a4 + 104);
      v10 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        if (*(char *)(a4 + 127) >= 0)
          v11 = a4 + 104;
        else
          v11 = *(_QWORD *)(a4 + 104);
        *(_DWORD *)buf = 136380675;
        v28[0] = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "iB: Received uninstall for bundle,%{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
        if (*(char *)(a4 + 127) >= 0)
          v14 = a4 + 104;
        else
          v14 = *(_QWORD *)(a4 + 104);
        *(_DWORD *)__p = 136380675;
        *(_QWORD *)&__p[4] = v14;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received uninstall for bundle,%{private}s", __p, 12);
        v16 = (uint8_t *)v15;
        sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v15);
        if (v16 != buf)
          free(v16);
      }
      sub_1012E5470(a1, v9);
    case 2:
      sub_1001A885C(a4, (uint64_t)__p);
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v7 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        v8 = __p;
        if (v26 < 0)
          v8 = *(_BYTE **)__p;
        *(_DWORD *)buf = 136380675;
        v28[0] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "iB: Received authorization for bundle,%{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
        v20 = __p;
        if (v26 < 0)
          v20 = *(_BYTE **)__p;
        v23 = 136380675;
        v24 = v20;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received authorization for bundle,%{private}s", &v23, 12);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
      sub_10022067C(a1, (uint64_t *)__p);
    case 4:
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
      v12 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_DWORD *)(a4 + 188);
        *(_DWORD *)buf = 67240192;
        LODWORD(v28[0]) = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "iB: Received location services status,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021ADAA0);
        v17 = *(_DWORD *)(a4 + 188);
        *(_DWORD *)__p = 67240192;
        *(_DWORD *)&__p[4] = v17;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Received location services status,%{public}d", __p, 8);
        v19 = (uint8_t *)v18;
        sub_100512490("Generic", 1, 0, 2, "void CLBeaconFenceAuthorizationManager::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v18);
        if (v19 != buf)
          free(v19);
      }
      if (*(_DWORD *)(a4 + 188) == 1)
        sub_1012E5078(a1, 1);
      else
        sub_1012E5268(a1, 1);
      break;
    default:
      return;
  }
}

void sub_100007294(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000072BC(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(&off_10218E910, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100007350(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100007364(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;

  CLProfilingIdentify("CLSLCSubscription::onSLCNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 128), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102198F40);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSLCSubscription::onSLCNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102198F40);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSLCSubscription::onSLCNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  if (!*a2)
    sub_10002A50C(a4, a3);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100007520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_100007540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint64_t v16;
  float64x2_t v17;
  char v18;
  uint8_t buf[1640];

  *(_DWORD *)(a5 + 52) |= 2u;
  v7 = *(_QWORD *)(a5 + 40);
  if (!v7)
    operator new();
  *(_DWORD *)(v7 + 488) |= 0x8000000u;
  v8 = *(_QWORD *)(v7 + 224);
  if (!v8)
    operator new();
  sub_10017552C(a2, a5);
  *(double *)&v9 = *(double *)(a4 + 1344) - *(double *)a2;
  v16 = *(_QWORD *)(a4 + 1344);
  v17 = vaddq_f64((float64x2_t)vdupq_lane_s64(v9, 0), *(float64x2_t *)(a2 + 8));
  v18 = *(_BYTE *)(a2 + 24);
  *(_DWORD *)(v8 + 36) |= 1u;
  v10 = *(_QWORD *)(v8 + 8);
  if (!v10)
    operator new();
  if ((sub_100178094(&v16, v10) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v11 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "SerializeGnssAvailabilityPredictorNotification,failed to convert applicable time to protobuf", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "SerializeGnssAvailabilityPredictorNotification,failed to convert applicable time to protobuf", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::SerializeGnssAvailabilityPredictorNotification(const CLUtils::Timestamp &, const int &, const CLLocationProvider_Type::NotificationData &, CLP::LogEntry::LogEntry &) const", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
  }
  return sub_100247C44(a4, v8);
}

void sub_1000077D0()
{
  operator delete();
}

void sub_10000782C(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t *v22;
  __int16 v23;
  uint64_t v24;
  uint8_t buf[4];
  uint64_t *v26;
  __int16 v27;
  uint64_t v28;

  v4 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 96))
    goto LABEL_31;
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 80);
  if (v5 == v6)
    goto LABEL_31;
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = *((unsigned __int8 *)a2 + 23);
  else
    v8 = a2[1];
  while (1)
  {
    v9 = *(unsigned __int8 *)(v5 + 23);
    if ((v9 & 0x80u) == 0)
      v10 = *(unsigned __int8 *)(v5 + 23);
    else
      v10 = *(_QWORD *)(v5 + 8);
    if (v10 != v8)
      goto LABEL_20;
    v11 = v7 >= 0 ? (unsigned __int8 *)a2 : (unsigned __int8 *)*a2;
    if ((v9 & 0x80) != 0)
      break;
    if (!*(_BYTE *)(v5 + 23))
      goto LABEL_22;
    v12 = 0;
    while (*(unsigned __int8 *)(v5 + v12) == v11[v12])
    {
      if (v9 == ++v12)
        goto LABEL_22;
    }
LABEL_20:
    v5 += 64;
    if (v5 == v6)
      goto LABEL_31;
  }
  if (memcmp(*(const void **)v5, v11, *(_QWORD *)(v5 + 8)))
    goto LABEL_20;
LABEL_22:
  sub_1008BC6F8((uint64_t)buf, v5 + 64, v6, v5);
  v14 = v13;
  v15 = *(_QWORD *)(a1 + 80);
  if (v15 != v13)
  {
    do
    {
      v15 -= 64;
      sub_1008BC298(a1 + 88, v15);
    }
    while (v15 != v14);
  }
  *(_QWORD *)(a1 + 80) = v14;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10215A748);
  v16 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v17 = a2;
    if (*((char *)a2 + 23) < 0)
      v17 = (uint64_t *)*a2;
    v18 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 136315394;
    v26 = v17;
    v27 = 2048;
    v28 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,removeObserver,%s,size,%lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10215A748);
    if (*((char *)a2 + 23) < 0)
      a2 = (uint64_t *)*a2;
    v19 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    v21 = 136315394;
    v22 = a2;
    v23 = 2048;
    v24 = v19;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,RouteHints,removeObserver,%s,size,%lu", (const char *)&v21, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLMapRouteHintController::removeObserver(std::string)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
LABEL_31:
  std::mutex::unlock(v4);
}

void sub_100007B1C(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

id sub_100007B34(uint64_t a1)
{
  NSObject *v2;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#gpsd,registerKeepAlive", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5[0] = 0;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,registerKeepAlive", v5, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::registerKeepAlive()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "vendor"), "proxyForService:", CFSTR("CLDaemonStatus")), "syncgetRegisterPowerKeepAlive:client:dbgMessage:", 1, a1, CFSTR("GNSS: Delaying Sleep"));
}

uint64_t sub_100007CEC(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = &off_1021B8BE8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

void sub_100007DC0(_QWORD *a1, uint64_t a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  _DWORD buf[3];
  __int16 v15;
  int v16;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD70 != -1)
    dispatch_once(&qword_10229FD70, &stru_102174FD8);
  v5 = qword_10229FD78;
  if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
  {
    v6 = a1[6];
    buf[0] = 138412546;
    *(_QWORD *)&buf[1] = v6;
    v15 = 1024;
    v16 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Received pressure bias estimation request.,client,%@,subscribe,%d", (uint8_t *)buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD70 != -1)
      dispatch_once(&qword_10229FD70, &stru_102174FD8);
    v8 = a1[6];
    v10 = 138412546;
    v11 = v8;
    v12 = 1024;
    v13 = a2;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "Received pressure bias estimation request.,client,%@,subscribe,%d", &v10, 18);
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestPressureBias(BOOL, const CLNameValuePair &)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  (*(void (**)(_QWORD *, const char *, uint64_t))(*a1 + 32))(a1, "kCLConnectionMessagePressureBias", a2);
  v7 = a1[29];
  if ((_DWORD)a2)
  {
    if (!v7)
      sub_100236AF0();
  }
  else
  {
    a1[29] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }

}

void sub_10000804C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100008080(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021947D0;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

void sub_1000080B0(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  void *__p;
  uint64_t v5;

  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    sub_100011CEC(a2, __p, v5 - (_QWORD)__p);
    if (__p)
      operator delete(__p);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    sub_10169C54C((uint64_t)a2);
  }
}

void sub_100008134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100008150(unsigned int *a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __CFRunLoop *v6;
  void *v7;
  _QWORD *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD block[5];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;

  if (*((_QWORD *)a1 + 5))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021545A8);
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = *((_QWORD *)a1 + 1);
      v4 = *a1;
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = v3;
      v19 = 2050;
      v20 = v4;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt AuthorizationRequest completion\", \"ClientKey\":%{public, location:escape_only}@, \"RequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
    }
    (*(void (**)(void))(*((_QWORD *)a1 + 5) + 16))();

    *((_QWORD *)a1 + 5) = 0;
    *a1 = 0;

    *((_QWORD *)a1 + 1) = 0;
    v5 = *((_QWORD *)a1 + 6);
    if (v5)
    {
      *((_QWORD *)a1 + 6) = 0;
      v6 = (__CFRunLoop *)sub_100193530();
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1007F5EA4;
      block[3] = &unk_10212ECA0;
      block[4] = v5;
      CFRunLoopPerformBlock(v6, kCFRunLoopCommonModes, block);
    }
    v9 = (void *)*((_QWORD *)a1 + 7);
    v8 = a1 + 14;
    v7 = v9;
    if (v9)

    *v8 = 0;
    v8[1] = 0;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Request was completed multiple times\"}", buf, 0x12u);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v11 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289026;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Request was completed multiple times", "{\"msg%{public}.0s\":\"Request was completed multiple times\"}", buf, 0x12u);
    }
  }
}

BOOL sub_10000840C(const char *a1, double *a2)
{
  int v3;
  stat v5;

  v3 = stat(a1, &v5);
  if (a2 && !v3)
    *a2 = (double)v5.st_mtimespec.tv_nsec / 1000000000.0
        + (double)v5.st_mtimespec.tv_sec
        - kCFAbsoluteTimeIntervalSince1970;
  return v3 == 0;
}

BOOL sub_100008478(uint64_t a1, double a2, double a3)
{
  double Current;
  double v7;
  double v8;
  CFStringRef v9;
  int v10;
  double v11;
  double v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  double v16;
  NSObject *v17;
  _BOOL8 result;
  const char *v19;
  uint8_t *v20;
  NSObject *v21;
  const char *v22;
  _QWORD v23[2];
  uint8_t buf[8];
  std::__shared_weak_count *v25;

  sub_100014604(*(_QWORD *)(a1 + 312));
  if (sub_1000A1914(*(_QWORD *)(a1 + 312)))
  {
    Current = j__CFAbsoluteTimeGetCurrent();
    if (!*(_BYTE *)(a1 + 472))
      goto LABEL_30;
    v7 = Current;
    v8 = *(double *)(a1 + 464);
    sub_1001E4804(buf);
    v23[0] = 0;
    v9 = CFStringCreateWithCStringNoCopy(0, "MicroLocationsRefreshRoutineStateThrottle", 0x8000100u, kCFAllocatorNull);
    v10 = sub_1001FD9FC(*(uint64_t *)buf, (uint64_t)v9, v23);
    CFRelease(v9);
    v11 = v7 - v8;
    v12 = *(double *)v23;
    v13 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    v16 = 0.1;
    if (v10)
      v16 = v12;
    if (v11 >= v16)
    {
LABEL_30:
      sub_100229B0C(a1, a2, a3);
      return sub_10000B9CC(a1);
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v17 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Ignoring refreshRoutineStateAtLocation request since last request was too recent", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Ignoring refreshRoutineStateAtLocation request since last request was too recent", v23, 2);
      v20 = (uint8_t *)v19;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationLoiManager::refreshRoutineStateAtLocation(double, double)", "%s\n", v19);
LABEL_27:
      if (v20 != buf)
        free(v20);
      return 0;
    }
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Ignoring refreshRoutineStateAtLocation request since keybag is not unlocked", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      LOWORD(v23[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "Ignoring refreshRoutineStateAtLocation request since keybag is not unlocked", v23, 2);
      v20 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLMicroLocationLoiManager::refreshRoutineStateAtLocation(double, double)", "%s\n", v22);
      goto LABEL_27;
    }
  }
  return result;
}

void sub_100008828(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100008848(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_100008848(a1, *a2);
    sub_100008848(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_100008888(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  unsigned int v4;
  const char *v5;
  uint8_t *v6;
  uint64_t v7;
  unsigned int v8;
  const char *v9;
  uint8_t *v10;
  _DWORD v11[4];
  uint8_t buf[4];
  unsigned int v13;

  if (objc_msgSend(*(id *)(a1 + 8), "state") == 1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "debounce timer triggered", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      LOWORD(v11[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "debounce timer triggered", v11, 2);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onDebounceHandler()", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
    sub_100026094(a1);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v4 = objc_msgSend(*(id *)(a1 + 8), "state");
      *(_DWORD *)buf = 67109120;
      v13 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Ignoring debounce timer trigger - pipelined is currently in state %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v7 = qword_1022A0048;
      v8 = objc_msgSend(*(id *)(a1 + 8), "state");
      v11[0] = 67109120;
      v11[1] = v8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v7, 2, "Ignoring debounce timer trigger - pipelined is currently in state %d", v11);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onDebounceHandler()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
  }
}

uint64_t sub_100008B88(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  CLOSTransaction *v12;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  const char *v22;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021495E8);
  v8 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_INFO))
  {
    v9 = "remove";
    v14 = 68289794;
    v16 = "";
    v15 = 2082;
    if (a2)
      v9 = "add";
    v17 = 2050;
    v18 = a3;
    v19 = 2082;
    v20 = a4;
    v21 = 2082;
    v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Updating keep-alive client registration\", \"client\":%{public}lu, \"debugMessage\":%{public, location:escape_only}s, \"registrationType\":%{public, location:escape_only}s}", (uint8_t *)&v14, 0x30u);
  }
  if (a2)
  {
    if (!*(_BYTE *)(a1 + 248))
    {
      v14 = a3;
      sub_100210784((uint64_t **)(a1 + 216), &v14, &v14);
LABEL_14:
      v10 = 1;
      goto LABEL_16;
    }
  }
  else if (*(_QWORD *)(a1 + 232))
  {
    v14 = a3;
    sub_100649D70(a1 + 216, &v14);
    if (*(_BYTE *)(a1 + 248) && !*(_QWORD *)(a1 + 232))
      IOAllowPowerChange(*(_DWORD *)(a1 + 124), *(_QWORD *)(a1 + 272));
    goto LABEL_14;
  }
  v10 = 0;
LABEL_16:
  v11 = *(void **)(a1 + 240);
  if (*(_QWORD *)(a1 + 232))
  {
    if (!v11)
    {
      v12 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonStatus.keepalive");
LABEL_21:
      *(_QWORD *)(a1 + 240) = v12;
    }
  }
  else if (v11)
  {

    v12 = 0;
    goto LABEL_21;
  }
  return v10;
}

uint64_t sub_100008D50(uint64_t *a1)
{
  NSObject *v2;
  uint64_t *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint64_t *v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  char *v48;
  _QWORD v49[5];
  _DWORD v50[2];
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  int v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  uint64_t v70;
  __int16 v71;
  int v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  __int16 v79;
  int v80;
  __int16 v81;
  int v82;
  __int16 v83;
  int v84;
  __int16 v85;
  int v86;
  __int16 v87;
  int v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  uint8_t buf[4];
  int v98;
  __int16 v99;
  uint64_t v100;
  __int16 v101;
  uint64_t *v102;
  __int16 v103;
  int v104;
  __int16 v105;
  int v106;
  __int16 v107;
  int v108;
  __int16 v109;
  int v110;
  __int16 v111;
  int v112;
  __int16 v113;
  uint64_t v114;
  __int16 v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;
  __int16 v119;
  int v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  int v142;
  __int16 v143;
  int v144;

  if (qword_1022A02C0 != -1)
    dispatch_once(&qword_1022A02C0, &stru_102190E68);
  v2 = qword_1022A02C8;
  if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (uint64_t *)*a1;
    if (*((char *)a1 + 23) >= 0)
      v3 = a1;
    v4 = *((unsigned __int8 *)a1 + 24);
    v5 = *((unsigned __int8 *)a1 + 25);
    v6 = *((unsigned __int8 *)a1 + 26);
    v7 = *((unsigned __int8 *)a1 + 27);
    v8 = *((_DWORD *)a1 + 12);
    v9 = a1[7];
    v10 = a1[8];
    v11 = a1[9];
    v12 = a1[12];
    v13 = *((_DWORD *)a1 + 20);
    v14 = *((_DWORD *)a1 + 21);
    v15 = *((_DWORD *)a1 + 26);
    v16 = *((_DWORD *)a1 + 27);
    v17 = *((unsigned __int8 *)a1 + 91);
    v18 = *((unsigned __int8 *)a1 + 88);
    v19 = *((unsigned __int8 *)a1 + 89);
    v20 = *((unsigned __int8 *)a1 + 90);
    v21 = *((unsigned __int8 *)a1 + 92);
    v22 = *((unsigned __int8 *)a1 + 93);
    v23 = *((unsigned __int8 *)a1 + 94);
    v24 = *((unsigned __int8 *)a1 + 95);
    *(_DWORD *)buf = 67115011;
    v98 = 1;
    v99 = 2048;
    v100 = 0;
    v101 = 2080;
    v102 = v3;
    v103 = 1024;
    v104 = v4;
    v105 = 1024;
    v106 = v5;
    v107 = 1024;
    v108 = v6;
    v109 = 1024;
    v110 = v7;
    v111 = 1024;
    v112 = v8;
    v113 = 2048;
    v114 = v9;
    v115 = 2048;
    v116 = v10;
    v117 = 2048;
    v118 = v11;
    v119 = 1024;
    v120 = v13;
    v121 = 2049;
    v122 = v12;
    v123 = 1025;
    v124 = v14;
    v125 = 1025;
    v126 = v15;
    v127 = 1025;
    v128 = v16;
    v129 = 1025;
    v130 = v17;
    v131 = 1025;
    v132 = v18;
    v133 = 1025;
    v134 = v19;
    v135 = 1025;
    v136 = v20;
    v137 = 1025;
    v138 = v21;
    v139 = 1025;
    v140 = v22;
    v141 = 1025;
    v142 = v23;
    v143 = 1025;
    v144 = v24;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#FenceMetrics metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,sinceLast,%{private}.1f,fenceType,%{private}d,fenceAPs,%{private}d,totalAPs,%{private}d,conservative,%{private}d,emergency,%{private}d,polygonal,%{private}d,throttled,%{private}d,inVehicle,%{private}d,driving,%{private}d,static,%{private}d,pedestrian,%{private}d", buf, 0xAAu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02C0 != -1)
      dispatch_once(&qword_1022A02C0, &stru_102190E68);
    v26 = (uint64_t *)*a1;
    if (*((char *)a1 + 23) >= 0)
      v26 = a1;
    v27 = *((unsigned __int8 *)a1 + 24);
    v28 = *((unsigned __int8 *)a1 + 25);
    v29 = *((unsigned __int8 *)a1 + 26);
    v30 = *((unsigned __int8 *)a1 + 27);
    v31 = *((_DWORD *)a1 + 12);
    v32 = a1[7];
    v33 = a1[8];
    v34 = a1[9];
    v35 = a1[12];
    v36 = *((_DWORD *)a1 + 20);
    v37 = *((_DWORD *)a1 + 21);
    v38 = *((_DWORD *)a1 + 26);
    v39 = *((_DWORD *)a1 + 27);
    v40 = *((unsigned __int8 *)a1 + 91);
    v41 = *((unsigned __int8 *)a1 + 88);
    v42 = *((unsigned __int8 *)a1 + 89);
    v43 = *((unsigned __int8 *)a1 + 90);
    v44 = *((unsigned __int8 *)a1 + 92);
    v45 = *((unsigned __int8 *)a1 + 93);
    v46 = *((unsigned __int8 *)a1 + 94);
    v47 = *((unsigned __int8 *)a1 + 95);
    v50[0] = 67115011;
    v50[1] = 1;
    v51 = 2048;
    v52 = 0;
    v53 = 2080;
    v54 = v26;
    v55 = 1024;
    v56 = v27;
    v57 = 1024;
    v58 = v28;
    v59 = 1024;
    v60 = v29;
    v61 = 1024;
    v62 = v30;
    v63 = 1024;
    v64 = v31;
    v65 = 2048;
    v66 = v32;
    v67 = 2048;
    v68 = v33;
    v69 = 2048;
    v70 = v34;
    v71 = 1024;
    v72 = v36;
    v73 = 2049;
    v74 = v35;
    v75 = 1025;
    v76 = v37;
    v77 = 1025;
    v78 = v38;
    v79 = 1025;
    v80 = v39;
    v81 = 1025;
    v82 = v40;
    v83 = 1025;
    v84 = v41;
    v85 = 1025;
    v86 = v42;
    v87 = 1025;
    v88 = v43;
    v89 = 1025;
    v90 = v44;
    v91 = 1025;
    v92 = v45;
    v93 = 1025;
    v94 = v46;
    v95 = 1025;
    v96 = v47;
    v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02C8, 2, "#FenceMetrics metric.valid,%d,metric.timestamp,%.3f,metric.bundleId,%s,cellAvailable,%d,wifiAvailable,%d,passcodeLocked,%d,airplaneMode,%d,eventType,%d,eventRadius,%.2f,eventDistance,%.2f,eventLatency,%.3f,eventMask,0x%x,sinceLast,%{private}.1f,fenceType,%{private}d,fenceAPs,%{private}d,totalAPs,%{private}d,conservative,%{private}d,emergency,%{private}d,polygonal,%{private}d,throttled,%{private}d,inVehicle,%{private}d,driving,%{private}d,static,%{private}d,pedestrian,%{private}d", v50, 170);
    sub_100512490("Generic", 1, 0, 2, "static void CLFenceAnalytics::submitMetric(const CLFenceAnalytics::LocationMonitorTrigger &)", "%s\n", v48);
    if (v48 != (char *)buf)
      free(v48);
  }
  v49[0] = _NSConcreteStackBlock;
  v49[1] = 3221225472;
  v49[2] = sub_100ED1A08;
  v49[3] = &unk_102131FE8;
  v49[4] = a1;
  return AnalyticsSendEventLazy(CFSTR("com.apple.clx.geofence.locationmonitortrigger"), v49);
}

void sub_1000091B4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiLocationProvider::onWifiNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102152B20);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiLocationProvider::onWifiNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102152B20);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiLocationProvider::onWifiNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1000235AC(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10000937C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10000939C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  *(_QWORD *)(a1 + 112) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,releaseMotionActivityManager", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,releaseMotionActivityManager", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::releaseMotionActivityManager()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
}

void sub_100009530(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  const char *v14;
  uint8_t *v15;
  NSObject *v16;
  double v17;
  const char *v18;
  uint8_t *v19;
  const char *v20;
  uint64_t v21;
  int v22;
  double v23;
  uint8_t buf[4];
  double v25;

  if (!a2)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v13 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "pWsr,Invalid pointer", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    LOWORD(v22) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWsr,Invalid pointer", &v22, 2);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceScanResultToProtobuf(const CLWifiService_Type::ScanResult &, CLP::LogEntry::PrivateData::WifiScanResult *)", "%s\n", v14);
LABEL_41:
    if (v15 != buf)
      free(v15);
    return;
  }
  *(_DWORD *)(a2 + 44) |= 1u;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    operator new();
  if ((sub_10137103C((double *)a1, v4, 0) & 1) == 0)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v5 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v6 = *(double *)a1;
      *(_DWORD *)buf = 134349056;
      v25 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Error: Failed to convert wifi scan result applicable CF time to protobuf,%{public}.3lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v17 = *(double *)a1;
      v22 = 134349056;
      v23 = v17;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Error: Failed to convert wifi scan result applicable CF time to protobuf,%{public}.3lf", &v22, 12);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceScanResultToProtobuf(const CLWifiService_Type::ScanResult &, CLP::LogEntry::PrivateData::WifiScanResult *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  if (v7 != v8)
  {
    while (1)
    {
      v9 = *(_DWORD *)(a2 + 28);
      v10 = *(int *)(a2 + 24);
      if ((int)v10 >= v9)
      {
        if (v9 == *(_DWORD *)(a2 + 32))
        {
          wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase::Reserve((wireless_diagnostics::google::protobuf::internal::RepeatedPtrFieldBase *)(a2 + 16), v9 + 1);
          v9 = *(_DWORD *)(a2 + 28);
        }
        *(_DWORD *)(a2 + 28) = v9 + 1;
        sub_1002318FC();
      }
      v11 = *(_QWORD *)(a2 + 16);
      *(_DWORD *)(a2 + 24) = v10 + 1;
      v12 = *(_QWORD *)(v11 + 8 * v10);
      if (!v12)
        break;
      sub_10002A05C(v7, v12);
      v7 += 88;
      if (v7 == v8)
        return;
    }
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v16 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "pWap,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      LOWORD(v22) = 0;
      LODWORD(v21) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWap,Invalid pointer", &v22, v21);
      v15 = (uint8_t *)v20;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceScanResultToProtobuf(const CLWifiService_Type::ScanResult &, CLP::LogEntry::PrivateData::WifiScanResult *)", "%s\n", v20);
      goto LABEL_41;
    }
  }
}

void sub_100009A30()
{
  operator delete();
}

uint64_t sub_100009A5C(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  char *v9;
  _DWORD v10[2];
  __int16 v11;
  int v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  int v16;
  int v17;
  uint64_t v18;
  int v19;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109376;
    v14 = a2;
    v15 = 1024;
    v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gpsd,setGnssConstellations,enableflags,0x%x,disableflags,0x%x", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v10[0] = 67109376;
    v10[1] = a2;
    v11 = 1024;
    v12 = a3;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,setGnssConstellations,enableflags,0x%x,disableflags,0x%x", v10, 14);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::setGnssConstellations(uint32_t, uint32_t)", "%s\n", v9);
    if (v9 != (char *)buf)
      free(v9);
  }
  sub_1000FF07C((uint64_t)buf);
  if ((sub_100103BB0(25) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v17 = 25;
  v19 |= 0x400004u;
  v7 = v18;
  if (!v18)
    operator new();
  *(_DWORD *)(v18 + 20) |= 3u;
  *(_DWORD *)(v7 + 8) = a2;
  *(_DWORD *)(v7 + 12) = a3;
  sub_1000FF114(a1 + 2576, (uint64_t)buf);
  sub_1000FF8D8(a1 + 2176, 2);
  return sub_1000FF078(buf);
}

void sub_100009CDC()
{
  operator delete();
}

void sub_100009D1C()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#gpsd,engage", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2[0] = 0;
    v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,engage", v2, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::engage()", "%s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

void sub_100009EA0(uint64_t a1, unsigned __int8 a2)
{
  NSObject *v3;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned __int8 v6;
  const char *v7;
  uint8_t *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  atomic_store(a2, (unsigned __int8 *)(a1 + 184));
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v3 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    v4 = atomic_load((unsigned __int8 *)(a1 + 184));
    *(_DWORD *)buf = 67240192;
    v11 = v4 & 1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Raven: rct,updateThreadState,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    v6 = atomic_load((unsigned __int8 *)(a1 + 184));
    v9[0] = 67240192;
    v9[1] = v6 & 1;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v5, 0, "Raven: rct,updateThreadState,%{public}d", v9, 8);
    v8 = (uint8_t *)v7;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RavenThread::SetThreadState(BOOL)", "%s\n", v7);
    if (v8 != buf)
      free(v8);
  }
  std::condition_variable::notify_one((std::condition_variable *)(a1 + 80));
}

void sub_10000A070(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSArray *v4;

  v3 = CMMotionActivityDataArray;
  v4 = +[NSArray arrayWithArray:](NSArray, "arrayWithArray:", a2);
  +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v4, &v3, 1);
  CLConnectionMessage::sendReply(*(_QWORD *)(a1 + 40));

}

uint64_t sub_10000A110(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021AC348;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000A170(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021B8BE8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000A1D0(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102199FB8;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_10000A2A4(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  int v4;
  double v5;
  void *__p[2];
  char v8;
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  void **v14;
  __int16 v15;
  int v16;
  __int16 v17;
  double v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102192330);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    sub_100071A00(a1 + 32, __p);
    if (v8 >= 0)
      v3 = __p;
    else
      v3 = (void **)__p[0];
    v4 = *(_DWORD *)(a1 + 160);
    v5 = *(float *)(a1 + 508);
    *(_DWORD *)buf = 68289795;
    v10 = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2081;
    v14 = v3;
    v15 = 1026;
    v16 = v4;
    v17 = 2050;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#GnssRefLocationCache,getCachedReferenceLocation\", \"location,\":%{private, location:escape_only}s, \"integrity\":%{public}d, \"undulation\":\"%{public}f\"}", buf, 0x2Cu);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return a1 + 32;
}

void sub_10000A620(uint64_t a1, unsigned int a2, int a3, int a4)
{
  NSObject *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  NSObject *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char *v23;
  char *v24;
  const char *v25;
  uint64_t v26;
  _BYTE v27[688];
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  void *__p;
  char v31;
  std::__shared_weak_count *v32;
  id v33;
  unsigned int v34;
  unsigned __int8 v35;
  int v36;
  uint64_t v37;
  BOOL v38;
  _DWORD v39[2];
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  _BOOL4 v49;
  uint8_t buf[4];
  unsigned int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  _BOOL4 v61;

  if (!sub_10003EC20())
    return;
  sub_100129CA0((uint64_t)v27);
  if (a2 >= 2)
  {
    if (a2 == 2)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "CLGnssProvider,#Warning,invalid mode of operation", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v39[0]) = 0;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "CLGnssProvider,#Warning,invalid mode of operation", v39, 2);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      goto LABEL_34;
    }
  }
  else
  {
    v34 = a2;
  }
  v35 = a3;
  v36 = a4;
  if (!a3)
  {
    if (v34 < 2)
    {
      v10 = *(_QWORD *)(a1 + 3328) & ~(1 << v34);
      goto LABEL_19;
    }
    v25 = "bitset reset argument out of range";
LABEL_62:
    sub_100263950(v25);
  }
  if (v34 > 1)
  {
    v25 = "bitset set argument out of range";
    goto LABEL_62;
  }
  v10 = *(_QWORD *)(a1 + 3328) | (1 << v34);
LABEL_19:
  *(_QWORD *)(a1 + 3328) = v10;
  v38 = sub_100217AB4(a1 + 3352);
  v11 = *(_QWORD *)(a1 + 3328);
  if (*(_BYTE *)(a1 + 3305))
  {
    if (((sub_100051040(a1 + 3352) | v11) & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 3328);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGnssProvider,notifyRhythmicStatus,overwrite 1Hz client state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v39[0]) = 0;
        v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLGnssProvider,notifyRhythmicStatus,overwrite 1Hz client state", v39, 2);
        sub_100512490("Generic", 1, 0, 0, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v24);
        if (v24 != (char *)buf)
          free(v24);
      }
      v11 = *(_QWORD *)(a1 + 3328) | 1;
      *(_QWORD *)(a1 + 3328) = v11;
    }
  }
  v37 = v11;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67241472;
    v51 = v34;
    v52 = 1026;
    v53 = v36;
    v54 = 1026;
    v55 = v37 & 1;
    v56 = 1026;
    v57 = (v37 >> 1) & 1;
    v58 = 1026;
    v59 = v35;
    v60 = 1026;
    v61 = v38;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGnssProvider,notifyRhythmicStatus,modeOfOps,%{public}d,powerMode,%{public}d,currentModesOfOps,%{public}d,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v39[0] = 67241472;
    v39[1] = v34;
    v40 = 1026;
    v41 = v36;
    v42 = 1026;
    v43 = v37 & 1;
    v44 = 1026;
    v45 = (v37 >> 1) & 1;
    v46 = 1026;
    v47 = v35;
    v48 = 1026;
    v49 = v38;
    LODWORD(v26) = 38;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,notifyRhythmicStatus,modeOfOps,%{public}d,powerMode,%{public}d,currentModesOfOps,%{public}d,%{public}d,state,%{public}d,hasRhythmicClients,%{public}d", v39, v26);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyGnssModeOfOperationToClients(const CLLocationProvider_Type::GnssModeOfOperation, const BOOL, const CLRhythmicGnssWakeMode)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  *(_DWORD *)(a1 + 3312) = v34;
  *(_DWORD *)(a1 + 3320) = v36;
  *(_BYTE *)(a1 + 3316) = v35;
  *(_BYTE *)(a1 + 3336) = v38;
  sub_10023E030(a1 + 120, a1 + 3312);
  *(_DWORD *)buf = 41;
  (*(void (**)(uint64_t, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v27, 1, 0xFFFFFFFFLL, 0);
  sub_100011978(a1);
LABEL_34:

  v14 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v31 < 0)
    operator delete(__p);
  v17 = v29;
  if (v29)
  {
    v18 = (unint64_t *)&v29->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v28;
  if (v28)
  {
    v21 = (unint64_t *)&v28->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_10000ACB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000ACF0(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10215EB08;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000AD50(uint64_t a1, uint64_t a2, uint64_t *a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t *v12;
  id v13;
  id v14;

  *(_QWORD *)a1 = off_102147EF0;
  *(_QWORD *)(a1 + 8) = -[CLNotifierClientAdapter initWithClient:]([CLNotifierClientAdapter alloc], "initWithClient:", a1);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a6;
  if (*((char *)a3 + 23) >= 0)
    v12 = a3;
  else
    v12 = (uint64_t *)*a3;
  v13 = objc_msgSend(objc_msgSend(a4, "vendor"), "proxyForService:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12));
  *(_QWORD *)(a1 + 16) = v13;
  v14 = v13;
  if (a2)
    objc_msgSend(*(id *)(a1 + 16), "setDelegateEntityName:", a2);
  objc_msgSend(*(id *)(a1 + 16), "registerDelegate:inSilo:", *(_QWORD *)(a1 + 8), objc_msgSend(a4, "silo"));
  return a1;
}

uint64_t sub_10000AE24(uint64_t result)
{
  uint64_t v1;
  void **v2;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    v2 = (void **)(v1 + 112);
    sub_100279AA4(&v2);
    if (*(_BYTE *)(v1 + 96))
    {
      if (*(char *)(v1 + 39) < 0)
        operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

void sub_10000AE8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  NSObject *v7;
  NSObject *v8;
  id v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  uint64_t v19;

  if (a2)
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v7 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134218240;
      v17 = a3;
      v18 = 2048;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "TimeSyncWithReplyBlock received TimeSync machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      v12 = 134218240;
      v13 = a3;
      v14 = 2048;
      v15 = a4;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "TimeSyncWithReplyBlock received TimeSync machTimestamp,%llu,oscarTimestamp,%llu", &v12, 22);
      sub_100512490("Generic", 1, 0, 2, "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  }
  else
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "TimeSyncWithReplyBlock error getting TimeSync", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021D6A10);
      LOWORD(v12) = 0;
      v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 17, "TimeSyncWithReplyBlock error getting TimeSync", &v12, 2);
      sub_100512490("Generic", 1, 0, 0, "-[CLInternalService getOscarTimeSyncWithReplyBlock:]_block_invoke", "%s\n", v11);
      if (v11 != (char *)buf)
        free(v11);
    }
    v9 = objc_msgSend(objc_alloc((Class)NSError), "initWithDomain:code:userInfo:", CFSTR("com.apple.locationd.internalservice.errorDomain"), 0, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  }
  _Block_release(*(const void **)(a1 + 40));
}

uint64_t sub_10000B1E8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021497A8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000B248(uint64_t a1)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[32];
  _BYTE v27[12];
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;
  uint8_t buf[4];
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  int v50;
  __int16 v51;
  double v52;
  __int16 v53;
  int v54;

  v2 = vabdd_f64(CFAbsoluteTimeGetCurrent(), *(double *)(a1 + 360));
  if (*(_QWORD *)(a1 + 432)
    || *(_QWORD *)(a1 + 184)
    || *(_QWORD *)(a1 + 224)
    || *(_QWORD *)(a1 + 264)
    || *(_QWORD *)(a1 + 304)
    || (v3 = *(_QWORD *)(a1 + 344)) != 0)
  {
    LODWORD(v3) = *(_DWORD *)(a1 + 520) == -1;
  }
  if (*(int *)(a1 + 352) >= 5)
    LODWORD(v3) = 0;
  if (v2 <= 5400.0)
    v4 = v3;
  else
    v4 = 0;
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v5 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(_DWORD *)(a1 + 352);
    v7 = *(_QWORD *)(a1 + 432);
    v8 = *(_QWORD *)(a1 + 184);
    v9 = *(_QWORD *)(a1 + 224);
    v10 = *(_QWORD *)(a1 + 264);
    v11 = *(_QWORD *)(a1 + 304);
    v12 = *(_QWORD *)(a1 + 344);
    v13 = *(_DWORD *)(a1 + 520);
    *(_DWORD *)buf = 67111424;
    v36 = v6;
    v37 = 2048;
    v38 = v7;
    v39 = 2048;
    v40 = v8;
    v41 = 2048;
    v42 = v9;
    v43 = 2048;
    v44 = v10;
    v45 = 2048;
    v46 = v11;
    v47 = 2048;
    v48 = v12;
    v49 = 1024;
    v50 = v13;
    v51 = 2048;
    v52 = v2;
    v53 = 1024;
    v54 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d", buf, 0x5Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v15 = *(_DWORD *)(a1 + 352);
    v16 = *(_QWORD *)(a1 + 432);
    v17 = *(_QWORD *)(a1 + 184);
    v18 = *(_QWORD *)(a1 + 224);
    v19 = *(_QWORD *)(a1 + 264);
    v20 = *(_QWORD *)(a1 + 304);
    v21 = *(_QWORD *)(a1 + 344);
    v22 = *(_DWORD *)(a1 + 520);
    LODWORD(v25) = 67111424;
    HIDWORD(v25) = v15;
    *(_WORD *)v26 = 2048;
    *(_QWORD *)&v26[2] = v16;
    *(_WORD *)&v26[10] = 2048;
    *(_QWORD *)&v26[12] = v17;
    *(_WORD *)&v26[20] = 2048;
    *(_QWORD *)&v26[22] = v18;
    *(_WORD *)&v26[30] = 2048;
    *(_WORD *)v27 = 2048;
    *(_QWORD *)&v27[2] = v20;
    *(_WORD *)&v27[10] = 2048;
    HIDWORD(v28) = HIDWORD(v21);
    v29 = 1024;
    v30 = v22;
    v31 = 2048;
    v32 = v2;
    v33 = 1024;
    v34 = v4;
    LODWORD(v24) = 90;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: areQueryRetriesNeeded, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu, currentRetry, %d, sinceRetrySequenceStart, %.2lf, needed, %d", &v25, v24, v25, *(_QWORD *)v26, *(_QWORD *)&v26[8], *(_QWORD *)&v26[16], *(_QWORD *)&v26[24], v19, *(double *)v27, *(_DWORD *)&v27[8]);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNetworkLocationProvider::isRetryTimerNeeded()", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  return v4;
}

double sub_10000B544(uint64_t a1, int a2, int a3)
{
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v12;
  char *v13;
  _DWORD v14[2];
  __int16 v15;
  int v16;
  __int16 v17;
  const char *v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;
  __int16 v23;
  const char *v24;

  if (*(_BYTE *)(a1 + 6244))
  {
    v4 = "Emer";
LABEL_3:
    v5 = 6;
    goto LABEL_17;
  }
  if (*(_BYTE *)(a1 + 6493))
  {
    v6 = "Motion";
    v7 = 6;
    v8 = 60;
    if (a3)
      v8 = 15;
    v9 = 300;
    if (a3)
      v9 = 15;
    if (a2 == 1)
    {
      v7 = v9;
      v6 = "Frozen";
    }
    if (a2 == 2)
      v5 = v8;
    else
      v5 = v7;
    if (a2 == 2)
      v4 = "Static";
    else
      v4 = v6;
  }
  else
  {
    v12 = a1 + 3248;
    if (!sub_100182520(a1 + 3248))
    {
      v4 = "Unassociated";
      goto LABEL_3;
    }
    if (sub_100217A4C(v12) && (sub_100EFF324(v12) & 1) != 0)
    {
      v4 = "InvalidAssoc";
      goto LABEL_3;
    }
    v4 = "Assoc";
    v5 = 300;
  }
LABEL_17:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v10 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240706;
    v20 = v5;
    v21 = 1026;
    v22 = a3;
    v23 = 2082;
    v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiTimer, nextscan, %{public}d, haveLoc, %{public}d, codepath, %{public}s", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v14[0] = 67240706;
    v14[1] = v5;
    v15 = 1026;
    v16 = a3;
    v17 = 2082;
    v18 = v4;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiTimer, nextscan, %{public}d, haveLoc, %{public}d, codepath, %{public}s", v14, 24);
    sub_100512490("Generic", 1, 0, 2, "cl::chrono::secondsf CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::selectNextScanInterval(CLMotionActivity::Type, BOOL) const", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
  return (double)v5;
}

void sub_10000B7F4(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionActivitySubscription::onMotionActivityNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102196AE0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionActivitySubscription::onMotionActivityNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102196AE0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionActivitySubscription::onMotionActivityNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10000E128(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10000B9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

BOOL sub_10000B9CC(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  _DWORD v4[2];
  __int16 v5;
  const char *v6;

  v1 = *(_QWORD *)(a1 + 320);
  if (v1)
  {
    objc_msgSend(*(id *)(a1 + 320), "fetchLocationOfInterestAtLocation:", objc_msgSend(objc_alloc((Class)CLLocation), "initWithLatitude:longitude:", *(double *)(a1 + 336), *(double *)(a1 + 344)));
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v2 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 68289026;
      v4[1] = 0;
      v5 = 2082;
      v6 = "";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning LOI Bridge not setup.\"}", (uint8_t *)v4, 0x12u);
    }
  }
  return v1 != 0;
}

uint64_t sub_10000BADC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "#gpsd,stop initiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8[0] = 0;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,stop initiated", v8, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::stop()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  sub_10023AED0(a1);
  sub_1000FF154(a1 + 2576);
  v3 = sub_100103BB0(2);
  if ((v3 & 1) == 0)
    sub_10180AC90(v3, v4, v5);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 2;
  result = sub_1000FF8D8(a1 + 2176, 2);
  *(_BYTE *)(a1 + 1705) = 0;
  *(_QWORD *)(a1 + 1712) = 0xC08F400000000000;
  *(_BYTE *)(a1 + 1680) = 0;
  return result;
}

void sub_10000BCC0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  std::string *v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  char *v11;
  std::string __str;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  uint64_t v16;

  if (!*(_BYTE *)(a1 + 1664))
  {
    if (*(_BYTE *)(a1 + 1680) || sub_100CD597C(a1 + 1684) || *(_BYTE *)(a1 + 1665))
    {
      memset(&__str, 0, sizeof(__str));
      if (sub_10005DE60(a2, &__str))
      {
        sub_1000FF154(a1 + 2576);
        if ((sub_100103BB0(11) & 1) == 0)
          __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
        v4 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)(a1 + 2596) = 11;
        *(_DWORD *)(a1 + 2972) = v4 | 0x10004;
        v5 = *(_QWORD *)(a1 + 2704);
        if (!v5)
          operator new();
        *(_DWORD *)(v5 + 20) |= 1u;
        v6 = *(std::string **)(v5 + 8);
        if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v6, &__str);
        sub_1000FF8D8(a1 + 2176, 2);
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v7 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v8 = a2;
          if (*(char *)(a2 + 23) < 0)
            v8 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136446210;
          v16 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#gpsd,Could not read RTI file,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          if (*(char *)(a2 + 23) < 0)
            a2 = *(_QWORD *)a2;
          v13 = 136446210;
          v14 = a2;
          v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,Could not read RTI file,%{public}s", &v13, 12);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRtiFile(std::string)", "%s\n", v11);
          if (v11 != (char *)buf)
            free(v11);
        }
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#rti,ignore update outside of session", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        LOWORD(__str.__r_.__value_.__l.__data_) = 0;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#rti,ignore update outside of session", &__str, 2);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRtiFile(std::string)", "%s\n", v10);
        if (v10 != (char *)buf)
          free(v10);
      }
    }
  }
}

void sub_10000C0E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10000C12C(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  id v5;
  unsigned int v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  const char *v11;
  uint8_t *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  int v21;
  __int16 v22;
  unsigned int v23;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  HIDWORD(v13) = 0;
  v5 = objc_msgSend((id)CLConnectionMessage::getDictionary(*a2), "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageActivityTypeKey"));
  if (v5 && (sub_1001C13CC(v5, (_DWORD *)&v13 + 1) & 1) != 0)
  {
    v6 = HIDWORD(v13);
    if (*(_DWORD *)(a1 + 232) != HIDWORD(v13))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v7 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 24);
        v9 = *(_DWORD *)(a1 + 232);
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)v17 = 0;
        *(_WORD *)&v17[4] = 2082;
        *(_QWORD *)&v17[6] = "";
        v18 = 2114;
        v19 = v8;
        v20 = 1026;
        v21 = v9;
        v22 = 1026;
        v23 = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client changed activity type\", \"Client\":%{public, location:escape_only}@, \"from\":%{public}d, \"to\":%{public}d}", buf, 0x28u);
      }
      sub_101163BE0(a1, v6);
      sub_1001B9A84(a1);
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)v17 = "kCLConnectionMessageActivityTypeKey";
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "Couldn't get value for key %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A38E8);
      v14 = 136446210;
      v15 = "kCLConnectionMessageActivityTypeKey";
      LODWORD(v13) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Couldn't get value for key %{public}s", &v14, v13);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 0, "void CLLocationSubscription::handleMessageActivityType(std::shared_ptr<CLConnectionMessage>)", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }

}

void sub_10000C3FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10000C42C(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(void);
  NSObject *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  int v14;
  const char *v15;
  uint8_t *v16;
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 1384) == 176)
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v3 = (uint64_t *)(v2 + 1385);
    v4 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *v3;
      v6 = v3[1];
      *(_DWORD *)buf = 134218240;
      v22 = v5;
      v23 = 2048;
      v24 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "MotionCoprocessor copying the latest TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v10 = *v3;
      v11 = v3[1];
      v17 = 134218240;
      v18 = v10;
      v19 = 2048;
      v20 = v11;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 0, "MotionCoprocessor copying the latest TimeSync data machTimestamp,%llu,oscarTimestamp,%llu", &v17, 22);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
    v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    if (qword_10229FC80 != -1)
      dispatch_once(&qword_10229FC80, &stru_10219AC48);
    v8 = qword_10229FC88;
    if (os_log_type_enabled((os_log_t)qword_10229FC88, OS_LOG_TYPE_FAULT))
    {
      v9 = *(unsigned __int8 *)(v2 + 1384);
      *(_DWORD *)buf = 67109120;
      LODWORD(v22) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "MotionCoprocessor last received TimeSync has the wrong packet type,%hhu", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC80 != -1)
        dispatch_once(&qword_10229FC80, &stru_10219AC48);
      v14 = *(unsigned __int8 *)(v2 + 1384);
      v17 = 67109120;
      LODWORD(v18) = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC88, 17, "MotionCoprocessor last received TimeSync has the wrong packet type,%hhu", &v17);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 0, "virtual void CLMotionCoprocessor::getTimeSyncData(CMTimeSyncCallback) const_block_invoke", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v7 = *(void (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  v7();
  _Block_release(*(const void **)(a1 + 32));
}

uint64_t sub_10000C784(uint64_t a1)
{
  NSObject *v2;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "feeding unknown", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v6[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "feeding unknown", v6, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::forceSendUnknownActivity()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  CLMotionActivity::init((CLMotionActivity *)(a1 + 176));
  return sub_1000709BC(a1);
}

uint64_t sub_10000CA44(uint64_t a1, const char *a2)
{
  CFStringRef v3;
  uint64_t v4;

  v3 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v4 = (*(uint64_t (**)(uint64_t, CFStringRef))(*(_QWORD *)a1 + 864))(a1, v3);
  CFRelease(v3);
  return v4;
}

void sub_10000CAA0(uint64_t a1)
{
  NSObject *v2;
  char *v3;
  _WORD v4[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,startLocation", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v4[0] = 0;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,startLocation", v4, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::startLocation()", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
  objc_msgSend(*(id *)(a1 + 3232), "setNextFireDelay:", 30.0);
  objc_msgSend(*(id *)(a1 + 3240), "setNextFireDelay:interval:", 1.0, 1.0);
  if (!*(_BYTE *)(a1 + 3704))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 3696) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 3696) + 8), 27, 0);
    *(_BYTE *)(a1 + 3704) = 1;
  }
  sub_10024233C((_BYTE *)a1);
  sub_10023DC14(a1 + 120);
  *(double *)(a1 + 3656) = sub_1001FCBB4();
  sub_100E05CAC(a1, (uint64_t *)(a1 + 3656));
}

void sub_10000CC94(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  size_t v6;
  void **v7;
  size_t v8;
  uint64_t *v9;
  size_t v10;
  NSObject *v12;
  uint64_t *v13;
  void **v14;
  NSObject *v15;
  int v16;
  NSObject *v18;
  int v19;
  int v20;
  const char *v21;
  uint8_t *v22;
  int v23;
  const char *v24;
  uint8_t *v25;
  uint64_t *v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  uint64_t *v30;
  uint8_t buf[4];
  uint64_t *v32;
  void *v33[2];
  unsigned __int8 v34;

  if (*a3 == 4)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v15 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v16 = *(_DWORD *)(a4 + 188);
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLC: Received Location Services status %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v23 = *(_DWORD *)(a4 + 188);
      LODWORD(v33[0]) = 67240192;
      HIDWORD(v33[0]) = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Received Location Services status %{public}d", v33, 8);
      v25 = (uint8_t *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v24);
      if (v25 != buf)
        free(v25);
    }
    if (*(_DWORD *)(a4 + 188) == 1)
    {
      sub_10089353C(a1, 1);
    }
    else
    {
      sub_100893204(a1, 1);
      objc_msgSend(*(id *)(a1 + 544), "clearLocationData");
      sub_100F9A6AC(a1 + 568);
    }
  }
  else if (*a3 == 2)
  {
    sub_1001A885C(a4, (uint64_t)v33);
    if ((v34 & 0x80u) == 0)
      v6 = v34;
    else
      v6 = (size_t)v33[1];
    if ((v34 & 0x80u) == 0)
      v7 = v33;
    else
      v7 = (void **)v33[0];
    if (byte_102305057 >= 0)
      v8 = byte_102305057;
    else
      v8 = unk_102305048;
    if (byte_102305057 >= 0)
      v9 = &qword_102305040;
    else
      v9 = (uint64_t *)qword_102305040;
    if (v8 >= v6)
      v10 = v6;
    else
      v10 = v8;
    if (!memcmp(v7, v9, v10) && v8 == v6)
    {
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v12 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        if (byte_102305057 >= 0)
          v13 = &qword_102305040;
        else
          v13 = (uint64_t *)qword_102305040;
        *(_DWORD *)buf = 136380675;
        v32 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "CLC: Recevied kNotificationAuthorization for %{private}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_102159648);
        if (byte_102305057 >= 0)
          v26 = &qword_102305040;
        else
          v26 = (uint64_t *)qword_102305040;
        v29 = 136380675;
        v30 = v26;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLC: Recevied kNotificationAuthorization for %{private}s", &v29, 12);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
      if ((v34 & 0x80u) == 0)
        v14 = v33;
      else
        v14 = (void **)v33[0];
      if (objc_msgSend(objc_msgSend(*(id *)(a1 + 792), "syncgetAuthorizationContextIfClientIsNonZonal:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14)), "isAuthorizedForServiceTypeMask:", 16))sub_10089353C(a1, 2);
      else
        sub_100893204(a1, 2);
    }
    if ((char)v34 < 0)
      operator delete(v33[0]);
  }
  else
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102159648);
    v18 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v19 = *a3;
      *(_DWORD *)buf = 67240192;
      LODWORD(v32) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#Warning CLC: Received unknown notification, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_102159648);
      v20 = *a3;
      LODWORD(v33[0]) = 67240192;
      HIDWORD(v33[0]) = v20;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "#Warning CLC: Received unknown notification, %{public}d", v33, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLCachedLocationController::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
}

void sub_10000D21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  _Unwind_Resume(exception_object);
}

void sub_10000D5F4(int *a1, char *a2, uint64_t a3)
{
  unsigned int v6;
  int v7;
  int v8;
  unsigned int v9;
  char v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _WORD v19[8];
  uint8_t buf[1640];

  if (a3)
  {
    v6 = sub_10137E34C(a1);
    if (!sub_10021E0B4(v6))
      sub_1018FADB0();
    v7 = *(_DWORD *)(a3 + 56);
    v8 = v7 | 4;
    *(_DWORD *)(a3 + 56) = v7 | 4;
    *(_DWORD *)(a3 + 20) = v6;
    v9 = *a1;
    if (*a1 == 3)
    {
      v14 = sub_100247CC4(a2 + 1);
      if (!sub_10021E0B4(v14))
        sub_1018FAD88();
      v8 = *(_DWORD *)(a3 + 56) | 8;
      *(_DWORD *)(a3 + 56) = v8;
      *(_DWORD *)(a3 + 40) = v14;
      v9 = *a1;
    }
    else if (v9 == 1)
    {
      v10 = *a2;
      *(_DWORD *)(a3 + 56) = v7 | 0x14;
      *(_BYTE *)(a3 + 44) = v10;
      return;
    }
    if (v9 <= 7 && ((1 << v9) & 0xC8) != 0)
    {
      *(_DWORD *)(a3 + 56) = v8 | 0x20;
      v15 = *(_QWORD *)(a3 + 24);
      if (!v15)
        operator new();
      sub_1002479E4((uint64_t)(a2 + 8), v15);
      v9 = *a1;
    }
    if (v9 == 3)
    {
      *(_DWORD *)(a3 + 56) |= 0x40u;
      v16 = *(_QWORD *)(a3 + 32);
      if (!v16)
        operator new();
      sub_100009530((uint64_t)(a2 + 104), v16);
      v9 = *a1;
    }
    if ((v9 & 0xFFFFFFFE) == 0xA)
    {
      v17 = a2[137];
      *(_DWORD *)(a3 + 56) |= 0x100u;
      *(_BYTE *)(a3 + 46) = v17;
    }
    else if (v9 == 6)
    {
      v18 = a2[138];
      *(_DWORD *)(a3 + 56) |= 0x200u;
      *(_BYTE *)(a3 + 47) = v18;
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v11 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "pWn,Invalid pointer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v19[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWn,Invalid pointer", v19, 2);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceNotificationToProtobuf(const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &, CLP::LogEntry::PrivateData::WifiNotification *)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
}

void sub_10000D904()
{
  operator delete();
}

void sub_10000D944()
{
  NSObject *v0;
  char *v1;
  _WORD v2[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "#gpsd,disengage", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2[0] = 0;
    v1 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,disengage", v2, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::disengage()", "%s\n", v1);
    if (v1 != (char *)buf)
      free(v1);
  }
}

uint64_t sub_10000DAC8(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021AB118;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10000DB28(_DWORD *a1, int a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CLGC,L5Context,Update,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7[0] = 67240192;
    v7[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGC,L5Context,Update,%{public}d", v7, 8);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleGnssBandL5Update(const CLGnssBandUseType)", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  a1[3] = a2;
  sub_1001924EC(a1);
}

uint64_t sub_10000DCE0(uint64_t a1, int a2, void **a3, double a4, double a5)
{
  double Current;
  double v11;
  _BOOL4 v12;
  char v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  char *v38;
  char *v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;

  Current = CFAbsoluteTimeGetCurrent();
  v11 = Current;
  if (a2)
    Current = *(double *)(a1 + 536);
  v12 = *(unsigned __int8 *)(a1 + 531) != 0;
  v13 = sub_10006C39C(a1, Current, v11);
  sub_10006C088(a1, v12, v13);
  v56 = 0;
  v57 = 0;
  v58 = 0;
  sub_10008758C(*(_QWORD **)(a1 + 440), &v56, a4, a5);
  v14 = v56;
  if (v56 == v57)
  {
    v15 = 0;
    if (!v56)
      return v15;
    goto LABEL_23;
  }
  LODWORD(v15) = 0;
  do
  {
    sub_1000CF518((uint64_t)v14, (uint64_t)&v47);
    v16 = (char *)a3[1];
    v17 = (char *)a3[2];
    if (v16 >= v17)
    {
      v25 = 0xF0F0F0F0F0F0F0F1 * ((v16 - (_BYTE *)*a3) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 > 0x1E1E1E1E1E1E1E1)
        sub_100259694();
      v27 = 0xF0F0F0F0F0F0F0F1 * ((v17 - (_BYTE *)*a3) >> 3);
      if (2 * v27 > v26)
        v26 = 2 * v27;
      if (v27 >= 0xF0F0F0F0F0F0F0)
        v28 = 0x1E1E1E1E1E1E1E1;
      else
        v28 = v26;
      if (v28)
        v29 = (char *)sub_1002B2B08((uint64_t)(a3 + 2), v28);
      else
        v29 = 0;
      v30 = &v29[136 * v25];
      *(_OWORD *)v30 = v47;
      v31 = v48;
      v32 = v49;
      v33 = v51;
      *((_OWORD *)v30 + 3) = v50;
      *((_OWORD *)v30 + 4) = v33;
      *((_OWORD *)v30 + 1) = v31;
      *((_OWORD *)v30 + 2) = v32;
      v34 = v52;
      v35 = v53;
      v36 = v54;
      *((_QWORD *)v30 + 16) = v55;
      *((_OWORD *)v30 + 6) = v35;
      *((_OWORD *)v30 + 7) = v36;
      *((_OWORD *)v30 + 5) = v34;
      v38 = (char *)*a3;
      v37 = (char *)a3[1];
      v39 = v30;
      if (v37 != *a3)
      {
        do
        {
          *(_OWORD *)(v39 - 136) = *(_OWORD *)(v37 - 136);
          v40 = *(_OWORD *)(v37 - 120);
          v41 = *(_OWORD *)(v37 - 104);
          v42 = *(_OWORD *)(v37 - 88);
          *(_OWORD *)(v39 - 72) = *(_OWORD *)(v37 - 72);
          *(_OWORD *)(v39 - 88) = v42;
          *(_OWORD *)(v39 - 104) = v41;
          *(_OWORD *)(v39 - 120) = v40;
          v43 = *(_OWORD *)(v37 - 56);
          v44 = *(_OWORD *)(v37 - 40);
          v45 = *(_OWORD *)(v37 - 24);
          *((_QWORD *)v39 - 1) = *((_QWORD *)v37 - 1);
          *(_OWORD *)(v39 - 24) = v45;
          *(_OWORD *)(v39 - 40) = v44;
          *(_OWORD *)(v39 - 56) = v43;
          v39 -= 136;
          v37 -= 136;
        }
        while (v37 != v38);
        v37 = (char *)*a3;
      }
      v24 = v30 + 136;
      *a3 = v39;
      a3[1] = v30 + 136;
      a3[2] = &v29[136 * v28];
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_OWORD *)v16 = v47;
      v18 = v48;
      v19 = v49;
      v20 = v51;
      *((_OWORD *)v16 + 3) = v50;
      *((_OWORD *)v16 + 4) = v20;
      *((_OWORD *)v16 + 1) = v18;
      *((_OWORD *)v16 + 2) = v19;
      v21 = v52;
      v22 = v53;
      v23 = v54;
      *((_QWORD *)v16 + 16) = v55;
      *((_OWORD *)v16 + 6) = v22;
      *((_OWORD *)v16 + 7) = v23;
      *((_OWORD *)v16 + 5) = v21;
      v24 = v16 + 136;
    }
    a3[1] = v24;
    v15 = (v15 + 1);
    v14 += 160;
  }
  while (v14 != v57);
  v14 = v56;
  if (v56)
  {
LABEL_23:
    v57 = v14;
    operator delete(v14);
  }
  return v15;
}

void sub_10000DF64(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10000DF88(int *a1, char *a2, uint64_t a3, double a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_DWORD *)(a3 + 52) |= 1u;
  v4 = *(_QWORD *)(a3 + 32);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 44) |= 1u;
  *(double *)(v4 + 8) = a4;
  *(_DWORD *)(a3 + 52) |= 2u;
  v5 = *(_QWORD *)(a3 + 40);
  if (!v5)
    operator new();
  *(_DWORD *)(v5 + 488) |= 0x200000u;
  v6 = *(_QWORD *)(v5 + 176);
  if (!v6)
    operator new();
  sub_10000D5F4(a1, a2, v6);
}

void sub_10000E084()
{
  operator delete();
}

void sub_10000E0D8(wireless_diagnostics::google::protobuf::MessageLite *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_10213BBE0;
  if ((wireless_diagnostics::google::protobuf::MessageLite *)qword_1023107E8 != this)
  {
    v2 = *((_QWORD *)this + 1);
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(this);
}

void sub_10000E128(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4)
{
  id v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  id v13;
  NSDictionary *v14;
  _OWORD v15[8];
  uint64_t v16;
  uint64_t v17;
  id v18;

  if (*a3 == 10 || *a3 == 1)
  {
    v8 = objc_alloc((Class)CMMotionActivity);
    v9 = *(_OWORD *)(a4 + 112);
    v15[6] = *(_OWORD *)(a4 + 96);
    v15[7] = v9;
    v16 = *(_QWORD *)(a4 + 128);
    v10 = *(_OWORD *)(a4 + 48);
    v15[2] = *(_OWORD *)(a4 + 32);
    v15[3] = v10;
    v11 = *(_OWORD *)(a4 + 80);
    v15[4] = *(_OWORD *)(a4 + 64);
    v15[5] = v11;
    v12 = *(_OWORD *)(a4 + 16);
    v15[0] = *(_OWORD *)a4;
    v15[1] = v12;
    v13 = objc_msgSend(v8, "initWithMotionActivity:", v15);
    v17 = CMMotionActivityData;
    v18 = v13;
    v14 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v18, &v17, 1);

    if (*a3 == 10)
    {
      sub_100F9933C(a1, &v14);
    }
    else if (*a3 == 1)
    {
      sub_10000E4F4(a1, &v14);
    }
  }
}

void sub_10000E240(uint64_t a1, int *a2, double *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStepCountSubscription::onPedometerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218E7A0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStepCountSubscription::onPedometerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218E7A0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStepCountSubscription::onPedometerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100035090(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10000E3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_10000E418(uint64_t a1)
{
  return objc_msgSend(objc_loadWeak((id *)(*(_QWORD *)(a1 + 32) + 16)), "onAdvertisementBufferEmptied");
}

uint64_t sub_10000E434(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_1021A3560;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_10000E494(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021A7560;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10000E4F4(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_100876330(off_102196C50, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10000E588(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10000E59C(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = &off_102183C48;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10000E5FC(uint64_t a1)
{
  id v2;
  double v3;
  unsigned int v4;
  NSObject *v5;
  int v6;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  if (*(char *)(a1 + 935) < 0)
  {
    **(_BYTE **)(a1 + 912) = 0;
    *(_QWORD *)(a1 + 920) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 912) = 0;
    *(_BYTE *)(a1 + 935) = 0;
  }
  if (*(char *)(a1 + 959) < 0)
  {
    **(_BYTE **)(a1 + 936) = 0;
    *(_QWORD *)(a1 + 944) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 936) = 0;
    *(_BYTE *)(a1 + 959) = 0;
  }
  if (*(char *)(a1 + 983) < 0)
  {
    **(_BYTE **)(a1 + 960) = 0;
    *(_QWORD *)(a1 + 968) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 960) = 0;
    *(_BYTE *)(a1 + 983) = 0;
  }
  sub_100030A38(a1);
  v3 = sub_1001FCBB4();
  sub_100243AD8(a1 + 2544, v3);
  *(_QWORD *)(a1 + 2368) = 0;
  *(_BYTE *)(a1 + 2376) = 1;
  v4 = objc_msgSend((id)qword_102303BC0, "startLocation");

  if (v4)
  {
    if (!*(_BYTE *)(a1 + 1977))
      sub_100736628(a1);
    if (!*(_BYTE *)(a1 + 1978))
      sub_1007368E8(a1);
    sub_1007330C8(a1);
  }
  else
  {
    *(_DWORD *)buf = 9;
    (*(void (**)(uint64_t, uint8_t *, uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, buf, 1, 0xFFFFFFFFLL);
  }
  sub_100227C8C(a1);
  if (qword_1022A0000 != -1)
    dispatch_once(&qword_1022A0000, &stru_1021506B8);
  v5 = qword_1022A0008;
  if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(unsigned __int8 *)(a1 + 1949);
    *(_DWORD *)buf = 67240192;
    v11 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Accessory,StartLocation,IgnoreAccessoryLocation,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v7 = *(unsigned __int8 *)(a1 + 1949);
    v9[0] = 67240192;
    v9[1] = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "Accessory,StartLocation,IgnoreAccessoryLocation,%{public}d", v9, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::startLocation()", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
}

uint64_t sub_10000E8B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = off_10213EEF8;
  sub_10011A5A8(a1 + 9);
  v2 = a1[7];
  a1[7] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = a1[6];
  a1[6] = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return sub_10002FA68((uint64_t)a1);
}

void sub_10000E910(uint64_t *a1)
{
  uint64_t v2;

  *a1 = (uint64_t)off_10213BC58;
  if ((uint64_t *)qword_1023107F0 != a1)
  {
    v2 = a1[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  sub_10010C59C(a1 + 2);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite((wireless_diagnostics::google::protobuf::MessageLite *)a1);
}

double sub_10000E96C()
{
  tm *v0;
  time_t v2;

  v2 = 0;
  time(&v2);
  v0 = localtime(&v2);
  return (double)(3600 * v0->tm_hour + 60 * v0->tm_min + v0->tm_sec);
}

void sub_10000E9B8(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  NSObject *v5;
  _QWORD *v6;
  id v7;
  _QWORD *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  std::string *v12;
  int v13;
  _QWORD *v14;
  __int16 v15;
  id v16;
  std::string v17;
  CFAbsoluteTime Current;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = *(_QWORD *)(a1 + 48);
    memset(&v17, 0, sizeof(v17));
    std::string::operator=(&v17, (const std::string *)(a1 + 56));
    Current = CFAbsoluteTimeGetCurrent();
    v3 = sub_100C9F790(v2 + 24, 0, 0, (uint64_t)&v17);
    v3[1] = v2 + 24;
    v4 = *(_QWORD *)(v2 + 24);
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(v2 + 24) = v3;
    ++*(_QWORD *)(v2 + 40);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10217CD78);
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v6 = (_QWORD *)*v6;
      v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "localizedDescription"), "UTF8String");
      LODWORD(v17.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v17.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
      WORD2(v17.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v17.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning Couldn't launch application %s (%s)", (uint8_t *)&v17, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&v17, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10217CD78);
      v8 = (_QWORD *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0)
        v8 = (_QWORD *)*v8;
      v9 = qword_1022A02D8;
      v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 40), "localizedDescription"), "UTF8String");
      v13 = 136315394;
      v14 = v8;
      v15 = 2080;
      v16 = v10;
      _os_log_send_and_compose_impl(2, 0, &v17, 1628, &_mh_execute_header, v9, 0, "#Warning Couldn't launch application %s (%s)", (const char *)&v13, 22);
      v12 = (std::string *)v11;
      sub_100512490("Generic", 1, 0, 2, "void CLApplicationLifecycleManager::launchApplication(const std::string &, CLClientServiceTypeMask)_block_invoke", "%s\n", v11);
      if (v12 != &v17)
        free(v12);
    }
  }
}

void sub_10000EC30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000EC54(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102199FB8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10000ECB4(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  double Current;
  _QWORD v8[7];

  Current = CFAbsoluteTimeGetCurrent();
  sub_1002426A0(a1 + 120, a3, a4, Current);
  if (*(_QWORD *)(a1 + 2960))
  {
    sub_100166054(v8);
    sub_10000DF88(a3, (char *)a4, (uint64_t)v8, Current);
    sub_100158284(*(_QWORD *)(a1 + 2960), (uint64_t)v8);
    sub_100166004(v8);
  }
}

void sub_10000ED40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100166004(va);
  _Unwind_Resume(a1);
}

void sub_10000ED54(uint64_t a1, unsigned int *a2, NSDictionary *a3, int a4)
{
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  double v33;
  NSObject *v34;
  uint64_t v35;
  id v36;
  unsigned int v37;
  NSObject *v38;
  uint64_t v39;
  id v40;
  unsigned int v41;
  NSObject *v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  void *v48;
  uint64_t *p_shared_weak_owners;
  unint64_t v50;
  NSObject *v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  NSObject *v55;
  id *v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  NSObject *v61;
  uint64_t v62;
  uint64_t v63;
  const char *v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  uint64_t v70;
  uint64_t v71;
  const char *v72;
  NSObject *v73;
  uint64_t v74;
  uint64_t *v75;
  unsigned int v76;
  const char *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  NSObject *v83;
  uint32_t v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95[18];
  void *v96[2];
  char v97;
  void *__p[2];
  char v99;
  _QWORD v100[5];
  _QWORD v101[8];
  std::__shared_weak_count *v102;
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint8_t v105[4];
  int v106;
  __int16 v107;
  const char *v108;
  __int16 v109;
  uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  uint64_t v114;
  uint8_t buf[8];
  _BYTE v116[32];
  unint64_t v117;
  __int16 v118;
  double v119;
  __int16 v120;
  uint64_t v121;

  if (*(_BYTE *)(a1 + 72) && !*(_BYTE *)(a1 + 104))
    sub_1007D4958(*(_QWORD *)(a1 + 16), *(void **)(a1 + 48), 1);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1) & 1) != 0
    || objc_msgSend(*(id *)(a1 + 48), "isAuthLimited"))
  {
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
    v8 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
    {
      v9 = *(_QWORD *)(a1 + 48);
      v10 = *a2;
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v116 = 2082;
      *(_QWORD *)&v116[2] = "";
      *(_WORD *)&v116[10] = 2114;
      *(_QWORD *)&v116[12] = v9;
      *(_WORD *)&v116[20] = 2050;
      *(_QWORD *)&v116[22] = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt System services may not request authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}", buf, 0x26u);
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
    }
    v11 = qword_1022A01C8;
    if (os_signpost_enabled((os_log_t)qword_1022A01C8))
    {
      v12 = *(_QWORD *)(a1 + 48);
      v13 = *a2;
      *(_QWORD *)buf = 68289538;
      *(_WORD *)v116 = 2082;
      *(_QWORD *)&v116[2] = "";
      *(_WORD *)&v116[10] = 2114;
      *(_QWORD *)&v116[12] = v12;
      *(_WORD *)&v116[20] = 2050;
      *(_QWORD *)&v116[22] = v13;
      v14 = "#AuthPrompt System services may not request authorization";
      v15 = "{\"msg%{public}.0s\":\"#AuthPrompt System services may not request authorization\", \"ClientKeyPath\":%{publ"
            "ic, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
LABEL_13:
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v14, v15, buf, 0x26u);
      return;
    }
    return;
  }
  if ((objc_msgSend(*(id *)(a1 + 112), "inUseLevelIsAtLeast:", 5) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 369))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(_QWORD *)(a1 + 48);
        v18 = *a2;
        objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
        v19 = objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v17;
        *(_WORD *)&v116[20] = 2050;
        *(_QWORD *)&v116[22] = v18;
        *(_WORD *)&v116[30] = 2050;
        v117 = v19;
        v20 = "{\"msg%{public}.0s\":\"#AuthPrompt Permitting authorization request placed by client entitled to specially"
              " request prompts despite being insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@"
              ", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{"
              "public, location:CLClientInUseLevel}lld}";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v20, buf, 0x30u);
      }
    }
    else
    {
      sub_1015A2E04(buf, "com.apple.locationd.prompt_from_background");
      v21 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(_QWORD *)a1 + 40))(a1, buf);
      if ((v116[15] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (!v21)
      {
        if (a4)
        {
          sub_10052D218(a1 + 400, &v103);
          *(_QWORD *)buf = 0;
          *(_QWORD *)v116 = buf;
          *(_QWORD *)&v116[8] = 0x7812000000;
          *(_QWORD *)&v116[16] = sub_1002070E4;
          *(_QWORD *)&v116[24] = sub_100207C10;
          sub_1007F5A68((uint64_t)&v118, (uint64_t)a2);
          v101[0] = _NSConcreteStackBlock;
          v101[2] = sub_100BA0264;
          v101[3] = &unk_102174B18;
          v101[6] = a1;
          v101[7] = v103;
          v48 = *(void **)(a1 + 32);
          v101[1] = 3321888768;
          v102 = v104;
          if (v104)
          {
            p_shared_weak_owners = &v104->__shared_weak_owners_;
            do
              v50 = __ldxr((unint64_t *)p_shared_weak_owners);
            while (__stxr(v50 + 1, (unint64_t *)p_shared_weak_owners));
          }
          v101[4] = a3;
          v101[5] = buf;
          objc_msgSend(v48, "afterInterval:async:", v101, 3.0);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v51 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          {
            v52 = *(_QWORD *)(a1 + 48);
            v53 = *a2;
            objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
            v54 = objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
            *(_DWORD *)v105 = 68289794;
            v106 = 0;
            v107 = 2082;
            v108 = "";
            v109 = 2114;
            v110 = v52;
            v111 = 2050;
            v112 = v53;
            v113 = 2050;
            v114 = v54;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Warning Delaying authorization request placed while insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, location:CLClientInUseLevel}lld}", v105, 0x30u);
          }
          if (v102)
            std::__shared_weak_count::__release_weak(v102);
          _Block_object_dispose(buf, 8);
          sub_100235568((uint64_t)&v118);
          if (v104)
            std::__shared_weak_count::__release_weak(v104);
        }
        else
        {
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
          v55 = qword_1022A01C8;
          if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          {
            v57 = *(void **)(a1 + 112);
            v56 = (id *)(a1 + 112);
            v58 = (uint64_t)*(v56 - 8);
            v59 = *a2;
            objc_msgSend(v57, "inUseLevel");
            v60 = objc_msgSend(*v56, "inUseLevel");
            *(_DWORD *)buf = 68289794;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v116 = 2082;
            *(_QWORD *)&v116[2] = "";
            *(_WORD *)&v116[10] = 2114;
            *(_QWORD *)&v116[12] = v58;
            *(_WORD *)&v116[20] = 2050;
            *(_QWORD *)&v116[22] = v59;
            *(_WORD *)&v116[30] = 2050;
            v117 = v60;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt #Warning Dropping authorization request placed while insufficiently in-use\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, location:CLClientInUseLevel}lld}", buf, 0x30u);
          }
          sub_1002355A0(a2, (uint64_t)CFSTR("App is in the background"));
        }
        return;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v16 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v22 = *(_QWORD *)(a1 + 48);
        v23 = *a2;
        objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
        v24 = objc_msgSend(*(id *)(a1 + 112), "inUseLevel");
        *(_DWORD *)buf = 68289794;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v22;
        *(_WORD *)&v116[20] = 2050;
        *(_QWORD *)&v116[22] = v23;
        *(_WORD *)&v116[30] = 2050;
        v117 = v24;
        v20 = "{\"msg%{public}.0s\":\"#AuthPrompt #widgetkit Permitting authorization request placed by client entitled t"
              "o specially request prompts for Widgets\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestTy"
              "pe\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"inUseLevel\":%{public, locat"
              "ion:CLClientInUseLevel}lld}";
        goto LABEL_28;
      }
    }
  }
  v25 = *a2 - 1;
  if (v25 < 0xB && ((0x50Fu >> v25) & 1) != 0)
  {
    if ((qword_101C1D1C0[v25] & ~*(_QWORD *)(a1 + 80)) != 0)
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v44 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v45 = *a2;
        v46 = *(_QWORD *)(a1 + 48);
        v47 = *(const char **)(a1 + 80);
        *(_QWORD *)buf = 68289794;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2050;
        *(_QWORD *)&v116[12] = v45;
        *(_WORD *)&v116[20] = 2114;
        *(_QWORD *)&v116[22] = v46;
        *(_WORD *)&v116[30] = 2050;
        v117 = (unint64_t)v47;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization value requested by client ignored because not in its allowable mask\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@, \"authMaskAllowable\":%{public}lu}", buf, 0x30u);
      }
      sub_1002355A0(a2, (uint64_t)CFSTR("Requested authorization level isn't supported by the app"));
      return;
    }
    if (sub_100240954(*(_QWORD *)(a1 + 16)) && !sub_100247EA0(*(void **)(a1 + 48)))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v66 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v67 = *a2;
        v68 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)buf = 68289538;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2050;
        *(_QWORD *)&v116[12] = v67;
        *(_WORD *)&v116[20] = 2114;
        *(_QWORD *)&v116[22] = v68;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization request ignored, at lock-screen\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
      }
      sub_1002355A0(a2, (uint64_t)CFSTR("App is requesting authorization prompt while the screen is locked"));
      return;
    }
    if (sub_100240384(*(_QWORD *)(a1 + 16)))
    {
      v31 = sub_1007F05E0(*(_QWORD *)(a1 + 16));
      objc_msgSend(*(id *)(a1 + 32), "currentLatchedAbsoluteTimestamp");
      v33 = v32 - v31;
      if (v33 < 900.0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v73 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v74 = *a2;
          v75 = (uint64_t *)(a1 + 16);
          sub_1007BCD78(*(_QWORD *)(a1 + 16));
          v76 = sub_1007BCD78(*(_QWORD *)(a1 + 16));
          v77 = *(const char **)(a1 + 48);
          v78 = sub_1007BCD90(*v75);
          *(_QWORD *)buf = 68290306;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2050;
          *(_QWORD *)&v116[12] = v74;
          *(_WORD *)&v116[20] = 2050;
          *(_QWORD *)&v116[22] = v76;
          *(_WORD *)&v116[30] = 2114;
          v117 = (unint64_t)v77;
          v118 = 2114;
          v119 = *(double *)&v78;
          v120 = 2050;
          v121 = (uint64_t)v33;
          _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Authorization request ignored because another authorization effort is already in flight\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"existingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@, \"existingClientKey\":%{public, location:escape_only}@, \"InflightRequestSquattingDurationSeconds\":%{public}ld}", buf, 0x44u);
        }
        sub_1002355A0(a2, (uint64_t)CFSTR("Outstanding authorization prompt detected."));
        return;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v34 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_ERROR))
      {
        v35 = *(_QWORD *)(a1 + 48);
        v36 = sub_1007BCD90(*(_QWORD *)(a1 + 16));
        sub_1007BCD78(*(_QWORD *)(a1 + 16));
        v37 = sub_1007BCD78(*(_QWORD *)(a1 + 16));
        *(_QWORD *)buf = 68290050;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v35;
        *(_WORD *)&v116[20] = 2114;
        *(_QWORD *)&v116[22] = v36;
        *(_WORD *)&v116[30] = 2050;
        v117 = v37;
        v118 = 2050;
        v119 = v33 / 60.0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x3Au);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
      }
      v38 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v39 = *(_QWORD *)(a1 + 48);
        v40 = sub_1007BCD90(*(_QWORD *)(a1 + 16));
        sub_1007BCD78(*(_QWORD *)(a1 + 16));
        v41 = sub_1007BCD78(*(_QWORD *)(a1 + 16));
        *(_DWORD *)buf = 68290050;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v39;
        *(_WORD *)&v116[20] = 2114;
        *(_QWORD *)&v116[22] = v40;
        *(_WORD *)&v116[30] = 2050;
        v117 = v41;
        v118 = 2050;
        v119 = v33 / 60.0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v38, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown", "{\"msg%{public}.0s\":\"#AuthPrompt Inflight auth-request squatting for more than 15 mins. TearingDown\", \"ClientKeyPath\":%{public, location:escape_only}@, \"squattingClient\":%{public, location:escape_only}@, \"squattingRequestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"InflightRequestSquattingDurationMinutes\":\"%{public}.2f\"}", buf, 0x3Au);
      }
      sub_1007EABB4(*(_QWORD *)(a1 + 16), 1, 0);
    }
    if (objc_msgSend(*(id *)(a1 + 112), "transientAwareRegistrationResult") == 4)
    {
      if (*a2 == 9)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v42 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v43 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)buf = 68289282;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2114;
          *(_QWORD *)&v116[12] = v43;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring request for temporary precise from app with no authorization yet\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_1002355A0(a2, (uint64_t)CFSTR("App's authorization status is not yet determined. App needs to ask for authorization before asking for temporary precise upgrade."));
        return;
      }
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v79 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
      {
        v80 = *(_QWORD *)(a1 + 48);
        v81 = *a2;
        *(_QWORD *)buf = 68289538;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v80;
        *(_WORD *)&v116[20] = 2050;
        *(_QWORD *)&v116[22] = v81;
        v82 = "{\"msg%{public}.0s\":\"#AuthPrompt Allowing standard prompt because no auth yet\", \"ClientKeyPath\":%{pub"
              "lic, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld}";
        v83 = v79;
        v84 = 38;
LABEL_123:
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, v82, buf, v84);
      }
    }
    else
    {
      if (objc_msgSend(*(id *)(a1 + 112), "registrationResult") == 1
        && *a2 == 4
        && sub_1007F1400(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48)))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v61 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v62 = *(_QWORD *)(a1 + 48);
          v63 = *a2;
          v64 = sub_1002488A8(objc_msgSend(*(id *)(a1 + 112), "registrationResult"));
          *(_QWORD *)buf = 68289794;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2114;
          *(_QWORD *)&v116[12] = v62;
          *(_WORD *)&v116[20] = 2050;
          *(_QWORD *)&v116[22] = v63;
          *(_WORD *)&v116[30] = 2082;
          v117 = (unint64_t)v64;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Allowing one-shot upgrade attempt\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        *(_QWORD *)buf = 0;
        *(_QWORD *)v116 = buf;
        *(_QWORD *)&v116[8] = 0x7812000000;
        *(_QWORD *)&v116[16] = sub_1002070E4;
        *(_QWORD *)&v116[24] = sub_100207C10;
        sub_1007F5A68((uint64_t)&v118, (uint64_t)a2);
        v65 = *(_QWORD *)(a1 + 48);
        v100[0] = _NSConcreteStackBlock;
        v100[1] = 3221225472;
        v100[2] = sub_100BA0370;
        v100[3] = &unk_102174B50;
        v100[4] = buf;
        sub_1015A2E04(__p, "");
        sub_1007F5908((uint64_t)v105, 7, v65, v100, (__int128 *)__p);
        sub_1007F5AC8((uint64_t)a2, (uint64_t)v105);
        sub_100235568((uint64_t)v105);
        if (v99 < 0)
          operator delete(__p[0]);
        _Block_object_dispose(buf, 8);
        sub_100235568((uint64_t)&v118);
        goto LABEL_130;
      }
      if (objc_msgSend(*(id *)(a1 + 112), "registrationResult") == 2 && !*(_BYTE *)(a1 + 369))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v91 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v92 = *(_QWORD *)(a1 + 48);
          *(_QWORD *)buf = 68289282;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2114;
          *(_QWORD *)&v116[12] = v92;
          _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Client is denied.  Asking client manager to consider doing a big switch prompt\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        v93 = *(_QWORD *)(a1 + 48);
        sub_1015A2E04(v96, "");
        sub_1007F5908((uint64_t)buf, 10, v93, 0, (__int128 *)v96);
        sub_1007F5AC8((uint64_t)a2, (uint64_t)buf);
        sub_100235568((uint64_t)buf);
        if (v97 < 0)
          operator delete(v96[0]);
        goto LABEL_130;
      }
      if (*a2 == 9 && (objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceType:", 12) & 1) == 0)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v89 = qword_1022A01C8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_130;
        v90 = *(_QWORD *)(a1 + 48);
        *(_QWORD *)buf = 68289282;
        *(_WORD *)v116 = 2082;
        *(_QWORD *)&v116[2] = "";
        *(_WORD *)&v116[10] = 2114;
        *(_QWORD *)&v116[12] = v90;
        v82 = "{\"msg%{public}.0s\":\"#AuthPrompt Allowing no-auth-change auth request because this #compensation client "
              "wants temporary precise\", \"ClientKeyPath\":%{public, location:escape_only}@}";
        v83 = v89;
        v84 = 28;
        goto LABEL_123;
      }
      if (!*(_BYTE *)(a1 + 369))
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v85 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v86 = *(_QWORD *)(a1 + 48);
          v87 = *a2;
          v88 = sub_1002488A8(objc_msgSend(*(id *)(a1 + 112), "registrationResult"));
          *(_QWORD *)buf = 68289794;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2114;
          *(_QWORD *)&v116[12] = v86;
          *(_WORD *)&v116[20] = 2050;
          *(_QWORD *)&v116[22] = v87;
          *(_WORD *)&v116[30] = 2082;
          v117 = (unint64_t)v88;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring authorization request due to existing authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        sub_1002355A0(a2, (uint64_t)CFSTR("The user has already made a decision about the app's authorization"));
        return;
      }
      if (objc_msgSend(*(id *)(a1 + 112), "registrationResult") != 2)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v69 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
        {
          v70 = *(_QWORD *)(a1 + 48);
          v71 = *a2;
          v72 = sub_1002488A8(objc_msgSend(*(id *)(a1 + 112), "registrationResult"));
          *(_QWORD *)buf = 68289794;
          *(_WORD *)v116 = 2082;
          *(_QWORD *)&v116[2] = "";
          *(_WORD *)&v116[10] = 2114;
          *(_QWORD *)&v116[12] = v70;
          *(_WORD *)&v116[20] = 2050;
          *(_QWORD *)&v116[22] = v71;
          *(_WORD *)&v116[30] = 2082;
          v117 = (unint64_t)v72;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Ignoring special-reprompt authorization request due to existing authorization\", \"ClientKeyPath\":%{public, location:escape_only}@, \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"RegistrationResult\":%{public, location:escape_only}s}", buf, 0x30u);
        }
        return;
      }
    }
LABEL_130:
    v94 = *(_QWORD *)(a1 + 16);
    sub_1007F5A68((uint64_t)v95, (uint64_t)a2);
    sub_1007CEC84(v94, a1, v95, a3);
    sub_100235568((uint64_t)v95);
    return;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v26 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v27 = *a2;
    v28 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)buf = 68289538;
    *(_WORD *)v116 = 2082;
    *(_QWORD *)&v116[2] = "";
    *(_WORD *)&v116[10] = 2050;
    *(_QWORD *)&v116[12] = v27;
    *(_WORD *)&v116[20] = 2114;
    *(_QWORD *)&v116[22] = v28;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Unrecognized authorization value\", \"requestType\":%{public, location:CLClientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x26u);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  v11 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v29 = *a2;
    v30 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)buf = 68289538;
    *(_WORD *)v116 = 2082;
    *(_QWORD *)&v116[2] = "";
    *(_WORD *)&v116[10] = 2050;
    *(_QWORD *)&v116[12] = v29;
    *(_WORD *)&v116[20] = 2114;
    *(_QWORD *)&v116[22] = v30;
    v14 = "#AuthPrompt Unrecognized authorization value";
    v15 = "{\"msg%{public}.0s\":\"#AuthPrompt Unrecognized authorization value\", \"requestType\":%{public, location:CLCl"
          "ientManager_Type::AuthorizationRequestType}lld, \"ClientKeyPath\":%{public, location:escape_only}@}";
    goto LABEL_13;
  }
}

void sub_10001009C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,std::__shared_weak_count *a44,uint64_t a45,std::__shared_weak_count *a46,char a47)
{
  uint64_t v47;
  uint64_t v48;

  sub_100235568((uint64_t)&a47);
  if (a30 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v48 - 240), 8);
  sub_100235568(v47);
  _Unwind_Resume(a1);
}

uint64_t sub_100010174(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
    operator delete(*(void **)(a1 + 152));
  if (*(char *)(a1 + 151) < 0)
    operator delete(*(void **)(a1 + 128));
  if (*(char *)(a1 + 127) < 0)
    operator delete(*(void **)(a1 + 104));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100010204(uint64_t a1)
{
  NSObject *v2;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  _OWORD *v12;
  _OWORD v13[5];
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  __int128 *v17;
  __int128 v18;
  int v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  _OWORD *v23;
  _OWORD v24[3];
  int v25;
  __int128 *v26;
  __int128 v27;
  int v28;
  __int128 *v29;
  __int128 v30;
  __int128 *v31;
  __int128 v32;
  _BYTE *v33;
  _BYTE v34[48];
  int v35;
  _OWORD *v36;
  _OWORD v37[21];
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  int v50;
  _BYTE *v51;
  _BYTE v52[48];
  int v53;
  uint64_t v54;
  int v55;
  int v56;
  uint64_t v57;
  _BYTE v58[23];
  int v59;
  int v60;
  int v61;
  unint64_t v62;
  int v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  char v68;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021802A0);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v9[0] = 68289026;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd,GnssSessionData::reset\"}", (uint8_t *)v9, 0x12u);
  }
  bzero(v9, 0x4C0uLL);
  v12 = v13;
  __asm { FMOV            V1.2D, #-1.0 }
  v16 = 0u;
  v13[1] = _Q1;
  memset(&v13[2], 0, 48);
  v14 = 0;
  v15 = &v16;
  v18 = 0u;
  v17 = &v18;
  v19 = -1;
  v20 = 0u;
  v21 = 0u;
  v22 = 0x3F80000000000000;
  v23 = v24;
  memset(v24, 0, sizeof(v24));
  v25 = 1065353216;
  v27 = 0u;
  v26 = &v27;
  v28 = 0;
  v30 = 0u;
  v32 = 0u;
  memset(v34, 0, sizeof(v34));
  v29 = &v30;
  v31 = &v32;
  v33 = v34;
  v35 = 1065353216;
  v36 = v37;
  memset(v37, 0, 165);
  memset((char *)&v37[10] + 8, 0, 168);
  v38 = 11;
  v39 = -1;
  v40 = -1;
  v41 = 0xBF800000BF800000;
  v42 = 0;
  memset(v52, 0, sizeof(v52));
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  v49 = 0u;
  v50 = 0;
  v51 = v52;
  v53 = 1065353216;
  v54 = 0;
  v55 = 1;
  v56 = 0;
  v57 = 0;
  v59 = 0;
  v60 = 0;
  memset(v58, 0, sizeof(v58));
  v61 = -1;
  v62 = 0xBFF0000000000000;
  v63 = -1;
  v67 = 0;
  v66 = 0u;
  v65 = 0u;
  v64 = 0u;
  v68 = 1;
  sub_10002E254(a1, (__int128 *)v9);
  return sub_10002E6B0((uint64_t)v9);
}

uint64_t sub_100010498@<X0>(int64x2_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t result;
  double v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  const char *v39;
  uint8_t *v40;
  double v41;
  int v42;
  double v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  int v63;
  __int16 v64;
  uint64_t v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  uint64_t v71;
  __int16 v72;
  int v73;
  uint8_t buf[4];
  uint64_t v75;
  __int16 v76;
  uint64_t v77;
  __int16 v78;
  int v79;
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  uint64_t v87;
  __int16 v88;
  uint64_t v89;
  __int16 v90;
  uint64_t v91;
  __int16 v92;
  int v93;
  __int16 v94;
  uint64_t v95;
  __int16 v96;
  uint64_t v97;
  __int16 v98;
  uint64_t v99;
  __int16 v100;
  uint64_t v101;
  __int16 v102;
  int v103;

  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v6 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v9 = *(_DWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 56);
    v12 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 184);
    v14 = *(_QWORD *)(a2 + 192);
    v15 = *(_DWORD *)(a2 + 216);
    v16 = *(_QWORD *)(a2 + 200);
    v17 = *(_QWORD *)(a2 + 208);
    v18 = *(_QWORD *)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 96);
    v20 = *(_QWORD *)(a2 + 24);
    v21 = *(unsigned __int8 *)(a2 + 160);
    *(_DWORD *)buf = 134221568;
    v75 = v7;
    v76 = 2048;
    v77 = v8;
    v78 = 1024;
    v79 = v9;
    v80 = 2048;
    v81 = v10;
    v82 = 2048;
    v83 = v11;
    v84 = 2048;
    v85 = v12;
    v86 = 2048;
    v87 = v13;
    v88 = 2048;
    v89 = v14;
    v90 = 2048;
    v91 = v16;
    v92 = 1024;
    v93 = v15;
    v94 = 2048;
    v95 = v17;
    v96 = 2048;
    v97 = v18;
    v98 = 2048;
    v99 = v19;
    v100 = 2048;
    v101 = v20;
    v102 = 1024;
    v103 = v21;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "StepCount, %f, %f, %d, %f, %f, %f, %f, %f, %f, %u, %f, %f, %f, %f, %d", buf, 0x8Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v25 = *(_QWORD *)(a2 + 8);
    v24 = *(_QWORD *)(a2 + 16);
    v26 = *(_DWORD *)(a2 + 32);
    v27 = *(_QWORD *)(a2 + 40);
    v28 = *(_QWORD *)(a2 + 56);
    v29 = *(_QWORD *)(a2 + 64);
    v30 = *(_QWORD *)(a2 + 184);
    v31 = *(_QWORD *)(a2 + 192);
    v32 = *(_DWORD *)(a2 + 216);
    v34 = *(_QWORD *)(a2 + 200);
    v33 = *(_QWORD *)(a2 + 208);
    v35 = *(_QWORD *)(a2 + 80);
    v36 = *(_QWORD *)(a2 + 96);
    v37 = *(_QWORD *)(a2 + 24);
    v38 = *(unsigned __int8 *)(a2 + 160);
    v44 = 134221568;
    v45 = v24;
    v46 = 2048;
    v47 = v25;
    v48 = 1024;
    v49 = v26;
    v50 = 2048;
    v51 = v27;
    v52 = 2048;
    v53 = v28;
    v54 = 2048;
    v55 = v29;
    v56 = 2048;
    v57 = v30;
    v58 = 2048;
    v59 = v31;
    v60 = 2048;
    v61 = v34;
    v62 = 1024;
    v63 = v32;
    v64 = 2048;
    v65 = v33;
    v66 = 2048;
    v67 = v35;
    v68 = 2048;
    v69 = v36;
    v70 = 2048;
    v71 = v37;
    v72 = 1024;
    v73 = v38;
    LODWORD(v41) = 140;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "StepCount, %f, %f, %d, %f, %f, %f, %f, %f, %f, %u, %f, %f, %f, %f, %d", COERCE_DOUBLE(&v44), v41, v42, v43);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLStepDistanceFusionResult> CLStepDistanceFusion::feedStepCountEntry(const CLExtendedStepCountEntry &)", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
  result = sub_100231C2C(a1, (double *)a2);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  while (a1[32].i64[1])
  {
    v23 = *(double *)(*(_QWORD *)(a1[30].i64[1] + (((unint64_t)a1[32].i64[0] >> 6) & 0x3FFFFFFFFFFFFF8))
                    + 8 * (a1[32].i64[0] & 0x1FF));
    result = a1[29].i64[1] == 1
           ? sub_100CDD8F4((uint64_t)a1, (void **)a3, v23)
           : sub_10007A178((uint64_t)a1, (const char *)a3, v23);
    if (!(_DWORD)result)
      break;
    a1[32] = vaddq_s64(a1[32], (int64x2_t)xmmword_101B9DFC0);
    result = sub_10047F604((uint64_t)a1[30].i64, 1);
  }
  return result;
}

void sub_100010830(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100010854(uint64_t a1, int *a2, UInt8 *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLDaemonClient::onPressureBias");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102174F38);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonClient::onPressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102174F38);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonClient::onPressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1002438C4(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100010A0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100010B00(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  void *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF318);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,stop", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,stop", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::stop()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
  if (*(_BYTE *)(a1 + 153))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DEM,TBA, unregistered for tunnel and bridge assistance notifications\"}", buf, 0x12u);
    }
    *(_BYTE *)(a1 + 153) = 0;
  }
  if (*(_BYTE *)(a1 + 114))
  {
    v4 = *(void **)(a1 + 8);
    if (v4)
      objc_msgSend(v4, "clear");
  }
  *(_BYTE *)(a1 + 114) = 0;
}

void sub_100010D44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  const std::string *v5;
  std::string *v6;
  char v7;
  _BYTE v8[48];

  if (a2 == a1)
  {
    wireless_diagnostics::google::protobuf::internal::LogMessage::LogMessage(v8, 3, "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/ProtobufDefs/GpsdProtocol.pb.cc", 5269);
    v4 = wireless_diagnostics::google::protobuf::internal::LogMessage::operator<<(v8, "CHECK failed: (&from) != (this): ");
    wireless_diagnostics::google::protobuf::internal::LogFinisher::operator=(&v7, v4);
    wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)v8);
  }
  if ((*(_BYTE *)(a2 + 20) & 1) != 0)
  {
    v5 = *(const std::string **)(a2 + 8);
    *(_DWORD *)(a1 + 20) |= 1u;
    v6 = *(std::string **)(a1 + 8);
    if (v6 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v6, v5);
  }
}

void sub_100010E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  wireless_diagnostics::google::protobuf::internal::LogMessage::~LogMessage((wireless_diagnostics::google::protobuf::internal::LogMessage *)va);
  _Unwind_Resume(a1);
}

void sub_100010F1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100010F30(uint64_t a1, uint64_t a2, char *__src)
{
  double v3;
  BOOL v4;
  double v7;
  double v8;
  uint64_t result;
  double v13;
  double v14;
  NSObject *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  NSObject *v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  double v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE v42[32];
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[2];
  _BYTE v50[513];
  _QWORD v51[2];
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  char v58;
  uint8_t buf[4];
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  uint64_t v64;

  v3 = *(double *)(a2 + 76);
  if (v3 == -1.0)
    return 0;
  v4 = v3 < 0.0 || ((*(_QWORD *)&v3 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 > 0x3FE;
  if (v4 && (unint64_t)(*(_QWORD *)&v3 - 1) > 0xFFFFFFFFFFFFELL)
    return 0;
  if ((*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) != 1)
    return 0;
  v7 = *(double *)(a2 + 44);
  if (v7 == -1.0)
    return 0;
  v8 = *(double *)(a2 + 52);
  if (v7 < 0.0 || v8 == -1.0)
    return 0;
  result = 0;
  if ((*(_QWORD *)&v7 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v8 <= 0.0)
    return result;
  if ((*(_QWORD *)&v8 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL)
    return 0;
  result = 0;
  v13 = *((double *)__src + 4);
  if ((*(_QWORD *)&v13 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL && v13 > 0.0)
  {
    if (*(_BYTE *)(a1 + 1232))
    {
      v14 = *(double *)(a1 + 624);
      if (v13 <= v14)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v15 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          v60 = v13;
          v61 = 2048;
          v62 = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Pedometer Assistance: encountered out-of-order GNSS notification time %.3lf vs. last seen notification time %.3lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B6718);
          *(_DWORD *)v42 = 134218240;
          *(double *)&v42[4] = v13;
          *(_WORD *)&v42[12] = 2048;
          *(double *)&v42[14] = v14;
          LODWORD(v35) = 22;
          v34 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning Pedometer Assistance: encountered out-of-order GNSS notification time %.3lf vs. last seen notification time %.3lf", COERCE_DOUBLE(v42), v35);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdateGPSLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v34);
          if (v34 != (char *)buf)
            free(v34);
        }
      }
    }
    v16 = *(_OWORD *)(a2 + 112);
    v47 = *(_OWORD *)(a2 + 96);
    v48 = v16;
    v49[0] = *(_OWORD *)(a2 + 128);
    *(_OWORD *)((char *)v49 + 12) = *(_OWORD *)(a2 + 140);
    v17 = *(_OWORD *)(a2 + 48);
    v43 = *(_OWORD *)(a2 + 32);
    v44 = v17;
    v18 = *(_OWORD *)(a2 + 80);
    v45 = *(_OWORD *)(a2 + 64);
    v46 = v18;
    v19 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)v42 = *(_OWORD *)a2;
    *(_OWORD *)&v42[16] = v19;
    memcpy(v50, __src, sizeof(v50));
    v51[0] = *((_QWORD *)__src + 65);
    v20 = *((_QWORD *)__src + 66);
    v51[1] = v20;
    if (v20)
    {
      v21 = (unint64_t *)(v20 + 8);
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    v23 = *(_OWORD *)(__src + 616);
    v56 = *(_OWORD *)(__src + 600);
    v57 = v23;
    v24 = *(_OWORD *)(__src + 552);
    v52 = *(_OWORD *)(__src + 536);
    v53 = v24;
    v25 = *(_OWORD *)(__src + 584);
    v54 = *(_OWORD *)(__src + 568);
    v55 = v25;
    v58 = __src[632];
    sub_100EB2A54(a1 + 432, (uint64_t)v42);
    sub_1002111C8((_QWORD *)(a1 + 384), a1 + 432);
    if (*(_QWORD *)(a1 + 424) >= 0xDuLL)
      sub_10142A4A0((int64x2_t *)(a1 + 384));
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v27 = *(double *)(a2 + 76);
      v28 = *(double *)(a2 + 44);
      v29 = *(_QWORD *)(a2 + 52);
      *(_DWORD *)buf = 134218496;
      v60 = v27;
      v61 = 2048;
      v62 = v28;
      v63 = 2048;
      v64 = v29;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received GPS time,%.3lf,speed,%.3lf,speedSigma,%.3lf", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v30 = *(_QWORD *)(a2 + 76);
      v31 = *(_QWORD *)(a2 + 44);
      v32 = *(_QWORD *)(a2 + 52);
      v36 = 134218496;
      v37 = v30;
      v38 = 2048;
      v39 = v31;
      v40 = 2048;
      v41 = v32;
      LODWORD(v35) = 32;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: received GPS time,%.3lf,speed,%.3lf,speedSigma,%.3lf", COERCE_DOUBLE(&v36), v35);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGNSSPedometerAssistanceController::UpdateGPSLocation(const CLDaemonLocation &, const CLDaemonLocationPrivate &)", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
    sub_100261F44((uint64_t)v51);
    return 1;
  }
  return result;
}

void sub_10001144C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_10001146C(uint64_t a1)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  char v15;
  __int128 v16;
  __int128 v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  _BYTE *v26;
  NSObject *v27;
  int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  _BYTE v41[48];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _BYTE v47[28];
  _BYTE v48[513];
  uint64_t v49;
  std::__shared_weak_count *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  char v57;
  uint64_t buf;
  __int16 v59;
  const char *v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BYTE v64[54];

  v2 = sub_10000A2A4(a1 + 496);
  v3 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)v41 = *(_OWORD *)v2;
  *(_OWORD *)&v41[16] = v3;
  v4 = *(_OWORD *)(v2 + 80);
  v6 = *(_OWORD *)(v2 + 32);
  v5 = *(_OWORD *)(v2 + 48);
  v43 = *(_OWORD *)(v2 + 64);
  v44 = v4;
  *(_OWORD *)&v41[32] = v6;
  v42 = v5;
  v8 = *(_OWORD *)(v2 + 112);
  v7 = *(_OWORD *)(v2 + 128);
  v9 = *(_OWORD *)(v2 + 96);
  *(_OWORD *)&v47[12] = *(_OWORD *)(v2 + 140);
  v46 = v8;
  *(_OWORD *)v47 = v7;
  v45 = v9;
  memcpy(v48, (const void *)(v2 + 160), sizeof(v48));
  v49 = *(_QWORD *)(v2 + 680);
  v10 = *(std::__shared_weak_count **)(v2 + 688);
  v50 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(_OWORD *)(v2 + 696);
  v14 = *(_OWORD *)(v2 + 728);
  v52 = *(_OWORD *)(v2 + 712);
  v53 = v14;
  v51 = v13;
  v15 = *(_BYTE *)(v2 + 792);
  v16 = *(_OWORD *)(v2 + 744);
  v17 = *(_OWORD *)(v2 + 776);
  v55 = *(_OWORD *)(v2 + 760);
  v56 = v17;
  v54 = v16;
  v57 = v15;
  if (sub_100112110(a1))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v19 = *(_DWORD *)(a1 + 8312);
      v20 = *(_QWORD *)(a1 + 8220);
      v21 = *(_QWORD *)(a1 + 8228);
      v22 = *(_QWORD *)(a1 + 8244);
      v23 = *(_QWORD *)(a1 + 8236);
      v24 = *(_QWORD *)(a1 + 8252);
      buf = 68290563;
      v59 = 2082;
      v60 = "";
      v61 = 1026;
      v62 = v19;
      v63 = 2049;
      *(_QWORD *)v64 = v20;
      *(_WORD *)&v64[8] = 2049;
      *(_QWORD *)&v64[10] = v21;
      *(_WORD *)&v64[18] = 2050;
      *(_QWORD *)&v64[20] = v22;
      *(_WORD *)&v64[28] = 2050;
      *(_QWORD *)&v64[30] = v23;
      *(_WORD *)&v64[38] = 2050;
      *(_QWORD *)&v64[40] = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed tightly coupled location as assistance location\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x4Au);
    }
    sub_10013AEB8(a1, a1 + 8216, 0, 0);
    goto LABEL_27;
  }
  v25 = (unsigned __int8 *)(a1 + 11672);
  if (*(_BYTE *)(a1 + 11672))
  {
    if (*(double *)(a1 + 1596) > 0.0)
    {
      v26 = (_BYTE *)(a1 + 1576);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v28 = *v25;
        v29 = *(_DWORD *)(a1 + 1672);
        v30 = *(_QWORD *)(a1 + 1580);
        v31 = *(_QWORD *)(a1 + 1588);
        v33 = *(_QWORD *)(a1 + 1596);
        v32 = *(_QWORD *)(a1 + 1604);
        v34 = *(_QWORD *)(a1 + 1612);
        buf = 68290819;
        v59 = 2082;
        v60 = "";
        v61 = 1026;
        v62 = v28;
        v63 = 1026;
        *(_DWORD *)v64 = v29;
        *(_WORD *)&v64[4] = 2049;
        *(_QWORD *)&v64[6] = v30;
        *(_WORD *)&v64[14] = 2049;
        *(_QWORD *)&v64[16] = v31;
        *(_WORD *)&v64[24] = 2050;
        *(_QWORD *)&v64[26] = v32;
        *(_WORD *)&v64[34] = 2050;
        *(_QWORD *)&v64[36] = v33;
        *(_WORD *)&v64[44] = 2050;
        *(_QWORD *)&v64[46] = v34;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed cached reference location as assistance location\", \"isEmergency\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x50u);
      }
LABEL_22:
      sub_10013AEB8(a1, (uint64_t)v26, 0, 0);
      goto LABEL_27;
    }
  }
  else if (*(double *)&v41[20] > 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v35 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v36 = *v25;
      buf = 68290819;
      v59 = 2082;
      v60 = "";
      v61 = 1026;
      v62 = v36;
      v63 = 1026;
      *(_DWORD *)v64 = v45;
      *(_WORD *)&v64[4] = 2049;
      *(_QWORD *)&v64[6] = *(_QWORD *)&v41[4];
      *(_WORD *)&v64[14] = 2049;
      *(_QWORD *)&v64[16] = *(_QWORD *)&v41[12];
      *(_WORD *)&v64[24] = 2050;
      *(_QWORD *)&v64[26] = *(_QWORD *)&v41[28];
      *(_WORD *)&v64[34] = 2050;
      *(_QWORD *)&v64[36] = *(_QWORD *)&v41[20];
      *(_WORD *)&v64[44] = 2050;
      *(_QWORD *)&v64[46] = *(_QWORD *)&v41[36];
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, feed cached reference location as assistance location\", \"isEmergency\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", (uint8_t *)&buf, 0x50u);
    }
    v26 = v41;
    goto LABEL_22;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v37 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289026;
    v59 = 2082;
    v60 = "";
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, cached reference location not available\"}", (uint8_t *)&buf, 0x12u);
  }
LABEL_27:
  v38 = v50;
  if (v50)
  {
    v39 = (unint64_t *)&v50->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
}

void sub_100011964(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  _Unwind_Resume(a1);
}

void sub_100011978(uint64_t a1)
{
  double v2;
  int v3;
  BOOL v4;
  NSObject *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  _BYTE v16[688];
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *__p;
  char v20;
  std::__shared_weak_count *v21;
  id v22;
  BOOL v23;
  _DWORD v24[2];
  __int16 v25;
  double v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  _BOOL4 v30;
  __int16 v31;
  double v32;
  __int16 v33;
  int v34;

  if (sub_10003EC20())
  {
    sub_100129CA0((uint64_t)v16);
    v2 = sub_1001FCBB4() - *(double *)(a1 + 3248);
    v3 = (v2 >= 1200.0) & (*(_DWORD *)(a1 + 3328) >> 1);
    v4 = !sub_100195F08() || ((v3 | !sub_1000FDB0C()) & 1) != 0 || *(_BYTE *)(a1 + 3304) != 0;
    v23 = v4;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240704;
      v30 = v23;
      v31 = 2050;
      v32 = v2;
      v33 = 1026;
      v34 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#ilsa,CLGnssProvider,notifyRhythmicStreamingControl,isStreamingAllowed,%{public}d,timeSinceLastGnssFix_s,%{public}.3lf,streamingForced,%{public}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v24[0] = 67240704;
      v24[1] = v23;
      v25 = 2050;
      v26 = v2;
      v27 = 1026;
      v28 = v3;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#ilsa,CLGnssProvider,notifyRhythmicStreamingControl,isStreamingAllowed,%{public}d,timeSinceLastGnssFix_s,%{public}.3lf,streamingForced,%{public}d", v24, 24);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::notifyRhythmicGnssStreamingControlStateToClients()", "%s\n", v15);
      if (v15 != (char *)buf)
        free(v15);
    }
    *(_DWORD *)buf = 42;
    (*(void (**)(uint64_t, uint8_t *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v16, 1, 0xFFFFFFFFLL, 0);

    v6 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    if (v20 < 0)
      operator delete(__p);
    v9 = v18;
    if (v18)
    {
      v10 = (unint64_t *)&v18->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v12 = v17;
    if (v17)
    {
      v13 = (unint64_t *)&v17->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_100011CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

qmi::MessageBase *sub_100011CEC(qmi::MessageBase *a1, const void *a2, unint64_t a3)
{
  qmi::MessageBase *v4;

  v4 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2, a3);
  qmi::MessageBase::validateMsgId(v4, 0xD0u);
  return a1;
}

void sub_100011D18(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void sub_100011D2C(uint64_t a1, uint64_t *a2, uint64_t *a3, double a4, double a5, double a6, uint64_t a7, uint64_t a8, uint64_t a9, int *a10, int *a11, double *a12, uint64_t a13, uint64_t a14, int *a15, double *a16, BOOL *a17, int *a18, uint64_t *a19, uint64_t a20,int a21)
{
  uint64_t v26;
  uint64_t v27;
  char *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  char *v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  char *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  double *v55;
  int *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  std::string::size_type v62;
  double v63;
  NSObject *v64;
  NSObject *v65;
  uint64_t v66;
  double v67;
  NSObject *v68;
  char *v69;
  std::string::size_type v70;
  double v71;
  char *v72;
  char *v73;
  uint64_t v74;
  std::string::size_type *v76;
  double *v79;
  void *__p;
  char *v81;
  char *v82;
  int v83;
  std::string::size_type v84;
  __int16 v85;
  double v86;
  uint8_t buf[4];
  uint64_t v88;
  __int16 v89;
  double v90;

  *(_QWORD *)(a14 + 96) = 0;
  *(_QWORD *)(a14 + 104) = 0;
  *(_DWORD *)(a14 + 112) = 0;
  *(_QWORD *)(a14 + 136) = 0;
  *(_QWORD *)(a14 + 144) = 0;
  *(_QWORD *)(a14 + 128) = 0;
  *(_BYTE *)(a14 + 152) = 0;
  *(_DWORD *)a14 = 0xFFFF;
  *(_QWORD *)(a14 + 12) = 0;
  *(_QWORD *)(a14 + 4) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a14 + 36) = _Q0;
  *(_OWORD *)(a14 + 52) = _Q0;
  *(_OWORD *)(a14 + 68) = _Q0;
  *(_DWORD *)(a14 + 84) = 0;
  *(_QWORD *)(a14 + 88) = 0xBFF0000000000000;
  *(_QWORD *)(a14 + 116) = 0xBFF0000000000000;
  *(_DWORD *)(a14 + 124) = 0x7FFFFFFF;
  *(_OWORD *)(a14 + 20) = xmmword_101BB8E80;
  *a11 = -1;
  *a10 = -1;
  __p = 0;
  v81 = 0;
  v82 = 0;
  v26 = *a2;
  v27 = a2[1];
  if (*a2 != v27)
  {
    v79 = (double *)(a14 + 36);
    v76 = (std::string::size_type *)(a14 + 28);
    do
    {
      if (sub_10018FDEC((double *)v26) && *(double *)(v26 + 32) > 0.0)
      {
        v31 = v81;
        if (v81 >= v82)
        {
          v37 = (char *)__p;
          v38 = 0xAAAAAAAAAAAAAAABLL * ((v81 - (_BYTE *)__p) >> 5);
          v39 = v38 + 1;
          if (v38 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((v82 - (_BYTE *)__p) >> 5) > v39)
            v39 = 0x5555555555555556 * ((v82 - (_BYTE *)__p) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((v82 - (_BYTE *)__p) >> 5) >= 0x155555555555555)
            v40 = 0x2AAAAAAAAAAAAAALL;
          else
            v40 = v39;
          if (v40)
          {
            v41 = (char *)sub_10067257C((uint64_t)&v82, v40);
            v37 = (char *)__p;
            v31 = v81;
          }
          else
          {
            v41 = 0;
          }
          v42 = &v41[32 * ((v81 - (_BYTE *)__p) >> 5)];
          v43 = *(_OWORD *)(v26 + 16);
          *(_OWORD *)v42 = *(_OWORD *)v26;
          *((_OWORD *)v42 + 1) = v43;
          v44 = *(_OWORD *)(v26 + 32);
          v45 = *(_OWORD *)(v26 + 48);
          v46 = *(_OWORD *)(v26 + 80);
          *((_OWORD *)v42 + 4) = *(_OWORD *)(v26 + 64);
          *((_OWORD *)v42 + 5) = v46;
          *((_OWORD *)v42 + 2) = v44;
          *((_OWORD *)v42 + 3) = v45;
          if (v31 == v37)
          {
            v52 = &v41[96 * v38];
          }
          else
          {
            v47 = &v41[96 * v38];
            do
            {
              v48 = *((_OWORD *)v31 - 5);
              *((_OWORD *)v47 - 6) = *((_OWORD *)v31 - 6);
              *((_OWORD *)v47 - 5) = v48;
              v49 = *((_OWORD *)v31 - 4);
              v50 = *((_OWORD *)v31 - 3);
              v51 = *((_OWORD *)v31 - 1);
              v52 = v47 - 96;
              *((_OWORD *)v47 - 2) = *((_OWORD *)v31 - 2);
              *((_OWORD *)v47 - 1) = v51;
              *((_OWORD *)v47 - 4) = v49;
              *((_OWORD *)v47 - 3) = v50;
              v31 -= 96;
              v47 -= 96;
            }
            while (v31 != v37);
          }
          v36 = v42 + 96;
          __p = v52;
          v81 = v42 + 96;
          v82 = &v41[96 * v40];
          if (v37)
            operator delete(v37);
        }
        else
        {
          v32 = *(_OWORD *)(v26 + 16);
          *(_OWORD *)v81 = *(_OWORD *)v26;
          *((_OWORD *)v31 + 1) = v32;
          v33 = *(_OWORD *)(v26 + 32);
          v34 = *(_OWORD *)(v26 + 48);
          v35 = *(_OWORD *)(v26 + 80);
          *((_OWORD *)v31 + 4) = *(_OWORD *)(v26 + 64);
          *((_OWORD *)v31 + 5) = v35;
          *((_OWORD *)v31 + 2) = v33;
          *((_OWORD *)v31 + 3) = v34;
          v36 = v31 + 96;
        }
        v81 = v36;
      }
      v26 += 96;
    }
    while (v26 != v27);
    v53 = v81;
    if (__p != v81)
    {
      if (a1 && *(_QWORD *)(a1 + 16) < 0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 5))
        __assert_rtn("calculateWifiCentroidRssiMaxreach", "CLLocationCalculator.mm", 1153, "allScannedExcludingMovingWifiApsMacToRssiVertical->size() >= apCollectionVertical.size()");
      v54 = (uint64_t *)(a14 + 28);
      v55 = (double *)(a14 + 36);
      sub_100232D90(a1, a3, v76, v79, a15, a16, a17, a18, a5, a20, a21);
      v56 = a11;
      if (sub_100020150((double *)v76, v79))
      {
        v57 = sub_10012A448();
        v61 = *v79;
        if (*v79 < *((double *)v57 + 27))
          v61 = *((double *)v57 + 27);
        *v79 = v61;
        v62 = *v76;
        *(_BYTE *)(a20 + 104) = 1;
        *(_QWORD *)a20 = v62;
        *(double *)(a20 + 8) = v61;
      }
      else
      {
        v63 = *v79;
        if ((*(_QWORD *)v79 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A4B8);
          v64 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, inf unc", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10214A4B8);
            LOWORD(v83) = 0;
            LODWORD(v74) = 2;
            v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiCalc, zaxis, inf unc", &v83, v74);
            sub_100512490("Generic", 1, 0, 0, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v73);
            if (v73 != (char *)buf)
              free(v73);
            v56 = a11;
            v55 = (double *)(a14 + 36);
            v54 = (uint64_t *)(a14 + 28);
          }
          v63 = *v55;
        }
        if (v63 != -1.0)
        {
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A4B8);
          v65 = qword_1022A0048;
          if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
          {
            v66 = *v54;
            v67 = *v55;
            *(_DWORD *)buf = 134283777;
            v88 = v66;
            v89 = 2049;
            v90 = v67;
            _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_FAULT, "WifiCalc, zaxis, invalid signleshot alt, %{private}.2f, unc, %{private}.2f", buf, 0x16u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0040 != -1)
              dispatch_once(&qword_1022A0040, &stru_10214A4B8);
            v70 = *v76;
            v71 = *v79;
            v83 = 134283777;
            v84 = v70;
            v85 = 2049;
            v86 = v71;
            LODWORD(v74) = 22;
            v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "WifiCalc, zaxis, invalid signleshot alt, %{private}.2f, unc, %{private}.2f", &v83, v74);
            sub_100512490("Generic", 1, 0, 0, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v72);
            if (v72 != (char *)buf)
              free(v72);
            v56 = a11;
            v55 = (double *)(a14 + 36);
          }
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v68 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid vertical accuracy!", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_10214A4B8);
          LOWORD(v83) = 0;
          LODWORD(v74) = 2;
          v69 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, invalid vertical accuracy!", &v83, v74);
          sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidRssiMaxreach(const std::map<std::string, int> *, const std::vector<CLWifiAPLocation> &, const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, int &, double &, BOOL &, unsigned int &, LatLonDebuggingData &, ZaxisDebuggingData &, const CLSignalEnvironmentProvider_Type::SignalEnvironmentType, double)", "%s\n", v69);
          if (v69 != (char *)buf)
            free(v69);
          v56 = a11;
          v55 = (double *)(a14 + 36);
        }
        *v55 = -1.0;
      }
      sub_100026CD0((uint64_t *)&__p, v61, a5, a6, v58, v59, v60, a10, v56, a12, a13, a14, a19);
      v53 = (char *)__p;
    }
    if (v53)
    {
      v81 = v53;
      operator delete(v53);
    }
  }
}

void sub_1000124E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100012510(uint64_t a1)
{
  double v2;
  double Current;
  double v4;
  double v5;
  NSObject *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  _QWORD *i;
  _QWORD *j;
  NSObject *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  __int128 v34;
  uint64_t v35;
  int v36;
  _BYTE v37[10];
  uint64_t v38;
  _BYTE v39[10];
  __int16 v40;
  unsigned int v41;
  __int16 v42;
  unsigned int v43;
  __int16 v44;
  unsigned int v45;
  __int16 v46;
  unsigned int v47;
  __int16 v48;
  unsigned int v49;
  __int16 v50;
  unsigned int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;
  uint8_t buf[4];
  _BYTE v61[10];
  uint64_t v62;
  _BYTE v63[10];
  __int16 v64;
  unsigned int v65;
  __int16 v66;
  unsigned int v67;
  __int16 v68;
  unsigned int v69;
  __int16 v70;
  unsigned int v71;
  __int16 v72;
  unsigned int v73;
  __int16 v74;
  unsigned int v75;
  __int16 v76;
  int v77;
  __int16 v78;
  int v79;
  __int16 v80;
  int v81;
  __int16 v82;
  int v83;

  v2 = sub_10000E96C();
  Current = CFAbsoluteTimeGetCurrent();
  v4 = *(double *)(a1 + 2288);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v5 = Current - v4;
  v6 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a1 + 2280);
    *(_DWORD *)buf = 134284033;
    *(double *)v61 = v2;
    *(_WORD *)&v61[8] = 2049;
    v62 = v7;
    *(_WORD *)v63 = 2049;
    *(double *)&v63[2] = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#gnssca,submitGnssDailyUseMetricsOnDayChange,currentSecondsIntoDay_s,%{private}.1lf,secondsIntoDayAtLastGnssSessionStart_s,%{private}.1lf,timeSinceGnssDailyUseMetricsInitialization_s,%{private}.1lf,", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v16 = *(_QWORD *)(a1 + 2280);
    v36 = 134284033;
    *(double *)v37 = v2;
    *(_WORD *)&v37[8] = 2049;
    v38 = v16;
    *(_WORD *)v39 = 2049;
    *(double *)&v39[2] = v5;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssca,submitGnssDailyUseMetricsOnDayChange,currentSecondsIntoDay_s,%{private}.1lf,secondsIntoDayAtLastGnssSessionStart_s,%{private}.1lf,timeSinceGnssDailyUseMetricsInitialization_s,%{private}.1lf,", &v36, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  if (v5 > 86400.0 && *(double *)(a1 + 2280) > v2)
  {
    v35 = a1;
    v34 = 0u;
    v23 = sub_1017524B0(&v35, 0, 4);
    v24 = sub_1017524B0(&v35, 0, 1);
    v25 = sub_1017524B0(&v35, 0, 2);
    v26 = sub_1017524B0(&v35, 0, 3);
    v27 = sub_1017524B0(&v35, 0, 5);
    v28 = sub_1017524B0(&v35, 1, 1);
    v29 = sub_1017524B0(&v35, 1, 3);
    v30 = sub_1017524B0(&v35, 2, 1);
    v31 = sub_1017524B0(&v35, 2, 3);
    v32 = sub_1017524B0(&v35, 3, 1);
    v33 = sub_1017524B0(&v35, 3, 3);
    LODWORD(v34) = sub_1017524B0(&v35, 4, 1);
    v8 = sub_1017524B0(&v35, 4, 3);
    *(_QWORD *)((char *)&v34 + 4) = __PAIR64__(*(double *)(a1 + 2304), v8);
    HIDWORD(v34) = (int)(*(double *)(a1 + 2664) - *(double *)(a1 + 2656));
    v9 = sub_10073C788();
    sub_100741C54(v9, (int *)&v23);
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67178241;
        *(_DWORD *)v61 = v23;
        *(_WORD *)&v61[4] = 1025;
        *(_DWORD *)&v61[6] = v24;
        LOWORD(v62) = 1025;
        *(_DWORD *)((char *)&v62 + 2) = v25;
        HIWORD(v62) = 1025;
        *(_DWORD *)v63 = v26;
        *(_WORD *)&v63[4] = 1025;
        *(_DWORD *)&v63[6] = v27;
        v64 = 1025;
        v65 = v28;
        v66 = 1025;
        v67 = v29;
        v68 = 1025;
        v69 = v30;
        v70 = 1025;
        v71 = v31;
        v72 = 1025;
        v73 = v32;
        v74 = 1025;
        v75 = v33;
        v76 = 1025;
        v77 = v34;
        v78 = 1025;
        v79 = DWORD1(v34);
        v80 = 1025;
        v81 = DWORD2(v34);
        v82 = 1025;
        v83 = HIDWORD(v34);
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,dailyGnssUsageSeconds,%{private}d,dailyClientSessionSeconds,%{private}d,dailyProactiveGnssSeconds,%{private}d,dailyDebouncePeriodSeconds,%{private}d,dailyExclusiveProactiveGnssSeconds,%{private}d,dailyClientGnssDisplayOnOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOnInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnInsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffInsideVisitSeconds,%{private}d,dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds,%{private}d,dailyGnssUsageNetProactiveLocationBalanceSeconds,%{private}d", buf, 0x5Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v36 = 67178241;
        *(_DWORD *)v37 = v23;
        *(_WORD *)&v37[4] = 1025;
        *(_DWORD *)&v37[6] = v24;
        LOWORD(v38) = 1025;
        *(_DWORD *)((char *)&v38 + 2) = v25;
        HIWORD(v38) = 1025;
        *(_DWORD *)v39 = v26;
        *(_WORD *)&v39[4] = 1025;
        *(_DWORD *)&v39[6] = v27;
        v40 = 1025;
        v41 = v28;
        v42 = 1025;
        v43 = v29;
        v44 = 1025;
        v45 = v30;
        v46 = 1025;
        v47 = v31;
        v48 = 1025;
        v49 = v32;
        v50 = 1025;
        v51 = v33;
        v52 = 1025;
        v53 = v34;
        v54 = 1025;
        v55 = DWORD1(v34);
        v56 = 1025;
        v57 = DWORD2(v34);
        v58 = 1025;
        v59 = HIDWORD(v34);
        LODWORD(v22) = 92;
        v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,submitGnssDailyUseMetricsOnDayChange,dailyGnssUsageSeconds,%{private}d,dailyClientSessionSeconds,%{private}d,dailyProactiveGnssSeconds,%{private}d,dailyDebouncePeriodSeconds,%{private}d,dailyExclusiveProactiveGnssSeconds,%{private}d,dailyClientGnssDisplayOnOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOnInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOnInsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffOutsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffOutsideVisitSeconds,%{private}d,dailyClientGnssDisplayOffInsideVisitSeconds,%{private}d,dailyDebouncePeriodDisplayOffInsideVisitSeconds,%{private}d,dailyGnssUsageWithShortOrWiFiAssociatedSessionsSeconds,%{private}d,dailyGnssUsageNetProactiveLocationBalanceSeconds,%{private}d", &v36, v22);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v20);
        if (v20 != (char *)buf)
          free(v20);
      }
    }
    for (i = *(_QWORD **)(a1 + 2224); i; i = (_QWORD *)*i)
    {
      for (j = (_QWORD *)i[5]; j; j = (_QWORD *)*j)
        j[3] = 0;
    }
    *(_QWORD *)(a1 + 2304) = 0;
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,cleared daily usage metrics", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        LOWORD(v36) = 0;
        LODWORD(v22) = 2;
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,submitGnssDailyUseMetricsOnDayChange,cleared daily usage metrics", &v36, v22);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
    }
  }
  *(double *)(a1 + 2280) = v2;
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v14 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v15 = *(_QWORD *)(a1 + 2280);
      *(_DWORD *)buf = 134283521;
      *(_QWORD *)v61 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "#gnssca,submitGnssDailyUseMetricsOnDayChange,Set SecondsIntoDayAtLastGnssSessionStart,%{private}.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v18 = *(_QWORD *)(a1 + 2280);
      v36 = 134283521;
      *(_QWORD *)v37 = v18;
      LODWORD(v22) = 12;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,submitGnssDailyUseMetricsOnDayChange,Set SecondsIntoDayAtLastGnssSessionStart,%{private}.1lf", &v36, v22);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitGnssDailyUseMetricsOnDayChange()", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
    }
  }
}

uint64_t sub_100012D94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  NSObject *v8;
  _QWORD *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  NSObject *v14;
  const char *v16;
  uint8_t *v17;
  _WORD v18[8];
  double v19[3];
  __int16 v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  int v26;
  __int16 v27;
  _QWORD *v28;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 72;
  *(_QWORD *)&v19[1] = a1 + 112;
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v20 = 256;
  v19[0] = *(double *)(a2 + 8);
  if (sub_100013184(v6, v19))
  {
    if (sub_10008950C(v6))
    {
      (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 80))(a1, a2, 0);
    }
    else if (!*(_BYTE *)(a1 + 128))
    {
      v12 = (_QWORD *)(a1 + 176);
      v13 = *(_QWORD *)(a1 + 216);
      if (v13 > *(int *)(a1 + 400))
      {
        ++*(_QWORD *)(a1 + 208);
        *(_QWORD *)(a1 + 216) = v13 - 1;
        sub_100A0EFD8(a1 + 176, 1);
        if (qword_10229FC70 != -1)
          dispatch_once(&qword_10229FC70, &stru_1021B8B48);
        v14 = qword_10229FC78;
        if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Maximum number of entries exceeded, throwing out oldest entry.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FC70 != -1)
            dispatch_once(&qword_10229FC70, &stru_1021B8B48);
          v18[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Maximum number of entries exceeded, throwing out oldest entry.", v18, 2);
          v17 = (uint8_t *)v16;
          sub_100512490("Generic", 1, 0, 2, "void CLActivityRecorderDb<CLStepCountEntry>::addSuspectRecord(const T &) [T = CLStepCountEntry, DataProtectionPolicy = CLActivityDB::ClassCDataProtectionPolicy]", "%s\n", v16);
          if (v17 != buf)
            free(v17);
        }
      }
      v7 = sub_100212098(v12, (__int128 *)a2);
    }
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021B8B48);
    v8 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v9 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v9 = (_QWORD *)*v9;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021B8B48);
    }
    v10 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v11 = (_QWORD *)(a1 + 88);
      if (*(char *)(a1 + 111) < 0)
        v11 = (_QWORD *)*v11;
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 1026;
      v26 = (int)v19[0];
      v27 = 2082;
      v28 = v11;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error, record contains invalid time", "{\"msg%{public}.0s\":\"CL database error, record contains invalid time\", \"invalid time\":%{public}d, \"name\":%{public, location:escape_only}s}", buf, 0x22u);
    }
  }
  return (*(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v5 + 24))(v5, v7);
}

void sub_10001315C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100013184(uint64_t a1, double *a2)
{
  _BOOL8 result;

  result = *a2 <= 3628972800.0 && *a2 >= 441763200.0;
  if (result || (byte_10230CD6C & 1) == 0)
    byte_10230CD6C = !result;
  return result;
}

uint64_t sub_1000131C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v8[4];
  __int16 v9;

  v5 = a1 + 112;
  v4 = *(_QWORD *)(a1 + 112);
  v8[2] = (id)(a1 + 112);
  (*(void (**)(uint64_t))(v4 + 16))(a1 + 112);
  v9 = 256;
  sub_100131938(v8, (uint64_t)"CLSensorRecorderDb::reduceFreePages", 0);
  sub_10001E638(*(_QWORD *)(a1 + 80));
  v6 = sub_100053048(*(_QWORD *)(a1 + 80), a2);
  sub_10001E99C(*(_QWORD *)(a1 + 80));
  sub_100131740(v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  return v6;
}

void sub_100013268(_Unwind_Exception *a1, uint64_t a2, ...)
{
  id v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, id);
  v5 = va_arg(va1, _QWORD);
  sub_100131740((id *)va);
  sub_10187E514((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100013290(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  _QWORD *v5;

  v5 = (_QWORD *)sub_1001B5A2C(a1, a2, a3, a4, a5);
  *v5 = off_102196A58;
  v5[6] = 0;
  sub_100239888();
}

void sub_100013320(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(_QWORD *)(v1 + 48);
  *(_QWORD *)(v1 + 48) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  sub_10002FA68(v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_10001334C(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (!result[464])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "registering motion activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "registering motion activity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::registerMotionNotifications()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 12) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 12) + 8), 1, 0);
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 13) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 13) + 8), 0, 0);
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 10) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v1 + 10) + 8), 2, 0);
    v1[464] = 1;
  }
  return result;
}

_QWORD *sub_100013528(_QWORD *result)
{
  _QWORD *v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (*((_BYTE *)result + 56))
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMapVector,start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102173AD0);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssAssistanceMapVector,start", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::start()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    objc_msgSend(*(id *)(*v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v1 + 8), 0, 0);
    if (sub_1002416C0())
      objc_msgSend(*(id *)(*v1 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*v1 + 8), 1, 0);
    return objc_msgSend(*(id *)(v1[1] + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v1[1] + 8), 0, 0);
  }
  return result;
}

_BYTE *sub_100013704(_BYTE *result)
{
  uint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (result[464])
  {
    v1 = (uint64_t)result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "unregistering motion activity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v5[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "unregistering motion activity", v5, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::unregisterMotionNotifications()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    sub_10000C784(v1);
    *(_BYTE *)(v1 + 464) = 0;
    objc_msgSend(*(id *)(*(_QWORD *)(v1 + 96) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 96) + 8), 1);
    objc_msgSend(*(id *)(*(_QWORD *)(v1 + 104) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 104) + 8), 0);
    return objc_msgSend(*(id *)(*(_QWORD *)(v1 + 80) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v1 + 80) + 8), 2);
  }
  return result;
}

_BYTE *sub_1000138D8(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  uint64_t v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  if (result[56])
  {
    v1 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102173AD0);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "CLGnssAssistanceMapVector,stop", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102173AD0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssAssistanceMapVector,stop", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMapVector::stop()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
    objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v1 + 8), 0);
    result = (_BYTE *)sub_1002416C0();
    if ((_DWORD)result)
      result = objc_msgSend(*(id *)(*(_QWORD *)v1 + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)v1 + 8), 1);
    v1[168] = 0;
    v3 = *((_QWORD *)v1 + 1);
    if (v3)
      return objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 0);
  }
  return result;
}

BOOL sub_100013AB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  unsigned int v8;
  char v9;
  NSObject *v10;
  void *v11;
  _QWORD v13[6];
  uint8_t buf[8];
  _BYTE v15[20];

  v5 = sub_100196E90(a1, a2);
  v6 = *(void **)(a1 + 136);
  if ((_DWORD)a3)
  {
    objc_msgSend(v6, "setInt:forKey:atKeyPath:", a3, CFSTR("InUseLevel"), v5);
    if ((int)a3 >= 3)
    {
      v7 = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)v15 = buf;
      *(_QWORD *)&v15[8] = 0x2020000000;
      v15[16] = 0;
      goto LABEL_13;
    }
  }
  else
  {
    objc_msgSend(v6, "removeValueForKey:atKeyPath:", CFSTR("InUseLevel"), v5);
  }
  v8 = objc_msgSend(*(id *)(a1 + 136), "hasValueForKey:atKeyPath:", CFSTR("TemporaryAuthorization"), v5);
  v9 = v8;
  if (v8)
  {
    objc_msgSend(*(id *)(a1 + 136), "removeValueForKey:atKeyPath:", CFSTR("TemporaryAuthorization"), v5);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v10 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v15 = 2082;
      *(_QWORD *)&v15[2] = "";
      *(_WORD *)&v15[10] = 2114;
      *(_QWORD *)&v15[12] = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#TemporaryAuth Client has dropped below in-use-ness threshold, losing WIU status\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)v15 = buf;
  *(_QWORD *)&v15[8] = 0x2020000000;
  v15[16] = 0;
  v11 = *(void **)(a1 + 136);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1007C1E4C;
  v13[3] = &unk_102153C60;
  v13[4] = buf;
  v13[5] = a1;
  objc_msgSend(v11, "iterateIdentitiesRelatedToKeyPath:withBlock:", v5, v13);
  v7 = (v9 & 1) != 0 || *(_BYTE *)(*(_QWORD *)v15 + 24) != 0;
LABEL_13:
  _Block_object_dispose(buf, 8);
  return v7;
}

void sub_100013CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100013CCC(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  uint64_t **v3;
  int v4;
  uint64_t v5;

  v5 = a2;
  if (*(_BYTE *)(result + 248))
  {
    v2 = (_QWORD *)result;
    v3 = (uint64_t **)(result + 24);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    sub_100720BF4(v3, &v4);
    sub_100212418(v2 + 20, &v5);
    return (*(uint64_t (**)(_QWORD *))(*v2 + 48))(v2);
  }
  return result;
}

void sub_100013F8C(uint64_t a1, void *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;

  if ((objc_msgSend(objc_msgSend(a2, "attributions"), "containsObject:", *(_QWORD *)(a1 + 32)) & 1) != 0)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#SystemStatus adding attribution; already exists!\", \"AttributionIdentifier\":%{public, "
        "location:escape_only}@}",
        (uint8_t *)&v8,
        0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v8 = 68289282;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2114;
      v13 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#SystemStatus adding attribution; already exists!",
        "{\"msg%{public}.0s\":\"#SystemStatus adding attribution; already exists!\", \"AttributionIdentifier\":%{public, "
        "location:escape_only}@}",
        (uint8_t *)&v8,
        0x1Cu);
    }
  }
  else
  {
    objc_msgSend(a2, "addAttribution:", *(_QWORD *)(a1 + 32));
  }
}

uint64_t sub_100014168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = sub_100190454(a2, *(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 48), 0, *(_DWORD *)(a1 + 24), -1, *(double *)a1, *(double *)(a1 + 8), *(double *)(a1 + 16), *(double *)(a1 + 32), *(double *)(a1 + 40), *(double *)(a1 + 64));
  *(_BYTE *)(result + 88) = *(_BYTE *)(a1 + 88);
  return result;
}

_QWORD *sub_1000141C0(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v16 = *a2;
  v4 = sub_100129380((uint64_t)&v16);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v12 == v6)
      {
        v16 = v11[2];
        v13 = sub_100129380((uint64_t)&v16);
        v15 = *a2;
        if (v13 == sub_100129380((uint64_t)&v15))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1000142E4(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  double *i;
  double v8;
  NSObject *v9;
  std::string *p_p;
  uint64_t v11;
  std::string __p;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  std::string *v18;
  __int16 v19;
  double v20;

  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_DWORD *)(a2 + 32) = 1065353216;
  for (i = *(double **)(a1 + 16); i; i = *(double **)i)
  {
    v8 = vabdd_f64(a3, i[9]);
    if (a4 >= v8)
    {
      sub_10012D8CC(a2, (_QWORD *)i + 2, (uint64_t)(i + 2));
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102194CF0);
      v9 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v11 = *((_QWORD *)i + 2);
        sub_1000C2150(&v11, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 68289539;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        v17 = 2081;
        v18 = p_p;
        v19 = 2050;
        v20 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"filtering out access point from calculation based on scan timestamp\", \"mac\":%{private, location:escape_only}s, \"age_seconds_s\":\"%{public}.09f\"}", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_1000144A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100127554(v1);
  _Unwind_Resume(a1);
}

void sub_1000144B8(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004E6BA4(&off_102178408, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_100014594(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1000145B0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_10025F800(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_100014604(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = a1 + 72;
  if (!sub_1000CC4F4(a1 + 72))
  {
    sub_100631374(v2);
    sub_10027A798(a1);
  }
  if (!sub_1000CC4F4(v2))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
    v3 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning Failed to connect to database", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_10212A9F0);
      v6[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "#Warning Failed to connect to database", v6, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationDatabase::connectIfNecessary()", "%s\n", v4);
      if (v5 != buf)
        free(v5);
    }
  }
}

_QWORD *sub_1000147B8(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  if (a2)
  {
    v3 = result;
    result = (_QWORD *)sub_100182520((uint64_t)result);
    if ((_DWORD)result)
    {
      v4 = (uint64_t *)a2[2];
      if (v4)
      {
        while (1)
        {
          v7 = v4[2];
          v6 = *(_QWORD *)nullsub_34(v3);
          if (sub_10009483C(&v7, &v6))
            break;
          v4 = (uint64_t *)*v4;
          if (!v4)
            goto LABEL_8;
        }
        sub_100059290(a2, v4);
      }
LABEL_8:
      v5 = (_QWORD *)nullsub_34(v3);
      return sub_10012D8CC((uint64_t)a2, v5, (uint64_t)v5);
    }
  }
  return result;
}

uint64_t sub_10001491C(uint64_t a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  _DWORD v11[2];
  __int16 v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(unsigned __int8 *)(a1 + 8);
    v4 = *(unsigned __int8 *)(a1 + 1272);
    v5 = *(unsigned __int8 *)(a1 + 1297);
    v6 = *(unsigned __int8 *)(a1 + 2547);
    v7 = *(unsigned __int8 *)(a1 + 1270);
    v8 = *(unsigned __int8 *)(a1 + 776);
    v11[0] = 68290562;
    v11[1] = 0;
    v12 = 2082;
    v13 = "";
    v14 = 1026;
    v15 = v3;
    v16 = 1026;
    v17 = v4;
    v18 = 1026;
    v19 = v5;
    v20 = 1026;
    v21 = v6;
    v22 = 1026;
    v23 = v7;
    v24 = 1026;
    v25 = v8;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"expectedState\", \"fDeviceReady\":%{public}hhd, \"fPreventSessionsDueToPendingApSleep\":%{public}hhd, \"fNilrActive\":%{public}hhd, \"fNilrLockoutStatus\":%{public}hhd, \"fIsConformanceMode\":%{public}hhd, \"fHasClient\":%{public}hhd}", (uint8_t *)v11, 0x36u);
  }
  if (!*(_BYTE *)(a1 + 8) || *(_BYTE *)(a1 + 1272) || *(_DWORD *)(a1 + 780) != 1)
    return 0;
  if ((sub_100014ADC() & 1) == 0 && *(_BYTE *)(a1 + 1297) && !*(_BYTE *)(a1 + 2547))
    return 2;
  if (sub_100014ADC())
    v9 = sub_100241430() ^ 1;
  else
    LOBYTE(v9) = 1;
  if (!*(_BYTE *)(a1 + 1270))
  {
    if (*(_BYTE *)(a1 + 776) || sub_100CD599C(a1 + 1276))
      return 1;
    if (!*(_BYTE *)(a1 + 1270))
      LOBYTE(v9) = 1;
    if ((v9 & 1) != 0)
      return 0;
    return *(_BYTE *)(a1 + 1297) != 0;
  }
  if ((v9 & 1) == 0)
    return *(_BYTE *)(a1 + 1297) != 0;
  return 0;
}

uint64_t sub_100014ADC()
{
  uint64_t result;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  BOOL v6;

  if (sub_1001DC794() && !sub_1000FDB3C() || sub_1000FDB3C() || (sub_10075B95C() & 1) != 0)
    return 1;
  v6 = 0;
  if ((sub_1001DC634() & 1) != 0
    || (sub_1001DC5AC() & 1) != 0
    || sub_1000FDC94()
    || (result = sub_10075B95C(), (_DWORD)result))
  {
    sub_1001E4804(&v4);
    sub_1001E4874(v4, "GpsdEmergency", &v6);
    v1 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v3 = __ldaxr(p_shared_owners);
      while (__stlxr(v3 - 1, p_shared_owners));
      if (!v3)
      {
        ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
        std::__shared_weak_count::__release_weak(v1);
      }
    }
    return v6;
  }
  return result;
}

void sub_100014BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100014BC0(uint64_t a1, qmi::MessageBase *a2)
{
  NSObject *v3;
  int v4;
  int v5;
  int v6;
  int v7;
  _BYTE v8[4];
  int v9;
  _BYTE v10[4];
  int v11;
  _BYTE v12[4];
  int v13;
  _BYTE v14[4];
  int v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v14[0] = 0;
  sub_100014D50(a2, 0x10u, (uint64_t)v14);
  v12[0] = 0;
  sub_100014D50(a2, 0x11u, (uint64_t)v12);
  v10[0] = 0;
  sub_100014D50(a2, 0x12u, (uint64_t)v10);
  v8[0] = 0;
  sub_100014D50(a2, 0x13u, (uint64_t)v8);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021C67E8);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    if (v14[0])
      v4 = v15;
    else
      v4 = -1;
    if (v12[0])
      v5 = v13;
    else
      v5 = -1;
    if (v10[0])
      v6 = v11;
    else
      v6 = -1;
    if (v8[0])
      v7 = v9;
    else
      v7 = -1;
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 1026;
    v21 = v4;
    v22 = 1026;
    v23 = v5;
    v24 = 1026;
    v25 = v6;
    v26 = 1026;
    v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#wwanAntTuneL5Blanking,report\", \"L5BestDurationMsec\":%{public}d, \"L5OtherDurationMsec\":%{public}d, \"L5WorstDurationMsec\":%{public}d, \"wwanAntTuneL5BlankingDurationMsec\":%{public}d}", buf, 0x2Au);
  }
}

int *sub_100014D50(qmi::MessageBase *a1, unsigned __int16 a2, uint64_t a3)
{
  int *result;
  int v5;
  int v6;
  int v7;

  result = (int *)qmi::MessageBase::findTlvValue(a1, a2);
  if (!result)
    return result;
  if (v5 < 4)
  {
    v6 = 0;
  }
  else
  {
    v7 = *result++;
    v6 = v7;
    if (v5 == 4)
      goto LABEL_7;
  }
  result = 0;
LABEL_7:
  if (!*(_BYTE *)a3)
    *(_BYTE *)a3 = 1;
  *(_DWORD *)(a3 + 4) = v6;
  if (!result)
    *(_BYTE *)a3 = 0;
  return result;
}

void sub_100014DB0(uint64_t a1)
{
  sub_100014DD4(a1);
  operator delete();
}

uint64_t sub_100014DD4(uint64_t a1)
{
  *(_QWORD *)a1 = off_102157998;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

uint64_t sub_100014E48(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = 1;
  return result;
}

void sub_100014E5C(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t *i;
  uint64_t *v6;
  _BYTE v7[9];

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  for (i = (uint64_t *)(a1 + 16); ; sub_10033F68C((char **)a3, (__int128 *)(i + 3)))
  {
    i = (uint64_t *)*i;
    if (!i)
      break;
    *(_DWORD *)(i[3] + 24) = llroundf((float)*(int *)(i[3] + 24) / (float)*((unsigned int *)i + 10));
  }
  v6 = *(uint64_t **)(a3 + 8);
  if (a2 < (unint64_t)(((uint64_t)v6 - *(_QWORD *)a3) >> 4))
  {
    if (a2)
      sub_1012A8528(*(uint64_t **)a3, (uint64_t *)(*(_QWORD *)a3 + 16 * a2), v6, (uint64_t)v7);
    sub_1012A84BC(a3, a2);
  }
}

void sub_100014F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1002A3684((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100014F20(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 16;
    sub_100261F44(i - 16);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

id sub_100014F6C(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  void *v7;
  NSURL *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  id v13;
  uint64_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  char *v19;
  id v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  uint8_t buf[4];
  uint64_t v26;
  __int16 v27;
  id v28;

  v7 = objc_autoreleasePoolPush();
  v8 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), 0);
  if (v8)
  {
    v9 = 536870913;
    if (a4)
      v9 = 1;
    if (a4 == 1)
      v10 = 1073741825;
    else
      v10 = v9;
    v20 = 0;
    v11 = objc_msgSend(a3, "writeToURL:options:error:", v8, v10, &v20);
    if ((v11 & 1) == 0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
      {
        v13 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        *(_DWORD *)buf = 136446466;
        v26 = a2;
        v27 = 2082;
        v28 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Could not write data to disk %{public}s, %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102141D18);
        v14 = qword_1022A02D8;
        v15 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        v21 = 136446466;
        v22 = a2;
        v23 = 2082;
        v24 = v15;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 16, "Could not write data to disk %{public}s, %{public}s", &v21, 22);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v17 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v26 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Could not create NSURL for file: %{public}s", buf, 0xCu);
    }
    v11 = 0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v21 = 136446210;
      v22 = a2;
      v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Could not create NSURL for file: %{public}s", &v21, 12);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLNameValuePair::writeDataToFile(const char *, CFDataRef, CLNVPDataProtection) const", "%s\n", v19);
      if (v19 != (char *)buf)
        free(v19);
      v11 = 0;
    }
  }
  objc_autoreleasePoolPop(v7);
  return v11;
}

void sub_100015324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLStreamingAwareLocationProvider::onLocationStreamingControlStateNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10218BF30);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLStreamingAwareLocationProvider::onLocationStreamingControlStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10218BF30);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLStreamingAwareLocationProvider::onLocationStreamingControlStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1002214E4(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1000154D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000154F4(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistanceMotion::onStepCountNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10022F0A4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1000156AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000156CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  BOOL v6;
  NSObject *v7;
  int v8;
  int v9;
  char *v10;
  NSObject *v11;
  int v12;
  NSObject *v13;
  int v14;
  int v15;
  int v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  int v20;
  __int16 v21;
  int v22;

  sub_100130820((_DWORD *)a2, a1);
  if (*(_BYTE *)(a1 + 6448))
  {
    v4 = *(double *)(a1 + 6464) - *(double *)(a1 + 6456);
    v5 = *(double *)(a1 + 6232);
    if (*(_BYTE *)(a1 + 809))
      v6 = v5 < v4;
    else
      v6 = 0;
    if (v6)
    {
      if (!*(_BYTE *)(a2 + 1952))
        *(_BYTE *)(a2 + 1952) = 1;
      *(double *)(a2 + 1944) = v5;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v12 = (int)*(double *)(a1 + 6232);
        *(_DWORD *)buf = 67240192;
        v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "@WifiTimer, set, locreq, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v14 = (int)*(double *)(a1 + 6232);
        v15 = 67240192;
        v16 = v14;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiTimer, set, locreq, %{public}d", &v15, 8);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v10);
        goto LABEL_37;
      }
    }
    else if (*(_BYTE *)(a1 + 1657) && !*(_DWORD *)(a1 + 1564))
    {
      if (!*(_BYTE *)(a2 + 1952))
        *(_BYTE *)(a2 + 1952) = 1;
      *(_QWORD *)(a2 + 1944) = 0x4000000000000000;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v13 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        v20 = 2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "@WifiTimer, set, suppressed, %{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v15 = 67240192;
        v16 = 2;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiTimer, set, suppressed, %{public}d", &v15, 8);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v10);
        goto LABEL_37;
      }
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102183FE8);
      v7 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v8 = *(unsigned __int8 *)(a1 + 809);
        *(_DWORD *)buf = 67240448;
        v20 = v5 < v4;
        v21 = 1026;
        v22 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WifiTimer, skip, locreq, %{public}d, %{public}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102183FE8);
        v9 = *(unsigned __int8 *)(a1 + 809);
        v15 = 67240448;
        v16 = v5 < v4;
        v17 = 1026;
        v18 = v9;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiTimer, skip, locreq, %{public}d, %{public}d", &v15, 14);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::ScheduleClientUpdateTimer::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v10);
LABEL_37:
        if (v10 != (char *)buf)
          free(v10);
      }
    }
  }
}

void sub_100015BAC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_100015BCC(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102152020;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100015BFC(uint64_t a1, double *a2)
{
  NSObject *v4;
  double v5;
  char v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  uint64_t *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _DWORD v19[2];
  char v20;
  int v21;
  uint64_t v22;
  uint8_t buf[1640];

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021658C0);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *a2;
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting compass update interval to %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v16 = *(_QWORD *)a2;
    v21 = 134349056;
    v22 = v16;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "Setting compass update interval to %{public}f", &v21, 12);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLCompass7::setDeviceMotionServiceUpdateInterval(const CFTimeInterval &)", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  if (*(_BYTE *)(a1 + 136))
  {
    v6 = sub_1001B7910();
    v7 = (uint64_t *)(a1 + 168);
    if ((v6 & 0x20) != 0)
      v8 = (uint64_t **)(a1 + 168);
    else
      v8 = (uint64_t **)(a1 + 152);
    if ((v6 & 0x20) != 0)
      v9 = 8;
    else
      v9 = 4;
    if ((v6 & 0x20) != 0)
      v7 = (uint64_t *)(a1 + 152);
  }
  else
  {
    v7 = (uint64_t *)(a1 + 168);
    v8 = (uint64_t **)(a1 + 152);
    v9 = 4;
  }
  if (*v7)
    sub_10006B4E0(*v7, 0.0);
  v10 = *v8;
  if (!*v8)
  {
    v11 = (uint64_t *)sub_100A07FA0();
    v19[0] = 65292;
    v19[1] = v9;
    v20 = 0;
    sub_1018E4078(v11, (uint64_t)v19, (uint64_t *)buf);
    sub_1002B7674((uint64_t)v8, (__int128 *)buf);
    v12 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v13 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    sub_100A0A4BC(*v8, (uint64_t)sub_10012B8F0, a1);
    v10 = *v8;
  }
  return sub_10006B4E0((uint64_t)v10, *a2);
}

uint64_t sub_100015E88(uint64_t a1)
{
  *(_QWORD *)a1 = off_1021D5F20;

  return a1;
}

void sub_100015EC0(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  uint64_t v5;
  _OWORD *v6;
  __int128 *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  NSObject *v16;
  os_log_type_t v17;
  unsigned int v18;
  BOOL v19;
  int v20;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  os_log_type_t v33;
  char v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *p_shared_owners;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  char v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  float64x2_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  const char *v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint32_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  uint64_t v109;
  int v110;
  NSObject *v111;
  os_log_type_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  void **v117;
  const char *v118;
  NSObject *v119;
  os_log_type_t v120;
  uint64_t v121;
  void **v122;
  uint64_t v123;
  int v124;
  BOOL v125;
  unsigned int v126;
  uint64_t v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  char v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  float64x2_t v152;
  void **v153;
  void **v154;
  void *__p[2];
  char v156;
  _OWORD v157[8];
  _OWORD v158[2];
  _BYTE v159[513];
  uint64_t v160;
  std::__shared_weak_count *v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  char v168;
  __int128 v169;
  uint64_t v170;
  uint64_t buf;
  __int16 v172;
  const char *v173;
  __int16 v174;
  _BYTE v175[14];
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  uint64_t v183;
  __int16 v184;
  int v185;

  v4 = (_BYTE *)(a1 + 9032);
  v5 = a1 + 2380;
  if (!*(_BYTE *)(a1 + 1569))
  {
    v18 = *(_DWORD *)(a2 + 96);
    if (v18)
      v19 = 1;
    else
      v19 = *(_BYTE *)(a2 + 516) == 0;
    v20 = !v19;
    if (!*(_BYTE *)(a1 + 1570))
      goto LABEL_84;
    if (v18 > 0xB || ((1 << v18) & 0x850) == 0)
    {
      if (*(_BYTE *)(a1 + 11672))
      {
        if (v18 == 10)
          v34 = 1;
        else
          v34 = v20;
        if ((v34 & 1) == 0)
          goto LABEL_84;
      }
      else if (!v20)
      {
        goto LABEL_84;
      }
    }
    if (sub_10022B4D8(a1, a2))
    {
      v22 = *(_DWORD *)(a2 + 96);
      if (v22 == 4 || v22 == 11 || (v22 == 10 ? (v23 = 1) : (v23 = v20), v23 == 1))
      {
        if (v4[2640])
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v24 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            v25 = *(_DWORD *)(a2 + 96);
            v26 = *(_QWORD *)(a2 + 4);
            v27 = *(_QWORD *)(a2 + 12);
            v28 = *(_QWORD *)(a2 + 28);
            v29 = *(_QWORD *)(a2 + 20);
            v30 = *(_QWORD *)(a2 + 36);
            v31 = *(unsigned __int8 *)(a2 + 516);
            buf = 68290819;
            v172 = 2082;
            v173 = "";
            v174 = 1026;
            *(_DWORD *)v175 = v25;
            *(_WORD *)&v175[4] = 2049;
            *(_QWORD *)&v175[6] = v26;
            v176 = 2049;
            v177 = v27;
            v178 = 2050;
            v179 = v28;
            v180 = 2050;
            v181 = v29;
            v182 = 2050;
            v183 = v30;
            v184 = 1026;
            v185 = v31;
            v32 = v24;
            v33 = OS_LOG_TYPE_DEFAULT;
LABEL_69:
            _os_log_impl((void *)&_mh_execute_header, v32, v33, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI: qualified location assistance to GPS\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"matcherPropagated\":%{public}d}", (uint8_t *)&buf, 0x50u);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v101 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v102 = *(_DWORD *)(a2 + 96);
            v103 = *(_QWORD *)(a2 + 4);
            v104 = *(_QWORD *)(a2 + 12);
            v105 = *(_QWORD *)(a2 + 28);
            v106 = *(_QWORD *)(a2 + 20);
            v107 = *(_QWORD *)(a2 + 36);
            v108 = *(unsigned __int8 *)(a2 + 516);
            buf = 68290819;
            v172 = 2082;
            v173 = "";
            v174 = 1026;
            *(_DWORD *)v175 = v102;
            *(_WORD *)&v175[4] = 2049;
            *(_QWORD *)&v175[6] = v103;
            v176 = 2049;
            v177 = v104;
            v178 = 2050;
            v179 = v105;
            v180 = 2050;
            v181 = v106;
            v182 = 2050;
            v183 = v107;
            v184 = 1026;
            v185 = v108;
            v32 = v101;
            v33 = OS_LOG_TYPE_DEBUG;
            goto LABEL_69;
          }
        }
      }
      *v4 = 1;
      if (v4[2640])
      {
        if (!v4[2641])
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v113 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            v114 = v4[2640];
            v115 = v4[2641];
            buf = 68289538;
            v172 = 2082;
            v173 = "";
            v174 = 1026;
            *(_DWORD *)v175 = v114;
            *(_WORD *)&v175[4] = 1026;
            *(_DWORD *)&v175[6] = v115;
            v90 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Rejecting CPI\", \"fInEmergency\":%{public}d, \"fHeloE"
                  "nabled\":%{public}d}";
            v91 = v113;
            v92 = OS_LOG_TYPE_DEFAULT;
            v100 = 30;
            goto LABEL_64;
          }
          return;
        }
        if (!v20)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v109 = qword_1022A0078;
          if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
            goto LABEL_108;
          v110 = *(_DWORD *)(a1 + 9016);
          buf = 68289282;
          v172 = 2082;
          v173 = "";
          v174 = 1026;
          *(_DWORD *)v175 = v110;
          v111 = v109;
          v112 = OS_LOG_TYPE_DEFAULT;
LABEL_107:
          _os_log_impl((void *)&_mh_execute_header, v111, v112, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, valid tightly coupled position\", \"reliability\":%{public}d}", (uint8_t *)&buf, 0x18u);
LABEL_108:
          v125 = 0;
          *(_DWORD *)(a1 + 9036) = 1;
          v126 = *(_DWORD *)(a1 + 8312);
          if (v126 <= 0xB && ((1 << v126) & 0xC10) != 0)
            v125 = *(_DWORD *)(a1 + 8300) > 0x44u;
          v4[2680] = v125;
          sub_1001109A0(a1, a1 + 8216);
          goto LABEL_112;
        }
      }
      else if ((v20 & 1) == 0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v123 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          goto LABEL_108;
        v124 = *(_DWORD *)(a1 + 9016);
        buf = 68289282;
        v172 = 2082;
        v173 = "";
        v174 = 1026;
        *(_DWORD *)v175 = v124;
        v111 = v123;
        v112 = OS_LOG_TYPE_DEBUG;
        goto LABEL_107;
      }
      *(_DWORD *)(a1 + 9036) = 2;
      sub_100EB2B68(a1, a1 + 8216);
LABEL_112:
      v127 = a1 + 1576;
      v128 = *(_OWORD *)(a2 + 96);
      v129 = *(_OWORD *)(a2 + 112);
      v130 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 4952) = *(_OWORD *)(a2 + 140);
      v131 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 4812) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 4828) = v131;
      v132 = *(_OWORD *)(a2 + 32);
      v133 = *(_OWORD *)(a2 + 48);
      v134 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 4876) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 4892) = v134;
      *(_OWORD *)(a1 + 4844) = v132;
      *(_OWORD *)(a1 + 4860) = v133;
      *(_OWORD *)(a1 + 4924) = v129;
      *(_OWORD *)(a1 + 4940) = v130;
      *(_OWORD *)(a1 + 4908) = v128;
      memcpy((void *)(a1 + 4968), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 5488), (uint64_t *)(a2 + 680));
      v136 = *(_OWORD *)(a2 + 712);
      v135 = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 5504) = *(_OWORD *)(a2 + 696);
      *(_OWORD *)(a1 + 5520) = v136;
      *(_OWORD *)(a1 + 5536) = v135;
      v138 = *(_OWORD *)(a2 + 760);
      v137 = *(_OWORD *)(a2 + 776);
      v139 = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 5552) = *(_OWORD *)(a2 + 744);
      *(_BYTE *)(a1 + 5600) = v139;
      *(_OWORD *)(a1 + 5584) = v137;
      *(_OWORD *)(a1 + 5568) = v138;
      if (!sub_100219C74(a2))
        return;
      v140 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 2376) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 2392) = v140;
      v141 = *(_OWORD *)(a2 + 32);
      v142 = *(_OWORD *)(a2 + 48);
      v143 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 2456) = v143;
      *(_OWORD *)(a1 + 2408) = v141;
      *(_OWORD *)(a1 + 2424) = v142;
      v144 = *(_OWORD *)(a2 + 140);
      v145 = *(_OWORD *)(a2 + 96);
      v146 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 2488) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 2504) = v146;
      *(_OWORD *)(a1 + 2472) = v145;
      *(_OWORD *)(a1 + 2516) = v144;
      memcpy((void *)(a1 + 2536), (const void *)(a2 + 160), 0x201uLL);
      sub_100349198((_QWORD *)(a1 + 3056), (uint64_t *)(a2 + 680));
      v147 = *(_OWORD *)(a2 + 696);
      v148 = *(_OWORD *)(a2 + 712);
      *(_OWORD *)(a1 + 3104) = *(_OWORD *)(a2 + 728);
      *(_OWORD *)(a1 + 3088) = v148;
      *(_OWORD *)(a1 + 3072) = v147;
      v149 = *(_OWORD *)(a2 + 744);
      v150 = *(_OWORD *)(a2 + 760);
      v151 = *(_OWORD *)(a2 + 776);
      *(_BYTE *)(a1 + 3168) = *(_BYTE *)(a2 + 792);
      *(_OWORD *)(a1 + 3152) = v151;
      *(_OWORD *)(a1 + 3136) = v150;
      *(_OWORD *)(a1 + 3120) = v149;
      v152 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
      *(float64x2_t *)v5 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)v5, v152)), v152);
      if (v4[2640])
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v116 = qword_1022A0078;
        if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          return;
        sub_100071A00(v127 + 800, __p);
        if (v156 >= 0)
          v153 = __p;
        else
          v153 = (void **)__p[0];
        buf = 68289283;
        v172 = 2082;
        v173 = "";
        v174 = 2081;
        *(_QWORD *)v175 = v153;
        v118 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"location,\":%{privat"
               "e, location:escape_only}s}";
LABEL_92:
        v119 = v116;
        v120 = OS_LOG_TYPE_DEFAULT;
        goto LABEL_101;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v121 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        return;
      sub_100071A00(v127 + 800, __p);
      if (v156 >= 0)
        v154 = __p;
      else
        v154 = (void **)__p[0];
      buf = 68289283;
      v172 = 2082;
      v173 = "";
      v174 = 2081;
      *(_QWORD *)v175 = v154;
      v118 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"location,\":%{private,"
             " location:escape_only}s}";
      goto LABEL_100;
    }
LABEL_84:
    if (v4[2640])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v116 = qword_1022A0078;
      if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        return;
      sub_100071A00(a2, __p);
      if (v156 >= 0)
        v117 = __p;
      else
        v117 = (void **)__p[0];
      buf = 68289283;
      v172 = 2082;
      v173 = "";
      v174 = 2081;
      *(_QWORD *)v175 = v117;
      v118 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not valid tightly coupled pos\", \"location,\":%{priva"
             "te, location:escape_only}s}";
      goto LABEL_92;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v121 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      return;
    sub_100071A00(a2, __p);
    if (v156 >= 0)
      v122 = __p;
    else
      v122 = (void **)__p[0];
    buf = 68289283;
    v172 = 2082;
    v173 = "";
    v174 = 2081;
    *(_QWORD *)v175 = v122;
    v118 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, drop,not valid tightly coupled pos\", \"location,\":%{private"
           ", location:escape_only}s}";
LABEL_100:
    v119 = v121;
    v120 = OS_LOG_TYPE_DEBUG;
LABEL_101:
    _os_log_impl((void *)&_mh_execute_header, v119, v120, v118, (uint8_t *)&buf, 0x1Cu);
    if (v156 < 0)
      operator delete(__p[0]);
    return;
  }
  if (!*(_BYTE *)(a1 + 1570) || *(double *)(a1 + 8236) <= 0.0 || *(int *)(a1 + 9016) < 1)
    goto LABEL_53;
  v6 = (_OWORD *)(a1 + 8216);
  v7 = (__int128 *)(a1 + 9016);
  *(CFAbsoluteTime *)(a1 + 8292) = CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(a1 + 9024) = 0;
  if (v4[2640])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v8 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      goto LABEL_44;
    v9 = *(_DWORD *)(a1 + 8312);
    v10 = *(_QWORD *)(v5 + 5840);
    v11 = *(_QWORD *)(v5 + 5848);
    v12 = *(_QWORD *)(v5 + 5864);
    v13 = *(_QWORD *)(v5 + 5856);
    v14 = *(_QWORD *)(v5 + 5872);
    v15 = *(_DWORD *)(a1 + 9016);
    buf = 68290819;
    v172 = 2082;
    v173 = "";
    v174 = 1026;
    *(_DWORD *)v175 = v9;
    *(_WORD *)&v175[4] = 2049;
    *(_QWORD *)&v175[6] = v10;
    v176 = 2049;
    v177 = v11;
    v178 = 2050;
    v179 = v12;
    v180 = 2050;
    v181 = v13;
    v182 = 2050;
    v183 = v14;
    v184 = 1026;
    v185 = v15;
    v16 = v8;
    v17 = OS_LOG_TYPE_DEFAULT;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v35 = qword_1022A0078;
    if (!os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      goto LABEL_44;
    v36 = *(_DWORD *)(a1 + 8312);
    v37 = *(_QWORD *)(v5 + 5840);
    v38 = *(_QWORD *)(v5 + 5848);
    v39 = *(_QWORD *)(v5 + 5864);
    v40 = *(_QWORD *)(v5 + 5856);
    v41 = *(_QWORD *)(v5 + 5872);
    v42 = *(_DWORD *)(a1 + 9016);
    buf = 68290819;
    v172 = 2082;
    v173 = "";
    v174 = 1026;
    *(_DWORD *)v175 = v36;
    *(_WORD *)&v175[4] = 2049;
    *(_QWORD *)&v175[6] = v37;
    v176 = 2049;
    v177 = v38;
    v178 = 2050;
    v179 = v39;
    v180 = 2050;
    v181 = v40;
    v182 = 2050;
    v183 = v41;
    v184 = 1026;
    v185 = v42;
    v16 = v35;
    v17 = OS_LOG_TYPE_DEBUG;
  }
  _os_log_impl((void *)&_mh_execute_header, v16, v17, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, forcing tightly-coupled location assistance\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"reliability\":%{public}d}", (uint8_t *)&buf, 0x50u);
LABEL_44:
  *v4 = 1;
  *(_DWORD *)(a1 + 9036) = 1;
  v43 = *(_OWORD *)(a1 + 8312);
  v44 = *(_OWORD *)(a1 + 8344);
  v157[7] = *(_OWORD *)(a1 + 8328);
  v158[0] = v44;
  *(_OWORD *)((char *)v158 + 12) = *(_OWORD *)(a1 + 8356);
  v45 = *(_OWORD *)(a1 + 8264);
  v157[2] = *(_OWORD *)(a1 + 8248);
  v157[3] = v45;
  v46 = *(_OWORD *)(a1 + 8296);
  v157[4] = *(_OWORD *)(a1 + 8280);
  v157[5] = v46;
  v157[6] = v43;
  v47 = *(_OWORD *)(a1 + 8232);
  v157[0] = *v6;
  v157[1] = v47;
  memcpy(v159, (const void *)(a1 + 8376), sizeof(v159));
  v160 = *(_QWORD *)(a1 + 8896);
  v48 = *(std::__shared_weak_count **)(a1 + 8904);
  v161 = v48;
  if (v48)
  {
    p_shared_owners = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldxr(p_shared_owners);
    while (__stxr(v50 + 1, p_shared_owners));
  }
  v51 = *(_OWORD *)(a1 + 8960);
  v52 = *(_OWORD *)(a1 + 8992);
  v166 = *(_OWORD *)(a1 + 8976);
  v167 = v52;
  v53 = *(_OWORD *)(a1 + 8928);
  v162 = *(_OWORD *)(a1 + 8912);
  v163 = v53;
  v164 = *(_OWORD *)(a1 + 8944);
  v165 = v51;
  v168 = *(_BYTE *)(a1 + 9008);
  v169 = *v7;
  v170 = *(_QWORD *)(a1 + 9032);
  v54 = *(_QWORD *)(a1 + 32);
  if (!v54)
    sub_10025FD1C();
  (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v54 + 48))(v54, v157);
  v55 = v161;
  if (v161)
  {
    v56 = (unint64_t *)&v161->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
LABEL_53:
  v58 = *(_OWORD *)(a2 + 96);
  v59 = *(_OWORD *)(a2 + 112);
  v60 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 4952) = *(_OWORD *)(a2 + 140);
  v61 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 4812) = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 4828) = v61;
  v62 = *(_OWORD *)(a2 + 32);
  v63 = *(_OWORD *)(a2 + 48);
  v64 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 4876) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 4892) = v64;
  *(_OWORD *)(a1 + 4844) = v62;
  *(_OWORD *)(a1 + 4860) = v63;
  *(_OWORD *)(a1 + 4924) = v59;
  *(_OWORD *)(a1 + 4940) = v60;
  *(_OWORD *)(a1 + 4908) = v58;
  memcpy((void *)(a1 + 4968), (const void *)(a2 + 160), 0x201uLL);
  sub_100349198((_QWORD *)(a1 + 5488), (uint64_t *)(a2 + 680));
  v66 = *(_OWORD *)(a2 + 712);
  v65 = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 5504) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 5520) = v66;
  *(_OWORD *)(a1 + 5536) = v65;
  v68 = *(_OWORD *)(a2 + 760);
  v67 = *(_OWORD *)(a2 + 776);
  v69 = *(_BYTE *)(a2 + 792);
  *(_OWORD *)(a1 + 5552) = *(_OWORD *)(a2 + 744);
  *(_BYTE *)(a1 + 5600) = v69;
  *(_OWORD *)(a1 + 5584) = v67;
  *(_OWORD *)(a1 + 5568) = v68;
  if (sub_100219C74(a2))
  {
    v70 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 2376) = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 2392) = v70;
    v71 = *(_OWORD *)(a2 + 32);
    v72 = *(_OWORD *)(a2 + 48);
    v73 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 2440) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 2456) = v73;
    *(_OWORD *)(a1 + 2408) = v71;
    *(_OWORD *)(a1 + 2424) = v72;
    v74 = *(_OWORD *)(a2 + 140);
    v75 = *(_OWORD *)(a2 + 96);
    v76 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 2488) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 2504) = v76;
    *(_OWORD *)(a1 + 2472) = v75;
    *(_OWORD *)(a1 + 2516) = v74;
    memcpy((void *)(a1 + 2536), (const void *)(a2 + 160), 0x201uLL);
    sub_100349198((_QWORD *)(a1 + 3056), (uint64_t *)(a2 + 680));
    v77 = *(_OWORD *)(a2 + 696);
    v78 = *(_OWORD *)(a2 + 712);
    *(_OWORD *)(a1 + 3104) = *(_OWORD *)(a2 + 728);
    *(_OWORD *)(a1 + 3088) = v78;
    *(_OWORD *)(a1 + 3072) = v77;
    v79 = *(_OWORD *)(a2 + 744);
    v80 = *(_OWORD *)(a2 + 760);
    v81 = *(_OWORD *)(a2 + 776);
    *(_BYTE *)(a1 + 3168) = *(_BYTE *)(a2 + 792);
    *(_OWORD *)(a1 + 3152) = v81;
    *(_OWORD *)(a1 + 3136) = v80;
    *(_OWORD *)(a1 + 3120) = v79;
    v82 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
    *(float64x2_t *)v5 = vdivq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)v5, v82)), v82);
    if (v4[2640])
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v83 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v84 = *(_DWORD *)(a1 + 2472);
        v85 = *(_QWORD *)v5;
        v86 = *(_QWORD *)(v5 + 8);
        v88 = *(_QWORD *)(v5 + 16);
        v87 = *(_QWORD *)(v5 + 24);
        v89 = *(_QWORD *)(v5 + 32);
        buf = 68290563;
        v172 = 2082;
        v173 = "";
        v174 = 1026;
        *(_DWORD *)v175 = v84;
        *(_WORD *)&v175[4] = 2049;
        *(_QWORD *)&v175[6] = v85;
        v176 = 2049;
        v177 = v86;
        v178 = 2050;
        v179 = v87;
        v180 = 2050;
        v181 = v88;
        v182 = 2050;
        v183 = v89;
        v90 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"type\":%{public}d, \""
              "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \""
              "vunc\":\"%{public}.1f\"}";
        v91 = v83;
        v92 = OS_LOG_TYPE_DEFAULT;
LABEL_63:
        v100 = 74;
LABEL_64:
        _os_log_impl((void *)&_mh_execute_header, v91, v92, v90, (uint8_t *)&buf, v100);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v93 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v94 = *(_DWORD *)(a1 + 2472);
        v95 = *(_QWORD *)v5;
        v96 = *(_QWORD *)(v5 + 8);
        v98 = *(_QWORD *)(v5 + 16);
        v97 = *(_QWORD *)(v5 + 24);
        v99 = *(_QWORD *)(v5 + 32);
        buf = 68290563;
        v172 = 2082;
        v173 = "";
        v174 = 1026;
        *(_DWORD *)v175 = v94;
        *(_WORD *)&v175[4] = 2049;
        *(_QWORD *)&v175[6] = v95;
        v176 = 2049;
        v177 = v96;
        v178 = 2050;
        v179 = v97;
        v180 = 2050;
        v181 = v98;
        v182 = 2050;
        v183 = v99;
        v90 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Cached Tightly Coupled Position\", \"type\":%{public}d, \""
              "lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \""
              "vunc\":\"%{public}.1f\"}";
        v91 = v93;
        v92 = OS_LOG_TYPE_DEBUG;
        goto LABEL_63;
      }
    }
  }
}

void sub_100016E00(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

void sub_100016E1C(uint64_t a1, uint64_t a2, char a3, void *aBlock)
{
  void *v8;
  char *v9;
  uint64_t v10;
  char v11;
  NSObject *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  char *v25;
  NSObject *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  __int16 v34;
  double v35;
  __int16 v36;
  double v37;
  __int16 v38;
  double v39;
  __int16 v40;
  double v41;
  __int16 v42;
  double v43;
  __int16 v44;
  double v45;
  uint8_t buf[4];
  uint64_t v47;
  __int16 v48;
  double v49;
  __int16 v50;
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  double v55;
  __int16 v56;
  double v57;
  __int16 v58;
  double v59;

  v8 = _Block_copy(aBlock);
  v9 = (char *)operator new(0x28uLL);
  *((_QWORD *)v9 + 2) = a2;
  *((_QWORD *)v9 + 3) = v8;
  v9[32] = a3;
  *(_DWORD *)(v9 + 33) = 0;
  *((_DWORD *)v9 + 9) = 0;
  v10 = *(_QWORD *)(a1 + 1072);
  *(_QWORD *)(v10 + 8) = v9;
  *(_QWORD *)(a1 + 1072) = v9;
  *(_QWORD *)v9 = v10;
  *((_QWORD *)v9 + 1) = a1 + 1072;
  ++*(_QWORD *)(a1 + 1088);
  if (*(_BYTE *)(a1 + 1064))
  {
    v11 = *(_BYTE *)(a1 + 912);
    if (v11)
      v11 = *(_DWORD *)(a1 + 908) != 0;
    v27 = *(_QWORD *)(a1 + 1040);
    v28 = *(_DWORD *)(a1 + 1048);
    v30 = *(_DWORD *)(a1 + 1060);
    v31 = 0;
    v29 = *(_QWORD *)(a1 + 1052);
    LOBYTE(v31) = v11;
    (*((void (**)(void *, uint64_t *))aBlock + 2))(aBlock, &v27);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v12 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      v13 = *(float *)(a1 + 1040);
      v14 = *(float *)(a1 + 1044);
      v15 = *(float *)(a1 + 1048);
      v16 = *(float *)(a1 + 1052);
      v17 = *(float *)(a1 + 1056);
      v18 = *(float *)(a1 + 1060);
      *(_DWORD *)buf = 134350592;
      v47 = a2;
      v48 = 2050;
      v49 = v13;
      v50 = 2050;
      v51 = v14;
      v52 = 2050;
      v53 = v15;
      v54 = 2050;
      v55 = v16;
      v56 = 2050;
      v57 = v17;
      v58 = 2050;
      v59 = v18;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "[CLGBE] Adding client %{public}p, sending out cached gyro bias,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v19 = *(float *)(a1 + 1040);
      v20 = *(float *)(a1 + 1044);
      v21 = *(float *)(a1 + 1048);
      v22 = *(float *)(a1 + 1052);
      v23 = *(float *)(a1 + 1056);
      v24 = *(float *)(a1 + 1060);
      v32 = 134350592;
      v33 = a2;
      v34 = 2050;
      v35 = v19;
      v36 = 2050;
      v37 = v20;
      v38 = 2050;
      v39 = v21;
      v40 = 2050;
      v41 = v22;
      v42 = 2050;
      v43 = v23;
      v44 = 2050;
      v45 = v24;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Adding client %{public}p, sending out cached gyro bias,bias.x,%{public}f,bias.y,%{public}f,bias.z,%{public}f,var.x,%{public}f,var.y,%{public}f,var.z,%{public}f", &v32, 72);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::addClientInternal(const void *, const BOOL, CLGyroBiasEstimator::Handler)", "%s\n", v25);
LABEL_21:
      if (v25 != (char *)buf)
        free(v25);
    }
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_1021A7678);
    v26 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134349056;
      v47 = a2;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "[CLGBE] Adding client %{public}p, no cached gyro bias available", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_1021A7678);
      v32 = 134349056;
      v33 = a2;
      v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "[CLGBE] Adding client %{public}p, no cached gyro bias available", &v32, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLGyroBiasEstimator::addClientInternal(const void *, const BOOL, CLGyroBiasEstimator::Handler)", "%s\n", v25);
      goto LABEL_21;
    }
  }
}

uint64_t sub_100017278(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217C808;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

void sub_1000172EC(uint64_t a1, int a2)
{
  id v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  const char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;
  _UNKNOWN **v23;
  int v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  _BYTE buf[12];
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  int v34;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
  v5 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)buf = 138412802;
    *(_QWORD *)&buf[4] = v6;
    v31 = 2048;
    v32 = a1;
    v33 = 1024;
    v34 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "StepCount subscription changed, %@, %p, %d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v14 = *(_QWORD *)(a1 + 24);
    v24 = 138412802;
    v25 = v14;
    v26 = 2048;
    v27 = a1;
    v28 = 1024;
    v29 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "StepCount subscription changed, %@, %p, %d", &v24, 28);
    v16 = (char *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  if ((sub_100236AC4() & 1) != 0)
  {
    if ((sub_1001BBC08(a1) & 1) != 0)
    {
      if ((objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier")), "syncgetEnabled") & 1) != 0)
      {
        sub_1001A638C(a1);
        v7 = *(_QWORD *)(a1 + 48);
        v9 = *(_QWORD *)(v7 + 8);
        v8 = *(void **)(v7 + 16);
        if (a2)
          objc_msgSend(v8, "register:forNotification:registrationInfo:", v9, 0, 0);
        else
          objc_msgSend(v8, "unregister:forNotification:", v9, 0);
      }
      else
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v11 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates as step counting is not enabled", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
          LOWORD(v24) = 0;
          LODWORD(v19) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Cannot subscribe to step count updates as step counting is not enabled", &v24, v19);
          v13 = (char *)v12;
          sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v12);
          if (v13 != buf)
            free(v13);
        }
      }
    }
    else
    {
      v20 = CMErrorMessage;
      v21 = &off_10221C218;
      *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v21, &v20, 1);
      sub_100E8BAFC(a1, buf);
    }
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v10 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Cannot subscribe to step count updates, step counting is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v24) = 0;
      LODWORD(v19) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Cannot subscribe to step count updates, step counting is not available", &v24, v19);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleRequestStepCountUpdate(BOOL, const CLNameValuePair &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    v22 = CMErrorMessage;
    v23 = &off_10221C200;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v23, &v22, 1);
    sub_100E8BAFC(a1, buf);
  }

}

void sub_10001782C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_100017874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssL5Context::onRhythmicModeOfOperationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102184B78);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssL5Context::onRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102184B78);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssL5Context::onRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10023F6D8(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100017A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100017A44(uint64_t a1, double *a2)
{
  char v4;
  uint64_t *v5;
  uint64_t *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  id v10;
  uint64_t v11;
  int v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  NSObject *v17;
  NSObject *v18;
  double v19;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint8_t buf[1640];

  v4 = sub_1001E4BF4();
  if ((v4 & 1) == 0)
    return v4 & 1;
  v5 = (uint64_t *)(a1 + 80);
  if (!*(_QWORD *)(a1 + 80))
  {
    v6 = (uint64_t *)sub_100A07FA0();
    v27 = 0xA0000FF00;
    v28 = 0;
    sub_1018E4078(v6, (uint64_t)&v27, (uint64_t *)buf);
    sub_1002B7674(a1 + 80, (__int128 *)buf);
    v7 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v8 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = objc_msgSend(&off_10221FF20, "mutableCopy");
    HIDWORD(v26) = 0;
    v11 = sub_100127B9C();
    sub_100081C10(v11, buf);
    v12 = sub_100526244(*(uint64_t *)buf, "MagLocationID", (_DWORD *)&v26 + 1);
    if (HIDWORD(v26))
      v13 = 1;
    else
      v13 = v12;
    v14 = *(std::__shared_weak_count **)&buf[8];
    if (!*(_QWORD *)&buf[8])
      goto LABEL_15;
    v15 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if (v13)
        goto LABEL_16;
    }
    else
    {
LABEL_15:
      if (v13)
      {
LABEL_16:
        objc_msgSend(v10, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v26)), CFSTR("LocationID"));
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_1021694C0);
        v17 = qword_10229FD68;
        if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&buf[4] = HIDWORD(v26);
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Setting Mag matching properties with IMULocationID %d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FD60 != -1)
            dispatch_once(&qword_10229FD60, &stru_1021694C0);
          v29 = 67109120;
          LODWORD(v30) = HIDWORD(v26);
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 0, "Setting Mag matching properties with IMULocationID %d", &v29);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
      }
    }
    sub_100A0A9EC(*v5, v10);
    sub_100A0A4BC(*(uint64_t **)(a1 + 80), (uint64_t)sub_10012A744, a1);

  }
  if (qword_10229FD30 != -1)
    dispatch_once(&qword_10229FD30, &stru_1021694E0);
  v18 = qword_10229FD38;
  if (os_log_type_enabled((os_log_t)qword_10229FD38, OS_LOG_TYPE_INFO))
  {
    v19 = *a2;
    *(_DWORD *)buf = 134349056;
    *(double *)&buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "Setting magnetometer update and batch interval to %{public}f", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD30 != -1)
      dispatch_once(&qword_10229FD30, &stru_1021694E0);
    v21 = *(_QWORD *)a2;
    v29 = 134349056;
    v30 = v21;
    LODWORD(v26) = 12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD38, 1, "Setting magnetometer update and batch interval to %{public}f", &v29, v26);
    v23 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLMagnetometer::setMagnetometerInterval(const CFTimeInterval &)", "%s\n", v22);
    if (v23 != buf)
      free(v23);
  }
  sub_10006B4E0(*v5, *a2);
  sub_10006BC9C(*v5, *a2);
  return v4 & 1;
}

void sub_100017EC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

void sub_100017EF0(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleStepCountNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10021EFF8((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1000180A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000180C0(uint64_t a1, int a2, uint64_t a3)
{
  unsigned __int8 v3;
  __int128 *v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD block[6];
  int v13;

  v3 = atomic_load((unsigned __int8 *)&qword_102301D00);
  v4 = &xmmword_102301000;
  if ((v3 & 1) == 0)
  {
    v10 = a3;
    v11 = a1;
    v9 = a2;
    v7 = __cxa_guard_acquire(&qword_102301D00);
    v4 = &xmmword_102301000;
    a2 = v9;
    v8 = v7;
    a3 = v10;
    a1 = v11;
    if (v8)
    {
      qword_102301CF8 = (uint64_t)dispatch_queue_create("CoreTelephonyService.getSignalStrengthMeasurementForSim", 0);
      __cxa_guard_release(&qword_102301D00);
      v4 = &xmmword_102301000;
      a3 = v10;
      a1 = v11;
      a2 = v9;
    }
  }
  v5 = a1 + 176;
  v6 = *((_QWORD *)v4 + 415);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100051058;
  block[3] = &unk_102145FF0;
  v13 = a2;
  block[4] = a3;
  block[5] = v5;
  dispatch_async(v6, block);
}

void sub_100018190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021D5E78);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D5E78);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10001EEB8(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100018340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10001854C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100018570(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  int v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  int v27;
  int v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  const char *v47;
  uint8_t *v48;
  int v49;
  uint64_t v50;
  __int16 v51;
  int v52;
  __int16 v53;
  int v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  __int16 v61;
  double v62;
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;
  __int16 v69;
  double v70;
  __int16 v71;
  double v72;
  __int16 v73;
  double v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  __int16 v79;
  double v80;
  __int16 v81;
  double v82;
  __int16 v83;
  double v84;
  __int16 v85;
  double v86;
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  uint8_t buf[4];
  uint64_t v92;
  __int16 v93;
  int v94;
  __int16 v95;
  int v96;
  __int16 v97;
  double v98;
  __int16 v99;
  double v100;
  __int16 v101;
  double v102;
  __int16 v103;
  double v104;
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  double v112;
  __int16 v113;
  double v114;
  __int16 v115;
  double v116;
  __int16 v117;
  double v118;
  __int16 v119;
  double v120;
  __int16 v121;
  double v122;
  __int16 v123;
  double v124;
  __int16 v125;
  double v126;
  __int16 v127;
  double v128;
  __int16 v129;
  double v130;
  __int16 v131;
  double v132;

  if (qword_10229FC60 != -1)
    dispatch_once(&qword_10229FC60, &stru_1021478F0);
  v4 = qword_10229FC68;
  if (os_log_type_enabled((os_log_t)qword_10229FC68, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a1 + 352);
    v6 = *(unsigned __int8 *)(a2 + 9);
    v7 = *(unsigned __int8 *)(a2 + 10);
    v8 = *(float *)(a2 + 11);
    v9 = *(float *)(a2 + 15);
    v10 = *(float *)(a2 + 19);
    v11 = *(float *)(a2 + 23);
    v12 = *(float *)(a2 + 27);
    v13 = *(float *)(a2 + 31);
    v14 = *(float *)(a2 + 35);
    v15 = *(float *)(a2 + 39);
    v16 = *(float *)(a2 + 43);
    v17 = *(float *)(a2 + 47);
    v18 = *(float *)(a2 + 51);
    v19 = *(float *)(a2 + 55);
    v20 = *(float *)(a2 + 59);
    v21 = *(float *)(a2 + 63);
    v22 = *(float *)(a2 + 67);
    v23 = *(float *)(a2 + 71);
    v24 = *(float *)(a2 + 75);
    v25 = *(float *)(a2 + 79);
    *(_DWORD *)buf = 134354176;
    v92 = v5;
    v93 = 1026;
    v94 = v6;
    v95 = 1026;
    v96 = v7;
    v97 = 2050;
    v98 = v8;
    v99 = 2050;
    v100 = v9;
    v101 = 2050;
    v102 = v10;
    v103 = 2050;
    v104 = v11;
    v105 = 2050;
    v106 = v12;
    v107 = 2050;
    v108 = v13;
    v109 = 2050;
    v110 = v14;
    v111 = 2050;
    v112 = v15;
    v113 = 2050;
    v114 = v16;
    v115 = 2050;
    v116 = v17;
    v117 = 2050;
    v118 = v18;
    v119 = 2050;
    v120 = v19;
    v121 = 2050;
    v122 = v20;
    v123 = 2050;
    v124 = v21;
    v125 = 2050;
    v126 = v22;
    v127 = 2050;
    v128 = v23;
    v129 = 2050;
    v130 = v24;
    v131 = 2050;
    v132 = v25;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ViewObstructedMLFeatures timestamp,%{public}f,currentState,%{public}u,priorState,%{public}u,absMeanGravX,%{public}f,meanGravY,%{public}f,meanGravZ,%{public}f,AccelFFTBin1,%{public}f,AccelFFTBin2,%{public}f,AccelFFTBin3,%{public}f,AccelFFTBin4,%{public}f,AccelFFTBin5,%{public}f,AccelFFTBin6,%{public}f,PressureFFTBin1,%{public}f,PressureFFTBin2,%{public}f,PressureFFTBin3,%{public}f,PressureFFTBin4,%{public}f,PressureFFTBin5,%{public}f,PressureFFTBin6,%{public}fAccelFFTBinDotPressureFFTBin,%{public}f,MedianPocketProb,%{public}f,MedianLux,%{public}f", buf, 0xCCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC60 != -1)
      dispatch_once(&qword_10229FC60, &stru_1021478F0);
    v26 = *(_QWORD *)(a1 + 352);
    v27 = *(unsigned __int8 *)(a2 + 9);
    v28 = *(unsigned __int8 *)(a2 + 10);
    v29 = *(float *)(a2 + 11);
    v30 = *(float *)(a2 + 15);
    v31 = *(float *)(a2 + 19);
    v32 = *(float *)(a2 + 23);
    v33 = *(float *)(a2 + 27);
    v34 = *(float *)(a2 + 31);
    v35 = *(float *)(a2 + 35);
    v36 = *(float *)(a2 + 39);
    v37 = *(float *)(a2 + 43);
    v38 = *(float *)(a2 + 47);
    v39 = *(float *)(a2 + 51);
    v40 = *(float *)(a2 + 55);
    v41 = *(float *)(a2 + 59);
    v42 = *(float *)(a2 + 63);
    v43 = *(float *)(a2 + 67);
    v44 = *(float *)(a2 + 71);
    v45 = *(float *)(a2 + 75);
    v46 = *(float *)(a2 + 79);
    v49 = 134354176;
    v50 = v26;
    v51 = 1026;
    v52 = v27;
    v53 = 1026;
    v54 = v28;
    v55 = 2050;
    v56 = v29;
    v57 = 2050;
    v58 = v30;
    v59 = 2050;
    v60 = v31;
    v61 = 2050;
    v62 = v32;
    v63 = 2050;
    v64 = v33;
    v65 = 2050;
    v66 = v34;
    v67 = 2050;
    v68 = v35;
    v69 = 2050;
    v70 = v36;
    v71 = 2050;
    v72 = v37;
    v73 = 2050;
    v74 = v38;
    v75 = 2050;
    v76 = v39;
    v77 = 2050;
    v78 = v40;
    v79 = 2050;
    v80 = v41;
    v81 = 2050;
    v82 = v42;
    v83 = 2050;
    v84 = v43;
    v85 = 2050;
    v86 = v44;
    v87 = 2050;
    v88 = v45;
    v89 = 2050;
    v90 = v46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC68, 0, "ViewObstructedMLFeatures timestamp,%{public}f,currentState,%{public}u,priorState,%{public}u,absMeanGravX,%{public}f,meanGravY,%{public}f,meanGravZ,%{public}f,AccelFFTBin1,%{public}f,AccelFFTBin2,%{public}f,AccelFFTBin3,%{public}f,AccelFFTBin4,%{public}f,AccelFFTBin5,%{public}f,AccelFFTBin6,%{public}f,PressureFFTBin1,%{public}f,PressureFFTBin2,%{public}f,PressureFFTBin3,%{public}f,PressureFFTBin4,%{public}f,PressureFFTBin5,%{public}f,PressureFFTBin6,%{public}fAccelFFTBinDotPressureFFTBin,%{public}f,MedianPocketProb,%{public}f,MedianLux,%{public}f", &v49, 204);
    v48 = (uint8_t *)v47;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLSPU::visitViewObstructedMLFeatures(const CMMotionCoprocessorReply::ViewObstructedMLFeatures *)", "%s\n", v47);
    if (v48 != buf)
      free(v48);
  }
}

void sub_1000189B4(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleLocationNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleLocationNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleLocationNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10020B9FC((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100018B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

id sub_100018B84(uint64_t a1, int a2)
{
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_10229FD40 != -1)
    dispatch_once(&qword_10229FD40, &stru_1021658C0);
  v4 = qword_10229FD48;
  if (os_log_type_enabled((os_log_t)qword_10229FD48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Compass for AOP started. CoverAttached %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD40 != -1)
      dispatch_once(&qword_10229FD40, &stru_1021658C0);
    v7[0] = 67240192;
    v7[1] = a2;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD48, 0, "Compass for AOP started. CoverAttached %{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLCompass7::start(BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  *(_BYTE *)(a1 + 272) = a2;
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 288) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 288) + 8), 31, 0);
}

void sub_100018D48(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGnssAssistanceMotion::onNatalimetryNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10022EEB4((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100018F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void *sub_100018F20(uint64_t a1)
{
  const void *v1;
  NSObject *v2;
  void *result;
  _UNKNOWN **v4;
  uint8_t buf[8];
  __int16 v6;
  const char *v7;
  __int16 v8;
  unint64_t v9;

  *(_QWORD *)buf = &v4;
  v1 = (const void *)sub_1001B9458(a1 + 288, (uint64_t *)&v4, (uint64_t)&unk_101B9EB60, (_QWORD **)buf)[3];
  if (!v1)
  {
    if (qword_1022A01C0 == -1)
      goto LABEL_3;
    goto LABEL_8;
  }
  if (!result)
  {
    sub_10191D71C();
    __break(1u);
LABEL_8:
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
LABEL_3:
    v2 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v6 = 2082;
      v7 = "";
      v8 = 2082;
      v9 = (unint64_t)"23CLStepCountSubscription" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Creating subscription due to demand\", \"type\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    operator new();
  }
  return result;
}

void sub_1000190D8()
{
  operator delete();
}

uint64_t *sub_100019104(uint64_t a1, int a2)
{
  NSObject *v4;
  uint64_t *result;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240192;
    v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#tt,timeTransferPulse,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v7[0] = 67240192;
    v7[1] = a2;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#tt,timeTransferPulse,%{public}d", v7, 8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::timeTransferPulse(const BOOL)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  sub_100033A54(a1, 27);
  result = *(uint64_t **)(a1 + 3448);
  if (result && a2)
    return (uint64_t *)sub_10171B354(result);
  if (result)
  {
    if ((a2 & 1) == 0)
      return (uint64_t *)sub_10021CAF4(result);
  }
  return result;
}

uint64_t sub_1000192DC(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v3;
  uint64_t result;
  NSObject *v5;
  NSObject *v6;
  _BOOL4 v7;
  int v8;
  int v9;
  __int16 v10;
  const char *v11;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 168);
  if (!v1)
    return 0;
  v3 = a1 + 112;
  result = v1(a1 + 112);
  if (!(_DWORD)result)
    return result;
  if ((TelephonyBasebandPCITransportDeregisterTimeEvent(v3, 2) & 1) != 0)
  {
    *(_BYTE *)(a1 + 104) = 0;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102164DF0);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v8 = 68289026;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportDeregisterTimeEvent,Success\"}", (uint8_t *)&v8, 0x12u);
    }
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102164DF0);
  v6 = qword_1022A0078;
  v7 = os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT);
  result = 0;
  if (v7)
  {
    v8 = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssTTPCIe,PCITransportDeregisterTimeEvent,failure\"}", (uint8_t *)&v8, 0x12u);
    return 0;
  }
  return result;
}

void sub_10001947C(unsigned int a1)
{
  const char *v1;
  NSObject *v2;
  char *v3;
  int v4;
  const char *v5;
  uint8_t buf[4];
  const char *v7;

  if (a1 > 5)
    v1 = "";
  else
    v1 = off_10214FC58[a1];
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214FB78);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "@WifiFlow, outcome, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214FB78);
    v4 = 136446210;
    v5 = v1;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, outcome, %{public}s", &v4, 12);
    sub_100512490("Generic", 1, 0, 2, "static void CLWifiLocationUpdateRequest::logLocationRequestOutcome(CLWifiLocationUpdateRequest::Outcome)", "%s\n", v3);
    if (v3 != (char *)buf)
      free(v3);
  }
}

id sub_100019640(uint64_t a1, const char *a2)
{
  const char *v3;
  NSObject *v4;
  char *v6;
  int v7;
  const char *v8;
  uint8_t buf[4];
  const char *v10;

  if (a2)
    v3 = a2;
  else
    v3 = "null";
  *(_BYTE *)(a1 + 1116) = 0;
  ++*(_DWORD *)(a1 + 1188);
  sub_100044040((_QWORD *)a1, "refresh");
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@CellFlow, refresh, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    v7 = 136446210;
    v8 = v3;
    v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@CellFlow, refresh, %{public}s", &v7, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::refreshCellState(const char *)", "%s\n", v6);
    if (v6 != (char *)buf)
      free(v6);
  }
  return objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLTelephonyService")), "syncgetRefreshCellMonitor");
}

uint64_t sub_10001982C(uint64_t **a1, int a2, int a3, double a4)
{
  NSObject *v8;
  uint64_t **v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  int v19;

  v11 = a2;
  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v8 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = a2;
    v18 = 1026;
    v19 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Client interest changed\", \"notification\":%{public, location:CLLocationProvider_Type::Notification}lld, \"is interested\":%{public}d}", buf, 0x22u);
  }
  v9 = a1 + 1;
  if (a3)
    sub_1000C6190(v9, &v11, &v11);
  else
    sub_10009E904((uint64_t)v9, &v11);
  return ((uint64_t (*)(uint64_t **, double))(*a1)[12])(a1, a4);
}

void sub_100019970(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  std::ios_base *v5;
  _QWORD *v6;
  char *v7;
  int v8;
  _QWORD *v9;
  uint8_t buf[4];
  _QWORD *v11;

  if (*(_BYTE *)(a1 + 736))
  {
    *(_BYTE *)(a1 + 736) = 0;
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v2 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
    {
      v3 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v3 = (_QWORD *)*v3;
      *(_DWORD *)buf = 136446210;
      v11 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,closing", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v6 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v6 = (_QWORD *)*v6;
      v8 = 136446210;
      v9 = v6;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 0, "ProtobufSerializer,%{public}s,closing", &v8, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::closeInternal()", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    v4 = *(_QWORD *)(a1 + 704);
    if (v4)
    {
      sub_1000258FC(v4, (_QWORD *)(a1 + 136));
      sub_10114E310((uint64_t *)(a1 + 704), 0);
    }
    std::ostream::flush(a1 + 136);
    if (!std::filebuf::close(a1 + 144))
    {
      v5 = (std::ios_base *)(a1 + 136 + *(_QWORD *)(*(_QWORD *)(a1 + 136) - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 4);
    }
    if (*(_BYTE *)(a1 + 129))
      sub_100073704(a1);
  }
}

void sub_100019BA4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102193EE8;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

BOOL sub_100019BD4(uint64_t a1, const char *a2, unsigned int *a3)
{
  const __CFString *v5;
  _BOOL8 v6;

  v5 = CFStringCreateWithCString(kCFAllocatorDefault, a2, 0x8000100u);
  v6 = sub_10018AAE4(a1, v5, a3);
  if (v5)
    CFRelease(v5);
  return v6;
}

void sub_100019C3C(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  NSObject *v6;
  uint64_t v8;
  char *v9;
  int v10;
  id v11;
  __int128 buf;
  char v13;
  id v14;

  if (a4)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136380675;
      *(_QWORD *)((char *)&buf + 4) = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#Warning LOI Manager, Error retrieving the current LOI. %{private}s", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      v8 = qword_1022A00F8;
      v10 = 136380675;
      v11 = objc_msgSend(objc_msgSend(a4, "description"), "UTF8String");
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v8, 0, "#Warning LOI Manager, Error retrieving the current LOI. %{private}s", &v10, 12);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLMicroLocationLoiManager::handleFetchedLocationOfInterestAtLocation(CLMicroLocationLoi *, CLLocation *, NSError *)", "%s\n", v9);
      if (v9 != (char *)&buf)
        free(v9);
    }
    sub_1003389CC(&buf);
    sub_1001569F0((_QWORD *)(a1 + 8), (uint64_t)&buf);
  }
  else
  {
    sub_1015A2E04((_QWORD *)&buf + 1, "No Name Given");
    *(_QWORD *)&buf = off_102130428;
    v14 = a2;
    std::string::assign((std::string *)((char *)&buf + 8), "Got LOI Event");
    sub_1001569F0((_QWORD *)(a1 + 8), (uint64_t)&buf);
    *(_QWORD *)&buf = off_102130428;

  }
  *(_QWORD *)&buf = off_10212F0B8;
  if (v13 < 0)
    operator delete(*((void **)&buf + 1));
}

void sub_100019EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a2)
    sub_10024F88C(exception_object);
  _Unwind_Resume(exception_object);
}

id sub_100019F14(uint64_t a1, uint64_t a2, int a3)
{
  void *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  NSObject *v10;
  id v12[2];
  CFTypeRef cf;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  cf = 0;
  sub_100131938(v12, (uint64_t)"CLNameValuePair.SaveToBinaryFile", 0);
  v6 = objc_autoreleasePoolPush();
  v7 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(_QWORD *)a1 + 776))(a1, &cf);
  if ((_DWORD)v7)
  {
    v8 = sub_100014F6C(v7, a2, (void *)cf, a3);
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102141D38);
    v9 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102141D38);
    }
    v10 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      *(_DWORD *)buf = 68289282;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = a2;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not serialize data", "{\"msg%{public}.0s\":\"Could not serialize data\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v8 = 0;
  }
  if (cf)
    CFRelease(cf);
  objc_autoreleasePoolPop(v6);
  sub_100131740(v12);
  return v8;
}

void sub_10001A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  _Unwind_Resume(exception_object);
}

void sub_10001A170(uint64_t a1, _DWORD *a2, uint64_t a3, id *a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleNatalimetryNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleNatalimetryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleNatalimetryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10021EC54((uint64_t)a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10001A328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10001A348(uint64_t a1, _DWORD *a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLGnssAssistanceSignalEnv::onSigEnvNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 8), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021529B8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceSignalEnv::onSigEnvNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021529B8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceSignalEnv::onSigEnvNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100229EC0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10001A500(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_10001A520@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _DWORD *result;
  double v7;
  uint64_t v8;
  int v9;
  double v10;
  int v11;
  double v12;
  int v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  char *v17;
  _QWORD v18[4];
  int v19;
  int v20;
  int v21;
  _DWORD v22[2];
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;

  result = sub_100131230((_DWORD *)a3, a1);
  *(_QWORD *)(a3 + 6232) = 0x4018000000000000;
  *(_QWORD *)(a3 + 6208) = *(_QWORD *)(a3 + 6456);
  if (*a2)
    return result;
  v7 = *(double *)(a1 + 6456);
  v8 = *(_QWORD *)(a1 + 6496);
  v9 = *(_DWORD *)(v8 + 292);
  v10 = *(double *)(v8 + 296);
  if (v10 <= 0.0)
  {
    v11 = -1;
    if (!v9)
      goto LABEL_6;
LABEL_8:
    v13 = -1;
    goto LABEL_9;
  }
  v11 = (int)(v7 - v10 + 30.0) / 60;
  if (v9)
    goto LABEL_8;
LABEL_6:
  v12 = *(double *)(v8 + 304);
  if (v12 <= 0.0)
    goto LABEL_8;
  v13 = (int)(v7 - v12);
LABEL_9:
  v14 = *(_DWORD *)(a1 + 6472);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v15 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67240704;
    v28 = v9;
    v29 = 1026;
    v30 = v11;
    v31 = 1026;
    v32 = v13;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WlpMetric, clients, reg, %{public}d, sum, %{public}d, bin, %{public}d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v22[0] = 67240704;
    v22[1] = v9;
    v23 = 1026;
    v24 = v11;
    v25 = 1026;
    v26 = v13;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, clients, reg, %{public}d, sum, %{public}d, bin, %{public}d", v22, 20);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::Registration &) const", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  v18[2] = sub_100DC2E20;
  v18[3] = &unk_10215F390;
  v19 = v9;
  v20 = v11;
  v21 = v13;
  result = (_DWORD *)AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.clients"), v18);
  v16 = *(_QWORD *)(a3 + 6496);
  if (!v9)
    *(double *)(v16 + 304) = v7;
  *(double *)(v16 + 296) = v7;
  *(_DWORD *)(v16 + 292) = v14;
  return result;
}

void sub_10001A800(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_10001A818(__int32 a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onAccessoryNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onAccessoryNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onAccessoryNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10003B768(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10001A9E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001AA00(uint64_t a1)
{
  *(_QWORD *)a1 = off_102157A10;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

void sub_10001AA74(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint8_t *v10;
  _WORD v11[8];
  uint8_t buf[4];
  int v13;
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;
  _BYTE v17[28];
  __int128 *v18;
  __int128 v19;
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 *v32;
  __int128 v33;
  _BYTE *v34;
  _BYTE v35[48];
  int v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int16 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  __int16 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  char v76;
  int v77;
  int v78;
  uint64_t v79;
  int v80;
  char v81;
  __int128 v82;
  _BYTE v83[52];
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v13 = 0;
    *(_WORD *)v14 = 2082;
    *(_QWORD *)&v14[2] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd Clearing CLGnssAWD stats\"}", buf, 0x12u);
  }
  bzero(buf, 0x458uLL);
  *(_QWORD *)v14 = 0xBFF0000000000000;
  v19 = 0u;
  *(_OWORD *)&v14[8] = 0u;
  v15 = 0u;
  v16 = 0u;
  memset(v17, 0, sizeof(v17));
  v18 = &v19;
  v20 = 0;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0u;
  v25 = 0u;
  v26 = 0u;
  v27 = 0;
  v28 = -1;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  v32 = &v33;
  memset(v35, 0, sizeof(v35));
  v34 = v35;
  v36 = 1065353216;
  v37 = 0u;
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v41 = 0u;
  v42 = 0u;
  v43 = 0u;
  v44 = 0u;
  v45 = 0u;
  v46 = 0u;
  v47 = 0;
  v63 = 0u;
  v64 = 0u;
  v61 = 0u;
  v62 = 0u;
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v55 = 0u;
  v56 = 0u;
  v53 = 0u;
  v54 = 0u;
  v51 = 0u;
  v52 = 0u;
  v49 = 0u;
  v50 = 0u;
  v48 = 0u;
  v66 = -1;
  v65 = -1;
  v67 = 0u;
  v68 = 0;
  v69 = 0u;
  v70 = 0u;
  v71 = 0u;
  v72 = 0u;
  v73 = 0u;
  v74 = 0u;
  v75 = 0u;
  v76 = 0;
  v77 = 1;
  v78 = 0;
  v79 = 0;
  v80 = 0;
  v81 = 0;
  v82 = 0u;
  memset(v83, 0, 19);
  memset(&v83[20], 0, 32);
  v84 = 0xFFFFFFFF00000000;
  v85 = -1;
  v86 = 0xBFF0000000000000;
  sub_1000066C0(a1 + 16, (uint64_t)buf);
  sub_10023B45C((uint64_t)buf);
  *(_DWORD *)(a1 + 2328) = 0;
  *(_DWORD *)(a1 + 2352) = 0;
  *(_BYTE *)(a1 + 2368) = 0;
  *(_WORD *)(a1 + 2400) = 0;
  *(_DWORD *)(a1 + 2472) = 11;
  *(_QWORD *)(a1 + 2476) = 0;
  *(_QWORD *)(a1 + 2492) = 0;
  *(_QWORD *)(a1 + 2484) = 0;
  *(_QWORD *)(a1 + 2500) = -1;
  *(_QWORD *)(a1 + 2508) = -1;
  *(_QWORD *)(a1 + 2516) = 0xB00000000;
  *(_QWORD *)(a1 + 2532) = 0;
  *(_QWORD *)(a1 + 2524) = 0;
  *(_BYTE *)(a1 + 2540) = 0;
  *(_QWORD *)(a1 + 2544) = 0xB00000000;
  *(_QWORD *)(a1 + 2552) = 0;
  *(_DWORD *)(a1 + 2560) = 0;
  v3 = (_QWORD *)(a1 + 2568);
  v4 = *(void **)(a1 + 2568);
  if (v4)
  {
    *(_QWORD *)(a1 + 2576) = v4;
    operator delete(v4);
    *v3 = 0;
    *(_QWORD *)(a1 + 2576) = 0;
    *(_QWORD *)(a1 + 2584) = 0;
  }
  *v3 = 0;
  *(_QWORD *)(a1 + 2576) = 0;
  *(_QWORD *)(a1 + 2584) = 0;
  v5 = *(void **)(a1 + 2592);
  if (v5)
  {
    *(_QWORD *)(a1 + 2600) = v5;
    operator delete(v5);
  }
  *(_QWORD *)(a1 + 2592) = 0;
  *(_QWORD *)(a1 + 2600) = 0;
  *(_QWORD *)(a1 + 2608) = 0;
  *(_DWORD *)(a1 + 2404) = 0;
  sub_10007CA14(a1);
  if (*(_QWORD *)(a1 + 2416) && (sub_1001B7910() & 0x40) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssawd,unsubscribing from device orientation,destroying fOrientationDispatcher, non-alwaysOnOrientation device", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v11[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,unsubscribing from device orientation,destroying fOrientationDispatcher, non-alwaysOnOrientation device", v11, 2);
      v10 = (uint8_t *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::clearSessionStats()", "%s\n", v9);
      if (v10 != buf)
        free(v10);
    }
    v7 = sub_10040C9DC();
    sub_1000A4A6C(v7, 0, *(_QWORD *)(a1 + 2416));
    v8 = *(_QWORD *)(a1 + 2416);
    *(_QWORD *)(a1 + 2416) = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void sub_10001AEBC(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v8;

  *a1 = off_1021D5F20;
  *a1 = off_102157998;
  a1[1] = 0;
  v8 = a2;
  a1[5] = 0;
  a1[2] = v8;
  a1[3] = a3;
  a1[4] = a5;
  a1[6] = 0;
  operator new[]();
}

void sub_10001AFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  sub_100015E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_10001B020(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217C858;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

void sub_10001B094(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v5;
  NSObject *v6;
  NSObject *v8;
  int v9;
  int v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _QWORD block[5];
  _DWORD v16[4];
  uint8_t buf[4];
  int v18;

  v2 = *a2;
  if (!*a2 || (*(_BYTE *)(v2 + 225) & 0x10) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "#gpsd,startCompleted,fail,missing data", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v16[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,startCompleted,fail,missing data", v16, 2);
LABEL_27:
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleStartCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
    return;
  }
  if (*(_DWORD *)(v2 + 96) == 1)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#gpsd,startCompleted,success", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v16[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,startCompleted,success", v16, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleStartCompletedIndication(std::unique_ptr<proto::gpsd::Indication>)", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    v6 = *(NSObject **)(a1 + 2152);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020EDB4;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async(v6, block);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v9 = *(_DWORD *)(*a2 + 96);
      *(_DWORD *)buf = 67240192;
      v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,startCompleted,fail,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v10 = *(_DWORD *)(*a2 + 96);
      v16[0] = 67240192;
      v16[1] = v10;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,startCompleted,fail,%{public}d", v16, 8);
      goto LABEL_27;
    }
  }
}

uint64_t sub_10001B4A8(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  unint64_t *v5;
  unint64_t *v6;
  char *v7;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v9;
  unint64_t v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  char *v15;
  unsigned int v16;
  _BYTE *v17;
  _BYTE *v18;
  unsigned int v19;
  uint64_t result;
  unsigned int v21;
  unsigned int v22;

  v5 = (unint64_t *)(a1 + 8);
  v6 = (unint64_t *)(a1 + 16);
  while (2)
  {
    v7 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v7 >= *((_QWORD *)this + 2) || *v7 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v7;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v7 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v11 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        if ((unint64_t)v11 < v10 && (*v11 & 0x80000000) == 0)
        {
          *v5 = *v11;
          v12 = v11 + 1;
          *((_QWORD *)this + 1) = v12;
LABEL_24:
          *(_DWORD *)(a1 + 36) |= 1u;
          if ((unint64_t)v12 < v10 && *v12 == 16)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
            goto LABEL_27;
          }
          continue;
        }
        result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v5);
        if ((_DWORD)result)
        {
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
          goto LABEL_24;
        }
        break;
      case 2u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v13 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
LABEL_27:
        v22 = 0;
        if ((unint64_t)v13 >= v10 || *v13 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v22);
          if (!(_DWORD)result)
            return result;
          v16 = v22;
          v17 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          v16 = *v13;
          v17 = v13 + 1;
          *((_QWORD *)this + 1) = v17;
        }
        *(_BYTE *)(a1 + 24) = v16 != 0;
        *(_DWORD *)(a1 + 36) |= 2u;
        if ((unint64_t)v17 >= v10 || *v17 != 24)
          continue;
        v14 = v17 + 1;
        *((_QWORD *)this + 1) = v14;
LABEL_35:
        if ((unint64_t)v14 >= v10 || *v14 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint64Fallback(this, v6);
          if (!(_DWORD)result)
            return result;
          v18 = (_BYTE *)*((_QWORD *)this + 1);
          v10 = *((_QWORD *)this + 2);
        }
        else
        {
          *v6 = *v14;
          v18 = v14 + 1;
          *((_QWORD *)this + 1) = v18;
        }
        *(_DWORD *)(a1 + 36) |= 4u;
        if ((unint64_t)v18 >= v10 || *v18 != 32)
          continue;
        v15 = v18 + 1;
        *((_QWORD *)this + 1) = v15;
LABEL_43:
        v21 = 0;
        if ((unint64_t)v15 >= v10 || *v15 < 0)
        {
          result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, &v21);
          if (!(_DWORD)result)
            return result;
          v19 = v21;
        }
        else
        {
          v19 = *v15;
          *((_QWORD *)this + 1) = v15 + 1;
        }
        if (sub_10001B780(v19))
        {
          if (!sub_10001B780(v19))
            sub_1019078D4();
          *(_DWORD *)(a1 + 36) |= 8u;
          *(_DWORD *)(a1 + 28) = v19;
        }
        if (*((_QWORD *)this + 1) != *((_QWORD *)this + 2)
          || !*((_DWORD *)this + 11) && *((_DWORD *)this + 6) != *((_DWORD *)this + 10))
        {
          continue;
        }
        *((_DWORD *)this + 8) = 0;
        result = 1;
        *((_BYTE *)this + 36) = 1;
        return result;
      case 3u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v14 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_35;
      case 4u:
        v9 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_18;
        v15 = (char *)*((_QWORD *)this + 1);
        v10 = *((_QWORD *)this + 2);
        goto LABEL_43;
      default:
        v9 = TagFallback & 7;
LABEL_18:
        if (v9 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) != 0)
          continue;
        return 0;
    }
    return result;
  }
}

BOOL sub_10001B780(unsigned int a1)
{
  return a1 < 7;
}

void sub_10001B78C(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onCellNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onCellNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onCellNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A7D74(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10001B954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10001B974(uint64_t a1, _OWORD *a2)
{
  __int128 v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;

  v3 = a2[1];
  *(_OWORD *)(a1 + 16) = *a2;
  *(_OWORD *)(a1 + 32) = v3;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_102129F00);
  v4 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)(a1 + 16);
    v6 = *(_QWORD *)(a1 + 24);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    *(_DWORD *)buf = 134349824;
    v23 = v5;
    v24 = 2050;
    v25 = v6;
    v26 = 2050;
    v27 = v7;
    v28 = 2050;
    v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#indoor-fitness-classifier, debounce params updated (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_102129F00);
    v9 = *(_QWORD *)(a1 + 16);
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(_QWORD *)(a1 + 40);
    v14 = 134349824;
    v15 = v9;
    v16 = 2050;
    v17 = v10;
    v18 = 2050;
    v19 = v11;
    v20 = 2050;
    v21 = v12;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "#indoor-fitness-classifier, debounce params updated (secs), cyclingToNonFitness, %{public}lld, runningToNonFitness, %{public}lld, nonFitnessToCycling, %{public}lld, notFitnessToRunning, %{public}lld", &v14, 42);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorFitnessModeStateMachine::updateDebounceParameters(const DebounceParameters &)", "%s\n", v13);
    if (v13 != (char *)buf)
      free(v13);
  }
}

_QWORD *sub_10001BB9C(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t i;

  if (result[3])
  {
    v1 = result;
    result = (_QWORD *)result[2];
    if (result)
    {
      do
      {
        v2 = (_QWORD *)*result;
        operator delete(result);
        result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    v3 = v1[1];
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

void sub_10001BC00(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  sub_1004E6BA4(&off_10219D200, a2, &v6);
  sub_10011A678(a1, &v6);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_10001BC94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001BCA8(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  _BYTE v7[20];
  int v8;
  uint64_t v9;
  int v10;

  sub_1000FF07C((uint64_t)v7);
  if ((sub_100103BB0(20) & 1) == 0)
    __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
  v8 = 20;
  v10 |= 0x1004u;
  v4 = v9;
  if (!v9)
    operator new();
  switch(a2)
  {
    case 0:
      if ((sub_100109264(0) & 1) == 0)
        goto LABEL_21;
      v5 = 0;
      goto LABEL_18;
    case 1:
      if ((sub_100109264(1u) & 1) == 0)
        goto LABEL_21;
      v5 = 1;
      goto LABEL_18;
    case 2:
      if ((sub_100109264(2u) & 1) == 0)
        goto LABEL_21;
      v5 = 2;
      goto LABEL_18;
    case 3:
      goto LABEL_16;
    case 4:
      if (!sub_10075F318())
      {
LABEL_16:
        if ((sub_100109264(3u) & 1) != 0)
        {
          v5 = 3;
          goto LABEL_18;
        }
LABEL_21:
        __assert_rtn("set_signal_environment_type", "GpsdProtocol.pb.h", 10246, "::proto::gnss::SignalEnvironmentType_IsValid(value)");
      }
      if ((sub_100109264(4u) & 1) == 0)
        goto LABEL_21;
      v5 = 4;
LABEL_18:
      *(_DWORD *)(v4 + 16) |= 1u;
      *(_DWORD *)(v4 + 8) = v5;
LABEL_19:
      sub_1000FF114(a1 + 2576, (uint64_t)v7);
      sub_1000FF8D8(a1 + 2176, 2);
      return sub_1000FF078(v7);
    case 6:
      if ((sub_100109264(6u) & 1) == 0)
        goto LABEL_21;
      v5 = 6;
      goto LABEL_18;
    default:
      goto LABEL_19;
  }
}

void sub_10001BE54()
{
  operator delete();
}

id sub_10001BE8C(uint64_t a1, int a2)
{
  NSObject *v4;
  CFDictionaryRef v5;
  const __CFDictionary *v6;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021601C0);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#ctcl,sendCellMonitorRefreshResult,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v10[0] = 67109120;
    v10[1] = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#ctcl,sendCellMonitorRefreshResult,%d", v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::sendCellMonitorRefreshResult(BOOL)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  v5 = sub_100235440(a2);
  v6 = v5;
  return objc_msgSend(*(id *)(a1 + 112), "sendNotificationToClients:notificationData:", CFSTR("kCellMonitorRefreshResultNotification"), v5);
}

void sub_10001C060(int a1, CFDictionaryRef theDict, void *a3)
{
  int ValueIfPresent;
  float v5;
  unsigned int v6;
  uint64_t v7;
  NSObject *v8;
  const char *v9;
  void **v10;
  _DWORD valuePtr[4];
  void *value[205];

  if (theDict)
  {
    value[0] = 0;
    valuePtr[0] = 0;
    ValueIfPresent = CFDictionaryGetValueIfPresent(theDict, CFSTR("SCALED_LQM"), (const void **)value);
    v5 = 0.0;
    if (ValueIfPresent && value[0])
    {
      CFNumberGetValue((CFNumberRef)value[0], kCFNumberFloatType, valuePtr);
      v5 = *(float *)valuePtr;
    }
    v6 = vcvtad_u64_f64(v5 * 100.0);
    if (v5 <= 0.0)
      v7 = 0;
    else
      v7 = v6;
    objc_msgSend(a3, "processReceivedWiFiDeviceLinkScore:", v7);
  }
  else
  {
    if (qword_1022A0080 != -1)
      dispatch_once(&qword_1022A0080, &stru_10213D4B8);
    v8 = qword_1022A0088;
    if (os_log_type_enabled((os_log_t)qword_1022A0088, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(value[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "CLEmergencyWifiAvailability, onWiFiDeviceClientLQMCallback, empty metrics", (uint8_t *)value, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(value, 0x65CuLL);
      if (qword_1022A0080 != -1)
        dispatch_once(&qword_1022A0080, &stru_10213D4B8);
      LOWORD(valuePtr[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, value, 1628, &_mh_execute_header, qword_1022A0088, 2, "CLEmergencyWifiAvailability, onWiFiDeviceClientLQMCallback, empty metrics", valuePtr, 2);
      v10 = (void **)v9;
      sub_100512490("Generic", 1, 0, 2, "void onWiFiDeviceClientLQMCallback(WiFiDeviceClientRef, CFDictionaryRef, void *)", "%s\n", v9);
      if (v10 != value)
        free(v10);
    }
  }
}

void sub_10001C254(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v2 = a1[386];
  if (v2)
    sub_10084D77C(v2);
  v3 = a1[381];
  if (v3)
  {
    sub_100022B1C(v3);
    sub_100346F9C(a1 + 381);
  }
  a1[385] = 0xBFF0000000000000;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#raven,deconstructRavenController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#raven,deconstructRavenController", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::deconstructRavenController()", "%s\n", v5);
    if (v6 != buf)
      free(v6);
  }
}

id sub_10001C408(uint64_t a1, int a2)
{
  NSObject *v3;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  const char *v8;
  uint8_t *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v3 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Enabling GPS assistance for pipeline", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Enabling GPS assistance for pipeline", v10, 2);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::gpsAssistanceRequestChanged(BOOL)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 352) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8), 0, 0);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Disabling GPS assistance for pipeline", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v10[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Disabling GPS assistance for pipeline", v10, 2);
      v9 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::gpsAssistanceRequestChanged(BOOL)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
    return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 352) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 352) + 8), 0);
  }
}

id sub_10001C6E8(uint64_t a1, double a2, double a3)
{
  NSObject *v5;
  const char *v6;
  NSObject *v7;
  uint8_t *v9;
  _QWORD v10[2];
  uint8_t buf[4];
  int v12;

  if (a3 == 1.79769313e308)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v7 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@WifiFlow, nexttimer, off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      LOWORD(v10[0]) = 0;
      v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, nexttimer, off", v10, 2, v10[0]);
      goto LABEL_19;
    }
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v5 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v12 = (int)a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@WifiFlow, nexttimer, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      LODWORD(v10[0]) = 67240192;
      HIDWORD(v10[0]) = (int)a3;
      v6 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, nexttimer, %{public}d", v10, 8, v10[0]);
LABEL_19:
      v9 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::scheduleNextTimer(CFAbsoluteTime, CFTimeInterval)", "%s\n", v6);
      if (v9 != buf)
        free(v9);
    }
  }
  return objc_msgSend(*(id *)(a1 + 136), "setNextFireDelay:", a3);
}

void sub_10001C98C(uint64_t a1, signed int a2)
{
  uint64_t v4;
  uint64_t v5;
  signed int v6;
  BOOL v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  void **v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  NSObject *v20;
  _QWORD *v21;
  void **v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  char *v26;
  _BYTE buf[12];
  __int16 v28;
  void **v29;
  char v30;
  int v31;
  _QWORD *v32;
  __int16 v33;
  _BYTE *v34;
  void *__p[2];
  char v36;

  v4 = *(_QWORD *)(a1 + 64);
  if (!v4)
    goto LABEL_33;
  v5 = a1 + 64;
  do
  {
    v6 = *(_DWORD *)(v4 + 32);
    v7 = v6 < a2;
    if (v6 >= a2)
      v8 = (uint64_t *)v4;
    else
      v8 = (uint64_t *)(v4 + 8);
    if (!v7)
      v5 = v4;
    v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 64 && *(_DWORD *)(v5 + 32) <= a2 && (v9 = *(NSObject **)(v5 + 40)) != 0)
  {
    dispatch_source_set_timer(v9, 0xFFFFFFFFFFFFFFFFLL, 0xFFFFFFFFFFFFFFFFLL, 0x1DCD6500uLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v10 = qword_1022A0078;
    v11 = *(_BYTE *)(a1 + 120);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v11))
    {
      v12 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v12 = (_QWORD *)*v12;
      sub_10023D9C4(a2, __p);
      if (v36 >= 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v12;
      v28 = 2080;
      v29 = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%scancel timer,event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v14 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v14 = (_QWORD *)*v14;
      v15 = qword_1022A0078;
      v16 = *(unsigned __int8 *)(a1 + 120);
      sub_10023D9C4(a2, buf);
      if (v30 >= 0)
        v17 = buf;
      else
        v17 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v14;
      v33 = 2080;
      v34 = v17;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v15, v16, "%scancel timer,event,%s", (const char *)&v31, 22);
      v19 = v18;
      if (v30 < 0)
        operator delete(*(void **)buf);
LABEL_54:
      sub_100512490("Generic", 1, 0, 2, "void CLStateMachine<CLGnssController>::cancelTimeoutEvent(Event) [T = CLGnssController]", "%s\n", v19);
      if (v19 != (char *)__p)
        free(v19);
    }
  }
  else
  {
LABEL_33:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v21 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v21 = (_QWORD *)*v21;
      sub_10023D9C4(a2, __p);
      if (v36 >= 0)
        v22 = __p;
      else
        v22 = (void **)__p[0];
      *(_DWORD *)buf = 136315394;
      *(_QWORD *)&buf[4] = v21;
      v28 = 2080;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#Warning,%s,cancel timer,notFound, event,%s", buf, 0x16u);
      if (v36 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v23 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v23 = (_QWORD *)*v23;
      v24 = qword_1022A0078;
      sub_10023D9C4(a2, buf);
      if (v30 >= 0)
        v25 = buf;
      else
        v25 = *(_BYTE **)buf;
      v31 = 136315394;
      v32 = v23;
      v33 = 2080;
      v34 = v25;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v24, 0, "#Warning,%s,cancel timer,notFound, event,%s", (const char *)&v31, 22);
      v19 = v26;
      if (v30 < 0)
        operator delete(*(void **)buf);
      goto LABEL_54;
    }
  }
}

void sub_10001CE1C(uint64_t a1, uint64_t a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  id *v19;

  CLProfilingIdentify("CLGNSSPedometerAssistanceController::HandleMotionStateNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B6738);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGNSSPedometerAssistanceController::HandleMotionStateNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B6738);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGNSSPedometerAssistanceController::HandleMotionStateNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10021EE44((uint64_t)a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10001CFCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10001CFEC(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  std::mutex *v8;
  unint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int v18;
  char *v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[4];
  void *v23;
  __int16 v24;
  uint64_t v25;
  __int128 __dst;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  _BYTE *v30;

  v8 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (*(_BYTE *)(a1 + 96))
    goto LABEL_22;
  if (a2[23] < 0)
  {
    sub_100115CE4(&__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    __dst = *(_OWORD *)a2;
    v27 = *((_QWORD *)a2 + 2);
  }
  v28 = a3;
  sub_100270E34((uint64_t)v29, a4);
  v9 = *(_QWORD *)(a1 + 80);
  if (v9 >= *(_QWORD *)(a1 + 88))
  {
    v10 = sub_1008BC2FC((uint64_t *)(a1 + 72), &__dst);
  }
  else
  {
    sub_1008BC3E8(a1 + 88, *(_QWORD **)(a1 + 80), &__dst);
    v10 = v9 + 64;
    *(_QWORD *)(a1 + 80) = v9 + 64;
  }
  *(_QWORD *)(a1 + 80) = v10;
  if (qword_1022A00D0 != -1)
    dispatch_once(&qword_1022A00D0, &stru_10215A748);
  v11 = qword_1022A00D8;
  if (os_log_type_enabled((os_log_t)qword_1022A00D8, OS_LOG_TYPE_DEBUG))
  {
    v12 = a2;
    if (a2[23] < 0)
      v12 = *(void **)a2;
    v13 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    *(_DWORD *)buf = 136315394;
    v23 = v12;
    v24 = 2048;
    v25 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "CLMM,RouteHints,addObserver,%s,size,%lu", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00D0 != -1)
      dispatch_once(&qword_1022A00D0, &stru_10215A748);
    if (a2[23] < 0)
      a2 = *(char **)a2;
    v16 = (uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 6;
    v18 = 136315394;
    v19 = a2;
    v20 = 2048;
    v21 = v16;
    v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00D8, 2, "CLMM,RouteHints,addObserver,%s,size,%lu", (const char *)&v18, 22);
    sub_100512490("Generic", 1, 0, 2, "void CLMapRouteHintController::addObserver(std::string, dispatch_queue_t, std::function<void (const CLMapsRouteHintData &)>)", "%s\n", v17);
    if (v17 != (char *)buf)
      free(v17);
  }
  v14 = v30;
  if (v30 == v29)
  {
    v15 = 4;
    v14 = v29;
  }
  else
  {
    if (!v30)
      goto LABEL_20;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_20:
  if (SHIBYTE(v27) < 0)
    operator delete((void *)__dst);
LABEL_22:
  std::mutex::unlock(v8);
}

void sub_10001D2C8(_Unwind_Exception *a1)
{
  std::mutex *v1;
  uint64_t v2;

  sub_1008BB9D4(v2 - 144);
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_10001D314(uint64_t a1, int *a2, unsigned int *a3, id *a4)
{
  uint64_t v7;
  __n128 v8;
  NSObject *v9;
  NSObject *v10;
  os_activity_scope_state_s state;
  char v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  id *v20;

  CLProfilingIdentify("CLGnssAssistanceMotion::onMotionNotification");
  objc_msgSend(objc_msgSend(*a4, "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021657A8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v12 = 1;
    v9 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssAssistanceMotion::onMotionNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v9, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021657A8);
    v10 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = "activity";
      v19 = 2050;
      v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssAssistanceMotion::onMotionNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v12 = 0;
  }
  sub_10022F7C0((uint64_t)a4, v8, v7, a2, a3);
  if (v12)
    os_activity_scope_leave(&state);
}

void sub_10001D4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10001D4EC(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t *a4)
{
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint8_t *v17;
  NSObject *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  const char *v21;
  uint8_t *v22;
  os_activity_scope_state_s state;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint8_t buf[4];
  int v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;

  CLProfilingIdentify("CLRavenController::HandleGnssAvailabilityPredictorNotification");
  if (a4)
  {
    v7 = (std::__shared_weak_count *)a4[1];
    if (v7)
    {
      v8 = *a4;
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      v25 = 0;
      v11 = std::__shared_weak_count::lock(v7);
      v26 = v11;
      if (v11)
      {
        v25 = v8;
        if (v8)
        {
          objc_msgSend(objc_msgSend(*(id *)(v8 + 16), "silo"), "assertInside");
          if (qword_1022A0220 != -1)
            dispatch_once(&qword_1022A0220, &stru_10217C648);
          if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
          {
            v24 = 1;
            v13 = _os_activity_create((void *)&_mh_execute_header, "CL: CLRavenController::HandleGnssAvailabilityPredictorNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
            os_activity_scope_enter(v13, &state);

            if (qword_1022A0220 != -1)
              dispatch_once(&qword_1022A0220, &stru_10217C648);
            v14 = qword_1022A0228;
            if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 68289538;
              v28 = 0;
              v29 = 2082;
              v30 = "";
              v31 = 2082;
              v32 = "activity";
              v33 = 2050;
              v34 = v8;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLRavenController::HandleGnssAvailabilityPredictorNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
            }
          }
          else
          {
            v24 = 0;
          }
          sub_10023C028(v8, v12, a2, a3);
          if (v24)
            os_activity_scope_leave(&state);
LABEL_34:
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v20 = __ldaxr(p_shared_owners);
          while (__stlxr(v20 - 1, p_shared_owners));
          if (!v20)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
LABEL_38:
          if (v7)
            std::__shared_weak_count::__release_weak(v7);
          return;
        }
      }
    }
    else
    {
      v11 = 0;
      v25 = 0;
      v26 = 0;
    }
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v18 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called after controller deletion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(state.opaque[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called after controller deletion", &state, 2);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleGnssAvailabilityPredictorNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    if (!v11)
      goto LABEL_38;
    goto LABEL_34;
  }
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v15 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Raven: #methodName called with null ctxExpr", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(state.opaque[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #methodName called with null ctxExpr", &state, 2);
    v17 = (uint8_t *)v16;
    sub_100512490("Generic", 1, 0, 2, "static void CLRavenController::HandleGnssAvailabilityPredictorNotification_bounce(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &, void *)", "%s\n", v16);
    if (v17 != buf)
      free(v17);
  }
}

void sub_10001D9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state, char a12, uint64_t a13, char a14)
{
  std::__shared_weak_count *v14;

  sub_100261F44((uint64_t)&a14);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_10001D9F4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102147EF0;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_10001DA54(uint64_t a1)
{
  id v2;
  char v3;
  char v4;
  NSObject *v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  _BYTE buf[18];
  __int16 v16;
  uint64_t v17;

  v2 = objc_alloc_init((Class)NSAutoreleasePool);
  sub_1015A2E04(buf, "com.apple.locationd.effective_bundle");
  v3 = (*(uint64_t (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 40))(a1, buf);
  v4 = v3;
  if (SBYTE3(v17) < 0)
  {
    operator delete(*(void **)buf);
    if ((v4 & 1) != 0)
    {
LABEL_3:
      if ((objc_msgSend(*(id *)(a1 + 112), "isAuthorizedForServiceTypeMask:", 1024) & 1) == 0)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102174F78);
        v5 = qword_1022A01D8;
        if (!os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
          goto LABEL_10;
        v6 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v16 = 2114;
        v17 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning, request to mark client as having received location while it is not authorized\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102174F78);
LABEL_10:
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
      {
        v8 = *(_QWORD *)(a1 + 48);
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        v16 = 2114;
        v17 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
      sub_10019808C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 48), 1, 0);
      goto LABEL_19;
    }
  }
  else if ((v3 & 1) != 0)
  {
    goto LABEL_3;
  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    v10 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)&buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Unentitled entity '%{public}@' trying to mark itself as having received location?!", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102174F78);
    v11 = *(_QWORD *)(a1 + 48);
    v13 = 138543362;
    v14 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "Unentitled entity '%{public}@' trying to mark itself as having received location?!", &v13, 12);
    sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleMessageMarkAsHavingReceivedLocation(std::shared_ptr<CLConnectionMessage>)", "%s\n", v12);
    if (v12 != buf)
      free(v12);
  }
LABEL_19:

}

void sub_10001DDB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

void sub_10001DDF8(id a1, unint64_t a2, unint64_t a3)
{
  double v5;
  NSObject *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  unint64_t v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  double v17;

  v5 = sub_100127828(a3 - a2);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v6 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 68290050;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2082;
    v11 = "elapsed";
    v12 = 2050;
    v13 = a2;
    v14 = 2050;
    v15 = a3;
    v16 = 2050;
    v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reduceFreePages\", \"event\":%{public, location:escape_only}s, \"begin_mach\":%{public}llu, \"end_mach\":%{public}llu, \"elapsed_s\":\"%{public}.09f\"}", (uint8_t *)v7, 0x3Au);
  }
}

void sub_10001DF1C(uint64_t a1, uint64_t a2)
{
  NSObject *v2;
  const char *v3;
  char *v4;
  uint64_t v6;
  int v7;
  int v8;
  NSObject *v9;
  int v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double v14;
  int v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  double v28;
  unsigned __int8 v29;
  __int16 v30;
  unint64_t v31;
  unint64_t v32;
  unsigned __int8 v33;
  int v34;
  _BYTE v35[14];
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  _BYTE buf[18];
  __int16 v41;
  int v42;
  __int16 v43;
  int v44;

  if ((*(_BYTE *)(a2 + 225) & 4) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "#gpsd,#ee,received EE indication but data is empty", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v30 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#ee,received EE indication but data is empty", &v30, 2);
      v4 = (char *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
    return;
  }
  LOBYTE(v30) = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v6 = *(_QWORD *)(a2 + 80);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311908 + 80);
  sub_1002444AC(v6, (uint64_t)&v30);
  if (v30 != 4)
  {
    if (v30 == 3)
    {
      v8 = 0;
      v7 = 1;
      goto LABEL_19;
    }
    if ((_BYTE)v30)
    {
      v8 = 0;
      v7 = 0;
      goto LABEL_19;
    }
  }
  v7 = 2;
  v8 = 1;
LABEL_19:
  if (!v33)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134349056;
      *(_QWORD *)&buf[4] = v31;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#gpsd,#ee,vendor reported integrity failure,dataTimeGpsNs,%{public}llu", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v34 = 134349056;
      *(_QWORD *)v35 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#ee,vendor reported integrity failure,dataTimeGpsNs,%{public}llu", &v34, 12);
      v26 = (char *)v25;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v25);
      if (v26 != buf)
        free(v26);
    }
  }
  if (v33)
    v10 = 0;
  else
    v10 = 12;
  v29 = 0;
  v11 = sub_100214380(a1 + 2536, &v29);
  v12 = v31;
  v13 = v32;
  v14 = v11 - (double)v31;
  v28 = v14;
  *(double *)(a1 + 2568) = v14;
  if (v13 <= v12)
  {
    v15 = 0;
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v15 = v13 - v12;
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = v13 - v12;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,Extended ephemeris file data durationSeconds,%d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v34 = 67109120;
      *(_DWORD *)v35 = v13 - v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#ee,Extended ephemeris file data durationSeconds,%d", &v34);
      v18 = (char *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v19 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v33;
    *(_WORD *)&buf[8] = 2050;
    *(double *)&buf[10] = v14;
    v41 = 1026;
    v42 = v29;
    v43 = 1026;
    v44 = v7;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,decoded EE callback,integrityPassed,%{public}d,data_age_seconds,%{public}.1f,isAgeReliable,%{public}d,fileType,%{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v34 = 67240960;
    *(_DWORD *)v35 = v33;
    *(_WORD *)&v35[4] = 2050;
    *(double *)&v35[6] = v14;
    v36 = 1026;
    v37 = v29;
    v38 = 1026;
    v39 = v7;
    LODWORD(v27) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#ee,decoded EE callback,integrityPassed,%{public}d,data_age_seconds,%{public}.1f,isAgeReliable,%{public}d,fileType,%{public}d", &v34, v27, *(_QWORD *)&v28);
    v24 = (char *)v23;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssDaemonDevice::handleDecodedExtendedEphemerisIndication(const proto::gpsd::Indication &)", "%s\n", v23);
    if (v24 != buf)
      free(v24);
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(buf, a1);
  sub_100067B0C(a1 + 8, (const char *)(*(_QWORD *)buf + 24), v10, v7, &v28);
  v20 = *(_QWORD *)buf;
  *(_QWORD *)buf = 0;
  if (v20)
    sub_10085B928((uint64_t)buf, v20);
  v21 = *(_QWORD *)(a1 + 1432);
  if (v21)
    v22 = v8;
  else
    v22 = 0;
  if (v13 > v12 && v22)
  {
    *(_DWORD *)buf = v15;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v21 + 48))(v21, buf);
  }
}

void sub_10001E610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v22;

  v22 = a21;
  a21 = 0;
  if (v22)
    sub_10085B928((uint64_t)&a21, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10001E638(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  _QWORD *v4;
  int v5;
  unsigned int v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unsigned int *v19;

  sub_1000CE038(*(_QWORD *)(a1 + 16));
  v2 = sqlite3_exec(*(sqlite3 **)(a1 + 8), "BEGIN TRANSACTION", 0, 0, 0);
  v7 = v2;
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v3 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v4 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v4 = (_QWORD *)*v4;
    v5 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)buf = 68290050;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = v4;
    v14 = 1026;
    v15 = v5;
    v16 = 1040;
    v17 = 4;
    v18 = 2098;
    v19 = &v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"beginTransaction\", \"path\":%{public, location:escape_only}s, \"count\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x32u);
    v2 = v7;
  }
  ++*(_DWORD *)(a1 + 120);
  return v2;
}

uint64_t sub_10001E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  NSObject *v5;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "gpsFusionRequested");
  if ((_DWORD)result != (_DWORD)a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      v9 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "onGpsFusionRequest, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v7[0] = 67240192;
      v7[1] = a2;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "onGpsFusionRequest, %{public}d", v7, 8);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onGpsFusionRequest(BOOL)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    objc_msgSend(*(id *)(a1 + 8), "setGpsFusionRequested:", a2);
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 8), "gpsAssistanceRequested");
    if ((result & 1) == 0)
      return (*(uint64_t (**)(_QWORD, id))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), objc_msgSend(*(id *)(a1 + 8), "gpsFusionRequested"));
  }
  return result;
}

uint64_t sub_10001E99C(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  int v4;
  NSObject *v6;
  const char *v7;
  uint8_t *v8;
  unsigned int v9;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  const char *v15;
  uint8_t buf[4];
  _BYTE v17[14];
  __int16 v18;
  const char *v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int v23;
  __int16 v24;
  unsigned int *v25;

  v9 = sqlite3_exec(*(sqlite3 **)(a1 + 8), "END TRANSACTION", 0, 0, 0);
  --*(_DWORD *)(a1 + 120);
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v2 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v3 = (const char *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v3 = *(const char **)v3;
    v4 = *(_DWORD *)(a1 + 120);
    *(_DWORD *)buf = 68290050;
    *(_DWORD *)v17 = 0;
    *(_WORD *)&v17[4] = 2082;
    *(_QWORD *)&v17[6] = "";
    v18 = 2082;
    v19 = v3;
    v20 = 1026;
    v21 = v4;
    v22 = 1040;
    v23 = 4;
    v24 = 2098;
    v25 = &v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"endTransaction\", \"path\":%{public, location:escape_only}s, \"count\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P}", buf, 0x32u);
  }
  if (*(_DWORD *)(a1 + 120))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102149350);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)v17 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm";
      *(_WORD *)&v17[8] = 1024;
      *(_DWORD *)&v17[10] = 1700;
      v18 = 2080;
      v19 = "fTransactionCount == 0";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assert Failed, %s, %d, %s", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102149350);
      v10 = 136315650;
      v11 = "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Shared/Utilities/CLSqliteDatabase.mm";
      v12 = 1024;
      v13 = 1700;
      v14 = 2080;
      v15 = "fTransactionCount == 0";
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "Assert Failed, %s, %d, %s", (const char *)&v10, 28);
      v8 = (uint8_t *)v7;
      sub_100512490("Generic", 1, 0, 0, "int CLSqliteDatabase::endTransaction()", "%s\n", v7);
      if (v8 != buf)
        free(v8);
    }
    sub_100512450();
  }
  sub_1000CDA5C(*(_QWORD *)(a1 + 16));
  return v9;
}

void sub_10001ECB4(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151F30;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

std::string *sub_10001ECE4(int *a1)
{
  NSObject *v2;
  int v3;
  int v4;
  int v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FB58);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v3 = *a1;
    *(_DWORD *)buf = 67240192;
    v10 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WifiFlow, reset, last, %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FB58);
    v6 = *a1;
    v8[0] = 67240192;
    v8[1] = v6;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiFlow, reset, last, %{public}d", v8, 8);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationUpdateRequest::reset()", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  v4 = *a1;
  *a1 = 0;
  a1[1] = v4;
  a1[12] = 0;
  *((_QWORD *)a1 + 5) = 0xBFF0000000000000;
  return std::string::assign((std::string *)(a1 + 4), "default");
}

void sub_10001EEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5;
  int v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  uint8_t *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  int v21;
  uint8_t buf[4];
  unsigned int v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  __int16 v28;
  unsigned int v29;
  __int16 v30;
  int v31;

  v5 = *(_DWORD *)(a4 + 1448);
  v6 = *(unsigned __int8 *)(a4 + 1452);
  v7 = *(_DWORD *)(a4 + 1456);
  v8 = *(_QWORD *)(a4 + 1464);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D5E98);
  v9 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67241216;
    v23 = v5;
    v24 = 1026;
    v25 = v7;
    v26 = 1026;
    v27 = v8 & 1;
    v28 = 1026;
    v29 = (v8 >> 1) & 1;
    v30 = 1026;
    v31 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "CLRhythmicGnssUtility,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D5E98);
    v13[0] = 67241216;
    v13[1] = v5;
    v14 = 1026;
    v15 = v7;
    v16 = 1026;
    v17 = v8 & 1;
    v18 = 1026;
    v19 = (v8 >> 1) & 1;
    v20 = 1026;
    v21 = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLRhythmicGnssUtility,onRhythmicModeOfOperationNotification,modeOfOps,%{public}d,powerMode,%{public}d,1Hz,%{public}d,rhythmic,%{public}d,state,%{public}d", v13, 32);
    v12 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "void CLRhythmicGnssUtility::onRhythmicModeOfOperationNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v11);
    if (v12 != buf)
      free(v12);
  }
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = v7;
  if (v6)
  {
    if (v5 >= 2)
      sub_100263950("bitset set argument out of range");
    v10 = *(_QWORD *)(a1 + 32) | (1 << v5);
  }
  else
  {
    if (v5 >= 2)
      sub_100263950("bitset reset argument out of range");
    v10 = *(_QWORD *)(a1 + 32) & ~(1 << v5);
  }
  *(_QWORD *)(a1 + 32) = v10;
  *(_BYTE *)(a1 + 20) = v6;
}

uint64_t sub_10001F134(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(_QWORD, CLMicroLocationLoi *, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32)
                                                                                                + 64)
                                                                                  + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), -[CLMicroLocationLoi initWithIdentifier:andType:]([CLMicroLocationLoi alloc], "initWithIdentifier:andType:", objc_msgSend(a2, "identifier"), objc_msgSend(a2, "type")), *(_QWORD *)(a1 + 40), a3);
}

uint64_t sub_10001F1B8(uint64_t a1)
{
  *(_QWORD *)a1 = off_10217C7B8;
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  _Block_release(*(const void **)(a1 + 40));
  _Block_release(*(const void **)(a1 + 48));

  if (*(_QWORD *)(a1 + 56))
    operator delete[]();
  return sub_100015E88(a1);
}

void sub_10001F22C(double *a1, double *a2, int a3, int a4)
{
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  NSObject *v13;
  const char *v14;
  double v15;
  double v16;
  const char *v17;
  double v18;
  double v19;
  char *v20;
  int v21;
  const char *v22;
  __int16 v23;
  double v24;
  __int16 v25;
  double v26;
  __int16 v27;
  int v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  int v36;

  if (a3)
    v8 = 604800.0;
  else
    v8 = 3600.0;
  if (qword_10230FA80 != -1)
    dispatch_once(&qword_10230FA80, &stru_1021CE270);
  v9 = *(double *)&qword_10230FA60;
  if (!byte_10230FA68)
    v9 = 604800.0;
  *a1 = v9;
  v10 = *(double *)&qword_10230FA70;
  if (!byte_10230FA78)
    v10 = v8;
  *a2 = v10;
  if (a4)
  {
    if (qword_10230FAA8 != -1)
      dispatch_once(&qword_10230FAA8, &stru_1021CE290);
    v11 = *(double *)&qword_10230FA88;
    if (!byte_10230FA90)
      v11 = 3600.0;
    *a1 = v11;
    v12 = *(double *)&qword_10230FA98;
    if (!byte_10230FAA0)
      v12 = 3600.0;
    *a2 = v12;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = "#rte";
    v15 = *a1;
    v16 = *a2;
    if (a3)
      v14 = "#rof";
    *(_DWORD *)buf = 136315906;
    v30 = v14;
    v31 = 2050;
    v32 = v15;
    v33 = 2050;
    v34 = v16;
    v35 = 1026;
    v36 = a4;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "GNSS_FILE: %s,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f,isWorkoutOrTbtSession,%{public}d", buf, 0x26u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE2D0);
    v17 = "#rte";
    if (a3)
      v17 = "#rof";
    v18 = *a1;
    v19 = *a2;
    v21 = 136315906;
    v22 = v17;
    v23 = 2050;
    v24 = v18;
    v25 = 2050;
    v26 = v19;
    v27 = 1026;
    v28 = a4;
    v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "GNSS_FILE: %s,updateRateCellSec,%{public}.2f,updateRateWifiSec,%{public}.2f,isWorkoutOrTbtSession,%{public}d", &v21, 38);
    sub_100512490("Generic", 1, 0, 2, "static void CLGnssAssistanceFileDownloader::getRteRofFileDownloadRates(CFTimeInterval &, CFTimeInterval &, const BOOL, const BOOL)", "%s\n", v20);
    if (v20 != (char *)buf)
      free(v20);
  }
}

void sub_10001FA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_10065C930((uint64_t)&a11);
  sub_10065C930((uint64_t)&a59);
  _Unwind_Resume(a1);
}

void sub_10001FAA8(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint8_t buf[4];
  uint64_t v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  int v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;

  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_10214FF70);
  v4 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v5 = *(_QWORD *)(a1 + 512);
    v6 = *(_DWORD *)(a1 + 352);
    v7 = *(_QWORD *)(a1 + 432);
    v8 = *(_QWORD *)(a1 + 184);
    v9 = *(_QWORD *)(a1 + 224);
    v10 = *(_QWORD *)(a1 + 264);
    v11 = *(_QWORD *)(a1 + 304);
    v12 = *(_QWORD *)(a1 + 344);
    *(_DWORD *)buf = 136317186;
    v45 = a2;
    v46 = 2048;
    v47 = v5;
    v48 = 1024;
    v49 = v6;
    v50 = 2048;
    v51 = v7;
    v52 = 2048;
    v53 = v8;
    v54 = 2048;
    v55 = v9;
    v56 = 2048;
    v57 = v10;
    v58 = 2048;
    v59 = v11;
    v60 = 2048;
    v61 = v12;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v15 = *(_QWORD *)(a1 + 512);
    v16 = *(_DWORD *)(a1 + 352);
    v17 = *(_QWORD *)(a1 + 432);
    v18 = *(_QWORD *)(a1 + 184);
    v19 = *(_QWORD *)(a1 + 224);
    v20 = *(_QWORD *)(a1 + 264);
    v21 = *(_QWORD *)(a1 + 304);
    v22 = *(_QWORD *)(a1 + 344);
    v26 = 136317186;
    v27 = a2;
    v28 = 2048;
    v29 = v15;
    v30 = 1024;
    v31 = v16;
    v32 = 2048;
    v33 = v17;
    v34 = 2048;
    v35 = v18;
    v36 = 2048;
    v37 = v19;
    v38 = 2048;
    v39 = v20;
    v40 = 2048;
    v41 = v21;
    v42 = 2048;
    v43 = v22;
    v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cancelRetryTimer, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, %lu", (const char *)&v26, 88);
    sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cancelRetryTimer(const char *)", "%s\n", v23);
    if (v23 != (char *)buf)
      free(v23);
  }
  v13 = *(void **)(a1 + 512);
  if (v13)
  {
    objc_msgSend(v13, "invalidate");

    *(_QWORD *)(a1 + 512) = 0;
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "NETWORK: cancelRetryTimer, no retry timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      LOWORD(v26) = 0;
      LODWORD(v25) = 2;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: cancelRetryTimer, no retry timer", &v26, v25);
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::cancelRetryTimer(const char *)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
  }
}

void sub_10001FE6C(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  const char *v6;
  uint8_t *v7;
  uint64_t v8;
  _WORD v9[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CF318);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "DEM,start", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v9[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,start", v9, 2);
    v5 = (uint8_t *)v4;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::start()", "%s\n", v4);
    if (v5 != buf)
      free(v5);
  }
  if (!*(_BYTE *)(a1 + 153))
  {
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 160) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 160) + 8), 4, 0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CF318);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "DEM,TBA,registered for TBA notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CF318);
      v9[0] = 0;
      LODWORD(v8) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,TBA,registered for TBA notifications", v9, v8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceDem::start()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    *(_BYTE *)(a1 + 153) = 1;
  }
  *(_BYTE *)(a1 + 114) = 1;
}

BOOL sub_100020150(double *a1, double *a2)
{
  NSObject *v4;
  double v5;
  _BOOL8 result;
  NSObject *v8;
  double v9;
  double v10;
  const char *v11;
  double v12;
  uint8_t *v13;
  __int128 v14;
  uint8_t buf[4];
  double v16;

  if (*a2 < 0.0 || (*(_QWORD *)a2 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v5 = *a2;
      *(_DWORD *)buf = 134349056;
      v16 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid uncertainty, %{public}0.3f", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v12 = *a2;
    LODWORD(v14) = 134349056;
    *(double *)((char *)&v14 + 4) = v12;
    v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, invalid uncertainty, %{public}0.3f", &v14, 12, v14);
LABEL_25:
    v13 = (uint8_t *)v11;
    sub_100512490("Generic", 1, 0, 2, "static BOOL CLWifiAltitudeKalmanFilter::validAltitudeAndUncertainty(const double &, const double &)", "%s\n", v11);
    if (v13 != buf)
      free(v13);
    return 0;
  }
  if (*a1 >= -450.0 && *a1 <= 8850.0)
    return 1;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A97F8);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v9 = *a1;
    *(_DWORD *)buf = 134283521;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "WifiCalc, zaxis, invalid altitude, %{private}0.3f", buf, 0xCu);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A97F8);
    v10 = *a1;
    LODWORD(v14) = 134283521;
    *(double *)((char *)&v14 + 4) = v10;
    v11 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, zaxis, invalid altitude, %{private}0.3f", &v14, 12, v14);
    goto LABEL_25;
  }
  return result;
}

char *sub_100020444(char *result)
{
  _BYTE *v1;
  char *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  v1 = result + 11688;
  if (!result[11688])
  {
    v2 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,TBA, registered for tunnel and bridge assistance notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v2 + 1462) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v2 + 1462) + 8), 4, 0);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, registered for tunnel end point notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    result = (char *)objc_msgSend(*(id *)(*((_QWORD *)v2 + 1462) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*((_QWORD *)v2 + 1462) + 8), 5, 0);
    *v1 = 1;
  }
  return result;
}

char *sub_1000205E8(char *result)
{
  _BYTE *v1;
  char *v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  __int16 v7;
  const char *v8;

  v1 = result + 11688;
  if (result[11688])
  {
    v2 = result;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,TAB, unregistered for tunnel and bridge assistance notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    objc_msgSend(*(id *)(*((_QWORD *)v2 + 1462) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 1462) + 8), 4);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v4 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v5 = 68289026;
      v6 = 0;
      v7 = 2082;
      v8 = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, unregistered for tunnel end point notifications\"}", (uint8_t *)&v5, 0x12u);
    }
    result = (char *)objc_msgSend(*(id *)(*((_QWORD *)v2 + 1462) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 1462) + 8), 5);
    *v1 = 0;
  }
  return result;
}

BOOL sub_100020780(void *a1)
{
  NSObject *v2;
  _BOOL8 v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  NSObject *v8;
  id v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  uint64_t v20;

  v12 = 0;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally determining if app is installed via LSApplicationWorkspace & LSApplicationExtensionRecord\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
  if ((objc_msgSend(+[LSApplicationWorkspace defaultWorkspace](LSApplicationWorkspace, "defaultWorkspace"), "applicationIsInstalled:", a1) & 1) != 0|| objc_msgSend(objc_alloc((Class)LSApplicationExtensionRecord), "initWithBundleIdentifier:error:", a1, &v12))
  {
    v3 = 1;
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v8 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2114;
      v18 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally determining if app is installed via LSApplicationRecord\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
    v9 = objc_msgSend(objc_alloc((Class)LSApplicationRecord), "initWithBundleIdentifier:allowPlaceholder:error:", a1, 0, &v12);
    v10 = objc_msgSend(v9, "localizedName");
    v3 = v10 != 0;
    if (!v10)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
      v11 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        v14 = 0;
        v15 = 2082;
        v16 = "";
        v17 = 2114;
        v18 = a1;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally LSApplicationRecord is not considered installed\", \"bundleID\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }

  }
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289538;
    v14 = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2114;
    v18 = a1;
    v19 = 1026;
    LODWORD(v20) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#ClearClient isApplicationInstalledLocally\", \"bundleID\":%{public, location:escape_only}@, \"isAppInstalled?\":%{public}hhd}", buf, 0x22u);
  }
  if (v12)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
    {
      v6 = objc_msgSend(a1, "UTF8String");
      *(_DWORD *)buf = 68289538;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 2082;
      v18 = v6;
      v19 = 2114;
      v20 = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LaunchServices did not find app in its database\", \"bundleId\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}@}", buf, 0x26u);
    }
  }
  return v3;
}

NSURL *sub_100020B48()
{
  void *v0;
  NSString *v1;
  NSObject *v2;
  char *v4;
  int v5;
  void *v6;
  uint8_t buf[4];
  void *v8;

  v0 = sub_100225414();
  v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v0);
  if (!v1)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 136446210;
      v8 = v0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "availabilityDir_nsstr is nil which will cause a NSInvalidArgumentException due to -[NSURL initFileURLWithPath:isDirectory:]: nil string parameter;  availabiltyDir_cstr = %{public}s",
        buf,
        0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v5 = 136446210;
      v6 = v0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "availabilityDir_nsstr is nil which will cause a NSInvalidArgumentException due to -[NSURL initFileURLWithPath:isDirectory:]: nil string parameter;  availabiltyDir_cstr = %{public}s",
                     &v5,
                     12);
      sub_100512490("Generic", 1, 0, 0, "static NSURL *CLIndoorLogic::getPathToAvailabilityTile()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
  return +[NSURL URLWithString:relativeToURL:](NSURL, "URLWithString:relativeToURL:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "availability.pb"), +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", v1, 1));
}

void sub_1000212F8(uint64_t a1, void *a2, double a3)
{
  void *v4;
  unsigned int v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  double v17;
  double v18;
  NSObject *v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  void *v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  double v27;
  double v28;
  unsigned int v29;
  double v30;
  NSObject *v31;
  const char *v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  int v46;
  uint64_t v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint8_t buf[4];
  _BYTE v53[20];
  uint64_t v54;
  unsigned int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  unsigned int v59;
  __int16 v60;
  unsigned int v61;
  __int16 v62;
  unsigned int v63;
  __int16 v64;
  double v65;
  __int16 v66;
  double v67;

  if (a2)
  {
    v4 = a2;
    if (objc_msgSend(a2, "count"))
    {
      v6 = objc_msgSend(v4, "count");
      v7 = &qword_1022A0000;
      v8 = &qword_1022A0000;
      v9 = v6;
      if (v6)
      {
        v10 = 0;
        v11 = v6 - 1;
        v12 = 0.0;
        v13 = 0.0;
        v42 = v6;
        do
        {
          v14 = objc_msgSend(v4, "objectAtIndexedSubscript:", v10);
          objc_msgSend(objc_msgSend(v14, "startDate"), "timeIntervalSinceReferenceDate");
          if (v15 >= *(double *)(a1 + 196))
            v16 = v15;
          else
            v16 = *(double *)(a1 + 196);
          v17 = a3;
          if (v10 < v11)
          {
            objc_msgSend(objc_msgSend(objc_msgSend(v4, "objectAtIndexedSubscript:", v10 + 1), "startDate"), "timeIntervalSinceReferenceDate");
            v17 = v18;
          }
          if (v7[14] != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v19 = v8[15];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            v45 = objc_msgSend(v14, "stationary");
            v44 = objc_msgSend(v14, "walking");
            v43 = objc_msgSend(v14, "running");
            v20 = objc_msgSend(v14, "automotive");
            v21 = v7;
            v22 = objc_msgSend(v14, "cycling");
            v23 = v4;
            v24 = a1;
            v25 = objc_msgSend(v14, "unknown");
            v26 = objc_msgSend(v14, "confidence");
            *(_DWORD *)buf = 68291330;
            *(_DWORD *)v53 = 0;
            *(_WORD *)&v53[4] = 2082;
            *(_QWORD *)&v53[6] = "";
            *(_WORD *)&v53[14] = 1026;
            *(_DWORD *)&v53[16] = v45;
            LOWORD(v54) = 1026;
            *(_DWORD *)((char *)&v54 + 2) = v44;
            HIWORD(v54) = 1026;
            v55 = v43;
            v56 = 1026;
            v57 = v20;
            v8 = &qword_1022A0000;
            v58 = 1026;
            v59 = v22;
            v7 = v21;
            v9 = v42;
            v60 = 1026;
            v61 = v25;
            a1 = v24;
            v4 = v23;
            v62 = 1026;
            v63 = v26;
            v64 = 2050;
            v65 = v16;
            v66 = 2050;
            v67 = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,handleMotionActivityResponse,\", \"stationary\":%{public}hhd, \"walking\":%{public}hhd, \"running\":%{public}hhd, \"automotive\":%{public}hhd, \"cycling\":%{public}hhd, \"unknown\":%{public}hhd, \"confidence\":%{public}d, \"motionStartTime\":\"%{public}.1f\", \"motionEndTime\":\"%{public}.1f\"}", buf, 0x50u);
          }
          v27 = vabdd_f64(v17, v16);
          if (v17 <= v16)
            v28 = 0.0;
          else
            v28 = v27;
          if (objc_msgSend(v14, "automotive"))
          {
            v13 = v13 + v28;
            *(double *)(a1 + 960) = v17;
          }
          else
          {
            v29 = objc_msgSend(v14, "unknown");
            v30 = -0.0;
            if (v29)
              v30 = v28;
            v12 = v12 + v30;
          }
          ++v10;
        }
        while (v9 != v10);
      }
      else
      {
        v13 = 0.0;
        v12 = 0.0;
      }
      *(double *)(a1 + 952) = v13;
      *(double *)(a1 + 968) = v12;
      *(_BYTE *)(a1 + 976) = 1;
      if (v7[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v33 = v8[15];
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        v34 = *(_QWORD *)(a1 + 952);
        v35 = *(_QWORD *)(a1 + 968);
        v36 = *(_QWORD *)(a1 + 960);
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)v53 = v34;
        *(_WORD *)&v53[8] = 2050;
        *(_QWORD *)&v53[10] = v35;
        *(_WORD *)&v53[18] = 2050;
        v54 = v36;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,handleMotionActivityResponse,driveDur,%{public}.1lf,unKnownDriveDur,%{public}.1lf,lastDriveEndTime,%{public}.1lf", buf, 0x20u);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (v7[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v37 = v8[15];
      v38 = *(_QWORD *)(a1 + 952);
      v39 = *(_QWORD *)(a1 + 968);
      v40 = *(_QWORD *)(a1 + 960);
      v46 = 134349568;
      v47 = v38;
      v48 = 2050;
      v49 = v39;
      v50 = 2050;
      v51 = v40;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v37, 0, "#GnssRefPosMaintenance,handleMotionActivityResponse,driveDur,%{public}.1lf,unKnownDriveDur,%{public}.1lf,lastDriveEndTime,%{public}.1lf", &v46, 32);
LABEL_42:
      v41 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::handleMotionActivityResponse(NSArray<CMMotionActivity *> *, CFAbsoluteTime)", "%s\n", v32);
      if (v41 != buf)
        free(v41);
      return;
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v31 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,handleMotionActivityResponse,No motion activities reported", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    LOWORD(v46) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssRefPosMaintenance,handleMotionActivityResponse,No motion activities reported", &v46, 2);
    goto LABEL_42;
  }
}

void sub_100021820(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  NSObject *v5;
  const char *v6;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  const char *v17;
  uint8_t *v18;
  _BYTE v19[24];
  uint8_t buf[4];
  id v21;
  __int16 v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138543362;
      v21 = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,error querying motion activity,%{public}@", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      *(_DWORD *)v19 = 138543362;
      *(_QWORD *)&v19[4] = a3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,error querying motion activity,%{public}@", v19, 12, *(_OWORD *)v19, *(_QWORD *)&v19[16]);
LABEL_27:
      v15 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()_block_invoke", "%s\n", v6);
      if (v15 != buf)
        free(v15);
    }
  }
  else if (a2 && objc_msgSend(a2, "count"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349056;
      v21 = objc_msgSend(a2, "count");
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,received,%{public}lu,responses for motion activity", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v16 = qword_1022A0078;
      *(_DWORD *)v19 = 134349056;
      *(_QWORD *)&v19[4] = objc_msgSend(a2, "count");
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v16, 0, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,received,%{public}lu,responses for motion activity", v19, 12);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::getDriveHistorySinceLastCachedRefPosition()_block_invoke", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    sub_1000212F8(v3, a2, *(double *)(a1 + 40));
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v10 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v11 = *(void **)(v3 + 196);
      v12 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)buf = 134349312;
      v21 = v11;
      v22 = 2050;
      v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,no motion activity returned for duration,%{public}.1lf,to,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v13 = *(_QWORD *)(v3 + 196);
      v14 = *(_QWORD *)(a1 + 40);
      *(_DWORD *)v19 = 134349312;
      *(_QWORD *)&v19[4] = v13;
      *(_WORD *)&v19[12] = 2050;
      *(_QWORD *)&v19[14] = v14;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,getDriveInfoSinceLastCachedRefPosition,no motion activity returned for duration,%{public}.1lf,to,%{public}.1lf", v19, 22, *(_OWORD *)v19, *(_QWORD *)&v19[16]);
      goto LABEL_27;
    }
  }
  sub_10000939C(v3);
}

void sub_100021C7C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  void **v5;
  NSObject *v6;
  void *v7;
  const char *v8;
  uint8_t *v9;
  int v10;
  void **v11;
  uint8_t buf[16];
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (objc_msgSend(a2, "count"))
  {
    v4 = objc_msgSend(objc_msgSend(a2, "allObjects"), "objectAtIndexedSubscript:", arc4random_uniform((uint32_t)objc_msgSend(a2, "count")));
    if (v4)
    {
      sub_1015A2E04(buf, (char *)objc_msgSend(v4, "UTF8String"));
      v5 = (void **)(v3 + 2376);
      if (*(char *)(v3 + 2399) < 0)
        operator delete(*v5);
      *(_OWORD *)v5 = *(_OWORD *)buf;
      *(_QWORD *)(v3 + 2392) = v13;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v7 = (void *)(v3 + 2376);
        if (*(char *)(v3 + 2399) < 0)
          v7 = *v5;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "#gnssawd Selected LocationClientKey ,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        if (*(char *)(v3 + 2399) < 0)
          v5 = (void **)*v5;
        v10 = 136446210;
        v11 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gnssawd Selected LocationClientKey ,%{public}s", &v10, 12);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::onSessionStart()_block_invoke", "%s\n", v8);
        if (v9 != buf)
          free(v9);
      }
    }
  }
}

void sub_100021EB0(uint64_t a1)
{
  void *v2;
  NSObject *v3;
  double v4;
  NSObject *v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  double v17;
  uint8_t *v18;
  uint8_t *v19;
  NSObject *v20;
  int v21;
  const char *v22;
  uint8_t *v23;
  int v24;
  double v25;
  uint8_t *v26;
  uint64_t v27;
  _DWORD v28[4];
  uint8_t buf[4];
  int v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  double v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;

  v2 = *(void **)(a1 + 96);
  if (v2)
  {
    objc_msgSend(v2, "setNextFireDelay:", 1.79769313e308);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,periodic maintenance timer,off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v28[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,periodic maintenance timer,off", v28, 2);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
  }
  if (!*(_DWORD *)(a1 + 944))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,LS off", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    LOWORD(v28[0]) = 0;
    LODWORD(v27) = 2;
    v17 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,LS off", v28, v27);
    v19 = v18;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n", v17);
LABEL_36:
    if (v19 != buf)
      free(v19);
    return;
  }
  if (*(_DWORD *)(a1 + 1140) == 1)
  {
    v4 = sub_1001FC7BC(a1 + 120, a1 + 280);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *(_DWORD *)(a1 + 1140);
      v7 = *(_DWORD *)(a1 + 216);
      v8 = *(_QWORD *)(a1 + 124);
      v9 = *(_QWORD *)(a1 + 132);
      v10 = *(_QWORD *)(a1 + 148);
      v11 = *(_QWORD *)(a1 + 140);
      v12 = *(_QWORD *)(a1 + 156);
      v13 = *(_QWORD *)(a1 + 952);
      v14 = *(_QWORD *)(a1 + 968);
      *(_DWORD *)buf = 68291587;
      v30 = 0;
      v31 = 2082;
      v32 = "";
      v33 = 1026;
      v34 = v6;
      v35 = 1026;
      v36 = v7;
      v37 = 2049;
      v38 = v8;
      v39 = 2049;
      v40 = v9;
      v41 = 2050;
      v42 = v10;
      v43 = 2050;
      v44 = v4;
      v45 = 2050;
      v46 = v11;
      v47 = 2050;
      v48 = v12;
      v49 = 2050;
      v50 = v13;
      v51 = 2050;
      v52 = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger\", \"state\":%{public}d, \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"age\":\"%{public}.1f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"driveDuration\":\"%{public}.1f\", \"unknownDriveDuration\":\"%{public}.1f\"}", buf, 0x6Eu);
    }
    sub_100031C94(a1);
    sub_100187B9C(a1);
    *(_DWORD *)(a1 + 1140) = 2;
    v15 = *(void **)(a1 + 104);
    if (v15)
      objc_msgSend(v15, "setNextFireDelay:", 2.0);
    return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B9A18);
  v20 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
  {
    v21 = *(_DWORD *)(a1 + 1140);
    *(_DWORD *)buf = 67240192;
    v30 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,invalid state,%{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v24 = *(_DWORD *)(a1 + 1140);
    v28[0] = 67240192;
    v28[1] = v24;
    LODWORD(v27) = 8;
    v25 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssRefPosMaintenance,onPeriodicMaintenanceTrigger,invalid state,%{public}d", v28, v27);
    v19 = v26;
    sub_100512490("Generic", 1, 0, 0, "void CLGnssRefPosMaintenance::onPeriodicMaintenanceTrigger()", "%s\n", v25);
    goto LABEL_36;
  }
}

id sub_100022408(uint64_t a1, uint64_t a2)
{
  id v3;

  v3 = +[NSMutableDictionary dictionary](NSMutableDictionary, "dictionary");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 44)), CFSTR("GyroMagnitude"));
  objc_msgSend(v3, "setObject:forKeyedSubscript:", +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(unsigned int *)(a2 + 48)), CFSTR("ActiveMins"));
  return v3;
}

uint64_t sub_100022484()
{
  uint64_t result;

  sub_100197040();
  result = sub_1001CE630();
  if ((_DWORD)result)
  {
    sub_100197040();
    return sub_100195F08() ^ 1;
  }
  return result;
}

void sub_1000224AC(int *a1)
{
  int v2;
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  NSObject *v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  char *v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  int v34;
  void *__p;
  _BYTE *v36;
  char *v37;
  int v38;
  int v39;
  __int16 v40;
  int v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  uint8_t buf[4];
  int v47;
  __int16 v48;
  int v49;
  __int16 v50;
  int v51;
  __int16 v52;
  int v53;

  v2 = a1[15];
  __p = 0;
  v36 = 0;
  v37 = 0;
  if (sub_100195F08())
  {
    if (*((_BYTE *)a1 + 57))
    {
      v3 = sub_100260634((uint64_t)&v37, 1uLL);
      v5 = (char *)&v3[v4];
      *v3 = 4;
      v6 = v3 + 1;
    }
    else
    {
      if (!*((_BYTE *)a1 + 58))
        goto LABEL_10;
      v3 = sub_100260634((uint64_t)&v37, 1uLL);
      v5 = (char *)&v3[v8];
      *v3 = 5;
      v6 = v3 + 1;
    }
    __p = v3;
    v37 = v5;
    v2 = 0;
    v36 = v6;
LABEL_10:
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v10 = *((unsigned __int8 *)a1 + 57);
      v11 = *((unsigned __int8 *)a1 + 58);
      v12 = *a1;
      *(_DWORD *)buf = 67240960;
      v47 = v10;
      v48 = 1026;
      v49 = v11;
      v50 = 1026;
      v51 = v12;
      v52 = 1026;
      v53 = v2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "L5ContextMinorPower,OnlyRhythmicGNSS,%{public}d,LongDurationHKWorkout,%{public}d,L5EnableCur,%{public}d,L5EnableReq,%{public}d", buf, 0x1Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102184B58);
      v13 = *((unsigned __int8 *)a1 + 57);
      v14 = *((unsigned __int8 *)a1 + 58);
      v15 = *a1;
      v38 = 67240960;
      v39 = v13;
      v40 = 1026;
      v41 = v14;
      v42 = 1026;
      v43 = v15;
      v44 = 1026;
      v45 = v2;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "L5ContextMinorPower,OnlyRhythmicGNSS,%{public}d,LongDurationHKWorkout,%{public}d,L5EnableCur,%{public}d,L5EnableReq,%{public}d", &v38, 26);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::tickL5EnablementForPlatformsWithMinorPowerImpact()", "%s\n", v16);
LABEL_58:
      if (v16 != (char *)buf)
        free(v16);
      goto LABEL_49;
    }
    goto LABEL_49;
  }
  if (*((_BYTE *)a1 + 48) && !*((_BYTE *)a1 + 55))
    v7 = sub_100762C38();
  else
    v7 = 0;
  if (*((_BYTE *)a1 + 53))
  {
    v17 = sub_100762AD8();
    v18 = v17;
    if ((v7 & 1) == 0)
    {
      if (v17)
      {
        v25 = (v36 - (_BYTE *)__p) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          sub_100259694();
        v27 = v37 - (_BYTE *)__p;
        if ((v37 - (_BYTE *)__p) >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v29 = (char *)sub_100260634((uint64_t)&v37, v28);
        else
          v29 = 0;
        v30 = &v29[4 * v25];
        *(_DWORD *)v30 = 3;
        __p = v30;
        v37 = &v29[4 * v28];
        v2 = 0;
        v36 = v30 + 4;
        v18 = 1;
      }
      goto LABEL_44;
    }
  }
  else
  {
    v18 = 0;
    if (!v7)
      goto LABEL_44;
  }
  v19 = (v36 - (_BYTE *)__p) >> 2;
  v20 = v19 + 1;
  if ((unint64_t)(v19 + 1) >> 62)
    sub_100259694();
  v21 = v37 - (_BYTE *)__p;
  if ((v37 - (_BYTE *)__p) >> 1 > v20)
    v20 = v21 >> 1;
  if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
    v22 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v22 = v20;
  if (v22)
    v23 = (char *)sub_100260634((uint64_t)&v37, v22);
  else
    v23 = 0;
  v24 = &v23[4 * v19];
  *(_DWORD *)v24 = 1;
  __p = v24;
  v37 = &v23[4 * v22];
  v2 = 0;
  v36 = v24 + 4;
LABEL_44:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102184B58);
  v31 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v32 = *a1;
    *(_DWORD *)buf = 67240960;
    v47 = v7;
    v48 = 1026;
    v49 = v18;
    v50 = 1026;
    v51 = v32;
    v52 = 1026;
    v53 = v2;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "L5ContextMinorPower,ContentionWiFi2p4,%{public}d,ContentionVoiceCall,%{public}d,L5EnableCur,%{public}d,L5EnableReq,%{public}d", buf, 0x1Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102184B58);
    v34 = *a1;
    v38 = 67240960;
    v39 = v7;
    v40 = 1026;
    v41 = v18;
    v42 = 1026;
    v43 = v34;
    v44 = 1026;
    v45 = v2;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "L5ContextMinorPower,ContentionWiFi2p4,%{public}d,ContentionVoiceCall,%{public}d,L5EnableCur,%{public}d,L5EnableReq,%{public}d", &v38, 26);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssL5Context::tickL5EnablementForPlatformsWithMinorPowerImpact()", "%s\n", v16);
    goto LABEL_58;
  }
LABEL_49:
  if (v2 != *a1)
  {
    *a1 = v2;
    v33 = *((_QWORD *)a1 + 4);
    if (v33)
    {
      *(_DWORD *)buf = v2;
      (*(void (**)(uint64_t, uint8_t *, void **))(*(_QWORD *)v33 + 48))(v33, buf, &__p);
    }
  }
  if (__p)
  {
    v36 = __p;
    operator delete(__p);
  }
}

void sub_100022AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100022B1C(uint64_t a1)
{
  unsigned __int8 v2;
  size_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  void *__p[2];
  unsigned __int8 v20;
  void *__s1;
  size_t __n;
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(&__s1);
  sub_1015A2E04(__p, "RavenControllerDisabledState");
  v2 = v23;
  if ((v23 & 0x80u) == 0)
    v3 = v23;
  else
    v3 = __n;
  v4 = v20;
  v5 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v20 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v20 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((char)v23 < 0)
  {
    v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v23)
  {
    v7 = v23 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v6;
      v6 = (void **)((char *)v6 + 1);
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v15 = 1;
  if (((char)v20 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(__s1);
    if (v15)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v23 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v15)
    return;
LABEL_29:
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v16 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Raven: received external disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: received external disable command", __p, 2);
    v18 = (void **)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DisableRaven()", "%s\n", v17);
    if (v18 != &__s1)
      free(v18);
  }
  sub_100059DD8(a1, a1 + 4688);
}

void sub_100022DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100022DC8(uint64_t a1)
{
  unsigned __int8 v2;
  size_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  BOOL v15;
  NSObject *v16;
  const char *v17;
  void **v18;
  void *__p[2];
  unsigned __int8 v20;
  void *__s1;
  size_t __n;
  unsigned __int8 v23;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(&__s1);
  sub_1015A2E04(__p, "PedometerAssistanceDisabledState");
  v2 = v23;
  if ((v23 & 0x80u) == 0)
    v3 = v23;
  else
    v3 = __n;
  v4 = v20;
  v5 = (char)v20;
  if ((v20 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != v4)
  {
    v15 = 0;
    if (((char)v20 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v20 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((char)v23 < 0)
  {
    v15 = memcmp(__s1, v6, __n) == 0;
    goto LABEL_22;
  }
  if (v23)
  {
    v7 = v23 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v12 = *(unsigned __int8 *)v6;
      v6 = (void **)((char *)v6 + 1);
      v11 = v12;
      v14 = v7-- != 0;
      v15 = v9 == v11;
    }
    while (v9 == v11 && v14);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v15 = 1;
  if (((char)v20 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(__s1);
    if (v15)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v23 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v15)
    return;
LABEL_29:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received external feature disable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: received external feature disable command", __p, 2);
    v18 = (void **)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::DisablePedometerAssistance()", "%s\n", v17);
    if (v18 != &__s1)
      free(v18);
  }
  sub_10021FA34(a1, a1 + 64);
}

void sub_10002304C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100023070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v8;

  sub_1002433B8(a1);
  *(_DWORD *)(v2 + 40) = 0xFFFF;
  *(_QWORD *)(v2 + 52) = 0;
  *(_QWORD *)(v2 + 44) = 0;
  *(_OWORD *)(v2 + 60) = xmmword_101BAFC90;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v2 + 76) = _Q1;
  *(_OWORD *)(v2 + 92) = _Q1;
  *(_OWORD *)(v2 + 108) = _Q1;
  *(_DWORD *)(v2 + 124) = 0;
  *(_QWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  *(_QWORD *)(v2 + 128) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 152) = 0;
  *(_QWORD *)(v2 + 156) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 164) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 176) = 0;
  *(_QWORD *)(v2 + 184) = 0;
  *(_QWORD *)(v2 + 168) = 0;
  *(_BYTE *)(v2 + 192) = 0;
  *(_DWORD *)(v2 + 196) = 0xFFFF;
  *(_QWORD *)(v2 + 284) = 0xBFF0000000000000;
  v8 = v2 + 284;
  *(_QWORD *)(v2 + 208) = 0;
  *(_QWORD *)(v2 + 200) = 0;
  *(_OWORD *)(v2 + 216) = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 232) = _Q1;
  *(_OWORD *)(v2 + 248) = _Q1;
  *(_QWORD *)(v2 + 264) = 0xBFF0000000000000;
  *(_QWORD *)(v2 + 272) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 280) = 0;
  *(_DWORD *)(v2 + 308) = 0;
  *(_QWORD *)(v2 + 292) = 0;
  *(_QWORD *)(v2 + 300) = 0;
  *(_QWORD *)(v2 + 312) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 320) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 332) = 0;
  *(_QWORD *)(v2 + 340) = 0;
  *(_QWORD *)(v2 + 324) = 0;
  *(_BYTE *)(v2 + 348) = 0;
  *(_DWORD *)(v2 + 352) = 0xFFFF;
  *(_QWORD *)(v2 + 356) = 0;
  *(_QWORD *)(v2 + 364) = 0;
  *(_OWORD *)(v2 + 372) = xmmword_101BAFC90;
  *(_OWORD *)(v2 + 388) = _Q1;
  *(_OWORD *)(v2 + 404) = _Q1;
  *(_OWORD *)(v2 + 420) = _Q1;
  *(_DWORD *)(v2 + 436) = 0;
  *(_QWORD *)(v2 + 440) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 464) = 0;
  *(_QWORD *)(v2 + 448) = 0;
  *(_QWORD *)(v2 + 456) = 0;
  *(_QWORD *)(v2 + 468) = 0xBFF0000000000000;
  *(_DWORD *)(v2 + 476) = 0x7FFFFFFF;
  *(_QWORD *)(v2 + 488) = 0;
  *(_QWORD *)(v2 + 480) = 0;
  *(_QWORD *)(v2 + 496) = 0;
  *(_BYTE *)(v2 + 504) = 0;
  *(_WORD *)(v2 + 508) = 0;
  sub_1015A2E04((_QWORD *)(v2 + 512), "N/A");
  sub_1015A2E04((_QWORD *)(v8 + 252), "not_set");
  sub_1015A2E04((_QWORD *)(a1 + 560), "not_set");
  sub_1015A2E04((_QWORD *)(a1 + 584), "not_set");
  return a1;
}

void sub_1000231D8(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;
  void **v4;

  if (v1[583] < 0)
    operator delete(*v4);
  if (v1[559] < 0)
    operator delete(*v3);
  if (v1[535] < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

id sub_100023224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id *v4;
  id v5;
  _QWORD v7[6];

  v4 = *(id **)(a1 + 32);
  v5 = objc_msgSend(*v4, "silo");
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020E128;
  v7[3] = &unk_102131360;
  v7[4] = a3;
  v7[5] = v4;
  return objc_msgSend(v5, "async:", v7);
}

void sub_10002328C(_QWORD *a1, _OWORD *a2)
{
  void *v3;
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  _QWORD v10[6];
  std::__shared_weak_count *v11;
  _OWORD v12[2];
  _OWORD v13[2];

  v13[0] = *a2;
  *(_OWORD *)((char *)v13 + 12) = *(_OWORD *)((char *)a2 + 12);
  v5 = a1 + 4;
  v3 = (void *)a1[4];
  v4 = v5[1];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  v10[2] = sub_10006769C;
  v10[3] = &unk_102174C90;
  v7 = a1[6];
  v6 = (std::__shared_weak_count *)a1[7];
  v10[4] = v4;
  v10[5] = v7;
  v11 = v6;
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v12[0] = v13[0];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)v13 + 12);
  objc_msgSend(v3, "async:", v10);
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
}

void sub_100023338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16)
    std::__shared_weak_count::__release_weak(a16);
  _Unwind_Resume(exception_object);
}

void sub_100023350(uint64_t a1, _QWORD *a2, double a3)
{
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned __int8 *v8;
  _QWORD *i;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  NSString *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void **v32;

  sub_1015A2E04(__p, "kCLConnectionMessageSignificantLocationChange");
  sub_101002F24((uint64_t)__p, a2, &v28);
  v25 = 8;
  v26 = v28;
  v27 = v29;
  if (v29)
  {
    p_shared_owners = (unint64_t *)&v29->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v32 = __p;
  v8 = sub_100212538(a1 + 200, (unsigned __int8 *)__p, (uint64_t)&unk_101B9EB60, (__int128 **)&v32);
  *((_QWORD *)v8 + 5) = v25;
  sub_100349198((_QWORD *)v8 + 6, &v26);
  for (i = *(_QWORD **)(a1 + 176); i; i = (_QWORD *)*i)
  {
    v10 = i[2];
    v23 = v28;
    v24 = v29;
    if (v29)
    {
      v11 = (unint64_t *)&v29->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 16))(v10, &v23, 8);
    v13 = v24;
    if (v24)
    {
      v14 = (unint64_t *)&v24->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  if (a3 >= 0.0)
  {
    sub_101002E5C(a1, a3);
  }
  else
  {
    v16 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "kCLConnectionMessageSignificantLocationChange");
    objc_msgSend(objc_msgSend(*(id *)(a1 + 240), "objectForKeyedSubscript:", v16), "invalidate");
    objc_msgSend(*(id *)(a1 + 240), "setObject:forKeyedSubscript:", 0, v16);
  }
  v17 = v27;
  if (v27)
  {
    v18 = (unint64_t *)&v27->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v29;
  if (v29)
  {
    v21 = (unint64_t *)&v29->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v31 < 0)
    operator delete(__p[0]);
}

void sub_100023568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000235AC(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  NSObject *v7;
  const char *v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  _QWORD *v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  NSObject *v19;
  const char *v20;
  _QWORD *v21;
  uint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  char *v37;
  uint64_t v38;
  const char *v39;
  const char *v40;
  char *v41;
  uint64_t v42;
  _BYTE v43[8];
  void *__p;
  char v45;
  char v46;
  _BYTE v47[8];
  void *v48;
  char v49;
  char v50;
  _BYTE v51[8];
  void *v52;
  char v53;
  char v54;
  uint64_t v55[6];
  __int128 v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  void **v60;
  _BYTE v61[808];
  __int128 v62;
  uint64_t v63;
  char v64;
  char v65;
  _BYTE v66[22];
  _BYTE buf[24];
  int v68;
  char v69;
  void *v70;
  char v71;
  char v72;
  char v73;
  int v74[202];

  v74[0] = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_10214CDD0);
  v7 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    v8 = sub_100CF2150(*a3);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "@WifiLogic, entry, wifiNotify, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10214CDD0);
    v28 = qword_1022A0058;
    v29 = sub_100CF2150(*a3);
    LODWORD(v62) = 136446210;
    *(_QWORD *)((char *)&v62 + 4) = v29;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v28, 2, "@WifiLogic, entry, wifiNotify, %{public}s", &v62, 12);
    v31 = (char *)v30;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  switch(*a3)
  {
    case 1:
      *(_DWORD *)buf = *(_BYTE *)a4 == 0;
      sub_1006B1C88(v74, (int *)buf);
      goto LABEL_71;
    case 2:
      sub_1006B1920(v74);
      goto LABEL_71;
    case 3:
      if (*(_BYTE *)(a4 + 96) && *(int *)(a4 + 48) >= 1)
      {
        sub_1005C7F88((uint64_t)&v62, a4 + 8);
      }
      else
      {
        LOBYTE(v62) = 0;
        v65 = 0;
      }
      v21 = (_QWORD *)(a4 + 112);
      v22 = *(_QWORD *)(a4 + 104);
      sub_100212360((uint64_t)v55, *(_QWORD **)(a4 + 112), *(_QWORD **)(a4 + 120));
      v55[5] = v22;
      v23 = *(_BYTE *)(a4 + 1);
      sub_10031F08C(v51, (uint64_t)&v62);
      sub_1002238B4((uint64_t)buf, v55, v23, (uint64_t)v51);
      sub_10021C884(v74, (uint64_t *)buf);
      if (v73 && v71 < 0)
        operator delete(v70);
      sub_100127554((uint64_t)buf);
      if (v54 && v53 < 0)
        operator delete(v52);
      sub_100127554((uint64_t)v55);
      sub_100933344(buf);
      sub_100934170(*(uint64_t *)buf, v21);
      v24 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v25 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v65 && v64 < 0)
        operator delete(*((void **)&v62 + 1));
      goto LABEL_71;
    case 4:
      sub_1006B1DF4(v74);
      goto LABEL_71;
    case 5:
      buf[0] = *(_BYTE *)(a4 + 1);
      sub_1006B1A1C((uint64_t)v74, buf);
      goto LABEL_71;
    case 6:
      sub_1006AEFB0(buf);
      sub_1006B1EF0(v74, (uint64_t)buf);
      if (v72 && v69 < 0)
        operator delete(*(void **)&buf[8]);
      if (!*(_BYTE *)(a4 + 96) || *(int *)(a4 + 48) < 1)
        goto LABEL_32;
      sub_1005C7F88((uint64_t)v47, a4 + 8);
      sub_10031F08C(buf, (uint64_t)v47);
      sub_1006B1EF0(v74, (uint64_t)buf);
      if (v72 && v69 < 0)
        operator delete(*(void **)&buf[8]);
      if (!v50 || (v49 & 0x80000000) == 0)
        goto LABEL_32;
      v9 = v48;
      goto LABEL_31;
    case 7:
      sub_1006AEFB0(buf);
      sub_1006B2050(v74, (uint64_t)buf);
      if (v72 && v69 < 0)
        operator delete(*(void **)&buf[8]);
      if (!*(_BYTE *)(a4 + 96) || *(int *)(a4 + 48) < 1)
        goto LABEL_32;
      sub_1005C7F88((uint64_t)v43, a4 + 8);
      sub_10031F08C(buf, (uint64_t)v43);
      sub_1006B2050(v74, (uint64_t)buf);
      if (v72 && v69 < 0)
        operator delete(*(void **)&buf[8]);
      if (!v46 || (v45 & 0x80000000) == 0)
        goto LABEL_32;
      v9 = __p;
LABEL_31:
      operator delete(v9);
LABEL_32:
      sub_1006AF024(a3, a4);
      goto LABEL_71;
    case 12:
      v62 = 0uLL;
      v63 = 0;
      sub_10055A7B8(&v62, *(_QWORD *)(a4 + 112), *(_QWORD *)(a4 + 120), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(_QWORD *)(a4 + 120) - *(_QWORD *)(a4 + 112)) >> 3));
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214CDD0);
      v10 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v11 = *((_QWORD *)&v62 + 1);
        v12 = v62;
        v13 = sub_100CF2174(*(_DWORD *)(a4 + 140));
        *(_DWORD *)buf = 134218242;
        *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v11 - v12) >> 3);
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "@Wsb, NotificationScanCache, aps, %zu, source, %{public}s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v32 = qword_1022A0058;
        v33 = *((_QWORD *)&v62 + 1);
        v34 = v62;
        v35 = sub_100CF2174(*(_DWORD *)(a4 + 140));
        *(_DWORD *)v66 = 134218242;
        *(_QWORD *)&v66[4] = 0x2E8BA2E8BA2E8BA3 * ((v33 - v34) >> 3);
        *(_WORD *)&v66[12] = 2082;
        *(_QWORD *)&v66[14] = v35;
        LODWORD(v42) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v32, 2, "@Wsb, NotificationScanCache, aps, %zu, source, %{public}s", v66, v42);
        v37 = (char *)v36;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v36);
        if (v37 != buf)
          free(v37);
      }
      sub_100933344(v66);
      v14 = *(_QWORD **)v66;
      v59 = 0;
      v58 = 0uLL;
      sub_10055A7B8(&v58, v62, *((uint64_t *)&v62 + 1), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v62 + 1) - v62) >> 3));
      v15 = *(_DWORD *)(a4 + 140);
      *(_OWORD *)buf = v58;
      *(_QWORD *)&buf[16] = v59;
      v59 = 0;
      v58 = 0uLL;
      v68 = v15;
      sub_100933D9C(v14, (uint64_t)buf);
      v60 = (void **)buf;
      sub_100279AA4(&v60);
      v60 = (void **)&v58;
      sub_100279AA4(&v60);
      v16 = *(std::__shared_weak_count **)&v66[8];
      if (*(_QWORD *)&v66[8])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v66[8] + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if (sub_101067CFC(*(_DWORD *)(a4 + 140)))
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214CDD0);
        v19 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
        {
          v20 = sub_100CF2174(*(_DWORD *)(a4 + 140));
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "@Wsb, ignoring NotificationScanCache source %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_10214CDD0);
          v38 = qword_1022A0058;
          v39 = sub_100CF2174(*(_DWORD *)(a4 + 140));
          *(_DWORD *)v66 = 136446210;
          *(_QWORD *)&v66[4] = v39;
          LODWORD(v42) = 12;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v38, 2, "@Wsb, ignoring NotificationScanCache source %{public}s", v66, v42);
          v41 = (char *)v40;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationProvider::onWifiNotification(int, const CLWifiService_Type::Notification &, const CLWifiService_Type::NotificationData &)", "%s\n", v40);
          if (v41 != buf)
            free(v41);
        }
        *(_QWORD *)buf = &v62;
        sub_100279AA4((void ***)buf);
      }
      else
      {
        v57 = 0;
        v56 = 0uLL;
        sub_10055A7B8(&v56, v62, *((uint64_t *)&v62 + 1), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*((_QWORD *)&v62 + 1) - v62) >> 3));
        v27 = *(_DWORD *)(a4 + 140);
        *(_OWORD *)buf = v56;
        *(_QWORD *)&buf[16] = v57;
        v57 = 0;
        v56 = 0uLL;
        v68 = v27;
        sub_1006B1B38((uint64_t)v74, (uint64_t)buf);
        *(_QWORD *)v66 = buf;
        sub_100279AA4((void ***)v66);
        *(_QWORD *)v66 = &v56;
        sub_100279AA4((void ***)v66);
        *(_QWORD *)buf = &v62;
        sub_100279AA4((void ***)buf);
LABEL_71:
        sub_10021C5C0((uint64_t)v61, (uint64_t)v74);
        sub_1001312E8(a1, (uint64_t)v61);
        sub_100126D5C((uint64_t)v61);
      }
LABEL_72:
      sub_100126D5C((uint64_t)v74);
      return;
    default:
      goto LABEL_72;
  }
}

void sub_100023F40(_Unwind_Exception *a1)
{
  STACK[0x550] = (unint64_t)&STACK[0x4D0];
  sub_100279AA4((void ***)&STACK[0x550]);
  sub_100126D5C((uint64_t)&STACK[0xBB0]);
  _Unwind_Resume(a1);
}

void sub_100024134(uint64_t a1, uint64_t a2)
{
  double v4;
  int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  const char *v27;
  uint8_t *v28;
  int v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  int v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  int v44;
  __int16 v45;
  int v46;
  __int16 v47;
  int v48;
  uint8_t buf[4];
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  int v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  int v64;
  __int16 v65;
  int v66;
  __int16 v67;
  int v68;

  if (sub_10011CE88(*(double *)(a2 + 1192), *(double *)(a2 + 1200))
    && !sub_10011CE64(*(double *)(a2 + 1192), *(double *)(a2 + 1200))
    && sub_10011CE88(*(double *)(a2 + 1176), *(double *)(a2 + 1184))
    && !sub_10011CE64(*(double *)(a2 + 1176), *(double *)(a2 + 1184)))
  {
    *(double *)(a1 + 1128) = sub_100124100(*(double *)(a2 + 1192), *(double *)(a2 + 1200), *(double *)(a2 + 1176), *(double *)(a2 + 1184));
  }
  *(_DWORD *)(a1 + 1108) = *(_DWORD *)(a2 + 1128);
  *(_DWORD *)(a1 + 1116) = *(_DWORD *)(a2 + 1144);
  v4 = *(double *)(a2 + 1136);
  if ((*(_QWORD *)&v4 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || v4 < 0.0)
  {
    *(_DWORD *)(a1 + 1112) = 0;
  }
  else
  {
    if (v4 >= 50.0)
    {
      if (v4 >= 100.0)
      {
        if (v4 >= 200.0)
        {
          if (v4 >= 400.0)
          {
            if (v4 >= 1000.0)
              v5 = 6;
            else
              v5 = 5;
          }
          else
          {
            v5 = 4;
          }
        }
        else
        {
          v5 = 3;
        }
      }
      else
      {
        v5 = 2;
      }
    }
    else
    {
      v5 = 1;
    }
    *(_DWORD *)(a1 + 1112) = v5;
  }
  *(_BYTE *)(a1 + 1120) = *(_BYTE *)(a2 + 1148);
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a2 + 1192);
      v8 = *(_QWORD *)(a2 + 1200);
      v9 = *(_QWORD *)(a2 + 1136);
      v10 = *(_DWORD *)(a1 + 1112);
      v11 = *(_QWORD *)(a2 + 1176);
      v12 = *(_QWORD *)(a2 + 1184);
      v13 = *(_QWORD *)(a1 + 1128);
      v14 = *(_DWORD *)(a2 + 1128);
      v15 = *(_DWORD *)(a2 + 1144);
      v16 = *(unsigned __int8 *)(a2 + 1148);
      *(_DWORD *)buf = 134285825;
      v50 = v7;
      v51 = 2049;
      v52 = v8;
      v53 = 2049;
      v54 = v9;
      v55 = 1025;
      v56 = v10;
      v57 = 2049;
      v58 = v11;
      v59 = 2049;
      v60 = v12;
      v61 = 2049;
      v62 = v13;
      v63 = 1025;
      v64 = v14;
      v65 = 1025;
      v66 = v15;
      v67 = 1025;
      v68 = v16;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssca,preparePositionAssistAnalytics,PositionAssistLat,%{private}.7f,PositionAssistLon,%{private}.7f,PositionAssistHorzAccM,%{private}.2f,PositionAssistHorzAcc,%{private}d, FirstFixLat,%{private}.7f,FirstFixLon,%{private}.7f,DeltaFirstFixAndPositionAssistMeters,%{private}f,HorzRel,%{private}d,PosAssistType,%{private}d,WiFiPositioningAvailable,%{private}d", buf, 0x56u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v17 = *(_QWORD *)(a2 + 1192);
      v18 = *(_QWORD *)(a2 + 1200);
      v19 = *(_QWORD *)(a2 + 1136);
      v20 = *(_DWORD *)(a1 + 1112);
      v21 = *(_QWORD *)(a2 + 1176);
      v22 = *(_QWORD *)(a2 + 1184);
      v23 = *(_QWORD *)(a1 + 1128);
      v24 = *(_DWORD *)(a2 + 1128);
      v25 = *(_DWORD *)(a2 + 1144);
      v26 = *(unsigned __int8 *)(a2 + 1148);
      v29 = 134285825;
      v30 = v17;
      v31 = 2049;
      v32 = v18;
      v33 = 2049;
      v34 = v19;
      v35 = 1025;
      v36 = v20;
      v37 = 2049;
      v38 = v21;
      v39 = 2049;
      v40 = v22;
      v41 = 2049;
      v42 = v23;
      v43 = 1025;
      v44 = v24;
      v45 = 1025;
      v46 = v25;
      v47 = 1025;
      v48 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,preparePositionAssistAnalytics,PositionAssistLat,%{private}.7f,PositionAssistLon,%{private}.7f,PositionAssistHorzAccM,%{private}.2f,PositionAssistHorzAcc,%{private}d, FirstFixLat,%{private}.7f,FirstFixLon,%{private}.7f,DeltaFirstFixAndPositionAssistMeters,%{private}f,HorzRel,%{private}d,PosAssistType,%{private}d,WiFiPositioningAvailable,%{private}d", &v29, 86);
      v28 = (uint8_t *)v27;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::preparePositionAssistAnalytics(const GNSS::GnssSessionData &)", "%s\n", v27);
      if (v28 != buf)
        free(v28);
    }
  }
}

id sub_1000244F4(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3AF3DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3AF3DLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_102199F88);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLPressureBias_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_100024964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v15 - 40) = v14;
  sub_100279AA4((void ***)(v15 - 40));
  *(_QWORD *)(v15 - 40) = &a14;
  sub_100279AA4((void ***)(v15 - 40));
  _Unwind_Resume(a1);
}

void sub_100024998(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD v9[7];
  char v10;

  v8 = sub_100127B9C();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1000A37B8;
  v9[3] = &unk_102179300;
  v9[5] = a1;
  v9[6] = a2;
  v10 = a3;
  v9[4] = a4;
  sub_1000A50A8(v8, (uint64_t)v9);
}

uint64_t sub_100024A14(uint64_t a1, uint64_t a2, int a3)
{
  int v4;

  v4 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 112))(a1, a2, &v4);
}

BOOL sub_100024A40(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021A5F48);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021A5F48);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLNatalimetryNotifier_Type::Notification, CLNatalimetryNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLNatalimetryNotifier_Type::Notification, NotificationData_T = CLNatalimetryNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100024DC8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021495C8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021495C8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100025150(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102147D30);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102147D30);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionState_Type::Notification, CLMotionState_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionState_Type::Notification, NotificationData_T = CLMotionState_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

_QWORD *sub_1000254D8(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t v12;

  v4 = sub_100129380((uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(_QWORD **)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = (_QWORD *)*v10;
  if (*v10)
  {
    do
    {
      v12 = v11[1];
      if (v6 == v12)
      {
        if (sub_10009483C(v11 + 2, a2))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v12 >= *(_QWORD *)&v5)
            v12 %= *(_QWORD *)&v5;
        }
        else
        {
          v12 &= *(_QWORD *)&v5 - 1;
        }
        if (v12 != v9)
          return 0;
      }
      v11 = (_QWORD *)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1000255D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100025624(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void sub_100025624(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100261F44((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void sub_100025660()
{
  operator new();
}

void sub_100025768(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_10213BB68;
  sub_1000257AC((uint64_t)a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_1000257AC(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if ((_UNKNOWN *)v1 != &wireless_diagnostics::google::protobuf::internal::kEmptyString && v1 != 0)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_10002580C(id *a1, void *a2)
{
  id v4;

  v4 = a2;

  a1[17] = a2;
  return (*((uint64_t (**)(id *))*a1 + 5))(a1);
}

void sub_100025848(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_102151B70;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

uint64_t sub_100025878(__int128 *a1, uint64_t a2)
{
  CLProfilingIdentify("CLMotionState7::onMotionCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  return sub_10006BE4C(a2, a1);
}

uint64_t sub_1000258B8(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify("CLMotionStateMediator::onMotionCoprocessorData");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "silo"), "assertInside");
  return sub_1000CE888(a2, a1, 0);
}

void sub_1000258FC(uint64_t a1, _QWORD *a2)
{
  compression_stream *v3;
  mach_header_64 *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  compression_status v12;
  compression_stream *v13;
  mach_header_64 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  BOOL v20;
  NSObject *v21;
  char *v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _BYTE *v41;
  _QWORD *v42;
  int v43;
  char v44;
  int v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  compression_status v54;
  uint8_t buf[4];
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  compression_status v64;

  if (*(_BYTE *)(a1 + 72))
  {
    v3 = (compression_stream *)(a1 + 32);
    v41 = a2 + 4;
    v42 = a2;
    v4 = (mach_header_64 *)&_mh_execute_header;
    v43 = 134217984;
    while (1)
    {
      v44 = 0;
      *(_QWORD *)(a1 + 48) = &v44;
      *(_QWORD *)(a1 + 56) = 0;
      v5 = *(_QWORD *)(a1 + 8);
      v6 = *(_QWORD *)(a1 + 16) - v5;
      *(_QWORD *)(a1 + 32) = v5;
      *(_QWORD *)(a1 + 40) = v6;
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v7 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 48);
        v9 = *(_QWORD *)(a1 + 56);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134218752;
        v56 = v8;
        v57 = 2048;
        v58 = v9;
        v59 = 2048;
        v60 = v10;
        v61 = 2048;
        v62 = v11;
        _os_log_impl(v4, v7, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,before,%p,%zu,%p,%zu", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v29 = *(_QWORD *)(a1 + 48);
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(a1 + 32);
        v32 = *(_QWORD *)(a1 + 40);
        v45 = 134218752;
        v46 = v29;
        v47 = 2048;
        v48 = v30;
        v49 = 2048;
        v50 = v31;
        v51 = 2048;
        v52 = v32;
        LODWORD(v40) = 42;
        v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, v4, qword_1022A0168, 2, "ProtobufCompressor,flush,before,%p,%zu,%p,%zu", &v45, v40, v41, (size_t)v42);
        sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v33);
        if (v33 != (char *)buf)
          free(v33);
      }
      v12 = compression_stream_process(v3, 1);
      if (v12 > COMPRESSION_STATUS_END)
        break;
      v13 = v3;
      v14 = v4;
      v16 = *(_QWORD *)(a1 + 8);
      v15 = *(_QWORD *)(a1 + 16);
      v17 = *(_QWORD *)(a1 + 40);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v18 = v15 - v16;
      v19 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = v43;
        v56 = v18 - v17;
        _os_log_impl(v14, v19, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,flushed bytes,%zu", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v45 = v43;
        v46 = v18 - v17;
        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, v14, qword_1022A0168, 2, "ProtobufCompressor,flush,flushed bytes,%zu", (size_t)&v45);
        sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v39);
        if (v39 != (char *)buf)
          free(v39);
      }
      v20 = v18 == v17;
      v4 = v14;
      v3 = v13;
      if (v20)
        goto LABEL_29;
      if ((v41[*(_QWORD *)(*v42 - 24)] & 5) != 0)
      {
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v21 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(v4, v21, OS_LOG_TYPE_DEFAULT, "#Warning,ProtobufCompressor,flush,bad stream", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_29;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        LOWORD(v45) = 0;
        LODWORD(v40) = 2;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, v4, qword_1022A0168, 0, "#Warning,ProtobufCompressor,flush,bad stream", &v45, v40);
        sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v22);
        goto LABEL_52;
      }
      std::ostream::write();
LABEL_29:
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v24 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(_QWORD *)(a1 + 48);
        v26 = *(_QWORD *)(a1 + 56);
        v27 = *(_QWORD *)(a1 + 32);
        v28 = *(_QWORD *)(a1 + 40);
        *(_DWORD *)buf = 134219008;
        v56 = v25;
        v57 = 2048;
        v58 = v26;
        v59 = 2048;
        v60 = v27;
        v61 = 2048;
        v62 = v28;
        v63 = 1024;
        v64 = v12;
        _os_log_impl(v4, v24, OS_LOG_TYPE_DEBUG, "ProtobufCompressor,flush,after,%p,%zu,%p,%zu,status,%d", buf, 0x30u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v34 = *(_QWORD *)(a1 + 48);
        v35 = *(_QWORD *)(a1 + 56);
        v36 = *(_QWORD *)(a1 + 32);
        v37 = *(_QWORD *)(a1 + 40);
        v45 = 134219008;
        v46 = v34;
        v47 = 2048;
        v48 = v35;
        v49 = 2048;
        v50 = v36;
        v51 = 2048;
        v52 = v37;
        v53 = 1024;
        v54 = v12;
        LODWORD(v40) = 48;
        v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, v4, qword_1022A0168, 2, "ProtobufCompressor,flush,after,%p,%zu,%p,%zu,status,%d", &v45, v40, v41, (size_t)v42, v43);
        sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v38);
        if (v38 != (char *)buf)
          free(v38);
      }
      if (v12)
      {
        sub_10023240C(a1);
        return;
      }
    }
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v23 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(v4, v23, OS_LOG_TYPE_ERROR, "ProtobufCompressor,flush,failed to finalize stream", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_29;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    LOWORD(v45) = 0;
    LODWORD(v40) = 2;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, v4, qword_1022A0168, 16, "ProtobufCompressor,flush,failed to finalize stream", &v45, v40);
    sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::flush(std::ofstream &)", "%s\n", v22);
LABEL_52:
    if (v22 != (char *)buf)
      free(v22);
    goto LABEL_29;
  }
}

id sub_100026094(uint64_t a1)
{
  id result;
  NSObject *v3;
  const char *v4;
  uint8_t *v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  uint8_t *v10;
  const char *v11;
  uint8_t *v12;
  const char *v13;
  uint64_t v14;
  _WORD v15[8];
  uint8_t buf[8];
  char v17;

  result = objc_msgSend(*(id *)(a1 + 8), "state");
  switch((_DWORD)result)
  {
    case 0:
      return result;
    case 2:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v6 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "stopping immediately", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "stopping immediately", v15, 2);
      v5 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::requestStopProviderImmediately()", "%s\n", v13);
      break;
    case 1:
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "stop while stopping - likely debounce expired", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_17;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "stop while stopping - likely debounce expired", v15, 2);
      v5 = (uint8_t *)v4;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::requestStopProviderImmediately()", "%s\n", v4);
      break;
    default:
      goto LABEL_17;
  }
  if (v5 != buf)
    free(v5);
LABEL_17:
  objc_msgSend(*(id *)(a1 + 8), "setState:", 0);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, state, 0, request", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v15[0] = 0;
    LODWORD(v14) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxIndoor, state, 0, request", v15, v14);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::requestStopProviderImmediately()", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1000C4240())
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v8 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, state, 0, request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v15[0] = 0;
      LODWORD(v14) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi2, state, 0, request", v15, v14);
      v12 = (uint8_t *)v11;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::requestStopProviderImmediately()", "%s\n", v11);
      if (v12 != buf)
        free(v12);
    }
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24));
  sub_1015A2E04(buf, "PROVIDER shutting down");
  sub_1001CE674(a1, (uint64_t *)buf);
  if (v17 < 0)
    operator delete(*(void **)buf);
  return objc_msgSend(*(id *)(a1 + 8), "clearLocationGroups");
}

void sub_100026600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_100026624(_DWORD *a1)
{
  int v2;
  _BOOL8 v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _DWORD v13[2];
  __int16 v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  uint8_t buf[4];
  _BOOL4 v21;
  __int16 v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v2 = a1[152];
  v3 = v2 == 2 || v2 == 1 && ((int)a1[153] > 2 || (int)a1[154] >= 3);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214FF50);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v5 = a1[152];
    v6 = (int)a1[153];
    v7 = (int)a1[154];
    *(_DWORD *)buf = 67240960;
    v21 = v3;
    v22 = 1026;
    v23 = v5;
    v24 = 2050;
    v25 = v6;
    v26 = 2050;
    v27 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Nlp, isBroadConnection, %{public}d, reachability, %{public}d, dataAccessTech, %{public}ld, %{public}ld", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FF50);
    v9 = a1[152];
    v10 = (int)a1[153];
    v11 = (int)a1[154];
    v13[0] = 67240960;
    v13[1] = v3;
    v14 = 1026;
    v15 = v9;
    v16 = 2050;
    v17 = v10;
    v18 = 2050;
    v19 = v11;
    v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "Nlp, isBroadConnection, %{public}d, reachability, %{public}d, dataAccessTech, %{public}ld, %{public}ld", v13, 34);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLNetworkLocationProvider::isBroadConnection()", "%s\n", v12);
    if (v12 != (char *)buf)
      free(v12);
  }
  return v3;
}

uint64_t sub_100026860(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t result;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  void **v17;
  __int128 v18;
  uint64_t v19;
  uint8_t buf[16];
  uint64_t v21;
  __int128 __p;
  uint64_t v23;

  if (!a2)
  {
    sub_101937808();
    __break(1u);
LABEL_32:
    dispatch_once(&qword_1022A0020, &stru_102197858);
    goto LABEL_4;
  }
  v2 = a2;
  v3 = a1;
  v4 = (_BYTE *)sub_1001CDA64(a1, 0xAu);
  sub_100756E48(v2);
  if (!*v4)
    return 0;
  v5 = &qword_1022A0000;
  if (qword_1022A0020 != -1)
    goto LABEL_32;
LABEL_4:
  v6 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134217984;
    *(_QWORD *)&buf[4] = sub_100026CC8((uint64_t)(v4 + 184));
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Get manifest tile, %lu", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (v5[4] != -1)
      dispatch_once(&qword_1022A0020, &stru_102197858);
    v14 = qword_1022A0028;
    LODWORD(v18) = 134217984;
    *(_QWORD *)((char *)&v18 + 4) = sub_100026CC8((uint64_t)(v4 + 184));
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v14, 2, "Get manifest tile, %lu", &v18);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
  v7 = (uint64_t)(v4 + 184);
  result = sub_100026CC8(v7);
  if (result)
  {
    if ((unint64_t)sub_100026CC8(v7) >= 2)
    {
      if (v5[4] != -1)
        dispatch_once(&qword_1022A0020, &stru_102197858);
      v9 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Why do we have more than one, we only want one", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v5[4] != -1)
          dispatch_once(&qword_1022A0020, &stru_102197858);
        LOWORD(v18) = 0;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 17, "Why do we have more than one, we only want one", &v18, 2);
        sub_100512490("Generic", 1, 0, 0, "BOOL CLTilesManager::getRegionPreloadManifest(std::vector<CLMarketRegion> *)", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
    }
    v10 = *(_QWORD *)(sub_100129380(v7) + 80);
    *(_OWORD *)buf = *(_OWORD *)(v10 + 48);
    v21 = *(_QWORD *)(v10 + 64);
    if (*(char *)(v10 + 95) < 0)
    {
      sub_100115CE4(&__p, *(void **)(v10 + 72), *(_QWORD *)(v10 + 80));
    }
    else
    {
      __p = *(_OWORD *)(v10 + 72);
      v23 = *(_QWORD *)(v10 + 88);
    }
    if (sub_1001C9408(v10, *(_BYTE *)(v3 + 200)))
    {
      v18 = 0uLL;
      v19 = 0;
      if (sub_100755788(v10, (uint64_t *)&v18))
      {
        v12 = *((_QWORD *)&v18 + 1);
        v11 = v18;
        if ((_QWORD)v18 != *((_QWORD *)&v18 + 1))
        {
          v13 = v2[1];
          do
          {
            if (v13 >= v2[2])
            {
              v13 = sub_100756EF8(v2, v11);
            }
            else
            {
              sub_100756E94((uint64_t)v2, v11);
              v13 += 56;
            }
            v2[1] = v13;
            v11 += 56;
          }
          while (v11 != v12);
        }
      }
      v17 = (void **)&v18;
      sub_100756E08(&v17);
    }
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
    return 1;
  }
  return result;
}

void sub_100026C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  a12 = &a13;
  sub_100756E08((void ***)&a12);
  if (a25 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100026CC8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void sub_100026CD0(uint64_t *a1, double a2, double a3, double a4, uint64_t a5, uint64_t a6, uint64_t a7, int *a8, int *a9, double *a10, uint64_t a11, uint64_t a12, uint64_t *a13)
{
  double *v16;
  unsigned __int8 v17;
  double v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  BOOL v24;
  unsigned int v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  double v30;
  double v31;
  NSObject *v32;
  double Current;
  int v34;
  _BYTE *v35;
  _BYTE *v36;
  std::string *p_p;
  uint64_t v38;
  double v39;
  int v40;
  std::string::size_type v41;
  std::string *v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  char *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  char *v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char *v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  char *v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  __int128 *v97;
  unint64_t v98;
  char *v99;
  char *v100;
  int64_t v101;
  double v102;
  int v103;
  int v104;
  double v105;
  __int128 *v106;
  double v107;
  double *v108;
  double v109;
  double v110;
  double v111;
  NSObject *v112;
  long double *v113;
  char *v114;
  __int128 *v115;
  int64_t v116;
  unint64_t v117;
  NSObject *v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  unsigned __int8 v122;
  double *v123;
  unint64_t v124;
  uint64_t v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  int64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  long double v134;
  unint64_t v135;
  double v136;
  uint64_t *v137;
  NSObject *v138;
  unint64_t v139;
  char *v140;
  char *v141;
  unint64_t v142;
  unint64_t v143;
  __int128 v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  char *v151;
  __int128 v152;
  uint64_t v153;
  int v154;
  char *v155;
  uint64_t v156;
  double *v157;
  char *v158;
  double v159;
  double v160;
  double v161;
  char *v162;
  double v163;
  double v164;
  double v165;
  double v166;
  double v167;
  double v168;
  double v169;
  double v170;
  double v171;
  char *v173;
  uint64_t v174;
  double v175;
  int v176;
  double v177;
  int *v178;
  NSObject *v179;
  double v180;
  NSObject *v181;
  double v182;
  int v183;
  int v184;
  _BOOL4 v185;
  char v186;
  double v187;
  NSObject *v188;
  uint64_t v189;
  uint64_t v190;
  NSObject *v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  char *v200;
  char *v201;
  unint64_t v202;
  unint64_t v203;
  unint64_t v204;
  char *v205;
  char *v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  char *v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  char *v216;
  unint64_t v217;
  uint64_t v218;
  char *v219;
  char *v220;
  std::string::size_type v221;
  std::string::size_type v222;
  char *v223;
  double v224;
  int v225;
  int v226;
  char *v227;
  double v228;
  char *v229;
  char *v230;
  unint64_t v231;
  char *v232;
  const char *v233;
  char v236;
  int v238;
  int64_t v240;
  void *v241;
  char *v242;
  unint64_t v243;
  std::string __p;
  double v245;
  __int16 v246;
  double v247;
  __int16 v248;
  _BYTE v249[14];
  __int16 v250;
  int v251;
  _BYTE buf[12];
  __int16 v253;
  std::string *v254;
  char v255;
  int v256;
  std::string *v257;
  __int16 v258;
  _BYTE *v259;
  _BYTE v260[32];
  _BYTE v261[32];
  __int128 v262;
  __int128 v263;

  v16 = a10;
  v17 = atomic_load((unsigned __int8 *)&qword_1023031B0);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_1023031B0))
  {
    sub_1002433B8((uint64_t)dbl_102303188);
    __cxa_guard_release(&qword_1023031B0);
    v16 = a10;
  }
  v18 = *(double *)(a12 + 28);
  v241 = 0;
  v242 = 0;
  v243 = 0;
  v19 = *(double *)(a11 + 76);
  v20 = *(double *)(a11 + 20);
  *v16 = -1.0;
  if (v20 >= 0.0 && v20 < *((double *)sub_1000288A0() + 12))
    v20 = *((double *)sub_1000288A0() + 12);
  v22 = *a1;
  v21 = a1[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v21 - v22) >> 5) > *((unsigned int *)sub_1000288A0() + 26) || v20 < 0.0)
  {
    if (*(_DWORD *)(a11 + 96) != 4)
      goto LABEL_66;
    v24 = 0;
  }
  else
  {
    v23 = *((double *)sub_1000288A0() + 14);
    v24 = a3 - v19 <= v23;
    if (*(_DWORD *)(a11 + 96) != 4)
    {
      if (a3 - v19 > v23)
        goto LABEL_66;
      goto LABEL_16;
    }
  }
  v25 = *(_DWORD *)(a11 + 84);
  if (v25 <= *((_DWORD *)sub_1000288A0() + 27) || !v24)
  {
LABEL_66:
    v68 = *a1;
    v67 = a1[1];
    if (*a1 != v67)
    {
      do
      {
        sub_100033B80(v68, (uint64_t)v260);
        v69 = v242;
        if ((unint64_t)v242 >= v243)
        {
          v75 = (char *)v241;
          v76 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
          v77 = v76 + 1;
          if (v76 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5) > v77)
            v77 = 0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v243 - (_QWORD)v241) >> 5) >= 0x155555555555555)
            v78 = 0x2AAAAAAAAAAAAAALL;
          else
            v78 = v77;
          if (v78)
          {
            v79 = (char *)sub_10067257C((uint64_t)&v243, v78);
            v75 = (char *)v241;
            v69 = v242;
          }
          else
          {
            v79 = 0;
          }
          v80 = &v79[32 * ((v242 - (_BYTE *)v241) >> 5)];
          v81 = *(_OWORD *)&v260[16];
          *(_OWORD *)v80 = *(_OWORD *)v260;
          *((_OWORD *)v80 + 1) = v81;
          v82 = *(_OWORD *)v261;
          v83 = *(_OWORD *)&v261[16];
          v84 = v263;
          *((_OWORD *)v80 + 4) = v262;
          *((_OWORD *)v80 + 5) = v84;
          *((_OWORD *)v80 + 2) = v82;
          *((_OWORD *)v80 + 3) = v83;
          if (v69 == v75)
          {
            v90 = &v79[96 * v76];
          }
          else
          {
            v85 = &v79[96 * v76];
            do
            {
              v86 = *((_OWORD *)v69 - 5);
              *((_OWORD *)v85 - 6) = *((_OWORD *)v69 - 6);
              *((_OWORD *)v85 - 5) = v86;
              v87 = *((_OWORD *)v69 - 4);
              v88 = *((_OWORD *)v69 - 3);
              v89 = *((_OWORD *)v69 - 2);
              v90 = v85 - 96;
              *(_OWORD *)(v85 - 23) = *(_OWORD *)(v69 - 23);
              *((_OWORD *)v85 - 3) = v88;
              *((_OWORD *)v85 - 2) = v89;
              *((_OWORD *)v85 - 4) = v87;
              v69 -= 96;
              v85 -= 96;
            }
            while (v69 != v75);
          }
          v74 = v80 + 96;
          v241 = v90;
          v242 = v80 + 96;
          v243 = (unint64_t)&v79[96 * v78];
          if (v75)
            operator delete(v75);
        }
        else
        {
          v70 = *(_OWORD *)&v260[16];
          *(_OWORD *)v242 = *(_OWORD *)v260;
          *((_OWORD *)v69 + 1) = v70;
          v71 = *(_OWORD *)v261;
          v72 = *(_OWORD *)&v261[16];
          v73 = v263;
          *((_OWORD *)v69 + 4) = v262;
          *((_OWORD *)v69 + 5) = v73;
          *((_OWORD *)v69 + 2) = v71;
          *((_OWORD *)v69 + 3) = v72;
          v74 = v69 + 96;
        }
        v242 = v74;
        v68 += 96;
      }
      while (v68 != v67);
    }
LABEL_86:
    v91 = 0;
    goto LABEL_91;
  }
LABEL_16:
  v27 = *a1;
  v28 = a1[1];
  if (*a1 == v28)
  {
    v92 = *a1;
  }
  else
  {
    v29 = &qword_1022A0000;
    do
    {
      v30 = sub_10011E634(dbl_102303188, *(double *)(a11 + 4), *(double *)(a11 + 12), *(double *)(v27 + 8), *(double *)(v27 + 16), 0.0);
      v31 = (double)*(int *)(v27 + 48);
      if (*(double *)(v27 + 32) >= v31)
        v31 = *(double *)(v27 + 32);
      if (v30 - v31 - v20 <= 0.0)
      {
        sub_100033B80(v27, (uint64_t)v260);
        v45 = v242;
        if ((unint64_t)v242 >= v243)
        {
          v51 = (char *)v241;
          v52 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
          v53 = v52 + 1;
          if (v52 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5) > v53)
            v53 = 0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v243 - (_QWORD)v241) >> 5) >= 0x155555555555555)
            v54 = 0x2AAAAAAAAAAAAAALL;
          else
            v54 = v53;
          if (v54)
          {
            v55 = (char *)sub_10067257C((uint64_t)&v243, v54);
            v51 = (char *)v241;
            v45 = v242;
          }
          else
          {
            v55 = 0;
          }
          v56 = &v55[32 * ((v242 - (_BYTE *)v241) >> 5)];
          v57 = *(_OWORD *)&v260[16];
          *(_OWORD *)v56 = *(_OWORD *)v260;
          *((_OWORD *)v56 + 1) = v57;
          v58 = *(_OWORD *)v261;
          v59 = *(_OWORD *)&v261[16];
          v60 = v263;
          *((_OWORD *)v56 + 4) = v262;
          *((_OWORD *)v56 + 5) = v60;
          *((_OWORD *)v56 + 2) = v58;
          *((_OWORD *)v56 + 3) = v59;
          if (v45 == v51)
          {
            v66 = &v55[96 * v52];
          }
          else
          {
            v61 = &v55[96 * v52];
            do
            {
              v62 = *((_OWORD *)v45 - 5);
              *((_OWORD *)v61 - 6) = *((_OWORD *)v45 - 6);
              *((_OWORD *)v61 - 5) = v62;
              v63 = *((_OWORD *)v45 - 4);
              v64 = *((_OWORD *)v45 - 3);
              v65 = *((_OWORD *)v45 - 2);
              v66 = v61 - 96;
              *(_OWORD *)(v61 - 23) = *(_OWORD *)(v45 - 23);
              *((_OWORD *)v61 - 3) = v64;
              *((_OWORD *)v61 - 2) = v65;
              *((_OWORD *)v61 - 4) = v63;
              v45 -= 96;
              v61 -= 96;
            }
            while (v45 != v51);
          }
          v50 = v56 + 96;
          v241 = v66;
          v242 = v56 + 96;
          v243 = (unint64_t)&v55[96 * v54];
          if (v51)
            operator delete(v51);
        }
        else
        {
          v46 = *(_OWORD *)&v260[16];
          *(_OWORD *)v242 = *(_OWORD *)v260;
          *((_OWORD *)v45 + 1) = v46;
          v47 = *(_OWORD *)v261;
          v48 = *(_OWORD *)&v261[16];
          v49 = v263;
          *((_OWORD *)v45 + 4) = v262;
          *((_OWORD *)v45 + 5) = v49;
          *((_OWORD *)v45 + 2) = v47;
          *((_OWORD *)v45 + 3) = v48;
          v50 = v45 + 96;
        }
        v242 = v50;
      }
      else
      {
        if (v29[90] != -1)
          dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
        v32 = qword_1022A02D8;
        if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
        {
          Current = CFAbsoluteTimeGetCurrent();
          sub_100FC7034(v27, v260, Current);
          v34 = v260[23];
          v35 = *(_BYTE **)v260;
          sub_100071A00(a11, &__p);
          v36 = v260;
          if (v34 < 0)
            v36 = v35;
          p_p = &__p;
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315394;
          *(_QWORD *)&buf[4] = v36;
          v253 = 2080;
          v254 = p_p;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s", buf, 0x16u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v29 = &qword_1022A0000;
          if ((v260[23] & 0x80000000) != 0)
            operator delete(*(void **)v260);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(v260, 0x65CuLL);
          if (v29[90] != -1)
            dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
          v38 = qword_1022A02D8;
          v39 = CFAbsoluteTimeGetCurrent();
          sub_100FC7034(v27, &__p, v39);
          v40 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
          v41 = __p.__r_.__value_.__r.__words[0];
          sub_100071A00(a11, buf);
          v42 = &__p;
          if (v40 < 0)
            v42 = (std::string *)v41;
          v43 = buf;
          if (v255 < 0)
            v43 = *(_BYTE **)buf;
          v256 = 136315394;
          v257 = v42;
          v258 = 2080;
          v259 = v43;
          LODWORD(v233) = 22;
          v44 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, v38, 0, "#Warning WIFI_LOC: filtered by location hint, ap, %s, hint, %s", (const char *)&v256, v233);
          if (v255 < 0)
            operator delete(*(void **)buf);
          v29 = &qword_1022A0000;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v44);
          if (v44 != v260)
            free(v44);
        }
      }
      v27 += 96;
    }
    while (v27 != v28);
    v27 = *a1;
    v92 = a1[1];
  }
  if (0xAAAAAAAAAAAAAAABLL * ((v92 - v27) >> 5) >= *((unsigned int *)sub_1000288A0() + 22) && v241 == v242)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
    v191 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      v192 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      *(_DWORD *)v260 = 134218240;
      *(_QWORD *)&v260[4] = v192;
      *(_WORD *)&v260[12] = 2048;
      *(_QWORD *)&v260[14] = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v191, OS_LOG_TYPE_DEFAULT, "#Warning WIFI_LOC: revert hint, %lu, %lu", v260, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v260, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214A4D8);
      v231 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134218240;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v231;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2048;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = 0xAAAAAAAAAAAAAAABLL
                                                                                 * ((v242 - (_BYTE *)v241) >> 5);
      LODWORD(v233) = 22;
      v232 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning WIFI_LOC: revert hint, %lu, %lu", &__p, v233);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v232);
      if (v232 != v260)
        free(v232);
    }
    v194 = *a1;
    v193 = a1[1];
    if (*a1 != v193)
    {
      do
      {
        sub_100033B80(v194, (uint64_t)v260);
        v195 = v242;
        if ((unint64_t)v242 >= v243)
        {
          v201 = (char *)v241;
          v202 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
          v203 = v202 + 1;
          if (v202 + 1 > 0x2AAAAAAAAAAAAAALL)
            sub_100259694();
          if (0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5) > v203)
            v203 = 0x5555555555555556 * ((uint64_t)(v243 - (_QWORD)v241) >> 5);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v243 - (_QWORD)v241) >> 5) >= 0x155555555555555)
            v204 = 0x2AAAAAAAAAAAAAALL;
          else
            v204 = v203;
          if (v204)
          {
            v205 = (char *)sub_10067257C((uint64_t)&v243, v204);
            v201 = (char *)v241;
            v195 = v242;
          }
          else
          {
            v205 = 0;
          }
          v206 = &v205[32 * ((v242 - (_BYTE *)v241) >> 5)];
          v207 = *(_OWORD *)&v260[16];
          *(_OWORD *)v206 = *(_OWORD *)v260;
          *((_OWORD *)v206 + 1) = v207;
          v208 = *(_OWORD *)v261;
          v209 = *(_OWORD *)&v261[16];
          v210 = v263;
          *((_OWORD *)v206 + 4) = v262;
          *((_OWORD *)v206 + 5) = v210;
          *((_OWORD *)v206 + 2) = v208;
          *((_OWORD *)v206 + 3) = v209;
          if (v195 == v201)
          {
            v216 = &v205[96 * v202];
          }
          else
          {
            v211 = &v205[96 * v202];
            do
            {
              v212 = *((_OWORD *)v195 - 5);
              *((_OWORD *)v211 - 6) = *((_OWORD *)v195 - 6);
              *((_OWORD *)v211 - 5) = v212;
              v213 = *((_OWORD *)v195 - 4);
              v214 = *((_OWORD *)v195 - 3);
              v215 = *((_OWORD *)v195 - 2);
              v216 = v211 - 96;
              *(_OWORD *)(v211 - 23) = *(_OWORD *)(v195 - 23);
              *((_OWORD *)v211 - 3) = v214;
              *((_OWORD *)v211 - 2) = v215;
              *((_OWORD *)v211 - 4) = v213;
              v195 -= 96;
              v211 -= 96;
            }
            while (v195 != v201);
          }
          v200 = v206 + 96;
          v241 = v216;
          v242 = v206 + 96;
          v243 = (unint64_t)&v205[96 * v204];
          if (v201)
            operator delete(v201);
        }
        else
        {
          v196 = *(_OWORD *)&v260[16];
          *(_OWORD *)v242 = *(_OWORD *)v260;
          *((_OWORD *)v195 + 1) = v196;
          v197 = *(_OWORD *)v261;
          v198 = *(_OWORD *)&v261[16];
          v199 = v263;
          *((_OWORD *)v195 + 4) = v262;
          *((_OWORD *)v195 + 5) = v199;
          *((_OWORD *)v195 + 2) = v197;
          *((_OWORD *)v195 + 3) = v198;
          v200 = v195 + 96;
        }
        v242 = v200;
        v194 += 96;
      }
      while (v194 != v193);
    }
    goto LABEL_86;
  }
  v91 = 1;
LABEL_91:
  v93 = 0xAAAAAAAAAAAAAAABLL * ((v242 - (_BYTE *)v241) >> 5);
  v94 = 126 - 2 * __clz(v93);
  if (v242 == v241)
    v95 = 0;
  else
    v95 = v94;
  sub_1006772C8((uint64_t)v241, v242, v95, 1);
  v96 = v242;
  while (1)
  {
    v97 = sub_1000288A0();
    v98 = 0xAAAAAAAAAAAAAAABLL * ((v96 - (_BYTE *)v241) >> 5);
    v99 = v242;
    if (v98 <= *((unsigned int *)v97 + 21))
      break;
    v96 = v242 - 96;
    v242 -= 96;
  }
  v100 = (char *)v241;
  v101 = v242 - (_BYTE *)v241;
  if (v242 == v241)
    goto LABEL_116;
  do
  {
    v102 = *((double *)v100 + 8);
    v104 = *((_DWORD *)v100 + 13);
    v103 = *((_DWORD *)v100 + 14);
    v105 = *((double *)v100 + 4);
    v106 = sub_1000288A0();
    sub_100234A78((double *)v106, (double)v103, (double)v104, v105, a3 - v102);
    *(float *)&v107 = v107;
    *((_DWORD *)v100 + 20) = LODWORD(v107);
    v100 += 96;
  }
  while (v100 != v99);
  v108 = (double *)v241;
  if (v241 == v242)
  {
LABEL_116:
    v236 = 1;
  }
  else
  {
    v109 = -360.0;
    v110 = 360.0;
    do
    {
      v111 = v108[1];
      if (v111 > v109)
        v109 = v108[1];
      if (v111 < v110)
        v110 = v108[1];
      v108 += 12;
    }
    while (v108 != (double *)v242);
    v236 = 1;
    if (v109 > 179.9 && v110 < -179.9)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v112 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v260 = 134349312;
        *(double *)&v260[4] = v110;
        *(_WORD *)&v260[12] = 2050;
        *(double *)&v260[14] = v109;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEBUG, "WifiCalc, b360repr, min, %{public}.1lf, max, %{public}.1lf", v260, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v260, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v110;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v109;
        LODWORD(v233) = 22;
        v230 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, b360repr, min, %{public}.1lf, max, %{public}.1lf", &__p, v233);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v230);
        if (v230 != v260)
          free(v230);
      }
      v113 = (long double *)v241;
      v114 = v242;
      if (v241 != v242)
      {
        do
        {
          v113[1] = fmod(v113[1] + 360.0, 360.0);
          v113 += 12;
        }
        while (v113 != (long double *)v114);
      }
      v236 = 0;
    }
  }
  v115 = sub_1000288A0();
  v238 = sub_10021DA4C((double **)&v241, v18, a4, *((unsigned __int8 *)v115 + 120));
  v116 = (v242 - (_BYTE *)v241) >> 5;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v117 = 0xAAAAAAAAAAAAAAABLL * (v101 >> 5);
  v118 = qword_1022A0048;
  v119 = 0xAAAAAAAAAAAAAAABLL * v116;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v120 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    v121 = *(_QWORD *)(a11 + 20);
    *(_DWORD *)v260 = 134350592;
    *(_QWORD *)&v260[4] = v120;
    *(_WORD *)&v260[12] = 2050;
    *(_QWORD *)&v260[14] = v93;
    *(_WORD *)&v260[22] = 2050;
    *(_QWORD *)&v260[24] = v117;
    *(_WORD *)v261 = 2050;
    *(_QWORD *)&v261[2] = v119;
    *(_WORD *)&v261[10] = 1026;
    *(_DWORD *)&v261[12] = v238;
    *(_WORD *)&v261[16] = 2050;
    *(_QWORD *)&v261[18] = v121;
    *(_WORD *)&v261[26] = 1026;
    *(_DWORD *)&v261[28] = v91;
    _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEBUG, "WifiCalc, counts, %{public}ld, %{public}ld, %{public}ld, %{public}ld, verified, %{public}d, hint, %{public}.1f, %{public}d", v260, 0x40u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v260, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v217 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
    v218 = *(_QWORD *)(a11 + 20);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134350592;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v217;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v93;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 2050;
    v245 = *(double *)&v117;
    v246 = 2050;
    v247 = *(double *)&v119;
    v248 = 1026;
    *(_DWORD *)v249 = v238;
    *(_WORD *)&v249[4] = 2050;
    *(_QWORD *)&v249[6] = v218;
    v250 = 1026;
    v251 = v91;
    LODWORD(v233) = 64;
    v219 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, counts, %{public}ld, %{public}ld, %{public}ld, %{public}ld, verified, %{public}d, hint, %{public}.1f, %{public}d", &__p, v233);
    sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v219);
    if (v219 != v260)
      free(v219);
  }
  v122 = atomic_load((unsigned __int8 *)&qword_1023031E0);
  if ((v122 & 1) == 0 && __cxa_guard_acquire(&qword_1023031E0))
  {
    sub_1002433B8((uint64_t)dbl_1023031B8);
    __cxa_guard_release(&qword_1023031E0);
  }
  v123 = (double *)v241;
  v124 = (v242 - (_BYTE *)v241) / 96;
  if (v242 == v241)
  {
    v126 = 0;
  }
  else
  {
    v125 = 0;
    v126 = 0;
    v127 = 0;
    v128 = v124 - 1;
    if (v124 <= 1)
      v129 = 1;
    else
      v129 = (v242 - (_BYTE *)v241) / 96;
    v240 = v129;
    do
    {
      v130 = v127 + 1;
      v131 = v124;
      if (v127 + 1 < v124)
      {
        v132 = v125;
        v133 = v128;
        do
        {
          v134 = sub_10011E634(dbl_1023031B8, v123[12 * v127], v123[12 * v127 + 1], *(double *)((char *)v123 + v132 + 96), *(double *)((char *)v123 + v132 + 104), 0.0);
          v123 = (double *)v241;
          if (v134 <= (double)(*(_DWORD *)((char *)v241 + v132 + 148) + *((_DWORD *)v241 + 24 * v127 + 13)))
            ++v126;
          v132 += 96;
          --v133;
        }
        while (v133);
      }
      --v128;
      v125 += 96;
      ++v127;
      v124 = v131;
    }
    while (v130 != v240);
  }
  v135 = (v124 - 1) * v124;
  if (v135 >= 2)
    v136 = (double)v126 * 100.0 / (double)(v135 >> 1);
  else
    v136 = 100.0;
  v137 = a13;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10214A4B8);
  v138 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v260 = 134283521;
    *(double *)&v260[4] = v136;
    _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEBUG, "WifiCalc, apReachOverlapPercentage, %{private}f", v260, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(v260, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134283521;
    *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v136;
    LODWORD(v233) = 12;
    v220 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, apReachOverlapPercentage, %{private}f", &__p, v233);
    sub_100512490("Generic", 1, 0, 2, "void analyzeApCentroidReachOverlap(const std::vector<CLWifiAccessPoint> &)", "%s\n", v220);
    if (v220 != v260)
      free(v220);
  }
  HIDWORD(v139) = -1775253149 * rand() + 28633112;
  LODWORD(v139) = HIDWORD(v139);
  if ((v139 >> 2) <= 0xDA740C)
  {
    *(_QWORD *)v260 = _NSConcreteStackBlock;
    *(_QWORD *)&v260[8] = 3221225472;
    *(_QWORD *)&v260[16] = sub_1006724D8;
    *(_QWORD *)&v260[24] = &unk_102139B90;
    *(double *)v261 = v136;
    *(_QWORD *)&v261[8] = v124;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.apreach"), v260);
  }
  v140 = v242;
  if (v241 != v242)
  {
    v141 = (char *)v241 + 72;
    do
    {
      sub_1000C2254(v141, &__p);
      v143 = v137[1];
      v142 = v137[2];
      if (v143 >= v142)
      {
        v145 = *v137;
        v146 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v143 - *v137) >> 3);
        v147 = v146 + 1;
        if (v146 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_100259694();
        v148 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v142 - v145) >> 3);
        if (2 * v148 > v147)
          v147 = 2 * v148;
        if (v148 >= 0x555555555555555)
          v149 = 0xAAAAAAAAAAAAAAALL;
        else
          v149 = v147;
        *(_QWORD *)v261 = a13 + 2;
        if (v149)
          v150 = (char *)sub_1002596A8((uint64_t)(a13 + 2), v149);
        else
          v150 = 0;
        v151 = &v150[24 * v146];
        *(_QWORD *)v260 = v150;
        *(_QWORD *)&v260[8] = v151;
        *(_QWORD *)&v260[24] = &v150[24 * v149];
        v152 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)v151 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v151 = v152;
        memset(&__p, 0, sizeof(__p));
        *(_QWORD *)&v260[16] = v151 + 24;
        sub_100074D44(a13, v260);
        v153 = a13[1];
        sub_100074DB8((uint64_t)v260);
        v154 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
        a13[1] = v153;
        v137 = a13;
        if (v154 < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      else
      {
        v144 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *(_QWORD *)(v143 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        *(_OWORD *)v143 = v144;
        v137[1] = v143 + 24;
      }
      if (v141[16])
        ++*((_DWORD *)v137 + 6);
      v155 = v141 + 24;
      v141 += 96;
    }
    while (v155 != v140);
  }
  v156 = a12;
  if ((v238 & 1) != 0)
  {
    v157 = (double *)v241;
    v158 = v242;
    if (v241 == v242)
    {
      v167 = 0.0;
      v168 = 1.79769313e308;
      v166 = 0.0;
      v159 = 0.0;
    }
    else
    {
      v159 = 0.0;
      v160 = 0.0;
      v161 = 0.0;
      v162 = (char *)v241;
      do
      {
        v163 = *((float *)v162 + 20);
        v164 = *(double *)v162;
        v165 = *((double *)v162 + 1);
        v162 += 96;
        v161 = v161 + v163 * v164;
        v160 = v160 + v163 * v165;
        v159 = v159 + v163;
      }
      while (v162 != v242);
      v166 = 0.0;
      v167 = 0.0;
      if (v159 > 0.0)
      {
        v166 = v161 / v159;
        v167 = v160 / v159;
      }
      v168 = 1.79769313e308;
      if (v241 != v242)
      {
        do
        {
          if (v157[4] > 0.0)
          {
            v169 = sub_10011E634(dbl_102303188, v166, v167, *v157, v157[1], v18);
            v170 = v157[4];
            if (v170 < v169)
              v170 = v169;
            if (v170 < v168)
              v168 = v170;
            v171 = v169 + (double)*((int *)v157 + 13);
            if (v171 >= *a10 && *a10 != -1.0)
              v171 = *a10;
            *a10 = v171;
          }
          v157 += 12;
        }
        while (v157 != (double *)v158);
        v157 = (double *)v241;
        v173 = v242;
        v156 = a12;
        goto LABEL_191;
      }
    }
    v173 = (char *)v241;
LABEL_191:
    if (v168 >= 1.79769313e308)
      v177 = -1.0;
    else
      v177 = v168;
    *(double *)(v156 + 20) = v177;
    *(double *)(v156 + 4) = v166;
    *(double *)(v156 + 12) = v167;
    *(_DWORD *)(v156 + 132) = 1;
    *a9 = -1431655765 * ((unint64_t)(v173 - (char *)v157) >> 5);
    v178 = a8;
    *a8 = 0;
    if (*a10 < v177)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v179 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v180 = *a10;
        *(_DWORD *)v260 = 134349312;
        *(double *)&v260[4] = v180;
        *(_WORD *)&v260[12] = 2050;
        *(double *)&v260[14] = v177;
        _os_log_impl((void *)&_mh_execute_header, v179, OS_LOG_TYPE_DEBUG, "WifiCalc, invalid estimatedWorstCaseErrorMeters, estimatedWorstCaseErrorMeters, %{public}0.1f, hunc, %{public}0.1f, #Warning", v260, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(v260, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10214A4B8);
        v228 = *a10;
        LODWORD(__p.__r_.__value_.__l.__data_) = 134349312;
        *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v228;
        WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
        *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v177;
        LODWORD(v233) = 22;
        v229 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, invalid estimatedWorstCaseErrorMeters, estimatedWorstCaseErrorMeters, %{public}0.1f, hunc, %{public}0.1f, #Warning", &__p, v233);
        sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v229);
        if (v229 != v260)
          free(v229);
        v178 = a8;
      }
      *a10 = -1.0;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v181 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v182 = *a10;
      v183 = *a9;
      v184 = *v178;
      *(_DWORD *)v260 = 134350593;
      *(double *)&v260[4] = v159;
      *(_WORD *)&v260[12] = 2049;
      *(double *)&v260[14] = v166;
      *(_WORD *)&v260[22] = 2049;
      *(double *)&v260[24] = v167;
      *(_WORD *)v261 = 2050;
      *(double *)&v261[2] = v177;
      *(_WORD *)&v261[10] = 2050;
      *(double *)&v261[12] = v182;
      *(_WORD *)&v261[20] = 1026;
      *(_DWORD *)&v261[22] = v183;
      *(_WORD *)&v261[26] = 1026;
      *(_DWORD *)&v261[28] = v184;
      _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEBUG, "WifiCalc, est, %{public}.1f, %{private}0.3f, %{private}0.3f, hunc, %{public}0.1f, estWorstError, %{public}0.1f, n, %{public}d, x, %{public}d", v260, 0x40u);
    }
    v185 = sub_1001BFF7C(115, 2);
    v156 = a12;
    if (v185)
    {
      bzero(v260, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v224 = *a10;
      v225 = *a9;
      v226 = *v178;
      LODWORD(__p.__r_.__value_.__l.__data_) = 134350593;
      *(double *)((char *)__p.__r_.__value_.__r.__words + 4) = v159;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(double *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v166;
      HIWORD(__p.__r_.__value_.__r.__words[2]) = 2049;
      v245 = v167;
      v246 = 2050;
      v247 = v177;
      v248 = 2050;
      *(double *)v249 = v224;
      *(_WORD *)&v249[8] = 1026;
      *(_DWORD *)&v249[10] = v225;
      v250 = 1026;
      v251 = v226;
      LODWORD(v233) = 64;
      v227 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, est, %{public}.1f, %{private}0.3f, %{private}0.3f, hunc, %{public}0.1f, estWorstError, %{public}0.1f, n, %{public}d, x, %{public}d", &__p, v233);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v227);
      if (v227 != v260)
        free(v227);
      v156 = a12;
    }
    goto LABEL_206;
  }
  v174 = *a1;
  if (a1[1] - *a1 == 96)
  {
    *(_OWORD *)(a12 + 4) = *(_OWORD *)(v174 + 8);
    *(_DWORD *)(a12 + 132) = 1;
    v175 = *(double *)(v174 + 32);
    v176 = *(_DWORD *)(v174 + 48);
    if (v175 < (double)v176 / 3.0)
      v175 = (double)v176 / 3.0;
    *(double *)(a12 + 20) = v175;
    *a10 = (double)v176;
    *a9 = 1;
    *a8 = 1;
  }
  else
  {
    *a9 = 0;
    *a8 = 0;
  }
LABEL_206:
  v186 = v236;
  if (*(double *)(v156 + 20) < 180.0)
    v186 = 1;
  if ((v186 & 1) == 0)
  {
    v187 = *(double *)(v156 + 12);
    if (v187 > 180.0)
    {
      do
        v187 = v187 + -360.0;
      while (v187 > 180.0);
      *(double *)(v156 + 12) = v187;
    }
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214A4B8);
    v188 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v189 = *(_QWORD *)(a12 + 4);
      v190 = *(_QWORD *)(a12 + 12);
      *(_DWORD *)v260 = 134283777;
      *(_QWORD *)&v260[4] = v189;
      *(_WORD *)&v260[12] = 2049;
      *(_QWORD *)&v260[14] = v190;
      _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_DEBUG, "WifiCalc, b360repr, %{private}14.8lf, %{private}14.8lf", v260, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(v260, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214A4B8);
      v221 = *(_QWORD *)(a12 + 4);
      v222 = *(_QWORD *)(a12 + 12);
      LODWORD(__p.__r_.__value_.__l.__data_) = 134283777;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v221;
      WORD2(__p.__r_.__value_.__r.__words[1]) = 2049;
      *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v222;
      LODWORD(v233) = 22;
      v223 = (char *)_os_log_send_and_compose_impl(2, 0, v260, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, b360repr, %{private}14.8lf, %{private}14.8lf", &__p, v233);
      sub_100512490("Generic", 1, 0, 2, "static void CLLocationCalculator::calculateWifiCentroidLatLon(const std::vector<CLWifiAPLocation> &, unsigned int, unsigned int, unsigned int, double, unsigned int &, unsigned int &, double &, const CLDaemonLocation &, CLDaemonLocation &, CFAbsoluteTime, LatLonDebuggingData &, double)", "%s\n", v223);
      if (v223 != v260)
        free(v223);
    }
  }
  if (v241)
  {
    v242 = (char *)v241;
    operator delete(v241);
  }
}

void sub_1000287B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  __cxa_guard_abort(&qword_1023031E0);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *sub_1000288A0()
{
  return &xmmword_102313D10;
}

void sub_100028A80(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  double Current;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  uint64_t v11;

  v2 = *(_QWORD *)(a1 + 40);
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_1021545A8);
  v3 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_INFO))
  {
    v4 = *(_QWORD *)(a1 + 32);
    v7[0] = 68289282;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    v10 = 2114;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"stopped receiving location information\", \"client\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
  }
  dispatch_source_cancel((dispatch_source_t)objc_msgSend(*(id *)(v2 + 392), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)));
  objc_msgSend(*(id *)(v2 + 392), "removeObjectForKey:", *(_QWORD *)(a1 + 32));
  objc_msgSend(objc_msgSend(*(id *)(v2 + 432), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 32)), "end");
  objc_msgSend(*(id *)(v2 + 432), "setObject:forKeyedSubscript:", 0, *(_QWORD *)(a1 + 32));
  v5 = *(_QWORD *)(a1 + 32);
  Current = CFAbsoluteTimeGetCurrent();
  sub_100194D94(v2, v5, 10, 0, 0, 0, Current);
  sub_10019E180(v2, *(void **)(v2 + 480), (_QWORD *)(v2 + 440), *(void **)(a1 + 32));
}

void sub_100028BE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  NSObject *v6;
  const char *v7;
  void **v8;
  _WORD v9[8];
  void *__p[2];
  char v11;
  _BYTE v12[24];

  v4 = *(_QWORD *)(a1 + 24);
  sub_1015A2E04(__p, "no yield");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 16))(v4, __p);
  if (v11 < 0)
    operator delete(__p[0]);
  objc_msgSend(*(id *)(a1 + 8), "setPipelinedDidStartLocalizing:", 1);
  v5 = *(void **)(a1 + 8);
  v12[0] = 0;
  objc_msgSend(v5, "setLastIndoorError:", v12);
  if (v12[0])
    v12[0] = 0;
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    sub_1015A2E04(__p, "onNoGoodIndoorEstimate_Permanent");
    sub_1001CE878(a1, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, "outdoor");
    sub_1001CEC00(a1, 2, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
    sub_1015A2E04(__p, "CoarseIndoor says outdoor");
    sub_1001737B8(a1, a2, (uint64_t *)__p);
    if (v11 < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "We thought pipeline reported YIELD_FAILURE_GIVE_UP even though it is not seeded. This means we got an update after we decided to shut things down. ", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v9[0] = 0;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "We thought pipeline reported YIELD_FAILURE_GIVE_UP even though it is not seeded. This means we got an update after we decided to shut things down. ", v9, 2);
      v8 = (void **)v7;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLIndoorLogic::onNoGoodIndoorEstimate_Permanent(std::chrono::steady_clock::time_point)", "%s\n", v7);
      if (v8 != __p)
        free(v8);
    }
  }
}

void sub_100028E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100028EA4(uint64_t a1)
{
  unsigned __int8 v2;
  size_t v3;
  unint64_t v4;
  int v5;
  void **v6;
  uint64_t v7;
  void **p_s1;
  int v9;
  int v10;
  int v11;
  BOOL v12;
  NSObject *v14;
  const char *v15;
  void **v16;
  void *__p[2];
  unsigned __int8 v18;
  void *__s1;
  size_t __n;
  unsigned __int8 v21;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 128) + 56))(&__s1);
  sub_1015A2E04(__p, "PedometerAssistanceDisabledState");
  v2 = v21;
  if ((v21 & 0x80u) == 0)
    v3 = v21;
  else
    v3 = __n;
  v4 = v18;
  v5 = (char)v18;
  if ((v18 & 0x80u) != 0)
    v4 = (unint64_t)__p[1];
  if (v3 != v4)
  {
    v12 = 1;
    if (((char)v18 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((char)v21 < 0)
  {
    v12 = memcmp(__s1, v6, __n) != 0;
    goto LABEL_22;
  }
  if (v21)
  {
    v7 = v21 - 1;
    p_s1 = &__s1;
    do
    {
      v10 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      v9 = v10;
      v11 = *(unsigned __int8 *)v6;
      v6 = (void **)((char *)v6 + 1);
      v12 = v9 != v11;
    }
    while (v9 == v11 && v7-- != 0);
LABEL_22:
    if ((v5 & 0x80000000) == 0)
      goto LABEL_23;
    goto LABEL_27;
  }
  v12 = 0;
  if (((char)v18 & 0x80000000) == 0)
  {
LABEL_23:
    if ((v2 & 0x80) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(__s1);
    if (v12)
      return;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(__p[0]);
  if ((v21 & 0x80) != 0)
    goto LABEL_28;
LABEL_24:
  if (v12)
    return;
LABEL_29:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021B6718);
  v14 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__s1) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: received external feature enable command", (uint8_t *)&__s1, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__s1, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    LOWORD(__p[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, &__s1, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: received external feature enable command", __p, 2);
    v16 = (void **)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::EnablePedometerAssistance()", "%s\n", v15);
    if (v16 != &__s1)
      free(v16);
  }
  sub_10021FA34(a1, a1 + 80);
}

void sub_100029124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100029148(uint64_t a1)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  double v6;
  double v7;
  int v8;
  __int128 v9;
  __int128 v10;
  double v11;
  double v12;
  uint64_t *v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  _OWORD v25[2];

  *(_DWORD *)(a1 + 1384) = 0;
  sub_100EF2014(a1, &v21);
  v2 = v24;
  *(_OWORD *)(a1 + 664) = v23;
  *(_OWORD *)(a1 + 680) = v2;
  *(_OWORD *)(a1 + 696) = v25[0];
  *(_OWORD *)(a1 + 705) = *(_OWORD *)((char *)v25 + 9);
  v3 = v22;
  *(_OWORD *)(a1 + 632) = v21;
  *(_OWORD *)(a1 + 648) = v3;
  if (sub_100022484())
  {
    sub_100EF1EA4(a1, __p);
    v4 = v19;
    *(_OWORD *)(a1 + 568) = v18;
    *(_OWORD *)(a1 + 584) = v4;
    *(_OWORD *)(a1 + 600) = v20[0];
    *(_OWORD *)(a1 + 609) = *(_OWORD *)((char *)v20 + 9);
    v5 = v17;
    *(_OWORD *)(a1 + 536) = *(_OWORD *)__p;
    *(_OWORD *)(a1 + 552) = v5;
    sub_100F4D870((double *)&v21, (double *)(a1 + 536));
    v6 = *(double *)(a1 + 536);
    if (v6 >= -90.0 && v6 <= 90.0)
    {
      v7 = *(double *)(a1 + 544);
      if (v7 <= 180.0 && v7 >= -180.0)
      {
        sub_100EF21AC(a1, (uint64_t)&v21);
        sub_1015A2E04(__p, "Valid: gnss_harvest_database");
        sub_100029440(a1 + 728, (const std::string *)__p);
        if (SBYTE7(v17) < 0)
          operator delete(__p[0]);
        v8 = 1;
LABEL_24:
        *(_DWORD *)(a1 + 1384) = v8;
        return;
      }
    }
  }
  sub_10009EE70(a1, (uint64_t)__p);
  v9 = v19;
  *(_OWORD *)(a1 + 568) = v18;
  *(_OWORD *)(a1 + 584) = v9;
  *(_OWORD *)(a1 + 600) = v20[0];
  *(_OWORD *)(a1 + 609) = *(_OWORD *)((char *)v20 + 9);
  v10 = v17;
  *(_OWORD *)(a1 + 536) = *(_OWORD *)__p;
  *(_OWORD *)(a1 + 552) = v10;
  sub_100F4D870((double *)&v21, (double *)(a1 + 536));
  v11 = *(double *)(a1 + 536);
  if (v11 >= -90.0 && v11 <= 90.0)
  {
    v12 = *(double *)(a1 + 544);
    if (v12 <= 180.0 && v12 >= -180.0)
    {
      sub_100EF21AC(a1, (uint64_t)&v21);
      sub_1015A2E04(__p, "Valid: local_store");
      sub_100029440(a1 + 728, (const std::string *)__p);
      if (SBYTE7(v17) < 0)
        operator delete(__p[0]);
      v8 = 3;
      goto LABEL_24;
    }
  }
  v13 = sub_1000A3224();
  if (sub_10132ED44((uint64_t)v13)
    && *(double *)&v21 >= -90.0
    && *(double *)&v21 <= 90.0
    && *((double *)&v21 + 1) <= 180.0
    && *((double *)&v21 + 1) >= -180.0)
  {
    sub_1015A2E04(__p, "Valid: wifi_harvest_database");
    sub_100029440(a1 + 728, (const std::string *)__p);
    if (SBYTE7(v17) < 0)
      operator delete(__p[0]);
    v14 = v24;
    *(_OWORD *)(a1 + 568) = v23;
    *(_OWORD *)(a1 + 584) = v14;
    *(_OWORD *)(a1 + 600) = v25[0];
    *(_OWORD *)(a1 + 609) = *(_OWORD *)((char *)v25 + 9);
    v15 = v22;
    *(_OWORD *)(a1 + 536) = v21;
    *(_OWORD *)(a1 + 552) = v15;
    v8 = 2;
    goto LABEL_24;
  }
  sub_1015A2E04(__p, "Invalid");
  sub_100029440(a1 + 728, (const std::string *)__p);
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
}

void sub_100029418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_100029440(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 560), a2);
}

void sub_100029448(uint64_t a1)
{
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v2 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "disconnecting from indoord completely", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "disconnecting from indoord completely", v5, 2);
    v4 = (uint8_t *)v3;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::killDaemon()", "%s\n", v3);
    if (v4 != buf)
      free(v4);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 376) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 376) + 8), 4);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "stopUpdatingLocation");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "invalidate");
  objc_msgSend(*(id *)(a1 + 152), "setIndoord:", 0);
  sub_1000331B0(a1, 0);
  sub_1002440F0(*(_QWORD *)(a1 + 144));
}

void sub_100029620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  std::string::size_type size;
  std::string::size_type v7;
  std::string *p_p;
  std::string *p_s1;
  NSObject *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  char *v15;
  std::string __p;
  std::string __s1;
  int v18;
  std::string *v19;
  __int16 v20;
  std::string *v21;
  __int16 v22;
  uint64_t v23;
  uint8_t buf[4];
  std::string *v25;
  __int16 v26;
  std::string *v27;
  __int16 v28;
  uint64_t v29;

  sub_100029934(a1, &__s1);
  sub_100029934(a2, &__p);
  v5 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  v7 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v7 = __p.__r_.__value_.__l.__size_;
  if (size == v7)
  {
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (!memcmp(__s1.__r_.__value_.__l.__data_, p_p, __s1.__r_.__value_.__l.__size_))
        goto LABEL_26;
    }
    else
    {
      if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
        goto LABEL_26;
      p_s1 = &__s1;
      while (p_s1->__r_.__value_.__s.__data_[0] == p_p->__r_.__value_.__s.__data_[0])
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        p_p = (std::string *)((char *)p_p + 1);
        if (!--v5)
          goto LABEL_26;
      }
    }
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v10 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v11 = &__s1;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v12 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v12 = (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)buf = 136381187;
    v25 = v11;
    v26 = 2081;
    v27 = v12;
    v28 = 2081;
    v29 = a3;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiFlow, updating associated AP from %{private}s to %{private}s using event %{private}s", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v13 = &__s1;
    if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v13 = (std::string *)__s1.__r_.__value_.__r.__words[0];
    v14 = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
    v18 = 136381187;
    v19 = v13;
    v20 = 2081;
    v21 = v14;
    v22 = 2081;
    v23 = a3;
    v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, updating associated AP from %{private}s to %{private}s using event %{private}s", &v18, 32);
    sub_100512490("Generic", 1, 0, 2, "void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::logAssociatedApUpdate(const Types::AssociatedAp &, const Types::AssociatedAp &, const char *)", "%s\n", v15);
    if (v15 != (char *)buf)
      free(v15);
  }
LABEL_26:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

void sub_1000298F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  _Unwind_Resume(exception_object);
}

void sub_100029934(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;

  if (sub_100182520(a1))
  {
    v4 = sub_100129380(a1);
    sub_1000C2254(&v4, a2);
  }
  else
  {
    sub_1015A2E04(a2, "none");
  }
}

void sub_100029CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

_QWORD *sub_100029CC8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  NSObject *v6;
  double v7;
  double v8;
  double v9;
  NSObject *v10;
  _QWORD *result;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  char *v15;
  _WORD v16[8];
  _BYTE buf[1632];

  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021302D8);
  v6 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"LOI Manager: handle leeched location notification\"}", buf, 0x12u);
  }
  objc_msgSend(*(id *)(a2 + 32), "coordinate");
  v8 = v7;
  objc_msgSend(*(id *)(a2 + 32), "coordinate");
  if (sub_100008478(a1, v8, v9))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v10 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LOI Manager, requested LOI for current visit location", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      v16[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "LOI Manager, requested LOI for current visit location", v16, 2);
      v15 = (char *)v14;
      sub_100512490("Generic", 1, 0, 2, "std::optional<std::string> CLMicroLocationLoiManager::HandleLeechedLocation(const CLMiLoLoiManagerLeechedLocationEvent *)", "%s\n", v14);
      if (v15 != buf)
        free(v15);
    }
    result = sub_1015A2E04(buf, "In the process of entering Home LOI");
  }
  else
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v12 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LOI Manager, Failed To request LOI for current visit location\"}", buf, 0x12u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    }
    v13 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v13, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LOI Manager, Failed To request LOI for current visit location", "{\"msg%{public}.0s\":\"LOI Manager, Failed To request LOI for current visit location\"}", buf, 0x12u);
    }
    result = sub_1015A2E04(buf, "Not in Active Location State");
  }
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

float sub_10002A05C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  NSObject *v6;
  float result;
  const char *v8;
  std::string *v9;
  std::string *v10;
  int v11;
  unsigned int v12;
  int v13;
  char v14;
  _WORD v15[8];
  std::string buf[68];

  if (a2)
  {
    buf[0].__r_.__value_.__r.__words[0] = *(_QWORD *)a1;
    v4 = sub_100129380((uint64_t)buf);
    v5 = *(_DWORD *)(a2 + 56) | 1;
    *(_DWORD *)(a2 + 56) = v5;
    *(_QWORD *)(a2 + 8) = v4;
    if (*(char *)(a1 + 31) < 0)
    {
      sub_100115CE4(buf, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
      v5 = *(_DWORD *)(a2 + 56);
    }
    else
    {
      buf[0] = *(std::string *)(a1 + 8);
    }
    *(_DWORD *)(a2 + 56) = v5 | 2;
    v10 = *(std::string **)(a2 + 16);
    if (v10 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
      operator new();
    std::string::operator=(v10, buf);
    if (SHIBYTE(buf[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(buf[0].__r_.__value_.__l.__data_);
    v11 = *(_DWORD *)(a1 + 32);
    *(_DWORD *)(a2 + 56) |= 4u;
    *(_DWORD *)(a2 + 24) = v11;
    LODWORD(buf[0].__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 36);
    v12 = sub_10002A330((int *)buf);
    if (!sub_10002A324(v12))
      sub_1018FAD60();
    v13 = *(_DWORD *)(a2 + 56);
    *(_DWORD *)(a2 + 56) = v13 | 8;
    *(_DWORD *)(a2 + 28) = v12;
    *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 40);
    result = *(double *)(a1 + 48);
    *(float *)(a2 + 36) = result;
    v14 = *(_BYTE *)(a1 + 64);
    *(_DWORD *)(a2 + 56) = v13 | 0x78;
    *(_BYTE *)(a2 + 40) = v14;
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v6 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_FAULT))
    {
      LOWORD(buf[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "pWap,Invalid pointer", (uint8_t *)buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021B1A18);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 17, "pWap,Invalid pointer", v15, 2);
      v9 = (std::string *)v8;
      sub_100512490("Generic", 1, 0, 0, "void ConvertCLWifiServiceAccessPointToProtobuf(const CLWifiService_Type::AccessPoint &, CLP::LogEntry::PrivateData::WifiAccessPoint *)", "%s\n", v8);
      if (v9 != buf)
        free(v9);
    }
  }
  return result;
}

void sub_10002A300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10002A324(unsigned int a1)
{
  return a1 < 4;
}

uint64_t sub_10002A330(int *a1)
{
  int v1;
  uint64_t result;
  NSObject *v4;
  int v5;
  _BOOL4 v6;
  int v7;
  const char *v8;
  uint8_t *v9;
  _DWORD v10[4];
  uint8_t buf[4];
  int v12;

  v1 = *a1 + 1;
  if (v1 < 5)
    return dword_101CA009C[v1];
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021B1A18);
  v4 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v5 = *a1;
    *(_DWORD *)buf = 67240192;
    v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received unhandled wifi access point mode: %{public}d", buf, 8u);
  }
  v6 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v6)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021B1A18);
    v7 = *a1;
    v10[0] = 67240192;
    v10[1] = v7;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "Received unhandled wifi access point mode: %{public}d", v10, 8);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CLP::LogEntry::PrivateData::WifiAccessPointMode ConvertCLWifiServiceAccessPointModeToProtobuf(const int &)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
    return 0;
  }
  return result;
}

void sub_10002A50C(uint64_t a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD v25[6];
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  void *__p;
  char v30;
  std::__shared_weak_count *v31;
  id v32;
  _OWORD v33[8];
  _OWORD v34[2];
  _OWORD v35[8];
  _OWORD v36[35];
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  void *v39;
  char v40;
  std::__shared_weak_count *v41;
  id v42;

  sub_10011D234((uint64_t)v35, a2);
  v3 = objc_alloc((Class)CLLocation);
  v33[6] = v35[6];
  v33[7] = v35[7];
  v34[0] = v36[0];
  *(_OWORD *)((char *)v34 + 12) = *(_OWORD *)((char *)v36 + 12);
  v33[2] = v35[2];
  v33[3] = v35[3];
  v33[4] = v35[4];
  v33[5] = v35[5];
  v33[0] = v35[0];
  v33[1] = v35[1];
  v4 = objc_msgSend(v3, "initWithClientLocation:", v33);
  v5 = objc_msgSend(*(id *)(a1 + 64), "legacyClientKey");
  v6 = *(void **)(a1 + 480);
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 3321888768;
  v25[2] = sub_10020EE84;
  v25[3] = &unk_102198EE0;
  v25[5] = a1;
  sub_10011D234((uint64_t)&v26, (uint64_t)v35);
  v25[4] = v5;
  objc_msgSend(v6, "handleProvisionalIntermediationForService:forClientKey:at:withReply:", 3, v5, v4, v25);

  v7 = v31;
  if (v31)
  {
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v30 < 0)
    operator delete(__p);
  v10 = v28;
  if (v28)
  {
    v11 = (unint64_t *)&v28->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = v27;
  if (v27)
  {
    v14 = (unint64_t *)&v27->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }

  v16 = v41;
  if (v41)
  {
    v17 = (unint64_t *)&v41->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v40 < 0)
    operator delete(v39);
  v19 = v38;
  if (v38)
  {
    v20 = (unint64_t *)&v38->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v37;
  if (v37)
  {
    v23 = (unint64_t *)&v37->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_10002A7C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1004B4F0C(v1);
  sub_1004B4F0C((uint64_t)&STACK[0x6D8]);
  _Unwind_Resume(a1);
}

BOOL sub_10002A7F0(_QWORD *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  const char *v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unsigned int v20;
  const char *v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  uint64_t v26;
  unsigned int v27;
  const char *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  unsigned int v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint8_t buf[4];
  uint64_t v41;
  __int16 v42;
  uint64_t v43;

  v4 = (_QWORD *)*a1;
  v5 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
  result = sub_100270DE8(a2, *(_QWORD *)(*v4 - 8));
  if (!result)
  {
    v7 = *a1;
    *a1 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(a2 + 8);
    v9 = (const char *)v8;
    if (v8 < 0)
    {
      v10 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      v11 = 5381;
      do
      {
        v9 = (const char *)v11;
        v12 = *v10++;
        v11 = (33 * v11) ^ v12;
      }
      while (v12);
    }
    v13 = "N18CLGnssTimeTransfer15NotAllowedStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer15NotAllowedStateE" & 0x8000000000000000) != 0)
    {
      v14 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer15NotAllowedStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v15 = 5381;
      do
      {
        v13 = (const char *)v15;
        v16 = *v14++;
        v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    if (v9 == v13)
      operator new();
    v17 = *(const char **)(a2 + 8);
    if (v8 < 0)
    {
      v18 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      v19 = 5381;
      do
      {
        v17 = (const char *)v19;
        v20 = *v18++;
        v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    v21 = "N18CLGnssTimeTransfer9IdleStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer9IdleStateE" & 0x8000000000000000) != 0)
    {
      v22 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer9IdleStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v23 = 5381;
      do
      {
        v21 = (const char *)v23;
        v24 = *v22++;
        v23 = (33 * v23) ^ v24;
      }
      while (v24);
    }
    if (v17 == v21)
      operator new();
    if (v8 < 0)
    {
      v25 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      v26 = 5381;
      do
      {
        v8 = v26;
        v27 = *v25++;
        v26 = (33 * v26) ^ v27;
      }
      while (v27);
    }
    v28 = "N18CLGnssTimeTransfer11ActiveStateE";
    if (((unint64_t)"N18CLGnssTimeTransfer11ActiveStateE" & 0x8000000000000000) != 0)
    {
      v29 = (unsigned __int8 *)((unint64_t)"N18CLGnssTimeTransfer11ActiveStateE" & 0x7FFFFFFFFFFFFFFFLL);
      v30 = 5381;
      do
      {
        v28 = (const char *)v30;
        v31 = *v29++;
        v30 = (33 * v30) ^ v31;
      }
      while (v31);
    }
    if ((const char *)v8 == v28)
      operator new();
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CD660);
    v32 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      v33 = *(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      *(_DWORD *)buf = 136446466;
      v41 = v33;
      v42 = 2082;
      v43 = v5;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "#tt, unknown state %{public}s when handling event in state %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CD660);
      v34 = *(_QWORD *)(a2 + 8) & 0x7FFFFFFFFFFFFFFFLL;
      v36 = 136446466;
      v37 = v34;
      v38 = 2082;
      v39 = v5;
      v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#tt, unknown state %{public}s when handling event in state %{public}s", &v36, 22);
      sub_100512490("Generic", 1, 0, 0, "static void CLGnssTimeTransfer::State::checkForNewState(CLGnssTimeTransfer &, std::type_index)", "%s\n", v35);
      if (v35 != (char *)buf)
        free(v35);
    }
    operator new();
  }
  return result;
}

void sub_10002AD94()
{
  operator delete();
}

void sub_10002ADEC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char *v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 __p;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;
  double *v64[3];
  uint64_t v65;
  pthread_mutex_t *v66;
  __int16 v67;

  v10 = *(_QWORD *)(a1 + 56);
  v65 = a1 + 56;
  (*(void (**)(void))(v10 + 16))();
  v67 = 256;
  sub_100214C64(a1, v64);
  sub_1000C0A50((int *)(a1 + 72), v64, a2, v61, a5);
  sub_10136C508((uint64_t)v60, v61[0], v61[1]);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1000C6828(a1, v60, a3, &v58, a5);
  v11 = v58;
  for (i = v59; v11 != i; v11 += 56)
  {
    v13 = *(_OWORD *)v11;
    v55 = *(_QWORD *)(v11 + 16);
    v54 = v13;
    if (*(char *)(v11 + 47) < 0)
    {
      sub_100115CE4(&__p, *(void **)(v11 + 24), *(_QWORD *)(v11 + 32));
    }
    else
    {
      v14 = *(_OWORD *)(v11 + 24);
      v57 = *(_QWORD *)(v11 + 40);
      __p = v14;
    }
    if (*(_BYTE *)(v11 + 48))
    {
      sub_101369384(a1, &v45);
      v16 = a4[1];
      v15 = (unint64_t)a4[2];
      if ((unint64_t)v16 >= v15)
      {
        v24 = *a4;
        v25 = 0x8E38E38E38E38E39 * ((v16 - *a4) >> 4);
        v26 = v25 + 1;
        if (v25 + 1 > 0x1C71C71C71C71C7)
          sub_100259694();
        v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v15 - (_QWORD)v24) >> 4);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0xE38E38E38E38E3)
          v28 = 0x1C71C71C71C71C7;
        else
          v28 = v26;
        if (v28)
        {
          v29 = (char *)sub_100686504((uint64_t)(a4 + 2), v28);
          v24 = *a4;
          v16 = a4[1];
        }
        else
        {
          v29 = 0;
        }
        v30 = &v29[144 * v25];
        *(_OWORD *)v30 = v45;
        v31 = v46;
        v32 = v47;
        v33 = v49;
        *((_OWORD *)v30 + 3) = v48;
        *((_OWORD *)v30 + 4) = v33;
        *((_OWORD *)v30 + 1) = v31;
        *((_OWORD *)v30 + 2) = v32;
        v34 = v50;
        v35 = v51;
        v36 = v53;
        *((_OWORD *)v30 + 7) = v52;
        *((_OWORD *)v30 + 8) = v36;
        *((_OWORD *)v30 + 5) = v34;
        *((_OWORD *)v30 + 6) = v35;
        if (v16 == v24)
        {
          v44 = &v29[144 * v25];
        }
        else
        {
          v37 = &v29[144 * v25];
          do
          {
            *((_OWORD *)v37 - 9) = *((_OWORD *)v16 - 9);
            v38 = *((_OWORD *)v16 - 8);
            v39 = *((_OWORD *)v16 - 7);
            v40 = *((_OWORD *)v16 - 5);
            *((_OWORD *)v37 - 6) = *((_OWORD *)v16 - 6);
            *((_OWORD *)v37 - 5) = v40;
            *((_OWORD *)v37 - 8) = v38;
            *((_OWORD *)v37 - 7) = v39;
            v41 = *((_OWORD *)v16 - 4);
            v42 = *((_OWORD *)v16 - 3);
            v43 = *((_OWORD *)v16 - 2);
            v44 = v37 - 144;
            *(_OWORD *)(v37 - 20) = *(_OWORD *)(v16 - 20);
            *((_OWORD *)v37 - 3) = v42;
            *((_OWORD *)v37 - 2) = v43;
            *((_OWORD *)v37 - 4) = v41;
            v16 -= 144;
            v37 -= 144;
          }
          while (v16 != v24);
        }
        v23 = v30 + 144;
        *a4 = v44;
        a4[1] = v30 + 144;
        a4[2] = &v29[144 * v28];
        if (v24)
          operator delete(v24);
      }
      else
      {
        *(_OWORD *)v16 = v45;
        v17 = v46;
        v18 = v47;
        v19 = v49;
        *((_OWORD *)v16 + 3) = v48;
        *((_OWORD *)v16 + 4) = v19;
        *((_OWORD *)v16 + 1) = v17;
        *((_OWORD *)v16 + 2) = v18;
        v20 = v50;
        v21 = v51;
        v22 = v53;
        *((_OWORD *)v16 + 7) = v52;
        *((_OWORD *)v16 + 8) = v22;
        *((_OWORD *)v16 + 5) = v20;
        *((_OWORD *)v16 + 6) = v21;
        v23 = v16 + 144;
      }
      a4[1] = v23;
    }
    if (SHIBYTE(v57) < 0)
      operator delete((void *)__p);
  }
  *(_QWORD *)&v45 = &v58;
  sub_1011B6E1C((void ***)&v45);
  sub_100067A00((uint64_t)v60, (char *)v60[1]);
  *(_QWORD *)&v45 = &v63;
  sub_100495E10((void ***)&v45);
  *(_QWORD *)&v45 = &v62;
  sub_100495E10((void ***)&v45);
  *(_QWORD *)&v45 = v61;
  sub_100495E10((void ***)&v45);
  if (v64[0])
  {
    v64[1] = v64[0];
    operator delete(v64[0]);
  }
  if (HIBYTE(v67))
  {
    if ((_BYTE)v67)
      pthread_mutex_unlock(v66);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
  }
}

void sub_10002B160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,uint64_t a39,uint64_t a40,char a41,char *a42)
{
  uint64_t v42;
  uint64_t v43;
  void *v45;
  void *v46;

  v45 = *(void **)v42;
  if (*(_QWORD *)v42)
  {
    *(_QWORD *)(v42 + 8) = v45;
    operator delete(v45);
  }
  sub_100067A00((uint64_t)&a41, a42);
  sub_101367C4C((void **)(v43 - 224));
  v46 = *(void **)(v43 - 152);
  if (v46)
  {
    *(_QWORD *)(v43 - 144) = v46;
    operator delete(v46);
  }
  sub_10187E514(v43 - 128);
  _Unwind_Resume(a1);
}

BOOL sub_10002B1F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  NSObject *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t *v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  NSObject *v13;
  uint64_t *v14;
  uint64_t v16;
  uint64_t *v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t *v21;
  const char *v22;
  char *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  const __CFString *v26;
  NSString *v27;
  _BYTE buf[12];
  __int16 v29;
  _BYTE *v30;
  char v31;
  int v32;
  uint64_t *v33;
  __int16 v34;
  _BYTE *v35;
  _BYTE __p[12];
  char v37;

  v3 = *(_QWORD *)(a1 + 936);
  if (v3)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((char *)a2 + 23) >= 0 ? (uint64_t)a2 : *a2;
      CLConnection::getName(*(CLConnection **)(a1 + 936));
      v7 = v37 >= 0 ? __p : *(_BYTE **)__p;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v6;
      v29 = 2082;
      v30 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'", buf, 0x16u);
      if (v37 < 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v16 = qword_1022A01D8;
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = (uint64_t *)*a2;
      CLConnection::getName(*(CLConnection **)(a1 + 936));
      if (v31 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      v32 = 136446466;
      v33 = v17;
      v34 = 2082;
      v35 = v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v16, 0, "Sending kCLConnectionMessageWakeClient for %{public}s to client '%{public}s'", &v32, 22);
      v20 = v19;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::wakeupLaunchdManagedClient(const std::string &)", "%s\n", v20);
      if (v20 != __p)
        free(v20);
    }
    v26 = CFSTR("kCLConnectionMessageClientNameKey");
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    v27 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8);
    *(_QWORD *)__p = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v27, &v26, 1);
    v9 = *(_QWORD *)(a1 + 936);
    sub_1007F8564("kCLConnectionMessageWakeClient", __p, &v24);
    CLConnection::sendMessage(v9);
    v10 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v14 = a2;
      else
        v14 = (uint64_t *)*a2;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Can't find /usr/libexec/UserEventAgent connection for waking Client: <%s>", __p, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      if (*((char *)a2 + 23) >= 0)
        v21 = a2;
      else
        v21 = (uint64_t *)*a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v21;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A01D8, 0, "#Warning Can't find /usr/libexec/UserEventAgent connection for waking Client: <%s>", buf);
      v23 = (char *)v22;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::wakeupLaunchdManagedClient(const std::string &)", "%s\n", v22);
      if (v23 != __p)
        free(v23);
    }
  }
  return v3 != 0;
}

void sub_10002B668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10002B684(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  int v10;
  const char *v11;
  uint64_t *v12;
  _BOOL8 v13;
  uint64_t *v14;
  const __CFString *v15;
  double v16;
  IOReturn v17;
  int v18;
  BOOL v19;
  int v20;
  NSObject *v21;
  char *v22;
  uint8_t *v23;
  uint64_t v25;
  const char *v26;
  _BYTE *v27;
  char *v28;
  uint64_t v29;
  int v30;
  _BYTE *v31;
  char *v32;
  const char *v33;
  const char *v34;
  _BYTE v35[12];
  __int16 v36;
  _BYTE *v37;
  char v38;
  _BYTE __p[28];
  uint8_t buf[8];
  __int16 v41;
  const char *v42;
  __int16 v43;
  uint64_t v44;

  if (*(int *)(a1 + 8) < 1)
    goto LABEL_24;
  if (*(double *)(a1 + 24) > 60.0 && CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 32) >= *(double *)(a1 + 24))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218B478);
    v4 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v41 = 2082;
      v42 = "";
      v43 = 2114;
      v44 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Tried to take power assertion that has already timed out\", \"AssertionIdentifier\":%{public, location:escape_only}@}", buf, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218B478);
    }
    v6 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v7 = *(_QWORD *)(a1 + 16);
      *(_DWORD *)buf = 68289282;
      *(_DWORD *)&buf[4] = 0;
      v41 = 2082;
      v42 = "";
      v43 = 2114;
      v44 = v7;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Tried to take power assertion that has already timed out", "{\"msg%{public}.0s\":\"Tried to take power assertion that has already timed out\", \"AssertionIdentifier\":%{public, location:escape_only}@}", buf, 0x1Cu);
    }
  }
  v8 = *(_DWORD *)(a1 + 8);
  if (v8 < 1)
  {
LABEL_24:
    v14 = a2;
    if (*((char *)a2 + 23) < 0)
      v14 = (uint64_t *)*a2;
    v15 = CFStringCreateWithFormat(kCFAllocatorDefault, 0, CFSTR("%@(%s)"), *(_QWORD *)(a1 + 16), v14);
    v16 = *(double *)(a1 + 24);
    *(_DWORD *)buf = 0;
    if (v16 <= 60.0)
      v17 = IOPMAssertionCreateWithName(CFSTR("PreventUserIdleSystemSleep"), 0xFFu, v15, (IOPMAssertionID *)buf);
    else
      v17 = IOPMAssertionCreateWithDescription(CFSTR("PreventUserIdleSystemSleep"), v15, 0, 0, 0, v16, CFSTR("TimeoutActionRelease"), (IOPMAssertionID *)buf);
    v18 = *(_DWORD *)buf;
    if (v17)
      v19 = 1;
    else
      v19 = *(_DWORD *)buf == 0;
    if (!v19)
    {
      *(_DWORD *)(a1 + 8) = 1;
      *(_DWORD *)(a1 + 12) = v18;
      *(CFAbsoluteTime *)(a1 + 32) = CFAbsoluteTimeGetCurrent();
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      *(_QWORD *)(a1 + 40) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", a2);
    }
    v20 = *(_DWORD *)(a1 + 8);
    v13 = v20 > 0;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218B498);
    v21 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v22 = v20 <= 0 ? "Fail" : "Took";
      sub_1001A486C(v15, (uint64_t)buf);
      v23 = (v44 & 0x80000000) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__p = 136315394;
      *(_QWORD *)&__p[4] = v22;
      *(_WORD *)&__p[12] = 2080;
      *(_QWORD *)&__p[14] = v23;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "%s, %s", __p, 0x16u);
      if (SBYTE3(v44) < 0)
        operator delete(*(void **)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218B498);
      v25 = qword_1022A02D8;
      if (v20 <= 0)
        v26 = "Fail";
      else
        v26 = "Took";
      sub_1001A486C(v15, (uint64_t)__p);
      if (__p[23] >= 0)
        v27 = __p;
      else
        v27 = *(_BYTE **)__p;
      *(_DWORD *)v35 = 136315394;
      *(_QWORD *)&v35[4] = v26;
      v36 = 2080;
      v37 = v27;
      LODWORD(v34) = 22;
      v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, 2, "%s, %s", v35, v34);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v28);
      if (v28 != (char *)buf)
        free(v28);
    }
    CFRelease(v15);
  }
  else
  {
    *(_DWORD *)(a1 + 8) = v8 + 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10218B498);
    v9 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_DWORD *)(a1 + 8);
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)__p);
      if (__p[23] >= 0)
        v11 = __p;
      else
        v11 = *(const char **)__p;
      v12 = a2;
      if (*((char *)a2 + 23) < 0)
        v12 = (uint64_t *)*a2;
      *(_DWORD *)buf = 67109634;
      *(_DWORD *)&buf[4] = v10;
      v41 = 2080;
      v42 = v11;
      v43 = 2080;
      v44 = (uint64_t)v12;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Took, inc ref, %d, %s, thisReason, %s", buf, 0x1Cu);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10218B498);
      v29 = qword_1022A02D8;
      v30 = *(_DWORD *)(a1 + 8);
      sub_1001A486C(*(const __CFString **)(a1 + 16), (uint64_t)v35);
      if (v38 >= 0)
        v31 = v35;
      else
        v31 = *(_BYTE **)v35;
      if (*((char *)a2 + 23) < 0)
        a2 = (uint64_t *)*a2;
      *(_DWORD *)__p = 67109634;
      *(_DWORD *)&__p[4] = v30;
      *(_WORD *)&__p[8] = 2080;
      *(_QWORD *)&__p[10] = v31;
      *(_WORD *)&__p[18] = 2080;
      *(_QWORD *)&__p[20] = a2;
      LODWORD(v33) = 28;
      v32 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v29, 2, "Took, inc ref, %d, %s, thisReason, %s", __p, v33, *(const char **)v35);
      if (v38 < 0)
        operator delete(*(void **)v35);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLPowerAssertion::takePowerAssertion(std::string)", "%s\n", v32);
      if (v32 != (char *)buf)
        free(v32);
    }
    return 1;
  }
  return v13;
}

void sub_10002BEA8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_10024F88C(exception_object);
}

uint64_t sub_10002BEDC(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  _QWORD block[5];

  *(_QWORD *)a1 = &off_1021A2EA8;
  if (qword_102311CB8)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020E73C;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_sync((dispatch_queue_t)qword_102311CB8, block);
  }
  v2 = *(void **)(a1 + 712);
  if (v2)
  {
    *(_QWORD *)(a1 + 720) = v2;
    operator delete(v2);
  }
  sub_10114E310((uint64_t *)(a1 + 704), 0);
  std::filebuf::~filebuf(a1 + 144);
  std::ios::~ios(a1 + 552);
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_10002BFF4(uint64_t a1, uint64_t a2)
{
  const char *v4;
  NSObject *v5;
  uint64_t v6;
  double v7;
  size_t v8;
  _BOOL4 v9;
  size_t v10;
  BOOL v11;
  size_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t *v18;
  _BOOL4 v19;
  NSObject *v20;
  std::string::size_type size;
  int v22;
  uint64_t v23;
  std::string *v24;
  unsigned int v25;
  NSObject *v26;
  char *v27;
  std::string::size_type v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  double v33;
  double v34;
  std::string __str;
  int v36;
  std::string::size_type v37;
  __int16 v38;
  double v39;
  __int16 v40;
  _BOOL4 v41;
  _BYTE buf[12];
  __int16 v43;
  double v44;
  __int16 v45;
  _BOOL4 v46;

  if (!*(_BYTE *)(a1 + 1664))
  {
    if (*(_BYTE *)(a1 + 1680) || sub_100CD597C(a1 + 1684) || *(_BYTE *)(a1 + 1665))
    {
      memset(&__str, 0, sizeof(__str));
      if (!sub_10005DE60(a2, &__str))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v15 = a2;
          if (*(char *)(a2 + 23) < 0)
            v15 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,failed to read file,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          if (*(char *)(a2 + 23) < 0)
            a2 = *(_QWORD *)a2;
          v36 = 136446210;
          v37 = a2;
          v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#rte,failed to read file,%{public}s", &v36, 12);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v16);
          if (v16 != buf)
            free(v16);
        }
        goto LABEL_70;
      }
      v34 = -1.0;
      v4 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0)
        v4 = *(const char **)a2;
      if (!sub_10000840C(v4, &v34))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          v6 = a2;
          if (*(char *)(a2 + 23) < 0)
            v6 = *(_QWORD *)a2;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = v6;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#gpsd,#rte,could not get file creation time,%{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v30 = a2;
          if (*(char *)(a2 + 23) < 0)
            v30 = *(_QWORD *)a2;
          v36 = 136446210;
          v37 = v30;
          v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#rte,could not get file creation time,%{public}s", &v36, 12);
          sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v31);
          if (v31 != buf)
            free(v31);
        }
      }
      v33 = 0.0;
      v7 = -1.0;
      if (v34 >= 0.0)
        v7 = CFAbsoluteTimeGetCurrent() - v34;
      v33 = v7;
      if (*(char *)(a2 + 23) < 0)
      {
        v17 = *(_QWORD *)(a2 + 8);
        v9 = byte_10230FB17 < 0;
        if (byte_10230FB17 >= 0)
          v10 = byte_10230FB17;
        else
          v10 = qword_10230FB08;
        v11 = v17 > v10;
        v12 = v17 - v10;
        if (!v11)
          goto LABEL_48;
        v13 = *(_QWORD *)a2;
      }
      else
      {
        v8 = *(unsigned __int8 *)(a2 + 23);
        v9 = byte_10230FB17 < 0;
        if (byte_10230FB17 >= 0)
          v10 = byte_10230FB17;
        else
          v10 = qword_10230FB08;
        v11 = v8 > v10;
        v12 = v8 - v10;
        if (!v11)
        {
LABEL_48:
          v19 = 0;
LABEL_49:
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v20 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              size = __str.__r_.__value_.__l.__size_;
            *(_DWORD *)buf = 134349568;
            *(_QWORD *)&buf[4] = size;
            v43 = 2050;
            v44 = v33;
            v45 = 1026;
            v46 = v19;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,injectRealTimeEphemerisFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", buf, 0x1Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021D0798);
            v28 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v28 = __str.__r_.__value_.__l.__size_;
            v36 = 134349568;
            v37 = v28;
            v38 = 2050;
            v39 = v33;
            v40 = 1026;
            v41 = v19;
            LODWORD(v32) = 28;
            v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#rte,injectRealTimeEphemerisFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", &v36, v32);
            sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v29);
            if (v29 != buf)
              free(v29);
          }
          if (*(char *)(a2 + 23) < 0)
            a2 = *(_QWORD *)a2;
          sub_1015A2E04(buf, (char *)a2);
          sub_100067B0C(a1 + 8, buf, 2, 1, &v33);
          if (SHIBYTE(v45) < 0)
            operator delete(*(void **)buf);
          sub_1000FF154(a1 + 2576);
          if ((sub_100103BB0(10) & 1) == 0)
            __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
          v22 = *(_DWORD *)(a1 + 2972);
          *(_DWORD *)(a1 + 2596) = 10;
          *(_DWORD *)(a1 + 2972) = v22 | 0x8004;
          v23 = *(_QWORD *)(a1 + 2696);
          if (!v23)
            operator new();
          *(_DWORD *)(v23 + 24) |= 1u;
          v24 = *(std::string **)(v23 + 8);
          if (v24 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
            operator new();
          std::string::operator=(v24, &__str);
          if (v19)
            v25 = 2;
          else
            v25 = 1;
          if (!sub_10008D1F0(v25))
            __assert_rtn("set_compression_type", "GpsdProtocol.pb.h", 9290, "::proto::gpsd::CompressionType_IsValid(value)");
          *(_DWORD *)(v23 + 24) |= 2u;
          *(_DWORD *)(v23 + 16) = v25;
          sub_1000FF8D8(a1 + 2176, 2);
LABEL_70:
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return;
        }
        v13 = a2;
      }
      if (v9)
        v18 = (uint64_t *)qword_10230FB00;
      else
        v18 = &qword_10230FB00;
      v19 = memcmp((const void *)(v13 + v12), v18, v10) == 0;
      goto LABEL_49;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v26 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsd,#rte,ignore update outside of session", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v36) = 0;
      v27 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#rte,ignore update outside of session", &v36, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectRealTimeEphemerisFile(std::string)", "%s\n", v27);
      if (v27 != buf)
        free(v27);
    }
  }
}

void sub_10002C890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002C90C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  std::string::size_type size;
  id v6;
  const char *v7;
  NSObject *v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  std::string::size_type v12;
  const char *v13;
  NSObject *v14;
  uint64_t v15;
  double v16;
  size_t v17;
  _BOOL4 v18;
  size_t v19;
  BOOL v20;
  size_t v21;
  uint64_t v22;
  size_t v23;
  uint64_t *v24;
  _BOOL4 v25;
  NSObject *v26;
  std::string::size_type v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  unsigned int v31;
  NSObject *v32;
  char *v33;
  std::string::size_type v34;
  char *v35;
  std::string::size_type v36;
  char *v37;
  uint64_t v38;
  char *v39;
  std::string::size_type v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  std::string __str;
  int v46;
  std::string::size_type v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  _BOOL4 v51;
  _BYTE buf[12];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  _BOOL4 v56;

  if (*(_BYTE *)(a1 + 1680) || sub_100CD597C(a1 + 1684) || *(_BYTE *)(a1 + 1665))
  {
    memset(&__str, 0, sizeof(__str));
    if (!sub_10005DE60(a2, &__str))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v9 = a2;
        if (*(char *)(a2 + 23) < 0)
          v9 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "#gpsd,#ee,injectAssistanceFile,Could not read,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        if (*(char *)(a2 + 23) < 0)
          a2 = *(_QWORD *)a2;
        v46 = 136446210;
        v47 = a2;
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#ee,injectAssistanceFile,Could not read,%{public}s", &v46, 12);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v10);
        if (v10 != buf)
          free(v10);
      }
      goto LABEL_89;
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0 && __str.__r_.__value_.__l.__size_ >> 4 > 0x270)
    {
      if (__str.__r_.__value_.__l.__size_ <= 0xC3500)
        goto LABEL_38;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = __str.__r_.__value_.__l.__size_;
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = size;
        v53 = 2050;
        v54 = 800000;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "EE file is too large,%{public}zu,%{public}zu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v40 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v40 = __str.__r_.__value_.__l.__size_;
        v46 = 134349312;
        v47 = v40;
        v48 = 2050;
        v49 = 800000;
        v41 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "EE file is too large,%{public}zu,%{public}zu", &v46, 22);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v41);
        if (v41 != buf)
          free(v41);
      }
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "silo"), "queue");
      v7 = "too_large";
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v11 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        v12 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v12 = __str.__r_.__value_.__l.__size_;
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v12;
        v53 = 2050;
        v54 = 10000;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "EE file is too small,%{public}zu,%{public}zu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v36 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v36 = __str.__r_.__value_.__l.__size_;
        v46 = 134349312;
        v47 = v36;
        v48 = 2050;
        v49 = 10000;
        v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "EE file is too small,%{public}zu,%{public}zu", &v46, 22);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v37);
        if (v37 != buf)
          free(v37);
      }
      v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 1784), "silo"), "queue");
      v7 = "too_small";
    }
    sub_101740774((uint64_t)v6, (uint64_t)"ee_download", (uint64_t)v7, 0);
LABEL_38:
    v44 = -1.0;
    v13 = (const char *)a2;
    if (*(char *)(a2 + 23) < 0)
      v13 = *(const char **)a2;
    if (!sub_10000840C(v13, &v44))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        v15 = a2;
        if (*(char *)(a2 + 23) < 0)
          v15 = *(_QWORD *)a2;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "#gpsd,#ee,could not get file creation time,%{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v38 = a2;
        if (*(char *)(a2 + 23) < 0)
          v38 = *(_QWORD *)a2;
        v46 = 136446210;
        v47 = v38;
        LODWORD(v42) = 12;
        v39 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,#ee,could not get file creation time,%{public}s", &v46, v42);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v39);
        if (v39 != buf)
          free(v39);
      }
    }
    v43 = 0;
    v16 = -1.0;
    if (v44 >= 0.0)
      v16 = CFAbsoluteTimeGetCurrent() - v44;
    v43 = *(_QWORD *)&v16;
    *(double *)(a1 + 2568) = v16;
    if (*(char *)(a2 + 23) < 0)
    {
      v23 = *(_QWORD *)(a2 + 8);
      v18 = byte_10230FB17 < 0;
      if (byte_10230FB17 >= 0)
        v19 = byte_10230FB17;
      else
        v19 = qword_10230FB08;
      v20 = v23 > v19;
      v21 = v23 - v19;
      if (!v20)
        goto LABEL_67;
      v22 = *(_QWORD *)a2;
    }
    else
    {
      v17 = *(unsigned __int8 *)(a2 + 23);
      v18 = byte_10230FB17 < 0;
      if (byte_10230FB17 >= 0)
        v19 = byte_10230FB17;
      else
        v19 = qword_10230FB08;
      v20 = v17 > v19;
      v21 = v17 - v19;
      if (!v20)
      {
LABEL_67:
        v25 = 0;
LABEL_68:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v26 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v27 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v27 = __str.__r_.__value_.__l.__size_;
          *(_DWORD *)buf = 134349568;
          *(_QWORD *)&buf[4] = v27;
          v53 = 2050;
          v54 = v43;
          v55 = 1026;
          v56 = v25;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,injectAssistanceFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021D0798);
          v34 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v34 = __str.__r_.__value_.__l.__size_;
          v46 = 134349568;
          v47 = v34;
          v48 = 2050;
          v49 = v43;
          v50 = 1026;
          v51 = v25;
          LODWORD(v42) = 28;
          v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#ee,injectAssistanceFile,size,%{public}zu,file_age_sec,%{public}.3f,is_lzma,%{public}d", &v46, v42);
          sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v35);
          if (v35 != buf)
            free(v35);
        }
        if (*(char *)(a2 + 23) < 0)
          a2 = *(_QWORD *)a2;
        sub_1015A2E04(buf, (char *)a2);
        sub_100067B0C(a1 + 8, buf, 2, 2, (double *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete(*(void **)buf);
        sub_1000FF154(a1 + 2576);
        if ((sub_100103BB0(10) & 1) == 0)
          __assert_rtn("set_type", "GpsdProtocol.pb.h", 5888, "::proto::gpsd::Request_Type_IsValid(value)");
        v28 = *(_DWORD *)(a1 + 2972);
        *(_DWORD *)(a1 + 2596) = 10;
        *(_DWORD *)(a1 + 2972) = v28 | 0x8004;
        v29 = *(_QWORD *)(a1 + 2696);
        if (!v29)
          operator new();
        *(_DWORD *)(v29 + 24) |= 1u;
        v30 = *(std::string **)(v29 + 8);
        if (v30 == (std::string *)&wireless_diagnostics::google::protobuf::internal::kEmptyString)
          operator new();
        std::string::operator=(v30, &__str);
        if (v25)
          v31 = 2;
        else
          v31 = 1;
        if (!sub_10008D1F0(v31))
          __assert_rtn("set_compression_type", "GpsdProtocol.pb.h", 9290, "::proto::gpsd::CompressionType_IsValid(value)");
        *(_DWORD *)(v29 + 24) |= 2u;
        *(_DWORD *)(v29 + 16) = v31;
        sub_1000FF8D8(a1 + 2176, 2);
LABEL_89:
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
        return;
      }
      v22 = a2;
    }
    if (v18)
      v24 = (uint64_t *)qword_10230FB00;
    else
      v24 = &qword_10230FB00;
    v25 = memcmp((const void *)(v22 + v21), v24, v19) == 0;
    goto LABEL_68;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v32 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#gpsd,#ee,ignore update outside of session", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v46) = 0;
    v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#ee,ignore update outside of session", &v46, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectAssistanceFile(std::string)", "%s\n", v33);
    if (v33 != buf)
      free(v33);
  }
}

void sub_10002D520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10002D5A8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  const char *v27;
  uint8_t *v28;
  uint64_t v29;
  _WORD v30[8];
  uint8_t buf[1640];

  if (!*(_BYTE *)(a1 + 58))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: registering for notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v30[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: registering for notifications", v30, 2);
      v16 = (uint8_t *)v15;
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v3 + 8), 5, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v4 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: location notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: location notifications unavailable", v30, v29);
        v18 = (uint8_t *)v17;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v17);
        if (v18 != buf)
          free(v18);
      }
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      objc_msgSend(*(id *)(v5 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v5 + 8), 1, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: motion state notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: motion state notifications unavailable", v30, v29);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    v7 = *(_QWORD *)(a1 + 24);
    if (v7)
    {
      objc_msgSend(*(id *)(v7 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v7 + 8), 0, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v8 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: motion state observer notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: motion state observer notifications unavailable", v30, v29);
        v22 = (uint8_t *)v21;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v21);
        if (v22 != buf)
          free(v22);
      }
    }
    v9 = *(_QWORD *)(a1 + 32);
    if (v9)
    {
      objc_msgSend(*(id *)(v9 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v9 + 8), 2, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v10 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: natalimetry notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: natalimetry notifications unavailable", v30, v29);
        v24 = (uint8_t *)v23;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v23);
        if (v24 != buf)
          free(v24);
      }
    }
    v11 = *(_QWORD *)(a1 + 40);
    if (v11)
    {
      objc_msgSend(*(id *)(v11 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v11 + 8), 2, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: status notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: status notifications unavailable", v30, v29);
        v26 = (uint8_t *)v25;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
    }
    v13 = *(_QWORD *)(a1 + 48);
    if (v13)
    {
      objc_msgSend(*(id *)(v13 + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(v13 + 8), 0, 0);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v14 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: step count notifications unavailable", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B6718);
        v30[0] = 0;
        LODWORD(v29) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: step count notifications unavailable", v30, v29);
        v28 = (uint8_t *)v27;
        sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::RegisterForNotifications()", "%s\n", v27);
        if (v28 != buf)
          free(v28);
      }
    }
    *(_BYTE *)(a1 + 58) = 1;
  }
}

void sub_10002DEE0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 58))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B6718);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Pedometer Assistance: deregistering for notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B6718);
      v10[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "Pedometer Assistance: deregistering for notifications", v10, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLGNSSPedometerAssistanceController::DeregisterForNotifications()", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 5);
    v4 = *(_QWORD *)(a1 + 16);
    if (v4)
      objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (v5)
      objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 0);
    v6 = *(_QWORD *)(a1 + 32);
    if (v6)
      objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 2);
    v7 = *(_QWORD *)(a1 + 40);
    if (v7)
      objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), 2);
    v8 = *(_QWORD *)(a1 + 48);
    if (v8)
      objc_msgSend(*(id *)(v8 + 16), "unregister:forNotification:", *(_QWORD *)(v8 + 8), 0);
    *(_BYTE *)(a1 + 58) = 0;
  }
}

uint64_t sub_10002E0F4(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  int v9;

  v5 = sub_10002E170(*(_QWORD *)a1, a2, a3);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v7 == 2)
    v8 = 1;
  else
    v8 = 2 * (v7 == 1);
  v9 = *(_DWORD *)(a1 + 8);
  if (v9 != v8)
    sub_10050E890(v5, v9, v8);
  *(_DWORD *)(a1 + 8) = v8;
  return v6;
}

uint64_t sub_10002E170(uint64_t a1, uint64_t a2, __n128 a3)
{
  uint64_t result;

  result = sub_10002E1E4((int *)a1, (unsigned int *)a2, a3);
  if (*(_DWORD *)a1 == 3
    || *(_DWORD *)a1 == 2
    && (!*(_BYTE *)(a1 + 8) || *(double *)(a1 + 16) * 1000000000.0 + 2.0e11 < *(double *)(a2 + 40) * 1000000000.0))
  {
    *(_DWORD *)(a1 + 4) = 2;
  }
  return result;
}

uint64_t sub_10002E1E4(int *a1, unsigned int *a2, __n128 a3)
{
  int isTypeInVehicle;
  uint64_t result;
  BOOL v7;
  int v8;

  isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*a2, a3);
  result = CLMotionActivity::isTypePedestrian(*a2);
  if (isTypeInVehicle)
    v7 = (_DWORD)result == 0;
  else
    v7 = 1;
  if (!v7)
    sub_1018FD264();
  if (isTypeInVehicle)
    *a1 = 1;
  if ((_DWORD)result)
  {
    if (a2[1] == 2)
      v8 = 3;
    else
      v8 = 2;
    *a1 = v8;
  }
  return result;
}

uint64_t sub_10002E254(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *a2;
  v5 = a2[1];
  v6 = a2[2];
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)a1 = v4;
  sub_10002E40C(a1 + 56, (_QWORD *)a2 + 7);
  *(_OWORD *)(a1 + 80) = a2[5];
  v7 = a2[6];
  v8 = a2[7];
  v9 = a2[8];
  *(_QWORD *)(a1 + 144) = *((_QWORD *)a2 + 18);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 96) = v7;
  sub_10002E40C(a1 + 152, (_QWORD *)a2 + 19);
  sub_10002E40C(a1 + 176, (_QWORD *)a2 + 22);
  *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  sub_1000A6464(a1 + 208, (uint64_t *)a2 + 26);
  sub_10002E40C(a1 + 248, (_QWORD *)a2 + 31);
  sub_1000A6464(a1 + 272, (uint64_t *)a2 + 34);
  sub_10002E40C(a1 + 312, (_QWORD *)a2 + 39);
  v10 = *((_QWORD *)a2 + 42);
  *(_DWORD *)(a1 + 344) = *((_DWORD *)a2 + 86);
  *(_QWORD *)(a1 + 336) = v10;
  sub_10002E40C(a1 + 352, (_QWORD *)a2 + 44);
  sub_10002E40C(a1 + 376, (_QWORD *)a2 + 47);
  sub_10002E40C(a1 + 400, (_QWORD *)a2 + 50);
  sub_10020B514(a1 + 424, (uint64_t *)a2 + 53);
  *(_DWORD *)(a1 + 464) = *((_DWORD *)a2 + 116);
  sub_10002E40C(a1 + 472, (_QWORD *)a2 + 59);
  memcpy((void *)(a1 + 496), a2 + 31, 0x162uLL);
  sub_10002E474((_QWORD *)(a1 + 856), (uint64_t)a2 + 856);
  sub_10002E474((_QWORD *)(a1 + 904), (uint64_t)a2 + 904);
  v11 = *(__int128 *)((char *)a2 + 952);
  *(_DWORD *)(a1 + 968) = *((_DWORD *)a2 + 242);
  *(_OWORD *)(a1 + 952) = v11;
  sub_10002E40C(a1 + 976, (_QWORD *)a2 + 122);
  sub_1000A6464(a1 + 1000, (uint64_t *)a2 + 125);
  *(_DWORD *)(a1 + 1040) = *((_DWORD *)a2 + 260);
  *(_QWORD *)(a1 + 1048) = *((_QWORD *)a2 + 131);
  *(_BYTE *)(a1 + 1056) = *((_BYTE *)a2 + 1056);
  *(_DWORD *)(a1 + 1060) = *((_DWORD *)a2 + 265);
  v12 = *(__int128 *)((char *)a2 + 1080);
  *(_OWORD *)(a1 + 1064) = *(__int128 *)((char *)a2 + 1064);
  *(_OWORD *)(a1 + 1080) = v12;
  v13 = *(__int128 *)((char *)a2 + 1096);
  v14 = *(__int128 *)((char *)a2 + 1112);
  v15 = *(__int128 *)((char *)a2 + 1144);
  *(_OWORD *)(a1 + 1128) = *(__int128 *)((char *)a2 + 1128);
  *(_OWORD *)(a1 + 1144) = v15;
  *(_OWORD *)(a1 + 1096) = v13;
  *(_OWORD *)(a1 + 1112) = v14;
  v16 = *(__int128 *)((char *)a2 + 1160);
  v17 = *(__int128 *)((char *)a2 + 1176);
  v18 = *(__int128 *)((char *)a2 + 1192);
  *(_BYTE *)(a1 + 1208) = *((_BYTE *)a2 + 1208);
  *(_OWORD *)(a1 + 1176) = v17;
  *(_OWORD *)(a1 + 1192) = v18;
  *(_OWORD *)(a1 + 1160) = v16;
  return a1;
}

void sub_10002E40C(uint64_t a1, _QWORD *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (_QWORD *)(a1 + 8);
  sub_100008848(a1, *(_QWORD **)(a1 + 8));
  *(_QWORD *)a1 = *a2;
  v5 = a2 + 1;
  v6 = a2[1];
  *v4 = v6;
  v7 = a2[2];
  *(_QWORD *)(a1 + 16) = v7;
  if (v7)
  {
    *(_QWORD *)(v6 + 16) = v4;
    *a2 = v5;
    *v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(_QWORD *)a1 = v4;
  }
}

uint64_t sub_10002E474(_QWORD *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v4 = (void **)a1[1];
  v5 = a1[2];
  a1[5] = 0;
  v6 = v5 - (_QWORD)v4;
  if (v6 >= 0x11)
  {
    do
    {
      operator delete(*v4);
      v7 = a1[2];
      v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      v6 = v7 - (_QWORD)v4;
    }
    while (v6 > 0x10);
  }
  if (v6 >> 3 == 1)
  {
    v8 = 64;
    goto LABEL_7;
  }
  if (v6 >> 3 == 2)
  {
    v8 = 128;
LABEL_7:
    a1[4] = v8;
  }
  sub_10002E5D4(a1);
  result = sub_10002E644((uint64_t)a1, a2);
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_10002E514(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;

  v3 = *(_QWORD *)(a1 + 24);
  v2 = a1 + 24;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - *(_QWORD *)a1) >> 3)
  {
    if (v5 == v4)
    {
      v10 = 0;
      v7 = 0;
    }
    else
    {
      v7 = (char *)sub_10025E6A0(v2, v6);
      v8 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      v10 = &v7[8 * v9];
      v11 = v5 - v8;
      if (v5 != v8)
      {
        v12 = 0;
        v13 = 8 * (v11 >> 3);
        do
        {
          *(_QWORD *)&v7[v12] = *(_QWORD *)(v8 + v12);
          v12 += 8;
        }
        while (v13 != v12);
        v5 = *(_QWORD *)(a1 + 8);
        v14 = *(_QWORD *)(a1 + 16);
        goto LABEL_9;
      }
    }
    v14 = v5;
LABEL_9:
    v15 = v14 - v5;
    v16 = *(void **)a1;
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v7[v15];
    *(_QWORD *)(a1 + 24) = v10;
    if (v16)
      operator delete(v16);
  }
}

void sub_10002E5D4(_QWORD *a1)
{
  uint64_t i;
  uint64_t v3;

  if (a1[5])
  {
    sub_1003432C8((uint64_t)a1, 0);
    sub_100AAE9EC(a1, 0);
  }
  else
  {
    v3 = a1[1];
    for (i = a1[2]; i != v3; a1[2] = i)
    {
      operator delete(*(void **)(i - 8));
      v3 = a1[1];
      i = a1[2] - 8;
    }
    a1[4] = 0;
  }
  sub_10002E514((uint64_t)a1);
}

uint64_t sub_10002E644(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != v5)
    *(_QWORD *)(a1 + 16) = v4 + ((v5 - v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_10002E514(a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return a1;
}

uint64_t sub_10002E6B0(uint64_t a1)
{
  sub_100067AC4(a1 + 1000);
  sub_100008848(a1 + 976, *(_QWORD **)(a1 + 984));
  sub_10034111C((_QWORD *)(a1 + 904));
  sub_10034111C((_QWORD *)(a1 + 856));
  sub_100008848(a1 + 472, *(_QWORD **)(a1 + 480));
  sub_100067A50(a1 + 424);
  sub_100008848(a1 + 400, *(_QWORD **)(a1 + 408));
  sub_100008848(a1 + 376, *(_QWORD **)(a1 + 384));
  sub_100008848(a1 + 352, *(_QWORD **)(a1 + 360));
  sub_100008848(a1 + 312, *(_QWORD **)(a1 + 320));
  sub_100067AC4(a1 + 272);
  sub_100008848(a1 + 248, *(_QWORD **)(a1 + 256));
  sub_100067AC4(a1 + 208);
  sub_100008848(a1 + 176, *(_QWORD **)(a1 + 184));
  sub_100008848(a1 + 152, *(_QWORD **)(a1 + 160));
  sub_100008848(a1 + 56, *(_QWORD **)(a1 + 64));
  return a1;
}

uint64_t sub_10002E778(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_10002EAD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, os_activity_scope_state_s state)
{
  void *v19;

  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

_QWORD *sub_10002EB10(_QWORD *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v9;
  id v10;
  _QWORD v12[5];
  _QWORD aBlock[5];
  _QWORD v14[3];
  char v15;

  *a1 = off_1021D5F20;
  v9 = a5;
  *a1 = off_102159CC0;
  a1[1] = v9;
  a1[2] = a3;
  a1[3] = a4;
  v10 = a2;
  a1[5] = 0;
  a1[4] = v10;
  a1[6] = 0;
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x2020000000;
  v15 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 3221225472;
  aBlock[2] = sub_1008A2C80;
  aBlock[3] = &unk_102149BF8;
  aBlock[4] = v14;
  a1[5] = _Block_copy(aBlock);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1002064B4;
  v12[3] = &unk_102149C20;
  v12[4] = v14;
  a1[6] = _Block_copy(v12);
  _Block_object_dispose(v14, 8);
  return a1;
}

void sub_10002EC1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100015E88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10002EC44(uint64_t a1, unsigned int *a2, unsigned __int8 *a3)
{
  double Current;
  uint64_t v6;
  NSObject *v7;
  int v8;
  _QWORD v10[3];
  _QWORD v11[3];
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  double v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  Current = CFAbsoluteTimeGetCurrent();
  v6 = *a2;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *a3;
    *(_DWORD *)buf = 68289794;
    v13 = 0;
    v14 = 2082;
    v15 = "";
    v16 = 2050;
    v17 = Current;
    v18 = 1026;
    v19 = v6;
    v20 = 1026;
    v21 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"gnssSessionEventPowerLog\", \"eventCfTimeSec\":\"%{public}f\", \"eventType\":%{public}d, \"eventStatus\":%{public}d}", buf, 0x28u);
  }
  v11[0] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", Current, CFSTR("eventCfTimeSec"));
  v10[1] = CFSTR("eventType");
  v11[1] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v6);
  v10[2] = CFSTR("eventStatus");
  v11[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *a3);
  return sub_10019E128((uint64_t)+[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v11, v10, 3), (uint64_t)"GnssSession");
}

void sub_10002EFB0(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  uint8_t *v18;
  _BYTE v19[688];
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unsigned __int8 v22;
  void *__p;
  char v24;
  std::__shared_weak_count *v25;
  id v26;
  _DWORD v27[4];
  uint8_t buf[4];
  int v29;

  v2 = *(_QWORD **)(a1 + 240);
  if (v2 == (_QWORD *)(a1 + 248))
  {
    v3 = 0;
  }
  else
  {
    do
    {
      v3 = *((_BYTE *)v2 + 903) != 0;
      if (*((_BYTE *)v2 + 903))
        break;
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (_QWORD *)(a1 + 248));
  }
  if (*(unsigned __int8 *)(a1 + 670) != v3)
  {
    *(_BYTE *)(a1 + 670) = v3;
    sub_100129CA0((uint64_t)v19);
    v22 = *(_BYTE *)(a1 + 670);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v7 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      v29 = v22;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Notifying clients of providers active update to %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v27[0] = 67240192;
      v27[1] = v22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Notifying clients of providers active update to %{public}d", v27, 8);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "void CLLocationController::checkActiveProviders()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    *(_DWORD *)buf = 11;
    (*(void (**)(uint64_t, uint8_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v19, 0, 0xFFFFFFFFLL, 0);

    v8 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v24 < 0)
      operator delete(__p);
    v11 = v21;
    if (v21)
    {
      v12 = (unint64_t *)&v21->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v14 = v20;
    if (v20)
    {
      v15 = (unint64_t *)&v20->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
}

void sub_10002F2CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10002F2F8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_101021798(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_1000244F4(a1);
  else
    return 0;
}

uint64_t sub_10002F370(uint64_t a1, wireless_diagnostics::google::protobuf::internal::WireFormatLite *this, unsigned int a3)
{
  char *v5;
  wireless_diagnostics::google::protobuf::io::CodedInputStream *TagFallback;
  int v7;
  _BYTE *v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  char *v13;
  unsigned int v14;
  uint64_t result;
  unsigned int v16[2];

  while (2)
  {
    v5 = (char *)*((_QWORD *)this + 1);
    if ((unint64_t)v5 >= *((_QWORD *)this + 2) || *v5 < 0)
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadTagFallback(this);
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    else
    {
      TagFallback = (wireless_diagnostics::google::protobuf::io::CodedInputStream *)*v5;
      *((_DWORD *)this + 8) = (_DWORD)TagFallback;
      *((_QWORD *)this + 1) = v5 + 1;
      if (!(_DWORD)TagFallback)
        return 1;
    }
    switch(TagFallback >> 3)
    {
      case 1u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_29;
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 8) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 48) |= 1u;
        v8 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v8 >= *((_QWORD *)this + 2) || *v8 != 17)
          continue;
        *((_QWORD *)this + 1) = v8 + 1;
        goto LABEL_14;
      case 2u:
        v7 = TagFallback & 7;
        if (v7 != 1)
          goto LABEL_29;
LABEL_14:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 16) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 48) |= 2u;
        v9 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v9 >= *((_QWORD *)this + 2) || *v9 != 25)
          continue;
        *((_QWORD *)this + 1) = v9 + 1;
LABEL_19:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) == 0)return 0;
        *(_QWORD *)(a1 + 24) = *(_QWORD *)v16;
        *(_DWORD *)(a1 + 48) |= 4u;
        v10 = (_BYTE *)*((_QWORD *)this + 1);
        if ((unint64_t)v10 >= *((_QWORD *)this + 2) || *v10 != 33)
          continue;
        *((_QWORD *)this + 1) = v10 + 1;
LABEL_24:
        *(_QWORD *)v16 = 0;
        if ((wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadLittleEndian64Fallback(this, (unint64_t *)v16) & 1) != 0)
        {
          *(_QWORD *)(a1 + 32) = *(_QWORD *)v16;
          *(_DWORD *)(a1 + 48) |= 8u;
          v12 = (_BYTE *)*((_QWORD *)this + 1);
          v11 = *((_QWORD *)this + 2);
          if ((unint64_t)v12 < v11 && *v12 == 40)
          {
            v13 = v12 + 1;
            *((_QWORD *)this + 1) = v13;
LABEL_33:
            v16[0] = 0;
            if ((unint64_t)v13 >= v11 || *v13 < 0)
            {
              result = wireless_diagnostics::google::protobuf::io::CodedInputStream::ReadVarint32Fallback(this, v16);
              if (!(_DWORD)result)
                return result;
              v14 = v16[0];
            }
            else
            {
              v14 = *v13;
              *((_QWORD *)this + 1) = v13 + 1;
            }
            if (v14 <= 1)
            {
              *(_DWORD *)(a1 + 48) |= 0x10u;
              *(_DWORD *)(a1 + 40) = v14;
            }
            if (*((_QWORD *)this + 1) == *((_QWORD *)this + 2)
              && (*((_DWORD *)this + 11) || *((_DWORD *)this + 6) == *((_DWORD *)this + 10)))
            {
              *((_DWORD *)this + 8) = 0;
              result = 1;
              *((_BYTE *)this + 36) = 1;
              return result;
            }
          }
          continue;
        }
        return 0;
      case 3u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_19;
        goto LABEL_29;
      case 4u:
        v7 = TagFallback & 7;
        if (v7 == 1)
          goto LABEL_24;
        goto LABEL_29;
      case 5u:
        v7 = TagFallback & 7;
        if ((TagFallback & 7) != 0)
          goto LABEL_29;
        v13 = (char *)*((_QWORD *)this + 1);
        v11 = *((_QWORD *)this + 2);
        goto LABEL_33;
      default:
        v7 = TagFallback & 7;
LABEL_29:
        if (v7 == 4)
          return 1;
        if ((wireless_diagnostics::google::protobuf::internal::WireFormatLite::SkipField(this, TagFallback, a3) & 1) == 0)
          return 0;
        continue;
    }
  }
}

void sub_10002F624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint8_t *v15;
  int v16;
  uint64_t v17;
  __int16 v18;
  uint64_t v19;
  __int16 v20;
  uint64_t v21;
  uint8_t buf[1640];

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v6 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v7 = *(_QWORD *)(a2 + 4);
    v8 = *(_QWORD *)(a2 + 12);
    v9 = *(_QWORD *)(a2 + 20);
    *(_DWORD *)buf = 134284033;
    *(_QWORD *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2050;
    *(_QWORD *)&buf[24] = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "request to start indoor,%{private}lf,%{private}lf,%{public}lf", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v11 = *(_QWORD *)(a2 + 4);
    v12 = *(_QWORD *)(a2 + 12);
    v13 = *(_QWORD *)(a2 + 20);
    v16 = 134284033;
    v17 = v11;
    v18 = 2049;
    v19 = v12;
    v20 = 2050;
    v21 = v13;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "request to start indoor,%{private}lf,%{private}lf,%{public}lf", &v16, 32);
    v15 = (uint8_t *)v14;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::startUpdatingLocationAtLocation(const CLLastFix &, const _CLARSessionState)", "%s\n", v14);
    if (v15 != buf)
      free(v15);
  }
  memcpy(buf, &unk_101BB5438, 0x230uLL);
  v10 = objc_msgSend(objc_alloc((Class)CLGpsPosition), "initWithLocation:andPrivateLocation:", a2, buf);
  objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "startUpdatingLocationAtLocation:", v10);

  sub_10004562C(a1, a3);
  sub_1000331B0(a1, 1);
}

void sub_10002F880(int a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLLocationController::onSimulatedNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::onSimulatedNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::onSimulatedNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_1006A7FE4(a4, a1, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10002FA48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10002FA68(uint64_t a1)
{
  *(_QWORD *)a1 = off_102198B20;

  return a1;
}

void sub_10002FAB0(uint64_t a1, int a2, int a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[6];
  int v12;
  int v13;
  os_activity_scope_state_s state;
  char v15;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;

  CLProfilingIdentify("CLDaemonStatus::onBatteryStatusChanged");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v15 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLDaemonStatus::onBatteryStatusChanged", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v17 = 0;
      v18 = 2082;
      v19 = "";
      v20 = 2082;
      v21 = "activity";
      v22 = 2050;
      v23 = a1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLDaemonStatus::onBatteryStatusChanged\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v15 = 0;
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10020F79C;
  v11[3] = &unk_102143548;
  v12 = a2;
  v13 = a3;
  v11[4] = a1;
  v11[5] = a4;
  objc_msgSend(v10, "sync:", v11);
  if (v15)
    os_activity_scope_leave(&state);
}

void sub_10002FCA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10002FCC8(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  void *v8;
  char *v9;
  std::string *v11;
  const std::string::value_type *v12;
  NSObject *v13;
  int v14;
  int v15;
  NSObject *v16;
  _BYTE *v17;
  uint64_t v18;
  _BOOL4 v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  char *v30;
  NSObject *v31;
  int v32;
  int v33;
  const char *v34;
  char *v35;
  uint64_t v36;
  _BYTE *v37;
  char *v38;
  char *v39;
  const char *v40;
  const char *v41;
  char *v42;
  uint64_t v43;
  _BYTE v44[14];
  uint64_t v45;
  char v46;
  int v47;
  _BYTE *v48;
  _BYTE buf[24];
  __int16 v50;
  uint64_t v51;

  *(_BYTE *)(a1 + 16) = 1;
  v4 = a1 + 16;
  *(CFAbsoluteTime *)(a1 + 24) = CFAbsoluteTimeGetCurrent();
  if (*(char *)(v4 + 2383) < 0)
  {
    v5 = *(_QWORD *)(a1 + 2384);
    if (v5)
    {
      v6 = *(char **)(v4 + 2360);
      goto LABEL_6;
    }
LABEL_15:
    v11 = (std::string *)(a1 + 32);
    v12 = "com.apple.locationd";
    goto LABEL_20;
  }
  v5 = *(unsigned __int8 *)(v4 + 2383);
  if (!*(_BYTE *)(v4 + 2383))
    goto LABEL_15;
  v6 = (char *)(v4 + 2360);
LABEL_6:
  if (v5 >= 10)
  {
    v7 = &v6[v5];
    v8 = v6;
    do
    {
      v9 = (char *)memchr(v8, 99, v5 - 9);
      if (!v9)
        break;
      if (*(_QWORD *)v9 == 0x6C7070612E6D6F63 && *((_WORD *)v9 + 4) == 11877)
      {
        if (v9 != v7 && v9 - v6 != -1)
        {
          std::string::operator=((std::string *)(a1 + 32), (const std::string *)(v4 + 2360));
          goto LABEL_21;
        }
        break;
      }
      v8 = v9 + 1;
      v5 = v7 - (_BYTE *)v8;
    }
    while (v7 - (_BYTE *)v8 >= 10);
  }
  v11 = (std::string *)(a1 + 32);
  v12 = "3rdParty";
LABEL_20:
  std::string::assign(v11, v12);
LABEL_21:
  *(_WORD *)(a1 + 1032) = *(_WORD *)(a1 + 2400);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v13 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v14 = *(unsigned __int8 *)(a1 + 1032);
    v15 = *(unsigned __int8 *)(a1 + 1033);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&buf[4] = v14;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gnssawd,IsAccessoryConnected,%d,IsAccessoryYieldingLocations,%d", buf, 0xEu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v32 = *(unsigned __int8 *)(a1 + 1032);
    v33 = *(unsigned __int8 *)(a1 + 1033);
    *(_DWORD *)v44 = 67109376;
    *(_DWORD *)&v44[4] = v32;
    *(_WORD *)&v44[8] = 1024;
    *(_DWORD *)&v44[10] = v33;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,IsAccessoryConnected,%d,IsAccessoryYieldingLocations,%d", v44, 14);
    v35 = (char *)v34;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v16 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    sub_10174E008(v4, buf);
    v17 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v44 = 136315138;
    *(_QWORD *)&v44[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#gnssawd LocationGPSSessionStatistics Metric,%s\n", v44, 0xCu);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v36 = qword_1022A0078;
    sub_10174E008(v4, v44);
    if (v46 >= 0)
      v37 = v44;
    else
      v37 = *(_BYTE **)v44;
    v47 = 136315138;
    v48 = v37;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 2, "#gnssawd LocationGPSSessionStatistics Metric,%s\n", (const char *)&v47);
    v39 = v38;
    if (v46 < 0)
      operator delete(*(void **)v44);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v39);
    if (v39 != buf)
      free(v39);
  }
  v18 = *(_QWORD *)(a1 + 8);
  if (v18)
  {
    v19 = sub_100219670(v18);
    if (!v19 && *(_QWORD *)(a1 + 136) >= 0x3DuLL)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "#gnssawd Submitting gnss session metric to AWD", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        *(_WORD *)v44 = 0;
        LODWORD(v43) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd Submitting gnss session metric to AWD", v44, v43);
        v42 = (char *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
      sub_10174E27C(a1);
      v21 = sub_10073C788();
      sub_100742398(v21, (int *)(a1 + 1328), a1 + 1936);
      sub_100D021A4(a2);
      *(_OWORD *)(a1 + 2336) = 0u;
      if (*(char *)(a1 + 2399) < 0)
      {
        **(_BYTE **)(a1 + 2376) = 0;
        *(_QWORD *)(a1 + 2384) = 0;
      }
      else
      {
        *(_BYTE *)(a1 + 2376) = 0;
        *(_BYTE *)(a1 + 2399) = 0;
      }
      goto LABEL_63;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v23 = *(_QWORD *)(a1 + 136);
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 1026;
      *(_DWORD *)&buf[20] = v19;
      v50 = 2050;
      v51 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#gnssawd Not submitting gnss session metric to AWD\", \"isWifiAssociated\":%{public}hhd, \"sessionDuration\":%{public}llu}", buf, 0x22u);
    }
    *(double *)(a1 + 2304) = *(double *)(a1 + 2304) + (double)*(unint64_t *)(a1 + 136);
    if (*(_BYTE *)(a1 + 2402))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v24 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v25 = *(_QWORD *)(a1 + 2304);
        v26 = *(_QWORD *)(a1 + 136);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v25;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "#gnssca,dailyGnssUsageWithShortOrWiFiAssociatedSessions_s,%{public}.1lf,sessionDur,%{public}llu", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v27 = *(_QWORD *)(a1 + 2304);
        v28 = *(_QWORD *)(a1 + 136);
        *(_DWORD *)v44 = 134349312;
        *(_QWORD *)&v44[4] = v27;
        *(_WORD *)&v44[12] = 2050;
        v45 = v28;
        LODWORD(v43) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,dailyGnssUsageWithShortOrWiFiAssociatedSessions_s,%{public}.1lf,sessionDur,%{public}llu", v44, v43);
        v30 = (char *)v29;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v29);
LABEL_81:
        if (v30 != buf)
          free(v30);
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#gnssawd fWifiServiceClient == nullptr", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      *(_WORD *)v44 = 0;
      LODWORD(v43) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd fWifiServiceClient == nullptr", v44, v43);
      v30 = (char *)v40;
      sub_100512490("Generic", 1, 0, 0, "void CLGnssAWD::submitSessionStats(GNSS::PersistentDiagnostics &)", "%s\n", v40);
      goto LABEL_81;
    }
  }
LABEL_63:
  sub_10001AA74(a1);
}

void sub_10003060C(uint64_t a1, uint64_t a2)
{
  void *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  NSObject *v14;
  const char *v15;
  uint8_t *v16;
  uint8_t *v17;
  CFTypeRef v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  v3 = objc_autoreleasePoolPush();
  if (qword_10229FD20 != -1)
    dispatch_once(&qword_10229FD20, &stru_102172818);
  v4 = qword_10229FD28;
  if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Saving daemon cache for MotionGyroDaily AWD metrics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    LOWORD(v19[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "Saving daemon cache for MotionGyroDaily AWD metrics", v19, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  v18 = 0;
  v5 = sub_1001FD94C();
  v6 = sub_100219F40(v5, (uint64_t)CFSTR("MotionGyroDaily"), &v18);
  if ((v6 & 1) != 0)
  {
    sub_100022408(v6, a2);
    v7 = sub_1001FD94C();
    sub_10023EC14(v7);
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v8 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_DWORD *)(a2 + 44);
      v10 = *(_DWORD *)(a2 + 48);
      *(_DWORD *)buf = 67109376;
      v23 = v9;
      v24 = 1024;
      v25 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "magnitude,%d,activeMins,%d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102172818);
      v11 = *(_DWORD *)(a2 + 44);
      v12 = *(_DWORD *)(a2 + 48);
      v19[0] = 67109376;
      v19[1] = v11;
      v20 = 1024;
      v21 = v12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 2, "magnitude,%d,activeMins,%d", v19);
LABEL_28:
      v17 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLDeviceMotionAWDAggregator::storeCache(const CLDaemonStats_Type::MotionGyroDaily &)", "%s\n", v13);
      if (v17 != buf)
        free(v17);
    }
  }
  else
  {
    if (qword_10229FD20 != -1)
      dispatch_once(&qword_10229FD20, &stru_102172818);
    v14 = qword_10229FD28;
    if (os_log_type_enabled((os_log_t)qword_10229FD28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning daemon cache does not exist!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD20 != -1)
        dispatch_once(&qword_10229FD20, &stru_102172818);
      LOWORD(v19[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD28, 0, "#Warning daemon cache does not exist!");
      goto LABEL_28;
    }
  }
  objc_autoreleasePoolPop(v3);
}

void sub_100030A38(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  _WORD v14[8];
  _QWORD v15[3];
  _QWORD *v16;
  uint8_t buf[1640];

  v2 = (_BYTE *)(a1 + 6176);
  if (!*(_BYTE *)(a1 + 6177))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v3 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "CLAccessory,registered for unfiltered location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v14[0] = 0;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,registered for unfiltered location notifications", v14, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::registerForNotifications()", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 10, 0);
    v2[1] = 1;
  }
  if (!*(_BYTE *)(a1 + 1912))
  {
    if (qword_1022A0000 != -1)
      dispatch_once(&qword_1022A0000, &stru_1021506B8);
    v4 = qword_1022A0008;
    if (os_log_type_enabled((os_log_t)qword_1022A0008, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLAccessory,registered for propagated location notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0000 != -1)
        dispatch_once(&qword_1022A0000, &stru_1021506B8);
      v14[0] = 0;
      LODWORD(v11) = 2;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0008, 2, "CLAccessory,registered for propagated location notifications", v14, v11);
      sub_100512490("Generic", 1, 0, 2, "void CLAccessoryLocationProvider::registerForNotifications()", "%s\n", v10);
      if (v10 != (char *)buf)
        free(v10);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 1312) + 16), "register:forNotification:registrationInfo:", *(_QWORD *)(*(_QWORD *)(a1 + 1312) + 8), 27, 0);
    *(_BYTE *)(a1 + 1912) = 1;
  }
  if (!*v2)
  {
    v5 = sub_10022B068();
    if (byte_102303BAF < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_102303B98, *((unint64_t *)&xmmword_102303B98 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102303B98;
      v13 = unk_102303BA8;
    }
    v6 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "queue");
    v15[0] = off_1021507B8;
    v15[1] = a1;
    v16 = v15;
    sub_10001CFEC(v5, (char *)__p, (uint64_t)v6, (uint64_t)v15);
    v7 = v16;
    if (v16 == v15)
    {
      v8 = 4;
      v7 = v15;
    }
    else
    {
      if (!v16)
      {
LABEL_24:
        if (SHIBYTE(v13) < 0)
          operator delete(__p[0]);
        *v2 = 1;
        return;
      }
      v8 = 5;
    }
    (*(void (**)(void))(*v7 + 8 * v8))();
    goto LABEL_24;
  }
}

void sub_100030E0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,char *a23)
{
  char *v23;
  char *v25;
  uint64_t v26;

  v25 = a23;
  if (a23 == v23)
  {
    v26 = 4;
    v25 = &a20;
  }
  else
  {
    if (!a23)
      goto LABEL_6;
    v26 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v25 + 8 * v26))();
LABEL_6:
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

NSDictionary *sub_100030E64(uint64_t a1)
{
  _QWORD v2[2];
  _QWORD v3[2];

  v2[1] = CFSTR("outcome");
  v3[0] = CFSTR("na");
  v2[0] = CFSTR("trigger");
  v3[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  return +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v3, v2, 2);
}

void sub_100030EF8(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  id v8;
  id v9;
  void *v10;
  BOOL v11;
  NSObject *v12;
  CLConnectionMessage *v13;
  NSObject *v14;
  double v15;
  double v16;
  double v17;
  double v18;
  CLOSTransaction *v19;
  void *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  _QWORD v32[6];
  std::__shared_weak_count *v33;
  _WORD v34[8];
  uint64_t v35;
  _UNKNOWN **v36;
  uint64_t v37;
  _UNKNOWN **v38;
  uint64_t v39;
  _UNKNOWN **v40;
  uint8_t buf[8];
  char v42;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_1001CD634() & 1) == 0)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v14 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "query for motion activity was received but motion activity is not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102196B00);
      v34[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "query for motion activity was received but motion activity is not available", v34, 2);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLMotionActivitySubscription::handleMessageMotionActivityQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    v6 = *(CLConnectionMessage **)a2;
    v39 = CMErrorMessage;
    v40 = &off_10221C458;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
    goto LABEL_21;
  }
  v5 = sub_1001BBC08(a1);
  v6 = *(CLConnectionMessage **)a2;
  if ((v5 & 1) == 0)
  {
    v37 = CMErrorMessage;
    v38 = &off_10221C470;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v38, &v37, 1);
LABEL_21:
    CLConnectionMessage::sendReply(v6);
    goto LABEL_22;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*(CLConnectionMessage **)a2);
  v8 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMMotionActivityStartTime);
  v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMMotionActivityStopTime);
  v10 = v9;
  if (v8)
    v11 = v9 == 0;
  else
    v11 = 1;
  if (v11)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_102196B00);
    v12 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_102196B00);
      v34[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 17, "Programmer error: Wrong parameters were passed!", v34, 2);
      v31 = (uint8_t *)v30;
      sub_100512490("Generic", 1, 0, 0, "void CLMotionActivitySubscription::handleMessageMotionActivityQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v30);
      if (v31 != buf)
        free(v31);
    }
    v13 = *(CLConnectionMessage **)a2;
    v35 = CMErrorMessage;
    v36 = &off_10221C488;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v36, &v35, 1);
    CLConnectionMessage::sendReply(v13);
  }
  else
  {
    objc_msgSend(v8, "doubleValue");
    v16 = v15;
    objc_msgSend(v10, "doubleValue");
    v18 = v17;
    v19 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLDaemonClient.MotionActivityQuery");
    v20 = *(void **)(*(_QWORD *)(a1 + 48) + 16);
    sub_1015A2E04(buf, "com.apple.locationd.activity");
    v21 = sub_1002255E0(a1);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3321888768;
    v32[2] = sub_10000A070;
    v32[3] = &unk_102196A80;
    v22 = *(std::__shared_weak_count **)(a2 + 8);
    v32[5] = *(_QWORD *)a2;
    v33 = v22;
    if (v22)
    {
      p_shared_owners = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(p_shared_owners);
      while (__stxr(v24 + 1, p_shared_owners));
    }
    v32[4] = v19;
    objc_msgSend(v20, "queryMotionStatesWithStartTime:endTime:isFromInternalClient:withReply:", v21, v32, v16, v18);
    if (v42 < 0)
      operator delete(*(void **)buf);
    v25 = v33;
    if (v33)
    {
      v26 = (unint64_t *)&v33->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
LABEL_22:

}

void sub_100031404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  _Unwind_Resume(a1);
}

void sub_1000314C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 v21;
  uint8_t buf[520];
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;

  *(_BYTE *)(a1 + 1536) = 0;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v2 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition,stop\"}", buf, 0x12u);
  }
  sub_1000205E8((char *)a1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v3 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, Clearing info in CPI handler\"}", buf, 0x12u);
  }
  sub_10023F264(a1 + 72);
  *(_DWORD *)(a1 + 4656) = 0xFFFF;
  *(_QWORD *)(a1 + 4668) = 0;
  *(_QWORD *)(a1 + 4660) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 4676) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 4692) = _Q0;
  *(_OWORD *)(a1 + 4708) = _Q0;
  *(_OWORD *)(a1 + 4724) = _Q0;
  *(_DWORD *)(a1 + 4740) = 0;
  *(_QWORD *)(a1 + 4744) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 4760) = 0;
  *(_QWORD *)(a1 + 4752) = 0;
  *(_DWORD *)(a1 + 4768) = 0;
  *(_QWORD *)(a1 + 4772) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4780) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 4784) = 0;
  *(_QWORD *)(a1 + 4800) = 0;
  *(_QWORD *)(a1 + 4792) = 0;
  *(_BYTE *)(a1 + 4808) = 0;
  *(_DWORD *)(a1 + 4812) = 0xFFFF;
  *(_QWORD *)(a1 + 4824) = 0;
  *(_QWORD *)(a1 + 4816) = 0;
  v21 = _Q0;
  *(_OWORD *)(a1 + 4832) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 4848) = _Q0;
  *(_OWORD *)(a1 + 4864) = _Q0;
  *(_OWORD *)(a1 + 4880) = _Q0;
  *(_DWORD *)(a1 + 4896) = 0;
  *(_QWORD *)(a1 + 4900) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4924) = 0;
  *(_QWORD *)(a1 + 4908) = 0;
  *(_QWORD *)(a1 + 4916) = 0;
  *(_QWORD *)(a1 + 4928) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 4936) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 4948) = 0;
  *(_QWORD *)(a1 + 4956) = 0;
  *(_QWORD *)(a1 + 4940) = 0;
  *(_BYTE *)(a1 + 4964) = 0;
  sub_10012A33C(buf);
  memcpy((void *)(a1 + 4968), buf, 0x201uLL);
  sub_1002B7674(a1 + 5488, &v23);
  v9 = v26;
  *(_OWORD *)(a1 + 5552) = v27;
  v10 = v29;
  *(_OWORD *)(a1 + 5568) = v28;
  *(_OWORD *)(a1 + 5584) = v10;
  v11 = v25;
  *(_OWORD *)(a1 + 5504) = v24;
  *(_OWORD *)(a1 + 5520) = v11;
  *(_BYTE *)(a1 + 5600) = v30;
  *(_OWORD *)(a1 + 5536) = v9;
  v12 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v13 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_DWORD *)(a1 + 5608) = 0xFFFF;
  *(_QWORD *)(a1 + 5620) = 0;
  *(_QWORD *)(a1 + 5612) = 0;
  *(_OWORD *)(a1 + 5628) = xmmword_101BAFC90;
  *(_OWORD *)(a1 + 5644) = v21;
  *(_OWORD *)(a1 + 5660) = v21;
  *(_OWORD *)(a1 + 5676) = v21;
  *(_DWORD *)(a1 + 5692) = 0;
  *(_QWORD *)(a1 + 5696) = 0xBFF0000000000000;
  *(_QWORD *)(a1 + 5712) = 0;
  *(_QWORD *)(a1 + 5704) = 0;
  *(_DWORD *)(a1 + 5720) = 0;
  *(_QWORD *)(a1 + 5724) = 0xBFF0000000000000;
  *(_DWORD *)(a1 + 5732) = 0x7FFFFFFF;
  *(_QWORD *)(a1 + 5736) = 0;
  *(_QWORD *)(a1 + 5752) = 0;
  *(_QWORD *)(a1 + 5744) = 0;
  *(_BYTE *)(a1 + 5760) = 0;
  sub_10012A33C(buf);
  memcpy((void *)(a1 + 5768), buf, 0x201uLL);
  sub_1002B7674(a1 + 6288, &v23);
  v15 = v26;
  *(_OWORD *)(a1 + 6352) = v27;
  v16 = v29;
  *(_OWORD *)(a1 + 6368) = v28;
  *(_OWORD *)(a1 + 6384) = v16;
  v17 = v25;
  *(_OWORD *)(a1 + 6304) = v24;
  *(_OWORD *)(a1 + 6320) = v17;
  *(_BYTE *)(a1 + 6400) = v30;
  *(_OWORD *)(a1 + 6336) = v15;
  v18 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
  if (*((_QWORD *)&v23 + 1))
  {
    v19 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_DWORD *)(a1 + 11552) = 0;
  *(_BYTE *)(a1 + 1572) = 0;
}

void sub_100031898(uint64_t a1)
{
  double v2;
  double v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  const char *v21;
  uint8_t *v22;
  _BYTE v23[44];
  __int128 v24;
  CFAbsoluteTime Current;
  int v26;
  CFAbsoluteTime v27;
  double v28;
  double v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void *__p;
  char v33;
  std::__shared_weak_count *v34;
  id v35;
  int v36;
  CFAbsoluteTime v37;
  __int16 v38;
  double v39;
  __int16 v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  __int16 v44;
  double v45;
  __int16 v46;
  uint64_t v47;
  __int16 v48;
  double v49;
  uint8_t buf[4];
  CFAbsoluteTime v51;
  __int16 v52;
  double v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  double v63;

  *(_DWORD *)buf = 0;
  if (sub_1001B7864(a1, (int *)buf, 1))
  {
    if (*(double *)(a1 + 3248) >= 0.0 && *(double *)(a1 + 3272) >= 0.0)
    {
      v2 = sub_1001FCBB4();
      v3 = v2 - *(double *)(a1 + 3248);
      if (v3 >= 3.0)
      {
        sub_100129CA0((uint64_t)v23);
        Current = CFAbsoluteTimeGetCurrent();
        v26 = 1;
        v27 = Current;
        v28 = sub_100078B88();
        v29 = v2;
        v4 = v2 - *(double *)(a1 + 3272);
        if (v4 <= 15.0)
        {
          v24 = *(_OWORD *)(a1 + 3256);
          *(double *)(a1 + 3272) = v2;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v5 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          v6 = *(_QWORD *)(a1 + 3248);
          v7 = *(_QWORD *)(a1 + 3272);
          v8 = *(_QWORD *)(a1 + 3256);
          *(_DWORD *)buf = 134350592;
          v51 = Current;
          v52 = 2050;
          v53 = v2;
          v54 = 2050;
          v55 = v6;
          v56 = 2050;
          v57 = v7;
          v58 = 2050;
          v59 = v3;
          v60 = 2050;
          v61 = v8;
          v62 = 2050;
          v63 = v4;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "DeadReckoning,%{public}.1lf,Notification sent,currentTime,%{public}.1lf,fLastPositionTimeStamp,%{public}.1lf,fLastGoodSpeedTime,%{public}.1lf,locTimeDiff,%{public}.1lf,fLastGoodSpeed,%{public}.1lf,velTimeDiff,%{public}.1lf", buf, 0x48u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102189B38);
          v18 = *(_QWORD *)(a1 + 3248);
          v19 = *(_QWORD *)(a1 + 3272);
          v20 = *(_QWORD *)(a1 + 3256);
          v36 = 134350592;
          v37 = Current;
          v38 = 2050;
          v39 = v2;
          v40 = 2050;
          v41 = v18;
          v42 = 2050;
          v43 = v19;
          v44 = 2050;
          v45 = v3;
          v46 = 2050;
          v47 = v20;
          v48 = 2050;
          v49 = v4;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "DeadReckoning,%{public}.1lf,Notification sent,currentTime,%{public}.1lf,fLastPositionTimeStamp,%{public}.1lf,fLastGoodSpeedTime,%{public}.1lf,locTimeDiff,%{public}.1lf,fLastGoodSpeed,%{public}.1lf,velTimeDiff,%{public}.1lf", &v36, 72);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::onGNSSOutage()", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        *(_DWORD *)buf = 26;
        (*(void (**)(uint64_t, uint8_t *, _BYTE *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v23, 0, 0xFFFFFFFFLL, 0);

        v9 = v34;
        if (v34)
        {
          p_shared_owners = (unint64_t *)&v34->__shared_owners_;
          do
            v11 = __ldaxr(p_shared_owners);
          while (__stlxr(v11 - 1, p_shared_owners));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        if (v33 < 0)
          operator delete(__p);
        v12 = v31;
        if (v31)
        {
          v13 = (unint64_t *)&v31->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v15 = v30;
        if (v30)
        {
          v16 = (unint64_t *)&v30->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v15);
          }
        }
      }
    }
  }
}

void sub_100031C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100031C94(uint64_t a1)
{
  double v2;
  double v3;
  _BOOL4 v4;
  NSObject *v5;
  const char *v6;
  char *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  NSObject *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  NSObject *v34;
  std::__shared_weak_count *v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  const char *v38;
  char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  char *v43;
  uint64_t v44;
  uint8_t v45[4];
  _BYTE v46[14];
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;
  int v59;
  double v60;
  _BYTE v61[24];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  int v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  _BYTE v76[528];
  std::__shared_weak_count *v77;
  _BYTE buf[48];
  __int128 v79;
  _BYTE v80[32];
  __int128 v81;
  __int128 v82;
  _OWORD v83[2];
  _BYTE v84[513];
  uint64_t v85;
  std::__shared_weak_count *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  char v93;

  if (*(_BYTE *)(a1 + 1112))
  {
    v2 = sub_1001FCBB4() - *(double *)(a1 + 1120);
    v3 = sub_1001FCBB4() - *(double *)(a1 + 1128);
    if (v2 >= 600.0 && v3 >= 600.0)
    {
      v4 = sub_100182290(a1 + 120)
        && *(_DWORD *)(a1 + 252) == 1
        && sub_1001FC7BC(a1 + 120, a1 + 280) < 259200.0;
      v59 = 0xFFFF;
      *(_QWORD *)v61 = 0;
      v60 = 0.0;
      *(_OWORD *)&v61[8] = xmmword_101BAFC90;
      __asm { FMOV            V0.2D, #-1.0 }
      v62 = _Q0;
      v63 = _Q0;
      v64 = _Q0;
      v65 = 0;
      v67 = 0;
      v68 = 0;
      v66 = 0xBFF0000000000000;
      v70 = 0xBFF0000000000000;
      v69 = 0;
      v71 = 0x7FFFFFFF;
      v73 = 0;
      v74 = 0;
      v72 = 0;
      v75 = 0;
      sub_10012A33C(v76);
      if (sub_10022D584(a1, (uint64_t)&v59))
      {
        if (!v4)
        {
LABEL_34:
          if (sub_1001FC7BC((uint64_t)&v59, (uint64_t)v76) > 259200.0)
          {
            sub_1014AE4B4(a1);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            v16 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,deleted old reference position", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021B9A18);
              *(_WORD *)v45 = 0;
              LODWORD(v44) = 2;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,deleted old reference position", v45, v44);
              v18 = (char *)v17;
              sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v17);
              if (v18 != buf)
                free(v18);
            }
          }
          goto LABEL_64;
        }
        if (*(double *)(a1 + 196) <= *((double *)&v64 + 1))
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          v15 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no new position assistance", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_1021B9A18);
            *(_WORD *)v45 = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no new position assistance", v45, 2);
            v43 = (char *)v42;
            sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v42);
            if (v43 != buf)
              free(v43);
          }
          goto LABEL_34;
        }
      }
      else if (!v4)
      {
LABEL_64:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v34 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no valid cached reference position", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021B9A18);
          *(_WORD *)v45 = 0;
          LODWORD(v44) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,no valid cached reference position", v45, v44);
          v39 = (char *)v38;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v38);
          if (v39 != buf)
            free(v39);
        }
LABEL_69:
        v35 = v77;
        if (v77)
        {
          p_shared_owners = (unint64_t *)&v77->__shared_owners_;
          do
            v37 = __ldaxr(p_shared_owners);
          while (__stlxr(v37 - 1, p_shared_owners));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 134349568;
        *(_QWORD *)&buf[4] = *((_QWORD *)&v64 + 1);
        *(_WORD *)&buf[12] = 1026;
        *(_DWORD *)&buf[14] = v67;
        *(_WORD *)&buf[18] = 2050;
        *(_QWORD *)&buf[20] = *(_QWORD *)&v61[8];
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,currentStoredRefPos,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", buf, 0x1Cu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        *(_DWORD *)v45 = 134349568;
        *(_QWORD *)v46 = *((_QWORD *)&v64 + 1);
        *(_WORD *)&v46[8] = 1026;
        *(_DWORD *)&v46[10] = v67;
        v47 = 2050;
        v48 = *(_QWORD *)&v61[8];
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,currentStoredRefPos,timestamp,%{public}.1lf,type,%{public}d,hunc,%{public}.lf", v45, 28);
        v41 = (char *)v40;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v40);
        if (v41 != buf)
          free(v41);
      }
      v20 = *(_OWORD *)(a1 + 232);
      v81 = *(_OWORD *)(a1 + 216);
      v82 = v20;
      v83[0] = *(_OWORD *)(a1 + 248);
      *(_OWORD *)((char *)v83 + 12) = *(_OWORD *)(a1 + 260);
      v21 = *(_OWORD *)(a1 + 168);
      *(_OWORD *)&buf[32] = *(_OWORD *)(a1 + 152);
      v79 = v21;
      v22 = *(_OWORD *)(a1 + 200);
      *(_OWORD *)v80 = *(_OWORD *)(a1 + 184);
      *(_OWORD *)&v80[16] = v22;
      v23 = *(_OWORD *)(a1 + 136);
      *(_OWORD *)buf = *(_OWORD *)(a1 + 120);
      *(_OWORD *)&buf[16] = v23;
      memcpy(v84, (const void *)(a1 + 280), sizeof(v84));
      v85 = *(_QWORD *)(a1 + 800);
      v24 = *(std::__shared_weak_count **)(a1 + 808);
      v86 = v24;
      if (v24)
      {
        v25 = (unint64_t *)&v24->__shared_owners_;
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      v27 = *(_OWORD *)(a1 + 896);
      v91 = *(_OWORD *)(a1 + 880);
      v92 = v27;
      v28 = *(_OWORD *)(a1 + 832);
      v87 = *(_OWORD *)(a1 + 816);
      v88 = v28;
      v29 = *(_OWORD *)(a1 + 864);
      v89 = *(_OWORD *)(a1 + 848);
      v90 = v29;
      v93 = *(_BYTE *)(a1 + 912);
      if (sub_100187ED8(a1, (uint64_t)buf))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021B9A18);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)v45 = 68290563;
          *(_DWORD *)v46 = 0;
          *(_WORD *)&v46[4] = 2082;
          *(_QWORD *)&v46[6] = "";
          v47 = 2050;
          v48 = *(_QWORD *)&v80[12];
          v49 = 2049;
          v50 = *(_QWORD *)&buf[4];
          v51 = 2049;
          v52 = *(_QWORD *)&buf[12];
          v53 = 2050;
          v54 = *(_QWORD *)&buf[28];
          v55 = 2050;
          v56 = *(_QWORD *)&buf[20];
          v57 = 2050;
          v58 = *(_QWORD *)&buf[36];
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssRefPosMaintenance,storeReferencePositionToDisk,stored\", \"timestamp\":\"%{public}.1f\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\"}", v45, 0x4Eu);
        }
        *(double *)(a1 + 1120) = sub_1001FCBB4();
      }
      v31 = v86;
      if (v86)
      {
        v32 = (unint64_t *)&v86->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      goto LABEL_69;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v8 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)&buf[4] = v2;
      *(_WORD *)&buf[12] = 2050;
      *(double *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not stored,timeSinceLastRefPosStorage,%{public}.1lf,timeSinceRefPosLoadFromDisk_s,%{public}.1lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      v59 = 134349312;
      v60 = v2;
      *(_WORD *)v61 = 2050;
      *(double *)&v61[2] = v3;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not stored,timeSinceLastRefPosStorage,%{public}.1lf,timeSinceRefPosLoadFromDisk_s,%{public}.1lf", &v59, 22);
      v7 = (char *)v9;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v9);
LABEL_23:
      if (v7 != buf)
        free(v7);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021B9A18);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not storing as device is locked", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021B9A18);
      LOWORD(v59) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#GnssRefPosMaintenance,storeReferencePositionToDisk,not storing as device is locked", &v59, 2);
      v7 = (char *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssRefPosMaintenance::storeCachedReferencePositionToDisk()", "%s\n", v6);
      goto LABEL_23;
    }
  }
}

void sub_1000327C8(_Unwind_Exception *a1)
{
  sub_100261F44((uint64_t)&STACK[0x308]);
  _Unwind_Resume(a1);
}

void sub_100032808(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  NSObject *v5;
  NSObject *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  os_activity_scope_state_s v14;
  uint8_t buf[4];
  int v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  int v26;

  v3 = *a2;
  v4 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  v5 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageMarkAsHavingReceivedLocation", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v5, &v14);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v6 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v7 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v16 = 0;
    v17 = 2082;
    v18 = "";
    v19 = 2082;
    v20 = "activity";
    v21 = 2050;
    v22 = v3;
    v23 = 1026;
    v24 = 1;
    v25 = 1026;
    v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageMarkAsHavingReceivedLocation\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    sub_10001DA54(v3);
    if (!v4)
    {
      os_activity_scope_leave(&v14);
      return;
    }
    v10 = (unint64_t *)&v4->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    os_activity_scope_leave(&v14);
  }
  else
  {
    os_activity_scope_leave(&v14);
    if (!v4)
      return;
  }
  v12 = (unint64_t *)&v4->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100032A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, os_activity_scope_state_s a9)
{
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v12;

  if (v9)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
    os_activity_scope_leave(&a9);
  }
  _Unwind_Resume(a1);
}

void sub_100032A7C(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  CLConnectionMessage *v15[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  __int16 v27;
  int v28;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageRequestAuthorization", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2082;
    v22 = "activity";
    v23 = 2050;
    v24 = v3;
    v25 = 1026;
    v26 = 1;
    v27 = 1026;
    v28 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageRequestAuthorization\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  if (*(_BYTE *)(v3 + 72))
  {
    v15[0] = v5;
    v15[1] = v4;
    if (v4)
    {
      v9 = (unint64_t *)((char *)v4 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    sub_1000397FC(v3, v15);
    if (!v4)
    {
      os_activity_scope_leave(&state);
      return;
    }
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
  }
  else
  {
    os_activity_scope_leave(&state);
    if (!v4)
      return;
  }
  v13 = (unint64_t *)((char *)v4 + 8);
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
}

void sub_100032C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_100032CF8(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessagePressureBias", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessagePressureBias\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_1002436AC((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_100032EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_100032F54(uint64_t a1, uint64_t *a2, CLConnectionMessage **a3)
{
  uint64_t v3;
  CLConnectionMessage *v4;
  CLConnectionMessage *v5;
  NSObject *v6;
  NSObject *v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  CLConnectionMessage *v14[2];
  os_activity_scope_state_s state;
  uint8_t buf[4];
  int v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;

  v3 = *a2;
  v5 = *a3;
  v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: kCLConnectionMessageGmm", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v7 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = *(unsigned __int8 *)(v3 + 72);
    *(_DWORD *)buf = 68290050;
    v17 = 0;
    v18 = 2082;
    v19 = "";
    v20 = 2082;
    v21 = "activity";
    v22 = 2050;
    v23 = v3;
    v24 = 1026;
    v25 = 0;
    v26 = 1026;
    v27 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"kCLConnectionMessageGmm\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\", \"registrationRequired\":%{public}hhd, \"registrationReceived\":%{public}hhd}", buf, 0x32u);
  }
  v14[0] = v5;
  v14[1] = v4;
  if (v4)
  {
    v9 = (unint64_t *)((char *)v4 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  sub_100BA35B4((_QWORD *)v3, v14);
  if (v4)
  {
    v11 = (unint64_t *)((char *)v4 + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
    os_activity_scope_leave(&state);
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      (*(void (**)(CLConnectionMessage *))(*(_QWORD *)v4 + 16))(v4);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
}

void sub_10003313C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, os_activity_scope_state_s state)
{
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v14;

  if (v11)
  {
    sub_1019217CC();
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  else
  {
    os_activity_scope_leave(&state);
  }
  _Unwind_Resume(a1);
}

void sub_1000331B0(uint64_t a1, char a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  int v13;
  int v14[172];
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  int v17;
  char v18;
  void *v19;
  char v20;
  std::__shared_weak_count *v21;
  id v22;

  v14[0] = 11;
  if (sub_1001B7864(a1, v14, 1))
  {
    sub_100129CA0((uint64_t)v14);
    v17 = 10;
    v18 = a2;
    v13 = 11;
    (*(void (**)(uint64_t, int *, int *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v13, v14, 1, 0xFFFFFFFFLL, 0);

    v4 = v21;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v6 = __ldaxr(p_shared_owners);
      while (__stlxr(v6 - 1, p_shared_owners));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    if (v20 < 0)
      operator delete(v19);
    v7 = v16;
    if (v16)
    {
      v8 = (unint64_t *)&v16->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
}

void sub_1000332FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100033314(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = (unint64_t)"N31CLGeomagneticModelProvider_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D7D28);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGeomagneticModelProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

void sub_1000336A0(uint64_t a1)
{
  uint64_t v2;
  void *v3[2];
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  __int128 __dst;
  uint64_t v9;

  if (*(char *)(a1 + 1847) < 0)
  {
    sub_100115CE4(&__dst, *(void **)(a1 + 1824), *(_QWORD *)(a1 + 1832));
  }
  else
  {
    __dst = *(_OWORD *)(a1 + 1824);
    v9 = *(_QWORD *)(a1 + 1840);
  }
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 176))(a1, &__dst);
  if (SHIBYTE(v9) < 0)
    operator delete((void *)__dst);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 64))(&v5, a1);
  if (*(char *)(v5 + 47) < 0)
  {
    sub_100115CE4(__p, *(void **)(v5 + 24), *(_QWORD *)(v5 + 32));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v5 + 24);
    v7 = *(_QWORD *)(v5 + 40);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 72))(a1, __p);
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  v2 = v5;
  v5 = 0;
  if (v2)
    sub_10085B928((uint64_t)&v5, v2);
  if (*(char *)(a1 + 1823) < 0)
  {
    sub_100115CE4(v3, *(void **)(a1 + 1800), *(_QWORD *)(a1 + 1808));
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)(a1 + 1800);
    v4 = *(_QWORD *)(a1 + 1816);
  }
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 160))(a1, v3);
  if (SHIBYTE(v4) < 0)
    operator delete(v3[0]);
}

void sub_1000337E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v22;

  v22 = a15;
  a15 = 0;
  if (v22)
    sub_10085B928((uint64_t)&a15, v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033848(uint64_t a1, void **a2, uint64_t a3)
{
  void *v6;
  NSString *v7;
  id v8;
  _QWORD v10[10];
  std::string __p;
  void *__dst[2];
  void *v13;
  _QWORD v14[6];
  uint64_t v15[10];

  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = *a2;
  v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6);
  v8 = objc_msgSend(objc_msgSend(*(id *)(a1 + 72), "silo"), "newTimer");
  v14[0] = 0;
  v14[1] = v14;
  v14[2] = 0x8012000000;
  v14[3] = sub_1002070F0;
  v14[4] = sub_100207C18;
  v14[5] = &unk_102080316;
  if (*((char *)a2 + 23) < 0)
  {
    sub_100115CE4(__dst, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a2;
    v13 = a2[2];
  }
  if (*(char *)(a3 + 23) < 0)
    sub_100115CE4(&__p, *(void **)a3, *(_QWORD *)(a3 + 8));
  else
    __p = *(std::string *)a3;
  sub_1001FA3D8(&__p, (_QWORD *)a1, (uint64_t)__dst, 3, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete(__dst[0]);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_100C1F770;
  v10[3] = &unk_10217A940;
  v10[6] = v14;
  v10[7] = a1;
  v10[4] = v8;
  v10[5] = v7;
  v10[8] = a2;
  v10[9] = a3;
  objc_msgSend(v8, "setHandler:", v10);
  objc_msgSend(v8, "setNextFireDelay:", 10.0);
  sub_1001FA380(a1, (uint64_t *)a2);
  objc_msgSend(*(id *)(a1 + 64), "setObject:forKeyedSubscript:", v8, v7);
  _Block_object_dispose(v14, 8);
  return sub_1001FA090((uint64_t)v15);
}

void sub_100033A04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100033A54(uint64_t a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000FF154(a1 + 2576);
  v4 = sub_100103BB0(a2);
  if ((v4 & 1) == 0)
    sub_10180AC90(v4, v5, v6);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = a2;
  return sub_1000FF8D8(a1 + 2176, 2);
}

void sub_100033AA4(uint64_t a1)
{
  void **v1;

  v1 = (void **)(a1 + 40);
  sub_100279AA4(&v1);
}

double sub_100033ACC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  double result;
  void *__p[2];
  char v10;

  sub_1015A2E04(__p, "ff:ff:ff:ff:ff:ff");
  v2 = sub_1000CC740((uint64_t)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  sub_100033C18(v2, (uint64_t)__p);
  sub_100033B80((uint64_t)__p, a1);
  *(int64x2_t *)a1 = vdupq_n_s64(0xC066800000000000);
  *(_QWORD *)(a1 + 16) = 0xC07F400000000000;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 32) = _Q0;
  *(_QWORD *)&result = 0xFFFFFFFFLL;
  *(_QWORD *)(a1 + 52) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 88) = 0;
  return result;
}

void sub_100033B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

int32x2_t sub_100033B80@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  int32x2_t result;

  if (sub_100033C08(a1))
    v4 = sub_100219A9C(a1);
  else
    v4 = -1;
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_DWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 80);
  v8 = *(_QWORD *)a1;
  v9 = *(_BYTE *)(a1 + 88) != 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  result = vrev64_s32(*(int32x2_t *)(a1 + 48));
  *(int32x2_t *)(a2 + 48) = result;
  *(_DWORD *)(a2 + 56) = v6;
  *(_QWORD *)(a2 + 64) = v7;
  *(_QWORD *)(a2 + 72) = v8;
  *(_BYTE *)(a2 + 88) = v9;
  return result;
}

BOOL sub_100033C08(uint64_t a1)
{
  return *(_DWORD *)(a1 + 76) != -1;
}

double sub_100033C18@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a2 + 32) = _Q0;
  result = NAN;
  *(_QWORD *)(a2 + 48) = -1;
  *(_DWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a2 + 76) = -1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_DWORD *)(a2 + 92) = -1;
  return result;
}

uint64_t sub_100033D10(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v7;
  int v9;
  int v10;

  v7 = sub_1000B3638(a4, a2);
  if (v7)
  {
    v10 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *, id))(*(_QWORD *)a1 + 96))(a1, a2, &v10, v7);
  }
  else
  {
    v9 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 88))(a1, a2, &v9);
  }
}

uint64_t sub_100033D90(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _BYTE buf[12];
  __int16 v45;
  int v46;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        buf[0] = 0;
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _BYTE *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100649DE8();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022A3881;
        HIDWORD(v38) = v17;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021495C8);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    v45 = 1026;
    v46 = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021495C8);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLDaemonStatus_Type::Notification, CLDaemonStatus_Type::NotificationData, char, char>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLDaemonStatus_Type::Notification, NotificationData_T = CLDaemonStatus_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_1000341EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A3880);
}

void sub_100034200()
{
  operator new();
}

void sub_1000342DC()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 + 96))
  {
    if (*(char *)(v0 + 39) < 0)
      operator delete(*(void **)(v0 + 16));
  }
  operator delete();
}

void sub_100034320(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  uint64_t *v9;
  NSObject *v10;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  __int16 v17;
  int v18;
  uint8_t buf[4];
  _QWORD *v20;
  __int16 v21;
  int v22;

  HIDWORD(v14) = a2;
  if (!*(_BYTE *)(a1 + 108))
  {
    v4 = *(_QWORD *)(a1 + 88);
    if (!v4)
      goto LABEL_12;
    v5 = a1 + 80;
    v6 = a1 + 88;
    do
    {
      v7 = *(_DWORD *)(v4 + 32);
      v8 = v7 < (int)a2;
      if (v7 >= (int)a2)
        v9 = (uint64_t *)v4;
      else
        v9 = (uint64_t *)(v4 + 8);
      if (!v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 88 && *(_DWORD *)(v6 + 32) <= (int)a2)
    {
      while (*(_QWORD *)(v6 + 56))
      {
        *(_DWORD *)buf = *(_DWORD *)(*(_QWORD *)(v6 + 40) + 28);
        (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(_QWORD *)a1 + 112))(a1, a2, buf);
      }
      sub_100034594(v5, (int *)&v14 + 1);
    }
    else
    {
LABEL_12:
      if (qword_1022A0220 != -1)
        dispatch_once(&qword_1022A0220, &stru_102152DA0);
      v10 = qword_1022A0228;
      if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
      {
        v11 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v11 = (_QWORD *)*v11;
        *(_DWORD *)buf = 136446466;
        v20 = v11;
        v21 = 1026;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
          buf,
          0x12u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0220 != -1)
          dispatch_once(&qword_1022A0220, &stru_102152DA0);
        v12 = (_QWORD *)(a1 + 8);
        if (*(char *)(a1 + 31) < 0)
          v12 = (_QWORD *)*v12;
        v15 = 136446466;
        v16 = v12;
        v17 = 1026;
        v18 = a2;
        LODWORD(v14) = 18;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                        &v15,
                        v14);
        sub_100512490("Generic", 1, 0, 0, "virtual void CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::removeClient(int) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
    }
  }
}

uint64_t sub_100034594(uint64_t a1, int *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 < v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (!v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  sub_10009B00C((uint64_t **)a1, v4);
  return 1;
}

BOOL sub_1000345F8(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009B8B8((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102152DA0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102152DA0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLBTLEFenceManager_Type::Notification, CLBTLEFenceManager_Type::NotificationData, char, std::string>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLBTLEFenceManager_Type::Notification, NotificationData_T = CLBTLEFenceManager_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = std::string]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100034980(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021B88E0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021B88E0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

BOOL sub_100034D08(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102142C28);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102142C28);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_100035090(uint64_t a1, uint64_t a2, int *a3, double *a4)
{
  int v6;
  id v7;
  void *v8;
  id v9;
  double v10;
  unsigned int v11;
  double v12;
  NSNumber *v13;
  NSNumber *v14;
  id v15;
  NSObject *v16;
  void *v17;
  int v18;
  int v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  NSObject *v27;
  const char *v28;
  char *v29;
  double v30;
  NSNumber *v31;
  NSNumber *v32;
  NSNumber *v33;
  unsigned int v34;
  unsigned int v35;
  NSNumber *v36;
  NSNumber *v37;
  id v38;
  NSObject *v39;
  uint64_t v40;
  void *v41;
  int v42;
  int v43;
  const char *v44;
  char *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  const char *v49;
  char *v50;
  uint64_t v51;
  const char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  NSNumber *v57;
  NSNumber *v58;
  uint64_t v59;
  NSNumber *v60;
  NSNumber *v61;
  unsigned int v62;
  void *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  id v67;
  int v68;
  id v69;
  __int16 v70;
  _BYTE v71[10];
  uint64_t v72;
  uint64_t v73;
  id v74;
  _BYTE buf[12];
  __int16 v76;
  _BYTE v77[10];
  uint64_t v78;

  v6 = *a3;
  if (*a3 == 3)
  {
    v15 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *a4);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v16 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(void **)a4;
      v18 = *((unsigned __int8 *)a4 + 8);
      v19 = *((unsigned __int8 *)a4 + 9);
      *(_DWORD *)buf = 134218496;
      *(_QWORD *)&buf[4] = v17;
      v76 = 1024;
      *(_DWORD *)v77 = v18;
      *(_WORD *)&v77[4] = 1024;
      *(_DWORD *)&v77[6] = v19;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "OdometerSuitability values,startDate,%.8f,suitableForRunning,%d,suitableForWalking,%d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v41 = *(void **)a4;
      v42 = *((unsigned __int8 *)a4 + 8);
      v43 = *((unsigned __int8 *)a4 + 9);
      v68 = 134218496;
      v69 = v41;
      v70 = 1024;
      *(_DWORD *)v71 = v42;
      *(_WORD *)&v71[4] = 1024;
      *(_DWORD *)&v71[6] = v43;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "OdometerSuitability values,startDate,%.8f,suitableForRunning,%d,suitableForWalking,%d", COERCE_DOUBLE(&v68), 24, v55);
      v45 = (char *)v44;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v44);
      if (v45 != buf)
        free(v45);
    }
    v20 = objc_msgSend(objc_alloc((Class)CMOdometerSuitability), "initWithStartDate:suitableForRunning:suitableForWalking:", v15, *((unsigned __int8 *)a4 + 8), *((unsigned __int8 *)a4 + 9));
    v64 = CMOdometerSuitabilityObject;
    v65 = v20;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v65, &v64, 1);

    sub_100E8BA54(a1, buf);
  }
  else if (v6 == 2)
  {
    v21 = objc_msgSend(objc_alloc((Class)NSDate), "initWithTimeIntervalSinceReferenceDate:", *a4);
    v22 = objc_msgSend(objc_alloc((Class)CMPedometerEvent), "initWithEventDate:type:", v21, *((unsigned int *)a4 + 2));
    sub_100197040();
    if (sub_10075D288())
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v23 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v24 = *((unsigned int *)a4 + 2);
        v25 = *(void **)a4;
        v26 = *(_QWORD *)(a1 + 24);
        *(_DWORD *)buf = 134218498;
        *(_QWORD *)&buf[4] = v24;
        v76 = 2048;
        *(_QWORD *)v77 = v25;
        *(_WORD *)&v77[8] = 2112;
        v78 = v26;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Sending pedometer event,%ld,eventTime,%.3f,%@", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
        v46 = (void *)*((unsigned int *)a4 + 2);
        v47 = *(void **)a4;
        v48 = *(_QWORD *)(a1 + 24);
        v68 = 134218498;
        v69 = v46;
        v70 = 2048;
        *(_QWORD *)v71 = v47;
        *(_WORD *)&v71[8] = 2112;
        v72 = v48;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Sending pedometer event,%ld,eventTime,%.3f,%@", &v68, 32);
        v50 = (char *)v49;
        sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v49);
        if (v50 != buf)
          free(v50);
      }
    }
    v66 = CMPedometerEventKey;
    v67 = v22;
    *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v67, &v66, 1);

    sub_100E8B9AC(a1, buf);
  }
  else
  {
    if (v6)
      return;
    if (*((_QWORD *)a4 + 13))
    {
      v7 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", *((_QWORD *)a4 + 13));
      if (v7)
      {
        v8 = v7;
        v9 = objc_alloc((Class)CMPedometerData);
        v10 = a4[1];
        v11 = *((_DWORD *)a4 + 6);
        v12 = a4[4];
        if (*(_BYTE *)(a1 + 56))
        {
          v13 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 16));
          if (*(_BYTE *)(a1 + 56))
          {
            v14 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 17));
            goto LABEL_33;
          }
        }
        else
        {
          v13 = 0;
        }
        v14 = 0;
LABEL_33:
        v30 = 0.0;
        v63 = v9;
        v62 = v11;
        v60 = v14;
        v61 = v13;
        v59 = *((int *)a4 + 24);
        if (*(_BYTE *)(a1 + 57))
        {
          if (a4[9] == 0.0)
          {
            v58 = 0;
          }
          else
          {
            v58 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
            {
              v57 = 0;
LABEL_41:
              v31 = 0;
              goto LABEL_44;
            }
          }
          if (a4[10] == 0.0)
          {
            v57 = 0;
          }
          else
          {
            v57 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
            if (!*(_BYTE *)(a1 + 57))
              goto LABEL_41;
          }
          v30 = a4[2];
          v31 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", a4[11]);
LABEL_44:
          v32 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a4 + 112));
          v33 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *((unsigned __int8 *)a4 + 113));
          v35 = *((_DWORD *)a4 + 36);
          v34 = *((_DWORD *)a4 + 37);
          if (*(_BYTE *)(a1 + 58))
          {
            v36 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 39));
            if (*(_BYTE *)(a1 + 58))
            {
              v37 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", *((unsigned int *)a4 + 40));
LABEL_49:
              LODWORD(v56) = *((unsigned __int8 *)a4 + 166);
              v38 = objc_msgSend(v63, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v62, v61, v60, v59, v58, v57, v10, v10, v12, v30, v31, v8, v32, v33, __PAIR64__(v34, v35),
                      v36,
                      v37,
                      v56);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
              v39 = qword_10229FCD8;
              if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
              {
                v40 = *(_QWORD *)(a1 + 24);
                *(_DWORD *)buf = 138412546;
                *(_QWORD *)&buf[4] = v38;
                v76 = 2112;
                *(_QWORD *)v77 = v40;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "%@ -> %@", buf, 0x16u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_10229FCD0 != -1)
                  dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
                v51 = *(_QWORD *)(a1 + 24);
                v68 = 138412546;
                v69 = v38;
                v70 = 2112;
                *(_QWORD *)v71 = v51;
                LODWORD(v54) = 22;
                _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "%@ -> %@", &v68, v54);
                v53 = (char *)v52;
                sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v52);
                if (v53 != buf)
                  free(v53);
              }
              v73 = CMPedometerDataObject;
              v74 = v38;
              *(_QWORD *)buf = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v74, &v73, 1);

              sub_1000072BC(a1, buf);
              return;
            }
          }
          else
          {
            v36 = 0;
          }
          v37 = 0;
          goto LABEL_49;
        }
        v57 = 0;
        v58 = 0;
        goto LABEL_41;
      }
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v27 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "Error in step count update", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v68) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Error in step count update", &v68, 2);
      v29 = (char *)v28;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::onPedometerNotification(int, const CLStepCountNotifier_Type::Notification &, const CLStepCountNotifier_Type::NotificationData &)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
  }
}

void sub_1000368FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  _Block_object_dispose(&a39, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10003697C(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int v8;
  BOOL v9;
  uint64_t result;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  uint8_t *v17;
  const char *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  __int16 v24;
  int v25;
  uint8_t buf[4];
  unsigned int v27;
  __int16 v28;
  _BYTE v29[14];
  __int16 v30;
  int v31;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v27 = 0;
      v28 = 2082;
      *(_QWORD *)v29 = "";
      *(_WORD *)&v29[8] = 1026;
      *(_DWORD *)&v29[10] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    HIBYTE(v20) = 0;
    v7 = _CTServerConnectionCellMonitorCopyCellInfo(v6, (char *)&v20 + 7, a2);
    v8 = v7;
    if ((_DWORD)v7)
      v9 = 1;
    else
      v9 = HIBYTE(v20) == 0;
    if (v9 || !*a2)
    {
      v11 = HIDWORD(v7);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v12 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v13 = *a2;
        *(_DWORD *)buf = 67109888;
        v27 = v8;
        v28 = 1024;
        *(_DWORD *)v29 = v11;
        *(_WORD *)&v29[4] = 2048;
        *(_QWORD *)&v29[6] = v13;
        v30 = 1024;
        v31 = HIBYTE(v20);
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", buf, 0x1Eu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_102146180);
        v15 = *a2;
        LOWORD(v22) = 1024;
        HIWORD(v22) = v11;
        v23 = v15;
        v24 = 1024;
        v25 = HIBYTE(v20);
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: _CTServerConnectionCellMonitorCopyCellInfo failed err(%d,%d) cellsArray(%p) valid(%d)", &v21, 30, (const void *)__PAIR64__(v8, 67109888), v22);
        v17 = (uint8_t *)v16;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v16);
        if (v17 != buf)
          free(v17);
      }
      result = *a2;
      if (*a2)
      {
        CFRelease((CFTypeRef)result);
        result = 0;
        *a2 = 0;
      }
    }
    else
    {
      return 1;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v14 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      LOWORD(v21) = 0;
      LODWORD(v20) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", &v21, v20);
      v19 = (uint8_t *)v18;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLTelephonyService::createCTCellArray(CFArrayRef *)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
      return 0;
    }
  }
  return result;
}

void sub_100036DA4(_QWORD *a1, unint64_t a2)
{
  char *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  int64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t i;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  _QWORD *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  char *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  void *v88;
  void *__p[2];
  __int128 v90;
  _QWORD *v91;

  v3 = (char *)a1[2];
  v4 = (uint64_t)&v3[-a1[1]];
  if (v4)
    v5 = a2;
  else
    v5 = a2 + 1;
  if ((_BYTE)v5)
    v6 = (v5 >> 8) + 1;
  else
    v6 = v5 >> 8;
  v7 = a1[4];
  if (v6 >= v7 >> 8)
    v8 = v7 >> 8;
  else
    v8 = v6;
  if (v6 <= v7 >> 8)
  {
    for (a1[4] = v7 - (v8 << 8); v8; --v8)
    {
      v16 = (_QWORD *)a1[1];
      v19 = *v16;
      v17 = (char *)(v16 + 1);
      v18 = v19;
      a1[1] = v17;
      if (v3 == (char *)a1[3])
      {
        v20 = (uint64_t)&v17[-*a1];
        if ((unint64_t)v17 <= *a1)
        {
          if (v3 == (char *)*a1)
            v28 = 1;
          else
            v28 = (uint64_t)&v3[-*a1] >> 2;
          v29 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v28);
          v31 = &v29[8 * (v28 >> 2)];
          v32 = (uint64_t *)a1[1];
          v3 = v31;
          v33 = a1[2] - (_QWORD)v32;
          if (v33)
          {
            v3 = &v31[v33 & 0xFFFFFFFFFFFFFFF8];
            v34 = 8 * (v33 >> 3);
            v35 = &v29[8 * (v28 >> 2)];
            do
            {
              v36 = *v32++;
              *(_QWORD *)v35 = v36;
              v35 += 8;
              v34 -= 8;
            }
            while (v34);
          }
          v37 = (char *)*a1;
          *a1 = v29;
          a1[1] = v31;
          a1[2] = v3;
          a1[3] = &v29[8 * v30];
          if (v37)
          {
            operator delete(v37);
            v3 = (char *)a1[2];
          }
        }
        else
        {
          v21 = v20 >> 3;
          v22 = v20 >> 3 < -1;
          v23 = (v20 >> 3) + 2;
          if (v22)
            v24 = v23;
          else
            v24 = v21 + 1;
          v25 = &v17[-8 * (v24 >> 1)];
          v26 = v3 - v17;
          if (v3 != v17)
          {
            memmove(&v17[-8 * (v24 >> 1)], v17, v3 - v17);
            v3 = (char *)a1[1];
          }
          v27 = &v3[-8 * (v24 >> 1)];
          v3 = &v25[v26];
          a1[1] = v27;
          a1[2] = &v25[v26];
        }
      }
      *(_QWORD *)v3 = v18;
      v3 = (char *)(a1[2] + 8);
      a1[2] = v3;
    }
  }
  else
  {
    v9 = v6 - v8;
    v10 = a1[3] - *a1;
    if (v6 - v8 <= (v10 >> 3) - (v4 >> 3))
    {
      if (v9)
      {
        while (a1[3] != a1[2])
        {
          __p[0] = operator new(0x1000uLL);
          sub_100212218(a1, __p);
          --v6;
          if (!--v9)
            goto LABEL_75;
        }
        for (i = 0; i != v9; ++i)
        {
          __p[0] = operator new(0x1000uLL);
          sub_100343094((uint64_t)a1, __p);
          if (a1[2] - a1[1] == 8)
            v64 = 255;
          else
            v64 = 256;
          v65 = v64 + a1[4];
          a1[4] = v65;
        }
        v8 = v6;
      }
      else
      {
LABEL_75:
        v65 = a1[4];
      }
      a1[4] = v65 - (v8 << 8);
      if (v8)
      {
        v66 = (char *)a1[2];
        do
        {
          v67 = (_QWORD *)a1[1];
          v70 = *v67;
          v68 = (char *)(v67 + 1);
          v69 = v70;
          a1[1] = v68;
          if (v66 == (char *)a1[3])
          {
            v71 = (uint64_t)&v68[-*a1];
            if ((unint64_t)v68 <= *a1)
            {
              if (v66 == (char *)*a1)
                v78 = 1;
              else
                v78 = (uint64_t)&v66[-*a1] >> 2;
              v79 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v78);
              v81 = &v79[8 * (v78 >> 2)];
              v82 = (uint64_t *)a1[1];
              v66 = v81;
              v83 = a1[2] - (_QWORD)v82;
              if (v83)
              {
                v66 = &v81[v83 & 0xFFFFFFFFFFFFFFF8];
                v84 = 8 * (v83 >> 3);
                v85 = &v79[8 * (v78 >> 2)];
                do
                {
                  v86 = *v82++;
                  *(_QWORD *)v85 = v86;
                  v85 += 8;
                  v84 -= 8;
                }
                while (v84);
              }
              v87 = (char *)*a1;
              *a1 = v79;
              a1[1] = v81;
              a1[2] = v66;
              a1[3] = &v79[8 * v80];
              if (v87)
              {
                operator delete(v87);
                v66 = (char *)a1[2];
              }
            }
            else
            {
              v72 = v71 >> 3;
              v22 = v71 >> 3 < -1;
              v73 = (v71 >> 3) + 2;
              if (v22)
                v74 = v73;
              else
                v74 = v72 + 1;
              v75 = &v68[-8 * (v74 >> 1)];
              v76 = v66 - v68;
              if (v66 != v68)
              {
                memmove(&v68[-8 * (v74 >> 1)], v68, v66 - v68);
                v66 = (char *)a1[1];
              }
              v77 = &v66[-8 * (v74 >> 1)];
              v66 = &v75[v76];
              a1[1] = v77;
              a1[2] = &v75[v76];
            }
          }
          *(_QWORD *)v66 = v69;
          v66 = (char *)(a1[2] + 8);
          a1[2] = v66;
          --v8;
        }
        while (v8);
      }
    }
    else
    {
      v11 = v4 >> 3;
      v12 = v10 >> 2;
      if (v12 <= v9 + v11)
        v13 = v9 + v11;
      else
        v13 = v12;
      v14 = v11 - v8;
      v91 = a1 + 3;
      if (v13)
        v15 = (char *)sub_10025E6A0((uint64_t)(a1 + 3), v13);
      else
        v15 = 0;
      v38 = v8 << 8;
      __p[0] = v15;
      __p[1] = &v15[8 * v14];
      *(void **)&v90 = __p[1];
      *((_QWORD *)&v90 + 1) = &v15[8 * v13];
      do
      {
        v88 = operator new(0x1000uLL);
        sub_10003732C(__p, &v88);
        --v9;
      }
      while (v9);
      if (v8)
      {
        v39 = (_QWORD *)a1[1];
        v40 = (char *)v90;
        do
        {
          if (v40 == *((char **)&v90 + 1))
          {
            v41 = (char *)__p[1] - (char *)__p[0];
            if (__p[1] <= __p[0])
            {
              if (v40 == __p[0])
                v48 = 1;
              else
                v48 = (v40 - (char *)__p[0]) >> 2;
              v49 = (char *)sub_10025E6A0((uint64_t)v91, v48);
              v51 = (uint64_t *)__p[1];
              v40 = &v49[8 * (v48 >> 2)];
              v52 = v90 - (unint64_t)__p[1];
              if ((void *)v90 != __p[1])
              {
                v40 = &v49[8 * (v48 >> 2) + (v52 & 0xFFFFFFFFFFFFFFF8)];
                v53 = 8 * (v52 >> 3);
                v54 = &v49[8 * (v48 >> 2)];
                do
                {
                  v55 = *v51++;
                  *(_QWORD *)v54 = v55;
                  v54 += 8;
                  v53 -= 8;
                }
                while (v53);
              }
              v56 = __p[0];
              __p[0] = v49;
              __p[1] = &v49[8 * (v48 >> 2)];
              *(_QWORD *)&v90 = v40;
              *((_QWORD *)&v90 + 1) = &v49[8 * v50];
              if (v56)
              {
                operator delete(v56);
                v40 = (char *)v90;
              }
            }
            else
            {
              v42 = v41 >> 3;
              v22 = v41 >> 3 < -1;
              v43 = (v41 >> 3) + 2;
              if (v22)
                v44 = v43;
              else
                v44 = v42 + 1;
              v45 = (char *)__p[1] - 8 * (v44 >> 1);
              v46 = v40 - (char *)__p[1];
              if (v40 != __p[1])
              {
                memmove((char *)__p[1] - 8 * (v44 >> 1), __p[1], v40 - (char *)__p[1]);
                v40 = (char *)__p[1];
              }
              v47 = &v40[-8 * (v44 >> 1)];
              v40 = &v45[v46];
              __p[1] = v47;
              *(_QWORD *)&v90 = &v45[v46];
            }
          }
          *(_QWORD *)v40 = *v39;
          v40 = (char *)(v90 + 8);
          *(_QWORD *)&v90 = v90 + 8;
          v39 = (_QWORD *)(a1[1] + 8);
          a1[1] = v39;
          --v8;
        }
        while (v8);
      }
      v57 = (_QWORD *)a1[2];
      v58 = -7 - (_QWORD)v57;
      while (v57 != (_QWORD *)a1[1])
      {
        --v57;
        v58 += 8;
        sub_1003431B0((uint64_t)__p, v57);
      }
      v59 = (char *)*a1;
      v60 = *(_OWORD *)__p;
      v61 = v90;
      __p[0] = *(void **)a1;
      __p[1] = v57;
      v62 = *((_OWORD *)a1 + 1);
      *(_OWORD *)a1 = v60;
      *((_OWORD *)a1 + 1) = v61;
      v90 = v62;
      a1[4] -= v38;
      if (v57 != (_QWORD *)v62)
        *(_QWORD *)&v90 = v62 + (-(v62 + v58) & 0xFFFFFFFFFFFFFFF8);
      if (v59)
        operator delete(v59);
    }
  }
}

void sub_1000372B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10003732C(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_10025E6A0(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

uint64_t sub_100037440(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  unsigned int v4;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v5;
  std::chrono::steady_clock::time_point v6;
  std::chrono::system_clock::time_point v7;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v8;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v9;
  unsigned int v10;
  uint64_t v11;
  std::unique_lock<std::mutex> v13;

  v13.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 24);
  v13.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 24));
  v4 = *(_DWORD *)(a1 + 136);
  if ((v4 & 8) != 0)
  {
    v11 = 2;
    goto LABEL_25;
  }
  if ((v4 & 4) != 0)
  {
    v11 = ((v4 >> 2) & 1) == 0;
    goto LABEL_25;
  }
  while (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
    {
      v5 = *a2;
      v6.__d_.__rep_ = v5 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v6.__d_.__rep_ >= 1)
      {
        std::chrono::steady_clock::now();
        v7.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
        if (!v7.__d_.__rep_)
        {
          v8 = 0;
          goto LABEL_14;
        }
        if (v7.__d_.__rep_ < 1)
        {
          if ((unint64_t)v7.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
            goto LABEL_13;
          v8 = 0x8000000000000000;
        }
        else
        {
          if ((unint64_t)v7.__d_.__rep_ > 0x20C49BA5E353F7)
          {
            v8 = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_14;
          }
LABEL_13:
          v8 = 1000 * v7.__d_.__rep_;
LABEL_14:
          if (v8 > (v6.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
          {
            v9.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
            goto LABEL_17;
          }
        }
        v9.__d_.__rep_ = v8 + v6.__d_.__rep_;
LABEL_17:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 88), &v13, v9);
        std::chrono::steady_clock::now();
      }
      std::chrono::steady_clock::now();
    }
    v10 = *(_DWORD *)(a1 + 136);
    if ((v10 & 4) != 0)
      goto LABEL_24;
  }
  v10 = *(_DWORD *)(a1 + 136);
LABEL_24:
  v11 = ((v10 >> 2) & 1) == 0;
  if (v13.__owns_)
LABEL_25:
    std::mutex::unlock(v13.__m_);
  return v11;
}

void sub_1000375A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char isEntitled;
  char v6;
  uint64_t *v7;
  uint64_t *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSSet *v13;
  id v14;
  NSObject *v15;
  id v16;
  id v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  void (*v20)(_QWORD *, CLConnectionMessage **);
  uint64_t v21;
  _QWORD *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  id v32;
  NSObject *v33;
  id v34;
  CLConnectionMessage *v35;
  std::__shared_weak_count *v36;
  uint8_t buf[8];
  __int16 v38;
  const char *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  id v43;
  __int16 v44;
  id v45;

  v4 = *(_QWORD *)(a1 + 8);
  sub_1015A2E04(buf, "com.apple.locationd.Proximity.TagManagement");
  isEntitled = CLConnection::isEntitled(v4, buf);
  v6 = isEntitled;
  if (SBYTE3(v41) < 0)
  {
    operator delete(*(void **)buf);
    if ((v6 & 1) != 0)
      goto LABEL_3;
  }
  else if ((isEntitled & 1) != 0)
  {
LABEL_3:
    v7 = (uint64_t *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    if (*((char *)v7 + 23) >= 0)
      v8 = v7;
    else
      v8 = (uint64_t *)*v7;
    v9 = -[NSArray lastObject](-[NSString componentsSeparatedByString:](+[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8), "componentsSeparatedByString:", CFSTR("/")), "lastObject");
    v11 = objc_opt_class(NSUUID, v10);
    v13 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v11, objc_opt_class(CLFindMyAccessorySoundSequence, v12), 0);
    v14 = objc_msgSend((id)CLConnectionMessage::getDictionaryOfClasses(*(CLConnectionMessage **)a2, v13), "objectForKeyedSubscript:", CFSTR("CLDurianIdentifier"));
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021479A8);
    v15 = qword_1022A0038;
    if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
    {
      v16 = objc_msgSend(objc_msgSend(v14, "description"), "substringToIndex:", 8);
      v17 = objc_msgSend(*(id *)(a1 + 64), "clientname");
      *(_DWORD *)buf = 68289795;
      *(_DWORD *)&buf[4] = 0;
      v38 = 2082;
      v39 = "";
      v40 = 2114;
      v41 = v9;
      v42 = 2113;
      v43 = v16;
      v44 = 2114;
      v45 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client handleMessage\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@, \"client\":%{public, location:escape_only}@}", buf, 0x30u);
    }
    sub_100037A74();
    v18 = (unsigned __int8 *)CLConnectionMessage::name(*(CLConnectionMessage **)a2);
    v19 = sub_1001986C8(qword_102301DC0, v18);
    sub_100037A74();
    if (v19)
    {
      v20 = (void (*)(_QWORD *, CLConnectionMessage **))*((_QWORD *)v19 + 5);
      v21 = *((_QWORD *)v19 + 6);
      v22 = (_QWORD *)(a1 + (v21 >> 1));
      if ((v21 & 1) != 0)
        v20 = *(void (**)(_QWORD *, CLConnectionMessage **))(*v22 + v20);
      v23 = *(std::__shared_weak_count **)(a2 + 8);
      v35 = *(CLConnectionMessage **)a2;
      v36 = v23;
      if (v23)
      {
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      v20(v22, &v35);
      v26 = v36;
      if (v36)
      {
        v27 = (unint64_t *)&v36->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
    }
    else
    {
      if (qword_1022A0030 != -1)
        dispatch_once(&qword_1022A0030, &stru_1021479A8);
      v31 = qword_1022A0038;
      if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_FAULT))
      {
        v32 = objc_msgSend(objc_msgSend(v14, "description"), "substringToIndex:", 8);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = v9;
        v42 = 2113;
        v43 = v32;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#durian #client unrecognized message\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@}", buf, 0x26u);
        if (qword_1022A0030 != -1)
          dispatch_once(&qword_1022A0030, &stru_1021479A8);
      }
      v33 = qword_1022A0038;
      if (os_signpost_enabled((os_log_t)qword_1022A0038))
      {
        v34 = objc_msgSend(objc_msgSend(v14, "description"), "substringToIndex:", 8);
        *(_DWORD *)buf = 68289539;
        *(_DWORD *)&buf[4] = 0;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = v9;
        v42 = 2113;
        v43 = v34;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v33, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#durian #client unrecognized message", "{\"msg%{public}.0s\":\"#durian #client unrecognized message\", \"name\":%{public, location:escape_only}@, \"item\":%{private, location:escape_only}@}", buf, 0x26u);
      }
    }
    return;
  }
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021479A8);
  v29 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEFAULT))
  {
    v30 = objc_msgSend(*(id *)(a1 + 64), "clientname");
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    v38 = 2082;
    v39 = "";
    v40 = 2114;
    v41 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#durian #client not entitled\", \"client\":%{public, location:escape_only}@}", buf, 0x1Cu);
  }
}

void sub_100037A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_100261F44((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *sub_100037A74()
{
  unsigned __int8 v0;
  uint64_t v2;
  _QWORD v3[5];
  _QWORD v4[5];
  _QWORD v5[5];
  _QWORD v6[5];
  _QWORD v7[5];
  _QWORD v8[5];
  _QWORD v9[5];
  _QWORD v10[5];
  _QWORD v11[5];
  _QWORD v12[5];
  _QWORD v13[5];
  _QWORD v14[5];
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];
  _QWORD v23[5];
  _QWORD v24[5];
  _QWORD v25[5];
  _QWORD v26[5];
  _QWORD v27[5];
  _QWORD v28[5];
  _QWORD v29[5];
  _QWORD v30[5];
  _QWORD v31[5];
  _QWORD v32[5];
  _QWORD v33[5];
  _QWORD v34[5];
  _QWORD v35[5];
  _QWORD v36[5];
  _QWORD v37[5];
  _QWORD v38[5];
  _QWORD v39[5];
  _QWORD v40[5];
  _QWORD v41[5];
  _QWORD v42[5];
  _QWORD v43[5];
  _QWORD v44[5];
  _QWORD v45[5];
  _QWORD v46[5];
  _QWORD v47[5];
  _QWORD v48[5];
  _QWORD v49[5];
  _QWORD v50[5];
  _QWORD v51[5];
  _QWORD v52[5];
  _QWORD v53[5];
  _QWORD v54[5];
  _QWORD v55[5];
  _QWORD v56[5];
  _QWORD v57[5];
  _QWORD v58[5];
  _QWORD v59[5];
  _QWORD v60[5];
  _QWORD v61[5];
  _QWORD v62[5];
  _QWORD v63[5];
  _QWORD v64[5];
  _QWORD v65[5];
  _QWORD v66[5];
  _QWORD v67[5];
  _QWORD v68[5];
  _QWORD v69[5];
  _QWORD v70[5];
  _QWORD v71[5];
  _QWORD v72[5];
  _QWORD v73[5];
  _QWORD v74[5];
  _QWORD v75[5];
  _QWORD v76[5];
  _QWORD v77[5];
  _QWORD v78[5];
  _QWORD v79[5];
  _QWORD v80[5];
  _QWORD v81[5];
  _QWORD v82[5];
  _QWORD v83[5];
  _QWORD v84[5];
  _QWORD v85[5];
  _QWORD v86[5];
  _QWORD v87[5];
  _QWORD v88[5];

  v0 = atomic_load((unsigned __int8 *)&qword_102301DE8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_102301DE8))
  {
    sub_1015A2E04(v3, "DurianManagement/Connect");
    v3[3] = sub_1005DC528;
    v3[4] = 0;
    sub_1015A2E04(v4, "DurianManagement/Disconnect");
    v4[3] = sub_1005DC5AC;
    v4[4] = 0;
    sub_1015A2E04(v5, "DurianManagement/FetchConnectionState");
    v5[3] = sub_1005DC630;
    v5[4] = 0;
    sub_1015A2E04(v6, "DurianManagement/StartSoundSequence");
    v6[3] = sub_1005DC6B4;
    v6[4] = 0;
    sub_1015A2E04(v7, "DurianManagement/StopSound");
    v7[3] = sub_1005DC768;
    v7[4] = 0;
    sub_1015A2E04(v8, "DurianManagement/SetKeyRollInterval");
    v8[3] = sub_1005DC7EC;
    v8[4] = 0;
    sub_1015A2E04(v9, "DurianManagement/FetchBatteryStatus");
    v9[3] = sub_1005DC894;
    v9[4] = 0;
    sub_1015A2E04(v10, "DurianManagement/StartEventCounter");
    v10[3] = sub_1005DC918;
    v10[4] = 0;
    sub_1015A2E04(v11, "DurianManagement/StopEventCounter");
    v11[3] = sub_1005DC9AC;
    v11[4] = 0;
    sub_1015A2E04(v12, "DurianManagement/SetBatteryStatus");
    v12[3] = sub_1005DCA40;
    v12[4] = 0;
    sub_1015A2E04(v13, "DurianManagement/GetMultiStatus");
    v13[3] = sub_1005DCAF8;
    v13[4] = 0;
    sub_1015A2E04(v14, "DurianManagement/GetMultiPartStatus");
    v14[3] = sub_1005DCB7C;
    v14[4] = 0;
    sub_1015A2E04(v15, "DurianManagement/DumpLogs");
    v15[3] = sub_1005DCC00;
    v15[4] = 0;
    sub_1015A2E04(v16, "DurianManagement/InitRanging");
    v16[3] = sub_1005DCCA8;
    v16[4] = 0;
    sub_1015A2E04(v17, "DurianManagement/DeinitRanging");
    v17[3] = sub_1005DCD4C;
    v17[4] = 0;
    sub_1015A2E04(v18, "DurianManagement/ConfigureRanging");
    v18[3] = sub_1005DCDE0;
    v18[4] = 0;
    sub_1015A2E04(v19, "DurianManagement/PrepareRanging");
    v19[3] = sub_1005DCF4C;
    v19[4] = 0;
    sub_1015A2E04(v20, "DurianManagement/StartRanging");
    v20[3] = sub_1005DCFE0;
    v20[4] = 0;
    sub_1015A2E04(v21, "DurianManagement/StopRanging");
    v21[3] = sub_1005DD09C;
    v21[4] = 0;
    sub_1015A2E04(v22, "DurianManagement/InduceCrash");
    v22[3] = sub_1005DD130;
    v22[4] = 0;
    sub_1015A2E04(v23, "DurianManagement/Unpair");
    v23[3] = sub_1005DD1B4;
    v23[4] = 0;
    sub_1015A2E04(v24, "DurianManagement/SetTagType");
    v24[3] = sub_1005DD280;
    v24[4] = 0;
    sub_1015A2E04(v25, "DurianManagement/SetObfuscatedIdentifier");
    v25[3] = sub_1005DD328;
    v25[4] = 0;
    sub_1015A2E04(v26, "DurianManagement/SetNearOwnerTimeout");
    v26[3] = sub_1005DD3DC;
    v26[4] = 0;
    sub_1015A2E04(v27, "DurianManagement/FetchPersonalizationInformation");
    v27[3] = sub_1005DD494;
    v27[4] = 0;
    sub_1015A2E04(v28, "DurianManagement/UpdateFirmware");
    v28[3] = sub_1005DD518;
    v28[4] = 0;
    sub_1015A2E04(v29, "DurianManagement/AbortFirmwareUpdate");
    v29[3] = sub_1005DD5CC;
    v29[4] = 0;
    sub_1015A2E04(v30, "DurianManagement/FetchFirmwareVersion");
    v30[3] = sub_1005DD650;
    v30[4] = 0;
    sub_1015A2E04(v31, "DurianManagement/FetchUserStats");
    v31[3] = sub_1005DD6D8;
    v31[4] = 0;
    sub_1015A2E04(v32, "DurianManagement/StartUnauthorizedSound");
    v32[3] = sub_1005DD780;
    v32[4] = 0;
    sub_1015A2E04(v33, "DurianManagement/StopUnauthorizedSound");
    v33[3] = sub_1005DD84C;
    v33[4] = 0;
    sub_1015A2E04(v34, "DurianManagement/SetWildConfiguration");
    v34[3] = sub_1005DD8D0;
    v34[4] = 0;
    sub_1015A2E04(v35, "DurianManagement/RollWildKey");
    v35[3] = sub_1005DD984;
    v35[4] = 0;
    sub_1015A2E04(v36, "DurianManagement/SetAccelerometerSlopeMode");
    v36[3] = sub_1005DDA08;
    v36[4] = 0;
    sub_1015A2E04(v37, "DurianManagement/SetAccelerometerOrientationMode");
    v37[3] = sub_1005DDABC;
    v37[4] = 0;
    sub_1015A2E04(v38, "DurianManagement/GetAccelerometerSlopeModeConfiguration");
    v38[3] = sub_1005DDB70;
    v38[4] = 0;
    sub_1015A2E04(v39, "DurianManagement/GetAccelerometerOrientationModeConfiguration");
    v39[3] = sub_1005DDBF4;
    v39[4] = 0;
    sub_1015A2E04(v40, "DurianManagement/GetAccelerometerMode");
    v40[3] = sub_1005DDC78;
    v40[4] = 0;
    sub_1015A2E04(v41, "DurianManagement/SetUnauthorizedPlaySoundRateLimit");
    v41[3] = sub_1005DDCFC;
    v41[4] = 0;
    sub_1015A2E04(v42, "DurianManagement/ScanForNearOwner");
    v42[3] = sub_10022B910;
    v42[4] = 0;
    sub_1015A2E04(v43, "DurianManagement/ScanForHELE");
    v43[3] = sub_1005DDDA4;
    v43[4] = 0;
    sub_1015A2E04(v44, "DurianManagement/ScanForNearbyDevicesLong");
    v44[3] = sub_1005DDEC0;
    v44[4] = 0;
    sub_1015A2E04(v45, "DurianManagement/StopScanForNearbyDevicesLong");
    v45[3] = sub_1005DDFDC;
    v45[4] = 0;
    sub_1015A2E04(v46, "DurianManagement/FetchTxPower");
    v46[3] = sub_1005DE1D8;
    v46[4] = 0;
    sub_1015A2E04(v47, "DurianManagement/StartAggressiveAdvertising");
    v47[3] = sub_1005DE288;
    v47[4] = 0;
    sub_1015A2E04(v48, "DurianManagement/StopAggressiveAdvertising");
    v48[3] = sub_1005DE334;
    v48[4] = 0;
    sub_1015A2E04(v49, "DurianManagement/StartUnauthorizedAggressiveAdvertising");
    v49[3] = sub_1005DE3B8;
    v49[4] = 0;
    sub_1015A2E04(v50, "DurianManagement/SetHawkeyeTestMode");
    v50[3] = sub_1005DE43C;
    v50[4] = 0;
    sub_1015A2E04(v51, "DurianManagement/SetHawkeyeUTMotionConfig");
    v51[3] = sub_1005DE4F8;
    v51[4] = 0;
    sub_1015A2E04(v52, "DurianManagement/FetchHawkeyeAISProductData");
    v52[3] = sub_1005DE5E4;
    v52[4] = 0;
    sub_1015A2E04(v53, "DurianManagement/FetchHawkeyeAISManufacturerName");
    v53[3] = sub_1005DE668;
    v53[4] = 0;
    sub_1015A2E04(v54, "DurianManagement/FetchHawkeyeAISModelName");
    v54[3] = sub_1005DE6EC;
    v54[4] = 0;
    sub_1015A2E04(v55, "DurianManagement/FetchHawkeyeAISModelColorCode");
    v55[3] = sub_1005DE770;
    v55[4] = 0;
    sub_1015A2E04(v56, "DurianManagement/FetchHawkeyeAISAccessoryCategory");
    v56[3] = sub_1005DE7F4;
    v56[4] = 0;
    sub_1015A2E04(v57, "DurianManagement/FetchHawkeyeAISAccessoryCapabilities");
    v57[3] = sub_1005DE878;
    v57[4] = 0;
    sub_1015A2E04(v58, "DurianManagement/FetchHawkeyeAISFindMyVersion");
    v58[3] = sub_1005DE8FC;
    v58[4] = 0;
    sub_1015A2E04(v59, "DurianManagement/FetchHawkeyeAISBatteryType");
    v59[3] = sub_1005DE980;
    v59[4] = 0;
    sub_1015A2E04(v60, "DurianManagement/FetchHawkeyeSerialNumber");
    v60[3] = sub_1005DEA04;
    v60[4] = 0;
    sub_1015A2E04(v61, "DurianManagement/FetchHawkeyeCurrentPrimaryKey");
    v61[3] = sub_1005DEA88;
    v61[4] = 0;
    sub_1015A2E04(v62, "DurianManagement/FetchHawkeyeiCloudIdentifier");
    v62[3] = sub_1005DEB0C;
    v62[4] = 0;
    sub_1015A2E04(v63, "DurianManagement/UseLocalFirmwareAssetFromUrl");
    v63[3] = sub_1005DEB90;
    v63[4] = 0;
    sub_1015A2E04(v64, "DurianManagement/UseDefaultFirmwareAssetSource");
    v64[3] = sub_1005DEDB4;
    v64[4] = 0;
    sub_1015A2E04(v65, "DurianManagement/FetchWhetherLocalFirmwareAssetIsInUse");
    v65[3] = sub_1005DEF88;
    v65[4] = 0;
    sub_1015A2E04(v66, "DurianManagement/StartMonitoringForAvengerAdvertisementsForBTFinding");
    v66[3] = sub_1005DF15C;
    v66[4] = 0;
    sub_1015A2E04(v67, "DurianManagement/StopMonitoringForAvengerAdvertisementsForBTFinding");
    v67[3] = sub_1005DF4A8;
    v67[4] = 0;
    sub_1015A2E04(v68, "DurianManagement/PerformAggressiveScanForSeparationAlerts");
    v68[3] = sub_1005DF6B4;
    v68[4] = 0;
    sub_1015A2E04(v69, "DurianManagement/PerformLongAggressiveScanForSeparationAlerts");
    v69[3] = sub_1005DF8B8;
    v69[4] = 0;
    sub_1015A2E04(v70, "DurianManagement/StopLongAggressiveScanForSeparationAlerts");
    v70[3] = sub_1005DFABC;
    v70[4] = 0;
    sub_1015A2E04(v71, "DurianManagement/PerformAggressiveScanForTrackingAvoidance");
    v71[3] = sub_1005DFCC0;
    v71[4] = 0;
    sub_1015A2E04(v72, "DurianManagement/PerformHELEScanForTrackingAvoidance");
    v72[3] = sub_1005DFCC8;
    v72[4] = 0;
    sub_1015A2E04(v73, "DurianManagement/PerformAggressiveScanForDurianService");
    v73[3] = sub_1005DFCD0;
    v73[4] = 0;
    sub_1015A2E04(v74, "DurianManagement/FetchStatusOfUTEnablementRequirements");
    v74[3] = sub_1005DFCD8;
    v74[4] = 0;
    sub_1015A2E04(v75, "DurianManagement/FetchAISForTAUnknownBeacon");
    v75[3] = sub_1005DFCEC;
    v75[4] = 0;
    sub_1015A2E04(v76, "DurianManagement/StageTADetection");
    v76[3] = sub_1005DFE54;
    v76[4] = 0;
    sub_1015A2E04(v77, "DurianManagement/ForceSurfaceStagedDetections");
    v77[3] = sub_1005DFF80;
    v77[4] = 0;
    sub_1015A2E04(v78, "DurianManagement/FetchAISProductData");
    v78[3] = sub_1005E00AC;
    v78[4] = 0;
    sub_1015A2E04(v79, "DurianManagement/FetchAISManufacturerName");
    v79[3] = sub_1005E015C;
    v79[4] = 0;
    sub_1015A2E04(v80, "DurianManagement/FetchAISModelName");
    v80[3] = sub_1005E020C;
    v80[4] = 0;
    sub_1015A2E04(v81, "DurianManagement/FetchAISProtocolImplementation");
    v81[3] = sub_1005E02BC;
    v81[4] = 0;
    sub_1015A2E04(v82, "DurianManagement/FetchAISAccessoryCapabilities");
    v82[3] = sub_1005E036C;
    v82[4] = 0;
    sub_1015A2E04(v83, "DurianManagement/FetchAISAccessoryCategory");
    v83[3] = sub_1005E041C;
    v83[4] = 0;
    sub_1015A2E04(v84, "DurianManagement/FetchAISNetworkID");
    v84[3] = sub_1005E04CC;
    v84[4] = 0;
    sub_1015A2E04(v85, "DurianManagement/FetchAISFirmwareVersion");
    v85[3] = sub_1005E057C;
    v85[4] = 0;
    sub_1015A2E04(v86, "DurianManagement/FetchAISBatteryType");
    v86[3] = sub_1005E062C;
    v86[4] = 0;
    sub_1015A2E04(v87, "DurianManagement/FetchAISBatteryLevel");
    v87[3] = sub_1005E06DC;
    v87[4] = 0;
    sub_1015A2E04(v88, "DurianManagement/FetchAISSerialNumber");
    v88[3] = sub_1005E078C;
    v88[4] = 0;
    sub_1005E0CFC((uint64_t)&unk_102301DC0, (unsigned __int8 *)v3, 86);
    v2 = 430;
    do
    {
      if (*((char *)&v3[v2 - 2] - 1) < 0)
        operator delete((void *)v3[v2 - 5]);
      v2 -= 5;
    }
    while (v2 * 8);
    __cxa_atexit((void (*)(void *))sub_1005E083C, &unk_102301DC0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_102301DE8);
  }
  return &unk_102301DC0;
}

void sub_1000387E4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = 3440;
  while (1)
  {
    if (*(char *)(v1 + v3 - 17) < 0)
      operator delete(*(void **)(v1 + v3 - 40));
    v3 -= 40;
    if (!v3)
    {
      __cxa_guard_abort(&qword_102301DE8);
      _Unwind_Resume(a1);
    }
  }
}

void sub_100038994()
{
  JUMPOUT(0x100038980);
}

void sub_10003899C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  NSObject *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  const char *v19;
  char *v20;
  const char *v21;
  char *v22;
  const char *v23;
  char *v24;
  const char *v25;
  char *v26;
  uint64_t v27;
  _QWORD v28[7];
  std::__shared_weak_count *v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  int v34;
  _BYTE buf[1638];

  v6 = objc_alloc_init((Class)NSAutoreleasePool);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102174F98);
  v7 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a1 + 48);
    *(_DWORD *)buf = 138543618;
    *(_QWORD *)&buf[4] = v8;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "CLDaemonClient received GyroBiasEstimation request,client,%{public}@,subscribe,%{public}d", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102174F98);
    v18 = *(_QWORD *)(a1 + 48);
    v31 = 138543618;
    v32 = v18;
    v33 = 1026;
    v34 = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLDaemonClient received GyroBiasEstimation request,client,%{public}@,subscribe,%{public}d", &v31, 18);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
  (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)a1 + 32))(a1, "kCLConnectionMessageGyroBiasEstimation", a2);
  if ((_DWORD)a2)
  {
    v30 = 0;
    if ((sub_1001E4874(a3, "kCLConnectionMessageBuildGYTTKey", &v30) & 1) != 0)
    {
      if (v30)
        objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 24), "vendor"), "proxyForService:", CFSTR("CLGyroCalibrationDatabase")), "startFactoryGYTT");
    }
    else
    {
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102174F98);
      v11 = off_10229FD58;
      if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "isBuildingGYTT not set", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD50 != -1)
          dispatch_once(&qword_10229FD50, &stru_102174F98);
        LOWORD(v31) = 0;
        LODWORD(v27) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 17, "isBuildingGYTT not set", &v31, v27);
        v26 = (char *)v25;
        sub_100512490("Generic", 1, 0, 0, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v25);
        if (v26 != buf)
          free(v26);
      }
      v30 = 0;
    }
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102174F98);
    v12 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v30;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102174F98);
      v31 = 67240192;
      LODWORD(v32) = v30;
      LODWORD(v27) = 8;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLDaemonClient got gyro bias estimation subscription request,isBuildingGYTT,%{public}d", &v31, v27);
      v24 = (char *)v23;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v23);
      if (v24 != buf)
        free(v24);
    }
    sub_10052D218(a1 + 400, buf);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = sub_100238258();
    v15 = v30;
    v28[0] = _NSConcreteStackBlock;
    v28[1] = 3321888768;
    v28[2] = sub_10002328C;
    v28[3] = &unk_102174CC8;
    v28[4] = v13;
    v28[5] = a1;
    v28[6] = *(_QWORD *)buf;
    v29 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v16 = (unint64_t *)(*(_QWORD *)&buf[8] + 16);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    sub_100024998(v14, a1, v15, (uint64_t)v28);
    *(_BYTE *)(a1 + 276) = 1;
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    if (*(_QWORD *)&buf[8])
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[8]);
  }
  else
  {
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102174F98);
    v9 = off_10229FD58;
    if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "CLDaemonClient got gyro bias estimation unsubscription request", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD50 != -1)
        dispatch_once(&qword_10229FD50, &stru_102174F98);
      LOWORD(v31) = 0;
      LODWORD(v27) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 1, "CLDaemonClient got gyro bias estimation unsubscription request", &v31, v27);
      v22 = (char *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::handleRequestGyroBiasEstimation(BOOL, const CLNameValuePair &)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
    v10 = sub_100238258();
    sub_100024998(v10, a1, 0, 0);
    *(_BYTE *)(a1 + 276) = 0;
  }

}

void sub_100039048(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  void *v26;

  _Unwind_Resume(a1);
}

id sub_1000397B4(uint64_t a1, void *a2)
{
  id result;
  double v5;

  result = objc_msgSend(a2, "doubleValue");
  if (v5 < *(double *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "addObject:", a2);
  return result;
}

void sub_1000397FC(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSSet *v8;
  void *DictionaryOfClasses;
  id v10;
  id v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  BOOL v24;
  int v25;
  int v26;
  NSObject *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  void *__p[2];
  uint64_t v33;
  unsigned int v34[18];
  void *v35[2];
  uint64_t v36;
  uint64_t buf;
  __int16 v38;
  const char *v39;
  __int16 v40;
  uint64_t v41;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  v6 = objc_opt_class(NSNumber, v5);
  v8 = +[NSSet setWithObjects:](NSSet, "setWithObjects:", v6, objc_opt_class(NSString, v7), 0);
  DictionaryOfClasses = (void *)CLConnectionMessage::getDictionaryOfClasses(*a2, v8);
  v10 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessageStatusKey"));
  v11 = objc_msgSend(DictionaryOfClasses, "objectForKeyedSubscript:", CFSTR("kCLConnectionMessagePurposeIdentifierKey"));
  if (v11)
    sub_1015A2E04(v35, (char *)objc_msgSend(v11, "UTF8String"));
  else
    sub_1015A2E04(v35, "");
  if ((objc_opt_respondsToSelector(v10, "intValue") & 1) != 0)
  {
    v12 = objc_msgSend(v10, "intValue");
    sub_100197040();
    if (sub_10019DF90() && *(_BYTE *)(a1 + 88))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_102174F58);
      v13 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
      {
        v14 = *(_QWORD *)(a1 + 48);
        buf = 68289282;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"WatchKit-1.0 client requesting authorization on companion\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
      }
      v15 = qword_1022A01C8;
      if (os_signpost_enabled((os_log_t)qword_1022A01C8))
      {
        v16 = *(_QWORD *)(a1 + 48);
        buf = 68289282;
        v38 = 2082;
        v39 = "";
        v40 = 2114;
        v41 = v16;
        v17 = "WatchKit-1.0 client requesting authorization on companion";
        v18 = "{\"msg%{public}.0s\":\"WatchKit-1.0 client requesting authorization on companion\", \"ClientKeyPath\":%{pu"
              "blic, location:escape_only}@}";
LABEL_21:
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v17, v18, (uint8_t *)&buf, 0x1Cu);
        goto LABEL_48;
      }
      goto LABEL_48;
    }
    if (v12 != 3 || *(_BYTE *)(a1 + 90) == 0)
      v23 = v12;
    else
      v23 = 4;
    if (v23 == 4)
    {
      v24 = *(_BYTE *)(a1 + 74) == 0;
      v25 = 1;
    }
    else
    {
      if (v23 != 3)
      {
        if (qword_1022A01C0 != -1)
          dispatch_once(&qword_1022A01C0, &stru_102174F58);
        v27 = qword_1022A01C8;
        if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
        {
          v28 = *(_QWORD *)(a1 + 48);
          buf = 68289282;
          v38 = 2082;
          v39 = "";
          v40 = 2114;
          v41 = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization status\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
          if (qword_1022A01C0 != -1)
            dispatch_once(&qword_1022A01C0, &stru_102174F58);
        }
        v29 = qword_1022A01C8;
        if (os_signpost_enabled((os_log_t)qword_1022A01C8))
        {
          v30 = *(_QWORD *)(a1 + 48);
          buf = 68289282;
          v38 = 2082;
          v39 = "";
          v40 = 2114;
          v41 = v30;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#AuthPrompt Malformed authorization status", "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization status\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
        }
        v26 = 0;
        goto LABEL_43;
      }
      v24 = *(_BYTE *)(a1 + 74) == 0;
      v25 = 3;
    }
    if (v24)
      v26 = v25 + 1;
    else
      v26 = v25;
LABEL_43:
    v31 = *(_QWORD *)(a1 + 48);
    if (SHIBYTE(v36) < 0)
    {
      sub_100115CE4(__p, v35[0], (unint64_t)v35[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v35;
      v33 = v36;
    }
    sub_1007F5908((uint64_t)v34, v26, v31, 0, (__int128 *)__p);
    sub_10000ED54(a1, v34, 0, 1);
    sub_100235568((uint64_t)v34);
    if (SHIBYTE(v33) < 0)
      operator delete(__p[0]);
    goto LABEL_48;
  }
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102174F58);
  v19 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_FAULT))
  {
    v20 = *(_QWORD *)(a1 + 48);
    buf = 68289282;
    v38 = 2082;
    v39 = "";
    v40 = 2114;
    v41 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization request\", \"ClientKeyPath\":%{public, location:escape_only}@}", (uint8_t *)&buf, 0x1Cu);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102174F58);
  }
  v15 = qword_1022A01C8;
  if (os_signpost_enabled((os_log_t)qword_1022A01C8))
  {
    v21 = *(_QWORD *)(a1 + 48);
    buf = 68289282;
    v38 = 2082;
    v39 = "";
    v40 = 2114;
    v41 = v21;
    v17 = "#AuthPrompt Malformed authorization request";
    v18 = "{\"msg%{public}.0s\":\"#AuthPrompt Malformed authorization request\", \"ClientKeyPath\":%{public, location:escape_only}@}";
    goto LABEL_21;
  }
LABEL_48:
  if (SHIBYTE(v36) < 0)
    operator delete(v35[0]);

}

void sub_100039D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  void *v32;

  if (a32 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_100039F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va);
  sub_1006F0FB8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_100039FA8(uint64_t a1)
{
  unint64_t v2;
  int v3;
  double v4;
  uint64_t v5;
  uint64_t i;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
  if (v2 >= *((int *)sub_1000521B8() + 18))
  {
    v3 = -1;
    if (*(double *)a1 >= -90.0 && *(double *)a1 <= 90.0)
    {
      v4 = *(double *)(a1 + 8);
      if (v4 <= 180.0 && v4 >= -180.0)
      {
        v5 = *(_QWORD *)(a1 + 136);
        for (i = *(_QWORD *)(a1 + 144); v5 != i; v5 += 192)
          v3 = (int)fmax((double)v3, sub_10011E634((double *)(a1 + 96), *(double *)(v5 + 12), *(double *)(v5 + 20), *(double *)a1, *(double *)(a1 + 8), 0.0));
      }
    }
  }
  else
  {
    v3 = -1;
  }
  *(_DWORD *)(a1 + 52) = v3;
}

uint64_t sub_10003A094(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  double v12;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 32) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 40) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 44) = sqlite3_column_int(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v12 = sqlite3_column_double(v11, 5);
  result = 0;
  *(double *)(a2 + 48) = v12;
  return result;
}

void sub_10003A15C(uint64_t a1, int a2, int a3)
{
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  _BYTE *v17;
  int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  CFAbsoluteTime v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  uint8_t buf[4];
  CFAbsoluteTime Current;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;

  HIDWORD(v21) = a2;
  if (*(_BYTE *)(a1 + 2402))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v6 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134284033;
      Current = CFAbsoluteTimeGetCurrent();
      v30 = 1025;
      v31 = a2;
      v32 = 1025;
      v33 = a3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#gnssca,handleGnssSessionEventForAnalytics, eventTime,%{private}.1lf, eventType,%{private}d, eventStatus,%{private}d", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v19 = qword_1022A0078;
      v22 = 134284033;
      v23 = CFAbsoluteTimeGetCurrent();
      v24 = 1025;
      v25 = a2;
      v26 = 1025;
      v27 = a3;
      LODWORD(v21) = 24;
      v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "#gnssca,handleGnssSessionEventForAnalytics, eventTime,%{private}.1lf, eventType,%{private}d, eventStatus,%{private}d", &v22, v21);
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionEventForAnalytics(const GNSS::GnssSessionEventType, const BOOL)", "%s\n", v20);
      if (v20 != (char *)buf)
        free(v20);
    }
  }
  switch(a2)
  {
    case 1:
      if (a3)
      {
        v7 = sub_10003A740((_BYTE *)a1, 1);
        if (!(_DWORD)v7)
          goto LABEL_37;
        buf[0] = 1;
        goto LABEL_36;
      }
      v14 = sub_10003A50C((_BYTE *)a1, 1);
      if ((_DWORD)v14)
      {
        buf[0] = 0;
        sub_10002EC44((uint64_t)v14, (unsigned int *)&v21 + 1, buf);
      }
      *(_DWORD *)buf = 2;
      v15 = *(_QWORD **)(a1 + 2224);
      if (!v15)
        return;
      while (1)
      {
        if (sub_1001F8DEC(v15 + 3, (int *)buf))
        {
          v16 = sub_1001F8DEC(v15 + 3, (int *)buf);
          if (!v16)
            goto LABEL_48;
          if (*((_BYTE *)v16 + 40))
            goto LABEL_19;
        }
        v15 = (_QWORD *)*v15;
        if (!v15)
          return;
      }
    case 2:
      if (a3)
      {
        v8 = sub_10003A740((_BYTE *)a1, 2);
        if ((_DWORD)v8)
        {
          buf[0] = 1;
          sub_10002EC44(v8, (unsigned int *)&v21 + 1, buf);
        }
        *(_DWORD *)buf = 1;
        v9 = *(_QWORD **)(a1 + 2224);
        if (!v9)
        {
LABEL_19:
          v11 = (_BYTE *)a1;
          v12 = 5;
LABEL_25:
          sub_10003A740(v11, v12);
          return;
        }
        while (1)
        {
          if (sub_1001F8DEC(v9 + 3, (int *)buf))
          {
            v10 = sub_1001F8DEC(v9 + 3, (int *)buf);
            if (!v10)
LABEL_48:
              sub_100263950("unordered_map::at: key not found");
            if (*((_BYTE *)v10 + 40))
              break;
          }
          v9 = (_QWORD *)*v9;
          if (!v9)
            goto LABEL_19;
        }
      }
      else
      {
        v7 = (uint64_t)sub_10003A50C((_BYTE *)a1, 2);
        if ((_DWORD)v7)
        {
          buf[0] = 0;
LABEL_36:
          sub_10002EC44(v7, (unsigned int *)&v21 + 1, buf);
        }
LABEL_37:
        v17 = (_BYTE *)a1;
        v18 = 5;
LABEL_42:
        sub_10003A50C(v17, v18);
      }
      return;
    case 3:
      if (a3)
      {
        v13 = sub_10003A740((_BYTE *)a1, 3);
        if (!(_DWORD)v13)
          return;
        buf[0] = 1;
      }
      else
      {
        v13 = (uint64_t)sub_10003A50C((_BYTE *)a1, 3);
        if (!(_DWORD)v13)
          return;
        buf[0] = 0;
      }
      sub_10002EC44(v13, (unsigned int *)&v21 + 1, buf);
      return;
    case 4:
      if (a3)
      {
        sub_100012510(a1);
        v11 = (_BYTE *)a1;
        v12 = 4;
        goto LABEL_25;
      }
      v17 = (_BYTE *)a1;
      v18 = 4;
      goto LABEL_42;
    default:
      return;
  }
}

uint64_t *sub_10003A50C(_BYTE *a1, int a2)
{
  uint64_t *v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  char *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  v4 = sub_1001F89A4((uint64_t)a1, 0, a2);
  v5 = a1[2316];
  if (a1[2296])
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  if (a1[2316])
    v8 = a1[2296] == 0;
  else
    v8 = 0;
  if (v8)
    v9 = 2;
  else
    v9 = v7;
  if (a1[2296])
    v10 = v5 == 0;
  else
    v10 = 1;
  if (v10)
    v11 = v9;
  else
    v11 = 1;
  sub_1001F89A4((uint64_t)a1, v11, a2);
  if (a1[2402])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v13 = a1[2316];
      v14 = a1[2296];
      *(_DWORD *)buf = 67174913;
      v23 = v13;
      v24 = 1025;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,updateGnssDailyUseMetricsAtEventEnd,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v16 = a1[2316];
      v17 = a1[2296];
      v19[0] = 67174913;
      v19[1] = v16;
      v20 = 1025;
      v21 = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,updateGnssDailyUseMetricsAtEventEnd,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", v19, 14);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAWD::updateGnssDailyUseMetricsAtEventEnd(const GNSS::GnssSessionEventType)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  return v4;
}

uint64_t sub_10003A740(_BYTE *a1, int a2)
{
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  int v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  int v13;
  int v14;
  int v16;
  int v17;
  char *v18;
  _DWORD v19[2];
  __int16 v20;
  int v21;
  uint8_t buf[4];
  int v23;
  __int16 v24;
  int v25;

  v4 = sub_1001F7974((uint64_t)a1, 0, a2);
  v5 = a1[2316];
  if (a1[2296])
    v6 = v5 == 0;
  else
    v6 = 0;
  if (v6)
    v7 = 3;
  else
    v7 = 4;
  if (a1[2316])
    v8 = a1[2296] == 0;
  else
    v8 = 0;
  if (v8)
    v9 = 2;
  else
    v9 = v7;
  if (a1[2296])
    v10 = v5 == 0;
  else
    v10 = 1;
  if (v10)
    v11 = v9;
  else
    v11 = 1;
  sub_1001F7974((uint64_t)a1, v11, a2);
  if (a1[2402])
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v13 = a1[2316];
      v14 = a1[2296];
      *(_DWORD *)buf = 67174913;
      v23 = v13;
      v24 = 1025;
      v25 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "#gnssca,initializeGnssDailyUseMetricsAtEventStart,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v16 = a1[2316];
      v17 = a1[2296];
      v19[0] = 67174913;
      v19[1] = v16;
      v20 = 1025;
      v21 = v17;
      v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,initializeGnssDailyUseMetricsAtEventStart,isDisplayOn,%{private}d,isOutsideVisit,%{private}d", v19, 14);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAWD::initializeGnssDailyUseMetricsAtEventStart(const GNSS::GnssSessionEventType)", "%s\n", v18);
      if (v18 != (char *)buf)
        free(v18);
    }
  }
  return v4;
}

void sub_10003A974(uint64_t a1, int a2, unsigned int a3, double a4)
{
  NSObject *v5;
  const char *v6;
  NSObject *v10;
  const char *v11;
  const char *v12;
  unsigned int v13;
  const char *v14;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  const char *v25;
  const char *v26;
  void **v27;
  double v28;
  const char *v29;
  const char *v30;
  const char *v31;
  NSObject *v32;
  const char *v33;
  _QWORD *v34;
  const char *v35;
  const char *v36;
  unsigned int v37;
  const char *v38;
  const char *v39;
  int v40;
  const char *v41;
  int v42;
  uint64_t v43;
  const char *v44;
  char *v45;
  unsigned int v46;
  const char *v47;
  char *v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  unsigned int v52;
  const char *v53;
  const char *v54;
  int v55;
  const char *v56;
  int v57;
  char *v58;
  uint64_t v59;
  _QWORD v60[9];
  unsigned int v61;
  int v62;
  const char *v63;
  __int16 v64;
  const char *v65;
  __int16 v66;
  const char *v67;
  __int16 v68;
  const char *v69;
  __int16 v70;
  const char *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  int v79;
  _BYTE buf[24];
  const char *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  const char *v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  const char *v89;
  __int16 v90;
  const char *v91;
  __int16 v92;
  int v93;

  if (*(_DWORD *)(a1 + 56) == a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FB58);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      if ((a2 - 1) > 4)
        v6 = "none";
      else
        v6 = off_10214FB98[a2 - 1];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiStep, same, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FB58);
      if ((a2 - 1) > 4)
        v12 = "none";
      else
        v12 = off_10214FB98[a2 - 1];
      v62 = 136446210;
      v63 = v12;
      v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiStep, same, %{public}s", &v62, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationUpdateRequest::updateStep(Step, CFAbsoluteTime, DoneReason)", "%s\n", v45);
      if (v45 != buf)
        free(v45);
    }
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10214FB58);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if ((a2 - 1) > 4)
        v11 = "none";
      else
        v11 = off_10214FB98[a2 - 1];
      v13 = *(_DWORD *)(a1 + 56) - 1;
      if (v13 > 4)
        v14 = "none";
      else
        v14 = off_10214FB98[v13];
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v11;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v14;
      *(_WORD *)&buf[22] = 2082;
      v81 = sub_10003B3EC(a3);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "WifiFlow, step, %{public}s, from, %{public}s, donereason, %{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10214FB58);
      v43 = qword_1022A0048;
      if ((a2 - 1) > 4)
        v44 = "none";
      else
        v44 = off_10214FB98[a2 - 1];
      v46 = *(_DWORD *)(a1 + 56) - 1;
      if (v46 > 4)
        v47 = "none";
      else
        v47 = off_10214FB98[v46];
      v62 = 136446722;
      v63 = v44;
      v64 = 2082;
      v65 = v47;
      v66 = 2082;
      v67 = sub_10003B3EC(a3);
      v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v43, 0, "WifiFlow, step, %{public}s, from, %{public}s, donereason, %{public}s", &v62, 32);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationUpdateRequest::updateStep(Step, CFAbsoluteTime, DoneReason)", "%s\n", v48);
      if (v48 != buf)
        free(v48);
    }
    *(_DWORD *)(a1 + 56) = a2;
    if (a2 == 5)
    {
      *(_DWORD *)(a1 + 60) = a3;
      v21 = *(double *)(a1 + 64);
      v20 = *(double *)(a1 + 72);
      v22 = a4 - v21;
      *(double *)(a1 + 96) = a4 - v21;
      if (v20 <= 0.0)
        v23 = -1.0;
      else
        v23 = v21 - v20;
      *(double *)(a1 + 72) = v21;
      v24 = *(double *)(a1 + 80);
      v25 = ">5s";
      if (v24 == -1.0)
      {
        v26 = "na";
      }
      else if (v24 <= 0.5)
      {
        v26 = "0.5s";
      }
      else if (v24 <= 1.0)
      {
        v26 = "1s";
      }
      else if (v24 <= 2.0)
      {
        v26 = "2s";
      }
      else if (v24 > 5.0)
      {
        v26 = ">5s";
      }
      else
      {
        v26 = "5s";
      }
      v28 = *(double *)(a1 + 88);
      if (v28 == -1.0)
      {
        v29 = "na";
      }
      else if (v28 <= 0.5)
      {
        v29 = "0.5s";
      }
      else if (v28 <= 1.0)
      {
        v29 = "1s";
      }
      else if (v28 <= 2.0)
      {
        v29 = "2s";
      }
      else if (v28 > 5.0)
      {
        v29 = ">5s";
      }
      else
      {
        v29 = "5s";
      }
      if (v22 <= 5.0)
        v25 = "5s";
      if (v22 <= 2.0)
        v25 = "2s";
      if (v22 <= 1.0)
        v25 = "1s";
      if (v22 <= 0.5)
        v25 = "0.5s";
      if (v22 == -1.0)
        v30 = "na";
      else
        v30 = v25;
      if (v23 == -1.0)
      {
        v31 = "na";
      }
      else if (v23 <= 4.0)
      {
        v31 = "4s";
      }
      else if (v23 <= 7.0)
      {
        v31 = "7s";
      }
      else if (v23 <= 60.0)
      {
        v31 = "1m";
      }
      else if (v23 <= 840.0)
      {
        v31 = "14m";
      }
      else if (v23 <= 960.0)
      {
        v31 = "16m";
      }
      else if (v23 <= 1800.0)
      {
        v31 = "30m";
      }
      else if (v23 > 3600.0)
      {
        v31 = ">1h";
      }
      else
      {
        v31 = "1h";
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10214FB78);
      v32 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        v33 = v30;
        v34 = (_QWORD *)(a1 + 120);
        v35 = v29;
        if (*(char *)(a1 + 143) < 0)
          v34 = (_QWORD *)*v34;
        v36 = v26;
        v37 = *(_DWORD *)(a1 + 112) - 1;
        if (v37 > 6)
          v38 = "none";
        else
          v38 = off_10214FC20[v37];
        v39 = sub_10003B3EC(a3);
        v40 = *(_DWORD *)(a1 + 104);
        if (v40 == 2)
        {
          v41 = "strong";
        }
        else if (v40)
        {
          v41 = "weak";
        }
        else if (*(_BYTE *)(a1 + 108))
        {
          v41 = "empty";
        }
        else
        {
          v41 = "unknown";
        }
        v42 = *(unsigned __int8 *)(a1 + 109);
        *(_DWORD *)buf = 136448258;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v38;
        *(_WORD *)&buf[22] = 2082;
        v81 = v39;
        v82 = 2082;
        v83 = v41;
        v84 = 2082;
        v26 = v36;
        v85 = v36;
        v86 = 2082;
        v29 = v35;
        v87 = v35;
        v88 = 2082;
        v30 = v33;
        v89 = v33;
        v90 = 2082;
        v91 = v31;
        v92 = 1026;
        v93 = v42;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "WlpMetric, request, %{public}s, %{public}s, done, %{public}s, fix, %{public}s, tt, %{public}s, %{public}s, durint, %{public}s, %{public}s, als, %{public}d", buf, 0x58u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        v49 = v31;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10214FB78);
        v50 = (const char *)(a1 + 120);
        if (*(char *)(a1 + 143) < 0)
          v50 = *(const char **)v50;
        v51 = qword_1022A0058;
        v52 = *(_DWORD *)(a1 + 112) - 1;
        if (v52 > 6)
          v53 = "none";
        else
          v53 = off_10214FC20[v52];
        v54 = sub_10003B3EC(a3);
        v55 = *(_DWORD *)(a1 + 104);
        if (v55 == 2)
        {
          v56 = "strong";
        }
        else if (v55)
        {
          v56 = "weak";
        }
        else if (*(_BYTE *)(a1 + 108))
        {
          v56 = "empty";
        }
        else
        {
          v56 = "unknown";
        }
        v57 = *(unsigned __int8 *)(a1 + 109);
        v62 = 136448258;
        v63 = v50;
        v64 = 2082;
        v65 = v53;
        v66 = 2082;
        v67 = v54;
        v68 = 2082;
        v69 = v56;
        v70 = 2082;
        v71 = v26;
        v72 = 2082;
        v73 = v29;
        v74 = 2082;
        v75 = v30;
        v76 = 2082;
        v31 = v49;
        v77 = v49;
        v78 = 1026;
        v79 = v57;
        LODWORD(v59) = 88;
        v58 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "WlpMetric, request, %{public}s, %{public}s, done, %{public}s, fix, %{public}s, tt, %{public}s, %{public}s, durint, %{public}s, %{public}s, als, %{public}d", &v62, v59);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiLocationUpdateRequest::updateStep(Step, CFAbsoluteTime, DoneReason)", "%s\n", v58);
        if (v58 != buf)
          free(v58);
      }
      if (*(_BYTE *)(a1 + 110))
      {
        v60[0] = _NSConcreteStackBlock;
        v60[1] = 3221225472;
        v60[2] = sub_1006F5D7C;
        v60[3] = &unk_10214FB38;
        v61 = a3;
        v60[4] = a1;
        v60[5] = v26;
        v60[6] = v29;
        v60[7] = v30;
        v60[8] = v31;
        AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.request"), v60);
      }
    }
    else if (a2 == 1)
    {
      *(double *)(a1 + 64) = a4;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a1 + 80) = _Q0;
      *(_DWORD *)(a1 + 104) = 0;
      *(_DWORD *)(a1 + 60) = -1;
      *(_QWORD *)(a1 + 96) = 0xBFF0000000000000;
      *(_WORD *)(a1 + 108) = 1;
      *(_DWORD *)(a1 + 112) = *(_DWORD *)a1;
      if (*(char *)(a1 + 39) < 0)
      {
        sub_100115CE4(buf, *(void **)(a1 + 16), *(_QWORD *)(a1 + 24));
      }
      else
      {
        *(_OWORD *)buf = *(_OWORD *)(a1 + 16);
        *(_QWORD *)&buf[16] = *(_QWORD *)(a1 + 32);
      }
      v27 = (void **)(a1 + 120);
      if (*(char *)(a1 + 143) < 0)
        operator delete(*v27);
      *(_OWORD *)v27 = *(_OWORD *)buf;
      *(_QWORD *)(a1 + 136) = *(_QWORD *)&buf[16];
    }
  }
}

const char *sub_10003B3EC(unsigned int a1)
{
  if (a1 > 0xB)
    return "na";
  else
    return off_10214FBC0[a1];
}

void sub_10003B410(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  uint64_t *v5;
  NSObject *v6;
  uint64_t *v7;
  uint64_t *v8;
  const char *v9;
  uint8_t *v10;
  uint64_t *v11;
  const char *v12;
  uint8_t *v13;
  uint64_t v14;
  int v15;
  uint64_t *v16;
  uint8_t buf[4];
  uint64_t *v18;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A47C0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0)
      v5 = a2;
    else
      v5 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136446210;
    v18 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, Fix, 0, ll, N/A, %{public}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    if (*((char *)a2 + 23) >= 0)
      v8 = a2;
    else
      v8 = (uint64_t *)*a2;
    v15 = 136446210;
    v16 = v8;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxIndoor, Fix, 0, ll, N/A, %{public}s", &v15, 12);
    v10 = (uint8_t *)v9;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::notifyClients_LocationUnavailable(const std::string &)", "%s\n", v9);
    if (v10 != buf)
      free(v10);
  }
  if (sub_1000C4240())
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v6 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0)
        v7 = a2;
      else
        v7 = (uint64_t *)*a2;
      *(_DWORD *)buf = 136446210;
      v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, Fix, 0, ll, N/A, %{public}s", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      if (*((char *)a2 + 23) >= 0)
        v11 = a2;
      else
        v11 = (uint64_t *)*a2;
      v15 = 136446210;
      v16 = v11;
      LODWORD(v14) = 12;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxWifi2, Fix, 0, ll, N/A, %{public}s", &v15, v14);
      v13 = (uint8_t *)v12;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::notifyClients_LocationUnavailable(const std::string &)", "%s\n", v12);
      if (v13 != buf)
        free(v13);
    }
  }
  *(_DWORD *)buf = 9;
  sub_10003E064(a1, (uint64_t)buf, 1, 0xFFFFFFFFLL);
}

void sub_10003B768(uint64_t a1, __int32 a2, int *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  double v32;
  double v33;
  double v34;
  uint64_t **v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  double v56;
  const char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD v61[62];
  uint64_t v62;
  std::__shared_weak_count *v63;
  std::__shared_weak_count *v64;
  void *v65;
  char v66;
  std::__shared_weak_count *v67;
  id v68;
  int32x4_t v69;
  uint64_t v70;
  __int16 v71;
  uint64_t v72;
  __int16 v73;
  uint64_t v74;
  __int16 v75;
  double v76;
  __int16 v77;
  double v78;
  _BYTE buf[12];
  __int16 v80;
  uint64_t v81;
  __int16 v82;
  uint64_t v83;
  __int16 v84;
  double v85;
  __int16 v86;
  double v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  uint64_t v96;
  void *__p;
  char v98;
  std::__shared_weak_count *v99;
  id v100;

  v69.i32[2] = a2;
  v7 = sub_100B303DC();
  sub_10010F434((uint64_t)buf);
  sub_100B30A14(v7, (uint64_t *)buf);
  *(_DWORD *)buf = 18;
  v69.i32[0] = 18;
  v69.i32[1] = sub_10142DEC4((int *)buf);
  v8 = sub_1005EE584();
  *(_DWORD *)buf = 4;
  sub_1005FA6E8(v8, (unsigned int *)buf, &v69, (int *)(a1 + 5124), &v69.i32[2], a3, a4);
  if (*a3 == 21)
  {
    *(_DWORD *)buf = 21;
    (*(void (**)(uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, a4, 1, 0xFFFFFFFFLL, 0);
  }
  else if (*a3 == 20)
  {
    LOBYTE(v60) = 0;
    v61[0] = 0xBFF0000000000000;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 288) + 296))(*(_QWORD *)(a1 + 288), a4 + 856, a4 + 848, &v60, v61);
    if ((_BYTE)v60)
    {
      sub_100129CA0((uint64_t)buf);
      v95 = v61[0];
      v96 = *(_QWORD *)(a4 + 856);
      v69.i32[3] = 20;
      (*(void (**)(uint64_t, __int8 *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v69.i8[12], buf, 1, 0xFFFFFFFFLL, 0);

      v9 = v99;
      if (v99)
      {
        p_shared_owners = (unint64_t *)&v99->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v98 < 0)
        operator delete(__p);
      v12 = v94;
      if (v94)
      {
        v13 = (unint64_t *)&v94->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = v93;
      if (v93)
      {
        v16 = (unint64_t *)&v93->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    if (*(double *)(a4 + 848) >= 0.0 && sub_100E7D4CC((double *)(a1 + 2000), *(double *)(a4 + 864)))
    {
      sub_100129CA0((uint64_t)buf);
      v88 = *(_QWORD *)(a4 + 856);
      v87 = *(double *)(a4 + 848);
      v89 = 3;
      v92 = *(_QWORD *)(a4 + 864);
      v91 = *(_QWORD *)(a4 + 872);
      v90 = v88;
      sub_100232700(a1, (uint64_t)buf);

      v18 = v99;
      if (v99)
      {
        v19 = (unint64_t *)&v99->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      if (v98 < 0)
        operator delete(__p);
      v21 = v94;
      if (v94)
      {
        v22 = (unint64_t *)&v94->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      v24 = v93;
      if (v93)
      {
        v25 = (unint64_t *)&v93->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    sub_1004024E8(a1 + 768);
  }
  else
  {
    sub_10011D234((uint64_t)v61, a4);
    *(_QWORD *)buf = a1 + 328;
    if (*(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 116) > 0.0)
    {
      v28 = sub_100B303DC();
      *(_DWORD *)buf = 0;
      v29 = sub_100B30608(v28, buf);
      *(_QWORD *)buf = a1 + 328;
      v30 = v29
          - *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 172);
      if (v30 >= 0.0 && v30 < 4.0)
      {
        v60 = 0;
        *(_QWORD *)buf = a1 + 328;
        v60 = *(uint64_t *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 100);
        v59 = 0;
        *(_QWORD *)buf = a1 + 328;
        v59 = *(uint64_t *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 108);
        *(_QWORD *)buf = a1 + 328;
        if (*(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 148) > 0.0)
        {
          *(_QWORD *)buf = a1 + 328;
          if (*(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 164) > 0.0)
          {
            *(_QWORD *)buf = a1 + 328;
            v32 = *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 100);
            *(_QWORD *)buf = a1 + 328;
            v33 = *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 108);
            *(_QWORD *)buf = a1 + 328;
            v34 = *(double *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 140);
            *(_QWORD *)buf = a1 + 328;
            v35 = sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
            sub_10051560C((double *)&v60, (double *)&v59, v32, v33, v30, v34, *(double *)((char *)v35 + 156));
          }
        }
        v61[60] = v60;
        v61[61] = v59;
        *(_QWORD *)buf = a1 + 328;
        v62 = *(uint64_t *)((char *)sub_1001B2798((uint64_t **)(a1 + 240), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf)+ 116);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v36 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v37 = v59;
          v38 = v60;
          v39 = v62;
          v40 = sub_100B303DC();
          v41 = sub_100B309E0(v40);
          *(_DWORD *)buf = 134284545;
          *(_QWORD *)&buf[4] = v38;
          v80 = 2049;
          v81 = v37;
          v82 = 2050;
          v83 = v39;
          v84 = 2048;
          v85 = v30;
          v86 = 2050;
          v87 = v41;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Accessory,propagated on-device GPS,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,dt,%.3f,propagation_us,%{public}.3f", buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v51 = qword_1022A0028;
          v52 = v59;
          v53 = v60;
          v54 = v62;
          v55 = sub_100B303DC();
          v56 = sub_100B309E0(v55);
          v69.i32[3] = 134284545;
          v70 = v53;
          v71 = 2049;
          v72 = v52;
          v73 = 2050;
          v74 = v54;
          v75 = 2048;
          v76 = v30;
          v77 = 2050;
          v78 = v56;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v51, 2, "Accessory,propagated on-device GPS,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%{public}.1lf,dt,%.3f,propagation_us,%{public}.3f", (char *)&v69.u64[1] + 4, 52);
          v58 = (char *)v57;
          sub_100512490("Generic", 1, 0, 2, "void CLLocationController::onAccessoryNotification(int, const CLLocationProvider_Type::Notification &, const CLLocationProvider_Type::NotificationData &)", "%s\n", v57);
          if (v58 != buf)
            free(v58);
        }
      }
    }
    sub_1001426CC(a1, *(_DWORD *)(a1 + 336), v27, (unsigned int *)a3, (uint64_t)v61);

    v42 = v67;
    if (v67)
    {
      v43 = (unint64_t *)&v67->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
    }
    if (v66 < 0)
      operator delete(v65);
    v45 = v64;
    if (v64)
    {
      v46 = (unint64_t *)&v64->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
    v48 = v63;
    if (v63)
    {
      v49 = (unint64_t *)&v63->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
  }
}

void sub_10003BFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10003C3FC(uint64_t a1, NSObject *a2)
{
  NSObject *v4;
  int v5;
  const char *v6;
  unsigned int v7;
  NSObject *v8;
  char *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  char *v16;
  char *v17;
  char *v18;
  const char *v19;
  _BYTE v20[24];
  _DWORD v21[2];
  __int16 v22;
  const char *v23;
  uint8_t buf[8];
  __int16 v25;
  const char *v26;
  char v27;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
    v6 = sub_10024F90C(objc_msgSend(*(id *)(a1 + 8), "state"));
    *(_DWORD *)buf = 67109378;
    *(_DWORD *)&buf[4] = v5;
    v25 = 2080;
    v26 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "request start pipelined provider, we have %d clients, ProviderState::%s", buf, 0x12u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v13 = qword_1022A0048;
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 200))(*(_QWORD *)(a1 + 24));
    v15 = sub_10024F90C(objc_msgSend(*(id *)(a1 + 8), "state"));
    v21[0] = 67109378;
    v21[1] = v14;
    v22 = 2080;
    v23 = v15;
    LODWORD(v19) = 18;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 2, "request start pipelined provider, we have %d clients, ProviderState::%s", v21, v19);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startProviderImmediately(std::chrono::steady_clock::time_point)", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  v7 = objc_msgSend(*(id *)(a1 + 8), "state");
  objc_msgSend(*(id *)(a1 + 8), "setState:", 2);
  if (!v7)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v10 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "was stopped, starting pipelined provider", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      LOWORD(v21[0]) = 0;
      LODWORD(v19) = 2;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "was stopped, starting pipelined provider", v21, v19);
      sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startProviderImmediately(std::chrono::steady_clock::time_point)", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
LABEL_23:
    v11 = *(void **)(a1 + 8);
    v20[0] = 0;
    objc_msgSend(v11, "setLastIndoorError:", v20);
    if (v20[0])
      v20[0] = 0;
    sub_1015A2E04(buf, "startprovider");
    sub_1001CEC00(a1, 0, (uint64_t *)buf);
    if (v27 < 0)
      operator delete(*(void **)buf);
    sub_1015A2E04(buf, "client/wake");
    sub_100172830(a1, a2, (char *)buf);
    goto LABEL_28;
  }
  if (v7 != 1)
  {
    if (v7 == 2)
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102129DE0);
      v8 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "ignoring request to start provider - already running", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        LOWORD(v21[0]) = 0;
        LODWORD(v19) = 2;
        v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ignoring request to start provider - already running", v21, v19);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startProviderImmediately(std::chrono::steady_clock::time_point)", "%s\n", v9);
        if (v9 != (char *)buf)
          free(v9);
      }
      return;
    }
    goto LABEL_23;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v12 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "interrupting debounce - resuming provider", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    LOWORD(v21[0]) = 0;
    LODWORD(v19) = 2;
    v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "interrupting debounce - resuming provider", v21, v19);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startProviderImmediately(std::chrono::steady_clock::time_point)", "%s\n", v18);
    if (v18 != (char *)buf)
      free(v18);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 56))(*(_QWORD *)(a1 + 24));
  if (!objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    sub_1015A2E04(buf, "interrupting debounce");
    sub_1001CE878(a1, (uint64_t *)buf);
LABEL_28:
    if (v27 < 0)
      operator delete(*(void **)buf);
  }
}

void sub_10003CA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10003CA9C(uint64_t a1)
{
  _BYTE *v2;
  NSObject *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t result;
  NSObject *v7;
  _QWORD *v8;
  _QWORD *v9;
  const char *v10;
  uint8_t *v11;
  _QWORD *v12;
  const char *v13;
  uint8_t *v14;
  int v15;
  _QWORD *v16;
  uint8_t buf[4];
  _QWORD *v18;

  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_3;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
LABEL_3:
    v2 = (_BYTE *)(a1 + 24);
    if (*(_BYTE *)(a1 + 24))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021452C0);
      v3 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
      {
        v4 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v4 = (_QWORD *)*v4;
        *(_DWORD *)buf = 136315138;
        v18 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning persistent store %s has been modified - refreshing will lose changes", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021452C0);
        v9 = (_QWORD *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0)
          v9 = (_QWORD *)*v9;
        v15 = 136315138;
        v16 = v9;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning persistent store %s has been modified - refreshing will lose changes", (const char *)&v15);
        v11 = (uint8_t *)v10;
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v10);
        if (v11 != buf)
          free(v11);
      }
    }
    v5 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v5 = (_QWORD *)*v5;
    result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 816))(a1, v5);
    goto LABEL_23;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021452C0);
  v7 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v8 = (_QWORD *)*v8;
    *(_DWORD *)buf = 136315138;
    v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Store %s is configured for in-memory mode - not refreshing and marking the store as unmodified", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021452C0);
    v12 = (_QWORD *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0)
      v12 = (_QWORD *)*v12;
    v15 = 136315138;
    v16 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "Store %s is configured for in-memory mode - not refreshing and marking the store as unmodified", (const char *)&v15);
    v14 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLPersistentStore::refresh()", "%s\n", v13);
    if (v14 != buf)
      free(v14);
  }
  v2 = (_BYTE *)(a1 + 24);
  result = 1;
LABEL_23:
  *v2 = 0;
  return result;
}

BOOL sub_10003CE20(uint64_t a1, uint64_t a2)
{
  NSURL *v4;
  NSData *v5;
  _BOOL8 result;
  NSObject *v7;
  id v8;
  uint64_t v9;
  id v10;
  const char *v11;
  const char *v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  id v18;
  id v19;
  id v20;
  uint8_t buf[4];
  int v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  id v28;

  v4 = +[NSURL fileURLWithPath:isDirectory:](NSURL, "fileURLWithPath:isDirectory:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", a2), 0);
  v20 = 0;
  if (+[NSData instancesRespondToSelector:](NSData, "instancesRespondToSelector:", "dataWithContentsOfURL:options:error:"))v5 = +[NSData dataWithContentsOfURL:options:error:](NSData, "dataWithContentsOfURL:options:error:", v4, 0, &v20);
  else
    v5 = +[NSData dataWithContentsOfURL:](NSData, "dataWithContentsOfURL:", v4);
  if (!v5)
  {
    if (!v20)
      return 0;
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 872))(a1, 0);
    if (objc_msgSend(objc_msgSend(v20, "domain"), "isEqual:", NSCocoaErrorDomain)
      && objc_msgSend(v20, "code") == (id)260)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102141D38);
      v7 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        v8 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        *(_DWORD *)buf = 68289538;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = a2;
        v27 = 2082;
        v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102141D38);
      }
      v9 = qword_1022A01D8;
      result = os_signpost_enabled((os_log_t)qword_1022A01D8);
      if (!result)
        return result;
      v10 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = a2;
      v27 = 2082;
      v28 = v10;
      v11 = "file does not exist... clearing";
      v12 = "{\"msg%{public}.0s\":\"file does not exist... clearing\", \"file\":%{public, location:escape_only}s, \"error"
            "\":%{public, location:escape_only}s}";
    }
    else
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102141D38);
      v17 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_ERROR))
      {
        v18 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
        *(_DWORD *)buf = 68289538;
        v22 = 0;
        v23 = 2082;
        v24 = "";
        v25 = 2082;
        v26 = a2;
        v27 = 2082;
        v28 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%{public, location:escape_only}s}", buf, 0x26u);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102141D38);
      }
      v9 = qword_1022A01D8;
      result = os_signpost_enabled((os_log_t)qword_1022A01D8);
      if (!result)
        return result;
      v19 = objc_msgSend(objc_msgSend(v20, "description"), "UTF8String");
      *(_DWORD *)buf = 68289538;
      v22 = 0;
      v23 = 2082;
      v24 = "";
      v25 = 2082;
      v26 = a2;
      v27 = 2082;
      v28 = v19;
      v11 = "#Warning Error reading file";
      v12 = "{\"msg%{public}.0s\":\"#Warning Error reading file\", \"file\":%{public, location:escape_only}s, \"error\":%"
            "{public, location:escape_only}s}";
    }
    v15 = v9;
    v16 = 38;
    goto LABEL_32;
  }
  if (((*(uint64_t (**)(uint64_t, NSData *))(*(_QWORD *)a1 + 784))(a1, v5) & 1) != 0)
    return 1;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102141D38);
  v13 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 68289282;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = a2;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}", buf, 0x1Cu);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102141D38);
  }
  v14 = qword_1022A01D8;
  result = os_signpost_enabled((os_log_t)qword_1022A01D8);
  if (result)
  {
    *(_DWORD *)buf = 68289282;
    v22 = 0;
    v23 = 2082;
    v24 = "";
    v25 = 2082;
    v26 = a2;
    v11 = "could not deserialize property list";
    v12 = "{\"msg%{public}.0s\":\"could not deserialize property list\", \"file\":%{public, location:escape_only}s}";
    v15 = v14;
    v16 = 28;
LABEL_32:
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v11, v12, buf, v16);
    return 0;
  }
  return result;
}

BOOL sub_10003D2F8(_QWORD *a1, const __CFData *a2)
{
  id v4;
  CFPropertyListRef v5;
  const void *v6;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v9;
  void **v10;
  uint64_t v12;
  const char *v13;
  char *v14;
  CFErrorRef error;
  _BYTE buf[12];
  __int16 v17;
  const char *v18;
  char v19;
  int v20;
  CFIndex v21;
  __int16 v22;
  const char *v23;
  void *__p[2];
  char v25;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  error = 0;
  v5 = CFPropertyListCreateWithData(kCFAllocatorDefault, a2, 1uLL, 0, &error);
  if (v5)
  {
    v6 = (const void *)a1[1];
    if (v6)
      CFRelease(v6);
    a1[1] = v5;
    (*(void (**)(_QWORD *))(*a1 + 848))(a1);
    goto LABEL_21;
  }
  if (!error)
  {
    Code = 0;
    goto LABEL_9;
  }
  Code = CFErrorGetCode(error);
  if (!error)
  {
LABEL_9:
    Domain = CFSTR("unknown error");
    goto LABEL_10;
  }
  Domain = CFErrorGetDomain(error);
LABEL_10:
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v9 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    if (Domain)
    {
      sub_1001A486C(Domain, (uint64_t)__p);
      if (v25 >= 0)
        v10 = __p;
      else
        v10 = (void **)__p[0];
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v17 = 2082;
      v18 = (const char *)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
      if (v25 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_DWORD *)buf = 134349314;
      *(_QWORD *)&buf[4] = Code;
      v17 = 2082;
      v18 = "unknown error";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not create intermediate property list - %{public}ld (%{public}s)", buf, 0x16u);
    }
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v12 = qword_1022A02D8;
    if (Domain)
    {
      sub_1001A486C(Domain, (uint64_t)buf);
      if (v19 >= 0)
        v13 = buf;
      else
        v13 = *(const char **)buf;
    }
    else
    {
      v13 = "unknown error";
    }
    v20 = 134349314;
    v21 = Code;
    v22 = 2082;
    v23 = v13;
    v14 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 17, "could not create intermediate property list - %{public}ld (%{public}s)", &v20, 22);
    if (Domain && v19 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::deserialize(const CFDataRef)", "%s\n", v14);
    if (v14 != (char *)__p)
      free(v14);
  }
LABEL_21:
  if (error)
    CFRelease(error);

  return v5 != 0;
}

void sub_10003D63C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_10003D678(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  NSObject *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  NSObject *v22;
  const char *v23;
  uint8_t *v24;
  int v25;
  int v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  NSObject *v30;
  int v31;
  int v32;
  int v33;
  int v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  NSObject *v38;
  const char *v39;
  uint8_t *v40;
  const char *v41;
  uint8_t *v42;
  int v43;
  int v44;
  const char *v45;
  uint8_t *v46;
  const char *v47;
  uint8_t *v48;
  uint64_t v49;
  _DWORD v50[2];
  __int16 v51;
  int v52;
  uint8_t buf[8];
  std::__shared_weak_count *v54;

  sub_1001E4804(buf);
  LOBYTE(v50[0]) = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v50);
  if (LOBYTE(v50[0]))
    v3 = v2;
  else
    v3 = 0;
  v4 = v54;
  if (!v54)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v54->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v3)
      goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,updateCellularNetworkStatistics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    LOWORD(v50[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,updateCellularNetworkStatistics", v50, 2);
    v40 = (uint8_t *)v39;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v39);
    if (v40 != buf)
      free(v40);
  }
LABEL_14:
  v8 = *(_DWORD *)(a1 + 2516);
  if (!v8)
    return;
  v9 = *(_DWORD *)(a1 + 2544);
  if (!v9)
  {
    sub_1001E4804(buf);
    LOBYTE(v50[0]) = 0;
    v17 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v50);
    if (LOBYTE(v50[0]))
      v18 = v17;
    else
      v18 = 0;
    v19 = v54;
    if (!v54)
      goto LABEL_40;
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v18)
        goto LABEL_41;
    }
    else
    {
LABEL_40:
      if (v18)
      {
LABEL_41:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v22 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,First Epoch", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v50[0]) = 0;
          LODWORD(v49) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,First Epoch", v50, v49);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
      }
    }
LABEL_80:
    v16 = 1;
    goto LABEL_81;
  }
  if (v8 != v9)
  {
    sub_1001E4804(buf);
    LOBYTE(v50[0]) = 0;
    v25 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v50);
    if (LOBYTE(v50[0]))
      v26 = v25;
    else
      v26 = 0;
    v27 = v54;
    if (!v54)
      goto LABEL_57;
    v28 = (unint64_t *)&v54->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      if (v26)
        goto LABEL_58;
    }
    else
    {
LABEL_57:
      if (v26)
      {
LABEL_58:
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v31 = *(_DWORD *)(a1 + 2560);
          v32 = *(_DWORD *)(a1 + 2496);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&buf[4] = v31;
          LOWORD(v54) = 1024;
          *(_DWORD *)((char *)&v54 + 2) = v32;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with band change,EpochCountForCurrentTransmissionFrequencyBand,%d,fEpochCountForLastLongestCampedCellularBand,%d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          v43 = *(_DWORD *)(a1 + 2560);
          v44 = *(_DWORD *)(a1 + 2496);
          v50[0] = 67109376;
          v50[1] = v43;
          v51 = 1024;
          v52 = v44;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,Epoch with band change,EpochCountForCurrentTransmissionFrequencyBand,%d,fEpochCountForLastLongestCampedCellularBand,%d", v50, 14);
          v46 = (uint8_t *)v45;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v45);
          if (v46 != buf)
            free(v46);
        }
      }
    }
    if (*(_DWORD *)(a1 + 2560) >= *(_DWORD *)(a1 + 2496))
    {
      sub_1001E4804(buf);
      LOBYTE(v50[0]) = 0;
      v33 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v50);
      if (LOBYTE(v50[0]))
        v34 = v33;
      else
        v34 = 0;
      v35 = v54;
      if (v54)
      {
        v36 = (unint64_t *)&v54->__shared_owners_;
        do
          v37 = __ldaxr(v36);
        while (__stlxr(v37 - 1, v36));
        if (!v37)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          std::__shared_weak_count::__release_weak(v35);
        }
      }
      if (v34)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v38 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with longest camped in a GNSS session", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021CE050);
          LOWORD(v50[0]) = 0;
          LODWORD(v49) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,Epoch with longest camped in a GNSS session", v50, v49);
          v48 = (uint8_t *)v47;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v47);
          if (v48 != buf)
            free(v48);
        }
      }
      sub_10021B038(a1);
      *(_BYTE *)(a1 + 2540) = 1;
    }
    *(_QWORD *)(a1 + 2576) = *(_QWORD *)(a1 + 2568);
    *(_QWORD *)(a1 + 2600) = *(_QWORD *)(a1 + 2592);
    goto LABEL_80;
  }
  sub_1001E4804(buf);
  LOBYTE(v50[0]) = 0;
  v10 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)v50);
  if (LOBYTE(v50[0]))
    v11 = v10;
  else
    v11 = 0;
  v12 = v54;
  if (!v54)
    goto LABEL_24;
  v13 = (unint64_t *)&v54->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    if (v11)
      goto LABEL_25;
  }
  else
  {
LABEL_24:
    if (v11)
    {
LABEL_25:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Epoch with same band as previous", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        LOWORD(v50[0]) = 0;
        LODWORD(v49) = 2;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,Epoch with same band as previous", v50, v49);
        v42 = (uint8_t *)v41;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::updateCellularNetworkStatistics()", "%s\n", v41);
        if (v42 != buf)
          free(v42);
      }
    }
  }
  v16 = *(_DWORD *)(a1 + 2560) + 1;
LABEL_81:
  *(_DWORD *)(a1 + 2560) = v16;
  sub_100045810(a1);
}

void sub_10003DFA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003DFD4(uint64_t a1)
{
  int v3;

  v3 = 2;
  if (!sub_1001B7864(a1, &v3, 1))
  {
    v3 = 1;
    if (!sub_1001B7864(a1, &v3, 1))
    {
      v3 = 0;
      if (!sub_1001B7864(a1, &v3, 1))
      {
        v3 = 9;
        (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 120))(a1, &v3);
      }
    }
  }
  return 1;
}

void sub_10003E064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _BYTE v17[688];
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  void *__p;
  char v21;
  std::__shared_weak_count *v22;
  id v23;

  sub_100129CA0((uint64_t)v17);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v17, a3, a4, 0);

  v8 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v21 < 0)
    operator delete(__p);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v18;
  if (v18)
  {
    v15 = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_10003E194(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003E1EC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  uint8_t buf[32];
  int v45;

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        v45 = 0;
        memset(buf, 0, sizeof(buf));
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, uint8_t *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_100549014();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_1022A2B41;
        HIDWORD(v38) = v17;
        *(_QWORD *)buf = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)buf = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)buf = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        *(_DWORD *)buf = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102142C28);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = v15;
    *(_WORD *)&buf[12] = 1026;
    *(_DWORD *)&buf[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102142C28);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLMotionStateObserver_Type::Notification, CLMotionStateObserver_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLMotionStateObserver_Type::Notification, NotificationData_T = CLMotionStateObserver_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_10003E650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_1022A2B40);
}

uint64_t sub_10003E664(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;
  __int128 v13;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  v13 = v11[1];
  *(_DWORD *)(a3 + 32) = *((_DWORD *)v11 + 8);
  *(_OWORD *)a3 = v12;
  *(_OWORD *)(a3 + 16) = v13;
  return 1;
}

uint64_t sub_10003E6CC(uint64_t a1, CFTypeRef *a2)
{
  __CFWriteStream *v4;
  __CFWriteStream *v5;
  CFIndex v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  char *v10;
  CFIndex Code;
  const __CFString *Domain;
  NSObject *v13;
  uint8_t *v14;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  CFErrorRef error;
  _BYTE v20[12];
  __int16 v21;
  uint8_t *v22;
  char v23;
  int v24;
  CFIndex v25;
  __int16 v26;
  _BYTE *v27;
  uint8_t buf[8];
  char v29;

  v4 = CFWriteStreamCreateWithAllocatedBuffers(kCFAllocatorDefault, kCFAllocatorDefault);
  error = 0;
  if (v4)
  {
    v5 = v4;
    if (!CFWriteStreamOpen(v4))
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "could not open write stream", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_35;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102141D18);
      *(_WORD *)v20 = 0;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not open write stream", v20, 2);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v10);
      if (v10 == (char *)buf)
        goto LABEL_35;
LABEL_51:
      free(v10);
LABEL_35:
      v7 = 0;
LABEL_36:
      CFRelease(v5);
      if (error)
        CFRelease(error);
      return v7;
    }
    v6 = CFPropertyListWrite(*(CFPropertyListRef *)(a1 + 8), v5, kCFPropertyListBinaryFormat_v1_0, 0, &error);
    if (!error && v6)
    {
      *a2 = CFWriteStreamCopyProperty(v5, kCFStreamPropertyDataWritten);
      CFWriteStreamClose(v5);
      v7 = 1;
      goto LABEL_36;
    }
    if (error)
    {
      Code = CFErrorGetCode(error);
      if (error)
      {
        Domain = CFErrorGetDomain(error);
        goto LABEL_26;
      }
    }
    else
    {
      Code = 0;
    }
    Domain = CFSTR("unknown error");
LABEL_26:
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v13 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      sub_1001A486C(Domain, (uint64_t)buf);
      v14 = v29 >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v20 = 134349314;
      *(_QWORD *)&v20[4] = Code;
      v21 = 2082;
      v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "could not write data, error code, %{public}ld, error domain, %{public}s", v20, 0x16u);
      if (v29 < 0)
        operator delete(*(void **)buf);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_35;
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    v17 = qword_1022A02D8;
    sub_1001A486C(Domain, (uint64_t)v20);
    if (v23 >= 0)
      v18 = v20;
    else
      v18 = *(_BYTE **)v20;
    v24 = 134349314;
    v25 = Code;
    v26 = 2082;
    v27 = v18;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 17, "could not write data, error code, %{public}ld, error domain, %{public}s", &v24, 22);
    if (v23 < 0)
      operator delete(*(void **)v20);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v10);
    if (v10 == (char *)buf)
      goto LABEL_35;
    goto LABEL_51;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102141D18);
  v8 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "could not create write stream", buf, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102141D18);
    *(_WORD *)v20 = 0;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 17, "could not create write stream", v20, 2);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNameValuePair::serializeBinary(CFDataRef *) const", "%s\n", v16);
    if (v16 != (char *)buf)
      free(v16);
  }
  return 0;
}

uint64_t sub_10003EC20()
{
  if ((sub_10003EC70() & 1) != 0)
    return 1;
  if (qword_102303E10 != -1)
    dispatch_once(&qword_102303E10, &stru_102151510);
  return byte_102303E08;
}

uint64_t sub_10003EC70()
{
  unsigned int v0;
  _BOOL4 v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  BOOL v8;

  sub_1001E4804(&v6);
  v8 = 0;
  v0 = sub_1001E4874(v6, "EnableRhythmicWakingGnss", &v8);
  v1 = v8;
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  if (v1)
    return v0;
  else
    return 0;
}

void sub_10003ED04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003ED18(uint64_t a1, int a2, int *a3)
{
  int v6;
  int v7;
  int v9;
  NSObject *v10;
  uint64_t *v11;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  char *v16;
  int v17;
  int *v18;
  __int16 v19;
  int v20;
  __int16 v21;
  uint64_t *v22;
  uint8_t buf[8];
  __int16 v24;
  int v25;
  __int16 v26;
  uint64_t *v27;

  v17 = a2;
  sub_10003F1C4((char *)a1, a2, a3);
  if (*a3 == 12)
  {
    *(_DWORD *)buf = 12;
    v6 = sub_1001B7864(a1, (int *)buf, 1);
    v7 = *(_DWORD *)(a1 + 284);
    if (v6 != v7 && v7 >= 1)
    {
      v9 = v6;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v10 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        *(_QWORD *)buf = &v17;
        v11 = sub_100041CE0((uint64_t **)(a1 + 696), &v17, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[5];
        *(_DWORD *)buf = 67240707;
        *(_DWORD *)&buf[4] = v9;
        v24 = 1026;
        v25 = a2;
        v26 = 2081;
        v27 = v11;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "@WsbReg, clients, %{public}d, minus, idname, %{public}d, %{private}s", buf, 0x18u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021469F0);
        v13 = qword_1022A0058;
        v14 = v17;
        v18 = &v17;
        v15 = sub_100041CE0((uint64_t **)(a1 + 696), &v17, (uint64_t)&unk_101B9EB60, &v18)[5];
        LODWORD(v18) = 67240707;
        HIDWORD(v18) = v9;
        v19 = 1026;
        v20 = v14;
        v21 = 2081;
        v22 = v15;
        v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "@WsbReg, clients, %{public}d, minus, idname, %{public}d, %{private}s", &v18, 24);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiService::unregisterForNotification(int, const CLWifiService_Type::Notification &)", "%s\n", v16);
        if (v16 != (char *)buf)
          free(v16);
      }
      sub_1005BFDD8(a1, 0, v17, 0);
      sub_1005B2834(a1, 0, 0);
      *(_DWORD *)(a1 + 284) = v9;
    }
    sub_10003EFD0(a1, (uint64_t)"unreg");
  }
  return 1;
}

void sub_10003EFD0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  char *v9;
  int v10;
  uint64_t v11;
  __int16 v12;
  int v13;
  __int16 v14;
  int v15;
  uint8_t buf[4];
  uint64_t v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;

  if (*(_QWORD *)(a1 + 712) != *(_DWORD *)(a1 + 284))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021469F0);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 712);
      v6 = *(_DWORD *)(a1 + 284);
      *(_DWORD *)buf = 136446722;
      v17 = a2;
      v18 = 1026;
      v19 = v5;
      v20 = 1026;
      v21 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "WsbClients, mismatch, %{public}s, %{public}d, %{public}d, #CloneMe", buf, 0x18u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021469F0);
      v7 = *(_QWORD *)(a1 + 712);
      v8 = *(_DWORD *)(a1 + 284);
      v10 = 136446722;
      v11 = a2;
      v12 = 1026;
      v13 = v7;
      v14 = 1026;
      v15 = v8;
      v9 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WsbClients, mismatch, %{public}s, %{public}d, %{public}d, #CloneMe", &v10, 24);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiService::wsbConfirmClientCounts(const char *)", "%s\n", v9);
      if (v9 != (char *)buf)
        free(v9);
    }
  }
}

BOOL sub_10003F1C4(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_1000B072C((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021469B0);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021469B0);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLWifiService_Type::Notification, CLWifiService_Type::NotificationData, char, CLWifiService_Type::RegInfo>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLWifiService_Type::Notification, NotificationData_T = CLWifiService_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLWifiService_Type::RegInfo]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

void sub_10003FAB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FAE0(uint64_t a1, __int128 *a2)
{
  uint64_t *v4;
  double v5;
  double v6;
  uint64_t v7;
  int v8;
  NSObject *v9;
  std::string *v10;
  NSObject *v11;
  std::string *v12;
  NSObject *v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  NSObject *v18;
  std::string *v19;
  uint64_t v20;
  std::string *p_buf;
  std::string *v22;
  uint64_t v23;
  std::string *v24;
  std::string *v25;
  uint64_t v26;
  std::string *v27;
  std::string *v28;
  std::string *v29;
  uint64_t v30;
  std::string buf;
  int v32;
  std::string *v33;
  std::string __p[68];

  v4 = sub_1000A3224();
  if (!sub_10023E934((uint64_t)v4))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v9 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), __p);
      v10 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it got disabled by CLWifi1Settings!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v20 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_buf = &buf;
      else
        p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      v32 = 136380675;
      v33 = p_buf;
      v22 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v20, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as it got disabled by CLWifi1Settings!", &v32, 12);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v22);
      if (v22 != __p)
        free(v22);
    }
    sub_1015A2E04(__p, "NO: disabled_by_settings");
    sub_100040370(a1 + 728, __p);
    goto LABEL_28;
  }
  sub_100029148(a1);
  sub_100FFB34C(a1 + 632, (uint64_t)a2);
  v5 = *(double *)(a1 + 536);
  if (v5 < -90.0 || v5 > 90.0 || (v6 = *(double *)(a1 + 544), v6 > 180.0) || v6 < -180.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v11 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), __p);
      v12 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it does not have a valid centroid!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v23 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &buf;
      else
        v24 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v32 = 136380675;
      v33 = v24;
      v25 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v23, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as it does not have a valid centroid!", &v32, 12);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v25);
      if (v25 != __p)
        free(v25);
    }
    sub_1015A2E04(__p, "NO: centroid_invalid");
    sub_100040370(a1 + 728, __p);
    goto LABEL_28;
  }
  (*(void (**)(std::string *__return_ptr))(**(_QWORD **)(a1 + 464) + 48))(&buf);
  if (buf.__r_.__value_.__r.__words[0])
  {
    sub_1000CB0B0((uint64_t)buf.__r_.__value_.__l.__data_);
    sub_100239878((uint64_t)buf.__r_.__value_.__l.__data_);
    v7 = buf.__r_.__value_.__r.__words[0];
    sub_100014168(a1 + 536, (uint64_t)__p);
    v8 = sub_100239880(v7, (double *)__p);
  }
  else
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v14 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      LOWORD(__p[0].__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "WifiCalc, #warning, movingApDetector is null", (uint8_t *)__p, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      LOWORD(v32) = 0;
      v29 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCalc, #warning, movingApDetector is null", &v32, 2);
      sub_100512490("Generic", 1, 0, 2, "BOOL isBadClientSideCentroidByMovingApDetector(const std::shared_ptr<CLMovingApDetector> &, const CLWifiAccessPoint &)", "%s\n", (const char *)v29);
      if (v29 != __p)
        free(v29);
    }
    v8 = 0;
  }
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  if (buf.__r_.__value_.__l.__size_)
  {
    v16 = (unint64_t *)(buf.__r_.__value_.__l.__size_ + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v8)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v18 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000C2254((_QWORD *)(a1 + 352), __p);
      v19 = (__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? __p
          : (std::string *)__p[0].__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136380675;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "WifiCalc, skip updating computed location using associated AP %{private}s as it fails to pass cross-check with GPS/Cell!", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p[0].__r_.__value_.__l.__data_);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102191998);
      v26 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 352), &buf);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v27 = &buf;
      else
        v27 = (std::string *)buf.__r_.__value_.__r.__words[0];
      v32 = 136380675;
      v33 = v27;
      LODWORD(v30) = 12;
      v28 = (std::string *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v26, 0, "WifiCalc, skip updating computed location using associated AP %{private}s as it fails to pass cross-check with GPS/Cell!", &v32, v30);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocationIfPossible(CL::Wifi1::Types::ComputedLocation &)", "%s\n", (const char *)v28);
      if (v28 != __p)
        free(v28);
    }
    sub_1015A2E04(__p, "NO: moving_ap_detector");
    sub_100040370(a1 + 728, __p);
LABEL_28:
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    return 0;
  }
  sub_10021D250(a1 + 728, (const std::string *)(a1 + 1352));
  sub_10021DFB0(a1, a2);
  if (!sub_1000A192C(a1))
  {
    sub_10021D248(a1 + 728, 0);
    return 0;
  }
  sub_10005CA0C(a1, (uint64_t)a2);
  sub_10021D248(a1 + 728, 1);
  return 1;
}

void sub_100040334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_100040370(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(a1 + 536), a2);
}

uint64_t sub_100040378(uint64_t a1)
{
  __int128 v2;
  double v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void **v8;
  __int128 v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[71];

  *(_QWORD *)a1 = off_1021A36C0;
  sub_1001B527C(a1, 0xFFFFFFFFLL);

  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(double *)&v2 = CFAbsoluteTimeGetCurrent();
  if (*(_BYTE *)(a1 + 312))
  {
    v3 = *(double *)&v2;
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
    v4 = qword_1022A01C8;
    if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)v25 = 68289282;
      *(_WORD *)&v25[8] = 2082;
      *(_QWORD *)&v25[10] = "";
      *(_WORD *)&v25[18] = 2114;
      *(_QWORD *)&v25[20] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"ending metric session (LocationUpdateSession)\", \"Client\":%{public, location:escape_only}@}", v25, 0x1Cu);
    }
    *(double *)(a1 + 376) = v3;
    *(_BYTE *)(a1 + 432) = *(_BYTE *)(a1 + 236);
    if (*(_BYTE *)(a1 + 58))
      *(double *)(a1 + 504) = *(double *)(a1 + 504) + v3 - *(double *)(a1 + 64);
    v6 = sub_10073C788();
    sub_10073CFC8(v6, (unsigned __int8 *)(a1 + 312));
    memset(v25, 0, sizeof(v25));
    v7 = 0uLL;
    *(_QWORD *)(a1 + 312) = 0;
    *(_QWORD *)(a1 + 320) = 0xBFF0000000000000;
    v8 = (void **)(a1 + 328);
    if (*(char *)(a1 + 351) < 0)
    {
      operator delete(*v8);
      v7 = 0uLL;
    }
    *(_OWORD *)v8 = v7;
    *(_OWORD *)(a1 + 344) = v7;
    *(_DWORD *)(a1 + 360) = 1000;
    *(_DWORD *)(a1 + 372) = 0;
    *(_QWORD *)(a1 + 364) = 0;
    *(_QWORD *)(a1 + 376) = 0xBFF0000000000000;
    __asm { FMOV            V1.2D, #-1.0 }
    *(_OWORD *)(a1 + 384) = xmmword_101BAFEE0;
    *(_OWORD *)(a1 + 400) = _Q1;
    *(_OWORD *)(a1 + 416) = _Q1;
    *(_BYTE *)(a1 + 432) = 0;
    *(_QWORD *)(a1 + 496) = *(_QWORD *)&v25[63];
    *(_QWORD *)(a1 + 504) = 0xBFF0000000000000;
    v14 = *(_OWORD *)&v25[48];
    *(_OWORD *)(a1 + 465) = *(_OWORD *)&v25[32];
    *(_OWORD *)(a1 + 481) = v14;
    v2 = *(_OWORD *)&v25[16];
    *(_OWORD *)(a1 + 433) = *(_OWORD *)v25;
    *(_OWORD *)(a1 + 449) = v2;
  }
  objc_msgSend(*(id *)(a1 + 576), "invalidate", *(double *)&v2, *(_OWORD *)v25, *(_OWORD *)&v25[16]);

  *(_QWORD *)(a1 + 576) = 0;
  if (*(_BYTE *)(a1 + 88))
    objc_msgSend(*(id *)(a1 + 72), "releaseAccuracyEnablementAssertionForClient:", *(_QWORD *)(a1 + 48));

  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  v15 = (void *)sub_10022E420(a1, 0);
  objc_msgSend(v15, "invalidate:", 1);

  v16 = *(void **)(a1 + 112);
  if (v16)
  {
    objc_msgSend(v16, "invalidate");

    *(_QWORD *)(a1 + 112) = 0;
  }
  objc_msgSend(*(id *)(a1 + 280), "invalidate");

  *(_QWORD *)(a1 + 280) = 0;
  v17 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  objc_msgSend(*(id *)(a1 + 48), "setValid:", 0);

  *(_QWORD *)(a1 + 48) = 0;
  sub_100090A0C((_QWORD *)(a1 + 552));
  sub_100090A0C((_QWORD *)(a1 + 520));
  sub_1011644B8((id **)(a1 + 512), 0);
  if (*(char *)(a1 + 351) < 0)
    operator delete(*(void **)(a1 + 328));
  sub_100261F44(a1 + 288);
  v19 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 160) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v21)
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  v22 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_1007F9198((uint64_t *)(a1 + 104), 0);
  sub_10002FA68(a1);
  return a1;
}

void sub_100040704(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

void sub_100040710()
{
  NSObject *v0;
  __CFNotificationCenter *DarwinNotifyCenter;
  char *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v0 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#gnssband,sendGnssBandChangeNotification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v3[0] = 0;
    v2 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssband,sendGnssBandChangeNotification", v3, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::sendGnssBandChangeNotification()", "%s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLGnssBandsChangedNotification, 0, 0, 0);
}

double sub_1000408B4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  void **v7;
  char *v8;
  size_t v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  void **v13;
  int v14;
  NSObject *v15;
  uint64_t v16;
  __int128 v17;
  NSObject *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  NSObject *v24;
  int v25;
  void **v26;
  void **v27;
  void **v28;
  NSObject *v29;
  uint64_t v30;
  __int128 v31;
  int v32;
  void **v33;
  void **v34;
  void **v35;
  uint64_t v36;
  __int128 v37;
  double result;
  NSObject *v39;
  NSObject *v40;
  const char *v41;
  const char *v42;
  char *v43;
  const char *v44;
  const char *v45;
  char *v46;
  uint64_t v47;
  void *__p[2];
  char v49;
  void *__dst[2];
  uint64_t v51;
  _BYTE buf[28];
  __int16 v53;
  void **v54;

  if (!*(_BYTE *)(a1 + 488))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v15 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      v16 = *(_QWORD *)(a1 + 16);
      if (*(char *)(v16 + 31) < 0)
      {
        sub_100115CE4(__dst, *(void **)(v16 + 8), *(_QWORD *)(v16 + 16));
      }
      else
      {
        v17 = *(_OWORD *)(v16 + 8);
        v51 = *(_QWORD *)(v16 + 24);
        *(_OWORD *)__dst = v17;
      }
      v25 = SHIBYTE(v51);
      v26 = (void **)__dst[0];
      sub_1002E6448((char *)a2, (uint64_t)__p);
      v27 = __dst;
      if (v25 < 0)
        v27 = v26;
      if (v49 >= 0)
        v28 = __p;
      else
        v28 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v27;
      v53 = 2081;
      v54 = v28;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"LOI Manager, Got event when not expecting it\", \"State\":%{private, location:escape_only}s, \"Event\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v51) < 0)
        operator delete(__dst[0]);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    }
    v29 = qword_1022A00F8;
    if (os_signpost_enabled((os_log_t)qword_1022A00F8))
    {
      v30 = *(_QWORD *)(a1 + 16);
      if (*(char *)(v30 + 31) < 0)
      {
        sub_100115CE4(__dst, *(void **)(v30 + 8), *(_QWORD *)(v30 + 16));
      }
      else
      {
        v31 = *(_OWORD *)(v30 + 8);
        v51 = *(_QWORD *)(v30 + 24);
        *(_OWORD *)__dst = v31;
      }
      v32 = SHIBYTE(v51);
      v33 = (void **)__dst[0];
      sub_1002E6448((char *)a2, (uint64_t)__p);
      v34 = __dst;
      if (v32 < 0)
        v34 = v33;
      if (v49 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      *(_DWORD *)buf = 68289539;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2081;
      *(_QWORD *)&buf[20] = v34;
      v53 = 2081;
      v54 = v35;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v29, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "LOI Manager, Got event when not expecting it", "{\"msg%{public}.0s\":\"LOI Manager, Got event when not expecting it\", \"State\":%{private, location:escape_only}s, \"Event\":%{private, location:escape_only}s}", buf, 0x26u);
      if (v49 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v51) < 0)
        operator delete(__dst[0]);
    }
    v36 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v36 + 31) < 0)
    {
      sub_100115CE4(buf, *(void **)(v36 + 8), *(_QWORD *)(v36 + 16));
      goto LABEL_80;
    }
    goto LABEL_78;
  }
  v6 = *(void **)(a2 + 32);
  if (!v6)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v18 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#LOIManager, Received nil object in eventData, this shouldn't happen", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    LOWORD(__dst[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "#LOIManager, Received nil object in eventData, this shouldn't happen", __dst, 2);
    v20 = (char *)v19;
    sub_100512490("Generic", 1, 0, 0, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v19);
    goto LABEL_104;
  }
  if (!objc_msgSend(v6, "loiIdentifier"))
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "LOI Manager, got nil LOI for current Location.. perhaps not in an LOI", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_44;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    LOWORD(__dst[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 0, "LOI Manager, got nil LOI for current Location.. perhaps not in an LOI", __dst, 2);
    v20 = (char *)v22;
    sub_100512490("Generic", 1, 0, 2, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v22);
    goto LABEL_104;
  }
  sub_10032E2DC((uint64_t)objc_msgSend(*(id *)(a2 + 32), "type"), buf);
  v7 = (void **)(a1 + 368);
  if (*(char *)(a1 + 391) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)buf;
  *(_QWORD *)(a1 + 384) = *(_QWORD *)&buf[16];
  v8 = (char *)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "loiIdentifier"), "UUIDString"), "UTF8String");
  v9 = strlen(v8);
  *(_QWORD *)(a1 + 408) = sub_1002B7330((uint64_t)buf, (unsigned __int8 *)v8, (unsigned __int8 *)&v8[v9]);
  *(_QWORD *)(a1 + 416) = v10;
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021302D8);
  v11 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    v12 = objc_msgSend(objc_msgSend(*(id *)(a2 + 32), "loiIdentifier"), "description");
    v13 = (void **)(a1 + 368);
    if (*(char *)(a1 + 391) < 0)
      v13 = (void **)*v7;
    *(_DWORD *)buf = 68289539;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2113;
    *(_QWORD *)&buf[20] = v12;
    v53 = 2081;
    v54 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"LOI Manager, Retrieved location of interest\", \"LOI ID\":%{private, location:escape_only}@, \"LOI TYPE\":%{private, location:escape_only}s}", buf, 0x26u);
  }
  v14 = *(char *)(a1 + 391);
  if ((v14 & 0x80000000) == 0)
  {
    if (v14 != 4)
      goto LABEL_39;
    goto LABEL_38;
  }
  if (*(_QWORD *)(a1 + 376) == 4)
  {
    v7 = (void **)*v7;
LABEL_38:
    if (*(_DWORD *)v7 != 1701670760)
      goto LABEL_39;
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    v39 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "LOI Manager, fetching related LOIs for LOI", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      LOWORD(__dst[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "LOI Manager, fetching related LOIs for LOI", __dst, 2);
      v46 = (char *)v45;
      sub_100512490("Generic", 1, 0, 2, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v45);
      if (v46 != buf)
        free(v46);
    }
    if (!sub_10032E580(a1, (uint64_t)objc_msgSend(*(id *)(a2 + 32), "loiIdentifier")))
    {
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      v40 = qword_1022A00F8;
      if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "LOI Manager, Failed To request related LOIs", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_44;
      bzero(buf, 0x65CuLL);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_1021302D8);
      LOWORD(__dst[0]) = 0;
      LODWORD(v47) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 16, "LOI Manager, Failed To request related LOIs", __dst, v47);
      v20 = (char *)v41;
      sub_100512490("Generic", 1, 0, 0, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v41);
      goto LABEL_104;
    }
    *(_WORD *)(a1 + 488) = 256;
    v36 = *(_QWORD *)(a1 + 16);
    if (*(char *)(v36 + 31) < 0)
    {
      sub_100115CE4(buf, *(void **)(v36 + 8), *(_QWORD *)(v36 + 16));
      goto LABEL_80;
    }
LABEL_78:
    v37 = *(_OWORD *)(v36 + 8);
    *(_QWORD *)&buf[16] = *(_QWORD *)(v36 + 24);
    *(_OWORD *)buf = v37;
    goto LABEL_80;
  }
LABEL_39:
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021302D8);
  v23 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "LOI Manager, Not a Home LOI", buf, 2u);
  }
  if (!sub_1001BFF7C(115, 2))
    goto LABEL_44;
  bzero(buf, 0x65CuLL);
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021302D8);
  LOWORD(__dst[0]) = 0;
  _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "LOI Manager, Not a Home LOI", __dst, 2);
  v20 = (char *)v44;
  sub_100512490("Generic", 1, 0, 2, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v44);
LABEL_104:
  if (v20 != buf)
    free(v20);
LABEL_44:
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_1021302D8);
  v24 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "LOI Manager, Returning to Inactive Location State", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_1021302D8);
    LOWORD(__dst[0]) = 0;
    LODWORD(v47) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 1, "LOI Manager, Returning to Inactive Location State", __dst, v47);
    v43 = (char *)v42;
    sub_100512490("Generic", 1, 0, 2, "std::optional<std::string> CLMicroLocationLoiManager::LoiForGivenLocation(const CLMiLoLoiManagerReceivedLoiForLocationEvent *)", "%s\n", v42);
    if (v43 != buf)
      free(v43);
  }
  std::string::assign((std::string *)(a1 + 368), "unknown");
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_QWORD *)(a1 + 448) = *(_QWORD *)(a1 + 440);
  if (*(_BYTE *)(a1 + 484))
    *(_BYTE *)(a1 + 484) = 0;
  sub_1015A2E04(buf, "Not in Active Location State");
LABEL_80:
  result = *(double *)buf;
  *(_OWORD *)a3 = *(_OWORD *)buf;
  *(_QWORD *)(a3 + 16) = *(_QWORD *)&buf[16];
  *(_BYTE *)(a3 + 24) = 1;
  return result;
}

void sub_100041458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100041480(uint64_t a1, uint64_t a2)
{
  uint64_t **v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t **v7;
  int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t **v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t **v15;
  uint64_t **v16;
  unint64_t v17;
  int v18;
  unint64_t v19;
  BOOL v20;
  double v21;
  unint64_t v22;
  BOOL v23;
  double v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  double v29;
  double v30;
  NSObject *v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  unint64_t v36;
  int *v37;
  double v38;
  double v39;
  int *v40;
  int v41;
  int v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  NSObject *v47;
  int v48;
  int v49;
  int v50;
  double v51;
  double v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  const char *v57;
  char *v58;
  int v59;
  int v60;
  int v61;
  double v62;
  double v63;
  int v64;
  int v65;
  const char *v66;
  char *v67;
  uint64_t v68;
  int v69;
  _BYTE v70[10];
  uint64_t v71;
  _BYTE v72[10];
  _BYTE v73[10];
  _BYTE v74[6];
  _BYTE v75[10];
  double v76;
  __int16 v77;
  int v78;
  _BYTE buf[14];
  uint64_t v80;
  _BYTE v81[10];
  _BYTE v82[10];
  _BYTE v83[6];
  _BYTE v84[10];
  double v85;
  __int16 v86;
  int v87;

  *(_BYTE *)(a1 + 2368) = 0;
  ++*(_QWORD *)(a2 + 104);
  *(_QWORD *)buf = a2 + 204;
  v4 = sub_100041CE0((uint64_t **)(a2 + 248), (int *)(a2 + 204), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v4[5] = (uint64_t *)((char *)v4[5] + 1);
  *(_QWORD *)buf = a2 + 336;
  v5 = sub_100041CE0((uint64_t **)(a2 + 352), (int *)(a2 + 336), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v5[5] = (uint64_t *)((char *)v5[5] + 1);
  *(_QWORD *)buf = a2 + 340;
  v6 = sub_100041CE0((uint64_t **)(a2 + 376), (int *)(a2 + 340), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v6[5] = (uint64_t *)((char *)v6[5] + 1);
  *(_QWORD *)buf = a2 + 344;
  v7 = sub_100041CE0((uint64_t **)(a2 + 400), (int *)(a2 + 344), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v8 = 0;
  v7[5] = (uint64_t *)((char *)v7[5] + 1);
  HIDWORD(v10) = *(_DWORD *)(a2 + 464);
  LODWORD(v10) = HIDWORD(v10);
  v9 = v10 >> 8;
  if (v9 <= 8)
    v8 = dword_101CDBB84[v9];
  v69 = v8;
  *(_QWORD *)buf = &v69;
  v11 = sub_100041CE0((uint64_t **)(a2 + 472), &v69, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v11[5] = (uint64_t *)((char *)v11[5] + 1);
  v12 = *(_DWORD *)(a1 + 2320);
  if ((v12 - 1) >= 6)
    v12 = 0;
  v69 = v12;
  *(_QWORD *)buf = &v69;
  v13 = sub_100212818(a2 + 272, (unsigned int *)&v69, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  ++v13[3];
  *(_QWORD *)buf = a1 + 2312;
  v14 = sub_100212A3C(a2 + 208, (int *)(a1 + 2312), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  ++v14[3];
  *(_QWORD *)buf = a1 + 2332;
  v15 = sub_100041CE0((uint64_t **)(a2 + 312), (int *)(a1 + 2332), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v15[5] = (uint64_t *)((char *)v15[5] + 1);
  if (*(_BYTE *)(a2 + 642))
  {
    ++*(_QWORD *)(a2 + 536);
    *(_BYTE *)(a2 + 642) = 0;
  }
  if (*(_BYTE *)(a2 + 643))
  {
    ++*(_QWORD *)(a2 + 544);
    *(_BYTE *)(a2 + 643) = 0;
  }
  if (*(_BYTE *)(a2 + 644))
  {
    ++*(_QWORD *)(a2 + 552);
    *(_BYTE *)(a2 + 644) = 0;
  }
  *(_QWORD *)buf = a2 + 968;
  v16 = sub_100041CE0((uint64_t **)(a2 + 976), (int *)(a2 + 968), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
  v16[5] = (uint64_t *)((char *)v16[5] + 1);
  if (*(_BYTE *)(a1 + 2316))
    ++*(_QWORD *)(a2 + 792);
  if (*(_BYTE *)(a1 + 2319))
    ++*(_QWORD *)(a2 + 808);
  if (*(_BYTE *)(a1 + 2317))
    ++*(_QWORD *)(a2 + 800);
  sub_10003D678(a1);
  sub_10021ACB8(a1);
  HIDWORD(v17) = -286331153 * *(_DWORD *)(a1 + 2352);
  LODWORD(v17) = HIDWORD(v17);
  if ((v17 >> 1) <= 0x8888888)
  {
    v18 = *(_DWORD *)(a2 + 1040);
    if (v18 <= 1)
      v18 = 1;
    v19 = *(_QWORD *)(a2 + 952);
    if (*(_BYTE *)(a2 + 848))
      v20 = v19 == 0;
    else
      v20 = 1;
    if (v20)
      v21 = 1.84467441e19;
    else
      v21 = (double)v19;
    v22 = *(_QWORD *)(a2 + 960);
    if (*(_BYTE *)(a2 + 849))
      v23 = v22 == 0;
    else
      v23 = 1;
    if (v23)
      v24 = 1.84467441e19;
    else
      v24 = (double)v22;
    v25 = *(_QWORD *)(a2 + 896);
    if (v25)
      v26 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 864)
                                          + (((unint64_t)(v25 + *(_QWORD *)(a2 + 888) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v25 + *(_QWORD *)(a2 + 888) - 1) & 0x7F)));
    else
      v26 = 0;
    v27 = *(_QWORD *)(a2 + 944);
    if (v27)
      v28 = bswap32(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 912)
                                          + (((unint64_t)(v27 + *(_QWORD *)(a2 + 936) - 1) >> 4) & 0xFFFFFFFFFFFFFF8))
                              + 32 * ((v27 + *(_QWORD *)(a2 + 936) - 1) & 0x7F)));
    else
      v28 = 0;
    v29 = *(double *)(a2 + 1048);
    v30 = (double)v18;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v31 = qword_1022A0078;
    v32 = v29 / v30;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v33 = *(_QWORD *)(a2 + 584);
      v34 = *(_QWORD *)(a2 + 504) + *(_QWORD *)(a2 + 496);
      *(_DWORD *)buf = 134350592;
      *(double *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2050;
      v80 = v33;
      *(_WORD *)v81 = 2050;
      *(_QWORD *)&v81[2] = v34;
      *(_WORD *)v82 = 2050;
      *(double *)&v82[2] = v21;
      *(_WORD *)v83 = 1026;
      *(_DWORD *)&v83[2] = v26;
      *(_WORD *)v84 = 2050;
      *(double *)&v84[2] = v24;
      LOWORD(v85) = 1026;
      *(_DWORD *)((char *)&v85 + 2) = v28;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "PerfReport,mw,%{public}.1f,timeCount,%{public}llu,posCount,%{public}llu,eeAgeDays,%{public}.2f,eeHash,%{public}x,rtiAgeDays,%{public}.2f,rtiHash,%{public}x", buf, 0x40u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v55 = *(_QWORD *)(a2 + 584);
      v56 = *(_QWORD *)(a2 + 504) + *(_QWORD *)(a2 + 496);
      v69 = 134350592;
      *(double *)v70 = v32;
      *(_WORD *)&v70[8] = 2050;
      v71 = v55;
      *(_WORD *)v72 = 2050;
      *(_QWORD *)&v72[2] = v56;
      *(_WORD *)v73 = 2050;
      *(double *)&v73[2] = v21;
      *(_WORD *)v74 = 1026;
      *(_DWORD *)&v74[2] = v26;
      *(_WORD *)v75 = 2050;
      *(double *)&v75[2] = v24;
      LOWORD(v76) = 1026;
      *(_DWORD *)((char *)&v76 + 2) = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "PerfReport,mw,%{public}.1f,timeCount,%{public}llu,posCount,%{public}llu,eeAgeDays,%{public}.2f,eeHash,%{public}x,rtiAgeDays,%{public}.2f,rtiHash,%{public}x", &v69, 64);
      v58 = (char *)v57;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::tickGnssSessionReport(GNSS::GnssSessionData &)", "%s\n", v57);
      if (v58 != buf)
        free(v58);
    }
  }
  v35 = *(_DWORD *)(a1 + 2352);
  HIDWORD(v36) = -858993459 * v35;
  LODWORD(v36) = -858993459 * v35;
  if ((v36 >> 1) <= 0x19999999)
  {
    v37 = *(int **)(a1 + 2568);
    v38 = 0.0;
    v39 = 0.0;
    if (*(int **)(a1 + 2576) != v37)
      v39 = (double)*v37;
    v40 = *(int **)(a1 + 2592);
    if (*(int **)(a1 + 2600) != v40)
      v38 = (double)*v40;
    v41 = *(_DWORD *)(a1 + 2356);
    v42 = *(_DWORD *)(a1 + 2360);
    v43 = *(_DWORD *)(a1 + 2364);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v44 = v35 - v41;
    v45 = v35 - v42;
    v46 = v35 - v43;
    v47 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v48 = *(_DWORD *)(a1 + 2516);
      v49 = *(_DWORD *)(a1 + 2520);
      if (v44 >= 0x15180)
        v50 = 86400;
      else
        v50 = v44;
      v51 = *(float *)(a1 + 2524);
      v52 = *(float *)(a1 + 2528);
      if (v45 >= 0x15180)
        v53 = 86400;
      else
        v53 = v45;
      if (v46 >= 0x15180)
        v54 = 86400;
      else
        v54 = v46;
      *(_DWORD *)buf = 67242240;
      *(_DWORD *)&buf[4] = v48;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v49;
      LOWORD(v80) = 1026;
      *(_DWORD *)((char *)&v80 + 2) = v50;
      HIWORD(v80) = 2050;
      *(double *)v81 = v51;
      *(_WORD *)&v81[8] = 2050;
      *(double *)v82 = v52;
      *(_WORD *)&v82[8] = 1026;
      *(_DWORD *)v83 = v53;
      *(_WORD *)&v83[4] = 2050;
      *(double *)v84 = v39;
      *(_WORD *)&v84[8] = 2050;
      v85 = v38;
      v86 = 1026;
      v87 = v54;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#gnssawd,Cellular-AWD,PeriodicLogging,MostRecentValue,BandInfo,%{public}d,RAT,%{public}d,age,%{public}u,transmissionFrequency,%{public}f,BW,%{public}f,age,%{public}u,RSRP,%{public}f,SNR,%{public}f,age,%{public}u", buf, 0x48u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      v59 = *(_DWORD *)(a1 + 2516);
      v60 = *(_DWORD *)(a1 + 2520);
      if (v44 >= 0x15180)
        v61 = 86400;
      else
        v61 = v44;
      v62 = *(float *)(a1 + 2524);
      v63 = *(float *)(a1 + 2528);
      if (v45 >= 0x15180)
        v64 = 86400;
      else
        v64 = v45;
      if (v46 >= 0x15180)
        v65 = 86400;
      else
        v65 = v46;
      v69 = 67242240;
      *(_DWORD *)v70 = v59;
      *(_WORD *)&v70[4] = 1026;
      *(_DWORD *)&v70[6] = v60;
      LOWORD(v71) = 1026;
      *(_DWORD *)((char *)&v71 + 2) = v61;
      HIWORD(v71) = 2050;
      *(double *)v72 = v62;
      *(_WORD *)&v72[8] = 2050;
      *(double *)v73 = v63;
      *(_WORD *)&v73[8] = 1026;
      *(_DWORD *)v74 = v64;
      *(_WORD *)&v74[4] = 2050;
      *(double *)v75 = v39;
      *(_WORD *)&v75[8] = 2050;
      v76 = v38;
      v77 = 1026;
      v78 = v65;
      LODWORD(v68) = 72;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssawd,Cellular-AWD,PeriodicLogging,MostRecentValue,BandInfo,%{public}d,RAT,%{public}d,age,%{public}u,transmissionFrequency,%{public}f,BW,%{public}f,age,%{public}u,RSRP,%{public}f,SNR,%{public}f,age,%{public}u", &v69, v68);
      v67 = (char *)v66;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::tickGnssSessionReport(GNSS::GnssSessionData &)", "%s\n", v66);
      if (v67 != buf)
        free(v67);
    }
  }
  ++*(_DWORD *)(a1 + 2352);
}

uint64_t **sub_100041CE0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x30uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_100041DA0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  BOOL v24;
  int v26;
  int v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  _BOOL4 v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  char *v43;
  uint64_t v44;
  int v45;
  char *v46;
  char *v47;
  int v48;
  char *v49;
  int v50;
  char *v51;
  char *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[10];
  int v56;
  __int16 v57;
  _BOOL4 v58;
  uint8_t buf[32];
  __int128 v60;
  _BYTE v61[48];
  __int128 v62;
  __int128 v63;
  __int128 v64;
  _BYTE v65[32];
  __int128 v66;
  _BYTE v67[32];
  __int128 v68;
  _OWORD v69[2];
  uint64_t v70;
  int v71;
  __int128 v72;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "#gpsd,start initiated", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    LOWORD(v54) = 0;
    v43 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,start initiated", &v54, 2);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v43);
    if (v43 != (char *)buf)
      free(v43);
  }
  *(_BYTE *)(a1 + 1680) = 1;
  sub_100007B34(a1);
  sub_10023AA98(a1);
  v61[0] = 0;
  v60 = 0u;
  memset(buf, 0, sizeof(buf));
  memset(&v61[8], 0, 32);
  *(_DWORD *)&v61[40] = 1;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65[0] = 0;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)&v65[8] = _Q1;
  v65[24] = 0;
  v66 = _Q1;
  v67[0] = 0;
  *(_OWORD *)&v67[8] = _Q1;
  v67[24] = 0;
  v68 = 0u;
  memset(v69, 0, sizeof(v69));
  v70 = 0;
  v71 = 1065353216;
  v72 = 0x100000005uLL;
  v9 = *(_OWORD *)&v67[16];
  *(_OWORD *)(a1 + 2040) = *(_OWORD *)v67;
  *(_OWORD *)(a1 + 2056) = v9;
  *(_OWORD *)(a1 + 2072) = v68;
  *(_QWORD *)(a1 + 2088) = *(_QWORD *)&v69[0];
  v10 = *(_OWORD *)v65;
  *(_OWORD *)(a1 + 1976) = v64;
  *(_OWORD *)(a1 + 1992) = v10;
  v11 = v66;
  *(_OWORD *)(a1 + 2008) = *(_OWORD *)&v65[16];
  *(_OWORD *)(a1 + 2024) = v11;
  v12 = *(_OWORD *)&v61[32];
  *(_OWORD *)(a1 + 1912) = *(_OWORD *)&v61[16];
  *(_OWORD *)(a1 + 1928) = v12;
  v13 = v63;
  *(_OWORD *)(a1 + 1944) = v62;
  *(_OWORD *)(a1 + 1960) = v13;
  v14 = *(_OWORD *)&buf[16];
  *(_OWORD *)(a1 + 1848) = *(_OWORD *)buf;
  *(_OWORD *)(a1 + 1864) = v14;
  v15 = *(_OWORD *)v61;
  *(_OWORD *)(a1 + 1880) = v60;
  *(_OWORD *)(a1 + 1896) = v15;
  sub_10020B514(a1 + 2096, (uint64_t *)v69 + 1);
  *(_OWORD *)(a1 + 2136) = v72;
  sub_100067A50((uint64_t)v69 + 8);
  *(_BYTE *)(a1 + 1705) = 0;
  *(_QWORD *)(a1 + 1712) = 0xC08F400000000000;
  *(_QWORD *)(a1 + 1728) = 0;
  *(double *)(a1 + 88) = sub_1001FCBB4();
  ++*(_DWORD *)(a1 + 1240);
  if (*(_BYTE *)(a2 + 5) && (sub_100197040(), sub_10075B938()))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v16 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "#gpsd,issue OTA reset before start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v54) = 0;
      LODWORD(v53) = 2;
      v52 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,issue OTA reset before start", &v54, v53);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v52);
      if (v52 != (char *)buf)
        free(v52);
    }
    sub_1017FA360(a1, 1);
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#gpsd,issue OTA reset not issued before start", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      LOWORD(v54) = 0;
      LODWORD(v53) = 2;
      v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,issue OTA reset not issued before start", &v54, v53);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v47);
      if (v47 != (char *)buf)
        free(v47);
    }
  }
  if (sub_100219C64(a1 + 1684))
  {
    sub_10023A6F8(a1);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v19 = *(_DWORD *)(a1 + 1284);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "#gpsd,on start,MA blocked constellation,0x%{public}x", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v48 = *(_DWORD *)(a1 + 1284);
      v54 = 67240192;
      *(_DWORD *)v55 = v48;
      LODWORD(v53) = 8;
      v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,on start,MA blocked constellation,0x%{public}x", &v54, v53);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v49);
      if (v49 != (char *)buf)
        free(v49);
    }
    sub_100009A5C(a1, 0, *(_DWORD *)(a1 + 1284));
  }
  sub_1000FF154(a1 + 2576);
  v20 = sub_100103BB0(1);
  if ((v20 & 1) == 0)
    sub_10180AC90(v20, v21, v22);
  *(_DWORD *)(a1 + 2972) |= 4u;
  *(_DWORD *)(a1 + 2596) = 1;
  sub_100197040();
  if (sub_1000FDBD0())
  {
    v23 = *(unsigned __int8 *)(a2 + 4);
    v24 = sub_100241568();
    _ZF = v23 == 0;
    v26 = v23 != 0;
    if (!v24)
    {
      v27 = !_ZF;
      v26 = v27 & sub_100CD5700(a1 + 1684);
    }
    sub_1001E4804(buf);
    LOBYTE(v54) = 0;
    if (sub_1001E4874(*(uint64_t *)buf, "b13Enable", (BOOL *)&v54))
      v26 = (_BYTE)v54 != 0;
    v28 = *(std::__shared_weak_count **)&buf[8];
    if (*(_QWORD *)&buf[8])
    {
      v29 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v32 = *(unsigned __int8 *)(a2 + 4);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v26;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#gpsd,b13Enable,%{public}d,context.fB13,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v50 = *(unsigned __int8 *)(a2 + 4);
      v54 = 67240448;
      *(_DWORD *)v55 = v26;
      *(_WORD *)&v55[4] = 1026;
      *(_DWORD *)&v55[6] = v50;
      LODWORD(v53) = 14;
      v51 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,b13Enable,%{public}d,context.fB13,%{public}d", &v54, v53);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v51);
      if (v51 != (char *)buf)
        free(v51);
    }
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    v33 = *(_QWORD *)(a1 + 2792);
    if (!v33)
      operator new();
    *(_DWORD *)(v33 + 24) |= 1u;
    *(_BYTE *)(v33 + 16) = v26;
    *(_DWORD *)(a1 + 2972) |= 0x8000000u;
    *(_DWORD *)(v33 + 24) |= 2u;
    *(_BYTE *)(v33 + 17) = 0;
  }
  else if (*(_BYTE *)(a1 + 1312))
  {
    sub_100197040();
    if (sub_10075B95C())
    {
      *(_DWORD *)(a1 + 2972) |= 0x8000000u;
      v34 = *(_QWORD *)(a1 + 2792);
      if (!v34)
        operator new();
      if (!*(_BYTE *)(a1 + 1312))
        sub_10028DF3C();
      v35 = *(_QWORD *)(a1 + 1304);
      *(_DWORD *)(v34 + 24) |= 8u;
      *(_QWORD *)(v34 + 8) = v35;
    }
  }
  v36 = *(double *)(a1 + 2568);
  v37 = (v36 < 0.0 || v36 > 601200.0) && *(_BYTE *)(a1 + 1289) != 0;
  *(_DWORD *)(a1 + 2972) |= 0x8000000u;
  v38 = *(_QWORD *)(a1 + 2792);
  if (!v38)
    operator new();
  *(_DWORD *)(v38 + 24) |= 4u;
  *(_BYTE *)(v38 + 18) = v37;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021D0798);
  v39 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    v40 = *(_QWORD *)(a1 + 2568);
    v41 = *(unsigned __int8 *)(a1 + 1289);
    *(_DWORD *)buf = 134349569;
    *(_QWORD *)&buf[4] = v40;
    *(_WORD *)&buf[12] = 1025;
    *(_DWORD *)&buf[14] = v41;
    *(_WORD *)&buf[18] = 1025;
    *(_DWORD *)&buf[20] = v37;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "#gpsd,last known EE age,%{public}.1f,in region,%{private}d,prioritization,%{private}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v44 = *(_QWORD *)(a1 + 2568);
    v45 = *(unsigned __int8 *)(a1 + 1289);
    v54 = 134349569;
    *(_QWORD *)v55 = v44;
    *(_WORD *)&v55[8] = 1025;
    v56 = v45;
    v57 = 1025;
    v58 = v37;
    LODWORD(v53) = 24;
    v46 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#gpsd,last known EE age,%{public}.1f,in region,%{private}d,prioritization,%{private}d", &v54, v53);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::start(const DeviceOperatingContext_t &)", "%s\n", v46);
    if (v46 != (char *)buf)
      free(v46);
  }
  sub_1000FF8D8(a1 + 2176, 2);
  sub_1000336A0(a1);
  *(_DWORD *)(a1 + 2340) = 0;
  v42 = *(_BYTE **)(a1 + 1672);
  if (v42)
    sub_1017FA5B0(v42);
}

void sub_10004295C()
{
  operator delete();
}

uint64_t sub_1000429A0(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  __n128 (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  const std::string::value_type *v14;
  NSObject *v15;
  void *v16;
  void *v17;
  NSObject *v18;
  uint64_t *p_shared_weak_owners;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  char *v27;
  _QWORD block[7];
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[6];
  _QWORD v33[6];
  int v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  uint64_t v41;
  _BYTE buf[24];
  __n128 (*v43)(uint64_t, uint64_t);
  __int128 v44;
  void *__p;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  char v49;
  uint64_t v50;
  int v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;

  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  v4 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v5 = *(_QWORD *)(a2 + 4);
    v6 = *(_QWORD *)(a2 + 12);
    v7 = *(__n128 (**)(uint64_t, uint64_t))(a2 + 20);
    v8 = *(_QWORD *)(a1 + 64);
    *(_DWORD *)buf = 134284291;
    *(_QWORD *)&buf[4] = v5;
    *(_WORD *)&buf[12] = 2049;
    *(_QWORD *)&buf[14] = v6;
    *(_WORD *)&buf[22] = 2049;
    v43 = v7;
    LOWORD(v44) = 2114;
    *(_QWORD *)((char *)&v44 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending #SLC <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}@", buf, 0x2Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01C0 != -1)
      dispatch_once(&qword_1022A01C0, &stru_102198FB8);
    v22 = *(_QWORD *)(a2 + 4);
    v23 = *(_QWORD *)(a2 + 12);
    v24 = *(_QWORD *)(a2 + 20);
    v25 = *(_QWORD *)(a1 + 64);
    v34 = 134284291;
    v35 = v22;
    v36 = 2049;
    v37 = v23;
    v38 = 2049;
    v39 = v24;
    v40 = 2114;
    v41 = v25;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01C8, 0, "Sending #SLC <%{private}+.8f,%{private}+.8f> acc %{private}.2f for %{public}@", &v34, 42);
    v27 = (char *)v26;
    sub_100512490("Generic", 1, 0, 2, "void CLSLCSubscription::sendSignificantLocationChange(const CLLocationProvider_Type::NotificationData &)", "%s\n", v26);
    if (v27 != buf)
      free(v27);
  }
  sub_100119F3C(&v34);
  if ((int)sub_10011ADE0((UInt8 *)a2, (uint64_t)&v34, a1 + 304) >= 1)
  {
    *(_QWORD *)buf = sub_10011A5AC((uint64_t)&v34);
    sub_100023350(a1, buf, -1.0);
    objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLApplicationLifecycleManager")), "launchApplication:requiringAuthForServiceMask:", objc_msgSend(*(id *)(a1 + 64), "legacyClientKey"), 8);
  }
  if (*(_BYTE *)(a1 + 249))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0xA012000000;
    v43 = sub_100207204;
    *(_QWORD *)&v44 = sub_100207D8C;
    *((_QWORD *)&v44 + 1) = &unk_102080316;
    __p = 0;
    v46 = 0;
    v47[0] = 0;
    *(_QWORD *)((char *)v47 + 5) = 0;
    v48 = 1000;
    v49 = 0;
    v50 = 0;
    v51 = -1;
    __asm { FMOV            V1.2D, #-1.0 }
    v52 = _Q1;
    v53 = 0xBFF0000000000000;
    v54 = 0xFFFFFFFF00000000;
    v55 = 0;
    v56 = 0xBFF0000000000000;
    v57 = 0;
    v14 = (const std::string::value_type *)objc_msgSend(objc_msgSend(*(id *)(a1 + 64), "legacyClientKey"), "UTF8String");
    std::string::assign((std::string *)(*(_QWORD *)&buf[8] + 48), v14);
    *(_DWORD *)(*(_QWORD *)&buf[8] + 96) = 2;
    v15 = dispatch_group_create();
    dispatch_group_enter(v15);
    v16 = *(void **)(*(_QWORD *)sub_10023BDD8(a1) + 16);
    v33[0] = _NSConcreteStackBlock;
    v33[1] = 3221225472;
    v33[2] = sub_10020EE64;
    v33[3] = &unk_102198E58;
    v33[4] = v15;
    v33[5] = buf;
    objc_msgSend(v16, "fetchLastSignificantLocationDistanceAndLatencyWithReply:", v33);
    dispatch_group_enter(v15);
    v17 = *(void **)(a1 + 128);
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_10020EE44;
    v32[3] = &unk_102198E80;
    v32[4] = v15;
    v32[5] = buf;
    sub_1001B6EA4(v17, (uint64_t)v32);
    sub_10052D218(a1 + 272, &v30);
    v18 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "silo"), "queue");
    block[0] = _NSConcreteStackBlock;
    block[1] = 3321888768;
    block[2] = sub_10020EE00;
    block[3] = &unk_102198EA8;
    block[6] = v30;
    v29 = v31;
    if (v31)
    {
      p_shared_weak_owners = &v31->__shared_weak_owners_;
      do
        v20 = __ldxr((unint64_t *)p_shared_weak_owners);
      while (__stxr(v20 + 1, (unint64_t *)p_shared_weak_owners));
    }
    block[4] = v15;
    block[5] = buf;
    dispatch_group_notify(v15, v18, block);
    if (v29)
      std::__shared_weak_count::__release_weak(v29);
    if (v31)
      std::__shared_weak_count::__release_weak(v31);
    _Block_object_dispose(buf, 8);
    if (SHIBYTE(v47[0]) < 0)
      operator delete(__p);
  }
  return sub_10011A5A8(&v34);
}

void sub_100042E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  _Block_object_dispose(&a39, 8);
  if (a50 < 0)
    operator delete(__p);
  sub_10011A5A8(&a33);
  _Unwind_Resume(a1);
}

void sub_100042F3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100042F58(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  char *v10;
  _WORD v11[8];
  uint8_t buf[1640];

  v7 = *a3;
  v6 = a3[1];
  if (v6 != *a3)
  {
    do
    {
      v6 -= 248;
      sub_10091BC34((uint64_t)(a3 + 2), v6);
    }
    while (v6 != v7);
  }
  a3[1] = v7;
  v8 = *(_QWORD *)(a1 + 112);
  if (v8)
    sub_100089510(v8, a2, a3);
  if (qword_1022A0060 != -1)
    dispatch_once(&qword_1022A0060, &stru_102182050);
  v9 = qword_1022A0068;
  if (os_log_type_enabled((os_log_t)qword_1022A0068, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Fence: getFencesForBundle, no region monitoring before the first unlock", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0060 != -1)
      dispatch_once(&qword_1022A0060, &stru_102182050);
    v11[0] = 0;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0068, 2, "Fence: getFencesForBundle, no region monitoring before the first unlock", v11, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLFenceAuthorizationManager::getFencesForBundle(const std::string &, std::vector<CLFenceManager_Type::Fence> &)", "%s\n", v10);
    if (v10 != (char *)buf)
      free(v10);
  }
}

void sub_1000431A0()
{
  operator new();
}

uint64_t sub_100043238(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    operator delete();
  }
  return result;
}

uint64_t sub_10004380C(uint64_t a1)
{
  NSObject *v2;
  std::__assoc_sub_state *state;
  unsigned int v4;
  unsigned int v5;
  NSObject *v6;
  std::__assoc_sub_state *v7;
  const char *v9;
  uint8_t *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  uint64_t v23;
  std::future<void> v24;
  int v25;
  unsigned int v26;
  uint8_t buf[8];

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Raven: rct,~RavenThread,enter", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v24.__state_) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,~RavenThread,enter", &v24, 2);
    v16 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v15);
    if (v16 != buf)
      free(v16);
  }
  sub_100009EA0(a1, 0);
  if (*(_QWORD *)(a1 + 192))
  {
    std::promise<void>::get_future((std::promise<void> *)(a1 + 176));
    state = v24.__state_;
    *(_QWORD *)buf = std::chrono::steady_clock::now().__d_.__rep_ + 300000000;
    v4 = sub_100037440((uint64_t)state, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)buf);
    if (v4 == 1)
    {
      v5 = 0;
      do
      {
        sub_100009EA0(a1, 0);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v6 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)&buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Raven: #warning,rct,~RavenThread,retryToStop,%{public}d", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v25 = 67240192;
          v26 = v5;
          LODWORD(v23) = 8;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: #warning,rct,~RavenThread,retryToStop,%{public}d", &v25, v23);
          v10 = (uint8_t *)v9;
          sub_100512490("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v9);
          if (v10 != buf)
            free(v10);
        }
        v7 = v24.__state_;
        *(_QWORD *)buf = std::chrono::steady_clock::now().__d_.__rep_ + 300000000;
        v4 = sub_100037440((uint64_t)v7, (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *)buf);
        if (v4 != 1)
          break;
      }
      while (v5++ < 0xC7);
    }
    if (v4)
    {
      sub_100C77068();
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v11 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)&buf[4] = v4;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Raven: rct,~RavenThread,status,%{public}d,failedJoin", buf, 8u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v25 = 67240192;
        v26 = v4;
        LODWORD(v23) = 8;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 17, "Raven: rct,~RavenThread,status,%{public}d,failedJoin", &v25, v23);
        v20 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 0, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v19);
        if (v20 != buf)
          free(v20);
      }
    }
    std::thread::join((std::thread *)(a1 + 192));
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v12 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Raven: rct,~RavenThread,done", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v25) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,~RavenThread,done", &v25, v23);
      v18 = (uint8_t *)v17;
      sub_100512490("Generic", 1, 0, 2, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v17);
      if (v18 != buf)
        free(v18);
    }
    std::future<void>::~future(&v24);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v13 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Raven: rct,~RavenThread,notJoinable", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      LOWORD(v24.__state_) = 0;
      LODWORD(v23) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 17, "Raven: rct,~RavenThread,notJoinable", &v24, v23);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 0, "CLRavenController::RavenThread::~RavenThread()", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  std::thread::~thread((std::thread *)(a1 + 192));
  std::promise<void>::~promise((std::promise<void> *)(a1 + 176));
  sub_100C95458((_QWORD *)(a1 + 128));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 80));
  std::mutex::~mutex((std::mutex *)(a1 + 16));
  return a1;
}

void sub_100043F6C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

id sub_100043F7C(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100D8115C(a1);
  else
    return 0;
}

id sub_100043FC8(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_1018D9EA0(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_100033314(a1);
  else
    return 0;
}

void sub_100044040(_QWORD *a1, const char *a2)
{
  const char *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _BYTE v11[12];
  __int128 buf;
  _QWORD v13[203];

  if (a2)
    v3 = a2;
  else
    v3 = "null";
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021846D8);
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136446210;
    *(_QWORD *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "CellFlow, clearcells, %{public}s", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021846D8);
    *(_DWORD *)v11 = 136446210;
    *(_QWORD *)&v11[4] = v3;
    v10 = (char *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "CellFlow, clearcells, %{public}s", v11, 12);
    sub_100512490("Generic", 1, 0, 2, "void CLUnifiedCellLocationProvider::clearCurrentCells(const char *)", "%s\n", v10);
    if (v10 != (char *)&buf)
      free(v10);
  }
  *((_DWORD *)a1 + 278) = 0;
  v5 = a1[131];
  v6 = a1[130];
  while (v5 != v6)
  {
    v5 -= 696;
    sub_1005A9904((uint64_t)(a1 + 132), v5);
  }
  a1[131] = v6;
  v7 = a1 + 133;
  do
  {
    buf = 0uLL;
    v13[0] = 0;
    sub_100D97524(&buf, *v7, v7[1], 0x66FD0EB66FD0EB67 * ((v7[1] - *v7) >> 3));
    v8 = *((_QWORD *)&buf + 1);
    v9 = buf;
    while (v8 != v9)
    {
      v8 -= 696;
      sub_1005A9904((uint64_t)v13, v8);
    }
    *((_QWORD *)&buf + 1) = v9;
    *(_QWORD *)v11 = &buf;
    sub_10087B4F8((void ***)v11);
    v7 += 3;
  }
  while (v7 != a1 + 139);
}

void sub_1000442B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  NSObject *v7;
  id v8;
  _QWORD v9[7];
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientRegisterLQMCallback");
  objc_msgSend(objc_msgSend(*(id *)(a3 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v6 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientRegisterLQMCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v6, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v7 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientRegisterLQMCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  v8 = objc_msgSend(*(id *)(a3 + 32), "silo");
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10020F7C0;
  v9[3] = &unk_102143548;
  v9[4] = a3;
  v9[5] = a1;
  v9[6] = a2;
  objc_msgSend(v8, "sync:", v9);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_1000444A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, os_activity_scope_state_s state, char a17)
{
  if (a17)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100044A24(uint64_t a1, uint64_t a2)
{
  double Current;
  double v5;
  NSObject *v6;
  char *v7;
  NSObject *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  int v24;
  double v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  uint8_t buf[4];
  double v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  __int16 v58;
  double v59;

  Current = CFAbsoluteTimeGetCurrent();
  v5 = vabdd_f64(Current, *(double *)(a1 + 376));
  if (v5 >= 60.0)
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v8 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 512);
      v10 = *(_DWORD *)(a1 + 352);
      v11 = *(_QWORD *)(a1 + 432);
      v12 = *(_QWORD *)(a1 + 184);
      v13 = *(_QWORD *)(a1 + 264);
      v14 = *(_QWORD *)(a1 + 304);
      v15 = *(_QWORD *)(a1 + 344);
      *(_DWORD *)buf = 136317186;
      v43 = *(double *)&a2;
      v44 = 2048;
      v45 = v9;
      v46 = 1024;
      v47 = v10;
      v48 = 2048;
      v49 = v11;
      v50 = 2048;
      v51 = v12;
      v52 = 2048;
      v53 = v13;
      v54 = 2048;
      v55 = v14;
      v56 = 2048;
      v57 = v15;
      v58 = 2048;
      v59 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf", buf, 0x58u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v16 = *(_QWORD *)(a1 + 512);
      v17 = *(_DWORD *)(a1 + 352);
      v18 = *(_QWORD *)(a1 + 432);
      v19 = *(_QWORD *)(a1 + 184);
      v20 = *(_QWORD *)(a1 + 264);
      v21 = *(_QWORD *)(a1 + 304);
      v22 = *(_QWORD *)(a1 + 344);
      v24 = 136317186;
      v25 = *(double *)&a2;
      v26 = 2048;
      v27 = v16;
      v28 = 1024;
      v29 = v17;
      v30 = 2048;
      v31 = v18;
      v32 = 2048;
      v33 = v19;
      v34 = 2048;
      v35 = v20;
      v36 = 2048;
      v37 = v21;
      v38 = 2048;
      v39 = v22;
      v40 = 2048;
      v41 = v5;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: resetRetryCounters, %s, %p, fQueryRetries, %d, pending, %lu, %lu, %lu, %lu, %lu, sinceLastReset, %.1lf", (const char *)&v24, 88);
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::resetRetryCounters(const char *)", "%s\n", v23);
      if (v23 != (char *)buf)
        free(v23);
    }
    *(_DWORD *)(a1 + 352) = 0;
    *(double *)(a1 + 360) = Current;
    *(double *)(a1 + 376) = Current;
    sub_1002296E8(a1, (uint64_t)"resetRetryCounters");
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_10214FF70);
    v6 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 134217984;
      v43 = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "NETWORK: resetRetryCounters, sinceLastReset, %.1lf", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_10214FF70);
      v24 = 134217984;
      v25 = v5;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "NETWORK: resetRetryCounters, sinceLastReset, %.1lf", COERCE_DOUBLE(&v24));
      sub_100512490("Generic", 1, 0, 2, "void CLNetworkLocationProvider::resetRetryCounters(const char *)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_100044E20(uint64_t a1, CLConnectionMessage **a2)
{
  id v4;
  char v5;
  CLConnectionMessage *v6;
  void *Dictionary;
  void *v8;
  id v9;
  id v10;
  double v11;
  double v12;
  CLConnectionMessage *v13;
  NSObject *v14;
  NSObject *v15;
  CLConnectionMessage *v16;
  id v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  unsigned int v23;
  id v24;
  id v25;
  id v26;
  double v27;
  double v28;
  NSNumber *v29;
  NSNumber *v30;
  NSObject *v31;
  CLConnectionMessage *v32;
  NSNumber *v33;
  id v34;
  const char *v35;
  uint8_t *v36;
  const char *v37;
  uint8_t *v38;
  const char *v39;
  uint8_t *v40;
  uint64_t v41;
  __int16 v42;
  double v43;
  double v44[2];
  uint64_t v45;
  _UNKNOWN **v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  _UNKNOWN **v50;
  uint64_t v51;
  _UNKNOWN **v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  _UNKNOWN **v56;
  uint8_t buf[4];
  double v58;
  unsigned int v59;
  unsigned int v60;
  double v61;
  unsigned int v62;

  v4 = objc_alloc_init((Class)NSAutoreleasePool);
  if ((sub_100236AC4() & 1) == 0)
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v14 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "query for step count was received but step counts were not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v44[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "query for step count was received but step counts were not available", v44, 2);
      v36 = (uint8_t *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v35);
      if (v36 != buf)
        free(v36);
    }
    v6 = *a2;
    v55 = CMErrorMessage;
    v56 = &off_10221C200;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v56, &v55, 1);
    goto LABEL_15;
  }
  v5 = sub_1001BBC08(a1);
  v6 = *a2;
  if ((v5 & 1) == 0)
  {
    v53 = CMErrorMessage;
    v54 = &off_10221C218;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v54, &v53, 1);
LABEL_15:
    CLConnectionMessage::sendReply(v6);
    goto LABEL_22;
  }
  Dictionary = (void *)CLConnectionMessage::getDictionary(*a2);
  v8 = Dictionary;
  if (Dictionary
    && (v9 = objc_msgSend(Dictionary, "objectForKeyedSubscript:", CMPedometerStartTime)) != 0
    && (v10 = objc_msgSend(v8, "objectForKeyedSubscript:", CMPedometerStopTime)) != 0)
  {
    objc_msgSend(v9, "doubleValue");
    v44[0] = v11;
    objc_msgSend(v10, "doubleValue");
    v43 = v12;
    if (v44[0] > v12)
    {
      v13 = *a2;
      v49 = CMErrorMessage;
      v50 = &off_10221C260;
      +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v50, &v49, 1);
      CLConnectionMessage::sendReply(v13);
      goto LABEL_22;
    }
    v17 = objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "vendor"), "proxyForService:", CFSTR("CLStepCountNotifier"));
    if (objc_msgSend(v17, "syncgetEnabled"))
    {
      if (v17)
      {
        objc_msgSend(v17, "syncgetQueryStartTime:andStopTime:", v44, &v43);
        v18 = *(unsigned int *)buf;
        v19 = v58;
        v21 = v59;
        v20 = v60;
        v22 = v61;
        v23 = v62;
      }
      else
      {
        v23 = 0;
        v20 = 0;
        v21 = 0;
        v18 = 0;
        v22 = 0.0;
        v19 = 0.0;
      }
    }
    else
    {
      v18 = 0;
      v21 = 0;
      v20 = 0;
      v23 = 0;
      v19 = 0.0;
      v22 = 0.0;
    }
    v24 = objc_msgSend(v17, "syncgetDbUUID");

    if (v24)
    {
      v25 = objc_msgSend(objc_alloc((Class)NSUUID), "initWithUUIDString:", v24);
      if (v25)
      {
        v26 = objc_alloc((Class)CMPedometerData);
        v28 = v43;
        v27 = v44[0];
        if (*(_BYTE *)(a1 + 56))
        {
          v29 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v21);
          if (*(_BYTE *)(a1 + 56))
          {
            v30 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v20);
LABEL_41:
            if (*(_BYTE *)(a1 + 57))
              v33 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v22);
            else
              v33 = 0;
            LODWORD(v41) = 0;
            v34 = objc_msgSend(v26, "initWithStartDate:endDate:steps:distance:floorsAscended:floorsDescended:recordID:currentPace:currentCadence:firstStepTime:activeTime:sourceId:isOdometerDistance:isOdometerPace:pushes:workoutType:elevationAscended:elevationDescended:distanceSource:", v18, v29, v30, 0, 0, 0, v27, v28, v19, 0.0, v33, v25, 0, 0, v23,
                    0,
                    0,
                    v41);
            v47 = CMPedometerDataObject;
            v48 = v34;
            +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v48, &v47, 1);

            CLConnectionMessage::sendReply(*a2);
            goto LABEL_22;
          }
        }
        else
        {
          v29 = 0;
        }
        v30 = 0;
        goto LABEL_41;
      }
    }
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v31 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_FAULT, "Error querying step count data", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      v42 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Error querying step count data", &v42, 2);
      v40 = (uint8_t *)v39;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v39);
      if (v40 != buf)
        free(v40);
    }
    v32 = *a2;
    v45 = CMErrorMessage;
    v46 = &off_10221C230;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v46, &v45, 1);
    CLConnectionMessage::sendReply(v32);
  }
  else
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
    v15 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Programmer error: Wrong parameters were passed!", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10218E7C0);
      LOWORD(v44[0]) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Programmer error: Wrong parameters were passed!", v44, 2);
      v38 = (uint8_t *)v37;
      sub_100512490("Generic", 1, 0, 0, "void CLStepCountSubscription::handleMessageStepCountQuery(std::shared_ptr<CLConnectionMessage>)", "%s\n", v37);
      if (v38 != buf)
        free(v38);
    }
    v16 = *a2;
    v51 = CMErrorMessage;
    v52 = &off_10221C248;
    +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1);
    CLConnectionMessage::sendReply(v16);
  }
LABEL_22:

}

void sub_1000455D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_10004562C(uint64_t a1, uint64_t a2)
{
  id result;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  result = objc_msgSend(*(id *)(a1 + 152), "indoord");
  if (result)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ClxIndoor, enablement, ar state, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v8[0] = 67240192;
      v8[1] = a2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "ClxIndoor, enablement, ar state, %{public}d", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendARStateInformation(const _CLARSessionState)", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    return objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "clVisionNotificationAvailable:", objc_msgSend(objc_alloc((Class)CLVisionNotification), "initWithARSessionState:", a2));
  }
  return result;
}

void sub_100045810(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  NSObject *v7;
  char *v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  char *v20;
  unint64_t v21;
  _DWORD *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  int v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  int v38;
  double v39;
  double v40;
  int v41;
  int v42;
  int v43;
  int v44;
  const char *v45;
  uint8_t *v46;
  int v47;
  double v48;
  double v49;
  int v50;
  int v51;
  int v52;
  const char *v53;
  uint8_t *v54;
  double v55;
  double v56;
  _BYTE v57[12];
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  uint8_t buf[8];
  _BYTE v64[10];
  __int16 v65;
  double v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;

  sub_1001E4804(buf);
  LOBYTE(v56) = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v56);
  if (LOBYTE(v56))
    v3 = v2;
  else
    v3 = 0;
  v4 = *(std::__shared_weak_count **)v64;
  if (!*(_QWORD *)v64)
    goto LABEL_8;
  v5 = (unint64_t *)(*(_QWORD *)v64 + 8);
  do
    v6 = __ldaxr(v5);
  while (__stlxr(v6 - 1, v5));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if (!v3)
      goto LABEL_14;
  }
  else
  {
LABEL_8:
    if (!v3)
      goto LABEL_14;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v7 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    LOWORD(v56) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics", &v56, 2);
    v46 = (uint8_t *)v45;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::cacheCellularAWDMetrics()", "%s\n", v45);
    if (v46 != buf)
      free(v46);
  }
LABEL_14:
  *(_DWORD *)(a1 + 2544) = *(_DWORD *)(a1 + 2516);
  v8 = *(char **)(a1 + 2576);
  v9 = *(_QWORD *)(a1 + 2584);
  if ((unint64_t)v8 >= v9)
  {
    v11 = *(char **)(a1 + 2568);
    v12 = (v8 - v11) >> 2;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_100259694();
    v13 = v9 - (_QWORD)v11;
    v14 = (uint64_t)(v9 - (_QWORD)v11) >> 1;
    if (v14 <= v12 + 1)
      v14 = v12 + 1;
    if (v13 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v14;
    if (v15)
    {
      v16 = (char *)sub_100260634(a1 + 2584, v15);
      v8 = *(char **)(a1 + 2576);
      v11 = *(char **)(a1 + 2568);
    }
    else
    {
      v16 = 0;
    }
    v17 = &v16[4 * v12];
    v18 = &v16[4 * v15];
    *(_DWORD *)v17 = *(_DWORD *)(a1 + 2536);
    v10 = v17 + 4;
    while (v8 != v11)
    {
      v19 = *((_DWORD *)v8 - 1);
      v8 -= 4;
      *((_DWORD *)v17 - 1) = v19;
      v17 -= 4;
    }
    *(_QWORD *)(a1 + 2568) = v17;
    *(_QWORD *)(a1 + 2576) = v10;
    *(_QWORD *)(a1 + 2584) = v18;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *(_DWORD *)v8 = *(_DWORD *)(a1 + 2536);
    v10 = v8 + 4;
  }
  *(_QWORD *)(a1 + 2576) = v10;
  v20 = *(char **)(a1 + 2600);
  v21 = *(_QWORD *)(a1 + 2608);
  if ((unint64_t)v20 >= v21)
  {
    v23 = *(char **)(a1 + 2592);
    v24 = (v20 - v23) >> 2;
    if ((unint64_t)(v24 + 1) >> 62)
      sub_100259694();
    v25 = v21 - (_QWORD)v23;
    v26 = (uint64_t)(v21 - (_QWORD)v23) >> 1;
    if (v26 <= v24 + 1)
      v26 = v24 + 1;
    if (v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v27 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      v28 = (char *)sub_100260634(a1 + 2608, v27);
      v20 = *(char **)(a1 + 2600);
      v23 = *(char **)(a1 + 2592);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[4 * v24];
    v30 = &v28[4 * v27];
    *(_DWORD *)v29 = *(_DWORD *)(a1 + 2532);
    v22 = v29 + 4;
    while (v20 != v23)
    {
      v31 = *((_DWORD *)v20 - 1);
      v20 -= 4;
      *((_DWORD *)v29 - 1) = v31;
      v29 -= 4;
    }
    *(_QWORD *)(a1 + 2592) = v29;
    *(_QWORD *)(a1 + 2600) = v22;
    *(_QWORD *)(a1 + 2608) = v30;
    if (v23)
      operator delete(v23);
  }
  else
  {
    *(_DWORD *)v20 = *(_DWORD *)(a1 + 2532);
    v22 = v20 + 4;
  }
  *(_QWORD *)(a1 + 2600) = v22;
  *(_DWORD *)(a1 + 2548) = *(_DWORD *)(a1 + 2520);
  *(_QWORD *)(a1 + 2552) = *(_QWORD *)(a1 + 2524);
  sub_1001E4804(buf);
  LOBYTE(v56) = 0;
  v32 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", (BOOL *)&v56);
  if (LOBYTE(v56))
    v33 = v32;
  else
    v33 = 0;
  v34 = *(std::__shared_weak_count **)v64;
  if (!*(_QWORD *)v64)
    goto LABEL_55;
  v35 = (unint64_t *)(*(_QWORD *)v64 + 8);
  do
    v36 = __ldaxr(v35);
  while (__stlxr(v36 - 1, v35));
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
    if (!v33)
      return;
  }
  else
  {
LABEL_55:
    if (!v33)
      return;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v37 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(_DWORD *)(a1 + 2544);
    v39 = *(float *)(a1 + 2556);
    v40 = *(float *)(a1 + 2552);
    v41 = *(_DWORD *)(a1 + 2548);
    v42 = *(_DWORD *)(a1 + 2536);
    v43 = *(_DWORD *)(a1 + 2532);
    v44 = *(_DWORD *)(a1 + 2560);
    *(_DWORD *)buf = 67110656;
    *(_DWORD *)&buf[4] = v38;
    *(_WORD *)v64 = 2048;
    *(double *)&v64[2] = v39;
    v65 = 2048;
    v66 = v40;
    v67 = 1024;
    v68 = v41;
    v69 = 1024;
    v70 = v42;
    v71 = 1024;
    v72 = v43;
    v73 = 1024;
    v74 = v44;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%d,SNR,%d,CurrentEpochCount,%d", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v47 = *(_DWORD *)(a1 + 2544);
    v48 = *(float *)(a1 + 2556);
    v49 = *(float *)(a1 + 2552);
    v50 = *(_DWORD *)(a1 + 2548);
    v51 = *(_DWORD *)(a1 + 2532);
    v52 = *(_DWORD *)(a1 + 2560);
    LODWORD(v56) = 67110656;
    HIDWORD(v56) = v47;
    *(_WORD *)v57 = 2048;
    *(double *)&v57[2] = v48;
    *(_WORD *)&v57[10] = 2048;
    LOWORD(v58) = HIWORD(v50);
    HIWORD(v58) = 1024;
    v59 = 1024;
    v60 = v51;
    v61 = 1024;
    v62 = v52;
    LODWORD(v55) = 52;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,cacheCellularAWDMetrics,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%d,SNR,%d,CurrentEpochCount,%d", &v56, v55, v56, *(_DWORD *)v57, *(_DWORD *)&v57[8], HIDWORD(v49), v58);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::cacheCellularAWDMetrics()", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
}

void sub_100045E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100045E54(uint64_t a1)
{
  int v2;
  int v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  double v8;
  NSObject *v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  NSObject *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  double *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  char v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  NSObject *v42;
  const char *v43;
  int v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  NSObject *v49;
  int v50;
  int v51;
  int v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  NSObject *v56;
  int v57;
  uint64_t **v58;
  int v59;
  int v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  int v64;
  char v65;
  char v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  NSObject *v70;
  const char *v71;
  uint8_t *v72;
  NSObject *v73;
  const char *v74;
  NSObject *v75;
  const char *v76;
  unsigned int v78;
  unsigned int v79;
  CFStringRef v80;
  CFStringRef str;
  _QWORD v82[2];
  uint8_t buf[8];
  _BYTE v84[10];
  __int16 v85;
  _BYTE v86[44];
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  int v90;
  __int16 v91;
  int v92;
  double v93[2];

  sub_100119F3C(v82);
  v80 = 0;
  str = 0;
  sub_1001E4804(buf);
  if (sub_100006BB4(*(uint64_t *)buf, "GpsReferenceLocation", v82)
    && sub_1005268D0((uint64_t)v82, "Latitude", (CFTypeRef *)&str))
  {
    v2 = sub_1005268D0((uint64_t)v82, "Longitude", (CFTypeRef *)&v80);
    v3 = v2;
    v4 = *(std::__shared_weak_count **)v84;
    if (!*(_QWORD *)v84)
      goto LABEL_7;
    v5 = (unint64_t *)(*(_QWORD *)v84 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
      if (!v3)
        goto LABEL_75;
    }
    else
    {
LABEL_7:
      if (!v2)
        goto LABEL_75;
    }
    v93[0] = 0.0;
    v79 = 0;
    v7 = (uint64_t *)(a1 + 8220);
    *(double *)(a1 + 8220) = CFStringGetDoubleValue(str);
    *(double *)(a1 + 8228) = CFStringGetDoubleValue(v80);
    *(_DWORD *)(a1 + 8348) = 1;
    *(_BYTE *)(a1 + 1569) = 1;
    *(_QWORD *)(a1 + 8236) = 0x40A7700000000000;
    if (sub_1001E4B84((uint64_t)v82, "LocationType", &v79))
      *(_DWORD *)(a1 + 8312) = v79;
    if (sub_1001FD98C((uint64_t)v82, "HorizontalUncertainty", v93))
    {
      v8 = v93[0];
      if (v93[0] <= 0.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v84 = 2082;
          *(_QWORD *)&v84[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
        }
        v10 = qword_1022A0078;
        v8 = -1.0;
        if (os_signpost_enabled((os_log_t)qword_1022A0078))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v84 = 2082;
          *(_QWORD *)&v84[2] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
        }
      }
    }
    else
    {
      v8 = 3000.0;
    }
    *(double *)(a1 + 8236) = v8;
    *(_DWORD *)(a1 + 9016) = 0;
    if (sub_1001E4B84((uint64_t)v82, "HorizontalReliability", &v79))
    {
      if (v79 < 5)
      {
        *(_DWORD *)(a1 + 9016) = v79;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102190660);
        v14 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v84 = 2082;
          *(_QWORD *)&v84[2] = "";
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalReliability\"}", buf, 0x12u);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
        }
        v15 = qword_1022A0078;
        if (os_signpost_enabled((os_log_t)qword_1022A0078))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)v84 = 2082;
          *(_QWORD *)&v84[2] = "";
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: HorizontalReliability", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: HorizontalReliability\"}", buf, 0x12u);
        }
      }
    }
    *(_DWORD *)(a1 + 9020) = 0;
    if (sub_1001FD98C((uint64_t)v82, "Altitude", v93))
    {
      *(double *)(a1 + 8244) = v93[0];
      if (sub_1001FD98C((uint64_t)v82, "VerticalUncertainty", v93))
      {
        v16 = v93[0];
        if (v93[0] <= 0.0)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v17 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v84 = 2082;
            *(_QWORD *)&v84[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
          }
          v18 = qword_1022A0078;
          v16 = -1.0;
          if (os_signpost_enabled((os_log_t)qword_1022A0078))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v84 = 2082;
            *(_QWORD *)&v84[2] = "";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v18, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalUncertainty for GpsReferenceLocation\"}", buf, 0x12u);
          }
        }
      }
      else
      {
        v16 = 3000.0;
      }
      *(double *)(a1 + 8252) = v16;
      if (sub_1001E4B84((uint64_t)v82, "VerticalReliability", &v79))
      {
        if (v79 < 5)
        {
          *(_DWORD *)(a1 + 9020) = v79;
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v19 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v84 = 2082;
            *(_QWORD *)&v84[2] = "";
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalReliability\"}", buf, 0x12u);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
          }
          v20 = qword_1022A0078;
          if (os_signpost_enabled((os_log_t)qword_1022A0078))
          {
            *(_DWORD *)buf = 68289026;
            *(_DWORD *)&buf[4] = 0;
            *(_WORD *)v84 = 2082;
            *(_QWORD *)&v84[2] = "";
            _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v20, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#GnssAssistancePosition, invalid defaults: VerticalReliability", "{\"msg%{public}.0s\":\"#GnssAssistancePosition, invalid defaults: VerticalReliability\"}", buf, 0x12u);
          }
        }
      }
    }
    else
    {
      *(_OWORD *)(a1 + 8244) = xmmword_101BAFEE0;
    }
    if (*(int *)(a1 + 9016) > 0 || *(int *)(a1 + 9020) >= 1)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102190660);
      v21 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v22 = *(_DWORD *)(a1 + 8312);
        v23 = *v7;
        v24 = *(_QWORD *)(a1 + 8228);
        v26 = *(_QWORD *)(a1 + 8236);
        v25 = *(_QWORD *)(a1 + 8244);
        v27 = *(_QWORD *)(a1 + 8252);
        v28 = *(_DWORD *)(a1 + 9016);
        v29 = *(_DWORD *)(a1 + 9020);
        *(_DWORD *)buf = 68291075;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v84 = 2082;
        *(_QWORD *)&v84[2] = "";
        v85 = 1026;
        *(_DWORD *)v86 = v22;
        *(_WORD *)&v86[4] = 2049;
        *(_QWORD *)&v86[6] = v23;
        *(_WORD *)&v86[14] = 2049;
        *(_QWORD *)&v86[16] = v24;
        *(_WORD *)&v86[24] = 2050;
        *(_QWORD *)&v86[26] = v25;
        *(_WORD *)&v86[34] = 2050;
        *(_QWORD *)&v86[36] = v26;
        v87 = 2050;
        v88 = v27;
        v89 = 1026;
        v90 = v28;
        v91 = 1026;
        v92 = v29;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, forcing tightly-coupled assistance\", \"type\":%{public}d, \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"alt\":\"%{public}.2f\", \"hunc\":\"%{public}.1f\", \"vunc\":\"%{public}.1f\", \"horizontalReliability\":%{public}d, \"verticalReliability\":%{public}d}", buf, 0x56u);
      }
    }
    if ((sub_1001FD98C((uint64_t)v82, "timestamp", (void *)(a1 + 8292)) & 1) == 0)
      *(CFAbsoluteTime *)(a1 + 8292) = CFAbsoluteTimeGetCurrent();
    v30 = (double *)(a1 + 9024);
    if (!sub_1001FD98C((uint64_t)v82, "Age", (void *)(a1 + 9024))
      || (*(_QWORD *)v30 & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL
      || *v30 < 0.0)
    {
      *v30 = 0.0;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v32 = *v7;
      v33 = *(_QWORD *)(a1 + 8228);
      v34 = *(_QWORD *)(a1 + 8292);
      v35 = *v30;
      *(_DWORD *)buf = 68290051;
      *(_WORD *)v84 = 2082;
      *(_DWORD *)&buf[4] = 0;
      *(_QWORD *)&v84[2] = "";
      v85 = 2049;
      *(_QWORD *)v86 = v32;
      *(_WORD *)&v86[8] = 2049;
      *(_QWORD *)&v86[10] = v33;
      *(_WORD *)&v86[18] = 2050;
      *(_QWORD *)&v86[20] = v34;
      *(_WORD *)&v86[28] = 2050;
      *(double *)&v86[30] = v35;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CL-force reference location\", \"lat\":\"%{private}.7f\", \"lon\":\"%{private}.7f\", \"timestamp\":\"%{public}.2f\", \"age\":\"%{public}.1f\"}", buf, 0x3Au);
    }
  }
  else
  {
    v11 = *(std::__shared_weak_count **)v84;
    if (*(_QWORD *)v84)
    {
      v12 = (unint64_t *)(*(_QWORD *)v84 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
LABEL_75:
  v79 = 0;
  sub_1001E4804(buf);
  v36 = sub_1001E4B84(*(uint64_t *)buf, "GpsPositionInjectionEnable", &v79);
  v37 = v36;
  v38 = *(std::__shared_weak_count **)v84;
  if (!*(_QWORD *)v84)
    goto LABEL_79;
  v39 = (unint64_t *)(*(_QWORD *)v84 + 8);
  do
    v40 = __ldaxr(v39);
  while (__stlxr(v40 - 1, v39));
  if (!v40)
  {
    ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
    std::__shared_weak_count::__release_weak(v38);
    if ((v37 & 1) != 0)
      goto LABEL_80;
  }
  else
  {
LABEL_79:
    if ((v36 & 1) != 0)
    {
LABEL_80:
      v41 = v79 == 1;
      *(_BYTE *)(a1 + 1570) = v41;
      goto LABEL_83;
    }
  }
  v41 = *(unsigned __int8 *)(a1 + 1570);
LABEL_83:
  if (v41)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v42 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v84 = 2082;
      *(_QWORD *)&v84[2] = "";
      v43 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI,enabled\"}";
LABEL_92:
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, v43, buf, 0x12u);
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102190660);
    v42 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v84 = 2082;
      *(_QWORD *)&v84[2] = "";
      v43 = "{\"msg%{public}.0s\":\"#GnssAssistancePosition, CPI,disabled\"}";
      goto LABEL_92;
    }
  }
  sub_1001E4804(buf);
  v44 = sub_1001E4B84(*(uint64_t *)buf, "GpsUseCachedLocation", &v79);
  v45 = v44;
  v46 = *(std::__shared_weak_count **)v84;
  if (!*(_QWORD *)v84)
    goto LABEL_97;
  v47 = (unint64_t *)(*(_QWORD *)v84 + 8);
  do
    v48 = __ldaxr(v47);
  while (__stlxr(v48 - 1, v47));
  if (v48)
  {
LABEL_97:
    if (!v44)
      goto LABEL_99;
    goto LABEL_98;
  }
  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
  std::__shared_weak_count::__release_weak(v46);
  if (v45)
LABEL_98:
    *(_BYTE *)(a1 + 1568) = v79 != 0;
LABEL_99:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v49 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v50 = *(unsigned __int8 *)(a1 + 1568);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v84 = 2082;
    *(_QWORD *)&v84[2] = "";
    v85 = 1026;
    *(_DWORD *)v86 = v50;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"fUseCachedLocationAssist\":%{public}d}", buf, 0x18u);
  }
  sub_1001E4804(buf);
  v51 = sub_1001E4B84(*(uint64_t *)buf, "GpsUseDefaultLocationInFarStartTest", &v79);
  v52 = v51;
  v53 = *(std::__shared_weak_count **)v84;
  if (!*(_QWORD *)v84)
    goto LABEL_107;
  v54 = (unint64_t *)(*(_QWORD *)v84 + 8);
  do
    v55 = __ldaxr(v54);
  while (__stlxr(v55 - 1, v54));
  if (v55)
  {
LABEL_107:
    if (!v51)
      goto LABEL_109;
    goto LABEL_108;
  }
  ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
  std::__shared_weak_count::__release_weak(v53);
  if (v52)
LABEL_108:
    *(_BYTE *)(a1 + 1537) = v79 != 0;
LABEL_109:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102190660);
  v56 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v57 = *(unsigned __int8 *)(a1 + 1537);
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)v84 = 2082;
    *(_QWORD *)&v84[2] = "";
    v85 = 1026;
    *(_DWORD *)v86 = v57;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#GnssAssistancePosition\", \"fUseDefaultLocInFarStartTest\":%{public}d}", buf, 0x18u);
  }
  v58 = (uint64_t **)(a1 + 1544);
  sub_100008848(a1 + 1544, *(_QWORD **)(a1 + 1552));
  *(_QWORD *)(a1 + 1544) = a1 + 1552;
  *(_QWORD *)(a1 + 1560) = 0;
  *(_QWORD *)(a1 + 1552) = 0;
  sub_1001E4804(buf);
  v59 = sub_10000CA44(*(uint64_t *)buf, "GpsPositionAssistanceTypeBlocklist");
  v60 = v59;
  v61 = *(std::__shared_weak_count **)v84;
  if (!*(_QWORD *)v84)
    goto LABEL_117;
  v62 = (unint64_t *)(*(_QWORD *)v84 + 8);
  do
    v63 = __ldaxr(v62);
  while (__stlxr(v63 - 1, v62));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
    std::__shared_weak_count::__release_weak(v61);
    if (v60)
      goto LABEL_118;
  }
  else
  {
LABEL_117:
    if (v59)
    {
LABEL_118:
      v64 = 0;
      v78 = 0;
      do
      {
        sub_1001E4804(buf);
        v65 = sub_100526244(*(uint64_t *)buf, "GpsPositionAssistanceTypeBlocklist", &v78);
        v66 = v65;
        v67 = *(std::__shared_weak_count **)v84;
        if (!*(_QWORD *)v84)
          goto LABEL_123;
        v68 = (unint64_t *)(*(_QWORD *)v84 + 8);
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
          if ((v66 & 1) == 0)
          {
LABEL_142:
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            v75 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109120;
              *(_DWORD *)&buf[4] = v64;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,unable to retrieve blocked location type at index,%d", buf, 8u);
            }
            if (!sub_1001BFF7C(115, 0))
              goto LABEL_147;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102190660);
            LODWORD(v93[0]) = 67109120;
            HIDWORD(v93[0]) = v64;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssAssistancePosition,unable to retrieve blocked location type at index,%d", v93);
            v72 = (uint8_t *)v76;
            sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v76);
            goto LABEL_152;
          }
        }
        else
        {
LABEL_123:
          if ((v65 & 1) == 0)
            goto LABEL_142;
        }
        if (v78 < 0xE)
        {
          *(_DWORD *)buf = v78;
          sub_1000C6190(v58, (int *)buf, buf);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v73 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v78;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "#GnssAssistancePosition,blocking location type,%d", buf, 8u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_147;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          LODWORD(v93[0]) = 67109120;
          HIDWORD(v93[0]) = v78;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#GnssAssistancePosition,blocking location type,%d", v93);
          v72 = (uint8_t *)v74;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v74);
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          v70 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = v78;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "#GnssAssistancePosition,unexpected location type,%d", buf, 8u);
          }
          if (!sub_1001BFF7C(115, 0))
            goto LABEL_147;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102190660);
          LODWORD(v93[0]) = 67109120;
          HIDWORD(v93[0]) = v78;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssAssistancePosition,unexpected location type,%d", v93);
          v72 = (uint8_t *)v71;
          sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistancePosition::getLocationDefaults()", "%s\n", v71);
        }
LABEL_152:
        if (v72 != buf)
          free(v72);
LABEL_147:
        ++v64;
      }
      while (v64 != v60);
    }
  }
  return sub_10011A5A8(v82);
}

void sub_100046FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_10004702C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _OWORD v8[12];
  char v9;
  _OWORD v10[12];
  char v11;

  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)a3 = a3 + 8;
  v4 = *(_QWORD **)a2;
  v5 = *(_QWORD **)(a2 + 8);
  if (*(_QWORD **)a2 != v5)
  {
    do
    {
      sub_10004721C(*(_QWORD *)(a1 + 56), v10);
      if (v11)
        goto LABEL_3;
      v7 = *(_QWORD *)(a1 + 48);
      if (v7)
      {
        sub_1000CBC6C(v7, v8);
        v10[10] = v8[10];
        v10[11] = v8[11];
        v11 = v9;
        v10[6] = v8[6];
        v10[7] = v8[7];
        v10[8] = v8[8];
        v10[9] = v8[9];
        v10[2] = v8[2];
        v10[3] = v8[3];
        v10[4] = v8[4];
        v10[5] = v8[5];
        v10[0] = v8[0];
        v10[1] = v8[1];
        if (v9)
LABEL_3:
          sub_100047148((uint64_t **)a3, v4, v4, v10);
      }
      ++v4;
    }
    while (v4 != v5);
  }
}

void sub_10004712C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100008848(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_100047148(uint64_t **a1, _QWORD *a2, _QWORD *a3, _OWORD *a4)
{
  void **v7;
  char *v8;
  uint64_t **v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v17;

  v7 = (void **)sub_100191690((uint64_t)a1, &v17, a2);
  v8 = (char *)*v7;
  if (!*v7)
  {
    v9 = (uint64_t **)v7;
    v8 = (char *)operator new(0xE8uLL);
    v10 = a4[9];
    *(_OWORD *)(v8 + 168) = a4[8];
    *(_OWORD *)(v8 + 184) = v10;
    v11 = a4[11];
    *(_OWORD *)(v8 + 200) = a4[10];
    *(_OWORD *)(v8 + 216) = v11;
    v12 = a4[5];
    *(_OWORD *)(v8 + 104) = a4[4];
    *(_OWORD *)(v8 + 120) = v12;
    v13 = a4[7];
    *(_OWORD *)(v8 + 136) = a4[6];
    *(_OWORD *)(v8 + 152) = v13;
    v14 = a4[1];
    *(_OWORD *)(v8 + 40) = *a4;
    *(_OWORD *)(v8 + 56) = v14;
    v15 = a4[3];
    *(_OWORD *)(v8 + 72) = a4[2];
    *((_QWORD *)v8 + 4) = *a3;
    *(_OWORD *)(v8 + 88) = v15;
    sub_1000145B0(a1, v17, v9, (uint64_t *)v8);
  }
  return v8;
}

void sub_10004721C(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  sub_1000CBC6C(*(_QWORD *)(a1 + 32), a2);
}

void sub_100047294(id a1)
{
  NSObject *v1;
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  dispatch_time_t v5;
  NSObject *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  _WORD v10[8];
  uint8_t buf[1640];

  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_1021633A8);
  v1 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEBUG, "Ping timer fired, resetting watchdog", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021633A8);
    v10[0] = 0;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 2, "Ping timer fired, resetting watchdog", v10, 2);
    sub_100512490("Generic", 1, 0, 2, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  v2 = qword_1023110F8;
  v3 = *(NSObject **)(qword_1023110F8 + 40);
  if (v3
    || (v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q), *(_QWORD *)(qword_1023110F8 + 40) = v4, dispatch_source_set_event_handler(v4, &stru_102163368), dispatch_resume(*(dispatch_object_t *)(qword_1023110F8 + 40)), v2 = qword_1023110F8, (v3 = *(NSObject **)(qword_1023110F8 + 40)) != 0))
  {
    ++*(_DWORD *)(v2 + 48);
    v5 = dispatch_time(0, 60000000000);
    dispatch_source_set_timer(v3, v5, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
  }
  else
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021633A8);
    v6 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to create watchdog timer", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021633A8);
      v10[0] = 0;
      LODWORD(v9) = 2;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "Failed to create watchdog timer", v10, v9);
      sub_100512490("Generic", 1, 0, 0, "static void *CLMotionCore::runMotionThread(void *)_block_invoke", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
  }
}

void sub_1000475D8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLCachedLocationController::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 40), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021595F0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLCachedLocationController::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021595F0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLCachedLocationController::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10000CC94(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100047790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000477B0(uint64_t a1, int *a2, uint64_t a3, id *a4)
{
  uint64_t v6;
  NSObject *v7;
  NSObject *v8;
  os_activity_scope_state_s state;
  char v10;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  id *v18;

  CLProfilingIdentify("CLMotionStateMediator::onClientManagerNotification");
  objc_msgSend(objc_msgSend(a4[4], "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v10 = 1;
    v7 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v7, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v8 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2082;
      v16 = "activity";
      v17 = 2050;
      v18 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v10 = 0;
  }
  sub_100230A48(a4, v6, a2);
  if (v10)
    os_activity_scope_leave(&state);
}

void sub_100047960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100047980(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMicroLocationNotifier::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102192BB0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMicroLocationNotifier::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102192BB0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMicroLocationNotifier::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100047B58(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100047B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100047B58(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  int v5;
  NSObject *v6;
  id v7;
  uint64_t *v8;
  NSObject *v9;
  _BOOL4 v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  NSObject *v16;
  int v17;
  void *v18;
  int v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  int v23;
  const char *v24;
  _DWORD v25[4];
  uint8_t buf[8];
  _BYTE v27[10];
  __int16 v28;
  const char *v29;
  __int16 v30;
  const char *v31;

  v5 = *a3;
  if (*a3 == 4)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v9 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v27 = 2082;
      *(_QWORD *)&v27[2] = "";
      v28 = 2082;
      v29 = "ClientManager";
      v30 = 2082;
      v31 = "Location services toggled";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    v10 = sub_10019CFA0() == 1;
    sub_100381D38(a1 + 584, v10);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v11 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Location Services Toggle", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    LOWORD(v25[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Updating Significant Locations from Location Services Toggle", v25, 2);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v12);
    goto LABEL_55;
  }
  if (v5 == 2)
  {
    if (!*(_BYTE *)(a4 + 97))
      return;
    if (_os_feature_enabled_impl("CoreLocation", "cl_pula"))
      sub_1001A8BBC(a4, (uint64_t)buf);
    else
      sub_1001A885C(a4, (uint64_t)buf);
    if (SBYTE3(v29) < 0)
    {
      v18 = *(void **)buf;
      if (*(_QWORD *)v27 != 73)
      {
        operator delete(*(void **)buf);
        return;
      }
      v19 = memcmp(*(const void **)buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle", 0x49uLL);
      operator delete(v18);
      if (v19)
        return;
    }
    else if (SBYTE3(v29) != 73
           || memcmp(buf, "com.apple.locationd.bundle-/System/Library/LocationBundles/Routine.bundle", 0x49uLL))
    {
      return;
    }
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v20 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v27 = 2082;
      *(_QWORD *)&v27[2] = "";
      v28 = 2082;
      v29 = "ClientManager";
      v30 = 2082;
      v31 = "Authorization";
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A00F0 != -1)
        dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    }
    v21 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "Updating Significant Locations from Auth Changed Notification", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    LOWORD(v25[0]) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Updating Significant Locations from Auth Changed Notification", v25, 2);
    v13 = (uint8_t *)v22;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v22);
LABEL_55:
    if (v13 != buf)
      free(v13);
    return;
  }
  if (!v5)
  {
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v6 = qword_1022A00F8;
    if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v27 = 2082;
      *(_QWORD *)&v27[2] = "";
      v28 = 2082;
      v29 = "ClientManager";
      v30 = 2082;
      v31 = "Privacy reset";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Received notification\", \"source\":%{public, location:escape_only}s, \"trigger\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    sub_100382100(a1 + 584);
    sub_100F27EC0(a1);
    v7 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
    if (byte_102309157 >= 0)
      v8 = &qword_102309140;
    else
      v8 = (uint64_t *)qword_102309140;
    objc_msgSend(v7, "resetNotificationConsumedForIdentifier:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v8));
    return;
  }
  if (qword_1022A00F0 != -1)
    dispatch_once(&qword_1022A00F0, &stru_102192BD0);
  v16 = qword_1022A00F8;
  if (os_log_type_enabled((os_log_t)qword_1022A00F8, OS_LOG_TYPE_DEBUG))
  {
    v17 = *a3;
    *(_DWORD *)buf = 67240192;
    *(_DWORD *)&buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "Unhandled manager notification %{public}d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00F0 != -1)
      dispatch_once(&qword_1022A00F0, &stru_102192BD0);
    v23 = *a3;
    v25[0] = 67240192;
    v25[1] = v23;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00F8, 2, "Unhandled manager notification %{public}d", v25, 8);
    v13 = (uint8_t *)v24;
    sub_100512490("Generic", 1, 0, 2, "void CLMicroLocationNotifier::onClientManagerNotification(int, const CLClientManager_Type::Notification &, const CLClientManager_Type::NotificationData &)", "%s\n", v24);
    goto LABEL_55;
  }
}

void sub_10004826C(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBeaconFenceAuthorizationManager::onClientManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021ADA80);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBeaconFenceAuthorizationManager::onClientManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021ADA80);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBeaconFenceAuthorizationManager::onClientManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100006C84(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100048424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100048444(uint64_t a1)
{
  NSObject *v2;
  id v3;
  NSObject *v4;
  id v5;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  id v12;

  if (objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clientKeyToClientInfoMap"), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021B58C0);
    v2 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Zonal client trying to access auth-context via Non-Zonal CLCAC api\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021B58C0);
    }
    v4 = qword_1022A01D8;
    if (os_signpost_enabled((os_log_t)qword_1022A01D8))
    {
      v5 = objc_msgSend(*(id *)(a1 + 40), "UTF8String");
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 2082;
      v12 = v5;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Zonal client trying to access auth-context via Non-Zonal CLCAC api", "{\"msg%{public}.0s\":\"Zonal client trying to access auth-context via Non-Zonal CLCAC api\", \"Client\":%{public, location:escape_only}s}", (uint8_t *)&v7, 0x1Cu);
    }
  }
  return (*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "clientKeyToAuthContextMap"), "objectForKeyedSubscript:", *(_QWORD *)(a1 + 40)));
}

void sub_100048608(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  double *v11;
  _QWORD *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  double v18;
  double *v19;
  double v20;
  double *v22;
  double *v23;
  __int128 v25;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  NSObject *v43;
  unint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint8_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70[3];
  uint64_t v71[3];
  void *__p;
  char v73;
  uint64_t v74;
  char **v75;
  char *v76[2];
  uint64_t *v77;
  _QWORD *v78[2];
  void *v79;
  _BYTE *v80;
  _BYTE v81[96];
  __int128 v82;
  __int128 v83;
  _BYTE v84[28];
  uint64_t v85;
  pthread_mutex_t *v86;
  __int16 v87;
  _DWORD v88[2];
  __int16 v89;
  int v90;
  int v91;
  uint64_t v92;
  __int16 v93;
  unint64_t v94;
  char v95;
  _BYTE buf[1632];

  v10 = *(_QWORD *)(a1 + 56);
  v85 = a1 + 56;
  (*(void (**)(void))(v10 + 16))();
  *(_QWORD *)(a4 + 8) = 0;
  v11 = (double *)(a4 + 8);
  v87 = 256;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = a4 + 8;
  if (*a2 == a2[1])
  {
LABEL_58:
    if ((_BYTE)v87)
      pthread_mutex_unlock(v86);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v85 + 24))(v85);
    return;
  }
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 32))(buf, a1, a2);
  sub_100008848(a4, *(_QWORD **)(a4 + 8));
  v12 = *(_QWORD **)&buf[8];
  *(_QWORD *)a4 = *(_QWORD *)buf;
  *(_QWORD *)(a4 + 8) = v12;
  v13 = *(_QWORD *)&buf[16];
  *(_QWORD *)(a4 + 16) = *(_QWORD *)&buf[16];
  if (v13)
  {
    v12[2] = v11;
    *(_QWORD *)buf = &buf[8];
    *(_QWORD *)&buf[8] = 0;
    *(_QWORD *)&buf[16] = 0;
    v12 = 0;
  }
  else
  {
    *(_QWORD *)a4 = v11;
  }
  sub_100008848((uint64_t)buf, v12);
  HIDWORD(v66) = *(_DWORD *)(a4 + 16);
  v14 = *(_OWORD *)(a3 + 112);
  v82 = *(_OWORD *)(a3 + 96);
  v83 = v14;
  *(_OWORD *)v84 = *(_OWORD *)(a3 + 128);
  *(_OWORD *)&v84[12] = *(_OWORD *)(a3 + 140);
  v15 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v81[32] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)&v81[48] = v15;
  v16 = *(_OWORD *)(a3 + 80);
  *(_OWORD *)&v81[64] = *(_OWORD *)(a3 + 64);
  *(_OWORD *)&v81[80] = v16;
  v17 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)v81 = *(_OWORD *)a3;
  *(_OWORD *)&v81[16] = v17;
  v18 = (double)((unint64_t)3600.0 >> 1);
  if (*(double *)(a3 + 20) <= 0.0 || a5 - *(double *)(a3 + 76) >= v18)
  {
    v19 = *(double **)a4;
    if (*(double **)a4 != v11)
    {
      while (1)
      {
        if (!sub_100219C3C((uint64_t)(v19 + 5)))
        {
          v20 = v19[9];
          if (v20 > 0.0 && a5 - a5 < v18)
            break;
        }
        v22 = (double *)*((_QWORD *)v19 + 1);
        if (v22)
        {
          do
          {
            v23 = v22;
            v22 = *(double **)v22;
          }
          while (v22);
        }
        else
        {
          do
          {
            v23 = (double *)*((_QWORD *)v19 + 2);
            _ZF = *(_QWORD *)v23 == (_QWORD)v19;
            v19 = v23;
          }
          while (!_ZF);
        }
        v19 = v23;
        if (v23 == v11)
          goto LABEL_25;
      }
      v25 = *((_OWORD *)v19 + 3);
      v82 = 0uLL;
      memset(v84, 0, 25);
      *(_OWORD *)&v81[4] = v25;
      *(double *)&v81[20] = v20;
      *(_OWORD *)&v81[28] = xmmword_101BAFEE0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)&v81[44] = _Q0;
      *(_OWORD *)&v81[60] = _Q0;
      *(double *)&v81[76] = a5;
      *(_DWORD *)v81 = 0xFFFF;
      *(_DWORD *)&v81[84] = 0;
      *(_QWORD *)&v81[88] = 0xBFF0000000000000;
      *(_QWORD *)((char *)&v83 + 4) = 0xBFF0000000000000;
      LODWORD(v83) = 0;
      HIDWORD(v83) = 0x7FFFFFFF;
      *(_WORD *)&v84[25] = v91;
      v84[27] = BYTE2(v91);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021B18C0);
      a3 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)a3, OS_LOG_TYPE_INFO, "@TileSearch, wifi, use ALS results for location hint", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021B18C0);
        LOWORD(v71[0]) = 0;
        LODWORD(v61) = 2;
        a3 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "@TileSearch, wifi, use ALS results for location hint", v71);
        sub_100512490("Generic", 1, 0, 2, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", (const char *)a3);
        if ((_BYTE *)a3 != buf)
          free((void *)a3);
      }
    }
  }
LABEL_25:
  sub_100190A24((_QWORD *)(a1 + 104), a2, (uint64_t)v81, a1 + 8, &v79, a5);
  v29 = *a2;
  v30 = a2[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)v79) >> 3) != (v30 - *a2) >> 3)
  {
    v45 = &qword_1022A0000;
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021B1900);
    v42 = &qword_1022A0000;
    v41 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_ERROR))
    {
      v50 = (a2[1] - *a2) >> 3;
      *(_DWORD *)buf = 134349312;
      *(_QWORD *)&buf[4] = v50;
      *(_WORD *)&buf[12] = 2050;
      *(_QWORD *)&buf[14] = 0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)v79) >> 3);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v41, OS_LOG_TYPE_ERROR, "expecting equal length, input, %{public}lu, output, %{public}lu", buf, 0x16u);
    }
    v51 = sub_1001BFF7C(115, 0);
    if ((_DWORD)v51)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021B1900);
      v59 = (a2[1] - *a2) >> 3;
      v91 = 134349312;
      v92 = v59;
      v93 = 2050;
      v94 = 0xAAAAAAAAAAAAAAABLL * ((v80 - (_BYTE *)v79) >> 3);
      LODWORD(v61) = 22;
      v45 = (uint64_t *)buf;
      a2 = (uint64_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 16, "expecting equal length, input, %{public}lu, output, %{public}lu", &v91);
      v51 = sub_100512490("Generic", 1, 0, 0, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", (const char *)a2);
      if (a2 != (uint64_t *)buf)
        free(a2);
    }
    sub_10194F1B0(v51, v52, v53, v54, v55, v56, v57, v58, v60, v61, v62, v63, v64, v65, v66, v67, v68, v70[0], v70[1],
      v70[2],
      v71[0],
      v71[1],
      v71[2],
      (uint64_t)__p);
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/CLWifiAccessPointLocationService.mm", 328, "findLocationsOfMacAddresses");
    __break(1u);
LABEL_75:
    dispatch_once(&qword_1022A0040, &stru_1021B18C0);
LABEL_63:
    v47 = qword_1022A0048;
    v48 = (unint64_t)(a2[1] - *a2) >> 3;
    v91 = 67240704;
    LODWORD(v92) = v48;
    WORD2(v92) = 1026;
    *(_DWORD *)((char *)v45 + 218) = a3;
    LOWORD(v94) = 1026;
    *(_DWORD *)((char *)&v94 + 2) = (_DWORD)v42;
    LODWORD(v61) = 20;
    v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v47, 1, "@TileSearch, wifi, results, searched, %{public}d, in_tiles, %{public}d, ALS, %{public}d", &v91, v61);
    sub_100512490("Generic", 1, 0, 2, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v49);
    if (v49 != buf)
      free(v49);
    goto LABEL_53;
  }
  v78[0] = 0;
  v78[1] = 0;
  v76[1] = 0;
  v77 = (uint64_t *)v78;
  v75 = v76;
  v76[0] = 0;
  if (v30 != v29)
  {
    v31 = 0;
    v32 = 0;
    v33 = 0;
    v69 = 0;
    while (1)
    {
      v34 = (char *)v79 + v32;
      if (*((_BYTE *)v79 + v32 + 20))
      {
        v35 = (uint64_t *)(v29 + v31);
        v36 = *(_DWORD *)(v34 + 6);
        v37 = *(_QWORD *)(v34 + 12);
        if (v11 == (double *)sub_100191618(a4, (_QWORD *)(v29 + v31)))
          break;
      }
LABEL_36:
      ++v33;
      v29 = *a2;
      v31 += 8;
      v32 += 24;
      if (v33 >= (a2[1] - *a2) >> 3)
        goto LABEL_48;
    }
    v74 = v37;
    sub_100BCBF40((uint64_t)v71, 0, v37, SHIDWORD(v37));
    sub_1000C1728((uint64_t **)&v75, (uint64_t)v71, (uint64_t)v71);
    if (v78 == (_QWORD **)sub_10136C0FC((uint64_t)&v77, (int *)&v74))
    {
      sub_1011581C8(*(uint64_t **)(a1 + 96), &v91);
      if (!v95)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021B18C0);
        v39 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 67174913;
          *(_DWORD *)&buf[4] = v74;
          *(_WORD *)&buf[8] = 1025;
          *(_DWORD *)&buf[10] = HIDWORD(v74);
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_FAULT, "tile header missing from returned mac, x, %{private}d, y, %{private}d", buf, 0xEu);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021B18C0);
          v88[0] = 67174913;
          v88[1] = v74;
          v89 = 1025;
          v90 = HIDWORD(v74);
          LODWORD(v61) = 14;
          v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 17, "tile header missing from returned mac, x, %{private}d, y, %{private}d", v88, v61);
          sub_100512490("Generic", 1, 0, 0, "virtual std::map<CLMacAddress, CLWifiAPLocation> CLWifiAccessPointLocationService::findLocationsOfMacAddresses(const std::vector<CLMacAddress> &, const CLDaemonLocation &, cl::chrono::CFAbsoluteTimeClock::time_point) const", "%s\n", v40);
          if (v40 != buf)
            free(v40);
        }
        goto LABEL_34;
      }
      sub_10136C170(&v77, (int *)&v74, &v74, (__int128 *)&v91);
      ++v69;
    }
    v38 = sub_101367428((uint64_t)&v77, (int *)&v74);
    sub_100F6F798((uint64_t)&v91, *v35, (v36 >> 12) & 0xFFF, v36 & 0xFFF, HIBYTE(v36) & 0xF, v36 >> 28);
    sub_101367464(v38, (uint64_t)&v91, (uint64_t)buf);
    sub_100190354((uint64_t **)a4, v35, v35, buf);
LABEL_34:
    if (v73 < 0)
      operator delete(__p);
    goto LABEL_36;
  }
  v69 = 0;
LABEL_48:
  v41 = a1;
  sub_1000C6828(a1, &v75, (unint64_t)*(double *)&qword_1022FDCC8, v70, a5);
  LODWORD(v42) = HIDWORD(v66);
  LODWORD(a3) = v69;
  *(_QWORD *)buf = v70;
  sub_1011B6E1C((void ***)buf);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021B18C0);
  v43 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v44 = (unint64_t)(a2[1] - *a2) >> 3;
    *(_DWORD *)buf = 67240704;
    *(_DWORD *)&buf[4] = v44;
    *(_WORD *)&buf[8] = 1026;
    *(_DWORD *)&buf[10] = v69;
    *(_WORD *)&buf[14] = 1026;
    *(_DWORD *)&buf[16] = HIDWORD(v66);
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_INFO, "@TileSearch, wifi, results, searched, %{public}d, in_tiles, %{public}d, ALS, %{public}d", buf, 0x14u);
  }
  v45 = (uint64_t *)v81;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 == -1)
      goto LABEL_63;
    goto LABEL_75;
  }
LABEL_53:
  sub_100223D18(*(_DWORD **)(v41 + 80), (unint64_t)(a2[1] - *a2) >> 3, (int)v42, a3);
  v46 = *(_QWORD *)(v41 + 152);
  if (v46)
    sub_10021E42C(v46, (_QWORD *)a4);
  sub_100067A00((uint64_t)&v75, v76[0]);
  sub_100008848((uint64_t)&v77, v78[0]);
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  if (HIBYTE(v87))
    goto LABEL_58;
}

void sub_100049108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  uint64_t v61;

  sub_100008848(v61, *(_QWORD **)(v61 + 8));
  sub_10187E514((uint64_t)&a61);
  _Unwind_Resume(a1);
}

void sub_1000491C8(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  BOOL v13;
  _QWORD *v14;
  unint64_t v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  NSObject *v30;
  char *v31;
  _QWORD *v32;
  int v33;
  unint64_t v34;
  double *v35;
  double *v36;
  const std::string::value_type *v37;
  _BOOL8 v38;
  _BOOL8 v39;
  std::string *v42;
  NSObject *v43;
  std::string *v44;
  std::string *v45;
  uint64_t v46;
  std::string *v47;
  std::string *v48;
  char *v49;
  double Current;
  double v51;
  int v52;
  double v53;
  float v54;
  unint64_t v55;
  NSObject *v56;
  std::string *v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  uint64_t v65;
  std::string *v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  std::string *v73;
  _QWORD *v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  int v80;
  int v81;
  int v82;
  int v83;
  const char *v84;
  int v85;
  NSObject *v86;
  int v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  std::string::size_type v94;
  int v95;
  _QWORD v96[5];
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  std::string v102;
  uint64_t v103;
  std::string v104;
  _QWORD **v105;
  _QWORD *v106;
  uint64_t v107;
  void *__p;
  char *v109;
  unint64_t v110;
  std::string v111;
  std::string *v112;
  _BYTE v113[10];
  __int16 v114;
  uint64_t v115;
  __int16 v116;
  uint64_t v117;
  __int16 v118;
  int v119;
  __int16 v120;
  uint64_t v121;
  __int16 v122;
  uint64_t v123;
  __int16 v124;
  std::string *v125;
  __int16 v126;
  double v127;
  _QWORD v128[6];
  _QWORD v129[6];
  _BYTE buf[24];
  std::string *v131;
  _BYTE v132[10];
  __int16 v133;
  uint64_t v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  int v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  std::string *v144;
  __int16 v145;
  double v146;

  sub_100130B94((_DWORD *)a7, a1);
  if (a2[3])
    v13 = 0;
  else
    v13 = *(_BYTE *)(a3 + 8) == 0;
  if (v13)
    return;
  v14 = (_QWORD *)a2[2];
  v109 = 0;
  v110 = 0;
  __p = 0;
  v15 = 0;
  if (v14)
  {
    v16 = v14;
    do
    {
      ++v15;
      v16 = (_QWORD *)*v16;
    }
    while (v16);
  }
  sub_1006B2BAC((char *)&__p, v14, 0, v15);
  if (*(_BYTE *)(a3 + 8) && !sub_1000254D8(a2, (_QWORD *)a3))
  {
    v17 = v109;
    if ((unint64_t)v109 >= v110)
    {
      v19 = (char *)__p;
      v20 = (v109 - (_BYTE *)__p) >> 3;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        sub_100259694();
      v22 = v110 - (_QWORD)__p;
      if ((uint64_t)(v110 - (_QWORD)__p) >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        v24 = (char *)sub_10025E6A0((uint64_t)&v110, v23);
        v19 = (char *)__p;
        v17 = v109;
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[8 * v20];
      v26 = &v24[8 * v23];
      *(_QWORD *)v25 = *(_QWORD *)a3;
      v18 = v25 + 8;
      while (v17 != v19)
      {
        v27 = *((_QWORD *)v17 - 1);
        v17 -= 8;
        *((_QWORD *)v25 - 1) = v27;
        v25 -= 8;
      }
      __p = v25;
      v109 = v18;
      v110 = (unint64_t)v26;
      if (v19)
        operator delete(v19);
    }
    else
    {
      *(_QWORD *)v109 = *(_QWORD *)a3;
      v18 = v17 + 8;
    }
    v109 = v18;
  }
  v106 = 0;
  v107 = 0;
  v105 = &v106;
  if (a5 == 1)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, void **, double))(**(_QWORD **)(a1 + 6544) + 24))(buf, *(_QWORD *)(a1 + 6544), &__p, *(double *)(a1 + 6456));
    goto LABEL_31;
  }
  if (!a5)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, void **, uint64_t, double))(**(_QWORD **)(a1 + 6544) + 16))(buf, *(_QWORD *)(a1 + 6544), &__p, a4, *(double *)(a1 + 6456));
LABEL_31:
    sub_100008848((uint64_t)&v105, v106);
    v28 = *(_QWORD **)&buf[8];
    v105 = *(_QWORD ***)buf;
    v106 = *(_QWORD **)&buf[8];
    v107 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v106;
      *(_QWORD *)buf = &buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      v28 = 0;
    }
    else
    {
      v105 = &v106;
    }
    sub_100008848((uint64_t)buf, v28);
  }
  if (a6)
  {
    (*(void (**)(_BYTE *__return_ptr, _QWORD, _QWORD ***))(**(_QWORD **)(a1 + 6544) + 48))(buf, *(_QWORD *)(a1 + 6544), &v105);
    sub_100008848((uint64_t)&v105, v106);
    v29 = *(_QWORD **)&buf[8];
    v105 = *(_QWORD ***)buf;
    v106 = *(_QWORD **)&buf[8];
    v107 = *(_QWORD *)&buf[16];
    if (*(_QWORD *)&buf[16])
    {
      *(_QWORD *)(*(_QWORD *)&buf[8] + 16) = &v106;
      *(_QWORD *)buf = &buf[8];
      *(_QWORD *)&buf[8] = 0;
      *(_QWORD *)&buf[16] = 0;
      v29 = 0;
    }
    else
    {
      v105 = &v106;
    }
    sub_100008848((uint64_t)buf, v29);
  }
  else
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217A918);
    v30 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "MovingApDetector, skip cross-checking centroids with GPS/Cell as requested", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      LOWORD(v111.__r_.__value_.__l.__data_) = 0;
      v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "MovingApDetector, skip cross-checking centroids with GPS/Cell as requested", &v111, 2);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v31);
      if (v31 != buf)
        free(v31);
    }
  }
  sub_1015A2E04(&v104, "default");
  v92 = a3;
  v91 = a5;
  v90 = a1;
  v32 = (_QWORD *)a2[2];
  if (v32)
  {
    v95 = 0;
    v33 = 0;
    v94 = a2[3];
    v34 = 1;
    while (1)
    {
      v103 = v32[2];
      v35 = (double *)sub_100191618((uint64_t)&v105, &v103);
      v36 = v35;
      if (&v106 == (_QWORD **)v35)
        break;
      if (!sub_10018FDEC(v35 + 5))
      {
        sub_1000AF824(a7 + 1264, &v103, &v103);
        v37 = "unknown";
        goto LABEL_57;
      }
      sub_100212D50(a7 + 1184, (_QWORD *)v36 + 4, (_QWORD *)v36 + 4, v36 + 5);
      if (*((_BYTE *)v36 + 128))
      {
        std::string::assign(&v104, "tile");
        ++v33;
      }
      else
      {
        std::string::assign(&v104, "als");
        ++v95;
      }
LABEL_58:
      if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      {
        v38 = v104.__r_.__value_.__l.__size_ == 3
           && *(_WORD *)v104.__r_.__value_.__l.__data_ == 27745
           && *(_BYTE *)(v104.__r_.__value_.__r.__words[0] + 2) == 115;
        if (v104.__r_.__value_.__l.__size_ != 4)
        {
          v39 = 0;
          goto LABEL_80;
        }
        v42 = (std::string *)v104.__r_.__value_.__r.__words[0];
        goto LABEL_78;
      }
      v38 = 0;
      if (HIBYTE(v104.__r_.__value_.__r.__words[2]) == 4)
      {
        v42 = &v104;
LABEL_78:
        v39 = LODWORD(v42->__r_.__value_.__l.__data_) == 1701603700;
        goto LABEL_79;
      }
      v39 = 0;
      if (HIBYTE(v104.__r_.__value_.__r.__words[2]) == 3)
      {
        v39 = 0;
        v38 = LOWORD(v104.__r_.__value_.__l.__data_) == 27745 && v104.__r_.__value_.__s.__data_[2] == 115;
        goto LABEL_80;
      }
LABEL_79:
      if (v39)
        goto LABEL_102;
LABEL_80:
      if (v38)
      {
LABEL_102:
        Current = CFAbsoluteTimeGetCurrent();
        v51 = v36[13];
        v52 = rand();
        v53 = (Current - v51) / 86400.0;
        v54 = v53;
        HIDWORD(v55) = -1030792151 * v52 + 85899344;
        LODWORD(v55) = HIDWORD(v55);
        if ((v55 >> 2) <= 0x28F5C28)
        {
          v128[0] = CFSTR("age");
          *(float *)&v53 = v53;
          v129[0] = +[NSNumber numberWithFloat:](NSNumber, "numberWithFloat:", v53);
          v128[1] = CFSTR("fromAppleLocationServices");
          v129[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v38);
          v128[2] = CFSTR("fromTiles");
          v129[2] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v39);
          v128[3] = CFSTR("horizontalAccuracy");
          v129[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v36[9]);
          v128[4] = CFSTR("reach");
          v129[4] = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *((unsigned int *)v36 + 22));
          v128[5] = CFSTR("verticalAccuracy");
          v129[5] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v36[10]);
          AnalyticsSendEvent(CFSTR("com.apple.locationd.WifiPositioningAPLocations"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v129, v128, 6));
        }
        if (v34 > (int)sub_100EF40C4())
          goto LABEL_115;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10217A918);
        v56 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000C2254(&v103, &v111);
          v57 = &v111;
          if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v57 = (std::string *)v111.__r_.__value_.__r.__words[0];
          v58 = *((_QWORD *)v36 + 6);
          v59 = *((_QWORD *)v36 + 7);
          v60 = *((_DWORD *)v36 + 22);
          v62 = *((_QWORD *)v36 + 8);
          v61 = *((_QWORD *)v36 + 9);
          v63 = *((_QWORD *)v36 + 10);
          v64 = &v104;
          if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v64 = (std::string *)v104.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 134351619;
          *(_QWORD *)&buf[4] = v34;
          *(_WORD *)&buf[12] = 2050;
          *(_QWORD *)&buf[14] = v94;
          *(_WORD *)&buf[22] = 2081;
          v131 = v57;
          *(_WORD *)v132 = 2049;
          *(_QWORD *)&v132[2] = v58;
          v133 = 2049;
          v134 = v59;
          v135 = 2050;
          v136 = v61;
          v137 = 1026;
          v138 = v60;
          v139 = 2049;
          v140 = v62;
          v141 = 2050;
          v142 = v63;
          v143 = 2082;
          v144 = v64;
          v145 = 2050;
          v146 = v54;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}1.f, reach, %{public}d, altitude, %{private}.1f, vacc, %{public}.1f, src, %{public}s, query age, %{public}.6f days", buf, 0x6Cu);
          if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v111.__r_.__value_.__l.__data_);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_115;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_10217A918);
        v65 = qword_1022A0058;
        sub_1000C2254(&v103, &v102);
        v66 = &v102;
        if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v66 = (std::string *)v102.__r_.__value_.__r.__words[0];
        v67 = *((_QWORD *)v36 + 6);
        v68 = *((_QWORD *)v36 + 7);
        v69 = *((_DWORD *)v36 + 22);
        v71 = *((_QWORD *)v36 + 8);
        v70 = *((_QWORD *)v36 + 9);
        v72 = *((_QWORD *)v36 + 10);
        v73 = &v104;
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v73 = (std::string *)v104.__r_.__value_.__r.__words[0];
        LODWORD(v111.__r_.__value_.__l.__data_) = 134351619;
        *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = v34;
        WORD2(v111.__r_.__value_.__r.__words[1]) = 2050;
        *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 6) = v94;
        HIWORD(v111.__r_.__value_.__r.__words[2]) = 2081;
        v112 = v66;
        *(_WORD *)v113 = 2049;
        *(_QWORD *)&v113[2] = v67;
        v114 = 2049;
        v115 = v68;
        v116 = 2050;
        v117 = v70;
        v118 = 1026;
        v119 = v69;
        v120 = 2049;
        v121 = v71;
        v122 = 2050;
        v123 = v72;
        v124 = 2082;
        v125 = v73;
        v126 = 2050;
        v127 = v54;
        LODWORD(v89) = 108;
        v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 0, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{private}.7f, %{private}.7f, hacc, %{public}1.f, reach, %{public}d, altitude, %{private}.1f, vacc, %{public}.1f, src, %{public}s, query age, %{public}.6f days", &v111, v89);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        goto LABEL_126;
      }
      if (v34 > (int)sub_100EF40C4())
        goto LABEL_115;
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      v43 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000C2254(&v103, &v111);
        v44 = &v111;
        if ((v111.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v44 = (std::string *)v111.__r_.__value_.__r.__words[0];
        v45 = &v104;
        if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v45 = (std::string *)v104.__r_.__value_.__r.__words[0];
        *(_DWORD *)buf = 134349827;
        *(_QWORD *)&buf[4] = v34;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v94;
        *(_WORD *)&buf[22] = 2081;
        v131 = v44;
        *(_WORD *)v132 = 2082;
        *(_QWORD *)&v132[2] = v45;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{public}s", buf, 0x2Au);
        if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v111.__r_.__value_.__l.__data_);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_115;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      v46 = qword_1022A0058;
      sub_1000C2254(&v103, &v102);
      v47 = &v102;
      if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v47 = (std::string *)v102.__r_.__value_.__r.__words[0];
      v48 = &v104;
      if ((v104.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v48 = (std::string *)v104.__r_.__value_.__r.__words[0];
      LODWORD(v111.__r_.__value_.__l.__data_) = 134349827;
      *(std::string::size_type *)((char *)v111.__r_.__value_.__r.__words + 4) = v34;
      WORD2(v111.__r_.__value_.__r.__words[1]) = 2050;
      *(std::string::size_type *)((char *)&v111.__r_.__value_.__r.__words[1] + 6) = v94;
      HIWORD(v111.__r_.__value_.__r.__words[2]) = 2081;
      v112 = v47;
      *(_WORD *)v113 = 2082;
      *(_QWORD *)&v113[2] = v48;
      LODWORD(v89) = 42;
      v49 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v46, 0, "@WifiAps, lookiter, %{public}zu / %{public}zu, %{private}s, %{public}s", &v111, v89);
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
LABEL_126:
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v49);
      if (v49 != buf)
        free(v49);
LABEL_115:
      v32 = (_QWORD *)*v32;
      ++v34;
      if (!v32)
        goto LABEL_129;
    }
    sub_1000AF824(a7 + 1224, &v103, &v103);
    v37 = "notindb";
LABEL_57:
    std::string::assign(&v104, v37);
    goto LABEL_58;
  }
  v33 = 0;
  v95 = 0;
LABEL_129:
  if (*(_BYTE *)(v92 + 8))
  {
    v74 = sub_100191618((uint64_t)&v105, (_QWORD *)v92);
    if (&v106 != v74)
    {
      v75 = *(unsigned __int8 *)(a7 + 1400);
      v76 = *(_OWORD *)(v74 + 7);
      *(_OWORD *)(a7 + 1304) = *(_OWORD *)(v74 + 5);
      *(_OWORD *)(a7 + 1320) = v76;
      v77 = *(_OWORD *)(v74 + 11);
      v78 = *(_OWORD *)(v74 + 15);
      v79 = *(_OWORD *)(v74 + 9);
      *(_OWORD *)(a7 + 1368) = *(_OWORD *)(v74 + 13);
      *(_OWORD *)(a7 + 1384) = v78;
      *(_OWORD *)(a7 + 1336) = v79;
      *(_OWORD *)(a7 + 1352) = v77;
      if (!v75)
        *(_BYTE *)(a7 + 1400) = 1;
    }
  }
  v80 = *((_DWORD *)a2 + 6);
  if (v80 >= 1)
  {
    if (v80 == 1)
    {
      v81 = 1;
    }
    else if (v80 >= 5)
    {
      if (v80 >= 9)
      {
        if (v80 >= 0x11)
        {
          if (v80 >= 0x21)
          {
            if (v80 < 0x41)
              v81 = 64;
            else
              v81 = 65;
          }
          else
          {
            v81 = 32;
          }
        }
        else
        {
          v81 = 16;
        }
      }
      else
      {
        v81 = 8;
      }
    }
    else
    {
      v81 = 4;
    }
    v82 = 100 * *(_DWORD *)(a7 + 1288);
    v83 = 100 * *(_DWORD *)(a7 + 1248);
    if (v91)
      v84 = "alsonly";
    else
      v84 = "tilesals";
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_10217A918);
    v85 = v82 / v80;
    v86 = qword_1022A0058;
    v87 = v83 / v80;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67241730;
      *(_DWORD *)&buf[4] = v80;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v81;
      *(_WORD *)&buf[14] = 2082;
      *(_QWORD *)&buf[16] = v84;
      LOWORD(v131) = 1026;
      *(_DWORD *)((char *)&v131 + 2) = 100 * v95 / v80;
      HIWORD(v131) = 1026;
      *(_DWORD *)v132 = 100 * v33 / v80;
      *(_WORD *)&v132[4] = 1026;
      *(_DWORD *)&v132[6] = v85;
      v133 = 1026;
      LODWORD(v134) = v87;
      _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEBUG, "WlpMetric, aplookup, %{public}d, %{public}d, sources, %{public}s, als, %{public}d, tiles, %{public}d, invalid, %{public}d, unknown, %{public}d", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_10217A918);
      LODWORD(v111.__r_.__value_.__l.__data_) = 67241730;
      HIDWORD(v111.__r_.__value_.__r.__words[0]) = v80;
      LOWORD(v111.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v111.__r_.__value_.__r.__words[1] + 2) = v81;
      HIWORD(v111.__r_.__value_.__r.__words[1]) = 2082;
      v111.__r_.__value_.__r.__words[2] = (std::string::size_type)v84;
      LOWORD(v112) = 1026;
      *(_DWORD *)((char *)&v112 + 2) = 100 * v95 / v80;
      HIWORD(v112) = 1026;
      *(_DWORD *)v113 = 100 * v33 / v80;
      *(_WORD *)&v113[4] = 1026;
      *(_DWORD *)&v113[6] = v85;
      v114 = 1026;
      LODWORD(v115) = v87;
      LODWORD(v89) = 48;
      v88 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WlpMetric, aplookup, %{public}d, %{public}d, sources, %{public}s, als, %{public}d, tiles, %{public}d, invalid, %{public}d, unknown, %{public}d", &v111, v89);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::WifiApLookup::HandleEvent::lookupMacAddresses(const std::unordered_set<CLMacAddress> &, const std::optional<CLMacAddress> &, const CLDaemonLocation, Sources, BOOL) const", "%s\n", v88);
      if (v88 != buf)
        free(v88);
    }
    if ((*(_BYTE *)(v90 + 6512) & 0xF) == 0)
    {
      v96[0] = _NSConcreteStackBlock;
      v96[1] = 3221225472;
      v96[2] = sub_100C1EBD0;
      v96[3] = &unk_102150CF0;
      v96[4] = v84;
      v97 = v81;
      v98 = 100 * v95 / v80;
      v99 = 100 * v33 / v80;
      v100 = v85;
      v101 = v87;
      AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.aplookup"), v96);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  sub_100008848((uint64_t)&v105, v106);
  if (__p)
  {
    v109 = (char *)__p;
    operator delete(__p);
  }
}

void sub_10004A13C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,_QWORD *a43,uint64_t a44,void *__p,uint64_t a46)
{
  sub_100008848((uint64_t)&a42, a43);
  if (__p)
  {
    a46 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10055829C(a19);
  _Unwind_Resume(a1);
}

void sub_10004A1DC(uint64_t a1, __int128 *a2)
{
  std::__shared_weak_count *v4;
  __n128 v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  int v19;
  _BYTE v20[688];
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void *v23;
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  id v27;

  sub_100129CA0((uint64_t)v20);
  v4 = (std::__shared_weak_count *)operator new(0x140uLL);
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)off_10218A238;
  v4->__shared_owners_ = 0;
  v5 = sub_10004A394((uint64_t)&v4[1], a2);
  v25 = v6;
  v7 = v26;
  v26 = v4;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *, __n128))v7->__on_zero_shared)(v7, v5);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v19 = 25;
  (*(void (**)(uint64_t, int *, _BYTE *, _QWORD, uint64_t, _QWORD, __n128))(*(_QWORD *)a1 + 152))(a1, &v19, v20, 0, 0xFFFFFFFFLL, 0, v5);

  v10 = v26;
  if (v26)
  {
    v11 = (unint64_t *)&v26->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  if (v24 < 0)
    operator delete(v23);
  v13 = v22;
  if (v22)
  {
    v14 = (unint64_t *)&v22->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_10004A378(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1004B4F0C((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_10004A394(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 result;

  v2 = *a2;
  v3 = a2[1];
  *(_QWORD *)(a1 + 32) = *((_QWORD *)a2 + 4);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v4 = *(__int128 *)((char *)a2 + 56);
  v5 = *(__int128 *)((char *)a2 + 72);
  *(_OWORD *)(a1 + 40) = *(__int128 *)((char *)a2 + 40);
  *(_OWORD *)(a1 + 72) = v5;
  *(_OWORD *)(a1 + 56) = v4;
  v6 = *(__int128 *)((char *)a2 + 88);
  v7 = *(__int128 *)((char *)a2 + 104);
  v8 = *(__int128 *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 136) = *(__int128 *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 120) = v8;
  *(_OWORD *)(a1 + 104) = v7;
  *(_OWORD *)(a1 + 88) = v6;
  *(_QWORD *)(a1 + 152) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 152) = *(__int128 *)((char *)a2 + 152);
  *(_QWORD *)(a1 + 168) = *((_QWORD *)a2 + 21);
  *((_QWORD *)a2 + 21) = 0;
  *(__int128 *)((char *)a2 + 152) = 0u;
  *(_QWORD *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 176) = a2[11];
  *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
  *((_QWORD *)a2 + 24) = 0;
  a2[11] = 0u;
  *(_QWORD *)(a1 + 216) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 200) = *(__int128 *)((char *)a2 + 200);
  *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
  *(__int128 *)((char *)a2 + 200) = 0u;
  v9 = *((_QWORD *)a2 + 28);
  *(__int128 *)((char *)a2 + 216) = 0u;
  *(_QWORD *)(a1 + 224) = v9;
  v10 = *((_QWORD *)a2 + 29);
  *((_QWORD *)a2 + 29) = 0;
  *(_QWORD *)(a1 + 232) = v10;
  v11 = *((_QWORD *)a2 + 30);
  *((_QWORD *)a2 + 30) = 0;
  *(_QWORD *)(a1 + 240) = v11;
  v12 = *((_QWORD *)a2 + 31);
  *((_QWORD *)a2 + 31) = 0;
  *(_QWORD *)(a1 + 248) = v12;
  v13 = *((_QWORD *)a2 + 32);
  *((_QWORD *)a2 + 32) = 0;
  *(_QWORD *)(a1 + 256) = v13;
  v14 = *((_QWORD *)a2 + 33);
  *((_QWORD *)a2 + 33) = 0;
  *(_QWORD *)(a1 + 264) = v14;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  result = (__n128)a2[17];
  *(__n128 *)(a1 + 272) = result;
  *(_QWORD *)(a1 + 288) = *((_QWORD *)a2 + 36);
  *((_QWORD *)a2 + 34) = 0;
  *((_QWORD *)a2 + 35) = 0;
  *((_QWORD *)a2 + 36) = 0;
  return result;
}

uint64_t sub_10004A4A4(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  int v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  unsigned int v10;
  int v11;
  int v12;
  uint64_t result;

  if (!*(_BYTE *)(a1 + 52))
  {
    v3 = 0;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(a1 + 52) & 1) == 0)
  {
    v3 = 0;
    if ((*(_BYTE *)(a1 + 52) & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    v4 = *(_QWORD *)(qword_102313BA0 + 32);
  v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004A57C(v4, a2);
  v6 = (int)v5;
  if (v5 >= 0x80)
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2);
  else
    v7 = 1;
  v3 = v6 + v7 + 1;
  if ((*(_DWORD *)(a1 + 52) & 2) != 0)
  {
LABEL_12:
    v8 = *(_QWORD *)(a1 + 40);
    if (!v8)
      v8 = *(_QWORD *)(qword_102313BA0 + 40);
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004A5E8(v8, a2);
    v11 = (int)v9;
    if (v9 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, v10);
    else
      v12 = 1;
    v3 += v11 + v12 + 1;
  }
LABEL_18:
  result = wireless_diagnostics::google::protobuf::internal::ExtensionSet::ByteSize((wireless_diagnostics::google::protobuf::internal::ExtensionSet *)(a1 + 8))
         + v3;
  *(_DWORD *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10004A57C(uint64_t a1, unint64_t a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(a1 + 44);
  if (*(_BYTE *)(a1 + 44))
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v5 = v4 + 9;
    else
      v5 = v4;
    if ((v3 & 8) != 0)
      v5 = v5
         + wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize64(*(wireless_diagnostics::google::protobuf::io::CodedOutputStream **)(a1 + 32), a2)+ 1;
  }
  else
  {
    v5 = 0;
  }
  *(_DWORD *)(a1 + 40) = v5;
  return v5;
}

uint64_t sub_10004A5E8(uint64_t a1, unint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  uint64_t v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;
  int v12;
  uint64_t v13;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v14;
  int v15;
  int v16;
  uint64_t v17;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v18;
  int v19;
  int v20;
  uint64_t v21;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v22;
  int v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  uint64_t v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  uint64_t v33;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v34;
  int v35;
  int v36;
  uint64_t v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  int v40;
  uint64_t v41;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v42;
  int v43;
  int v44;
  uint64_t v45;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v46;
  int v47;
  int v48;
  uint64_t v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  int v52;
  uint64_t v53;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v54;
  int v55;
  int v56;
  uint64_t v57;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v58;
  int v59;
  int v60;
  uint64_t v61;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v62;
  int v63;
  int v64;
  uint64_t v65;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v66;
  int v67;
  int v68;
  uint64_t v69;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v70;
  int v71;
  int v72;
  uint64_t v73;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v74;
  int v75;
  int v76;
  uint64_t v77;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v78;
  int v79;
  int v80;
  uint64_t v81;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v82;
  int v83;
  int v84;
  uint64_t v85;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v86;
  int v87;
  int v88;
  uint64_t v89;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v90;
  int v91;
  int v92;
  uint64_t v93;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v94;
  int v95;
  int v96;
  uint64_t v97;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v98;
  int v99;
  int v100;
  uint64_t v101;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v102;
  int v103;
  int v104;
  uint64_t v105;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v106;
  int v107;
  int v108;
  uint64_t v109;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v110;
  int v111;
  int v112;
  uint64_t v113;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v114;
  int v115;
  int v116;
  uint64_t v117;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v118;
  int v119;
  int v120;
  uint64_t v121;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v122;
  int v123;
  int v124;
  uint64_t v125;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v126;
  int v127;
  int v128;
  uint64_t v129;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v130;
  int v131;
  int v132;
  unsigned int v133;
  uint64_t v134;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v135;
  int v136;
  int v137;
  uint64_t v138;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v139;
  int v140;
  int v141;
  uint64_t v142;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v143;
  int v144;
  int v145;
  uint64_t v146;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v147;
  int v148;
  int v149;
  uint64_t v150;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v151;
  int v152;
  int v153;
  uint64_t v154;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v155;
  int v156;
  int v157;
  uint64_t v158;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v159;
  int v160;
  int v161;
  uint64_t v162;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v163;
  int v164;
  int v165;
  uint64_t v166;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v167;
  int v168;
  int v169;
  uint64_t v170;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v171;
  int v172;
  int v173;
  uint64_t v174;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v175;
  int v176;
  int v177;
  uint64_t v178;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v179;
  int v180;
  int v181;
  uint64_t v182;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v183;
  int v184;
  int v185;
  uint64_t v186;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v187;
  int v188;
  int v189;
  uint64_t v190;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v191;
  int v192;
  int v193;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v194;
  int v195;
  uint64_t v196;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v197;
  int v198;
  int v199;
  uint64_t v200;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v201;
  int v202;
  int v203;
  uint64_t v204;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v205;
  int v206;
  int v207;
  uint64_t v208;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v209;
  int v210;
  int v211;
  uint64_t v212;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v213;
  int v214;
  int v215;
  uint64_t v216;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v217;
  int v218;
  int v219;
  uint64_t v220;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v221;
  int v222;
  int v223;
  uint64_t v224;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v225;
  int v226;
  int v227;
  uint64_t v228;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v229;
  int v230;
  int v231;
  uint64_t v232;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v233;
  int v234;
  int v235;
  uint64_t v236;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v237;
  int v238;
  int v239;
  uint64_t v240;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v241;
  unsigned int v242;
  int v243;
  int v244;

  v3 = *(_DWORD *)(a1 + 488);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102310D28 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100443A10(v5);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      v9 = *(_QWORD *)(qword_102310D28 + 16);
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100444914(v9);
    v11 = (int)v10;
    if (v10 >= 0x80)
      v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2);
    else
      v12 = 1;
    v4 = (v4 + v11 + v12 + 1);
    v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v13 = *(_QWORD *)(a1 + 24);
    if (!v13)
      v13 = *(_QWORD *)(qword_102310D28 + 24);
    v14 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10044575C(v13);
    v15 = (int)v14;
    if (v14 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v14, a2);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
    v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
    v17 = *(_QWORD *)(qword_102310D28 + 32);
  v18 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004B818(v17, a2);
  v19 = (int)v18;
  if (v18 >= 0x80)
    v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v18, a2);
  else
    v20 = 1;
  v4 = (v4 + v19 + v20 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_37:
  v21 = *(_QWORD *)(a1 + 40);
  if (!v21)
    v21 = *(_QWORD *)(qword_102310D28 + 40);
  v22 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004512A8(v21, a2);
  v23 = (int)v22;
  if (v22 >= 0x80)
    v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v22, a2);
  else
    v24 = 1;
  v4 = (v4 + v23 + v24 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_43:
  v25 = *(_QWORD *)(a1 + 48);
  if (!v25)
    v25 = *(_QWORD *)(qword_102310D28 + 48);
  v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100452318(v25, a2);
  v27 = (int)v26;
  if (v26 >= 0x80)
    v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
  else
    v28 = 1;
  v4 = (v4 + v27 + v28 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_55;
  }
LABEL_49:
  v29 = *(_QWORD *)(a1 + 56);
  if (!v29)
    v29 = *(_QWORD *)(qword_102310D28 + 56);
  v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100455BB0(v29, a2);
  v31 = (int)v30;
  if (v30 >= 0x80)
    v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
  else
    v32 = 1;
  v4 = (v4 + v31 + v32 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    v33 = *(_QWORD *)(a1 + 64);
    if (!v33)
      v33 = *(_QWORD *)(qword_102310D28 + 64);
    v34 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004BB94(v33);
    v35 = (int)v34;
    if (v34 >= 0x80)
      v36 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v34, a2);
    else
      v36 = 1;
    v4 = (v4 + v35 + v36 + 1);
    v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_119;
  if ((v3 & 0x100) != 0)
  {
    v37 = *(_QWORD *)(a1 + 72);
    if (!v37)
      v37 = *(_QWORD *)(qword_102310D28 + 72);
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004568D4(v37, a2);
    v39 = (int)v38;
    if (v38 >= 0x80)
      v40 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2);
    else
      v40 = 1;
    v4 = (v4 + v39 + v40 + 1);
    v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0)
        goto LABEL_65;
      goto LABEL_83;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v41 = *(_QWORD *)(a1 + 80);
  if (!v41)
    v41 = *(_QWORD *)(qword_102310D28 + 80);
  v42 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100457F64(v41, a2);
  v43 = (int)v42;
  if (v42 >= 0x80)
    v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v42, a2);
  else
    v44 = 1;
  v4 = (v4 + v43 + v44 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0)
      goto LABEL_66;
    goto LABEL_89;
  }
LABEL_83:
  v45 = *(_QWORD *)(a1 + 88);
  if (!v45)
    v45 = *(_QWORD *)(qword_102310D28 + 88);
  v46 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045ECB8(v45, a2);
  v47 = (int)v46;
  if (v46 >= 0x80)
    v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v46, a2);
  else
    v48 = 1;
  v4 = (v4 + v47 + v48 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0)
      goto LABEL_67;
    goto LABEL_95;
  }
LABEL_89:
  v49 = *(_QWORD *)(a1 + 96);
  if (!v49)
    v49 = *(_QWORD *)(qword_102310D28 + 96);
  v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045F608(v49, a2);
  v51 = (int)v50;
  if (v50 >= 0x80)
    v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
  else
    v52 = 1;
  v4 = (v4 + v51 + v52 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0)
      goto LABEL_68;
    goto LABEL_101;
  }
LABEL_95:
  v53 = *(_QWORD *)(a1 + 104);
  if (!v53)
    v53 = *(_QWORD *)(qword_102310D28 + 104);
  v54 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100DBA3AC(v53, a2);
  v55 = (int)v54;
  if (v54 >= 0x80)
    v56 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v54, a2);
  else
    v56 = 1;
  v4 = (v4 + v55 + v56 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0)
      goto LABEL_69;
    goto LABEL_107;
  }
LABEL_101:
  v57 = *(_QWORD *)(a1 + 112);
  if (!v57)
    v57 = *(_QWORD *)(qword_102310D28 + 112);
  v58 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100460A20(v57);
  v59 = (int)v58;
  if (v58 >= 0x80)
    v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v58, a2);
  else
    v60 = 1;
  v4 = (v4 + v59 + v60 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0)
      goto LABEL_119;
    goto LABEL_113;
  }
LABEL_107:
  v61 = *(_QWORD *)(a1 + 120);
  if (!v61)
    v61 = *(_QWORD *)(qword_102310D28 + 120);
  v62 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100460F34(v61);
  v63 = (int)v62;
  if (v62 >= 0x80)
    v64 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v62, a2);
  else
    v64 = 1;
  v4 = (v4 + v63 + v64 + 1);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    v65 = *(_QWORD *)(a1 + 128);
    if (!v65)
      v65 = *(_QWORD *)(qword_102310D28 + 128);
    v66 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100464414(v65, a2);
    v67 = (int)v66;
    if (v66 >= 0x80)
      v68 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v66, a2);
    else
      v68 = 1;
    v4 = (v4 + v67 + v68 + 2);
    v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_119:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_177;
  if ((v3 & 0x10000) != 0)
  {
    v69 = *(_QWORD *)(a1 + 136);
    if (!v69)
      v69 = *(_QWORD *)(qword_102310D28 + 136);
    v70 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100466700(v69, a2);
    v71 = (int)v70;
    if (v70 >= 0x80)
      v72 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v70, a2);
    else
      v72 = 1;
    v4 = (v4 + v71 + v72 + 2);
    v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0)
        goto LABEL_123;
      goto LABEL_141;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  v73 = *(_QWORD *)(a1 + 144);
  if (!v73)
    v73 = *(_QWORD *)(qword_102310D28 + 144);
  v74 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004B818(v73, a2);
  v75 = (int)v74;
  if (v74 >= 0x80)
    v76 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v74, a2);
  else
    v76 = 1;
  v4 = (v4 + v75 + v76 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0)
      goto LABEL_124;
    goto LABEL_147;
  }
LABEL_141:
  v77 = *(_QWORD *)(a1 + 152);
  if (!v77)
    v77 = *(_QWORD *)(qword_102310D28 + 152);
  v78 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100468FA8(v77, a2);
  v79 = (int)v78;
  if (v78 >= 0x80)
    v80 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v78, a2);
  else
    v80 = 1;
  v4 = (v4 + v79 + v80 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0)
      goto LABEL_125;
    goto LABEL_153;
  }
LABEL_147:
  v81 = *(_QWORD *)(a1 + 160);
  if (!v81)
    v81 = *(_QWORD *)(qword_102310D28 + 160);
  v82 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10046A79C(v81);
  v83 = (int)v82;
  if (v82 >= 0x80)
    v84 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v82, a2);
  else
    v84 = 1;
  v4 = (v4 + v83 + v84 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0)
      goto LABEL_126;
    goto LABEL_159;
  }
LABEL_153:
  v85 = *(_QWORD *)(a1 + 168);
  if (!v85)
    v85 = *(_QWORD *)(qword_102310D28 + 168);
  v86 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004591EC(v85, a2);
  v87 = (int)v86;
  if (v86 >= 0x80)
    v88 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v86, a2);
  else
    v88 = 1;
  v4 = (v4 + v87 + v88 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x200000) == 0)
  {
LABEL_126:
    if ((v3 & 0x400000) == 0)
      goto LABEL_127;
    goto LABEL_165;
  }
LABEL_159:
  v89 = *(_QWORD *)(a1 + 176);
  if (!v89)
    v89 = *(_QWORD *)(qword_102310D28 + 176);
  v90 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214740(v89, a2);
  v91 = (int)v90;
  if (v90 >= 0x80)
    v92 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v90, a2);
  else
    v92 = 1;
  v4 = (v4 + v91 + v92 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x400000) == 0)
  {
LABEL_127:
    if ((v3 & 0x800000) == 0)
      goto LABEL_177;
    goto LABEL_171;
  }
LABEL_165:
  v93 = *(_QWORD *)(a1 + 184);
  if (!v93)
    v93 = *(_QWORD *)(qword_102310D28 + 184);
  v94 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045A940(v93, a2);
  v95 = (int)v94;
  if (v94 >= 0x80)
    v96 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v94, a2);
  else
    v96 = 1;
  v4 = (v4 + v95 + v96 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x800000) != 0)
  {
LABEL_171:
    v97 = *(_QWORD *)(a1 + 192);
    if (!v97)
      v97 = *(_QWORD *)(qword_102310D28 + 192);
    v98 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045CC20(v97, a2);
    v99 = (int)v98;
    if (v98 >= 0x80)
      v100 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v98, a2);
    else
      v100 = 1;
    v4 = (v4 + v99 + v100 + 2);
    v3 = *(_DWORD *)(a1 + 488);
  }
LABEL_177:
  if (!HIBYTE(v3))
    goto LABEL_235;
  if ((v3 & 0x1000000) != 0)
  {
    v101 = *(_QWORD *)(a1 + 200);
    if (!v101)
      v101 = *(_QWORD *)(qword_102310D28 + 200);
    v102 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10045BB8C(v101, a2);
    v103 = (int)v102;
    if (v102 >= 0x80)
      v104 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v102, a2);
    else
      v104 = 1;
    v4 = (v4 + v103 + v104 + 2);
    v3 = *(_DWORD *)(a1 + 488);
    if ((v3 & 0x2000000) == 0)
    {
LABEL_180:
      if ((v3 & 0x4000000) == 0)
        goto LABEL_181;
      goto LABEL_199;
    }
  }
  else if ((v3 & 0x2000000) == 0)
  {
    goto LABEL_180;
  }
  v105 = *(_QWORD *)(a1 + 208);
  if (!v105)
    v105 = *(_QWORD *)(qword_102310D28 + 208);
  v106 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100466F6C(v105, a2);
  v107 = (int)v106;
  if (v106 >= 0x80)
    v108 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v106, a2);
  else
    v108 = 1;
  v4 = (v4 + v107 + v108 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x4000000) == 0)
  {
LABEL_181:
    if ((v3 & 0x8000000) == 0)
      goto LABEL_182;
    goto LABEL_205;
  }
LABEL_199:
  v109 = *(_QWORD *)(a1 + 216);
  if (!v109)
    v109 = *(_QWORD *)(qword_102310D28 + 216);
  v110 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004698FC(v109, a2);
  v111 = (int)v110;
  if (v110 >= 0x80)
    v112 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v110, a2);
  else
    v112 = 1;
  v4 = (v4 + v111 + v112 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x8000000) == 0)
  {
LABEL_182:
    if ((v3 & 0x10000000) == 0)
      goto LABEL_183;
    goto LABEL_211;
  }
LABEL_205:
  v113 = *(_QWORD *)(a1 + 224);
  if (!v113)
    v113 = *(_QWORD *)(qword_102310D28 + 224);
  v114 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C7BC(v113, a2);
  v115 = (int)v114;
  if (v114 >= 0x80)
    v116 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v114, a2);
  else
    v116 = 1;
  v4 = (v4 + v115 + v116 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x10000000) == 0)
  {
LABEL_183:
    if ((v3 & 0x20000000) == 0)
      goto LABEL_184;
    goto LABEL_217;
  }
LABEL_211:
  v117 = *(_QWORD *)(a1 + 232);
  if (!v117)
    v117 = *(_QWORD *)(qword_102310D28 + 232);
  v118 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10046F58C(v117, a2);
  v119 = (int)v118;
  if (v118 >= 0x80)
    v120 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v118, a2);
  else
    v120 = 1;
  v4 = (v4 + v119 + v120 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x20000000) == 0)
  {
LABEL_184:
    if ((v3 & 0x40000000) == 0)
      goto LABEL_185;
    goto LABEL_223;
  }
LABEL_217:
  v121 = *(_QWORD *)(a1 + 240);
  if (!v121)
    v121 = *(_QWORD *)(qword_102310D28 + 240);
  v122 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100472358(v121, a2);
  v123 = (int)v122;
  if (v122 >= 0x80)
    v124 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v122, a2);
  else
    v124 = 1;
  v4 = (v4 + v123 + v124 + 2);
  v3 = *(_DWORD *)(a1 + 488);
  if ((v3 & 0x40000000) == 0)
  {
LABEL_185:
    if ((v3 & 0x80000000) == 0)
      goto LABEL_235;
    goto LABEL_229;
  }
LABEL_223:
  v125 = *(_QWORD *)(a1 + 248);
  if (!v125)
    v125 = *(_QWORD *)(qword_102310D28 + 248);
  v126 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100473C74(v125, a2);
  v127 = (int)v126;
  if (v126 >= 0x80)
    v128 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v126, a2);
  else
    v128 = 1;
  v4 = (v4 + v127 + v128 + 2);
  if ((*(_DWORD *)(a1 + 488) & 0x80000000) != 0)
  {
LABEL_229:
    v129 = *(_QWORD *)(a1 + 256);
    if (!v129)
      v129 = *(_QWORD *)(qword_102310D28 + 256);
    v130 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1004541F0(v129, a2);
    v131 = (int)v130;
    if (v130 >= 0x80)
      v132 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v130, a2);
    else
      v132 = 1;
    v4 = (v4 + v131 + v132 + 2);
  }
LABEL_235:
  v133 = *(_DWORD *)(a1 + 492);
  if (!(_BYTE)v133)
    goto LABEL_293;
  if ((v133 & 1) != 0)
  {
    v134 = *(_QWORD *)(a1 + 264);
    if (!v134)
      v134 = *(_QWORD *)(qword_102310D28 + 264);
    v135 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100475560(v134, a2);
    v136 = (int)v135;
    if (v135 >= 0x80)
      v137 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v135, a2);
    else
      v137 = 1;
    v4 = (v4 + v136 + v137 + 2);
    v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 2) == 0)
    {
LABEL_238:
      if ((v133 & 4) == 0)
        goto LABEL_239;
      goto LABEL_257;
    }
  }
  else if ((v133 & 2) == 0)
  {
    goto LABEL_238;
  }
  v138 = *(_QWORD *)(a1 + 272);
  if (!v138)
    v138 = *(_QWORD *)(qword_102310D28 + 272);
  v139 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1013B41F0(v138, a2);
  v140 = (int)v139;
  if (v139 >= 0x80)
    v141 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v139, a2);
  else
    v141 = 1;
  v4 = (v4 + v140 + v141 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 4) == 0)
  {
LABEL_239:
    if ((v133 & 8) == 0)
      goto LABEL_240;
    goto LABEL_263;
  }
LABEL_257:
  v142 = *(_QWORD *)(a1 + 280);
  if (!v142)
    v142 = *(_QWORD *)(qword_102310D28 + 280);
  v143 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100475FB0(v142, a2);
  v144 = (int)v143;
  if (v143 >= 0x80)
    v145 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v143, a2);
  else
    v145 = 1;
  v4 = (v4 + v144 + v145 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 8) == 0)
  {
LABEL_240:
    if ((v133 & 0x10) == 0)
      goto LABEL_241;
    goto LABEL_269;
  }
LABEL_263:
  v146 = *(_QWORD *)(a1 + 288);
  if (!v146)
    v146 = *(_QWORD *)(qword_102310D28 + 288);
  v147 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100F4A864(v146, a2);
  v148 = (int)v147;
  if (v147 >= 0x80)
    v149 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v147, a2);
  else
    v149 = 1;
  v4 = (v4 + v148 + v149 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x10) == 0)
  {
LABEL_241:
    if ((v133 & 0x20) == 0)
      goto LABEL_242;
    goto LABEL_275;
  }
LABEL_269:
  v150 = *(_QWORD *)(a1 + 296);
  if (!v150)
    v150 = *(_QWORD *)(qword_102310D28 + 296);
  v151 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009F817C(v150, a2);
  v152 = (int)v151;
  if (v151 >= 0x80)
    v153 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v151, a2);
  else
    v153 = 1;
  v4 = (v4 + v152 + v153 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x20) == 0)
  {
LABEL_242:
    if ((v133 & 0x40) == 0)
      goto LABEL_243;
    goto LABEL_281;
  }
LABEL_275:
  v154 = *(_QWORD *)(a1 + 304);
  if (!v154)
    v154 = *(_QWORD *)(qword_102310D28 + 304);
  v155 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100BFA478(v154, a2);
  v156 = (int)v155;
  if (v155 >= 0x80)
    v157 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v155, a2);
  else
    v157 = 1;
  v4 = (v4 + v156 + v157 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x40) == 0)
  {
LABEL_243:
    if ((v133 & 0x80) == 0)
      goto LABEL_293;
    goto LABEL_287;
  }
LABEL_281:
  v158 = *(_QWORD *)(a1 + 312);
  if (!v158)
    v158 = *(_QWORD *)(qword_102310D28 + 312);
  v159 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10168D428(v158, a2);
  v160 = (int)v159;
  if (v159 >= 0x80)
    v161 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v159, a2);
  else
    v161 = 1;
  v4 = (v4 + v160 + v161 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x80) != 0)
  {
LABEL_287:
    v162 = *(_QWORD *)(a1 + 320);
    if (!v162)
      v162 = *(_QWORD *)(qword_102310D28 + 320);
    v163 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100ACCC58(v162, a2);
    v164 = (int)v163;
    if (v163 >= 0x80)
      v165 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v163, a2);
    else
      v165 = 1;
    v4 = (v4 + v164 + v165 + 2);
    v133 = *(_DWORD *)(a1 + 492);
  }
LABEL_293:
  if ((v133 & 0xFF00) == 0)
    goto LABEL_351;
  if ((v133 & 0x100) != 0)
  {
    v166 = *(_QWORD *)(a1 + 328);
    if (!v166)
      v166 = *(_QWORD *)(qword_102310D28 + 328);
    v167 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10020A690(v166, a2);
    v168 = (int)v167;
    if (v167 >= 0x80)
      v169 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v167, a2);
    else
      v169 = 1;
    v4 = (v4 + v168 + v169 + 2);
    v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x200) == 0)
    {
LABEL_296:
      if ((v133 & 0x400) == 0)
        goto LABEL_297;
      goto LABEL_315;
    }
  }
  else if ((v133 & 0x200) == 0)
  {
    goto LABEL_296;
  }
  v170 = *(_QWORD *)(a1 + 336);
  if (!v170)
    v170 = *(_QWORD *)(qword_102310D28 + 336);
  v171 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10065EAF4(v170, a2);
  v172 = (int)v171;
  if (v171 >= 0x80)
    v173 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v171, a2);
  else
    v173 = 1;
  v4 = (v4 + v172 + v173 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x400) == 0)
  {
LABEL_297:
    if ((v133 & 0x800) == 0)
      goto LABEL_298;
    goto LABEL_321;
  }
LABEL_315:
  v174 = *(_QWORD *)(a1 + 344);
  if (!v174)
    v174 = *(_QWORD *)(qword_102310D28 + 344);
  v175 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10133DACC(v174, a2);
  v176 = (int)v175;
  if (v175 >= 0x80)
    v177 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v175, a2);
  else
    v177 = 1;
  v4 = (v4 + v176 + v177 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x800) == 0)
  {
LABEL_298:
    if ((v133 & 0x1000) == 0)
      goto LABEL_299;
    goto LABEL_327;
  }
LABEL_321:
  v178 = *(_QWORD *)(a1 + 352);
  if (!v178)
    v178 = *(_QWORD *)(qword_102310D28 + 352);
  v179 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004BBF8(v178, a2);
  v180 = (int)v179;
  if (v179 >= 0x80)
    v181 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v179, a2);
  else
    v181 = 1;
  v4 = (v4 + v180 + v181 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x1000) == 0)
  {
LABEL_299:
    if ((v133 & 0x2000) == 0)
      goto LABEL_300;
    goto LABEL_333;
  }
LABEL_327:
  v182 = *(_QWORD *)(a1 + 360);
  if (!v182)
    v182 = *(_QWORD *)(qword_102310D28 + 360);
  v183 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A6538(v182, a2);
  v184 = (int)v183;
  if (v183 >= 0x80)
    v185 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v183, a2);
  else
    v185 = 1;
  v4 = (v4 + v184 + v185 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x2000) == 0)
  {
LABEL_300:
    if ((v133 & 0x4000) == 0)
      goto LABEL_301;
    goto LABEL_339;
  }
LABEL_333:
  v186 = *(_QWORD *)(a1 + 368);
  if (!v186)
    v186 = *(_QWORD *)(qword_102310D28 + 368);
  v187 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A6CF4(v186, a2);
  v188 = (int)v187;
  if (v187 >= 0x80)
    v189 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v187, a2);
  else
    v189 = 1;
  v4 = (v4 + v188 + v189 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x4000) == 0)
  {
LABEL_301:
    if ((v133 & 0x8000) == 0)
      goto LABEL_351;
    goto LABEL_345;
  }
LABEL_339:
  v190 = *(_QWORD *)(a1 + 376);
  if (!v190)
    v190 = *(_QWORD *)(qword_102310D28 + 376);
  v191 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A74E0(v190, a2);
  v192 = (int)v191;
  if (v191 >= 0x80)
    v193 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v191, a2);
  else
    v193 = 1;
  v4 = (v4 + v192 + v193 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x8000) != 0)
  {
LABEL_345:
    v194 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 480);
    if ((v194 & 0x80000000) != 0)
    {
      v195 = 10;
    }
    else if (v194 >= 0x80)
    {
      v195 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v194, a2);
      v133 = *(_DWORD *)(a1 + 492);
    }
    else
    {
      v195 = 1;
    }
    v4 = (v4 + v195 + 2);
  }
LABEL_351:
  if ((v133 & 0xFF0000) == 0)
    goto LABEL_409;
  if ((v133 & 0x10000) != 0)
  {
    v196 = *(_QWORD *)(a1 + 384);
    if (!v196)
      v196 = *(_QWORD *)(qword_102310D28 + 384);
    v197 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A7B64(v196, a2);
    v198 = (int)v197;
    if (v197 >= 0x80)
      v199 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v197, a2);
    else
      v199 = 1;
    v4 = (v4 + v198 + v199 + 2);
    v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x20000) == 0)
    {
LABEL_354:
      if ((v133 & 0x40000) == 0)
        goto LABEL_355;
      goto LABEL_373;
    }
  }
  else if ((v133 & 0x20000) == 0)
  {
    goto LABEL_354;
  }
  v200 = *(_QWORD *)(a1 + 392);
  if (!v200)
    v200 = *(_QWORD *)(qword_102310D28 + 392);
  v201 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A81B0(v200, a2);
  v202 = (int)v201;
  if (v201 >= 0x80)
    v203 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v201, a2);
  else
    v203 = 1;
  v4 = (v4 + v202 + v203 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x40000) == 0)
  {
LABEL_355:
    if ((v133 & 0x80000) == 0)
      goto LABEL_356;
    goto LABEL_379;
  }
LABEL_373:
  v204 = *(_QWORD *)(a1 + 400);
  if (!v204)
    v204 = *(_QWORD *)(qword_102310D28 + 400);
  v205 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A8FA4(v204, a2);
  v206 = (int)v205;
  if (v205 >= 0x80)
    v207 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v205, a2);
  else
    v207 = 1;
  v4 = (v4 + v206 + v207 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x80000) == 0)
  {
LABEL_356:
    if ((v133 & 0x100000) == 0)
      goto LABEL_357;
    goto LABEL_385;
  }
LABEL_379:
  v208 = *(_QWORD *)(a1 + 408);
  if (!v208)
    v208 = *(_QWORD *)(qword_102310D28 + 408);
  v209 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A9790(v208, a2);
  v210 = (int)v209;
  if (v209 >= 0x80)
    v211 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v209, a2);
  else
    v211 = 1;
  v4 = (v4 + v210 + v211 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x100000) == 0)
  {
LABEL_357:
    if ((v133 & 0x200000) == 0)
      goto LABEL_358;
    goto LABEL_391;
  }
LABEL_385:
  v212 = *(_QWORD *)(a1 + 416);
  if (!v212)
    v212 = *(_QWORD *)(qword_102310D28 + 416);
  v213 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009A9EBC(v212, a2);
  v214 = (int)v213;
  if (v213 >= 0x80)
    v215 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v213, a2);
  else
    v215 = 1;
  v4 = (v4 + v214 + v215 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x200000) == 0)
  {
LABEL_358:
    if ((v133 & 0x400000) == 0)
      goto LABEL_359;
    goto LABEL_397;
  }
LABEL_391:
  v216 = *(_QWORD *)(a1 + 424);
  if (!v216)
    v216 = *(_QWORD *)(qword_102310D28 + 424);
  v217 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009AA994(v216, a2);
  v218 = (int)v217;
  if (v217 >= 0x80)
    v219 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v217, a2);
  else
    v219 = 1;
  v4 = (v4 + v218 + v219 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x400000) == 0)
  {
LABEL_359:
    if ((v133 & 0x800000) == 0)
      goto LABEL_409;
    goto LABEL_403;
  }
LABEL_397:
  v220 = *(_QWORD *)(a1 + 432);
  if (!v220)
    v220 = *(_QWORD *)(qword_102310D28 + 432);
  v221 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009AB208(v220, a2);
  v222 = (int)v221;
  if (v221 >= 0x80)
    v223 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v221, a2);
  else
    v223 = 1;
  v4 = (v4 + v222 + v223 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x800000) != 0)
  {
LABEL_403:
    v224 = *(_QWORD *)(a1 + 440);
    if (!v224)
      v224 = *(_QWORD *)(qword_102310D28 + 440);
    v225 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009AB780(v224, a2);
    v226 = (int)v225;
    if (v225 >= 0x80)
      v227 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v225, a2);
    else
      v227 = 1;
    v4 = (v4 + v226 + v227 + 2);
    v133 = *(_DWORD *)(a1 + 492);
  }
LABEL_409:
  if (!HIBYTE(v133))
    goto LABEL_439;
  if ((v133 & 0x1000000) != 0)
  {
    v228 = *(_QWORD *)(a1 + 448);
    if (!v228)
      v228 = *(_QWORD *)(qword_102310D28 + 448);
    v229 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009ABD78(v228, a2);
    v230 = (int)v229;
    if (v229 >= 0x80)
      v231 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v229, a2);
    else
      v231 = 1;
    v4 = (v4 + v230 + v231 + 2);
    v133 = *(_DWORD *)(a1 + 492);
    if ((v133 & 0x2000000) == 0)
    {
LABEL_412:
      if ((v133 & 0x4000000) == 0)
        goto LABEL_413;
      goto LABEL_427;
    }
  }
  else if ((v133 & 0x2000000) == 0)
  {
    goto LABEL_412;
  }
  v232 = *(_QWORD *)(a1 + 456);
  if (!v232)
    v232 = *(_QWORD *)(qword_102310D28 + 456);
  v233 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009AC420(v232, a2);
  v234 = (int)v233;
  if (v233 >= 0x80)
    v235 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v233, a2);
  else
    v235 = 1;
  v4 = (v4 + v234 + v235 + 2);
  v133 = *(_DWORD *)(a1 + 492);
  if ((v133 & 0x4000000) == 0)
  {
LABEL_413:
    if ((v133 & 0x8000000) == 0)
      goto LABEL_439;
    goto LABEL_433;
  }
LABEL_427:
  v236 = *(_QWORD *)(a1 + 464);
  if (!v236)
    v236 = *(_QWORD *)(qword_102310D28 + 464);
  v237 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009ACB9C(v236, a2);
  v238 = (int)v237;
  if (v237 >= 0x80)
    v239 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v237, a2);
  else
    v239 = 1;
  v4 = (v4 + v238 + v239 + 2);
  if ((*(_DWORD *)(a1 + 492) & 0x8000000) != 0)
  {
LABEL_433:
    v240 = *(_QWORD *)(a1 + 472);
    if (!v240)
      v240 = *(_QWORD *)(qword_102310D28 + 472);
    v241 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1009AD324(v240, a2);
    v243 = (int)v241;
    if (v241 >= 0x80)
      v244 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v241, v242);
    else
      v244 = 1;
    v4 = (v4 + v243 + v244 + 2);
  }
LABEL_439:
  *(_DWORD *)(a1 + 484) = v4;
  return v4;
}

uint64_t sub_10004B818(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  unsigned int v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  uint64_t v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v35;
  int v36;
  int v37;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v38;
  int v39;
  uint64_t v40;
  int v41;
  int v42;

  v3 = *(_DWORD *)(a1 + 100);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_55;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_21;
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102310660 + 8);
  v7 = *(unsigned __int8 *)(v6 + 36);
  if (*(_BYTE *)(v6 + 36))
  {
    v8 = (v7 << 31 >> 31) & 9;
    if ((v7 & 2) != 0)
      v8 += 9;
    if ((v7 & 4) != 0)
      v7 = v8 + 9;
    else
      v7 = v8;
  }
  *(_DWORD *)(v6 + 32) = v7;
  v4 = v7 + 2;
  v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 2) != 0)
  {
LABEL_15:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 32);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 10;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      v10 = 1;
    }
    v4 += v10 + 1;
  }
LABEL_21:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_23;
LABEL_31:
    v15 = *(_QWORD *)(a1 + 24);
    if (!v15)
      v15 = *(_QWORD *)(qword_102310660 + 24);
    v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004CD84(v15, a2);
    v17 = (int)v16;
    if (v16 >= 0x80)
      v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
    else
      v18 = 1;
    v4 += v17 + v18 + 1;
    v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x10) == 0)
      goto LABEL_43;
    goto LABEL_37;
  }
  v11 = *(_QWORD *)(a1 + 16);
  if (!v11)
    v11 = *(_QWORD *)(qword_102310660 + 16);
  v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004CA60(v11, a2);
  v13 = (int)v12;
  if (v12 >= 0x80)
    v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
  else
    v14 = 1;
  v4 += v13 + v14 + 1;
  v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 8) != 0)
    goto LABEL_31;
LABEL_23:
  if ((v3 & 0x10) != 0)
  {
LABEL_37:
    v19 = *(_QWORD *)(a1 + 40);
    if (!v19)
      v19 = *(_QWORD *)(qword_102310660 + 40);
    v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C9EC(v19, a2);
    v21 = (int)v20;
    if (v20 >= 0x80)
      v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
    else
      v22 = 1;
    v4 += v21 + v22 + 1;
    v3 = *(_DWORD *)(a1 + 100);
  }
LABEL_43:
  v23 = v4 + 2;
  if ((v3 & 0x20) == 0)
    v23 = v4;
  if ((v3 & 0x40) != 0)
    v5 = v23 + 9;
  else
    v5 = v23;
  if ((v3 & 0x80) != 0)
  {
    v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 72);
    if ((v24 & 0x80000000) != 0)
    {
      v25 = 10;
    }
    else if (v24 >= 0x80)
    {
      v25 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
      v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      v25 = 1;
    }
    v5 = (v5 + v25 + 1);
  }
LABEL_55:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_97;
  if ((v3 & 0x100) != 0)
  {
    v26 = *(_QWORD *)(a1 + 56);
    if (!v26)
      v26 = *(_QWORD *)(qword_102310660 + 56);
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004D4B8(v26);
    v28 = (int)v27;
    if (v27 >= 0x80)
      v29 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2);
    else
      v29 = 1;
    v5 = (v5 + v28 + v29 + 1);
    v3 = *(_DWORD *)(a1 + 100);
    if ((v3 & 0x200) == 0)
    {
LABEL_58:
      if ((v3 & 0x400) == 0)
        goto LABEL_59;
      goto LABEL_76;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_58;
  }
  v30 = *(_QWORD *)(a1 + 64);
  if (!v30)
    v30 = *(_QWORD *)(qword_102310660 + 64);
  v31 = *(unsigned __int8 *)(v30 + 28);
  v32 = (v31 << 31 >> 31) & 9;
  if ((v31 & 2) != 0)
    v32 += 9;
  if (*(_BYTE *)(v30 + 28))
    v33 = v32;
  else
    v33 = 0;
  *(_DWORD *)(v30 + 24) = v33;
  v5 = (v5 + v33 + 2);
  v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x400) == 0)
  {
LABEL_59:
    if ((v3 & 0x800) == 0)
      goto LABEL_60;
LABEL_82:
    v38 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 76);
    if ((v38 & 0x80000000) != 0)
    {
      v39 = 11;
    }
    else if (v38 >= 0x80)
    {
      v39 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v38, a2) + 1;
      v3 = *(_DWORD *)(a1 + 100);
    }
    else
    {
      v39 = 2;
    }
    v5 = (v39 + v5);
    if ((v3 & 0x1000) == 0)
      goto LABEL_97;
    goto LABEL_88;
  }
LABEL_76:
  v34 = *(_QWORD *)(a1 + 80);
  if (!v34)
    v34 = *(_QWORD *)(qword_102310660 + 80);
  v35 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_1002146A4(v34, a2);
  v36 = (int)v35;
  if (v35 >= 0x80)
    v37 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v35, a2);
  else
    v37 = 1;
  v5 = (v5 + v36 + v37 + 1);
  v3 = *(_DWORD *)(a1 + 100);
  if ((v3 & 0x800) != 0)
    goto LABEL_82;
LABEL_60:
  if ((v3 & 0x1000) == 0)
    goto LABEL_97;
LABEL_88:
  v40 = *(_QWORD *)(a1 + 88);
  if (!v40)
    v40 = *(_QWORD *)(qword_102310660 + 88);
  v41 = *(unsigned __int8 *)(v40 + 36);
  if (*(_BYTE *)(v40 + 36))
  {
    v42 = (v41 << 31 >> 31) & 9;
    if ((v41 & 2) != 0)
      v42 += 9;
    if ((v41 & 4) != 0)
      v41 = v42 + 9;
    else
      v41 = v42;
  }
  *(_DWORD *)(v40 + 32) = v41;
  v5 = (v5 + v41 + 2);
LABEL_97:
  *(_DWORD *)(a1 + 96) = v5;
  return v5;
}

uint64_t sub_10004BB94(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;

  if ((*(_BYTE *)(a1 + 20) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 8);
    if (!v2)
      v2 = *(_QWORD *)(qword_1023106D0 + 8);
    v3 = *(unsigned __int8 *)(v2 + 36);
    if (*(_BYTE *)(v2 + 36))
    {
      v4 = (v3 << 31 >> 31) & 9;
      if ((v3 & 2) != 0)
        v4 += 9;
      if ((v3 & 4) != 0)
        v3 = v4 + 9;
      else
        v3 = v4;
    }
    *(_DWORD *)(v2 + 32) = v3;
    v1 = (v3 + 2);
  }
  else
  {
    v1 = 0;
  }
  *(_DWORD *)(a1 + 16) = v1;
  return v1;
}

uint64_t sub_10004BBF8(uint64_t a1, unint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  int v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  uint64_t v11;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v12;
  int v13;
  int v14;
  uint64_t v15;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v16;
  int v17;
  int v18;
  uint64_t v19;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v20;
  int v21;
  int v22;
  uint64_t v23;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v24;
  int v25;
  int v26;
  uint64_t v27;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v28;
  int v29;
  int v30;
  uint64_t v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  int v34;
  uint64_t v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  int v38;
  uint64_t v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  uint64_t v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  int v45;
  int v46;
  uint64_t v47;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v48;
  int v49;
  int v50;
  uint64_t v51;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v52;
  int v53;
  int v54;
  uint64_t v55;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v56;
  int v57;
  int v58;
  uint64_t v59;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v60;
  int v61;
  int v62;
  uint64_t v63;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v64;
  int v65;
  int v66;
  uint64_t v67;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v68;
  int v69;
  int v70;
  uint64_t v71;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v72;
  int v73;
  int v74;
  uint64_t v75;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v76;
  int v77;
  int v78;
  uint64_t v79;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v80;
  int v81;
  int v82;
  uint64_t v83;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v84;
  int v85;
  int v86;
  uint64_t v87;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v88;
  unsigned int v89;
  int v90;
  int v91;

  v3 = *(_DWORD *)(a1 + 184);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_61;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v5 = *(_QWORD *)(a1 + 8);
  if (!v5)
    v5 = *(_QWORD *)(qword_102311890 + 8);
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C8BC(v5);
  v7 = (int)v6;
  if (v6 >= 0x80)
    v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
  else
    v8 = 1;
  v4 = (v7 + v8 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 176);
    if ((v9 & 0x80000000) != 0)
    {
      v10 = 10;
    }
    else if (v9 >= 0x80)
    {
      v10 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
      v3 = *(_DWORD *)(a1 + 184);
    }
    else
    {
      v10 = 1;
    }
    v4 = (v4 + v10 + 1);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (!v11)
      v11 = *(_QWORD *)(qword_102311890 + 16);
    v12 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EA1640(v11, a2);
    v13 = (int)v12;
    if (v12 >= 0x80)
      v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v12, a2);
    else
      v14 = 1;
    v4 = (v4 + v13 + v14 + 1);
    v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 8) == 0)
    {
LABEL_20:
      if ((v3 & 0x10) == 0)
        goto LABEL_21;
      goto LABEL_37;
    }
  }
  else if ((v3 & 8) == 0)
  {
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(a1 + 24);
  if (!v15)
    v15 = *(_QWORD *)(qword_102311890 + 24);
  v16 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EA1640(v15, a2);
  v17 = (int)v16;
  if (v16 >= 0x80)
    v18 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v16, a2);
  else
    v18 = 1;
  v4 = (v4 + v17 + v18 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x10) == 0)
  {
LABEL_21:
    if ((v3 & 0x20) == 0)
      goto LABEL_22;
    goto LABEL_43;
  }
LABEL_37:
  v19 = *(_QWORD *)(a1 + 32);
  if (!v19)
    v19 = *(_QWORD *)(qword_102311890 + 32);
  v20 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E92990(v19, a2);
  v21 = (int)v20;
  if (v20 >= 0x80)
    v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v20, a2);
  else
    v22 = 1;
  v4 = (v4 + v21 + v22 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x20) == 0)
  {
LABEL_22:
    if ((v3 & 0x40) == 0)
      goto LABEL_23;
    goto LABEL_49;
  }
LABEL_43:
  v23 = *(_QWORD *)(a1 + 40);
  if (!v23)
    v23 = *(_QWORD *)(qword_102311890 + 40);
  v24 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E93DF4(v23, a2);
  v25 = (int)v24;
  if (v24 >= 0x80)
    v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v24, a2);
  else
    v26 = 1;
  v4 = (v4 + v25 + v26 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40) == 0)
  {
LABEL_23:
    if ((v3 & 0x80) == 0)
      goto LABEL_61;
    goto LABEL_55;
  }
LABEL_49:
  v27 = *(_QWORD *)(a1 + 48);
  if (!v27)
    v27 = *(_QWORD *)(qword_102311890 + 48);
  v28 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E947FC(v27, a2);
  v29 = (int)v28;
  if (v28 >= 0x80)
    v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v28, a2);
  else
    v30 = 1;
  v4 = (v4 + v29 + v30 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80) != 0)
  {
LABEL_55:
    v31 = *(_QWORD *)(a1 + 56);
    if (!v31)
      v31 = *(_QWORD *)(qword_102311890 + 56);
    v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E95AC4(v31, a2);
    v33 = (int)v32;
    if (v32 >= 0x80)
      v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2);
    else
      v34 = 1;
    v4 = (v4 + v33 + v34 + 1);
    v3 = *(_DWORD *)(a1 + 184);
  }
LABEL_61:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_119;
  if ((v3 & 0x100) != 0)
  {
    v35 = *(_QWORD *)(a1 + 64);
    if (!v35)
      v35 = *(_QWORD *)(qword_102311890 + 64);
    v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E964CC(v35, a2);
    v37 = (int)v36;
    if (v36 >= 0x80)
      v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2);
    else
      v38 = 1;
    v4 = (v4 + v37 + v38 + 1);
    v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x200) == 0)
    {
LABEL_64:
      if ((v3 & 0x400) == 0)
        goto LABEL_65;
      goto LABEL_83;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_64;
  }
  v39 = *(_QWORD *)(a1 + 72);
  if (!v39)
    v39 = *(_QWORD *)(qword_102311890 + 72);
  v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E96E78(v39, a2);
  v41 = (int)v40;
  if (v40 >= 0x80)
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
  else
    v42 = 1;
  v4 = (v4 + v41 + v42 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x400) == 0)
  {
LABEL_65:
    if ((v3 & 0x800) == 0)
      goto LABEL_66;
    goto LABEL_89;
  }
LABEL_83:
  v43 = *(_QWORD *)(a1 + 80);
  if (!v43)
    v43 = *(_QWORD *)(qword_102311890 + 80);
  v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9780C(v43, a2);
  v45 = (int)v44;
  if (v44 >= 0x80)
    v46 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44, a2);
  else
    v46 = 1;
  v4 = (v4 + v45 + v46 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x800) == 0)
  {
LABEL_66:
    if ((v3 & 0x1000) == 0)
      goto LABEL_67;
    goto LABEL_95;
  }
LABEL_89:
  v47 = *(_QWORD *)(a1 + 88);
  if (!v47)
    v47 = *(_QWORD *)(qword_102311890 + 88);
  v48 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E98378(v47, a2);
  v49 = (int)v48;
  if (v48 >= 0x80)
    v50 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v48, a2);
  else
    v50 = 1;
  v4 = (v4 + v49 + v50 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x1000) == 0)
  {
LABEL_67:
    if ((v3 & 0x2000) == 0)
      goto LABEL_68;
    goto LABEL_101;
  }
LABEL_95:
  v51 = *(_QWORD *)(a1 + 96);
  if (!v51)
    v51 = *(_QWORD *)(qword_102311890 + 96);
  v52 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E98EFC(v51, a2);
  v53 = (int)v52;
  if (v52 >= 0x80)
    v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v52, a2);
  else
    v54 = 1;
  v4 = (v4 + v53 + v54 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x2000) == 0)
  {
LABEL_68:
    if ((v3 & 0x4000) == 0)
      goto LABEL_69;
    goto LABEL_107;
  }
LABEL_101:
  v55 = *(_QWORD *)(a1 + 104);
  if (!v55)
    v55 = *(_QWORD *)(qword_102311890 + 104);
  v56 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E99A80(v55, a2);
  v57 = (int)v56;
  if (v56 >= 0x80)
    v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v56, a2);
  else
    v58 = 1;
  v4 = (v4 + v57 + v58 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x4000) == 0)
  {
LABEL_69:
    if ((v3 & 0x8000) == 0)
      goto LABEL_119;
    goto LABEL_113;
  }
LABEL_107:
  v59 = *(_QWORD *)(a1 + 112);
  if (!v59)
    v59 = *(_QWORD *)(qword_102311890 + 112);
  v60 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E99F38(v59, a2);
  v61 = (int)v60;
  if (v60 >= 0x80)
    v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v60, a2);
  else
    v62 = 1;
  v4 = (v4 + v61 + v62 + 1);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x8000) != 0)
  {
LABEL_113:
    v63 = *(_QWORD *)(a1 + 120);
    if (!v63)
      v63 = *(_QWORD *)(qword_102311890 + 120);
    v64 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9A9D0(v63, a2);
    v65 = (int)v64;
    if (v64 >= 0x80)
      v66 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v64, a2);
    else
      v66 = 1;
    v4 = (v4 + v65 + v66 + 2);
    v3 = *(_DWORD *)(a1 + 184);
  }
LABEL_119:
  if ((v3 & 0xFF0000) == 0)
    goto LABEL_163;
  if ((v3 & 0x10000) != 0)
  {
    v67 = *(_QWORD *)(a1 + 128);
    if (!v67)
      v67 = *(_QWORD *)(qword_102311890 + 128);
    v68 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C2B8(v67, a2);
    v69 = (int)v68;
    if (v68 >= 0x80)
      v70 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v68, a2);
    else
      v70 = 1;
    v4 = (v4 + v69 + v70 + 2);
    v3 = *(_DWORD *)(a1 + 184);
    if ((v3 & 0x20000) == 0)
    {
LABEL_122:
      if ((v3 & 0x40000) == 0)
        goto LABEL_123;
      goto LABEL_139;
    }
  }
  else if ((v3 & 0x20000) == 0)
  {
    goto LABEL_122;
  }
  v71 = *(_QWORD *)(a1 + 136);
  if (!v71)
    v71 = *(_QWORD *)(qword_102311890 + 136);
  v72 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9DFC4(v71, a2);
  v73 = (int)v72;
  if (v72 >= 0x80)
    v74 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v72, a2);
  else
    v74 = 1;
  v4 = (v4 + v73 + v74 + 2);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x40000) == 0)
  {
LABEL_123:
    if ((v3 & 0x80000) == 0)
      goto LABEL_124;
    goto LABEL_145;
  }
LABEL_139:
  v75 = *(_QWORD *)(a1 + 144);
  if (!v75)
    v75 = *(_QWORD *)(qword_102311890 + 144);
  v76 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9EB48(v75, a2);
  v77 = (int)v76;
  if (v76 >= 0x80)
    v78 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v76, a2);
  else
    v78 = 1;
  v4 = (v4 + v77 + v78 + 2);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x80000) == 0)
  {
LABEL_124:
    if ((v3 & 0x100000) == 0)
      goto LABEL_125;
    goto LABEL_151;
  }
LABEL_145:
  v79 = *(_QWORD *)(a1 + 152);
  if (!v79)
    v79 = *(_QWORD *)(qword_102311890 + 152);
  v80 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9F7BC(v79, a2);
  v81 = (int)v80;
  if (v80 >= 0x80)
    v82 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v80, a2);
  else
    v82 = 1;
  v4 = (v4 + v81 + v82 + 2);
  v3 = *(_DWORD *)(a1 + 184);
  if ((v3 & 0x100000) == 0)
  {
LABEL_125:
    if ((v3 & 0x200000) == 0)
      goto LABEL_163;
    goto LABEL_157;
  }
LABEL_151:
  v83 = *(_QWORD *)(a1 + 160);
  if (!v83)
    v83 = *(_QWORD *)(qword_102311890 + 160);
  v84 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EA05F0(v83, a2);
  v85 = (int)v84;
  if (v84 >= 0x80)
    v86 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v84, a2);
  else
    v86 = 1;
  v4 = (v4 + v85 + v86 + 2);
  if ((*(_DWORD *)(a1 + 184) & 0x200000) != 0)
  {
LABEL_157:
    v87 = *(_QWORD *)(a1 + 168);
    if (!v87)
      v87 = *(_QWORD *)(qword_102311890 + 168);
    v88 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100EA1174(v87, a2);
    v90 = (int)v88;
    if (v88 >= 0x80)
      v91 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v88, v89);
    else
      v91 = 1;
    v4 = (v4 + v90 + v91 + 2);
  }
LABEL_163:
  *(_DWORD *)(a1 + 180) = v4;
  return v4;
}

uint64_t sub_10004C2B8(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v9;
  int v10;
  int v11;
  unsigned int *v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  unsigned int v14;
  int v15;
  int v16;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_34;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v5 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
    if ((v5 & 0x80000000) != 0)
    {
      v4 = 11;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else if (v5 >= 0x80)
    {
      v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v5, a2) + 1;
      v3 = *(_DWORD *)(a1 + 36);
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
    else
    {
      v4 = 2;
      if ((v3 & 2) == 0)
        goto LABEL_19;
    }
  }
  else
  {
    v4 = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_19;
  }
  v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
  if ((v6 & 0x80000000) != 0)
  {
    v7 = 11;
  }
  else if (v6 >= 0x80)
  {
    v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v7 = 2;
  }
  v4 = (v7 + v4);
LABEL_19:
  if ((v3 & 4) == 0)
  {
    if ((v3 & 8) == 0)
      goto LABEL_34;
    goto LABEL_28;
  }
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    v8 = *(_QWORD *)(qword_102311820 + 16);
  v9 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C400(v8, a2);
  v10 = (int)v9;
  if (v9 >= 0x80)
    v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v9, a2);
  else
    v11 = 1;
  v4 = (v4 + v10 + v11 + 1);
  if ((*(_DWORD *)(a1 + 36) & 8) != 0)
  {
LABEL_28:
    v12 = *(unsigned int **)(a1 + 24);
    if (!v12)
      v12 = *(unsigned int **)(qword_102311820 + 24);
    v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100E9CC20(v12, a2);
    v15 = (int)v13;
    if (v13 >= 0x80)
      v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, v14);
    else
      v16 = 1;
    v4 = (v4 + v15 + v16 + 1);
  }
LABEL_34:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

uint64_t sub_10004C400(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  int v9;
  uint64_t v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  int v13;
  uint64_t v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  int v17;
  uint64_t v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  int v21;
  unsigned int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  uint64_t v25;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v26;
  int v27;
  int v28;
  uint64_t v29;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v30;
  int v31;
  int v32;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v33;
  int v34;
  uint64_t v35;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v36;
  int v37;
  int v38;
  uint64_t v39;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v40;
  int v41;
  int v42;
  uint64_t v43;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v44;
  unsigned int v45;
  int v46;
  int v47;
  uint64_t v48;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v49;
  unsigned int v50;
  int v51;
  int v52;

  v3 = *(_DWORD *)(a1 + 112);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_52;
  }
  if ((v3 & 1) == 0)
  {
    v4 = 0;
    if ((v3 & 2) == 0)
      goto LABEL_18;
    goto LABEL_12;
  }
  v6 = *(_QWORD *)(a1 + 8);
  if (!v6)
    v6 = *(_QWORD *)(qword_102311828 + 8);
  v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004CA60(v6, a2);
  v8 = (int)v7;
  if (v7 >= 0x80)
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
  else
    v9 = 1;
  v4 = v8 + v9 + 1;
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 2) != 0)
  {
LABEL_12:
    v10 = *(_QWORD *)(a1 + 16);
    if (!v10)
      v10 = *(_QWORD *)(qword_102311828 + 16);
    v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004CD84(v10, a2);
    v12 = (int)v11;
    if (v11 >= 0x80)
      v13 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
    else
      v13 = 1;
    v4 += v12 + v13 + 1;
    v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_18:
  if ((v3 & 4) != 0)
  {
    v14 = *(_QWORD *)(a1 + 24);
    if (!v14)
      v14 = *(_QWORD *)(qword_102311828 + 24);
    v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10044ED40(v14, a2);
    v16 = (int)v15;
    if (v15 >= 0x80)
      v17 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
    else
      v17 = 1;
    v4 += v16 + v17 + 1;
    v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 8) == 0)
      goto LABEL_33;
    goto LABEL_27;
  }
  if ((v3 & 8) != 0)
  {
LABEL_27:
    v18 = *(_QWORD *)(a1 + 32);
    if (!v18)
      v18 = *(_QWORD *)(qword_102311828 + 32);
    v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C9EC(v18, a2);
    v20 = (int)v19;
    if (v19 >= 0x80)
      v21 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2);
    else
      v21 = 1;
    v4 += v20 + v21 + 1;
    v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_33:
  v22 = v4 + 2;
  if ((v3 & 0x10) == 0)
    v22 = v4;
  if ((v3 & 0x20) != 0)
    v5 = v22 + 9;
  else
    v5 = v22;
  if ((v3 & 0x40) != 0)
  {
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
    if ((v23 & 0x80000000) != 0)
    {
      v24 = 10;
    }
    else if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2);
      v3 = *(_DWORD *)(a1 + 112);
    }
    else
    {
      v24 = 1;
    }
    v5 = (v5 + v24 + 1);
  }
  if ((v3 & 0x80) != 0)
  {
    v25 = *(_QWORD *)(a1 + 56);
    if (!v25)
      v25 = *(_QWORD *)(qword_102311828 + 56);
    v26 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004D4B8(v25);
    v27 = (int)v26;
    if (v26 >= 0x80)
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v26, a2);
    else
      v28 = 1;
    v5 = (v5 + v27 + v28 + 1);
    v3 = *(_DWORD *)(a1 + 112);
  }
LABEL_52:
  if ((v3 & 0xFF00) == 0)
    goto LABEL_96;
  if ((v3 & 0x100) != 0)
  {
    v29 = *(_QWORD *)(a1 + 64);
    if (!v29)
      v29 = *(_QWORD *)(qword_102311828 + 64);
    v30 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100214C04(v29);
    v31 = (int)v30;
    if (v30 >= 0x80)
      v32 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v30, a2);
    else
      v32 = 1;
    v5 = (v5 + v31 + v32 + 1);
    v3 = *(_DWORD *)(a1 + 112);
    if ((v3 & 0x200) == 0)
    {
LABEL_55:
      if ((v3 & 0x400) == 0)
        goto LABEL_56;
      goto LABEL_72;
    }
  }
  else if ((v3 & 0x200) == 0)
  {
    goto LABEL_55;
  }
  v33 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 104);
  if ((v33 & 0x80000000) != 0)
  {
    v34 = 11;
  }
  else if (v33 >= 0x80)
  {
    v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v33, a2) + 1;
    v3 = *(_DWORD *)(a1 + 112);
  }
  else
  {
    v34 = 2;
  }
  v5 = (v34 + v5);
  if ((v3 & 0x400) == 0)
  {
LABEL_56:
    if ((v3 & 0x800) == 0)
      goto LABEL_57;
    goto LABEL_78;
  }
LABEL_72:
  v35 = *(_QWORD *)(a1 + 72);
  if (!v35)
    v35 = *(_QWORD *)(qword_102311828 + 72);
  v36 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10021466C(v35);
  v37 = (int)v36;
  if (v36 >= 0x80)
    v38 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v36, a2);
  else
    v38 = 1;
  v5 = (v5 + v37 + v38 + 1);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x800) == 0)
  {
LABEL_57:
    if ((v3 & 0x1000) == 0)
      goto LABEL_58;
    goto LABEL_84;
  }
LABEL_78:
  v39 = *(_QWORD *)(a1 + 80);
  if (!v39)
    v39 = *(_QWORD *)(qword_102311828 + 80);
  v40 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C7BC(v39, a2);
  v41 = (int)v40;
  if (v40 >= 0x80)
    v42 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v40, a2);
  else
    v42 = 1;
  v5 = (v5 + v41 + v42 + 1);
  v3 = *(_DWORD *)(a1 + 112);
  if ((v3 & 0x1000) == 0)
  {
LABEL_58:
    if ((v3 & 0x2000) == 0)
      goto LABEL_96;
    goto LABEL_90;
  }
LABEL_84:
  v43 = *(_QWORD *)(a1 + 88);
  if (!v43)
    v43 = *(_QWORD *)(qword_102311828 + 88);
  v44 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C910(v43, a2);
  v46 = (int)v44;
  if (v44 >= 0x80)
    v47 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v44, v45);
  else
    v47 = 1;
  v5 = (v5 + v46 + v47 + 1);
  if ((*(_DWORD *)(a1 + 112) & 0x2000) != 0)
  {
LABEL_90:
    v48 = *(_QWORD *)(a1 + 96);
    if (!v48)
      v48 = *(_QWORD *)(qword_102311828 + 96);
    v49 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004C8F4(v48);
    v51 = (int)v49;
    if (v49 >= 0x80)
      v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v49, v50);
    else
      v52 = 1;
    v5 = (v5 + v51 + v52 + 1);
  }
LABEL_96:
  *(_DWORD *)(a1 + 108) = v5;
  return v5;
}

uint64_t sub_10004C7BC(uint64_t a1, unsigned int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  LOBYTE(v3) = *(_BYTE *)(a1 + 36);
  if (!(_BYTE)v3)
  {
    v4 = 0;
    goto LABEL_31;
  }
  if ((*(_BYTE *)(a1 + 36) & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (!v5)
      v5 = *(_QWORD *)(qword_102310800 + 8);
    v6 = *(unsigned __int8 *)(v5 + 36);
    if (*(_BYTE *)(v5 + 36))
    {
      v7 = (v6 << 31 >> 31) & 9;
      if ((v6 & 2) != 0)
        v7 += 9;
      if ((v6 & 4) != 0)
        v6 = v7 + 9;
      else
        v6 = v7;
    }
    *(_DWORD *)(v5 + 32) = v6;
    LODWORD(v4) = v6 + 2;
    v3 = *(_DWORD *)(a1 + 36);
    if ((v3 & 2) == 0)
      goto LABEL_21;
  }
  else
  {
    LODWORD(v4) = 0;
    if ((*(_BYTE *)(a1 + 36) & 2) == 0)
      goto LABEL_21;
  }
  v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 24);
  if ((v8 & 0x80000000) != 0)
  {
    v9 = 11;
  }
  else if (v8 >= 0x80)
  {
    v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
    v3 = *(_DWORD *)(a1 + 36);
  }
  else
  {
    v9 = 2;
  }
  LODWORD(v4) = v9 + v4;
LABEL_21:
  if ((v3 & 4) != 0)
    v4 = (v4 + 9);
  else
    v4 = v4;
  if ((v3 & 8) != 0)
  {
    v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 28);
    if ((v10 & 0x80000000) != 0)
    {
      v11 = 11;
    }
    else if (v10 >= 0x80)
    {
      v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
    }
    else
    {
      v11 = 2;
    }
    v4 = (v11 + v4);
  }
LABEL_31:
  *(_DWORD *)(a1 + 32) = v4;
  return v4;
}

uint64_t sub_10004C8BC(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 36);
  if (*(_BYTE *)(a1 + 36))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 32) = v1;
  return v1;
}

uint64_t sub_10004C8F4(uint64_t a1)
{
  uint64_t v1;

  if (*(_DWORD *)(a1 + 16))
    v1 = 2 * (*(_DWORD *)(a1 + 16) & 1u);
  else
    v1 = 0;
  *(_DWORD *)(a1 + 12) = v1;
  return v1;
}

uint64_t sub_10004C910(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  unsigned int v7;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v8;
  int v9;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v10;
  int v11;

  LOBYTE(v3) = *(_BYTE *)(a1 + 28);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 28) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      v7 = v4 + 2;
    else
      v7 = v4;
    if ((v3 & 4) != 0)
    {
      v8 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 12);
      if ((v8 & 0x80000000) != 0)
      {
        v9 = 11;
      }
      else if (v8 >= 0x80)
      {
        v9 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v8, a2) + 1;
        v3 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v9 = 2;
      }
      v7 += v9;
    }
    if ((v3 & 8) != 0)
    {
      v10 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 20);
      if (v10 >= 0x80)
      {
        v11 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v10, a2) + 1;
        v3 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v11 = 2;
      }
      v7 += v11;
    }
    if ((v3 & 0x10) != 0)
      result = v7 + 2;
    else
      result = v7;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 24) = result;
  return result;
}

uint64_t sub_10004C9EC(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t result;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;

  LOBYTE(v3) = *(_BYTE *)(a1 + 20);
  if ((_BYTE)v3)
  {
    if ((*(_BYTE *)(a1 + 20) & 1) != 0)
    {
      v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 8);
      if ((v6 & 0x80000000) != 0)
      {
        v4 = 11;
      }
      else if (v6 >= 0x80)
      {
        v4 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2) + 1;
        v3 = *(_DWORD *)(a1 + 20);
      }
      else
      {
        v4 = 2;
      }
    }
    else
    {
      v4 = 0;
    }
    if ((v3 & 2) != 0)
      result = v4 + 2;
    else
      result = v4;
  }
  else
  {
    result = 0;
  }
  *(_DWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10004CA60(uint64_t a1, unsigned int a2)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v23;
  int v24;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v25;
  int v26;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v27;
  int v28;
  unsigned int v29;

  v3 = *(_DWORD *)(a1 + 152);
  if (!(_BYTE)v3)
  {
    v5 = 0;
    goto LABEL_32;
  }
  if ((v3 & 1) != 0)
  {
    v6 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 48);
    if ((v6 & 0x80000000) != 0)
    {
      v7 = 10;
    }
    else if (v6 >= 0x80)
    {
      v7 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v6, a2);
      v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      v7 = 1;
    }
    v4 = v7 + 1;
    if ((v3 & 2) == 0)
      goto LABEL_19;
LABEL_12:
    v8 = *(_QWORD *)(a1 + 8);
    if (!v8)
      v8 = *(_QWORD *)(qword_102310608 + 8);
    v9 = *(unsigned __int8 *)(v8 + 28);
    if (*(_BYTE *)(v8 + 28))
    {
      if ((v9 & 2) != 0)
        v9 = ((v9 << 31 >> 31) & 9) + 9;
      else
        v9 = (v9 << 31 >> 31) & 9;
    }
    *(_DWORD *)(v8 + 24) = v9;
    v4 += v9 + 2;
    v3 = *(_DWORD *)(a1 + 152);
    goto LABEL_19;
  }
  v4 = 0;
  if ((v3 & 2) != 0)
    goto LABEL_12;
LABEL_19:
  if ((v3 & 4) != 0)
    v4 += 9;
  if ((v3 & 8) != 0)
    v4 += 9;
  if ((v3 & 0x10) != 0)
    v4 += 9;
  if ((v3 & 0x20) != 0)
    v4 += 9;
  if ((v3 & 0x40) != 0)
    v4 += 9;
  if ((v3 & 0x80) != 0)
    v5 = v4 + 9;
  else
    v5 = v4;
LABEL_32:
  if ((v3 & 0xFF00) != 0)
  {
    v10 = v5 + 9;
    if ((v3 & 0x100) == 0)
      v10 = v5;
    if ((v3 & 0x200) != 0)
      LODWORD(v5) = v10 + 9;
    else
      LODWORD(v5) = v10;
    if ((v3 & 0x400) != 0)
    {
      v11 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 52);
      if ((v11 & 0x80000000) != 0)
      {
        v12 = 10;
      }
      else if (v11 >= 0x80)
      {
        v12 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v11, a2);
        v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        v12 = 1;
      }
      LODWORD(v5) = v5 + v12 + 1;
    }
    if ((v3 & 0x800) != 0)
      LODWORD(v5) = v5 + 9;
    if ((v3 & 0x1000) != 0)
    {
      v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 104);
      if ((v13 & 0x80000000) != 0)
      {
        v14 = 10;
      }
      else if (v13 >= 0x80)
      {
        v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
        v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        v14 = 1;
      }
      LODWORD(v5) = v5 + v14 + 1;
    }
    if ((v3 & 0x2000) != 0)
    {
      v15 = *(_QWORD *)(a1 + 96);
      if (!v15)
        v15 = *(_QWORD *)(qword_102310608 + 96);
      v16 = *(unsigned __int8 *)(v15 + 28);
      v17 = (v16 << 31 >> 31) & 9;
      if ((v16 & 2) != 0)
        v17 += 9;
      if (*(_BYTE *)(v15 + 28))
        v18 = v17;
      else
        v18 = 0;
      *(_DWORD *)(v15 + 24) = v18;
      LODWORD(v5) = v5 + v18 + 2;
      v3 = *(_DWORD *)(a1 + 152);
    }
    if ((v3 & 0x4000) != 0)
      v5 = (v5 + 9);
    else
      v5 = v5;
    if ((v3 & 0x8000) != 0)
    {
      v19 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 108);
      if ((v19 & 0x80000000) != 0)
      {
        v20 = 12;
      }
      else if (v19 >= 0x80)
      {
        v20 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v19, a2) + 2;
        v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        v20 = 3;
      }
      v5 = (v20 + v5);
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 120);
      if ((v21 & 0x80000000) != 0)
      {
        v22 = 12;
      }
      else if (v21 >= 0x80)
      {
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2) + 2;
        v3 = *(_DWORD *)(a1 + 152);
      }
      else
      {
        v22 = 3;
      }
      LODWORD(v5) = v22 + v5;
      if ((v3 & 0x20000) == 0)
      {
LABEL_76:
        if ((v3 & 0x40000) == 0)
          goto LABEL_77;
        goto LABEL_91;
      }
    }
    else if ((v3 & 0x20000) == 0)
    {
      goto LABEL_76;
    }
    v23 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 124);
    if ((v23 & 0x80000000) != 0)
    {
      v24 = 12;
    }
    else if (v23 >= 0x80)
    {
      v24 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v23, a2) + 2;
      v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      v24 = 3;
    }
    LODWORD(v5) = v24 + v5;
    if ((v3 & 0x40000) == 0)
    {
LABEL_77:
      if ((v3 & 0x80000) == 0)
        goto LABEL_103;
      goto LABEL_97;
    }
LABEL_91:
    v25 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 128);
    if ((v25 & 0x80000000) != 0)
    {
      v26 = 12;
    }
    else if (v25 >= 0x80)
    {
      v26 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v25, a2) + 2;
      v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      v26 = 3;
    }
    LODWORD(v5) = v26 + v5;
    if ((v3 & 0x80000) == 0)
    {
LABEL_103:
      v29 = v5 + 10;
      if ((v3 & 0x100000) == 0)
        v29 = v5;
      if ((v3 & 0x200000) != 0)
        v5 = v29 + 3;
      else
        v5 = v29;
      goto LABEL_108;
    }
LABEL_97:
    v27 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 132);
    if ((v27 & 0x80000000) != 0)
    {
      v28 = 12;
    }
    else if (v27 >= 0x80)
    {
      v28 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v27, a2) + 2;
      v3 = *(_DWORD *)(a1 + 152);
    }
    else
    {
      v28 = 3;
    }
    LODWORD(v5) = v28 + v5;
    goto LABEL_103;
  }
LABEL_108:
  *(_DWORD *)(a1 + 148) = v5;
  return v5;
}

uint64_t sub_10004CD84(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;
  int v6;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v13;
  int v14;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v29;
  int v30;
  uint64_t v31;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  int v41;
  int v42;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v43;
  int v44;
  int v45;
  int v46;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v47;
  int v48;
  uint64_t v49;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v50;
  int v51;
  int v52;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v53;
  int v54;
  int v55;
  int v56;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v57;
  int v58;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v59;
  int v60;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  wireless_diagnostics::google::protobuf::io::CodedOutputStream *v67;
  int v68;
  int v69;

  v3 = *(_DWORD *)(a1 + 364);
  if ((_BYTE)v3)
  {
    v4 = (v3 << 31 >> 31) & 9;
    if ((v3 & 2) != 0)
      v4 += 9;
    if ((v3 & 4) != 0)
      v4 += 9;
    if ((v3 & 8) != 0)
      v4 += 9;
    if ((v3 & 0x10) != 0)
      v4 += 9;
    if ((v3 & 0x20) != 0)
      v4 += 5;
    if ((v3 & 0x40) != 0)
      v4 += 5;
    if ((v3 & 0x80) != 0)
      v5 = v4 + 5;
    else
      v5 = v4;
  }
  else
  {
    v5 = 0;
  }
  if ((v3 & 0xFF00) != 0)
  {
    if ((v3 & 0x100) != 0)
      v6 = v5 + 2;
    else
      v6 = v5;
    if ((v3 & 0x200) != 0)
    {
      v7 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 60);
      if ((v7 & 0x80000000) != 0)
      {
        v8 = 10;
      }
      else if (v7 >= 0x80)
      {
        v8 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v7, a2);
        v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        v8 = 1;
      }
      v6 += v8 + 1;
    }
    if ((v3 & 0x400) != 0)
    {
      v9 = *(_QWORD *)(a1 + 64);
      if (!v9)
        v9 = *(_QWORD *)(qword_102310628 + 64);
      v10 = *(unsigned __int8 *)(v9 + 28);
      v11 = (v10 << 31 >> 31) & 9;
      if ((v10 & 2) != 0)
        v11 += 9;
      if (*(_BYTE *)(v9 + 28))
        v12 = v11;
      else
        v12 = 0;
      *(_DWORD *)(v9 + 24) = v12;
      v6 += v12 + 2;
      v3 = *(_DWORD *)(a1 + 364);
    }
    if ((v3 & 0x800) != 0)
      v6 += 9;
    if ((v3 & 0x1000) != 0)
    {
      v13 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 80);
      if ((v13 & 0x80000000) != 0)
      {
        v14 = 10;
      }
      else if (v13 >= 0x80)
      {
        v14 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v13, a2);
        v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        v14 = 1;
      }
      v6 += v14 + 1;
    }
    if ((v3 & 0x2000) != 0)
    {
      v15 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 84);
      if ((v15 & 0x80000000) != 0)
      {
        v16 = 10;
      }
      else if (v15 >= 0x80)
      {
        v16 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v15, a2);
        v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        v16 = 1;
      }
      v6 += v16 + 1;
    }
    if ((v3 & 0x4000) != 0)
      v5 = v6 + 2;
    else
      v5 = v6;
    if ((v3 & 0x8000) != 0)
    {
      v17 = *(_QWORD *)(a1 + 88);
      if (!v17)
        v17 = *(_QWORD *)(qword_102310628 + 88);
      v18 = *(unsigned __int8 *)(v17 + 28);
      v19 = (v18 << 31 >> 31) & 9;
      if ((v18 & 2) != 0)
        v19 += 9;
      if (*(_BYTE *)(v17 + 28))
        v20 = v19;
      else
        v20 = 0;
      *(_DWORD *)(v17 + 24) = v20;
      v5 += v20 + 3;
      v3 = *(_DWORD *)(a1 + 364);
    }
  }
  if ((v3 & 0xFF0000) != 0)
  {
    if ((v3 & 0x10000) != 0)
    {
      v21 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 96);
      if ((v21 & 0x80000000) != 0)
      {
        v22 = 10;
      }
      else if (v21 >= 0x80)
      {
        v22 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v21, a2);
        v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        v22 = 1;
      }
      v5 += v22 + 2;
    }
    v23 = v5 + 6;
    if ((v3 & 0x20000) == 0)
      v23 = v5;
    if ((v3 & 0x40000) != 0)
    {
      v24 = *(_QWORD *)(a1 + 104);
      if (!v24)
        v24 = *(_QWORD *)(qword_102310628 + 104);
      v25 = *(unsigned __int8 *)(v24 + 28);
      v26 = (v25 << 31 >> 31) & 9;
      if ((v25 & 2) != 0)
        v26 += 9;
      if (*(_BYTE *)(v24 + 28))
        v27 = v26;
      else
        v27 = 0;
      *(_DWORD *)(v24 + 24) = v27;
      v23 += v27 + 3;
      v3 = *(_DWORD *)(a1 + 364);
    }
    if ((v3 & 0x80000) != 0)
      v23 += 10;
    if ((v3 & 0x100000) != 0)
      v28 = v23 + 10;
    else
      v28 = v23;
    if ((v3 & 0x200000) != 0)
    {
      v29 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 116);
      if ((v29 & 0x80000000) != 0)
      {
        v30 = 10;
      }
      else if (v29 >= 0x80)
      {
        v30 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v29, a2);
        v3 = *(_DWORD *)(a1 + 364);
      }
      else
      {
        v30 = 1;
      }
      v28 += v30 + 2;
    }
    if ((v3 & 0x400000) != 0)
      v5 = v28 + 3;
    else
      v5 = v28;
    if ((v3 & 0x800000) != 0)
    {
      v31 = *(_QWORD *)(a1 + 136);
      if (!v31)
        v31 = *(_QWORD *)(qword_102310628 + 136);
      v32 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_10004D474(v31);
      v33 = (int)v32;
      if (v32 >= 0x80)
        v34 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v32, a2);
      else
        v34 = 1;
      v5 += v33 + v34 + 2;
      v3 = *(_DWORD *)(a1 + 364);
    }
  }
  if (HIBYTE(v3))
  {
    v35 = v5 + 10;
    if ((v3 & 0x1000000) == 0)
      v35 = v5;
    if ((v3 & 0x2000000) != 0)
      v35 += 10;
    if ((v3 & 0x4000000) != 0)
      v35 += 10;
    if ((v3 & 0x8000000) != 0)
      v35 += 10;
    if ((v3 & 0x10000000) != 0)
      v35 += 10;
    if ((v3 & 0x20000000) != 0)
      v35 += 10;
    if ((v3 & 0x40000000) != 0)
      v35 += 3;
    if (v3 >= 0)
      v5 = v35;
    else
      v5 = v35 + 10;
  }
  v36 = *(_DWORD *)(a1 + 368);
  if ((_BYTE)v36)
  {
    v37 = v5 + 10;
    if ((v36 & 1) == 0)
      v37 = v5;
    if ((v36 & 2) != 0)
      v37 += 3;
    if ((v36 & 4) != 0)
    {
      v38 = *(_QWORD *)(a1 + 208);
      if (!v38)
        v38 = *(_QWORD *)(qword_102310628 + 208);
      v39 = *(unsigned __int8 *)(v38 + 28);
      v40 = (v39 << 31 >> 31) & 9;
      if ((v39 & 2) != 0)
        v40 += 9;
      if (*(_BYTE *)(v38 + 28))
        v41 = v40;
      else
        v41 = 0;
      *(_DWORD *)(v38 + 24) = v41;
      v37 += v41 + 3;
      v36 = *(_DWORD *)(a1 + 368);
    }
    if ((v36 & 8) != 0)
      v42 = v37 + 10;
    else
      v42 = v37;
    if ((v36 & 0x10) != 0)
    {
      v43 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 272);
      if ((v43 & 0x80000000) != 0)
      {
        v44 = 10;
      }
      else if (v43 >= 0x80)
      {
        v44 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v43, a2);
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v44 = 1;
      }
      v42 += v44 + 2;
    }
    v45 = v42 + 10;
    if ((v36 & 0x20) == 0)
      v45 = v42;
    if ((v36 & 0x40) != 0)
      v45 += 10;
    if ((v36 & 0x80) != 0)
      v5 = v45 + 10;
    else
      v5 = v45;
  }
  if ((v36 & 0xFF00) != 0)
  {
    v46 = v5 + 10;
    if ((v36 & 0x100) == 0)
      v46 = v5;
    if ((v36 & 0x200) != 0)
      v46 += 10;
    if ((v36 & 0x400) != 0)
      v46 += 3;
    if ((v36 & 0x800) != 0)
      v46 += 10;
    if ((v36 & 0x1000) != 0)
      v5 = v46 + 10;
    else
      v5 = v46;
    if ((v36 & 0x4000) != 0)
    {
      v47 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 312);
      if ((v47 & 0x80000000) != 0)
      {
        v48 = 10;
      }
      else if (v47 >= 0x80)
      {
        v48 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v47, a2);
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v48 = 1;
      }
      v5 += v48 + 2;
    }
    if ((v36 & 0x8000) != 0)
    {
      v49 = *(_QWORD *)(a1 + 320);
      if (!v49)
        v49 = *(_QWORD *)(qword_102310628 + 320);
      v50 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100448638(v49, a2);
      v51 = (int)v50;
      if (v50 >= 0x80)
        v52 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v50, a2);
      else
        v52 = 1;
      v5 += v51 + v52 + 2;
      v36 = *(_DWORD *)(a1 + 368);
    }
  }
  if ((v36 & 0xFF0000) != 0)
  {
    if ((v36 & 0x10000) != 0)
    {
      v53 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 316);
      if ((v53 & 0x80000000) != 0)
      {
        v54 = 12;
      }
      else if (v53 >= 0x80)
      {
        v54 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v53, a2) + 2;
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v54 = 3;
      }
      v5 += v54;
    }
    v55 = v5 + 10;
    if ((v36 & 0x20000) == 0)
      v55 = v5;
    if ((v36 & 0x40000) != 0)
      v56 = v55 + 10;
    else
      v56 = v55;
    if ((v36 & 0x80000) != 0)
    {
      v57 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 344);
      if ((v57 & 0x80000000) != 0)
      {
        v58 = 12;
      }
      else if (v57 >= 0x80)
      {
        v58 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v57, a2) + 2;
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v58 = 3;
      }
      v56 += v58;
    }
    if ((v36 & 0x100000) != 0)
      v56 += 3;
    if ((v36 & 0x200000) != 0)
    {
      v59 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 348);
      if ((v59 & 0x80000000) != 0)
      {
        v60 = 12;
      }
      else if (v59 >= 0x80)
      {
        v60 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v59, a2) + 2;
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v60 = 3;
      }
      v56 += v60;
    }
    if ((v36 & 0x400000) != 0)
    {
      v61 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)*(unsigned int *)(a1 + 352);
      if ((v61 & 0x80000000) != 0)
      {
        v62 = 12;
      }
      else if (v61 >= 0x80)
      {
        v62 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v61, a2) + 2;
        v36 = *(_DWORD *)(a1 + 368);
      }
      else
      {
        v62 = 3;
      }
      v56 += v62;
    }
    if ((v36 & 0x800000) != 0)
      v5 = v56 + 3;
    else
      v5 = v56;
  }
  if ((v36 & 0x1000000) != 0)
    v63 = v5 + 3;
  else
    v63 = v5;
  v64 = *(_DWORD *)(a1 + 296);
  v65 = (v63 + 2 * v64);
  if (v64 >= 1)
  {
    v66 = 0;
    do
    {
      v67 = (wireless_diagnostics::google::protobuf::io::CodedOutputStream *)sub_100448034(*(_QWORD *)(*(_QWORD *)(a1 + 288)+ 8 * v66), a2);
      v68 = (int)v67;
      if (v67 >= 0x80)
        v69 = wireless_diagnostics::google::protobuf::io::CodedOutputStream::VarintSize32Fallback(v67, a2);
      else
        v69 = 1;
      v65 = (v68 + v65 + v69);
      ++v66;
    }
    while (v66 < *(int *)(a1 + 296));
  }
  *(_DWORD *)(a1 + 360) = v65;
  return v65;
}

uint64_t sub_10004D41C(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

uint64_t sub_10004D448(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 28);
  if (*(_BYTE *)(a1 + 28))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 24) = v1;
  return v1;
}

uint64_t sub_10004D474(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 32);
  if (*(_BYTE *)(a1 + 32))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 2;
    if ((v1 & 8) != 0)
      v1 = v2 + 2;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 28) = v1;
  return v1;
}

uint64_t sub_10004D4B8(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;

  v1 = *(unsigned __int8 *)(a1 + 44);
  if (*(_BYTE *)(a1 + 44))
  {
    v2 = ((int)((_DWORD)v1 << 31) >> 31) & 9;
    if ((v1 & 2) != 0)
      v2 += 9;
    if ((v1 & 4) != 0)
      v2 += 9;
    if ((v1 & 8) != 0)
      v1 = v2 + 9;
    else
      v1 = v2;
  }
  *(_DWORD *)(a1 + 40) = v1;
  return v1;
}

uint64_t sub_10004D4FC(uint64_t a1, uint64_t a2)
{
  id v4;
  unsigned int v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  char *v11;
  int v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  unsigned int v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  unsigned int v20;
  __int16 v21;
  unsigned int v22;

  v4 = sub_1001948D4(a2, 0);
  v5 = sub_10004D728(a1, (uint64_t)v4, 5, 10.0);
  v6 = sub_1001948D4(a2, 0);
  v7 = sub_10004D728(a1, (uint64_t)v6, 3, -1.0);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v8 = v5 | v7;
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109632;
    v18 = v5 | v7;
    v19 = 1024;
    v20 = v5;
    v21 = 1024;
    v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "mayTakeProcessAssertion,%d,background,%d,slc,%d", buf, 0x14u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v13 = 1024;
    v14 = v5;
    v15 = 1024;
    v16 = v7;
    v11 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 2, "mayTakeProcessAssertion,%d,background,%d,slc,%d", &v12, 20, 67109632);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLClientManager::mayTakeProcessAssertion(CLDaemonClient *)", "%s\n", v11);
    if (v11 != (char *)buf)
      free(v11);
  }
  return v8;
}

id sub_10004D728(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  id v7;
  id result;
  double v9;
  double v10;
  double v11;
  BOOL v12;
  __CFString *v13;
  uint64_t v14;

  v7 = objc_msgSend(*(id *)(a1 + 136), "registeredKeyPathForClientIdentifier:", a2);
  result = objc_msgSend(v7, "isValidCKP");
  if ((_DWORD)result)
  {
    v13 = 0;
    v14 = 0;
    sub_100195BD4(a3, &v14, &v13);
    objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", v14, v7, -1.0);
    v10 = v9;
    objc_msgSend(*(id *)(a1 + 136), "doubleForKey:atKeyPath:defaultValue:", v13, v7, -1.0);
    result = (id)(v10 != -1.0 && (v11 != -1.0 ? (v12 = v11 < v10) : (v12 = 1), v12)
               || vabdd_f64(v11, CFAbsoluteTimeGetCurrent()) < a4);
  }
  return result;
}

void sub_10004D840(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10004D854(_BYTE *a1, uint64_t *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  const char *v22;
  char *v23;
  double v24;
  CLOSTransaction *v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  int v40;
  _BYTE buf[48];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;

  v25 = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "CLStepCountNotifier.recordAndNotifyFusedStepDistance");
  v5 = *a2;
  v6 = a2[1];
  if (*a2 != v6)
  {
    *(_QWORD *)&v4 = 134219520;
    v26 = v4;
    do
    {
      if (a1[6232])
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8900);
        v7 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEBUG))
        {
          v8 = *(_QWORD *)(v5 + 8);
          v9 = *(_DWORD *)(v5 + 24);
          v11 = *(_QWORD *)(v5 + 32);
          v10 = *(_QWORD *)(v5 + 40);
          v12 = *(_QWORD *)(v5 + 80);
          v13 = *(_QWORD *)(v5 + 48);
          v14 = *(unsigned __int8 *)(v5 + 152);
          *(_DWORD *)buf = v26;
          *(_QWORD *)&buf[4] = v8;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v9;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v10;
          *(_WORD *)&buf[28] = 2048;
          *(_QWORD *)&buf[30] = v11;
          *(_WORD *)&buf[38] = 2048;
          *(_QWORD *)&buf[40] = v12;
          LOWORD(v42) = 2048;
          *(_QWORD *)((char *)&v42 + 2) = v13;
          WORD5(v42) = 1024;
          HIDWORD(v42) = v14;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f, mobility_dist(m), %f, arm_cstr_state, %d", buf, 0x40u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021B8900);
          v15 = *(_QWORD *)(v5 + 8);
          v16 = *(_DWORD *)(v5 + 24);
          v18 = *(_QWORD *)(v5 + 32);
          v17 = *(_QWORD *)(v5 + 40);
          v19 = *(_QWORD *)(v5 + 80);
          v20 = *(_QWORD *)(v5 + 48);
          v21 = *(unsigned __int8 *)(v5 + 152);
          v27 = v26;
          v28 = v15;
          v29 = 1024;
          v30 = v16;
          v31 = 2048;
          v32 = v17;
          v33 = 2048;
          v34 = v18;
          v35 = 2048;
          v36 = v19;
          v37 = 2048;
          v38 = v20;
          v39 = 1024;
          v40 = v21;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 2, "Adding Fused entry, time, %f, count, %d, raw_dist(m), %f, fused_dist(m), %f, cadence(steps/s), %f, mobility_dist(m), %f, arm_cstr_state, %d", COERCE_DOUBLE(&v27), 64, v24, *(double *)&v25, *(double *)&v26, *((double *)&v26 + 1));
          v23 = (char *)v22;
          sub_100512490("Generic", 1, 0, 2, "void CLStepCountNotifier::recordAndNotifyFusedStepDistance(const std::vector<CLStepDistanceFusionResult> &)", "%s\n", v22);
          if (v23 != buf)
            free(v23);
        }
      }
      *(_DWORD *)buf = 3;
      if (sub_1001B7864((uint64_t)a1, (int *)buf, 1) && *(double *)(v5 + 176) > 0.0)
      {
        v27 = 3;
        v57 = 0u;
        v58 = 0u;
        v55 = 0u;
        v56 = 0u;
        v53 = 0u;
        v54 = 0u;
        v51 = 0u;
        v52 = 0u;
        v49 = 0u;
        v50 = 0u;
        v47 = 0u;
        v48 = 0u;
        v45 = 0u;
        v46 = 0u;
        v43 = 0u;
        v44 = 0u;
        v42 = 0u;
        memset(&buf[16], 0, 32);
        *(_OWORD *)buf = *(_OWORD *)(v5 + 176);
        (*(void (**)(_BYTE *, int *, _BYTE *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v27, buf, 1, 0xFFFFFFFFLL, 0);
      }
      sub_100236A00((uint64_t)(a1 + 144), v5);
      v5 += 192;
    }
    while (v5 != v6);
  }

}

void sub_10004DBA4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLBarometricAltimeter::onOdometerUpdate");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 504), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021CF628);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLBarometricAltimeter::onOdometerUpdate", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021CF628);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLBarometricAltimeter::onOdometerUpdate\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100083264(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10004DD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004DD7C(uint64_t a1)
{
  uint64_t result;

  if ((CLMotionActivity::isTypePedestrian() & 1) != 0)
    return 1;
  LODWORD(result) = CLMotionActivity::isTypeIndoorPedestrian(a1);
  if ((a1 - 61) < 2)
    return 1;
  else
    return result;
}

void sub_10004DDBC(uint64_t a1, int a2)
{
  NSObject *v4;
  int v5;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  int v10;

  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  v4 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v6[0] = 68289283;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 1025;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#proactive setHarvesting \", \"enabled\":%{private}hhd}", (uint8_t *)v6, 0x18u);
  }
  if (a2)
    v5 = sub_10004DECC(a1);
  else
    v5 = 0;
  sub_10004E3F4(a1, v5);
}

uint64_t sub_10004DECC(uint64_t a1)
{
  double v2;
  double v3;
  uint64_t v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  int v10;
  int v11;
  __int16 v12;
  const char *v13;

  if (!*(_BYTE *)(a1 + 97))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v6 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, prohibity by default write\"}";
      goto LABEL_36;
    }
    return 0;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v6 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, 'Traffic' system service not authorized\"}";
      goto LABEL_36;
    }
    return 0;
  }
  if (!*(_BYTE *)(a1 + 144))
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v6 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, battery criteria not met\"}";
      goto LABEL_36;
    }
    return 0;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 104))(*(_QWORD *)(a1 + 16)) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v6 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, device is ineligible\"}";
      goto LABEL_36;
    }
    return 0;
  }
  v2 = *(double *)(a1 + 120);
  v3 = *(double *)&qword_1022FCAF0;
  if (v2 >= *(double *)(a1 + 104) && v2 < *(double *)&qword_1022FCAF0)
  {
    if (!(*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 40))(*(_QWORD *)(a1 + 32)))
    {
      if (*(_BYTE *)(a1 + 112))
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10219DE40);
        v6 = qword_1022A0208;
        if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          goto LABEL_37;
        v10 = 68289026;
        v11 = 0;
        v12 = 2082;
        v13 = "";
        v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, high CPU thermal criteria not met\"}";
        goto LABEL_36;
      }
      return 0;
    }
    v2 = *(double *)(a1 + 120);
    v3 = *(double *)&qword_1022FCAF0;
  }
  if (v2 >= v3 && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32)) & 1) == 0)
  {
    if (*(_BYTE *)(a1 + 112))
    {
      if (qword_1022A0200 != -1)
        dispatch_once(&qword_1022A0200, &stru_10219DE40);
      v6 = qword_1022A0208;
      if (!os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
        goto LABEL_37;
      v10 = 68289026;
      v11 = 0;
      v12 = 2082;
      v13 = "";
      v7 = "{\"msg%{public}.0s\":\"#proactive not allowed, low CPU thermal criteria not met\"}";
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v10, 0x12u);
LABEL_37:
      v5 = 0;
      *(_BYTE *)(a1 + 112) = 0;
      return v5;
    }
    return 0;
  }
  if (*(_BYTE *)(a1 + 112))
    return 1;
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_10219DE40);
  v8 = qword_1022A0208;
  v5 = 1;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
  {
    v10 = 68289026;
    v11 = 0;
    v12 = 2082;
    v13 = "";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"#proactive now allowed\"}", (uint8_t *)&v10, 0x12u);
  }
  *(_BYTE *)(a1 + 112) = 1;
  return v5;
}

void sub_10004E378(dispatch_queue_t *a1, uint64_t a2, uint64_t a3)
{
  NSObject *v6;
  _QWORD block[7];

  dispatch_assert_queue_not_V2(*a1);
  v6 = *a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10020DEE8;
  block[3] = &unk_102143548;
  block[4] = a1;
  block[5] = a2;
  block[6] = a3;
  dispatch_sync(v6, block);
}

void sub_10004E3F4(uint64_t a1, int a2)
{
  double v4;
  double v5;
  NSObject *v6;
  double v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  NSObject *v15;
  double v16;
  NSObject *v17;
  NSObject *v23;
  double v24;
  char *v25;
  char *v26;
  double v27;
  char *v28;
  double v29;
  double v30;
  void *__p[2];
  char v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  uint8_t buf[4];
  _BYTE v40[30];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 80) + 40))(*(_QWORD *)(a1 + 80)) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) != a2)
    {
      v4 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 64))(*(_QWORD *)(a1 + 48));
      v5 = v4;
      if (a2)
      {
        if (*(_BYTE *)(a1 + 96)
          || v4 - *(double *)(a1 + 160) >= 3600.0
          || ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 128))(*(_QWORD *)(a1 + 48)) & 1) != 0)
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10219DE40);
          v6 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
          {
            v7 = v5 - *(double *)(a1 + 160);
            v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 128))(*(_QWORD *)(a1 + 48));
            *(_DWORD *)buf = 68289539;
            *(_DWORD *)v40 = 0;
            *(_WORD *)&v40[4] = 2082;
            *(_QWORD *)&v40[6] = "";
            *(_WORD *)&v40[14] = 2049;
            *(double *)&v40[16] = v7;
            *(_WORD *)&v40[24] = 1025;
            *(_DWORD *)&v40[26] = v8;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive starting proactive\", \"sinceLastProactiveSession_s\":\"%{private}.09f\", \"isDominantDriving\":%{private}hhd}", buf, 0x22u);
          }
          sub_1015A2E04(__p, "proactiveHarvesting");
          sub_10002B684(a1 + 344, (uint64_t *)__p);
          if (v32 < 0)
            operator delete(__p[0]);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219DE60);
          v9 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#wigo,on,proactiveHarvest", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219DE60);
            LOWORD(v33) = 0;
            v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,on,proactiveHarvest", &v33, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v26);
            if (v26 != (char *)buf)
              free(v26);
          }
          AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10219DDD8);
          (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64), 0);
          *(double *)(a1 + 152) = v5;
          (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328), v5 + 180.0);
        }
        else
        {
          if (qword_1022A0200 != -1)
            dispatch_once(&qword_1022A0200, &stru_10219DE40);
          v23 = qword_1022A0208;
          if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
          {
            v24 = *(double *)(a1 + 160);
            *(_DWORD *)buf = 134218496;
            *(double *)v40 = v5 - v24;
            *(_WORD *)&v40[8] = 2048;
            *(double *)&v40[10] = v24 + 3600.0;
            *(_WORD *)&v40[18] = 2048;
            *(double *)&v40[20] = v24 + 3600.0 - v5;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "#proactive Last attempted proactive harvesting %.3fs ago - waiting until %.3fs (%.3fs away) before trying again", buf, 0x20u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0200 != -1)
              dispatch_once(&qword_1022A0200, &stru_10219DE40);
            v27 = *(double *)(a1 + 160);
            v33 = 134218496;
            v34 = v5 - v27;
            v35 = 2048;
            v36 = v27 + 3600.0;
            v37 = 2048;
            v38 = v27 + 3600.0 - v5;
            LODWORD(v29) = 32;
            v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0208, 1, "#proactive Last attempted proactive harvesting %.3fs ago - waiting until %.3fs (%.3fs away) before trying again", COERCE_DOUBLE(&v33), v29, v30);
            sub_100512490("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v28);
            if (v28 != (char *)buf)
              free(v28);
          }
          (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328), *(double *)(a1 + 160) + 3600.0);
        }
      }
      else
      {
        if (qword_1022A0200 != -1)
          dispatch_once(&qword_1022A0200, &stru_10219DE40);
        v15 = qword_1022A0208;
        if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEFAULT))
        {
          v16 = v5 - *(double *)(a1 + 152);
          *(_DWORD *)buf = 68289283;
          *(_DWORD *)v40 = 0;
          *(_WORD *)&v40[4] = 2082;
          *(_QWORD *)&v40[6] = "";
          *(_WORD *)&v40[14] = 2049;
          *(double *)&v40[16] = v16;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#proactive stopping proactive harvest\", \"proactiveHarvestDuration_s\":\"%{private}.09f\"}", buf, 0x1Cu);
        }
        sub_100E3E6F0(a1 + 344);
        if (*(int *)(a1 + 352) >= 1)
          sub_10193D3FC();
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219DE60);
        v17 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#wigo,off,proactiveHarvest", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219DE60);
          LOWORD(v33) = 0;
          v25 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,proactiveHarvest", &v33, 2);
          sub_100512490("Generic", 1, 0, 2, "void CLPolicyProactive::proactiveHarvesting(BOOL)", "%s\n", v25);
          if (v25 != (char *)buf)
            free(v25);
        }
        AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10219DDF8);
        (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 64) + 24))(*(_QWORD *)(a1 + 64), 0);
        *(_DWORD *)(a1 + 172) = 0xFFFF;
        *(_QWORD *)(a1 + 152) = 0x7FEFFFFFFFFFFFFFLL;
        *(_QWORD *)(a1 + 184) = 0;
        *(_QWORD *)(a1 + 176) = 0;
        *(_OWORD *)(a1 + 192) = xmmword_101BAFC90;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a1 + 208) = _Q0;
        *(_OWORD *)(a1 + 224) = _Q0;
        *(_OWORD *)(a1 + 240) = _Q0;
        *(_DWORD *)(a1 + 256) = 0;
        *(_QWORD *)(a1 + 268) = 0;
        *(_QWORD *)(a1 + 276) = 0;
        *(_QWORD *)(a1 + 260) = 0xBFF0000000000000;
        *(_DWORD *)(a1 + 284) = 0;
        *(_QWORD *)(a1 + 288) = 0xBFF0000000000000;
        *(_DWORD *)(a1 + 296) = 0x7FFFFFFF;
        *(_QWORD *)(a1 + 308) = 0;
        *(_QWORD *)(a1 + 316) = 0;
        *(_QWORD *)(a1 + 300) = 0;
        *(_BYTE *)(a1 + 324) = 0;
        *(double *)(a1 + 160) = v5;
        (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 16) + 80))(*(_QWORD *)(a1 + 16), v5);
        (*(void (**)(_QWORD, double))(**(_QWORD **)(a1 + 328) + 24))(*(_QWORD *)(a1 + 328), 1.79769313e308);
      }
      return;
    }
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v14 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289283;
      *(_DWORD *)v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = "";
      *(_WORD *)&v40[14] = 1025;
      *(_DWORD *)&v40[16] = a2;
      v11 = "{\"msg%{public}.0s\":\"#proactive taking no action, already in desired state: \", \"start\":%{private}hhd}";
      v12 = v14;
      v13 = 24;
      goto LABEL_27;
    }
  }
  else
  {
    if (qword_1022A0200 != -1)
      dispatch_once(&qword_1022A0200, &stru_10219DE40);
    v10 = qword_1022A0208;
    if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289026;
      *(_DWORD *)v40 = 0;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = "";
      v11 = "{\"msg%{public}.0s\":\"#proactive taking no action, gps harvest not supported\"}";
      v12 = v10;
      v13 = 18;
LABEL_27:
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, v11, buf, v13);
    }
  }
}

void sub_10004ECA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10004F7E0(uint64_t a1, int *a2, const void *a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLMotionStateMediator::onStepCountNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214D4C8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLMotionStateMediator::onStepCountNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214D4C8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLMotionStateMediator::onStepCountNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100230CC0(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10004F998(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10004F9B8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLFenceAuthorizationManager::onClientNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102182030);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLFenceAuthorizationManager::onClientNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102182030);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLFenceAuthorizationManager::onClientNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10022605C(a4, v7, a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10004FB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10004FB90(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _QWORD v5[6];

  dispatch_assert_queue_not_V2(*(dispatch_queue_t *)(a1 + 480));
  v4 = *(NSObject **)(a1 + 480);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020E750;
  v5[3] = &unk_102143528;
  v5[4] = a1;
  v5[5] = a2;
  dispatch_sync(v4, v5);
}

NSDictionary *sub_10004FBFC(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  _QWORD *v5;
  NSString *v6;
  NSDictionary *v7;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  _QWORD v13[7];
  _QWORD v14[7];

  v13[0] = CFSTR("reason");
  v14[0] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", *(_QWORD *)(a1 + 32));
  v13[1] = CFSTR("rat");
  sub_1001C3454(a1 + 40, v11);
  if (v12 >= 0)
    v2 = v11;
  else
    v2 = (void **)v11[0];
  v14[1] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2);
  v13[2] = CFSTR("type");
  sub_1001EB274(a1 + 40, __p);
  if (v10 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  v14[2] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3);
  v13[3] = CFSTR("accuracy");
  v14[3] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 804));
  v13[4] = CFSTR("source");
  v4 = (_QWORD *)(a1 + 736);
  if (*(char *)(a1 + 759) < 0)
    v4 = (_QWORD *)*v4;
  v14[4] = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4);
  v13[5] = CFSTR("match");
  v5 = (_QWORD *)(a1 + 760);
  if (*(char *)(a1 + 783) < 0)
    v5 = (_QWORD *)*v5;
  v6 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5);
  v13[6] = CFSTR("daily");
  v14[5] = v6;
  v14[6] = &off_10221B528;
  v7 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v14, v13, 7);
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  return v7;
}

void sub_10004FDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10004FFE4(uint64_t a1, int a2, int a3, int *a4)
{
  NSObject *v8;
  int v9;
  int v10;
  int v11;
  NSObject *v12;
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  const char *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  const char *v25;
  NSObject *v26;
  NSObject *v27;
  NSObject *v28;
  uint8_t *v29;
  NSObject *v30;
  NSObject *v31;
  int v32;
  int v33;
  int v34;
  char *v35;
  char *v36;
  uint8_t *v37;
  uint8_t *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  int v47;
  __int16 v48;
  int v49;
  uint8_t buf[4];
  int v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  int v57;
  __int16 v58;
  int v59;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    v9 = *a4;
    v10 = *(_DWORD *)(a1 + 3340);
    v11 = *(unsigned __int8 *)(a1 + 3306);
    *(_DWORD *)buf = 67241216;
    v51 = a2;
    v52 = 1026;
    v53 = a3;
    v54 = 1026;
    v55 = v9;
    v56 = 1026;
    v57 = v10;
    v58 = 1026;
    v59 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "CLGnssProvider,updateGnssModeOfOperation,enable,%{public}d,numberOfClients,%{public}d,notification,%{public}d,prevNumberOfActiveGNSSClients,%{public}d,previousRhythmicGnssRunning,%{public}d", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v32 = *a4;
    v33 = *(_DWORD *)(a1 + 3340);
    v34 = *(unsigned __int8 *)(a1 + 3306);
    LODWORD(v41) = 67241216;
    HIDWORD(v41) = a2;
    v42 = 1026;
    v43 = a3;
    v44 = 1026;
    v45 = v32;
    v46 = 1026;
    v47 = v33;
    v48 = 1026;
    v49 = v34;
    v35 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "CLGnssProvider,updateGnssModeOfOperation,enable,%{public}d,numberOfClients,%{public}d,notification,%{public}d,prevNumberOfActiveGNSSClients,%{public}d,previousRhythmicGnssRunning,%{public}d", &v41, 32);
    sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v35);
    if (v35 != (char *)buf)
      free(v35);
  }
  if (*a4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLGnssProvider,invalid notification to update the state", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 0))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    LOWORD(v41) = 0;
    LODWORD(v40) = 2;
    v29 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "CLGnssProvider,invalid notification to update the state", &v41, v40);
    sub_100512490("Generic", 1, 0, 0, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n");
LABEL_137:
    if (v29 != buf)
      free(v29);
    return;
  }
  *(_DWORD *)(a1 + 3340) = a3;
  if (a2)
  {
    if (!a3)
    {
      v17 = 0;
LABEL_74:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v23 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67240192;
        v51 = v17;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,send1HzupdateNoti,%{public}d", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LODWORD(v41) = 67240192;
        HIDWORD(v41) = v17;
        LODWORD(v40) = 8;
        v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,send1HzupdateNoti,%{public}d", &v41, v40);
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v36);
        if (v36 != (char *)buf)
          free(v36);
      }
      if (v17)
        sub_10000A620(a1, 0, a2, -1);
      return;
    }
    if (a3 == 1)
    {
      if (sub_100051040(a1 + 3352))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v13 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_106;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client", &v41, v40, v41);
LABEL_151:
        v38 = (uint8_t *)v14;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v14);
        if (v38 != buf)
          free(v38);
LABEL_106:
        *(_BYTE *)(a1 + 3306) = 1;
        return;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v22 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz Only", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_73;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,1Hz Only", &v41, v40, v41);
      goto LABEL_146;
    }
    if (!*(_BYTE *)(a1 + 3306))
      goto LABEL_160;
    if (sub_100051040(a1 + 3352))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic+1Hz", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_73;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic+1Hz", &v41, v40, v41);
LABEL_146:
      v37 = (uint8_t *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v16);
      if (v37 != buf)
        free(v37);
LABEL_73:
      v17 = 1;
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 3306))
    {
LABEL_160:
      if (sub_100051040(a1 + 3352))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        v27 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic started,1Hz", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_106;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        v14 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic started,1Hz", &v41, v40, v41);
        goto LABEL_151;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v28 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,addition 1Hz", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,addition 1Hz", &v41, v40, v41);
LABEL_115:
      v29 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n");
      goto LABEL_137;
    }
    return;
  }
  if (a3 == 1)
  {
    if (!*(_BYTE *)(a1 + 3306))
      goto LABEL_91;
    if (sub_100051040(a1 + 3352))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v18 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz off", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_73;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,1Hz off", &v41, v40, v41);
      goto LABEL_146;
    }
    if (!*(_BYTE *)(a1 + 3306) || (sub_100051040(a1 + 3352) & 1) != 0)
    {
LABEL_91:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v26 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz active", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102189B38);
        LOWORD(v41) = 0;
        LODWORD(v40) = 2;
        v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,1Hz active", &v41, v40, v41);
        goto LABEL_115;
      }
      return;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic Off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic Off", &v41, v40, v41);
      goto LABEL_156;
    }
LABEL_129:
    *(_BYTE *)(a1 + 3306) = 0;
    return;
  }
  if (!a3)
  {
    if (!*(_BYTE *)(a1 + 3306) || (sub_100051040(a1 + 3352) & 1) != 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      v15 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,1Hz only off", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_73;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v16 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,1Hz only off", &v41, v40, v41);
      goto LABEL_146;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client off", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102189B38);
      LOWORD(v41) = 0;
      LODWORD(v40) = 2;
      v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Only Rhythmic Client off", &v41, v40, v41);
LABEL_156:
      v39 = (uint8_t *)v25;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssProvider::updateGnssModeOfOperation(const BOOL, const uint32_t, const CLLocationProvider_Type::Notification &)", "%s\n", v25);
      if (v39 != buf)
        free(v39);
      goto LABEL_129;
    }
    goto LABEL_129;
  }
  if (*(_BYTE *)(a1 + 3306) && (sub_100051040(a1 + 3352) & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    v30 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic off,1hz On", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_129;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    LOWORD(v41) = 0;
    LODWORD(v40) = 2;
    v25 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,Rhythmic off,1hz On", &v41, v40, v41);
    goto LABEL_156;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102189B38);
  v20 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLGnssProvider,updateGnssModeOfOperation,one of 1Hz de-registered", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102189B38);
    LOWORD(v41) = 0;
    LODWORD(v40) = 2;
    v21 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "CLGnssProvider,updateGnssModeOfOperation,one of 1Hz de-registered", &v41, v40, v41);
    goto LABEL_115;
  }
}

uint64_t sub_100051040(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 144);
  if (result)
    return sub_100051050(result);
  return result;
}

uint64_t sub_100051050(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 304);
}

uint64_t sub_100051058(uint64_t a1)
{
  sub_10005108C(*(_QWORD *)(a1 + 40), *(_DWORD *)(a1 + 48));
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10005108C(uint64_t a1, int a2)
{
  uint64_t v4;
  id v5;
  id result;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  int v12;
  id v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  id v17;
  __int16 v18;
  uint64_t v19;

  if (a2 && (a2 != 1 || (sub_1001DC538() & 1) == 0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      LODWORD(v17) = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,getSignalStrengthMeasurements, invalid SimInstance : %d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v12 = 67109120;
    LODWORD(v13) = a2;
    v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,getSignalStrengthMeasurements, invalid SimInstance : %d", &v12);
    goto LABEL_26;
  }
  if (a2)
    v4 = 2;
  else
    v4 = 1;
  v5 = objc_msgSend(objc_alloc((Class)CTXPCServiceSubscriptionContext), "initWithSlot:", v4);
  v11 = 0;
  result = objc_msgSend(*(id *)(a1 + 16), "getSignalStrengthMeasurements:error:", +[CTServiceDescriptor descriptorWithSubscriptionContext:](CTServiceDescriptor, "descriptorWithSubscriptionContext:", v5), &v11);
  if (v11)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 138412546;
      v17 = v5;
      v18 = 2112;
      v19 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#ctcl,#cterror,getSignalStrengthMeasurements:context:%@,err:%@", buf, 0x16u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v12 = 138412546;
    v13 = v5;
    v14 = 2112;
    v15 = v11;
    v8 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#ctcl,#cterror,getSignalStrengthMeasurements:context:%@,err:%@", &v12, 22);
LABEL_26:
    v10 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 0, "CTSignalStrengthMeasurements *CLCoreTelephonyClient::getSignalStrengthMeasurementForSim(CLTelephonyService_Type::SimInstance)", "%s\n", v8);
    if (v10 != buf)
      free(v10);
    return 0;
  }
  return result;
}

uint64_t sub_1000513B0(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {
    if (*(char *)(v1 + 103) < 0)
      operator delete(*(void **)(v1 + 80));
    if (*(char *)(v1 + 79) < 0)
      operator delete(*(void **)(v1 + 56));
    if (*(char *)(v1 + 55) < 0)
      operator delete(*(void **)(v1 + 32));
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100051430(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t result;
  const char *v8;
  uint8_t *v9;
  __int128 v10;
  _DWORD v11[2];
  __int16 v12;
  unsigned int v13;
  __int16 v14;
  uint64_t v15;
  uint8_t buf[4];
  unsigned int v17;
  __int16 v18;
  unsigned int v19;
  __int16 v20;
  uint64_t v21;

  v3 = *(unsigned __int8 *)(a2 + 1);
  v4 = *(unsigned __int8 *)(a2 + 2);
  *(_QWORD *)&v10 = __PAIR64__(v4, v3);
  v5 = *(_QWORD *)(a1 + 352);
  *((_QWORD *)&v10 + 1) = v5;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v6 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 67109632;
    v17 = v3;
    v18 = 1024;
    v19 = v4;
    v20 = 2048;
    v21 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Type,CLOscar,onBodyStatus,%d,confidence,%d,timestamp,%f", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v11[0] = 67109632;
    v11[1] = v3;
    v12 = 1024;
    v13 = v4;
    v14 = 2048;
    v15 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 1, "Type,CLOscar,onBodyStatus,%d,confidence,%d,timestamp,%f", v11, 24, *(double *)&v10);
    v9 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitOnBodyStatus(const CMMotionCoprocessorReply::OnBodyStatus *)", "%s\n", v8);
    if (v9 != buf)
      free(v9);
  }
  result = sub_10014C2F4(a1, 2, (uint64_t)&v10, 16);
  *(_OWORD *)(a1 + 840) = v10;
  return result;
}

uint64_t sub_10005164C(uint64_t a1, void *a2, void *a3, void *a4, __int128 *a5)
{
  __int128 v9;
  __int128 v10;
  id v11;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)a1 = off_1021501C0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a4;
  v9 = *a5;
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a5 + 2);
  *(_OWORD *)(a1 + 72) = v9;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  v10 = *(__int128 *)((char *)a5 + 24);
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a5 + 5);
  *(_OWORD *)(a1 + 96) = v10;
  *((_QWORD *)a5 + 4) = 0;
  *((_QWORD *)a5 + 5) = 0;
  *((_QWORD *)a5 + 3) = 0;
  *(_QWORD *)(a1 + 120) = *((_QWORD *)a5 + 6);
  *(_QWORD *)(a1 + 128) = a2;
  v11 = a3;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_QWORD *)(a1 + 136) = v11;
  *(_BYTE *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_QWORD *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 1065353216;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_DWORD *)(a1 + 232) = 1065353216;
  *(_QWORD *)(a1 + 240) = objc_alloc_init((Class)NSMutableDictionary);
  *(_WORD *)(a1 + 248) = 257;
  return a1;
}

void sub_100051748(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v6;

  sub_100720930(v4);
  sub_100067AC4(v1 + 160);
  sub_1002FDAA0(v1 + 72);
  sub_100261F44(v3);
  sub_100008848(v2, *(_QWORD **)(v1 + 32));
  v6 = *(std::__shared_weak_count **)(v1 + 16);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_1000517A0(uint64_t a1, _QWORD *a2)
{
  char *v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  double *v12;
  unint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  double v23;
  char *v24;
  unint64_t v25;
  _OWORD v27[8];
  _BYTE v28[28];
  _OWORD __dst[8];
  _OWORD v30[2];
  uint64_t v31;
  char *v32;

  if (*a2 == a2[1])
    return 0;
  sub_100092C24((uint64_t)a2, &v31);
  v3 = (char *)v31;
  if (v32 == (char *)v31)
    sub_1002EAEB0();
  v4 = *(_OWORD *)(v31 + 24);
  __dst[0] = *(_OWORD *)(v31 + 8);
  __dst[1] = v4;
  v5 = *(_OWORD *)(v31 + 40);
  v6 = *(_OWORD *)(v31 + 56);
  v7 = *(_OWORD *)(v31 + 88);
  __dst[4] = *(_OWORD *)(v31 + 72);
  __dst[5] = v7;
  __dst[2] = v5;
  __dst[3] = v6;
  v8 = *(_OWORD *)(v31 + 104);
  v9 = *(_OWORD *)(v31 + 120);
  v10 = *(_OWORD *)(v31 + 136);
  *(_OWORD *)((char *)v30 + 12) = *(_OWORD *)(v31 + 148);
  __dst[7] = v9;
  v30[0] = v10;
  __dst[6] = v8;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-v31] >> 6) <= 1)
  {
    v11 = 0;
LABEL_13:
    v32 = v3;
    operator delete(v3);
    return v11;
  }
  v11 = 0;
  v12 = (double *)(a1 + 96);
  v13 = 1;
  v14 = 200;
  do
  {
    v15 = *(_OWORD *)&v3[v14 + 16];
    v27[0] = *(_OWORD *)&v3[v14];
    v27[1] = v15;
    v16 = *(_OWORD *)&v3[v14 + 32];
    v17 = *(_OWORD *)&v3[v14 + 48];
    v18 = *(_OWORD *)&v3[v14 + 80];
    v27[4] = *(_OWORD *)&v3[v14 + 64];
    v27[5] = v18;
    v27[2] = v16;
    v27[3] = v17;
    v19 = *(_OWORD *)&v3[v14 + 96];
    v20 = *(_OWORD *)&v3[v14 + 112];
    v21 = *(_OWORD *)&v3[v14 + 128];
    *(_OWORD *)&v28[12] = *(_OWORD *)&v3[v14 + 140];
    v27[7] = v20;
    *(_OWORD *)v28 = v21;
    v27[6] = v19;
    sub_10011E258(v12, (uint64_t)__dst, (uint64_t)v27);
    v23 = v22;
    v24 = sub_1000521B8();
    v3 = (char *)v31;
    v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v32[-v31] >> 6);
    if (v23 > *((double *)v24 + 10))
    {
      if (v25 <= v13)
        sub_1002EAEB0();
      v11 = (v11 + 1);
      memmove(__dst, (const void *)(v31 + v14), 0x9CuLL);
    }
    ++v13;
    v14 += 192;
  }
  while (v13 < v25);
  if (v3)
    goto LABEL_13;
  return v11;
}

void sub_100051944(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 104);
  if (v3)
  {
    *(_QWORD *)(v1 - 96) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10005196C(uint64_t a1)
{
  unint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  uint64_t v8;
  double v9;
  _BOOL4 v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
  v3 = -180.0;
  if (v2 < *((int *)sub_1000521B8() + 18))
    goto LABEL_16;
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  if (v4 == v5)
    goto LABEL_16;
  v6 = 1.79769313e308;
  v7 = -1.79769313e308;
  v8 = *(_QWORD *)(a1 + 136);
  do
  {
    v9 = *(double *)(v8 + 20);
    v7 = fmax(v7, v9);
    v6 = fmin(v6, v9);
    v8 += 192;
  }
  while (v8 != v5);
  v10 = v6 < -179.9 && v7 > 179.9;
  if (v4 == v5)
  {
LABEL_16:
    v17 = -180.0;
  }
  else
  {
    v11 = 0.0;
    v12 = 0.0;
    v13 = 0.0;
    do
    {
      v14 = *(double *)(v4 + 12);
      v15 = *(double *)(v4 + 20);
      v16 = sub_100052114(v4);
      if (v10)
        v15 = fmod(v15 + 360.0, 360.0);
      v13 = v13 + v16;
      v11 = v11 + v14 * v16;
      v12 = v12 + v15 * v16;
      v4 += 192;
    }
    while (v4 != v5);
    v17 = -180.0;
    if (v13 > 0.0)
    {
      v3 = v11 / v13;
      v17 = v12 / v13;
      if (v12 / v13 > 180.0)
        v17 = v17 + -360.0;
    }
  }
  *(double *)a1 = v3;
  *(double *)(a1 + 8) = v17;
}

double sub_100051AD0(uint64_t a1, _QWORD *a2)
{
  char *v3;
  __int128 *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  double *v14;
  _OWORD *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  double v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  double v41;
  NSObject *v42;
  int v43;
  void **v44;
  void **v45;
  void **v46;
  uint64_t v48;
  int v49;
  void **v50;
  void **v51;
  _BYTE *v52;
  char *v53;
  char *v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _OWORD v63[2];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  void *v76;
  __int128 *v77;
  _BYTE buf[12];
  __int16 v79;
  void **v80;
  char v81;
  int v82;
  void **v83;
  __int16 v84;
  _BYTE *v85;
  void *v86[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  _OWORD v94[94];

  if (*a2 == a2[1])
    return -1.0;
  sub_100092C24((uint64_t)a2, (uint64_t *)&v76);
  v3 = (char *)v76;
  v4 = v77;
  v5 = *(_OWORD *)v76;
  v6 = *((_OWORD *)v76 + 1);
  v7 = *((_OWORD *)v76 + 3);
  v66 = *((_OWORD *)v76 + 2);
  v67 = v7;
  v64 = v5;
  v65 = v6;
  v8 = *((_OWORD *)v76 + 4);
  v9 = *((_OWORD *)v76 + 5);
  v10 = *((_OWORD *)v76 + 7);
  v70 = *((_OWORD *)v76 + 6);
  v71 = v10;
  v68 = v8;
  v69 = v9;
  v11 = *((_OWORD *)v76 + 8);
  v12 = *((_OWORD *)v76 + 9);
  v13 = *((_OWORD *)v76 + 11);
  v74 = *((_OWORD *)v76 + 10);
  v75 = v13;
  v72 = v11;
  v73 = v12;
  if (v76 != v77)
  {
    v14 = (double *)(a1 + 96);
    v15 = (char *)v76 + 8;
    v16 = (__int128 *)v76;
    do
    {
      v17 = *(_OWORD *)(v3 + 24);
      *(_OWORD *)v86 = *v15;
      v87 = v17;
      v18 = *(_OWORD *)(v3 + 40);
      v19 = *(_OWORD *)(v3 + 56);
      v20 = *(_OWORD *)(v3 + 88);
      v90 = *(_OWORD *)(v3 + 72);
      v91 = v20;
      v88 = v18;
      v89 = v19;
      v21 = *(_OWORD *)(v3 + 104);
      v22 = *(_OWORD *)(v3 + 120);
      v23 = *(_OWORD *)(v3 + 136);
      *(_OWORD *)((char *)v94 + 12) = *(_OWORD *)(v3 + 148);
      v93 = v22;
      v94[0] = v23;
      v92 = v21;
      v24 = *(__int128 *)((char *)v16 + 24);
      *(_OWORD *)__p = *(__int128 *)((char *)v16 + 8);
      v56 = v24;
      v25 = *(__int128 *)((char *)v16 + 40);
      v26 = *(__int128 *)((char *)v16 + 56);
      v27 = *(__int128 *)((char *)v16 + 88);
      v59 = *(__int128 *)((char *)v16 + 72);
      v60 = v27;
      v57 = v25;
      v58 = v26;
      v28 = *(__int128 *)((char *)v16 + 104);
      v29 = *(__int128 *)((char *)v16 + 120);
      v30 = *(__int128 *)((char *)v16 + 136);
      *(_OWORD *)((char *)v63 + 12) = *(__int128 *)((char *)v16 + 148);
      v62 = v29;
      v63[0] = v30;
      v61 = v28;
      sub_10011E258(v14, (uint64_t)v86, (uint64_t)__p);
      if (v31 > *((double *)sub_1000521B8() + 10))
        break;
      v32 = *v16;
      v33 = v16[1];
      v34 = v16[3];
      v66 = v16[2];
      v67 = v34;
      v64 = v32;
      v65 = v33;
      v35 = v16[4];
      v36 = v16[5];
      v37 = v16[7];
      v70 = v16[6];
      v71 = v37;
      v68 = v35;
      v69 = v36;
      v38 = v16[8];
      v39 = v16[9];
      v40 = v16[11];
      v74 = v16[10];
      v75 = v40;
      v72 = v38;
      v73 = v39;
      v16 += 12;
    }
    while (v16 != v4);
  }
  v41 = *(double *)(v3 + 84) - *(double *)((char *)&v69 + 4);
  if (v41 < 0.0)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AE860);
    v42 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
    {
      sub_100ED9F98((uint64_t)v3, v86);
      v43 = SBYTE7(v87);
      v44 = (void **)v86[0];
      sub_100ED9F98((uint64_t)&v64, __p);
      v45 = v86;
      if (v43 < 0)
        v45 = v44;
      if ((SBYTE7(v56) & 0x80u) == 0)
        v46 = __p;
      else
        v46 = (void **)__p[0];
      *(_DWORD *)buf = 136380931;
      *(_QWORD *)&buf[4] = v45;
      v79 = 2081;
      v80 = v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_FAULT, "WifiCentroidCalculator, timestamps out of order in getStationaryTimeInSeconds(), latest: %{private}s, oldest: %{private}s", buf, 0x16u);
      if (SBYTE7(v56) < 0)
        operator delete(__p[0]);
      if (SBYTE7(v87) < 0)
        operator delete(v86[0]);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(v86, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021AE860);
      v48 = qword_1022A0048;
      sub_100ED9F98((uint64_t)v3, __p);
      v49 = SBYTE7(v56);
      v50 = (void **)__p[0];
      sub_100ED9F98((uint64_t)&v64, buf);
      v51 = __p;
      if (v49 < 0)
        v51 = v50;
      if (v81 >= 0)
        v52 = buf;
      else
        v52 = *(_BYTE **)buf;
      v82 = 136380931;
      v83 = v51;
      v84 = 2081;
      v85 = v52;
      _os_log_send_and_compose_impl(2, 0, v86, 1628, &_mh_execute_header, v48, 17, "WifiCentroidCalculator, timestamps out of order in getStationaryTimeInSeconds(), latest: %{private}s, oldest: %{private}s", &v82, 22);
      v54 = v53;
      if (v81 < 0)
        operator delete(*(void **)buf);
      if (SBYTE7(v56) < 0)
        operator delete(__p[0]);
      sub_100512490("Generic", 1, 0, 0, "double CLWifiCentroidCalculator::computeStationaryTimeInSeconds(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v54);
      if (v54 != (char *)v86)
        free(v54);
    }
  }
  if (v76)
  {
    v77 = (__int128 *)v76;
    operator delete(v76);
  }
  return v41;
}

void sub_100051ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_100051F38(uint64_t a1)
{
  unint64_t v2;
  double v3;
  double v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
  v3 = -1.0;
  if (v2 >= *((int *)sub_1000521B8() + 18))
  {
    v4 = *(double *)(a1 + 16);
    v5 = sub_1000521B8();
    if (v4 != *((double *)v5 + 6))
    {
      v6 = *(_QWORD *)(a1 + 136);
      v7 = *(_QWORD *)(a1 + 144);
      if (v6 != v7)
      {
        v8 = 0.0;
        v9 = 0.0;
        do
        {
          LODWORD(v5) = sub_10130DE98((uint64_t)v5, v6);
          if ((_DWORD)v5)
          {
            v10 = vabdd_f64(*(double *)(a1 + 16), *(double *)(v6 + 36));
            v11 = sub_100052114(v6);
            v8 = v8 + v11 * v10 * v10;
            v9 = v9 + v11;
          }
          v6 += 192;
        }
        while (v6 != v7);
        if (v9 > 0.0)
          v3 = sqrt(v8 / v9);
      }
    }
  }
  *(double *)(a1 + 40) = v3;
}

char *sub_100052010(uint64_t a1)
{
  unint64_t v2;
  char *v3;
  char *result;
  double v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
  v3 = sub_1000521B8();
  if (v2 < *((int *)v3 + 18))
  {
    result = sub_1000521B8();
    v5 = *((double *)result + 6);
LABEL_3:
    *(double *)(a1 + 16) = v5;
    return result;
  }
  v6 = *(_QWORD *)(a1 + 136);
  v7 = *(_QWORD *)(a1 + 144);
  if (v6 != v7)
  {
    v8 = 0.0;
    v9 = 1.79769313e308;
    v10 = -1.79769313e308;
    v11 = 0.0;
    do
    {
      LODWORD(v3) = sub_10130DE98((uint64_t)v3, v6);
      if ((_DWORD)v3)
      {
        v12 = *(double *)(v6 + 36);
        v10 = fmax(v10, v12);
        v9 = fmin(v9, v12);
        v13 = sub_100052114(v6);
        v11 = v11 + v13;
        v8 = v8 + v12 * v13;
      }
      v6 += 192;
    }
    while (v6 != v7);
    if (v11 != 0.0)
    {
      result = sub_1000521B8();
      if (v10 - v9 <= *((double *)result + 5))
      {
        v5 = v8 / v11;
        goto LABEL_3;
      }
    }
  }
  result = sub_1000521B8();
  *(_QWORD *)(a1 + 16) = *((_QWORD *)result + 6);
  *(_QWORD *)(a1 + 40) = 0xBFF0000000000000;
  return result;
}

double sub_100052114(uint64_t a1)
{
  double v2;
  double v3;
  long double v4;

  if (!*sub_1000521B8())
    return 1.0;
  v2 = (double)*(int *)(a1 + 168);
  if (*((double *)sub_1000521B8() + 2) < v2)
    v2 = (double)(int)*((double *)sub_1000521B8() + 2);
  if (*((double *)sub_1000521B8() + 1) > v2)
    v2 = (double)(int)*((double *)sub_1000521B8() + 1);
  v3 = *((double *)sub_1000521B8() + 2) - v2;
  v4 = v3 / *((double *)sub_1000521B8() + 3);
  return exp(v4);
}

char *sub_1000521B8()
{
  return &byte_1022FF6E0;
}

void sub_1000521C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  id v10;
  _QWORD v11[8];
  os_activity_scope_state_s state;
  char v13;
  uint8_t buf[4];
  int v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;

  CLProfilingIdentify("CLTelephonyService::ctServerConnectionCallback");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021460C0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v13 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLTelephonyService::ctServerConnectionCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021460C0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v15 = 0;
      v16 = 2082;
      v17 = "";
      v18 = 2082;
      v19 = "activity";
      v20 = 2050;
      v21 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLTelephonyService::ctServerConnectionCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v13 = 0;
  }
  v10 = objc_msgSend(*(id *)(a4 + 32), "silo");
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_10020EB6C;
  v11[3] = &unk_1021461C0;
  v11[4] = a4;
  v11[5] = a1;
  v11[6] = a2;
  v11[7] = a3;
  objc_msgSend(v10, "sync:", v11);
  if (v13)
    os_activity_scope_leave(&state);
}

void sub_1000523BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000523DC(_QWORD *result, uint64_t **a2)
{
  uint64_t v2;
  _QWORD *v4;
  int64x2_t *v5;
  uint64_t v6;
  void *v7;
  dispatch_queue_t *v8;
  uint64_t __dst[40];
  int v10;
  _BYTE __src[320];

  v2 = **a2;
  if (v2 != (*a2)[1])
  {
    v4 = result;
    v5 = (int64x2_t *)(result + 97);
    v6 = (uint64_t)(result + 45);
    do
    {
      memset(__src, 0, sizeof(__src));
      v7 = (void *)v4[26];
      if (v7)
        objc_msgSend(v7, "updateEntryDistanceAndPace:", v2);
      LODWORD(__dst[0]) = 1;
      if (sub_1001B7864((uint64_t)v4, (int *)__dst, 1))
      {
        v10 = 1;
        memcpy(__dst, __src, sizeof(__dst));
        (*(void (**)(_QWORD *, int *, uint64_t *, uint64_t, uint64_t, _QWORD))(*v4 + 152))(v4, &v10, __dst, 1, 0xFFFFFFFFLL, 0);
        v8 = (dispatch_queue_t *)sub_10009EC60();
        sub_10004E378(v8, (uint64_t)&__src[216], (uint64_t)&__src[224]);
      }
      sub_100010498(v5, (uint64_t)__src, (uint64_t)__dst);
      sub_10004D854(v4, __dst);
      if (__dst[0])
      {
        __dst[1] = __dst[0];
        operator delete((void *)__dst[0]);
      }
      result = sub_1000DA1AC(v6, *(double *)(v2 + 8));
      v2 += 176;
    }
    while (v2 != (*a2)[1]);
  }
  return result;
}

void sub_100052538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052554(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  id v6;
  __int128 *p_p;
  NSString *v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *__dst[2];
  uint64_t v19;
  __int128 __p;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[4];
  int v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  NSString *v30;

  v4 = *a2;
  if (*(char *)(*a2 + 95) < 0)
  {
    sub_100115CE4(__dst, *(void **)(v4 + 72), *(_QWORD *)(v4 + 80));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v4 + 72);
    v19 = *(_QWORD *)(v4 + 88);
  }
  if (*(char *)(v4 + 119) < 0)
  {
    sub_100115CE4(&__p, *(void **)(v4 + 96), *(_QWORD *)(v4 + 104));
  }
  else
  {
    __p = *(_OWORD *)(v4 + 96);
    v21 = *(_QWORD *)(v4 + 112);
  }
  v22 = *(_QWORD *)(v4 + 120);
  if (v19 >= 0)
    v5 = __dst;
  else
    v5 = (void **)__dst[0];
  v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "registeredKeyPathForClientIdentifier:", +[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5)));
  if (v21 >= 0)
    p_p = &__p;
  else
    p_p = (__int128 *)__p;
  v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v9 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    v24 = 0;
    v25 = 2082;
    v26 = "";
    v27 = 2114;
    v28 = v6;
    v29 = 2114;
    v30 = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#PersistentSubscription PersistenceBackend removeAllPersistedDataForSubscription\", \"client\":%{public, location:escape_only}@, \"storageName\":%{public, location:escape_only}@}", buf, 0x26u);
  }
  v10 = (std::__shared_weak_count *)a2[1];
  v16 = *a2;
  v17 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  sub_100210C24(a1 + 16, &v16);
  v13 = v17;
  if (v17)
  {
    v14 = (unint64_t *)&v17->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if ((objc_msgSend(v6, "isValidCKP", v16) & 1) != 0)
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "removeValueForKey:atKeyPath:", v8, v6);
  if (SHIBYTE(v21) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_1000527C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100052810(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  id v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  char *v13;
  uint64_t v14;
  id v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  id v21;
  _BYTE __p[12];
  char v23;

  if (objc_msgSend(*(id *)(a1 + 8), "state") != 2)
  {
    sub_1018ECFE4();
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  if (!objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "count"))
  {
    sub_1018ECCF4();
    goto LABEL_37;
  }
  if (objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded"))
  {
    sub_1018ECE6C();
    goto LABEL_37;
  }
  sub_1015A2E04(__p, "startdeamon");
  sub_1001CEC00(a1, 1, (uint64_t *)__p);
  if (v23 < 0)
    operator delete(*(void **)__p);
  objc_msgSend(*(id *)(a1 + 8), "setPipelinedDidStartLocalizing:", 0);
  v1 = &qword_1022A0000;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v2 = &qword_1022A0000;
  v4 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "@ClxIndoor, state, 1, start", __p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    LOWORD(v20) = 0;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxIndoor, state, 1, start", &v20, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startDaemonLocalizingImpl()", "%s\n", v13);
    if (v13 != __p)
      free(v13);
  }
  if (sub_1000C4240())
  {
    if (qword_1022A0040 == -1)
    {
LABEL_13:
      v5 = v2[9];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)__p = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "@ClxWifi2, state, 1, start", __p, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (v1[8] != -1)
          dispatch_once(&qword_1022A0040, &stru_102129DE0);
        v17 = v2[9];
        LOWORD(v20) = 0;
        LODWORD(v19) = 2;
        v18 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 0, "@ClxWifi2, state, 1, start", &v20, v19);
        sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startDaemonLocalizingImpl()", "%s\n", v18);
        if (v18 != __p)
          free(v18);
      }
      goto LABEL_16;
    }
LABEL_38:
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
    goto LABEL_13;
  }
LABEL_16:
  sub_1015A2E04(__p, "startDaemonLocalizingImpl");
  sub_1001CE674(a1, (uint64_t *)__p);
  if (v23 < 0)
    operator delete(*(void **)__p);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 160))(*(_QWORD *)(a1 + 24));
  if (v1[8] != -1)
    dispatch_once(&qword_1022A0040, &stru_102129DE0);
  v6 = v2[9];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    v7 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
    *(_DWORD *)__p = 136380675;
    *(_QWORD *)&__p[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "'Seeding pipelined' i.e. setVenuesAndStartLocalizer, with venues %{private}s", __p, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (v1[8] != -1)
      dispatch_once(&qword_1022A0040, &stru_102129DE0);
    v14 = v2[9];
    v15 = objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 8), "pipelinedVenues"), "description"), "componentsSeparatedByCharactersInSet:", +[NSCharacterSet whitespaceAndNewlineCharacterSet](NSCharacterSet, "whitespaceAndNewlineCharacterSet")), "componentsJoinedByString:", CFSTR(",")), "UTF8String");
    v20 = 136380675;
    v21 = v15;
    LODWORD(v19) = 12;
    v16 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v14, 2, "'Seeding pipelined' i.e. setVenuesAndStartLocalizer, with venues %{private}s", &v20, v19);
    sub_100512490("Generic", 1, 0, 2, "void CLIndoorLogic::startDaemonLocalizingImpl()", "%s\n", v16);
    if (v16 != __p)
      free(v16);
  }
  v8 = *(_QWORD *)(a1 + 24);
  v9 = objc_msgSend(*(id *)(a1 + 8), "latestPosition");
  if (!*v9)
    sub_1018ECB60((uint64_t)v9, v10, v11);
  return (*(uint64_t (**)(uint64_t, _BYTE *, id))(*(_QWORD *)v8 + 120))(v8, v9 + 8, objc_msgSend(*(id *)(a1 + 8), "lastARSessionState"));
}

void sub_100052D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100052DA8(uint64_t a1)
{
  unint64_t v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  double v8;
  double v9;
  double v10;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
  v3 = -1.0;
  if (v2 >= *((int *)sub_1000521B8() + 18) && *(double *)a1 >= -90.0 && *(double *)a1 <= 90.0)
  {
    v4 = *(double *)(a1 + 8);
    if (v4 <= 180.0 && v4 >= -180.0)
    {
      v5 = *(_QWORD *)(a1 + 136);
      v6 = *(_QWORD *)(a1 + 144);
      if (v5 != v6)
      {
        v7 = 0.0;
        v8 = 0.0;
        do
        {
          v9 = sub_10011E634((double *)(a1 + 96), *(double *)(v5 + 12), *(double *)(v5 + 20), *(double *)a1, *(double *)(a1 + 8), 0.0);
          v10 = sub_100052114(v5);
          v7 = v7 + v9 * v10 * v9;
          v8 = v8 + v10;
          v5 += 192;
        }
        while (v5 != v6);
        if (v8 > 0.0)
          v3 = fmax(sqrt(v7 / v8), *((double *)sub_1000521B8() + 7));
      }
    }
  }
  *(double *)(a1 + 32) = v3;
}

void sub_100052EC8(uint64_t a1)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  int v7;
  _DWORD v8[2];
  __int16 v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unsigned int v14;
  __int16 v15;
  int v16;
  __int16 v17;
  int v18;

  v2 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 12);
  if (sub_1001FE40C((_QWORD *)a1, (uint64_t)CFSTR("powerBudget")))
    v3 = objc_msgSend(*(id *)(a1 + 136), "isAuthorizedForServiceType:", 3);
  else
    v3 = 0;
  v4 = v2 ^ 1;
  if (qword_1022A01C0 != -1)
    dispatch_once(&qword_1022A01C0, &stru_102198FB8);
  v5 = qword_1022A01C8;
  if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEFAULT))
  {
    v6 = *(_QWORD *)(a1 + 64);
    v7 = *(unsigned __int8 *)(a1 + 320);
    v8[0] = 68290050;
    v9 = 2082;
    v8[1] = 0;
    v10 = "";
    v11 = 2114;
    v12 = v6;
    v13 = 1026;
    v14 = v3;
    v15 = 1026;
    v16 = v7;
    v17 = 1026;
    v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Monitoring status\", \"client\":%{public, location:escape_only}@, \"shouldBeRegistered\":%{public}hhd, \"fRegisteredForSLC\":%{public}hhd, \"shouldEngageCorrectiveCompensation\":%{public}hhd}", (uint8_t *)v8, 0x2Eu);
  }
  if (*(unsigned __int8 *)(a1 + 320) != v3 || *(unsigned __int8 *)(a1 + 321) != v4)
  {
    if (v3)
      sub_10023BE5C((_QWORD *)a1, v4);
    sub_101002010(a1);
  }
}

uint64_t sub_100053048(uint64_t a1, uint64_t a2)
{
  void *v4;
  NSObject *v5;
  _QWORD *v6;
  NSObject *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  NSObject *v15;
  _QWORD *v16;
  NSObject *v17;
  _QWORD *v18;
  NSObject *v19;
  _QWORD *v20;
  NSObject *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  sqlite3_int64 v26;
  uint64_t v27[2];
  id v28[4];
  __int16 v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  _QWORD *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  double v41;
  __int16 v42;
  uint64_t v43;

  v4 = *(void **)(a1 + 16);
  v28[2] = v4;
  (*(void (**)(void *))(*(_QWORD *)v4 + 16))(v4);
  v29 = 256;
  if (*(_BYTE *)(a1 + 56))
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v5 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      v6 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v6 = (_QWORD *)*v6;
      *(_DWORD *)buf = 68289282;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Attempt to reduceFreePages on readonly database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v7 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v8 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v8 = (_QWORD *)*v8;
      *(_DWORD *)buf = 68289282;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v8;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Attempt to reduceFreePages on readonly database", "{\"msg%{public}.0s\":\"Attempt to reduceFreePages on readonly database\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
    }
    v9 = 2;
    goto LABEL_65;
  }
  v10 = sub_10022D1EC();
  if ((sub_100217C40(v10) & 1) != 0)
  {
    sub_100131938(v28, (uint64_t)"IncrementalVacuum", 0);
    v27[0] = mach_absolute_time();
    v27[1] = (uint64_t)&stru_1021492A0;
    v26 = 0;
    if (sub_100053664(*(sqlite3_stmt **)(a1 + 8), "pragma page_count;", &v26))
      v11 = v26;
    else
      v11 = -1;
    if (sub_100053664(*(sqlite3_stmt **)(a1 + 8), "pragma freelist_count;", &v26))
      v12 = v26;
    else
      v12 = -1;
    v13 = v11 - v12;
    if (v11)
      v14 = (double)v13 / (double)v11;
    else
      v14 = 1.0;
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v17 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      v18 = (_QWORD *)(a1 + 96);
      if (*(char *)(a1 + 119) < 0)
        v18 = (_QWORD *)*v18;
      *(_DWORD *)buf = 68290306;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2082;
      v35 = v18;
      v36 = 2050;
      v37 = v11;
      v38 = 2050;
      v39 = v12;
      v40 = 2050;
      v41 = v14;
      v42 = 2050;
      v43 = a2;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"reduceFreePages\", \"path\":%{public, location:escape_only}s, \"page_count\":%{public}lld, \"freelist_count\":%{public}lld, \"loadFactor\":\"%{public}f\", \"incrementalVacuumPageLimit\":%{public}lld}", buf, 0x44u);
    }
    if (!v12)
      goto LABEL_42;
    if (v11 < 0 || v12 < 0)
    {
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
      v19 = off_1022A0288;
      if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
      {
        v20 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v20 = (_QWORD *)*v20;
        *(_DWORD *)buf = 68289282;
        v31 = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2082;
        v35 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Cannot reduceFreePages\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
        if (qword_1022A0280 != -1)
          dispatch_once(&qword_1022A0280, &stru_102149330);
      }
      v21 = off_1022A0288;
      if (os_signpost_enabled((os_log_t)off_1022A0288))
      {
        v22 = (_QWORD *)(a1 + 96);
        if (*(char *)(a1 + 119) < 0)
          v22 = (_QWORD *)*v22;
        *(_DWORD *)buf = 68289282;
        v31 = 0;
        v32 = 2082;
        v33 = "";
        v34 = 2082;
        v35 = v22;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v21, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Cannot reduceFreePages", "{\"msg%{public}.0s\":\"Cannot reduceFreePages\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
      }
      v9 = 4;
      goto LABEL_64;
    }
    if (v14 <= 0.85 || (unint64_t)v12 >= 0x200)
    {
      if (v14 >= 0.4)
        v23 = (uint64_t)((double)v12 * 0.8);
      else
        v23 = v12 - v13;
      if (v23 >= a2)
        v24 = a2;
      else
        v24 = v23;
      if (sub_10063F5B8(a1, v24))
        v9 = v23 > a2;
      else
        v9 = 4;
    }
    else
    {
LABEL_42:
      v9 = 0;
    }
LABEL_64:
    sub_100134E40(v27);
    sub_100131740(v28);
    goto LABEL_65;
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_102149330);
  v15 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    v16 = (_QWORD *)(a1 + 96);
    if (*(char *)(a1 + 119) < 0)
      v16 = (_QWORD *)*v16;
    *(_DWORD *)buf = 68289282;
    v31 = 0;
    v32 = 2082;
    v33 = "";
    v34 = 2082;
    v35 = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Attempt to reduceFreePages with incremental vacuum disabled\", \"path\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  v9 = 3;
LABEL_65:
  (*(void (**)(void *))(*(_QWORD *)v4 + 24))(v4);
  return v9;
}

void sub_100053610(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  id v6;
  va_list va1;
  uint64_t v8;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v6 = va_arg(va2, id);
  v8 = va_arg(va2, _QWORD);
  sub_100134E40((uint64_t *)va);
  sub_100131740((id *)va1);
  sub_10187E514((uint64_t)va2);
  _Unwind_Resume(a1);
}

BOOL sub_100053664(sqlite3_stmt *a1, char *a2, sqlite3_int64 *a3)
{
  sqlite3_stmt *v5;
  sqlite3_stmt *v6;
  int v7;
  _BOOL8 v8;

  v5 = sub_1000CDD24(a1, a2);
  if (!v5)
    return 0;
  v6 = v5;
  v7 = sqlite3_step(v5);
  v8 = v7 == 100;
  if (v7 == 100)
    *a3 = sqlite3_column_int64(v6, 0);
  sub_1000536D0(a1, v6);
  return v8;
}

void sub_1000536D0(sqlite3 *a1, sqlite3_stmt *pStmt)
{
  NSObject *v3;
  const char *v4;
  int v5;
  uint8_t buf[4];
  int v7;
  __int16 v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  int *v13;
  __int16 v14;
  const char *v15;

  v5 = sqlite3_finalize(pStmt);
  if (v5)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v3 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEFAULT))
    {
      if (a1)
        v4 = sqlite3_errmsg(a1);
      else
        v4 = "no database";
      *(_DWORD *)buf = 68289795;
      v7 = 0;
      v8 = 2082;
      v9 = "";
      v10 = 1040;
      v11 = 4;
      v12 = 2098;
      v13 = &v5;
      v14 = 2081;
      v15 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#warning Finalized statement previously failed\", \"rc\":%{public, location:SqliteResult}.*P, \"errmsg\":%{private, location:escape_only}s}", buf, 0x2Cu);
    }
  }
}

id *sub_1000537FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  unsigned int i;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint8_t *v13;
  const char *v15;
  id v16[2];
  int v17;
  uint64_t v18;
  __int16 v19;
  uint64_t v20;
  uint8_t buf[4];
  uint64_t v22;
  __int16 v23;
  uint64_t v24;

  sub_100131938(v16, (uint64_t)"CLCellTilesManager::traverseAllTilesSets", 0);
  v6 = (_QWORD *)(a1 + 416);
  for (i = -3; i != 10; ++i)
  {
    if (i <= 2)
    {
      v8 = sub_1001CDE58(i + 3, v6);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v9 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v10 = v8 + 8;
        if (*(char *)(v8 + 31) < 0)
          v10 = *(_QWORD *)(v8 + 8);
        *(_DWORD *)buf = 136315394;
        v22 = a2;
        v23 = 2080;
        v24 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "TILE: performing, sAction, %s, tilesSet, %s", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        v11 = v8 + 8;
        if (*(char *)(v8 + 31) < 0)
          v11 = *(_QWORD *)(v8 + 8);
        v17 = 136315394;
        v18 = a2;
        v19 = 2080;
        v20 = v11;
        LODWORD(v15) = 22;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: performing, sAction, %s, tilesSet, %s", (const char *)&v17, v15);
        v13 = (uint8_t *)v12;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::traverseAllTilesSets(const char *, CLTileManagerTraverseTilesSetBlock)", "%s\n", v12);
        if (v13 != buf)
          free(v13);
      }
      (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, v8);
    }
  }
  return sub_100131740(v16);
}

void sub_100053A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_100131740((id *)va);
  _Unwind_Resume(a1);
}

void sub_100053A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  double v5;
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  uint8_t *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  int v20;
  NSObject *v21;
  int v22;
  void **v23;
  uint64_t v24;
  int v25;
  void **v26;
  char *v27;
  char *v28;
  NSObject *v29;
  const char *v30;
  const char *v31;
  void *v32[2];
  char v33;
  void *__p;
  __int16 v35;
  int v36;
  __int16 v37;
  void **v38;
  unsigned int v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint8_t buf[4];
  _BYTE v44[10];
  __int16 v45;
  void **v46;

  v3 = *(_QWORD *)(a1 + 32);
  if (*(_BYTE *)(v3 + 160))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(v3 + 368) + 16))(*(_QWORD *)(v3 + 368));
    v6 = *(_QWORD *)(a1 + 40);
    if (*(double *)(v6 + 20) < 0.0 || vabdd_f64(v5, *(double *)(v6 + 76)) > 3600.0)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "TILE: location not relevant", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
        LOWORD(v39) = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: location not relevant", &v39, 2);
        v9 = (uint8_t *)v8;
        sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v8);
LABEL_24:
        if (v9 != buf)
          free(v9);
        return;
      }
      return;
    }
    v16 = (int *)(a2 + 4);
    sub_1000C1928((uint64_t)&v39, (_DWORD *)(a2 + 4));
    sub_1001CB024((uint64_t)&v39, -1, *(double *)(*(_QWORD *)(a1 + 40) + 4), *(double *)(*(_QWORD *)(a1 + 40) + 12), *(double *)(a2 + 152), *(double *)(a2 + 160));
    if (sub_1001C8DA8(&v39))
    {
      v17 = sub_1001C85FC(a2 + 184, &v39);
      v18 = v17;
      if (!v17 || !sub_1001C9408(v17, *(_BYTE *)(v3 + 128)))
        goto LABEL_52;
      v19 = (*(double (**)(_QWORD))(**(_QWORD **)(v3 + 368) + 16))(*(_QWORD *)(v3 + 368));
      v20 = sub_1001C9C90(v18, v19);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v21 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        v22 = *v16;
        sub_100BCC240(&v39, &__p);
        v23 = SHIBYTE(v38) >= 0 ? &__p : (void **)__p;
        *(_DWORD *)buf = 67109634;
        *(_DWORD *)v44 = v20;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = (__int16)v22;
        v45 = 2080;
        v46 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "TILE: updating mtime, %d, type, %d, tileid, %s", buf, 0x18u);
        if (SHIBYTE(v38) < 0)
          operator delete(__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_52;
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
      v24 = qword_1022A02D8;
      v25 = *v16;
      sub_100BCC240(&v39, v32);
      if (v33 >= 0)
        v26 = v32;
      else
        v26 = (void **)v32[0];
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v20;
      v35 = 1024;
      v36 = (__int16)v25;
      v37 = 2080;
      v38 = v26;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "TILE: updating mtime, %d, type, %d, tileid, %s", &__p, 24, v31);
      v28 = v27;
      if (v33 < 0)
        operator delete(v32[0]);
      sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v28);
      if (v28 == (char *)buf)
        goto LABEL_52;
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      v29 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "CellTile, Invalid tile id!, #CloneMe", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
        goto LABEL_52;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A3DB8);
      LOWORD(__p) = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "CellTile, Invalid tile id!, #CloneMe", &__p, 2);
      v28 = (char *)v30;
      sub_100512490("Generic", 1, 0, 0, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v30);
      if (v28 == (char *)buf)
        goto LABEL_52;
    }
    free(v28);
LABEL_52:
    if (v42 < 0)
      operator delete(v41);
    return;
  }
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
  v10 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v11 = a2 + 8;
    if (*(char *)(a2 + 31) < 0)
      v11 = *(_QWORD *)(a2 + 8);
    *(_DWORD *)buf = 136315138;
    *(_QWORD *)v44 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "TILE: tiles, %s, not active", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A3DD8);
    v14 = *(_QWORD *)(a2 + 8);
    v13 = a2 + 8;
    v12 = v14;
    if (*(char *)(v13 + 23) >= 0)
      v12 = v13;
    v39 = 136315138;
    v40 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "TILE: tiles, %s, not active", (const char *)&v39);
    v9 = (uint8_t *)v15;
    sub_100512490("Generic", 1, 0, 2, "void CLCellTilesManager::updateTileLocationRelevancy(const CLDaemonLocation &)_block_invoke", "%s\n", v15);
    goto LABEL_24;
  }
}

void sub_10005415C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_10005419C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_1021AC1A8);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLGpsAssistant_Type::Notification, CLGpsAssistant_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLGpsAssistant_Type::Notification, NotificationData_T = CLGpsAssistant_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100054524(uint64_t a1)
{
  sub_1001B7388(a1);
  return 1;
}

void sub_10005453C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  NSObject *v5;
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLSubHarvesterTraceExternal::onPressure");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 256), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102159BD8);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v4 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSubHarvesterTraceExternal::onPressure", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v4, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102159BD8);
    v5 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSubHarvesterTraceExternal::onPressure\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 304) + 24))(*(_QWORD *)(a2 + 304), a1);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1000546F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100054714(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  char *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  size_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t v29;
  NSObject *v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  NSObject *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  int v38;
  _QWORD *v39;
  __int128 __p;
  char *v41;
  uint8_t buf[4];
  _QWORD *v43;

  v1 = a1[4];
  if (*(_BYTE *)(v1 + 736))
  {
    __p = 0uLL;
    v41 = 0;
    sub_100054CE0((unint64_t *)&__p, a1[5] + 16);
    sub_10114FE54(&__p, *(char **)(v1 + 712), *(char **)(v1 + 720), *(_QWORD *)(v1 + 720) - *(_QWORD *)(v1 + 712));
    v3 = a1[6];
    if (a1[7] != v3)
    {
      v4 = 0;
      v5 = 0;
      do
      {
        if (v5 && (*(unsigned __int8 *)(v3 + v4) | 0x20) == 0x7D)
        {
          v6 = (char *)*((_QWORD *)&__p + 1);
          if (*((_QWORD *)&__p + 1) >= (unint64_t)v41)
          {
            v8 = __p;
            v9 = *((_QWORD *)&__p + 1) - __p;
            v10 = *((_QWORD *)&__p + 1) - __p + 1;
            if (v10 < 0)
              goto LABEL_76;
            v11 = (unint64_t)&v41[-__p];
            if (2 * (uint64_t)&v41[-__p] > (unint64_t)v10)
              v10 = 2 * v11;
            if (v11 >= 0x3FFFFFFFFFFFFFFFLL)
              v12 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v12 = v10;
            if (v12)
              v13 = (char *)operator new(v12);
            else
              v13 = 0;
            v14 = &v13[v9];
            v15 = &v13[v9];
            *v15 = 93;
            v7 = v15 + 1;
            if (v6 != (char *)v8)
            {
              v16 = &v6[~v8];
              do
              {
                v17 = *--v6;
                (v16--)[(_QWORD)v13] = v17;
              }
              while (v6 != (char *)v8);
              v6 = (char *)__p;
              v14 = v13;
            }
            *(_QWORD *)&__p = v14;
            *((_QWORD *)&__p + 1) = v7;
            v41 = &v13[v12];
            if (v6)
              operator delete(v6);
          }
          else
          {
            **((_BYTE **)&__p + 1) = 93;
            v7 = v6 + 1;
          }
          *((_QWORD *)&__p + 1) = v7;
          v3 = a1[6];
        }
        v18 = (char *)*((_QWORD *)&__p + 1);
        if (*((_QWORD *)&__p + 1) >= (unint64_t)v41)
        {
          v20 = __p;
          v21 = *((_QWORD *)&__p + 1) - __p;
          v22 = *((_QWORD *)&__p + 1) - __p + 1;
          if (v22 < 0)
LABEL_76:
            sub_100259694();
          v23 = (unint64_t)&v41[-__p];
          if (2 * (uint64_t)&v41[-__p] > (unint64_t)v22)
            v22 = 2 * v23;
          if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
            v24 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
            v25 = (char *)operator new(v24);
          else
            v25 = 0;
          v26 = &v25[v21];
          v25[v21] = *(_BYTE *)(v3 + v4);
          v19 = (uint64_t)&v25[v21 + 1];
          if (v18 != (char *)v20)
          {
            v27 = &v18[~v20];
            do
            {
              v28 = *--v18;
              (v27--)[(_QWORD)v25] = v28;
            }
            while (v18 != (char *)v20);
            v18 = (char *)__p;
            v26 = v25;
          }
          *(_QWORD *)&__p = v26;
          *((_QWORD *)&__p + 1) = &v25[v21 + 1];
          v41 = &v25[v24];
          if (v18)
            operator delete(v18);
        }
        else
        {
          **((_BYTE **)&__p + 1) = *(_BYTE *)(v3 + v4);
          v19 = (uint64_t)(v18 + 1);
        }
        *((_QWORD *)&__p + 1) = v19;
        v3 = a1[6];
        v5 = *(_BYTE *)(v3 + v4++) == 126;
      }
      while (a1[7] - v3 > v4);
    }
    v29 = *(_QWORD *)(v1 + 704);
    if (v29)
    {
      sub_100054D88(v29, __p, *((_QWORD *)&__p + 1) - __p, (_QWORD *)(v1 + 136));
    }
    else if ((*(_BYTE *)(v1 + 136 + *(_QWORD *)(*(_QWORD *)(v1 + 136) - 24) + 32) & 5) != 0 || !*(_QWORD *)(v1 + 264))
    {
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v34 = qword_1022A0168;
      if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
      {
        v35 = (_QWORD *)(v1 + 8);
        if (*(char *)(v1 + 31) < 0)
          v35 = (_QWORD *)*v35;
        *(_DWORD *)buf = 136446210;
        v43 = v35;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,%{public}s,append,bad stream", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v36 = (_QWORD *)(v1 + 8);
        if (*(char *)(v1 + 31) < 0)
          v36 = (_QWORD *)*v36;
        v38 = 136446210;
        v39 = v36;
        v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 0, "ProtobufSerializer,%{public}s,append,bad stream", &v38, 12);
        sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)_block_invoke", "%s\n", v37);
        if (v37 != (char *)buf)
          free(v37);
      }
    }
    else
    {
      std::ostream::write(v1 + 136);
    }
    if ((_QWORD)__p)
    {
      *((_QWORD *)&__p + 1) = __p;
      operator delete((void *)__p);
    }
  }
  else
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v30 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEFAULT))
    {
      v31 = (_QWORD *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0)
        v31 = (_QWORD *)*v31;
      *(_DWORD *)buf = 136446210;
      v43 = v31;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "ProtobufSerializer,#p%{public}s,append dropped since closed", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v32 = (_QWORD *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0)
        v32 = (_QWORD *)*v32;
      LODWORD(__p) = 136446210;
      *(_QWORD *)((char *)&__p + 4) = v32;
      v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 0, "ProtobufSerializer,#p%{public}s,append dropped since closed", &__p, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::append(const std::string &)_block_invoke", "%s\n", v33);
      if (v33 != (char *)buf)
        free(v33);
    }
  }
}

void sub_100054CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100054CE0(unint64_t *a1, size_t __sz)
{
  unint64_t v2;
  char *v5;
  _BYTE *v6;
  char *v7;
  _BYTE *v8;
  char *v9;
  char v10;

  v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      sub_100259694();
    v5 = (char *)a1[1];
    v6 = operator new(__sz);
    v7 = &v5[(_QWORD)v6 - v2];
    v8 = v7;
    if (v5 != (char *)v2)
    {
      v9 = &v5[~v2];
      do
      {
        v10 = *--v5;
        (v9--)[(_QWORD)v6] = v10;
      }
      while (v5 != (char *)v2);
      v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
      operator delete((void *)v2);
  }
}

void sub_100054D88(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  compression_stream *v7;
  compression_status v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  uint64_t v13;
  NSObject *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  compression_status v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  char *v22;
  uint64_t v23;
  int v24;
  _BYTE v25[10];
  uint64_t v26;
  uint8_t buf[4];
  _BYTE v28[10];
  uint64_t v29;

  if (*(_BYTE *)(a1 + 72))
  {
    v6 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)(a1 + 32) = v6;
    v7 = (compression_stream *)(a1 + 32);
    *(_QWORD *)(a1 + 48) = a2;
    *(_QWORD *)(a1 + 56) = a3;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 16) - v6;
    v8 = compression_stream_process((compression_stream *)(a1 + 32), 0);
    if (v8 == COMPRESSION_STATUS_OK)
    {
      do
      {
        v9 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
        v10 = *(_QWORD *)(a1 + 40);
        v11 = v9 - v10;
        if (v9 == v10)
        {
          if (!*(_QWORD *)(a1 + 56))
            return;
        }
        else
        {
          if (v9 < v10)
          {
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v12 = qword_1022A0168;
            if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
            {
              v13 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
              *(_DWORD *)buf = 134349312;
              *(_QWORD *)v28 = v11;
              *(_WORD *)&v28[8] = 2050;
              v29 = v13;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "ProtobufCompressor,excessive bytes_to_print,%{public}zu,limit,%{public}zu", buf, 0x16u);
            }
            if (sub_1001BFF7C(115, 0))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0160 != -1)
                dispatch_once(&qword_1022A0160, &stru_1021A2F18);
              v19 = *(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8);
              v24 = 134349312;
              *(_QWORD *)v25 = v11;
              *(_WORD *)&v25[8] = 2050;
              v26 = v19;
              LODWORD(v23) = 22;
              v20 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufCompressor,excessive bytes_to_print,%{public}zu,limit,%{public}zu", &v24, v23);
              sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v20);
              if (v20 != (char *)buf)
                free(v20);
            }
          }
          if ((*((_BYTE *)a4 + *(_QWORD *)(*a4 - 24) + 32) & 5) != 0)
          {
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v14 = qword_1022A0168;
            if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "ProtobufCompressor,write,bad stream", buf, 2u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0160 != -1)
                dispatch_once(&qword_1022A0160, &stru_1021A2F18);
              LOWORD(v24) = 0;
              LODWORD(v23) = 2;
              v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "ProtobufCompressor,write,bad stream", &v24, v23);
              sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v15);
              if (v15 != (char *)buf)
                free(v15);
            }
          }
          else
          {
            std::ostream::write(a4);
          }
          v16 = *(_QWORD *)(a1 + 8);
          v17 = *(_QWORD *)(a1 + 16) - v16;
          *(_QWORD *)(a1 + 32) = v16;
          *(_QWORD *)(a1 + 40) = v17;
        }
        v18 = compression_stream_process(v7, 0);
      }
      while (v18 == COMPRESSION_STATUS_OK);
      v8 = v18;
    }
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v21 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)v28 = v8 == COMPRESSION_STATUS_END;
      *(_WORD *)&v28[4] = 1026;
      *(_DWORD *)&v28[6] = v8 == COMPRESSION_STATUS_ERROR;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "ProtobufCompressor,write,unexpected status,isEND,%{public}d,isERROR,%{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v24 = 67240448;
      *(_DWORD *)v25 = v8 == COMPRESSION_STATUS_END;
      *(_WORD *)&v25[4] = 1026;
      *(_DWORD *)&v25[6] = v8 == COMPRESSION_STATUS_ERROR;
      LODWORD(v23) = 14;
      v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufCompressor,write,unexpected status,isEND,%{public}d,isERROR,%{public}d", &v24, v23);
      sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::StreamingCompressor::write(const uint8_t *const, const size_t, std::ofstream &)", "%s\n", v22);
      if (v22 != (char *)buf)
        free(v22);
    }
  }
}

uint64_t sub_1000552B8(uint64_t a1, int **a2)
{
  NSObject *v4;
  int *v5;
  int v6;
  int v7;
  int v8;
  int *v9;
  int **v10;
  int *v11;
  NSObject *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int *v17;
  int *v18;
  int *v19;
  uint64_t v20;
  int v21;
  int v22;
  int *v23;
  int *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  int *v30;
  int v31;
  int v32;
  int *v33;
  int *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  int *v40;
  char *v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  _DWORD v51[2];
  __int16 v52;
  int v53;
  uint8_t buf[4];
  int v55;
  __int16 v56;
  int v57;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#gnssband,build band vector", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v51[0]) = 0;
    v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssband,build band vector", v51, 2);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::getActiveGnssBands(std::vector<CLGnssBandData> &)", "%s\n", v47);
    if (v47 != (char *)buf)
      free(v47);
  }
  v5 = *a2;
  a2[1] = *a2;
  if (*(_QWORD *)(a1 + 768))
  {
    v6 = *(_DWORD *)(a1 + 12);
    v7 = *(_DWORD *)(a1 + 16);
    v8 = v7 | 1;
    v10 = a2 + 2;
    v9 = a2[2];
    if (v5 >= v9)
    {
      v14 = (char *)v9 - (char *)v5;
      v15 = ((char *)v9 - (char *)v5) >> 1;
      if (v15 <= 1)
        v15 = 1;
      if (v14 >= 0x7FFFFFFFFFFFFFFCLL)
        v16 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v17 = (int *)sub_100260634((uint64_t)(a2 + 2), v16);
      v18 = *a2;
      v19 = a2[1];
      v9 = &v17[v20];
      *v17 = v8;
      v11 = v17 + 1;
      while (v19 != v18)
      {
        v21 = *--v19;
        *--v17 = v21;
      }
      *a2 = v17;
      a2[1] = v11;
      a2[2] = v9;
      if (v18)
      {
        operator delete(v18);
        v9 = *v10;
      }
    }
    else
    {
      *v5 = v8;
      v11 = v5 + 1;
    }
    v22 = v7 | 4;
    a2[1] = v11;
    if (v11 >= v9)
    {
      v24 = *a2;
      v25 = v11 - *a2;
      v26 = v25 + 1;
      if ((unint64_t)(v25 + 1) >> 62)
        sub_100259694();
      v27 = (char *)v9 - (char *)v24;
      if (v27 >> 1 > v26)
        v26 = v27 >> 1;
      if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
        v28 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v28 = v26;
      if (v28)
      {
        v29 = (char *)sub_100260634((uint64_t)(a2 + 2), v28);
        v24 = *a2;
        v11 = a2[1];
      }
      else
      {
        v29 = 0;
      }
      v30 = (int *)&v29[4 * v25];
      v9 = (int *)&v29[4 * v28];
      *v30 = v22;
      v23 = v30 + 1;
      while (v11 != v24)
      {
        v31 = *--v11;
        *--v30 = v31;
      }
      *a2 = v30;
      a2[1] = v23;
      a2[2] = v9;
      if (v24)
      {
        operator delete(v24);
        v9 = *v10;
      }
    }
    else
    {
      *v11 = v22;
      v23 = v11 + 1;
    }
    v32 = v6 | 2;
    a2[1] = v23;
    if (v23 >= v9)
    {
      v34 = *a2;
      v35 = v23 - *a2;
      v36 = v35 + 1;
      if ((unint64_t)(v35 + 1) >> 62)
        sub_100259694();
      v37 = (char *)v9 - (char *)v34;
      if (v37 >> 1 > v36)
        v36 = v37 >> 1;
      if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFFCLL)
        v38 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v38 = v36;
      if (v38)
      {
        v39 = (char *)sub_100260634((uint64_t)(a2 + 2), v38);
        v34 = *a2;
        v23 = a2[1];
      }
      else
      {
        v39 = 0;
      }
      v40 = (int *)&v39[4 * v35];
      v41 = &v39[4 * v38];
      *v40 = v32;
      v33 = v40 + 1;
      while (v23 != v34)
      {
        v42 = *--v23;
        *--v40 = v42;
      }
      *a2 = v40;
      a2[1] = v33;
      a2[2] = (int *)v41;
      if (v34)
        operator delete(v34);
    }
    else
    {
      *v23 = v32;
      v33 = v23 + 1;
    }
    a2[1] = v33;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v43 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v45 = *(_DWORD *)(a1 + 12);
      v44 = *(_DWORD *)(a1 + 16);
      *(_DWORD *)buf = 67109376;
      v55 = v44;
      v56 = 1024;
      v57 = v45;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#gnssband,getActiveGnssBands,L1,%d,L5,%d", buf, 0xEu);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v49 = *(_DWORD *)(a1 + 12);
    v48 = *(_DWORD *)(a1 + 16);
    v51[0] = 67109376;
    v51[1] = v48;
    v52 = 1024;
    v53 = v49;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssband,getActiveGnssBands,L1,%d,L5,%d", v51, 14);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::getActiveGnssBands(std::vector<CLGnssBandData> &)", "%s\n", v13);
LABEL_72:
    if (v13 != (char *)buf)
      free(v13);
    return 1;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gnssband,getActiveGnssBands,no active bands", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    LOWORD(v51[0]) = 0;
    LODWORD(v50) = 2;
    v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssband,getActiveGnssBands,no active bands", v51, v50);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssController::getActiveGnssBands(std::vector<CLGnssBandData> &)", "%s\n", v13);
    goto LABEL_72;
  }
  return 1;
}

id sub_1000558D8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  unint64_t v6;
  id v7;
  const __CFString *v8;
  const __CFString *v9;
  const __CFString *v10;
  id v11;
  id v12;
  id v13;
  NSObject *v14;
  NSObject *v15;
  int v17;
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  void *v22;

  sub_100197040();
  if (sub_1001974CC())
  {
    v5 = sub_100197514(a2, a3);
    if (v5)
    {
      v6 = v5;
      if (v5 == 2)
      {
        v7 = objc_alloc((Class)STExecutableIdentity);
        v8 = CFSTR("/System/Library/LocationBundles/Traffic.bundle");
LABEL_7:
        v11 = objc_msgSend(v7, "initWithBundlePath:", v8);
        return _objc_msgSend(objc_alloc((Class)STLocationStatusDomainLocationAttribution), "initWithLocationState:activityAttribution:eligibleDisplayModes:", 1, objc_msgSend(objc_alloc((Class)STActivityAttribution), "initWithAttributedEntity:", objc_msgSend(objc_alloc((Class)STAttributedEntity), "initWithExecutableIdentity:website:systemService:", v11, objc_msgSend(a2, "website"), (v6 >> 1) & 1)), v6);
      }
      v9 = (const __CFString *)objc_msgSend(a2, "bundlePath");
      if (v9)
      {
        v10 = v9;
        v7 = objc_alloc((Class)STExecutableIdentity);
        v8 = v10;
        goto LABEL_7;
      }
      v12 = objc_msgSend(a2, "executablePath");
      if (v12)
      {
        v11 = objc_msgSend(objc_alloc((Class)STExecutableIdentity), "initWithExecutablePath:", v12);
        return _objc_msgSend(objc_alloc((Class)STLocationStatusDomainLocationAttribution), "initWithLocationState:activityAttribution:eligibleDisplayModes:", 1, objc_msgSend(objc_alloc((Class)STActivityAttribution), "initWithAttributedEntity:", objc_msgSend(objc_alloc((Class)STAttributedEntity), "initWithExecutableIdentity:website:systemService:", v11, objc_msgSend(a2, "website"), (v6 >> 1) & 1)), v6);
      }
      v13 = objc_msgSend(a2, "bundleId");
      if (v13)
      {
        v11 = objc_msgSend(objc_alloc((Class)STExecutableIdentity), "initWithApplicationBundleIdentifier:", v13);
        return _objc_msgSend(objc_alloc((Class)STLocationStatusDomainLocationAttribution), "initWithLocationState:activityAttribution:eligibleDisplayModes:", 1, objc_msgSend(objc_alloc((Class)STActivityAttribution), "initWithAttributedEntity:", objc_msgSend(objc_alloc((Class)STAttributedEntity), "initWithExecutableIdentity:website:systemService:", v11, objc_msgSend(a2, "website"), (v6 >> 1) & 1)), v6);
      }
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v14 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v17 = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2114;
        v22 = a2;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"#CreateAttribution CLClientKeyPath identity did not return a valid anchor type\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v17, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
      }
      v15 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v17 = 68289282;
        v18 = 0;
        v19 = 2082;
        v20 = "";
        v21 = 2114;
        v22 = a2;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "#CreateAttribution CLClientKeyPath identity did not return a valid anchor type", "{\"msg%{public}.0s\":\"#CreateAttribution CLClientKeyPath identity did not return a valid anchor type\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)&v17, 0x1Cu);
      }
    }
  }
  return 0;
}

void sub_100055C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100055C4C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v5;
  uint64_t *v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t *v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  uint64_t *v16;

  v5 = objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "vendor"), "proxyForService:", CFSTR("CLBeaconFenceAuthorizationManager"));
  if (*((char *)a2 + 23) >= 0)
    v6 = a2;
  else
    v6 = (uint64_t *)*a2;
  objc_msgSend(v5, "syncgetFences:forBundle:", a3, +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6));
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_102152DC0);
  v7 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_INFO))
  {
    v8 = *(_QWORD *)(a3 + 16);
    if (*((char *)a2 + 23) >= 0)
      v9 = a2;
    else
      v9 = (uint64_t *)*a2;
    v10[0] = 68289538;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2050;
    v14 = v8;
    v15 = 2082;
    v16 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"iB: Retrieved monitored regions\", \"numRegions\":%{public}lu, \"bundle\":%{public, location:escape_only}s}", (uint8_t *)v10, 0x26u);
  }
}

BOOL sub_100055DD0(uint64_t a1, uint64_t a2)
{
  return a1 == a2 || strcmp((const char *)(a1 + 8), (const char *)(a2 + 8)) == 0;
}

void sub_100055E04(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLHarvestControllerExternal::onManagerNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 24), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021AF100);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLHarvestControllerExternal::onManagerNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021AF100);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLHarvestControllerExternal::onManagerNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_100237E34(*(_QWORD *)(a4 + 40), a1, *a2, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_100055FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_100055FEC(uint64_t a1, uint64_t a2)
{
  double v4;
  NSObject *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _DWORD *v10;
  NSObject *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  _QWORD *v36;
  _BYTE *v37;
  unsigned int v38;
  double v43;
  NSObject *v44;
  uint64_t v46;
  float v47;
  float v48;
  float v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _BOOL4 v68;
  _BOOL4 v69;
  unsigned __int8 *v70;
  _BOOL4 v71;
  uint64_t v72;
  double v73;
  double v74;
  NSObject *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _BOOL4 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  unint64_t *p_shared_owners;
  NSObject *v110;
  NSObject *v111;
  const char *v112;
  uint8_t *v113;
  int v114;
  const char *v115;
  uint8_t *v116;
  const char *v117;
  uint8_t *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  int v122;
  int v123;
  __int16 v124;
  _OWORD v125[8];
  _OWORD v126[2];
  _BYTE v127[513];
  uint64_t v128;
  std::__shared_weak_count *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  char v136;
  double v137;
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  _OWORD v145[2];
  _QWORD v146[65];
  uint64_t v147;
  std::__shared_weak_count *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  char v155;
  std::__shared_weak_count *v156;
  void *__p;
  char v158;
  std::__shared_weak_count *v159;
  id v160;
  uint8_t buf[4];
  _BYTE v162[14];
  __int16 v163;
  const char *v164;
  __int16 v165;
  uint64_t v166;
  __int16 v167;
  double v168;
  __int16 v169;
  uint64_t v170;
  __int16 v171;
  uint64_t v172;
  __int16 v173;
  uint64_t v174;
  __int16 v175;
  uint64_t v176;
  __int16 v177;
  int v178;
  __int16 v179;
  int v180;
  __int16 v181;
  uint64_t v182;
  __int16 v183;
  uint64_t v184;
  __int16 v185;
  uint64_t v186;
  __int16 v187;
  uint64_t v188;
  __int16 v189;
  int v190;
  __int16 v191;
  uint64_t v192;
  __int16 v193;
  uint64_t v194;
  __int16 v195;
  uint64_t v196;
  __int16 v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  __int16 v201;
  int v202;
  __int16 v203;
  int v204;
  __int16 v205;
  uint64_t v206;
  __int16 v207;
  uint64_t v208;
  __int16 v209;
  int v210;
  __int16 v211;
  uint64_t v212;
  __int16 v213;
  uint64_t v214;
  __int16 v215;
  int v216;
  __int16 v217;
  int v218;
  uint64_t v219[23];
  std::__shared_weak_count *v220;

  v4 = sub_1001FCBB4();
  v137 = v4;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v5 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v6 = *(unsigned __int8 *)(a2 + 304);
    *(_DWORD *)buf = 67240448;
    *(_DWORD *)v162 = v6;
    *(_WORD *)&v162[4] = 2050;
    *(double *)&v162[6] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "validFix,%{public}d,machCont,%{public}.3lf", buf, 0x12u);
  }
  v7 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v7)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v114 = *(unsigned __int8 *)(a2 + 304);
    *(_DWORD *)v138 = 67240448;
    *(_DWORD *)&v138[4] = v114;
    *(_WORD *)&v138[8] = 2050;
    *(double *)&v138[10] = v137;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "validFix,%{public}d,machCont,%{public}.3lf", v138, 18);
    v116 = (uint8_t *)v115;
    v7 = sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v115);
    if (v116 != buf)
      free(v116);
  }
  v8 = *(_QWORD *)(a1 + 1048);
  if (v8)
  {
    v9 = *(_DWORD *)(a1 + 824);
    *(_QWORD *)(v8 + 11664) = *(_QWORD *)(a1 + 816);
    *(_DWORD *)(v8 + 11556) = v9;
  }
  if (!*(_BYTE *)(a2 + 304))
  {
    sub_1000570AC(v7, 0);
    if (vabdd_f64(v137, *(double *)(a1 + 2784)) >= 0.75)
    {
      sub_10023DEF4(a1, v137);
      v55 = *(_QWORD *)(a1 + 3048);
      if (!v55)
        goto LABEL_65;
      if (!sub_100C91410(v55) || (v57 = sub_10084BB5C(a1, (uint64_t *)&v137), (v57 & 1) != 0))
      {
        v55 = *(_QWORD *)(a1 + 3048);
        if (v55)
        {
          v55 = sub_100C91410(v55);
          if ((v55 & 1) != 0)
            return;
        }
LABEL_65:
        sub_1000570AC(v55, 1);
        return;
      }
      sub_1000570AC(v57, 1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v111 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)v162 = v137;
        _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_INFO, "#Raven,no yield now,%.3lf", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
      {
LABEL_177:
        *(_DWORD *)v138 = 134217984;
        *(double *)&v138[4] = v137;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Raven,no yield now,%.3lf", COERCE_DOUBLE(v138));
        v113 = (uint8_t *)v112;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v112);
        if (v113 != buf)
          free(v113);
        return;
      }
    }
    else
    {
      v55 = *(_QWORD *)(a1 + 3048);
      if (!v55)
        goto LABEL_65;
      if (!sub_100C91410(v55) || (v56 = sub_10084BB5C(a1, (uint64_t *)&v137), (v56 & 1) != 0))
      {
        v55 = *(_QWORD *)(a1 + 3048);
        if (v55)
        {
          v55 = sub_100C91410(v55);
          if ((v55 & 1) != 0)
            return;
        }
        goto LABEL_65;
      }
      sub_1000570AC(v56, 1);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v110 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134217984;
        *(double *)v162 = v137;
        _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_INFO, "#Raven,no yield now,%.3lf", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        return;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_177;
    }
    dispatch_once(&qword_1022A0070, &stru_102156068);
    goto LABEL_177;
  }
  v10 = (_DWORD *)(a2 + 288);
  if (*(_DWORD *)(a2 + 288) == 5 && vabdd_f64(v137, *(double *)(a1 + 816)) < 1.9)
    *v10 = *(_DWORD *)(a1 + 824);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v11 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v12 = *(float *)(a2 + 44);
    v13 = *(_QWORD *)a2;
    v14 = *(_QWORD *)(a2 + 8);
    v15 = *(_QWORD *)(a2 + 16);
    v16 = *(_QWORD *)(a2 + 24);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_DWORD *)(a2 + 40);
    v19 = *(unsigned __int8 *)(a2 + 48);
    v21 = *(_QWORD *)(a2 + 56);
    v20 = *(_QWORD *)(a2 + 64);
    v23 = *(_QWORD *)(a2 + 72);
    v22 = *(_QWORD *)(a2 + 80);
    v24 = *(_DWORD *)(a2 + 88);
    v26 = *(_QWORD *)(a2 + 96);
    v25 = *(_QWORD *)(a2 + 104);
    v28 = *(_QWORD *)(a2 + 112);
    v27 = *(_QWORD *)(a2 + 120);
    v29 = *(_QWORD *)(a2 + 128);
    v30 = *(_DWORD *)(a2 + 140);
    v31 = *(unsigned __int8 *)(a2 + 144);
    v33 = *(_QWORD *)(a2 + 152);
    v32 = *(_QWORD *)(a2 + 160);
    v34 = *(unsigned __int8 *)(a2 + 168);
    v120 = *(_QWORD *)(a2 + 176);
    v121 = *(_QWORD *)(a2 + 184);
    v122 = *(_DWORD *)(a2 + 292);
    v123 = *(_DWORD *)(a2 + 288);
    *(_DWORD *)buf = 68296195;
    *(_DWORD *)v162 = 0;
    *(_WORD *)&v162[4] = 2082;
    *(_QWORD *)&v162[6] = "";
    v163 = 2082;
    v164 = "PerEpochData";
    v165 = 2050;
    v166 = v13;
    v167 = 2050;
    v168 = v12;
    v169 = 2050;
    v170 = v14;
    v171 = 2050;
    v172 = v15;
    v173 = 2050;
    v174 = v16;
    v175 = 2050;
    v176 = v17;
    v177 = 1026;
    v178 = v18;
    v179 = 1026;
    v180 = v19;
    v181 = 2049;
    v182 = v21;
    v183 = 2049;
    v184 = v20;
    v185 = 2049;
    v186 = v23;
    v10 = (_DWORD *)(a2 + 288);
    v187 = 2050;
    v188 = v22;
    v189 = 1026;
    v190 = v24;
    v191 = 2050;
    v192 = v26;
    v193 = 2050;
    v194 = v25;
    v195 = 2050;
    v196 = v28;
    v197 = 2050;
    v198 = v27;
    v199 = 2050;
    v200 = v29;
    v201 = 1026;
    v202 = v30;
    v203 = 1026;
    v204 = v31;
    v205 = 2050;
    v206 = v33;
    v207 = 2050;
    v208 = v32;
    v209 = 1026;
    v210 = v34;
    v211 = 2050;
    v212 = v120;
    v213 = 2050;
    v214 = v121;
    v215 = 1026;
    v216 = v122;
    v217 = 1026;
    v218 = v123;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"gpsNs\":%{public}lld, \"gpsTimeUncMs\":\"%{public}f\", \"cfTime\":\"%{public}f\", \"cfTimeGps\":\"%{public}f\", \"machTime\":\"%{public}f\", \"machContinuousTime\":\"%{public}f\", \"leapSeconds\":%{public}d, \"posValid\":%{public}hhd, \"lat\":\"%{private}.08f\", \"lon\":\"%{private}.08f\", \"altitude\":\"%{private}f\", \"undulation\":\"%{public}f\", \"undulationModel\":%{public}d, \"hunc\":\"%{public}f\", \"vunc\":\"%{public}f\", \"semiMaj\":\"%{public}f\", \"semiMin\":\"%{public}f\", \"semiMajAz\":\"%{public}f\", \"reliability\":%{public}d, \"speedValid\":%{public}hhd, \"speed\":\"%{public}f\", \"speedUnc\":\"%{public}f\", \"courseValid\":%{public}hhd, \"course\":\"%{public}f\", \"courseUnc\":\"%{public}f\", \"imag\":%{public}d, \"gnssContent\":%{public}d}", buf, 0x10Au);
  }
  if (!*(_QWORD *)(a1 + 1208)
    || (v35 = sub_10179F6F0(a1 + 2800, (double *)(a2 + 56), (double *)(a2 + 64)),
        sub_10173C6E0(*(_QWORD *)(a1 + 1208), a2, *(_QWORD *)a1 + 8, v35),
        *(_DWORD *)(a2 + 292) != 3)
    || *(_BYTE *)(a1 + 1271))
  {
    v36 = *(_QWORD **)(a1 + 760);
    if (v36)
      sub_10171D200(v36, a2);
    v37 = *(_BYTE **)(a1 + 1256);
    if (v37)
      sub_100A0E7D0(v37, a2);
    v38 = *(unsigned __int8 *)(a1 + 80);
    if (*(_BYTE *)(a1 + 80))
      v38 = *(_DWORD *)(a1 + 804) + 1;
    *(_DWORD *)(a1 + 804) = v38;
    if (*(_BYTE *)(a2 + 144) && *(double *)(a2 + 152) > 0.0)
      *(double *)(a1 + 808) = v137;
    if (v38 <= 9 && *(double *)(a2 + 184) > 90.0)
    {
      *(_BYTE *)(a2 + 168) = 0;
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)(a2 + 176) = _Q0;
    }
    if (*(double *)(a1 + 808) + 30.0 < v137)
    {
      v43 = *(double *)(a2 + 184);
      if (v43 <= 0.0 || v43 >= 45.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v44 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)v162 = 0;
          *(_WORD *)&v162[4] = 2082;
          *(_QWORD *)&v162[6] = "";
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Course invalidated due to extended static period\"}", buf, 0x12u);
        }
        *(_BYTE *)(a2 + 168) = 0;
        __asm { FMOV            V0.2D, #-1.0 }
        *(_OWORD *)(a2 + 176) = _Q0;
      }
    }
    v46 = *(_QWORD *)(a1 + 1216);
    if (v46 && *(_BYTE *)(a2 + 144))
    {
      v47 = *(double *)(a2 + 152);
      *(float *)buf = v47;
      v48 = *(double *)(a2 + 160);
      *(float *)v138 = v48;
      sub_100E5AC18(v46, buf, (float *)v138, (double *)(a2 + 8), 1);
      *(double *)(a2 + 152) = v49;
    }
    v50 = *(_QWORD *)(a1 + 1072);
    if (v50)
    {
      if (*(_BYTE *)(a1 + 80))
      {
        if (*(_BYTE *)(a2 + 48))
        {
          if (sub_100217C88(v50, a2))
          {
            *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 88);
            *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 104);
            *(_DWORD *)(a2 + 88) = *(_DWORD *)(a1 + 120);
            *(_QWORD *)(a2 + 152) = 0;
            if (*(_BYTE *)(a1 + 200))
            {
              *(_BYTE *)(a2 + 168) = 1;
              *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 208);
            }
          }
        }
      }
    }
    v51 = *(_QWORD *)(a1 + 1072);
    if (v51)
    {
      if (*(_BYTE *)(a2 + 144))
      {
        if (sub_100A0E358(v51, *(double *)(a2 + 152), *(double *)(a2 + 160)))
        {
          *(_QWORD *)(a2 + 152) = 0;
          if (*(_BYTE *)(a1 + 200))
          {
            *(_BYTE *)(a2 + 168) = 1;
            *(_OWORD *)(a2 + 176) = *(_OWORD *)(a1 + 208);
          }
        }
      }
    }
    v52 = *(_QWORD *)(a1 + 1112);
    if (v52)
    {
      sub_100168414(v52, *(_DWORD *)(a2 + 88), *(double *)(a2 + 80), *(double *)(a2 + 8));
      sub_10015F970(*(_QWORD *)(a1 + 1112), (_QWORD *)(a2 + 80), (int *)(a2 + 88), *(double *)(a2 + 8));
    }
    v53 = *(_QWORD *)(a1 + 2552);
    if (v53)
    {
      v54 = *(_QWORD *)(a1 + 1072);
      if (v54)
        sub_100A0E3C8(v54, (uint64_t)buf);
      else
        CLMotionActivity::getInit(0);
      sub_10098B81C(v53, a2, (uint64_t)buf);
    }
    sub_10084B8FC(a2, 1, *(_BYTE *)(a1 + 1269), (uint64_t)buf);
    v58 = *(_QWORD *)(a1 + 1184);
    if (v58)
    {
      sub_10174FA38(v58, *(_QWORD *)a1 + 8, (_QWORD *)(a2 + 56), (_QWORD *)(a2 + 64), (_QWORD *)(a2 + 72), (double *)(a2 + 96), (double *)(a2 + 104));
      if ((sub_100241564() & 1) == 0)
        sub_10174FC7C(*(_QWORD *)(a1 + 1184), a2 + 248);
    }
    v59 = *(_QWORD *)(a1 + 1104);
    if (v59)
      sub_101793134(v59, (__int128 *)buf, *(unsigned __int8 *)(a1 + 2546));
    v60 = *(_QWORD *)(a1 + 1072);
    if (v60)
      sub_10022FE84(v60, a2);
    v61 = *(_QWORD *)(a1 + 1088);
    if (v61)
      sub_10022A110(v61);
    v62 = *(_QWORD *)(a1 + 1048);
    if (v62)
      sub_10022B740(v62, a2);
    v63 = *(_QWORD *)(a1 + 1160);
    if (v63)
      sub_1017E1870(v63, a2);
    v64 = *(_QWORD *)(a1 + 1200);
    if (v64 && !*(_BYTE *)(a1 + 784))
      sub_101787064(v64, (double *)buf);
    v65 = *(_QWORD *)(a1 + 1240);
    if (v65)
      sub_1011A6DE0(v65, a2);
    *(double *)(a1 + 2784) = v137;
    sub_10084BC54((_BYTE *)a1, a2);
    sub_10084C3D8(v66, (uint64_t)buf, 0);
    v67 = *(_QWORD *)(a1 + 1248);
    if (v67)
      v68 = !sub_100F6DAC4(v67, v137);
    else
      v68 = 0;
    if (!*(_QWORD *)(a1 + 360))
    {
LABEL_151:
      v93 = *(_QWORD *)(a1 + 456);
      if (v93)
        (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v93 + 48))(v93, buf);
      v94 = *(_QWORD *)(a1 + 1232);
      if (v94)
      {
        v95 = *(_QWORD *)(a1 + 1248);
        if (v95)
        {
          v96 = sub_100F6DCC4(v95, v137);
          sub_100DA23AC(v94, !v96);
        }
      }
      v97 = *(_OWORD *)a2;
      v98 = *(_OWORD *)(a2 + 16);
      v99 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 80) = v99;
      *(_OWORD *)(a1 + 32) = v97;
      *(_OWORD *)(a1 + 48) = v98;
      v100 = *(_OWORD *)(a2 + 64);
      v101 = *(_OWORD *)(a2 + 80);
      v102 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 144) = v102;
      *(_OWORD *)(a1 + 96) = v100;
      *(_OWORD *)(a1 + 112) = v101;
      v103 = *(_OWORD *)(a2 + 128);
      v104 = *(_OWORD *)(a2 + 144);
      v105 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 208) = v105;
      *(_OWORD *)(a1 + 160) = v103;
      *(_OWORD *)(a1 + 176) = v104;
      v106 = *(_OWORD *)(a2 + 192);
      v107 = *(_OWORD *)(a2 + 208);
      v108 = *(_OWORD *)(a2 + 224);
      *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 240);
      *(_OWORD *)(a1 + 240) = v107;
      *(_OWORD *)(a1 + 256) = v108;
      *(_OWORD *)(a1 + 224) = v106;
      if (a1 + 32 != a2)
      {
        *(_DWORD *)(a1 + 312) = *(_DWORD *)(a2 + 280);
        sub_100858F3C((_QWORD *)(a1 + 280), *(uint64_t **)(a2 + 264), 0);
      }
      *(_OWORD *)(a1 + 320) = *(_OWORD *)v10;
      v86 = v220;
      if (v220)
      {
        p_shared_owners = (unint64_t *)&v220->__shared_owners_;
        do
          v88 = __ldaxr(p_shared_owners);
        while (__stlxr(v88 - 1, p_shared_owners));
LABEL_161:
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          std::__shared_weak_count::__release_weak(v86);
        }
        return;
      }
      return;
    }
    if (*(_QWORD *)(a1 + 3048))
      v69 = 0;
    else
      v69 = *(_QWORD *)(a1 + 768) != 0;
    v70 = *(unsigned __int8 **)(a1 + 3096);
    if (v70)
      v71 = *v70 != 0;
    else
      v71 = 1;
    v72 = *(_QWORD *)(a1 + 3088);
    if (v72)
    {
      if (*(_BYTE *)(v72 + 32))
      {
        v73 = *(double *)(v72 + 24);
        if (v73 > v137)
        {
          LODWORD(v72) = 0;
          goto LABEL_142;
        }
        v74 = v137 + *(double *)(v72 + 8) - v73;
      }
      else
      {
        v74 = *(double *)(v72 + 8);
      }
      LODWORD(v72) = v74 > (double)*(int *)(v72 + 16) || *(_BYTE *)(v72 + 20) == 0;
    }
LABEL_142:
    v90 = (!v69 || !v71) | v72;
    if ((*(_DWORD *)(a1 + 600) & 0xFFFFFFFE) == 0xA)
      v90 = 1;
    if (((v90 | v68) & 1) != 0)
    {
      if (v68 && v71)
        sub_10001C254((_QWORD *)a1);
    }
    else
    {
      sub_10084C714((_QWORD *)a1, v137);
    }
    v91 = sub_10084CDA8(a1, v219, (uint64_t)buf);
    if ((v91 & 1) == 0)
    {
      sub_10084C3D8(v91, (uint64_t)buf, 1);
      v92 = *(_QWORD *)(a1 + 360);
      if (!v92)
        sub_10025FD1C();
      (*(void (**)(uint64_t, uint8_t *))(*(_QWORD *)v92 + 48))(v92, buf);
    }
    goto LABEL_151;
  }
  sub_10023DEF4(a1, v137);
  sub_100129CA0((uint64_t)v138);
  sub_10084B8FC(a2, 0, 0, (uint64_t)v125);
  v143 = v125[6];
  v144 = v125[7];
  v145[0] = v126[0];
  *(_OWORD *)((char *)v145 + 12) = *(_OWORD *)((char *)v126 + 12);
  v139 = v125[2];
  v140 = v125[3];
  v141 = v125[4];
  v142 = v125[5];
  *(_OWORD *)v138 = v125[0];
  *(_OWORD *)&v138[16] = v125[1];
  memcpy(v146, v127, 0x201uLL);
  sub_100349198(&v147, &v128);
  v153 = v134;
  v154 = v135;
  v149 = v130;
  v150 = v131;
  v151 = v132;
  v152 = v133;
  v155 = v136;
  *(double *)&v146[43] = v137;
  if (*(_QWORD *)(a1 + 520))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v75 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_INFO, "Notifying al to WiFi harvester", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v124 = 0;
      LODWORD(v119) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "Notifying al to WiFi harvester", &v124, v119);
      v118 = (uint8_t *)v117;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssController::handleLocationResponse(std::optional<GNSS::PerEpochData> &&)", "%s\n", v117);
      if (v118 != buf)
        free(v118);
    }
    v76 = *(_QWORD *)(a1 + 520);
    if (!v76)
      sub_10025FD1C();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v76 + 48))(v76, v138);
  }
  v77 = v129;
  if (v129)
  {
    v78 = (unint64_t *)&v129->__shared_owners_;
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }

  v80 = v159;
  if (v159)
  {
    v81 = (unint64_t *)&v159->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  if (v158 < 0)
    operator delete(__p);
  v83 = v156;
  if (v156)
  {
    v84 = (unint64_t *)&v156->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
      std::__shared_weak_count::__release_weak(v83);
    }
  }
  v86 = v148;
  if (v148)
  {
    v87 = (unint64_t *)&v148->__shared_owners_;
    do
      v88 = __ldaxr(v87);
    while (__stlxr(v88 - 1, v87));
    goto LABEL_161;
  }
}

void sub_10005704C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_100261F44(v1);
  sub_1004B4F0C((uint64_t)&STACK[0x360]);
  _Unwind_Resume(a1);
}

void sub_1000570AC(uint64_t a1, int a2)
{
  NSObject *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  uint8_t *v7;
  int v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102156548);
  v3 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v4 = "Vendor";
    if (a2)
      v4 = "";
    *(_DWORD *)buf = 136446210;
    v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "@ClxGps%{public}s, Fix, 0, ll, N/A", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102156548);
    v5 = "Vendor";
    if (a2)
      v5 = "";
    v8 = 136446210;
    v9 = v5;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 0, "@ClxGps%{public}s, Fix, 0, ll, N/A", &v8, 12);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssController::logLocationEmpty(BOOL)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
}

uint64_t sub_100057284(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v6 = a1 + 104;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 16))(a1 + 104);
  *(CFAbsoluteTime *)(a1 + 400) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 408) = a2;
  *(_DWORD *)(a1 + 412) = a3;
  if (a2 > 11804)
  {
    if (a2 > 15651)
    {
      if (a2 > 18199)
      {
        if (a2 <= 19149)
        {
          if (a2 > 19029)
          {
            if (a2 == 19030)
              goto LABEL_61;
            v7 = 19090;
            goto LABEL_54;
          }
          if (a2 == 18200)
            goto LABEL_61;
          v10 = 18240;
        }
        else
        {
          if (a2 > 515620)
          {
            if (a2 == 515621 || a2 == 515652)
              goto LABEL_61;
            v7 = 519150;
            goto LABEL_54;
          }
          if (a2 == 19150)
            goto LABEL_57;
          v10 = 90603;
        }
        if (a2 != v10)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        goto LABEL_57;
      }
      if (a2 <= 15732)
      {
        if ((a2 - 15652) > 0x3B)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        v8 = 1 << (a2 - 36);
        v9 = 0x800000000840101;
LABEL_60:
        if ((v8 & v9) == 0)
          return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
        goto LABEL_61;
      }
      if (a2 > 18049)
      {
        if (a2 == 18050)
          goto LABEL_61;
        v7 = 18100;
      }
      else
      {
        if (a2 == 15733)
          goto LABEL_61;
        v7 = 17150;
      }
    }
    else if (a2 > 15329)
    {
      if ((a2 - 15560) <= 0x3C && ((1 << (a2 + 56)) & 0x1004000100000001) != 0
        || (a2 - 15330) <= 0x1E && ((1 << (a2 + 30)) & 0x40100001) != 0)
      {
        goto LABEL_61;
      }
      v7 = 15460;
    }
    else if (a2 <= 15054)
    {
      if (a2 == 11805)
        goto LABEL_57;
      if (a2 == 12150)
      {
LABEL_61:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 577) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 576) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      v7 = 15030;
    }
    else
    {
      if ((a2 - 15100) <= 0x32 && ((1 << (a2 + 4)) & 0x4000000000401) != 0
        || (a2 - 15230) <= 0x19 && ((1 << (a2 - 126)) & 0x2100001) != 0)
      {
        goto LABEL_61;
      }
      v7 = 15055;
    }
LABEL_54:
    if (a2 != v7)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    goto LABEL_61;
  }
  if (a2 <= 2009)
  {
    if (a2 <= 0x38)
    {
      if (((1 << a2) & 0x2000000029FLL) != 0)
        goto LABEL_61;
      if (((1 << a2) & 0x110000000000C60) != 0)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 577) = 1;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 576) = 1;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
      if (a2 == 8)
      {
LABEL_57:
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 577) = 1;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
        *(_BYTE *)(a1 + 576) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 104) + 24))(v6);
        return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
      }
    }
    if ((a2 - 61) > 0x27)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
    v8 = 1 << (a2 - 61);
    v9 = 0x800000043FLL;
    goto LABEL_60;
  }
  if ((a2 - 2010) <= 0x3D && ((1 << (a2 + 38)) & 0x2488004000005401) != 0
    || (a2 - 2101) <= 0x31 && ((1 << (a2 - 53)) & 0x2000000000011) != 0
    || (a2 - 3015) < 2)
  {
    goto LABEL_61;
  }
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
}

void sub_1000576EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100057700(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  NSObject *v5;
  unsigned int v6;
  const char *v7;
  int *v8;
  int *v9;
  uint64_t v10;
  NSObject *v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  int *v18;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char v28;
  uint64_t **v29;
  uint64_t v30;
  int v31;
  NSObject *v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t **v50;
  uint64_t *v51;
  uint64_t *v52;
  NSObject *v53;
  uint64_t *v54;
  uint64_t *v55;
  NSObject *v56;
  NSObject *v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t **v61;
  NSObject *v62;
  unsigned int v63;
  int v64;
  double v65;
  double v66;
  double v67;
  NSObject *v68;
  double v69;
  uint64_t v70;
  double v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  int v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  char *v96;
  uint64_t v98;
  unsigned int v99;
  const char *v100;
  char *v101;
  int v102;
  int v103;
  char *v104;
  unsigned int v105;
  int v106;
  char *v107;
  char *v108;
  uint64_t v109;
  double v110;
  uint64_t v111;
  double v112;
  char *v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  __int16 v117;
  uint64_t *v118;
  __int16 v119;
  int v120;
  _BYTE v121[24];
  double v122;
  _BYTE buf[24];
  double v124;

  sub_10003DFD4(a1);
  if (*a2 >= 3)
    v4 = -1;
  else
    v4 = 2 - *(_BYTE *)a2;
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v5 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v6 = *a2;
    v7 = sub_1001B49F8(*a2);
    *(_DWORD *)buf = 67240706;
    *(_DWORD *)&buf[4] = v6;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = v7;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = (char)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "CLIENT:unregisterForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v98 = qword_1022A0028;
    v99 = *a2;
    v100 = sub_1001B49F8(*a2);
    *(_DWORD *)v121 = 67240706;
    *(_DWORD *)&v121[4] = v99;
    *(_WORD *)&v121[8] = 2082;
    *(_QWORD *)&v121[10] = v100;
    *(_WORD *)&v121[18] = 1026;
    *(_DWORD *)&v121[20] = (char)v4;
    v101 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v98, 2, "CLIENT:unregisterForNotificationInternal,notification,%{public}d,%{public}s,granularity,%{public}d", v121, 24);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v101);
    if (v101 != buf)
      free(v101);
  }
  switch(*a2)
  {
    case 0u:
    case 1u:
    case 2u:
      v27 = (char *)(a1 + 160);
      if (*(unsigned __int8 *)(a1 + 160) != v4)
        goto LABEL_116;
      *(_BYTE *)(a1 + 160) = -1;
      *(_DWORD *)buf = 0;
      if (sub_1001B7864(a1, (int *)buf, 1))
      {
        v28 = 2;
      }
      else
      {
        *(_DWORD *)buf = 1;
        if (sub_1001B7864(a1, (int *)buf, 1))
        {
          v28 = 1;
        }
        else
        {
          *(_DWORD *)buf = 2;
          if (!sub_1001B7864(a1, (int *)buf, 1))
          {
LABEL_95:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v62 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v63 = *a2;
              v64 = *v27;
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v63;
              *(_WORD *)&buf[8] = 1026;
              *(_DWORD *)&buf[10] = v64;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEBUG, "Unregistered for notification,%{public}d,new required location granularity,%{public}d", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10214C5A0);
              v105 = *a2;
              v106 = *v27;
              *(_DWORD *)v121 = 67240448;
              *(_DWORD *)&v121[4] = v105;
              *(_WORD *)&v121[8] = 1026;
              *(_DWORD *)&v121[10] = v106;
              LODWORD(v114) = 14;
              v107 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "Unregistered for notification,%{public}d,new required location granularity,%{public}d", v121, v114);
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v107);
              if (v107 != buf)
                free(v107);
            }
            if (*v27 != v4)
            {
              sub_100232BDC(a1, (_BYTE *)(a1 + 160));
              if (v4 != 255)
              {
                if (v4 == 2)
                {
                  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 392))(*(_QWORD *)(a1 + 288));
                  if (*(_BYTE *)(a1 + 5121))
                  {
                    if (*(_BYTE *)(sub_1005EE584() + 24))
                    {
                      sub_1001E4804(buf);
                      *(_QWORD *)v121 = 0;
                      v65 = sub_1001FD98C(*(uint64_t *)buf, "LocationControllerRecorderFileAgeThresholdSeconds", v121)? *(double *)v121: 21600.0;
                      sub_100261F44((uint64_t)buf);
                      v66 = sub_1005EEB24();
                      v67 = v66 - *(double *)(sub_1005EE584() + 32);
                      if (v67 > v65)
                      {
                        if (qword_1022A0020 != -1)
                          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                        v68 = qword_1022A0028;
                        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
                        {
                          v69 = sub_1005EEB24();
                          v70 = sub_100B303DC();
                          v71 = sub_100B309E0(v70);
                          *(_DWORD *)buf = 134349568;
                          *(double *)&buf[4] = v69;
                          *(_WORD *)&buf[12] = 2050;
                          *(double *)&buf[14] = v67;
                          *(_WORD *)&buf[22] = 2050;
                          v124 = v71;
                          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#locctl,#rec,refreshing the recording file,mct,%{public}.3f,seconds since last,%{public}.2f,propagation_us,%{public}.3f", buf, 0x20u);
                        }
                        if (sub_1001BFF7C(115, 2))
                        {
                          bzero(buf, 0x65CuLL);
                          if (qword_1022A0020 != -1)
                            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
                          v109 = qword_1022A0028;
                          v110 = sub_1005EEB24();
                          v111 = sub_100B303DC();
                          v112 = sub_100B309E0(v111);
                          *(_DWORD *)v121 = 134349568;
                          *(double *)&v121[4] = v110;
                          *(_WORD *)&v121[12] = 2050;
                          *(double *)&v121[14] = v67;
                          *(_WORD *)&v121[22] = 2050;
                          v122 = v112;
                          LODWORD(v114) = 32;
                          v113 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v109, 0, "#locctl,#rec,refreshing the recording file,mct,%{public}.3f,seconds since last,%{public}.2f,propagation_us,%{public}.3f", v121, v114);
                          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v113);
                          if (v113 != buf)
                            free(v113);
                        }
                        v72 = sub_1005EE584();
                        sub_1005EEB50(v72);
                        v73 = sub_1005EE584();
                        sub_1005EED78(v73);
                        v74 = sub_1005EE584();
                        sub_1005EF278(v74);
                        *(_QWORD *)buf = 0x4000000000000000;
                        sub_10069D7AC(a1, (double *)buf);
                      }
                    }
                  }
                }
                *(_BYTE *)(a1 + 161) = -1;
                sub_100192DD0(a1, (char *)(a1 + 160));
              }
            }
LABEL_116:
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v75 = qword_1022A0028;
            if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
            {
              v76 = *(char *)(a1 + 160);
              v77 = *(char *)(a1 + 161);
              *(_DWORD *)buf = 67240448;
              *(_DWORD *)&buf[4] = v76;
              *(_WORD *)&buf[8] = 1026;
              *(_DWORD *)&buf[10] = v77;
              _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEBUG, "After unregister,required granularity,%{public}d,active granularity,%{public}d", buf, 0xEu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0020 != -1)
                dispatch_once(&qword_1022A0020, &stru_10214C5A0);
              v102 = *(char *)(a1 + 160);
              v103 = *(char *)(a1 + 161);
              *(_DWORD *)v121 = 67240448;
              *(_DWORD *)&v121[4] = v102;
              *(_WORD *)&v121[8] = 1026;
              *(_DWORD *)&v121[10] = v103;
              LODWORD(v114) = 14;
              v104 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "After unregister,required granularity,%{public}d,active granularity,%{public}d", v121, v114);
              sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v104);
              if (v104 != buf)
                free(v104);
            }
            goto LABEL_121;
          }
          v28 = 0;
        }
      }
      *v27 = v28;
      goto LABEL_95;
    case 3u:
    case 4u:
    case 6u:
    case 0xAu:
    case 0x27u:
      v8 = *(int **)(a1 + 264);
      v9 = (int *)(a1 + 272);
      if (v8 != (int *)(a1 + 272))
      {
        v10 = a1 + 240;
        do
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v11 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v12 = *a2;
            v13 = sub_1000B5C9C(v10, v8 + 8);
            v16 = v13[1];
            v14 = v13 + 1;
            v15 = v16;
            if (*((char *)v14 + 23) >= 0)
              v15 = (uint64_t)v14;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v12;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = v15;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "unregistering notification,%{public}d,with,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v20 = qword_1022A0028;
            v21 = *a2;
            v22 = sub_1000B5C9C(v10, v8 + 8);
            v25 = v22[1];
            v23 = v22 + 1;
            v24 = v25;
            if (*((char *)v23 + 23) >= 0)
              v24 = (uint64_t)v23;
            *(_DWORD *)v121 = 67240450;
            *(_DWORD *)&v121[4] = v21;
            *(_WORD *)&v121[8] = 2082;
            *(_QWORD *)&v121[10] = v24;
            LODWORD(v114) = 18;
            v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v20, 2, "unregistering notification,%{public}d,with,location provider,%{public}s", v121, v114);
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v26);
            if (v26 != buf)
              free(v26);
          }
          objc_msgSend(*(id *)(*((_QWORD *)v8 + 5) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v8 + 5) + 8), *a2);
          v17 = (int *)*((_QWORD *)v8 + 1);
          if (v17)
          {
            do
            {
              v18 = v17;
              v17 = *(int **)v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              v18 = (int *)*((_QWORD *)v8 + 2);
              _ZF = *(_QWORD *)v18 == (_QWORD)v8;
              v8 = v18;
            }
            while (!_ZF);
          }
          v8 = v18;
        }
        while (v18 != v9);
      }
      return 1;
    case 8u:
      if (*(_DWORD *)(a1 + 328))
      {
        *(_QWORD *)buf = a1 + 328;
        v50 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v50[5][2], "unregister:forNotification:", v50[5][1], 8);
      }
LABEL_121:
      *(_QWORD *)&v121[8] = 0xBFF0000000000000;
      *(_WORD *)&v121[16] = 0;
      *(_DWORD *)&v121[20] = 0;
      LODWORD(v122) = 0;
      *(double *)v121 = sub_1001B75B4(a1);
      v78 = *(_QWORD *)(a1 + 264);
      if (v78 != a1 + 272)
      {
        v79 = a1 + 240;
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v80 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          v81 = *(_QWORD *)v121;
          v82 = sub_1000B5C9C(v79, (int *)(v78 + 32));
          v85 = v82[1];
          v83 = v82 + 1;
          v84 = v85;
          if (*((char *)v83 + 23) >= 0)
            v86 = v83;
          else
            v86 = (uint64_t *)v84;
          v87 = *((unsigned __int8 *)sub_1000B5C9C(v79, (int *)(v78 + 32)) + 863);
          *(_DWORD *)buf = 134349570;
          *(_QWORD *)&buf[4] = v81;
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v86;
          *(_WORD *)&buf[22] = 1026;
          LODWORD(v124) = v87;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEBUG, "CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d", buf, 0x1Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v88 = qword_1022A0028;
          v89 = *(_QWORD *)v121;
          v90 = sub_1000B5C9C(v79, (int *)(v78 + 32));
          v93 = v90[1];
          v91 = v90 + 1;
          v92 = v93;
          if (*((char *)v91 + 23) >= 0)
            v94 = v91;
          else
            v94 = (uint64_t *)v92;
          v95 = *((unsigned __int8 *)sub_1000B5C9C(v79, (int *)(v78 + 32)) + 863);
          v115 = 134349570;
          v116 = v89;
          v117 = 2082;
          v118 = v94;
          v119 = 1026;
          v120 = v95;
          LODWORD(v114) = 28;
          v96 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v88, 2, "CLIENT:unregisterForNotificationInternal,propagate,desiredAccuracy,%{public}.1lf,name,%{public}s,active,%{public}d", &v115, v114);
          sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v96);
          if (v96 != buf)
            free(v96);
        }
        *(_DWORD *)buf = 0;
        sub_1001B3ABC();
      }
      return 1;
    case 0xFu:
      if (*(_DWORD *)(a1 + 328))
      {
        *(_DWORD *)buf = 15;
        if (sub_1001B7864(a1, (int *)buf, 1))
        {
          __asm { FMOV            V0.2D, #-1.0 }
          *(_OWORD *)buf = _Q0;
          *(_WORD *)&buf[16] = 0;
          LODWORD(v124) = 0;
          *(_DWORD *)&buf[20] = sub_1001AFF54(a1, 15);
          *(_QWORD *)v121 = a1 + 328;
          sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)v121);
          *(_DWORD *)v121 = 15;
          sub_1001B3ABC();
        }
        *(_QWORD *)buf = a1 + 328;
        v61 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 328), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v61[5][2], "unregister:forNotification:", v61[5][1], 15);
      }
      return 1;
    case 0x11u:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v53 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEBUG, "CLMM,RunMapMatching is turned off", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        *(_WORD *)v121 = 0;
        LODWORD(v114) = 2;
        v108 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "CLMM,RunMapMatching is turned off", v121, v114);
        sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v108);
        if (v108 != buf)
          free(v108);
      }
      *(_BYTE *)(a1 + 668) = 0;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 168))(*(_QWORD *)(a1 + 288));
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 288) + 176))(*(_QWORD *)(a1 + 288));
      return 1;
    case 0x16u:
      if (*(_DWORD *)(a1 + 320))
      {
        *(_QWORD *)buf = a1 + 320;
        v29 = sub_100041CE0((uint64_t **)(a1 + 264), (int *)(a1 + 320), (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        objc_msgSend((id)v29[5][2], "unregister:forNotification:", v29[5][1], 22);
      }
      return 1;
    case 0x1Cu:
      v30 = 0;
      v31 = *(_DWORD *)(a1 + 344);
      v115 = *(_DWORD *)(a1 + 332);
      LODWORD(v116) = v31;
      do
      {
        if (*(int *)((char *)&v115 + v30))
        {
          if (qword_1022A0020 != -1)
            dispatch_once(&qword_1022A0020, &stru_10214C5A0);
          v32 = qword_1022A0028;
          if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
          {
            v33 = *a2;
            v34 = sub_1000B5C9C(a1 + 240, (int *)((char *)&v115 + v30));
            v37 = v34[1];
            v35 = v34 + 1;
            v36 = v37;
            if (*((char *)v35 + 23) >= 0)
              v36 = (uint64_t)v35;
            *(_DWORD *)buf = 67240450;
            *(_DWORD *)&buf[4] = v33;
            *(_WORD *)&buf[8] = 2082;
            *(_QWORD *)&buf[10] = v36;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "unregistering notification,%{public}d,location provider,%{public}s", buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0020 != -1)
              dispatch_once(&qword_1022A0020, &stru_10214C5A0);
            v39 = qword_1022A0028;
            v40 = *a2;
            v41 = sub_1000B5C9C(a1 + 240, (int *)((char *)&v115 + v30));
            v44 = v41[1];
            v42 = v41 + 1;
            v43 = v44;
            if (*((char *)v42 + 23) >= 0)
              v43 = (uint64_t)v42;
            *(_DWORD *)v121 = 67240450;
            *(_DWORD *)&v121[4] = v40;
            *(_WORD *)&v121[8] = 2082;
            *(_QWORD *)&v121[10] = v43;
            LODWORD(v114) = 18;
            v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v39, 2, "unregistering notification,%{public}d,location provider,%{public}s", v121, v114);
            sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLLocationController::unregisterForNotificationInternal(const CLLocationProvider_Type::Notification &)", "%s\n", v45);
            if (v45 != buf)
              free(v45);
          }
          v38 = sub_1000B5C9C(a1 + 264, (int *)((char *)&v115 + v30));
          objc_msgSend(*(id *)(*v38 + 16), "unregister:forNotification:", *(_QWORD *)(*v38 + 8), 28);
        }
        v30 += 4;
      }
      while (v30 != 8);
      if (*(_DWORD *)(a1 + 328))
      {
        v59 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v59 + 16), "unregister:forNotification:", *(_QWORD *)(*v59 + 8), 28);
      }
      v60 = *(_QWORD *)(a1 + 288);
      if (v60)
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v60 + 320))(v60, 0);
      return 1;
    case 0x1Du:
      if (*(_DWORD *)(a1 + 328))
      {
        v54 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v54 + 16), "unregister:forNotification:", *(_QWORD *)(*v54 + 8), 29);
      }
      if (*(_DWORD *)(a1 + 336))
      {
        v55 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 336));
        objc_msgSend(*(id *)(*v55 + 16), "unregister:forNotification:", *(_QWORD *)(*v55 + 8), 29);
      }
      (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 312))(*(_QWORD *)(a1 + 288), 0);
      return 1;
    case 0x22u:
      if (*(_DWORD *)(a1 + 328))
      {
        v51 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v51 + 16), "unregister:forNotification:", *(_QWORD *)(*v51 + 8), 34);
      }
      return 1;
    case 0x23u:
      if (*(_DWORD *)(a1 + 328))
      {
        v52 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 328));
        objc_msgSend(*(id *)(*v52 + 16), "unregister:forNotification:", *(_QWORD *)(*v52 + 8), 35);
      }
      return 1;
    case 0x28u:
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_10214C5A0);
      v56 = qword_1022A0028;
      if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68289026;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unregister kNotificationExternalLocationDisablementAssert\"}", buf, 0x12u);
      }
      if (*(_DWORD *)(a1 + 336))
      {
        if (qword_1022A0020 != -1)
          dispatch_once(&qword_1022A0020, &stru_10214C5A0);
        v57 = qword_1022A0028;
        if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289026;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"unregistering kNotificationExternalLocationDisablementAssert w/ accessory provider\"}", buf, 0x12u);
        }
        v58 = sub_1000B5C9C(a1 + 264, (int *)(a1 + 336));
        objc_msgSend(*(id *)(*v58 + 16), "unregister:forNotification:", *(_QWORD *)(*v58 + 8), 40);
      }
      return 1;
    default:
      return 1;
  }
}

void sub_100058AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100058AD0(_QWORD **a1, double a2)
{
  NSObject *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  _BYTE buf[12];
  __int16 v11;
  uint64_t v12;

  sub_100058D14(*a1, &v4, a2, 30.0);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v2 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 134349312;
    *(_QWORD *)&buf[4] = 0x2E8BA2E8BA2E8BA3 * ((v5 - v4) >> 3);
    v11 = 2050;
    v12 = 30;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "remove old APs from scan history, count, %{public}ld, max_secs, %{public}lld", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v6 = 134349312;
    v7 = 0x2E8BA2E8BA2E8BA3 * ((v5 - v4) >> 3);
    v8 = 2050;
    v9 = 30;
    v3 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "remove old APs from scan history, count, %{public}ld, max_secs, %{public}lld", &v6, 22);
    sub_100512490("Generic", 1, 0, 2, "static void CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::removeOldApsFromWifiScanHistory(cl::chrono::CFAbsoluteTimeClock::time_point, std::shared_ptr<Types::WifiScanHistory>)", "%s\n", v3);
    if (v3 != buf)
      free(v3);
  }
  *(_QWORD *)buf = &v4;
  sub_100279AA4((void ***)buf);
}

void sub_100058CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void **a19)
{
  a19 = (void **)&a12;
  sub_100279AA4(&a19);
  _Unwind_Resume(a1);
}

void sub_100058D14(_QWORD *a1@<X0>, uint64_t *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v7;
  double v9;
  _QWORD *v10;
  NSObject *v11;
  std::string *p_p;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *p_buf;
  std::string *v18;
  NSObject *v19;
  std::string::size_type v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string *v24;
  uint64_t v25;
  uint64_t v26;
  std::string buf;
  int v28;
  _BYTE v29[12];
  __int16 v30;
  int v31;
  std::string __p;
  int v33;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v7 = a1[2];
  if (v7)
  {
    do
    {
      while (1)
      {
        v9 = vabdd_f64(a3, *(double *)(v7 + 72));
        if (a4 < v9)
          break;
        v7 = *(_QWORD *)v7;
        if (!v7)
          goto LABEL_26;
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102192028);
      v10 = (_QWORD *)(v7 + 16);
      v11 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
      {
        *(_QWORD *)v29 = *v10;
        sub_1000C2254(v29, &__p);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        LODWORD(buf.__r_.__value_.__l.__data_) = 136380931;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_p;
        WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
        *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (int)v9;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "@WifiAps, remove, %{private}s, age, %{public}d", (uint8_t *)&buf, 0x12u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(&__p, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102192028);
        v16 = qword_1022A0058;
        v26 = *v10;
        sub_1000C2254(&v26, &buf);
        p_buf = &buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        *(_DWORD *)v29 = 136380931;
        *(_QWORD *)&v29[4] = p_buf;
        v30 = 1026;
        v31 = (int)v9;
        LODWORD(v25) = 18;
        v18 = (std::string *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, v16, 2, "@WifiAps, remove, %{private}s, age, %{public}d", v29, v25);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::secondsf)", "%s\n", (const char *)v18);
        if (v18 != &__p)
          free(v18);
      }
      v13 = a2[1];
      if (v13 >= a2[2])
      {
        v14 = sub_100279DEC(a2, v7 + 16);
      }
      else
      {
        sub_100279D64((uint64_t)a2, v7 + 16);
        v14 = v13 + 88;
      }
      a2[1] = v14;
      v15 = *(_QWORD *)v7;
      sub_100059290(a1, (uint64_t *)v7);
      v7 = v15;
    }
    while (v15);
  }
LABEL_26:
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_102192028);
  v19 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    v20 = a1[3];
    v21 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    LODWORD(__p.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v20;
    WORD2(__p.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = v21;
    HIWORD(__p.__r_.__value_.__r.__words[2]) = 1026;
    v33 = (int)a4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "@WifiAps, history, %{public}lu, aged, %{public}lu, thresh, %{public}d", (uint8_t *)&__p, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(&__p, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102192028);
    v22 = a1[3];
    v23 = 0x2E8BA2E8BA2E8BA3 * ((a2[1] - *a2) >> 3);
    LODWORD(buf.__r_.__value_.__l.__data_) = 134349568;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2050;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v23;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1026;
    v28 = (int)a4;
    LODWORD(v25) = 28;
    v24 = (std::string *)_os_log_send_and_compose_impl(2, 0, &__p, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiAps, history, %{public}lu, aged, %{public}lu, thresh, %{public}d", &buf, v25);
    sub_100512490("Generic", 1, 0, 2, "CLWifiService_Type::AccessPointVector CL::Wifi1::Types::WifiScanHistory::removeAgedAccessPoints(cl::chrono::CFAbsoluteTimeClock::time_point, cl::chrono::secondsf)", "%s\n", (const char *)v24);
    if (v24 != &__p)
      free(v24);
  }
}

void sub_1000591BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_100279AA4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000591E8(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_100279B78((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10005925C(uint64_t a1)
{
  sub_100279CC0(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100059290(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  sub_1000592D8(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    sub_10055A1C0((uint64_t)&v6, v3);
  return v2;
}

_QWORD *sub_1000592D8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

void sub_100059938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  sub_1015EE304((PB::Base *)&a59);
  _Unwind_Resume(a1);
}

uint64_t sub_10005995C(uint64_t a1)
{
  _QWORD *v2;
  const char *v3;
  size_t v4;
  _QWORD *v5;
  char *v6;
  NSObject *v7;
  char *v9;
  _WORD v10[8];
  uint64_t v11;
  _QWORD v12[8];
  void *__p[2];
  char v14;

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)v10);
    v2 = sub_100263F7C(&v11, (uint64_t)"SELECT COUNT(*) FROM ", 21);
    v3 = (const char *)(a1 + 272);
    if (*(char *)(a1 + 295) < 0)
      v3 = *(const char **)v3;
    v4 = strlen(v3);
    v5 = sub_100263F7C(v2, (uint64_t)v3, v4);
    sub_100263F7C(v5, (uint64_t)";", 1);
    std::stringbuf::str(__p, v12);
    if (v14 >= 0)
      v6 = (char *)__p;
    else
      v6 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v6);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v7 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call count() without a backing database in CLWifiLocationDatabase!", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    v10[0] = 0;
    v9 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call count() without a backing database in CLWifiLocationDatabase!", v10, 2);
    sub_100512490("Generic", 1, 0, 2, "uint32_t CLWifiLocationDatabase::count()", "%s\n", v9);
    if (v9 != (char *)__p)
      free(v9);
  }
  return 0;
}

void sub_100059D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  uint64_t v54;

  if (v54)
    (*(void (**)(uint64_t))(*(_QWORD *)v54 + 8))(v54);
  sub_1018B38B4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_100059DD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void **v6;
  NSObject *v7;
  void **v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  char *v12;
  NSObject *v13;
  void **v14;
  NSObject *v15;
  void **v16;
  uint64_t v17;
  _BYTE *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  _BYTE *v26;
  char *v27;
  char *v28;
  uint64_t v29;
  _BYTE buf[12];
  char v31;
  int v32;
  _BYTE *v33;
  void *__p[2];
  char v35;

  if (!a2)
    sub_101924684();
  v4 = *(_QWORD *)(a1 + 4736);
  if (v4 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4) & 1) == 0)
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v15 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v16 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#Warning Raven: could not handle exiting %{public}s", buf, 0xCu);
      if (v35 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v25 = qword_1022A00A8;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v31 >= 0)
        v26 = buf;
      else
        v26 = *(_BYTE **)buf;
      v32 = 136446210;
      v33 = v26;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v25, 0, "#Warning Raven: could not handle exiting %{public}s", &v32, 12);
      v28 = v27;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v28);
      if (v28 != (char *)__p)
        free(v28);
    }
    sub_100C84210(a1);
  }
  else
  {
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
      v6 = v35 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: entering %{public}s", buf, 0xCu);
      if (v35 < 0)
        operator delete(__p[0]);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(__p, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v17 = qword_1022A00A8;
      (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
      if (v31 >= 0)
        v18 = buf;
      else
        v18 = *(_BYTE **)buf;
      v32 = 136446210;
      v33 = v18;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v17, 2, "Raven: entering %{public}s", &v32, 12);
      v20 = v19;
      if (v31 < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v20);
      if (v20 != (char *)__p)
        free(v20);
    }
    *(_QWORD *)(a1 + 4736) = a2;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2) & 1) != 0)
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(__p, a2);
        v8 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "Raven: successfully entered %{public}s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v9 = qword_1022A00A8;
        (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(buf, a2);
        if (v31 >= 0)
          v10 = buf;
        else
          v10 = *(_BYTE **)buf;
        v32 = 136446210;
        v33 = v10;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v9, 2, "Raven: successfully entered %{public}s", &v32, v29);
        v12 = v11;
        if (v31 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v12);
        if (v12 != (char *)__p)
          free(v12);
      }
    }
    else
    {
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v13 = qword_1022A00A8;
      if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
      {
        (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(__p);
        v14 = v35 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#Warning Raven: could not handle entering %{public}s", buf, 0xCu);
        if (v35 < 0)
          operator delete(__p[0]);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v21 = qword_1022A00A8;
        (*(void (**)(_BYTE *__return_ptr))(**(_QWORD **)(a1 + 4736) + 16))(buf);
        if (v31 >= 0)
          v22 = buf;
        else
          v22 = *(_BYTE **)buf;
        v32 = 136446210;
        v33 = v22;
        LODWORD(v29) = 12;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v21, 0, "#Warning Raven: could not handle entering %{public}s", &v32, v29);
        v24 = v23;
        if (v31 < 0)
          operator delete(*(void **)buf);
        sub_100512490("Generic", 1, 0, 2, "void CLRavenController::ChangeState(RavenControllerState *const)", "%s\n", v24);
        if (v24 != (char *)__p)
          free(v24);
      }
      sub_100C84210(a1);
    }
  }
}

uint64_t sub_10005A570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double v4;
  std::timed_mutex *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[6];
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;

  sub_10005A9B0(*(_QWORD *)(a1 + 8));
  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
  {
    sub_1008C56B0(v3);
    v2 = *(_QWORD *)(a1 + 8);
  }
  v11 = 0;
  v12 = &v11;
  v13 = 0x2020000000;
  v14 = 1;
  if (*(_BYTE *)(v2 + 4664))
  {
    v4 = sub_1001FCBB4();
    v5 = (std::timed_mutex *)(*(_QWORD *)(a1 + 8) + 320);
    std::timed_mutex::lock(v5);
    v6 = *(void **)(*(_QWORD *)(a1 + 8) + 4672);
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    v10[2] = sub_100C77B90;
    v10[3] = &unk_10217C4F8;
    *(double *)&v10[5] = v4;
    v10[4] = &v11;
    objc_msgSend(v6, "pauseResetAndFreeRavenSupervisorWithCompletion:", v10);
  }
  else
  {
    if (!*(_QWORD *)(v2 + 312))
      goto LABEL_8;
    v5 = (std::timed_mutex *)(v2 + 320);
    std::timed_mutex::lock((std::timed_mutex *)(v2 + 320));
    cnframework::Supervisor::Pause(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 312));
    cnframework::Supervisor::Reset(*(cnframework::Supervisor **)(*(_QWORD *)(a1 + 8) + 312));
  }
  std::timed_mutex::unlock(v5);
LABEL_8:
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 4680);
  if (v7)
    sub_10005A6D8(v7);
  v8 = *((unsigned __int8 *)v12 + 24);
  _Block_object_dispose(&v11, 8);
  return v8;
}

void sub_10005A6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10005A6D8(uint64_t a1)
{
  _QWORD *v2;
  NSObject *v3;
  _QWORD *v4;
  char *v5;
  _QWORD block[5];
  int v7;
  _QWORD *v8;
  uint8_t buf[4];
  _QWORD *v10;

  if (*(_BYTE *)(a1 + 125))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v2 = (_QWORD *)(a1 + 8);
    v3 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_INFO))
    {
      v4 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v4 = (_QWORD *)*v2;
      *(_DWORD *)buf = 136446210;
      v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "#p%{public}s,#close,", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      if (*(char *)(a1 + 31) < 0)
        v2 = (_QWORD *)*v2;
      v7 = 136446210;
      v8 = v2;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0168, 1, "#p%{public}s,#close,", &v7, 12);
      sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::close()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  if (qword_102311CB8)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10020AD0C;
    block[3] = &unk_10212ECA0;
    block[4] = a1;
    dispatch_async((dispatch_queue_t)qword_102311CB8, block);
  }
}

char *sub_10005A8EC(char *result)
{
  _BYTE *v1;
  char *v2;
  uint64_t v3;

  v1 = result + 4656;
  if (result[4656])
  {
    v2 = result;
    v3 = *((_QWORD *)result + 37);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 0);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 1);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 2);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 3);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 4);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 5);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 6);
      objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 7);
      result = (char *)objc_msgSend(*(id *)(*((_QWORD *)v2 + 37) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v2 + 37) + 8), 12);
    }
    *v1 = 0;
  }
  return result;
}

char *sub_10005A9B0(uint64_t a1)
{
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;

  v2 = (_BYTE *)(a1 + 4633);
  sub_10005B108(a1);
  if (*v2)
  {
    v3 = *(_QWORD *)(a1 + 168);
    if (v3)
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 2);
    *v2 = 0;
  }
  sub_10005B8D0(a1);
  sub_10005B700(a1);
  sub_10005B68C(a1);
  if (v2[4])
  {
    v4 = *(_QWORD *)(a1 + 136);
    if (v4)
      objc_msgSend(*(id *)(v4 + 16), "unregister:forNotification:", *(_QWORD *)(v4 + 8), 36);
    v2[4] = 0;
  }
  if (v2[5])
  {
    v5 = *(_QWORD *)(a1 + 144);
    if (v5)
      objc_msgSend(*(id *)(v5 + 16), "unregister:forNotification:", *(_QWORD *)(v5 + 8), 10);
    v2[5] = 0;
  }
  sub_10005B4D8(a1);
  sub_10005B2BC(a1);
  if (v2[8])
  {
    v6 = *(_QWORD *)(a1 + 168);
    if (v6)
      objc_msgSend(*(id *)(v6 + 16), "unregister:forNotification:", *(_QWORD *)(v6 + 8), 0);
    v2[8] = 0;
  }
  if (v2[9])
  {
    v7 = *(_QWORD *)(a1 + 176);
    if (v7)
      objc_msgSend(*(id *)(v7 + 16), "unregister:forNotification:", *(_QWORD *)(v7 + 8), 25);
    v2[9] = 0;
  }
  if (v2[10])
  {
    v8 = *(_QWORD *)(a1 + 184);
    if (v8)
      objc_msgSend(*(id *)(v8 + 16), "unregister:forNotification:", *(_QWORD *)(v8 + 8), 1);
    v2[10] = 0;
  }
  if (v2[11])
  {
    v9 = *(_QWORD *)(a1 + 192);
    if (v9)
      objc_msgSend(*(id *)(v9 + 16), "unregister:forNotification:", *(_QWORD *)(v9 + 8), 0);
    v2[11] = 0;
  }
  if (v2[12])
  {
    v10 = *(_QWORD *)(a1 + 200);
    if (v10)
      objc_msgSend(*(id *)(v10 + 16), "unregister:forNotification:", *(_QWORD *)(v10 + 8), 2);
    v2[12] = 0;
  }
  if (v2[13])
  {
    if (*(_QWORD *)(a1 + 232))
    {
      v11 = *(void **)(a1 + 240);
      if (v11)
        objc_msgSend(v11, "unregisterForUpdates:");
    }
    v2[13] = 0;
  }
  sub_10005BA84(a1);
  sub_10005AF48(a1);
  if (v2[16])
  {
    v12 = *(_QWORD *)(a1 + 248);
    if (v12)
      objc_msgSend(*(id *)(v12 + 16), "unregister:forNotification:", *(_QWORD *)(v12 + 8), 0);
    v2[16] = 0;
  }
  if (v2[17])
  {
    v13 = *(_QWORD *)(a1 + 256);
    if (v13)
      objc_msgSend(*(id *)(v13 + 16), "unregister:forNotification:", *(_QWORD *)(v13 + 8), 0);
    v2[17] = 0;
  }
  if (v2[18])
  {
    objc_msgSend(*(id *)(a1 + 264), "setNextFireDelay:", 1.79769313e308);
    v2[18] = 0;
  }
  sub_10005AD94(a1);
  sub_10005ABE0(a1);
  if (v2[21])
  {
    v14 = *(_QWORD *)(a1 + 272);
    if (v14)
      objc_msgSend(*(id *)(v14 + 16), "unregister:forNotification:", *(_QWORD *)(v14 + 8), 30);
    v2[21] = 0;
  }
  if (v2[22])
  {
    if (*(_QWORD *)(a1 + 280))
    {
      v15 = *(void **)(a1 + 288);
      if (v15)
        objc_msgSend(v15, "deregisterForVisionNotifications:");
    }
    v2[22] = 0;
  }
  return sub_10005A8EC((char *)a1);
}

void sub_10005ABE0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4653);
  if (*(_BYTE *)(a1 + 4653))
  {
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 5);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: deregistering for tunnel end point assistance (TEPA) notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for tunnel end point assistance (TEPA) notifications", v5, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForTunnelEndPointAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    *v1 = 0;
  }
}

void sub_10005AD94(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4652);
  if (*(_BYTE *)(a1 + 4652))
  {
    v2 = *(_QWORD *)(a1 + 168);
    if (v2)
      objc_msgSend(*(id *)(v2 + 16), "unregister:forNotification:", *(_QWORD *)(v2 + 8), 4);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven: deregistering for tunnel bridge assistance (TBA) notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for tunnel bridge assistance (TBA) notifications", v5, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForTunnelBridgeAssistanceNotifications()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    *v1 = 0;
  }
}

void sub_10005AF48(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v2 = *(_QWORD *)(a1 + 88);
  if (v2)
  {
    if (sub_100DED3C8(v2))
    {
      if (*(_BYTE *)(a1 + 4648))
      {
        v3 = *(_QWORD *)(a1 + 304);
        if (v3)
        {
          objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 0);
          *(_BYTE *)(a1 + 4648) = 0;
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v4 = qword_1022A00A8;
          if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: deregistering for RayTracing tile notifications", buf, 2u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A00A0 != -1)
              dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
            v6[0] = 0;
            v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for RayTracing tile notifications", v6, 2);
            sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForRayTracingTileNotifications()", "%s\n", v5);
            if (v5 != (char *)buf)
              free(v5);
          }
        }
      }
    }
  }
}

void sub_10005B108(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4632);
  if (*(_BYTE *)(a1 + 4632))
  {
    v3 = sub_10024095C();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 24);
      if (v4)
        sub_1000A4A6C(v3, 0, v4);
    }
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for accelerometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for accelerometer notifications", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForAccelerometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_10005B2BC(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  void *__p[2];
  uint64_t v7;
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4640);
  if (*(_BYTE *)(a1 + 4640))
  {
    v2 = sub_10022B068();
    if (byte_102307937 < 0)
    {
      sub_100115CE4(__p, (void *)xmmword_102307920, *((unint64_t *)&xmmword_102307920 + 1));
    }
    else
    {
      *(_OWORD *)__p = xmmword_102307920;
      v7 = unk_102307930;
    }
    sub_10000782C(v2, (uint64_t *)__p);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v3 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "Raven:RouteHints,DeregisterForMapRouteHintNotifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven:RouteHints,DeregisterForMapRouteHintNotifications", v5, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForMapRouteHintNotifications()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
  }
}

void sub_10005B4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10005B4D8(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4639);
  if (*(_BYTE *)(a1 + 4639))
  {
    v3 = sub_1000A6A30();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 152);
      if (v4)
        sub_1000A4A6C(v3, 0, v4);
    }
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for magnetometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for magnetometer notifications", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForMagnetometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_10005B68C(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v1 = (_BYTE *)(a1 + 4636);
  if (*(_BYTE *)(a1 + 4636))
  {
    v3 = sub_1002433D4();
    if (!v3 || !*(_QWORD *)(a1 + 64))
      goto LABEL_9;
    v4 = v3;
    if ((sub_1001B7910() & 0x10) != 0)
    {
      v5 = 4;
    }
    else
    {
      if ((sub_1001B7910() & 8) == 0)
      {
LABEL_9:
        *v1 = 0;
        return;
      }
      v5 = 1;
    }
    sub_1000A4A6C(v4, v5, *(_QWORD *)(a1 + 64));
    goto LABEL_9;
  }
}

void sub_10005B700(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  NSObject *v4;
  char *v5;
  _WORD v6[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4635);
  if (*(_BYTE *)(a1 + 4635))
  {
    v3 = *(_QWORD *)(a1 + 56);
    if (v3)
    {
      objc_msgSend(*(id *)(v3 + 16), "unregister:forNotification:", *(_QWORD *)(v3 + 8), 7);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 15);
      objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 13);
    }
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v4 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Raven: deregistering for Daemon status notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v6[0] = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for Daemon status notifications", v6, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForDaemonStatusNotifications()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
}

void sub_10005B8D0(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4634);
  if (*(_BYTE *)(a1 + 4634))
  {
    v3 = sub_1000824CC();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 40);
      if (v4)
        sub_1000A4A6C(v3, 0, v4);
    }
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for barometer notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for barometer notifications", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForBarometerNotifications()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

void sub_10005BA84(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  v1 = (_BYTE *)(a1 + 4647);
  if (*(_BYTE *)(a1 + 4647))
  {
    v3 = sub_10021C350();
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 208);
      if (v4)
        sub_1000A4A6C(v3, 0, v4);
    }
    *v1 = 0;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v5 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "Raven: deregistering for rate gyro notifications", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 2, "Raven: deregistering for rate gyro notifications", v7, 2);
      sub_100512490("Generic", 1, 0, 2, "void CLRavenController::DeregisterForRateGyroNotifications()", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
}

uint64_t sub_10005BC38()
{
  return 1;
}

id sub_10005BC40(uint64_t a1)
{
  NSObject *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  char *v8;
  int v9;
  _QWORD *v10;
  __int16 v11;
  uint64_t v12;
  uint8_t buf[4];
  _QWORD *v14;
  __int16 v15;
  uint64_t v16;

  if (qword_1022A02A0 != -1)
    dispatch_once(&qword_1022A02A0, &stru_1021612F0);
  v2 = qword_1022A02A8;
  if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
  {
    v3 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a1 + 32);
    *(_DWORD *)buf = 136315394;
    v14 = v3;
    v15 = 2048;
    v16 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "invalidate, %s, %p", buf, 0x16u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02A0 != -1)
      dispatch_once(&qword_1022A02A0, &stru_1021612F0);
    v6 = (_QWORD *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0)
      v6 = (_QWORD *)*v6;
    v7 = *(_QWORD *)(a1 + 32);
    v9 = 136315394;
    v10 = v6;
    v11 = 2048;
    v12 = v7;
    v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "invalidate, %s, %p", (const char *)&v9, 22);
    sub_100512490("Generic", 1, 0, 2, "-[CLPersistentTimerInternal invalidate]_block_invoke", "%s\n", v8);
    if (v8 != (char *)buf)
      free(v8);
  }
  return objc_msgSend(*(id *)(a1 + 32), "invalidate");
}

void sub_10005BE30(uint64_t a1@<X8>)
{
  uint64_t v2;
  const std::string::value_type **v3;
  uint64_t v4;
  std::string *v5;
  __int128 v6;
  void **v7;
  std::string::size_type v8;
  std::string v9;
  void *__p[2];
  int64_t v11;

  v2 = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  do
  {
    v3 = (const std::string::value_type **)&qword_1023045C0[v2];
    if (LODWORD(qword_1023045C0[v2 + 1]) != 4)
    {
      v4 = *(unsigned __int8 *)(a1 + 23);
      if ((v4 & 0x80u) != 0)
        v4 = *(_QWORD *)(a1 + 8);
      if (v4)
      {
        *((_BYTE *)&v9.__r_.__value_.__s + 23) = 2;
        strcpy((char *)&v9, ", ");
        v5 = std::string::append(&v9, *v3);
        v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
        v11 = v5->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v6;
        v5->__r_.__value_.__l.__size_ = 0;
        v5->__r_.__value_.__r.__words[2] = 0;
        v5->__r_.__value_.__r.__words[0] = 0;
        if (v11 >= 0)
          v7 = __p;
        else
          v7 = (void **)__p[0];
        if (v11 >= 0)
          v8 = HIBYTE(v11);
        else
          v8 = (std::string::size_type)__p[1];
        std::string::append((std::string *)a1, (const std::string::value_type *)v7, v8);
        if (SHIBYTE(v11) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v9.__r_.__value_.__l.__data_);
      }
      else
      {
        std::string::append((std::string *)a1, *v3);
      }
    }
    v2 += 6;
  }
  while (v2 != 102);
}

void sub_10005BF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void sub_10005BF84(uint64_t a1)
{
  sub_10002DEE0(*(_QWORD *)(a1 + 8));
  sub_100239828();
}

void sub_10005C380(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021D6648);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x158uLL);
      v24[1] = 0;
      v24[2] = 0;
      *v24 = off_1021D6698;
      memcpy(v24 + 3, a3, 0x140uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100025660();
    os_activity_scope_leave(&state);
  }
}

void sub_10005C9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10005CA0C(uint64_t a1, uint64_t a2)
{
  char v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  _BYTE *v9;
  int v10;
  std::string::size_type v11;
  std::string *v12;
  std::string *p_p;
  _QWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  std::string *v23;
  int v24;
  std::string::size_type v25;
  std::string *v26;
  void **v27;
  _QWORD *v28;
  char *v29;
  void *v30[2];
  char v31;
  std::string __p;
  std::string v33;
  _BYTE v34[12];
  __int16 v35;
  std::string *v36;
  __int16 v37;
  void **v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  _QWORD *v42;
  uint8_t buf[4];
  _BYTE *v44;
  __int16 v45;
  std::string *v46;
  __int16 v47;
  std::string *v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  _QWORD *v52;

  v4 = sub_100182290(a2);
  sub_10021D258(a1 + 728, v4 ^ 1);
  v5 = (_OWORD *)(a1 + 156);
  sub_10011E258((double *)(a1 + 312), a2, a1 + 156);
  v7 = v6;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102191998);
  v8 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
  {
    v9 = v34;
    sub_10005CE48(a2, v34);
    if (v37 < 0)
      v9 = *(_BYTE **)v34;
    sub_1000C2254((_QWORD *)(a1 + 352), &v33);
    v10 = SHIBYTE(v33.__r_.__value_.__r.__words[2]);
    v11 = v33.__r_.__value_.__r.__words[0];
    sub_10005CE48(a1 + 156, &__p);
    if (v10 >= 0)
      v12 = &v33;
    else
      v12 = (std::string *)v11;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    v14 = (_QWORD *)(a1 + 1352);
    if (*(char *)(a1 + 1375) < 0)
      v14 = (_QWORD *)*v14;
    *(_DWORD *)buf = 136381699;
    v44 = v9;
    v45 = 2081;
    v46 = v12;
    v47 = 2081;
    v48 = p_p;
    v49 = 2050;
    v50 = v7;
    v51 = 2081;
    v52 = v14;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "WifiCalc, replacing computed location %{private}s with associated AP %{private}s centroid %{private}s. Distance %{public}.1fm. LOI %{private}s", buf, 0x34u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37) < 0)
      operator delete(*(void **)v34);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102191998);
    v22 = qword_1022A0048;
    v23 = &v33;
    sub_10005CE48(a2, &v33);
    if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v23 = (std::string *)v33.__r_.__value_.__r.__words[0];
    sub_1000C2254((_QWORD *)(a1 + 352), &__p);
    v24 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v25 = __p.__r_.__value_.__r.__words[0];
    sub_10005CE48(a1 + 156, v30);
    if (v24 >= 0)
      v26 = &__p;
    else
      v26 = (std::string *)v25;
    v27 = (void **)v30[0];
    if (v31 >= 0)
      v27 = v30;
    v28 = (_QWORD *)(a1 + 1352);
    if (*(char *)(a1 + 1375) < 0)
      v28 = (_QWORD *)*v28;
    *(_DWORD *)v34 = 136381699;
    *(_QWORD *)&v34[4] = v23;
    v35 = 2081;
    v36 = v26;
    v37 = 2081;
    v38 = v27;
    v39 = 2050;
    v40 = v7;
    v41 = 2081;
    v42 = v28;
    v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v22, 0, "WifiCalc, replacing computed location %{private}s with associated AP %{private}s centroid %{private}s. Distance %{public}.1fm. LOI %{private}s", v34, 52);
    if (v31 < 0)
      operator delete(v30[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiPositionCalculatorWithAssociatedAp::updateComputedLocation(CL::Wifi1::Types::ComputedLocation &)", "%s\n", v29);
    if (v29 != (char *)buf)
      free(v29);
  }
  v15 = v5[2];
  v16 = v5[3];
  v17 = v5[4];
  *(_OWORD *)(a2 + 80) = v5[5];
  v18 = v5[1];
  *(_OWORD *)a2 = *v5;
  *(_OWORD *)(a2 + 16) = v18;
  *(_OWORD *)(a2 + 48) = v16;
  *(_OWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 32) = v15;
  v19 = v5[6];
  v20 = v5[7];
  v21 = v5[8];
  *(_OWORD *)(a2 + 140) = *(_OWORD *)((char *)v5 + 140);
  *(_OWORD *)(a2 + 112) = v20;
  *(_OWORD *)(a2 + 128) = v21;
  *(_OWORD *)(a2 + 96) = v19;
  *(_DWORD *)(a2 + 156) = 1;
  *(_DWORD *)(a2 + 84) = 69;
  *(_BYTE *)(a2 + 180) = 1;
}

void sub_10005CDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005CE48@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD v17[10];
  char v18;
  uint64_t v19;

  sub_100263E50((uint64_t)v15);
  v4 = v16;
  *(_QWORD *)((char *)&v17[1] + *(_QWORD *)(v16 - 24)) = 8;
  *(_DWORD *)((char *)v17 + *(_QWORD *)(v4 - 24)) = *(_DWORD *)((_BYTE *)v17 + *(_QWORD *)(v4 - 24)) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(&v16, *(double *)(a1 + 4));
  v5 = sub_100263F7C(&v16, (uint64_t)", ", 2);
  v6 = *v5;
  *(uint64_t *)((char *)v5 + *(_QWORD *)(*v5 - 24) + 16) = 8;
  *(_DWORD *)((char *)v5 + *(_QWORD *)(v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v5 + *(_QWORD *)(v6 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v5, *(double *)(a1 + 12));
  v7 = sub_100263F7C(&v16, (uint64_t)", hacc, ", 8);
  v8 = *v7;
  *(uint64_t *)((char *)v7 + *(_QWORD *)(*v7 - 24) + 16) = 1;
  *(_DWORD *)((char *)v7 + *(_QWORD *)(v8 - 24) + 8) = *(_DWORD *)((_BYTE *)v7 + *(_QWORD *)(v8 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v7, *(double *)(a1 + 20));
  v9 = sub_100263F7C(&v16, (uint64_t)", alt, ", 7);
  v10 = *v9;
  *(uint64_t *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 16) = 1;
  *(_DWORD *)((char *)v9 + *(_QWORD *)(v10 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(v10 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v9, *(double *)(a1 + 28));
  v11 = sub_100263F7C(&v16, (uint64_t)", vacc, ", 8);
  v12 = *v11;
  *(uint64_t *)((char *)v11 + *(_QWORD *)(*v11 - 24) + 16) = 1;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v11 + *(_QWORD *)(v12 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v11, *(double *)(a1 + 36));
  std::stringbuf::str(a2, v17);
  *(_QWORD *)((char *)v15
  v16 = v13;
  if (v18 < 0)
    operator delete((void *)v17[8]);
  std::streambuf::~streambuf(v17);
  return std::ios::~ios(&v19);
}

void sub_10005D050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005D078(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1)
  {

    sub_100261F44(v1 + 1160);
    if (*(char *)(v1 + 927) < 0)
      operator delete(*(void **)(v1 + 904));
    sub_100261F44(v1 + 800);
    sub_100261F44(v1 + 680);
    operator delete();
  }
  return result;
}

uint64_t sub_10005D0EC(uint64_t a1, int a2, int *a3, char *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v10;
  int v11;
  BOOL v12;
  uint64_t *v13;
  NSObject *v14;
  _QWORD *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t *v29;
  char v30;
  uint64_t **v31;
  char v32;
  uint64_t **v33;
  uint64_t v34;
  char v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  _BYTE v41[12];
  __int16 v42;
  int v43;
  _OWORD buf[102];

  v40 = a2;
  if (*(_BYTE *)(a1 + 108))
    return 0;
  v7 = *(_QWORD *)(a1 + 88);
  if (v7)
  {
    v10 = a1 + 88;
    do
    {
      v11 = *(_DWORD *)(v7 + 32);
      v12 = v11 < a2;
      if (v11 >= a2)
        v13 = (uint64_t *)v7;
      else
        v13 = (uint64_t *)(v7 + 8);
      if (!v12)
        v10 = v7;
      v7 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 88 && *(_DWORD *)(v10 + 32) <= a2)
    {
      *(_QWORD *)v41 = v10;
      v17 = *a3;
      v20 = *(_QWORD *)(v10 + 48);
      v19 = v10 + 48;
      v18 = v20;
      if (!v20)
        goto LABEL_31;
      v21 = v19;
      do
      {
        v22 = *(_DWORD *)(v18 + 28);
        v23 = v22 < v17;
        if (v22 >= v17)
          v24 = (uint64_t *)v18;
        else
          v24 = (uint64_t *)(v18 + 8);
        if (!v23)
          v21 = v18;
        v18 = *v24;
      }
      while (*v24);
      if (v21 == v19 || v17 < *(_DWORD *)(v21 + 28))
LABEL_31:
        v21 = v19;
      v25 = *(_QWORD *)(a1 + 64);
      if (!v25)
        goto LABEL_42;
      v26 = a1 + 64;
      do
      {
        v27 = *(_DWORD *)(v25 + 32);
        v28 = v27 < v17;
        if (v27 >= v17)
          v29 = (uint64_t *)v25;
        else
          v29 = (uint64_t *)(v25 + 8);
        if (!v28)
          v26 = v25;
        v25 = *v29;
      }
      while (*v29);
      if (v26 != a1 + 64 && v17 >= *(_DWORD *)(v26 + 32))
      {
        v39 = v26;
        v34 = *(_QWORD *)(v26 + 56);
        v35 = *a4;
        *(_QWORD *)&buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94((uint64_t **)(v26 + 40), &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v35;
        memset(buf, 0, 320);
        if (v21 == v19
          && (*(unsigned int (**)(uint64_t, int *, _OWORD *))(*(_QWORD *)a1 + 128))(a1, a3, buf))
        {
          sub_10005D5FC();
        }
        if (v34)
          goto LABEL_44;
      }
      else
      {
LABEL_42:
        v39 = a1 + 64;
        v30 = byte_102300209;
        HIDWORD(v38) = v17;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        *((_BYTE *)sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 80) = v30;
        HIDWORD(v38) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        v31 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        sub_100346F9C(v31 + 8);
        v32 = *a4;
        HIDWORD(v38) = *a3;
        *(_QWORD *)&buf[0] = (char *)&v38 + 4;
        v33 = sub_1004A5DC8((uint64_t **)(a1 + 56), (int *)&v38 + 1, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        *(_QWORD *)&buf[0] = &v40;
        *((_BYTE *)sub_1001AFE94(v33 + 5, &v40, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 32) = v32;
      }
      (*(void (**)(uint64_t, int *))(*(_QWORD *)a1 + 168))(a1, a3);
LABEL_44:
      if (v21 == v19)
      {
        LODWORD(buf[0]) = *a3;
        sub_1000C6190((uint64_t **)(*(_QWORD *)v41 + 40), (int *)buf, buf);
      }
      return 1;
    }
  }
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021B88E0);
  v14 = qword_1022A0228;
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
  {
    v15 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v15 = (_QWORD *)*v15;
    LODWORD(buf[0]) = 136446466;
    *(_QWORD *)((char *)buf + 4) = v15;
    WORD6(buf[0]) = 1026;
    *(_DWORD *)((char *)buf + 14) = a2;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "%{public}s; client %{public}d does not exist",
      (uint8_t *)buf,
      0x12u);
  }
  v16 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v16)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v36 = (_QWORD *)(a1 + 8);
    if (*(char *)(a1 + 31) < 0)
      v36 = (_QWORD *)*v36;
    *(_DWORD *)v41 = 136446466;
    *(_QWORD *)&v41[4] = v36;
    v42 = 1026;
    v43 = a2;
    LODWORD(v38) = 18;
    v37 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; client %{public}d does not exist",
                    v41,
                    v38);
    sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLStepCountNotifier_Type::Notification, CLStepCountNotifier_Type::NotificationData>::registerForNotification(int, const Notification_T &, const RegistrationInfo_T &) [Notification_T = CLStepCountNotifier_Type::Notification, NotificationData_T = CLStepCountNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v37);
    if (v37 != (char *)buf)
      free(v37);
    return 0;
  }
  return result;
}

uint64_t sub_10005D578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)a1 + 96))(a1, a2, a3, &unk_102300208);
}

uint64_t sub_10005D58C(uint64_t a1, int *a2, void *__dst)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  const void *v11;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(const void **)(v7 + 64);
  if (!v11)
    return 0;
  memcpy(__dst, v11, 0x140uLL);
  return 1;
}

void sub_10005D5FC()
{
  operator new();
}

uint64_t sub_10005D694(uint64_t a1, uint64_t a2, const __CFDictionary *a3)
{
  uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  void *Value;
  void *v9;
  void *v10;
  double Current;
  double v12;
  double v13;
  NSObject *v14;
  int v15;
  int v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  NSObject *v20;
  std::string *v21;
  std::string *p_p;
  int v23;
  uint64_t v24;
  uint64_t v26;
  std::string *v27;
  const char *v28;
  uint8_t *v29;
  void **v30;
  int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void *__dst[2];
  uint64_t v36;
  uint64_t v37;
  std::string __p;
  os_activity_scope_state_s state;
  uint64_t v40;
  __int16 v41;
  std::string v42;
  int v43;
  __int16 v44;
  uint64_t v45;
  uint8_t buf[4];
  _BYTE v47[24];
  __int16 v48;
  uint64_t v49;

  v5 = a1 + 824;
  v40 = a1 + 824;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 824) + 16))(a1 + 824);
  v41 = 256;
  v6 = _os_activity_create((void *)&_mh_execute_header, "CL: onWiFiDeviceClientRegisterLQMCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
  os_activity_scope_enter(v6, &state);

  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021469D0);
  v7 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289282;
    *(_DWORD *)v47 = 0;
    *(_WORD *)&v47[4] = 2082;
    *(_QWORD *)&v47[6] = "";
    *(_WORD *)&v47[14] = 2082;
    *(_QWORD *)&v47[16] = "activity";
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"onWiFiDeviceClientRegisterLQMCallback\", \"event\":%{public, location:escape_only}s}", buf, 0x1Cu);
  }
  sub_1000A8D50(a1);
  if (a3)
  {
    Value = (void *)CFDictionaryGetValue(a3, CFSTR("RSSI"));
    v9 = (void *)CFDictionaryGetValue(a3, CFSTR("LQMTIMESTAMP"));
    if (*(_BYTE *)(a1 + 632) && *(int *)(a1 + 584) >= 1 && Value)
    {
      v10 = v9;
      *(_DWORD *)(a1 + 576) = objc_msgSend(Value, "intValue");
      Current = CFAbsoluteTimeGetCurrent();
      if (v10)
      {
        objc_msgSend(v10, "timeIntervalSinceReferenceDate", Current);
        v13 = v12;
      }
      else
      {
        v13 = Current;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v19 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "WifiMgr, LQM notification handling error: timestamp missing, use current system time", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021469D0);
          LOWORD(v42.__r_.__value_.__l.__data_) = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, LQM notification handling error: timestamp missing, use current system time", &v42, 2);
          v29 = (uint8_t *)v28;
          sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v28);
          if (v29 != buf)
            free(v29);
        }
      }
      *(double *)(a1 + 600) = v13;
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        __dst[0] = *(void **)(a1 + 544);
        v21 = &v42;
        sub_1000C2254(__dst, &v42);
        if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = (std::string *)v42.__r_.__value_.__r.__words[0];
        if (*(char *)(a1 + 575) < 0)
          sub_100115CE4(&__p, *(void **)(a1 + 552), *(_QWORD *)(a1 + 560));
        else
          __p = *(std::string *)(a1 + 552);
        p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        v23 = *(_DWORD *)(a1 + 576);
        v24 = *(_QWORD *)(a1 + 600);
        *(_DWORD *)buf = 136381443;
        *(_QWORD *)v47 = v21;
        *(_WORD *)&v47[8] = 2081;
        *(_QWORD *)&v47[10] = p_p;
        *(_WORD *)&v47[18] = 1026;
        *(_DWORD *)&v47[20] = v23;
        v48 = 2050;
        v49 = v24;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WifiMgr, update associated rssi via LQM, mac, %{private}s, ssid, %{private}s, rssi, %{public}d, ts, %{public}.1lf", buf, 0x26u);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v26 = qword_1022A0048;
        v37 = *(_QWORD *)(a1 + 544);
        v27 = &__p;
        sub_1000C2254(&v37, &__p);
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)__p.__r_.__value_.__r.__words[0];
        if (*(char *)(a1 + 575) < 0)
        {
          sub_100115CE4(__dst, *(void **)(a1 + 552), *(_QWORD *)(a1 + 560));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)(a1 + 552);
          v36 = *(_QWORD *)(a1 + 568);
        }
        v30 = __dst;
        if (v36 < 0)
          v30 = (void **)__dst[0];
        v31 = *(_DWORD *)(a1 + 576);
        v32 = *(_QWORD *)(a1 + 600);
        LODWORD(v42.__r_.__value_.__l.__data_) = 136381443;
        *(std::string::size_type *)((char *)v42.__r_.__value_.__r.__words + 4) = (std::string::size_type)v27;
        WORD2(v42.__r_.__value_.__r.__words[1]) = 2081;
        *(std::string::size_type *)((char *)&v42.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v30;
        HIWORD(v42.__r_.__value_.__r.__words[2]) = 1026;
        v43 = v31;
        v44 = 2050;
        v45 = v32;
        LODWORD(v34) = 38;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v26, 2, "WifiMgr, update associated rssi via LQM, mac, %{private}s, ssid, %{private}s, rssi, %{public}d, ts, %{public}.1lf", &v42, v34);
        v18 = v33;
        if (SHIBYTE(v36) < 0)
          operator delete(__dst[0]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v18);
        if (v18 != (char *)buf)
LABEL_63:
          free(v18);
      }
    }
    else
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021469D0);
      v14 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
      {
        v15 = *(unsigned __int8 *)(a1 + 632);
        if (*(_BYTE *)(a1 + 632))
          v15 = *(_DWORD *)(a1 + 584) > 0;
        *(_DWORD *)buf = 67240449;
        *(_DWORD *)v47 = Value == 0;
        *(_WORD *)&v47[4] = 1025;
        *(_DWORD *)&v47[6] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "WifiMgr, LQM notification handling error: rssi value is null - %{public}d; isAssociated - %{private}d",
          buf,
          0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021469D0);
        v16 = *(unsigned __int8 *)(a1 + 632);
        if (*(_BYTE *)(a1 + 632))
          v16 = *(_DWORD *)(a1 + 584) > 0;
        LODWORD(v42.__r_.__value_.__l.__data_) = 67240449;
        HIDWORD(v42.__r_.__value_.__r.__words[0]) = Value == 0;
        LOWORD(v42.__r_.__value_.__r.__words[1]) = 1025;
        *(_DWORD *)((char *)&v42.__r_.__value_.__r.__words[1] + 2) = v16;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiMgr, LQM notification handling error: rssi value is null - %{public}d; isAssociated - %{private}d",
          &v42,
          14);
        v18 = (char *)v17;
        sub_100512490("Generic", 1, 0, 0, "void CLWifiService::onWiFiDeviceClientRegisterLQMCallback(WiFiDeviceClientRef, CFDictionaryRef)", "%s\n", v17);
        if (v18 != (char *)buf)
          goto LABEL_63;
      }
    }
  }
  os_activity_scope_leave(&state);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
}

void sub_10005DDE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,os_activity_scope_state_s state,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a20 < 0)
    operator delete(__p);
  os_activity_scope_leave(&state);
  sub_10187E514((uint64_t)&a22);
  _Unwind_Resume(a1);
}

BOOL sub_10005DE60(uint64_t a1, std::string *a2)
{
  uint64_t *v2;
  uint64_t v3;
  std::string::size_type v6;
  NSObject *v7;
  uint64_t v8;
  std::string *v9;
  _QWORD *v10;
  _BOOL8 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int16 v22;
  int v23;
  uint8_t buf[4];
  uint64_t v25;
  __int16 v26;
  int v27;
  std::string::size_type __n;
  void (__cdecl **v29[2])(std::ifstream *__hidden);
  _QWORD v30[51];
  uint64_t v31;

  v3 = *(unsigned __int8 *)(a1 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a1 + 8);
  if (v3)
  {
    sub_10005E45C(v29, (uint64_t *)a1, 6);
    if (v30[15])
    {
      std::istream::tellg(buf, v29);
      v6 = __n;
      if ((__n & 0x8000000000000000) == 0)
      {
        if (__n >= 0x7FFFFFFF)
        {
          sub_101742120();
          abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/GPS/gpsd/GpsdUtil.mm", 1918, "readFileIntoString");
          __break(1u);
        }
        else
        {
          std::string::resize(a2, __n, 0);
          v2 = &qword_1022A0000;
          if (qword_1022A0070 == -1)
          {
LABEL_8:
            v7 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(a1 + 23) >= 0)
                v8 = a1;
              else
                v8 = *(_QWORD *)a1;
              *(_DWORD *)buf = 136315394;
              v25 = v8;
              v26 = 1024;
              v27 = v6;
              _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "#gpsd,readFileIntoString,%s,size,%d", buf, 0x12u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (v2[14] != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CDF88);
              if (*(char *)(a1 + 23) >= 0)
                v18 = a1;
              else
                v18 = *(_QWORD *)a1;
              v20 = 136315394;
              v21 = v18;
              v22 = 1024;
              v23 = v6;
              v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,readFileIntoString,%s,size,%d", (const char *)&v20, 18);
              sub_100512490("Generic", 1, 0, 2, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v19);
              if (v19 != (char *)buf)
                free(v19);
            }
            std::istream::seekg(v29, 0, 0);
            if ((a2->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v9 = a2;
            else
              v9 = (std::string *)a2->__r_.__value_.__r.__words[0];
            v10 = (_QWORD *)std::istream::read(v29, v9, v6);
            v11 = (*(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(*v10 - 24) + 32) & 5) == 0;
            if (!std::filebuf::close(v30))
              std::ios_base::clear((std::ios_base *)((char *)v29 + (unint64_t)*(v29[0] - 3)), *(_DWORD *)((char *)&v30[2] + (unint64_t)*(v29[0] - 3)) | 4);
            goto LABEL_40;
          }
        }
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
        goto LABEL_8;
      }
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "#gpsd,readFileIntoString,tellg failed", buf, 2u);
      }
      if (!sub_1001BFF7C(115, 0))
      {
LABEL_39:
        v11 = 0;
LABEL_40:
        std::filebuf::~filebuf(v30);
        std::ios::~ios(&v31);
        return v11;
      }
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      LOWORD(v20) = 0;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gpsd,readFileIntoString,tellg failed", &v20, 2);
      sub_100512490("Generic", 1, 0, 0, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v15);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      v12 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 23) >= 0)
          v13 = a1;
        else
          v13 = *(_QWORD *)a1;
        *(_DWORD *)buf = 136380675;
        v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#gpsd,readFileIntoString,failed to open %{private}s", buf, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_39;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF88);
      if (*(char *)(a1 + 23) >= 0)
        v14 = a1;
      else
        v14 = *(_QWORD *)a1;
      v20 = 136380675;
      v21 = v14;
      v15 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,readFileIntoString,failed to open %{private}s", &v20, 12);
      sub_100512490("Generic", 1, 0, 2, "BOOL gpsd::util::readFileIntoString(const std::string &, std::string &)", "%s\n", v15);
    }
    if (v15 != (char *)buf)
      free(v15);
    goto LABEL_39;
  }
  return 0;
}

void sub_10005E428(_Unwind_Exception *a1)
{
  sub_100838B94(&STACK[0x6A8]);
  _Unwind_Resume(a1);
}

void (__cdecl ***sub_10005E45C(void (__cdecl ***a1)(std::ifstream *__hidden this), uint64_t *a2, int a3))(std::ifstream *__hidden this)
{
  _QWORD *v6;
  void (__cdecl **v7)(std::ifstream *__hidden);
  void (__cdecl **v8)(std::ifstream *__hidden);
  std::ios_base *v9;
  uint64_t *v10;

  v6 = a1 + 2;
  *a1 = v7;
  *(_QWORD *)((char *)*(v7 - 3) + (_QWORD)a1) = v8;
  a1[1] = 0;
  v9 = (std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf(v6);
  if (*((char *)a2 + 23) >= 0)
    v10 = a2;
  else
    v10 = (uint64_t *)*a2;
  if (!std::filebuf::open(v6, v10, a3 | 8u))
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (_QWORD)a1), *(_DWORD *)((char *)*(*a1 - 3) + (_QWORD)a1 + 32) | 4);
  return a1;
}

void sub_10005E53C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  std::istream::~istream(v1, v2 + 8);
  std::ios::~ios(v1 + 424);
  _Unwind_Resume(a1);
}

BOOL sub_10005E574(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _BOOL4 v5;
  uint64_t v6;
  _BOOL4 v8;
  double v9;
  double v10;
  _BOOL4 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  double v17;
  double v18;
  double v19;
  _BOOL8 result;
  double v21;
  NSObject *v22;
  uint64_t v23;
  double v24;
  _BOOL4 v25;
  uint64_t v26;
  double v27;
  double v28;
  uint8_t *v29;
  uint8_t *v30;
  NSObject *v31;
  uint8_t *v32;
  double v33;
  NSObject *v34;
  NSObject *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v41;
  double v42;
  double v43;
  _BOOL4 v44;
  int v45;
  double v46;
  uint64_t v47;
  int v48;
  int v49;
  double v50;
  const char *v51;
  uint8_t *v52;
  double v53;
  _BYTE v54[32];
  int v55;
  double v56;
  _BYTE v57[14];
  __int16 v58;
  uint64_t v59;
  uint8_t buf[4];
  _BYTE v61[26];
  __int16 v62;
  uint64_t v63;
  __int16 v64;
  int v65;
  __int16 v66;
  uint64_t v67;
  __int16 v68;
  int v69;
  __int16 v70;
  int v71;
  __int16 v72;
  double v73;
  __int16 v74;
  uint64_t v75;

  if (qword_10229FF90 != -1)
    dispatch_once(&qword_10229FF90, &stru_1021648C0);
  v4 = qword_10229FF98;
  if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
  {
    v5 = 0;
    v6 = *(_QWORD *)(a1 + 176);
    v8 = v6 == 3 || (v6 & 0xFFFFFFFFFFFFFFFELL) == 4;
    v9 = *(double *)(a2 + 16);
    v10 = *(double *)(a1 + 160);
    if ((unint64_t)(v6 - 6) >= 0xFFFFFFFFFFFFFFFDLL && v10 <= v9)
      v5 = v9 - v10 < (double)*(int *)(a1 + 216);
    if (v10 <= v9)
    {
      v12 = *(_DWORD *)(a1 + 216);
      v11 = v9 - v10 < (double)v12;
    }
    else
    {
      v11 = 0;
      v12 = *(_DWORD *)(a1 + 216);
    }
    v13 = *(_QWORD *)(a1 + 160);
    v14 = *(_QWORD *)(a2 + 1040);
    v15 = *(unsigned __int8 *)(a1 + 44);
    v16 = *(unsigned __int8 *)(a1 + 184);
    v17 = vabdd_f64(*(double *)(a2 + 1048), *(double *)a2);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)v61 = v5;
    *(_WORD *)&v61[4] = 1024;
    *(_DWORD *)&v61[6] = v8;
    *(_WORD *)&v61[10] = 1024;
    *(_DWORD *)&v61[12] = v11;
    *(_WORD *)&v61[16] = 2048;
    *(double *)&v61[18] = v9;
    v62 = 2048;
    v63 = v13;
    v64 = 1024;
    v65 = v12;
    v66 = 2048;
    v67 = v14;
    v68 = 1024;
    v69 = v15;
    v70 = 1024;
    v71 = v16;
    v72 = 2048;
    v73 = v17;
    v74 = 2048;
    v75 = 0x4014000000000000;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "shouldCommitInputData, %d, isCyclingWorkout, %d, inTimeRange, %d, now, %f, sessionStartTime, %f, maxPossibleDifference, %d, power, %f, fApproximatePowerFromMets, %d, inPauseMode, %d, powerSampleTimediff, %f, powerSampleTimediffTolerance, %f", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v39 = *(_QWORD *)(a1 + 176);
    v41 = v39 == 3 || (v39 & 0xFFFFFFFFFFFFFFFELL) == 4;
    v42 = *(double *)(a2 + 16);
    v43 = *(double *)(a1 + 160);
    if (v43 <= v42)
    {
      v45 = *(_DWORD *)(a1 + 216);
      v44 = v42 - v43 < (double)v45;
    }
    else
    {
      v44 = 0;
      v45 = *(_DWORD *)(a1 + 216);
    }
    v46 = *(double *)(a1 + 160);
    v47 = *(_QWORD *)(a2 + 1040);
    v48 = *(unsigned __int8 *)(a1 + 44);
    v49 = *(unsigned __int8 *)(a1 + 184);
    v50 = vabdd_f64(*(double *)(a2 + 1048), *(double *)a2);
    *(_WORD *)&v54[8] = 1024;
    *(_DWORD *)&v54[10] = v41;
    *(_WORD *)&v54[14] = 1024;
    *(_DWORD *)&v54[16] = v44;
    *(_WORD *)&v54[20] = 2048;
    *(_WORD *)&v54[22] = LOWORD(v42);
    LOWORD(v55) = 1024;
    HIWORD(v55) = v45;
    LOWORD(v56) = 1024;
    *(_DWORD *)((char *)&v56 + 2) = v48;
    HIWORD(v56) = 1024;
    *(_DWORD *)v57 = v49;
    *(_WORD *)&v57[4] = 2048;
    *(double *)&v57[6] = v50;
    v58 = 2048;
    v59 = 0x4014000000000000;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "shouldCommitInputData, %d, isCyclingWorkout, %d, inTimeRange, %d, now, %f, sessionStartTime, %f, maxPossibleDifference, %d, power, %f, fApproximatePowerFromMets, %d, inPauseMode, %d, powerSampleTimediff, %f, powerSampleTimediffTolerance, %f", v54, 88, 67111680, *(double *)&v54[8], *(double *)&v54[16], *(_QWORD *)&v42 >> 16, v46, v55, v47, v56,
      *(double *)v57);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  if (!*(_BYTE *)(a1 + 44) && (*(double *)(a2 + 1040) < 0.0 || *(double *)(a2 + 928) <= 0.0))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v35 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      v36 = *(unsigned __int8 *)(a1 + 44);
      v37 = *(_QWORD *)(a2 + 1040);
      v38 = *(_QWORD *)(a2 + 928);
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)v61 = v36;
      *(_WORD *)&v61[4] = 2048;
      *(_QWORD *)&v61[6] = v37;
      *(_WORD *)&v61[14] = 2048;
      *(_QWORD *)&v61[16] = v38;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Cannot commit the data since there is no power or start time is 0. fApproximatePowerFromMets %d, power, %f, start time, %f ", buf, 0x1Cu);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v33 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "Cannot commit the data since there is no power or start time is 0. fApproximatePowerFromMets %d, power, %f, start time, %f ", v54);
LABEL_74:
    v30 = v32;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n", v33);
LABEL_75:
    if (v30 != buf)
      free(v30);
    return 0;
  }
  if ((unint64_t)(*(_QWORD *)(a1 + 176) - 3) >= 3)
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v31 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Cannot commit the data since it is not a cycling workout.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    *(_WORD *)v54 = 0;
    LODWORD(v53) = 2;
    v33 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "Cannot commit the data since it is not a cycling workout.", v54, *(_QWORD *)&v53, *(_OWORD *)v54, *(_OWORD *)&v54[16]);
    goto LABEL_74;
  }
  v18 = *(double *)(a2 + 16);
  v19 = *(double *)(a1 + 160);
  if (v19 > v18 || v18 - v19 >= (double)*(int *)(a1 + 216))
  {
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v34 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "Cannot commit the data since it is not in time range.", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (!result)
      return result;
    bzero(buf, 0x65CuLL);
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v33 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 2, "Cannot commit the data since it is not in time range.");
    goto LABEL_74;
  }
  result = *(_BYTE *)(a1 + 184) == 0;
  if (!(*(unsigned __int8 *)(a1 + 184) | *(unsigned __int8 *)(a1 + 44)))
  {
    v21 = *(double *)(a2 + 1048);
    if (vabdd_f64(v21, *(double *)a2) <= 5.0)
      return 1;
    if (v21 <= 0.0)
      return 0;
    if (qword_10229FF90 != -1)
      dispatch_once(&qword_10229FF90, &stru_1021648C0);
    v22 = qword_10229FF98;
    if (os_log_type_enabled((os_log_t)qword_10229FF98, OS_LOG_TYPE_ERROR))
    {
      v23 = *(_QWORD *)(a2 + 1048);
      v24 = *(double *)a2;
      *(_DWORD *)buf = 134218240;
      *(_QWORD *)v61 = v23;
      *(_WORD *)&v61[8] = 2048;
      *(double *)&v61[10] = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Power timestamp is too old, entryTime, %f, powerTime, %f", buf, 0x16u);
    }
    v25 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v25)
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF90 != -1)
        dispatch_once(&qword_10229FF90, &stru_1021648C0);
      v26 = *(_QWORD *)(a2 + 1048);
      v27 = *(double *)a2;
      *(_DWORD *)v54 = 134218240;
      *(_QWORD *)&v54[4] = v26;
      *(_WORD *)&v54[12] = 2048;
      *(double *)&v54[14] = v27;
      LODWORD(v53) = 22;
      v28 = _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF98, 16, "Power timestamp is too old, entryTime, %f, powerTime, %f", COERCE_DOUBLE(v54), v53);
      v30 = v29;
      sub_100512490("Generic", 1, 0, 0, "BOOL CLCyclingFTPDataStore::shouldCommitInputData(const CLNatalieModelInput::Data &)", "%s\n", v28);
      goto LABEL_75;
    }
  }
  return result;
}

void sub_10005EE04(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  __int128 v5;
  __int128 v6;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  NSObject *v15;
  NSObject *v16;
  int v17;
  NSObject *v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _BYTE v30[56];
  double v31;
  __int128 v32;
  uint64_t v33;
  uint64_t (**v34)();
  __int128 v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t (**v39)();
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  __int16 v46;
  int v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint8_t buf[4];
  uint64_t v55;
  __int16 v56;
  int v57;
  __int16 v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  __int16 v62;
  uint64_t v63;

  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator,processEvidence(),Process ActivityState", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    LOWORD(v44) = 0;
    v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator,processEvidence(),Process ActivityState", &v44, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v24);
    if (v24 != (char *)buf)
      free(v24);
  }
  *(_DWORD *)(a1 + 168) = *((_DWORD *)a2 + 3);
  *(_QWORD *)(a1 + 176) = *a2;
  if (*(_BYTE *)(a1 + 240))
  {
    v41 = 0x100000001;
    v39 = off_1021B6400;
    *(_QWORD *)&v5 = 0x100000001;
    *((_QWORD *)&v5 + 1) = 0x100000001;
    v40 = v5;
    v42 = &v43;
    *(_QWORD *)sub_10021C1C8((uint64_t)&v39, 0, 0) = sub_1002064F8;
    v36 = 0x100000001;
    v34 = off_1021B6448;
    *(_QWORD *)&v6 = 0x100000001;
    *((_QWORD *)&v6 + 1) = 0x100000001;
    v35 = v6;
    v37 = &v38;
    __asm { FMOV            V0.2D, #-1.0 }
    v32 = _Q0;
    v33 = *a2;
    v31 = -1.0;
    if (sub_100214D5C(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v31))
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v12 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor failed", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v44) = 0;
        LODWORD(v29) = 2;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor failed", &v44, v29);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
LABEL_75:
        if (v13 != (char *)buf)
          free(v13);
      }
    }
    else if (v31 < 0.0 || v31 > 1.0 || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
    {
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v16 = qword_1022A0198;
      if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor returned invalid probability", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        LOWORD(v44) = 0;
        LODWORD(v29) = 2;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenOutdoor returned invalid probability", &v44, v29);
        sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
        goto LABEL_75;
      }
    }
    else
    {
      *((double *)&v32 + 1) = v31;
      v31 = -1.0;
      if (sub_100214F54(a1 + 136, *((_DWORD *)a2 + 3), *(_DWORD *)(a1 + 160), &v31))
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v15 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor failed", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v44) = 0;
          LODWORD(v29) = 2;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor failed", &v44, v29);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
          goto LABEL_75;
        }
      }
      else if (v31 < 0.0 || v31 > 1.0 || (*(_QWORD *)&v31 & 0x7FFFFFFFFFFFFFFFuLL) >= 0x7FF0000000000000)
      {
        if (qword_1022A0190 != -1)
          dispatch_once(&qword_1022A0190, &stru_1021B6278);
        v19 = qword_1022A0198;
        if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor returned invalid probability", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          LOWORD(v44) = 0;
          LODWORD(v29) = 2;
          v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,lookupActivityStateProbabilityGivenIndoor returned invalid probability", &v44, v29);
          sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
          goto LABEL_75;
        }
      }
      else
      {
        *(double *)&v32 = v31;
        *(_QWORD *)sub_10021C1C8((uint64_t)&v34, 0, 0) = &v32;
        sub_10007A04C(a1, (uint64_t)buf);
        sub_10021C08C((uint64_t)&v44, (uint64_t)&v39);
        sub_10021BF50((uint64_t)v30, (uint64_t)&v34);
        v17 = sub_100078C58(a1, 2, (uint64_t)buf, 1, (uint64_t)&v44, (uint64_t)v30);
        if (v17)
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v18 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109120;
            LODWORD(v55) = v17;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM update failed,%d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v44 = 67109120;
            LODWORD(v45) = v17;
            v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM update failed,%d", &v44);
            sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
            goto LABEL_75;
          }
        }
        else
        {
          if (qword_1022A0190 != -1)
            dispatch_once(&qword_1022A0190, &stru_1021B6278);
          v20 = qword_1022A0198;
          if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
          {
            v21 = *a2;
            v22 = *((_DWORD *)a2 + 3);
            v23 = *(_QWORD *)(a1 + 248);
            *(_DWORD *)buf = 134219009;
            v55 = v21;
            v56 = 1025;
            v57 = v22;
            v58 = 2048;
            v59 = v23;
            v60 = 2049;
            v61 = *((_QWORD *)&v32 + 1);
            v62 = 2049;
            v63 = v32;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_ActivityState,evidenceCfatSec,%f,motionActivityType,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", buf, 0x30u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0190 != -1)
              dispatch_once(&qword_1022A0190, &stru_1021B6278);
            v25 = *a2;
            v26 = *((_DWORD *)a2 + 3);
            v27 = *(_QWORD *)(a1 + 248);
            v44 = 134219009;
            v45 = v25;
            v46 = 1025;
            v47 = v26;
            v48 = 2048;
            v49 = v27;
            v50 = 2049;
            v51 = *((_QWORD *)&v32 + 1);
            v52 = 2049;
            v53 = v32;
            LODWORD(v29) = 48;
            v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_ActivityState,evidenceCfatSec,%f,motionActivityType,%{private}d,EstimatorTimeCfaSec,%f,likelihoodObservationGivenOutdoor,%{private}f,likelihoodObservationGivenIndoor,%{private}f", &v44, v29);
            sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v28);
            if (v28 != (char *)buf)
              free(v28);
          }
          sub_100079B10(a1);
        }
      }
    }
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v14 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM Not initialized", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      LOWORD(v44) = 0;
      LODWORD(v29) = 2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,processEvidence(),ActivityState,HMM Not initialized", &v44, v29);
      sub_100512490("Generic", 1, 0, 0, "void CLOutdoorEstimator::processEvidence(const CLOutdoorEstimator_Type::ActivityStateEvidence &)", "%s\n", v13);
      goto LABEL_75;
    }
  }
}

void sub_10005F9C0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, float a4@<S0>)
{
  float v7;
  double v8;
  float v9;
  float v10;
  uint64_t v11;
  float v12;
  float v13;
  float v14;
  float v15;
  float v16;
  float v17;
  int v18;
  float v19;
  float v20;
  float v21;
  int v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  float v30;
  int v31;
  uint64_t v32;
  NSObject *v33;
  double v34;
  double v35;
  _BOOL4 v36;
  NSObject *v37;
  int v38;
  double v39;
  float v40;
  double v41;
  double v42;
  _BOOL4 v43;
  char *v44;
  int v45;
  double v46;
  float v47;
  char *v48;
  double v49;
  double v50;
  double v51;
  double v52;
  double v53;
  _BYTE v54[78];
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;
  uint8_t buf[4];
  _BYTE v62[74];
  __int16 v63;
  double v64;
  __int16 v65;
  double v66;
  __int16 v67;
  double v68;

  *(float *)&v51 = a4;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 3;
  *(_QWORD *)(a3 + 32) = 3;
  v8 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
  v9 = 0.0;
  if (v8 > 0.0)
    v9 = *(double *)(a1 + 408) * 2.23693991 / v8;
  v7 = *(double *)(a1 + 840);
  *((float *)&v53 + 1) = v7 * 2.2369;
  v10 = *(double *)(a1 + 448);
  v52 = *(double *)(a1 + 408);
  *((float *)&v51 + 1) = v10;
  if (*(_BYTE *)(a1 + 352))
  {
    if (v10 <= 0.14 || v10 > 2.2369)
    {
      v11 = a1 + 808;
      v9 = 0.0;
LABEL_12:
      v13 = 0.0;
      if (*(_BYTE *)(a1 + 352))
        v12 = 2.1;
      else
        v12 = 0.0;
      goto LABEL_15;
    }
    v9 = 2.2369 / v10;
  }
  v11 = a1 + 808;
  if (v9 < 1.0)
    goto LABEL_12;
  v12 = 8.0;
  if ((float)((float)((float)((float)(v9 * -0.793) + (float)((float)(v9 * 0.3564) * v9)) + 3.142) * a4) <= 8.0)
    v12 = (float)((float)((float)(v9 * -0.793) + (float)((float)(v9 * 0.3564) * v9)) + 3.142) * a4;
  v13 = v12;
LABEL_15:
  if (*(_BYTE *)(a1 + 528) == 1)
    v14 = 1.1;
  else
    v14 = 1.0;
  v15 = v12;
  v16 = v12 * v14;
  if (v16 <= 20.0)
    v17 = v16;
  else
    v17 = 20.0;
  if (a2)
    v18 = 2;
  else
    v18 = *(_DWORD *)(v11 + 24);
  sub_10006011C(v18, *((float *)&v53 + 1), v9, 2.5);
  v20 = v19 * v17;
  if (v20 <= 20.0)
    v21 = v20;
  else
    v21 = 20.0;
  *(float *)(a3 + 20) = v21;
  if (a2)
    v22 = 2;
  else
    v22 = *(_DWORD *)(v11 + 24);
  if (*(_BYTE *)(a1 + 528) == 1)
    v23 = 1.1;
  else
    v23 = 1.0;
  v24 = v13 * v23;
  if (v24 <= 20.0)
    v25 = v24;
  else
    v25 = 20.0;
  v26 = v21;
  *(float *)&v53 = v9;
  sub_10006011C(v22, *((float *)&v53 + 1), v9, 2.5);
  v28 = v27 * v25;
  if (v28 <= 20.0)
    v29 = v28;
  else
    v29 = 20.0;
  *(float *)(a3 + 28) = v29;
  v30 = 0.0;
  if (v13 <= 2.1)
  {
    v31 = 0;
  }
  else
  {
    v30 = v29;
    v31 = 12;
  }
  *(float *)(a3 + 12) = v30;
  *(_DWORD *)(a3 + 36) = v31;
  v32 = sub_10009ED0C();
  sub_10004FB90(v32, (uint64_t)(float)(v26 - v17));
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213CF70);
  v33 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(double *)(a1 + 128);
    v35 = v34 - *(double *)(a1 + 120);
    v36 = *(unsigned __int8 *)(a1 + 528) == 1;
    *(_DWORD *)buf = 134220544;
    *(double *)v62 = v9;
    *(_WORD *)&v62[8] = 2048;
    *(double *)&v62[10] = v52;
    *(_WORD *)&v62[18] = 2048;
    *(double *)&v62[20] = v35;
    *(_WORD *)&v62[28] = 2048;
    *(double *)&v62[30] = v15;
    *(_WORD *)&v62[38] = 2048;
    *(double *)&v62[40] = *(float *)&v51;
    *(_WORD *)&v62[48] = 2048;
    *(double *)&v62[50] = v34;
    *(_WORD *)&v62[58] = 2048;
    *(double *)&v62[60] = *((float *)&v51 + 1);
    *(_WORD *)&v62[68] = 1024;
    *(_DWORD *)&v62[70] = v36;
    v63 = 2048;
    v64 = v17;
    v65 = 2048;
    v66 = v13;
    v67 = 2048;
    v68 = v25;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "Walk, WorkRate, %f, distance(m), %f, duration(s), %f, userMets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, userMetsStrollerCorrected, %f, truthMets, %f, truthMetsStrollerCorrected, %f", buf, 0x6Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213CF70);
    v41 = *(double *)(a1 + 128);
    v42 = v41 - *(double *)(a1 + 120);
    v43 = *(unsigned __int8 *)(a1 + 528) == 1;
    *(_DWORD *)v54 = 134220544;
    *(double *)&v54[4] = v9;
    *(_WORD *)&v54[12] = 2048;
    *(double *)&v54[14] = v52;
    *(_WORD *)&v54[22] = 2048;
    *(double *)&v54[24] = v42;
    *(_WORD *)&v54[32] = 2048;
    *(double *)&v54[34] = v15;
    *(_WORD *)&v54[42] = 2048;
    *(double *)&v54[44] = *(float *)&v51;
    *(_WORD *)&v54[52] = 2048;
    *(double *)&v54[54] = v41;
    *(_WORD *)&v54[62] = 2048;
    *(double *)&v54[64] = *((float *)&v51 + 1);
    *(_WORD *)&v54[72] = 1024;
    *(_DWORD *)&v54[74] = v43;
    v55 = 2048;
    v56 = v17;
    v57 = 2048;
    v58 = v13;
    v59 = 2048;
    v60 = v25;
    LODWORD(v49) = 108;
    v44 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Walk, WorkRate, %f, distance(m), %f, duration(s), %f, userMets, %f, fMetsScaling, %f, endTime, %f, currentPace, %f, isStroller, %d, userMetsStrollerCorrected, %f, truthMets, %f, truthMetsStrollerCorrected, %f", COERCE_DOUBLE(v54), v49, v50, v51, v52, v53);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieWalkModel::calculateWorkRateMETS(const CLNatalieModelInput &, const float, const BOOL)", "%s\n", v44);
    if (v44 != (char *)buf)
      free(v44);
  }
  if (qword_10229FC90 != -1)
    dispatch_once(&qword_10229FC90, &stru_10213CF70);
  v37 = qword_10229FC98;
  if (os_log_type_enabled((os_log_t)qword_10229FC98, OS_LOG_TYPE_DEBUG))
  {
    v38 = *(_DWORD *)(v11 + 24);
    v39 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)buf = 67111168;
    *(_DWORD *)v62 = v38;
    *(_WORD *)&v62[4] = 2048;
    *(double *)&v62[6] = *((float *)&v53 + 1);
    *(_WORD *)&v62[14] = 2048;
    *(double *)&v62[16] = v39;
    *(_WORD *)&v62[24] = 2048;
    *(double *)&v62[26] = *(float *)&v53;
    v40 = 0.0;
    *(_WORD *)&v62[34] = 2048;
    *(double *)&v62[36] = v15;
    *(_WORD *)&v62[44] = 2048;
    *(double *)&v62[46] = v26;
    if (*(float *)&v53 >= 0.5)
      v40 = (float)(*((float *)&v53 + 1) / *(float *)&v53) * 100.0;
    *(_WORD *)&v62[54] = 2048;
    *(double *)&v62[56] = v40;
    *(_WORD *)&v62[64] = 2048;
    *(double *)&v62[66] = v13;
    v63 = 2048;
    v64 = v29;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "Walk, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, userMets %f, userMets + grade, %f, percent grade, %f, truthMets, %f, truthMets + grade, %f", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC90 != -1)
      dispatch_once(&qword_10229FC90, &stru_10213CF70);
    v45 = *(_DWORD *)(v11 + 24);
    v46 = *(double *)(a1 + 128) - *(double *)(a1 + 120);
    *(_DWORD *)v54 = 67111168;
    *(_DWORD *)&v54[4] = v45;
    *(_WORD *)&v54[8] = 2048;
    *(double *)&v54[10] = *((float *)&v53 + 1);
    *(_WORD *)&v54[18] = 2048;
    *(double *)&v54[20] = v46;
    *(_WORD *)&v54[28] = 2048;
    *(double *)&v54[30] = *(float *)&v53;
    v47 = 0.0;
    *(_WORD *)&v54[38] = 2048;
    *(double *)&v54[40] = v15;
    *(_WORD *)&v54[48] = 2048;
    *(double *)&v54[50] = v26;
    if (*(float *)&v53 >= 0.5)
      v47 = (float)(*((float *)&v53 + 1) / *(float *)&v53) * 100.0;
    *(_WORD *)&v54[58] = 2048;
    *(double *)&v54[60] = v47;
    *(_WORD *)&v54[68] = 2048;
    *(double *)&v54[70] = v13;
    v55 = 2048;
    v56 = v29;
    LODWORD(v49) = 88;
    v48 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC98, 2, "Walk, WorkRate, Grade type, %d, vertical speed %f, interval %f, workrate %f, userMets %f, userMets + grade, %f, percent grade, %f, truthMets, %f, truthMets + grade, %f", v54, v49, v50, v51, v52, v53, *(double *)v54, *(double *)&v54[8], *(double *)&v54[16]);
    sub_100512490("Generic", 1, 0, 2, "static CLMetsInfo CLCalorieWalkModel::calculateWorkRateMETS(const CLNatalieModelInput &, const float, const BOOL)", "%s\n", v48);
    if (v48 != (char *)buf)
      free(v48);
  }
}

void sub_10006011C(int a1, float a2, float a3, float a4)
{
  float v4;

  if (a1 == 1 && a4 > 0.0)
  {
    if (a3 >= 0.5)
      v4 = a2 / a3;
    else
      v4 = 0.0;
    pow(v4, 3.0);
    pow(v4, 4.0);
    pow(v4, 5.0);
  }
}

uint64_t sub_10006028C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  void **v5;
  uint64_t *v6;
  NSObject *v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  int v12;
  _BYTE *v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t);
  _QWORD *v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *v31;
  _BYTE *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  int v36;
  _BYTE *v37;
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t **v41;
  uint64_t *v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  int v49;
  _BYTE *v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  int v63;
  _BYTE *v64;
  _BYTE *v65;
  void **v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  _BYTE *v81;
  _BYTE *v82;
  void **v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  void **v89;
  char *v90;
  const char *v91;
  const char *v92;
  int v93;
  void *v94[2];
  char v95;
  unsigned int v96;
  _BYTE __p[12];
  __int16 v98;
  _BYTE *v99;
  __int16 v100;
  void **v101;
  _BYTE buf[12];
  __int16 v103;
  _BYTE *v104;
  __int16 v105;
  _BYTE *v106;
  _BYTE v107[12];
  __int16 v108;
  _BYTE *v109;
  char v110;

  ++*(_DWORD *)(a1 + 88);
  v96 = *(_DWORD *)(a1 + 4);
  if (!*(_QWORD *)(a1 + 32))
  {
    sub_10190BA74();
    goto LABEL_159;
  }
  v2 = a1;
  v6 = &qword_1022A0000;
  if (!*(_BYTE *)(a1 + 48))
  {
    sub_10190BBE8(qword_1022A0070 == -1);
    goto LABEL_159;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v4 = (unint64_t)&qword_1022A0000;
  v8 = qword_1022A0078;
  LODWORD(v3) = *(unsigned __int8 *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, *(os_log_type_t *)(v2 + 120)))
  {
    v9 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v9 = (_QWORD *)*v9;
    v10 = *(int *)(v2 + 4);
    if (v10 > 2)
      v11 = "StateUnknown";
    else
      v11 = (&off_102157B60)[v10];
    sub_1015A2E04(__p, v11);
    v12 = SHIBYTE(v100);
    v13 = *(_BYTE **)__p;
    v5 = (void **)v107;
    sub_10023D9C4(a2, v107);
    v14 = __p;
    if (v12 < 0)
      v14 = v13;
    if (v110 >= 0)
      v15 = v107;
    else
      v15 = *(_BYTE **)v107;
    *(_DWORD *)buf = 136315650;
    *(_QWORD *)&buf[4] = v9;
    v103 = 2080;
    v104 = v14;
    v105 = 2080;
    v106 = v15;
    _os_log_impl((void *)&_mh_execute_header, v8, (os_log_type_t)v3, "%scurrent_state,%s,event,%s", buf, 0x20u);
    if (v110 < 0)
      operator delete(*(void **)v107);
    if (SHIBYTE(v100) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v59 = (_QWORD *)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v59 = (_QWORD *)*v59;
    v60 = *(int *)(v2 + 4);
    if (v60 > 2)
      v61 = "StateUnknown";
    else
      v61 = (&off_102157B60)[v60];
    v62 = qword_1022A0078;
    v3 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(v107, v61);
    v63 = v110;
    v64 = *(_BYTE **)v107;
    v5 = v94;
    sub_10023D9C4(a2, v94);
    v65 = v107;
    if (v63 < 0)
      v65 = v64;
    if (v95 >= 0)
      v66 = v94;
    else
      v66 = (void **)v94[0];
    *(_DWORD *)__p = 136315650;
    *(_QWORD *)&__p[4] = v59;
    v98 = 2080;
    v99 = v65;
    v100 = 2080;
    v101 = v66;
    v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v62, v3, "%scurrent_state,%s,event,%s", __p, 32, v92);
    if (v95 < 0)
      operator delete(v94[0]);
    if (v110 < 0)
      operator delete(*(void **)v107);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v67);
    if (v67 != buf)
      free(v67);
  }
  v16 = *(_QWORD *)(v2 + 16);
  if (!v16)
    goto LABEL_31;
  v17 = (uint64_t **)(v2 + 8);
  v18 = *(_DWORD *)(v2 + 4);
  v19 = v2 + 16;
  do
  {
    v20 = *(_DWORD *)(v16 + 32);
    v21 = v20 < v18;
    if (v20 >= v18)
      v22 = (uint64_t *)v16;
    else
      v22 = (uint64_t *)(v16 + 8);
    if (!v21)
      v19 = v16;
    v16 = *v22;
  }
  while (*v22);
  if (v19 == v2 + 16 || v18 < *(_DWORD *)(v19 + 32))
  {
LABEL_31:
    sub_10190BD60();
    goto LABEL_159;
  }
  v24 = *(uint64_t (**)(_QWORD *, uint64_t))(v19 + 40);
  v23 = *(_QWORD *)(v19 + 48);
  v25 = (_QWORD *)(*(_QWORD *)(v2 + 32) + (v23 >> 1));
  if ((v23 & 1) != 0)
    v24 = *(uint64_t (**)(_QWORD *, uint64_t))(*v25 + v24);
  v26 = v24(v25, a2);
  v3 = v26;
  v93 = v26;
  if (a2 <= 1 && (_DWORD)v26 != v96)
  {
    sub_10190C1BC();
    while (1)
    {
LABEL_159:
      while (1)
      {
        __break(1u);
LABEL_160:
        v75 = "StateUnknown";
LABEL_161:
        v78 = *(_QWORD *)(v4 + 120);
        v79 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v107, v75);
        v80 = v110;
        v81 = *(_BYTE **)v107;
        sub_1015A2E04(v94, "Exit");
        v82 = v107;
        if (v80 < 0)
          v82 = v81;
        if (v95 >= 0)
          v83 = v94;
        else
          v83 = (void **)v94[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v5;
        v98 = 2080;
        v99 = v82;
        v100 = 2080;
        v101 = v83;
        LODWORD(v91) = 32;
        v84 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, v79, "%soldState,%s,event,%s", __p, v91, v92);
        if (v95 < 0)
          operator delete(v94[0]);
        if (v110 < 0)
          operator delete(*(void **)v107);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v84);
        v17 = (uint64_t **)v92;
        if (v84 != buf)
          free(v84);
LABEL_78:
        v40 = *(_QWORD *)(v2 + 32);
        *(_QWORD *)buf = &v96;
        v41 = sub_1000610B4(v17, (int *)&v96, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v42 = v41[5];
        v43 = (uint64_t)v41[6];
        v44 = (_QWORD *)(v40 + (v43 >> 1));
        if ((v43 & 1) != 0)
          v42 = *(uint64_t **)(*v44 + v42);
        v45 = ((uint64_t (*)(_QWORD *, uint64_t))v42)(v44, 1);
        if (v45 == v96)
          break;
        sub_10190C048();
      }
      *(_DWORD *)(v2 + 4) = v3;
      if (v6[14] != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v46 = *(NSObject **)(v4 + 120);
      v47 = *(_BYTE *)(v2 + 120);
      if (os_log_type_enabled(v46, v47))
      {
        v5 = (void **)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v5 = (void **)*v5;
        if (v3 > 2)
          v48 = "StateUnknown";
        else
          v48 = (&off_102157B60)[(int)v3];
        sub_1015A2E04(__p, v48);
        v49 = SHIBYTE(v100);
        v50 = *(_BYTE **)__p;
        sub_1015A2E04(v107, "Enter");
        v51 = __p;
        if (v49 < 0)
          v51 = v50;
        if (v110 >= 0)
          v52 = v107;
        else
          v52 = *(_BYTE **)v107;
        *(_DWORD *)buf = 136315650;
        *(_QWORD *)&buf[4] = v5;
        v103 = 2080;
        v104 = v51;
        v105 = 2080;
        v106 = v52;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "%snewState,%s,event,%s", buf, 0x20u);
        if (v110 < 0)
          operator delete(*(void **)v107);
        if (SHIBYTE(v100) < 0)
          operator delete(*(void **)__p);
        v17 = (uint64_t **)v92;
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (v6[14] != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v76 = (_QWORD *)(v2 + 96);
        if (*(char *)(v2 + 119) < 0)
          v76 = (_QWORD *)*v76;
        if (v3 > 2)
          v77 = "StateUnknown";
        else
          v77 = (&off_102157B60)[(int)v3];
        v85 = *(_QWORD *)(v4 + 120);
        v86 = *(unsigned __int8 *)(v2 + 120);
        sub_1015A2E04(v107, v77);
        v4 = v110;
        v87 = *(_BYTE **)v107;
        sub_1015A2E04(v94, "Enter");
        v88 = v107;
        if ((v4 & 0x80000000) != 0)
          v88 = v87;
        if (v95 >= 0)
          v89 = v94;
        else
          v89 = (void **)v94[0];
        *(_DWORD *)__p = 136315650;
        *(_QWORD *)&__p[4] = v76;
        v98 = 2080;
        v99 = v88;
        v100 = 2080;
        v101 = v89;
        LODWORD(v91) = 32;
        v90 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v85, v86, "%snewState,%s,event,%s", __p, v91, v92);
        if (v95 < 0)
          operator delete(v94[0]);
        if (v110 < 0)
          operator delete(*(void **)v107);
        sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v90);
        if (v90 != buf)
          free(v90);
      }
      v53 = *(_QWORD *)(v2 + 32);
      *(_QWORD *)buf = &v93;
      v54 = sub_1000610B4(v17, &v93, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
      v55 = v54[5];
      v56 = (uint64_t)v54[6];
      v57 = (_QWORD *)(v53 + (v56 >> 1));
      if ((v56 & 1) != 0)
        v55 = *(uint64_t **)(*v57 + v55);
      v3 = ((uint64_t (*)(_QWORD *, _QWORD))v55)(v57, 0);
      if ((_DWORD)v3 == v93)
        break;
      sub_10190BED4();
    }
    goto LABEL_103;
  }
  if (*(_DWORD *)(v2 + 88) >= 2u)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v27 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v28 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v28 = (_QWORD *)*v28;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v28;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "%sNested invocation of state machine", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v69 = (_QWORD *)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v69 = (_QWORD *)*v69;
      *(_DWORD *)__p = 136315138;
      *(_QWORD *)&__p[4] = v69;
      v70 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "%sNested invocation of state machine", __p);
      sub_100512490("Generic", 1, 0, 0, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v70);
      if (v70 != buf)
        free(v70);
    }
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v29 = qword_1022A0078;
  v30 = *(_BYTE *)(v2 + 120);
  if (os_log_type_enabled((os_log_t)qword_1022A0078, v30))
  {
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v31 = "StateUnknown";
    else
      v31 = (&off_102157B60)[(int)v3];
    sub_1015A2E04(buf, v31);
    if (v105 >= 0)
      v32 = buf;
    else
      v32 = *(_BYTE **)buf;
    *(_DWORD *)__p = 136315394;
    *(_QWORD *)&__p[4] = v5;
    v98 = 2080;
    v99 = v32;
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "%snewState,%s", __p, 0x16u);
    if (SHIBYTE(v105) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v5 = (void **)(v2 + 96);
    if (*(char *)(v2 + 119) < 0)
      v5 = (void **)*v5;
    if (v3 > 2)
      v68 = "StateUnknown";
    else
      v68 = (&off_102157B60)[(int)v3];
    v71 = qword_1022A0078;
    v72 = *(unsigned __int8 *)(v2 + 120);
    sub_1015A2E04(__p, v68);
    if (v100 >= 0)
      v73 = __p;
    else
      v73 = *(_BYTE **)__p;
    *(_DWORD *)v107 = 136315394;
    *(_QWORD *)&v107[4] = v5;
    v108 = 2080;
    v109 = v73;
    LODWORD(v91) = 22;
    v74 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, v72, "%snewState,%s", v107, v91);
    if (SHIBYTE(v100) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "State CLStateMachine<CLGnssController>::handleEvent(Event) [T = CLGnssController]", "%s\n", v74);
    if (v74 != buf)
      free(v74);
  }
  if ((_DWORD)v3 != v96)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102156068);
    v33 = qword_1022A0078;
    v34 = *(_BYTE *)(v2 + 120);
    v92 = (const char *)(v2 + 8);
    if (os_log_type_enabled((os_log_t)qword_1022A0078, v34))
    {
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v96 > 2)
        v35 = "StateUnknown";
      else
        v35 = (&off_102157B60)[v96];
      sub_1015A2E04(__p, v35);
      v36 = SHIBYTE(v100);
      v37 = *(_BYTE **)__p;
      sub_1015A2E04(v107, "Exit");
      v38 = __p;
      if (v36 < 0)
        v38 = v37;
      if (v110 >= 0)
        v39 = v107;
      else
        v39 = *(_BYTE **)v107;
      *(_DWORD *)buf = 136315650;
      *(_QWORD *)&buf[4] = v5;
      v103 = 2080;
      v104 = v38;
      v105 = 2080;
      v106 = v39;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%soldState,%s,event,%s", buf, 0x20u);
      if (v110 < 0)
        operator delete(*(void **)v107);
      if (SHIBYTE(v100) < 0)
        operator delete(*(void **)__p);
      v4 = (unint64_t)&qword_1022A0000;
      v17 = (uint64_t **)(v2 + 8);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5 = (void **)(v2 + 96);
      if (*(char *)(v2 + 119) < 0)
        v5 = (void **)*v5;
      if (v96 <= 2)
      {
        v75 = (&off_102157B60)[v96];
        goto LABEL_161;
      }
      goto LABEL_160;
    }
    goto LABEL_78;
  }
LABEL_103:
  --*(_DWORD *)(v2 + 88);
  return v3;
}

void sub_100061054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 105) < 0)
    operator delete(*(void **)(v22 - 128));
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1000610B4(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100061174(unsigned __int8 *a1, int a2)
{
  int v3;
  uint64_t result;
  NSObject *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  NSObject *v11;
  _QWORD *v12;
  uint64_t v13;
  int *v14;
  void *v15;
  NSObject *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  const char *v21;
  uint8_t *v22;
  const char *v23;
  uint8_t *v24;
  const char *v25;
  uint8_t *v26;
  uint64_t v27;
  _WORD v28[8];
  _BYTE v29[24];
  _BYTE *v30;
  uint8_t buf[1640];
  _BYTE v32[24];
  _BYTE *v33;

  switch(a2)
  {
    case 0:
      sub_10023DB00(a1);
      sub_10023E348((uint64_t)a1);
      *((_QWORD *)a1 + 96) = -[CLOSTransaction initWithDescription:]([CLOSTransaction alloc], "initWithDescription:", "com.apple.locationd.gnss.on");
      v6 = *((_QWORD *)a1 + 148);
      if (v6)
        sub_10021B438(v6);
      *((_WORD *)a1 + 1384) = 0;
      *((double *)a1 + 347) = sub_1001FCBB4();
      sub_100270E34((uint64_t)v32, (uint64_t)(a1 + 616));
      sub_10023E450((uint64_t)a1, (uint64_t)v32);
      v7 = v33;
      if (v33 == v32)
      {
        v8 = 4;
        v7 = v32;
      }
      else
      {
        if (!v33)
        {
LABEL_55:
          v14 = (int *)*((_QWORD *)a1 + 386);
          if (v14)
            sub_1008493C0(v14);
          sub_10001C254(a1);
          a1[2618] = 0;
          return 1;
        }
        v8 = 5;
      }
      (*(void (**)(void))(*v7 + 8 * v8))();
      goto LABEL_55;
    case 1:
      sub_10001C254(a1);
      if (*((_QWORD *)a1 + 110))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v9 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "#ee,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v28[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#ee,reverting to nominal download rates on session exit", v28, 2);
          v20 = (uint8_t *)v19;
          sub_100512490("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v19);
          if (v20 != buf)
            free(v20);
        }
        sub_101762828(*((double **)a1 + 110), 0);
      }
      if (*((_QWORD *)a1 + 113))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v10 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "#rte,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v28[0] = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#rte,reverting to nominal download rates on session exit", v28, v27);
          v22 = (uint8_t *)v21;
          sub_100512490("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v21);
          if (v22 != buf)
            free(v22);
        }
        sub_100221680(*((double **)a1 + 113), 0, 0);
      }
      if (*((_QWORD *)a1 + 125))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v11 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#rof,reverting to nominal download rates on session exit", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v28[0] = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#rof,reverting to nominal download rates on session exit", v28, v27);
          v24 = (uint8_t *)v23;
          sub_100512490("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v23);
          if (v24 != buf)
            free(v24);
        }
        sub_100221680(*((double **)a1 + 125), 0, 1);
      }
      sub_10023E348((uint64_t)a1);
      sub_100270E34((uint64_t)v29, (uint64_t)(a1 + 648));
      sub_10023E678(a1, (uint64_t)v29);
      v12 = v30;
      if (v30 == v29)
      {
        v13 = 4;
        v12 = v29;
      }
      else
      {
        if (!v30)
          goto LABEL_60;
        v13 = 5;
      }
      (*(void (**)(void))(*v12 + 8 * v13))();
LABEL_60:
      v15 = (void *)*((_QWORD *)a1 + 96);
      if (v15)
      {

        *((_QWORD *)a1 + 96) = 0;
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v16 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "os transaction already nil", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v28[0] = 0;
          LODWORD(v27) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "os transaction already nil", v28, v27);
          v26 = (uint8_t *)v25;
          sub_100512490("Generic", 1, 0, 0, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v25);
          if (v26 != buf)
            free(v26);
        }
      }
      sub_10023D9F0(a1);
      if (a1[2618] && *(_QWORD *)a1)
        (*(void (**)(_QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1);
      return 1;
    case 2:
    case 5:
    case 7:
    case 9:
    case 11:
    case 13:
      v3 = sub_10001491C((uint64_t)a1);
      if (!v3)
      {
        if (!a1[800])
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_102156068);
          v5 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "#GnssController,debounce timer not running when expected to be running", buf, 2u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_102156068);
            v28[0] = 0;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#GnssController,debounce timer not running when expected to be running", v28, 2);
            v18 = (uint8_t *)v17;
            sub_100512490("Generic", 1, 0, 0, "CLGnssController::State CLGnssController::handler_Running(CLGnssController::Event)", "%s\n", v17);
            if (v18 != buf)
              free(v18);
          }
          sub_100849734((uint64_t)a1);
        }
        return 1;
      }
      if (v3 == 1)
      {
        sub_10023E348((uint64_t)a1);
        return 1;
      }
      return 2;
    case 3:
    case 12:
    case 14:
      result = sub_10001491C((uint64_t)a1);
      if ((_DWORD)result)
        return result;
      if (sub_100849878((uint64_t)a1, 1) > 0.0)
      {
        sub_100849734((uint64_t)a1);
        return 1;
      }
      return 0;
    case 4:
      if ((sub_100195F08() & 1) != 0 || (*((_DWORD *)a1 + 150) & 0xFFFFFFFE) != 0xA)
      {
        sub_100849734((uint64_t)a1);
        if (*(_QWORD *)a1)
          (*(void (**)(_QWORD))(**(_QWORD **)a1 + 32))(*(_QWORD *)a1);
        return 1;
      }
      else
      {
        result = 0;
        a1[2618] = 1;
      }
      return result;
    case 6:
    case 8:
    case 10:
    case 16:
      return 0;
    case 15:
      sub_100848E34(a1);
      return 1;
    case 17:
      return sub_10001491C((uint64_t)a1);
    default:
      return 1;
  }
}

void sub_100061A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16)
{
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a16;
  if (a16 == v16)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_100061ABC(uint64_t *a1, int a2)
{
  uint64_t v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t buf[1640];

  switch(a2)
  {
    case 2:
    case 7:
    case 9:
    case 11:
    case 13:
      return sub_10001491C((uint64_t)a1);
    case 4:
      v4 = *a1;
      if (*a1)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 32))(v4);
      return 0;
    case 5:
      sub_100848DC4((uint64_t)a1);
      return sub_10001491C((uint64_t)a1);
    case 15:
      sub_100848E34(a1);
      return 0;
    case 16:
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102156068);
      v5 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning,CLGnssController,Unexpected Debounce Timeout event in Idle state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_102156068);
        v8[0] = 0;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,CLGnssController,Unexpected Debounce Timeout event in Idle state", v8, 2);
        v7 = (uint8_t *)v6;
        sub_100512490("Generic", 1, 0, 2, "CLGnssController::State CLGnssController::handler_Idle(CLGnssController::Event)", "%s\n", v6);
        if (v7 != buf)
          free(v7);
      }
      return 0;
    default:
      return 0;
  }
}

void sub_100061CCC(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  int v16;
  int v17;
  int v18;
  char *v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  uint8_t buf[4];
  int v26;
  __int16 v27;
  int v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  char v41;
  char v42;
  int v43;

  if (qword_1022A02C0 != -1)
    dispatch_once(&qword_1022A02C0, &stru_102150D80);
  v2 = qword_1022A02C8;
  if (os_log_type_enabled((os_log_t)qword_1022A02C8, OS_LOG_TYPE_DEBUG))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v4 = *(unsigned __int8 *)(v3 + 48);
    v5 = *(unsigned __int8 *)(v3 + 49);
    v6 = *(unsigned __int8 *)(v3 + 50);
    v7 = *(unsigned __int8 *)(v3 + 51);
    v8 = *(unsigned __int8 *)(v3 + 52);
    v9 = *(_DWORD *)(v3 + 56);
    v10 = *(unsigned __int8 *)(v3 + 60);
    v11 = *(_DWORD *)(v3 + 64);
    LODWORD(v3) = *(_DWORD *)(v3 + 68);
    *(_DWORD *)buf = 67111168;
    v26 = v4;
    v27 = 1024;
    v28 = v5;
    v29 = 1024;
    v30 = v6;
    v31 = 1024;
    v32 = v7;
    v33 = 1024;
    v34 = v8;
    v35 = 1024;
    v36 = v9;
    v37 = 1024;
    v38 = v10;
    v39 = 1024;
    v40 = v11;
    v41 = 0;
    v42 = 4;
    v43 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d", buf, 0x38u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02C0 != -1)
      dispatch_once(&qword_1022A02C0, &stru_102150D80);
    v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v13 = *(unsigned __int8 *)(v12 + 49);
    v14 = *(unsigned __int8 *)(v12 + 50);
    v15 = *(unsigned __int8 *)(v12 + 51);
    v16 = *(_DWORD *)(v12 + 56);
    v17 = *(unsigned __int8 *)(v12 + 60);
    v18 = *(_DWORD *)(v12 + 64);
    LOWORD(v21) = 1024;
    HIWORD(v21) = v13;
    LOWORD(v22) = HIWORD(v15);
    HIWORD(v22) = 1024;
    LOWORD(v23) = 1024;
    HIWORD(v23) = v16;
    LOWORD(v24) = HIWORD(v18);
    HIWORD(v24) = 1024;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02C8, 2, "location system state, cell available, %d, wifi available, %d, passcode locked, %d, airplane mode enabled, %d, accessory connected, %d, reachability, %d, powered, %d, gpsCoexWifi, %d, gpsCoexBt, %d", &v20, 56, 67111168, v21, v14, v22, v23, v17, v24);
    sub_100512490("Generic", 1, 0, 2, "static void CLDaemonStats::fetchLocationSystemStateWithReply(id<CLIntersiloUniverse>, void (^)(const CLDaemonStats_Type::LocationSystemState &))_block_invoke", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

__n128 sub_100061F78(uint64_t a1)
{
  __n128 *v1;
  __n128 result;
  NSObject *v4;
  unint64_t v5;
  __n128 *v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;
  __int16 v10;
  unint64_t v11;

  v1 = *(__n128 **)(a1 + 32);
  if (v1[19].n128_u8[8])
  {
    result.n128_u64[0] = v1[20].n128_u64[0];
    if (result.n128_f64[0] == *(double *)(a1 + 40))
    {
      if (qword_1022A01C0 != -1)
        dispatch_once(&qword_1022A01C0, &stru_1021A38A8);
      v4 = qword_1022A01C8;
      if (os_log_type_enabled((os_log_t)qword_1022A01C8, OS_LOG_TYPE_DEBUG))
      {
        v5 = v1[1].n128_u64[1];
        v7[0] = 68289282;
        v7[1] = 0;
        v8 = 2082;
        v9 = "";
        v10 = 2114;
        v11 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"received location system state of LocationUpdateSession\", \"Client\":%{public, location:escape_only}@}", (uint8_t *)v7, 0x1Cu);
      }
      v6 = *(__n128 **)(a1 + 48);
      result = *v6;
      v1[23].n128_u64[0] = v6[1].n128_u64[0];
      v1[22] = result;
    }
  }
  return result;
}

void sub_100062098(uint64_t a1, void *a2, double a3)
{
  NSObject *v6;
  _QWORD *i;
  unint64_t v8;
  id v9;
  _BOOL8 v10;
  _BYTE *v11;
  double Current;
  void *v13;
  uint8_t buf[8];
  __int16 v15;
  const char *v16;
  __int16 v17;
  id v18;
  __int16 v19;
  double v20;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218BF50);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    v15 = 2082;
    v16 = "";
    v17 = 2082;
    v18 = objc_msgSend(objc_msgSend(a2, "description"), "UTF8String");
    v19 = 2050;
    v20 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Accuracy enablement assertion taken\", \"client\":%{public, location:escape_only}s, \"accuracy\":\"%{public}f\"}", buf, 0x26u);
  }
  for (i = *(_QWORD **)(a1 + 256); i; i = (_QWORD *)*i)
  {
    v8 = i[4];
    if (v8 <= (unint64_t)a2)
    {
      if (v8 >= (unint64_t)a2)
        goto LABEL_11;
      ++i;
    }
  }
  v9 = a2;
LABEL_11:
  v13 = a2;
  *(_QWORD *)buf = &v13;
  *((double *)sub_10006221C((uint64_t **)(a1 + 248), (unint64_t *)&v13, (uint64_t)&unk_101B9EB60, (uint64_t **)buf)
  + 5) = a3;
  v10 = sub_1000624C0(a1);
  v11 = *(_BYTE **)(a1 + 128);
  Current = CFAbsoluteTimeGetCurrent();
  sub_1000622D8(v11, v10, Current);
}

uint64_t *sub_10006221C(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t **v9;
  unint64_t v10;
  uint64_t *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = v6[4];
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_1000145B0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_1000622D8(_BYTE *a1, uint64_t a2, double a3)
{
  NSObject *v6;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  if (qword_1022A01E0 != -1)
    dispatch_once(&qword_1022A01E0, &stru_10218AF40);
  v6 = qword_1022A01E8;
  if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setLocalGPSRestricted,%d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01E0 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218AF40);
    v8[0] = 67109120;
    v8[1] = a2;
    v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01E8, 0, "setLocalGPSRestricted,%d", v8);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLStreamingAwareLocationProviderStateMachine::setLocalGPSRestricted(BOOL, CFAbsoluteTime)", "%s\n", v7);
    if (v7 != (char *)buf)
      free(v7);
  }
  if (a1[92] != (_DWORD)a2)
  {
    if (a1[93])
    {
      a1[92] = a2;
      (*(void (**)(_BYTE *, uint64_t, double))(*(_QWORD *)a1 + 136))(a1, a2, a3);
    }
  }
}

BOOL sub_1000624C0(uint64_t a1)
{
  double *v1;
  double *v2;
  uint64_t v3;
  double v4;
  NSObject *v5;
  uint64_t v6;
  double *v7;
  double *v8;
  BOOL v9;
  uint8_t buf[4];
  int v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;

  v1 = *(double **)(a1 + 248);
  v2 = (double *)(a1 + 256);
  if (v1 == (double *)(a1 + 256))
    return 1;
  v3 = qword_1022A01E0;
  v4 = 1.79769313e308;
  do
  {
    if (v3 != -1)
      dispatch_once(&qword_1022A01E0, &stru_10218BF50);
    v5 = qword_1022A01E8;
    if (os_log_type_enabled((os_log_t)qword_1022A01E8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = *((_QWORD *)v1 + 5);
      *(_DWORD *)buf = 68289282;
      v12 = 0;
      v13 = 2082;
      v14 = "";
      v15 = 2050;
      v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"shouldLocalGPSBeRestricted,list\", \"accuracy\":\"%{public}f\"}", buf, 0x1Cu);
      v3 = qword_1022A01E0;
    }
    else
    {
      v3 = -1;
    }
    if (v1[5] < v4)
      v4 = v1[5];
    v7 = (double *)*((_QWORD *)v1 + 1);
    if (v7)
    {
      do
      {
        v8 = v7;
        v7 = *(double **)v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        v8 = (double *)*((_QWORD *)v1 + 2);
        v9 = *(_QWORD *)v8 == (_QWORD)v1;
        v1 = v8;
      }
      while (!v9);
    }
    v1 = v8;
  }
  while (v8 != v2);
  return v4 >= 100.0;
}

void sub_100062660(uint64_t a1, uint64_t a2, float a3)
{
  float v5;
  int v6;
  int v7;
  double v8;
  double v9;
  unsigned int v10;
  int v11;
  double v12;
  char v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  int v23;
  double v24;
  double v25;
  double v26;
  char v27;
  int v28;
  int v29;
  char v30;
  char v31;
  unint64_t v32;
  unint64_t v33;
  double v34;
  __int128 v35;
  char *v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  char *v48;
  char *v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  int v58;
  double v59;
  double v60;
  int v61;
  int v62;
  __int16 v63;
  int v64;
  char v65;
  unint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  double *v75;
  char *v76;
  char *v77;
  char *v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  unsigned int v82;
  unsigned int v83;
  NSObject *v84;
  unint64_t v85;
  double v86;
  double v87;
  double v88;
  int v89;
  double v90;
  double v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  int v95;
  float v96;
  double v97;
  double v98;
  int v99;
  int v100;
  int v101;
  float v102;
  float v103;
  int v104;
  double v105;
  float v106;
  uint64_t v107;
  int v108;
  unsigned int v109;
  int v110;
  float v111;
  const char *v112;
  char *v113;
  double v114;
  CFAbsoluteTime Current;
  double v116;
  double v117;
  int v118;
  int v119;
  int v120;
  unsigned int v121;
  int v122;
  int v123;
  double v124;
  int v125;
  double v126;
  int v127;
  double v128;
  __int16 v129;
  int v130;
  __int16 v131;
  double v132;
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;
  __int16 v137;
  int v138;
  __int16 v139;
  int v140;
  __int16 v141;
  double v142;
  __int16 v143;
  double v144;
  __int16 v145;
  int v146;
  __int16 v147;
  CFAbsoluteTime v148;
  __int16 v149;
  double v150;
  __int16 v151;
  double v152;
  __int16 v153;
  uint64_t v154;
  __int16 v155;
  int v156;
  __int16 v157;
  int v158;
  __int16 v159;
  int v160;
  __int16 v161;
  int v162;
  __int16 v163;
  int v164;
  __int16 v165;
  int v166;
  __int16 v167;
  int v168;
  __int16 v169;
  int v170;
  __int16 v171;
  int v172;
  __int16 v173;
  int v174;
  __int16 v175;
  int v176;
  __int16 v177;
  double v178;
  __int16 v179;
  int v180;
  __int16 v181;
  int v182;
  __int16 v183;
  int v184;
  __int16 v185;
  int v186;
  __int16 v187;
  int v188;
  __int16 v189;
  int v190;
  __int16 v191;
  int v192;
  __int16 v193;
  int v194;
  __int16 v195;
  unsigned int v196;
  __int16 v197;
  int v198;
  __int16 v199;
  double v200;
  __int16 v201;
  _BOOL4 v202;
  __int16 v203;
  int v204;
  __int16 v205;
  int v206;
  _BYTE buf[30];
  int v208;
  __int16 v209;
  int v210;
  __int16 v211;
  int v212;
  __int16 v213;
  int v214;
  __int16 v215;
  double v216;
  __int16 v217;
  double v218;
  __int16 v219;
  int v220;
  __int16 v221;
  CFAbsoluteTime v222;
  __int16 v223;
  double v224;
  __int16 v225;
  double v226;
  __int16 v227;
  uint64_t v228;
  __int16 v229;
  int v230;
  __int16 v231;
  int v232;
  __int16 v233;
  int v234;
  __int16 v235;
  int v236;
  __int16 v237;
  int v238;
  __int16 v239;
  int v240;
  __int16 v241;
  int v242;
  __int16 v243;
  int v244;
  __int16 v245;
  int v246;
  __int16 v247;
  int v248;
  __int16 v249;
  int v250;
  __int16 v251;
  double v252;
  __int16 v253;
  int v254;
  __int16 v255;
  int v256;
  __int16 v257;
  int v258;
  __int16 v259;
  int v260;
  __int16 v261;
  int v262;
  __int16 v263;
  int v264;
  __int16 v265;
  int v266;
  __int16 v267;
  int v268;
  __int16 v269;
  unsigned int v270;
  __int16 v271;
  int v272;
  __int16 v273;
  double v274;
  __int16 v275;
  _BOOL4 v276;
  __int16 v277;
  int v278;
  __int16 v279;
  int v280;

  LOBYTE(a3) = *(_BYTE *)(a2 + 1);
  v5 = (float)LODWORD(a3);
  v6 = *(_DWORD *)(a2 + 44);
  if (!*(_BYTE *)(a1 + 360)
    || (v7 = *(_DWORD *)(a1 + 396), v8 = (double)v7 * 2.56, *(_BYTE *)(a1 + 384))
    && v8 >= (double)(3600 * *(_DWORD *)(a1 + 388)))
  {
    v117 = *(float *)(a2 + 28);
    v121 = *(_DWORD *)(a2 + 4);
    v124 = *(float *)(a2 + 32);
  }
  else
  {
    v9 = (double)*(int *)(a1 + 364) / 3600.0;
    v10 = (v9 * v8);
    v124 = (double)v10 / v9;
    v121 = v10;
    v6 = (int)((double)(v10 - (int)(v9 * ((double)(v7 - 1) * 2.56))) / v9 * 1000000.0);
    v117 = 1.0 / (v9 * (*(float *)(a1 + 376) / 100.0));
    if (*(_BYTE *)(a1 + 372))
      v5 = *(float *)(a1 + 376);
    *(_DWORD *)(a1 + 396) = v7 + 1;
  }
  Current = CFAbsoluteTimeGetCurrent();
  v11 = *(_DWORD *)(a2 + 48);
  v12 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653))
  {
    if (*(_BYTE *)(a1 + 652))
    {
      v13 = 0;
      goto LABEL_13;
    }
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v13 = 1;
LABEL_13:
  v14 = *(double *)(a1 + 664);
  if (v6)
  {
    v15 = *(double *)(a1 + 352) + (double)v6 / -1000000.0;
    v16 = *(double *)(a1 + 664);
    if ((v13 & 1) == 0)
    {
      v16 = *(double *)(a1 + 664);
      if (!*(_BYTE *)(a1 + 652))
      {
        sub_1010231AC(a1);
        *(_BYTE *)(a1 + 653) = 0;
        v16 = *(double *)(a1 + 664);
      }
    }
    v17 = v15 + v16;
  }
  else
  {
    v17 = 0.0;
  }
  v116 = v17;
  v18 = 1000000.0;
  if ((sub_1001B7910() & 0x8000000) != 0)
    v19 = *(_DWORD *)(a2 + 8);
  else
    v19 = 0;
  v20 = v12 + v14;
  v21 = v5;
  v22 = (double)v11 / 1000000.0;
  if ((sub_1001B7910() & 0x8000000) != 0)
    v23 = *(_DWORD *)(a2 + 12);
  else
    v23 = 0;
  v24 = v12 - v22;
  v25 = v20 - v22;
  v26 = *(float *)(a2 + 40);
  memset(&buf[6], 0, 24);
  v27 = *(_BYTE *)(a2 + 2);
  v28 = *(_DWORD *)(a2 + 16);
  v29 = *(_DWORD *)(a2 + 20);
  v30 = *(_BYTE *)(a2 + 37);
  v31 = *(_BYTE *)(a2 + 38);
  v32 = *(_QWORD *)(a1 + 432);
  v33 = *(_QWORD *)(a1 + 440);
  v34 = v21 / 100.0;
  if (v32 >= v33)
  {
    v37 = (void **)(a1 + 424);
    v38 = *(_QWORD *)(a1 + 424);
    v39 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v32 - v38) >> 4);
    v40 = v39 + 1;
    if ((unint64_t)(v39 + 1) > 0x1745D1745D1745DLL)
      sub_100259694();
    v41 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v33 - v38) >> 4);
    if (2 * v41 > v40)
      v40 = 2 * v41;
    if (v41 >= 0xBA2E8BA2E8BA2ELL)
      v42 = 0x1745D1745D1745DLL;
    else
      v42 = v40;
    if (v42)
    {
      HIDWORD(v114) = v19;
      v43 = v23;
      v44 = (char *)sub_101035B94(a1 + 440, v42);
      v23 = v43;
      v37 = (void **)(a1 + 424);
    }
    else
    {
      v44 = 0;
    }
    v45 = &v44[176 * v39];
    *(double *)v45 = v24;
    *((double *)v45 + 1) = v25;
    *((double *)v45 + 2) = v116;
    *((_DWORD *)v45 + 6) = v121;
    v46 = &v44[176 * v42];
    *((_QWORD *)v45 + 4) = 0;
    *((double *)v45 + 5) = v34;
    *((_QWORD *)v45 + 6) = 0;
    *((_QWORD *)v45 + 7) = 0;
    *((_DWORD *)v45 + 16) = v19;
    *((_DWORD *)v45 + 17) = v23;
    *((double *)v45 + 9) = v117;
    *((double *)v45 + 10) = v26;
    *((double *)v45 + 11) = v124;
    *((_DWORD *)v45 + 24) = 0;
    *((_QWORD *)v45 + 13) = 0;
    *((_WORD *)v45 + 56) = 0;
    v47 = *(_OWORD *)buf;
    *((_OWORD *)v45 + 8) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v45 + 114) = v47;
    *((_QWORD *)v45 + 18) = 0x1A00000000;
    v45[152] = v27;
    *((_DWORD *)v45 + 39) = v28;
    *((_DWORD *)v45 + 40) = v29;
    v45[164] = v30;
    v45[165] = v31;
    v45[166] = 0;
    *((_DWORD *)v45 + 42) = 0;
    v36 = v45 + 176;
    v49 = *(char **)(a1 + 424);
    v48 = *(char **)(a1 + 432);
    if (v48 != v49)
    {
      do
      {
        v50 = *((_OWORD *)v48 - 11);
        v51 = *((_OWORD *)v48 - 9);
        *((_OWORD *)v45 - 10) = *((_OWORD *)v48 - 10);
        *((_OWORD *)v45 - 9) = v51;
        *((_OWORD *)v45 - 11) = v50;
        v52 = *((_OWORD *)v48 - 8);
        v53 = *((_OWORD *)v48 - 7);
        v54 = *((_OWORD *)v48 - 5);
        *((_OWORD *)v45 - 6) = *((_OWORD *)v48 - 6);
        *((_OWORD *)v45 - 5) = v54;
        *((_OWORD *)v45 - 8) = v52;
        *((_OWORD *)v45 - 7) = v53;
        v55 = *((_OWORD *)v48 - 4);
        v56 = *((_OWORD *)v48 - 3);
        v57 = *((_OWORD *)v48 - 1);
        *((_OWORD *)v45 - 2) = *((_OWORD *)v48 - 2);
        *((_OWORD *)v45 - 1) = v57;
        *((_OWORD *)v45 - 4) = v55;
        *((_OWORD *)v45 - 3) = v56;
        v45 -= 176;
        v48 -= 176;
      }
      while (v48 != v49);
      v48 = (char *)*v37;
    }
    *(_QWORD *)(a1 + 424) = v45;
    *(_QWORD *)(a1 + 432) = v36;
    *(_QWORD *)(a1 + 440) = v46;
    if (v48)
      operator delete(v48);
  }
  else
  {
    *(double *)v32 = v24;
    *(double *)(v32 + 8) = v25;
    *(double *)(v32 + 16) = v116;
    *(_DWORD *)(v32 + 24) = v121;
    *(_QWORD *)(v32 + 32) = 0;
    *(double *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = 0;
    *(_QWORD *)(v32 + 56) = 0;
    *(_DWORD *)(v32 + 64) = v19;
    *(_DWORD *)(v32 + 68) = v23;
    *(double *)(v32 + 72) = v117;
    *(double *)(v32 + 80) = v26;
    *(double *)(v32 + 88) = v124;
    *(_DWORD *)(v32 + 96) = 0;
    *(_QWORD *)(v32 + 104) = 0;
    *(_WORD *)(v32 + 112) = 0;
    v35 = *(_OWORD *)buf;
    *(_OWORD *)(v32 + 128) = *(_OWORD *)&buf[14];
    *(_OWORD *)(v32 + 114) = v35;
    *(_QWORD *)(v32 + 144) = 0x1A00000000;
    *(_BYTE *)(v32 + 152) = v27;
    *(_DWORD *)(v32 + 156) = v28;
    *(_DWORD *)(v32 + 160) = v29;
    *(_BYTE *)(v32 + 164) = v30;
    *(_BYTE *)(v32 + 165) = v31;
    *(_BYTE *)(v32 + 166) = 0;
    v36 = (char *)(v32 + 176);
    *(_DWORD *)(v32 + 168) = 0;
  }
  *(_QWORD *)(a1 + 432) = v36;
  v58 = *(_DWORD *)(a2 + 16);
  if (v58 || *(_DWORD *)(a2 + 20))
  {
    v59 = *(double *)(a1 + 352);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
      v58 = *(_DWORD *)(a2 + 16);
    }
    v60 = v59 + *(double *)(a1 + 664);
    v61 = *(_DWORD *)(a2 + 20);
    v62 = *(unsigned __int8 *)(a2 + 36);
    v63 = *(_WORD *)(a2 + 52);
    v64 = *(_DWORD *)(a2 + 56);
    LODWORD(v18) = *(_DWORD *)(a2 + 60);
    v65 = *(_BYTE *)(a1 + 859);
    v66 = *(_QWORD *)(a1 + 456);
    v67 = *(_QWORD *)(a1 + 464);
    if (v66 >= v67)
    {
      v69 = *(_QWORD *)(a1 + 448);
      v70 = (uint64_t)(v66 - v69) >> 6;
      v71 = v70 + 1;
      if ((unint64_t)(v70 + 1) >> 58)
        sub_100259694();
      v72 = v67 - v69;
      if (v72 >> 5 > v71)
        v71 = v72 >> 5;
      if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFC0)
        v73 = 0x3FFFFFFFFFFFFFFLL;
      else
        v73 = v71;
      if (v73)
        v74 = (char *)sub_1002697F0(a1 + 464, v73);
      else
        v74 = 0;
      v75 = (double *)&v74[64 * v70];
      *v75 = v59;
      v75[1] = v60;
      *((_DWORD *)v75 + 4) = v58;
      *((_DWORD *)v75 + 5) = v61;
      v76 = &v74[64 * v73];
      *((_DWORD *)v75 + 6) = 0;
      v75[4] = 0.0;
      *((_DWORD *)v75 + 10) = 0;
      *((_DWORD *)v75 + 11) = v62;
      *((_DWORD *)v75 + 12) = v64;
      *((_BYTE *)v75 + 52) = 0;
      *((_WORD *)v75 + 27) = v63;
      *((_DWORD *)v75 + 14) = LODWORD(v18);
      *((_BYTE *)v75 + 60) = 0;
      *((_BYTE *)v75 + 61) = v65;
      v68 = (char *)(v75 + 8);
      v78 = *(char **)(a1 + 448);
      v77 = *(char **)(a1 + 456);
      if (v77 != v78)
      {
        do
        {
          v79 = *((_OWORD *)v77 - 4);
          v80 = *((_OWORD *)v77 - 3);
          v81 = *((_OWORD *)v77 - 1);
          *((_OWORD *)v75 - 2) = *((_OWORD *)v77 - 2);
          *((_OWORD *)v75 - 1) = v81;
          *((_OWORD *)v75 - 4) = v79;
          *((_OWORD *)v75 - 3) = v80;
          v75 -= 8;
          v77 -= 64;
        }
        while (v77 != v78);
        v77 = *(char **)(a1 + 448);
      }
      *(_QWORD *)(a1 + 448) = v75;
      *(_QWORD *)(a1 + 456) = v68;
      *(_QWORD *)(a1 + 464) = v76;
      if (v77)
        operator delete(v77);
    }
    else
    {
      *(double *)v66 = v59;
      *(double *)(v66 + 8) = v60;
      *(_DWORD *)(v66 + 16) = v58;
      *(_DWORD *)(v66 + 20) = v61;
      *(_DWORD *)(v66 + 24) = 0;
      *(_QWORD *)(v66 + 32) = 0;
      *(_DWORD *)(v66 + 40) = 0;
      *(_DWORD *)(v66 + 44) = v62;
      *(_DWORD *)(v66 + 48) = v64;
      *(_BYTE *)(v66 + 52) = 0;
      *(_WORD *)(v66 + 54) = v63;
      *(_DWORD *)(v66 + 56) = LODWORD(v18);
      *(_BYTE *)(v66 + 60) = 0;
      v68 = (char *)(v66 + 64);
      *(_BYTE *)(v66 + 61) = v65;
    }
    *(_QWORD *)(a1 + 456) = v68;
  }
  v82 = *(unsigned __int16 *)(a2 + 52);
  v83 = *(unsigned __int8 *)(a2 + 37);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
  v84 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_INFO))
  {
    v18 = *(double *)(a1 + 352);
    LOBYTE(v85) = *(_BYTE *)(a2 + 1);
    v122 = *(_DWORD *)(a2 + 8);
    v125 = *(_DWORD *)(a2 + 4);
    v118 = *(_DWORD *)(a2 + 12);
    LODWORD(v116) = *(_DWORD *)(a2 + 16);
    HIDWORD(v114) = *(_DWORD *)(a2 + 20);
    v86 = (double)v85 / 100.0;
    v87 = *(float *)(a2 + 28);
    v88 = *(float *)(a2 + 32);
    v89 = *(unsigned __int8 *)(a2 + 36);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
    }
    v90 = v18 + *(double *)(a1 + 664);
    v91 = *(float *)(a2 + 40);
    v92 = *(_QWORD *)(*(_QWORD *)(a1 + 432) - 160);
    v93 = *(_DWORD *)(a2 + 44);
    v94 = sub_1001B7910();
    v95 = *(_DWORD *)(a1 + 364);
    v276 = v95 > 0;
    v280 = *(_DWORD *)(a1 + 388);
    *(_DWORD *)&buf[14] = v125;
    v208 = v122;
    v210 = v118;
    v212 = LODWORD(v116);
    v214 = HIDWORD(v114);
    v220 = v89;
    v228 = v92;
    v230 = v93;
    v232 = (v94 >> 27) & 1;
    v234 = *(unsigned __int8 *)(a2 + 2);
    v236 = *(char *)(a2 + 3);
    v238 = v82 & 1;
    v240 = (v82 >> 12) & 1;
    v242 = (v82 >> 2) & 1;
    v244 = (v82 >> 8) & 1;
    v246 = (v82 >> 9) & 1;
    v248 = (v82 >> 10) & 1;
    v250 = (v82 >> 11) & 1;
    v256 = v83 & 1;
    v260 = (v83 >> 2) & 1;
    v264 = (v83 >> 4) & 1;
    v268 = (v83 >> 6) & 1;
    v272 = *(unsigned __int8 *)(a2 + 38);
    v96 = *(float *)(a2 + 60);
    v97 = *(float *)(a2 + 56);
    *(double *)&buf[4] = v18;
    *(double *)&buf[20] = v86;
    v216 = v87;
    v224 = v90;
    v226 = v91;
    v252 = v97;
    v254 = *(__int16 *)(a2 + 54);
    v258 = (v83 >> 1) & 1;
    v262 = (v83 >> 3) & 1;
    v266 = (v83 >> 5) & 1;
    v270 = v83 >> 7;
    *(_WORD *)&buf[18] = 2048;
    v215 = 2048;
    v217 = 2048;
    v221 = 2048;
    v223 = 2048;
    v225 = 2048;
    v227 = 2048;
    v251 = 2048;
    v273 = 2048;
    v278 = v95;
    *(_WORD *)&buf[12] = 1024;
    *(_WORD *)&buf[28] = 1024;
    v209 = 1024;
    v211 = 1024;
    v213 = 1024;
    v219 = 1024;
    v229 = 1024;
    v231 = 1024;
    v233 = 1024;
    v235 = 1024;
    v237 = 1024;
    v239 = 1024;
    v241 = 1024;
    v243 = 1024;
    v245 = 1024;
    v247 = 1024;
    v249 = 1024;
    v253 = 1024;
    v255 = 1024;
    v257 = 1024;
    v259 = 1024;
    v261 = 1024;
    v263 = 1024;
    v265 = 1024;
    v267 = 1024;
    v269 = 1024;
    v271 = 1024;
    v275 = 1024;
    v277 = 1024;
    v279 = 1024;
    *(_DWORD *)buf = 134227968;
    v218 = v88;
    v222 = Current;
    v274 = v96;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "Timestamp,%f,StepCount,%d,Stride,%0.2f,Ascended,%d,Descended,%d,ElevationUp,%d,ElevationDown,%d,Pace,%f,ActiveTime,%f,DeltaSteps,%d,locationdGpsTime,%20.20f,startTime,%f,currentCadence,%f,FirstStepTime,%f,RelativeTimeOfLastStep,%d,FloorCountingSupported,%d,pedometerArmConstrainedState,%d,FlightState,%d,FlightFailResetUnknown,%d,FlightFailResetWater,%d,FlightFailResetFrozen,%d,FlightFailInOutTrans,%u,FlightFailElevDelta,%u,FlightFailStepsPerElevRate,%u,FlightsFailElevRate,%u,PressureAmplitude,%f,PressureTemperature,%hd,FalseStepDetectorAccelPoseXHigh,%u,FalseStepDetectorAccelVarXYZLow,%u,FalseStepDetectorGyroNumSamplesSufficient,%u,FalseStepDetectorGyroVarXHigh,%u,FalseStepDetectorConsecutiveRequirement,%u,IsVehicularLowConfidence,%u,IsVehicularHighConfidence,%u,FalseStepDetectorConsistentStepsProtection,%u,FalseStepsSuppressed,%u,AverageFilteredPressure,%f,StepCountCurrentlySimulated,%d,DefaultStepsPerHour,%i,DefaultStepDurationHours,%i", buf, 0x11Au);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10219ACA8);
    v126 = *(double *)&qword_10229FCD8;
    v98 = *(double *)(a1 + 352);
    LOBYTE(v18) = *(_BYTE *)(a2 + 1);
    v99 = *(_DWORD *)(a2 + 4);
    v123 = *(_DWORD *)(a2 + 8);
    v100 = *(_DWORD *)(a2 + 16);
    v119 = *(_DWORD *)(a2 + 12);
    v101 = *(_DWORD *)(a2 + 20);
    v102 = *(float *)(a2 + 28);
    v103 = *(float *)(a2 + 32);
    v104 = *(unsigned __int8 *)(a2 + 36);
    if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
    {
      sub_1010231AC(a1);
      *(_BYTE *)(a1 + 653) = 0;
    }
    v105 = *(double *)(a1 + 664);
    v106 = *(float *)(a2 + 40);
    v107 = *(_QWORD *)(*(_QWORD *)(a1 + 432) - 160);
    v108 = *(_DWORD *)(a2 + 44);
    v109 = sub_1001B7910();
    v110 = *(_DWORD *)(a1 + 364);
    v202 = v110 > 0;
    v206 = *(_DWORD *)(a1 + 388);
    v162 = *(char *)(a2 + 3);
    v166 = (v82 >> 12) & 1;
    v170 = (v82 >> 8) & 1;
    v174 = (v82 >> 10) & 1;
    v182 = v83 & 1;
    v186 = (v83 >> 2) & 1;
    v190 = (v83 >> 4) & 1;
    v194 = (v83 >> 6) & 1;
    v198 = *(unsigned __int8 *)(a2 + 38);
    v111 = *(float *)(a2 + 60);
    v178 = *(float *)(a2 + 56);
    v130 = v99;
    v134 = v123;
    v136 = v119;
    v138 = v100;
    v140 = v101;
    v146 = v104;
    v154 = v107;
    v156 = v108;
    v158 = (v109 >> 27) & 1;
    v160 = *(unsigned __int8 *)(a2 + 2);
    v164 = v82 & 1;
    v168 = (v82 >> 2) & 1;
    v172 = (v82 >> 9) & 1;
    v176 = (v82 >> 11) & 1;
    v180 = *(__int16 *)(a2 + 54);
    v184 = (v83 >> 1) & 1;
    v188 = (v83 >> 3) & 1;
    v192 = (v83 >> 5) & 1;
    v196 = v83 >> 7;
    v131 = 2048;
    v141 = 2048;
    v143 = 2048;
    v147 = 2048;
    v149 = 2048;
    v151 = 2048;
    v153 = 2048;
    v177 = 2048;
    v199 = 2048;
    v204 = v110;
    v129 = 1024;
    v133 = 1024;
    v135 = 1024;
    v137 = 1024;
    v139 = 1024;
    v145 = 1024;
    v155 = 1024;
    v157 = 1024;
    v159 = 1024;
    v161 = 1024;
    v163 = 1024;
    v165 = 1024;
    v167 = 1024;
    v169 = 1024;
    v171 = 1024;
    v173 = 1024;
    v175 = 1024;
    v179 = 1024;
    v181 = 1024;
    v183 = 1024;
    v185 = 1024;
    v187 = 1024;
    v189 = 1024;
    v191 = 1024;
    v193 = 1024;
    v195 = 1024;
    v197 = 1024;
    v201 = 1024;
    v203 = 1024;
    v205 = 1024;
    v127 = 134227968;
    v128 = v98;
    v132 = (double)*(unint64_t *)&v18 / 100.0;
    v142 = v102;
    v144 = v103;
    v148 = Current;
    v150 = v98 + v105;
    v152 = v106;
    v200 = v111;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, *(_QWORD *)&v126, 1, "Timestamp,%f,StepCount,%d,Stride,%0.2f,Ascended,%d,Descended,%d,ElevationUp,%d,ElevationDown,%d,Pace,%f,ActiveTime,%f,DeltaSteps,%d,locationdGpsTime,%20.20f,startTime,%f,currentCadence,%f,FirstStepTime,%f,RelativeTimeOfLastStep,%d,FloorCountingSupported,%d,pedometerArmConstrainedState,%d,FlightState,%d,FlightFailResetUnknown,%d,FlightFailResetWater,%d,FlightFailResetFrozen,%d,FlightFailInOutTrans,%u,FlightFailElevDelta,%u,FlightFailStepsPerElevRate,%u,FlightsFailElevRate,%u,PressureAmplitude,%f,PressureTemperature,%hd,FalseStepDetectorAccelPoseXHigh,%u,FalseStepDetectorAccelVarXYZLow,%u,FalseStepDetectorGyroNumSamplesSufficient,%u,FalseStepDetectorGyroVarXHigh,%u,FalseStepDetectorConsecutiveRequirement,%u,IsVehicularLowConfidence,%u,IsVehicularHighConfidence,%u,FalseStepDetectorConsistentStepsProtection,%u,FalseStepsSuppressed,%u,AverageFilteredPressure,%f,StepCountCurrentlySimulated,%d,DefaultStepsPerHour,%i,DefaultStepDurationHours,%i", COERCE_DOUBLE(&v127), 282, v114,
      LODWORD(Current),
      LODWORD(v116),
      v119,
      v120,
      v126);
    v113 = (char *)v112;
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitStepCountUpdate(const CMMotionCoprocessorReply::StepCountUpdate *)", "%s\n", v112);
    if (v113 != buf)
      free(v113);
  }
}

void sub_100063264(_QWORD *a1, io_registry_entry_t entry)
{
  void *v4;
  void *v5;
  BOOL v6;
  NSObject *v7;
  const char *v8;
  unsigned int v9;
  int v10;
  int v11;
  int v12;
  double v13;
  double v14;
  void *v15;
  unsigned int v16;
  void *v17;
  __CFString *v18;
  __CFString *v19;
  int v20;
  NSObject *v21;
  uint8_t *v22;
  id v23;
  unsigned int v24;
  NSObject *v25;
  void *v26;
  unsigned int v27;
  NSObject *v28;
  NSObject *v29;
  void *v30;
  int v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  char v35;
  const char *v36;
  uint8_t *v37;
  const char *v38;
  uint8_t *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  __int16 v43;
  __int128 v44;
  uint64_t v45;
  uint8_t buf[8];
  _BYTE v47[32];
  _BYTE v48[6];
  _BYTE v49[6];
  unsigned int v50;
  __int16 v51;
  unsigned int v52;
  __int16 v53;
  int v54;

  v45 = 0;
  *((_QWORD *)&v44 + 1) = 0;
  v4 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("CurrentCapacity"), kCFAllocatorDefault, 0);
  v5 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("MaxCapacity"), kCFAllocatorDefault, 0);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021495A8);
    v7 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "cannot find current or maximum capacity", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021495A8);
      v43 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "cannot find current or maximum capacity", &v43, 2);
      goto LABEL_32;
    }
  }
  else
  {
    v9 = objc_msgSend(v5, "intValue");
    v10 = objc_msgSend(v4, "intValue");
    v11 = v10;
    if (v9)
      v12 = v9;
    else
      v12 = 100;
    v13 = fmin((float)v10 * 100.0 / (float)v12, 100.0);
    if (v13 >= 0.0)
      v14 = v13;
    else
      v14 = 0.0;
    *(double *)&v44 = v14;
    v15 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("ExternalConnected"), kCFAllocatorDefault, 0);
    if (v15)
    {
      v16 = objc_msgSend(v15, "BOOLValue");
      BYTE9(v44) = v16;
      HIDWORD(v44) = 0;
      v17 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("AdapterDetails"), kCFAllocatorDefault, 0);
      v18 = (__CFString *)objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("Description"));
      if (v18)
      {
        v19 = v18;
        if ((-[__CFString hasPrefix:](v18, "hasPrefix:", CFSTR("batt")) & 1) != 0)
        {
          v20 = 1;
        }
        else if ((-[__CFString hasPrefix:](v19, "hasPrefix:", CFSTR("usb")) & 1) != 0)
        {
          v20 = 2;
        }
        else if ((-[__CFString hasPrefix:](v19, "hasPrefix:", CFSTR("external")) & 1) != 0)
        {
          v20 = 3;
        }
        else
        {
          if (!-[__CFString hasSuffix:](v19, "hasSuffix:", CFSTR("arcas")))
          {
            HIDWORD(v40) = 0;
            goto LABEL_42;
          }
          v20 = 4;
        }
        HIDWORD(v40) = v20;
        HIDWORD(v44) = v20;
      }
      else
      {
        HIDWORD(v40) = 0;
        v19 = CFSTR("none");
      }
LABEL_42:
      v23 = objc_msgSend(v17, "objectForKeyedSubscript:", CFSTR("FamilyCode"));
      if (v23)
      {
        v24 = objc_msgSend(v23, "intValue");
      }
      else
      {
        if (qword_1022A02A0 != -1)
          dispatch_once(&qword_1022A02A0, &stru_1021495E8);
        v25 = qword_1022A02A8;
        if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Failed to get charger family", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A02A0 != -1)
            dispatch_once(&qword_1022A02A0, &stru_1021495E8);
          v43 = 0;
          LODWORD(v40) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02A8, 2, "Failed to get charger family", &v43, v40);
          v37 = (uint8_t *)v36;
          sub_100512490("Generic", 1, 0, 2, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v36);
          if (v37 != buf)
            free(v37);
        }
        v24 = 0;
      }
      HIDWORD(v45) = v24;
      v26 = (id)IORegistryEntryCreateCFProperty(entry, CFSTR("FullyCharged"), kCFAllocatorDefault, 0);
      if (v26)
      {
        v27 = objc_msgSend(v26, "BOOLValue");
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_1021495A8);
        v28 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "cannot find charged status\n", buf, 2u);
        }
        v27 = 0;
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A01D0 != -1)
            dispatch_once(&qword_1022A01D0, &stru_1021495A8);
          v43 = 0;
          LODWORD(v40) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "cannot find charged status\n", &v43, v40);
          v39 = (uint8_t *)v38;
          sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v38);
          if (v39 != buf)
            free(v39);
          v27 = 0;
        }
      }
      BYTE8(v44) = v27;
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v29 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68290818;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v47 = 2082;
        *(_QWORD *)&v47[2] = "";
        *(_WORD *)&v47[10] = 2114;
        *(_QWORD *)&v47[12] = v19;
        *(_WORD *)&v47[20] = 2050;
        *(_QWORD *)&v47[22] = HIDWORD(v40);
        *(_WORD *)&v47[30] = 1026;
        *(_DWORD *)v48 = (int)v14;
        *(_WORD *)&v48[4] = 1026;
        *(_DWORD *)v49 = v24;
        *(_WORD *)&v49[4] = 1026;
        v50 = v27;
        v51 = 1026;
        v52 = v16;
        v53 = 1026;
        v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"adapter details\", \"adapterDescription\":%{public, location:escape_only}@, \"batteryChargerType\":%{public, location:CLBatteryChargerType}lld, \"level\":%{public}d, \"family\":%{public}u, \"fullyCharged\":%{public}hhd, \"connected\":%{public}hhd, \"wasConnected\":%{public}hhd}", buf, 0x44u);
      }
      v30 = (void *)a1[14];
      if (v30)
      {
        objc_msgSend(v30, "batteryData");
        v31 = v47[1];
      }
      else
      {
        v31 = 0;
        *(_QWORD *)buf = 0;
        *(_QWORD *)v47 = 0;
        *(_QWORD *)&v47[8] = 0;
      }
      v32 = 1;
      if (v31 == v16 && v47[0] == v27 && vabdd_f64(*(double *)buf, v14) < 1.0)
        v32 = *(_DWORD *)&v47[4] != HIDWORD(v40);
      if (qword_1022A02A0 != -1)
        dispatch_once(&qword_1022A02A0, &stru_1021495E8);
      v33 = qword_1022A02A8;
      if (os_log_type_enabled((os_log_t)qword_1022A02A8, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 68290306;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)v47 = 2082;
        *(_QWORD *)&v47[2] = "";
        *(_WORD *)&v47[10] = 1040;
        *(_DWORD *)&v47[12] = 24;
        *(_WORD *)&v47[16] = 2098;
        *(_QWORD *)&v47[18] = &v44;
        *(_WORD *)&v47[26] = 1026;
        *(_DWORD *)&v47[28] = v11;
        *(_WORD *)v48 = 1026;
        *(_DWORD *)&v48[2] = v12;
        *(_WORD *)v49 = 1026;
        *(_DWORD *)&v49[2] = v32;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"battery capacity info\", \"batteryStatus\":%{public, location:CLDaemonStatus_Type::Battery}.*P, \"currentCapacity\":%{public}d, \"maximumCapacity\":%{public}d, \"batteryIsDifferent\":%{public}hhd}", buf, 0x34u);
      }
      if (v32)
      {
        v34 = (void *)a1[14];
        if (v34)
        {
          objc_msgSend(v34, "batteryData");
          v35 = v47[1];
          v34 = (void *)a1[14];
        }
        else
        {
          v35 = 0;
        }
        LOBYTE(v45) = v35;
        v41 = v44;
        v42 = v45;
        objc_msgSend(v34, "setBatteryData:", &v41);
        *(_DWORD *)buf = 7;
        (*(void (**)(_QWORD *, uint8_t *, __int128 *, uint64_t, uint64_t, _QWORD))(*a1 + 152))(a1, buf, &v44, 1, 0xFFFFFFFFLL, 0);
      }
      return;
    }
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_1021495A8);
    v21 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "cannot find connected status", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_1021495A8);
      v43 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A01D8, 17, "cannot find connected status", &v43, 2);
LABEL_32:
      v22 = (uint8_t *)v8;
      sub_100512490("Generic", 1, 0, 0, "void CLDaemonStatus::handleBatteryNotification(io_registry_entry_t)", "%s\n", v8);
      if (v22 != buf)
        free(v22);
    }
  }
}

void sub_100063C3C()
{
  NSObject *v0;
  __CFNotificationCenter *DarwinNotifyCenter;
  char *v2;
  _WORD v3[8];
  uint8_t buf[1640];

  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_10214C5A0);
  v0 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "#techstatus,posting notification", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_10214C5A0);
    v3[0] = 0;
    v2 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 0, "#techstatus,posting notification", v3, 2);
    sub_100512490("Generic", 1, 0, 2, "void CLLocationController::sendTechStatusNotification()", "%s\n", v2);
    if (v2 != (char *)buf)
      free(v2);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLTechStatusChangedNotification, 0, 0, 0);
}

uint64_t sub_100063DE0(uint64_t a1, uint64_t a2)
{
  double v4;
  double v5;
  unint64_t v6;
  unint64_t v7;
  double v8;
  double v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  int v20;
  std::string::size_type v21;
  uint64_t v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v27;
  float v28;
  float v29;
  int v30;
  std::string *v31;
  std::string *p_p;
  uint64_t v38;
  std::string::size_type v39;
  int16x8_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  unint64_t v85;
  unint64_t v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  void **v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  char *v111;
  char *v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t result;
  int v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  std::string::size_type v129;
  int v130;
  int v131;
  int v132;
  int v133;
  NSObject *v134;
  unint64_t v135;
  const char *v136;
  char *v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  std::string::size_type v144;
  int8x16_t v145;
  float v146;
  float v147;
  float v148;
  float v149;
  float v150;
  float v151;
  float v152;
  int v153;
  std::string *v154;
  std::string *v155;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  uint64_t v182;
  unsigned int v183;
  unsigned int v184;
  uint64_t v185;
  std::string v186;
  std::string __p;
  int8x16_t v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _BYTE buf[12];
  _BYTE v199[6];
  __int16 v200;
  int v201;
  __int16 v202;
  int v203;
  __int16 v204;
  int v205;
  __int16 v206;
  int v207;
  __int16 v208;
  int v209;
  __int16 v210;
  int v211;
  __int16 v212;
  int v213;
  __int16 v214;
  int v215;
  __int16 v216;
  std::string *v217;
  __int16 v218;
  uint64_t v219;
  __int16 v220;
  uint64_t v221;
  __int16 v222;
  uint64_t v223;
  __int16 v224;
  uint64_t v225;
  __int16 v226;
  int v227;
  __int16 v228;
  double v229;
  __int16 v230;
  int v231;
  __int16 v232;
  double v233;
  __int16 v234;
  double v235;
  __int16 v236;
  double v237;
  __int16 v238;
  double v239;
  __int16 v240;
  double v241;
  __int16 v242;
  double v243;
  __int16 v244;
  int v245;
  __int16 v246;
  int v247;
  __int16 v248;
  std::string *v249;
  __int16 v250;
  unsigned int v251;
  __int16 v252;
  int v253;
  __int16 v254;
  int v255;
  __int16 v256;
  int v257;
  __int16 v258;
  int v259;
  __int16 v260;
  int v261;
  __int16 v262;
  int v263;
  __int16 v264;
  uint64_t v265;
  __int16 v266;
  int v267;
  __int16 v268;
  uint64_t v269;
  __int16 v270;
  uint64_t v271;
  __int16 v272;
  int v273;
  __int16 v274;
  int v275;
  __int16 v276;
  int v277;
  __int16 v278;
  int v279;
  __int16 v280;
  uint64_t v281;
  std::string::size_type size;
  uint64_t v283;
  char v284;
  std::string v285;
  uint64_t v286;
  int v287;
  __int16 v288;
  _BYTE v289[18];
  _BYTE v290[20];
  _BYTE v291[30];
  __int16 v292;
  uint64_t v293;
  __int16 v294;
  int v295;
  __int16 v296;
  double v297;
  __int16 v298;
  int v299;
  __int16 v300;
  double v301;
  __int16 v302;
  double v303;
  __int16 v304;
  double v305;
  __int16 v306;
  double v307;
  __int16 v308;
  double v309;
  __int16 v310;
  double v311;
  __int16 v312;
  int v313;
  __int16 v314;
  int v315;
  __int16 v316;
  std::string *v317;
  __int16 v318;
  unsigned int v319;
  __int16 v320;
  int v321;
  __int16 v322;
  int v323;
  __int16 v324;
  int v325;
  __int16 v326;
  int v327;
  __int16 v328;
  int v329;
  __int16 v330;
  int v331;
  __int16 v332;
  uint64_t v333;
  __int16 v334;
  int v335;
  __int16 v336;
  uint64_t v337;
  __int16 v338;
  uint64_t v339;
  __int16 v340;
  int v341;
  __int16 v342;
  int v343;
  __int16 v344;
  int v345;
  __int16 v346;
  int v347;
  __int16 v348;
  uint64_t v349;

  v4 = *(double *)(a1 + 352);
  if (*(_BYTE *)(a1 + 653) && !*(_BYTE *)(a1 + 652))
  {
    sub_1010231AC(a1);
    *(_BYTE *)(a1 + 653) = 0;
  }
  v5 = v4 + *(double *)(a1 + 664);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = 0.0;
  v9 = 0.0;
  _CF = v7 >= v6;
  v11 = v7 - v6;
  if (_CF && v11 <= 0x7FFFFFFE)
    v9 = (double)v11 / 1000000.0;
  v196 = 0u;
  v197 = 0u;
  v194 = 0u;
  v195 = 0u;
  v192 = 0u;
  v193 = 0u;
  v190 = 0u;
  v191 = 0u;
  *(double *)v188.i64 = *(double *)(a1 + 352) - v9;
  *(double *)&v188.i64[1] = v5 - v9;
  v12 = *(_QWORD *)(a2 + 68);
  if (v12)
    v8 = v5 - (double)((v6 - v12) / 0xF4240);
  *(double *)&v189 = v8;
  DWORD2(v189) = *(_DWORD *)(a2 + 4);
  BYTE12(v189) = *(_BYTE *)(a2 + 1);
  *(_WORD *)((char *)&v189 + 13) = *(_WORD *)(a2 + 2);
  HIBYTE(v189) = *(_BYTE *)(a2 + 8);
  LOBYTE(v190) = *(_BYTE *)(a2 + 9) != 0;
  BYTE1(v190) = *(_BYTE *)(a2 + 10) != 0;
  BYTE3(v190) = *(_BYTE *)(a2 + 11);
  *((_QWORD *)&v190 + 1) = v6;
  LODWORD(v191) = *(_DWORD *)(a2 + 32);
  BYTE5(v191) = *(_BYTE *)(a2 + 36);
  v13 = *(unsigned __int8 *)(a2 + 37);
  BYTE12(v191) = *(_BYTE *)(a2 + 37);
  BYTE13(v191) = *(_BYTE *)(a2 + 88);
  BYTE14(v191) = *(_BYTE *)(a2 + 97);
  LODWORD(v192) = 0;
  WORD2(v192) = 0;
  WORD3(v192) = *(_WORD *)(a2 + 103);
  WORD5(v192) = 0;
  LODWORD(v193) = *(_DWORD *)(a2 + 84);
  v14 = *(_QWORD *)(a2 + 76);
  *((_QWORD *)&v193 + 1) = v12;
  *(_QWORD *)&v194 = v14;
  *((_QWORD *)&v194 + 1) = *(_QWORD *)(a2 + 89);
  v195 = *(_OWORD *)(a2 + 40);
  *(_QWORD *)&v196 = *(_QWORD *)(a2 + 56);
  DWORD2(v196) = *(_DWORD *)(a2 + 64);
  HIDWORD(v196) = *(unsigned __int8 *)(a2 + 38);
  LOBYTE(v197) = *(_BYTE *)(a2 + 39) != 0;
  WORD2(v197) = *(_WORD *)(a2 + 98);
  BYTE6(v197) = *(_BYTE *)(a2 + 100);
  WORD4(v197) = *(_WORD *)(a2 + 101);
  v185 = a1;
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_10219AC68);
  v15 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_INFO))
  {
    v16 = *(_DWORD *)(a2 + 4);
    v17 = *(unsigned __int8 *)(a2 + 1);
    v18 = *(unsigned __int8 *)(a2 + 2);
    v19 = *(unsigned __int8 *)(a2 + 3);
    v173 = *(unsigned __int8 *)(a2 + 11);
    v175 = *(unsigned __int8 *)(a2 + 8);
    v177 = *(unsigned __int8 *)(a2 + 9);
    v179 = *(unsigned __int8 *)(a2 + 10);
    v181 = *(_DWORD *)(a2 + 12);
    sub_100064EFC(v16, &v285);
    v183 = v13;
    v20 = SHIBYTE(v285.__r_.__value_.__r.__words[2]);
    v21 = v285.__r_.__value_.__r.__words[0];
    v22 = v188.i64[1];
    v161 = v188.i64[0];
    v163 = *(_QWORD *)(a2 + 24);
    v165 = *(_QWORD *)(a2 + 16);
    v167 = *(unsigned __int8 *)(a2 + 38);
    v169 = *(unsigned __int8 *)(a2 + 39);
    v23 = *(float *)(a2 + 56);
    v24 = *(float *)(a2 + 60);
    v25 = *(float *)(a2 + 64);
    v27 = *(float *)(a2 + 40);
    v26 = *(float *)(a2 + 44);
    v29 = *(float *)(a2 + 48);
    v28 = *(float *)(a2 + 52);
    v30 = *(_DWORD *)(a2 + 32);
    v171 = *(unsigned __int8 *)(a2 + 36);
    sub_100064EFC(v30, &__p);
    *(_QWORD *)&buf[4] = "MotionCoprocessor";
    v31 = &v285;
    if (v20 < 0)
      v31 = (std::string *)v21;
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    *(_DWORD *)&v199[2] = v16;
    v201 = v17;
    v203 = v18;
    v205 = v19;
    v207 = v173;
    v209 = v175;
    v211 = v177;
    v213 = v179;
    v215 = v181;
    v217 = v31;
    v219 = v22;
    v221 = v161;
    v223 = v163;
    v225 = v165;
    v227 = v167;
    v231 = v169;
    v245 = v30;
    v247 = v171;
    v216 = 2080;
    v248 = 2080;
    v249 = p_p;
    v13 = v183;
    v253 = v183 & 1;
    v255 = (v183 >> 1) & 1;
    v257 = (v183 >> 2) & 1;
    v259 = (v183 >> 3) & 1;
    v206 = 1024;
    v208 = 1024;
    v210 = 1024;
    v212 = 1024;
    v214 = 1024;
    v226 = 1024;
    v230 = 1024;
    v252 = 1024;
    v254 = 1024;
    v256 = 1024;
    v258 = 1024;
    v260 = 1024;
    v261 = (v183 >> 4) & 1;
    v263 = *(_DWORD *)(a2 + 84);
    v218 = 2050;
    v264 = 2050;
    v265 = v189;
    v267 = *(unsigned __int8 *)(a2 + 88);
    v269 = *(_QWORD *)(a2 + 68);
    v271 = *(_QWORD *)(a2 + 76);
    v273 = *(unsigned __int8 *)(a2 + 89);
    v275 = *(unsigned __int8 *)(a2 + 90);
    v277 = *(__int16 *)(a2 + 91);
    *(_WORD *)v199 = 1026;
    v200 = 1026;
    v202 = 1026;
    v204 = 1026;
    v244 = 1026;
    v246 = 1026;
    v250 = 1026;
    v262 = 1026;
    v266 = 1026;
    v272 = 1026;
    v274 = 1026;
    v276 = 1026;
    v278 = 1026;
    v279 = *(unsigned __int8 *)(a2 + 97);
    v220 = 2048;
    v222 = 2048;
    v224 = 2048;
    v228 = 2048;
    v232 = 2048;
    v234 = 2048;
    v236 = 2048;
    v238 = 2048;
    v240 = 2048;
    v242 = 2048;
    v268 = 2048;
    v270 = 2048;
    v280 = 2048;
    _H1 = *(_WORD *)(a2 + 103);
    __asm { FCVT            D1, H1 }
    v281 = _D1;
    *(_DWORD *)buf = 136325890;
    v229 = v26;
    v233 = v28;
    v235 = v23;
    v237 = v24;
    v239 = v25;
    v241 = v27;
    v243 = v29;
    v251 = v183;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Type,%s,motionStateUpdate:Motion,%{public}d,conf,%{public}d,Mounted,%{public}d,MountedConf,%{public}d,exitState,%d,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,motionTypeString,%s,startTime,%{public}f,timestamp,%f,startTimeUL,%lld,nowUL,%lld -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,%f,meanAngleX,%f,pushVectorMagnitude,%f,rawMotionType,%{public}d,rawConf,%{public}d,rawMotionTypeString,%s,vehicularFlags:%{public}d,motionHint,%d,gpsHint,%d,basebandHint,%d,wifiHint,%d,btHint,%d,workoutDetectionType,%{public}d,workoutDetectionTime,%{public}f,vehicularConfidence,%{public}d,workoutDetectionTimeUL,%lld,workoutEscalationTime,%lld,MotionYouth,%{public}d,YouthClassificationReason,%{public}d,averageALSLux,%{public}d,vehicleType,%{public}d,vehicleShortTermMean,%f", buf, 0x14Cu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v285.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v285.__r_.__value_.__l.__data_);
  }
  v38 = v185;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_10219AC68);
    v182 = qword_10229FC78;
    v139 = *(_DWORD *)(a2 + 4);
    v140 = *(unsigned __int8 *)(a2 + 1);
    v141 = *(unsigned __int8 *)(a2 + 2);
    v142 = *(unsigned __int8 *)(a2 + 3);
    v172 = *(unsigned __int8 *)(a2 + 11);
    v174 = *(unsigned __int8 *)(a2 + 8);
    v176 = *(unsigned __int8 *)(a2 + 9);
    v178 = *(unsigned __int8 *)(a2 + 10);
    v180 = *(_DWORD *)(a2 + 12);
    sub_100064EFC(v139, &__p);
    v184 = v13;
    v143 = SHIBYTE(__p.__r_.__value_.__r.__words[2]);
    v144 = __p.__r_.__value_.__r.__words[0];
    v145 = v188;
    v162 = *(_QWORD *)(a2 + 24);
    v164 = *(_QWORD *)(a2 + 16);
    v166 = *(unsigned __int8 *)(a2 + 38);
    v146 = *(float *)(a2 + 56);
    v147 = *(float *)(a2 + 60);
    v148 = *(float *)(a2 + 64);
    v150 = *(float *)(a2 + 40);
    v149 = *(float *)(a2 + 44);
    v152 = *(float *)(a2 + 48);
    v151 = *(float *)(a2 + 52);
    v153 = *(_DWORD *)(a2 + 32);
    v168 = *(unsigned __int8 *)(a2 + 39);
    v170 = *(unsigned __int8 *)(a2 + 36);
    sub_100064EFC(v153, &v186);
    *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 4) = (std::string::size_type)"MotionCoprocessor";
    v154 = &__p;
    if (v143 < 0)
      v154 = (std::string *)v144;
    v155 = (std::string *)v186.__r_.__value_.__r.__words[0];
    if ((v186.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v155 = &v186;
    *(_DWORD *)((char *)&v285.__r_.__value_.__r.__words[1] + 6) = v139;
    HIDWORD(v285.__r_.__value_.__r.__words[2]) = v140;
    *(_DWORD *)((char *)&v286 + 2) = v141;
    v287 = v142;
    *(_DWORD *)v289 = v172;
    *(_DWORD *)&v289[6] = v174;
    *(_DWORD *)&v289[12] = v176;
    *(_DWORD *)v290 = v178;
    *(_DWORD *)&v290[6] = v180;
    *(_QWORD *)&v290[12] = v154;
    *(_QWORD *)&v291[2] = v145.i64[1];
    *(_QWORD *)&v291[12] = v145.i64[0];
    *(_QWORD *)&v291[22] = v162;
    v293 = v164;
    v295 = v166;
    v299 = v168;
    v313 = v153;
    v315 = v170;
    *(_WORD *)&v290[10] = 2080;
    v316 = 2080;
    v317 = v155;
    LOBYTE(v13) = v184;
    v321 = v184 & 1;
    v323 = (v184 >> 1) & 1;
    v325 = (v184 >> 2) & 1;
    v327 = (v184 >> 3) & 1;
    v288 = 1024;
    *(_WORD *)&v289[4] = 1024;
    *(_WORD *)&v289[10] = 1024;
    *(_WORD *)&v289[16] = 1024;
    *(_WORD *)&v290[4] = 1024;
    v294 = 1024;
    v298 = 1024;
    v320 = 1024;
    v322 = 1024;
    v324 = 1024;
    v326 = 1024;
    v328 = 1024;
    v329 = (v184 >> 4) & 1;
    v331 = *(_DWORD *)(a2 + 84);
    *(_WORD *)v291 = 2050;
    v332 = 2050;
    v333 = v189;
    v335 = *(unsigned __int8 *)(a2 + 88);
    v337 = *(_QWORD *)(a2 + 68);
    v339 = *(_QWORD *)(a2 + 76);
    v341 = *(unsigned __int8 *)(a2 + 89);
    v343 = *(unsigned __int8 *)(a2 + 90);
    v345 = *(__int16 *)(a2 + 91);
    WORD2(v285.__r_.__value_.__r.__words[1]) = 1026;
    WORD1(v285.__r_.__value_.__r.__words[2]) = 1026;
    LOWORD(v286) = 1026;
    HIWORD(v286) = 1026;
    v312 = 1026;
    v314 = 1026;
    v318 = 1026;
    v330 = 1026;
    v334 = 1026;
    v340 = 1026;
    v342 = 1026;
    v344 = 1026;
    v346 = 1026;
    v347 = *(unsigned __int8 *)(a2 + 97);
    *(_WORD *)&v291[10] = 2048;
    *(_WORD *)&v291[20] = 2048;
    v292 = 2048;
    v296 = 2048;
    v300 = 2048;
    v302 = 2048;
    v304 = 2048;
    v306 = 2048;
    v308 = 2048;
    v310 = 2048;
    v336 = 2048;
    v338 = 2048;
    v348 = 2048;
    _H1 = *(_WORD *)(a2 + 103);
    __asm { FCVT            D1, H1 }
    v349 = _D1;
    LODWORD(v285.__r_.__value_.__l.__data_) = 136325890;
    v297 = v149;
    v301 = v151;
    v303 = v146;
    v305 = v147;
    v307 = v148;
    v309 = v150;
    v311 = v152;
    v319 = v184;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v182, 1, "Type,%s,motionStateUpdate:Motion,%{public}d,conf,%{public}d,Mounted,%{public}d,MountedConf,%{public}d,exitState,%d,turn,%d,isVehicular,%d,isMoving,%d,seq,%d,motionTypeString,%s,startTime,%{public}f,timestamp,%f,startTimeUL,%lld,nowUL,%lld -- caltype,%d,vm,%f,standing,%d,machinefrequency,%f,strokefrequency,%f,strokeAmplitude,%f,strokepower,%f,meanAngleX,%f,pushVectorMagnitude,%f,rawMotionType,%{public}d,rawConf,%{public}d,rawMotionTypeString,%s,vehicularFlags:%{public}d,motionHint,%d,gpsHint,%d,basebandHint,%d,wifiHint,%d,btHint,%d,workoutDetectionType,%{public}d,workoutDetectionTime,%{public}f,vehicularConfidence,%{public}d,workoutDetectionTimeUL,%lld,workoutEscalationTime,%lld,MotionYouth,%{public}d,YouthClassificationReason,%{public}d,averageALSLux,%{public}d,vehicleType,%{public}d,vehicleShortTermMean,%f", &v285, 332);
    v159 = v158;
    if (SHIBYTE(v186.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v186.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)", "%s\n", v159);
    if (v159 != buf)
      free(v159);
    v38 = v185;
  }
  if (*(_BYTE *)(v38 + 868))
  {
    v285.__r_.__value_.__r.__words[0] = (std::string::size_type)off_102171888;
    *(double *)&v39 = CFAbsoluteTimeGetCurrent();
    v285.__r_.__value_.__l.__size_ = v39;
    HIDWORD(v285.__r_.__value_.__r.__words[2]) = *(_DWORD *)(a2 + 4);
    LOBYTE(v286) = *(_BYTE *)(a2 + 1);
    *(_WORD *)((char *)&v286 + 1) = *(_WORD *)(a2 + 2);
    LODWORD(v39) = *(_DWORD *)(a2 + 8);
    v40 = (int16x8_t)vmovl_u8((uint8x8_t)v39);
    *(int8x8_t *)v40.i8 = vext_s8(*(int8x8_t *)v40.i8, *(int8x8_t *)v40.i8, 6uLL);
    *(_DWORD *)((char *)&v286 + 3) = vmovn_s16(v40).u32[0];
    v287 = *(_DWORD *)(a2 + 12);
    *(int8x16_t *)&v289[2] = vextq_s8(v188, v188, 8uLL);
    *(int8x16_t *)v290 = vextq_s8(*(int8x16_t *)(a2 + 16), *(int8x16_t *)(a2 + 16), 8uLL);
    v290[16] = *(_BYTE *)(a2 + 38);
    *(_DWORD *)v291 = *(_DWORD *)(a2 + 44);
    v291[4] = *(_BYTE *)(a2 + 39);
    *(_OWORD *)&v291[8] = *(_OWORD *)(a2 + 52);
    v41 = sub_1011B78D4();
    sub_1011B8DB0(v41, (uint64_t)&v285);
    sub_1015EB864(buf);
    sub_101605028((uint64_t)buf);
    v284 |= 1u;
    size = v285.__r_.__value_.__l.__size_;
    v42 = v283;
    v43 = *(_DWORD *)(a2 + 4);
    *(_QWORD *)(v283 + 192) |= 0x8000uLL;
    *(_DWORD *)(v42 + 100) = v43;
    v44 = v283;
    v45 = *(unsigned __int8 *)(a2 + 1);
    *(_QWORD *)(v283 + 192) |= 0x100uLL;
    *(_DWORD *)(v44 + 72) = v45;
    v46 = v283;
    v47 = *(unsigned __int8 *)(a2 + 2);
    *(_QWORD *)(v283 + 192) |= 0x10000uLL;
    *(_DWORD *)(v46 + 104) = v47;
    v48 = v283;
    v49 = *(unsigned __int8 *)(a2 + 3);
    *(_QWORD *)(v283 + 192) |= 0x20000uLL;
    *(_DWORD *)(v48 + 108) = v49;
    v50 = v283;
    v51 = *(unsigned __int8 *)(a2 + 11);
    *(_QWORD *)(v283 + 192) |= 0x800uLL;
    *(_DWORD *)(v50 + 84) = v51;
    v52 = v283;
    v53 = *(unsigned __int8 *)(a2 + 8);
    *(_QWORD *)(v283 + 192) |= 0x8000000uLL;
    *(_DWORD *)(v52 + 148) = v53;
    v54 = v283;
    v55 = *(unsigned __int8 *)(a2 + 9);
    *(_QWORD *)(v283 + 192) |= 0x2000uLL;
    *(_DWORD *)(v54 + 92) = v55;
    v56 = v283;
    v57 = *(unsigned __int8 *)(a2 + 10);
    *(_QWORD *)(v283 + 192) |= 0x1000uLL;
    *(_DWORD *)(v56 + 88) = v57;
    v58 = v283;
    v59 = *(_DWORD *)(a2 + 12);
    *(_QWORD *)(v283 + 192) |= 0x1000000uLL;
    *(_DWORD *)(v58 + 136) = v59;
    v60 = v283;
    v61 = v188.i64[0];
    *(_QWORD *)(v283 + 40) = v188.i64[1];
    *(_QWORD *)(v60 + 192) |= 8uLL;
    v62 = v283;
    *(_QWORD *)(v283 + 192) |= 1uLL;
    *(_QWORD *)(v62 + 8) = v61;
    v63 = v283;
    v64 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(v283 + 192) |= 4uLL;
    *(_QWORD *)(v63 + 24) = v64;
    v65 = v283;
    v66 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(v283 + 192) |= 2uLL;
    *(_QWORD *)(v65 + 16) = v66;
    v67 = v283;
    LODWORD(v66) = *(unsigned __int8 *)(a2 + 38);
    *(_QWORD *)(v283 + 192) |= 0x80uLL;
    *(_DWORD *)(v67 + 68) = v66;
    v68 = v283;
    v69 = *(_DWORD *)(a2 + 44);
    *(_QWORD *)(v283 + 192) |= 0x20000000uLL;
    *(_DWORD *)(v68 + 156) = v69;
    v70 = v283;
    LODWORD(v66) = *(unsigned __int8 *)(a2 + 39);
    *(_QWORD *)(v283 + 192) |= 0x4000000uLL;
    *(_DWORD *)(v70 + 144) = v66;
    v71 = v283;
    v72 = *(_DWORD *)(a2 + 52);
    *(_QWORD *)(v283 + 192) |= 0x4000uLL;
    *(_DWORD *)(v71 + 96) = v72;
    v73 = v283;
    v74 = *(_DWORD *)(a2 + 56);
    *(_QWORD *)(v283 + 192) |= 0x400000uLL;
    *(_DWORD *)(v73 + 128) = v74;
    v75 = v283;
    v76 = *(_DWORD *)(a2 + 60);
    *(_QWORD *)(v283 + 192) |= 0x200000uLL;
    *(_DWORD *)(v75 + 124) = v76;
    v77 = v283;
    v78 = *(_DWORD *)(a2 + 64);
    *(_QWORD *)(v283 + 192) |= 0x800000uLL;
    *(_DWORD *)(v77 + 132) = v78;
    v79 = v283;
    LODWORD(v66) = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(v283 + 192) |= 0x800000000uLL;
    *(_DWORD *)(v79 + 180) = v66;
    if (qword_1023118A8 != -1)
      dispatch_once(&qword_1023118A8, &stru_10219AD28);
    if (qword_1023118B0)
      sub_101888B64(qword_1023118B0, (uint64_t)buf);
    sub_1015EE304((PB::Base *)buf);
  }
  v80 = v195;
  *(_OWORD *)(v38 + 776) = v194;
  *(_OWORD *)(v38 + 792) = v80;
  v81 = v197;
  *(_OWORD *)(v38 + 808) = v196;
  *(_OWORD *)(v38 + 824) = v81;
  v82 = v191;
  *(_OWORD *)(v38 + 712) = v190;
  *(_OWORD *)(v38 + 728) = v82;
  v83 = v193;
  *(_OWORD *)(v38 + 744) = v192;
  *(_OWORD *)(v38 + 760) = v83;
  v84 = v189;
  *(int8x16_t *)(v38 + 680) = v188;
  *(_OWORD *)(v38 + 696) = v84;
  *(_BYTE *)(v38 + 576) = v13;
  v85 = *(_QWORD *)(v38 + 408);
  v86 = *(_QWORD *)(v38 + 416);
  if (v85 >= v86)
  {
    v95 = (void **)(v38 + 400);
    v96 = *(_QWORD *)(v38 + 400);
    v97 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v85 - v96) >> 5);
    v98 = v97 + 1;
    if (v97 + 1 > 0x199999999999999)
      sub_100259694();
    v99 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v86 - v96) >> 5);
    if (2 * v99 > v98)
      v98 = 2 * v99;
    if (v99 >= 0xCCCCCCCCCCCCCCLL)
      v100 = 0x199999999999999;
    else
      v100 = v98;
    if (v100)
    {
      v101 = (char *)sub_100542E70(v38 + 416, v100);
      v38 = v185;
    }
    else
    {
      v101 = 0;
    }
    v102 = &v101[160 * v97];
    v103 = &v101[160 * v100];
    v104 = v189;
    *(int8x16_t *)v102 = v188;
    *((_OWORD *)v102 + 1) = v104;
    v105 = v190;
    v106 = v191;
    v107 = v193;
    *((_OWORD *)v102 + 4) = v192;
    *((_OWORD *)v102 + 5) = v107;
    *((_OWORD *)v102 + 2) = v105;
    *((_OWORD *)v102 + 3) = v106;
    v108 = v194;
    v109 = v195;
    v110 = v197;
    *((_OWORD *)v102 + 8) = v196;
    *((_OWORD *)v102 + 9) = v110;
    *((_OWORD *)v102 + 6) = v108;
    *((_OWORD *)v102 + 7) = v109;
    v94 = v102 + 160;
    v112 = *(char **)(v38 + 400);
    v111 = *(char **)(v38 + 408);
    if (v111 != v112)
    {
      do
      {
        v113 = *((_OWORD *)v111 - 9);
        *((_OWORD *)v102 - 10) = *((_OWORD *)v111 - 10);
        *((_OWORD *)v102 - 9) = v113;
        v114 = *((_OWORD *)v111 - 8);
        v115 = *((_OWORD *)v111 - 7);
        v116 = *((_OWORD *)v111 - 5);
        *((_OWORD *)v102 - 6) = *((_OWORD *)v111 - 6);
        *((_OWORD *)v102 - 5) = v116;
        *((_OWORD *)v102 - 8) = v114;
        *((_OWORD *)v102 - 7) = v115;
        v117 = *((_OWORD *)v111 - 4);
        v118 = *((_OWORD *)v111 - 3);
        v119 = *((_OWORD *)v111 - 1);
        *((_OWORD *)v102 - 2) = *((_OWORD *)v111 - 2);
        *((_OWORD *)v102 - 1) = v119;
        *((_OWORD *)v102 - 4) = v117;
        *((_OWORD *)v102 - 3) = v118;
        v102 -= 160;
        v111 -= 160;
      }
      while (v111 != v112);
      v111 = (char *)*v95;
    }
    *(_QWORD *)(v38 + 400) = v102;
    *(_QWORD *)(v38 + 408) = v94;
    *(_QWORD *)(v38 + 416) = v103;
    if (v111)
      operator delete(v111);
  }
  else
  {
    v87 = v189;
    *(int8x16_t *)v85 = v188;
    *(_OWORD *)(v85 + 16) = v87;
    v88 = v190;
    v89 = v191;
    v90 = v193;
    *(_OWORD *)(v85 + 64) = v192;
    *(_OWORD *)(v85 + 80) = v90;
    *(_OWORD *)(v85 + 32) = v88;
    *(_OWORD *)(v85 + 48) = v89;
    v91 = v194;
    v92 = v195;
    v93 = v197;
    *(_OWORD *)(v85 + 128) = v196;
    *(_OWORD *)(v85 + 144) = v93;
    *(_OWORD *)(v85 + 96) = v91;
    *(_OWORD *)(v85 + 112) = v92;
    v94 = (char *)(v85 + 160);
  }
  *(_QWORD *)(v38 + 408) = v94;
  v120 = *(_QWORD *)(v38 + 536);
  if (v120 >= 0x64)
  {
    v121 = *(_QWORD *)(v185 + 528);
    *(_QWORD *)(v185 + 536) = v120 - 1;
    *(_QWORD *)(v185 + 528) = v121 + 1;
    sub_100AACCCC(v38 + 496, 1);
  }
  sub_1000D1140((_QWORD *)(v38 + 496), (uint64_t)&v188);
  result = v185;
  v123 = (BYTE9(v189) & 0x73) != 0;
  if (*(unsigned __int8 *)(v185 + 1418) != v123)
  {
    *(_BYTE *)(v185 + 1418) = v123;
    v124 = *(_QWORD *)(v185 + 504);
    if (*(_QWORD *)(v185 + 512) != v124)
    {
      v125 = *(_QWORD *)(v185 + 528);
      v126 = *(_QWORD *)(v124 + 8 * (v125 / 0x19)) + 160 * (v125 % 0x19);
      v127 = *(_QWORD *)(v124 + 8 * ((*(_QWORD *)(v185 + 536) + v125) / 0x19))
           + 160 * ((*(_QWORD *)(v185 + 536) + v125) % 0x19);
      if (v126 != v127)
      {
        v128 = (_QWORD *)(v124 + 8 * (v125 / 0x19));
        do
        {
          v129 = *(_QWORD *)(v126 + 8);
          v130 = *(unsigned __int8 *)(v126 + 29);
          v131 = *(unsigned __int8 *)(v126 + 30);
          v132 = *(_DWORD *)(v126 + 48);
          v133 = *(unsigned __int8 *)(v126 + 53);
          if (qword_10229FCB0 != -1)
            dispatch_once(&qword_10229FCB0, &stru_10219AC88);
          v134 = qword_10229FCB8;
          if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 134350080;
            *(_QWORD *)&buf[4] = v129;
            *(_WORD *)v199 = 1026;
            *(_DWORD *)&v199[2] = v132;
            v200 = 1026;
            v201 = v133;
            v202 = 1026;
            v203 = v130;
            v204 = 1026;
            v205 = v131;
            _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEBUG, "After vehicular transition, startTime, %{public}f, rawMotionType, %{public}d, rawConfidence, %{public}d, mounted, %{public}d, mountedConfidence, %{public}d", buf, 0x24u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FCB0 != -1)
              dispatch_once(&qword_10229FCB0, &stru_10219AC88);
            LODWORD(v285.__r_.__value_.__l.__data_) = 134350080;
            *(std::string::size_type *)((char *)v285.__r_.__value_.__r.__words + 4) = v129;
            WORD2(v285.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&v285.__r_.__value_.__r.__words[1] + 6) = v132;
            WORD1(v285.__r_.__value_.__r.__words[2]) = 1026;
            HIDWORD(v285.__r_.__value_.__r.__words[2]) = v133;
            LOWORD(v286) = 1026;
            *(_DWORD *)((char *)&v286 + 2) = v130;
            HIWORD(v286) = 1026;
            v287 = v131;
            LODWORD(v160) = 36;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 2, "After vehicular transition, startTime, %{public}f, rawMotionType, %{public}d, rawConfidence, %{public}d, mounted, %{public}d, mountedConfidence, %{public}d", &v285, v160);
            v137 = (char *)v136;
            sub_100512490("Generic", 1, 0, 2, "virtual void CLMotionCoprocessor::visitMotionStateUpdate(const CMMotionCoprocessorReply::MotionStateUpdate *)", "%s\n", v136);
            if (v137 != buf)
              free(v137);
          }
          v126 += 160;
          if (v126 - *v128 == 4000)
          {
            v135 = v128[1];
            ++v128;
            v126 = v135;
          }
          result = v185;
        }
        while (v126 != v127);
      }
    }
  }
  v138 = *(unsigned __int16 *)(a2 + 91);
  if (v138 != 0xFFFF)
  {
    *(_DWORD *)v199 = 0;
    *(double *)buf = v5;
    *(float *)&buf[8] = (float)(__int16)v138;
    sub_10014C2F4(result, 31, (uint64_t)buf, 16);
    return sub_10014C2F4(v185, 32, (uint64_t)buf, 16);
  }
  return result;
}

void sub_100064EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

std::string *sub_100064EFC@<X0>(int a1@<W0>, std::string *a2@<X8>)
{
  const std::string::value_type *v2;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  if (a1 > 65663)
  {
    if (a1 > 589887)
    {
      if (a1 > 851979)
      {
        if (a1 >= 0x100000)
        {
          if (a1 == 0x100000)
          {
            v2 = "kTypeMachineWorkout";
            return std::string::assign(a2, v2);
          }
          if (a1 == 0x200000)
          {
            v2 = "kTypeWorkout";
            return std::string::assign(a2, v2);
          }
        }
        else
        {
          if (a1 == 851980)
          {
            v2 = "kTypeSemiStationaryPocket";
            return std::string::assign(a2, v2);
          }
          if (a1 == 917516)
          {
            v2 = "kTypeSemiStationaryArm";
            return std::string::assign(a2, v2);
          }
        }
      }
      else if (a1 > 720911)
      {
        if (a1 == 720912)
        {
          v2 = "kTypeWalkingLeg";
          return std::string::assign(a2, v2);
        }
        if (a1 == 786448)
        {
          v2 = "kTypeWalkingArm";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 589888)
        {
          v2 = "kTypeRunningLeg";
          return std::string::assign(a2, v2);
        }
        if (a1 == 655424)
        {
          v2 = "kTypeRunningArm";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 327807)
    {
      if (a1 >= 462848)
      {
        if (a1 == 462848)
        {
          v2 = "kTypeDrivingArm";
          return std::string::assign(a2, v2);
        }
        if (a1 == 528384)
        {
          v2 = "kTypeDrivingStowed";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 327808)
        {
          v2 = "kTypeCyclingTorso";
          return std::string::assign(a2, v2);
        }
        if (a1 == 397312)
        {
          v2 = "kTypeDrivingSeat";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 >= 196608)
    {
      if (a1 == 196608)
      {
        v2 = "kTypeCyclingLeg";
        return std::string::assign(a2, v2);
      }
      if (a1 == 262272)
      {
        v2 = "kTypeCyclingArm";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 65664)
      {
        v2 = "kTypeCyclingSeat";
        return std::string::assign(a2, v2);
      }
      if (a1 == 131200)
      {
        v2 = "kTypeCyclingChassis";
        return std::string::assign(a2, v2);
      }
    }
LABEL_63:
    v2 = "ERROR";
    return std::string::assign(a2, v2);
  }
  if (a1 > 255)
  {
    if (a1 >= 0x2000)
    {
      if (a1 >= 0x4000)
      {
        if (a1 == 0x4000)
        {
          v2 = "kTypeDrivingMounted";
          return std::string::assign(a2, v2);
        }
        if (a1 == 0x8000)
        {
          v2 = "kTypeMotorcycle";
          return std::string::assign(a2, v2);
        }
      }
      else
      {
        if (a1 == 0x2000)
        {
          v2 = "kTypeVehicularInHand";
          return std::string::assign(a2, v2);
        }
        if (a1 == 12288)
        {
          v2 = "kTypeDrivingOther";
          return std::string::assign(a2, v2);
        }
      }
    }
    else if (a1 > 4095)
    {
      if (a1 == 4096)
      {
        v2 = "kTypeDriving";
        return std::string::assign(a2, v2);
      }
      if (a1 == 4128)
      {
        v2 = "kTypeDrivingOrWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 256)
      {
        v2 = "kTypeInVehicleFrozen";
        return std::string::assign(a2, v2);
      }
      if (a1 == 512)
      {
        v2 = "kTypeInVehicleStatic";
        return std::string::assign(a2, v2);
      }
    }
    goto LABEL_63;
  }
  if (a1 > 15)
  {
    if (a1 > 63)
    {
      if (a1 == 64)
      {
        v2 = "kTypeRunning";
        return std::string::assign(a2, v2);
      }
      if (a1 == 128)
      {
        v2 = "kTypeCycling";
        return std::string::assign(a2, v2);
      }
    }
    else
    {
      if (a1 == 16)
      {
        v2 = "kTypeWalking";
        return std::string::assign(a2, v2);
      }
      if (a1 == 32)
      {
        v2 = "kTypeWalkingSlow";
        return std::string::assign(a2, v2);
      }
    }
    goto LABEL_63;
  }
  v2 = "kTypeFrozen";
  switch(a1)
  {
    case 0:
      v2 = "kTypeUnknown";
      break;
    case 1:
      return std::string::assign(a2, v2);
    case 2:
      v2 = "kTypeStatic";
      break;
    case 3:
      goto LABEL_63;
    case 4:
      v2 = "kTypeMoving";
      break;
    default:
      if (a1 != 12)
        goto LABEL_63;
      v2 = "kTypeSemiStationary";
      break;
  }
  return std::string::assign(a2, v2);
}

void sub_1000652A0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_100065D58(uint64_t a1, __CFString *a2, uint64_t a3)
{
  uint64_t v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  __CFString *v10;
  NSObject *v11;
  uint8_t *v12;
  const char *v13;
  uint8_t *v14;
  _WORD v15[8];
  uint8_t buf[1640];

  v6 = *(_QWORD *)(a1 + 40);
  objc_msgSend(*(id *)(v6 + 104), "silo");
  if (a3)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v7 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC failed", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC failed", v15, 2);
LABEL_29:
    v12 = (uint8_t *)v8;
    sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v8);
    if (v12 != buf)
      free(v12);
LABEL_25:

    return;
  }
  if (!a2 || !-[__CFString length](a2, "length"))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC returned nil", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_25;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v15[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,#cterror,queryServingMccAndMnc,query for serving MCC returned nil", v15, 2);
    goto LABEL_29;
  }
  if ((unint64_t)-[__CFString length](a2, "length") >= 4)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021601C0);
    v9 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#Warning,#ctcl,queryServingMccAndMnc,MCC is too many digits,replacing with -1", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021601C0);
      v15[0] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning,#ctcl,queryServingMccAndMnc,MCC is too many digits,replacing with -1", v15, 2);
      v14 = (uint8_t *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLCoreTelephonyClient::queryServingMccAndMnc(CTXPCServiceSubscriptionContext *)_block_invoke", "%s\n", v13);
      if (v14 != buf)
        free(v14);
    }
    a2 = CFSTR("-1");
  }
  v10 = a2;
  objc_msgSend(*(id *)(v6 + 16), "copyMobileNetworkCode:completion:");
}

void sub_100066180(uint64_t a1)
{
  NSObject *v2;
  unsigned __int8 v3;
  NSObject *v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v7;
  NSObject *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  const char *v15;
  uint8_t *v16;
  const char *v17;
  uint8_t *v18;
  const char *v19;
  uint8_t *v20;
  uint64_t v21;
  _WORD v22[8];
  std::unique_lock<std::mutex> __lk;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint8_t buf[1632];

  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v2 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadFunction,entry", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v24) = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,threadFunction,entry", &v24, 2);
    v18 = (uint8_t *)v17;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v17);
    if (v18 != buf)
      free(v18);
  }
  pthread_setname_np("RavenThread");
  sub_100C77068();
  v3 = atomic_load((unsigned __int8 *)(a1 + 184));
  if ((v3 & 1) != 0)
  {
    do
    {
      v25 = 0u;
      v26 = 0u;
      v24 = 0u;
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 16);
      __lk.__owns_ = 1;
      std::mutex::lock((std::mutex *)(a1 + 16));
      v5.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
      v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      v7.__d_.__rep_ = 500000000;
      if (v6.__d_.__rep_)
      {
        if (v6.__d_.__rep_ >= 1)
        {
          if ((unint64_t)v6.__d_.__rep_ <= 0x20C49BA5E353F7)
          {
LABEL_19:
            if (v6.__d_.__rep_ < 0x20C49BA5DBB2D8)
            {
              v7.__d_.__rep_ = 1000 * v6.__d_.__rep_ + 500000000;
              goto LABEL_22;
            }
          }
          v7.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_22;
        }
        if ((unint64_t)v6.__d_.__rep_ >= 0xFFDF3B645A1CAC09)
          goto LABEL_19;
        v7.__d_.__rep_ = 0x800000001DCD6500;
      }
LABEL_22:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 80), &__lk, v7);
      if (std::chrono::steady_clock::now().__d_.__rep_ - v5.__d_.__rep_ > 499999999)
      {
        if (qword_1022A00A0 != -1)
          dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
        v8 = qword_1022A00A8;
        if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,timeout,cv", buf, 2u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A00A0 != -1)
            dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
          v22[0] = 0;
          LODWORD(v21) = 2;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: #warning,rct,timeout,cv", v22, v21);
          v16 = (uint8_t *)v15;
          sub_100512490("Generic", 1, 0, 0, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v15);
          if (v16 != buf)
            free(v16);
        }
      }
      v9 = v25;
      v10 = *(_OWORD *)(a1 + 128);
      v11 = *(_OWORD *)(a1 + 144);
      *(_OWORD *)(a1 + 128) = v24;
      *(_OWORD *)(a1 + 144) = v9;
      v24 = v10;
      v25 = v11;
      v12 = *(_OWORD *)(a1 + 160);
      *(_OWORD *)(a1 + 160) = v26;
      v26 = v12;
      if (__lk.__owns_)
        std::mutex::unlock(__lk.__m_);
      while (*((_QWORD *)&v26 + 1))
      {
        v13 = atomic_load((unsigned __int8 *)(a1 + 184));
        if ((v13 & 1) == 0)
          break;
        sub_1000667EC(*(_QWORD *)(a1 + 200), (uint64_t *)(*(_QWORD *)(*((_QWORD *)&v24 + 1) + 8 * ((unint64_t)v26 / 0xAA))+ 24 * ((unint64_t)v26 % 0xAA)));
        sub_100066778(&v24);
      }
      sub_100C95458(&v24);
      v14 = atomic_load((unsigned __int8 *)(a1 + 184));
    }
    while ((v14 & 1) != 0);
  }
  std::promise<void>::set_value((std::promise<void> *)(a1 + 176));
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v4 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Raven: rct,threadFunction,exit", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    LOWORD(v24) = 0;
    LODWORD(v21) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: rct,threadFunction,exit", &v24, v21);
    v20 = (uint8_t *)v19;
    sub_100512490("Generic", 1, 0, 2, "void CLRavenController::RavenThread::EntryFunction()", "%s\n", v19);
    if (v20 != buf)
      free(v20);
  }
}

void sub_10006673C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::mutex *a13, char a14, int a15, uint64_t a16)
{
  if (a14)
    std::mutex::unlock(a13);
  sub_100C95458(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100066778(_QWORD *a1)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = *(_QWORD *)(a1[1] + 8 * (v2 / 0xAA)) + 24 * (v2 % 0xAA);
  if (*(char *)(v3 + 23) < 0)
  {
    operator delete(*(void **)v3);
    v2 = a1[4];
  }
  v4 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v4;
  return sub_10047FDC4((uint64_t)a1, 1);
}

void sub_1000667EC(uint64_t a1, uint64_t *a2)
{
  NSObject *v4;
  const char *v5;
  uint8_t *v6;
  void *v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _WORD v12[8];
  std::timed_mutex *v13;
  char v14;
  uint8_t buf[1632];

  v13 = (std::timed_mutex *)(a1 + 320);
  v14 = 0;
  while (1)
  {
    *(_QWORD *)buf = 500;
    if ((sub_100066A58((uint64_t)&v13, buf) & 1) != 0)
      break;
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v4 = qword_1022A00A8;
    if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Raven: #warning,rct,timeout,mutex", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A00A0 != -1)
        dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
      v12[0] = 0;
      LODWORD(v11) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 16, "Raven: #warning,rct,timeout,mutex", v12, v11);
      v6 = (uint8_t *)v5;
      sub_100512490("Generic", 1, 0, 0, "void CLRavenController::SendToCoreNavigation(const SerializedClpLogEntry &)", "%s\n", v5);
      if (v6 != buf)
        free(v6);
    }
  }
  if (*(_BYTE *)(a1 + 4664))
  {
    v7 = objc_autoreleasePoolPush();
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = (uint64_t *)*a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = a2[1];
    objc_msgSend(*(id *)(a1 + 4672), "raiseRavenEventsFromData:", +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v9, v10));
    objc_autoreleasePoolPop(v7);
  }
  else
  {
    raven::RavenSupervisor::RaiseEventsFrom(*(_QWORD *)(a1 + 312), a2);
  }
  if (v14)
    std::timed_mutex::unlock(v13);
}

void sub_100066A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::timed_mutex *a13, char a14)
{
  if (a14)
    std::timed_mutex::unlock(a13);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100066A58(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;

  v2 = *(_QWORD *)a1;
  if (*(_QWORD *)a1)
  {
    if (!*(_BYTE *)(a1 + 8))
    {
      v7 = std::chrono::steady_clock::now().__d_.__rep_ + 1000000 * *a2;
      result = sub_100066AE0(v2, &v7);
      *(_BYTE *)(a1 + 8) = result;
      return result;
    }
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::try_lock_for: references null mutex");
  }
  std::__throw_system_error(11, "unique_lock::try_lock_for: already locked");
  return sub_100066AE0(v5, v6);
}

uint64_t sub_100066AE0(uint64_t a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep *a2)
{
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v4;
  std::chrono::steady_clock::time_point v5;
  std::chrono::system_clock::time_point v6;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v7;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v8;
  uint64_t v9;
  std::unique_lock<std::mutex> v11;

  v11.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a1;
  v11.__owns_ = 1;
  std::mutex::lock((std::mutex *)a1);
  if (std::chrono::steady_clock::now().__d_.__rep_ < *a2)
  {
    while (1)
    {
      if (!*(_BYTE *)(a1 + 112))
        goto LABEL_20;
      if (std::chrono::steady_clock::now().__d_.__rep_ >= *a2)
        goto LABEL_18;
      v4 = *a2;
      v5.__d_.__rep_ = v4 - std::chrono::steady_clock::now().__d_.__rep_;
      if (v5.__d_.__rep_ >= 1)
        break;
LABEL_17:
      if (std::chrono::steady_clock::now().__d_.__rep_ >= *a2)
        goto LABEL_18;
    }
    std::chrono::steady_clock::now();
    v6.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
    if (v6.__d_.__rep_)
    {
      if (v6.__d_.__rep_ < 1)
      {
        if ((unint64_t)v6.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v7 = 0x8000000000000000;
          goto LABEL_15;
        }
      }
      else if ((unint64_t)v6.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v7 = 0x7FFFFFFFFFFFFFFFLL;
        goto LABEL_13;
      }
      v7 = 1000 * v6.__d_.__rep_;
    }
    else
    {
      v7 = 0;
    }
LABEL_13:
    if (v7 > (v5.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
    {
      v8.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
LABEL_16:
      std::condition_variable::__do_timed_wait((std::condition_variable *)(a1 + 64), &v11, v8);
      std::chrono::steady_clock::now();
      goto LABEL_17;
    }
LABEL_15:
    v8.__d_.__rep_ = v7 + v5.__d_.__rep_;
    goto LABEL_16;
  }
LABEL_18:
  if (*(_BYTE *)(a1 + 112))
  {
    v9 = 0;
  }
  else
  {
LABEL_20:
    v9 = 1;
    *(_BYTE *)(a1 + 112) = 1;
  }
  if (v11.__owns_)
    std::mutex::unlock(v11.__m_);
  return v9;
}

uint64_t sub_100066C34(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  double v4;
  double v5;
  id v6;
  float v7;
  id v8;
  double v9;
  int v10;
  id v11;
  double v12;

  v3 = result;
  v4 = *(double *)(result + 280);
  v5 = *(double *)(a2 + 8);
  if (v4 == 1.79769313e308 || v5 - v4 >= 0.899999976)
  {
    *(double *)(result + 280) = v5;
    v6 = objc_alloc_init((Class)CLPIndoorEvent);
    objc_msgSend(v6, "setType:", 5);
    objc_msgSend(v6, "setPressure:", objc_alloc_init((Class)CLPIndoorPressure));
    objc_msgSend(objc_msgSend(v6, "pressure"), "setTimestamp:", *(double *)(a2 + 8) - *(double *)(v3 + 64));
    v7 = *(float *)a2 / 1000.0;
    v8 = objc_msgSend(v6, "pressure");
    *(float *)&v9 = v7;
    objc_msgSend(v8, "setPressure:", v9);
    v10 = *(_DWORD *)(a2 + 40);
    v11 = objc_msgSend(v6, "pressure");
    LODWORD(v12) = v10;
    objc_msgSend(v11, "setTemperature:", v12);
    objc_msgSend(*(id *)(v3 + 48), "addObject:", v6);
    return sub_10020329C(v3);
  }
  return result;
}

void sub_100066E70(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4, void (**a5)(_QWORD, _QWORD))
{
  id v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CLClientManagerAuthorizationContext *v14;
  NSObject *v15;
  NSObject *v16;
  unsigned __int8 *v17;
  unsigned int v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  double v29;
  double v30;
  unsigned __int8 **v31;
  double v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  _BOOL4 v43;
  NSObject *v45;
  unsigned __int8 *v46;
  NSObject *v47;
  unsigned __int8 *v48;
  _BOOL4 v49;
  NSObject *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  _QWORD v55[3];
  _BYTE buf[48];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];

  v9 = sub_100196E90(a1, a3);
  if (objc_msgSend(v9, "isAuthSharingSubIdentity"))
    v9 = objc_msgSend(v9, "anchorKeyPath");
  v10 = a4[7];
  v60 = a4[6];
  v61 = v10;
  v62[0] = a4[8];
  *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)a4 + 140);
  v11 = a4[3];
  *(_OWORD *)&buf[32] = a4[2];
  v57 = v11;
  v12 = a4[5];
  v58 = a4[4];
  v59 = v12;
  v13 = a4[1];
  *(_OWORD *)buf = *a4;
  *(_OWORD *)&buf[16] = v13;
  v14 = sub_1000B9630(a1, (uint64_t)v9, buf);
  if (!-[CLClientManagerAuthorizationContext isAuthorizedForServiceType:](v14, "isAuthorizedForServiceType:", a2))
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v15 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2114;
      *(_QWORD *)&buf[30] = v14;
      *(_WORD *)&buf[38] = 2050;
      *(_QWORD *)&buf[40] = a2;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#provisional intermediation Client not authorized for serviceType\", \"Client\":%{public, location:escape_only}@, \"AuthContext\":%{public, location:escape_only}@, \"serviceType\":%{public}lu}", buf, 0x30u);
    }
LABEL_10:
    a5[2](a5, 0);
    return;
  }
  if (-[CLClientManagerAuthorizationContext isNonProvisionallyAuthorizedForServiceType:](v14, "isNonProvisionallyAuthorizedForServiceType:", a2))
  {
    a5[2](a5, 1);
    return;
  }
  if (-[CLClientManagerAuthorizationContext transientAwareRegistrationResult](v14, "transientAwareRegistrationResult") != 8)
    goto LABEL_10;
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v16 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 68289538;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    *(_WORD *)&buf[18] = 2114;
    *(_QWORD *)&buf[20] = v9;
    *(_WORD *)&buf[28] = 2050;
    *(_QWORD *)&buf[30] = a2;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Handle #provisional intermediation for service\", \"Client\":%{public, location:escape_only}@, \"serviceType\":%{public}lu}", buf, 0x26u);
  }
  v17 = *(unsigned __int8 **)(a1 + 264);
  if (v17)
  {
    if (v9)
    {
      objc_msgSend(v9, "cppClientKey");
      v18 = buf[23];
      v19 = *(_QWORD *)&buf[8];
    }
    else
    {
      v19 = 0;
      v18 = 0;
      memset(buf, 0, 24);
    }
    v21 = v17[23];
    if ((v21 & 0x80u) == 0)
      v22 = v17[23];
    else
      v22 = *((_QWORD *)v17 + 1);
    if ((v18 & 0x80u) == 0)
      v19 = v18;
    if (v22 == v19)
    {
      if ((v18 & 0x80u) == 0)
        v23 = buf;
      else
        v23 = *(unsigned __int8 **)buf;
      if ((v21 & 0x80) != 0)
      {
        v20 = memcmp(*(const void **)v17, v23, *((_QWORD *)v17 + 1)) != 0;
      }
      else if (v17[23])
      {
        v24 = v21 - 1;
        do
        {
          v26 = *v17++;
          v25 = v26;
          v27 = *v23++;
          v20 = v25 != v27;
        }
        while (v25 == v27 && v24-- != 0);
      }
      else
      {
        v20 = 0;
      }
    }
    else
    {
      v20 = 1;
    }
    if ((v18 & 0x80) != 0)
      operator delete(*(void **)buf);
  }
  else
  {
    v20 = 0;
  }
  v29 = -1.0;
  if (*(double *)(a1 + 304) > 0.0)
  {
    objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
    v29 = v30 - *(double *)(a1 + 304);
  }
  v55[0] = objc_msgSend(v9, "legacyClientKey", CFSTR("ClientKey"));
  v54[1] = CFSTR("Challenger");
  v55[1] = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v20);
  v54[2] = CFSTR("OnDeckDuration");
  v55[2] = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", v29);
  AnalyticsSendEvent(CFSTR("com.apple.locationd.client.intermediation"), +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v55, v54, 3));
  objc_msgSend(*(id *)(a1 + 296), "nextFireDelay");
  v31 = (unsigned __int8 **)(a1 + 264);
  if (v32 >= 1.79769313e308)
    goto LABEL_113;
  v33 = *v31;
  if (!*v31)
    goto LABEL_113;
  if (v9)
  {
    objc_msgSend(v9, "cppClientKey");
    v34 = buf[23];
    v35 = *(_QWORD *)&buf[8];
  }
  else
  {
    v35 = 0;
    v34 = 0;
    memset(buf, 0, 24);
  }
  v36 = v33[23];
  if ((v36 & 0x80u) == 0)
    v37 = v33[23];
  else
    v37 = *((_QWORD *)v33 + 1);
  if ((v34 & 0x80u) == 0)
    v35 = v34;
  if (v37 == v35)
  {
    if ((v34 & 0x80u) == 0)
      v38 = buf;
    else
      v38 = *(unsigned __int8 **)buf;
    if ((v36 & 0x80) != 0)
    {
      v43 = memcmp(*(const void **)v33, v38, *((_QWORD *)v33 + 1)) != 0;
    }
    else if (v33[23])
    {
      v39 = v36 - 1;
      do
      {
        v41 = *v33++;
        v40 = v41;
        v42 = *v38++;
        v43 = v40 != v42;
      }
      while (v40 == v42 && v39-- != 0);
    }
    else
    {
      v43 = 0;
    }
  }
  else
  {
    v43 = 1;
  }
  if ((v34 & 0x80) != 0)
    operator delete(*(void **)buf);
  if (v43)
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v45 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
    {
      v46 = *v31;
      if ((char)(*v31)[23] < 0)
        v46 = *(unsigned __int8 **)v46;
      *(_DWORD *)buf = 68289538;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)&buf[8] = 2082;
      *(_QWORD *)&buf[10] = "";
      *(_WORD *)&buf[18] = 2114;
      *(_QWORD *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Dropping #provisional intermediation reigning king is not yet stale\", \"Client\":%{public, location:escape_only}@, \"kingOfTheDeck\":%{public, location:escape_only}s}", buf, 0x26u);
    }
    a5[2](a5, 0);
  }
  else
  {
LABEL_113:
    if (*(_QWORD *)(a1 + 272))
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v47 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)&buf[4] = 0;
        *(_WORD *)&buf[8] = 2082;
        *(_QWORD *)&buf[10] = "";
        *(_WORD *)&buf[18] = 2114;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Skipping #provisional intermediation throne change because of outstanding prompt\", \"wouldBeKing\":%{public, location:escape_only}@}", buf, 0x1Cu);
      }
    }
    else
    {
      v48 = *v31;
      if (!*v31)
        goto LABEL_96;
      if (v9)
        objc_msgSend(v9, "cppClientKey");
      else
        memset(buf, 0, 24);
      v49 = sub_10071C288(v48, buf);
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (v49)
      {
LABEL_96:
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v50 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
        {
          v51 = (const char *)*v31;
          if (*v31)
          {
            if (v51[23] < 0)
              v51 = *(const char **)v51;
          }
          else
          {
            v51 = "nobody";
          }
          *(_DWORD *)buf = 68289538;
          *(_DWORD *)&buf[4] = 0;
          *(_WORD *)&buf[8] = 2082;
          *(_QWORD *)&buf[10] = "";
          *(_WORD *)&buf[18] = 2114;
          *(_QWORD *)&buf[20] = v9;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v51;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"Taking #provisional intermediation kingOfTheDeck\", \"newKing\":%{public, location:escape_only}@, \"oldKing\":%{public, location:escape_only}s}", buf, 0x26u);
        }
        if (v9)
          objc_msgSend(v9, "cppClientKey");
        else
          memset(buf, 0, 24);
        operator new();
      }
      v52 = *(_QWORD *)(a1 + 288);
      if (v52)
      {
        (*(void (**)(uint64_t, _QWORD))(v52 + 16))(v52, 0);

        *(_QWORD *)(a1 + 288) = 0;
      }
      *(_QWORD *)(a1 + 288) = objc_msgSend(a5, "copy");
      objc_msgSend(*(id *)(a1 + 296), "setNextFireDelay:", 300.0);
      objc_msgSend(*(id *)(a1 + 40), "currentLatchedAbsoluteTimestamp");
      *(_QWORD *)(a1 + 304) = v53;
      *(_BYTE *)(a1 + 280) = 1;
    }
  }
}

void sub_100067678(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006769C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  _OWORD v4[2];

  result = *(_QWORD *)(a1 + 32);
  v4[0] = *(_OWORD *)(a1 + 56);
  *(_OWORD *)((char *)v4 + 12) = *(_OWORD *)(a1 + 68);
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    if (*(_QWORD *)(v3 + 8) != -1)
      return sub_10006771C(result, (uint64_t)v4);
  }
  return result;
}

uint64_t sub_10006771C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  const char *v6;
  uint8_t *v7;
  _WORD v8[8];
  uint8_t v9[16];
  uint8_t buf[1640];

  sub_100119F3C(v9);
  sub_1001884FC((float *)a2, (float *)(a2 + 12), *(_BYTE *)(a2 + 24), (uint64_t)v9);
  *(_QWORD *)buf = sub_10011A5AC((uint64_t)v9);
  sub_100067908(a1, buf);
  if (qword_10229FD50 != -1)
    dispatch_once(&qword_10229FD50, &stru_102174F98);
  v4 = off_10229FD58;
  if (os_log_type_enabled((os_log_t)off_10229FD58, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "Sent gyro bias estimation message", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FD50 != -1)
      dispatch_once(&qword_10229FD50, &stru_102174F98);
    v8[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_10229FD58, 2, "Sent gyro bias estimation message", v8, 2);
    v7 = (uint8_t *)v6;
    sub_100512490("Generic", 1, 0, 2, "void CLDaemonClient::onGyroBiasEstimatorNotification(const CLMotionTypeGyroBiasAndVariance &)", "%s\n", v6);
    if (v7 != buf)
      free(v7);
  }
  return sub_10011A5A8(v9);
}

void sub_1000678E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_10011A5A8(va);
  _Unwind_Resume(a1);
}

void sub_100067908(uint64_t a1, _QWORD *a2)
{
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;

  sub_1004E6BA4(&off_1021783F8, a2, &v11);
  v13 = v11;
  v14 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
  }
  v15 = 0;
  v16 = 0;
  sub_10011D4E8(a1, (uint64_t)&v13);
  v5 = v14;
  if (v14)
  {
    v6 = (unint64_t *)&v14->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1000679E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_100261F44((uint64_t)va1);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100067A00(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100067A00(a1, *(_QWORD *)a2);
    sub_100067A00(a1, *((_QWORD *)a2 + 1));
    if (a2[79] < 0)
      operator delete(*((void **)a2 + 7));
    operator delete(a2);
  }
}

uint64_t sub_100067A50(uint64_t a1)
{
  void *v2;

  sub_100067A88(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100067A88(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      sub_100067AC4((uint64_t)(v2 + 3));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100067AC4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void sub_100067B0C(uint64_t a1, const char *a2, int a3, int a4, double *a5)
{
  const char *v10;
  FILE *v11;
  size_t v12;
  const char *v13;
  FILE *v14;
  FILE *v15;
  size_t v16;
  unsigned int v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  const char *v23;
  const char *v24;
  size_t v25;
  NSObject *v26;
  const char *v27;
  const char *v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  double v32;
  _BOOL4 v33;
  NSObject *v35;
  int v36;
  int v37;
  char *v38;
  NSObject *v39;
  uint64_t v40;
  NSObject *v41;
  int v42;
  int v43;
  NSObject *v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  int v56;
  char *v57;
  uint64_t v58;
  void *__ptr[3];
  int v60;
  uint64_t v61;
  unsigned __int8 md[32];
  _BYTE buf[12];
  __int16 v64;
  size_t v65;
  __int16 v66;
  size_t v67;

  if (a2[23] >= 0)
    v10 = a2;
  else
    v10 = *(const char **)a2;
  v11 = sub_100068A38(v10);
  if ((uint64_t)v11 <= 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v18 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0)
        v19 = a2;
      else
        v19 = *(const char **)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - size less than or equal to zero", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      if (a2[23] >= 0)
        v20 = a2;
      else
        v20 = *(const char **)a2;
      *(_DWORD *)md = 136315138;
      *(_QWORD *)&md[4] = v20;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd file: %s - size less than or equal to zero", (const char *)md);
      sub_100512490("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v21);
      goto LABEL_41;
    }
  }
  else
  {
    v12 = (size_t)v11;
    if (a2[23] >= 0)
      v13 = a2;
    else
      v13 = *(const char **)a2;
    v14 = fopen(v13, "rb");
    if (v14)
    {
      v15 = v14;
      sub_1000689C8(__ptr, v12);
      v16 = fread(__ptr[0], 1uLL, v12, v15);
      if (v16 == v12)
      {
        fclose(v15);
        memset(md, 0, sizeof(md));
        if (CC_SHA256(__ptr[0], v12, md))
        {
          if (a5)
          {
            v17 = *a5;
            LOBYTE(a5) = 1;
          }
          else
          {
            *(_QWORD *)buf = 0;
            if (a2[23] >= 0)
              v31 = a2;
            else
              v31 = *(const char **)a2;
            if (sub_10000840C(v31, (double *)buf))
            {
              v32 = CFAbsoluteTimeGetCurrent() - *(double *)buf;
              v33 = (*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFLL) == 0;
              if ((unint64_t)(*(_QWORD *)&v32 - 1) < 0xFFFFFFFFFFFFFLL)
                v33 = 1;
              LODWORD(a5) = ((*(_QWORD *)&v32 & 0x7FFFFFFFFFFFFFFFuLL) - 0x10000000000000) >> 53 < 0x3FF && v32 >= 0.0
                         || v33;
              if ((_DWORD)a5)
                v17 = v32;
              else
                v17 = 0;
            }
            else
            {
              v17 = 0;
              LOBYTE(a5) = 0;
            }
          }
          switch(a4)
          {
            case 1:
              *(_BYTE *)(a1 + 1112) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1116) = v17;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v35 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
                v36 = *(_DWORD *)(a1 + 1116);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v36;
                _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#gnssca,Short Term Orbit Assistance File Age,%u", buf, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v37 = *(_DWORD *)(a1 + 1116);
                v60 = 67109120;
                LODWORD(v61) = v37;
                v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,Short Term Orbit Assistance File Age,%u", &v60);
                sub_100512490("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v38);
                goto LABEL_106;
              }
              break;
            case 2:
              *(_BYTE *)(a1 + 848) = (_BYTE)a5;
              *(_QWORD *)(a1 + 952) = v17;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v44 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
              {
                v45 = *(_QWORD *)(a1 + 952);
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v45;
                _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEBUG, "#gnssawd,orbit file age,%llu", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v54 = *(_QWORD *)(a1 + 952);
                v60 = 134217984;
                v61 = v54;
                v55 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,orbit file age,%llu", &v60);
                sub_100512490("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v55);
                if (v55 != buf)
                  free(v55);
              }
              *(_BYTE *)(a1 + 1113) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1120) = v17;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v46 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
                v47 = *(_DWORD *)(a1 + 1120);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v47;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#gnssca,Long Term Orbit Assistance file age,%u", buf, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v56 = *(_DWORD *)(a1 + 1120);
                v60 = 67109120;
                LODWORD(v61) = v56;
                v57 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,Long Term Orbit Assistance file age,%u", &v60);
                sub_100512490("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v57);
                if (v57 != buf)
                  free(v57);
              }
              sub_100211CC0((_QWORD *)(a1 + 856), md);
              *(_DWORD *)(a1 + 1060) = a3;
              *(_BYTE *)(a1 + 1056) = 1;
              break;
            case 3:
              *(_BYTE *)(a1 + 849) = (_BYTE)a5;
              *(_QWORD *)(a1 + 960) = v17;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v39 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
                v40 = *(_QWORD *)(a1 + 960);
                *(_DWORD *)buf = 134217984;
                *(_QWORD *)&buf[4] = v40;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#gnssca,rti file age,%llu", buf, 0xCu);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v52 = *(_QWORD *)(a1 + 960);
                v60 = 134217984;
                v61 = v52;
                v53 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,rti file age,%llu", &v60);
                sub_100512490("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v53);
                if (v53 != buf)
                  free(v53);
              }
              sub_100211CC0((_QWORD *)(a1 + 904), md);
              break;
            case 4:
              *(_BYTE *)(a1 + 1114) = (_BYTE)a5;
              *(_DWORD *)(a1 + 1124) = v17;
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_1021CE050);
              v41 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
              {
                v42 = *(_DWORD *)(a1 + 1124);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&buf[4] = v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#gnssca,Raven GNSS Assistance File Age,%u", buf, 8u);
              }
              if (sub_1001BFF7C(115, 2))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_1021CE050);
                v43 = *(_DWORD *)(a1 + 1124);
                v60 = 67109120;
                LODWORD(v61) = v43;
                v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gnssca,Raven GNSS Assistance File Age,%u", &v60);
                sub_100512490("Generic", 1, 0, 2, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v38);
LABEL_106:
                if (v38 != buf)
                  free(v38);
              }
              break;
            default:
              break;
          }
          v48 = *(_QWORD *)(a1 + 896);
          if (v48 >= 6)
          {
            v49 = *(_QWORD *)(a1 + 888);
            *(_QWORD *)(a1 + 896) = v48 - 1;
            *(_QWORD *)(a1 + 888) = v49 + 1;
            sub_1003432C8(a1 + 856, 1);
          }
          v50 = *(_QWORD *)(a1 + 944);
          if (v50 >= 6)
          {
            v51 = *(_QWORD *)(a1 + 936);
            *(_QWORD *)(a1 + 944) = v50 - 1;
            *(_QWORD *)(a1 + 936) = v51 + 1;
            sub_1003432C8(a1 + 904, 1);
          }
LABEL_123:
          if (__ptr[0])
          {
            __ptr[1] = __ptr[0];
            operator delete(__ptr[0]);
          }
          return;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v30 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "#gnssawd failed to compute SHA256 checksum", buf, 2u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_123;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        LOWORD(v60) = 0;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd failed to compute SHA256 checksum", &v60, 2);
        sub_100512490("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v29);
      }
      else
      {
        v25 = v16;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        v26 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
        {
          if (a2[23] >= 0)
            v27 = a2;
          else
            v27 = *(const char **)a2;
          *(_DWORD *)buf = 136315650;
          *(_QWORD *)&buf[4] = v27;
          v64 = 2048;
          v65 = v25;
          v66 = 2048;
          v67 = v12;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - read %lu bytes but filesize is %lu bytes", buf, 0x20u);
        }
        if (!sub_1001BFF7C(115, 0))
          goto LABEL_123;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CE050);
        if (a2[23] >= 0)
          v28 = a2;
        else
          v28 = *(const char **)a2;
        *(_DWORD *)md = 136315650;
        *(_QWORD *)&md[4] = v28;
        *(_WORD *)&md[12] = 2048;
        *(_QWORD *)&md[14] = v25;
        *(_WORD *)&md[22] = 2048;
        *(_QWORD *)&md[24] = v12;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd file: %s - read %lu bytes but filesize is %lu bytes", (const char *)md, 32, v58);
        sub_100512490("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v29);
      }
      if (v29 != buf)
        free(v29);
      goto LABEL_123;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v22 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0)
        v23 = a2;
      else
        v23 = *(const char **)a2;
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#gnssawd file: %s - failed to open", buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      if (a2[23] >= 0)
        v24 = a2;
      else
        v24 = *(const char **)a2;
      *(_DWORD *)md = 136315138;
      *(_QWORD *)&md[4] = v24;
      v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#gnssawd file: %s - failed to open", (const char *)md);
      sub_100512490("Generic", 1, 0, 0, "static void CLGnssAWD::populateAssistanceFileFields(GNSS::GnssSessionData &, const std::string &, const CLDaemonStats_Type::EphemerisFileIntegrityCheckType, CLDaemonStats_Type::AssistanceFileType, const double *const)", "%s\n", v21);
LABEL_41:
      if (v21 != buf)
        free(v21);
    }
  }
}

void sub_100068978(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000689C8(_QWORD *a1, size_t a2)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_100785650(a1, a2);
    v4 = (char *)a1[1];
    v5 = &v4[a2];
    bzero(v4, a2);
    a1[1] = v5;
  }
  return a1;
}

void sub_100068A1C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

FILE *sub_100068A38(const char *a1)
{
  FILE *result;
  FILE *v2;
  uint64_t v3;

  result = fopen(a1, "rb");
  if (result)
  {
    v2 = result;
    fseek(result, 0, 2);
    v3 = ftell(v2);
    fclose(v2);
    return (FILE *)v3;
  }
  return result;
}

void sub_100068B7C(uint64_t a1, uint64_t a2, int *a3)
{
  NSObject *v4;
  double v5;
  unint64_t v6;
  _QWORD *v7;
  void **v8;
  _QWORD *v9;
  char *v10;
  int v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  BOOL v23;
  _QWORD *v24;
  void **v25;
  _QWORD *v26;
  char *v27;
  int v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t *v40;
  void **v41;
  _QWORD *v42;
  char *v43;
  int v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  char *v53;
  _QWORD *v54;
  void **v55;
  _QWORD *v56;
  char *v57;
  int v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t *v70;
  void **v71;
  _QWORD *v72;
  char *v73;
  int v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  char *v83;
  _QWORD *v84;
  void **v85;
  _QWORD *v86;
  char *v87;
  int v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  void **v101;
  _QWORD *v102;
  char *v103;
  int v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  char *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  void **v117;
  _QWORD *v118;
  char *v119;
  int v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char *v127;
  char *v128;
  char *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  void **v149;
  _QWORD *v150;
  char *v151;
  int v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  _QWORD *v162;
  _QWORD *v163;
  uint64_t **i;
  unsigned int v165;
  uint64_t *j;
  uint64_t *v167;
  int v168;
  NSObject *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  __int128 *v176;
  uint64_t v177;
  char **v178;
  _QWORD *v179;
  char *v180;
  __int128 v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  char *v188;
  char *v189;
  char *v190;
  char *v191;
  __int128 v192;
  __int128 *v193;
  uint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  __int128 *v197;
  uint64_t v198;
  char **v199;
  _QWORD *v200;
  char *v201;
  __int128 v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  unint64_t v207;
  char *v208;
  char *v209;
  char *v210;
  char *v211;
  char *v212;
  __int128 v213;
  __int128 *v214;
  __int128 v215;
  _QWORD *v216;
  void **v217;
  _QWORD *v218;
  char *v219;
  int v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  unint64_t v226;
  char *v227;
  char *v228;
  char *v229;
  _QWORD *v230;
  _QWORD *v231;
  uint64_t *v232;
  void **v233;
  _QWORD *v234;
  char *v235;
  int v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  unint64_t v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  NSObject *v249;
  int v250;
  int v251;
  std::__shared_weak_count *v252;
  unint64_t *v253;
  unint64_t v254;
  NSObject *v255;
  int v256;
  int v257;
  int v258;
  int v259;
  int v260;
  double v261;
  double v262;
  int v263;
  double v264;
  double v265;
  int v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  const char *v270;
  char *v271;
  const char *v272;
  char *v273;
  int v274;
  int v275;
  int v276;
  int v277;
  int v278;
  double v279;
  double v280;
  int v281;
  double v282;
  double v283;
  int v284;
  const char *v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  int *v289;
  _BYTE v291[12];
  __int16 v292;
  _BYTE v293[18];
  _BYTE v294[10];
  __int16 v295;
  double v296;
  __int16 v297;
  int v298;
  __int16 v299;
  double v300;
  __int16 v301;
  double v302;
  __int16 v303;
  int v304;
  __int128 v305;
  __int128 v306;
  _BYTE buf[22];
  _BYTE v308[10];
  __int16 v309;
  double v310;
  __int16 v311;
  double v312;
  __int16 v313;
  int v314;
  __int16 v315;
  double v316;
  __int16 v317;
  double v318;
  __int16 v319;
  int v320;

  v289 = a3;
  *(double *)(a2 + 96) = sub_1001FCBB4() - *(double *)(a2 + 80);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v4 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    *(_DWORD *)&buf[4] = 0;
    *(_WORD *)&buf[8] = 2082;
    *(_QWORD *)&buf[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#gnssawd handleGnssSessionReport\"}", buf, 0x12u);
  }
  sub_100214420(a2);
  sub_100006908(v289);
  v5 = *(double *)(a2 + 96);
  *(_QWORD *)(a1 + 136) = (unint64_t)v5;
  v6 = *(_QWORD *)(a2 + 144);
  *(float *)&v5 = v5;
  *(_DWORD *)(a1 + 144) = (float)((float)((float)v6 / *(float *)&v5) * 100.0);
  *(_QWORD *)(a1 + 152) = v6;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 104);
  *(float32x4_t *)(a1 + 168) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(*(float64x2_t *)(a2 + 112)), *(float64x2_t *)(a2 + 128));
  v7 = *(_QWORD **)(a2 + 152);
  if (v7 != (_QWORD *)(a2 + 160))
  {
    v8 = (void **)(a1 + 208);
    v9 = (_QWORD *)(a1 + 224);
    v10 = *(char **)(a1 + 216);
    do
    {
      v11 = *((_DWORD *)v7 + 8);
      v12 = v7[5];
      if ((unint64_t)v10 >= *v9)
      {
        v13 = (char *)*v8;
        v14 = (v10 - (_BYTE *)*v8) >> 4;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 60)
          sub_100259694();
        v16 = *v9 - (_QWORD)v13;
        if (v16 >> 3 > v15)
          v15 = v16 >> 3;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
          v17 = 0xFFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
        {
          v18 = (char *)sub_10028E224(a1 + 224, v17);
          v13 = *(char **)(a1 + 208);
          v10 = *(char **)(a1 + 216);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[16 * v14];
        *(_DWORD *)v19 = v11;
        *((_QWORD *)v19 + 1) = v12;
        v20 = v19;
        if (v10 != v13)
        {
          do
          {
            *((_OWORD *)v20 - 1) = *((_OWORD *)v10 - 1);
            v20 -= 16;
            v10 -= 16;
          }
          while (v10 != v13);
          v13 = (char *)*v8;
        }
        v10 = v19 + 16;
        *(_QWORD *)(a1 + 208) = v20;
        *(_QWORD *)(a1 + 216) = v19 + 16;
        *(_QWORD *)(a1 + 224) = &v18[16 * v17];
        if (v13)
          operator delete(v13);
      }
      else
      {
        *(_DWORD *)v10 = v11;
        *((_QWORD *)v10 + 1) = v12;
        v10 += 16;
      }
      *(_QWORD *)(a1 + 216) = v10;
      v21 = (_QWORD *)v7[1];
      if (v21)
      {
        do
        {
          v22 = v21;
          v21 = (_QWORD *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          v22 = (_QWORD *)v7[2];
          v23 = *v22 == (_QWORD)v7;
          v7 = v22;
        }
        while (!v23);
      }
      v7 = v22;
    }
    while (v22 != (_QWORD *)(a2 + 160));
  }
  v24 = *(_QWORD **)(a2 + 176);
  if (v24 != (_QWORD *)(a2 + 184))
  {
    v25 = (void **)(a1 + 232);
    v26 = (_QWORD *)(a1 + 248);
    v27 = *(char **)(a1 + 240);
    do
    {
      v28 = *((_DWORD *)v24 + 8);
      v29 = v24[5];
      if ((unint64_t)v27 >= *v26)
      {
        v30 = (char *)*v25;
        v31 = (v27 - (_BYTE *)*v25) >> 4;
        v32 = v31 + 1;
        if ((unint64_t)(v31 + 1) >> 60)
          sub_100259694();
        v33 = *v26 - (_QWORD)v30;
        if (v33 >> 3 > v32)
          v32 = v33 >> 3;
        if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF0)
          v34 = 0xFFFFFFFFFFFFFFFLL;
        else
          v34 = v32;
        if (v34)
        {
          v35 = (char *)sub_10028E224(a1 + 248, v34);
          v30 = *(char **)(a1 + 232);
          v27 = *(char **)(a1 + 240);
        }
        else
        {
          v35 = 0;
        }
        v36 = &v35[16 * v31];
        *(_DWORD *)v36 = v28;
        *((_QWORD *)v36 + 1) = v29;
        v37 = v36;
        if (v27 != v30)
        {
          do
          {
            *((_OWORD *)v37 - 1) = *((_OWORD *)v27 - 1);
            v37 -= 16;
            v27 -= 16;
          }
          while (v27 != v30);
          v30 = (char *)*v25;
        }
        v27 = v36 + 16;
        *(_QWORD *)(a1 + 232) = v37;
        *(_QWORD *)(a1 + 240) = v36 + 16;
        *(_QWORD *)(a1 + 248) = &v35[16 * v34];
        if (v30)
          operator delete(v30);
      }
      else
      {
        *(_DWORD *)v27 = v28;
        *((_QWORD *)v27 + 1) = v29;
        v27 += 16;
      }
      *(_QWORD *)(a1 + 240) = v27;
      v38 = (_QWORD *)v24[1];
      if (v38)
      {
        do
        {
          v39 = v38;
          v38 = (_QWORD *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          v39 = (_QWORD *)v24[2];
          v23 = *v39 == (_QWORD)v24;
          v24 = v39;
        }
        while (!v23);
      }
      v24 = v39;
    }
    while (v39 != (_QWORD *)(a2 + 184));
  }
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 200);
  v40 = *(uint64_t **)(a2 + 224);
  if (v40)
  {
    v41 = (void **)(a1 + 184);
    v42 = (_QWORD *)(a1 + 200);
    v43 = *(char **)(a1 + 192);
    do
    {
      v44 = *((_DWORD *)v40 + 4);
      v45 = v40[3];
      if ((unint64_t)v43 >= *v42)
      {
        v46 = (char *)*v41;
        v47 = (v43 - (_BYTE *)*v41) >> 4;
        v48 = v47 + 1;
        if ((unint64_t)(v47 + 1) >> 60)
          sub_100259694();
        v49 = *v42 - (_QWORD)v46;
        if (v49 >> 3 > v48)
          v48 = v49 >> 3;
        if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
          v50 = 0xFFFFFFFFFFFFFFFLL;
        else
          v50 = v48;
        if (v50)
        {
          v51 = (char *)sub_10028E224(a1 + 200, v50);
          v46 = *(char **)(a1 + 184);
          v43 = *(char **)(a1 + 192);
        }
        else
        {
          v51 = 0;
        }
        v52 = &v51[16 * v47];
        *(_DWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        v53 = v52;
        if (v43 != v46)
        {
          do
          {
            *((_OWORD *)v53 - 1) = *((_OWORD *)v43 - 1);
            v53 -= 16;
            v43 -= 16;
          }
          while (v43 != v46);
          v46 = (char *)*v41;
        }
        v43 = v52 + 16;
        *(_QWORD *)(a1 + 184) = v53;
        *(_QWORD *)(a1 + 192) = v52 + 16;
        *(_QWORD *)(a1 + 200) = &v51[16 * v50];
        if (v46)
          operator delete(v46);
      }
      else
      {
        *(_DWORD *)v43 = v44;
        *((_QWORD *)v43 + 1) = v45;
        v43 += 16;
      }
      *(_QWORD *)(a1 + 192) = v43;
      v40 = (uint64_t *)*v40;
    }
    while (v40);
  }
  v54 = *(_QWORD **)(a2 + 248);
  if (v54 != (_QWORD *)(a2 + 256))
  {
    v55 = (void **)(a1 + 264);
    v56 = (_QWORD *)(a1 + 280);
    v57 = *(char **)(a1 + 272);
    do
    {
      v58 = *((_DWORD *)v54 + 8);
      v59 = v54[5];
      if ((unint64_t)v57 >= *v56)
      {
        v60 = (char *)*v55;
        v61 = (v57 - (_BYTE *)*v55) >> 4;
        v62 = v61 + 1;
        if ((unint64_t)(v61 + 1) >> 60)
          sub_100259694();
        v63 = *v56 - (_QWORD)v60;
        if (v63 >> 3 > v62)
          v62 = v63 >> 3;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v64 = 0xFFFFFFFFFFFFFFFLL;
        else
          v64 = v62;
        if (v64)
        {
          v65 = (char *)sub_10028E224(a1 + 280, v64);
          v60 = *(char **)(a1 + 264);
          v57 = *(char **)(a1 + 272);
        }
        else
        {
          v65 = 0;
        }
        v66 = &v65[16 * v61];
        *(_DWORD *)v66 = v58;
        *((_QWORD *)v66 + 1) = v59;
        v67 = v66;
        if (v57 != v60)
        {
          do
          {
            *((_OWORD *)v67 - 1) = *((_OWORD *)v57 - 1);
            v67 -= 16;
            v57 -= 16;
          }
          while (v57 != v60);
          v60 = (char *)*v55;
        }
        v57 = v66 + 16;
        *(_QWORD *)(a1 + 264) = v67;
        *(_QWORD *)(a1 + 272) = v66 + 16;
        *(_QWORD *)(a1 + 280) = &v65[16 * v64];
        if (v60)
          operator delete(v60);
      }
      else
      {
        *(_DWORD *)v57 = v58;
        *((_QWORD *)v57 + 1) = v59;
        v57 += 16;
      }
      *(_QWORD *)(a1 + 272) = v57;
      v68 = (_QWORD *)v54[1];
      if (v68)
      {
        do
        {
          v69 = v68;
          v68 = (_QWORD *)*v68;
        }
        while (v68);
      }
      else
      {
        do
        {
          v69 = (_QWORD *)v54[2];
          v23 = *v69 == (_QWORD)v54;
          v54 = v69;
        }
        while (!v23);
      }
      v54 = v69;
    }
    while (v69 != (_QWORD *)(a2 + 256));
  }
  v70 = *(uint64_t **)(a2 + 288);
  if (v70)
  {
    v71 = (void **)(a1 + 288);
    v72 = (_QWORD *)(a1 + 304);
    v73 = *(char **)(a1 + 296);
    do
    {
      v74 = *((_DWORD *)v70 + 4);
      v75 = v70[3];
      if ((unint64_t)v73 >= *v72)
      {
        v76 = (char *)*v71;
        v77 = (v73 - (_BYTE *)*v71) >> 4;
        v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 60)
          sub_100259694();
        v79 = *v72 - (_QWORD)v76;
        if (v79 >> 3 > v78)
          v78 = v79 >> 3;
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF0)
          v80 = 0xFFFFFFFFFFFFFFFLL;
        else
          v80 = v78;
        if (v80)
        {
          v81 = (char *)sub_10028E224(a1 + 304, v80);
          v76 = *(char **)(a1 + 288);
          v73 = *(char **)(a1 + 296);
        }
        else
        {
          v81 = 0;
        }
        v82 = &v81[16 * v77];
        *(_DWORD *)v82 = v74;
        *((_QWORD *)v82 + 1) = v75;
        v83 = v82;
        if (v73 != v76)
        {
          do
          {
            *((_OWORD *)v83 - 1) = *((_OWORD *)v73 - 1);
            v83 -= 16;
            v73 -= 16;
          }
          while (v73 != v76);
          v76 = (char *)*v71;
        }
        v73 = v82 + 16;
        *(_QWORD *)(a1 + 288) = v83;
        *(_QWORD *)(a1 + 296) = v82 + 16;
        *(_QWORD *)(a1 + 304) = &v81[16 * v80];
        if (v76)
          operator delete(v76);
      }
      else
      {
        *(_DWORD *)v73 = v74;
        *((_QWORD *)v73 + 1) = v75;
        v73 += 16;
      }
      *(_QWORD *)(a1 + 296) = v73;
      v70 = (uint64_t *)*v70;
    }
    while (v70);
  }
  v84 = *(_QWORD **)(a2 + 352);
  if (v84 != (_QWORD *)(a2 + 360))
  {
    v85 = (void **)(a1 + 400);
    v86 = (_QWORD *)(a1 + 416);
    v87 = *(char **)(a1 + 408);
    do
    {
      v88 = *((_DWORD *)v84 + 8);
      v89 = v84[5];
      if ((unint64_t)v87 >= *v86)
      {
        v90 = (char *)*v85;
        v91 = (v87 - (_BYTE *)*v85) >> 4;
        v92 = v91 + 1;
        if ((unint64_t)(v91 + 1) >> 60)
          sub_100259694();
        v93 = *v86 - (_QWORD)v90;
        if (v93 >> 3 > v92)
          v92 = v93 >> 3;
        if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFF0)
          v94 = 0xFFFFFFFFFFFFFFFLL;
        else
          v94 = v92;
        if (v94)
        {
          v95 = (char *)sub_10028E224(a1 + 416, v94);
          v90 = *(char **)(a1 + 400);
          v87 = *(char **)(a1 + 408);
        }
        else
        {
          v95 = 0;
        }
        v96 = &v95[16 * v91];
        *(_DWORD *)v96 = v88;
        *((_QWORD *)v96 + 1) = v89;
        v97 = v96;
        if (v87 != v90)
        {
          do
          {
            *((_OWORD *)v97 - 1) = *((_OWORD *)v87 - 1);
            v97 -= 16;
            v87 -= 16;
          }
          while (v87 != v90);
          v90 = (char *)*v85;
        }
        v87 = v96 + 16;
        *(_QWORD *)(a1 + 400) = v97;
        *(_QWORD *)(a1 + 408) = v96 + 16;
        *(_QWORD *)(a1 + 416) = &v95[16 * v94];
        if (v90)
          operator delete(v90);
      }
      else
      {
        *(_DWORD *)v87 = v88;
        *((_QWORD *)v87 + 1) = v89;
        v87 += 16;
      }
      *(_QWORD *)(a1 + 408) = v87;
      v98 = (_QWORD *)v84[1];
      if (v98)
      {
        do
        {
          v99 = v98;
          v98 = (_QWORD *)*v98;
        }
        while (v98);
      }
      else
      {
        do
        {
          v99 = (_QWORD *)v84[2];
          v23 = *v99 == (_QWORD)v84;
          v84 = v99;
        }
        while (!v23);
      }
      v84 = v99;
    }
    while (v99 != (_QWORD *)(a2 + 360));
  }
  v100 = *(_QWORD **)(a2 + 376);
  if (v100 != (_QWORD *)(a2 + 384))
  {
    v101 = (void **)(a1 + 424);
    v102 = (_QWORD *)(a1 + 440);
    v103 = *(char **)(a1 + 432);
    do
    {
      v104 = *((_DWORD *)v100 + 8);
      v105 = v100[5];
      if ((unint64_t)v103 >= *v102)
      {
        v106 = (char *)*v101;
        v107 = (v103 - (_BYTE *)*v101) >> 4;
        v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 60)
          sub_100259694();
        v109 = *v102 - (_QWORD)v106;
        if (v109 >> 3 > v108)
          v108 = v109 >> 3;
        if ((unint64_t)v109 >= 0x7FFFFFFFFFFFFFF0)
          v110 = 0xFFFFFFFFFFFFFFFLL;
        else
          v110 = v108;
        if (v110)
        {
          v111 = (char *)sub_10028E224(a1 + 440, v110);
          v106 = *(char **)(a1 + 424);
          v103 = *(char **)(a1 + 432);
        }
        else
        {
          v111 = 0;
        }
        v112 = &v111[16 * v107];
        *(_DWORD *)v112 = v104;
        *((_QWORD *)v112 + 1) = v105;
        v113 = v112;
        if (v103 != v106)
        {
          do
          {
            *((_OWORD *)v113 - 1) = *((_OWORD *)v103 - 1);
            v113 -= 16;
            v103 -= 16;
          }
          while (v103 != v106);
          v106 = (char *)*v101;
        }
        v103 = v112 + 16;
        *(_QWORD *)(a1 + 424) = v113;
        *(_QWORD *)(a1 + 432) = v112 + 16;
        *(_QWORD *)(a1 + 440) = &v111[16 * v110];
        if (v106)
          operator delete(v106);
      }
      else
      {
        *(_DWORD *)v103 = v104;
        *((_QWORD *)v103 + 1) = v105;
        v103 += 16;
      }
      *(_QWORD *)(a1 + 432) = v103;
      v114 = (_QWORD *)v100[1];
      if (v114)
      {
        do
        {
          v115 = v114;
          v114 = (_QWORD *)*v114;
        }
        while (v114);
      }
      else
      {
        do
        {
          v115 = (_QWORD *)v100[2];
          v23 = *v115 == (_QWORD)v100;
          v100 = v115;
        }
        while (!v23);
      }
      v100 = v115;
    }
    while (v115 != (_QWORD *)(a2 + 384));
  }
  v116 = *(_QWORD **)(a2 + 400);
  if (v116 != (_QWORD *)(a2 + 408))
  {
    v117 = (void **)(a1 + 448);
    v118 = (_QWORD *)(a1 + 464);
    v119 = *(char **)(a1 + 456);
    do
    {
      v120 = *((_DWORD *)v116 + 8);
      v121 = v116[5];
      if ((unint64_t)v119 >= *v118)
      {
        v122 = (char *)*v117;
        v123 = (v119 - (_BYTE *)*v117) >> 4;
        v124 = v123 + 1;
        if ((unint64_t)(v123 + 1) >> 60)
          sub_100259694();
        v125 = *v118 - (_QWORD)v122;
        if (v125 >> 3 > v124)
          v124 = v125 >> 3;
        if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0)
          v126 = 0xFFFFFFFFFFFFFFFLL;
        else
          v126 = v124;
        if (v126)
        {
          v127 = (char *)sub_10028E224(a1 + 464, v126);
          v122 = *(char **)(a1 + 448);
          v119 = *(char **)(a1 + 456);
        }
        else
        {
          v127 = 0;
        }
        v128 = &v127[16 * v123];
        *(_DWORD *)v128 = v120;
        *((_QWORD *)v128 + 1) = v121;
        v129 = v128;
        if (v119 != v122)
        {
          do
          {
            *((_OWORD *)v129 - 1) = *((_OWORD *)v119 - 1);
            v129 -= 16;
            v119 -= 16;
          }
          while (v119 != v122);
          v122 = (char *)*v117;
        }
        v119 = v128 + 16;
        *(_QWORD *)(a1 + 448) = v129;
        *(_QWORD *)(a1 + 456) = v128 + 16;
        *(_QWORD *)(a1 + 464) = &v127[16 * v126];
        if (v122)
          operator delete(v122);
      }
      else
      {
        *(_DWORD *)v119 = v120;
        *((_QWORD *)v119 + 1) = v121;
        v119 += 16;
      }
      *(_QWORD *)(a1 + 456) = v119;
      v130 = (_QWORD *)v116[1];
      if (v130)
      {
        do
        {
          v131 = v130;
          v130 = (_QWORD *)*v130;
        }
        while (v130);
      }
      else
      {
        do
        {
          v131 = (_QWORD *)v116[2];
          v23 = *v131 == (_QWORD)v116;
          v116 = v131;
        }
        while (!v23);
      }
      v116 = v131;
    }
    while (v131 != (_QWORD *)(a2 + 408));
  }
  v132 = *(_QWORD **)(a2 + 472);
  if (v132 != (_QWORD *)(a2 + 480))
  {
    v133 = (_QWORD *)(a1 + 472);
    v134 = (_QWORD *)(a1 + 488);
    v135 = *(char **)(a1 + 480);
    do
    {
      if ((unint64_t)v135 >= *v134)
      {
        v136 = (uint64_t)&v135[-*v133] >> 4;
        if ((unint64_t)(v136 + 1) >> 60)
          sub_100259694();
        v137 = *v134 - *v133;
        v138 = v137 >> 3;
        if (v137 >> 3 <= (unint64_t)(v136 + 1))
          v138 = v136 + 1;
        if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0)
          v139 = 0xFFFFFFFFFFFFFFFLL;
        else
          v139 = v138;
        v140 = (char *)sub_10028E224(a1 + 488, v139);
        v142 = &v140[16 * v136];
        *(_DWORD *)v142 = *((_DWORD *)v132 + 8);
        *((_QWORD *)v142 + 1) = v132[5];
        v144 = *(char **)(a1 + 472);
        v143 = *(char **)(a1 + 480);
        v145 = v142;
        if (v143 != v144)
        {
          do
          {
            *((_OWORD *)v145 - 1) = *((_OWORD *)v143 - 1);
            v145 -= 16;
            v143 -= 16;
          }
          while (v143 != v144);
          v143 = (char *)*v133;
        }
        v135 = v142 + 16;
        *(_QWORD *)(a1 + 472) = v145;
        *(_QWORD *)(a1 + 480) = v142 + 16;
        *(_QWORD *)(a1 + 488) = &v140[16 * v141];
        if (v143)
          operator delete(v143);
      }
      else
      {
        *(_DWORD *)v135 = *((_DWORD *)v132 + 8);
        *((_QWORD *)v135 + 1) = v132[5];
        v135 += 16;
      }
      *(_QWORD *)(a1 + 480) = v135;
      v146 = (_QWORD *)v132[1];
      if (v146)
      {
        do
        {
          v147 = v146;
          v146 = (_QWORD *)*v146;
        }
        while (v146);
      }
      else
      {
        do
        {
          v147 = (_QWORD *)v132[2];
          v23 = *v147 == (_QWORD)v132;
          v132 = v147;
        }
        while (!v23);
      }
      v132 = v147;
    }
    while (v147 != (_QWORD *)(a2 + 480));
  }
  v148 = *(_QWORD **)(a2 + 312);
  if (v148 != (_QWORD *)(a2 + 320))
  {
    v149 = (void **)(a1 + 496);
    v150 = (_QWORD *)(a1 + 512);
    v151 = *(char **)(a1 + 504);
    do
    {
      v152 = *((_DWORD *)v148 + 8);
      v153 = v148[5];
      if ((unint64_t)v151 >= *v150)
      {
        v154 = (char *)*v149;
        v155 = (v151 - (_BYTE *)*v149) >> 4;
        v156 = v155 + 1;
        if ((unint64_t)(v155 + 1) >> 60)
          sub_100259694();
        v157 = *v150 - (_QWORD)v154;
        if (v157 >> 3 > v156)
          v156 = v157 >> 3;
        if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF0)
          v158 = 0xFFFFFFFFFFFFFFFLL;
        else
          v158 = v156;
        if (v158)
        {
          v159 = (char *)sub_10028E224(a1 + 512, v158);
          v154 = *(char **)(a1 + 496);
          v151 = *(char **)(a1 + 504);
        }
        else
        {
          v159 = 0;
        }
        v160 = &v159[16 * v155];
        *(_DWORD *)v160 = v152;
        *((_QWORD *)v160 + 1) = v153;
        v161 = v160;
        if (v151 != v154)
        {
          do
          {
            *((_OWORD *)v161 - 1) = *((_OWORD *)v151 - 1);
            v161 -= 16;
            v151 -= 16;
          }
          while (v151 != v154);
          v154 = (char *)*v149;
        }
        v151 = v160 + 16;
        *(_QWORD *)(a1 + 496) = v161;
        *(_QWORD *)(a1 + 504) = v160 + 16;
        *(_QWORD *)(a1 + 512) = &v159[16 * v158];
        if (v154)
          operator delete(v154);
      }
      else
      {
        *(_DWORD *)v151 = v152;
        *((_QWORD *)v151 + 1) = v153;
        v151 += 16;
      }
      *(_QWORD *)(a1 + 504) = v151;
      v162 = (_QWORD *)v148[1];
      if (v162)
      {
        do
        {
          v163 = v162;
          v162 = (_QWORD *)*v162;
        }
        while (v162);
      }
      else
      {
        do
        {
          v163 = (_QWORD *)v148[2];
          v23 = *v163 == (_QWORD)v148;
          v148 = v163;
        }
        while (!v23);
      }
      v148 = v163;
    }
    while (v163 != (_QWORD *)(a2 + 320));
  }
  for (i = *(uint64_t ***)(a2 + 440); i; i = (uint64_t **)*i)
  {
    v165 = *((unsigned __int8 *)i + 16) - 1;
    if (v165 <= 9 && ((0x3FDu >> v165) & 1) != 0)
    {
      *(_QWORD *)v291 = qword_101CDBB00[(char)v165];
      for (j = i[5]; j; j = (uint64_t *)*j)
      {
        *(_QWORD *)buf = v291;
        v167 = sub_10006A848(a1 + 360, (int *)v291, (uint64_t)&unk_101B9EB60, (_DWORD **)buf);
        v168 = *((_DWORD *)j + 5);
        *(_QWORD *)buf = j + 2;
        *((_DWORD *)sub_10006A62C((uint64_t)(v167 + 3), (int *)j + 4, (uint64_t)&unk_101B9EB60, (_DWORD **)buf) + 5) = v168;
      }
    }
  }
  *(_OWORD *)(a1 + 520) = *(_OWORD *)(a2 + 496);
  *(_OWORD *)(a1 + 536) = *(_OWORD *)(a2 + 512);
  *(_QWORD *)(a1 + 552) = *(_QWORD *)(a2 + 528);
  *(_WORD *)(a1 + 560) = *(_WORD *)(a2 + 640);
  *(_QWORD *)(a1 + 568) = *(_QWORD *)(a2 + 536);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)(a2 + 544);
  *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 560);
  *(_OWORD *)(a1 + 608) = *(_OWORD *)(a2 + 576);
  *(_OWORD *)(a1 + 624) = *(_OWORD *)(a2 + 592);
  *(_OWORD *)(a1 + 640) = *(_OWORD *)(a2 + 608);
  *(_OWORD *)(a1 + 656) = *(_OWORD *)(a2 + 624);
  *(_OWORD *)(a1 + 672) = *(_OWORD *)(a2 + 648);
  *(_OWORD *)(a1 + 688) = *(_OWORD *)(a2 + 664);
  *(_OWORD *)(a1 + 704) = *(_OWORD *)(a2 + 680);
  *(_OWORD *)(a1 + 720) = *(_OWORD *)(a2 + 696);
  *(_OWORD *)(a1 + 736) = *(_OWORD *)(a2 + 712);
  *(_OWORD *)(a1 + 752) = *(_OWORD *)(a2 + 728);
  *(_OWORD *)(a1 + 768) = *(_OWORD *)(a2 + 744);
  *(_OWORD *)(a1 + 784) = *(_OWORD *)(a2 + 760);
  *(_OWORD *)(a1 + 800) = *(_OWORD *)(a2 + 776);
  *(_QWORD *)(a1 + 832) = *(_QWORD *)(a2 + 808);
  v288 = a2 + 648;
  *(_OWORD *)(a1 + 816) = *(_OWORD *)(a2 + 792);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v169 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v170 = *(_QWORD *)(a1 + 816);
    v171 = *(_QWORD *)(a1 + 832);
    v172 = *(_QWORD *)(a1 + 824);
    *(_DWORD *)buf = 134218496;
    *(_QWORD *)&buf[4] = v170;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v171;
    *(_WORD *)v308 = 2048;
    *(_QWORD *)&v308[2] = v172;
    _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEBUG, "#gnssca,handleGnssSessionReport,displayOnCount,%llu,batterSaverCount,%llu,reachableCount,%llu", buf, 0x20u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v267 = *(_QWORD *)(a1 + 816);
    v268 = *(_QWORD *)(a1 + 832);
    v269 = *(_QWORD *)(a1 + 824);
    *(_DWORD *)v291 = 134218496;
    *(_QWORD *)&v291[4] = v267;
    v292 = 2048;
    *(_QWORD *)v293 = v268;
    *(_WORD *)&v293[8] = 2048;
    *(_QWORD *)&v293[10] = v269;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssca,handleGnssSessionReport,displayOnCount,%llu,batterSaverCount,%llu,reachableCount,%llu", v291, 32, v288);
    v271 = (char *)v270;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v270);
    if (v271 != buf)
      free(v271);
  }
  *(_BYTE *)(a1 + 872) = *(_BYTE *)(a2 + 848);
  v305 = 0u;
  v306 = 0u;
  v173 = *(_QWORD *)(a2 + 864);
  if (*(_QWORD *)(a2 + 872) != v173)
  {
    v174 = *(_QWORD *)(a2 + 888);
    v175 = (_QWORD *)(v173 + 8 * (v174 >> 7));
    v176 = (__int128 *)(*v175 + 32 * (v174 & 0x7F));
    v177 = *(_QWORD *)(v173 + (((*(_QWORD *)(a2 + 896) + v174) >> 4) & 0xFFFFFFFFFFFFFF8))
         + 32 * ((*(_QWORD *)(a2 + 896) + v174) & 0x7F);
    if (v176 != (__int128 *)v177)
    {
      v178 = (char **)(a1 + 880);
      v179 = (_QWORD *)(a1 + 896);
      v180 = *(char **)(a1 + 888);
      do
      {
        v181 = v176[1];
        v305 = *v176;
        v306 = v181;
        if ((unint64_t)v180 >= *v179)
        {
          v183 = (v180 - *v178) >> 5;
          if ((unint64_t)(v183 + 1) >> 59)
            sub_100259694();
          v184 = *v179 - (_QWORD)*v178;
          v185 = v184 >> 4;
          if (v184 >> 4 <= (unint64_t)(v183 + 1))
            v185 = v183 + 1;
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFE0)
            v186 = 0x7FFFFFFFFFFFFFFLL;
          else
            v186 = v185;
          if (v186)
            v187 = (char *)sub_10025BA00(a1 + 896, v186);
          else
            v187 = 0;
          v188 = &v187[32 * v183];
          *(_OWORD *)v188 = v305;
          *((_OWORD *)v188 + 1) = v306;
          v189 = *(char **)(a1 + 888);
          v190 = *(char **)(a1 + 880);
          v191 = v188;
          if (v189 != v190)
          {
            do
            {
              v192 = *((_OWORD *)v189 - 1);
              *((_OWORD *)v191 - 2) = *((_OWORD *)v189 - 2);
              *((_OWORD *)v191 - 1) = v192;
              v191 -= 32;
              v189 -= 32;
            }
            while (v189 != v190);
            v189 = *v178;
          }
          *(_QWORD *)(a1 + 880) = v191;
          v180 = v188 + 32;
          *(_QWORD *)(a1 + 888) = v188 + 32;
          *(_QWORD *)(a1 + 896) = &v187[32 * v186];
          if (v189)
            operator delete(v189);
        }
        else
        {
          v182 = v176[1];
          *(_OWORD *)v180 = *v176;
          *((_OWORD *)v180 + 1) = v182;
          v180 += 32;
        }
        *(_QWORD *)(a1 + 888) = v180;
        v176 += 2;
        if ((__int128 *)((char *)v176 - *v175) == (__int128 *)4096)
        {
          v193 = (__int128 *)v175[1];
          ++v175;
          v176 = v193;
        }
      }
      while (v176 != (__int128 *)v177);
    }
  }
  *(_QWORD *)(a1 + 928) = *(_QWORD *)(a2 + 952);
  *(_BYTE *)(a1 + 992) = *(_BYTE *)(a2 + 1056);
  *(_DWORD *)(a1 + 996) = *(_DWORD *)(a2 + 1060);
  *(_BYTE *)(a1 + 873) = *(_BYTE *)(a2 + 849);
  v194 = *(_QWORD *)(a2 + 912);
  if (*(_QWORD *)(a2 + 920) != v194)
  {
    v195 = *(_QWORD *)(a2 + 936);
    v196 = (_QWORD *)(v194 + 8 * (v195 >> 7));
    v197 = (__int128 *)(*v196 + 32 * (v195 & 0x7F));
    v198 = *(_QWORD *)(v194 + (((*(_QWORD *)(a2 + 944) + v195) >> 4) & 0xFFFFFFFFFFFFFF8))
         + 32 * ((*(_QWORD *)(a2 + 944) + v195) & 0x7F);
    if (v197 != (__int128 *)v198)
    {
      v199 = (char **)(a1 + 904);
      v200 = (_QWORD *)(a1 + 920);
      v201 = *(char **)(a1 + 912);
      do
      {
        v202 = v197[1];
        v305 = *v197;
        v306 = v202;
        if ((unint64_t)v201 >= *v200)
        {
          v204 = (v201 - *v199) >> 5;
          if ((unint64_t)(v204 + 1) >> 59)
            sub_100259694();
          v205 = *v200 - (_QWORD)*v199;
          v206 = v205 >> 4;
          if (v205 >> 4 <= (unint64_t)(v204 + 1))
            v206 = v204 + 1;
          if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFE0)
            v207 = 0x7FFFFFFFFFFFFFFLL;
          else
            v207 = v206;
          if (v207)
            v208 = (char *)sub_10025BA00(a1 + 920, v207);
          else
            v208 = 0;
          v209 = &v208[32 * v204];
          *(_OWORD *)v209 = v305;
          *((_OWORD *)v209 + 1) = v306;
          v210 = *(char **)(a1 + 912);
          v211 = *(char **)(a1 + 904);
          v212 = v209;
          if (v210 != v211)
          {
            do
            {
              v213 = *((_OWORD *)v210 - 1);
              *((_OWORD *)v212 - 2) = *((_OWORD *)v210 - 2);
              *((_OWORD *)v212 - 1) = v213;
              v212 -= 32;
              v210 -= 32;
            }
            while (v210 != v211);
            v210 = *v199;
          }
          *(_QWORD *)(a1 + 904) = v212;
          v201 = v209 + 32;
          *(_QWORD *)(a1 + 912) = v209 + 32;
          *(_QWORD *)(a1 + 920) = &v208[32 * v207];
          if (v210)
            operator delete(v210);
        }
        else
        {
          v203 = v197[1];
          *(_OWORD *)v201 = *v197;
          *((_OWORD *)v201 + 1) = v203;
          v201 += 32;
        }
        *(_QWORD *)(a1 + 912) = v201;
        v197 += 2;
        if ((__int128 *)((char *)v197 - *v196) == (__int128 *)4096)
        {
          v214 = (__int128 *)v196[1];
          ++v196;
          v197 = v214;
        }
      }
      while (v197 != (__int128 *)v198);
    }
  }
  *(_QWORD *)(a1 + 936) = *(_QWORD *)(a2 + 960);
  *(_WORD *)(a1 + 1068) = *(_WORD *)(a2 + 1112);
  *(_DWORD *)(a1 + 1072) = *(_DWORD *)(a2 + 1116);
  *(_BYTE *)(a1 + 1070) = *(_BYTE *)(a2 + 1114);
  v215 = *(_OWORD *)(a2 + 1120);
  *(_OWORD *)(a1 + 1092) = *(_OWORD *)(v288 + 512);
  *((_QWORD *)&v215 + 1) = *(_QWORD *)(a2 + 1152);
  *(_OWORD *)(a1 + 1076) = v215;
  v216 = *(_QWORD **)(a2 + 976);
  if (v216 != (_QWORD *)(a2 + 984))
  {
    v217 = (void **)(a1 + 944);
    v218 = (_QWORD *)(a1 + 960);
    v219 = *(char **)(a1 + 952);
    do
    {
      v220 = *((_DWORD *)v216 + 8);
      v221 = v216[5];
      if ((unint64_t)v219 >= *v218)
      {
        v222 = (char *)*v217;
        v223 = (v219 - (_BYTE *)*v217) >> 4;
        v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 60)
          sub_100259694();
        v225 = *v218 - (_QWORD)v222;
        if (v225 >> 3 > v224)
          v224 = v225 >> 3;
        if ((unint64_t)v225 >= 0x7FFFFFFFFFFFFFF0)
          v226 = 0xFFFFFFFFFFFFFFFLL;
        else
          v226 = v224;
        if (v226)
        {
          v227 = (char *)sub_10028E224(a1 + 960, v226);
          v219 = *(char **)(a1 + 952);
          v222 = *(char **)(a1 + 944);
        }
        else
        {
          v227 = 0;
        }
        v228 = &v227[16 * v223];
        *(_DWORD *)v228 = v220;
        *((_QWORD *)v228 + 1) = v221;
        v229 = v228;
        if (v219 != v222)
        {
          do
          {
            *((_OWORD *)v229 - 1) = *((_OWORD *)v219 - 1);
            v229 -= 16;
            v219 -= 16;
          }
          while (v219 != v222);
          v222 = (char *)*v217;
        }
        *(_QWORD *)(a1 + 944) = v229;
        v219 = v228 + 16;
        *(_QWORD *)(a1 + 952) = v228 + 16;
        *(_QWORD *)(a1 + 960) = &v227[16 * v226];
        if (v222)
          operator delete(v222);
      }
      else
      {
        *(_DWORD *)v219 = v220;
        *((_QWORD *)v219 + 1) = v221;
        v219 += 16;
      }
      *(_QWORD *)(a1 + 952) = v219;
      v230 = (_QWORD *)v216[1];
      if (v230)
      {
        do
        {
          v231 = v230;
          v230 = (_QWORD *)*v230;
        }
        while (v230);
      }
      else
      {
        do
        {
          v231 = (_QWORD *)v216[2];
          v23 = *v231 == (_QWORD)v216;
          v216 = v231;
        }
        while (!v23);
      }
      v216 = v231;
    }
    while (v231 != (_QWORD *)(a2 + 984));
  }
  v232 = *(uint64_t **)(a2 + 1016);
  if (v232)
  {
    v233 = (void **)(a1 + 968);
    v234 = (_QWORD *)(a1 + 984);
    v235 = *(char **)(a1 + 976);
    do
    {
      v236 = *((_DWORD *)v232 + 4);
      v237 = v232[3];
      if ((unint64_t)v235 >= *v234)
      {
        v238 = (char *)*v233;
        v239 = (v235 - (_BYTE *)*v233) >> 4;
        v240 = v239 + 1;
        if ((unint64_t)(v239 + 1) >> 60)
          sub_100259694();
        v241 = *v234 - (_QWORD)v238;
        if (v241 >> 3 > v240)
          v240 = v241 >> 3;
        if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFF0)
          v242 = 0xFFFFFFFFFFFFFFFLL;
        else
          v242 = v240;
        if (v242)
        {
          v243 = (char *)sub_10028E224(a1 + 984, v242);
          v235 = *(char **)(a1 + 976);
          v238 = *(char **)(a1 + 968);
        }
        else
        {
          v243 = 0;
        }
        v244 = &v243[16 * v239];
        *(_DWORD *)v244 = v236;
        *((_QWORD *)v244 + 1) = v237;
        v245 = v244;
        if (v235 != v238)
        {
          do
          {
            *((_OWORD *)v245 - 1) = *((_OWORD *)v235 - 1);
            v245 -= 16;
            v235 -= 16;
          }
          while (v235 != v238);
          v238 = (char *)*v233;
        }
        *(_QWORD *)(a1 + 968) = v245;
        v235 = v244 + 16;
        *(_QWORD *)(a1 + 976) = v244 + 16;
        *(_QWORD *)(a1 + 984) = &v243[16 * v242];
        if (v238)
          operator delete(v238);
      }
      else
      {
        *(_DWORD *)v235 = v236;
        *((_QWORD *)v235 + 1) = v237;
        v235 += 16;
      }
      *(_QWORD *)(a1 + 976) = v235;
      v232 = (uint64_t *)*v232;
    }
    while (v232);
  }
  *(_DWORD *)(a1 + 1008) = *(_DWORD *)(a2 + 1072);
  *(_QWORD *)(a1 + 1000) = *(_QWORD *)(a2 + 1064);
  *(_QWORD *)(a1 + 1016) = *(_QWORD *)(a2 + 1080);
  *(_BYTE *)(a1 + 1024) = *(_BYTE *)(a2 + 1088);
  v246 = *(_OWORD *)a2;
  v247 = *(_OWORD *)(a2 + 16);
  v248 = *(_OWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 88) = v248;
  *(_OWORD *)(a1 + 72) = v247;
  *(_OWORD *)(a1 + 56) = v246;
  if (a1 + 56 != a2)
    sub_1002108FC((uint64_t **)(a1 + 112), *(_QWORD **)(a2 + 56), (_QWORD *)(a2 + 64));
  *(_DWORD *)(a1 + 1028) = *(_DWORD *)(a1 + 2328);
  *(_BYTE *)(a1 + 2400) = 0;
  if (!*(_BYTE *)(a1 + 2540) || *(_DWORD *)(a1 + 2560) >= *(_DWORD *)(a1 + 2496))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v249 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Collect Data if was not already set", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CE050);
      *(_WORD *)v291 = 0;
      LODWORD(v287) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,Collect Data if was not already set", v291, v287);
      v273 = (char *)v272;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v272);
      if (v273 != buf)
        free(v273);
    }
    sub_10021B038(a1);
  }
  *(_OWORD *)(a1 + 840) = *(_OWORD *)(a1 + 2500);
  sub_10021B824(a1, *(_DWORD *)(a1 + 2472));
  *(_QWORD *)(a1 + 860) = *(_QWORD *)(a1 + 2476);
  *(_DWORD *)(a1 + 868) = *(_DWORD *)(a1 + 2484);
  *(int32x2_t *)(a1 + 1036) = vrev64_s32(vcvt_s32_f32(*(float32x2_t *)(a1 + 2488)));
  *(_DWORD *)(a1 + 1044) = *(_DWORD *)(a1 + 2496);
  *(_OWORD *)(a1 + 1048) = *(_OWORD *)(v288 + 444);
  *(_DWORD *)(a1 + 1064) = *(_DWORD *)(a2 + 1108);
  sub_100024134(a1, a2);
  sub_1001E4804(buf);
  v291[0] = 0;
  v250 = sub_1001E4874(*(uint64_t *)buf, "EnableGnssAwdVerboseLogging", v291);
  if (v291[0])
    v251 = v250;
  else
    v251 = 0;
  v252 = *(std::__shared_weak_count **)&buf[8];
  if (!*(_QWORD *)&buf[8])
    goto LABEL_347;
  v253 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
  do
    v254 = __ldaxr(v253);
  while (__stlxr(v254 - 1, v253));
  if (!v254)
  {
    ((void (*)(std::__shared_weak_count *))v252->__on_zero_shared)(v252);
    std::__shared_weak_count::__release_weak(v252);
    if (!v251)
      goto LABEL_353;
  }
  else
  {
LABEL_347:
    if (!v251)
      goto LABEL_353;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_1021CE050);
  v255 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v256 = *(_DWORD *)(a1 + 2500);
    v257 = *(_DWORD *)(a1 + 2504);
    v258 = *(_DWORD *)(a1 + 2508);
    v259 = *(_DWORD *)(a1 + 2512);
    v260 = *(_DWORD *)(a1 + 2484);
    v261 = *(float *)(a1 + 2480);
    v262 = *(float *)(a1 + 2476);
    v263 = *(_DWORD *)(a1 + 2472);
    v264 = *(float *)(a1 + 2492);
    v265 = *(float *)(a1 + 2488);
    v266 = *(_DWORD *)(a1 + 2496);
    *(_DWORD *)buf = 67111680;
    *(_DWORD *)&buf[4] = v256;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v257;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&buf[16] = v258;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)v308 = v259;
    *(_WORD *)&v308[4] = 1024;
    *(_DWORD *)&v308[6] = v260;
    v309 = 2048;
    v310 = v261;
    v311 = 2048;
    v312 = v262;
    v313 = 1024;
    v314 = v263;
    v315 = 2048;
    v316 = v264;
    v317 = 2048;
    v318 = v265;
    v319 = 1024;
    v320 = v266;
    _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_DEBUG, "#gnssawd,Cellular-AWD,Metric Data,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,Count,%d", buf, 0x54u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CE050);
    v274 = *(_DWORD *)(a1 + 2500);
    v275 = *(_DWORD *)(a1 + 2504);
    v276 = *(_DWORD *)(a1 + 2508);
    v277 = *(_DWORD *)(a1 + 2512);
    v278 = *(_DWORD *)(a1 + 2484);
    v279 = *(float *)(a1 + 2480);
    v280 = *(float *)(a1 + 2476);
    v281 = *(_DWORD *)(a1 + 2472);
    v282 = *(float *)(a1 + 2492);
    v283 = *(float *)(a1 + 2488);
    v284 = *(_DWORD *)(a1 + 2496);
    *(_DWORD *)v291 = 67111680;
    *(_DWORD *)&v291[4] = v274;
    *(_WORD *)&v291[8] = 1024;
    *(_WORD *)&v291[10] = v275;
    *(_DWORD *)&v293[2] = v276;
    *(_WORD *)&v293[6] = 1024;
    *(_DWORD *)&v293[8] = v277;
    *(_WORD *)&v293[12] = 1024;
    *(_DWORD *)&v293[14] = v278;
    *(_WORD *)v294 = 2048;
    *(double *)&v294[2] = v279;
    v295 = 2048;
    v296 = v280;
    v297 = 1024;
    v298 = v281;
    v299 = 2048;
    v300 = v282;
    v301 = 2048;
    v302 = v283;
    v303 = 1024;
    v304 = v284;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gnssawd,Cellular-AWD,Metric Data,MCC,%d,MNC,%d,SID,%d,NID,%d,BandInfo,%d,BW,%f,transmissionFrequency,%f,RAT,%d,RSRP,%f,SNR,%f,Count,%d", v291, 84, v288, a1 + 520, (_DWORD)v289, *(double *)&a2, *(double *)v291, *(_DWORD *)&v291[8], *(double *)&v293[2], *(double *)&v293[10],
      *(_DWORD *)v294);
    v286 = (char *)v285;
    sub_100512490("Generic", 1, 0, 2, "void CLGnssAWD::handleGnssSessionReport(GNSS::GnssSessionData &, GNSS::PersistentDiagnostics &)", "%s\n", v285);
    if (v286 != buf)
      free(v286);
  }
LABEL_353:
  sub_10002FCC8(a1, v289);
  sub_10021A8E8(a1);
}

void sub_10006A610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_100261F44((uint64_t)&a31);
  _Unwind_Resume(a1);
}

_QWORD *sub_10006A62C(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  void **v10;
  _QWORD *v11;
  unint64_t v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      v11 = *v10;
      if (*v10)
      {
        do
        {
          v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == (_DWORD)v7)
              return v11;
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8)
                v12 %= v8;
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4)
              break;
          }
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
    }
  }
  v11 = operator new(0x18uLL);
  *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  v13 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    v15 = 1;
    if (v8 >= 3)
      v15 = (v8 & (v8 - 1)) != 0;
    v16 = v15 | (2 * v8);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      v18 = v17;
    else
      v18 = v16;
    sub_10012E444(a1, v18);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v19 = *(_QWORD *)a1;
  v20 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v20)
  {
    *v11 = *v20;
LABEL_38:
    *v20 = v11;
    goto LABEL_39;
  }
  *v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  *(_QWORD *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    v21 = *(_QWORD *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8)
        v21 %= v8;
    }
    else
    {
      v21 &= v8 - 1;
    }
    v20 = (_QWORD *)(*(_QWORD *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return v11;
}

void sub_10006A834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10006A848(uint64_t a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  _QWORD *v21;
  unint64_t v22;
  _QWORD v24[2];
  char v25;

  v7 = *a2;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v4 = *a2;
      if (v8 <= v7)
        v4 = v7 % v8;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
    v10 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v10)
    {
      for (i = *v10; i; i = (uint64_t *)*i)
      {
        v12 = i[1];
        if (v12 == v7)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)v7)
            return i;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= v8)
              v12 %= v8;
          }
          else
          {
            v12 &= v8 - 1;
          }
          if (v12 != v4)
            break;
        }
      }
    }
  }
  v13 = a1 + 16;
  v14 = (char *)operator new(0x40uLL);
  v24[0] = v14;
  v24[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v7;
  *((_DWORD *)v14 + 4) = **a4;
  *(_OWORD *)(v14 + 40) = 0u;
  *(_OWORD *)(v14 + 24) = 0u;
  *((_DWORD *)v14 + 14) = 1065353216;
  v25 = 1;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    sub_10012E444(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7)
        v4 = v7 % v8;
      else
        v4 = v7;
    }
    else
    {
      v4 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v21)
  {
    *(_QWORD *)v24[0] = *v21;
    *v21 = v24[0];
  }
  else
  {
    *(_QWORD *)v24[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v24[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = v13;
    if (*(_QWORD *)v24[0])
    {
      v22 = *(_QWORD *)(*(_QWORD *)v24[0] + 8);
      if ((v8 & (v8 - 1)) != 0)
      {
        if (v22 >= v8)
          v22 %= v8;
      }
      else
      {
        v22 &= v8 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v22) = v24[0];
    }
  }
  i = (uint64_t *)v24[0];
  v24[0] = 0;
  ++*(_QWORD *)(a1 + 24);
  sub_100859588((uint64_t)v24, 0);
  return i;
}

void sub_10006AA9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100859588((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

id sub_10006AAB4(id result, int a2, double a3)
{
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)();
  CFAbsoluteTime Current;
  double v11;
  char v12;
  _QWORD v13[394];
  uint64_t v14;
  char v15;

  v5 = result;
  if (a2)
    result = objc_msgSend(*((id *)result + 81), "setNextFireDelay:", 1.0);
  if (v5[632] != a2)
  {
    v5[632] = a2;
    if (v5[528])
    {
      v9 = off_1021717D8;
      v12 = a2;
      Current = CFAbsoluteTimeGetCurrent();
      v11 = a3;
      v6 = sub_1011B78D4();
      sub_1011B8DB0(v6, (uint64_t)&v9);
      sub_1015EB864(v13);
      sub_101604F60((uint64_t)v13);
      v15 |= 1u;
      *(CFAbsoluteTime *)&v13[77] = Current;
      v7 = v14;
      *(_BYTE *)(v14 + 20) |= 1u;
      *(double *)(v7 + 8) = a3;
      v8 = v14;
      *(_BYTE *)(v14 + 20) |= 2u;
      *(_BYTE *)(v8 + 16) = a2;
      if (qword_1023118A8 != -1)
        dispatch_once(&qword_1023118A8, &stru_1021AFD20);
      if (qword_1023118B0)
        sub_101888B64(qword_1023118B0, (uint64_t)v13);
      sub_1015EE304((PB::Base *)v13);
    }
    HIDWORD(v13[0]) = 0;
    *(_DWORD *)((char *)v13 + 1) = 0;
    LOBYTE(v13[0]) = a2;
    *(double *)&v13[1] = a3;
    LODWORD(v9) = 6;
    return (id)(*(uint64_t (**)(_BYTE *, uint64_t (***)(), _QWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 152))(v5, &v9, v13, 1, 0xFFFFFFFFLL, 0);
  }
  return result;
}

void sub_10006AC44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1015EE304((PB::Base *)va);
  _Unwind_Resume(a1);
}

void sub_10006B168(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state)
{
  void *v17;

  if (__p)
    operator delete(__p);
  os_activity_scope_leave(&state);

  _Unwind_Resume(a1);
}

double sub_10006B1CC(uint64_t a1, int a2, double *a3)
{
  NSObject *v3;
  double v4;
  char *v5;
  NSObject *v8;
  double v9;
  uint64_t v11;
  char *v12;
  int v13;
  uint64_t v14;
  uint8_t buf[4];
  double v16;

  if (a2)
  {
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_102163688);
    v3 = qword_10229FD68;
    if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Unrecognized notification", buf, 2u);
    }
    v4 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      LOWORD(v13) = 0;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 17, "Unrecognized notification", &v13, 2);
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
  }
  else
  {
    v4 = 0.0;
    if (sub_10006B830(a1))
    {
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      v8 = qword_10229FD68;
      if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_INFO))
      {
        v9 = *a3;
        *(_DWORD *)buf = 134349056;
        v16 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Setting accelerometer update interval to %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_102163688);
        v11 = *(_QWORD *)a3;
        v13 = 134349056;
        v14 = v11;
        v12 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 1, "Setting accelerometer update interval to %{public}f", &v13, 12);
        sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumUpdateIntervalChanged(int, const CFTimeInterval &)", "%s\n", v12);
        if (v12 != (char *)buf)
          free(v12);
      }
      sub_10006B4E0(*(_QWORD *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v4;
}

uint64_t sub_10006B4E0(uint64_t a1, double a2)
{
  double v2;
  uint64_t v3;

  v2 = rint(a2 * 1000000.0);
  if (a2 < 0.0)
    v3 = 0;
  else
    v3 = (uint64_t)v2;
  return sub_10006BD2C(a1, v3);
}

double sub_10006B500(uint64_t a1, int a2, double *a3)
{
  NSObject *v4;
  double v5;
  char *v6;
  NSObject *v9;
  double v10;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint8_t buf[4];
  double v17;

  if (a2)
  {
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_102163688);
    v4 = qword_10229FD68;
    if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v17) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_FAULT, "Unrecognized notification %{public}d", buf, 8u);
    }
    v5 = 0.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      v14 = 67240192;
      LODWORD(v15) = a2;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 17, "Unrecognized notification %{public}d", &v14, 8);
      sub_100512490("Generic", 1, 0, 0, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  else
  {
    v5 = 0.0;
    if (sub_10006B830(a1))
    {
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      v9 = qword_10229FD68;
      if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_INFO))
      {
        v10 = *a3;
        *(_DWORD *)buf = 134349056;
        v17 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Setting batch interval to %{public}f", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FD60 != -1)
          dispatch_once(&qword_10229FD60, &stru_102163688);
        v12 = *(_QWORD *)a3;
        v14 = 134349056;
        v15 = v12;
        v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 1, "Setting batch interval to %{public}f", &v14, 12);
        sub_100512490("Generic", 1, 0, 2, "virtual CFTimeInterval CLAccelerometer::minimumBatchIntervalChanged(int, const CFTimeInterval &)", "%s\n", v13);
        if (v13 != (char *)buf)
          free(v13);
      }
      sub_10006BC9C(*(_QWORD *)(a1 + 40), *a3);
      return *a3;
    }
  }
  return v5;
}

uint64_t sub_10006B830(uint64_t a1)
{
  unsigned int v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  int v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  NSObject *v14;
  NSObject *v15;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  _DWORD v22[4];
  uint8_t buf[1640];

  v2 = sub_1001E4BF4();
  if ((v2 & 4) != 0)
  {
    if (!*(_QWORD *)(a1 + 40))
    {
      v3 = (uint64_t *)sub_100A07FA0();
      v20 = 0x30000FF00;
      v21 = 0;
      sub_1018E4078(v3, (uint64_t)&v20, (uint64_t *)buf);
      sub_1002B7674(a1 + 40, (__int128 *)buf);
      v4 = *(std::__shared_weak_count **)&buf[8];
      if (*(_QWORD *)&buf[8])
      {
        v5 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
        if (!v6)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v7 = objc_msgSend(&off_10221FEA8, "mutableCopy");
      HIDWORD(v19) = 0;
      v8 = sub_100127B9C();
      sub_100081C10(v8, buf);
      v9 = sub_100526244(*(uint64_t *)buf, "IMULocationID", (_DWORD *)&v19 + 1);
      if (HIDWORD(v19))
        v10 = 1;
      else
        v10 = v9;
      v11 = *(std::__shared_weak_count **)&buf[8];
      if (!*(_QWORD *)&buf[8])
        goto LABEL_15;
      v12 = (unint64_t *)(*(_QWORD *)&buf[8] + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
        if (v10)
          goto LABEL_16;
      }
      else
      {
LABEL_15:
        if (v10)
        {
LABEL_16:
          objc_msgSend(v7, "setObject:forKey:", +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", HIDWORD(v19)), CFSTR("LocationID"));
          if (qword_10229FD60 != -1)
            dispatch_once(&qword_10229FD60, &stru_102163688);
          v14 = qword_10229FD68;
          if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            *(_DWORD *)&buf[4] = HIDWORD(v19);
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Setting Accel matching properties with IMULocationID %d", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_10229FD60 != -1)
              dispatch_once(&qword_10229FD60, &stru_102163688);
            v22[0] = 67109120;
            v22[1] = HIDWORD(v19);
            v18 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 0, "Setting Accel matching properties with IMULocationID %d", v22);
            sub_100512490("Generic", 1, 0, 2, "BOOL CLAccelerometer::openHidDevice()", "%s\n", v18);
            if (v18 != (char *)buf)
              free(v18);
          }
        }
      }
      sub_100A0A9EC(*(_QWORD *)(a1 + 40), v7);
      sub_100A0A4BC(*(uint64_t **)(a1 + 40), (uint64_t)sub_10013523C, a1);

    }
  }
  else
  {
    if (qword_10229FD60 != -1)
      dispatch_once(&qword_10229FD60, &stru_102163688);
    v15 = qword_10229FD68;
    if (os_log_type_enabled((os_log_t)qword_10229FD68, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Accel unavailable, unable to establish hid interface", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FD60 != -1)
        dispatch_once(&qword_10229FD60, &stru_102163688);
      LOWORD(v22[0]) = 0;
      LODWORD(v19) = 2;
      v17 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD68, 17, "Accel unavailable, unable to establish hid interface", v22, v19);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLAccelerometer::openHidDevice()", "%s\n", v17);
      if (v17 != (char *)buf)
        free(v17);
    }
  }
  return (v2 >> 2) & 1;
}

void sub_10006BC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006BC9C(uint64_t a1, double a2)
{
  uint64_t v3;
  uint64_t v4;
  id v5;

  v3 = (uint64_t)rint(a2 * 1000000.0);
  if (v3 >= 1000000)
    v3 = 1000000;
  if (v3 <= 10000)
    v4 = 10000;
  else
    v4 = v3;
  v5 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLong:", v4);
  (*(void (**)(uint64_t, const __CFString *, id))(*(_QWORD *)a1 + 16))(a1, CFSTR("BatchInterval"), v5);

  return v4;
}

uint64_t sub_10006BD2C(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_msgSend(objc_alloc((Class)NSNumber), "initWithLong:", a2);
  (*(void (**)(uint64_t, const __CFString *, id))(*(_QWORD *)a1 + 16))(a1, CFSTR("ReportInterval"), v4);

  return a2;
}

void *sub_10006BDF0(void *a1)
{
  id v2;

  v2 = a1;
  return a1;
}

uint64_t sub_10006BE4C(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  const CLMotionActivity *v8;
  int v9;
  void *v10;
  int v11;
  double v12;
  double Current;
  char v14;
  uint64_t result;
  int v16;
  _QWORD v17[5];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  CLMotionActivity v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  CLMotionActivity v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;

  v3 = a2[7];
  v39 = a2[6];
  v40 = v3;
  v4 = a2[9];
  v41 = a2[8];
  v42 = v4;
  v5 = a2[3];
  v35 = a2[2];
  v36 = v5;
  v6 = a2[5];
  v37 = a2[4];
  v38 = v6;
  v7 = a2[1];
  v33 = *a2;
  v34 = v7;
  v32 = 0;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  memset(&v28, 0, sizeof(v28));
  sub_1000CF518((uint64_t)&v33, (uint64_t)&v28);
  if (CLMotionActivity::isTypeStatic(v28.type))
  {
    v9 = *(_DWORD *)(a1 + 656);
    *(_DWORD *)(a1 + 656) = v9 + 1;
    if (v9 <= 2)
      v28.confidence = 0;
  }
  else
  {
    *(_DWORD *)(a1 + 656) = 0;
  }
  if ((CLMotionActivity::isSimilar((CLMotionActivity *)(a1 + 112), &v28, v8) & 1) == 0)
  {
    sub_101346F9C(a1, (uint64_t)&v33);
    sub_1005E8920((int *)(a1 + 112), &v28.type);
    sub_1005E892C(a1, (uint64_t)&v28);
    sub_1005E8F40(a1, (uint64_t)&v28);
    sub_1005E90AC(a1);
    v17[1] = 3221225472;
    v24 = v39;
    v25 = v40;
    v26 = v41;
    v27 = v42;
    v20 = v35;
    v21 = v36;
    v22 = v37;
    v23 = v38;
    v18 = v33;
    v10 = *(void **)(a1 + 40);
    v17[0] = _NSConcreteStackBlock;
    v17[2] = sub_101347060;
    v17[3] = &unk_1021AFC88;
    v17[4] = a1;
    v19 = v34;
    objc_msgSend(v10, "async:", v17);
  }
  v11 = *(unsigned __int8 *)(a1 + 531);
  v12 = *(double *)(a1 + 536);
  Current = CFAbsoluteTimeGetCurrent();
  v14 = sub_10006C39C(a1, v12, Current);
  sub_10006C088(a1, v11, v14);
  v43.type = 10;
  result = sub_1001B7864(a1, &v43.type, 1);
  if ((_DWORD)result)
  {
    v16 = 10;
    v45 = v30;
    v46 = v31;
    v47 = v32;
    v43 = v28;
    v44 = v29;
    return (*(uint64_t (**)(uint64_t, int *, CLMotionActivity *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, &v16, &v43, 0, 0xFFFFFFFFLL, 0);
  }
  return result;
}

uint64_t sub_10006C088(uint64_t result, int a2, char a3)
{
  uint64_t v3;
  int v5;
  int v6;
  NSObject *v7;
  uint64_t v8;
  char *v14;
  _DWORD v15[2];
  __int16 v16;
  int v17;
  uint8_t buf[16];
  char v19;
  char v20;
  int v21;
  int v22;

  v3 = result;
  if (a2)
  {
    result = sub_1001B7910();
    if ((result & 0x1000000) != 0)
    {
      v5 = 1;
    }
    else
    {
      v5 = *(_BYTE *)(v3 + 534) != 0;
      if (!*(_BYTE *)(v3 + 534))
        goto LABEL_9;
    }
    if ((a3 & 1) != 0)
    {
LABEL_9:
      v6 = v5;
      goto LABEL_10;
    }
    v6 = *(_BYTE *)(v3 + 533) != 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
  }
LABEL_10:
  if (*(unsigned __int8 *)(v3 + 531) != v5 || *(unsigned __int8 *)(v3 + 532) != v6)
  {
    if (qword_10229FCB0 != -1)
      dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
    v7 = qword_10229FCB8;
    if (os_log_type_enabled((os_log_t)qword_10229FCB8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&buf[4] = v5;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Authorization changed, authorized for location, %d, active scanning, %d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCB0 != -1)
        dispatch_once(&qword_10229FCB0, &stru_1021AFCC0);
      v15[0] = 67109376;
      v15[1] = v5;
      v16 = 1024;
      v17 = v6;
      v14 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCB8, 1, "Authorization changed, authorized for location, %d, active scanning, %d", v15, 14);
      sub_100512490("Generic", 1, 0, 2, "void CLMotionState7::updateStateOnAuthorization(BOOL, BOOL)", "%s\n", v14);
      if (v14 != (char *)buf)
        free(v14);
    }
    v8 = *(_QWORD *)(v3 + 616);
    if (v8)
    {
      *(_QWORD *)(v3 + 616) = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    }
    objc_msgSend(*(id *)(*(_QWORD *)(v3 + 608) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v3 + 608) + 8), 22);
    if (v5)
    {
      __asm { FMOV            V0.2D, #-1.0 }
      *(_OWORD *)buf = _Q0;
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v19 = v6;
      sub_1001B3AF0();
    }
    result = (uint64_t)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(v3 + 32), "vendor"), "proxyForService:", CFSTR("CLVehicleStateNotifier")), "resetVehicularFalsePositiveSuppressionDnd");
    *(_BYTE *)(v3 + 531) = 0;
    *(_BYTE *)(v3 + 532) = v6;
  }
  return result;
}

BOOL sub_10006C39C(uint64_t a1, double a2, double a3)
{
  double v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  double v9;

  v9 = a2;
  v4 = a3 - a2;
  v5 = v4 > -60.0 && fabs(v4) < *(double *)(a1 + 544);
  if (*(double *)(a1 + 536) != a2)
  {
    v6 = sub_1001FD94C();
    sub_10018A4CC(v6, "LastMotionStateQuery", &v9);
    v7 = sub_1001FD94C();
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 944))(v7);
    *(double *)(a1 + 536) = v9;
  }
  return v5;
}

NSMutableSet *sub_10006C42C(uint64_t a1)
{
  NSMutableSet *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = objc_opt_new(NSMutableSet);
  v3 = *(_QWORD **)(a1 + 752);
  if (v3 != (_QWORD *)(a1 + 760))
  {
    do
    {
      v4 = v3 + 4;
      if (*((char *)v3 + 55) < 0)
        v4 = (_QWORD *)*v4;
      -[NSMutableSet addObject:](v2, "addObject:", -[CLClientKeyPath legacyClientKey](+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4)), "legacyClientKey"));
      v5 = (_QWORD *)v3[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v3[2];
          v7 = *v6 == (_QWORD)v3;
          v3 = v6;
        }
        while (!v7);
      }
      v3 = v6;
    }
    while (v6 != (_QWORD *)(a1 + 760));
  }
  return v2;
}

uint64_t sub_10006C4F4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5)
{
  id v10;
  id v11;
  id v12;
  void *v14[2];
  uint64_t v15;
  __int128 __p;
  uint64_t v17;
  uint64_t v18;

  if (*(char *)(a5 + 23) < 0)
  {
    sub_100115CE4(v14, *(void **)a5, *(_QWORD *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a5;
    v15 = *(_QWORD *)(a5 + 16);
  }
  if (*(char *)(a5 + 47) < 0)
  {
    sub_100115CE4(&__p, *(void **)(a5 + 24), *(_QWORD *)(a5 + 32));
  }
  else
  {
    __p = *(_OWORD *)(a5 + 24);
    v17 = *(_QWORD *)(a5 + 40);
  }
  v18 = *(_QWORD *)(a5 + 48);
  sub_10005164C(a1, a2, a3, a4, (__int128 *)v14);
  *(_QWORD *)a1 = off_1021B5A38;
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
  *(_QWORD *)a1 = off_1021B58F0;
  *(_QWORD *)(a1 + 256) = -[CLVisitMonitoringSubscriptionAdapter initWithSubscription:]([CLVisitMonitoringSubscriptionAdapter alloc], "initWithSubscription:", a1);
  *(_QWORD *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_BYTE *)(a1 + 276) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  v10 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLRoutineMonitor"));
  *(_QWORD *)(a1 + 264) = v10;
  objc_msgSend(v10, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 256), objc_msgSend(*(id *)(a1 + 128), "silo"));
  v11 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLLocationCorrectiveCompensator"));
  *(_QWORD *)(a1 + 280) = v11;
  objc_msgSend(v11, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 256), objc_msgSend(*(id *)(a1 + 128), "silo"));
  v12 = objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLClientManager"));
  *(_QWORD *)(a1 + 288) = v12;
  objc_msgSend(v12, "registerDelegate:inSilo:", *(_QWORD *)(a1 + 256), objc_msgSend(*(id *)(a1 + 128), "silo"));
  return a1;
}

void sub_10006C6C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_10006C704(uint64_t a1@<X0>, uint64_t a2@<X1>, _DWORD *a3@<X8>)
{
  _DWORD *v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  double v10;
  __int128 v11;
  double v12;
  double v13;
  __int128 v14;
  _DWORD *v15;
  uint64_t *v16;
  NSObject *v17;
  NSObject *v18;
  const char *v19;
  uint64_t v20;
  NSObject *v21;
  char *v22;
  int v23;
  NSObject *v24;
  NSObject *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  NSObject *v35;
  __int128 v36;
  double v37;
  double v38;
  BOOL v39;
  double v40;
  char v41;
  double v42;
  double v43;
  double v44;
  NSObject *v45;
  int v46;
  int v47;
  int v48;
  double v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  int v54;
  double v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  NSObject *v61;
  uint64_t v62;
  const char *v63;
  uint64_t v64;
  int v65;
  int v66;
  int v67;
  const char *v68;
  int v69;
  _DWORD *v70;
  uint64_t v71;
  const char *v72;
  uint64_t v73;
  int v74;
  int v75;
  int v76;
  const char *v77;
  uint64_t v78;
  int v79;
  int v80;
  char *v81;
  char *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  const char *v88;
  const char *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  _DWORD *v96;
  _DWORD *v97;
  _QWORD *v98[2];
  __int128 v99;
  __int128 v100;
  uint64_t v101;
  uint64_t v102;
  void *v103[2];
  uint64_t v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  _BYTE v109[32];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  _BYTE v122[24];
  _BYTE v123[40];
  __int128 v124;
  uint64_t v125;
  char v126;
  uint8_t buf[4];
  _BYTE v128[18];
  __int16 v129;
  _BYTE v130[10];
  _BYTE v131[10];
  __int16 v132;
  int v133;
  __int16 v134;
  int v135;
  __int16 v136;
  int v137;
  __int16 v138;
  const char *v139;
  char v140;
  __int16 v141;

  v5 = a3;
  sub_100131230(a3, a1);
  v6 = *(unsigned __int8 *)(a2 + 48);
  if (v6 != 5)
    *((_BYTE *)v5 + 6224) = 1;
  if (*(_BYTE *)(a1 + 6448))
  {
    sub_10031F08C(buf, a2 + 56);
    if (v140)
    {
      if ((v130[7] & 0x80000000) != 0)
        operator delete(*(void **)&v128[4]);
      sub_10031F08C(v109, a2 + 56);
      if (!v114)
        sub_10028DF3C();
      v116 = *(_OWORD *)&v109[8];
      v118 = v110;
      v115 = *(_QWORD *)v109;
      v117 = *(_QWORD *)&v109[24];
      memset(&v109[8], 0, 24);
      v119 = v111;
      v120 = v112;
      v121 = v113;
      sub_10006DF14((uint64_t)v122, (uint64_t)&v115);
      *(_DWORD *)buf = sub_10021CA10((uint64_t)&v128[4], a2);
      v7 = sub_100134FD4((int *)buf);
      sub_100029620((uint64_t)(v5 + 812), (uint64_t)v122, (uint64_t)v7);
      sub_100126D5C((uint64_t)buf);
      if (v126 && (v123[7] & 0x80000000) != 0)
        operator delete(*(void **)&v122[8]);
      if (SHIBYTE(v117) < 0)
        operator delete((void *)v116);
      if (v114 && (v109[31] & 0x80000000) != 0)
        operator delete(*(void **)&v109[8]);
      sub_10031F08C(v122, a2 + 56);
      if (!v126)
        sub_10028DF3C();
      v102 = *(_QWORD *)v122;
      *(_OWORD *)v103 = *(_OWORD *)&v122[8];
      v104 = *(_QWORD *)v123;
      *(_QWORD *)&v122[8] = 0;
      *(_QWORD *)&v122[16] = 0;
      *(_QWORD *)v123 = 0;
      v105 = *(_OWORD *)&v123[8];
      v106 = *(_OWORD *)&v123[24];
      v107 = v124;
      v108 = v125;
      sub_10006DF14((uint64_t)buf, (uint64_t)&v102);
      sub_1005C7FFC((uint64_t)(v5 + 812), (uint64_t)buf);
      *((_WORD *)v5 + 1672) = v141;
      if (v140 && (v130[7] & 0x80000000) != 0)
        operator delete(*(void **)&v128[4]);
      if (SHIBYTE(v104) < 0)
        operator delete(v103[0]);
      if (v126 && (v123[7] & 0x80000000) != 0)
        operator delete(*(void **)&v122[8]);
    }
    v8 = *(_DWORD *)(a1 + 6240);
    v9 = *(_DWORD *)(a1 + 6244);
    v10 = *(double *)(a1 + 6248);
    v11 = *(_OWORD *)(a1 + 6256);
    v101 = *(_QWORD *)(a1 + 6272);
    v12 = *(double *)(a1 + 6280);
    v99 = *(_OWORD *)(a1 + 6288);
    v100 = v11;
    v13 = *(double *)(a1 + 6304);
    v14 = *(_OWORD *)(a1 + 6328);
    *(_OWORD *)v109 = *(_OWORD *)(a1 + 6312);
    *(_OWORD *)&v109[16] = v14;
    v15 = (_DWORD *)(a1 + 6040);
    *(_QWORD *)&v110 = *(_QWORD *)(a1 + 6344);
    v16 = &qword_1022A0000;
    if (sub_1000709AC((_DWORD *)(a1 + 6040)))
    {
      if (v6 == 12)
      {
        if ((v8 - 3) > 1)
        {
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v35 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67240192;
            *(_DWORD *)v128 = v8;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "@EmerWarn, unexpected state, onWifiNotification, %{public}d, #CloneMe", buf, 8u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            v96 = v5;
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 == -1)
              goto LABEL_136;
            goto LABEL_163;
          }
        }
        else
        {
          if (v8 == 4)
            v23 = 6;
          else
            v23 = 5;
          if (v13 < v10)
          {
            v13 = *(double *)(a1 + 6456);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021869E0);
            v24 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)v128 = v13 - v10;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanreply5ghz, %{public}.1f", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_1021869E0);
              *(_DWORD *)v122 = 134349056;
              *(double *)&v122[4] = v13 - v10;
              v93 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, scanreply5ghz, %{public}.1f", v122, 12);
              sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v93);
              if (v93 != (char *)buf)
                free(v93);
              v16 = &qword_1022A0000;
            }
          }
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v25 = v16[11];
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            v26 = sub_1000A9998(0xCu);
            v27 = "ScanReply5GHzWithPendingAls";
            if (v8 == 4)
              v27 = "ScanReply5GHzWithAlsReply";
            v28 = *(_QWORD *)(a2 + 24);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)v128 = v27;
            *(_WORD *)&v128[8] = 2082;
            *(_QWORD *)&v128[10] = v26;
            v129 = 2050;
            *(_QWORD *)v130 = v28;
            *(_WORD *)&v130[8] = 2050;
            *(double *)v131 = v13 - v10;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "@EmerFlow, %{public}s, %{public}s, aps, %{public}lu, tte, %{public}.1f", buf, 0x2Au);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021869E0);
            v87 = v16[11];
            v88 = sub_1000A9998(0xCu);
            v89 = "ScanReply5GHzWithPendingAls";
            if (v8 == 4)
              v89 = "ScanReply5GHzWithAlsReply";
            v90 = *(_QWORD *)(a2 + 24);
            *(_DWORD *)v122 = 136446978;
            *(_QWORD *)&v122[4] = v89;
            *(_WORD *)&v122[12] = 2082;
            *(_QWORD *)&v122[14] = v88;
            *(_WORD *)&v122[22] = 2050;
            *(_QWORD *)v123 = v90;
            *(_WORD *)&v123[8] = 2050;
            *(double *)&v123[10] = v13 - v10;
            LODWORD(v94) = 42;
            v91 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v87, 0, "@EmerFlow, %{public}s, %{public}s, aps, %{public}lu, tte, %{public}.1f", v122, v94);
            sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v91);
            if (v91 != (char *)buf)
              free(v91);
            v8 = v23;
          }
          else
          {
            v8 = v23;
          }
        }
      }
      else if (v6 == 10)
      {
        if (v8 == 1)
        {
          if (v12 < v10)
          {
            v12 = *(double *)(a1 + 6456);
            if (qword_1022A0050 != -1)
              dispatch_once(&qword_1022A0050, &stru_1021869E0);
            v17 = qword_1022A0058;
            if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 134349056;
              *(double *)v128 = v12 - v10;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanreply, %{public}.1f", buf, 0xCu);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0050 != -1)
                dispatch_once(&qword_1022A0050, &stru_1021869E0);
              *(_DWORD *)v122 = 134349056;
              *(double *)&v122[4] = v12 - v10;
              v92 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerTick, scanreply, %{public}.1f", v122, 12);
              sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v92);
              if (v92 != (char *)buf)
                free(v92);
              v16 = &qword_1022A0000;
            }
          }
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v18 = qword_1022A0058;
          if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
          {
            v19 = sub_1000A9998(0xAu);
            v20 = *(_QWORD *)(a2 + 24);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)v128 = v19;
            *(_WORD *)&v128[8] = 2050;
            *(_QWORD *)&v128[10] = v20;
            v129 = 2050;
            *(double *)v130 = v12 - v10;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanReply, %{public}s, aps, %{public}lu, tte, %{public}.1f", buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
          {
            v8 = 2;
            goto LABEL_89;
          }
          v96 = v5;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v83 = qword_1022A0058;
          v84 = sub_1000A9998(0xAu);
          v85 = *(_QWORD *)(a2 + 24);
          *(_DWORD *)v122 = 136446722;
          *(_QWORD *)&v122[4] = v84;
          *(_WORD *)&v122[12] = 2050;
          *(_QWORD *)&v122[14] = v85;
          *(_WORD *)&v122[22] = 2050;
          *(double *)v123 = v12 - v10;
          LODWORD(v94) = 32;
          v86 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v83, 0, "@EmerFlow, ScanReply, %{public}s, aps, %{public}lu, tte, %{public}.1f", v122, v94);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v86);
          if (v86 != (char *)buf)
            free(v86);
          v8 = 2;
          goto LABEL_143;
        }
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v34 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67240192;
          *(_DWORD *)v128 = v8;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "@EmerWarn, unexpected state, onWifiNotification, %{public}d, #CloneMe", buf, 8u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          v96 = v5;
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 == -1)
          {
LABEL_136:
            *(_DWORD *)v122 = 67240192;
            *(_DWORD *)&v122[4] = v8;
            v82 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@EmerWarn, unexpected state, onWifiNotification, %{public}d, #CloneMe", v122, 8);
            sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v82);
            if (v82 != (char *)buf)
              free(v82);
LABEL_143:
            v5 = v96;
            v16 = &qword_1022A0000;
            goto LABEL_89;
          }
LABEL_163:
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
          goto LABEL_136;
        }
      }
      else
      {
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v29 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          v30 = sub_1000A9998((char)v6);
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v128 = v30;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "@EmerWarn, ignore scan, %{public}s", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021869E0);
          v31 = qword_1022A0058;
          v32 = sub_1000A9998((char)v6);
          *(_DWORD *)v122 = 136446210;
          *(_QWORD *)&v122[4] = v32;
          v33 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v31, 0, "@EmerWarn, ignore scan, %{public}s", v122, 12);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v33);
          if (v33 != (char *)buf)
            free(v33);
          v16 = &qword_1022A0000;
        }
      }
    }
LABEL_89:
    v5[1560] = v8;
    v5[1561] = v9;
    *((double *)v5 + 781) = v10;
    *((_OWORD *)v5 + 391) = v100;
    *((_QWORD *)v5 + 784) = v101;
    *((double *)v5 + 785) = v12;
    *((_OWORD *)v5 + 393) = v99;
    *((double *)v5 + 788) = v13;
    v36 = *(_OWORD *)&v109[16];
    *(_OWORD *)(v5 + 1578) = *(_OWORD *)v109;
    *(_OWORD *)(v5 + 1582) = v36;
    *((_BYTE *)v5 + 6344) = v110;
    v37 = *(double *)(*(_QWORD *)(a1 + 3176) + 40);
    v38 = *(double *)(a1 + 6456);
    v39 = sub_1000709AC((_DWORD *)(a1 + 6040));
    v40 = v38 - v37;
    v41 = *(_BYTE *)(a2 + 48) != 5 || v39;
    v42 = *(double *)(a2 + 40);
    v43 = *(double *)(a1 + 6216);
    v44 = v42 - v43;
    if ((v41 & 1) != 0)
    {
      if (v42 - v43 >= 0.0)
      {
        *((_BYTE *)v5 + 808) = 1;
        goto LABEL_104;
      }
    }
    else if (v42 - v43 >= 0.0)
    {
      v49 = fabs(v40);
      *((_BYTE *)v5 + 808) = v49 > 6.0;
      if (v49 <= 6.0)
      {
        v48 = 0;
LABEL_111:
        v53 = *(_DWORD *)(a1 + 6440);
        v54 = sub_100182290(a1 + 5016);
        *((double *)v5 + 779) = sub_10000B544(a1, v53, v54);
        v55 = *(double *)(a1 + 6456);
        v56 = (std::__shared_weak_count *)*((_QWORD *)v5 + 396);
        v98[0] = *((_QWORD **)v5 + 395);
        v98[1] = &v56->__vftable;
        if (v56)
        {
          p_shared_owners = (unint64_t *)&v56->__shared_owners_;
          do
            v58 = __ldxr(p_shared_owners);
          while (__stxr(v58 + 1, p_shared_owners));
        }
        sub_100058AD0(v98, v55);
        if (v56)
        {
          v59 = (unint64_t *)&v56->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        sub_100223998(*((_QWORD **)v5 + 395), a2);
        sub_100223C8C((unsigned __int8 *)v5 + 6516, *(_BYTE *)(a2 + 48));
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v61 = v16[11];
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
        {
          v62 = *(_QWORD *)(a2 + 24);
          v97 = v5;
          v63 = sub_1000A9998(*(char *)(a2 + 48));
          v64 = *(_QWORD *)(*((_QWORD *)v5 + 395) + 24);
          v65 = *(_DWORD *)(a1 + 6472);
          v66 = *(_DWORD *)(a1 + 6476);
          v67 = *(_DWORD *)(a1 + 6480);
          v68 = sub_10006F7A0((_DWORD *)(a1 + 6040));
          *(_DWORD *)buf = 134351106;
          *(_QWORD *)v128 = v62;
          *(_WORD *)&v128[8] = 2082;
          *(_QWORD *)&v128[10] = v63;
          v129 = 1026;
          *(_DWORD *)v130 = (int)v40;
          *(_WORD *)&v130[4] = 1026;
          *(_DWORD *)&v130[6] = v48;
          *(_WORD *)v131 = 2050;
          *(_QWORD *)&v131[2] = v64;
          v132 = 1026;
          v133 = v65;
          v134 = 1026;
          v135 = v66;
          v136 = 1026;
          v137 = v67;
          v138 = 2082;
          v139 = v68;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreply, aps, %{public}lu, type, %{public}s, lastused, %{public}d, use, %{public}d, history, %{public}ld, lsbclients, %{public}d, %{public}d, %{public}d, reqtype, %{public}s", buf, 0x48u);
          v15 = (_DWORD *)(a1 + 6040);
          v5 = v97;
          v16 = &qword_1022A0000;
        }
        if (!sub_1001BFF7C(115, 2))
          return;
        bzero(buf, 0x65CuLL);
        v69 = v48;
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        v70 = v15;
        v95 = v16[11];
        v71 = *(_QWORD *)(a2 + 24);
        v72 = sub_1000A9998(*(char *)(a2 + 48));
        v73 = *(_QWORD *)(*((_QWORD *)v5 + 395) + 24);
        v74 = *(_DWORD *)(a1 + 6472);
        v75 = *(_DWORD *)(a1 + 6476);
        v76 = *(_DWORD *)(a1 + 6480);
        v77 = sub_10006F7A0(v70);
        *(_DWORD *)v122 = 134351106;
        *(_QWORD *)&v122[4] = v71;
        *(_WORD *)&v122[12] = 2082;
        *(_QWORD *)&v122[14] = v72;
        *(_WORD *)&v122[22] = 1026;
        *(_DWORD *)v123 = (int)v40;
        *(_WORD *)&v123[4] = 1026;
        *(_DWORD *)&v123[6] = v69;
        *(_WORD *)&v123[10] = 2050;
        *(_QWORD *)&v123[12] = v73;
        *(_WORD *)&v123[20] = 1026;
        *(_DWORD *)&v123[22] = v74;
        *(_WORD *)&v123[26] = 1026;
        *(_DWORD *)&v123[28] = v75;
        *(_WORD *)&v123[32] = 1026;
        *(_DWORD *)&v123[34] = v76;
        *(_WORD *)&v123[38] = 2082;
        *(_QWORD *)&v124 = v77;
        LODWORD(v94) = 72;
        v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v95, 0, "@WifiFlow, scanreply, aps, %{public}lu, type, %{public}s, lastused, %{public}d, use, %{public}d, history, %{public}ld, lsbclients, %{public}d, %{public}d, %{public}d, reqtype, %{public}s", v122, v94);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v22);
LABEL_128:
        if (v22 != (char *)buf)
          free(v22);
        return;
      }
LABEL_104:
      sub_100DC4CE8(a2, buf);
      sub_1002B7674((uint64_t)(v5 + 794), (__int128 *)buf);
      v50 = *(std::__shared_weak_count **)&v128[4];
      if (*(_QWORD *)&v128[4])
      {
        v51 = (unint64_t *)(*(_QWORD *)&v128[4] + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
        if (!v52)
        {
          ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
          std::__shared_weak_count::__release_weak(v50);
        }
      }
      v48 = 1;
      goto LABEL_111;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v45 = v16[11];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      v46 = (int)*(double *)(a2 + 40);
      v47 = (int)*(double *)(a1 + 6216);
      *(_DWORD *)buf = 67240704;
      *(_DWORD *)v128 = (int)v44;
      *(_WORD *)&v128[4] = 1026;
      *(_DWORD *)&v128[6] = v46;
      *(_WORD *)&v128[10] = 1026;
      *(_DWORD *)&v128[12] = v47;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "WifiFlow, scanreply, warn, pre-privacy, %{public}d, scan, %{public}d, privacy, %{public}d", buf, 0x14u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v78 = v16[11];
      v79 = (int)*(double *)(a2 + 40);
      v80 = (int)*(double *)(a1 + 6216);
      *(_DWORD *)v122 = 67240704;
      *(_DWORD *)&v122[4] = (int)v44;
      *(_WORD *)&v122[8] = 1026;
      *(_DWORD *)&v122[10] = v79;
      *(_WORD *)&v122[14] = 1026;
      *(_DWORD *)&v122[16] = v80;
      LODWORD(v94) = 20;
      v81 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, 0, "WifiFlow, scanreply, warn, pre-privacy, %{public}d, scan, %{public}d, privacy, %{public}d", v122, v94);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v81);
      if (v81 != (char *)buf)
        free(v81);
    }
    v48 = 0;
    *((_BYTE *)v5 + 808) = 0;
    goto LABEL_111;
  }
  *((_BYTE *)v5 + 808) = 0;
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v21 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "WifiFlow, scanreply, warn, ToggleOff", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    *(_WORD *)v122 = 0;
    v22 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, scanreply, warn, ToggleOff", v122, 2);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Wifi::Scan &) const", "%s\n", v22);
    goto LABEL_128;
  }
}

void sub_10006DBB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_10055829C(a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10006DD08(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v7;
  char *v8;
  _DWORD v9[4];
  uint8_t buf[4];
  int v11;

  v3 = sub_1005C7F88(a1, a2);
  *(_WORD *)(v3 + 96) = 0;
  if (*(int *)(v3 + 40) <= 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102192028);
    v4 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a1 + 40);
      *(_DWORD *)buf = 67109120;
      v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Initializing with invalid channel, %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102192028);
      v7 = *(_DWORD *)(a1 + 40);
      v9[0] = 67109120;
      v9[1] = v7;
      v8 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 16, "Initializing with invalid channel, %d", v9);
      sub_100512490("Generic", 1, 0, 0, "CL::Wifi1::Types::AssociatedAp::AssociatedAp(const CLWifiService_Type::AccessPoint)", "%s\n", v8);
      if (v8 != (char *)buf)
        free(v8);
    }
    if (*(_BYTE *)(a1 + 88))
    {
      if (*(char *)(a1 + 31) < 0)
        operator delete(*(void **)(a1 + 8));
      *(_BYTE *)(a1 + 88) = 0;
    }
  }
  return a1;
}

void sub_10006DEEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 88))
  {
    if (*(char *)(v1 + 31) < 0)
      operator delete(*(void **)(v1 + 8));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10006DF18@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int *v15;
  char v16;
  NSObject *v17;
  const char *v18;
  const char *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  NSObject *v25;
  uint64_t result;
  uint64_t v27;
  const char *v28;
  const char *v29;
  char *v30;
  char *v31;
  _DWORD __src[130];
  uint64_t v33;
  std::__shared_weak_count *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[2];
  int v51;
  const char *v52;
  __int16 v53;
  const char *v54;
  _BYTE buf[32];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _OWORD v62[2];
  _BYTE v63[513];
  uint64_t v64;
  std::__shared_weak_count *v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  char v72;

  sub_10013128C((_DWORD *)a3, a1);
  if (*(_DWORD *)(a1 + 1564) && *(double *)(a1 + 1428) > 0.0)
  {
    v6 = *(_OWORD *)(a1 + 1520);
    v48 = *(_OWORD *)(a1 + 1504);
    v49 = v6;
    v50[0] = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)(a1 + 1548);
    v7 = *(_OWORD *)(a1 + 1456);
    v44 = *(_OWORD *)(a1 + 1440);
    v45 = v7;
    v8 = *(_OWORD *)(a1 + 1488);
    v46 = *(_OWORD *)(a1 + 1472);
    v47 = v8;
    v9 = *(_OWORD *)(a1 + 1424);
    v42 = *(_OWORD *)(a1 + 1408);
    v43 = v9;
    sub_100BF965C(a1 + 1408, (uint64_t)__src);
    v60 = v48;
    v61 = v49;
    v62[0] = v50[0];
    *(_OWORD *)((char *)v62 + 12) = *(_OWORD *)((char *)v50 + 12);
    v56 = v44;
    v57 = v45;
    v58 = v46;
    v59 = v47;
    *(_OWORD *)buf = v42;
    *(_OWORD *)&buf[16] = v43;
    memcpy(v63, __src, sizeof(v63));
    v64 = v33;
    v65 = v34;
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    v70 = v39;
    v71 = v40;
    v66 = v35;
    v67 = v36;
    v68 = v37;
    v69 = v38;
    v72 = v41;
    sub_1005589C8(a3 + 1992, (uint64_t)buf);
    v12 = v65;
    if (v65)
    {
      v13 = (unint64_t *)&v65->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    ++*(_DWORD *)(*(_QWORD *)(a3 + 6496) + 236);
    v15 = (int *)(a3 + 6516);
    *(_QWORD *)(a3 + 6528) = sub_100223BB8(a3 + 6516);
    *(_BYTE *)(a3 + 6536) = v16;
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_102143380);
    v17 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v18 = sub_10006F774(*(_DWORD *)(a3 + 6528));
      v19 = sub_10006F774(*v15);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = v18;
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state update, staging, %{public}s, current, %{public}s", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v27 = qword_1022A0058;
      v28 = sub_10006F774(*(_DWORD *)(a3 + 6528));
      v29 = sub_10006F774(*v15);
      v51 = 136446466;
      v52 = v28;
      v53 = 2082;
      v54 = v29;
      v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v27, 1, "@WifiFlow, inter-locreq state update, staging, %{public}s, current, %{public}s", &v51, 22);
      sub_100512490("Generic", 1, 0, 2, "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)", "%s\n", v30);
      if (v30 != buf)
        free(v30);
    }
    v20 = v34;
    if (v34)
    {
      v21 = (unint64_t *)&v34->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
  }
  else if (a2)
  {
    if (!*(_BYTE *)(a3 + 1987))
      *(_BYTE *)(a3 + 1987) = 1;
    v23 = *(_QWORD *)(a3 + 6496);
    ++*(_DWORD *)(v23 + 240);
    if (*(_BYTE *)(a3 + 1616))
    {
      *(_QWORD *)buf = a3 + 1592;
      v24 = sub_10055D064((uint64_t **)(v23 + 256), (const void **)(a3 + 1592), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
      ++*((_DWORD *)v24 + 14);
    }
    else
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_102143380);
      v25 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "WifiCalc, did we forget to set failureReason?", buf, 2u);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_102143380);
        LOWORD(__src[0]) = 0;
        v31 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 17, "WifiCalc, did we forget to set failureReason?", __src, 2);
        sub_100512490("Generic", 1, 0, 0, "static Output CL::Wifi1::Policies::NotifyClients::HandleEvent::processLocationComputation(const Input &, BOOL)", "%s\n", v31);
        if (v31 != buf)
          free(v31);
      }
    }
  }
  result = sub_1001DFAE8();
  if ((_DWORD)result)
  {
    sub_100119F3C(buf);
    __src[0] = sub_100217A98((unsigned int *)(a1 + 6040));
    sub_10011B4E4((uint64_t)buf, "wifiLocType", __src);
    sub_100019BD4((uint64_t)buf, "apsInSolution", (unsigned int *)(a1 + 1564));
    sub_10018A4CC((uint64_t)buf, "hAcc", (const void *)(a1 + 1428));
    sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
    return sub_10011A5A8(buf);
  }
  return result;
}

void sub_10006E4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_10055829C(v1);
  _Unwind_Resume(a1);
}

void sub_10006E534(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  double v7;
  int v8;
  double v9;
  BOOL v10;
  int v11;
  NSObject *v12;
  _BYTE *v13;
  CFAbsoluteTime Current;
  uint64_t v15;
  _OWORD *v16;
  uint64_t v17;
  char *v18;
  _OWORD *v19;
  uint64_t v20;
  _OWORD *v21;
  uint64_t v22;
  _OWORD *v23;
  NSObject *v24;
  _BYTE *v25;
  const char *v26;
  const char *v27;
  __int128 v28;
  __int128 v29;
  double v30;
  double v31;
  NSObject *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  double v36;
  int v42;
  int *v43;
  int *v44;
  char v45;
  NSObject *v46;
  char v47;
  char v48;
  NSObject *v49;
  int v50;
  const char *v51;
  const char *v52;
  const char *v53;
  char v54;
  __int128 v55;
  __int128 v56;
  double v57;
  std::__shared_weak_count *v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  char v63;
  char v64;
  uint64_t v65;
  void *v66;
  char *v67;
  uint64_t v68;
  void *v69;
  const char *v70;
  const char *v71;
  char *v72;
  uint64_t v73;
  int v74;
  const char *v75;
  const char *v76;
  const char *v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82[2];
  void *v83;
  char v84;
  std::string v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  _OWORD v89[2];
  std::string v90;
  _QWORD v91[4];
  int v92;
  int v93;
  const char *v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  const char *v98;
  _BYTE __p[12];
  __int16 v100;
  _BYTE v101[18];
  uint64_t v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _BYTE v106[28];
  std::string v107;
  _BYTE buf[12];
  __int16 v109;
  _BYTE v110[10];
  const char *v111;

  v6 = (char *)(a1 + 6079);
  sub_100131230((_DWORD *)a3, a1);
  v7 = *(double *)(a1 + 6456);
  v8 = v6[433] & 0xF;
  v9 = *(double *)(*(_QWORD *)(a1 + 6496) + 312);
  v10 = (v6[433] & 0xF) == 0;
  if (v9 <= 0.0)
    v11 = -1;
  else
    v11 = (int)(v7 - v9);
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v12 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
  {
    sub_10006F7CC((char *)a2, (uint64_t)__p);
    v13 = v101[9] >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = v13;
    v109 = 1026;
    *(_DWORD *)v110 = v11;
    *(_WORD *)&v110[4] = 1026;
    *(_DWORD *)&v110[6] = v8 == 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WlpMetric, locreq, %{public}s, dt, %{public}d, metric, %{public}d", buf, 0x18u);
    if ((v101[9] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v65 = qword_1022A0058;
    sub_10006F7CC((char *)a2, (uint64_t)&v83);
    if (v85.__r_.__value_.__s.__data_[7] >= 0)
      v66 = &v83;
    else
      v66 = v83;
    *(_DWORD *)__p = 136446722;
    *(_QWORD *)&__p[4] = v66;
    v100 = 1026;
    *(_DWORD *)v101 = v11;
    *(_WORD *)&v101[4] = 1026;
    *(_DWORD *)&v101[6] = v8 == 0;
    v67 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v65, 2, "WlpMetric, locreq, %{public}s, dt, %{public}d, metric, %{public}d", __p, 24);
    if (v85.__r_.__value_.__s.__data_[7] < 0)
      operator delete(v83);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v67);
    if (v67 != buf)
      free(v67);
  }
  if (!v8)
  {
    v91[0] = _NSConcreteStackBlock;
    v91[1] = 3221225472;
    v91[2] = sub_100DBE4F8;
    v91[3] = &unk_102146830;
    v92 = v11;
    AnalyticsSendEventLazy(CFSTR("com.apple.clx.wifiloc.locreq"), v91);
  }
  Current = CFAbsoluteTimeGetCurrent();
  v15 = *(_QWORD *)(a3 + 6496);
  *(CFAbsoluteTime *)(v15 + 312) = Current;
  sub_10006F7CC((char *)a2, (uint64_t)buf);
  *(_QWORD *)__p = buf;
  v16 = sub_10006F6DC((uint64_t **)(v15 + 8), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  ++*((_DWORD *)v16 + 14);
  if ((v110[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v17 = *(_QWORD *)(a3 + 6496);
  v18 = (char *)sub_10006F7A0((_DWORD *)a2);
  sub_1015A2E04(buf, v18);
  *(_QWORD *)__p = buf;
  v19 = sub_10006F6DC((uint64_t **)(v17 + 32), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  ++*((_DWORD *)v19 + 14);
  if ((v110[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v20 = *(_QWORD *)(a3 + 6496);
  sub_1015A2E04(buf, "total");
  *(_QWORD *)__p = buf;
  v21 = sub_10006F6DC((uint64_t **)(v20 + 8), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  ++*((_DWORD *)v21 + 14);
  if ((v110[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  v22 = *(_QWORD *)(a3 + 6496);
  sub_1015A2E04(buf, "total");
  *(_QWORD *)__p = buf;
  v23 = sub_10006F6DC((uint64_t **)(v22 + 32), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)__p);
  ++*((_DWORD *)v23 + 14);
  if ((v110[9] & 0x80000000) != 0)
    operator delete(*(void **)buf);
  ++*(_BYTE *)(a3 + 6512);
  if (v6[372])
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v24 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      sub_10006F7CC((char *)a2, (uint64_t)__p);
      v25 = v101[9] >= 0 ? __p : *(_BYTE **)__p;
      v26 = sub_10006F7A0((_DWORD *)a2);
      v27 = sub_10006F7A0((_DWORD *)(a1 + 6040));
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = v25;
      v109 = 2082;
      *(_QWORD *)v110 = v26;
      *(_WORD *)&v110[8] = 2082;
      v111 = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "@WifiFlow, locreq, %{public}s, %{public}s, current, %{public}s", buf, 0x20u);
      if ((v101[9] & 0x80000000) != 0)
        operator delete(*(void **)__p);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v68 = qword_1022A0058;
      sub_10006F7CC((char *)a2, (uint64_t)&v83);
      if (v85.__r_.__value_.__s.__data_[7] >= 0)
        v69 = &v83;
      else
        v69 = v83;
      v70 = sub_10006F7A0((_DWORD *)a2);
      v71 = sub_10006F7A0((_DWORD *)(a1 + 6040));
      *(_DWORD *)__p = 136446722;
      *(_QWORD *)&__p[4] = v69;
      v100 = 2082;
      *(_QWORD *)v101 = v70;
      *(_WORD *)&v101[8] = 2082;
      *(_QWORD *)&v101[10] = v71;
      LODWORD(v81) = 32;
      v72 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v68, 0, "@WifiFlow, locreq, %{public}s, %{public}s, current, %{public}s", __p, v81);
      if (v85.__r_.__value_.__s.__data_[7] < 0)
        operator delete(v83);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v72);
      if (v72 != buf)
        free(v72);
    }
    *(_QWORD *)(a3 + 816) = *(_QWORD *)(a1 + 6040);
    *(_BYTE *)(a3 + 824) = *(_BYTE *)(a1 + 6048);
    std::string::operator=((std::string *)(a3 + 832), (const std::string *)(a1 + 6056));
    v28 = *(_OWORD *)(a1 + 6096);
    v29 = *(_OWORD *)(a1 + 6128);
    *(_OWORD *)(a3 + 888) = *(_OWORD *)(a1 + 6112);
    *(_OWORD *)(a3 + 904) = v29;
    *(_OWORD *)(a3 + 856) = *(_OWORD *)(a1 + 6080);
    *(_OWORD *)(a3 + 872) = v28;
    *(_OWORD *)(a3 + 916) = *(_OWORD *)(a1 + 6140);
    std::string::operator=((std::string *)(a3 + 936), (const std::string *)(a1 + 6160));
    v30 = *(double *)(a1 + 6456);
    v31 = *(double *)(a1 + 6192);
    *(_QWORD *)__p = *(_QWORD *)(a1 + 6040);
    __p[8] = *(_BYTE *)(a1 + 6048);
    if (*v6 < 0)
    {
      sub_100115CE4(&v101[2], *(void **)(a1 + 6056), *(_QWORD *)(a1 + 6064));
    }
    else
    {
      *(_OWORD *)&v101[2] = *(_OWORD *)(a1 + 6056);
      v102 = *(_QWORD *)(a1 + 6072);
    }
    v33 = *(_OWORD *)(a1 + 6080);
    v104 = *(_OWORD *)(a1 + 6096);
    v34 = *(_OWORD *)(a1 + 6128);
    v105 = *(_OWORD *)(a1 + 6112);
    *(_OWORD *)v106 = v34;
    *(_OWORD *)&v106[12] = *(_OWORD *)(a1 + 6140);
    v103 = v33;
    if (v6[104] < 0)
      sub_100115CE4(&v107, *(void **)(a1 + 6160), *(_QWORD *)(a1 + 6168));
    else
      v107 = *(std::string *)(a1 + 6160);
    v83 = *(void **)a2;
    v84 = *(_BYTE *)(a2 + 8);
    if (*(char *)(a2 + 39) < 0)
      sub_100115CE4(&v85, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    else
      v85 = *(std::string *)(a2 + 16);
    v35 = *(_OWORD *)(a2 + 72);
    v87 = *(_OWORD *)(a2 + 56);
    v88 = v35;
    v89[0] = *(_OWORD *)(a2 + 88);
    *(_OWORD *)((char *)v89 + 12) = *(_OWORD *)(a2 + 100);
    v86 = *(_OWORD *)(a2 + 40);
    if (*(char *)(a2 + 143) < 0)
      sub_100115CE4(&v90, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
    else
      v90 = *(std::string *)(a2 + 120);
    *(_QWORD *)&v88 = *(_QWORD *)(a3 + 888);
    v106[22] = v10;
    if (v6[413] && !sub_1000709AC(&v83))
    {
      *(_DWORD *)buf = 2;
      sub_1006F5F84(&v83, buf);
    }
    if (v6[165])
    {
      *(_DWORD *)buf = 6;
      sub_1006F5F84(&v83, buf);
      buf[0] = 0;
      sub_1006F5F90((uint64_t)__p, buf);
    }
    v36 = vabdd_f64(v30, v31);
    if (sub_10007099C(__p) && v36 >= 6.0)
    {
      sub_10003A974(a3 + 6040, 5, 2u, v7);
      sub_10001ECE4((int *)__p);
      if (sub_1000709AC(&v83))
      {
        *(_QWORD *)(a3 + 5120) = 0;
        *(_QWORD *)(a3 + 5112) = 0;
        *(_DWORD *)(a3 + 5128) = 0;
        *(_BYTE *)(a3 + 5168) = 0;
        *(_QWORD *)(a3 + 5144) = 0;
        *(_QWORD *)(a3 + 5160) = 0;
        *(_QWORD *)(a3 + 5152) = 0;
        *(_DWORD *)(a3 + 5016) = 0xFFFF;
        *(_QWORD *)(a3 + 5028) = 0;
        *(_QWORD *)(a3 + 5020) = 0;
        __asm { FMOV            V1.2D, #-1.0 }
        *(_OWORD *)(a3 + 5036) = xmmword_101BAFC90;
        *(_OWORD *)(a3 + 5052) = _Q1;
        *(_OWORD *)(a3 + 5068) = _Q1;
        *(_OWORD *)(a3 + 5084) = _Q1;
        *(_DWORD *)(a3 + 5100) = 0;
        *(_QWORD *)(a3 + 5104) = 0xBFF0000000000000;
        *(_QWORD *)(a3 + 5132) = 0xBFF0000000000000;
        *(_DWORD *)(a3 + 5140) = 0x7FFFFFFF;
        *(_QWORD *)(a3 + 5172) = 0;
        *(_QWORD *)(a3 + 5184) = 0xBFF0000000000000;
        *(_DWORD *)(a3 + 5192) = 0;
        *(_BYTE *)(a3 + 5196) = 0;
        *(_WORD *)(a3 + 5198) = 0;
      }
    }
    if (sub_10007099C(__p))
    {
      v42 = sub_100217A98((unsigned int *)&v83);
      if (v42 <= (int)sub_100217A98((unsigned int *)__p))
      {
        if (!sub_1006F5F9C((uint64_t)__p)
          || ((v63 = sub_1006F5F9C((uint64_t)&v83), v36 < 6.0) ? (v64 = 1) : (v64 = v63), (v64 & 1) != 0))
        {
          v54 = 0;
LABEL_77:
          *(_BYTE *)(a3 + 6048) = __p[8];
          *(_QWORD *)(a3 + 6040) = *(_QWORD *)__p;
          std::string::operator=((std::string *)(a3 + 6056), (const std::string *)&v101[2]);
          *(_OWORD *)(a3 + 6140) = *(_OWORD *)&v106[12];
          v55 = v103;
          *(_OWORD *)(a3 + 6096) = v104;
          v56 = *(_OWORD *)v106;
          *(_OWORD *)(a3 + 6112) = v105;
          *(_OWORD *)(a3 + 6128) = v56;
          *(_OWORD *)(a3 + 6080) = v55;
          std::string::operator=((std::string *)(a3 + 6160), &v107);
          *(_BYTE *)(a3 + 811) = v54;
          *(_BYTE *)(a3 + 809) = !sub_1000709AC(&v83);
          v57 = *(double *)(a3 + 6456);
          v58 = *(std::__shared_weak_count **)(a3 + 3168);
          v82[0] = *(_QWORD **)(a3 + 3160);
          v82[1] = &v58->__vftable;
          if (v58)
          {
            p_shared_owners = (unint64_t *)&v58->__shared_owners_;
            do
              v60 = __ldxr(p_shared_owners);
            while (__stxr(v60 + 1, p_shared_owners));
          }
          sub_100058AD0(v82, v57);
          if (v58)
          {
            v61 = (unint64_t *)&v58->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (!v62)
            {
              ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
              std::__shared_weak_count::__release_weak(v58);
            }
          }
          if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v90.__r_.__value_.__l.__data_);
          if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v85.__r_.__value_.__l.__data_);
          if (SHIBYTE(v107.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v107.__r_.__value_.__l.__data_);
          if (SHIBYTE(v102) < 0)
            operator delete(*(void **)&v101[2]);
          return;
        }
      }
      *(_DWORD *)buf = sub_100217A98((unsigned int *)&v83);
      sub_1006F5F84(__p, buf);
      *(_QWORD *)buf = sub_10020376C((uint64_t)&v83);
      sub_1006F5FA4((uint64_t)__p, (double *)buf);
      buf[0] = sub_1006F5F9C((uint64_t)&v83);
      sub_1006F5F90((uint64_t)__p, buf);
      *(_DWORD *)buf = 0;
      sub_1006F5FB0((uint64_t)__p, buf);
      sub_10003A974((uint64_t)__p, 5, 1u, v7);
    }
    else
    {
      *(_QWORD *)__p = v83;
      __p[8] = v84;
      std::string::operator=((std::string *)&v101[2], &v85);
      v105 = v88;
      *(_OWORD *)v106 = v89[0];
      *(_OWORD *)&v106[12] = *(_OWORD *)((char *)v89 + 12);
      v103 = v86;
      v104 = v87;
      std::string::operator=(&v107, &v90);
    }
    sub_10003A974((uint64_t)__p, 1, 0, v7);
    v43 = (int *)(a3 + 6516);
    *(_QWORD *)(a3 + 6516) = *(_QWORD *)(a3 + 6528);
    *(_BYTE *)(a3 + 6524) = *(_BYTE *)(a3 + 6536);
    v44 = (int *)(a3 + 6528);
    *(_QWORD *)(a3 + 6528) = sub_100223CDC((int *)(a3 + 6516));
    *(_BYTE *)(a3 + 6536) = v45;
    if (!*(_BYTE *)(a3 + 6494))
    {
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v46 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_INFO, "@WifiFlow, platform not support 5GHz, revert to default inter-locreq state", buf, 2u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021869E0);
        LOWORD(v93) = 0;
        LODWORD(v81) = 2;
        v80 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 1, "@WifiFlow, platform not support 5GHz, revert to default inter-locreq state", &v93, v81);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v80);
        if (v80 != buf)
          free(v80);
      }
      *(_QWORD *)v43 = sub_10012A3B0();
      *(_BYTE *)(a3 + 6524) = v47;
      *(_QWORD *)v44 = sub_10012A3B0();
      *(_BYTE *)(a3 + 6536) = v48;
    }
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    v49 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_INFO))
    {
      v50 = sub_100217A98((unsigned int *)__p);
      v51 = sub_10022555C(v50);
      v52 = sub_10006F774(*v43);
      v53 = sub_10006F774(*v44);
      *(_DWORD *)buf = 136381187;
      *(_QWORD *)&buf[4] = v51;
      v109 = 2082;
      *(_QWORD *)v110 = v52;
      *(_WORD *)&v110[8] = 2082;
      v111 = v53;
      _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "@WifiFlow, inter-locreq state per request type, %{private}s, current %{public}s, staging %{public}s", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021869E0);
      v73 = qword_1022A0058;
      v74 = sub_100217A98((unsigned int *)__p);
      v75 = sub_10022555C(v74);
      v76 = sub_10006F774(*v43);
      v77 = sub_10006F774(*v44);
      v93 = 136381187;
      v94 = v75;
      v95 = 2082;
      v96 = v76;
      v97 = 2082;
      v98 = v77;
      LODWORD(v81) = 32;
      v78 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v73, 1, "@WifiFlow, inter-locreq state per request type, %{private}s, current %{public}s, staging %{public}s", &v93, v81);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v78);
      if (v78 != buf)
        free(v78);
      v54 = 1;
    }
    else
    {
      v54 = 1;
    }
    goto LABEL_77;
  }
  if (qword_1022A0050 != -1)
    dispatch_once(&qword_1022A0050, &stru_1021869E0);
  v32 = qword_1022A0058;
  if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "WifiFlow, locreq, skip, WifiOff", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021869E0);
    *(_WORD *)__p = 0;
    LODWORD(v81) = 2;
    v79 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WifiFlow, locreq, skip, WifiOff", __p, v81);
    sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PrePositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v79);
    if (v79 != buf)
      free(v79);
  }
  *(_BYTE *)(a3 + 809) = 0;
}

void sub_10006F5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41)
{
  uint64_t v41;

  sub_10055A600((uint64_t)&__p);
  sub_10055A600((uint64_t)&a41);
  sub_10055829C(v41);
  _Unwind_Resume(a1);
}

_OWORD *sub_10006F6DC(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  uint64_t **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v12;

  v6 = (void **)sub_10019C424((uint64_t)a1, &v12, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_DWORD *)v7 + 14) = 0;
    sub_1000145B0(a1, v12, v8, (uint64_t *)v7);
  }
  return v7;
}

const char *sub_10006F774(int a1)
{
  const char *v1;

  v1 = "2.4GHz";
  if (a1 == 1)
    v1 = "stage1+5GHz";
  if (a1 == 2)
    return "stage2+5GHz";
  else
    return v1;
}

const char *sub_10006F7A0(_DWORD *a1)
{
  unsigned int v1;

  v1 = *a1 - 1;
  if (v1 > 6)
    return "none";
  else
    return off_10214FC20[v1];
}

char *sub_10006F7CC@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0)
    return (char *)sub_100115CE4((_BYTE *)a2, *((void **)result + 2), *((_QWORD *)result + 3));
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(_QWORD *)(a2 + 16) = *((_QWORD *)result + 4);
  return result;
}

void sub_10006F7F8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  __int128 *v4;
  uint64_t *v5;
  _BYTE *v9;
  double v10;
  double v11;
  unsigned int v12;
  _BOOL8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  double v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  _BOOL4 v27;
  int v29;
  NSObject *v30;
  int v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  char *v38;
  int v39;
  int v40;
  NSObject *v41;
  NSObject *v42;
  const char *v43;
  double v44;
  int v45;
  char v46;
  void *v47;
  double v48;
  int v49;
  char v50;
  int v51;
  uint64_t **v52;
  uint64_t *v53;
  uint64_t v54;
  _OWORD *v55;
  uint64_t v56;
  __int16 v57;
  _OWORD *v58;
  uint64_t v59;
  _OWORD *v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  int v72;
  char *v73;
  uint64_t v74;
  const char *v75;
  char *v76;
  uint64_t v77;
  const char *v78;
  double v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint8_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  void *v96;
  uint64_t v97;
  char v98;
  __int128 v99;
  char v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  char v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  _OWORD v115[2];
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  char v119;
  __int128 v120;
  uint64_t v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _OWORD v125[2];
  __int128 v126;
  uint64_t v127;
  uint8_t v128[8];
  _QWORD v129[101];
  int v130;
  const char *v131;
  _BYTE buf[14];
  double v133;
  char v134;
  void *v135;
  char v136;
  void *v137;
  void *v138;
  char v139;
  void *v140;
  char v141;
  void *__p;
  char v143;

  v9 = (_BYTE *)(a1 + 6224);
  sub_1001307C4((_DWORD *)a3, a1);
  if (!v9[227] || !v9[224])
    return;
  v10 = *(double *)(a1 + 6456);
  v11 = v10;
  if (*(_BYTE *)(a1 + 1400))
  {
    v12 = a1 + 1304;
    *(_QWORD *)buf = sub_100129380(a3 + 3248);
    *(_QWORD *)v128 = *(_QWORD *)(a1 + 1304);
    v13 = sub_10009483C(buf, v128);
    if (!v13)
    {
      sub_1019402B4(v13, v14, v15, v16, v17, v18, v19, v20, v83, v84, v85, v86, v87, (uint64_t)v88, (uint64_t)v89, v90, v91, v92, *((uint64_t *)&v92 + 1),
        v93,
        v94,
        (uint64_t)v95,
        (uint64_t)v96,
        v97);
      abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Wifi1/Logic/Policies/CLWifi1PostPositionCalculationStateUpdate.mm", 188, "operator()");
      __break(1u);
      goto LABEL_129;
    }
    v21 = sub_100219C3C(a1 + 1304);
    sub_100223BA8(a3 + 3248, v21);
    v11 = *(double *)(a1 + 6456);
  }
  v22 = *(double *)(a1 + 6192);
  v118 = *(_QWORD *)(a1 + 816);
  v119 = *(_BYTE *)(a1 + 824);
  if (*(char *)(a1 + 855) < 0)
  {
    sub_100115CE4(&v120, *(void **)(a1 + 832), *(_QWORD *)(a1 + 840));
  }
  else
  {
    v120 = *(_OWORD *)(a1 + 832);
    v121 = *(_QWORD *)(a1 + 848);
  }
  v3 = &v118;
  v23 = *(_OWORD *)(a1 + 856);
  v123 = *(_OWORD *)(a1 + 872);
  v24 = *(_OWORD *)(a1 + 904);
  v124 = *(_OWORD *)(a1 + 888);
  v125[0] = v24;
  *(_OWORD *)((char *)v125 + 12) = *(_OWORD *)(a1 + 916);
  v122 = v23;
  if (*(char *)(a1 + 959) < 0)
  {
    sub_100115CE4(&v126, *(void **)(a1 + 936), *(_QWORD *)(a1 + 944));
  }
  else
  {
    v126 = *(_OWORD *)(a1 + 936);
    v127 = *(_QWORD *)(a1 + 952);
  }
  v108 = *(_QWORD *)a2;
  v109 = *(_BYTE *)(a2 + 8);
  if (*(char *)(a2 + 39) < 0)
  {
    sub_100115CE4(&v110, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v110 = *(_OWORD *)(a2 + 16);
    v111 = *(_QWORD *)(a2 + 32);
  }
  v4 = &v101;
  v25 = *(_OWORD *)(a2 + 56);
  v26 = *(_OWORD *)(a2 + 88);
  v114 = *(_OWORD *)(a2 + 72);
  v115[0] = v26;
  *(_OWORD *)((char *)v115 + 12) = *(_OWORD *)(a2 + 100);
  v112 = *(_OWORD *)(a2 + 40);
  v113 = v25;
  if (*(char *)(a2 + 143) < 0)
  {
    sub_100115CE4(&v116, *(void **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v116 = *(_OWORD *)(a2 + 120);
    v117 = *(_QWORD *)(a2 + 136);
  }
  if (*(_QWORD *)(a1 + 1128))
    *(_BYTE *)(a3 + 6148) = 0;
  if (v9[268] && !sub_1000709AC(&v108))
  {
    *(_DWORD *)buf = 2;
    sub_1006F5F84(&v108, buf);
  }
  if (v9[20])
  {
    *(_DWORD *)buf = 6;
    sub_1006F5F84(&v108, buf);
  }
  v27 = sub_10007099C(&v118);
  v11 = vabdd_f64(v11, v22);
  if (v11 >= 5.0 && v27)
    sub_10001ECE4((int *)&v118);
  if (sub_10007099C(&v118)
    && (v29 = sub_100217A98((unsigned int *)&v108), v29 <= (int)sub_100217A98((unsigned int *)&v118)))
  {
    if (sub_1006F5F9C((uint64_t)&v118))
      v12 = (v11 >= 5.0) & ~sub_1006F5F9C((uint64_t)&v108);
    else
      v12 = 0;
  }
  else
  {
    v12 = 1;
  }
  if (*(unsigned __int8 *)(a1 + 811) != v12)
  {
    v5 = &qword_1022A0000;
    if (qword_1022A0050 == -1)
    {
LABEL_35:
      v30 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_ERROR))
      {
        v31 = *(unsigned __int8 *)(a1 + 811);
        *(_DWORD *)buf = 67174913;
        *(_DWORD *)&buf[4] = v31;
        *(_WORD *)&buf[8] = 1025;
        *(_DWORD *)&buf[10] = v12;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "@WifiFlow, scanreq inconsistent, pre, %{private}d, post, %{private}d", buf, 0xEu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (v5[10] != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v71 = qword_1022A0058;
        v72 = *(unsigned __int8 *)(a1 + 811);
        *(_DWORD *)v128 = 67174913;
        *(_DWORD *)&v128[4] = v72;
        LOWORD(v129[0]) = 1025;
        *(_DWORD *)((char *)v3 + 162) = v12;
        LODWORD(v84) = 14;
        v73 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v71, 16, "@WifiFlow, scanreq inconsistent, pre, %{private}d, post, %{private}d", v128, v84);
        sub_100512490("Generic", 1, 0, 0, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v73);
        if (v73 != buf)
          free(v73);
      }
      goto LABEL_38;
    }
LABEL_129:
    dispatch_once(&qword_1022A0050, &stru_1021A2660);
    goto LABEL_35;
  }
LABEL_38:
  v32 = *(_OWORD *)(a1 + 6320);
  v105 = *(_OWORD *)(a1 + 6304);
  v106 = v32;
  v107 = *(_OWORD *)(a1 + 6336);
  v33 = *(_OWORD *)(a1 + 6256);
  v101 = *(_OWORD *)(a1 + 6240);
  v102 = v33;
  v34 = *(_OWORD *)(a1 + 6288);
  v103 = *(_OWORD *)(a1 + 6272);
  v104 = v34;
  if (((sub_100217AA0(&v108) | v12 ^ 1) & 1) == 0)
  {
    sub_100221C84(&v101, a3 + 6040, *(_DWORD *)(a1 + 6228), a1 + 1408, v9[270], (uint64_t)buf, *(_DWORD **)(a1 + 6456));
    *(_QWORD *)v128 = &v101;
    v129[0] = a3 + 6040;
    v129[1] = a3 + 6228;
    sub_101137530((uint64_t)v128, (__int128 *)buf);
    if (v143 < 0)
      operator delete(__p);
    if (v141 < 0)
      operator delete(v140);
  }
  if (!sub_1000709AC(&v108) && *(_BYTE *)(a1 + 1624))
  {
    sub_10001ECE4((int *)(a3 + 6040));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v35 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = sub_10021C934((uint64_t)&buf[8], (uint64_t *)a2);
      v36 = sub_100134FD4((int *)buf);
      *(_DWORD *)v128 = 136446210;
      *(uint64_t *)((char *)v3 + 156) = (uint64_t)v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", v128, 0xCu);
      sub_100126D5C((uint64_t)buf);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v74 = qword_1022A0058;
      *(_DWORD *)v128 = sub_10021C934((uint64_t)v129, (uint64_t *)a2);
      v75 = sub_100134FD4((int *)v128);
      v130 = 136446210;
      v131 = v75;
      LODWORD(v84) = 12;
      v76 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v74, 0, "@WifiFlow, scanreq, false, reason, good fix, event, %{public}s", &v130, v84);
      sub_100126D5C((uint64_t)v128);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v76);
      if (v76 != buf)
        free(v76);
    }
    v12 = 0;
  }
  if (((sub_1000709AC(&v108) | v12 ^ 1) & 1) == 0 && v11 < 5.0 && *v9)
  {
    *(_BYTE *)(a3 + 1657) = 1;
    sub_10003A974(a3 + 6040, 5, 0xAu, v10);
    sub_10001ECE4((int *)(a3 + 6040));
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A2660);
    v37 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = (int)v11;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "@WifiFlow, scanreq, suppressed, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      *(_DWORD *)v128 = 67240192;
      *(_DWORD *)&v128[4] = (int)v11;
      LODWORD(v84) = 8;
      v38 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "@WifiFlow, scanreq, suppressed, %{public}d", v128, v84);
      sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v38);
      if (v38 != buf)
        free(v38);
    }
    goto LABEL_116;
  }
  if (v12)
  {
    v39 = v9[296];
    if (sub_1000709AC(&v108))
      v40 = 10;
    else
      v40 = v39;
    if (sub_1000709AC(&v108))
    {
      LODWORD(v101) = 1;
      *(_DWORD *)(a3 + 6228) = 1;
      if (*(double *)&v103 < *((double *)&v101 + 1))
      {
        *(_QWORD *)&v103 = *(_QWORD *)(a1 + 6456);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v41 = qword_1022A0058;
        if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134349056;
          *(double *)&buf[4] = *(double *)&v103 - *((double *)&v101 + 1);
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "@EmerTick, scanrequest, %{public}.1f", buf, 0xCu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0050 != -1)
            dispatch_once(&qword_1022A0050, &stru_1021A2660);
          v81 = qword_1022A0058;
          *(_DWORD *)v128 = 134349056;
          *(double *)((char *)v3 + 156) = *(double *)&v103 - *((double *)&v101 + 1);
          LODWORD(v84) = 12;
          v82 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v81, 0, "@EmerTick, scanrequest, %{public}.1f", v128, v84);
          sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v82);
          if (v82 != buf)
            free(v82);
        }
      }
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A2660);
      v42 = qword_1022A0058;
      if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
      {
        v43 = sub_1000A9998((char)v40);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = v43;
        *(_WORD *)&buf[12] = 2050;
        v133 = *(double *)&v103 - *((double *)&v101 + 1);
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "@EmerFlow, ScanRequest, type, %{public}s, tte, %{public}.1f", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0050 != -1)
          dispatch_once(&qword_1022A0050, &stru_1021A2660);
        v77 = qword_1022A0058;
        v78 = sub_1000A9998((char)v40);
        v79 = *(double *)&v103 - *((double *)&v101 + 1);
        *(_DWORD *)v128 = 136446466;
        *(uint64_t *)((char *)v3 + 156) = (uint64_t)v78;
        WORD2(v129[0]) = 2050;
        *(double *)((char *)v3 + 166) = v79;
        LODWORD(v84) = 22;
        v80 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v77, 0, "@EmerFlow, ScanRequest, type, %{public}s, tte, %{public}.1f", v128, v84);
        sub_100512490("Generic", 1, 0, 2, "Output CL::Wifi1::Policies::PostPositionCalculationStateUpdate::HandleEvent::operator()(const Events::Client::LocationRequest &) const", "%s\n", v80);
        if (v80 != buf)
          free(v80);
      }
    }
    if (sub_1006F5D6C(&v108))
    {
      v44 = *(double *)(a1 + 6456);
      v45 = sub_1006F5F9C(a3 + 6040);
      v46 = sub_1000709AC(&v108);
      sub_10006F7CC((char *)a2, (uint64_t)&v99);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 6544) + 16))(&v94, *(_QWORD *)(a1 + 6544), 7);
      sub_101137494((uint64_t)buf, 7, v45, v46, &v99, (uint64_t)&v94, v44);
      sub_101136D10(a3 + 1664, (uint64_t)buf);
      if (v139 && v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      if (v136 < 0)
        operator delete(v135);
      if (v98 && v95)
      {
        v96 = v95;
        operator delete(v95);
      }
      if ((v100 & 0x80000000) == 0)
        goto LABEL_103;
      v47 = (void *)v99;
    }
    else
    {
      v48 = *(double *)(a1 + 6456);
      v49 = sub_1006F5F9C(a3 + 6040);
      v50 = sub_1000709AC(&v108);
      sub_10006F7CC((char *)a2, (uint64_t)&v92);
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 6544) + 16))(&v87, *(_QWORD *)(a1 + 6544), (char)v40);
      sub_101137494((uint64_t)buf, v40, v49, v50, &v92, (uint64_t)&v87, v48);
      sub_101136D10(a3 + 1664, (uint64_t)buf);
      if (v139 && v137)
      {
        v138 = v137;
        operator delete(v137);
      }
      if (v136 < 0)
        operator delete(v135);
      if ((_BYTE)v91 && v88)
      {
        v89 = v88;
        operator delete(v88);
      }
      if ((SHIBYTE(v93) & 0x80000000) == 0)
        goto LABEL_103;
      v47 = (void *)v92;
    }
    operator delete(v47);
LABEL_103:
    if (v40 == 10)
      v51 = 3;
    else
      v51 = 2;
    sub_10003A974(a3 + 6040, v51, 0, v10);
    v52 = (uint64_t **)(*(_QWORD *)(a3 + 6496) + 56);
    *(_QWORD *)buf = a3 + 1688;
    v53 = sub_10055D064(v52, (const void **)(a3 + 1688), (uint64_t)&unk_101B9EB60, (__int128 **)buf);
    ++*((_DWORD *)v53 + 14);
    v54 = *(_QWORD *)(a3 + 6496);
    sub_1015A2E04(buf, "total");
    *(_QWORD *)v128 = buf;
    v55 = sub_10006F6DC((uint64_t **)(v54 + 56), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v128);
    ++*((_DWORD *)v55 + 14);
    if (v134 < 0)
      operator delete(*(void **)buf);
    v56 = *(_QWORD *)(a3 + 6496);
    if (*(_BYTE *)(a3 + 1744))
      v57 = *(unsigned __int8 *)(a3 + 1712) | 0x100;
    else
      v57 = 0;
    sub_100558AC8(*(char *)(a3 + 1664), v57, buf);
    *(_QWORD *)v128 = buf;
    v58 = sub_10006F6DC((uint64_t **)(v56 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v128);
    ++*((_DWORD *)v58 + 14);
    if (v134 < 0)
      operator delete(*(void **)buf);
    v59 = *(_QWORD *)(a3 + 6496);
    sub_1015A2E04(buf, "total");
    *(_QWORD *)v128 = buf;
    v60 = sub_10006F6DC((uint64_t **)(v59 + 80), (const void **)buf, (uint64_t)&unk_101B9EB60, (_OWORD **)v128);
    ++*((_DWORD *)v60 + 14);
    if (v134 < 0)
      operator delete(*(void **)buf);
    *(_QWORD *)(a3 + 6192) = *(_QWORD *)(a1 + 6456);
    sub_1006F5FBC(a3 + 6040);
  }
LABEL_116:
  if (sub_100182290(a1 + 1408))
  {
    v61 = *(_OWORD *)(a1 + 1552);
    *(_OWORD *)(a3 + 5144) = *(_OWORD *)(a1 + 1536);
    *(_OWORD *)(a3 + 5160) = v61;
    *(_OWORD *)(a3 + 5176) = *(_OWORD *)(a1 + 1568);
    v62 = *(_OWORD *)(a1 + 1488);
    *(_OWORD *)(a3 + 5080) = *(_OWORD *)(a1 + 1472);
    *(_OWORD *)(a3 + 5096) = v62;
    v63 = *(_OWORD *)(a1 + 1520);
    *(_OWORD *)(a3 + 5112) = *(_OWORD *)(a1 + 1504);
    *(_OWORD *)(a3 + 5128) = v63;
    v64 = *(_OWORD *)(a1 + 1424);
    *(_OWORD *)(a3 + 5016) = *(_OWORD *)(a1 + 1408);
    *(_OWORD *)(a3 + 5032) = v64;
    v65 = *(_OWORD *)(a1 + 1456);
    *(_OWORD *)(a3 + 5048) = *(_OWORD *)(a1 + 1440);
    *(_QWORD *)(a3 + 5192) = *(_QWORD *)(a1 + 1584);
    *(_OWORD *)(a3 + 5064) = v65;
  }
  *(_QWORD *)(a3 + 816) = *(_QWORD *)(a1 + 6040);
  *(_BYTE *)(a3 + 824) = *(_BYTE *)(a1 + 6048);
  std::string::operator=((std::string *)(a3 + 832), (const std::string *)(a1 + 6056));
  v66 = *(_OWORD *)(a1 + 6096);
  v67 = *(_OWORD *)(a1 + 6128);
  *(_OWORD *)(a3 + 888) = *(_OWORD *)(a1 + 6112);
  *(_OWORD *)(a3 + 904) = v67;
  *(_OWORD *)(a3 + 856) = *(_OWORD *)(a1 + 6080);
  *(_OWORD *)(a3 + 872) = v66;
  *(_OWORD *)(a3 + 916) = *(_OWORD *)(a1 + 6140);
  std::string::operator=((std::string *)(a3 + 936), (const std::string *)(a1 + 6160));
  v68 = v103;
  *(_OWORD *)(a3 + 6288) = v104;
  v69 = v106;
  *(_OWORD *)(a3 + 6304) = v105;
  *(_OWORD *)(a3 + 6320) = v69;
  v70 = v102;
  *(_OWORD *)(a3 + 6240) = v101;
  *(_OWORD *)(a3 + 6256) = v70;
  *(_OWORD *)(a3 + 6272) = v68;
  *(_OWORD *)(a3 + 6329) = *(__int128 *)((char *)v4 + 89);
  if (SHIBYTE(v117) < 0)
    operator delete((void *)v116);
  if (SHIBYTE(v111) < 0)
    operator delete((void *)v110);
  if (SHIBYTE(v127) < 0)
    operator delete((void *)v126);
  if (SHIBYTE(v121) < 0)
    operator delete((void *)v120);
}

void sub_100070814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  uint64_t v62;

  sub_10055A600((uint64_t)&a44);
  sub_10055A600((uint64_t)&a62);
  sub_10055829C(v62);
  _Unwind_Resume(a1);
}

BOOL sub_10007099C(_DWORD *a1)
{
  return *a1 != 0;
}

BOOL sub_1000709AC(_DWORD *a1)
{
  return *a1 == 6;
}

uint64_t sub_1000709BC(uint64_t result)
{
  uint64_t v1;
  int v2;
  int v3;
  _BOOL4 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _BOOL4 v9;
  unsigned int *v10;
  int isTypePedestrian;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  int v21;
  int v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  const char *v43;
  uint8_t *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _OWORD v54[8];
  uint64_t v55;
  _DWORD v56[2];
  __int16 v57;
  int v58;
  __int16 v59;
  int v60;
  __int16 v61;
  int v62;
  __int16 v63;
  _BOOL4 v64;
  __int16 v65;
  _BOOL4 v66;
  __int16 v67;
  int v68;
  __int16 v69;
  int v70;
  __int16 v71;
  int v72;
  __int16 v73;
  int v74;
  __int16 v75;
  int v76;
  __int16 v77;
  int v78;
  uint8_t buf[16];
  __int128 v80;
  _BYTE v81[32];
  __int128 v82;
  __int128 v83;
  __int128 v84;
  _BYTE v85[32];

  if (!*(_BYTE *)(result + 464))
    return result;
  v1 = result;
  v2 = sub_100070E68(result + 120);
  v3 = v2;
  if (v2 != 2)
  {
    if (v2 != 1 || !*(_BYTE *)(v1 + 88) || (CLMotionActivity::isTypePedestrian(*(unsigned int *)(v1 + 176)) & 1) == 0)
      goto LABEL_9;
    goto LABEL_8;
  }
  if (CLMotionActivity::isTypeDriving(*(unsigned int *)(v1 + 176)))
LABEL_8:
    *(_DWORD *)(v1 + 180) = 2;
LABEL_9:
  v4 = sub_1000715C8((_QWORD *)v1, *(_DWORD *)(v1 + 500), *(double *)(v1 + 504));
  v5 = *(_OWORD *)(v1 + 288);
  v54[6] = *(_OWORD *)(v1 + 272);
  v54[7] = v5;
  v55 = *(_QWORD *)(v1 + 304);
  v6 = *(_OWORD *)(v1 + 224);
  v54[2] = *(_OWORD *)(v1 + 208);
  v54[3] = v6;
  v7 = *(_OWORD *)(v1 + 256);
  v54[4] = *(_OWORD *)(v1 + 240);
  v54[5] = v7;
  v8 = *(_OWORD *)(v1 + 192);
  v54[0] = *(_OWORD *)(v1 + 176);
  v54[1] = v8;
  v9 = sub_100071490(v1, (unsigned int *)v54, v4);
  if (*(_BYTE *)(v1 + 465))
    *(_QWORD *)(v1 + 188) = 0x200000001;
  v10 = (unsigned int *)(v1 + 176);
  if (*(_BYTE *)(v1 + 88))
  {
    isTypePedestrian = CLMotionActivity::isTypePedestrian(*v10);
    if (v4)
    {
      if (isTypePedestrian)
      {
        *(_DWORD *)(v1 + 180) = 2;
        *(_DWORD *)(v1 + 188) = 0;
        *(_DWORD *)(v1 + 192) = 0;
      }
    }
  }
  if (*(_BYTE *)(v1 + 312) && (CLMotionActivity::isStatic((CLMotionActivity *)(v1 + 176)) & 1) == 0)
  {
    if ((CLMotionActivity::isTypeCycling(*(unsigned int *)(v1 + 320)) & 1) != 0
      || (CLMotionActivity::isTypeSwimming(*(unsigned int *)(v1 + 320)) & 1) != 0)
    {
      v12 = *(_QWORD *)(v1 + 320);
      *(_QWORD *)(v1 + 176) = v12;
      v13 = v12;
    }
    else
    {
      v13 = *(_DWORD *)(v1 + 320);
    }
    if (v13 == 19150)
    {
      v14 = *(_DWORD *)(v1 + 324);
      *(_DWORD *)(v1 + 176) = 3;
      *(_DWORD *)(v1 + 180) = v14;
    }
    if (CLMotionActivity::isTypeWheelchairPush())
    {
      v15 = *(_DWORD *)(v1 + 324);
      *(_DWORD *)(v1 + 176) = 3;
      *(_DWORD *)(v1 + 180) = v15;
    }
  }
  v16 = sub_100070E88(v1);
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v17 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_DWORD *)(v1 + 176);
    v19 = *(_DWORD *)(v1 + 180);
    v20 = *(_DWORD *)(v1 + 188);
    v21 = *(_DWORD *)(v1 + 192);
    v22 = *(unsigned __int8 *)(v1 + 466);
    v23 = *(unsigned __int8 *)(v1 + 312);
    v24 = *(_DWORD *)(v1 + 320);
    v25 = *(unsigned __int8 *)(v1 + 1112);
    *(_DWORD *)buf = 67111936;
    *(_DWORD *)&buf[4] = v18;
    *(_WORD *)&buf[8] = 1024;
    *(_DWORD *)&buf[10] = v19;
    *(_WORD *)&buf[14] = 1024;
    LODWORD(v80) = v20;
    WORD2(v80) = 1024;
    *(_DWORD *)((char *)&v80 + 6) = v21;
    WORD5(v80) = 1024;
    HIDWORD(v80) = v4;
    *(_WORD *)v81 = 1024;
    *(_DWORD *)&v81[2] = v9;
    *(_WORD *)&v81[6] = 1024;
    *(_DWORD *)&v81[8] = v16;
    *(_WORD *)&v81[12] = 1024;
    *(_DWORD *)&v81[14] = v3;
    *(_WORD *)&v81[18] = 1024;
    *(_DWORD *)&v81[20] = v22;
    *(_WORD *)&v81[24] = 1024;
    *(_DWORD *)&v81[26] = v23;
    *(_WORD *)&v81[30] = 1024;
    LODWORD(v82) = v24;
    WORD2(v82) = 1024;
    *(_DWORD *)((char *)&v82 + 6) = v25;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "feeding,motionState,%d,conf,%d,mountState,%d,mountStateConf,%d,isRecentlyStepping,%d,needFullDutyCycle,%d,shouldBeInertialAiding,%d,navMode,%d,isAccelStuck,%d,inFitnessSession,%d,lastWorkoutActivity,%d,shouldBeClamped,%d", buf, 0x4Au);
  }
  v26 = sub_1001BFF7C(115, 2);
  if ((_DWORD)v26)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v35 = *(_DWORD *)(v1 + 176);
    v36 = *(_DWORD *)(v1 + 180);
    v37 = *(_DWORD *)(v1 + 188);
    v38 = *(_DWORD *)(v1 + 192);
    v39 = *(unsigned __int8 *)(v1 + 466);
    v40 = *(unsigned __int8 *)(v1 + 312);
    v41 = *(_DWORD *)(v1 + 320);
    v42 = *(unsigned __int8 *)(v1 + 1112);
    v56[0] = 67111936;
    v56[1] = v35;
    v57 = 1024;
    v58 = v36;
    v59 = 1024;
    v60 = v37;
    v61 = 1024;
    v62 = v38;
    v63 = 1024;
    v64 = v4;
    v65 = 1024;
    v66 = v9;
    v67 = 1024;
    v68 = v16;
    v69 = 1024;
    v70 = v3;
    v71 = 1024;
    v72 = v39;
    v73 = 1024;
    v74 = v40;
    v75 = 1024;
    v76 = v41;
    v77 = 1024;
    v78 = v42;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "feeding,motionState,%d,conf,%d,mountState,%d,mountStateConf,%d,isRecentlyStepping,%d,needFullDutyCycle,%d,shouldBeInertialAiding,%d,navMode,%d,isAccelStuck,%d,inFitnessSession,%d,lastWorkoutActivity,%d,shouldBeClamped,%d", v56, 74, (_DWORD)v45, DWORD2(v45), (_DWORD)v46, DWORD2(v46), (_DWORD)v47, DWORD2(v47), (_DWORD)v48, DWORD2(v48),
      (_DWORD)v49,
      DWORD2(v49));
    v44 = (uint8_t *)v43;
    v26 = sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceMotion::updateContext()", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
  CLMotionActivity::getInit((CLMotionActivity *)v26);
  v27 = *(_OWORD *)(v1 + 288);
  v84 = *(_OWORD *)(v1 + 272);
  *(_OWORD *)v85 = v27;
  *(_QWORD *)&v85[16] = *(_QWORD *)(v1 + 304);
  v29 = *(_OWORD *)(v1 + 224);
  *(_OWORD *)v81 = *(_OWORD *)(v1 + 208);
  v28 = *(_OWORD *)v81;
  *(_OWORD *)&v81[16] = v29;
  v30 = *(_OWORD *)(v1 + 256);
  v82 = *(_OWORD *)(v1 + 240);
  v31 = v82;
  v83 = v30;
  v32 = *(_OWORD *)(v1 + 192);
  *(_OWORD *)buf = *(_OWORD *)v10;
  v33 = *(_OWORD *)buf;
  v80 = v32;
  v85[24] = *(_BYTE *)(v1 + 312);
  v85[25] = v4;
  v85[26] = v9;
  v85[27] = v16;
  v85[28] = *(_BYTE *)(v1 + 1112);
  *(_OWORD *)(v1 + 712) = v84;
  *(_OWORD *)(v1 + 728) = v27;
  *(_OWORD *)(v1 + 648) = v28;
  *(_OWORD *)(v1 + 664) = v29;
  *(_OWORD *)(v1 + 680) = v31;
  *(_OWORD *)(v1 + 696) = v30;
  *(_OWORD *)(v1 + 616) = v33;
  *(_OWORD *)(v1 + 632) = v32;
  *(_OWORD *)(v1 + 741) = *(_OWORD *)&v85[13];
  *(double *)(v1 + 560) = sub_1001FCBB4();
  v51 = v84;
  v52 = *(_OWORD *)v85;
  v53 = *(_OWORD *)&v85[16];
  v47 = *(_OWORD *)v81;
  v48 = *(_OWORD *)&v81[16];
  v49 = v82;
  v50 = v83;
  v45 = *(_OWORD *)buf;
  v46 = v80;
  v34 = *(_QWORD *)(v1 + 32);
  if (!v34)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v34 + 48))(v34, &v45);
}

uint64_t sub_100070E68(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(*(_QWORD *)a1 + 4);
  if (v1 == 2)
    return 1;
  else
    return 2 * (v1 == 1);
}

uint64_t sub_100070E88(uint64_t a1)
{
  char v2;
  char v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t result;
  __n128 v8;
  unsigned __int8 v9;
  _BOOL4 v10;
  int isTypeInVehicle;
  int isTypeMoving;
  int v13;
  int v14;
  int isTypePedestrian;
  int v16;
  NSObject *v17;
  int v18;
  int v19;
  int v20;
  char v21;
  char v22;
  BOOL v23;
  NSObject *v24;
  int v25;
  int v26;
  __int16 v27;
  int v28;
  const char *v29;
  uint8_t *v30;
  int v31;
  const char *v32;
  uint8_t *v33;
  int v34;
  int v35;
  int v36;
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  uint8_t buf[8];
  std::__shared_weak_count *v42;
  int v43;
  __int16 v44;
  _BOOL4 v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  int v49;

  sub_1001E4804(buf);
  LOBYTE(v34) = 0;
  v2 = sub_1001E4874(*(uint64_t *)buf, "ForceEnableGnssInertialAiding", (BOOL *)&v34);
  if ((_BYTE)v34)
    v3 = v2;
  else
    v3 = 0;
  v4 = v42;
  if (!v42)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v42->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    if ((v3 & 1) != 0)
      return 1;
  }
  else
  {
LABEL_8:
    if ((v3 & 1) != 0)
      return 1;
  }
  if (!*(_BYTE *)(a1 + 1057))
  {
    result = 0;
    *(_BYTE *)(a1 + 1059) = 0;
    return result;
  }
  if (*(_BYTE *)(a1 + 466) || (sub_100195F08() & 1) != 0)
    return 0;
  v9 = atomic_load((unsigned __int8 *)&qword_1023063A8);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_1023063A8))
  {
    byte_1023063A0 = sub_1000FDB0C();
    __cxa_guard_release(&qword_1023063A8);
  }
  if (*(_BYTE *)(a1 + 1059))
  {
    v10 = *(_DWORD *)(a1 + 188) != 1 && vabdd_f64(sub_1001FCBB4(), *(double *)(a1 + 456)) > 90.0;
    if (*(_BYTE *)(a1 + 88))
      isTypePedestrian = CLMotionActivity::isTypePedestrian(*(unsigned int *)(a1 + 176));
    else
      isTypePedestrian = 0;
    v16 = *(_DWORD *)(a1 + 180);
    if (!*(_BYTE *)(a1 + 1056))
    {
      v22 = v16 == 2 ? isTypePedestrian : 0;
      if (!*(_BYTE *)(a1 + 312) && (v22 & 1) == 0)
      {
        v23 = !byte_1023063A0 && v10;
        if (!v23 && !*(_BYTE *)(a1 + 1113))
          return *(_BYTE *)(a1 + 1059) != 0;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v17 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v18 = *(unsigned __int8 *)(a1 + 1056);
      v19 = *(unsigned __int8 *)(a1 + 312);
      v20 = *(unsigned __int8 *)(a1 + 1113);
      *(_DWORD *)buf = 67110400;
      *(_DWORD *)&buf[4] = v18;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = v19;
      HIWORD(v42) = 1024;
      v43 = isTypePedestrian;
      v44 = 1024;
      v45 = v16 == 2;
      v46 = 1024;
      v47 = v10;
      v48 = 1024;
      v49 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "stopINS,insfullDutyCycleNeededForPed,%d,inFitnessSession,%d,isPedestrian,%d,isHighConf,%d,isDismounted,%d,fIsAirborne,%d", buf, 0x26u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v27 = *(unsigned __int8 *)(a1 + 312);
      v28 = *(unsigned __int8 *)(a1 + 1113);
      LOWORD(v35) = 1024;
      HIWORD(v35) = v27;
      v39 = 1024;
      v40 = v28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "stopINS,insfullDutyCycleNeededForPed,%d,inFitnessSession,%d,isPedestrian,%d,isHighConf,%d,isDismounted,%d,fIsAirborne,%d", &v34, 38, 67110400, v35, isTypePedestrian, 0x4000000);
      v30 = (uint8_t *)v29;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::shouldBeInertialAiding()", "%s\n", v29);
      if (v30 != buf)
        free(v30);
    }
    v21 = 0;
  }
  else
  {
    isTypeInVehicle = CLMotionActivity::isTypeInVehicle(*(unsigned int *)(a1 + 176), v8);
    isTypeMoving = CLMotionActivity::isTypeMoving(*(unsigned int *)(a1 + 176));
    v13 = *(_DWORD *)(a1 + 188);
    if (*(_BYTE *)(a1 + 88))
      v14 = CLMotionActivity::isTypePedestrian(*(unsigned int *)(a1 + 176));
    else
      v14 = 0;
    if (*(_BYTE *)(a1 + 1056)
      || *(_BYTE *)(a1 + 312)
      || (isTypeInVehicle & 1) == 0 && (((isTypeMoving ^ 1 | v14) & 1) != 0 || *(_BYTE *)(a1 + 753))
      || v13 != 1
      || *(_BYTE *)(a1 + 1113))
    {
      return *(_BYTE *)(a1 + 1059) != 0;
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v24 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      v25 = *(_DWORD *)(a1 + 176);
      v26 = *(unsigned __int8 *)(a1 + 753);
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&buf[4] = v25;
      LOWORD(v42) = 1024;
      *(_DWORD *)((char *)&v42 + 2) = isTypeInVehicle;
      HIWORD(v42) = 1024;
      v43 = isTypeMoving;
      v44 = 1024;
      v45 = v14;
      v46 = 1024;
      v47 = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "startINS,activity,%d,isInVehicle,%d,isMoving,%d,isPedestrian,%d,isRecentlyStepping,%d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_102165788);
      v31 = *(unsigned __int8 *)(a1 + 753);
      LOWORD(v35) = 1024;
      HIWORD(v35) = isTypeInVehicle;
      HIWORD(v36) = HIWORD(v14);
      v37 = 1024;
      v38 = v31;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "startINS,activity,%d,isInVehicle,%d,isMoving,%d,isPedestrian,%d,isRecentlyStepping,%d", &v34, 32, 67110144, v35, isTypeMoving);
      v33 = (uint8_t *)v32;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::shouldBeInertialAiding()", "%s\n", v32);
      if (v33 != buf)
        free(v33);
    }
    v21 = 1;
  }
  *(_BYTE *)(a1 + 1059) = v21;
  return *(_BYTE *)(a1 + 1059) != 0;
}

void sub_100071460(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1023063A8);
  _Unwind_Resume(a1);
}

BOOL sub_100071490(uint64_t a1, unsigned int *a2, int a3)
{
  unsigned __int8 v6;
  unint64_t v7;
  double v8;
  _BOOL8 result;

  v6 = atomic_load((unsigned __int8 *)&qword_102306398);
  if ((v6 & 1) == 0 && __cxa_guard_acquire(&qword_102306398))
  {
    byte_102306392 = sub_100195F08();
    __cxa_guard_release(&qword_102306398);
  }
  if (!byte_102306392)
    return 0;
  v7 = *(_QWORD *)(a1 + 832);
  if (v7)
    v8 = (float)(*(float *)(a1 + 784) / (float)v7);
  else
    v8 = 0.0;
  if (*(_BYTE *)(a1 + 1056) && (!a3 || v8 > 6.67 || CLMotionActivity::isTypeDriving(*a2) && a2[1] == 2))
  {
    result = 0;
    *(_BYTE *)(a1 + 1056) = 0;
  }
  else if (*(_BYTE *)(a1 + 88) && CLMotionActivity::isTypePedestrian(*a2) && a3 && v8 < 6.67)
  {
    result = 1;
    *(_BYTE *)(a1 + 1056) = 1;
  }
  else
  {
    return *(_BYTE *)(a1 + 1056) != 0;
  }
  return result;
}

void sub_1000715B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_102306398);
  _Unwind_Resume(a1);
}

BOOL sub_1000715C8(_QWORD *a1, unsigned int a2, double a3)
{
  _QWORD *v6;
  double Current;
  double v8;
  unint64_t v9;
  unint64_t v10;
  void **v11;
  void **v12;
  void **v13;
  unint64_t v14;
  unint64_t v15;
  void **v16;
  unint64_t v17;
  _BOOL8 v18;
  double v19;
  void **v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  uint64_t v33;
  const char *v34;
  uint8_t *v35;
  uint64_t v36;
  int v37;
  __int16 v38;
  uint64_t v39;
  __int16 v40;
  int v41;
  uint8_t buf[4];
  _BOOL4 v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  int v47;

  if (!a1[69])
    return 0;
  v6 = a1 + 64;
  Current = CFAbsoluteTimeGetCurrent();
  v8 = fabs(a3);
  v9 = a1[68];
  v10 = v9 + a1[69];
  v11 = (void **)a1[65];
  v12 = &v11[v10 / 0x17];
  v13 = (void **)a1[66];
  if (v13 == v11)
  {
    v15 = 0;
    v17 = 0;
    v16 = &v11[v9 / 0x17];
    v14 = v10 % 0x17;
  }
  else
  {
    v14 = v10 % 0x17;
    v15 = (unint64_t)v11[v10 / 0x17] + 176 * (v10 % 0x17);
    v16 = &v11[v9 / 0x17];
    v17 = (unint64_t)*v16 + 176 * (v9 % 0x17);
  }
  v19 = Current - v8;
  v20 = v16;
LABEL_7:
  v21 = v17 - 4048;
  while (1)
  {
    if (v13 == v11)
      v22 = 0;
    else
      v22 = (uint64_t)*v12 + 176 * v14;
    if (v17 == v22)
    {
      v20 = &v11[v10 / 0x17];
      goto LABEL_17;
    }
    if (*(double *)(v17 + 8) >= v19)
      break;
    v17 += 176;
    v21 += 176;
    if (*v20 == (void *)v21)
    {
      v23 = (unint64_t)v20[1];
      ++v20;
      v17 = v23;
      goto LABEL_7;
    }
  }
  v15 = v17;
LABEL_17:
  v24 = (char *)v13 - (char *)v11;
  if (v13 == v11)
    v25 = 0;
  else
    v25 = (uint64_t)*v12 + 176 * v14;
  if (v15 != v25)
  {
    v26 = *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6) - *(_DWORD *)(v15 + 24);
    if (v26 >= 0)
      v27 = *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6) - *(_DWORD *)(v15 + 24);
    else
      v27 = *(_DWORD *)(v15 + 24) - *((_DWORD *)v11[(v10 - 1) / 0x17] + 44 * ((v10 - 1) % 0x17) + 6);
    v18 = v27 > a2;
    if (v13 == v11)
      v28 = 0;
    else
      v28 = (char *)*v16 + 176 * (v9 % 0x17);
    sub_100A0DC54(v6, v16, v28, v20, (char *)v15);
    goto LABEL_36;
  }
  a1[69] = 0;
  if (v24 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v11 = (void **)(a1[65] + 8);
      a1[65] = v11;
      v24 = a1[66] - (_QWORD)v11;
    }
    while (v24 > 0x10);
  }
  if (v24 >> 3 == 1)
  {
    v29 = 11;
  }
  else
  {
    if (v24 >> 3 != 2)
    {
      v26 = 0;
      v18 = 0;
      goto LABEL_36;
    }
    v29 = 23;
  }
  v26 = 0;
  v18 = 0;
  a1[68] = v29;
LABEL_36:
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102165788);
  v30 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v31 = a1[69];
    *(_DWORD *)buf = 67109632;
    v43 = v18;
    v44 = 2048;
    v45 = v31;
    v46 = 1024;
    v47 = v26;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "isStepping,%d,stepCountDequeSize,%zu,deltaCount,%d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_102165788);
    v33 = a1[69];
    v38 = 2048;
    v39 = v33;
    v40 = 1024;
    v41 = v26;
    LODWORD(v36) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "isStepping,%d,stepCountDequeSize,%zu,deltaCount,%d", &v37, v36, 67109632);
    v35 = (uint8_t *)v34;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLGnssAssistanceMotion::isStepping(uint32_t, CFTimeInterval)", "%s\n", v34);
    if (v35 != buf)
      free(v35);
  }
  return v18;
}

uint64_t sub_100071A00@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  const char *v8;
  size_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  _QWORD v26[10];
  char v27;
  uint64_t v28;

  sub_100263E50((uint64_t)v24);
  sub_100263F7C(&v25, (uint64_t)"CLTypeLocation, ", 16);
  v4 = sub_100263F7C(&v25, (uint64_t)", type, ", 8);
  v5 = (_QWORD *)std::ostream::operator<<(v4, *(unsigned int *)(a1 + 96));
  v6 = sub_100263F7C(v5, (uint64_t)", ", 2);
  v7 = *(unsigned int *)(a1 + 96);
  if (v7 <= 0xD)
    v8 = (&off_102174018)[v7];
  else
    v8 = "<error>";
  v9 = strlen(v8);
  sub_100263F7C(v6, (uint64_t)v8, v9);
  v10 = sub_100263F7C(&v25, (uint64_t)", latitude, ", 12);
  v11 = *v10;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 12;
  *(uint64_t *)((char *)v10 + *(_QWORD *)(v11 - 24) + 16) = 8;
  *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v10, *(double *)(a1 + 4));
  v12 = sub_100263F7C(&v25, (uint64_t)", longitude, ", 13);
  v13 = *v12;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 24) = 12;
  *(uint64_t *)((char *)v12 + *(_QWORD *)(v13 - 24) + 16) = 8;
  *(_DWORD *)((char *)v12 + *(_QWORD *)(v13 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(v13 - 24) + 8) & 0xFFFFFEFB | 4;
  std::ostream::operator<<(v12, *(double *)(a1 + 12));
  sub_100263F7C(&v25, (uint64_t)", altitude, ", 12);
  v14 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v14 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 28));
  sub_100263F7C(&v25, (uint64_t)", hAcc, ", 8);
  v15 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v15 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 20));
  sub_100263F7C(&v25, (uint64_t)", vAcc, ", 8);
  v16 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v16 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 36));
  sub_100263F7C(&v25, (uint64_t)", course, ", 10);
  v17 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v17 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 60));
  sub_100263F7C(&v25, (uint64_t)", speed, ", 9);
  v18 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v18 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 44));
  sub_100263F7C(&v25, (uint64_t)", timstamp, ", 12);
  v19 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v19 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 76));
  sub_100263F7C(&v25, (uint64_t)", lifespan, ", 12);
  v20 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v20 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(double *)(a1 + 88));
  sub_100263F7C(&v25, (uint64_t)", confidence, ", 14);
  v21 = v24[0];
  *(_QWORD *)((char *)&v24[2] + *(_QWORD *)(v24[0] - 24)) = 2;
  *(_DWORD *)((char *)&v24[1] + *(_QWORD *)(v21 - 24)) |= 4u;
  std::ostream::operator<<(&v25, *(unsigned int *)(a1 + 84));
  std::stringbuf::str(a2, v26);
  *(_QWORD *)((char *)v24
  v25 = v22;
  if (v27 < 0)
    operator delete((void *)v26[8]);
  std::streambuf::~streambuf(v26);
  return std::ios::~ios(&v28);
}

void sub_100071E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100071E60(uint64_t a1)
{
  unsigned __int8 v2;
  double v3;
  BOOL v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  NSObject *v15;
  NSObject *v16;
  double v17;
  double v18;
  const char *v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint8_t *v23;
  const char *v24;
  uint8_t *v25;
  const char *v26;
  int v27;
  double v28;
  int v29;
  double v30;
  double v31;
  double v32;
  int v33;
  double v34;
  __int16 v35;
  double v36;
  __int16 v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  uint8_t buf[4];
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  __int16 v49;
  double v50;
  __int16 v51;
  double v52;

  v2 = atomic_load((unsigned __int8 *)&qword_10230E380);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_10230E380))
  {
    v27 = sub_10075CC24();
    v28 = 1.0;
    if (v27)
    {
      v29 = sub_100241430();
      v28 = 0.1;
      if (v29)
        v28 = 0.0;
    }
    qword_10230E378 = *(_QWORD *)&v28;
    __cxa_guard_release(&qword_10230E380);
  }
  v3 = sub_1001FCBB4();
  v31 = 0.0;
  v32 = 0.0;
  HIDWORD(v30) = 0;
  if (off_1022FF648((uint64_t)&v32, (uint64_t)&v31, (uint64_t)&v30 + 4))
    v4 = HIDWORD(v30) == 1;
  else
    v4 = 0;
  if (v4)
  {
    v8 = sub_1001FCBB4();
    v9 = v8 - v3;
    v10 = v3 + v8;
    v11 = *(double *)&qword_10230E378;
    v12 = fmax(*(double *)&qword_10230E378, 2.0);
    if (v31 > 0.2)
      v11 = v12;
    if (v9 * 0.5 + v31 * 2.0 >= v11)
      v13 = v9 * 0.5 + v31 * 2.0;
    else
      v13 = v11;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v14 = v10 * 0.5;
    v15 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350080;
      v44 = v9;
      v45 = 2050;
      v46 = v13;
      v47 = 2050;
      v48 = v14;
      v49 = 2050;
      v50 = v32;
      v51 = 2050;
      v52 = v31;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "referenceTime,delaySec,%{public}.3f,netUnc,%{public}.3f,applicabilityMct,%{public}.3f,referenceTime,%{public}.3f,%{public}.3f", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v33 = 134350080;
      v34 = v9;
      v35 = 2050;
      v36 = v13;
      v37 = 2050;
      v38 = v14;
      v39 = 2050;
      v40 = v32;
      v41 = 2050;
      v42 = v31;
      LODWORD(v30) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "referenceTime,delaySec,%{public}.3f,netUnc,%{public}.3f,applicabilityMct,%{public}.3f,referenceTime,%{public}.3f,%{public}.3f", &v33, *(_QWORD *)&v30);
      v23 = (uint8_t *)v22;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v22);
      if (v23 != buf)
        free(v23);
    }
    if (v31 <= *(double *)(a1 + 64))
    {
      if (v32 <= 0.0)
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AF638);
        v21 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)buf = 134349312;
          v44 = v32;
          v45 = 2050;
          v46 = v31;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTime before the 0 epoch for iPhoneTime", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 0))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AF638);
          v33 = 134349312;
          v34 = v32;
          v35 = 2050;
          v36 = v31;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTime before the 0 epoch for iPhoneTime", &v33, *(_QWORD *)&v30);
          v7 = (uint8_t *)v26;
          sub_100512490("Generic", 1, 0, 0, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v26);
          goto LABEL_57;
        }
      }
      else
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AF638);
        v20 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134218240;
          v44 = v32;
          v45 = 2048;
          v46 = v31;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "feeding,referenceTime,%.6lf,referenceTimeUnc,%.6lf", buf, 0x16u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_1021AF638);
          v33 = 134218240;
          v34 = v32;
          v35 = 2048;
          v36 = v31;
          LODWORD(v30) = 22;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "feeding,referenceTime,%.6lf,referenceTimeUnc,%.6lf", COERCE_DOUBLE(&v33), v30);
          v25 = (uint8_t *)v24;
          sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v24);
          if (v25 != buf)
            free(v25);
        }
        sub_100072738(a1 + 24, v32, v13, v14);
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v16 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        v17 = *(double *)(a1 + 64);
        *(_DWORD *)buf = 134349568;
        v44 = v32;
        v45 = 2050;
        v46 = v31;
        v47 = 2050;
        v48 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,uncThreshold,%{public}.3lf", buf, 0x20u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021AF638);
        v18 = *(double *)(a1 + 64);
        v33 = 134349568;
        v34 = v32;
        v35 = 2050;
        v36 = v31;
        v37 = 2050;
        v38 = v18;
        LODWORD(v30) = 32;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,uncThreshold,%{public}.3lf", &v33, *(_QWORD *)&v30);
        v7 = (uint8_t *)v19;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v19);
        goto LABEL_57;
      }
    }
  }
  else
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021AF638);
    v5 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134349568;
      v44 = v32;
      v45 = 2050;
      v46 = v31;
      v47 = 1026;
      LODWORD(v48) = HIDWORD(v30);
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTimeReliability,%{public}d", buf, 0x1Cu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021AF638);
      v33 = 134349568;
      v34 = v32;
      v35 = 2050;
      v36 = v31;
      v37 = 1026;
      LODWORD(v38) = HIDWORD(v30);
      LODWORD(v30) = 28;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#Warning not feeding,referenceTime,%{public}.6lf,referenceTimeUnc,%{public}.6lf,referenceTimeReliability,%{public}d", &v33, *(_QWORD *)&v30);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssAssistanceTime::feedAssistanceTime()", "%s\n", v6);
LABEL_57:
      if (v7 != buf)
        free(v7);
    }
  }
}

void sub_100072718(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_10230E380);
  _Unwind_Resume(a1);
}

uint64_t sub_100072738(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v4;
  double v6;
  double v7;
  double v8;

  v8 = a2;
  v6 = a4;
  v7 = a3;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_10025FD1C();
  return (*(uint64_t (**)(uint64_t, double *, double *, double *))(*(_QWORD *)v4 + 48))(v4, &v8, &v7, &v6);
}

void sub_10007277C(_QWORD *a1, double a2, double a3, double a4)
{
  NSObject *v8;
  uint64_t v9;
  _DWORD v10[2];
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  double v16;
  __int16 v17;
  double v18;

  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_102156068);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v10[0] = 68289794;
    v10[1] = 0;
    v11 = 2082;
    v12 = "";
    v13 = 2082;
    v14 = "Injecting time assistance to GNSS platform";
    v15 = 2050;
    v16 = a2;
    v17 = 2050;
    v18 = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"GnssEvent\", \"event\":%{public, location:escape_only}s, \"time\":\"%{public}f\", \"timeunc\":\"%{public}f\"}", (uint8_t *)v10, 0x30u);
  }
  (*(void (**)(_QWORD, double, double, double))(*(_QWORD *)*a1 + 144))(*a1, a2, a3, a4);
  v9 = a1[151];
  if (v9)
    sub_1000728C8(v9, a2, a3, a4);
}

void sub_1000728C8(uint64_t a1, double a2, double a3, double a4)
{
  double v8;
  int v9;
  int v10;
  BOOL v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  NSObject *v17;
  double v18;
  NSObject *v19;
  NSObject *v20;
  const char *v21;
  uint8_t *v22;
  double v23;
  double v24;
  double v25;
  double v26;
  NSObject *v27;
  const char *v28;
  uint8_t *v29;
  const char *v30;
  uint8_t *v31;
  const char *v32;
  uint8_t *v33;
  uint64_t v34;
  double v35;
  double v36;
  int v37;
  double v38;
  __int16 v39;
  double v40;
  __int16 v41;
  double v42;
  __int16 v43;
  double v44;
  __int16 v45;
  double v46;
  __int16 v47;
  double v48;
  uint8_t buf[4];
  double v50;
  __int16 v51;
  double v52;
  __int16 v53;
  double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  double v58;
  __int16 v59;
  double v60;

  v35 = -1.0;
  v36 = -1.0;
  v8 = sub_1001FCBB4();
  v9 = off_1023008D0((uint64_t)&v36, (uint64_t)&v35);
  v10 = v9;
  if (a3 <= 0.0 || (a2 > 0.0 ? (v11 = v9 == 0) : (v11 = 1), v11 || v36 <= 0.0 || v35 <= 0.0))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v20 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67240192;
      LODWORD(v50) = v10 != 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#imag,gti unavailable,%{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v37 = 67240192;
      LODWORD(v38) = v10 != 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,gti unavailable,%{public}d", &v37, 8);
      v22 = (uint8_t *)v21;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v21);
      if (v22 != buf)
        free(v22);
    }
  }
  else
  {
    v12 = sub_1001FCBB4();
    v13 = v12 - v8;
    v14 = v8 + (v12 - v8) * 0.5;
    v35 = v35 + v13;
    v15 = (v36 - a2 - v14 + a4) * (v36 - a2 - v14 + a4);
    v16 = a3 * a3 + v35 * v35;
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021CDF08);
    v17 = qword_1022A0078;
    v18 = v15 / v16;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134350336;
      v50 = v18;
      v51 = 2050;
      v52 = v36;
      v53 = 2050;
      v54 = a2;
      v55 = 2050;
      v56 = v35;
      v57 = 2050;
      v58 = a3;
      v59 = 2050;
      v60 = v13;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#imag,gti consistency,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v37 = 134350336;
      v38 = v18;
      v39 = 2050;
      v40 = v36;
      v41 = 2050;
      v42 = a2;
      v43 = 2050;
      v44 = v35;
      v45 = 2050;
      v46 = a3;
      v47 = 2050;
      v48 = v13;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,gti consistency,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", &v37, 62);
      v29 = (uint8_t *)v28;
      sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v28);
      if (v29 != buf)
        free(v29);
    }
    if (v18 <= 5.0)
    {
      v23 = v18 * 10.0;
      v24 = a3 * 10.0;
      v25 = v35 * 10.0;
      if (a3 * 10.0 + v23 + v35 * 10.0 >= 120.0)
        v26 = a3 * 10.0 + v23 + v35 * 10.0;
      else
        v26 = 120.0;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 134349824;
        v50 = v23;
        v51 = 2050;
        v52 = v24;
        v53 = 2050;
        v54 = v25;
        v55 = 2050;
        v56 = v26;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#imag,gti inflation,%{public}.3f,%{public}.3f,%{public}.3f,result,%{public}.1f", buf, 0x2Au);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF08);
        v37 = 134349824;
        v38 = v23;
        v39 = 2050;
        v40 = v24;
        v41 = 2050;
        v42 = v25;
        v43 = 2050;
        v44 = v26;
        LODWORD(v34) = 42;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#imag,gti inflation,%{public}.3f,%{public}.3f,%{public}.3f,result,%{public}.1f", &v37, v34);
        v33 = (uint8_t *)v32;
        sub_100512490("Generic", 1, 0, 2, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v32);
        if (v33 != buf)
          free(v33);
      }
      *(double *)(a1 + 40) = v36;
      *(double *)(a1 + 48) = v26;
      *(double *)(a1 + 56) = v14;
      *(_BYTE *)(a1 + 64) = *(_BYTE *)(a1 + 74);
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021CDF08);
      v19 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
      {
        *(_DWORD *)buf = 134350336;
        v50 = v18;
        v51 = 2050;
        v52 = v36;
        v53 = 2050;
        v54 = a2;
        v55 = 2050;
        v56 = v35;
        v57 = 2050;
        v58 = a3;
        v59 = 2050;
        v60 = v13;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "#imag,gti inconsistent,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", buf, 0x3Eu);
      }
      if (sub_1001BFF7C(115, 0))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021CDF08);
        v37 = 134350336;
        v38 = v18;
        v39 = 2050;
        v40 = v36;
        v41 = 2050;
        v42 = a2;
        v43 = 2050;
        v44 = v35;
        v45 = 2050;
        v46 = a3;
        v47 = 2050;
        v48 = v13;
        LODWORD(v34) = 62;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#imag,gti inconsistent,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,%{public}.1f,queryDelay,%{public}.4f", &v37, v34);
        v31 = (uint8_t *)v30;
        sub_100512490("Generic", 1, 0, 0, "void CLGnssSimulationAndSpoofingMonitor::injectTimeAssistance(CFAbsoluteTime, CFAbsoluteTime, double)", "%s\n", v30);
        if (v31 != buf)
          free(v31);
      }
      sub_101740774((uint64_t)objc_msgSend(objc_msgSend(*(id *)a1, "silo"), "queue"), (uint64_t)"imag", (uint64_t)"gti inconsistent", 0);
    }
  }
}

void sub_10007306C(uint64_t a1, double a2, double a3, double a4)
{
  uint64_t v8;
  NSObject *v9;
  char *v10;
  NSObject *v11;
  unsigned int v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  _BYTE v25[10];
  double v26;
  uint8_t buf[4];
  _BYTE v28[10];
  double v29;

  if (a2 <= 0.0 || a3 <= 0.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_1021D0798);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134349312;
      *(double *)v28 = a2;
      *(_WORD *)&v28[8] = 2050;
      v29 = a3;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "#gpsd,Invalid,time,%{public}.3lf,timeUncertainty,%{public}.9lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v24 = 134349312;
      *(double *)v25 = a2;
      *(_WORD *)&v25[8] = 2050;
      v26 = a3;
      v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 17, "#gpsd,Invalid,time,%{public}.3lf,timeUncertainty,%{public}.9lf", &v24, 22);
      sub_100512490("Generic", 1, 0, 0, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v10);
      goto LABEL_20;
    }
  }
  else
  {
    v23 = 0;
    sub_100073658((int *)&v23 + 1, &v23, a2);
    v8 = HIDWORD(v23);
    if (HIDWORD(v23) >= dword_102314120)
    {
      v12 = v23;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v13 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)v28 = HIDWORD(v23);
        *(_WORD *)&v28[4] = 1024;
        *(_DWORD *)&v28[6] = v23;
        LOWORD(v29) = 1024;
        *(_DWORD *)((char *)&v29 + 2) = (a3 * 1000.0);
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "#gpsd,feeding,timeAssistance,week,%u,towMs,%u,uncertaintyMs,%u", buf, 0x14u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v24 = 67109632;
        *(_DWORD *)v25 = HIDWORD(v23);
        *(_WORD *)&v25[4] = 1024;
        *(_DWORD *)&v25[6] = v23;
        LOWORD(v26) = 1024;
        *(_DWORD *)((char *)&v26 + 2) = (a3 * 1000.0);
        v21 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "#gpsd,feeding,timeAssistance,week,%u,towMs,%u,uncertaintyMs,%u", &v24, 20, v22);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v21);
        if (v21 != (char *)buf)
          free(v21);
      }
      sub_1000FF154(a1 + 2576);
      v14 = sub_100103BB0(9);
      if ((v14 & 1) == 0)
        sub_10180AC90(v14, v15, v16);
      v17 = *(_DWORD *)(a1 + 2972);
      *(_DWORD *)(a1 + 2596) = 9;
      *(_DWORD *)(a1 + 2972) = v17 | 0x14;
      v18 = *(_QWORD *)(a1 + 2608);
      if (!v18)
        operator new();
      v19 = 604800000000000 * v8 + 1000000 * v12;
      v20 = *(_DWORD *)(v18 + 36);
      *(_QWORD *)(v18 + 8) = v19;
      *(_QWORD *)(v18 + 16) = (unint64_t)(a3 * 1000000000.0);
      *(_DWORD *)(v18 + 36) = v20 | 7;
      *(_QWORD *)(v18 + 24) = (unint64_t)(a4 * 1000000000.0);
      sub_1000FF8D8(a1 + 2176, 2);
      sub_100073648(a1 + 2536, v19, (unint64_t)(a4 * 1000000000.0));
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_1021D0798);
      v9 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67240192;
        *(_DWORD *)v28 = HIDWORD(v23);
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#gpsd,#Warning,invalid,timeTravel,gpsWeek,%{public}u", buf, 8u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_1021D0798);
        v24 = 67240192;
        *(_DWORD *)v25 = HIDWORD(v23);
        v10 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#gpsd,#Warning,invalid,timeTravel,gpsWeek,%{public}u", &v24, 8);
        sub_100512490("Generic", 1, 0, 2, "virtual void CLGnssDaemonDevice::injectTimeAssistance(CFAbsoluteTime, CFTimeInterval, double)", "%s\n", v10);
LABEL_20:
        if (v10 != (char *)buf)
          free(v10);
      }
    }
  }
}

void sub_10007361C()
{
  operator delete();
}

uint64_t sub_100073648(uint64_t result, uint64_t a2, uint64_t a3)
{
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

double sub_100073658(int *a1, _DWORD *a2, double a3)
{
  double v6;
  int v7;
  double result;

  if (qword_102301700 != -1)
    dispatch_once(&qword_102301700, &stru_1021410C8);
  v6 = a3 + 662342400.0 + (double)dword_1022A2878;
  v7 = (int)(v6 / 604800.0);
  *a1 = v7;
  result = (v6 - (double)(604800 * v7)) * 1000.0;
  *a2 = (int)result;
  return result;
}

void sub_100073704(uint64_t a1)
{
  NSObject *v2;
  int v3;
  uint64_t v4;
  int v5;
  std::string *v6;
  double v7;
  NSObject *v8;
  std::string::size_type *v9;
  NSFileManager *v10;
  void **v11;
  NSArray *v12;
  char *v13;
  char *i;
  NSEnumerator *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  int v20;
  unint64_t v21;
  unsigned __int8 v22;
  size_t v23;
  _BYTE *v24;
  NSObject *v25;
  std::string *v26;
  const void *v27;
  char *v29;
  __int128 v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  std::string::size_type v35;
  __int128 v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  int v43;
  std::string *v44;
  __int128 v45;
  int v46;
  const std::string::value_type *v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  void **v51;
  NSObject *v52;
  int v53;
  void **v54;
  int v55;
  void **v56;
  uint64_t v57;
  int v58;
  void **v59;
  int v60;
  void **v61;
  std::string *v62;
  __darwin_time_t tv_sec;
  off_t st_size;
  NSObject *v65;
  void **v66;
  NSObject *v67;
  void **v68;
  void **v69;
  std::string *v70;
  NSObject *v71;
  void **v72;
  NSObject *v73;
  void **v74;
  void **v75;
  NSObject *v76;
  void **v77;
  void **v78;
  std::string *v79;
  void **v80;
  void **v81;
  std::string *v82;
  std::string::size_type size;
  NSObject *v84;
  std::string::size_type v85;
  std::string *v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void *v92[2];
  char v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  timespec __tp;
  void *__p[2];
  uint64_t v99;
  void *v100[2];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _BYTE v104[18];
  unsigned __int8 v105;
  std::string buf;
  char *v107;
  _BYTE v108[10];
  __int16 v109;
  off_t v110;
  stat v111;

  if (clock_gettime(_CLOCK_REALTIME, &__tp))
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v2 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      v3 = *__error();
      LODWORD(buf.__r_.__value_.__l.__data_) = 67240192;
      HIDWORD(buf.__r_.__value_.__r.__words[0]) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,clock_gettime failed,%{public}d", (uint8_t *)&buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v4 = qword_1022A0168;
      v5 = *__error();
      v111.st_dev = 67240192;
      *(_DWORD *)&v111.st_mode = v5;
      v6 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v4, 16, "ProtobufSerializer,pruneLogFiles,clock_gettime failed,%{public}d", &v111, 8);
      sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v6);
LABEL_10:
      if (v6 != &buf)
        free(v6);
      return;
    }
    return;
  }
  v7 = *(double *)(a1 + 104);
  if (v7 >= (double)__tp.tv_sec)
  {
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    v8 = qword_1022A0168;
    if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 134349056;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = __tp.tv_sec;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,timespecNow too small to use,%{public}ld", (uint8_t *)&buf, 0xCu);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(&buf, 0x65CuLL);
      if (qword_1022A0160 != -1)
        dispatch_once(&qword_1022A0160, &stru_1021A2F18);
      v111.st_dev = 134349056;
      *(_QWORD *)&v111.st_mode = __tp.tv_sec;
      v86 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,pruneLogFiles,timespecNow too small to use,%{public}ld", &v111, 12);
      sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v86);
      if (v86 != &buf)
        free(v86);
    }
    v90 = 0;
  }
  else
  {
    v90 = (uint64_t)((double)__tp.tv_sec - v7);
  }
  sub_100074BE8(a1, (uint64_t)&buf);
  v9 = (std::string::size_type *)(a1 + 8);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    size = buf.__r_.__value_.__l.__size_;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (size)
    {
LABEL_22:
      v94 = 0;
      v95 = 0;
      v96 = 0;
      sub_100074BE8(a1, (uint64_t)v92);
      v10 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
      if (v93 >= 0)
        v11 = v92;
      else
        v11 = (void **)v92[0];
      v12 = -[NSFileManager contentsOfDirectoryAtPath:error:](v10, "contentsOfDirectoryAtPath:error:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v11), 0);
      v13 = (char *)v94;
      for (i = v95; i != v13; i -= 24)
      {
        if (*(i - 1) < 0)
          operator delete(*((void **)i - 3));
      }
      v95 = v13;
      *(_OWORD *)v100 = 0u;
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      v15 = -[NSArray reverseObjectEnumerator](v12, "reverseObjectEnumerator");
      v16 = (char *)-[NSEnumerator countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", v100, &v111, 16);
      if (v16)
      {
        v17 = *(_QWORD *)v101;
        do
        {
          v18 = 0;
          do
          {
            if (*(_QWORD *)v101 != v17)
              objc_enumerationMutation(v15);
            v19 = (char *)objc_msgSend(*((id *)v100[1] + (_QWORD)v18), "UTF8String");
            if (v19)
            {
              sub_1015A2E04(v104, v19);
              v20 = *(char *)(a1 + 31);
              if (v20 >= 0)
                v21 = *(unsigned __int8 *)(a1 + 31);
              else
                v21 = *(_QWORD *)(a1 + 16);
              v22 = v105;
              if ((char)v105 < 0)
              {
                if (v21 == -1)
LABEL_218:
                  sub_10035AD9C();
                v24 = *(_BYTE **)v104;
                if (*(_QWORD *)&v104[8] >= v21)
                  v23 = v21;
                else
                  v23 = *(_QWORD *)&v104[8];
              }
              else
              {
                if (v21 == -1)
                  goto LABEL_218;
                if (v105 >= v21)
                  v23 = v21;
                else
                  v23 = v105;
                v24 = v104;
              }
              if (v20 >= 0)
                v27 = (const void *)(a1 + 8);
              else
                v27 = *(const void **)(a1 + 8);
              if (!memcmp(v24, v27, v23) && v23 == v21)
              {
                sub_1015A2E04(__p, v19);
                v29 = v95;
                if ((unint64_t)v95 >= v96)
                {
                  v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v95[-v94] >> 3);
                  v32 = v31 + 1;
                  if (v31 + 1 > 0xAAAAAAAAAAAAAAALL)
                    sub_100259694();
                  if (0x5555555555555556 * ((uint64_t)(v96 - v94) >> 3) > v32)
                    v32 = 0x5555555555555556 * ((uint64_t)(v96 - v94) >> 3);
                  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v96 - v94) >> 3) >= 0x555555555555555)
                    v33 = 0xAAAAAAAAAAAAAAALL;
                  else
                    v33 = v32;
                  *(_QWORD *)v108 = &v96;
                  if (v33)
                    v34 = (char *)sub_1002596A8((uint64_t)&v96, v33);
                  else
                    v34 = 0;
                  v35 = (std::string::size_type)&v34[24 * v31];
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
                  buf.__r_.__value_.__l.__size_ = v35;
                  v107 = &v34[24 * v33];
                  v36 = *(_OWORD *)__p;
                  *(_QWORD *)(v35 + 16) = v99;
                  *(_OWORD *)v35 = v36;
                  __p[1] = 0;
                  v99 = 0;
                  __p[0] = 0;
                  buf.__r_.__value_.__r.__words[2] = v35 + 24;
                  sub_100074D44(&v94, &buf);
                  v37 = v95;
                  sub_100074DB8((uint64_t)&buf);
                  v95 = v37;
                  if (SHIBYTE(v99) < 0)
                    operator delete(__p[0]);
                }
                else
                {
                  v30 = *(_OWORD *)__p;
                  *((_QWORD *)v95 + 2) = v99;
                  *(_OWORD *)v29 = v30;
                  v95 = v29 + 24;
                }
                v22 = v105;
              }
              if ((v22 & 0x80) != 0)
                operator delete(*(void **)v104);
            }
            else
            {
              if (qword_1022A0160 != -1)
                dispatch_once(&qword_1022A0160, &stru_1021A2F18);
              v25 = qword_1022A0168;
              if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "ProtobufSerializer,pruneLogFiles,null filename from reverseEnumerateFiles", (uint8_t *)&buf, 2u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(&buf, 0x65CuLL);
                if (qword_1022A0160 != -1)
                  dispatch_once(&qword_1022A0160, &stru_1021A2F18);
                *(_WORD *)v104 = 0;
                LODWORD(v87) = 2;
                v26 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,pruneLogFiles,null filename from reverseEnumerateFiles", v104, v87);
                sub_100512490("Generic", 1, 0, 0, "void (anonymous namespace)::enumerateFiles(const std::string &, const std::string &, std::vector<std::string> &)", "%s\n", (const char *)v26);
                if (v26 != &buf)
                  free(v26);
              }
            }
            ++v18;
          }
          while (v16 != v18);
          v16 = (char *)-[NSEnumerator countByEnumeratingWithState:objects:count:](v15, "countByEnumeratingWithState:objects:count:", v100, &v111, 16);
        }
        while (v16);
      }
      if (v93 < 0)
        operator delete(v92[0]);
      v38 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v95[-v94] >> 3));
      if (v95 == (char *)v94)
        v39 = 0;
      else
        v39 = v38;
      sub_100213B88(v94, v95, (uint64_t)&buf, v39, 1);
      v42 = v94;
      v41 = v95;
      if ((char *)v94 == v95)
      {
LABEL_204:
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v94;
        sub_100259608((void ***)&buf);
        return;
      }
      v43 = 0;
      v91 = 0;
      *(_QWORD *)&v40 = 136315138;
      v88 = v40;
      v89 = 136315394;
      while (1)
      {
        sub_100074BE8(a1, (uint64_t)&v111);
        v44 = std::string::append((std::string *)&v111, "/");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        buf.__r_.__value_.__r.__words[2] = v44->__r_.__value_.__r.__words[2];
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        v46 = *(char *)(v42 + 23);
        if (v46 >= 0)
          v47 = (const std::string::value_type *)v42;
        else
          v47 = *(const std::string::value_type **)v42;
        if (v46 >= 0)
          v48 = *(unsigned __int8 *)(v42 + 23);
        else
          v48 = *(_QWORD *)(v42 + 8);
        v49 = std::string::append(&buf, v47, v48);
        v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
        *(_QWORD *)&v101 = *((_QWORD *)&v49->__r_.__value_.__l + 2);
        *(_OWORD *)v100 = v50;
        v49->__r_.__value_.__l.__size_ = 0;
        v49->__r_.__value_.__r.__words[2] = 0;
        v49->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          operator delete(buf.__r_.__value_.__l.__data_);
        if (SHIBYTE(v111.st_gid) < 0)
          operator delete(*(void **)&v111.st_dev);
        if ((SBYTE7(v101) & 0x80u) == 0)
          v51 = v100;
        else
          v51 = (void **)v100[0];
        if (stat((const char *)v51, &v111))
        {
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v52 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
          {
            v53 = SBYTE7(v101);
            v54 = (void **)v100[0];
            v55 = *__error();
            if (v53 >= 0)
              v56 = v100;
            else
              v56 = v54;
            LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v56;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 1026;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v55;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "ProtobufSerializer,getFileModificationTime could not stat,%{public}s,%{public}d", (uint8_t *)&buf, 0x12u);
          }
          if (sub_1001BFF7C(115, 0))
          {
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v57 = qword_1022A0168;
            v58 = SBYTE7(v101);
            v59 = (void **)v100[0];
            v60 = *__error();
            if (v58 >= 0)
              v61 = v100;
            else
              v61 = v59;
            *(_DWORD *)v104 = 136446466;
            *(_QWORD *)&v104[4] = v61;
            *(_WORD *)&v104[12] = 1026;
            *(_DWORD *)&v104[14] = v60;
            LODWORD(v87) = 18;
            v62 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, v57, 16, "ProtobufSerializer,getFileModificationTime could not stat,%{public}s,%{public}d", v104, v87);
            sub_100512490("Generic", 1, 0, 0, "BOOL (anonymous namespace)::getFileModificationTimeAndSize(const std::string &, timespec &, int64_t &)", "%s\n", (const char *)v62);
            if (v62 != &buf)
              free(v62);
          }
          goto LABEL_178;
        }
        tv_sec = v111.st_mtimespec.tv_sec;
        st_size = v111.st_size;
        if (qword_1022A0160 != -1)
          dispatch_once(&qword_1022A0160, &stru_1021A2F18);
        v65 = qword_1022A0168;
        if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
        {
          if ((SBYTE7(v101) & 0x80u) == 0)
            v66 = v100;
          else
            v66 = (void **)v100[0];
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v66;
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          v107 = (char *)v90;
          *(_WORD *)v108 = 2048;
          *(_QWORD *)&v108[2] = st_size;
          v109 = 2048;
          v110 = st_size + v91;
          _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,looking at,%s,modTime,%ld,floorTime,%ld,size,%lld,new total,%lld", (uint8_t *)&buf, 0x34u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          if ((SBYTE7(v101) & 0x80u) == 0)
            v78 = v100;
          else
            v78 = (void **)v100[0];
          v111.st_dev = 136316162;
          *(_QWORD *)&v111.st_mode = v78;
          WORD2(v111.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&v111.st_ino + 6) = tv_sec;
          HIWORD(v111.st_gid) = 2048;
          *(_QWORD *)&v111.st_rdev = v90;
          LOWORD(v111.st_atimespec.tv_sec) = 2048;
          *(__darwin_time_t *)((char *)&v111.st_atimespec.tv_sec + 2) = st_size;
          WORD1(v111.st_atimespec.tv_nsec) = 2048;
          *(uint64_t *)((char *)&v111.st_atimespec.tv_nsec + 4) = st_size + v91;
          LODWORD(v87) = 52;
          v79 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,pruneLogFiles,looking at,%s,modTime,%ld,floorTime,%ld,size,%lld,new total,%lld", (const char *)&v111, v87, (_QWORD)v88, *((_QWORD *)&v88 + 1), v89);
          sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v79);
          if (v79 != &buf)
            free(v79);
        }
        if (tv_sec >= v90)
        {
          if (v43 >= *(_DWORD *)(a1 + 120))
          {
            sub_10114E34C((char *)v100);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v73 = qword_1022A0168;
            if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
            {
              if ((SBYTE7(v101) & 0x80u) == 0)
                v74 = v100;
              else
                v74 = (void **)v100[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = v89;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v74;
              WORD2(buf.__r_.__value_.__r.__words[1]) = 1024;
              *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = v43 + 1;
              _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to num files,%s,num files,%d", (uint8_t *)&buf, 0x12u);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_177;
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            if ((SBYTE7(v101) & 0x80u) == 0)
              v75 = v100;
            else
              v75 = (void **)v100[0];
            v111.st_dev = v89;
            *(_QWORD *)&v111.st_mode = v75;
            WORD2(v111.st_ino) = 1024;
            *(_DWORD *)((char *)&v111.st_ino + 6) = v43 + 1;
            v70 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,pruneLogFiles,deleted due to num files,%s,num files,%d", (const char *)&v111, 18);
            sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v70);
          }
          else
          {
            if (st_size)
            {
              if (st_size + v91 > *(_QWORD *)(a1 + 112))
              {
                sub_10114E34C((char *)v100);
                if (qword_1022A0160 != -1)
                  dispatch_once(&qword_1022A0160, &stru_1021A2F18);
                v71 = qword_1022A0168;
                if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
                {
                  if ((SBYTE7(v101) & 0x80u) == 0)
                    v72 = v100;
                  else
                    v72 = (void **)v100[0];
                  LODWORD(buf.__r_.__value_.__l.__data_) = v88;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
                  _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to size,%s", (uint8_t *)&buf, 0xCu);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(&buf, 0x65CuLL);
                  if (qword_1022A0160 != -1)
                    dispatch_once(&qword_1022A0160, &stru_1021A2F18);
                  if ((SBYTE7(v101) & 0x80u) == 0)
                    v81 = v100;
                  else
                    v81 = (void **)v100[0];
                  v111.st_dev = v88;
                  *(_QWORD *)&v111.st_mode = v81;
                  v82 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,pruneLogFiles,deleted due to size,%s", (const char *)&v111);
                  sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v82);
                  if (v82 != &buf)
                    free(v82);
                }
              }
              v91 += st_size;
              goto LABEL_177;
            }
            sub_10114E34C((char *)v100);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            v76 = qword_1022A0168;
            if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
            {
              if ((SBYTE7(v101) & 0x80u) == 0)
                v77 = v100;
              else
                v77 = (void **)v100[0];
              LODWORD(buf.__r_.__value_.__l.__data_) = v88;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v77;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to zero size,%s", (uint8_t *)&buf, 0xCu);
            }
            if (!sub_1001BFF7C(115, 2))
              goto LABEL_177;
            bzero(&buf, 0x65CuLL);
            if (qword_1022A0160 != -1)
              dispatch_once(&qword_1022A0160, &stru_1021A2F18);
            if ((SBYTE7(v101) & 0x80u) == 0)
              v80 = v100;
            else
              v80 = (void **)v100[0];
            v111.st_dev = v88;
            *(_QWORD *)&v111.st_mode = v80;
            v70 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,pruneLogFiles,deleted due to zero size,%s", (const char *)&v111);
            sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v70);
          }
        }
        else
        {
          sub_10114E34C((char *)v100);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          v67 = qword_1022A0168;
          if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_DEBUG))
          {
            if ((SBYTE7(v101) & 0x80u) == 0)
              v68 = v100;
            else
              v68 = (void **)v100[0];
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v68;
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = tv_sec;
            HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
            v107 = (char *)v90;
            _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEBUG, "ProtobufSerializer,pruneLogFiles,deleted due to age,%s,fileTime,%ld,targetTime,%ld", (uint8_t *)&buf, 0x20u);
          }
          if (!sub_1001BFF7C(115, 2))
            goto LABEL_177;
          bzero(&buf, 0x65CuLL);
          if (qword_1022A0160 != -1)
            dispatch_once(&qword_1022A0160, &stru_1021A2F18);
          if ((SBYTE7(v101) & 0x80u) == 0)
            v69 = v100;
          else
            v69 = (void **)v100[0];
          v111.st_dev = 136315650;
          *(_QWORD *)&v111.st_mode = v69;
          WORD2(v111.st_ino) = 2048;
          *(__darwin_ino64_t *)((char *)&v111.st_ino + 6) = tv_sec;
          HIWORD(v111.st_gid) = 2048;
          *(_QWORD *)&v111.st_rdev = v90;
          LODWORD(v87) = 32;
          v70 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 2, "ProtobufSerializer,pruneLogFiles,deleted due to age,%s,fileTime,%ld,targetTime,%ld", (const char *)&v111, v87, (_QWORD)v88);
          sub_100512490("Generic", 1, 0, 2, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v70);
        }
        if (v70 != &buf)
          free(v70);
LABEL_177:
        ++v43;
LABEL_178:
        if (SBYTE7(v101) < 0)
          operator delete(v100[0]);
        v42 += 24;
        if ((char *)v42 == v41)
          goto LABEL_204;
      }
    }
  }
  else if (*((_BYTE *)&buf.__r_.__value_.__s + 23))
  {
    goto LABEL_22;
  }
  if (qword_1022A0160 != -1)
    dispatch_once(&qword_1022A0160, &stru_1021A2F18);
  v84 = qword_1022A0168;
  if (os_log_type_enabled((os_log_t)qword_1022A0168, OS_LOG_TYPE_ERROR))
  {
    v85 = a1 + 8;
    if (*(char *)(a1 + 31) < 0)
      v85 = *v9;
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v85;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "ProtobufSerializer,%{public}s,pruneLogFiles,null path", (uint8_t *)&buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(&buf, 0x65CuLL);
    if (qword_1022A0160 != -1)
      dispatch_once(&qword_1022A0160, &stru_1021A2F18);
    if (*(char *)(a1 + 31) < 0)
      v9 = (std::string::size_type *)*v9;
    v111.st_dev = 136446210;
    *(_QWORD *)&v111.st_mode = v9;
    LODWORD(v87) = 12;
    v6 = (std::string *)_os_log_send_and_compose_impl(2, 0, &buf, 1628, &_mh_execute_header, qword_1022A0168, 16, "ProtobufSerializer,%{public}s,pruneLogFiles,null path", &v111, v87);
    sub_100512490("Generic", 1, 0, 0, "void CLProtobufSerializer::pruneFiles() const", "%s\n", (const char *)v6);
    goto LABEL_10;
  }
}

void sub_100074AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0)
    operator delete(__p);
  a32 = &a27;
  sub_100259608((void ***)&a32);
  _Unwind_Resume(a1);
}

void sub_100074BE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  std::string *p_p;
  const void *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::string __p;

  if (*(char *)(a1 + 103) < 0)
  {
    if (*(_QWORD *)(a1 + 88))
      goto LABEL_3;
LABEL_22:
    if (*(char *)(a1 + 79) < 0)
    {
      sub_100115CE4((_BYTE *)a2, *(void **)(a1 + 56), *(_QWORD *)(a1 + 64));
    }
    else
    {
      *(_OWORD *)a2 = *(_OWORD *)(a1 + 56);
      *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 72);
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 103))
    goto LABEL_22;
LABEL_3:
  if (*(char *)(a1 + 79) >= 0)
    v4 = *(unsigned __int8 *)(a1 + 79);
  else
    v4 = *(_QWORD *)(a1 + 64);
  p_p = &__p;
  sub_100259584((uint64_t)&__p, v4 + 1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (v4)
  {
    if (*(char *)(a1 + 79) >= 0)
      v6 = (const void *)(a1 + 56);
    else
      v6 = *(const void **)(a1 + 56);
    memmove(p_p, v6, v4);
  }
  *(_WORD *)((char *)&p_p->__r_.__value_.__l.__data_ + v4) = 47;
  v7 = *(char *)(a1 + 103);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)(a1 + 80);
  else
    v8 = *(const std::string::value_type **)(a1 + 80);
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(a1 + 103);
  else
    v9 = *(_QWORD *)(a1 + 88);
  v10 = std::string::append(&__p, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)(a2 + 16) = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)a2 = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_100074D28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100074D44(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1002596EC((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100074DB8(uint64_t a1)
{
  sub_100259800(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_100074DEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  size_t v13;
  _QWORD *v14;
  _QWORD *v15;
  size_t v16;
  _QWORD *v17;
  _QWORD *v18;
  size_t v19;
  _QWORD *v20;
  _QWORD *v21;
  size_t v22;
  _QWORD *v23;
  _QWORD *v24;
  size_t v25;
  _QWORD *v26;
  _QWORD *v27;
  size_t v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v41[2];
  uint64_t v42;
  _QWORD v43[10];
  char v44;
  uint64_t v45;

  sub_100263E50((uint64_t)v41);
  v4 = sub_100263F7C(&v42, (uint64_t)"SELECT ", 7);
  v5 = sub_100263F7C(v4, (uint64_t)"MAC", 3);
  v6 = sub_100263F7C(v5, (uint64_t)",", 1);
  v7 = sub_100263F7C(v6, (uint64_t)"Channel", 7);
  v8 = sub_100263F7C(v7, (uint64_t)",", 1);
  v9 = sub_100263F7C(v8, (uint64_t)"Rssi", 4);
  v10 = sub_100263F7C(v9, (uint64_t)",", 1);
  v11 = sub_100263F7C(v10, (uint64_t)"ScanTimestamp", 13);
  v12 = sub_100263F7C(v11, (uint64_t)",", 1);
  v13 = strlen("Timestamp");
  v14 = sub_100263F7C(v12, (uint64_t)"Timestamp", v13);
  v15 = sub_100263F7C(v14, (uint64_t)",", 1);
  v16 = strlen("Latitude");
  v17 = sub_100263F7C(v15, (uint64_t)"Latitude", v16);
  v18 = sub_100263F7C(v17, (uint64_t)",", 1);
  v19 = strlen("Longitude");
  v20 = sub_100263F7C(v18, (uint64_t)"Longitude", v19);
  v21 = sub_100263F7C(v20, (uint64_t)",", 1);
  v22 = strlen("HorizontalAccuracy");
  v23 = sub_100263F7C(v21, (uint64_t)"HorizontalAccuracy", v22);
  v24 = sub_100263F7C(v23, (uint64_t)",", 1);
  v25 = strlen("Altitude");
  v26 = sub_100263F7C(v24, (uint64_t)"Altitude", v25);
  v27 = sub_100263F7C(v26, (uint64_t)",", 1);
  v28 = strlen("VerticalAccuracy");
  v29 = sub_100263F7C(v27, (uint64_t)"VerticalAccuracy", v28);
  v30 = sub_100263F7C(v29, (uint64_t)",", 1);
  v31 = sub_100263F7C(v30, (uint64_t)"LoiType", 7);
  v32 = sub_100263F7C(v31, (uint64_t)" FROM ", 6);
  v35 = *(_QWORD *)(a1 + 232);
  v34 = a1 + 232;
  v33 = v35;
  v36 = *(char *)(v34 + 23);
  if (v36 >= 0)
    v37 = v34;
  else
    v37 = v33;
  if (v36 >= 0)
    v38 = *(unsigned __int8 *)(v34 + 23);
  else
    v38 = *(_QWORD *)(v34 + 8);
  sub_100263F7C(v32, v37, v38);
  std::stringbuf::str(a2, v43);
  *(_QWORD *)((char *)v41
  v42 = v39;
  if (v44 < 0)
    operator delete((void *)v43[8]);
  std::streambuf::~streambuf(v43);
  return std::ios::~ios(&v45);
}

void sub_1000750C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1018B38B4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1000750D8(uint64_t a1, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL4 v6;
  NSObject *v7;
  _BYTE *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  void **v13;
  char *v14;
  char *v15;
  __n128 v17;
  void *v18[2];
  char v19;
  _BYTE __p[12];
  __int16 v21;
  int v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  uint8_t buf[4];
  _BYTE *v28;
  __int16 v29;
  int v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;

  v2 = *(_QWORD **)(a1 + 128);
  v3 = (_QWORD *)(a1 + 136);
  if (v2 == (_QWORD *)(a1 + 136))
    return 0;
  LODWORD(v4) = 0;
  a2.n128_u64[0] = 136315906;
  v17 = a2;
  do
  {
    v5 = sub_1000753C8(v2[10]);
    v6 = sub_1000782F4(v2[10]);
    v4 = (v4 + v6);
    if (v6)
    {
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
      v7 = qword_1022A02D8;
      if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)v2[10] + 16))(__p);
        v8 = __p;
        if (v24 < 0)
          v8 = *(_BYTE **)__p;
        *(_DWORD *)buf = v17.n128_u32[0];
        v28 = v8;
        v29 = 1024;
        v30 = 1;
        v31 = 1024;
        v32 = v4;
        v33 = 2048;
        v34 = v5;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "WIFITILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p", buf, 0x22u);
        if (SHIBYTE(v24) < 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A02D0 != -1)
          dispatch_once(&qword_1022A02D0, &stru_1021A5408);
        v12 = qword_1022A02D8;
        (*(void (**)(void **__return_ptr))(*(_QWORD *)v2[10] + 16))(v18);
        v13 = v18;
        if (v19 < 0)
          v13 = (void **)v18[0];
        *(_DWORD *)__p = v17.n128_u32[0];
        *(_QWORD *)&__p[4] = v13;
        v21 = 1024;
        v22 = 1;
        v23 = 1024;
        v24 = v4;
        v25 = 2048;
        v26 = v5;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v12, 2, "WIFITILE: getNumOfActiveDownloads, tile, %s, is being downloaded, %d, total, %d, download, %p", __p, 34, v17.n128_u32[0], (const void *)v17.n128_u64[1]);
        v15 = v14;
        if (v19 < 0)
          operator delete(v18[0]);
        sub_100512490("Generic", 1, 0, 2, "unsigned int CLWifiTilesManager::getNumOfActiveDownloads()", "%s\n", v15);
        if (v15 != (char *)buf)
          free(v15);
      }
    }
    v9 = (_QWORD *)v2[1];
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = (_QWORD *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        v10 = (_QWORD *)v2[2];
        v11 = *v10 == (_QWORD)v2;
        v2 = v10;
      }
      while (!v11);
    }
    v2 = v10;
  }
  while (v10 != v3);
  return v4;
}

uint64_t sub_1000753C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *(_QWORD *)(a1 + 104);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3;
}

void sub_100075414(uint64_t a1, unsigned int a2, double a3)
{
  _QWORD *v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  __n128 v10;
  char v11;
  NSObject *v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  int v22;
  int v23;
  const char *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  int v28;
  _BOOL4 v29;
  _BOOL4 v30;
  int v31;
  int v32;
  _BOOL4 v33;
  _BOOL4 v34;
  const char *v35;
  char *v36;
  _BOOL4 v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  int v41;
  int v42;
  NSObject *v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  NSObject *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  id v61;
  uint64_t *v62;
  int v63;
  NSObject *v64;
  _BYTE *v65;
  char *v66;
  NSObject *v67;
  double v68;
  double v69;
  int v70;
  id v71;
  _QWORD *v72;
  _QWORD *v73;
  BOOL v74;
  uint64_t v75;
  const char *v76;
  char *v77;
  uint64_t v78;
  _BYTE *v79;
  char *v80;
  char *v81;
  uint64_t v82;
  double v83;
  double v84;
  int v85;
  id v86;
  const char *v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  int v91;
  int v92;
  NSObject *v93;
  const char *v94;
  NSObject *v95;
  const char *v96;
  uint64_t v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  const char *v105;
  uint64_t v106;
  _BYTE *v107;
  char *v108;
  char *v109;
  int v110;
  int v111;
  const char *v112;
  char *v113;
  int v114;
  int v115;
  const char *v116;
  const char *v117;
  uint64_t v118;
  int v119;
  unsigned int v120;
  char v121;
  char v122;
  int v123;
  unsigned int v124;
  __int16 v125;
  _BYTE *v126;
  _BYTE v127[38];
  __int16 v128;
  int v129;
  __int16 v130;
  int v131;
  _BYTE buf[38];
  __int16 v133;
  int v134;
  __int16 v135;
  int v136;

  LODWORD(v6) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 32))(*(_QWORD *)(a1 + 448));
  v7 = *(_DWORD *)(a1 + 408);
  v8 = &qword_1022A0000;
  v9 = &qword_1022A0000;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 16))(*(_QWORD *)(a1 + 448)) & 1) == 0)
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v15 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, wifi off - no tile downloads", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      *(_WORD *)v127 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WIFITILE: checkDownloadSchedule, wifi off - no tile downloads", v127, 2);
      v17 = (char *)v16;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v16);
      goto LABEL_213;
    }
    goto LABEL_75;
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 48))(*(_QWORD *)(a1 + 448)) & 1) == 0)
  {
    if (qword_1022A0050 != -1)
LABEL_196:
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v18 = v9[11];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, location services disabled - no tile downloads", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[10] != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      v19 = v9[11];
      *(_WORD *)v127 = 0;
      LODWORD(v118) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v19, 2, "WIFITILE: checkDownloadSchedule, location services disabled - no tile downloads", v127, v118);
      v17 = (char *)v20;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v20);
LABEL_213:
      if (v17 != buf)
        free(v17);
    }
LABEL_75:
    if (v8[10] != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v43 = v9[11];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 16))(*(_QWORD *)(a1 + 448));
      v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 48))(*(_QWORD *)(a1 + 448));
      v46 = *(unsigned __int8 *)(a1 + 217);
      v47 = *(unsigned __int8 *)(a1 + 216);
      v48 = *(unsigned __int8 *)(a1 + 420);
      v49 = *(_DWORD *)(a1 + 408);
      v50 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)buf = 67241984;
      *(_DWORD *)&buf[4] = v44;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v45;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v46;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v47;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = v48;
      *(_WORD *)&buf[32] = 1026;
      *(_DWORD *)&buf[34] = v49;
      v133 = 1026;
      v134 = v50;
      v135 = 1026;
      v136 = (int)v6;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "WIFITILE: checkDownloadSchedule, skip, wifion, %{public}d, ls, %{public}d, indexed, %{public}d, protection, %{public}d, lockdisable, %{public}d, reach, %{public}d, companion, %{public}d, broadband, %{public}d", buf, 0x32u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v8[10] != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      v97 = v9[11];
      v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 16))(*(_QWORD *)(a1 + 448));
      v99 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 48))(*(_QWORD *)(a1 + 448));
      v100 = *(unsigned __int8 *)(a1 + 217);
      v101 = *(unsigned __int8 *)(a1 + 216);
      v102 = *(unsigned __int8 *)(a1 + 420);
      v103 = *(_DWORD *)(a1 + 408);
      v104 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)v127 = 67241984;
      *(_DWORD *)&v127[4] = v98;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v99;
      *(_WORD *)&v127[14] = 1026;
      *(_DWORD *)&v127[16] = v100;
      *(_WORD *)&v127[20] = 1026;
      *(_DWORD *)&v127[22] = v101;
      *(_WORD *)&v127[26] = 1026;
      *(_DWORD *)&v127[28] = v102;
      *(_WORD *)&v127[32] = 1026;
      *(_DWORD *)&v127[34] = v103;
      v128 = 1026;
      v129 = v104;
      v130 = 1026;
      v131 = (int)v6;
      LODWORD(v118) = 50;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v97, 0, "WIFITILE: checkDownloadSchedule, skip, wifion, %{public}d, ls, %{public}d, indexed, %{public}d, protection, %{public}d, lockdisable, %{public}d, reach, %{public}d, companion, %{public}d, broadband, %{public}d", v127, v118);
      v36 = (char *)v105;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v105);
      goto LABEL_193;
    }
    return;
  }
  if (!*(_BYTE *)(a1 + 217))
  {
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v21 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %{public}d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      v23 = *(unsigned __int8 *)(a1 + 216);
      *(_DWORD *)v127 = 67240192;
      *(_DWORD *)&v127[4] = v23;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 2, "WIFITILE: checkDownloadSchedule, index is not available until first unlock, fDataProtectionEnabled, %{public}d", v127, 8);
      v17 = (char *)v24;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v24);
      goto LABEL_213;
    }
    goto LABEL_75;
  }
  if (!*(_DWORD *)(a1 + 408) && !*(_BYTE *)(a1 + 412))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v40 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v41 = *(_DWORD *)(a1 + 408);
      v42 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)buf = 67240448;
      *(_DWORD *)&buf[4] = v41;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v42;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %{public}d, companion, %{public}d", buf, 0xEu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v114 = *(_DWORD *)(a1 + 408);
      v115 = *(unsigned __int8 *)(a1 + 412);
      *(_DWORD *)v127 = 67240448;
      *(_DWORD *)&v127[4] = v114;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v115;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, no data connectivity, avoiding downloads, reachability, %{public}d, companion, %{public}d", v127, 14);
      v17 = (char *)v116;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v116);
      goto LABEL_213;
    }
    goto LABEL_75;
  }
  if (v7 == 1)
    v11 = (char)v6;
  else
    v11 = 1;
  if ((v11 & 1) == 0 && !*(_BYTE *)(a1 + 412))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v38 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, no download on none broadband cellular connections", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_WORD *)v127 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, no download on none broadband cellular connections", v127, 2);
      v17 = (char *)v39;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v39);
      goto LABEL_213;
    }
    goto LABEL_75;
  }
  v120 = sub_1000750D8(a1, v10);
  if (v120 >= 2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v12 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 67240192;
      *(_DWORD *)&buf[4] = v120;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, not scheduling more", buf, 8u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_DWORD *)v127 = 67240192;
      *(_DWORD *)&v127[4] = v120;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, not scheduling more", v127, 8);
      v14 = (char *)v13;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v13);
LABEL_218:
      if (v14 != buf)
        free(v14);
      goto LABEL_50;
    }
    goto LABEL_50;
  }
  if (*(_BYTE *)(a1 + 192) && *(_BYTE *)(a1 + 160))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v25 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, both download requests are already in use", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_WORD *)v127 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, both download requests are already in use", v127, 2);
      v14 = (char *)v117;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v117);
      goto LABEL_218;
    }
LABEL_50:
    if (qword_1022A0050 != -1)
      dispatch_once(&qword_1022A0050, &stru_1021A5428);
    v26 = qword_1022A0058;
    if (os_log_type_enabled((os_log_t)qword_1022A0058, OS_LOG_TYPE_DEFAULT))
    {
      v27 = *(unsigned __int8 *)(a1 + 192);
      v28 = *(unsigned __int8 *)(a1 + 160);
      v29 = *(_QWORD *)(a1 + 176) == 0;
      v30 = *(_QWORD *)(a1 + 208) == 0;
      *(_DWORD *)buf = 67241216;
      *(_DWORD *)&buf[4] = v120;
      *(_WORD *)&buf[8] = 1026;
      *(_DWORD *)&buf[10] = v27;
      *(_WORD *)&buf[14] = 1026;
      *(_DWORD *)&buf[16] = v28;
      *(_WORD *)&buf[20] = 1026;
      *(_DWORD *)&buf[22] = v29;
      *(_WORD *)&buf[26] = 1026;
      *(_DWORD *)&buf[28] = v30;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "WIFITILE: checkDownloadSchedule, skip, active, %{public}d, inprogress, %{public}d, %{public}d, shutdown, %{public}d, %{public}d", buf, 0x20u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0050 != -1)
        dispatch_once(&qword_1022A0050, &stru_1021A5428);
      v31 = *(unsigned __int8 *)(a1 + 192);
      v32 = *(unsigned __int8 *)(a1 + 160);
      v33 = *(_QWORD *)(a1 + 176) == 0;
      v34 = *(_QWORD *)(a1 + 208) == 0;
      *(_DWORD *)v127 = 67241216;
      *(_DWORD *)&v127[4] = v120;
      *(_WORD *)&v127[8] = 1026;
      *(_DWORD *)&v127[10] = v31;
      *(_WORD *)&v127[14] = 1026;
      *(_DWORD *)&v127[16] = v32;
      *(_WORD *)&v127[20] = 1026;
      *(_DWORD *)&v127[22] = v33;
      *(_WORD *)&v127[26] = 1026;
      *(_DWORD *)&v127[28] = v34;
      LODWORD(v118) = 32;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0058, 0, "WIFITILE: checkDownloadSchedule, skip, active, %{public}d, inprogress, %{public}d, %{public}d, shutdown, %{public}d, %{public}d", v127, v118);
      v36 = (char *)v35;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v35);
LABEL_193:
      if (v36 != buf)
        free(v36);
      return;
    }
    return;
  }
  if (!*(_QWORD *)(a1 + 176) && !*(_QWORD *)(a1 + 208))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v95 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_INFO, "WIFITILE: checkDownloadSchedule, both download requests null, shutdown?", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_WORD *)v127 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 1, "WIFITILE: checkDownloadSchedule, both download requests null, shutdown?", v127, 2);
      v14 = (char *)v96;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v96);
      goto LABEL_218;
    }
    goto LABEL_50;
  }
  v37 = *(int *)(a1 + 408) > 1 || *(_BYTE *)(a1 + 412) != 0;
  v119 = v37;
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v51 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    sub_100071A00(a1 + 232, buf);
    v52 = buf[23] >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)v127 = 67240451;
    *(_DWORD *)&v127[4] = a2;
    *(_WORD *)&v127[8] = 2081;
    *(_QWORD *)&v127[10] = v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, priority, %{public}d, lastLocation, %{private}s", v127, 0x12u);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v106 = qword_1022A0048;
    sub_100071A00(a1 + 232, v127);
    if (v127[23] >= 0)
      v107 = v127;
    else
      v107 = *(_BYTE **)v127;
    v123 = 67240451;
    v124 = a2;
    v125 = 2081;
    v126 = v107;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v106, 2, "WIFITILE: checkDownloadSchedule, priority, %{public}d, lastLocation, %{private}s", &v123, 18);
    v109 = v108;
    if ((v127[23] & 0x80000000) != 0)
      operator delete(*(void **)v127);
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v109);
    if (v109 != buf)
      free(v109);
  }
  v6 = *(_QWORD **)(a1 + 128);
  if (v6 != (_QWORD *)(a1 + 136))
  {
    while (1)
    {
      if (*(_BYTE *)(a1 + 160) && *(_BYTE *)(a1 + 192))
        goto LABEL_167;
      v53 = v6[10];
      v9 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
      v122 = 0;
      v122 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(a1, v53);
      if (*(_DWORD *)(v53 + 48))
      {
        sub_101944768();
        __break(1u);
        goto LABEL_196;
      }
      if (sub_1000782F4(v53))
        break;
      if (!sub_100077820(v53, v119, *((float *)v9 + 32), a3))
      {
        v54 = 65;
        goto LABEL_139;
      }
      v121 = 0;
      v55 = sub_1011AF350(a1, (_BYTE *)v53);
      if (v55 == 2)
      {
        v56 = a1 + 184;
        if (!a2)
        {
          v56 = a1 + 184;
          if (!v121)
          {
            v54 = 76;
            goto LABEL_139;
          }
        }
      }
      else
      {
        if (v55 != 1)
        {
          v54 = 67;
          goto LABEL_139;
        }
        v121 = 1;
        v56 = a1 + 152;
      }
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v57 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        v58 = *(_QWORD *)v56;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, chose, downloadState, %{public}s", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v75 = *(_QWORD *)v56;
        *(_DWORD *)v127 = 136446210;
        *(_QWORD *)&v127[4] = v75;
        LODWORD(v118) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, chose, downloadState, %{public}s", v127, v118);
        v77 = (char *)v76;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v76);
        if (v77 != buf)
          free(v77);
      }
      v59 = *(_QWORD *)(v56 + 24);
      *(_BYTE *)(v59 + 80) = v121;
      *(_BYTE *)(v59 + 81) = 1;
      if (*((char *)v9 + 79) >= 0)
        v60 = v9 + 7;
      else
        v60 = (uint64_t *)v9[7];
      v8 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v60);
      if (!*((_BYTE *)v9 + 80))
      {
        v61 = +[GEOCountryConfiguration sharedConfiguration](GEOCountryConfiguration, "sharedConfiguration");
        if (*((char *)v9 + 111) >= 0)
          v62 = v9 + 11;
        else
          v62 = (uint64_t *)v9[11];
        v8 = (uint64_t *)objc_msgSend(v61, "defaultForKey:defaultValue:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v62), v8);
      }
      sub_1015A2E04(buf, (char *)objc_msgSend(v8, "UTF8String"));
      v63 = sub_100FA0AC4(v53, (uint64_t)buf, *(_QWORD *)(v56 + 24));
      if ((buf[23] & 0x80000000) != 0)
        operator delete(*(void **)buf);
      if (v63)
      {
        *(_BYTE *)(v56 + 8) = 1;
        *(double *)(v56 + 16) = a3;
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        ++v120;
        v64 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v53 + 16))(buf, v53);
          v65 = buf;
          if (buf[23] < 0)
            v65 = *(_BYTE **)buf;
          *(_DWORD *)v127 = 67240451;
          *(_DWORD *)&v127[4] = v120;
          *(_WORD *)&v127[8] = 2081;
          *(_QWORD *)&v127[10] = v65;
          _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %{public}d, tile, %{private}s", v127, 0x12u);
          if ((buf[23] & 0x80000000) != 0)
            operator delete(*(void **)buf);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v78 = qword_1022A0048;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v53 + 16))(v127, v53);
          v79 = v127;
          if (v127[23] < 0)
            v79 = *(_BYTE **)v127;
          v123 = 67240451;
          v124 = v120;
          v125 = 2081;
          v126 = v79;
          LODWORD(v118) = 18;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v78, 2, "WIFITILE: checkDownloadSchedule, started downloading, numOfActiveDownloads, %{public}d, tile, %{private}s", &v123, v118);
          v81 = v80;
          if ((v127[23] & 0x80000000) != 0)
            operator delete(*(void **)v127);
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v81);
          if (v81 != buf)
            free(v81);
        }
        (*(void (**)(uint64_t *))(v9[29] + 16))(v9 + 29);
        ++*((_DWORD *)v9 + 70);
        (*(void (**)(uint64_t *))(v9[29] + 24))(v9 + 29);
        sub_1015A2E04(buf, "startDownloading");
        sub_100CDC4CC((uint64_t)(v9 + 29), (uint64_t *)buf, *(_DWORD *)(a1 + 408));
        if ((buf[23] & 0x80000000) != 0)
          operator delete(*(void **)buf);
        if (sub_1001DFAE8())
        {
          sub_100119F3C(buf);
          v66 = (char *)(v53 + 8);
          if (*(char *)(v53 + 31) < 0)
            v66 = *(char **)v66;
          sub_1005285B4((uint64_t)buf, "getTile", v66);
          sub_10011B47C((uint64_t)buf, "protection", (_BYTE *)(a1 + 216));
          sub_10011B47C((uint64_t)buf, "isCurrentTile", &v122);
          sub_10011B47C((uint64_t)buf, "isAllowCellular", &v121);
          sub_1001DFAF4((uint64_t)buf, (uint64_t)"locationd");
          sub_10011A5A8(buf);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021A53E8);
        v67 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v68 = sub_1001C087C(v53 + 48);
          v69 = sub_1001C0858(v53 + 48);
          v70 = *(_DWORD *)(a1 + 408);
          v71 = objc_msgSend(v8, "UTF8String");
          *(_DWORD *)buf = 134284291;
          *(double *)&buf[4] = v68;
          *(_WORD *)&buf[12] = 2049;
          *(double *)&buf[14] = v69;
          *(_WORD *)&buf[22] = 1026;
          *(_DWORD *)&buf[24] = v70;
          *(_WORD *)&buf[28] = 2081;
          *(_QWORD *)&buf[30] = v71;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", buf, 0x26u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_1021A53E8);
          v82 = qword_1022A0048;
          v83 = sub_1001C087C(v53 + 48);
          v84 = sub_1001C0858(v53 + 48);
          v85 = *(_DWORD *)(a1 + 408);
          v86 = objc_msgSend(v8, "UTF8String");
          *(_DWORD *)v127 = 134284291;
          *(double *)&v127[4] = v83;
          *(_WORD *)&v127[12] = 2049;
          *(double *)&v127[14] = v84;
          *(_WORD *)&v127[22] = 1026;
          *(_DWORD *)&v127[24] = v85;
          *(_WORD *)&v127[28] = 2081;
          *(_QWORD *)&v127[30] = v86;
          LODWORD(v118) = 38;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v82, 0, "@TileReq, wifi, start, llsw, %{private}.2lf, %{private}.2lf, reach, %{public}d, url, %{private}s", v127, v118);
          v88 = (char *)v87;
          sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v87);
          if (v88 != buf)
            free(v88);
        }
        sub_1000783C8(v53, 68);
        if (v120 > 1)
          goto LABEL_167;
      }
LABEL_140:
      v72 = (_QWORD *)v6[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD *)v6[2];
          v74 = *v73 == (_QWORD)v6;
          v6 = v73;
        }
        while (!v74);
      }
      v6 = v73;
      if (v73 == (_QWORD *)(a1 + 136))
        goto LABEL_167;
    }
    v54 = 80;
LABEL_139:
    sub_1000783C8(v53, v54);
    goto LABEL_140;
  }
LABEL_167:
  v89 = *(_QWORD *)(a1 + 144);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021A53E8);
  v90 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    v91 = *(unsigned __int8 *)(a1 + 160);
    v92 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)buf = 67240960;
    *(_DWORD *)&buf[4] = v120;
    *(_WORD *)&buf[8] = 2050;
    *(_QWORD *)&buf[10] = v89;
    *(_WORD *)&buf[18] = 1026;
    *(_DWORD *)&buf[20] = v91;
    *(_WORD *)&buf[24] = 1026;
    *(_DWORD *)&buf[26] = v92;
    _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, tilesToDownload, %{public}lu, small, %{public}d, large, %{public}d", buf, 0x1Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v110 = *(unsigned __int8 *)(a1 + 160);
    v111 = *(unsigned __int8 *)(a1 + 192);
    *(_DWORD *)v127 = 67240960;
    *(_DWORD *)&v127[4] = v120;
    *(_WORD *)&v127[8] = 2050;
    *(_QWORD *)&v127[10] = v89;
    *(_WORD *)&v127[18] = 1026;
    *(_DWORD *)&v127[20] = v110;
    *(_WORD *)&v127[24] = 1026;
    *(_DWORD *)&v127[26] = v111;
    LODWORD(v118) = 30;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, numOfActiveDownloads, %{public}d, tilesToDownload, %{public}lu, small, %{public}d, large, %{public}d", v127, v118);
    v113 = (char *)v112;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v112);
    if (v113 != buf)
      free(v113);
  }
  if (!*(_BYTE *)(a1 + 160) && !*(_BYTE *)(a1 + 192))
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v93 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEBUG, "WIFITILE: checkDownloadSchedule, NoActiveDownloads", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      *(_WORD *)v127 = 0;
      LODWORD(v118) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "WIFITILE: checkDownloadSchedule, NoActiveDownloads", v127, v118);
      v36 = (char *)v94;
      sub_100512490("Generic", 1, 0, 2, "void CLWifiTilesManager::checkDownloadSchedule(DownloadPriority, CFAbsoluteTime)", "%s\n", v94);
      goto LABEL_193;
    }
  }
}

void sub_100076FEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100077034(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  _BOOL4 v7;
  double v8;
  double v9;
  uint64_t v10;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  NSObject *v20;
  int v21;
  _BYTE *v22;
  uint64_t v24;
  int v25;
  void *v26;
  char *v27;
  char *v28;
  double v29;
  int v30;
  void *v31;
  int v32;
  int v33;
  char v34;
  _BYTE __p[12];
  __int16 v36;
  double v37;
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  _BOOL4 v41;
  __int16 v42;
  int v43;
  __int16 v44;
  int v45;
  __int16 v46;
  _BOOL4 v47;
  __int16 v48;
  void *v49;
  uint8_t buf[4];
  double v51;
  __int16 v52;
  double v53;
  __int16 v54;
  _BOOL4 v55;
  __int16 v56;
  _BOOL4 v57;
  __int16 v58;
  int v59;
  __int16 v60;
  int v61;
  __int16 v62;
  _BOOL4 v63;
  __int16 v64;
  _BYTE *v65;

  v10 = a2 + 48;
  if (*(_DWORD *)(a2 + 48))
  {
    sub_101944A38();
    __break(1u);
LABEL_25:
    dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    goto LABEL_16;
  }
  v2 = a2;
  v12 = (*(double (**)(_QWORD))(**(_QWORD **)(a1 + 448) + 56))(*(_QWORD *)(a1 + 448));
  v13 = *(double *)(a1 + 308);
  v14 = *(double *)(a1 + 252);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  v15 = (*(double (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2) / 20.0;
  v16 = fmin(fmax(v15, (*(double (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2) / 20.0), 0.01);
  v17 = *(double *)(a1 + 236);
  v8 = v17 - sub_1001C087C(v10);
  v18 = *(double *)(a1 + 244);
  v9 = v18 - sub_1001C0858(v10);
  v5 = v8 >= -v16 && v8 <= v16 + (*(double (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  v19 = v12 - v13;
  v6 = v9 >= -v16 && v9 <= v16 + (*(double (**)(uint64_t))(*(_QWORD *)v2 + 64))(v2);
  v7 = v19 < *(double *)(v4 + 136) && v14 > 0.0;
  if (v7 && *(double *)(a1 + 252) <= 3000.0)
    v3 = v5 & v6;
  else
    v3 = 0;
  if (qword_1022A02D0 != -1)
    goto LABEL_25;
LABEL_16:
  v20 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    v21 = *(unsigned __int8 *)(v4 + 177);
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(__p, v2);
    v22 = v38 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 134219778;
    v51 = v8;
    v52 = 2048;
    v53 = v9;
    v54 = 1024;
    v55 = v5;
    v56 = 1024;
    v57 = v6;
    v58 = 1024;
    v59 = v3;
    v60 = 1024;
    v61 = v21;
    v62 = 1024;
    v63 = v7;
    v64 = 2080;
    v65 = v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "WIFITILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s", buf, 0x3Eu);
    if (SHIBYTE(v38) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v24 = qword_1022A02D8;
    v25 = *(unsigned __int8 *)(v4 + 177);
    (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 16))(&v31, v2);
    if (v34 >= 0)
      v26 = &v31;
    else
      v26 = v31;
    *(_DWORD *)__p = 134219778;
    *(double *)&__p[4] = v8;
    v36 = 2048;
    v37 = v9;
    v38 = 1024;
    v39 = v5;
    v40 = 1024;
    v41 = v6;
    v42 = 1024;
    v43 = v3;
    v44 = 1024;
    v45 = v25;
    v46 = 1024;
    v47 = v7;
    v48 = 2080;
    v49 = v26;
    LODWORD(v29) = 62;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v24, 2, "WIFITILE: isCurrentTile, degreesFromCornerLat, %.8lf, degreesFromCornerLon, %.8lf, inside, %d, %d, isCurrentTile, %d, %d, isCurrentLocationKnown, %d, %s", COERCE_DOUBLE(__p), v29, v30, (_DWORD)v31, v32, v33);
    v28 = v27;
    if (v34 < 0)
      operator delete(v31);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLWifiTilesManager::isCurrentTile(CLTileFile *)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
  return v3;
}

double sub_100077464()
{
  return 0.05;
}

uint64_t sub_100077470(uint64_t a1)
{
  uint64_t result;
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  const char *v6;
  uint8_t *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  const char *v16;

  result = sub_1001CE20C((_QWORD *)(a1 + 512), 0);
  if (!result)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A53E8);
    v2 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67174657;
      v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "WifiTile, invalid tileType, %{private}d, #CloneMe", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A53E8);
      v8[0] = 67174657;
      v8[1] = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "WifiTile, invalid tileType, %{private}d, #CloneMe", v8, 8);
      v7 = (uint8_t *)v6;
      sub_100512490("Generic", 1, 0, 0, "virtual CLTilesSet &CLWifiTilesManager::getTilesSet()", "%s\n", v6);
      if (v7 != buf)
        free(v7);
    }
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "assert";
      v15 = 2081;
      v16 = "false";
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    }
    v4 = qword_1022A02D8;
    if (os_signpost_enabled((os_log_t)qword_1022A02D8))
    {
      *(_DWORD *)buf = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "assert";
      v15 = 2081;
      v16 = "false";
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Assertion failed", "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_1021A5408);
    }
    v5 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 68289539;
      v10 = 0;
      v11 = 2082;
      v12 = "";
      v13 = 2082;
      v14 = "assert";
      v15 = 2081;
      v16 = "false";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"Assertion failed\", \"event\":%{public, location:escape_only}s, \"condition\":%{private, location:escape_only}s}", buf, 0x26u);
    }
    abort_report_np("%s:%d: assertion failure in %s", "/Library/Caches/com.apple.xbs/Sources/CoreLocation/Daemon/Positioning/Tiles/CLWifiTilesManager.mm", 1731, "getTilesSet");
  }
  return result;
}

BOOL sub_100077820(uint64_t a1, int a2, float a3, double a4)
{
  double v8;
  double v9;
  _BOOL4 v10;
  double v11;
  double v12;
  const std::string::value_type *v13;
  _BOOL4 v14;
  _BOOL8 v16;
  NSObject *v17;
  _BYTE *v18;
  double v19;
  int v20;
  _BOOL8 v21;
  _BOOL4 v22;
  _BOOL4 v23;
  NSObject *v24;
  _BYTE *v25;
  NSObject *v26;
  _BYTE *v27;
  NSObject *v28;
  const char *v29;
  double v30;
  double v31;
  int v32;
  _BOOL4 v33;
  std::string *v34;
  uint64_t v36;
  const char *v37;
  double v38;
  double v39;
  int v40;
  _BOOL4 v41;
  std::string *v42;
  const char *v43;
  char *v44;
  uint64_t v45;
  _BYTE *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  _BYTE *v50;
  double v51;
  int v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _BYTE *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  std::string v60;
  _BYTE __p[12];
  __int16 v62;
  double v63;
  __int16 v64;
  double v65;
  __int16 v66;
  int v67;
  __int16 v68;
  _BOOL4 v69;
  __int16 v70;
  double v71;
  __int16 v72;
  _BOOL4 v73;
  __int16 v74;
  _BOOL4 v75;
  __int16 v76;
  _BOOL4 v77;
  __int16 v78;
  _BOOL4 v79;
  __int16 v80;
  std::string *v81;
  _BYTE v82[12];
  __int16 v83;
  double v84;
  char v85;
  _BYTE buf[12];
  __int16 v87;
  double v88;
  __int16 v89;
  double v90;
  __int16 v91;
  int v92;
  __int16 v93;
  _BOOL4 v94;
  __int16 v95;
  double v96;
  __int16 v97;
  _BOOL4 v98;
  __int16 v99;
  _BOOL4 v100;
  __int16 v101;
  _BOOL4 v102;
  __int16 v103;
  _BOOL4 v104;
  __int16 v105;
  std::string *v106;

  memset(&v60, 0, sizeof(v60));
  v8 = *(double *)(a1 + 160);
  v9 = *(double *)&qword_1022FC588;
  v10 = sub_100078344(*(_QWORD *)(a1 + 96), a4, *(double *)&qword_1022FC588);
  v11 = *(double *)&qword_1022FC590;
  v12 = vabdd_f64(a4, v8);
  if (sub_1000782F4(a1))
  {
    v13 = "InProgress";
LABEL_48:
    std::string::assign(&v60, v13);
    LODWORD(v16) = 0;
    v21 = 0;
    goto LABEL_49;
  }
  if (*(_BYTE *)(a1 + 168))
  {
LABEL_4:
    v14 = sub_1001C94A8(a1);
    if (v12 >= v11 && v14)
    {
      v16 = sub_100FA0798(a1, a2, a4, a3);
      if (v16)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v17 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
          v18 = v64 >= 0 ? __p : *(_BYTE **)__p;
          v19 = vabdd_f64(a4, *(double *)(a1 + 176));
          v20 = *(_DWORD *)(a1 + 200);
          *(_DWORD *)buf = 136381187;
          *(_QWORD *)&buf[4] = v18;
          v87 = 2050;
          v88 = v19;
          v89 = 1024;
          LODWORD(v90) = v20;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, expirationAge, %d", buf, 0x1Cu);
          if (SHIBYTE(v64) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          v49 = qword_1022A0048;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v82, a1);
          if (v85 >= 0)
            v50 = v82;
          else
            v50 = *(_BYTE **)v82;
          v51 = vabdd_f64(a4, *(double *)(a1 + 176));
          v52 = *(_DWORD *)(a1 + 200);
          *(_DWORD *)__p = 136381187;
          *(_QWORD *)&__p[4] = v50;
          v62 = 2050;
          v63 = v51;
          v64 = 1024;
          LODWORD(v65) = v52;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v49, 2, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, expirationAge, %d", __p, 28);
          v54 = v53;
          if (v85 < 0)
            operator delete(*(void **)v82);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v54);
          if (v54 != buf)
            free(v54);
        }
      }
      std::string::assign(&v60, "Aged");
      v21 = v16;
      goto LABEL_49;
    }
    if (*(_BYTE *)(a1 + 168) && !sub_1001C94A8(a1))
    {
      v21 = v12 >= 1209600.0;
      if (v12 >= 1209600.0)
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_102197380);
        v26 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
          v27 = v64 >= 0 ? __p : *(_BYTE **)__p;
          *(_DWORD *)buf = 136381187;
          *(_QWORD *)&buf[4] = v27;
          v87 = 2050;
          v88 = v12;
          v89 = 1026;
          LODWORD(v90) = 1209600;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, sinceLastDownload, %{public}.1lf, %{public}d, needs to be refreshed, TileDoesNotExistOnTheServer", buf, 0x1Cu);
          if (SHIBYTE(v64) < 0)
            operator delete(*(void **)__p);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0040 != -1)
            dispatch_once(&qword_1022A0040, &stru_102197380);
          v55 = qword_1022A0048;
          (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(v82, a1);
          if (v85 >= 0)
            v56 = v82;
          else
            v56 = *(_BYTE **)v82;
          *(_DWORD *)__p = 136381187;
          *(_QWORD *)&__p[4] = v56;
          v62 = 2050;
          v63 = v12;
          v64 = 1026;
          LODWORD(v65) = 1209600;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v55, 2, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, sinceLastDownload, %{public}.1lf, %{public}d, needs to be refreshed, TileDoesNotExistOnTheServer", __p, 28);
          v58 = v57;
          if (v85 < 0)
            operator delete(*(void **)v82);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v58);
          if (v58 != buf)
            free(v58);
        }
      }
      std::string::assign(&v60, "DoesntExist");
      LODWORD(v16) = 0;
LABEL_49:
      if (*(_BYTE *)(a1 + 240) == 65 && !v21)
        goto LABEL_58;
      goto LABEL_51;
    }
LABEL_47:
    v13 = "Empty";
    goto LABEL_48;
  }
  v22 = sub_1001C94A8(a1);
  v23 = v12 >= v9 && v22;
  if (!v23 || !v10)
  {
    if (!*(_BYTE *)(a1 + 168))
      goto LABEL_47;
    goto LABEL_4;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v24 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(buf, a1);
    v25 = v89 >= 0 ? buf : *(_BYTE **)buf;
    *(_DWORD *)__p = 136380931;
    *(_QWORD *)&__p[4] = v25;
    v62 = 2050;
    v63 = v12;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry", __p, 0x16u);
    if (SHIBYTE(v89) < 0)
      operator delete(*(void **)buf);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v45 = qword_1022A0048;
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    if (v64 >= 0)
      v46 = __p;
    else
      v46 = *(_BYTE **)__p;
    *(_DWORD *)v82 = 136380931;
    *(_QWORD *)&v82[4] = v46;
    v83 = 2050;
    v84 = v12;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v45, 2, "TileFile, canRequestBasedOnAttempts, tile, %{private}s, age, %{public}.1lf, needs to be refreshed - retry", v82, 22);
    v48 = v47;
    if (SHIBYTE(v64) < 0)
      operator delete(*(void **)__p);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v48);
    if (v48 != buf)
      free(v48);
  }
  std::string::assign(&v60, "1st/Re-Try");
  LODWORD(v16) = 0;
  v21 = 1;
LABEL_51:
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_102197380);
  v28 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
  {
    v29 = sub_1001CC818(*(_DWORD *)(a1 + 48));
    v30 = sub_1001C087C(a1 + 48);
    v31 = sub_1001C0858(a1 + 48);
    v32 = *(unsigned __int8 *)(a1 + 168);
    v33 = sub_1001C94A8(a1);
    v34 = &v60;
    *(_DWORD *)buf = 136448771;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v34 = (std::string *)v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&buf[4] = v29;
    v87 = 2049;
    v88 = v30;
    v89 = 2049;
    v90 = v31;
    v91 = 1026;
    v92 = v32;
    v93 = 1026;
    v94 = v33;
    v95 = 2050;
    v96 = v12;
    v97 = 1026;
    v98 = v12 >= v9;
    v99 = 1026;
    v100 = v10;
    v101 = 1026;
    v102 = v12 >= v11;
    v103 = 1026;
    v104 = v16;
    v105 = 2081;
    v106 = v34;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "@TileDl, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expired, %{public}d, path, %{private}s", buf, 0x58u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v36 = qword_1022A0048;
    v37 = sub_1001CC818(*(_DWORD *)(a1 + 48));
    v38 = sub_1001C087C(a1 + 48);
    v39 = sub_1001C0858(a1 + 48);
    v40 = *(unsigned __int8 *)(a1 + 168);
    v41 = sub_1001C94A8(a1);
    v42 = &v60;
    *(_DWORD *)__p = 136448771;
    if ((v60.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v42 = (std::string *)v60.__r_.__value_.__r.__words[0];
    *(_QWORD *)&__p[4] = v37;
    v62 = 2049;
    v63 = v38;
    v64 = 2049;
    v65 = v39;
    v66 = 1026;
    v67 = v40;
    v68 = 1026;
    v69 = v41;
    v70 = 2050;
    v71 = v12;
    v72 = 1026;
    v73 = v12 >= v9;
    v74 = 1026;
    v75 = v10;
    v76 = 1026;
    v77 = v12 >= v11;
    v78 = 1026;
    v79 = v16;
    v80 = 2081;
    v81 = v42;
    LODWORD(v59) = 88;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v36, 1, "@TileDl, %{public}s, attempts, llsw, %{private}.2lf, %{private}.2lf, lastSuccess, %{public}d, existsOnServer, %{public}d, sinceLastDownload, %{public}.1lf, cooloff1, %{public}d, cooloff2, %{public}d, cooloff3, %{public}d, expired, %{public}d, path, %{private}s", COERCE_DOUBLE(136448771), __p, v59);
    v44 = (char *)v43;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLTileFile::canRequestBasedOnAttempts(BOOL, float, CFAbsoluteTime)", "%s\n", v43);
    if (v44 != buf)
      free(v44);
  }
LABEL_58:
  if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v60.__r_.__value_.__l.__data_);
  return v21;
}

void sub_1000782A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_1000782F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 40);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 16))(v2);
  v3 = *(_QWORD *)(a1 + 104);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 24))(v2);
  return v3 != 0;
}

BOOL sub_100078344(uint64_t a1, double a2, double a3)
{
  double v6;
  _BOOL8 result;

  objc_msgSend(*(id *)a1, "assertInside");
  v6 = *(double *)(a1 + 8);
  result = 1;
  if (v6 != -1.0 && a2 - v6 < 900.0)
    return v6
         + a3
         + (double)(unint64_t)(*(_QWORD *)(a1 + 16) - 1)
         * (double)(unint64_t)(*(_QWORD *)(a1 + 16) - 1)
         * 30.0 <= a2;
  return result;
}

void sub_1000783C8(uint64_t a1, int a2)
{
  char *v2;
  NSObject *v4;
  const char *v5;
  double v6;
  double v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  double v14;
  double v15;
  uint64_t *v16;
  uint64_t *v17;
  const char *v18;
  char *v19;
  uint64_t v20;
  _BYTE v21[12];
  __int16 v22;
  double v23;
  __int16 v24;
  double v25;
  __int16 v26;
  uint64_t *v27;
  __int16 v28;
  uint64_t *v29;
  _BYTE buf[12];
  __int16 v31;
  double v32;
  __int16 v33;
  double v34;
  __int16 v35;
  uint64_t *v36;
  __int16 v37;
  uint64_t *v38;

  BYTE6(v20) = a2;
  v2 = (char *)(a1 + 240);
  if (a2 != 68 && *(unsigned __int8 *)(a1 + 240) != a2)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_102197380);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_INFO))
    {
      v5 = sub_1001CC818(*(_DWORD *)(a1 + 48));
      v6 = sub_1001C087C(a1 + 48);
      v7 = sub_1001C0858(a1 + 48);
      *(_QWORD *)buf = (char *)&v20 + 6;
      v8 = sub_100FA82A4((uint64_t **)&unk_102311A88, (char *)&v20 + 6, (uint64_t)&unk_101B9EB60, (_BYTE **)buf)[5];
      *(_QWORD *)buf = v2;
      v9 = sub_100FA82A4((uint64_t **)&unk_102311A88, v2, (uint64_t)&unk_101B9EB60, (_BYTE **)buf)[5];
      *(_DWORD *)buf = 136447235;
      *(_QWORD *)&buf[4] = v5;
      v31 = 2049;
      v32 = v6;
      v33 = 2049;
      v34 = v7;
      v35 = 2082;
      v36 = v8;
      v37 = 2082;
      v38 = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "@TileReq, %{public}s, skip, llsw, %{private}.2lf, %{private}.2lf, reason, %{public}s, last, %{public}s", buf, 0x34u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_102197380);
      v10 = qword_1022A0048;
      v12 = *(_DWORD *)(a1 + 48);
      v11 = a1 + 48;
      v13 = sub_1001CC818(v12);
      v14 = sub_1001C087C(v11);
      v15 = sub_1001C0858(v11);
      *(_QWORD *)v21 = (char *)&v20 + 6;
      v16 = sub_100FA82A4((uint64_t **)&unk_102311A88, (char *)&v20 + 6, (uint64_t)&unk_101B9EB60, (_BYTE **)v21)[5];
      *(_QWORD *)v21 = v2;
      v17 = sub_100FA82A4((uint64_t **)&unk_102311A88, v2, (uint64_t)&unk_101B9EB60, (_BYTE **)v21)[5];
      *(_DWORD *)v21 = 136447235;
      *(_QWORD *)&v21[4] = v13;
      v22 = 2049;
      v23 = v14;
      v24 = 2049;
      v25 = v15;
      v26 = 2082;
      v27 = v16;
      v28 = 2082;
      v29 = v17;
      LODWORD(v20) = 52;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v10, 1, "@TileReq, %{public}s, skip, llsw, %{private}.2lf, %{private}.2lf, reason, %{public}s, last, %{public}s", v21, v20);
      v19 = (char *)v18;
      sub_100512490("Generic", 1, 0, 2, "void CLTileFile::setSkipDownloadReason(char)", "%s\n", v18);
      if (v19 != buf)
        free(v19);
    }
  }
  *v2 = BYTE6(v20);
}

void sub_1000786F8(uint64_t a1)
{
  unint64_t v1;
  NSObject *v2;
  const char *v3;
  uint8_t *v4;
  uint64_t i;
  float v6;
  float v7;
  float v8;
  __int16 v9;
  _QWORD v10[3];
  float32x2_t v11;
  uint64_t v12;
  uint8_t buf[1640];

  v10[0] = *(_QWORD *)(a1 + 128);
  memset(&v10[1], 0, 16);
  v11 = 0;
  v12 = 0;
  v1 = *(_QWORD *)(a1 + 24);
  if (v1 >= *(_QWORD *)(a1 + 208))
  {
    if (v1 >= *(_QWORD *)(a1 + 168))
    {
      for (i = 0; i != 3; ++i)
        *((_BYTE *)&v10[2] + i + 4) = *(_QWORD *)(a1 + 184 + 8 * i) <= v1;
      v6 = 0.0;
      v7 = 0.0;
      if (BYTE4(v10[2]))
        v7 = *(float *)(a1 + 144) - *(float *)(a1 + 32);
      *(float *)&v10[1] = v7;
      if (BYTE5(v10[2]))
        v6 = *(float *)(a1 + 148) - *(float *)(a1 + 36);
      *((float *)&v10[1] + 1) = v6;
      if (BYTE6(v10[2]))
        v8 = *(float *)(a1 + 152) - *(float *)(a1 + 40);
      else
        v8 = 0.0;
      *(float *)&v10[2] = v8;
    }
    if (v1 >= *(_QWORD *)(a1 + 176))
    {
      v11 = vsub_f32(*(float32x2_t *)(a1 + 156), *(float32x2_t *)(a1 + 44));
      *(float *)&v12 = *(float *)(a1 + 164) - *(float *)(a1 + 52);
      WORD2(v12) = 257;
      BYTE6(v12) = 1;
    }
    HIBYTE(v12) = *(_BYTE *)(a1 + 236);
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 16))(a1, v10);
  }
  else
  {
    if (qword_10229FF80 != -1)
      dispatch_once(&qword_10229FF80, &stru_102195A40);
    v2 = qword_10229FF88;
    if (os_log_type_enabled((os_log_t)qword_10229FF88, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, "DeviceMotion has reinitialized, reference frame has changed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FF80 != -1)
        dispatch_once(&qword_10229FF80, &stru_102195A40);
      v9 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FF88, 16, "DeviceMotion has reinitialized, reference frame has changed", &v9, 2);
      v4 = (uint8_t *)v3;
      sub_100512490("Generic", 1, 0, 0, "void CLInertialOdometryNotifierClient::sendOdometryToClient()", "%s\n", v3);
      if (v4 != buf)
        free(v4);
    }
  }
}

uint64_t sub_100078984(uint64_t a1, uint64_t a2)
{
  return sub_10007899C(a1 - 352, a2);
}

uint64_t sub_10007898C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 296) + 40))(*(_QWORD *)(a1 + 296));
}

uint64_t sub_10007899C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_100203518(a1);
  if ((result & 1) == 0 && (!*(_BYTE *)(a1 + 1416) || *(_DWORD *)(a1 + 1408) != 1 || *(_QWORD *)(a1 + 1384)))
    return sub_1000789F4(a1 + 608, a2);
  return result;
}

uint64_t sub_1000789F4(uint64_t a1, uint64_t a2)
{
  id v4;

  v4 = objc_alloc_init((Class)CLPIndoorEvent);
  objc_msgSend(v4, "setType:", 11);
  objc_msgSend(v4, "setInertialOdometry:", objc_alloc_init((Class)CLPInertialOdometry));
  objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setTimestamp:", (*(double (**)(_QWORD, double))(**(_QWORD **)(a1 + 16) + 136))(*(_QWORD *)(a1 + 16), *(double *)a2)- *(double *)(a1 + 64));
  if (*(_BYTE *)(a2 + 20))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaPositionX:", *(float *)(a2 + 8));
  if (*(_BYTE *)(a2 + 21))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaPositionY:", *(float *)(a2 + 12));
  if (*(_BYTE *)(a2 + 22))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaPositionZ:", *(float *)(a2 + 16));
  if (*(_BYTE *)(a2 + 36))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaVelocityX:", *(float *)(a2 + 24));
  if (*(_BYTE *)(a2 + 37))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaVelocityY:", *(float *)(a2 + 28));
  if (*(_BYTE *)(a2 + 38))
    objc_msgSend(objc_msgSend(v4, "inertialOdometry"), "setDeltaVelocityZ:", *(float *)(a2 + 32));
  objc_msgSend(*(id *)(a1 + 48), "addObject:", v4);
  return sub_10020329C(a1);
}

double sub_100078B58(double a1)
{
  double Current;

  Current = CFAbsoluteTimeGetCurrent();
  return Current - sub_100078B88() + a1;
}

double sub_100078B88()
{
  uint64_t v0;

  v0 = mach_absolute_time();
  return sub_100127828(v0);
}

float64x2_t sub_100078B9C(uint64_t a1, uint64_t a2, double a3)
{
  float64x2_t result;
  uint64_t v6;
  double *v7;
  double *v8;
  double v9;
  float64x2_t *v10;
  float64x2_t *v11;
  float64x2_t *v12;
  float64x2_t *v13;
  uint64_t v14;
  float64x2_t v15;

  if (a1 == a2)
    sub_101918978();
  sub_100079AC4((_DWORD *)a2, *(_DWORD *)(a1 + 8), *(_DWORD *)(a1 + 12));
  v6 = *(unsigned int *)(a2 + 16);
  if ((int)v6 > 3)
  {
    v10 = *(float64x2_t **)(a1 + 32);
    v11 = *(float64x2_t **)(a2 + 32);
    v12 = (float64x2_t *)((char *)v10 + 8 * (v6 - 2));
    v13 = (float64x2_t *)((char *)v11 + 8 * (v6 - 2));
    v14 = (v6 - 1) >> 1;
    do
    {
      v15 = *v10++;
      *v11++ = vmulq_n_f64(v15, a3);
      --v14;
    }
    while (v14);
    result = vmulq_n_f64(*v12, a3);
    *v13 = result;
  }
  else if ((int)v6 >= 1)
  {
    v7 = *(double **)(a1 + 32);
    v8 = *(double **)(a2 + 32);
    do
    {
      v9 = *v7++;
      result.f64[0] = v9 * a3;
      *v8++ = v9 * a3;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t sub_100078C58(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  double v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  double v17;
  unsigned int v19;
  unsigned int v20;
  int v21;
  BOOL v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  int v28;
  cnprint::CNPrinter *v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  int32x4_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t (***)());
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  double v40;
  double v41;
  unsigned int v43;
  double v44;
  double *v45;
  cnprint::CNPrinter *v46;
  double v47;
  uint64_t result;
  uint64_t (**v49)();
  __int128 v50;
  uint64_t v51;
  double *v52;
  _BYTE v53[23];
  char v54;
  uint64_t (**v55)();
  __int128 v56;
  uint64_t v57;
  _BYTE *v58;
  _BYTE v59[16];
  uint64_t (**v60)();
  __int128 v61;
  uint64_t v62;
  double *v63;
  _BYTE v64[24];

  if (a2 <= 0)
    sub_10195331C();
  v12 = *(double *)(a1 + 128);
  v13 = *(_DWORD *)(a3 + 8);
  v14 = *(_DWORD *)(a3 + 12);
  if (v13)
    v15 = v14 == 0;
  else
    v15 = 1;
  if (!v15)
  {
    if (v13 <= v14)
      v13 = *(_DWORD *)(a3 + 12);
    if (v13 != a2)
      sub_101953434();
    v16 = 0;
    do
    {
      v17 = sub_100079934(a3, v16, a3);
      if (v17 < 0.0 || v17 > 1.0)
        sub_10195340C();
      v16 = (v16 + 1);
    }
    while (a2 != (_DWORD)v16);
  }
  if (a4 <= 0)
    sub_101953344();
  v19 = *(_DWORD *)(a5 + 8);
  v20 = *(_DWORD *)(a5 + 12);
  if (v19 <= v20)
    v21 = *(_DWORD *)(a5 + 12);
  else
    v21 = *(_DWORD *)(a5 + 8);
  if (v20)
    v22 = v19 == 0;
  else
    v22 = 1;
  if (v22)
    v23 = 0;
  else
    v23 = v21;
  if (v23 != a4)
    sub_1019533E4();
  v24 = *(_DWORD *)(a6 + 8);
  v25 = *(_DWORD *)(a6 + 12);
  if (v24 <= v25)
    v26 = *(_DWORD *)(a6 + 12);
  else
    v26 = *(_DWORD *)(a6 + 8);
  if (v25)
    v27 = v24 == 0;
  else
    v27 = 1;
  if (v27)
    v28 = 0;
  else
    v28 = v26;
  if (v28 != a4)
    sub_1019533BC();
  if (*(_DWORD *)(a3 + 8) && *(_DWORD *)(a3 + 12))
  {
    v62 = 0x100000002;
    v60 = off_1021B62A8;
    v61 = xmmword_101CA41B0;
    v63 = (double *)v64;
    v29 = (cnprint::CNPrinter *)sub_10007996C(a3, 1, (uint64_t)&v60);
    if (DWORD2(v61) != 1)
      sub_1019532D0((uint64_t)v29, v30, v31);
    v32 = *v63;
    if (*v63 <= 0.0)
      sub_101953394();
    if (fabs(v32 + -1.0) <= v12)
    {
      sub_100079304((uint64_t)&v60, a3);
      sub_10021C208(&v60, a2, 1);
      sub_10007A0C8(a1 + 8, (uint64_t)&v60);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v29) <= 1)
      {
        LOWORD(v60) = 2;
        LOBYTE(v55) = 1;
        cnprint::CNPrinter::Print(&v60, &v55);
      }
      sub_100079304((uint64_t)&v55, a3);
      sub_10021C208(&v55, a2, 1);
      v62 = 0x100000002;
      v60 = off_1021B62A8;
      v61 = xmmword_101CA41B0;
      v63 = (double *)v64;
      sub_100078B9C((uint64_t)&v55, (uint64_t)&v60, 1.0 / v32);
      sub_10007A0C8(a1 + 8, (uint64_t)&v60);
    }
  }
  else
  {
    v57 = 0x100000002;
    v58 = 0;
    v55 = off_1021B62A8;
    v56 = 0uLL;
    if (a2 > 2)
      sub_10195336C();
    v33 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
    v33.i32[1] = 1;
    v56 = (__int128)v33;
    v58 = v59;
    sub_100079AC4(&v55, a2, 1);
    sub_100C97818((uint64_t)&v55, 1.0);
    v62 = 0x100000002;
    v60 = off_1021B62A8;
    v61 = xmmword_101CA41B0;
    v63 = (double *)v64;
    sub_100078B9C((uint64_t)&v55, (uint64_t)&v60, 1.0 / (double)a2);
    sub_10007A0C8(a1 + 8, (uint64_t)&v60);
  }
  sub_100079304((uint64_t)&v60, a1 + 8);
  v35 = 0;
  while (1)
  {
    v36 = (unsigned int (*)(uint64_t, uint64_t (***)()))sub_1002142BC(a5, v35, v34);
    v57 = 0x100000002;
    v55 = off_1021B62A8;
    v56 = xmmword_101CA41B0;
    v58 = v59;
    v38 = sub_1002142BC(a6, v35, v37);
    if (v36(v38, &v55))
      break;
    v39 = 0;
    v40 = 0.0;
    do
    {
      v41 = *(double *)sub_1000792CC((uint64_t)&v55, v39);
      if (v41 < 0.0 || v41 > 1.0)
        goto LABEL_54;
      v40 = v40 + v41;
      ++v39;
    }
    while (a2 != v39);
    if (fabs(v40) <= v12)
    {
LABEL_54:
      LOWORD(v49) = 2;
      v54 = 4;
      cnprint::CNPrinter::Print(&v49, &v54);
      return 30;
    }
    v43 = 0;
    do
    {
      v44 = *(double *)sub_1000792CC((uint64_t)&v55, v43);
      v45 = (double *)sub_1000792CC((uint64_t)&v60, v43);
      *v45 = v44 * *v45;
      ++v43;
    }
    while (a2 != v43);
    v51 = 0x100000002;
    v49 = off_1021B62A8;
    v50 = xmmword_101CA41B0;
    v52 = (double *)v53;
    v46 = (cnprint::CNPrinter *)sub_10007996C((uint64_t)&v60, 1, (uint64_t)&v49);
    if (DWORD2(v50) != 1)
      __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
    v47 = *v52;
    if (fabs(*v52) < 2.22044605e-16)
    {
      if (cnprint::CNPrinter::GetLogLevel(v46) <= 1)
      {
        LOWORD(v49) = 2;
        v54 = 1;
        cnprint::CNPrinter::Print(&v49, &v54);
      }
      sub_10007A0C8((uint64_t)&v60, a1 + 8);
      v51 = 0x100000002;
      v49 = off_1021B62A8;
      v50 = xmmword_101CA41B0;
      v52 = (double *)v53;
      sub_10007996C((uint64_t)&v60, 1, (uint64_t)&v49);
      if (DWORD2(v50) != 1)
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      v47 = *v52;
    }
    v51 = 0x100000002;
    v49 = off_1021B62A8;
    v50 = xmmword_101CA41B0;
    v52 = (double *)v53;
    sub_100078B9C((uint64_t)&v60, (uint64_t)&v49, 1.0 / v47);
    sub_10007A0C8((uint64_t)&v60, (uint64_t)&v49);
    v35 = (v35 + 1);
    if ((_DWORD)v35 == a4)
    {
      sub_10007A0C8(a1 + 64, (uint64_t)&v60);
      result = 0;
      *(_DWORD *)(a1 + 120) = 1;
      return result;
    }
  }
  LOWORD(v49) = 2;
  v54 = 4;
  cnprint::CNPrinter::Print(&v49, &v54);
  return 29;
}

uint64_t sub_1000792CC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    sub_1019187E8();
  if ((a2 & 0x80000000) != 0)
    sub_101918810();
  if (*(_DWORD *)(a1 + 16) <= (signed int)a2)
    sub_101918838();
  return v2 + 8 * a2;
}

__n128 sub_100079304(uint64_t a1, uint64_t a2)
{
  __n128 result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  _OWORD *v6;
  int v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __n128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  const char *v16;
  int v17;
  const char *v18;
  const char *v19;

  result.n128_u64[0] = 0x100000002;
  *(_QWORD *)(a1 + 24) = 0x100000002;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = off_1021B62A8;
  *(_QWORD *)(a1 + 8) = 0;
  if (a1 == a2)
  {
    v16 = "this != &(A)";
    v17 = 603;
LABEL_21:
    v18 = "cnmatrix.h";
    v19 = "CNMatrix";
LABEL_22:
    __assert_rtn(v19, v18, v17, v16);
  }
  v3 = *(_DWORD *)(a2 + 8);
  if (v3 > 2)
  {
    v16 = "this->max_num_rows_ >= num_rows";
    v17 = 422;
LABEL_18:
    v18 = "cnmatrixbase.h";
    v19 = "SetMatrixSize";
    goto LABEL_22;
  }
  v4 = *(_DWORD *)(a2 + 12);
  if (v4 >= 2)
  {
    v16 = "this->max_num_cols_ >= num_cols";
    v17 = 423;
    goto LABEL_18;
  }
  *(_DWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 12) = v4;
  v5 = v4 * v3;
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 20) = v3;
  v6 = (_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = a1 + 40;
  if (*(_DWORD *)(a2 + 8) > 2u)
  {
    v16 = "this->max_num_rows_ >= A.num_rows_";
    v17 = 616;
    goto LABEL_21;
  }
  if (*(_DWORD *)(a2 + 12) > 1u)
  {
    v16 = "this->max_num_cols_ >= A.num_cols_";
    v17 = 617;
    goto LABEL_21;
  }
  v7 = *(_DWORD *)(a2 + 16);
  if (v7 > 3)
  {
    v10 = (v7 - 2);
    v11 = *(__int128 **)(a2 + 32);
    v12 = (__n128 *)((char *)v6 + 8 * v10);
    v13 = (v7 - 1) >> 1;
    v14 = v11;
    do
    {
      v15 = *v14++;
      *v6++ = v15;
      --v13;
    }
    while (v13);
    result = *(__n128 *)((char *)v11 + 8 * v10);
    *v12 = result;
  }
  else if ((_DWORD)v5)
  {
    v8 = *(unint64_t **)(a2 + 32);
    do
    {
      v9 = *v8++;
      result.n128_u64[0] = v9;
      *(_QWORD *)v6 = v9;
      v6 = (_OWORD *)((char *)v6 + 8);
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_100079464(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

uint64_t sub_100079478(uint64_t a1, int a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t (***)()), uint64_t a5)
{
  double v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  double v15;
  BOOL v17;
  int32x4_t v18;
  cnprint::CNPrinter *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t result;
  _BOOL8 v24;
  double v25;
  uint64_t (**v26)();
  __int128 v27;
  uint64_t v28;
  double *v29;
  uint64_t v30;
  uint64_t (**v31)();
  __int128 v32;
  uint64_t v33;
  double *v34;
  _BYTE v35[32];
  uint64_t (**v36)();
  __int128 v37;
  uint64_t v38;
  _BYTE *v39;
  _BYTE v40[16];

  if (a2 <= 0)
    sub_101953764();
  v10 = *(double *)(a1 + 128);
  v11 = *(_DWORD *)(a3 + 8);
  v12 = *(_DWORD *)(a3 + 12);
  if (v11)
    v13 = v12 == 0;
  else
    v13 = 1;
  if (!v13)
  {
    if (v11 <= v12)
      v11 = *(_DWORD *)(a3 + 12);
    if (v11 != a2)
      sub_1019537DC();
    v14 = 0;
    do
    {
      v15 = sub_100079934(a3, v14, a3);
      if (v15 < 0.0 || v15 > 1.0)
        sub_1019537B4();
      v14 = (v14 + 1);
    }
    while (a2 != (_DWORD)v14);
    v11 = *(_DWORD *)(a3 + 8);
    v12 = *(_DWORD *)(a3 + 12);
  }
  if (v11)
    v17 = v12 == 0;
  else
    v17 = 1;
  if (v17)
  {
    v38 = 0x100000002;
    v39 = 0;
    v36 = off_1021B62A8;
    v37 = 0uLL;
    if (a2 > 2)
      sub_10195336C();
    v18 = vdupq_lane_s32((int32x2_t)(a2 | 0x100000000), 0);
    v18.i32[1] = 1;
    v37 = (__int128)v18;
    v39 = v40;
    sub_100079AC4(&v36, a2, 1);
    sub_100C97818((uint64_t)&v36, 1.0);
    v33 = 0x100000002;
    v31 = off_1021B62A8;
    v32 = xmmword_101CA41B0;
    v34 = (double *)v35;
    sub_100078B9C((uint64_t)&v36, (uint64_t)&v31, 1.0 / (double)a2);
    sub_10007A0C8(a1 + 64, (uint64_t)&v31);
  }
  else
  {
    v33 = 0x100000002;
    v31 = off_1021B62A8;
    v32 = xmmword_101CA41B0;
    v34 = (double *)v35;
    v19 = (cnprint::CNPrinter *)sub_10007996C(a3, 1, (uint64_t)&v31);
    if (DWORD2(v32) != 1)
      sub_1019532D0((uint64_t)v19, v20, v21);
    v22 = *v34;
    if (*v34 <= 0.0)
      sub_10195378C();
    if (fabs(v22 + -1.0) <= v10)
    {
      sub_100079304((uint64_t)&v31, a3);
      sub_10021C208(&v31, a2, 1);
      sub_10007A0C8(a1 + 64, (uint64_t)&v31);
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel(v19) <= 1)
      {
        LOWORD(v31) = 2;
        LOBYTE(v36) = 1;
        cnprint::CNPrinter::Print(&v31, &v36);
      }
      sub_100079304((uint64_t)&v36, a3);
      sub_10021C208(&v36, a2, 1);
      v33 = 0x100000002;
      v31 = off_1021B62A8;
      v32 = xmmword_101CA41B0;
      v34 = (double *)v35;
      sub_100078B9C((uint64_t)&v36, (uint64_t)&v31, 1.0 / v22);
      sub_10007A0C8(a1 + 64, (uint64_t)&v31);
    }
  }
  *(_DWORD *)(a1 + 120) = 1;
  v33 = 0x200000002;
  v31 = off_1021B6490;
  v32 = xmmword_101CA41C0;
  v34 = (double *)v35;
  if (a4(a5, &v31))
  {
    LOWORD(v36) = 2;
    LOBYTE(v26) = 4;
    cnprint::CNPrinter::Print(&v36, &v26);
    return 27;
  }
  else
  {
    v24 = sub_100207FC8(a1, a2, (uint64_t)&v31);
    if (v24)
    {
      v38 = 0x100000002;
      v36 = off_1021B62A8;
      v37 = xmmword_101CA41B0;
      v39 = v40;
      sub_10021BDF0((uint64_t)&v31, a1 + 64, (uint64_t)&v36);
      sub_10007A0C8(a1 + 8, (uint64_t)&v36);
      v28 = 0x100000002;
      v26 = off_1021B62A8;
      v27 = xmmword_101CA41B0;
      v29 = (double *)&v30;
      sub_10007996C(a1 + 8, 1, (uint64_t)&v26);
      if (DWORD2(v27) != 1)
        __assert_rtn("operator double", "cnmatrixbase.h", 979, "num_elements_ == 1");
      v25 = 1.0 / *v29;
      v38 = 0x100000002;
      v36 = off_1021B62A8;
      v37 = xmmword_101CA41B0;
      v39 = v40;
      sub_100078B9C(a1 + 8, (uint64_t)&v36, v25);
      sub_10007A0C8(a1 + 8, (uint64_t)&v36);
      result = 0;
      *(_DWORD *)(a1 + 120) = 0;
    }
    else
    {
      if (cnprint::CNPrinter::GetLogLevel((cnprint::CNPrinter *)v24) <= 1)
      {
        LOWORD(v36) = 2;
        LOBYTE(v26) = 1;
        cnprint::CNPrinter::Print(&v36, &v26);
      }
      return 28;
    }
  }
  return result;
}

double sub_100079934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_10195345C(a1, a2, a3);
  if ((a2 & 0x80000000) != 0)
    sub_101953480(a1, a2, a3);
  if (*(_DWORD *)(a1 + 16) <= (int)a2)
    sub_1019534A4(a1, a2, a3);
  return *(double *)(v3 + 8 * a2);
}

_DWORD *sub_10007996C(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  _DWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  double v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  double *v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  unsigned int v29;
  double *v30;

  if ((a2 - 3) <= 0xFFFFFFFD)
    sub_1019534C8();
  if (a2 == 1)
  {
    v5 = *(_DWORD *)(a3 + 28);
    v6 = *(_DWORD *)(a1 + 12);
    if (v5 < v6)
      sub_1019534F0();
    result = sub_100079AC4((_DWORD *)a3, 1, v6);
    v8 = *(unsigned int *)(a1 + 12);
    if ((_DWORD)v8)
    {
      v9 = 0;
      v10 = *(unsigned int *)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(_QWORD *)(a3 + 32);
      v13 = 1;
      do
      {
        v14 = *(double *)(v11 + 8 * (v10 * v9));
        v15 = v10 - 1;
        v16 = v13;
        if (v10 >= 2)
        {
          do
          {
            v14 = v14 + *(double *)(v11 + 8 * v16++);
            --v15;
          }
          while (v15);
        }
        *(double *)(v12 + 8 * v9++) = v14;
        v13 += v10;
      }
      while (v9 != v8);
    }
  }
  else
  {
    v17 = *(_DWORD *)(a1 + 8);
    if (*(_DWORD *)(a3 + 24) < v17)
      sub_101953518();
    result = sub_100079AC4((_DWORD *)a3, v17, 1);
    v18 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v18)
    {
      v19 = *(uint64_t **)(a1 + 32);
      v20 = *(_QWORD **)(a3 + 32);
      v21 = *(unsigned int *)(a1 + 8);
      do
      {
        v22 = *v19++;
        *v20++ = v22;
        --v21;
      }
      while (v21);
    }
    v23 = *(_DWORD *)(a1 + 12);
    if (v23 >= 2)
    {
      v24 = *(_QWORD *)(a1 + 32);
      v25 = *(double **)(a3 + 32);
      v26 = 1;
      v27 = v18;
      do
      {
        v28 = v18;
        v29 = v27;
        v30 = v25;
        if ((_DWORD)v18)
        {
          do
          {
            *v30 = *(double *)(v24 + 8 * v29) + *v30;
            ++v30;
            ++v29;
            --v28;
          }
          while (v28);
        }
        ++v26;
        v27 += v18;
      }
      while (v26 != v23);
    }
  }
  return result;
}

_DWORD *sub_100079AC4(_DWORD *result, int a2, int a3)
{
  if (a2 < 0)
    sub_1019185E8();
  if (result[6] < a2)
    sub_101918610();
  if (a3 < 0)
    sub_101918638();
  if (result[7] < a3)
    sub_101918660();
  result[2] = a2;
  result[3] = a3;
  result[4] = a3 * a2;
  result[5] = a2;
  return result;
}

void sub_100079B10(uint64_t a1)
{
  double v2;
  int64x2_t v3;
  unint64_t v4;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  double v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  uint8_t buf[4];
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  __int16 v47;
  uint64_t v48;
  __int16 v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  __int16 v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  __int16 v57;
  uint64_t v58;

  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a1 + 248);
  *(double *)(a1 + 192) = sub_1001FCBB4();
  *(_DWORD *)buf = 1;
  v2 = sub_100079E8C(a1, (unsigned int *)buf);
  *(_QWORD *)(a1 + 200) = 0;
  *(double *)(a1 + 216) = v2;
  *(_QWORD *)(a1 + 208) = 0;
  if (v2 > 0.525 && v2 <= 0.7)
  {
    v3 = (int64x2_t)xmmword_101C1EE00;
LABEL_16:
    *(int64x2_t *)(a1 + 200) = v3;
    goto LABEL_17;
  }
  if (v2 > 0.7 && v2 <= 0.9)
  {
    v4 = 2;
LABEL_7:
    v3 = vdupq_n_s64(v4);
    goto LABEL_16;
  }
  if (v2 > 0.9 && v2 <= 1.0)
  {
    v3 = (int64x2_t)xmmword_101C29080;
    goto LABEL_16;
  }
  if (v2 > 0.3 && v2 <= 0.45)
  {
    v4 = 1;
    goto LABEL_7;
  }
  if (v2 > 0.1 && v2 <= 0.3)
  {
    v3 = (int64x2_t)xmmword_101C40160;
    goto LABEL_16;
  }
  v15 = v2 > 0.1 || v2 <= 0.0;
  v16 = fabs(v2);
  if (!v15 || v16 < 2.22044605e-16)
  {
    v3 = (int64x2_t)xmmword_101C40150;
    goto LABEL_16;
  }
LABEL_17:
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_1021B6278);
  v6 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_DEBUG))
  {
    v7 = *(_QWORD *)(a1 + 184);
    v8 = *(_QWORD *)(a1 + 192);
    v9 = *(_QWORD *)(a1 + 200);
    v10 = *(_QWORD *)(a1 + 208);
    v11 = *(unsigned __int8 *)(a1 + 232);
    v12 = *(_QWORD *)(a1 + 216);
    v13 = *(_QWORD *)(a1 + 224);
    v14 = *(_QWORD *)(a1 + 248);
    *(_DWORD *)buf = 134219777;
    v44 = v7;
    v45 = 2048;
    v46 = v8;
    v47 = 2049;
    v48 = v9;
    v49 = 2049;
    v50 = v10;
    v51 = 2049;
    v52 = v12;
    v53 = 1025;
    v54 = v11;
    v55 = 2049;
    v56 = v13;
    v57 = 2048;
    v58 = v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "CLOutdoorEstimator_updateOutdoorEstimate,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", buf, 0x4Eu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v18 = *(_QWORD *)(a1 + 184);
    v19 = *(_QWORD *)(a1 + 192);
    v20 = *(_QWORD *)(a1 + 200);
    v21 = *(_QWORD *)(a1 + 208);
    v22 = *(unsigned __int8 *)(a1 + 232);
    v23 = *(_QWORD *)(a1 + 216);
    v24 = *(_QWORD *)(a1 + 224);
    v25 = *(_QWORD *)(a1 + 248);
    v27 = 134219777;
    v28 = v18;
    v29 = 2048;
    v30 = v19;
    v31 = 2049;
    v32 = v20;
    v33 = 2049;
    v34 = v21;
    v35 = 2049;
    v36 = v23;
    v37 = 1025;
    v38 = v22;
    v39 = 2049;
    v40 = v24;
    v41 = 2048;
    v42 = v25;
    v26 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 2, "CLOutdoorEstimator_updateOutdoorEstimate,startTime,%f,mctTimestampSec,%f,type,%{private}ld,confidence,%{private}ld,estimatedStateProbabilityOutdoor,%{private}f,isAstronomicalDaytime,%{private}d,daylightConfidence,%{private}ld,EstimatorTimeCfaSec,%f", &v27, 78);
    sub_100512490("Generic", 1, 0, 2, "void CLOutdoorEstimator::updateOutdoorEstimate()", "%s\n", v26);
    if (v26 != (char *)buf)
      free(v26);
  }
}

double sub_100079E8C(uint64_t a1, unsigned int *a2)
{
  double v3;
  NSObject *v4;
  char *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (*(_BYTE *)(a1 + 240))
  {
    sub_10007A04C(a1, (uint64_t)buf);
    return *(double *)sub_1000792CC((uint64_t)buf, *a2);
  }
  else
  {
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_1021B6278);
    v4 = qword_1022A0198;
    if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "CLOutdoorEstimator,getStateProbability(),HMM Not initialized", buf, 2u);
    }
    v3 = -1.0;
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0190 != -1)
        dispatch_once(&qword_1022A0190, &stru_1021B6278);
      v7[0] = 0;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 16, "CLOutdoorEstimator,getStateProbability(),HMM Not initialized", v7, 2);
      sub_100512490("Generic", 1, 0, 0, "double CLOutdoorEstimator::getStateProbability(const CLOutdoorEstimator_Type::OutdoorEstimatorHiddenStates &) const", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
  }
  return v3;
}

double sub_10007A04C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)(a2 + 24) = 0x100000002;
  *(_QWORD *)a2 = off_1021B62A8;
  *(_OWORD *)(a2 + 8) = xmmword_101CA41B0;
  *(_QWORD *)(a2 + 32) = a2 + 40;
  if (*(_DWORD *)(a1 + 120))
    v2 = a1 + 64;
  else
    v2 = a1 + 8;
  *(_QWORD *)&result = sub_10007A0C8(a2, v2).n128_u64[0];
  return result;
}

void sub_10007A0B4(_Unwind_Exception *a1)
{
  _QWORD *v1;

  *v1 = off_102155D60;
  _Unwind_Resume(a1);
}

__n128 sub_10007A0C8(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  int v5;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t v8;
  __n128 result;
  _OWORD *v10;
  __int128 *v11;
  __n128 *v12;
  __n128 *v13;
  uint64_t v14;
  __int128 v15;

  if (a1 != a2)
  {
    v2 = *(_DWORD *)(a2 + 8);
    if (*(_DWORD *)(a1 + 24) < v2)
      sub_101918688();
    v3 = *(_DWORD *)(a2 + 12);
    if (*(_DWORD *)(a1 + 28) < v3)
      sub_1019186B0();
    *(_DWORD *)(a1 + 8) = v2;
    *(_DWORD *)(a1 + 12) = v3;
    v4 = v3 * v2;
    *(_DWORD *)(a1 + 16) = v4;
    *(_DWORD *)(a1 + 20) = v2;
    v5 = *(_DWORD *)(a2 + 16);
    if (v5 > 3)
    {
      v10 = *(_OWORD **)(a1 + 32);
      v11 = *(__int128 **)(a2 + 32);
      v12 = (__n128 *)((char *)v10 + 8 * (v5 - 2));
      v13 = (__n128 *)((char *)v11 + 8 * (v5 - 2));
      v14 = (v5 - 1) >> 1;
      do
      {
        v15 = *v11++;
        *v10++ = v15;
        --v14;
      }
      while (v14);
      result = *v13;
      *v12 = *v13;
    }
    else if ((int)v4 >= 1)
    {
      v6 = *(unint64_t **)(a2 + 32);
      v7 = *(unint64_t **)(a1 + 32);
      do
      {
        v8 = *v6++;
        result.n128_u64[0] = v8;
        *v7++ = v8;
        --v4;
      }
      while (v4);
    }
  }
  return result;
}

uint64_t sub_10007A178(uint64_t a1, const char *a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double *v12;
  char *v13;
  NSObject *v14;
  const char *v15;
  char *v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  int v21;
  uint64_t result;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  double *v31;
  double *v32;
  double v33;
  _BOOL8 v34;
  uint64_t v35;
  int v36;
  _BOOL4 v37;
  const char *v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  double *v44;
  uint64_t v45;
  _BOOL4 v46;
  BOOL v47;
  double v49;
  uint64_t v50;
  _BOOL4 v51;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  int v59;
  int v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  _BOOL4 v64;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  double v78;
  double v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  double v83;
  uint64_t v84;
  int v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;
  uint64_t v95;
  double v96;
  double v97;
  int v98;
  int v99;
  double v100;
  NSObject *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  int v105;
  double v106;
  uint64_t v107;
  unsigned __int8 v108;
  double v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  double v113;
  double v114;
  double v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  double v121;
  int v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  char *v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  unint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  char *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  double *v145;
  uint64_t v146;
  double v147;
  double *v148;
  NSObject *v149;
  int *v150;
  int *v151;
  const char **v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  const char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  double v161;
  uint64_t v162;
  double v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  double v168;
  double v169;
  uint64_t v170;
  uint64_t v171;
  unsigned __int8 v172;
  double v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  double v177;
  uint64_t v178;
  double v179;
  int v180;
  const char *v181;
  char *v182;
  int *v183;
  int *v184;
  const char **v185;
  uint64_t v186;
  uint64_t v187;
  const char *v188;
  char *v189;
  uint64_t v190;
  const char *v191;
  char *v192;
  double v193;
  double v194;
  uint64_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  const char *v199;
  char *v200;
  uint64_t v201;
  int v202;
  int v203;
  const char *v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  double v208;
  uint64_t v209;
  double v210;
  const char *v211;
  char *v212;
  double v213;
  const char *v214;
  int v215;
  const char *v216;
  const char *v217;
  uint64_t v218;
  const char *v219;
  double v220;
  const char *v221;
  double v222;
  const char *v223;
  const char *v224;
  char type;
  const char *v226;
  double v227;
  const char *v228;
  const char *v229;
  const char *v230;
  __int128 v231;
  double v232;
  const char *v233;
  __int128 v234;
  double v235;
  const char *v236;
  __int128 v237;
  double v238;
  const char *v239;
  __int128 v240;
  double v241;
  const char *v242;
  __int128 v243;
  int v244;
  const char *v245;
  __int128 v246;
  const char *v247;
  double v248;
  __int128 v249;
  const char *v250;
  double v251;
  const char *v252;
  double v253;
  __int128 v254;
  const char *v255;
  double v256;
  __int128 v257;
  const char *v258;
  double v259;
  __int128 v260;
  const char *v261;
  __int128 __src;
  __int128 v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  CFStringRef theString[2];
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  double v273;
  double v274;
  __int128 v275;
  __int128 v276;
  _OWORD v277[2];
  _OWORD v278[2];
  _OWORD v279[2];
  int v280;
  __int16 v281;
  double v282;
  double v283;
  double v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  _OWORD v289[2];
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  uint64_t v302;
  _BYTE v303[34];
  _BYTE v304[6];
  double v305;
  __int16 v306;
  int v307;
  __int16 v308;
  const char *v309;
  __int16 v310;
  const char *v311;
  __int16 v312;
  const char *v313;
  __int16 v314;
  const char *v315;
  __int16 v316;
  const char *v317;
  __int16 v318;
  const char *v319;
  __int16 v320;
  const char *v321;
  __int16 v322;
  const char *v323;
  __int16 v324;
  const char *v325;
  __int16 v326;
  const char *v327;
  __int16 v328;
  const char *v329;
  __int16 v330;
  double v331;
  __int16 v332;
  const char *v333;
  __int16 v334;
  _BYTE v335[64];
  __int16 v336;
  const char *v337;
  __int16 v338;
  const char *v339;
  __int16 v340;
  const char *v341;
  __int16 v342;
  const char *v343;
  __int16 v344;
  double v345;
  __int16 v346;
  const char *v347;
  __int16 v348;
  uint64_t v349;
  __int16 v350;
  const char *v351;
  __int16 v352;
  double v353;
  __int16 v354;
  const char *v355;
  __int16 v356;
  uint64_t v357;
  __int16 v358;
  const char *v359;
  __int16 v360;
  int v361;
  __int16 v362;
  const char *v363;
  __int16 v364;
  double v365;
  __int16 v366;
  const char *v367;
  __int16 v368;
  double v369;
  __int16 v370;
  const char *v371;
  __int16 v372;
  double v373;
  __int16 v374;
  const char *v375;
  __int16 v376;
  uint64_t v377;
  __int16 v378;
  const char *v379;
  __int16 v380;
  double v381;
  __int16 v382;
  const char *v383;
  __int16 v384;
  double v385;
  __int16 v386;
  const char *v387;
  __int16 v388;
  double v389;
  __int16 v390;
  const char *v391;
  __int16 v392;
  double v393;
  __int16 v394;
  const char *v395;
  __int16 v396;
  int v397;
  __int16 v398;
  const char *v399;
  __int16 v400;
  uint64_t v401;
  __int16 v402;
  const char *v403;
  __int16 v404;
  uint64_t v405;
  __int16 v406;
  const char *v407;
  __int16 v408;
  int v409;
  __int16 v410;
  const char *v411;
  __int16 v412;
  int v413;
  __int16 v414;
  const char *v415;
  __int16 v416;
  int v417;
  _BYTE buf[34];
  _BYTE v419[6];
  const char *v420;
  __int16 v421;
  int v422;
  __int16 v423;
  const char *v424;
  __int16 v425;
  const char *v426;
  __int16 v427;
  const char *v428;
  _BYTE v429[10];
  __int16 v430;
  const char *v431;
  __int16 v432;
  const char *v433;
  __int16 v434;
  const char *v435;
  __int16 v436;
  const char *v437;
  __int16 v438;
  const char *v439;
  _BYTE v440[10];
  __int16 v441;
  const char *v442;
  __int16 v443;
  double v444;
  __int16 v445;
  const char *v446;
  __int16 v447;
  _BYTE v448[64];
  __int16 v449;
  const char *v450;
  __int16 v451;
  const char *v452;
  __int16 v453;
  uint64_t v454;
  __int16 v455;
  const char *v456;
  __int16 v457;
  double v458;
  __int16 v459;
  const char *v460;
  __int16 v461;
  uint64_t v462;
  __int16 v463;
  const char *v464;
  __int16 v465;
  const char *v466;
  __int16 v467;
  const char *v468;
  __int16 v469;
  uint64_t v470;
  __int16 v471;
  const char *v472;
  __int16 v473;
  int v474;
  __int16 v475;
  const char *v476;
  __int16 v477;
  double v478;
  __int16 v479;
  const char *v480;
  __int16 v481;
  double v482;
  __int16 v483;
  const char *v484;
  __int16 v485;
  double v486;
  __int16 v487;
  const char *v488;
  __int16 v489;
  uint64_t v490;
  __int16 v491;
  const char *v492;
  __int16 v493;
  double v494;
  __int16 v495;
  const char *v496;
  __int16 v497;
  double v498;
  __int16 v499;
  const char *v500;
  __int16 v501;
  double v502;
  __int16 v503;
  const char *v504;
  __int16 v505;
  double v506;
  __int16 v507;
  const char *v508;
  __int16 v509;
  int v510;
  __int16 v511;
  const char *v512;
  __int16 v513;
  uint64_t v514;
  __int16 v515;
  const char *v516;
  __int16 v517;
  uint64_t v518;
  __int16 v519;
  const char *v520;
  __int16 v521;
  int v522;
  __int16 v523;
  const char *v524;
  __int16 v525;
  int v526;
  __int16 v527;
  const char *v528;
  __int16 v529;
  int v530;

  v226 = a2;
  v287 = 0u;
  v288 = 0u;
  v285 = 0u;
  v286 = 0u;
  v5 = a1 + 528;
  if (!sub_1002190C4(a1 + 528, (uint64_t)&v287, &v285, a3))
  {
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v14 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#Warning Inconsistency found between steps and clock. Ignoring.", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      *(_WORD *)v303 = 0;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Inconsistency found between steps and clock. Ignoring.", v303, 2);
      v16 = (char *)v15;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v15);
      if (v16 != buf)
        free(v16);
    }
    return 1;
  }
  v6 = *((_QWORD *)&v288 + 1);
  v7 = v288;
  v8 = *(_QWORD *)v288;
  v9 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v9 = *(_QWORD *)(v288 - 8) + 5120;
  if (*(_BYTE *)(v9 - 72))
  {
    sub_100244694(a1 + 800);
    v6 = *((_QWORD *)&v288 + 1);
    v7 = v288;
    v8 = *(_QWORD *)v288;
  }
  if (v6 == v8)
  {
    v17 = *(_QWORD *)(v7 - 8);
    v10 = (double *)(v17 + 4840);
    v11 = (double *)(v17 + 4856);
    v12 = (double *)(v17 + 4880);
    v13 = (char *)(v17 + 4974);
    v6 = v17 + 5120;
  }
  else
  {
    v10 = (double *)(v6 - 280);
    v11 = (double *)(v6 - 264);
    v12 = (double *)(v6 - 240);
    v13 = (char *)(v6 - 146);
  }
  v18 = *v12;
  v19 = *v10;
  v20 = *v11;
  type = *v13;
  if (sub_1002445A8(v6 - 312))
    v21 = 1;
  else
    v21 = sub_100C5CF0C(a1 + 160);
  v284 = 0.0;
  v283 = 0.0;
  v282 = 0.0;
  v281 = 0;
  v280 = 0;
  if (!sub_100CDEAF8(a1))
  {
    sub_100197040();
    v28 = sub_100195F08();
    v222 = 0.0;
    if ((v28 & 1) != 0
      || (v279[0] = v287,
          v279[1] = v288,
          v278[0] = v285,
          v278[1] = v286,
          !sub_100232184(v28, (uint64_t)v279, (uint64_t)v278)))
    {
      v29 = 0;
      v223 = 0;
      v30 = 0;
      v24 = 0;
      goto LABEL_57;
    }
  }
  result = (*(uint64_t (**)(_QWORD, double))(**(_QWORD **)(a1 + 656) + 48))(*(_QWORD *)(a1 + 656), a3);
  if (!(_DWORD)result)
    return result;
  v23 = v18 < 0.447387993 && v18 > 0.0;
  HIDWORD(v223) = sub_100CDEB40(a1, 1);
  LODWORD(v223) = sub_100CDEB40(a1, 0);
  if (v23)
    v24 = HIDWORD(v223);
  else
    v24 = (int)v223;
  v25 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
  {
    v31 = *(double **)(v288 - 8);
    v26 = v31[639];
    if (v26 <= *(double *)(a1 + 2008))
      v26 = *(double *)(a1 + 2008);
    if ((v21 & 1) != 0)
    {
      v27 = v31[602] + -10.24;
      if (v26 > v27)
        v27 = v26;
      v25 = *(_QWORD *)(v288 - 8) + 5120;
      goto LABEL_44;
    }
    v32 = v31 + 629;
  }
  else
  {
    v26 = *(double *)(*((_QWORD *)&v288 + 1) - 8);
    if (v26 <= *(double *)(a1 + 2008))
      v26 = *(double *)(a1 + 2008);
    if ((v21 & 1) != 0)
    {
      v27 = *(double *)(*((_QWORD *)&v288 + 1) - 304) + -10.24;
      if (v26 > v27)
        v27 = v26;
LABEL_44:
      v32 = (double *)(v25 - 304);
      v26 = v27;
      goto LABEL_47;
    }
    v32 = (double *)(*((_QWORD *)&v288 + 1) - 88);
  }
LABEL_47:
  v33 = *v32;
  *(double *)(a1 + 2008) = *v32;
  v34 = sub_100218930(a1, &v284, v26, v33);
  if (v34 & v24)
  {
    v277[0] = v287;
    v277[1] = v288;
    v275 = v285;
    v276 = v286;
    if ((sub_100CDF518(v34, (uint64_t)v277, (uint64_t)&v275) & 1) != 0
      || (sub_100CDF61C(a1, v23, v21, &v282, &v283, a3) | v23) != 1)
    {
      goto LABEL_55;
    }
    v35 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      v35 = *(_QWORD *)(v288 - 8) + 5120;
    if (*(double *)(v35 - 80) <= 0.0)
    {
LABEL_55:
      v30 = 0;
      v29 = 1;
      v222 = a3;
    }
    else
    {
      v29 = 1;
      v222 = a3;
      v30 = 1;
    }
    v24 = 1;
  }
  else
  {
    v29 = 0;
    v30 = 0;
    v222 = a3;
  }
LABEL_57:
  v228 = (const char *)(a1 + 800);
  if (sub_1002445CC(a1 + 800, v30))
    v36 = 2;
  else
    v36 = v29;
  HIDWORD(v229) = v36;
  v274 = 0.0;
  v37 = sub_100218930(a1, &v274, a3 + -20.0, a3);
  LODWORD(v227) = 0;
  *(double *)&v38 = v274;
  v39 = v274 < 11.9210824 && v37;
  if (!v39 || !HIDWORD(v229))
  {
    HIDWORD(v220) = 0;
    v43 = 0.0;
    goto LABEL_86;
  }
  memset(buf, 0, 32);
  memset(v303, 0, 32);
  if (!sub_1002190C4(v5, (uint64_t)buf, v303, a3 + -20.0))
  {
    v46 = 0;
    v43 = 0.0;
LABEL_84:
    LODWORD(v227) = 1;
    HIDWORD(v229) = -1;
    goto LABEL_85;
  }
  v40 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)&buf[24])
  {
    v43 = 0.0;
  }
  else
  {
    v41 = v288;
    v42 = *(_QWORD *)v288;
    v43 = 0.0;
    do
    {
      if (v40 == v42)
      {
        v45 = *(_QWORD *)(v41 - 8);
        v41 -= 8;
        v42 = v45;
        v44 = (double *)(v45 + 4848);
        v40 = v45 + 5120;
      }
      else
      {
        v44 = (double *)(v40 - 272);
      }
      v43 = v43 + *v44;
      v40 -= 320;
    }
    while (v40 != *(_QWORD *)&buf[24]);
  }
  v46 = *(double *)&v38 < 4.4704 && v43 > 0.0;
  v47 = sub_100C5CF64(a1 + 160);
  if (v43 < 2.22044605e-16 || !v47)
    goto LABEL_84;
  LODWORD(v227) = 0;
LABEL_85:
  HIDWORD(v220) = v46;
LABEL_86:
  if (v24)
    v49 = v284;
  else
    v49 = 0.0;
  v50 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v50 = *(_QWORD *)(v288 - 8) + 5120;
  LODWORD(v224) = sub_100231CBC(a1, v19, v49, *(double *)(v50 - 96));
  if ((_DWORD)v224)
  {
    v51 = sub_100CDEAF8(a1);
    v52 = HIDWORD(v229);
    if (!v51)
      v52 = -1;
    HIDWORD(v229) = v52;
    v53 = LODWORD(v227);
    if (!v51)
      v53 = 2;
    LODWORD(v227) = v53;
  }
  if ((sub_100C5CF0C(a1 + 160) & 1) != 0 || sub_100C5CF64(a1 + 160))
  {
    v54 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      v54 = *(_QWORD *)(v288 - 8) + 5120;
    if (sub_100CDFD5C(a1, v54 - 320))
    {
      v56 = v55;
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v57 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v58 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)buf = 134349312;
        *(_QWORD *)&buf[4] = v56;
        *(_WORD *)&buf[12] = 2050;
        *(_QWORD *)&buf[14] = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Rejecting fusion due to gps-speed based driving detection, %{public}f, workout, %{public}ld", buf, 0x16u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
        v187 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)v303 = 134349312;
        *(_QWORD *)&v303[4] = v56;
        *(_WORD *)&v303[12] = 2050;
        *(_QWORD *)&v303[14] = v187;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Rejecting fusion due to gps-speed based driving detection, %{public}f, workout, %{public}ld", v303, 22);
        v189 = (char *)v188;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v188);
        if (v189 != buf)
          free(v189);
      }
      LODWORD(v227) = 3;
      HIDWORD(v229) = -1;
    }
    v59 = sub_10009D5DC(a1 + 664, (uint64_t)buf);
    v60 = *(_DWORD *)v440 == 5 ? v59 : 0;
    if (v60 == 1)
    {
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      v61 = qword_10229FCD8;
      if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
      {
        v62 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)buf = 134349056;
        *(_QWORD *)&buf[4] = v62;
        _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Rejecting fusion due to activity based driving detection, workout, %{public}ld", buf, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
        v190 = *(_QWORD *)(a1 + 304);
        *(_DWORD *)v303 = 134349056;
        *(_QWORD *)&v303[4] = v190;
        LODWORD(v213) = 12;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "Rejecting fusion due to activity based driving detection, workout, %{public}ld", v303, *(_QWORD *)&v213);
        v192 = (char *)v191;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v191);
        if (v192 != buf)
          free(v192);
      }
      sub_100C5CF64(a1 + 160);
      v63 = 4;
      goto LABEL_139;
    }
  }
  v64 = sub_100C5CF64(a1 + 160);
  if (SHIDWORD(v229) > 0 && v64)
  {
    v67 = *((_QWORD *)&v288 + 1);
    v66 = (uint64_t *)v288;
    if (*((_QWORD *)&v288 + 1) == *((_QWORD *)&v286 + 1))
      LODWORD(v68) = 0;
    else
      v68 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v288 + 1) - *(_QWORD *)v288) >> 6)
          + 2 * (v288 - v286)
          + 0x3333333333333333 * ((uint64_t)(*((_QWORD *)&v286 + 1) - *(_QWORD *)v286) >> 6);
    if ((int)v68 >= 5)
      LODWORD(v68) = 5;
    *(_OWORD *)buf = v288;
    sub_100AAD33C((uint64_t **)buf, -(uint64_t)(int)v68);
    v69 = *(_QWORD *)&buf[8];
    if (v67 == *(_QWORD *)&buf[8])
      goto LABEL_138;
    v70 = 0;
    v71 = *v66;
    do
    {
      v72 = v67;
      if (v67 == v71)
        v72 = *(v66 - 1) + 5120;
      v73 = sub_100CE1670(a1);
      if (*(_DWORD *)(v72 - 104))
        v74 = 1;
      else
        v74 = v73;
      v71 = *v66;
      if (v67 == *v66)
      {
        v75 = *--v66;
        v71 = v75;
        v67 = v75 + 5120;
      }
      v70 += v74;
      v67 -= 320;
    }
    while (v67 != v69);
    if (v70 <= 2)
    {
LABEL_138:
      v63 = 5;
LABEL_139:
      LODWORD(v227) = v63;
      HIDWORD(v229) = -1;
    }
  }
  sub_1002446A4((uint64_t)v228, SHIDWORD(v229));
  v76 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v76 = *(_QWORD *)(v288 - 8) + 5120;
  sub_10020C63C((uint64_t)v228, (double *)(v76 - 320));
  if (SHIDWORD(v229) < 1)
  {
    HIDWORD(v227) = 0;
    v78 = v19;
  }
  else
  {
    if (*(_BYTE *)(a1 + 2128))
      v77 = 1;
    else
      v77 = v21;
    HIDWORD(v227) = v77;
    if (v77)
      v78 = v284;
    else
      v78 = v19;
  }
  *(double *)(a1 + 2088) = v78 + *(double *)(a1 + 2088);
  *(double *)(a1 + 2096) = v19 + *(double *)(a1 + 2096);
  *(double *)(a1 + 2104) = v20 + *(double *)(a1 + 2104);
  v79 = *(double *)(a1 + 2120);
  v81 = *((_QWORD *)&v288 + 1);
  v80 = (_QWORD *)v288;
  if (*(double *)(a1 + 2112) < 0.0)
    goto LABEL_154;
  v82 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v82 = *(_QWORD *)(v288 - 8) + 5120;
  if (v79 > *(double *)(v82 - 224))
LABEL_154:
    *(double *)(a1 + 2112) = v79;
  v271 = 0u;
  v272 = 0u;
  v269 = 0u;
  v270 = 0u;
  v267 = 0u;
  *(_OWORD *)theString = 0u;
  v265 = 0u;
  v266 = 0u;
  v263 = 0u;
  v264 = 0u;
  __src = 0u;
  if (v81 == *v80)
    v81 = *(v80 - 1) + 5120;
  v83 = sub_10021A5E4((uint64_t)v228);
  v84 = sub_10007C9C8((uint64_t)v228);
  v85 = v84;
  v86 = *(_OWORD *)(v81 - 312);
  v87 = *(_OWORD *)(v81 - 296);
  v264 = *(_OWORD *)(v81 - 280);
  v88 = *(_OWORD *)(v81 - 264);
  v89 = *(_OWORD *)(v81 - 232);
  v90 = *(_OWORD *)(v81 - 216);
  v266 = *(_OWORD *)(v81 - 248);
  v91 = *(_OWORD *)(v81 - 184);
  v92 = *(_OWORD *)(v81 - 152);
  v93 = *(_OWORD *)(v81 - 200);
  v271 = *(_OWORD *)(v81 - 168);
  v272 = v92;
  v269 = v93;
  v270 = v91;
  __src = v86;
  v263 = v87;
  v267 = v89;
  *(_OWORD *)theString = v90;
  v265 = v88;
  *(double *)&v264 = v78;
  *((double *)&v266 + 1) = v83;
  LOBYTE(v269) = BYTE4(v227);
  BYTE1(v269) = sub_10007C824(v84, v84);
  v94 = type;
  if (HIDWORD(v227))
    v94 = 1;
  BYTE6(v272) = v94;
  DWORD2(v272) = v85;
  *(_QWORD *)buf = 0xBFF0000000000000;
  sub_100208740(a1, (double *)buf, a3);
  v95 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v95 = *(_QWORD *)(v288 - 8) + 5120;
  v96 = *(double *)buf;
  v97 = sub_1002446AC(1.5, 0.15, 3.5, 0.35, *(double *)(v95 - 80));
  sub_100197040();
  if ((sub_100195F08() & 1) != 0 || (sub_100197040(), sub_10019DF90()))
  {
    v98 = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a1 + 656) + 24))(*(_QWORD *)(a1 + 656), buf, a3);
    if (*(_DWORD *)v429 == 2)
      v99 = v98;
    else
      v99 = 0;
    sub_100DE6760(*(_QWORD *)(a1 + 2136), SDWORD2(v263), v99, *(double *)(a1 + 2096), *(double *)(a1 + 2104), v96, *(double *)(a1 + 2088), v18, *((double *)&v266 + 1));
  }
  v221 = (const char *)(a1 + 2088);
  v100 = fmin(fmax(v97, 0.15), 0.35);
  if (*(_BYTE *)(a1 + 2129))
  {
    sub_101618B40((uint64_t)v303);
    operator new();
  }
  HIDWORD(v224) = sub_100218B50(a1) ^ 1;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v101 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, BYTE4(v224)))
  {
    v102 = *((_QWORD *)&v288 + 1);
    v103 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    {
      v103 = *(_QWORD *)(v288 - 8) + 5120;
      v102 = v103;
    }
    v104 = v284;
    v105 = *(_DWORD *)(v103 - 104);
    v106 = *(double *)(a1 + 2096);
    v107 = *(_QWORD *)(a1 + 2104);
    v216 = *(const char **)(a1 + 2088);
    v218 = *(_QWORD *)(v102 - 112);
    v219 = (const char *)*((_QWORD *)&v266 + 1);
    v108 = (*(uint64_t (**)(_QWORD, _BYTE *, double))(**(_QWORD **)(a1 + 656) + 24))(*(_QWORD *)(a1 + 656), v303, a3);
    if ((v108 & (v305 > 0.0)) != 0)
      v109 = 1.0 / v305;
    else
      v109 = -1.0;
    v214 = *(const char **)&v109;
    v215 = DWORD2(v266);
    v110 = sub_10007C9C8((uint64_t)v228);
    v111 = sub_10007C824(v110, v110);
    v112 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      v113 = *(double *)(*(_QWORD *)(v288 - 8) + 4896);
    else
      v113 = *(double *)(*((_QWORD *)&v288 + 1) - 224);
    v114 = 0.0;
    if (*(double *)v221 != 0.0)
      v114 = (v113 - *(double *)(a1 + 2112)) / *(double *)v221;
    v115 = v104 / v19;
    if (v19 <= 0.0)
      v115 = 0.0;
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    {
      v117 = *(_QWORD *)(v288 - 8);
      v116 = (uint64_t *)(v117 + 5112);
      v112 = v117 + 5120;
    }
    else
    {
      v116 = (uint64_t *)(*((_QWORD *)&v288 + 1) - 8);
    }
    v118 = *v116;
    v119 = *(_QWORD *)(v112 - 88);
    *(_DWORD *)buf = 136332034;
    *(_QWORD *)&buf[4] = "time";
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = a3;
    *(_WORD *)&buf[22] = 2080;
    *(_QWORD *)&buf[24] = "count";
    *(_WORD *)&buf[32] = 1024;
    *(_DWORD *)v419 = DWORD2(v263);
    *(_WORD *)&v419[4] = 2080;
    v420 = "deltaCount";
    v421 = 1024;
    v422 = v105;
    v423 = 2080;
    v424 = "deltaDist(m)";
    v425 = 2080;
    v426 = "ped";
    v427 = 2048;
    v428 = (const char *)*((_QWORD *)&v264 + 1);
    *(_WORD *)v429 = 2080;
    *(_QWORD *)&v429[2] = "calPed";
    v430 = 2048;
    v431 = *(const char **)&v19;
    v432 = 2080;
    v433 = "gps";
    v434 = 2048;
    v435 = *(const char **)&v104;
    v436 = 2080;
    v437 = "fused";
    v438 = 2048;
    v439 = (const char *)v264;
    *(_WORD *)v440 = 2080;
    *(_QWORD *)&v440[2] = "totalDist(m)";
    v441 = 2080;
    v442 = "calPed";
    v443 = 2048;
    v444 = v106;
    v445 = 2080;
    v446 = "calPedMobility";
    v447 = 2048;
    *(_QWORD *)v448 = v107;
    *(_WORD *)&v448[8] = 2080;
    *(_QWORD *)&v448[10] = "gps";
    *(_WORD *)&v448[18] = 2048;
    *(double *)&v448[20] = v96;
    *(_WORD *)&v448[28] = 2080;
    *(_QWORD *)&v448[30] = "fused";
    *(_WORD *)&v448[38] = 2048;
    *(_QWORD *)&v448[40] = v216;
    *(_WORD *)&v448[48] = 2080;
    *(_QWORD *)&v448[50] = "usedGps";
    *(_WORD *)&v448[58] = 1024;
    *(_DWORD *)&v448[60] = HIDWORD(v227);
    v449 = 2080;
    v450 = "pace(s/m)";
    v451 = 2080;
    v452 = "ped";
    v453 = 2048;
    v454 = v218;
    v455 = 2080;
    v456 = "calPed";
    v457 = 2048;
    v458 = v18;
    v459 = 2080;
    v460 = "StepDistancePedometerFusedPace";
    v461 = 2048;
    v462 = *((_QWORD *)&v266 + 1);
    v463 = 2080;
    v464 = "rawGps";
    v465 = 2048;
    v466 = v214;
    v467 = 2080;
    v468 = "StepDistanceFinalFusedPace";
    v469 = 2048;
    v470 = *((_QWORD *)&v266 + 1);
    v471 = 2080;
    v472 = "StepDistanceUsedOdometerPace";
    v473 = 1024;
    v474 = v111;
    v475 = 2080;
    v476 = "odometerPaceStdError";
    v477 = 2048;
    v478 = v282;
    v479 = 2080;
    v480 = "pedometerPaceStdError";
    v481 = 2048;
    v482 = v283;
    v483 = 2080;
    v484 = "residual";
    v485 = 2048;
    v486 = v282 - v283;
    v487 = 2080;
    v488 = "output";
    v489 = 2048;
    v490 = *((_QWORD *)&v266 + 1);
    v491 = 2080;
    v492 = "tolerance";
    v493 = 2048;
    v494 = v100;
    v495 = 2080;
    v496 = "activeTime";
    v497 = 2048;
    v498 = v113;
    v499 = 2080;
    v500 = "averageActivePace";
    v501 = 2048;
    v502 = v114;
    v503 = 2080;
    v504 = "ratio";
    v505 = 2048;
    v506 = v115;
    v507 = 2080;
    v508 = "vehicular";
    v509 = 1024;
    v510 = (int)v224;
    v511 = 2080;
    v512 = "firstStepTime";
    v513 = 2048;
    v514 = v118;
    v515 = 2080;
    v516 = "lastStepTime";
    v517 = 2048;
    v518 = v119;
    v519 = 2080;
    v520 = "pedometerArmConstrainedState";
    v521 = 1024;
    v522 = BYTE8(v271);
    v523 = 2080;
    v524 = "distanceSource";
    v525 = 1024;
    v526 = BYTE6(v272);
    v527 = 2080;
    v528 = "paceSource";
    v529 = 1024;
    v530 = DWORD2(v272);
    _os_log_impl((void *)&_mh_execute_header, v101, BYTE4(v224), "unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d,%s,%d,%s,%d", buf, 0x280u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v165 = *((_QWORD *)&v288 + 1);
    v166 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    {
      v166 = *(_QWORD *)(v288 - 8) + 5120;
      v165 = v166;
    }
    v167 = qword_10229FCD8;
    v168 = v284;
    LODWORD(v219) = *(_DWORD *)(v166 - 104);
    v169 = *(double *)(a1 + 2096);
    v170 = *(_QWORD *)(a1 + 2104);
    v171 = *(_QWORD *)(a1 + 2088);
    v217 = *(const char **)(v165 - 112);
    v172 = (*(uint64_t (**)(_QWORD, _OWORD *, double))(**(_QWORD **)(a1 + 656) + 24))(*(_QWORD *)(a1 + 656), v289, a3);
    if ((v172 & (*((double *)&v290 + 1) > 0.0)) != 0)
      v173 = 1.0 / *((double *)&v290 + 1);
    else
      v173 = -1.0;
    v174 = sub_10007C9C8((uint64_t)v228);
    v175 = sub_10007C824(v174, v174);
    v176 = *((_QWORD *)&v288 + 1);
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      v177 = *(double *)(*(_QWORD *)(v288 - 8) + 4896);
    else
      v177 = *(double *)(*((_QWORD *)&v288 + 1) - 224);
    v193 = 0.0;
    if (*(double *)v221 != 0.0)
      v193 = (v177 - *(double *)(a1 + 2112)) / *(double *)v221;
    v194 = v168 / v19;
    if (v19 <= 0.0)
      v194 = 0.0;
    if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    {
      v196 = *(_QWORD *)(v288 - 8);
      v195 = (uint64_t *)(v196 + 5112);
      v176 = v196 + 5120;
    }
    else
    {
      v195 = (uint64_t *)(*((_QWORD *)&v288 + 1) - 8);
    }
    v197 = *v195;
    v198 = *(_QWORD *)(v176 - 88);
    *(_DWORD *)v303 = 136332034;
    *(_QWORD *)&v303[4] = "time";
    *(_WORD *)&v303[12] = 2048;
    *(double *)&v303[14] = a3;
    *(_WORD *)&v303[22] = 2080;
    *(_QWORD *)&v303[24] = "count";
    *(_WORD *)&v303[32] = 1024;
    *(_DWORD *)v304 = DWORD2(v263);
    *(_WORD *)&v304[4] = 2080;
    v305 = COERCE_DOUBLE("deltaCount");
    v306 = 1024;
    v307 = (int)v219;
    v308 = 2080;
    v309 = "deltaDist(m)";
    v310 = 2080;
    v311 = "ped";
    v312 = 2048;
    v313 = (const char *)*((_QWORD *)&v264 + 1);
    v314 = 2080;
    v315 = "calPed";
    v316 = 2048;
    v317 = *(const char **)&v19;
    v318 = 2080;
    v319 = "gps";
    v320 = 2048;
    v321 = *(const char **)&v168;
    v322 = 2080;
    v323 = "fused";
    v324 = 2048;
    v325 = (const char *)v264;
    v326 = 2080;
    v327 = "totalDist(m)";
    v328 = 2080;
    v329 = "calPed";
    v330 = 2048;
    v331 = v169;
    v332 = 2080;
    v333 = "calPedMobility";
    v334 = 2048;
    *(_QWORD *)v335 = v170;
    *(_WORD *)&v335[8] = 2080;
    *(_QWORD *)&v335[10] = "gps";
    *(_WORD *)&v335[18] = 2048;
    *(double *)&v335[20] = v96;
    *(_WORD *)&v335[28] = 2080;
    *(_QWORD *)&v335[30] = "fused";
    *(_WORD *)&v335[38] = 2048;
    *(_QWORD *)&v335[40] = v171;
    *(_WORD *)&v335[48] = 2080;
    *(_QWORD *)&v335[50] = "usedGps";
    *(_WORD *)&v335[58] = 1024;
    *(_DWORD *)&v335[60] = HIDWORD(v227);
    v336 = 2080;
    v337 = "pace(s/m)";
    v338 = 2080;
    v339 = "ped";
    v340 = 2048;
    v341 = v217;
    v342 = 2080;
    v343 = "calPed";
    v344 = 2048;
    v345 = v18;
    v346 = 2080;
    v347 = "StepDistancePedometerFusedPace";
    v348 = 2048;
    v349 = *((_QWORD *)&v266 + 1);
    v350 = 2080;
    v351 = "rawGps";
    v352 = 2048;
    v353 = v173;
    v354 = 2080;
    v355 = "StepDistanceFinalFusedPace";
    v356 = 2048;
    v357 = *((_QWORD *)&v266 + 1);
    v358 = 2080;
    v359 = "StepDistanceUsedOdometerPace";
    v360 = 1024;
    v361 = v175;
    v362 = 2080;
    v363 = "odometerPaceStdError";
    v364 = 2048;
    v365 = v282;
    v366 = 2080;
    v367 = "pedometerPaceStdError";
    v368 = 2048;
    v369 = v283;
    v370 = 2080;
    v371 = "residual";
    v372 = 2048;
    v373 = v282 - v283;
    v374 = 2080;
    v375 = "output";
    v376 = 2048;
    v377 = *((_QWORD *)&v266 + 1);
    v378 = 2080;
    v379 = "tolerance";
    v380 = 2048;
    v381 = v100;
    v382 = 2080;
    v383 = "activeTime";
    v384 = 2048;
    v385 = v177;
    v386 = 2080;
    v387 = "averageActivePace";
    v388 = 2048;
    v389 = v193;
    v390 = 2080;
    v391 = "ratio";
    v392 = 2048;
    v393 = v194;
    v394 = 2080;
    v395 = "vehicular";
    v396 = 1024;
    v397 = (int)v224;
    v398 = 2080;
    v399 = "firstStepTime";
    v400 = 2048;
    v401 = v197;
    v402 = 2080;
    v403 = "lastStepTime";
    v404 = 2048;
    v405 = v198;
    v406 = 2080;
    v407 = "pedometerArmConstrainedState";
    v408 = 1024;
    v409 = BYTE8(v271);
    v410 = 2080;
    v411 = "distanceSource";
    v412 = 1024;
    v413 = BYTE6(v272);
    v414 = 2080;
    v415 = "paceSource";
    v416 = 1024;
    v417 = DWORD2(v272);
    LODWORD(v213) = 640;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v167, HIDWORD(v224), "unified,%s,%0.3f,%s,%u,%s,%u,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%0.2f,%s,%u,%s,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%u,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.4f,%s,%0.3f,%s,%0.4f,%s,%0.2f,%s,%u,%s,%0.3f,%s,%0.3f,%s,%d,%s,%d,%s,%d", v303, v213, *((const char **)&v266 + 1), DWORD2(v266), v217, DWORD2(v263), v219, *(const char **)&v220, *(double *)&v221,
      *(const char **)&v222,
      *(double *)&v223,
      v224,
      *(double *)&v226,
      *(const char **)&v227,
      *(double *)&v228,
      v229,
      v230,
      v232,
      v233,
      v235,
      v236,
      v238,
      v239,
      v241,
      v242,
      v244,
      v245,
      v247,
      v248,
      v250,
      v251,
      v252,
      v253,
      v255,
      v256,
      v258,
      v259,
      v261,
      (_DWORD)__src,
      *((const char **)&__src + 1),
      *(double *)&v263,
      *((const char **)&v263 + 1),
      *(double *)&v264,
      *((const char **)&v264 + 1),
      *(double *)&v265,
      *((const char **)&v265 + 1),
      *(double *)&v266,
      *((const char **)&v266 + 1),
      *(double *)&v267,
      *((const char **)&v267 + 1),
      *(double *)theString,
      (const char *)theString[1],
      *(double *)&v269,
      *((const char **)&v269 + 1),
      *(double *)&v270,
      *((const char **)&v270 + 1),
      (_DWORD)v271,
      *((const char **)&v271 + 1),
      *(double *)&v272,
      *((const char **)&v272 + 1),
      v273,
      *(const char **)&v274,
      (_DWORD)v275,
      *((const char **)&v275 + 1),
      (_DWORD)v276,
      *((const char **)&v276 + 1),
      LODWORD(v277[0]));
    v200 = (char *)v199;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v199);
    if (v200 != buf)
      free(v200);
  }
  v302 = 0;
  v300 = 0u;
  v301 = 0u;
  v298 = 0u;
  v299 = 0u;
  v296 = 0u;
  v297 = 0u;
  v294 = 0u;
  v295 = 0u;
  v292 = 0u;
  v293 = 0u;
  v290 = 0u;
  v291 = 0u;
  memset(v289, 0, sizeof(v289));
  sub_10009D5DC(a1 + 664, (uint64_t)v289);
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v120 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, BYTE4(v224)))
  {
    v121 = sub_10009E454((uint64_t)v228);
    v122 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)buf = 134219264;
    *(double *)&buf[4] = a3;
    *(_WORD *)&buf[12] = 2048;
    *(double *)&buf[14] = v121;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&buf[24] = v122;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = HIDWORD(v229);
    *(_WORD *)v419 = 1024;
    *(_DWORD *)&v419[2] = LODWORD(v227);
    LOWORD(v420) = 1024;
    *(_DWORD *)((char *)&v420 + 2) = v297;
    _os_log_impl((void *)&_mh_execute_header, v120, BYTE4(v224), "unified2,time,%f,odometerSmoothMeanPace,%.3f,estimatedOdometerQuality,%d,odometerFusionQuality,%d,odometerFusionRejectionReason,%d,activityType,%d", buf, 0x2Eu);
  }
  v123 = (char *)v226;
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v178 = qword_10229FCD8;
    v179 = sub_10009E454((uint64_t)v228);
    v180 = *(_DWORD *)(a1 + 792);
    *(_DWORD *)v303 = 134219264;
    *(double *)&v303[4] = a3;
    *(_WORD *)&v303[12] = 2048;
    *(double *)&v303[14] = v179;
    *(_WORD *)&v303[22] = 1024;
    *(_DWORD *)&v303[24] = v180;
    *(_WORD *)&v303[28] = 1024;
    *(_DWORD *)&v303[30] = HIDWORD(v229);
    *(_WORD *)v304 = 1024;
    *(_DWORD *)&v304[2] = LODWORD(v227);
    LOWORD(v305) = 1024;
    *(_DWORD *)((char *)&v305 + 2) = v297;
    LODWORD(v213) = 46;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v178, HIDWORD(v224), "unified2,time,%f,odometerSmoothMeanPace,%.3f,estimatedOdometerQuality,%d,odometerFusionQuality,%d,odometerFusionRejectionReason,%d,activityType,%d", COERCE_DOUBLE(v303), v213, (_DWORD)v214, v215, (_DWORD)v216, v218);
    v182 = (char *)v181;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v181);
    if (v182 != buf)
      free(v182);
    v123 = (char *)v226;
  }
  v254 = v270;
  v257 = v271;
  v260 = v272;
  v243 = v266;
  v246 = v267;
  v249 = *(_OWORD *)theString;
  v231 = __src;
  v234 = v263;
  v237 = v264;
  v240 = v265;
  v124 = *((_QWORD *)v123 + 2);
  v125 = *((_QWORD *)v123 + 1);
  if (v125 >= v124)
  {
    v127 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v125 - *(_QWORD *)v123) >> 6);
    if (v127 + 1 > 0x155555555555555)
      sub_100259694();
    v128 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v124 - *(_QWORD *)v123) >> 6);
    v129 = 2 * v128;
    if (2 * v128 <= v127 + 1)
      v129 = v127 + 1;
    if (v128 >= 0xAAAAAAAAAAAAAALL)
      v130 = 0x155555555555555;
    else
      v130 = v129;
    if (v130)
    {
      v131 = (char *)sub_1002746CC((uint64_t)(v123 + 16), v130);
      v123 = (char *)v226;
    }
    else
    {
      v131 = 0;
    }
    v132 = &v131[192 * v127];
    v133 = &v131[192 * v130];
    *((_OWORD *)v132 + 7) = v269;
    *((_OWORD *)v132 + 8) = v254;
    *((_OWORD *)v132 + 9) = v257;
    *((_OWORD *)v132 + 10) = v260;
    *((_OWORD *)v132 + 3) = v240;
    *((_OWORD *)v132 + 4) = v243;
    *((_OWORD *)v132 + 5) = v246;
    *((_OWORD *)v132 + 6) = v249;
    *(_OWORD *)v132 = v231;
    *((_OWORD *)v132 + 1) = v234;
    *((_OWORD *)v132 + 2) = v237;
    *((double *)v132 + 22) = v222;
    v132[184] = BYTE4(v223);
    v132[185] = (char)v223;
    *(_DWORD *)(v132 + 186) = v280;
    *((_WORD *)v132 + 95) = v281;
    v126 = v132 + 192;
    v135 = *(char **)v123;
    v134 = (char *)*((_QWORD *)v123 + 1);
    if (v134 != *(char **)v123)
    {
      do
      {
        v136 = *((_OWORD *)v134 - 12);
        v137 = *((_OWORD *)v134 - 11);
        v138 = *((_OWORD *)v134 - 9);
        *((_OWORD *)v132 - 10) = *((_OWORD *)v134 - 10);
        *((_OWORD *)v132 - 9) = v138;
        *((_OWORD *)v132 - 12) = v136;
        *((_OWORD *)v132 - 11) = v137;
        v139 = *((_OWORD *)v134 - 8);
        v140 = *((_OWORD *)v134 - 7);
        v141 = *((_OWORD *)v134 - 5);
        *((_OWORD *)v132 - 6) = *((_OWORD *)v134 - 6);
        *((_OWORD *)v132 - 5) = v141;
        *((_OWORD *)v132 - 8) = v139;
        *((_OWORD *)v132 - 7) = v140;
        v142 = *((_OWORD *)v134 - 4);
        v143 = *((_OWORD *)v134 - 3);
        v144 = *((_OWORD *)v134 - 1);
        *((_OWORD *)v132 - 2) = *((_OWORD *)v134 - 2);
        *((_OWORD *)v132 - 1) = v144;
        *((_OWORD *)v132 - 4) = v142;
        *((_OWORD *)v132 - 3) = v143;
        v132 -= 192;
        v134 -= 192;
      }
      while (v134 != v135);
      v134 = *(char **)v123;
    }
    *(_QWORD *)v123 = v132;
    *((_QWORD *)v123 + 1) = v126;
    *((_QWORD *)v123 + 2) = v133;
    if (v134)
      operator delete(v134);
  }
  else
  {
    memmove(*((void **)v123 + 1), &__src, 0xB0uLL);
    *(double *)(v125 + 176) = v222;
    *(_BYTE *)(v125 + 184) = BYTE4(v223);
    *(_BYTE *)(v125 + 185) = (_BYTE)v223;
    *(_DWORD *)(v125 + 186) = v280;
    *(_WORD *)(v125 + 190) = v281;
    v126 = (char *)(v125 + 192);
  }
  *((_QWORD *)v123 + 1) = v126;
  v145 = (double *)*((_QWORD *)&v288 + 1);
  v146 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v146 = *(_QWORD *)(v288 - 8) + 5120;
  if (!*(_DWORD *)(v146 - 104))
    goto LABEL_242;
  if ((BYTE4(v220) & 1) != 0)
    goto LABEL_229;
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
  {
    v148 = *(double **)(v288 - 8);
    if (v148[606] < 0.5722112)
      goto LABEL_229;
    if (v148[632] < 0.5722112)
      goto LABEL_229;
    if (*(double *)&v264 < 0.5722112)
      goto LABEL_229;
    if (v148[616] > 4.47387258)
      goto LABEL_229;
    v147 = *((double *)&v266 + 1);
    if (*((double *)&v266 + 1) > 4.47387258)
      goto LABEL_229;
    v145 = v148 + 640;
  }
  else
  {
    if (*(double *)(*((_QWORD *)&v288 + 1) - 272) < 0.5722112)
      goto LABEL_229;
    if (*(double *)(*((_QWORD *)&v288 + 1) - 64) < 0.5722112)
      goto LABEL_229;
    if (*(double *)&v264 < 0.5722112)
      goto LABEL_229;
    if (*(double *)(*((_QWORD *)&v288 + 1) - 192) > 4.47387258)
      goto LABEL_229;
    v147 = *((double *)&v266 + 1);
    if (*((double *)&v266 + 1) > 4.47387258)
      goto LABEL_229;
  }
  if (*(v145 - 24) != 0.0 && v147 == 0.0)
  {
LABEL_229:
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v149 = qword_10229FCD8;
    if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
    {
      if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      {
        v154 = *(_QWORD *)(v288 - 8);
        v150 = (int *)(v154 + 4832);
        v151 = (int *)(v154 + 5016);
        v152 = (const char **)(v154 + 4848);
        v153 = v154 + 5120;
      }
      else
      {
        v150 = (int *)(*((_QWORD *)&v288 + 1) - 288);
        v151 = (int *)(*((_QWORD *)&v288 + 1) - 104);
        v152 = (const char **)(*((_QWORD *)&v288 + 1) - 272);
        v153 = *((_QWORD *)&v288 + 1);
      }
      v155 = *v151;
      v156 = *v150;
      v157 = *v152;
      v158 = *(_QWORD *)(v153 - 64);
      if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      {
        v162 = *(_QWORD *)(v288 - 8);
        v159 = *(_QWORD *)(v162 + 5008);
        v160 = *(_QWORD *)(v162 + 4928);
        v161 = *(double *)(v162 + 5040);
      }
      else
      {
        v159 = *(_QWORD *)(*((_QWORD *)&v288 + 1) - 112);
        v160 = *(_QWORD *)(*((_QWORD *)&v288 + 1) - 192);
        v161 = *(double *)(*((_QWORD *)&v288 + 1) - 80);
      }
      v163 = 0.0;
      if (v161 != 0.0)
        v163 = 1.0 / v161;
      *(_DWORD *)buf = 136322050;
      *(_QWORD *)&buf[4] = "time";
      *(_WORD *)&buf[12] = 2048;
      *(double *)&buf[14] = a3;
      *(_WORD *)&buf[22] = 2080;
      *(_QWORD *)&buf[24] = "count";
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)v419 = v156;
      *(_WORD *)&v419[4] = 2080;
      v420 = "deltaCount";
      v421 = 1024;
      v422 = v155;
      v423 = 2080;
      v424 = "rawDistance";
      v425 = 2048;
      v426 = v157;
      v427 = 2080;
      v428 = "calDistance";
      *(_WORD *)v429 = 2048;
      *(_QWORD *)&v429[2] = v158;
      v430 = 2080;
      v431 = "odomDistance";
      v432 = 2048;
      v433 = *(const char **)&v284;
      v434 = 2080;
      v435 = "fusedDistance";
      v436 = 2048;
      v437 = (const char *)v264;
      v438 = 2080;
      v439 = "odometerDistanceForSlowPaceCheckWindow";
      *(_WORD *)v440 = 2048;
      *(double *)&v440[2] = v274;
      v441 = 2080;
      v442 = "pedometerRawDistanceForSlowPaceCheckWindow";
      v443 = 2048;
      v444 = v43;
      v445 = 2080;
      v446 = "odometerError";
      v447 = 1024;
      *(_DWORD *)v448 = HIDWORD(v220);
      *(_WORD *)&v448[4] = 2080;
      *(_QWORD *)&v448[6] = "rawPace";
      *(_WORD *)&v448[14] = 2048;
      *(_QWORD *)&v448[16] = v159;
      *(_WORD *)&v448[24] = 2080;
      *(_QWORD *)&v448[26] = "calPace";
      *(_WORD *)&v448[34] = 2048;
      *(_QWORD *)&v448[36] = v160;
      *(_WORD *)&v448[44] = 2080;
      *(_QWORD *)&v448[46] = "odomPace";
      *(_WORD *)&v448[54] = 2048;
      *(double *)&v448[56] = v163;
      v449 = 2080;
      v450 = "fusedPace";
      v451 = 2048;
      v452 = (const char *)*((_QWORD *)&v266 + 1);
      _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f", buf, 0x10Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FCD0 != -1)
        dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
      if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      {
        v201 = *(_QWORD *)(v288 - 8);
        v183 = (int *)(v201 + 4832);
        v184 = (int *)(v201 + 5016);
        v185 = (const char **)(v201 + 4848);
        v186 = v201 + 5120;
      }
      else
      {
        v183 = (int *)(*((_QWORD *)&v288 + 1) - 288);
        v184 = (int *)(*((_QWORD *)&v288 + 1) - 104);
        v185 = (const char **)(*((_QWORD *)&v288 + 1) - 272);
        v186 = *((_QWORD *)&v288 + 1);
      }
      v202 = *v184;
      v203 = *v183;
      v204 = *v185;
      v205 = *(const char **)(v186 - 64);
      if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
      {
        v209 = *(_QWORD *)(v288 - 8);
        v206 = *(_QWORD *)(v209 + 5008);
        v207 = *(_QWORD *)(v209 + 4928);
        v208 = *(double *)(v209 + 5040);
      }
      else
      {
        v206 = *(_QWORD *)(*((_QWORD *)&v288 + 1) - 112);
        v207 = *(_QWORD *)(*((_QWORD *)&v288 + 1) - 192);
        v208 = *(double *)(*((_QWORD *)&v288 + 1) - 80);
      }
      v210 = 0.0;
      if (v208 != 0.0)
        v210 = 1.0 / v208;
      *(_DWORD *)v303 = 136322050;
      *(_QWORD *)&v303[4] = "time";
      *(_WORD *)&v303[12] = 2048;
      *(double *)&v303[14] = a3;
      *(_WORD *)&v303[22] = 2080;
      *(_QWORD *)&v303[24] = "count";
      *(_WORD *)&v303[32] = 1024;
      *(_DWORD *)v304 = v203;
      *(_WORD *)&v304[4] = 2080;
      v305 = COERCE_DOUBLE("deltaCount");
      v306 = 1024;
      v307 = v202;
      v308 = 2080;
      v309 = "rawDistance";
      v310 = 2048;
      v311 = v204;
      v312 = 2080;
      v313 = "calDistance";
      v314 = 2048;
      v315 = v205;
      v316 = 2080;
      v317 = "odomDistance";
      v318 = 2048;
      v319 = *(const char **)&v284;
      v320 = 2080;
      v321 = "fusedDistance";
      v322 = 2048;
      v323 = (const char *)v264;
      v324 = 2080;
      v325 = "odometerDistanceForSlowPaceCheckWindow";
      v326 = 2048;
      v327 = *(const char **)&v274;
      v328 = 2080;
      v329 = "pedometerRawDistanceForSlowPaceCheckWindow";
      v330 = 2048;
      v331 = v43;
      v332 = 2080;
      v333 = "odometerError";
      v334 = 1024;
      *(_DWORD *)v335 = HIDWORD(v220);
      *(_WORD *)&v335[4] = 2080;
      *(_QWORD *)&v335[6] = "rawPace";
      *(_WORD *)&v335[14] = 2048;
      *(_QWORD *)&v335[16] = v206;
      *(_WORD *)&v335[24] = 2080;
      *(_QWORD *)&v335[26] = "calPace";
      *(_WORD *)&v335[34] = 2048;
      *(_QWORD *)&v335[36] = v207;
      *(_WORD *)&v335[44] = 2080;
      *(_QWORD *)&v335[46] = "odomPace";
      *(_WORD *)&v335[54] = 2048;
      *(double *)&v335[56] = v210;
      v336 = 2080;
      v337 = "fusedPace";
      v338 = 2048;
      v339 = (const char *)*((_QWORD *)&v266 + 1);
      LODWORD(v213) = 270;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning Potential StepDistanceFusion error. File a radar if you are not walking/running in place. %s, %f, %s, %u, %s, %u, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %f, %s, %d, %s, %f, %s, %f, %s, %f, %s, %f", v303, v213, v214, v215, v216, v218, v219, v220, v221, v222,
        v223,
        *(double *)&v224,
        v226,
        v227,
        v228,
        *(double *)&v229,
        (const char *)v231,
        *((double *)&v231 + 1),
        (const char *)v234,
        DWORD2(v234),
        (const char *)v237,
        *((double *)&v237 + 1),
        (const char *)v240,
        *((double *)&v240 + 1),
        (const char *)v243,
        *((double *)&v243 + 1),
        (const char *)v246,
        *((double *)&v246 + 1));
      v212 = (char *)v211;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLStepDistanceFusion::normalMode(const double, std::vector<CLStepDistanceFusionResult> &)", "%s\n", v211);
      if (v212 != buf)
        free(v212);
    }
  }
LABEL_242:
  v164 = *((_QWORD *)&v288 + 1);
  if (*((_QWORD *)&v288 + 1) == *(_QWORD *)v288)
    v164 = *(_QWORD *)(v288 - 8) + 5120;
  *(_QWORD *)(a1 + 2120) = *(_QWORD *)(v164 - 224);
  *(_BYTE *)(a1 + 2128) = SHIDWORD(v229) > 0;
  if ((BYTE4(v227) & 1) == 0)
    *(double *)(a1 + 2000) = a3;
  return 1;
}

void sub_10007C784(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (SLOBYTE(STACK[0x657]) < 0)
    operator delete((void *)STACK[0x640]);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  sub_101618BB4((PB::Base *)&STACK[0x3C0]);
  _Unwind_Resume(a1);
}

uint64_t sub_10007C824(uint64_t a1, int a2)
{
  uint64_t result;
  NSObject *v3;
  _BOOL4 v4;
  const char *v5;
  uint8_t *v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if ((a2 - 2) < 3)
    return 1;
  if (a2)
    return 0;
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
  v3 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "[PaceController] isUsingOdometer - Requested while uninitialized", buf, 2u);
  }
  v4 = sub_1001BFF7C(115, 0);
  result = 0;
  if (v4)
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_10217E6A0);
    v7[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 16, "[PaceController] isUsingOdometer - Requested while uninitialized", v7, 2);
    v6 = (uint8_t *)v5;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLStepDistanceFusion::isUsingOdometer(CLPedometer::PaceOutputType) const", "%s\n", v5);
    if (v6 != buf)
      free(v6);
    return 0;
  }
  return result;
}

uint64_t sub_10007C9C8(uint64_t a1)
{
  sub_100197040();
  if (sub_100195F08() && sub_100D7B998(a1 + 912))
    return 3;
  if (*(int *)(a1 + 132) < 1)
    return 1;
  return 2;
}

void sub_10007CA14(uint64_t a1)
{
  __int128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  void **v20;
  __int128 v21;
  _QWORD __src[33];
  _QWORD **v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD **v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29[4];
  int v30;
  __int128 __p;
  uint64_t v32;
  _BYTE v33[116];
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  _OWORD v39[4];

  __src[0] = 0;
  __src[1] = 0;
  memset(&__src[2], 255, 20);
  __src[5] = 0;
  LODWORD(__src[6]) = 0;
  memset(&__src[7], 0, 20);
  *(_QWORD *)&v2 = -1;
  *((_QWORD *)&v2 + 1) = -1;
  *(_OWORD *)((char *)&__src[9] + 4) = v2;
  *(_OWORD *)((char *)&__src[11] + 4) = v2;
  *(_OWORD *)((char *)&__src[13] + 4) = v2;
  *(_OWORD *)((char *)&__src[15] + 4) = v2;
  *(_OWORD *)((char *)&__src[17] + 4) = v2;
  *(_OWORD *)((char *)&__src[19] + 4) = v2;
  *(_OWORD *)((char *)&__src[21] + 4) = v2;
  *(_OWORD *)((char *)&__src[23] + 4) = v2;
  *(_OWORD *)((char *)&__src[25] + 4) = v2;
  *(_OWORD *)((char *)&__src[27] + 4) = v2;
  HIDWORD(__src[29]) = -1;
  __src[30] = 0xBFF0000000000000;
  __src[31] = -1;
  v24 = 0;
  v25 = 0;
  __src[32] = -1;
  v23 = &v24;
  v27 = 0;
  v28 = 0;
  v26 = &v27;
  memset(v29, 0, sizeof(v29));
  v30 = 1065353216;
  __p = 0uLL;
  v32 = 0;
  *(_QWORD *)v33 = 0xBFF0000000000000;
  v34 = &v35;
  v35 = 0;
  v36 = 0;
  *(_DWORD *)&v33[15] = 0;
  memset(&v33[20], 0, 96);
  *(_QWORD *)&v33[8] = 0;
  v37 = 0u;
  v38 = 0u;
  LODWORD(v39[0]) = 0;
  *(_OWORD *)((char *)&v39[1] + 4) = v2;
  *(_OWORD *)((char *)&v39[2] + 4) = v2;
  *(_OWORD *)((char *)v39 + 4) = v2;
  memcpy((void *)(a1 + 1328), __src, 0x108uLL);
  v3 = a1 + 1600;
  sub_10007CDDC(a1 + 1592, *(_QWORD **)(a1 + 1600));
  v4 = v24;
  *(_QWORD *)(a1 + 1592) = v23;
  *(_QWORD *)(a1 + 1600) = v4;
  v5 = v25;
  *(_QWORD *)(a1 + 1608) = v25;
  if (v5)
  {
    v4[2] = v3;
    v23 = &v24;
    v24 = 0;
    v25 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1592) = v3;
  }
  v6 = a1 + 1624;
  sub_10007CDDC(a1 + 1616, *(_QWORD **)(a1 + 1624));
  v7 = v27;
  *(_QWORD *)(a1 + 1616) = v26;
  *(_QWORD *)(a1 + 1624) = v7;
  v8 = v28;
  *(_QWORD *)(a1 + 1632) = v28;
  if (v8)
  {
    v7[2] = v6;
    v26 = &v27;
    v27 = 0;
    v28 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1616) = v6;
  }
  sub_10020B514(a1 + 1640, v29);
  v9 = *(void **)(a1 + 1680);
  if (v9)
  {
    *(_QWORD *)(a1 + 1688) = v9;
    operator delete(v9);
  }
  *(_OWORD *)(a1 + 1680) = __p;
  *(_QWORD *)(a1 + 1696) = v32;
  v32 = 0;
  __p = 0uLL;
  v10 = *(_OWORD *)&v33[16];
  *(_OWORD *)(a1 + 1704) = *(_OWORD *)v33;
  *(_OWORD *)(a1 + 1720) = v10;
  v11 = *(_OWORD *)&v33[48];
  *(_OWORD *)(a1 + 1736) = *(_OWORD *)&v33[32];
  *(_OWORD *)(a1 + 1752) = v11;
  v12 = *(_OWORD *)&v33[64];
  v13 = *(_OWORD *)&v33[80];
  v14 = *(_OWORD *)&v33[96];
  *(_DWORD *)(a1 + 1816) = *(_DWORD *)&v33[112];
  *(_OWORD *)(a1 + 1784) = v13;
  *(_OWORD *)(a1 + 1800) = v14;
  *(_OWORD *)(a1 + 1768) = v12;
  v15 = a1 + 1832;
  sub_100008848(a1 + 1824, *(_QWORD **)(a1 + 1832));
  v16 = v35;
  *(_QWORD *)(a1 + 1824) = v34;
  *(_QWORD *)(a1 + 1832) = v16;
  v17 = v36;
  *(_QWORD *)(a1 + 1840) = v36;
  if (v17)
  {
    v16[2] = v15;
    v16 = 0;
    v34 = &v35;
    v35 = 0;
    v36 = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 1824) = v15;
  }
  v18 = v39[1];
  *(_OWORD *)(a1 + 1880) = v39[0];
  *(_OWORD *)(a1 + 1896) = v18;
  *(_OWORD *)(a1 + 1912) = v39[2];
  *(_DWORD *)(a1 + 1928) = v39[3];
  v19 = v38;
  *(_OWORD *)(a1 + 1848) = v37;
  *(_OWORD *)(a1 + 1864) = v19;
  sub_100008848((uint64_t)&v34, v16);
  if ((_QWORD)__p)
  {
    *((_QWORD *)&__p + 1) = __p;
    operator delete((void *)__p);
  }
  sub_100067A50((uint64_t)v29);
  sub_10007CDDC((uint64_t)&v26, v27);
  sub_10007CDDC((uint64_t)&v23, v24);
  v20 = (void **)(a1 + 1936);
  if (*(char *)(a1 + 1959) < 0)
    operator delete(*v20);
  *v20 = 0;
  *(_QWORD *)(a1 + 1944) = 0;
  *(_QWORD *)(a1 + 1952) = 0;
  *(_QWORD *)(a1 + 1960) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 1968) = 0;
  *(_DWORD *)(a1 + 2116) = -1;
  *(_QWORD *)&v21 = -1;
  *((_QWORD *)&v21 + 1) = -1;
  *(_OWORD *)(a1 + 1972) = v21;
  *(_OWORD *)(a1 + 1988) = v21;
  *(_OWORD *)(a1 + 2004) = v21;
  *(_OWORD *)(a1 + 2020) = v21;
  *(_OWORD *)(a1 + 2036) = v21;
  *(_OWORD *)(a1 + 2052) = v21;
  *(_OWORD *)(a1 + 2068) = v21;
  *(_OWORD *)(a1 + 2084) = v21;
  *(_OWORD *)(a1 + 2100) = v21;
  *(_WORD *)(a1 + 2120) = 0;
  *(_BYTE *)(a1 + 2122) = 0;
  *(_QWORD *)(a1 + 2124) = -1;
  *(_BYTE *)(a1 + 2132) = 0;
  *(_QWORD *)(a1 + 2136) = -1;
  *(_DWORD *)(a1 + 2147) = 0;
  *(_DWORD *)(a1 + 2144) = 0;
  *(_QWORD *)(a1 + 2152) = -1;
  *(_DWORD *)(a1 + 2160) = -1;
  *(_BYTE *)(a1 + 2164) = 0;
  *(_QWORD *)(a1 + 2168) = -1;
  sub_100008848(a1 + 1192, *(_QWORD **)(a1 + 1200));
  *(_QWORD *)(a1 + 1192) = a1 + 1200;
  *(_QWORD *)(a1 + 1208) = 0;
  *(_QWORD *)(a1 + 1200) = 0;
  sub_100008848(a1 + 1216, *(_QWORD **)(a1 + 1224));
  *(_QWORD *)(a1 + 1216) = a1 + 1224;
  *(_QWORD *)(a1 + 1232) = 0;
  *(_QWORD *)(a1 + 1224) = 0;
  sub_100008848(a1 + 1240, *(_QWORD **)(a1 + 1248));
  *(_QWORD *)(a1 + 1240) = a1 + 1248;
  *(_QWORD *)(a1 + 1256) = 0;
  *(_QWORD *)(a1 + 1248) = 0;
  sub_100008848(a1 + 1264, *(_QWORD **)(a1 + 1272));
  *(_QWORD *)(a1 + 1264) = a1 + 1272;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1272) = 0;
  *(_QWORD *)(a1 + 1312) = 0;
}

void sub_10007CDDC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_10007CDDC(a1, *a2);
    sub_10007CDDC(a1, a2[1]);
    sub_100008848((uint64_t)(a2 + 5), (_QWORD *)a2[6]);
    operator delete(a2);
  }
}

id sub_10007CE28(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10007D1A0(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

uint64_t sub_10007CE74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 928))(a4);
}

void sub_10007CE84(uint64_t a1, _DWORD *a2, float *a3)
{
  sub_10007D128(a1, a2, a3);
  switch(*a2)
  {
    case 0:
      sub_100CECBAC((double *)(a1 + 13176), (double *)a3);
      break;
    case 1:
      sub_100CED45C(a1 + 13176);
      break;
    case 2:
      sub_100CECA00(a1 + 13176, *(double *)a3);
      break;
    case 3:
      sub_10007CF48(a1 + 13176, a3[2], *(double *)a3);
      break;
    default:
      return;
  }
}

void sub_10007CF48(uint64_t a1, float a2, double a3)
{
  double v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v10;
  float v11;
  double v12;
  _QWORD v13[5];
  float v14;
  float v15;
  float v16;

  v16 = a2;
  if (*(_BYTE *)(a1 + 8))
  {
    v4 = a3 - *(double *)a1;
    if (v4 < *(double *)(a1 + 200))
      v4 = *(double *)(a1 + 200);
    *(double *)(a1 + 200) = v4;
  }
  *(double *)a1 = a3;
  *(_BYTE *)(a1 + 8) = 1;
  v5 = *(float *)(a1 + 176);
  v6 = *(float *)(a1 + 180);
  if (v5 > a2)
    v5 = a2;
  if (v6 < a2)
    v6 = a2;
  *(float *)(a1 + 176) = v5;
  *(float *)(a1 + 180) = v6;
  ++*(_DWORD *)(a1 + 192);
  v7 = *(float *)(a1 + 136);
  v8 = *(float *)(a1 + 140);
  if (v7 > a2 || v8 < a2)
  {
    v10 = vabds_f32(v7, a2);
    v11 = vabds_f32(v8, a2);
    if (v11 >= v10)
      v11 = v10;
    v15 = v11;
    sub_10007D084(a1 + 336, &v15);
    ++*(_DWORD *)(a1 + 188);
  }
  else
  {
    ++*(_DWORD *)(a1 + 184);
  }
  sub_10007D084(a1 + 264, &v16);
  if (*(_BYTE *)(a1 + 232))
  {
    v12 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 224);
    if (v12 < 0.0)
      v12 = 0.0;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    v13[2] = sub_100CECE98;
    v13[3] = &unk_10215F390;
    v14 = v16;
    *(double *)&v13[4] = v12;
    AnalyticsSendEventLazy(CFSTR("com.apple.CoreMotion.GyroBiasEstimationOutOfBoxExperience"), v13);
    *(_BYTE *)(a1 + 232) = 0;
  }
}

float sub_10007D084(uint64_t a1, float *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  float v7;
  float v8;
  float v9;
  float v10;
  float result;

  v4 = a1 + 24;
  sub_1000BFB54((_QWORD *)(a1 + 24), a2);
  v5 = *(_QWORD *)(a1 + 64);
  if (v5 > *(_QWORD *)(a1 + 8))
  {
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(float *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v6 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v6 & 0x3FF));
    v8 = *(float *)(a1 + 16) - v7;
    v9 = *(float *)(a1 + 20) - (float)(v7 * v7);
    *(float *)(a1 + 16) = v8;
    *(float *)(a1 + 20) = v9;
    *(_QWORD *)(a1 + 56) = v6 + 1;
    *(_QWORD *)(a1 + 64) = v5 - 1;
    sub_1004128C0(v4, 1);
  }
  v10 = *(float *)(a1 + 20);
  *(float *)(a1 + 16) = *a2 + *(float *)(a1 + 16);
  result = v10 + (float)(*a2 * *a2);
  *(float *)(a1 + 20) = result;
  return result;
}

void sub_10007D128(uint64_t a1, _DWORD *a2, void *__src)
{
  uint64_t v4;
  _QWORD v5[5];

  if (!*a2)
  {
    memcpy((void *)(a1 + 920), __src, 0x140uLL);
    v4 = sub_100127B9C();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_101033928;
    v5[3] = &unk_10212ECA0;
    v5[4] = a1;
    sub_1000A57FC(v4, (uint64_t)v5);
  }
}

id sub_10007D1A0(void *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v3 = objc_opt_class(CLCppEncodableDataContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10188CB40(a1);
  v6 = objc_opt_class(CLCppContainer, v4);
  if ((objc_opt_isKindOfClass(a1, v6) & 1) != 0)
    return sub_10007D218(a1);
  else
    return 0;
}

id sub_10007D218(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = (unint64_t)"N30CLGyroCalibrationDatabase_Type16NotificationDataE" & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_1021D6668);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLGyroCalibrationDatabase_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:250:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

BOOL sub_10007D5A4(uint64_t a1, uint64_t a2, int *a3, double *a4, int a5)
{
  unint64_t v5;
  uint64_t v11;
  long double *v12;
  double *v13;
  long double v14;
  unsigned int v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  long double v23;
  double v24;
  double v25;
  BOOL v26;
  _BOOL8 v28;
  double v29;
  double v30;
  double v31;
  double v32;
  int v33;
  NSObject *v34;
  double v35;
  double v36;
  uint64_t v37;
  NSObject *v39;
  double v40;
  long double v41;
  NSObject *v42;
  NSObject *v43;
  unsigned __int8 v44;
  NSObject *v45;
  double v46;
  double v47;
  int v48;
  NSObject *v49;
  double v50;
  int v51;
  double v52;
  double v53;
  double v54;
  NSObject *v55;
  double v56;
  double v57;
  uint64_t v58;
  float v59;
  NSObject *v60;
  double v61;
  double v62;
  int v63;
  int v64;
  double v65;
  NSObject *v66;
  double v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  double v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  const char *v83;
  uint8_t *v84;
  NSObject *v85;
  const char *v86;
  uint8_t *v87;
  NSObject *v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  double v97;
  double v98;
  double v99;
  double v100;
  double v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  const char *v105;
  double v106;
  double v107;
  uint64_t v108;
  const char *v109;
  const char *v110;
  uint8_t *v111;
  double v112;
  long double v113;
  const char *v114;
  uint8_t *v115;
  const char *v116;
  uint8_t *v117;
  double v118;
  int v119;
  const char *v120;
  uint8_t *v121;
  const char *v122;
  uint8_t *v123;
  double v124;
  double v125;
  int v126;
  int v127;
  double v128;
  const char *v129;
  uint8_t *v130;
  double v131;
  double v132;
  uint64_t v133;
  const char *v134;
  uint8_t *v135;
  uint64_t v136;
  double v137;
  double v138;
  double v139;
  double v140;
  uint64_t v141;
  pthread_mutex_t *v142;
  __int16 v143;
  int v144;
  double v145;
  __int16 v146;
  long double v147;
  __int16 v148;
  _BYTE v149[10];
  _BYTE v150[10];
  double v151;
  __int16 v152;
  double v153;
  __int16 v154;
  uint64_t v155;
  __int16 v156;
  uint64_t v157;
  __int16 v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  __int16 v162;
  int v163;
  uint8_t buf[4];
  double v165;
  __int16 v166;
  long double v167;
  __int16 v168;
  _BYTE v169[10];
  _BYTE v170[10];
  double v171;
  __int16 v172;
  double v173;
  __int16 v174;
  uint64_t v175;
  __int16 v176;
  uint64_t v177;
  __int16 v178;
  uint64_t v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  int v183;

  v11 = *(_QWORD *)(a1 + 104);
  v141 = a1 + 104;
  (*(void (**)(void))(v11 + 16))();
  v143 = 256;
  v12 = (long double *)(a2 + 12);
  v13 = (double *)(a2 + 4);
  if (!sub_10011CE88(*(double *)(a2 + 4), *(double *)(a2 + 12)))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v34 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_ERROR))
    {
      v35 = *(double *)(a2 + 76);
      v36 = *(double *)(a2 + 4);
      v37 = *(_QWORD *)(a2 + 12);
      *(_DWORD *)buf = 134349569;
      v165 = v35;
      v166 = 2049;
      v167 = v36;
      v168 = 2049;
      *(_QWORD *)v169 = v37;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "#Error,DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      goto LABEL_31;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v106 = *(double *)(a2 + 76);
    v107 = *(double *)(a2 + 4);
    v108 = *(_QWORD *)(a2 + 12);
    v144 = 134349569;
    v145 = v106;
    v146 = 2049;
    v147 = v107;
    v148 = 2049;
    *(_QWORD *)v149 = v108;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 16, "#Error,DEM,invalidInput,timestamp,%{public}.1lf,lat,%{private}.8lf,lon,%{private}.8lf", &v144, 32);
    v87 = (uint8_t *)v109;
    sub_100512490("Generic", 1, 0, 0, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v109);
LABEL_125:
    if (v87 != buf)
      free(v87);
    goto LABEL_31;
  }
  if ((sub_10007EB68(a1) & 1) != 0)
  {
LABEL_31:
    v28 = 0;
    goto LABEL_32;
  }
  v139 = -1.0;
  v140 = 0.0;
  if (*(_BYTE *)(a1 + 944))
  {
    v14 = *(double *)(a1 + 1032);
    v15 = *(unsigned __int16 *)(a1 + 1022);
    v16 = *(double *)(a1 + 1048);
    v17 = *(double *)(a1 + 1040);
    LOWORD(v5) = *(_WORD *)(a1 + 1020);
    sub_100080DCC(v14);
    v19 = v18;
    sub_100080DCC(v14 + (double)v15 * v16);
    v21 = v20;
    sub_100080DCC(*v12);
    v23 = v22;
    v24 = v17 + (double)v5 * v16;
    *v12 = v22;
    v25 = *v13;
    if (*v13 >= v17)
    {
      v26 = v25 >= v24 || v23 < v19;
      if (!v26 && v23 < v21)
      {
        *(_DWORD *)(a1 + 544) = 0;
        goto LABEL_14;
      }
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v39 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      v40 = *v13;
      v41 = *v12;
      *(_DWORD *)buf = 134284801;
      v165 = v40;
      v166 = 2049;
      v167 = v41;
      v168 = 2049;
      *(double *)v169 = v17;
      *(_WORD *)&v169[8] = 2049;
      *(double *)v170 = v24;
      *(_WORD *)&v170[8] = 2049;
      v171 = v19;
      v172 = 2049;
      v173 = v21;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", buf, 0x3Eu);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v112 = *v13;
      v113 = *v12;
      v144 = 134284801;
      v145 = v112;
      v146 = 2049;
      v147 = v113;
      v148 = 2049;
      *(double *)v149 = v17;
      *(_WORD *)&v149[8] = 2049;
      *(double *)v150 = v24;
      *(_WORD *)&v150[8] = 2049;
      v151 = v19;
      v152 = 2049;
      v153 = v21;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,not on the current in-memory tile,lat,%{private}.7lf,lon,%{private}.7lf,minLat,%{private}.7lf,maxLat,%{private}.7lf,minLon,%{private}.7lf,maxLon,%{private}.7lf", &v144, 62);
      v115 = (uint8_t *)v114;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v114);
      if (v115 != buf)
        free(v115);
    }
  }
  if (!sub_1001C08A0(a1 + 8, (double *)(a2 + 4), (double *)(a2 + 12)) || *(_BYTE *)(a1 + 605))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v42 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "DEM,tile not available", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v144) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,tile not available", &v144, v136);
      v111 = (uint8_t *)v110;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v110);
      if (v111 != buf)
        free(v111);
    }
    v28 = 0;
    *(_BYTE *)(a1 + 464) = 0;
    *(_QWORD *)(a1 + 472) = 0;
    *(_QWORD *)(a1 + 480) = 0;
    goto LABEL_32;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v43 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "DEM,Need to load tile", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Need to load tile", &v144, v136);
    v117 = (uint8_t *)v116;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v116);
    if (v117 != buf)
      free(v117);
  }
  LOBYTE(v138) = 0;
  v44 = sub_1010A1B28(a1, &v138, *v13, *v12);
  if (LOBYTE(v138))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v45 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEBUG, "DEM,tile download needed", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      LOWORD(v144) = 0;
      LODWORD(v136) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,tile download needed", &v144, v136);
      v123 = (uint8_t *)v122;
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v122);
      if (v123 != buf)
        free(v123);
    }
    *(_BYTE *)(a1 + 464) = 1;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)v13;
    goto LABEL_31;
  }
  if ((v44 & 1) == 0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v85 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEBUG, "DEM,Tile not loaded yet", buf, 2u);
    }
    if (!sub_1001BFF7C(115, 2))
      goto LABEL_31;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    LOWORD(v144) = 0;
    LODWORD(v136) = 2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Tile not loaded yet", &v144, v136);
    v87 = (uint8_t *)v86;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v86);
    goto LABEL_125;
  }
  v25 = *v13;
  v23 = *v12;
LABEL_14:
  *(_BYTE *)(a1 + 464) = 0;
  if (!sub_10007F624(a1 + 912, &v140, &v139, v25, v23))
    goto LABEL_31;
  v28 = 0;
  v29 = v140;
  if (v140 <= 8850.0 && v140 != -9999.0 && v140 >= -450.0)
  {
    v30 = v139;
    if (v139 < 9999.0)
    {
      *a4 = *(float *)(a1 + 1072);
      if (*(double *)(a2 + 44) > 22.0)
      {
        v30 = v30 * 2.5;
        v139 = v30;
      }
      v137 = v30 * v30;
      v138 = v29;
      v31 = v29;
      v32 = v29;
      if (a5)
      {
        if (*(_BYTE *)(a1 + 576) && (*(_DWORD *)(a2 + 96) & 0xFFFFFFF7) == 1)
        {
          v33 = sub_1010A054C(a1 + 656, &v138, &v137, v29, v30 * v30, *(double *)(a2 + 4), *(double *)(a2 + 12), *(double *)(a2 + 76));
          v31 = v138;
          if (v33)
          {
            v140 = v138;
            v32 = v138;
          }
          else
          {
            v32 = v29;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 704) = xmmword_101C3E8E0;
          *(_QWORD *)(a1 + 728) = 0;
          *(_QWORD *)(a1 + 720) = 0;
          *(_QWORD *)(a1 + 864) = 0xC0C3878000000000;
          *(_OWORD *)(a1 + 736) = 0u;
          *(_OWORD *)(a1 + 752) = 0u;
          *(_OWORD *)(a1 + 768) = 0u;
          *(_OWORD *)(a1 + 784) = 0u;
          *(_OWORD *)(a1 + 800) = 0u;
          *(_OWORD *)(a1 + 816) = 0u;
          *(_OWORD *)(a1 + 832) = 0u;
          *(int64x2_t *)(a1 + 848) = vdupq_n_s64(0xC0C3878000000000);
          *(_QWORD *)(a1 + 880) = 0;
          *(_QWORD *)(a1 + 872) = 0;
          *(_WORD *)(a1 + 888) = 0;
          *(_QWORD *)(a1 + 904) = 0;
          v31 = v29;
          v32 = v29;
          *(_QWORD *)(a1 + 896) = 0;
        }
      }
      v46 = v32 + 1.3;
      v140 = v46;
      v47 = v31 + 1.3;
      v138 = v31 + 1.3;
      if (*(_BYTE *)(a1 + 577))
        v48 = 4;
      else
        v48 = 3;
      *a3 = v48;
      if (*(_BYTE *)(a1 + 888) || *(_BYTE *)(a1 + 889))
      {
        if (v30 < 40.0)
        {
          v139 = 40.0;
          v30 = 40.0;
        }
        *a3 = 2;
      }
      *(double *)(a2 + 536) = v46;
      *(double *)(a2 + 544) = v30;
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v49 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
      {
        v50 = *(float *)(a2 + 476);
        v51 = *(_DWORD *)(a2 + 472);
        *(_DWORD *)buf = 134283777;
        v165 = v50;
        v166 = 1026;
        LODWORD(v167) = v51;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEBUG, "DEM,input location undulation,und,%{private}.3lf,model,%{public}d", buf, 0x12u);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v118 = *(float *)(a2 + 476);
        v119 = *(_DWORD *)(a2 + 472);
        v144 = 134283777;
        v145 = v118;
        v146 = 1026;
        LODWORD(v147) = v119;
        LODWORD(v136) = 18;
        _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,input location undulation,und,%{private}.3lf,model,%{public}d", &v144, v136);
        v121 = (uint8_t *)v120;
        sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v120);
        if (v121 != buf)
          free(v121);
      }
      if ((*(_QWORD *)(a2 + 36) & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
        && *(double *)(a2 + 36) > 0.0
        && *(_DWORD *)(a2 + 472) == 1)
      {
        v52 = *(double *)(a2 + 28) + *(float *)(a2 + 476);
        v53 = *a4;
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v54 = v52 - v53;
        v55 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v56 = *(float *)(a2 + 476);
          v57 = *a4;
          v58 = *(_QWORD *)(a2 + 28);
          *(_DWORD *)buf = 134284289;
          v165 = v56;
          v166 = 2049;
          v167 = v57;
          v168 = 2049;
          *(_QWORD *)v169 = v58;
          *(_WORD *)&v169[8] = 2049;
          *(double *)v170 = v54;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEBUG, "DEM,update undulation,undOld,%{private}.3lf,undNew,%{private}.3lf,altOld,%{private}.3lf,altNew,%{private}.3lf,", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v131 = *(float *)(a2 + 476);
          v132 = *a4;
          v133 = *(_QWORD *)(a2 + 28);
          v144 = 134284289;
          v145 = v131;
          v146 = 2049;
          v147 = v132;
          v148 = 2049;
          *(_QWORD *)v149 = v133;
          *(_WORD *)&v149[8] = 2049;
          *(double *)v150 = v54;
          LODWORD(v136) = 42;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,update undulation,undOld,%{private}.3lf,undNew,%{private}.3lf,altOld,%{private}.3lf,altNew,%{private}.3lf,", &v144, v136);
          v135 = (uint8_t *)v134;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v134);
          if (v135 != buf)
            free(v135);
        }
        v59 = *a4;
        *(float *)(a2 + 476) = v59;
        *(_DWORD *)(a2 + 472) = 2;
        *(double *)(a2 + 28) = v54;
      }
      if (*(_BYTE *)(a1 + 648))
      {
        sub_1010A214C(a1 + 912, a2, *(double *)(a2 + 4), *(long double *)(a2 + 12));
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v60 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v61 = *(double *)(a2 + 4);
          v62 = *(double *)(a2 + 12);
          v63 = *(_DWORD *)(a2 + 96);
          v64 = *(_DWORD *)(a2 + 784);
          v65 = *(float *)(a2 + 788);
          *(_DWORD *)buf = 134284545;
          v165 = v61;
          v166 = 2049;
          v167 = v62;
          v168 = 1024;
          *(_DWORD *)v169 = v63;
          *(_WORD *)&v169[4] = 1025;
          *(_DWORD *)&v169[6] = v64;
          *(_WORD *)v170 = 2049;
          *(double *)&v170[2] = v65;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEBUG, "DEM,lat,%{private}.8lf,lon,%{private}.8lf,type,%d,numFlatPoints,%{private}d,%{private}.3f", buf, 0x2Cu);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v124 = *(double *)(a2 + 4);
          v125 = *(double *)(a2 + 12);
          v126 = *(_DWORD *)(a2 + 96);
          v127 = *(_DWORD *)(a2 + 784);
          v128 = *(float *)(a2 + 788);
          v144 = 134284545;
          v145 = v124;
          v146 = 2049;
          v147 = v125;
          v148 = 1024;
          *(_DWORD *)v149 = v126;
          *(_WORD *)&v149[4] = 1025;
          *(_DWORD *)&v149[6] = v127;
          *(_WORD *)v150 = 2049;
          *(double *)&v150[2] = v128;
          LODWORD(v136) = 44;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,lat,%{private}.8lf,lon,%{private}.8lf,type,%d,numFlatPoints,%{private}d,%{private}.3f", &v144, v136);
          v130 = (uint8_t *)v129;
          sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v129);
          if (v130 != buf)
            free(v130);
        }
      }
      v28 = sub_10007EEE0(a1, (double *)a2);
      if (v28)
      {
        if (a5)
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v66 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v67 = *(double *)(a2 + 536);
            v68 = *(double *)(a2 + 544);
            v69 = *a4;
            v70 = *(_QWORD *)(a2 + 520);
            v71 = *(_QWORD *)(a2 + 528);
            v72 = *(_QWORD *)(a2 + 4);
            v73 = *(_QWORD *)(a2 + 12);
            v74 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)buf = 134286081;
            v165 = v67;
            v166 = 2050;
            v167 = v68;
            v168 = 2049;
            *(double *)v169 = v47;
            *(_WORD *)&v169[8] = 2050;
            *(double *)v170 = v137;
            *(_WORD *)&v170[8] = 2049;
            v171 = v29;
            v172 = 2050;
            v173 = v69;
            v174 = 2049;
            v175 = v70;
            v176 = 2050;
            v177 = v71;
            v178 = 2049;
            v179 = v72;
            v180 = 2049;
            v181 = v73;
            v182 = 1024;
            v183 = v74;
            _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEBUG, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{private}.2lf,filterAltVariance(m^2),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", buf, 0x6Cu);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v75 = *(double *)(a2 + 536);
            v76 = *(double *)(a2 + 544);
            v77 = *a4;
            v78 = *(_QWORD *)(a2 + 520);
            v79 = *(_QWORD *)(a2 + 528);
            v80 = *(_QWORD *)(a2 + 4);
            v81 = *(_QWORD *)(a2 + 12);
            v82 = *(_DWORD *)(a2 + 96);
            v144 = 134286081;
            v145 = v75;
            v146 = 2050;
            v147 = v76;
            v148 = 2049;
            *(double *)v149 = v47;
            *(_WORD *)&v149[8] = 2050;
            *(double *)v150 = v137;
            *(_WORD *)&v150[8] = 2049;
            v151 = v29;
            v152 = 2050;
            v153 = v77;
            v154 = 2049;
            v155 = v78;
            v156 = 2050;
            v157 = v79;
            v158 = 2049;
            v159 = v80;
            v160 = 2049;
            v161 = v81;
            v162 = 1024;
            v163 = v82;
            LODWORD(v136) = 108;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,filterAlt(m),%{private}.2lf,filterAltVariance(m^2),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", &v144, v136);
            v84 = (uint8_t *)v83;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v83);
LABEL_119:
            if (v84 != buf)
              free(v84);
          }
        }
        else
        {
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v88 = qword_1022A0078;
          if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
          {
            v89 = *(double *)(a2 + 536);
            v90 = *(double *)(a2 + 544);
            v91 = *a4;
            v92 = *(double *)(a2 + 520);
            v93 = *(double *)(a2 + 528);
            v94 = *(_QWORD *)(a2 + 4);
            v95 = *(_QWORD *)(a2 + 12);
            v96 = *(_DWORD *)(a2 + 96);
            *(_DWORD *)buf = 134285569;
            v165 = v89;
            v166 = 2050;
            v167 = v90;
            v168 = 2049;
            *(double *)v169 = v29;
            *(_WORD *)&v169[8] = 2050;
            *(double *)v170 = v91;
            *(_WORD *)&v170[8] = 2049;
            v171 = v92;
            v172 = 2050;
            v173 = v93;
            v174 = 2049;
            v175 = v94;
            v176 = 2049;
            v177 = v95;
            v178 = 1024;
            LODWORD(v179) = v96;
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEBUG, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", buf, 0x58u);
          }
          if (sub_1001BFF7C(115, 2))
          {
            bzero(buf, 0x65CuLL);
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v97 = *(double *)(a2 + 536);
            v98 = *(double *)(a2 + 544);
            v99 = *a4;
            v100 = *(double *)(a2 + 520);
            v101 = *(double *)(a2 + 528);
            v102 = *(_QWORD *)(a2 + 4);
            v103 = *(_QWORD *)(a2 + 12);
            v104 = *(_DWORD *)(a2 + 96);
            v144 = 134285569;
            v145 = v97;
            v146 = 2050;
            v147 = v98;
            v148 = 2049;
            *(double *)v149 = v29;
            *(_WORD *)&v149[8] = 2050;
            *(double *)v150 = v99;
            *(_WORD *)&v150[8] = 2049;
            v151 = v100;
            v152 = 2050;
            v153 = v101;
            v154 = 2049;
            v155 = v102;
            v156 = 2049;
            v157 = v103;
            v158 = 1024;
            LODWORD(v159) = v104;
            LODWORD(v136) = 88;
            _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,Alt(m),%{private}.2lf,AltUnc(m),%{public}.2lf,RawDemAlt(m),%{private}.2lf,undulation,%{public}.3lf,slope,%{private}.3lf,maxAbsSlope,%{public}.3lf,lat,%{private}.8lf,lon,%{private}.8lf,type,%d", &v144, v136);
            v84 = (uint8_t *)v105;
            sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::getAltitude(GNSS::DaemonLocation &, CLDEMReliabilityIndication &, double &, const BOOL)", "%s\n", v105);
            goto LABEL_119;
          }
        }
      }
    }
  }
LABEL_32:
  if (HIBYTE(v143))
  {
    if ((_BYTE)v143)
      pthread_mutex_unlock(v142);
    else
      (*(void (**)(uint64_t))(*(_QWORD *)v141 + 24))(v141);
  }
  return v28;
}

void sub_10007EB00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10007EB68(uint64_t a1)
{
  NSObject *v2;
  int v3;
  double v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  uint8_t *v15;
  _BYTE v16[24];
  __int128 v17;
  uint64_t v18;
  uint8_t buf[4];
  double v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  int v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;

  if (*(_BYTE *)(a1 + 488))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v2 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v3 = *(unsigned __int8 *)(a1 + 488);
      *(_DWORD *)buf = 67240192;
      LODWORD(v20) = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "DEM,isUseOfDemInappropriate,true,fIsAirborne,%{public}d", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return 1;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v14 = *(unsigned __int8 *)(a1 + 488);
    *(_DWORD *)v16 = 67240192;
    *(_DWORD *)&v16[4] = v14;
    v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,isUseOfDemInappropriate,true,fIsAirborne,%{public}d", v16, 8, *(_OWORD *)v16, *(_QWORD *)&v16[16], v17, v18);
LABEL_26:
    v15 = (uint8_t *)v13;
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::isUseOfDemInappropriate() const", "%s\n", v13);
    if (v15 != buf)
      free(v15);
    return 1;
  }
  if (*(double *)(a1 + 496) > 0.0)
  {
    v5 = sub_1001FCBB4();
    if (vabdd_f64(v5, *(double *)(a1 + 496)) < 10.0
      && (*(_BYTE *)(a1 + 538) || *(_BYTE *)(a1 + 539) || *(_BYTE *)(a1 + 536) || *(_BYTE *)(a1 + 537)))
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v6 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 496);
        v8 = *(_QWORD *)(a1 + 512);
        v9 = *(_QWORD *)(a1 + 520);
        *(_DWORD *)buf = 134350081;
        v20 = v5;
        v21 = 2050;
        v22 = v7;
        v23 = 1026;
        v24 = 1;
        v25 = 2049;
        v26 = v8;
        v27 = 2049;
        v28 = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToOrAtTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf", buf, 0x30u);
      }
      if (!sub_1001BFF7C(115, 2))
        return 1;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v10 = *(_QWORD *)(a1 + 496);
      v11 = *(_QWORD *)(a1 + 512);
      v12 = *(_QWORD *)(a1 + 520);
      *(_DWORD *)v16 = 134350081;
      *(double *)&v16[4] = v5;
      *(_WORD *)&v16[12] = 2050;
      *(_QWORD *)&v16[14] = v10;
      *(_WORD *)&v16[22] = 1026;
      LODWORD(v17) = 1;
      WORD2(v17) = 2049;
      *(_QWORD *)((char *)&v17 + 6) = v11;
      HIWORD(v17) = 2049;
      v13 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,isUseOfDemInappropriate,true,TBA,currentTime,%{public}.1lf,TBA machContinuousTime,%{public}.1lf,isCloseToOrAtTunnelBridge,%{public}d,lat,%{private}.8lf,lon,%{private}.8lf", v16, 48, *(_OWORD *)v16, *(_QWORD *)&v16[16], v17, v12);
      goto LABEL_26;
    }
  }
  return 0;
}

BOOL sub_10007EEE0(uint64_t a1, double *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  long double v8;
  uint64_t v9;
  _BOOL8 v10;
  double v11;
  NSObject *v12;
  double v13;
  uint64_t v14;
  unint64_t v15;
  double *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  char *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  double v35;
  char *v36;
  double v37;
  double v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  double v47;
  long double v48;
  double v49;
  double v50;
  int v51;
  double v52;
  __int16 v53;
  long double v54;
  __int16 v55;
  double v56;
  __int16 v57;
  long double v58;
  __int16 v59;
  uint64_t v60;
  _BYTE buf[24];
  double v62;
  __int16 v63;
  long double v64;
  __int16 v65;
  uint64_t v66;

  v4 = *(double *)((char *)a2 + 20);
  if (v4 < 5.0)
    v4 = 5.0;
  if (v4 <= 166.0)
    v5 = v4;
  else
    v5 = 166.0;
  if (*(double *)((char *)a2 + 60) >= 0.0)
    v6 = *(double *)((char *)a2 + 60);
  else
    v6 = 0.0;
  v50 = 9999.0;
  v7 = *(double *)((char *)a2 + 4);
  v8 = *(double *)((char *)a2 + 12);
  v48 = v8;
  v49 = v7;
  v47 = -9999.0;
  v9 = a1 + 912;
  v10 = sub_10007F624(a1 + 912, &v47, &v50, v7, v8);
  if (!v10)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v31 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      v32 = *(_QWORD *)((char *)a2 + 4);
      v33 = *(_QWORD *)((char *)a2 + 12);
      *(_DWORD *)buf = 134284289;
      *(_QWORD *)&buf[4] = v32;
      *(_WORD *)&buf[12] = 2049;
      *(_QWORD *)&buf[14] = v33;
      *(_WORD *)&buf[22] = 2049;
      v62 = v7;
      v63 = 2049;
      v64 = v8;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonDegs,%{private}.8lf", buf, 0x2Au);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v34 = *(double *)((char *)a2 + 4);
      v35 = *(double *)((char *)a2 + 12);
      v51 = 134284289;
      v52 = v34;
      v53 = 2049;
      v54 = v35;
      v55 = 2049;
      v56 = v7;
      v57 = 2049;
      v58 = v8;
      v36 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "DEM,populateSlope,fail,lat,%{private}.8lf,lon,%{private}.8lf,testLocationLatDegs,%{private}.8lf,testLocationLonDegs,%{private}.8lf", &v51, 42);
      sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v36);
      if (v36 != buf)
        free(v36);
    }
    return v10;
  }
  v11 = v47;
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v12 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(double *)((char *)a2 + 20);
    v14 = *((_QWORD *)a2 + 67);
    *(_DWORD *)buf = 134284545;
    *(double *)&buf[4] = v7;
    *(_WORD *)&buf[12] = 2049;
    *(long double *)&buf[14] = v8;
    *(_WORD *)&buf[22] = 2048;
    v62 = v13;
    v63 = 2048;
    v64 = v11;
    v65 = 2048;
    v66 = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "DEM,populateSlope,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%.1lf,centerAltitude,%.1lf,daemonLocation.priv.groundAltitude,%.1lf", buf, 0x34u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v43 = *(double *)((char *)a2 + 20);
    v44 = *((_QWORD *)a2 + 67);
    v51 = 134284545;
    v52 = v7;
    v53 = 2049;
    v54 = v8;
    v55 = 2048;
    v56 = v43;
    v57 = 2048;
    v58 = v11;
    v59 = 2048;
    v60 = v44;
    v45 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,populateSlope,lat,%{private}.7lf,lon,%{private}.7lf,hunc,%.1lf,centerAltitude,%.1lf,daemonLocation.priv.groundAltitude,%.1lf", &v51, 52);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v45);
    if (v45 != buf)
      free(v45);
  }
  v15 = 0;
  v16 = (double *)(a1 + 608);
  v17 = 1.5;
  v18 = 0.0;
  v19 = -450.0;
  v20 = 8850.0;
  while (1)
  {
    sub_100081058(v16, &v49, &v48, *(double *)((char *)a2 + 4), *(double *)((char *)a2 + 12), a2[67], v6 + (double)v15 * 90.0, v5);
    if (sub_100080E28(v9, v49, v48, v21, v22))
    {
      if (!sub_10007F624(v9, &v47, &v50, v49, v48))
      {
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v25 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEBUG))
        {
          v26 = *(_QWORD *)((char *)a2 + 4);
          v27 = *(_QWORD *)((char *)a2 + 12);
          *(_DWORD *)buf = 134284289;
          *(_QWORD *)&buf[4] = v26;
          *(_WORD *)&buf[12] = 2049;
          *(_QWORD *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2049;
          v62 = v49;
          v63 = 2049;
          v64 = v48;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "DEM,populateSlope,fail,lat,%{private}.6lf,lon,%{private}.6lf,testLatDegs,%{private}.6lf,testLonDegs,%{private}.6lf", buf, 0x2Au);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_1022A0070 != -1)
            dispatch_once(&qword_1022A0070, &stru_10219ECA8);
          v28 = *(double *)((char *)a2 + 4);
          v29 = *(double *)((char *)a2 + 12);
          v51 = 134284289;
          v52 = v28;
          v53 = 2049;
          v54 = v29;
          v55 = 2049;
          v56 = v49;
          v57 = 2049;
          v58 = v48;
          LODWORD(v46) = 42;
          v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 2, "DEM,populateSlope,fail,lat,%{private}.6lf,lon,%{private}.6lf,testLatDegs,%{private}.6lf,testLonDegs,%{private}.6lf", &v51, v46);
          sub_100512490("Generic", 1, 0, 2, "BOOL CLDigitalElevationModel::updateSlopeAndUncertainty(GNSS::DaemonLocation &)", "%s\n", v30);
          if (v30 != buf)
            free(v30);
        }
        goto LABEL_39;
      }
      v23 = (v47 - v11) / v5;
      v24 = fabs(v23);
      if (v24 >= v18)
        v18 = v24;
      if (v47 >= v19)
        v19 = v47;
      if (v20 >= v47)
        v20 = v47;
      if (v17 < v50)
        v17 = v50;
      if (v15 == 1)
      {
        a2[65] = -v23;
        goto LABEL_39;
      }
      if (v15 == 3)
        break;
    }
LABEL_39:
    if (++v15 == 4)
      goto LABEL_50;
  }
  a2[65] = v23;
LABEL_50:
  a2[66] = v18;
  v37 = 1.5;
  if (fabs(a2[65]) > 0.5)
    v37 = 180.0;
  v38 = a2[68];
  *(double *)buf = v38;
  *(double *)&buf[8] = (v19 - v20) * 0.5;
  *(double *)&buf[16] = v17;
  v62 = v37;
  v39 = 8;
  v40 = (double *)buf;
  do
  {
    if (v38 < *(double *)&buf[v39])
    {
      v38 = *(double *)&buf[v39];
      v40 = (double *)&buf[v39];
    }
    v39 += 8;
  }
  while (v39 != 32);
  v41 = *v40;
  if (*v40 < 1.5)
    v41 = 1.5;
  if (v41 > 9999.0)
    v41 = 9999.0;
  a2[68] = v41;
  return v10;
}

BOOL sub_10007F624(uint64_t a1, double *a2, double *a3, double a4, long double a5)
{
  int v5;
  NSObject *v8;
  _BOOL8 result;
  const char *v10;
  NSObject *v11;
  double v14;
  unint64_t v15;
  double v16;
  NSObject *v17;
  double v18;
  uint64_t v19;
  NSObject *v20;
  double v21;
  double v22;
  unsigned int v23;
  double v24;
  NSObject *v25;
  double v26;
  NSObject *v27;
  double v28;
  uint64_t v29;
  unsigned int v30;
  double v31;
  NSObject *v32;
  float v33;
  float v34;
  double v35;
  float v36;
  double v37;
  double v38;
  int v39;
  double v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unsigned int v47;
  int v48;
  BOOL v49;
  int v50;
  int v51;
  int v52;
  NSObject *v53;
  double v54;
  uint64_t v55;
  NSObject *v56;
  double v57;
  uint64_t v58;
  NSObject *v59;
  unint64_t v60;
  double v61;
  unint64_t v62;
  double v63;
  NSObject *v64;
  unint64_t v65;
  double v66;
  unint64_t v67;
  double v68;
  NSObject *v69;
  uint8_t *v70;
  NSObject *v71;
  double v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  double v77;
  double v78;
  double v79;
  double v80;
  NSObject *v81;
  NSObject *v82;
  double v83;
  NSObject *v84;
  NSObject *v85;
  const char *v86;
  NSObject *v87;
  NSObject *v88;
  uint8_t *v89;
  _BYTE v90[24];
  uint8_t buf[4];
  double v92;
  __int16 v93;
  double v94;

  v5 = *(unsigned __int8 *)(a1 + 80);
  *a2 = -9999.0;
  *a3 = 9999.0;
  if (!*(_BYTE *)(a1 + 32))
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v11 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "#Warning,DEM,current tile is not valid", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      *(_WORD *)v90 = 0;
      v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,current tile is not valid", v90, 2, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
      goto LABEL_124;
    }
    return result;
  }
  if (*(double *)(a1 + 136) != 0.0)
  {
    if (a4 < -90.0 || a4 > 90.0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v20 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283521;
        v92 = a4;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,out of range", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        *(_DWORD *)v90 = 134283521;
        *(double *)&v90[4] = a4;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,out of range", v90, 12, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    sub_100080DCC(a5);
    v16 = *(double *)(a1 + 128);
    if (v16 > a4)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v17 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v18 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        v92 = a4;
        v93 = 2049;
        v94 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v19 = *(_QWORD *)(a1 + 128);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(_QWORD *)&v90[14] = v19;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,lessThanMin,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v21 = v14;
    v22 = *(double *)(a1 + 136);
    v23 = *(unsigned __int16 *)(a1 + 108);
    v24 = v16 + v22 * (double)v23;
    if (v24 < a4)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v25 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v92 = a4;
        v93 = 2049;
        v94 = v24;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v24;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,exceedsMax,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v26 = *(double *)(a1 + 120);
    if (v14 < v26)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v27 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v28 = *(double *)(a1 + 120);
        *(_DWORD *)buf = 134283777;
        v92 = v21;
        v93 = 2049;
        v94 = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v29 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(_QWORD *)&v90[14] = v29;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,lessThanMin,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v30 = *(unsigned __int16 *)(a1 + 110);
    v31 = v26 + v22 * (double)v30;
    if (v14 > v31)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v32 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134283777;
        v92 = v21;
        v93 = 2049;
        v94 = v31;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v31;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,exceedsMax,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v33 = *(float *)(a1 + 156);
    v34 = *(float *)(a1 + 104);
    if (v33 > v34)
      v34 = *(float *)(a1 + 156);
    v35 = v34;
    v36 = *(float *)(a1 + 148);
    if (v36 == *(float *)(a1 + 144))
    {
      v37 = v36;
LABEL_67:
      *a2 = v37;
      *a3 = v35;
      return 1;
    }
    v38 = (v21 - v26) / v22;
    v39 = (int)(floor(v38) + 0.5);
    if (v39 < 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v53 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v54 = *(double *)(a1 + 120);
        *(_DWORD *)buf = 134283777;
        v92 = v21;
        v93 = 2049;
        v94 = v54;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v55 = *(_QWORD *)(a1 + 120);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(_QWORD *)&v90[14] = v55;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,invalid,minLongitude,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v40 = (a4 - v16) / v22;
    v41 = (int)(floor(v40) + 0.5);
    if (v41 < 0)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v56 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        v57 = *(double *)(a1 + 128);
        *(_DWORD *)buf = 134283777;
        v92 = a4;
        v93 = 2049;
        v94 = v57;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v58 = *(_QWORD *)(a1 + 128);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(_QWORD *)&v90[14] = v58;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,invalid,minLatitude,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    if (v39 >= v30)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v59 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        LOWORD(v60) = *(_WORD *)(a1 + 110);
        v61 = *(double *)(a1 + 120) + (double)v60 * *(double *)(a1 + 136);
        *(_DWORD *)buf = 134283777;
        v92 = v21;
        v93 = 2049;
        v94 = v61;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_INFO, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(v62) = *(_WORD *)(a1 + 110);
        v63 = *(double *)(a1 + 120) + (double)v62 * *(double *)(a1 + 136);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = v21;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v63;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,longitude,%{private}.9lf,invalid,maxLongitude,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    if (v41 >= v23)
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v64 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        LOWORD(v65) = *(_WORD *)(a1 + 108);
        v66 = *(double *)(a1 + 128) + (double)v65 * *(double *)(a1 + 136);
        *(_DWORD *)buf = 134283777;
        v92 = a4;
        v93 = 2049;
        v94 = v66;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", buf, 0x16u);
      }
      result = sub_1001BFF7C(115, 2);
      if (result)
      {
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        LOWORD(v67) = *(_WORD *)(a1 + 108);
        v68 = *(double *)(a1 + 128) + (double)v67 * *(double *)(a1 + 136);
        *(_DWORD *)v90 = 134283777;
        *(double *)&v90[4] = a4;
        *(_WORD *)&v90[12] = 2049;
        *(double *)&v90[14] = v68;
        v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.9lf,invalid,maxLatitude,%{private}.9lf", v90, 22, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
        goto LABEL_124;
      }
      return result;
    }
    v42 = (int)(v30 * v41);
    v43 = v42 + v39;
    v44 = *(_QWORD *)(a1 + 24);
    if (v44 && (v45 = *(unsigned int *)(a1 + 112), v45 > v43))
    {
      v46 = v39 + 1;
      v47 = *(unsigned __int8 *)(v44 + v43);
      v48 = v41 + 1;
      v49 = (_DWORD)v46 == v30 && v48 == v23;
      v50 = *(unsigned __int8 *)(v44 + v43);
      v51 = v50;
      v52 = v50;
      if (v49)
        goto LABEL_141;
      if ((_DWORD)v46 == v30)
      {
        v43 = v39 + (uint64_t)(int)(v48 * v30);
        if (v45 > v43)
        {
          v50 = *(unsigned __int8 *)(v44 + v43);
          v51 = v47;
          v52 = v50;
LABEL_141:
          v74 = v47 != v5;
          if (v51 != v5)
            v74 |= 2uLL;
          if (v52 != v5)
            v74 |= 4uLL;
          v75 = v74 | 8;
          if (v50 == v5)
            v75 = v74;
          v76 = 1;
          v77 = 0.0;
          v78 = 0.0;
          v79 = 0.0;
          v80 = 0.0;
          switch(v75)
          {
            case 0:
              goto LABEL_182;
            case 1:
              goto LABEL_170;
            case 2:
              v47 = v51;
              goto LABEL_170;
            case 3:
              v76 = 0;
              v79 = (double)v47;
              goto LABEL_167;
            case 4:
              v47 = v52;
              goto LABEL_170;
            case 5:
              v76 = 0;
              v77 = (double)v52;
              goto LABEL_172;
            case 6:
              v76 = 0;
              v79 = (double)v52;
LABEL_167:
              v77 = (double)v51;
              goto LABEL_177;
            case 7:
              v76 = 0;
              v77 = (double)v52;
              v80 = (double)v47;
              v78 = (double)v51;
              v79 = (double)v52;
              goto LABEL_182;
            case 8:
              v47 = v50;
LABEL_170:
              v37 = (float)(v36 + (float)((float)(int)v47 * v33));
              goto LABEL_67;
            case 9:
              v76 = 0;
              v77 = (double)v50;
LABEL_172:
              v78 = (double)v47;
              goto LABEL_174;
            case 10:
              v76 = 0;
              v77 = (double)v50;
              v78 = (double)v51;
LABEL_174:
              v79 = v77;
              goto LABEL_181;
            case 11:
              v76 = 0;
              v79 = (double)v47;
              v77 = (double)v50;
              v78 = (double)v51;
              goto LABEL_178;
            case 12:
              v76 = 0;
              v79 = (double)v52;
              v77 = (double)v50;
LABEL_177:
              v78 = v77;
LABEL_178:
              v80 = v79;
              goto LABEL_182;
            case 13:
              v76 = 0;
              v79 = (double)v52;
              v77 = (double)v50;
              v78 = (double)v47;
              goto LABEL_181;
            case 14:
              v76 = 0;
              v79 = (double)v52;
              v77 = (double)v50;
              v78 = (double)v51;
LABEL_181:
              v80 = v78;
              goto LABEL_182;
            case 15:
              v76 = 0;
              v79 = (double)v52;
              v77 = (double)v50;
              v80 = (double)v47;
              v78 = (double)v51;
LABEL_182:
              LOBYTE(v15) = *(_BYTE *)(a1 + 80);
              v83 = (double)v15;
              if (vabdd_f64(v80, v83) < 1.0e-12
                || vabdd_f64(v79, v83) < 1.0e-12
                || vabdd_f64(v78, v83) < 1.0e-12
                || vabdd_f64(v77, v83) < 1.0e-12)
              {
                if (qword_1022A0070 != -1)
                  dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                v84 = qword_1022A0078;
                if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "#Warning,DEM,unexpected noData", buf, 2u);
                }
                if (sub_1001BFF7C(115, 2))
                {
                  bzero(buf, 0x65CuLL);
                  if (qword_1022A0070 != -1)
                    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
                  *(_WORD *)v90 = 0;
                  v86 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,unexpected noData", v90, 2, *(_QWORD *)v90);
LABEL_222:
                  v89 = (uint8_t *)v86;
                  sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getAltitude(CLDEMTile &, double, double, double &, double &)", "%s\n", v86);
                  if (v89 != buf)
                    free(v89);
                }
LABEL_191:
                result = 0;
                *a2 = -9999.0;
                *a3 = 9999.0;
                return result;
              }
              *a2 = -9999.0;
              *a3 = 9999.0;
              if ((v76 & 1) != 0)
                return 1;
              v37 = v36
                  + (((double)v48 - v40) * ((v38 - (double)v39) * v78)
                   + ((double)(int)v46 - v38) * v80 * ((double)v48 - v40)
                   + ((double)(int)v46 - v38) * v79 * (v40 - (double)v41)
                   + (v38 - (double)v39) * v77 * (v40 - (double)v41))
                  / (((double)v48 - (double)v41)
                   * ((double)(int)v46 - (double)v39))
                  * v33;
              break;
            default:
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              v85 = qword_1022A0078;
              if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_INFO, "#Warning,DEM,Reached unexpected case", buf, 2u);
              }
              if (!sub_1001BFF7C(115, 2))
                goto LABEL_191;
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              *(_WORD *)v90 = 0;
              v86 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,Reached unexpected case", v90, 2, *(_QWORD *)v90);
              goto LABEL_222;
          }
          goto LABEL_67;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v71 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v92 = *(double *)&v43;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
          goto LABEL_162;
      }
      else if (v48 == v23)
      {
        v43 = v42 + v46;
        if (v45 > v42 + v46)
        {
          v50 = *(unsigned __int8 *)(v44 + v43);
          v51 = v50;
          v52 = v47;
          goto LABEL_141;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v81 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v92 = *(double *)&v43;
          _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
        {
LABEL_162:
          *(_DWORD *)v90 = 134349056;
          *(_QWORD *)&v90[4] = v43;
          v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,invalidIndex,%{public}zu", v90, 12, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
LABEL_124:
          v70 = (uint8_t *)v10;
          sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::getAltitude(CLDEMTile &, double, double, double &, double &)", "%s\n", v10);
          if (v70 != buf)
            free(v70);
          return 0;
        }
      }
      else
      {
        v43 = v39 + (uint64_t)(int)(v48 * v30);
        if (v45 > v43)
        {
          *(_QWORD *)&v72 = v42 + (int)v46;
          if (v45 <= *(_QWORD *)&v72)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v87 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v92 = v72;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              *(_DWORD *)v90 = 134349056;
              *(double *)&v90[4] = v72;
              v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,invalidIndex,%{public}zu", v90, 12, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
              goto LABEL_124;
            }
            return result;
          }
          v73 = (int)(v48 * v30) + (uint64_t)(int)v46;
          if (v45 <= v73)
          {
            if (qword_1022A0070 != -1)
              dispatch_once(&qword_1022A0070, &stru_10219ECA8);
            v88 = qword_1022A0078;
            if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 134349056;
              v92 = *(double *)&v73;
              _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
            }
            result = sub_1001BFF7C(115, 2);
            if (result)
            {
              bzero(buf, 0x65CuLL);
              if (qword_1022A0070 != -1)
                dispatch_once(&qword_1022A0070, &stru_10219ECA8);
              *(_DWORD *)v90 = 134349056;
              *(_QWORD *)&v90[4] = v73;
              v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,invalidIndex,%{public}zu", v90, 12, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
              goto LABEL_124;
            }
            return result;
          }
          v52 = *(unsigned __int8 *)(v44 + v43);
          v51 = *(unsigned __int8 *)(v44 + *(_QWORD *)&v72);
          v50 = *(unsigned __int8 *)(v44 + v73);
          goto LABEL_141;
        }
        if (qword_1022A0070 != -1)
          dispatch_once(&qword_1022A0070, &stru_10219ECA8);
        v82 = qword_1022A0078;
        if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134349056;
          v92 = *(double *)&v43;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
        }
        result = sub_1001BFF7C(115, 2);
        if (!result)
          return result;
        bzero(buf, 0x65CuLL);
        if (qword_1022A0070 == -1)
          goto LABEL_162;
      }
    }
    else
    {
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v69 = qword_1022A0078;
      if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 134349056;
        v92 = *(double *)&v43;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_INFO, "#Warning,DEM,invalidIndex,%{public}zu", buf, 0xCu);
      }
      result = sub_1001BFF7C(115, 2);
      if (!result)
        return result;
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 == -1)
        goto LABEL_162;
    }
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    goto LABEL_162;
  }
  if (qword_1022A0070 != -1)
    dispatch_once(&qword_1022A0070, &stru_10219ECA8);
  v8 = qword_1022A0078;
  if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "#Warning,DEM,cellsize == 0", buf, 2u);
  }
  result = sub_1001BFF7C(115, 2);
  if (result)
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    *(_WORD *)v90 = 0;
    v10 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,cellsize == 0", v90, 2, *(_OWORD *)v90, *(_QWORD *)&v90[16]);
    goto LABEL_124;
  }
  return result;
}

void sub_100080DCC(long double a1)
{
  fmod(a1, 360.0);
}

BOOL sub_100080E28(uint64_t a1, double a2, long double a3, double a4, double a5)
{
  double v7;
  double v8;
  unint64_t v9;
  double v10;
  _BOOL8 result;
  NSObject *v12;
  char *v13;
  int v14;
  double v15;
  uint8_t buf[4];
  double v17;

  if (!*(_BYTE *)(a1 + 32))
    return 0;
  if (a2 < -90.0 || a2 > 90.0)
  {
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10219ECA8);
    v12 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134283521;
      v17 = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "#Warning,DEM,latitude,%{private}.7lf,out of range", buf, 0xCu);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10219ECA8);
      v14 = 134283521;
      v15 = a2;
      v13 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 1, "#Warning,DEM,latitude,%{private}.7lf,out of range", &v14, 12);
      sub_100512490("Generic", 1, 0, 2, "static BOOL CLDigitalElevationModel::isLatLonOnCurrentTile(const CLDEMTile &, const double, const double)", "%s\n", v13);
      if (v13 != (char *)buf)
        free(v13);
      return 0;
    }
  }
  else
  {
    v7 = *(double *)(a1 + 128);
    if (v7 > a2)
      return 0;
    LOWORD(a5) = *(_WORD *)(a1 + 108);
    if (v7 + *(double *)(a1 + 136) * (double)*(unint64_t *)&a5 < a2)
      return 0;
    sub_100080DCC(a3);
    v10 = *(double *)(a1 + 120);
    if (v8 < v10)
      return 0;
    LOWORD(v9) = *(_WORD *)(a1 + 110);
    return v8 <= v10 + *(double *)(a1 + 136) * (double)v9;
  }
  return result;
}

BOOL sub_100081058(double *a1, double *a2, double *a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL8 result;
  double v15;
  __double2 v16;
  double v17;

  result = 0;
  if (a7 >= 0.0 && a8 <= 50000.0)
  {
    v15 = fabs(a8);
    v16 = __sincos_stret((dbl_101C3F5F0[a8 < 0.0] + a7) * 0.0174532925);
    return sub_10008111C(a1, a2, a3, &v17, a4, a5, a6, v15 * v16.__cosval, v15 * v16.__sinval, 0.0);
  }
  return result;
}

BOOL sub_10008111C(double *a1, double *a2, double *a3, double *a4, double a5, double a6, double a7, double a8, double a9, double a10)
{
  double v11;
  double cosval;
  __double2 v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;

  v11 = sqrt(a9 * a9 + a8 * a8);
  if (v11 <= 70000.0)
  {
    if (vabdd_f64(a5, a1[3]) <= 0.005)
    {
      v25 = *a1;
      cosval = a1[4];
    }
    else
    {
      a1[2] = a5 * 0.0174532925;
      a1[3] = a5;
      v22 = __sincos_stret(a5 * 0.0174532925);
      cosval = v22.__cosval;
      v23 = v22.__sinval * -0.00669437999 * v22.__sinval + 1.0;
      v24 = sqrt(v23);
      v25 = 6335439.33 / (v23 * v24);
      *a1 = v25;
      a1[1] = 6378137.0 / v24;
      a1[4] = v22.__cosval;
    }
    v26 = v25 + a7;
    v27 = 0.0;
    v28 = a8 / v26;
    if (fabs(cosval) >= 0.0001)
      v27 = a9 / (cosval * (a1[1] + a7));
    *a2 = a5 + v28 * 57.2957795;
    *a3 = a6 + v27 * 57.2957795;
    *a4 = a7 + a10;
    v29 = *a2;
    if (*a2 > 90.0)
    {
      *a2 = 180.0 - v29;
      *a3 = *a3 + 180.0;
      v29 = *a2;
    }
    if (v29 >= -90.0)
    {
      v30 = *a3;
    }
    else
    {
      *a2 = -180.0 - v29;
      v30 = *a3 + 180.0;
      *a3 = v30;
    }
    if (v30 > -180.0)
    {
      if (v30 <= 180.0)
        return v11 <= 70000.0;
    }
    else
    {
      v30 = v30 + 360.0;
    }
    if (v30 > 180.0)
      v30 = v30 + -360.0;
    *a3 = v30;
  }
  return v11 <= 70000.0;
}

void sub_10008131C(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021B88E0);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x158uLL);
      v24[2] = 0;
      *v24 = off_1021B8B78;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x140uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1000431A0();
    os_activity_scope_leave(&state);
  }
}

void sub_100081960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

BOOL sub_1000819D8(char *a1, int a2, int *a3)
{
  _BOOL8 v6;

  v6 = sub_10008250C(a1, a2, a3);
  sub_100081FA4((uint64_t **)a1, a2, a3, 0);
  (*(void (**)(char *))(*(_QWORD *)a1 + 232))(a1);
  return v6;
}

uint64_t sub_100081A34(_BYTE *a1)
{
  uint64_t result;
  uint64_t v3;
  _BOOL8 v4;
  int v5;
  int v6;

  v5 = 2;
  if (sub_1001B7864((uint64_t)a1, &v5, 1) && a1[920])
    sub_1008B1360(a1);
  else
    sub_100081C3C(a1);
  result = sub_1001FBB04(0);
  if (result)
  {
    v3 = result + 72;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(result + 72) + 16))(result + 72);
    if ((_DWORD)result)
    {
      v6 = 5;
      v4 = (int)sub_1001B7864((uint64_t)a1, &v6, 1) > 0;
      return (*(uint64_t (**)(uint64_t, _BOOL8))(*(_QWORD *)v3 + 40))(v3, v4);
    }
  }
  return result;
}

uint64_t sub_100081AE0(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 72) + 192))(a1 - 72);
  if ((_DWORD)result)
    return sub_1000824CC() != 0;
  return result;
}

uint64_t sub_100081B0C()
{
  uint64_t v1;
  int v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  char v8;

  if ((sub_100081BD0() & 1) != 0 || (sub_10011E0F0() & 1) != 0)
    return 0;
  v8 = 1;
  v1 = sub_100127B9C();
  sub_100081C10(v1, &v6);
  v2 = sub_1001E4874(v6, "OscarStepCounting", (BOOL *)&v8);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v8)
    return 1;
  else
    return v2 ^ 1u;
}

void sub_100081BBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100081BD0()
{
  if (qword_102303DF0 != -1)
    dispatch_once(&qword_102303DF0, &stru_1021514D0);
  return byte_102303DE8;
}

uint64_t sub_100081C10@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 32);
  *a2 = *(_QWORD *)(result + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void sub_100081C34(uint64_t a1, char a2)
{
  sub_100081F3C(a1 - 72, a2);
}

_BYTE *sub_100081C3C(_BYTE *result)
{
  _BYTE *v1;
  NSObject *v2;
  NSObject *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  _WORD v7[8];
  uint8_t buf[1640];

  if (result[921])
  {
    v1 = result;
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_10215A3E8);
    v2 = qword_10229FDF8;
    if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Disable GPS; Stop GPS subscription", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FDF0 != -1)
        dispatch_once(&qword_10229FDF0, &stru_10215A3E8);
      v7[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FDF8, 2, "Disable GPS; Stop GPS subscription",
                     v7,
                     2);
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierCompanion::disableGPS()", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
    }
    if (qword_1022A0070 != -1)
      dispatch_once(&qword_1022A0070, &stru_10215A408);
    v3 = qword_1022A0078;
    if (os_log_type_enabled((os_log_t)qword_1022A0078, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#wigo,off,OdometerNotifierCompanion", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0070 != -1)
        dispatch_once(&qword_1022A0070, &stru_10215A408);
      v7[0] = 0;
      LODWORD(v6) = 2;
      v5 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0078, 0, "#wigo,off,OdometerNotifierCompanion", v7, v6);
      sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierCompanion::disableGPS()", "%s\n", v5);
      if (v5 != (char *)buf)
        free(v5);
    }
    AnalyticsSendEventLazy(CFSTR("com.apple.locationd.position.GNSS.WIGO"), &stru_10215A390);
    objc_msgSend(*(id *)(*((_QWORD *)v1 + 215) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 215) + 8), 0);
    result = objc_msgSend(*(id *)(*((_QWORD *)v1 + 240) + 16), "unregister:forNotification:", *(_QWORD *)(*((_QWORD *)v1 + 240) + 8), 0);
    v1[921] = 0;
  }
  return result;
}

void sub_100081F3C(uint64_t a1, char a2)
{
  uint64_t v4;
  _QWORD v5[5];
  char v6;

  v4 = sub_100127B9C();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1000A3798;
  v5[3] = &unk_1021468D0;
  v5[4] = a1;
  v6 = a2;
  sub_1000A57FC(v4, (uint64_t)v5);
}

void sub_100081FA4(uint64_t **a1, int a2, int *a3, int a4)
{
  NSObject *v7;
  char *v8;
  id v9;
  int v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  const char *v14;
  id v15;
  int v16;
  int v17;
  void **v18;
  char *v19;
  void *v20[2];
  char v21;
  int v22;
  _BYTE __p[12];
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;
  __int16 v28;
  const char *v29;
  __int16 v30;
  id v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  int v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  int v39;
  __int16 v40;
  const char *v41;
  __int16 v42;
  void **v43;
  _BYTE buf[12];
  __int16 v45;
  const char *v46;
  __int16 v47;
  char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  int v56;
  __int16 v57;
  const char *v58;
  __int16 v59;
  int v60;
  __int16 v61;
  const char *v62;
  __int16 v63;
  _BYTE *v64;

  v22 = a2;
  if (qword_10229FDF0 != -1)
    dispatch_once(&qword_10229FDF0, &stru_102140258);
  v7 = qword_10229FDF8;
  if (os_log_type_enabled((os_log_t)qword_10229FDF8, OS_LOG_TYPE_DEFAULT))
  {
    v8 = a4 ? "Registration" : "Unregistration";
    *(_QWORD *)buf = &v22;
    v9 = objc_msgSend(objc_msgSend(sub_1000823D0(a1 + 10, &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)buf)[8], "description"), "UTF8String");
    v10 = *a3;
    *(_DWORD *)buf = *a3;
    v11 = sub_1001B7864((uint64_t)a1, (int *)buf, 1);
    ((void (*)(_BYTE *__return_ptr, uint64_t **, int *))(*a1)[20])(__p, a1, a3);
    v12 = v26 >= 0 ? __p : *(_BYTE **)__p;
    *(_DWORD *)buf = 136448770;
    *(_QWORD *)&buf[4] = "MotionOdometer";
    v45 = 2082;
    v46 = "action";
    v47 = 2082;
    v48 = v8;
    v49 = 2082;
    v50 = "client";
    v51 = 2082;
    v52 = v9;
    v53 = 2082;
    v54 = "notification";
    v55 = 1026;
    v56 = v10;
    v57 = 2082;
    v58 = "notificationClientCount";
    v59 = 1026;
    v60 = v11;
    v61 = 2082;
    v62 = "notificationString";
    v63 = 2082;
    v64 = v12;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "%{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}d, %{public}s, %{public}d, %{public}s, %{public}s", buf, 0x68u);
    if (SHIBYTE(v26) < 0)
      operator delete(*(void **)__p);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FDF0 != -1)
      dispatch_once(&qword_10229FDF0, &stru_102140258);
    v13 = qword_10229FDF8;
    if (a4)
      v14 = "Registration";
    else
      v14 = "Unregistration";
    *(_QWORD *)__p = &v22;
    v15 = objc_msgSend(objc_msgSend(sub_1000823D0(a1 + 10, &v22, (uint64_t)&unk_101B9EB60, (_DWORD **)__p)[8], "description"), "UTF8String");
    v16 = *a3;
    *(_DWORD *)__p = *a3;
    v17 = sub_1001B7864((uint64_t)a1, (int *)__p, 1);
    ((void (*)(void **__return_ptr, uint64_t **, int *))(*a1)[20])(v20, a1, a3);
    if (v21 >= 0)
      v18 = v20;
    else
      v18 = (void **)v20[0];
    *(_DWORD *)__p = 136448770;
    *(_QWORD *)&__p[4] = "MotionOdometer";
    v24 = 2082;
    v25 = "action";
    v26 = 2082;
    v27 = v14;
    v28 = 2082;
    v29 = "client";
    v30 = 2082;
    v31 = v15;
    v32 = 2082;
    v33 = "notification";
    v34 = 1026;
    v35 = v16;
    v36 = 2082;
    v37 = "notificationClientCount";
    v38 = 1026;
    v39 = v17;
    v40 = 2082;
    v41 = "notificationString";
    v42 = 2082;
    v43 = v18;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v13, 0, "%{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}d, %{public}s, %{public}d, %{public}s, %{public}s", __p, 104);
    if (v21 < 0)
      operator delete(v20[0]);
    sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifier::logClient(int, const CLOdometerNotifier_Type::Notification &, BOOL)", "%s\n", v19);
    if (v19 != buf)
      free(v19);
  }
}

uint64_t **sub_1000823D0(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  _DWORD *v11;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = operator new(0x48uLL);
    v11[8] = **a4;
    *((_QWORD *)v11 + 7) = 0;
    *((_QWORD *)v11 + 8) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 5) = v11 + 12;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

_QWORD *sub_10008249C@<X0>(_DWORD *a1@<X1>, _QWORD *a2@<X8>)
{
  int v3;
  char *v4;

  v3 = *a1 - 2;
  if (v3 > 5)
    v4 = "Unknown";
  else
    v4 = (char *)*((_QWORD *)&off_102140760 + v3);
  return sub_1015A2E04(a2, v4);
}

uint64_t sub_1000824CC()
{
  if (qword_102304F08 != -1)
    dispatch_once(&qword_102304F08, &stru_1021583F0);
  return qword_102310CF0;
}

BOOL sub_10008250C(char *a1, int a2, int *a3)
{
  int v3;
  uint64_t v6;
  char *v8;
  int v9;
  BOOL v10;
  uint64_t *v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  char *v16;
  int v17;
  BOOL v18;
  char **v19;
  uint64_t v20;
  int v21;
  char *v22;
  int v23;
  BOOL v24;
  uint64_t *v25;
  NSObject *v26;
  _QWORD *v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  uint64_t v33;
  _BYTE buf[12];
  __int16 v35;
  void **v36;
  char v37;
  int v38;
  _QWORD *v39;
  __int16 v40;
  _BYTE *v41;
  void *__p[2];
  char v43;

  HIDWORD(v33) = a2;
  v3 = a1[108];
  if (!a1[108])
  {
    v6 = *((_QWORD *)a1 + 11);
    if (v6)
    {
      v8 = a1 + 88;
      do
      {
        v9 = *(_DWORD *)(v6 + 32);
        v10 = v9 < a2;
        if (v9 >= a2)
          v11 = (uint64_t *)v6;
        else
          v11 = (uint64_t *)(v6 + 8);
        if (!v10)
          v8 = (char *)v6;
        v6 = *v11;
      }
      while (*v11);
      if (v8 != a1 + 88 && *((_DWORD *)v8 + 8) <= a2)
      {
        v14 = (char *)*((_QWORD *)v8 + 6);
        v12 = v8 + 48;
        v13 = v14;
        if (v14)
        {
          v15 = *a3;
          v16 = v12;
          do
          {
            v17 = *((_DWORD *)v13 + 7);
            v18 = v17 < v15;
            if (v17 >= v15)
              v19 = (char **)v13;
            else
              v19 = (char **)(v13 + 8);
            if (!v18)
              v16 = v13;
            v13 = *v19;
          }
          while (*v19);
          if (v16 != v12 && v15 >= *((_DWORD *)v16 + 7))
          {
            LODWORD(__p[0]) = *a3;
            sub_10009E904((uint64_t)(v12 - 8), (int *)__p);
            v20 = *((_QWORD *)a1 + 8);
            if (!v20)
              goto LABEL_33;
            v21 = *a3;
            v22 = a1 + 64;
            do
            {
              v23 = *(_DWORD *)(v20 + 32);
              v24 = v23 < v21;
              if (v23 >= v21)
                v25 = (uint64_t *)v20;
              else
                v25 = (uint64_t *)(v20 + 8);
              if (!v24)
                v22 = (char *)v20;
              v20 = *v25;
            }
            while (*v25);
            if (v22 != a1 + 64 && v21 >= *((_DWORD *)v22 + 8))
            {
              sub_10009E904((uint64_t)(v22 + 40), (int *)&v33 + 1);
              if (!*((_QWORD *)v22 + 7))
                (*(void (**)(char *, int *))(*(_QWORD *)a1 + 176))(a1, a3);
            }
            else
            {
LABEL_33:
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_102140238);
              v26 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v27 = a1 + 8;
                if (a1[31] < 0)
                  v27 = (_QWORD *)*v27;
                (*(void (**)(void **__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(__p, a1, a3);
                if (v43 >= 0)
                  v28 = __p;
                else
                  v28 = (void **)__p[0];
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = v27;
                v35 = 2082;
                v36 = v28;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "%{public}s; notification %{public}s not found",
                  buf,
                  0x16u);
                if (v43 < 0)
                  operator delete(__p[0]);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(__p, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_102140238);
                v29 = a1 + 8;
                if (a1[31] < 0)
                  v29 = (_QWORD *)*v29;
                v30 = qword_1022A0228;
                (*(void (**)(_BYTE *__return_ptr, char *, int *))(*(_QWORD *)a1 + 160))(buf, a1, a3);
                if (v37 >= 0)
                  v31 = buf;
                else
                  v31 = *(_BYTE **)buf;
                v38 = 136446466;
                v39 = v29;
                v40 = 2082;
                v41 = v31;
                LODWORD(v33) = 22;
                v32 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v30, 17, "%{public}s; notification %{public}s not found",
                                &v38,
                                v33);
                if (v37 < 0)
                  operator delete(*(void **)buf);
                sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLNotifier<CLOdometerNotifier_Type::Notification, CLOdometerNotifier_Type::NotificationData>::unregisterForNotification(int, const Notification_T &) [Notification_T = CLOdometerNotifier_Type::Notification, NotificationData_T = CLOdometerNotifier_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = char]", "%s\n", v32);
                if (v32 != (char *)__p)
                  free(v32);
              }
            }
          }
        }
      }
    }
  }
  return v3 == 0;
}

uint64_t sub_100082968(uint64_t a1, int *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  uint64_t *v10;
  __int128 *v11;
  __int128 v12;

  v5 = *(_QWORD *)(a1 + 64);
  v3 = a1 + 64;
  v4 = v5;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = v3;
  do
  {
    v8 = *(_DWORD *)(v4 + 32);
    v9 = v8 < v6;
    if (v8 >= v6)
      v10 = (uint64_t *)v4;
    else
      v10 = (uint64_t *)(v4 + 8);
    if (!v9)
      v7 = v4;
    v4 = *v10;
  }
  while (*v10);
  if (v7 == v3)
    return 0;
  if (v6 < *(_DWORD *)(v7 + 32))
    return 0;
  v11 = *(__int128 **)(v7 + 64);
  if (!v11)
    return 0;
  v12 = *v11;
  *(_QWORD *)(a3 + 16) = *((_QWORD *)v11 + 2);
  *(_OWORD *)a3 = v12;
  return 1;
}

float sub_100083204(float a1)
{
  float v1;
  float v2;

  v1 = a1 / 101320.0;
  v2 = powf(a1 / 101320.0, -0.66338) * -0.077464;
  return v2 + (float)(powf(v1, -0.80974) * 0.083241);
}

void sub_100083264(uint64_t a1, uint64_t a2, int *a3, uint64_t a4)
{
  double v6;
  NSObject *v7;
  double v8;
  int v9;
  int v10;
  double v11;
  unsigned __int16 *v12;
  NSObject *v13;
  double v14;
  int v15;
  int v16;
  double v17;
  double v18;
  unsigned int v19;
  unsigned int v20;
  NSObject *v21;
  NSObject *v23;
  int v24;
  uint64_t v25;
  int v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  NSObject *v30;
  double v31;
  int v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36;
  const char *v37;
  uint8_t *v38;
  NSObject *v39;
  NSObject *v40;
  uint64_t v41;
  int v42;
  int v43;
  const char *v44;
  uint8_t *v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  const char *v51;
  uint8_t *v52;
  const char *v53;
  uint8_t *v54;
  const char *v55;
  uint8_t *v56;
  uint64_t v57;
  _BYTE v58[24];
  _BYTE v59[10];
  uint8_t buf[4];
  double v61;
  __int16 v62;
  _BYTE v63[10];
  _BYTE v64[10];

  if (*a3 != 7)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v23 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
    {
      v24 = *a3;
      *(_DWORD *)buf = 67240192;
      LODWORD(v61) = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "BaroAlt,received other odometer notification,type,%{public}d,", buf, 8u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v25 = qword_1022A0028;
    v26 = *a3;
    *(_DWORD *)v58 = 67240192;
    *(_DWORD *)&v58[4] = v26;
    LODWORD(v57) = 8;
    v27 = "BaroAlt,received other odometer notification,type,%{public}d,";
    goto LABEL_37;
  }
  v6 = sub_1001FCBB4();
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v7 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    v8 = *(double *)(a4 + 8);
    v9 = *(_DWORD *)(a4 + 16);
    v10 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)buf = 134349824;
    v61 = v8;
    v62 = 1026;
    *(_DWORD *)v63 = v9;
    *(_WORD *)&v63[4] = 1026;
    *(_DWORD *)&v63[6] = v10;
    *(_WORD *)v64 = 2050;
    *(double *)&v64[2] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BaroAlt,received odometer update entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u,now,%{public}.lf", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v41 = *(_QWORD *)(a4 + 8);
    v42 = *(_DWORD *)(a4 + 16);
    v43 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)v58 = 134349824;
    *(_QWORD *)&v58[4] = v41;
    *(_WORD *)&v58[12] = 1026;
    *(_DWORD *)&v58[14] = v42;
    *(_WORD *)&v58[18] = 1026;
    *(_DWORD *)&v58[20] = v43;
    *(_WORD *)v59 = 2050;
    *(double *)&v59[2] = v6;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 2, "BaroAlt,received odometer update entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u,now,%{public}.lf", v58, 34);
    v45 = (uint8_t *)v44;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v44);
    if (v45 != buf)
      free(v45);
  }
  if (!*(_BYTE *)(a1 + 520))
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v29 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,do not expect to receive kNotificationOdometerUpdateElevationSpectator", buf, 2u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_WORD *)v58 = 0;
      LODWORD(v57) = 2;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,#Warning,do not expect to receive kNotificationOdometerUpdateElevationSpectator", v58, v57);
      v47 = (uint8_t *)v46;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v46);
      if (v47 != buf)
        free(v47);
    }
    sub_1017C9950(a1);
    return;
  }
  if ((*(_QWORD *)(a4 + 8) & 0x7FFFFFFFFFFFFFFFuLL) > 0x7FEFFFFFFFFFFFFFLL || *(double *)(a4 + 8) < 0.0)
  {
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v30 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      v31 = *(double *)(a4 + 8);
      v32 = *(_DWORD *)(a4 + 16);
      v33 = *(_DWORD *)(a4 + 20);
      *(_DWORD *)buf = 134349568;
      v61 = v31;
      v62 = 1026;
      *(_DWORD *)v63 = v32;
      *(_WORD *)&v63[4] = 1026;
      *(_DWORD *)&v63[6] = v33;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "BaroAlt,#Warning,received invalid elevation entry,startTime,%{public}lf,elevationAscended,%{public}u,elevationDescended,%{public}u", buf, 0x18u);
    }
    if (!sub_1001BFF7C(115, 2))
      return;
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v25 = qword_1022A0028;
    v34 = *(_QWORD *)(a4 + 8);
    v35 = *(_DWORD *)(a4 + 16);
    v36 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)v58 = 134349568;
    *(_QWORD *)&v58[4] = v34;
    *(_WORD *)&v58[12] = 1026;
    *(_DWORD *)&v58[14] = v35;
    *(_WORD *)&v58[18] = 1026;
    *(_DWORD *)&v58[20] = v36;
    LODWORD(v57) = 24;
    v27 = "BaroAlt,#Warning,received invalid elevation entry,startTime,%{public}lf,elevationAscended,%{public}u,elevation"
          "Descended,%{public}u";
    v28 = 1;
LABEL_52:
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v25, v28, v27, v58, v57, *(_OWORD *)v58, *(_QWORD *)&v58[16]);
    v38 = (uint8_t *)v37;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v37);
    if (v38 != buf)
      free(v38);
    return;
  }
  v11 = v6 - *(double *)(a1 + 1224);
  *(double *)(a1 + 1224) = v6;
  v12 = (unsigned __int16 *)(a1 + 528);
  if (v11 < 0.0 || v11 > 43200.0)
  {
    sub_1008B51D8((uint64_t)v12);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v39 = qword_1022A0028;
    if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      v61 = v11;
      v62 = 2050;
      *(double *)v63 = v6;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "BaroAlt,reset fSignificantElevationEstimator for invalid %.lf s gap in odometer feed,now,%{public}.lf", buf, 0x16u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0020 != -1)
        dispatch_once(&qword_1022A0020, &stru_1021CF648);
      *(_DWORD *)v58 = 134218240;
      *(double *)&v58[4] = v11;
      *(_WORD *)&v58[12] = 2050;
      *(double *)&v58[14] = v6;
      LODWORD(v57) = 22;
      _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,reset fSignificantElevationEstimator for invalid %.lf s gap in odometer feed,now,%{public}.lf", v58, v57);
      v56 = (uint8_t *)v55;
      sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v55);
      if (v56 != buf)
        free(v56);
    }
    *(_QWORD *)(a1 + 472) = 0;
    *(_OWORD *)(a1 + 480) = xmmword_101BAFC90;
    return;
  }
  sub_10022160C(v12, *(_DWORD *)(a4 + 16), *(_DWORD *)(a4 + 20), 0, *(double *)(a4 + 8));
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v13 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    v14 = *(double *)(a4 + 8);
    v15 = *(_DWORD *)(a4 + 16);
    v16 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)buf = 134349568;
    v61 = v14;
    v62 = 1026;
    *(_DWORD *)v63 = v15;
    *(_WORD *)&v63[4] = 1026;
    *(_DWORD *)&v63[6] = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "BaroAlt,fed to significant elevation estimator,startTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", buf, 0x18u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v48 = *(_QWORD *)(a4 + 8);
    v49 = *(_DWORD *)(a4 + 16);
    v50 = *(_DWORD *)(a4 + 20);
    *(_DWORD *)v58 = 134349568;
    *(_QWORD *)&v58[4] = v48;
    *(_WORD *)&v58[12] = 1026;
    *(_DWORD *)&v58[14] = v49;
    *(_WORD *)&v58[18] = 1026;
    *(_DWORD *)&v58[20] = v50;
    LODWORD(v57) = 24;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,fed to significant elevation estimator,startTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", v58, v57);
    v52 = (uint8_t *)v51;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v51);
    if (v52 != buf)
      free(v52);
  }
  v17 = *(double *)(a1 + 1056);
  v18 = *(double *)(a1 + 1064);
  v19 = *(_DWORD *)(a1 + 1072);
  v20 = *(_DWORD *)(a1 + 1076);
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v21 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 134349824;
    v61 = v17;
    v62 = 2050;
    *(double *)v63 = v18;
    *(_WORD *)&v63[8] = 1026;
    *(_DWORD *)v64 = v19;
    *(_WORD *)&v64[4] = 1026;
    *(_DWORD *)&v64[6] = v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "BaroAlt,newSigElvRelAlt,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", buf, 0x22u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    *(_DWORD *)v58 = 134349824;
    *(double *)&v58[4] = v17;
    *(_WORD *)&v58[12] = 2050;
    *(double *)&v58[14] = v18;
    *(_WORD *)&v58[22] = 1026;
    *(_DWORD *)v59 = v19;
    *(_WORD *)&v59[4] = 1026;
    *(_DWORD *)&v59[6] = v20;
    LODWORD(v57) = 34;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0028, 1, "BaroAlt,newSigElvRelAlt,startTime,%{public}.3f,endTime,%{public}.3f,ascended,%{public}d,descended,%{public}d", v58, v57);
    v54 = (uint8_t *)v53;
    sub_100512490("Generic", 1, 0, 2, "void CLBarometricAltimeter::onOdometerUpdate(int, const CLOdometerNotifier_Type::Notification &, const CLOdometerNotifier_Type::NotificationData &)", "%s\n", v53);
    if (v54 != buf)
      free(v54);
  }
  if (fabs(v17) >= 2.22044605e-16
    && (*(_QWORD *)&v17 & 0x7FFFFFFFFFFFFFFFuLL) <= 0x7FEFFFFFFFFFFFFFLL
    && fabs(v18) >= 2.22044605e-16
    && (*(_QWORD *)&v18 & 0x7FFFFFFFFFFFFFFFuLL) < 0x7FF0000000000000)
  {
    if (v18 > 0.0 && v18 - *(double *)(a1 + 1232) > 2.22044605e-16)
      *(double *)(a1 + 1240) = ((double)v19 - (double)v20) / 100.0;
    return;
  }
  if (qword_1022A0020 != -1)
    dispatch_once(&qword_1022A0020, &stru_1021CF648);
  v40 = qword_1022A0028;
  if (os_log_type_enabled((os_log_t)qword_1022A0028, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "BaroAlt,lastRelAlt,uninitialized significant elevation data received", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0020 != -1)
      dispatch_once(&qword_1022A0020, &stru_1021CF648);
    v25 = qword_1022A0028;
    *(_WORD *)v58 = 0;
    LODWORD(v57) = 2;
    v27 = "BaroAlt,lastRelAlt,uninitialized significant elevation data received";
LABEL_37:
    v28 = 2;
    goto LABEL_52;
  }
}

void sub_100083EA4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  NSObject *v10;
  NSObject *v11;
  id v12;
  _QWORD v13[8];
  int v14;
  os_activity_scope_state_s state;
  char v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  uint64_t v24;

  CLProfilingIdentify("CLWifiService::onWiFiDeviceClientScanCacheCallback");
  objc_msgSend(objc_msgSend(*(id *)(a5 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_1021469B0);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v16 = 1;
    v10 = _os_activity_create((void *)&_mh_execute_header, "CL: CLWifiService::onWiFiDeviceClientScanCacheCallback", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v10, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021469B0);
    v11 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v18 = 0;
      v19 = 2082;
      v20 = "";
      v21 = 2082;
      v22 = "activity";
      v23 = 2050;
      v24 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLWifiService::onWiFiDeviceClientScanCacheCallback\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v16 = 0;
  }
  v12 = objc_msgSend(*(id *)(a5 + 32), "silo");
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_10020B174;
  v13[3] = &unk_102146A10;
  v13[4] = a5;
  v13[5] = a1;
  v13[6] = a2;
  v13[7] = a3;
  v14 = a4;
  objc_msgSend(v12, "sync:", v13);
  if (v16)
    os_activity_scope_leave(&state);
}

void sub_1000840A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, os_activity_scope_state_s state, char a19)
{
  if (a19)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000840C4(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[5];
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLGnssController::sendGnssBandChangeNotification");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 792), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_102156048);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLGnssController::sendGnssBandChangeNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102156048);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLGnssController::sendGnssBandChangeNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 792), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020B170;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v4, "sync:", v5);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_10008429C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000842D8(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[5];
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLLocationController::checkActiveProviders");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::checkActiveProviders", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::checkActiveProviders\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020A674;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v4, "sync:", v5);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1000844B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_1000844D0(uint64_t a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  _QWORD v5[5];
  os_activity_scope_state_s state;
  char v7;
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;

  CLProfilingIdentify("CLLocationController::sendTechStatusNotification");
  objc_msgSend(objc_msgSend(*(id *)(a1 + 32), "silo"), "assertOutside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10214C560);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v7 = 1;
    v2 = _os_activity_create((void *)&_mh_execute_header, "CL: CLLocationController::sendTechStatusNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v2, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10214C560);
    v3 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v9 = 0;
      v10 = 2082;
      v11 = "";
      v12 = 2082;
      v13 = "activity";
      v14 = 2050;
      v15 = a1;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLLocationController::sendTechStatusNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v7 = 0;
  }
  v4 = objc_msgSend(*(id *)(a1 + 32), "silo");
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_10020A670;
  v5[3] = &unk_10212ECA0;
  v5[4] = a1;
  objc_msgSend(v4, "sync:", v5);
  if (v7)
    os_activity_scope_leave(&state);
}

void sub_1000846A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, os_activity_scope_state_s state, char a15)
{
  if (a15)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10008478C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1000847A8(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  NSObject *v6;
  uint64_t *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  char *v28;
  uint64_t *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[8];
  _DWORD v35[4];
  uint8_t buf[23];
  char v37;

  sub_100263E50((uint64_t)&v32);
  sub_100131938(&v31, (uint64_t)"CLBeaconFenceDatabase::getFencesForBundle", 0);
  if (qword_1022A0030 != -1)
    dispatch_once(&qword_1022A0030, &stru_1021AD728);
  v6 = qword_1022A0038;
  if (os_log_type_enabled((os_log_t)qword_1022A0038, OS_LOG_TYPE_DEBUG))
  {
    if (*((char *)a2 + 23) >= 0)
      v7 = a2;
    else
      v7 = (uint64_t *)*a2;
    *(_DWORD *)buf = 136380675;
    *(_QWORD *)&buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "iB: Retrieving fences for bundle,%{private}s", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0030 != -1)
      dispatch_once(&qword_1022A0030, &stru_1021AD728);
    if (*((char *)a2 + 23) >= 0)
      v29 = a2;
    else
      v29 = (uint64_t *)*a2;
    v35[0] = 136380675;
    *(_QWORD *)&v35[1] = v29;
    v30 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0038, 2, "iB: Retrieving fences for bundle,%{private}s", v35, 12);
    sub_100512490("Generic", 1, 0, 2, "BOOL CLBeaconFenceDatabase::getFencesForBundle(const std::string &, CLBTLEBeaconRegion_Type::MonitoredRegions &)", "%s\n", v30);
    if (v30 != (char *)buf)
      free(v30);
  }
  v8 = sub_100263F7C(&v33, (uint64_t)"SELECT ", 7);
  v9 = sub_100263F7C(v8, (uint64_t)"BundleIdentifier", 16);
  v10 = sub_100263F7C(v9, (uint64_t)", ", 2);
  v11 = sub_100263F7C(v10, (uint64_t)"Identifier", 10);
  v12 = sub_100263F7C(v11, (uint64_t)", ", 2);
  v13 = sub_100263F7C(v12, (uint64_t)"ProximityUUID", 13);
  v14 = sub_100263F7C(v13, (uint64_t)", ", 2);
  v15 = sub_100263F7C(v14, (uint64_t)"Major", 5);
  v16 = sub_100263F7C(v15, (uint64_t)", ", 2);
  v17 = sub_100263F7C(v16, (uint64_t)"Minor", 5);
  v18 = sub_100263F7C(v17, (uint64_t)", ", 2);
  v19 = sub_100263F7C(v18, (uint64_t)"DefinitionMask", 14);
  v20 = sub_100263F7C(v19, (uint64_t)", ", 2);
  v21 = sub_100263F7C(v20, (uint64_t)"Options", 7);
  v22 = sub_100263F7C(v21, (uint64_t)", ", 2);
  v23 = sub_100263F7C(v22, (uint64_t)"OnBehalfBundleIdentifier", 24);
  v24 = sub_100263F7C(v23, (uint64_t)" FROM ", 6);
  v25 = sub_100263F7C(v24, (uint64_t)"BeaconFences", 12);
  v26 = sub_100263F7C(v25, (uint64_t)" WHERE ", 7);
  v27 = sub_100263F7C(v26, (uint64_t)"BundleIdentifier", 16);
  sub_100263F7C(v27, (uint64_t)"=?", 2);
  sub_1000CAD6C(a3);
  std::stringbuf::str(buf, v34);
  if (v37 >= 0)
    v28 = (char *)buf;
  else
    v28 = *(char **)buf;
  sub_1000CDA68(a1, v28);
}

void sub_1000851D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_100131740(&a12);
  sub_1018B38B4((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_100085368(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100085448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_100010174((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_10008545C(uint64_t a1, uint64_t a2)
{
  id v3;
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;

  v3 = objc_msgSend(-[NSArray objectAtIndexedSubscript:](sub_10019F2A0(a1, a2), "objectAtIndexedSubscript:", 2), "intValue");
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v6[0] = 68289538;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = a2;
    v11 = 2050;
    v12 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Client Effective registration result with TransientAwareness\", \"Client\":%{public, location:escape_only}@, \"registration\":%{public, location:CLClientRegistrationResult}lld}", (uint8_t *)v6, 0x26u);
  }
  return v3;
}

char *sub_100085570@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_1001AF190(a2, (__int128 *)(a1 + 32));
}

void sub_100085AE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a20 < 0)
    operator delete(__p);
  sub_100010174(v26);
  _Unwind_Resume(a1);
}

void sub_100087390(uint64_t a1)
{
  double v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  uint64_t v7;
  void *i;
  void *v9;
  double v10;
  NSObject *v11;
  id v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint8_t buf[4];
  int v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  id v24;
  _BYTE v25[128];

  v2 = sub_1002004D4(a1);
  v3 = objc_alloc_init((Class)NSMutableArray);
  v13 = 0u;
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v4 = *(void **)(a1 + 400);
  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
  if (v5)
  {
    v6 = v5;
    v7 = *(_QWORD *)v14;
    do
    {
      for (i = 0; i != v6; i = (char *)i + 1)
      {
        if (*(_QWORD *)v14 != v7)
          objc_enumerationMutation(v4);
        v9 = *(void **)(*((_QWORD *)&v13 + 1) + 8 * (_QWORD)i);
        objc_msgSend(v9, "timestamp");
        if (v10 < v2)
          objc_msgSend(v3, "addObject:", v9);
      }
      v6 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", &v13, v25, 16);
    }
    while (v6);
  }
  if (qword_1022A0200 != -1)
    dispatch_once(&qword_1022A0200, &stru_102139040);
  v11 = qword_1022A0208;
  if (os_log_type_enabled((os_log_t)qword_1022A0208, OS_LOG_TYPE_DEBUG))
  {
    v12 = objc_msgSend(v3, "count");
    *(_DWORD *)buf = 68289539;
    v18 = 0;
    v19 = 2082;
    v20 = "";
    v21 = 2050;
    v22 = 9;
    v23 = 2049;
    v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Pruning locations\", \"subHarvester\":%{public, location:CLSubHarvesterIdentifier}lld, \"prunedLocationCount\":%{private}lu}", buf, 0x26u);
  }
  objc_msgSend(*(id *)(a1 + 400), "removeObjectsInArray:", v3);

}

unint64_t sub_10008758C(_QWORD *a1, char **a2, double a3, double a4)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  sqlite3_stmt *v9;
  uint64_t v10;
  int v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  double *v29;
  char *v30;
  char *v31;
  double *v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  double **v40;
  sqlite3_stmt *v41;
  sqlite3_stmt *v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  char **v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _QWORD *v80;
  int v82;
  int v83;
  uint64_t v85;
  _BYTE v86[4];
  int v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  char v97;
  char v98;
  uint64_t v99[3];
  __int16 v100;

  v7 = a1 + 14;
  v6 = a1[14];
  v8 = a1 + 9;
  v99[1] = (uint64_t)(a1 + 14);
  (*(void (**)(_QWORD *))(v6 + 16))(a1 + 14);
  v100 = 256;
  v80 = v7;
  if (sub_10008950C(v8))
  {
    sub_100087AF4(a1 + 78, v99);
    v9 = (sqlite3_stmt *)sub_100026CC8(v99[0]);
    if (sub_1000890C4(v9, 1, a3))
    {
      while (!sub_100087C78(v99, (uint64_t)v86))
      {
        v10 = v95;
        v11 = v87;
        v12 = v88;
        v13 = v89;
        v14 = v90;
        v15 = v91;
        v16 = v92;
        v17 = v93;
        v18 = v94;
        v19 = v97;
        v20 = v98;
        v21 = (unint64_t)a2[1];
        v22 = (unint64_t)a2[2];
        if (v21 >= v22)
        {
          v82 = v87;
          v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v21 - (_QWORD)*a2) >> 5);
          v25 = v24 + 1;
          if (v24 + 1 > 0x199999999999999)
            sub_100259694();
          v26 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - (_QWORD)*a2) >> 5);
          if (2 * v26 > v25)
            v25 = 2 * v26;
          if (v26 >= 0xCCCCCCCCCCCCCCLL)
            v27 = 0x199999999999999;
          else
            v27 = v25;
          if (v27)
            v28 = (char *)sub_100542E70((uint64_t)(a2 + 2), v27);
          else
            v28 = 0;
          v29 = (double *)&v28[160 * v24];
          *(_QWORD *)v29 = v10;
          v29[1] = a3;
          *((_DWORD *)v29 + 6) = v82;
          *((_BYTE *)v29 + 28) = v12;
          *((_BYTE *)v29 + 29) = v13;
          *((_BYTE *)v29 + 30) = v14;
          *((_BYTE *)v29 + 31) = v15;
          *((_BYTE *)v29 + 32) = v16;
          *((_BYTE *)v29 + 33) = v17;
          *((_BYTE *)v29 + 35) = v18;
          *((_BYTE *)v29 + 60) = v19;
          *((_BYTE *)v29 + 62) = v20;
          *((_BYTE *)v29 + 104) = 0;
          v31 = *a2;
          v30 = a2[1];
          v32 = v29;
          if (v30 == *a2)
          {
            v40 = (double **)a2;
          }
          else
          {
            do
            {
              v33 = *((_OWORD *)v30 - 9);
              *((_OWORD *)v32 - 10) = *((_OWORD *)v30 - 10);
              *((_OWORD *)v32 - 9) = v33;
              v34 = *((_OWORD *)v30 - 8);
              v35 = *((_OWORD *)v30 - 7);
              v36 = *((_OWORD *)v30 - 5);
              *((_OWORD *)v32 - 6) = *((_OWORD *)v30 - 6);
              *((_OWORD *)v32 - 5) = v36;
              *((_OWORD *)v32 - 8) = v34;
              *((_OWORD *)v32 - 7) = v35;
              v37 = *((_OWORD *)v30 - 4);
              v38 = *((_OWORD *)v30 - 3);
              v39 = *((_OWORD *)v30 - 1);
              *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
              *((_OWORD *)v32 - 1) = v39;
              *((_OWORD *)v32 - 4) = v37;
              *((_OWORD *)v32 - 3) = v38;
              v32 -= 20;
              v30 -= 160;
            }
            while (v30 != v31);
            v40 = (double **)a2;
            v30 = *a2;
          }
          v23 = (char *)(v29 + 20);
          *v40 = v32;
          v40[1] = v29 + 20;
          v40[2] = (double *)&v28[160 * v27];
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v21 = v95;
          *(double *)(v21 + 8) = a3;
          *(_DWORD *)(v21 + 24) = v11;
          *(_BYTE *)(v21 + 28) = v12;
          *(_BYTE *)(v21 + 29) = v13;
          *(_BYTE *)(v21 + 30) = v14;
          *(_BYTE *)(v21 + 31) = v15;
          *(_BYTE *)(v21 + 32) = v16;
          *(_BYTE *)(v21 + 33) = v17;
          *(_BYTE *)(v21 + 35) = v18;
          *(_BYTE *)(v21 + 60) = v19;
          *(_BYTE *)(v21 + 62) = v20;
          v23 = (char *)(v21 + 160);
          *(_BYTE *)(v21 + 104) = 0;
        }
        a2[1] = v23;
      }
    }
    sub_100087AF4(a1 + 74, &v85);
    v41 = (sqlite3_stmt *)sub_100026CC8(v85);
    if (sub_1000890C4(v41, 1, a3))
    {
      v42 = (sqlite3_stmt *)sub_100026CC8(v85);
      if (sub_1000890C4(v42, 2, a4))
      {
        while (!sub_100087C78(&v85, (uint64_t)v86))
        {
          v44 = v95;
          v43 = v96;
          v45 = v87;
          v46 = v88;
          v47 = v89;
          v48 = v90;
          v49 = v91;
          v50 = v92;
          v51 = v93;
          v52 = v94;
          v53 = v97;
          v54 = v98;
          v55 = (unint64_t)a2[1];
          v56 = (unint64_t)a2[2];
          if (v55 >= v56)
          {
            v83 = v87;
            v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (_QWORD)*a2) >> 5);
            v59 = v58 + 1;
            if (v58 + 1 > 0x199999999999999)
              sub_100259694();
            v60 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56 - (_QWORD)*a2) >> 5);
            if (2 * v60 > v59)
              v59 = 2 * v60;
            if (v60 >= 0xCCCCCCCCCCCCCCLL)
              v61 = 0x199999999999999;
            else
              v61 = v59;
            if (v61)
              v62 = (char *)sub_100542E70((uint64_t)(a2 + 2), v61);
            else
              v62 = 0;
            v63 = &v62[160 * v58];
            *(_QWORD *)v63 = v44;
            *((_QWORD *)v63 + 1) = v43;
            *((_DWORD *)v63 + 6) = v83;
            v63[28] = v46;
            v63[29] = v47;
            v63[30] = v48;
            v63[31] = v49;
            v63[32] = v50;
            v63[33] = v51;
            v63[35] = v52;
            v63[60] = v53;
            v63[62] = v54;
            v63[104] = 0;
            v65 = *a2;
            v64 = a2[1];
            v66 = v63;
            if (v64 == *a2)
            {
              v74 = a2;
            }
            else
            {
              do
              {
                v67 = *((_OWORD *)v64 - 9);
                *((_OWORD *)v66 - 10) = *((_OWORD *)v64 - 10);
                *((_OWORD *)v66 - 9) = v67;
                v68 = *((_OWORD *)v64 - 8);
                v69 = *((_OWORD *)v64 - 7);
                v70 = *((_OWORD *)v64 - 5);
                *((_OWORD *)v66 - 6) = *((_OWORD *)v64 - 6);
                *((_OWORD *)v66 - 5) = v70;
                *((_OWORD *)v66 - 8) = v68;
                *((_OWORD *)v66 - 7) = v69;
                v71 = *((_OWORD *)v64 - 4);
                v72 = *((_OWORD *)v64 - 3);
                v73 = *((_OWORD *)v64 - 1);
                *((_OWORD *)v66 - 2) = *((_OWORD *)v64 - 2);
                *((_OWORD *)v66 - 1) = v73;
                *((_OWORD *)v66 - 4) = v71;
                *((_OWORD *)v66 - 3) = v72;
                v66 -= 160;
                v64 -= 160;
              }
              while (v64 != v65);
              v74 = a2;
              v64 = *a2;
            }
            v57 = v63 + 160;
            *v74 = v66;
            v74[1] = v63 + 160;
            v74[2] = &v62[160 * v61];
            if (v64)
              operator delete(v64);
          }
          else
          {
            *(_QWORD *)v55 = v95;
            *(_QWORD *)(v55 + 8) = v43;
            *(_DWORD *)(v55 + 24) = v45;
            *(_BYTE *)(v55 + 28) = v46;
            *(_BYTE *)(v55 + 29) = v47;
            *(_BYTE *)(v55 + 30) = v48;
            *(_BYTE *)(v55 + 31) = v49;
            *(_BYTE *)(v55 + 32) = v50;
            *(_BYTE *)(v55 + 33) = v51;
            *(_BYTE *)(v55 + 35) = v52;
            *(_BYTE *)(v55 + 60) = v53;
            *(_BYTE *)(v55 + 62) = v54;
            v57 = (char *)(v55 + 160);
            *(_BYTE *)(v55 + 104) = 0;
          }
          a2[1] = v57;
        }
      }
    }
    v75 = v85;
    v85 = 0;
    if (v75)
      (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
    v76 = v99[0];
    v99[0] = 0;
    if (v76)
      (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
  }
  v78 = *a2;
  v77 = a2[1];
  (*(void (**)(_QWORD *))(*v80 + 24))(v80);
  return 0xCCCCCCCCCCCCCCCDLL * ((v77 - v78) >> 5);
}

void sub_100087A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  if (a13)
    (*(void (**)(uint64_t))(*(_QWORD *)a13 + 8))(a13);
  sub_10187E514((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_100087AF4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result && result[1])
    operator new();
  *a2 = 0;
  return result;
}

void sub_100087B5C()
{
  operator delete();
}

void sub_100087B80(uint64_t a1)
{
  sub_100087BA4(a1);
  operator delete();
}

_QWORD *sub_100087BA4(uint64_t a1)
{
  int v2;
  int v3;

  *(_QWORD *)a1 = off_10218DF10;
  v2 = sqlite3_reset(*(sqlite3_stmt **)(a1 + 16));
  if (v2)
  {
    sub_100635B40(*(_QWORD *)(a1 + 8), (uint64_t)"sqlite3_reset()", v2, *(sqlite3_stmt **)(a1 + 16));
    sub_10063434C(*(_QWORD *)(a1 + 8), v2);
  }
  v3 = sqlite3_clear_bindings(*(sqlite3_stmt **)(a1 + 16));
  if (v3)
  {
    sub_100635B40(*(_QWORD *)(a1 + 8), (uint64_t)"sqlite3_clear_bindings()", v3, *(sqlite3_stmt **)(a1 + 16));
    sub_10063434C(*(_QWORD *)(a1 + 8), v3);
  }
  return sub_1000CDA1C((_QWORD *)a1);
}

_QWORD *sub_100087C34(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  *a1 = off_10218DED0;
  a1[1] = a2;
  a1[2] = a3;
  sub_1000CE030(a2);
  *a1 = off_10218DF10;
  return a1;
}

uint64_t sub_100087C78(uint64_t *a1, uint64_t a2)
{
  sqlite3_stmt *v4;
  int v5;
  sqlite3_stmt *v6;
  sqlite3_stmt *v7;
  sqlite3_stmt *v8;
  sqlite3_stmt *v9;
  sqlite3_stmt *v10;
  sqlite3_stmt *v11;
  sqlite3_stmt *v12;
  sqlite3_stmt *v13;
  sqlite3_stmt *v14;
  sqlite3_stmt *v15;
  sqlite3_stmt *v16;
  sqlite3_stmt *v17;
  sqlite3_stmt *v18;
  char v19;
  uint64_t result;

  v4 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v5 = sqlite3_step(v4);
  if (v5 == 101)
    return 1;
  if (v5 != 100)
    return 2;
  v6 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)a2 = sqlite3_column_int(v6, 0);
  v7 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 24) = sqlite3_column_double(v7, 1);
  v8 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(double *)(a2 + 16) = sqlite3_column_double(v8, 2);
  v9 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_DWORD *)(a2 + 4) = sqlite3_column_int(v9, 3);
  v10 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 8) = sqlite3_column_int(v10, 4);
  v11 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 9) = sqlite3_column_int(v11, 5);
  v12 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 10) = sqlite3_column_int(v12, 6);
  v13 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 11) = sqlite3_column_int(v13, 7);
  v14 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 12) = sqlite3_column_int(v14, 8) != 0;
  v15 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 13) = sqlite3_column_int(v15, 9) != 0;
  v16 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 14) = sqlite3_column_int(v16, 10);
  v17 = (sqlite3_stmt *)sub_100026CC8(*a1);
  *(_BYTE *)(a2 + 32) = sqlite3_column_int(v17, 11);
  v18 = (sqlite3_stmt *)sub_100026CC8(*a1);
  v19 = sqlite3_column_int(v18, 12);
  result = 0;
  *(_BYTE *)(a2 + 33) = v19;
  return result;
}

void sub_100087DE0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>)
{
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  uint8_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  NSObject *v35;
  uint64_t v36;
  const char *v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  NSObject *v41;
  uint64_t v42;
  NSObject *v43;
  double v44;
  double v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _WORD v56[8];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  pthread_mutex_t *v91;
  __int16 v92;
  _OWORD v93[2];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint8_t buf[4];
  _BYTE v104[24];
  __int16 v105;
  double v106;
  __int16 v107;
  double v108;
  __int16 v109;
  double v110;
  __int16 v111;
  _BYTE v112[10];
  double v113;
  int v114;
  __int16 v115;
  int v116;
  __int16 v117;
  int v118;
  __int16 v119;
  uint64_t v120;
  __int16 v121;
  uint64_t v122;
  __int16 v123;
  int v124;
  __int16 v125;
  int v126;
  __int16 v127;
  int v128;
  __int16 v129;
  int v130;
  __int16 v131;
  int v132;
  __int16 v133;
  int v134;
  __int16 v135;
  uint64_t v136;
  __int16 v137;
  uint64_t v138;
  __int16 v139;
  uint64_t v140;
  __int16 v141;
  uint64_t v142;
  __int16 v143;
  uint64_t v144;
  __int16 v145;
  uint64_t v146;
  __int16 v147;
  uint64_t v148;
  __int16 v149;
  uint64_t v150;
  __int16 v151;
  int v152;

  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  v10 = *(_QWORD *)(a1 + 112);
  v90 = a1 + 112;
  (*(void (**)(void))(v10 + 16))();
  v92 = 256;
  if (a4 <= a5)
  {
    v101 = 0u;
    v102 = 0u;
    v99 = 0u;
    v100 = 0u;
    v97 = 0u;
    v98 = 0u;
    v95 = 0u;
    v96 = 0u;
    v94 = 0u;
    memset(v93, 0, sizeof(v93));
    v88 = 0u;
    v89 = 0u;
    v86 = 0u;
    v87 = 0u;
    v84 = 0u;
    v85 = 0u;
    v82 = 0u;
    v83 = 0u;
    v80 = 0u;
    v81 = 0u;
    v78 = 0u;
    v79 = 0u;
    v76 = 0u;
    v77 = 0u;
    v74 = 0u;
    v75 = 0u;
    v72 = 0u;
    v73 = 0u;
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    v64 = 0u;
    v65 = 0u;
    v62 = 0u;
    v63 = 0u;
    v60 = 0u;
    v61 = 0u;
    v58 = 0u;
    v59 = 0u;
    v57 = 0u;
    if (sub_1000889D8(a1, a2) && sub_1000889D8(a1, a2))
    {
      v18 = 0.0;
      v19 = 0.0;
      if (*((double *)&v79 + 1) - *((double *)v93 + 1) > 0.000001)
        v19 = (a4 - *((double *)v93 + 1)) / (*((double *)&v79 + 1) - *((double *)v93 + 1));
      if (*((double *)&v57 + 1) - *((double *)&v68 + 1) > 0.000001)
        v18 = (a5 - *((double *)&v68 + 1)) / (*((double *)&v57 + 1) - *((double *)&v68 + 1));
      LODWORD(v16) = v101;
      LODWORD(v17) = v88;
      LODWORD(v15) = v77;
      LODWORD(v14) = v66;
      if (a2 == 1
        && (*(double *)&v93[1] == 0.0 || *(double *)&v80 == 0.0 || *(double *)&v69 == 0.0 || *(double *)&v58 == 0.0))
      {
        if (qword_10229FCD0 != -1)
          dispatch_once(&qword_10229FCD0, &stru_1021B8480);
        v43 = qword_10229FCD8;
        if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#Warning First step time invalid.", buf, 2u);
        }
        if (sub_1001BFF7C(115, 2))
        {
          bzero(buf, 0x65CuLL);
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021B8480);
          v56[0] = 0;
          _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 0, "#Warning First step time invalid.", v56, 2);
          v47 = (uint8_t *)v46;
          sub_100512490("Generic", 1, 0, 2, "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const", "%s\n", v46);
          if (v47 != buf)
            free(v47);
        }
      }
      else
      {
        v20 = (uint64_t)((double)DWORD2(v93[1]) + v19 * ((double)DWORD2(v80) - (double)DWORD2(v93[1])));
        v21 = (uint64_t)((double)v96 + v19 * ((double)v83 - (double)v96));
        v22 = (uint64_t)((double)DWORD1(v96) + v19 * ((double)DWORD1(v83) - (double)DWORD1(v96)));
        v23 = (uint64_t)((double)v16 + v19 * ((double)v17 - (double)v16));
        v24 = (uint64_t)((double)DWORD2(v69) + v18 * ((double)DWORD2(v58) - (double)DWORD2(v69)));
        v25 = (uint64_t)((double)v72 + v18 * ((double)v61 - (double)v72));
        v26 = (uint64_t)((double)DWORD1(v72) + v18 * ((double)DWORD1(v61) - (double)DWORD1(v72)));
        v27 = (double)v15 + v18 * ((double)v14 - (double)v15);
        v28 = (uint64_t)v27;
        if (v24 < v20 || v28 < v23 || v25 < v21 || v26 < v22)
        {
          v54 = (uint64_t)((double)v16 + v19 * ((double)v17 - (double)v16));
          v55 = (uint64_t)((double)DWORD1(v96) + v19 * ((double)DWORD1(v83) - (double)DWORD1(v96)));
          v53 = (uint64_t)((double)v96 + v19 * ((double)v83 - (double)v96));
          v51 = (uint64_t)((double)v72 + v18 * ((double)v61 - (double)v72));
          v52 = (uint64_t)((double)DWORD1(v72) + v18 * ((double)DWORD1(v61) - (double)DWORD1(v72)));
          v49 = (uint64_t)v27;
          v50 = (uint64_t)((double)DWORD2(v93[1]) + v19 * ((double)DWORD2(v80) - (double)DWORD2(v93[1])));
          v48 = (uint64_t)((double)DWORD2(v69) + v18 * ((double)DWORD2(v58) - (double)DWORD2(v69)));
          if (qword_10229FCD0 != -1)
            dispatch_once(&qword_10229FCD0, &stru_1021B8480);
          v41 = qword_10229FCD8;
          if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)buf = 68295938;
            *(_DWORD *)v104 = 0;
            *(_WORD *)&v104[4] = 2082;
            *(_QWORD *)&v104[6] = "";
            *(_WORD *)&v104[14] = 2050;
            *(double *)&v104[16] = a4;
            v105 = 2050;
            v106 = a5;
            v107 = 2050;
            v108 = *((double *)v93 + 1);
            v109 = 2050;
            v110 = *((double *)&v79 + 1);
            v111 = 1026;
            *(_DWORD *)v112 = DWORD2(v93[1]);
            *(_WORD *)&v112[4] = 1026;
            *(_DWORD *)&v112[6] = DWORD2(v80);
            LOWORD(v113) = 1026;
            *(_DWORD *)((char *)&v113 + 2) = v96;
            HIWORD(v113) = 1026;
            v114 = v83;
            v115 = 1026;
            v116 = DWORD1(v96);
            v117 = 1026;
            v118 = DWORD1(v83);
            v119 = 2050;
            v120 = *((_QWORD *)&v68 + 1);
            v121 = 2050;
            v122 = *((_QWORD *)&v57 + 1);
            v123 = 1026;
            v124 = DWORD2(v69);
            v125 = 1026;
            v126 = DWORD2(v58);
            v127 = 1026;
            v128 = v72;
            v129 = 1026;
            v130 = v61;
            v131 = 1026;
            v132 = DWORD1(v72);
            v133 = 1026;
            v134 = DWORD1(v61);
            v135 = 2050;
            v136 = v50;
            v137 = 2050;
            v138 = v48;
            v139 = 2050;
            v140 = v54;
            v141 = 2050;
            v142 = v49;
            v143 = 2050;
            v144 = v53;
            v145 = 2050;
            v146 = v51;
            v147 = 2050;
            v148 = v55;
            v149 = 2050;
            v150 = v52;
            v151 = 1026;
            v152 = a2;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Steps were found to be non monotonically increasing\", \"startTime\":\"%{public}.6f\", \"endTime\":\"%{public}.6f\", \"startLeft.startTime\":\"%{public}.6f\", \"startRight.startTime\":\"%{public}.6f\", \"startLeft.count\":%{public}u, \"startRight.count\":%{public}u, \"startLeft.floorsAscended\":%{public}u, \"startRight.floorsAscended\":%{public}u, \"startLeft.floorsDescended\":%{public}u, \"startRight.floorsDescended\":%{public}u, \"endLeft.startTime\":\"%{public}.6f\", \"endRight.startTime\":\"%{public}.6f\", \"endLeft.count\":%{public}u, \"endRight.count\":%{public}u, \"endLeft.floorsAscended\":%{public}u, \"endRight.floorsAscended\":%{public}u, \"endLeft.floorsDescended\":%{public}u, \"endRight.floorsDescended\":%{public}u, \"startCount\":%{public}ld, \"endCount\":%{public}ld, \"startPushCount\":%{public}ld, \"endPushCount\":%{public}ld, \"startFloorAscended\":%{public}ld, \"endFloorAscended\":%{public}ld, \"startFloorDescended\":%{public}ld, \"endFloorDescended\":%{public}ld, \"queryTimeType\":%{public}d}", buf, 0xECu);
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_1021B8480);
          }
          v42 = qword_10229FCD8;
          if (os_signpost_enabled((os_log_t)qword_10229FCD8))
          {
            *(_DWORD *)buf = 68295938;
            *(_DWORD *)v104 = 0;
            *(_WORD *)&v104[4] = 2082;
            *(_QWORD *)&v104[6] = "";
            *(_WORD *)&v104[14] = 2050;
            *(double *)&v104[16] = a4;
            v105 = 2050;
            v106 = a5;
            v107 = 2050;
            v108 = *((double *)v93 + 1);
            v109 = 2050;
            v110 = *((double *)&v79 + 1);
            v111 = 1026;
            *(_DWORD *)v112 = DWORD2(v93[1]);
            *(_WORD *)&v112[4] = 1026;
            *(_DWORD *)&v112[6] = DWORD2(v80);
            LOWORD(v113) = 1026;
            *(_DWORD *)((char *)&v113 + 2) = v96;
            HIWORD(v113) = 1026;
            v114 = v83;
            v115 = 1026;
            v116 = DWORD1(v96);
            v117 = 1026;
            v118 = DWORD1(v83);
            v119 = 2050;
            v120 = *((_QWORD *)&v68 + 1);
            v121 = 2050;
            v122 = *((_QWORD *)&v57 + 1);
            v123 = 1026;
            v124 = DWORD2(v69);
            v125 = 1026;
            v126 = DWORD2(v58);
            v127 = 1026;
            v128 = v72;
            v129 = 1026;
            v130 = v61;
            v131 = 1026;
            v132 = DWORD1(v72);
            v133 = 1026;
            v134 = DWORD1(v61);
            v135 = 2050;
            v136 = v50;
            v137 = 2050;
            v138 = v48;
            v139 = 2050;
            v140 = v54;
            v141 = 2050;
            v142 = v49;
            v143 = 2050;
            v144 = v53;
            v145 = 2050;
            v146 = v51;
            v147 = 2050;
            v148 = v55;
            v149 = 2050;
            v150 = v52;
            v151 = 1026;
            v152 = a2;
            v37 = "Steps were found to be non monotonically increasing";
            v38 = "{\"msg%{public}.0s\":\"Steps were found to be non monotonically increasing\", \"startTime\":\"%{public"
                  "}.6f\", \"endTime\":\"%{public}.6f\", \"startLeft.startTime\":\"%{public}.6f\", \"startRight.startTime"
                  "\":\"%{public}.6f\", \"startLeft.count\":%{public}u, \"startRight.count\":%{public}u, \"startLeft.floo"
                  "rsAscended\":%{public}u, \"startRight.floorsAscended\":%{public}u, \"startLeft.floorsDescended\":%{pub"
                  "lic}u, \"startRight.floorsDescended\":%{public}u, \"endLeft.startTime\":\"%{public}.6f\", \"endRight.s"
                  "tartTime\":\"%{public}.6f\", \"endLeft.count\":%{public}u, \"endRight.count\":%{public}u, \"endLeft.fl"
                  "oorsAscended\":%{public}u, \"endRight.floorsAscended\":%{public}u, \"endLeft.floorsDescended\":%{publi"
                  "c}u, \"endRight.floorsDescended\":%{public}u, \"startCount\":%{public}ld, \"endCount\":%{public}ld, \""
                  "startPushCount\":%{public}ld, \"endPushCount\":%{public}ld, \"startFloorAscended\":%{public}ld, \"endF"
                  "loorAscended\":%{public}ld, \"startFloorDescended\":%{public}ld, \"endFloorDescended\":%{public}ld, \""
                  "queryTimeType\":%{public}d}";
            v39 = v42;
            v40 = 236;
            goto LABEL_43;
          }
        }
        else
        {
          v29 = *(double *)&v94 + v19 * (*(double *)&v81 - *(double *)&v94);
          v30 = *((double *)&v94 + 1) + v19 * (*((double *)&v81 + 1) - *((double *)&v94 + 1));
          v31 = *((double *)&v97 + 1) + v19 * (*((double *)&v84 + 1) - *((double *)&v97 + 1));
          v32 = *(double *)&v70 + v18 * (*(double *)&v59 - *(double *)&v70);
          v33 = *((double *)&v70 + 1) + v18 * (*((double *)&v59 + 1) - *((double *)&v70 + 1));
          v34 = *((double *)&v73 + 1) + v18 * (*((double *)&v62 + 1) - *((double *)&v73 + 1));
          if (v32 - v29 >= 0.0 && v33 - v30 >= 0.0 && v34 - v31 >= 0.0)
          {
            v44 = *(double *)&v95 + v19 * (*(double *)&v82 - *(double *)&v95);
            v45 = *(double *)&v71 + v18 * (*(double *)&v60 - *(double *)&v71);
            *(_DWORD *)a3 = (int)((double)v24 - (double)v20);
            *(double *)(a3 + 8) = v32 - v29;
            *(double *)(a3 + 16) = v33 - v30;
            *(double *)(a3 + 24) = v45 - v44;
            *(_DWORD *)(a3 + 32) = (int)((double)v25 - (double)v21);
            *(_DWORD *)(a3 + 36) = (int)((double)v26 - (double)v22);
            *(double *)(a3 + 40) = v34 - v31;
            *(_DWORD *)(a3 + 48) = (int)((double)v28 - (double)v23);
          }
          else
          {
            if (qword_10229FCD0 != -1)
              dispatch_once(&qword_10229FCD0, &stru_1021B8480);
            v35 = qword_10229FCD8;
            if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 68290562;
              *(_DWORD *)v104 = 0;
              *(_WORD *)&v104[4] = 2082;
              *(_QWORD *)&v104[6] = "";
              *(_WORD *)&v104[14] = 2050;
              *(double *)&v104[16] = v29;
              v105 = 2050;
              v106 = v32;
              v107 = 2050;
              v108 = v30;
              v109 = 2050;
              v110 = v33;
              v111 = 2050;
              *(double *)v112 = v31;
              *(_WORD *)&v112[8] = 2050;
              v113 = v34;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"Invalid delta distance and time.\", \"startDistance\":\"%{public}f\", \"endDistance\":\"%{public}f\", \"startRawDistance\":\"%{public}f\", \"endRawDistance\":\"%{public}f\", \"startActiveTime\":\"%{public}f\", \"endActiveTime\":\"%{public}f\"}", buf, 0x4Eu);
              if (qword_10229FCD0 != -1)
                dispatch_once(&qword_10229FCD0, &stru_1021B8480);
            }
            v36 = qword_10229FCD8;
            if (os_signpost_enabled((os_log_t)qword_10229FCD8))
            {
              *(_DWORD *)buf = 68290562;
              *(_DWORD *)v104 = 0;
              *(_WORD *)&v104[4] = 2082;
              *(_QWORD *)&v104[6] = "";
              *(_WORD *)&v104[14] = 2050;
              *(double *)&v104[16] = v29;
              v105 = 2050;
              v106 = v32;
              v107 = 2050;
              v108 = v30;
              v109 = 2050;
              v110 = v33;
              v111 = 2050;
              *(double *)v112 = v31;
              *(_WORD *)&v112[8] = 2050;
              v113 = v34;
              v37 = "Invalid delta distance and time.";
              v38 = "{\"msg%{public}.0s\":\"Invalid delta distance and time.\", \"startDistance\":\"%{public}f\", \"endDi"
                    "stance\":\"%{public}f\", \"startRawDistance\":\"%{public}f\", \"endRawDistance\":\"%{public}f\", \"s"
                    "tartActiveTime\":\"%{public}f\", \"endActiveTime\":\"%{public}f\"}";
              v39 = v36;
              v40 = 78;
LABEL_43:
              _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v39, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, v37, v38, buf, v40);
            }
          }
        }
      }
    }
    if (!HIBYTE(v92))
      return;
    goto LABEL_50;
  }
  if (qword_10229FCD0 != -1)
    dispatch_once(&qword_10229FCD0, &stru_1021B8480);
  v11 = qword_10229FCD8;
  if (os_log_type_enabled((os_log_t)qword_10229FCD8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 134349568;
    *(double *)v104 = a4;
    *(_WORD *)&v104[8] = 2050;
    *(double *)&v104[10] = a5;
    *(_WORD *)&v104[18] = 1026;
    *(_DWORD *)&v104[20] = a2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d", buf, 0x1Cu);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FCD0 != -1)
      dispatch_once(&qword_10229FCD0, &stru_1021B8480);
    LODWORD(v93[0]) = 134349568;
    *(double *)((char *)v93 + 4) = a4;
    WORD6(v93[0]) = 2050;
    *(double *)((char *)v93 + 14) = a5;
    WORD3(v93[1]) = 1026;
    DWORD2(v93[1]) = a2;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FCD8, 17, "Assumption failed: startTime (%{public}f) was found to be newer than endTime (%{public}f), queryTimeType %{public}d", v93, 28);
    v13 = (uint8_t *)v12;
    sub_100512490("Generic", 1, 0, 0, "CLStepDistance CLStepCountRecorderDb::queryStepCount(CFAbsoluteTime, CFAbsoluteTime, QueryTimeType) const", "%s\n", v12);
    if (v13 != buf)
      free(v13);
  }
LABEL_50:
  if ((_BYTE)v92)
    pthread_mutex_unlock(v91);
  else
    (*(void (**)(uint64_t))(*(_QWORD *)v90 + 24))(v90);
}

void sub_1000889A0(_Unwind_Exception *a1)
{
  sub_10187E514((uint64_t)&STACK[0x2A8]);
  _Unwind_Resume(a1);
}

uint64_t sub_1000889D8(uint64_t a1, int a2)
{
  char *v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *p_p;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[8];
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  unsigned __int8 v23;
  void *__p;
  char v25;

  if (sub_10008950C(a1 + 72))
  {
    v4 = "startTime";
    if (a2 == 1 && (sub_1001B7910() & 2) != 0)
      v4 = "firstStepTime";
    sub_1015A2E04(&v21, v4);
    sub_100263E50((uint64_t)&v19);
    sub_100263E50((uint64_t)&v16);
    v5 = sub_100263F7C(&v20, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37);
    if ((v23 & 0x80u) == 0)
      v6 = &v21;
    else
      v6 = v21;
    if ((v23 & 0x80u) == 0)
      v7 = v23;
    else
      v7 = v22;
    v8 = sub_100263F7C(v5, (uint64_t)v6, v7);
    sub_100263F7C(v8, (uint64_t)" >= ? ORDER BY startTime ASC LIMIT 1", 36);
    v9 = sub_100263F7C(&v17, (uint64_t)"SELECT * FROM StepCountHistory WHERE ", 37);
    if ((v23 & 0x80u) == 0)
      v10 = &v21;
    else
      v10 = v21;
    if ((v23 & 0x80u) == 0)
      v11 = v23;
    else
      v11 = v22;
    v12 = sub_100263F7C(v9, (uint64_t)v10, v11);
    sub_100263F7C(v12, (uint64_t)" <= ? ORDER BY startTime DESC LIMIT 1", 37);
    v13 = *(_QWORD *)(a1 + 80);
    std::stringbuf::str(&__p, v18);
    if (v25 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    sub_1000CDA68(v13, p_p);
  }
  return 0;
}

void sub_100089008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  if (v50)
    (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
  if (v49)
    (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  sub_1018B38B4((uint64_t)&a14);
  sub_1018B38B4((uint64_t)&a49);
  if (SLOBYTE(STACK[0x26F]) < 0)
    operator delete((void *)STACK[0x258]);
  _Unwind_Resume(a1);
}

BOOL sub_1000890C4(sqlite3_stmt *a1, int a2, double a3)
{
  int v6;
  NSObject *v7;
  NSObject *v8;
  const char *v9;
  int v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  double v17;
  __int16 v18;
  int v19;
  __int16 v20;
  int v21;
  __int16 v22;
  int *v23;
  __int16 v24;
  const char *v25;

  v6 = sqlite3_bind_double(a1, a2, a3);
  v11 = v6;
  if (v6)
  {
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_102149330);
    v7 = off_1022A0288;
    if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = sqlite3_sql(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Could not bind\", \"value\":\"%{private}f\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
      if (qword_1022A0280 != -1)
        dispatch_once(&qword_1022A0280, &stru_102149330);
    }
    v8 = off_1022A0288;
    if (os_signpost_enabled((os_log_t)off_1022A0288))
    {
      v9 = sqlite3_sql(a1);
      *(_DWORD *)buf = 68290307;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2049;
      v17 = a3;
      v18 = 1026;
      v19 = a2;
      v20 = 1040;
      v21 = 4;
      v22 = 2098;
      v23 = &v11;
      v24 = 2081;
      v25 = v9;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Could not bind", "{\"msg%{public}.0s\":\"Could not bind\", \"value\":\"%{private}f\", \"index\":%{public}d, \"rc\":%{public, location:SqliteResult}.*P, \"query\":%{private, location:escape_only}s}", buf, 0x3Cu);
    }
  }
  return v6 == 0;
}

BOOL sub_1000892F8(uint64_t a1)
{
  double Current;
  uint64_t v3;
  NSObject *v5;
  NSObject *v6;
  int v7;
  int v8;
  __int16 v9;
  const char *v10;
  __int16 v11;
  int v12;

  Current = CFAbsoluteTimeGetCurrent();
  if (Current < 441763200.0 || Current > 3628972800.0)
  {
    if ((byte_10230CD6C & 1) == 0)
      byte_10230CD6C = 1;
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    v5 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = (int)Current;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "{\"msg%{public}.0s\":\"CL database error\", \"CFAbsoluteTimeGetCurrent\":%{public}d}", (uint8_t *)&v7, 0x18u);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_1021A26E0);
    }
    v6 = qword_10229FC78;
    if (os_signpost_enabled((os_log_t)qword_10229FC78))
    {
      v7 = 68289282;
      v8 = 0;
      v9 = 2082;
      v10 = "";
      v11 = 1026;
      v12 = (int)Current;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "CL database error", "{\"msg%{public}.0s\":\"CL database error\", \"CFAbsoluteTimeGetCurrent\":%{public}d}", (uint8_t *)&v7, 0x18u);
    }
  }
  else
  {
    byte_10230CD6C = 0;
    v3 = *(_QWORD *)(a1 + 8);
    if (v3)
      return sub_1000CC4F4(v3);
  }
  return 0;
}

void sub_100089510(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  char *p_p;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[8];
  void *__p;
  char v52;

  v6 = *a3;
  v5 = a3[1];
  if (v5 != *a3)
  {
    do
    {
      v5 -= 248;
      sub_10091BC34((uint64_t)(a3 + 2), v5);
    }
    while (v5 != v6);
  }
  a3[1] = v6;
  sub_100263E50((uint64_t)&v48);
  v7 = sub_100263F7C(&v49, (uint64_t)"SELECT ", 7);
  v8 = sub_100263F7C(v7, (uint64_t)"BundleId", 8);
  v9 = sub_100263F7C(v8, (uint64_t)", ", 2);
  v10 = sub_100263F7C(v9, (uint64_t)"Name", 4);
  v11 = sub_100263F7C(v10, (uint64_t)", ", 2);
  v12 = sub_100263F7C(v11, (uint64_t)"Distance", 8);
  v13 = sub_100263F7C(v12, (uint64_t)", ", 2);
  v14 = sub_100263F7C(v13, (uint64_t)"DesiredAccuracy", 15);
  v15 = sub_100263F7C(v14, (uint64_t)", ", 2);
  v16 = sub_100263F7C(v15, (uint64_t)"SetupComplete", 13);
  v17 = sub_100263F7C(v16, (uint64_t)", ", 2);
  v18 = sub_100263F7C(v17, (uint64_t)"Timestamp", 9);
  v19 = sub_100263F7C(v18, (uint64_t)", ", 2);
  v20 = sub_100263F7C(v19, (uint64_t)"MonitorFlags", 12);
  v21 = sub_100263F7C(v20, (uint64_t)", ", 2);
  v22 = sub_100263F7C(v21, (uint64_t)"OnBehalfBundleId", 16);
  v23 = sub_100263F7C(v22, (uint64_t)", ", 2);
  v24 = sub_100263F7C(v23, (uint64_t)"ReferenceFrame", 14);
  v25 = sub_100263F7C(v24, (uint64_t)", ", 2);
  v26 = sub_100263F7C(v25, (uint64_t)"FenceForeignKey", 15);
  v27 = sub_100263F7C(v26, (uint64_t)", ", 2);
  v28 = sub_100263F7C(v27, (uint64_t)"HandoffTag", 10);
  v29 = sub_100263F7C(v28, (uint64_t)", ", 2);
  v30 = sub_100263F7C(v29, (uint64_t)"FenceHandOffDeviceId", 20);
  v31 = sub_100263F7C(v30, (uint64_t)".", 1);
  v32 = sub_100263F7C(v31, (uint64_t)"DeviceId", 8);
  v33 = sub_100263F7C(v32, (uint64_t)" FROM ", 6);
  v34 = sub_100263F7C(v33, (uint64_t)"GeoFence", 8);
  v35 = sub_100263F7C(v34, (uint64_t)" INNER JOIN ", 12);
  v36 = sub_100263F7C(v35, (uint64_t)"FenceHandOffDeviceId", 20);
  v37 = sub_100263F7C(v36, (uint64_t)" ON ", 4);
  v38 = sub_100263F7C(v37, (uint64_t)"GeoFence", 8);
  v39 = sub_100263F7C(v38, (uint64_t)".", 1);
  v40 = sub_100263F7C(v39, (uint64_t)"DeviceIdIndex", 13);
  v41 = sub_100263F7C(v40, (uint64_t)" = ", 3);
  v42 = sub_100263F7C(v41, (uint64_t)"FenceHandOffDeviceId", 20);
  v43 = sub_100263F7C(v42, (uint64_t)".", 1);
  v44 = sub_100263F7C(v43, (uint64_t)"DeviceIdIndex", 13);
  v45 = sub_100263F7C(v44, (uint64_t)" WHERE ", 7);
  v46 = sub_100263F7C(v45, (uint64_t)"BundleId", 8);
  sub_100263F7C(v46, (uint64_t)"=?", 2);
  std::stringbuf::str(&__p, v50);
  if (v52 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  sub_1000CDA68(a1, p_p);
}

void sub_10008A55C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,char a56)
{
  uint64_t v56;

  if (v56)
    (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
  sub_1018B38B4((uint64_t)&a56);
  _Unwind_Resume(a1);
}

void **sub_10008A674(void **result)
{
  unint64_t v1;
  int64x2_t v2;
  int64x2_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v1 = (unint64_t)*result;
  v2 = *(int64x2_t *)(result + 1);
  v3 = vshrq_n_s64(vsubq_s64(v2, vdupq_n_s64((unint64_t)*result)), 3uLL);
  v4 = 0xEF7BDEF7BDEF7BDFLL * v3.i64[0];
  v5 = v4;
  if (0xEF7BDEF7BDEF7BDFLL * v3.i64[1] > v4)
  {
    v6 = (uint64_t *)result;
    v7 = (uint64_t)(result + 2);
    v14 = v7;
    if (v2.i64[0] == v1)
    {
      v8 = 0;
      v9 = 0;
    }
    else
    {
      v8 = (char *)sub_10091CA64(v7, v4);
    }
    v10 = v8;
    v11 = &v8[248 * v5];
    v12 = v11;
    v13 = &v8[248 * v9];
    sub_10091D608(v6, &v10);
    return sub_10091D7B8(&v10);
  }
  return result;
}

void sub_10008A730(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  __cxa_begin_catch(a1);
  __cxa_end_catch();
  JUMPOUT(0x10008A720);
}

void sub_10008A758(uint64_t a1, CLConnection *a2)
{
  uint64_t **v2;
  uint64_t *v3;
  CLConnection *v4;
  _QWORD *v5;
  unint64_t v6;
  BOOL v7;
  _QWORD *v8;
  uint64_t v9;
  NSObject *v10;
  void **v11;
  uint64_t v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  _BYTE buf[12];
  char v17;
  int v18;
  _BYTE *v19;
  void *__p[2];
  char v21;

  v5 = *(_QWORD **)(a1 + 848);
  if (!v5)
    goto LABEL_12;
  v4 = a2;
  v2 = (uint64_t **)(a1 + 840);
  v3 = (uint64_t *)(a1 + 848);
  do
  {
    v6 = v5[4];
    v7 = v6 >= (unint64_t)a2;
    if (v6 >= (unint64_t)a2)
      v8 = v5;
    else
      v8 = v5 + 1;
    if (v7)
      v3 = v5;
    v5 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v3 == (uint64_t *)(a1 + 848) || v3[4] > (unint64_t)a2)
  {
LABEL_12:
    sub_101909080();
    __break(1u);
  }
  v9 = v3[5];
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v10 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    CLConnection::getName(v4);
    v11 = v21 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Client %{public}s disconnected", buf, 0xCu);
    if (v21 < 0)
      operator delete(__p[0]);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v12 = qword_1022A01D8;
    CLConnection::getName(v4);
    if (v17 >= 0)
      v13 = buf;
    else
      v13 = *(_BYTE **)buf;
    v18 = 136446210;
    v19 = v13;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v12, 0, "Client %{public}s disconnected", &v18, 12);
    v15 = v14;
    if (v17 < 0)
      operator delete(*(void **)buf);
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::destroyGenericClient(CLConnection *)", "%s\n", v15);
    if (v15 != (char *)__p)
      free(v15);
  }
  sub_10008A9F0(v2, v3);
  operator delete(v3);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
}

uint64_t *sub_10008A9F0(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  BOOL v5;
  uint64_t *v6;

  v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      v3 = v2;
      v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    v4 = a2;
    do
    {
      v3 = (uint64_t *)v4[2];
      v5 = *v3 == (_QWORD)v4;
      v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2)
    *a1 = v3;
  v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10025F998(v6, a2);
  return v3;
}

void sub_10008AA60(uint64_t a1)
{
  sub_10008AA84(a1);
  operator delete();
}

_QWORD *sub_10008AA84(uint64_t a1)
{
  uint64_t v2;
  const std::string *v3;
  const std::string *v4;
  __int128 v5;
  void **v6;
  NSString *v7;
  void *__p[2];
  int64_t v10;

  *(_QWORD *)a1 = off_10218BB10;
  if (_os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync"))
  {
    v3 = (const std::string *)sub_10008ABE4(*(void **)(a1 + 32), v2);
    v4 = v3;
    if (v3)
    {
      if (sub_100C1F99C(v3))
      {
        if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_100115CE4(__p, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
        }
        else
        {
          v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
          v10 = v4->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v5;
        }
        if (v10 >= 0)
          v6 = __p;
        else
          v6 = (void **)__p[0];
        v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, __p[0], __p[1], v10);
        if (SHIBYTE(v10) < 0)
          operator delete(__p[0]);
        objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 16), "vendor"), "proxyForService:", CFSTR("CLClientManager")), "inUseAssertionInvalidatedDueToWatchConnectivityForClientKey:", v7);
      }
    }
  }
  objc_msgSend(*(id *)(a1 + 32), "invalidate");

  objc_msgSend(*(id *)(a1 + 24), "setValid:", 0);
  *(_QWORD *)(a1 + 24) = 0;
  return sub_10008ABA0((_QWORD *)a1);
}

_QWORD *sub_10008ABA0(_QWORD *a1)
{
  CLConnection *v2;

  *a1 = off_10213D568;
  v2 = (CLConnection *)a1[1];
  if (v2)
  {
    CLConnection::deferredDelete(v2);
    a1[1] = 0;
  }
  return a1;
}

id sub_10008ABE4(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_100E495A0(a1);
  else
    return 0;
}

id sub_10008AC78(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  _DWORD v6[2];
  __int16 v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_1021A2C00);
  v4 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 68289282;
    v6[1] = 0;
    v7 = 2082;
    v8 = "";
    v9 = 2114;
    v10 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"invoking applicationStateChange handler\", \"StateChangeData\":%{public, location:escape_only}@}", (uint8_t *)v6, 0x1Cu);
  }
  return objc_msgSend(*(id *)(a1 + 32), "onApplicationStateChange:", a2);
}

void sub_10008AD74(uint64_t a1, void *a2, int a3)
{
  __objc2_class *v3;
  CFRunLoopRef Current;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  uint64_t v14;
  NSObject *v15;
  int v16;
  int v17;
  void *v18;
  const __CFNumber *RegistryID;
  uint64_t v20;
  int v21;
  int v22;
  void *v23;
  char *v24;
  int v25;
  int v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[5];
  int v32;
  int v33;
  __int16 v34;
  int v35;
  __int16 v36;
  void *v37;
  __int16 v38;
  void *v39;
  __int16 v40;
  uint64_t v41;
  uint8_t buf[8];
  __int16 v43;
  int v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  __int16 v49;
  uint64_t v50;

  Current = CFRunLoopGetCurrent();
  sub_100127B9C();
  v8 = sub_1001AD8D0();
  if (Current != (CFRunLoopRef)v8)
  {
    sub_101915124();
LABEL_33:
    dispatch_once(&qword_10229FC70, &stru_102165728);
LABEL_19:
    v15 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
    {
      v17 = *(_DWORD *)(a1 + 16);
      v16 = *(_DWORD *)(a1 + 20);
      v18 = *(void **)(a1 + 152);
      *(_DWORD *)buf = 67240963;
      *(_DWORD *)&buf[4] = v16;
      v43 = 1026;
      v44 = v17;
      v45 = 2049;
      v46 = a2;
      v47 = 2113;
      v48 = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Service ref with usage pair {%{public}d, %{public}d} is %{private}p with matching properties %{private}@", buf, 0x22u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (v3[79].vtable != (void *)-1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      v22 = *(_DWORD *)(a1 + 16);
      v21 = *(_DWORD *)(a1 + 20);
      v23 = *(void **)(a1 + 152);
      v32 = 67240963;
      v33 = v21;
      v34 = 1026;
      v35 = v22;
      v36 = 2049;
      v37 = a2;
      v38 = 2113;
      v39 = v23;
      v24 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Service ref with usage pair {%{public}d, %{public}d} is %{private}p with matching properties %{private}@", &v32, 34);
      sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v24);
      if (v24 != (char *)buf)
        free(v24);
    }
    *(_QWORD *)(a1 + 24) = CFRetain(a2);
    if (!a3)
      goto LABEL_24;
    goto LABEL_23;
  }
  v9 = *(void **)(a1 + 24);
  if (v9 == a2)
    return;
  if (!v9)
  {
    v3 = DefaultObserver;
    if (qword_10229FC70 == -1)
      goto LABEL_19;
    goto LABEL_33;
  }
  if (!a3)
    return;
  if (*(_BYTE *)(a1 + 40)
    && !sub_1001A9460(v8, *(__IOHIDServiceClient **)(a1 + 24), CFSTR("ReportInterval"), &off_10221BA38))
  {
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v10 = qword_10229FC78;
    if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "[CLIoHidInterface] Failed to stop streaming from the old service before switching to the new one", buf, 2u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_10229FC70 != -1)
        dispatch_once(&qword_10229FC70, &stru_102165728);
      LOWORD(v32) = 0;
      v29 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 16, "[CLIoHidInterface] Failed to stop streaming from the old service before switching to the new one", &v32, 2);
      sub_100512490("Generic", 1, 0, 0, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v29);
      if (v29 != (char *)buf)
        free(v29);
    }
  }
  if (qword_10229FC70 != -1)
    dispatch_once(&qword_10229FC70, &stru_102165728);
  v11 = qword_10229FC78;
  if (os_log_type_enabled((os_log_t)qword_10229FC78, OS_LOG_TYPE_DEFAULT))
  {
    v13 = *(_DWORD *)(a1 + 16);
    v12 = *(_DWORD *)(a1 + 20);
    v14 = *(_QWORD *)(a1 + 152);
    *(_DWORD *)buf = 67241219;
    *(_DWORD *)&buf[4] = v12;
    v43 = 1026;
    v44 = v13;
    v45 = 2049;
    v46 = v9;
    v47 = 2049;
    v48 = a2;
    v49 = 2113;
    v50 = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "[CLIoHidInterface] Device,usagePage,%{public}d,usage,%{public}d,hidserviceref,old,%{private}p,new,%{private}p,matchingProperties,%{private}@", buf, 0x2Cu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_10229FC70 != -1)
      dispatch_once(&qword_10229FC70, &stru_102165728);
    v26 = *(_DWORD *)(a1 + 16);
    v25 = *(_DWORD *)(a1 + 20);
    v27 = *(_QWORD *)(a1 + 152);
    v32 = 67241219;
    v33 = v25;
    v34 = 1026;
    v35 = v26;
    v36 = 2049;
    v37 = v9;
    v38 = 2049;
    v39 = a2;
    v40 = 2113;
    v41 = v27;
    LODWORD(v30) = 44;
    v28 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC78, 0, "[CLIoHidInterface] Device,usagePage,%{public}d,usage,%{public}d,hidserviceref,old,%{private}p,new,%{private}p,matchingProperties,%{private}@", &v32, v30);
    sub_100512490("Generic", 1, 0, 2, "void CLIoHidInterface::Device::updateServiceRef(IOHIDServiceClientRef, BOOL)", "%s\n", v28);
    if (v28 != (char *)buf)
      free(v28);
  }
  sub_10023D8C0(a1);
  *(_QWORD *)(a1 + 24) = CFRetain(a2);
LABEL_23:
  sub_10019CFCC(*(_QWORD *)(a1 + 32));
LABEL_24:
  if (*(_QWORD *)(a1 + 112))
  {
    *(_QWORD *)buf = 0;
    RegistryID = (const __CFNumber *)IOHIDServiceClientGetRegistryID((IOHIDServiceClientRef)a2);
    CFNumberGetValue(RegistryID, kCFNumberSInt64Type, buf);
    if (*(_QWORD *)buf != *(_QWORD *)(a1 + 8))
      (*(void (**)(_QWORD))(a1 + 112))(*(_QWORD *)(a1 + 120));
  }
  if (*(_QWORD *)(a1 + 64) && ((a3 & 1) != 0 || *(_BYTE *)(a1 + 40)))
  {
    v20 = sub_100127B9C();
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100A0B038;
    v31[3] = &unk_10212ECA0;
    v31[4] = a1;
    sub_1000A57FC(v20, (uint64_t)v31);
  }
}

uint64_t sub_10008B370(uint64_t a1)
{
  _BYTE *v1;
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  uint64_t result;
  _DWORD v5[2];
  __int16 v6;
  const char *v7;

  v1 = *(_BYTE **)(a1 + 32);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v5[0] = 68289026;
    v5[1] = 0;
    v6 = 2082;
    v7 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Sending app status change notification\"}", (uint8_t *)v5, 0x12u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLAppStatusChangedNotification, 0, 0, 0);
  v5[0] = 3;
  result = (*(uint64_t (**)(_BYTE *, _DWORD *, _QWORD, uint64_t))(*(_QWORD *)v1 + 144))(v1, v5, 0, 0xFFFFFFFFLL);
  v1[1136] = 0;
  return result;
}

void sub_10008B490(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v4[2];
  void *v5[2];
  __int128 v6;
  void *v7[2];
  void *v8[2];
  _BYTE v9[19];
  void *v10[2];
  void *v11[2];
  __int128 v12;
  void *__p[4];
  char v14;
  int v15;

  *(_OWORD *)v8 = 0u;
  memset(v9, 0, sizeof(v9));
  v6 = 0u;
  *(_OWORD *)v7 = 0u;
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)v5 = 0u;
  memset(__p, 0, 27);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)v11 = 0u;
  v12 = 0u;
  v14 = 0;
  v15 = 0;
  (*(void (**)(uint64_t, uint64_t, void **, uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, a2, v4, a3, a4, 0);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v12) < 0)
    operator delete(v11[1]);
  if (SHIBYTE(v11[0]) < 0)
    operator delete(v10[0]);
  if ((v9[15] & 0x80000000) != 0)
    operator delete(v8[1]);
  if (SHIBYTE(v8[0]) < 0)
    operator delete(v7[0]);
  if (SHIBYTE(v6) < 0)
    operator delete(v5[1]);
  if (SHIBYTE(v5[0]) < 0)
    operator delete(v4[0]);
}

void sub_10008B570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100010174((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10008B584(uint64_t a1, signed __int32 *a2, uint64_t a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  os_activity_scope_state_s state;
  uint64_t buf;
  _BYTE v29[20];
  __int16 v30;
  _QWORD *v31;
  __int16 v32;
  std::__shared_weak_count *v33;
  char **v34;
  char *v35[3];
  std::__shared_weak_count *v36;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021545E8);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      buf = 68289794;
      *(_WORD *)v29 = 2082;
      *(_QWORD *)&v29[2] = "";
      *(_WORD *)&v29[10] = 2082;
      *(_QWORD *)&v29[12] = "activity";
      v30 = 2082;
      v31 = v10;
      v32 = 2050;
      v33 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", (uint8_t *)&buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v34 = v35;
      memset(v35, 0, sizeof(v35));
      v36 = 0;
      sub_1007F8138((uint64_t)&buf, a2, (uint64_t)&v34);
      v14 = sub_1007A24CC((uint64_t **)(a1 + 56), (__n128 *)&buf);
      v18 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_1007A28B0((uint64_t)v29, *(char **)&v29[8]);
      v21 = v36;
      if (v36)
      {
        v22 = (unint64_t *)&v36->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_1007A28B0((uint64_t)&v34, v35[0]);
    }
    if (a4)
    {
      sub_1007F81E8(a3, &buf);
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)&buf);
      v24 = *(std::__shared_weak_count **)v29;
      if (*(_QWORD *)v29)
      {
        v25 = (unint64_t *)(*(_QWORD *)v29 + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_100248260();
    os_activity_scope_leave(&state);
  }
}

void sub_10008BBA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

uint64_t sub_10008BBEC(uint64_t a1, uint64_t a2)
{
  CLProfilingIdentify("CLHeadingSubscription::onCompass");
  objc_msgSend(objc_msgSend(*(id *)(a2 + 8), "silo"), "assertInside");
  return sub_100096780(a2, a1);
}

void sub_10008BC2C(uint64_t a1, __int128 ***a2, __n128 a3)
{
  __int128 *v3;
  unsigned __int16 *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  float v11;
  double v12;
  NSObject *v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint8_t *v23;
  __n128 v24;
  _OWORD v25[12];
  unsigned __int32 v26;
  uint64_t v27;
  __int16 v28;
  int v29;
  __int16 v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  uint8_t buf[4];
  uint64_t v35;
  __int16 v36;
  int v37;
  __int16 v38;
  int v39;
  __int16 v40;
  uint64_t v41;

  v3 = **a2;
  if (v3 != (*a2)[1])
  {
    v6 = (unsigned __int16 *)(a1 + 944);
    v7 = a1 + 1640;
    a3.n128_u64[0] = 134218752;
    v24 = a3;
    do
    {
      memset(&v25[4], 0, 128);
      v8 = *v3;
      v9 = v3[1];
      v10 = v3[3];
      v25[2] = v3[2];
      v25[3] = v10;
      v25[0] = v8;
      v25[1] = v9;
      *(_DWORD *)buf = 7;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v25, 0, 0xFFFFFFFFLL, 0);
      *(_DWORD *)buf = 8;
      (*(void (**)(uint64_t, uint8_t *, _OWORD *, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a1 + 152))(a1, buf, v25, 0, 0xFFFFFFFFLL, 0);
      sub_10022160C(v6, *((_DWORD *)v3 + 4), *((_DWORD *)v3 + 5), 0, *((double *)v3 + 1));
      *(_QWORD *)(a1 + 1680) = *(_QWORD *)(a1 + 1488);
      sub_100221614(*((double *)v3 + 1), (uint64_t)v6, v7);
      v11 = *((float *)v3 + 14);
      *(double *)(a1 + 1688) = v11;
      *(_BYTE *)(a1 + 1696) = 0;
      if (v11 > 0.0)
      {
        v12 = *(double *)(a1 + 928);
        if (v12 == 1.79769313e308 || vabdd_f64(*(double *)(a1 + 1664), v12) > *(double *)(a1 + 936))
        {
          sub_1002369AC(*(_QWORD *)(a1 + 128), v7);
          *(_QWORD *)(a1 + 928) = *(_QWORD *)(a1 + 1664);
          if (*(_BYTE *)(a1 + 1704))
          {
            if (qword_10229FD70 != -1)
              dispatch_once(&qword_10229FD70, &stru_10215A428);
            v13 = qword_10229FD78;
            if (os_log_type_enabled((os_log_t)qword_10229FD78, OS_LOG_TYPE_DEBUG))
            {
              v14 = *(_QWORD *)(a1 + 1664);
              v15 = *(_DWORD *)(a1 + 1680);
              v16 = *(_DWORD *)(a1 + 1684);
              v17 = *(_QWORD *)(a1 + 1688);
              *(_DWORD *)buf = v24.n128_u32[0];
              v35 = v14;
              v36 = 1024;
              v37 = v15;
              v38 = 1024;
              v39 = v16;
              v40 = 2048;
              v41 = v17;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "writing data to elevationDB for phone,startTime,%f,ascended,%d,descended,%d,pressure,%f", buf, 0x22u);
            }
            if (sub_1001BFF7C(115, 2))
            {
              bzero(buf, 0x65CuLL);
              if (qword_10229FD70 != -1)
                dispatch_once(&qword_10229FD70, &stru_10215A428);
              v18 = *(_QWORD *)(a1 + 1664);
              v19 = *(_DWORD *)(a1 + 1680);
              v20 = *(_DWORD *)(a1 + 1684);
              v21 = *(_QWORD *)(a1 + 1688);
              v26 = v24.n128_u32[0];
              v27 = v18;
              v28 = 1024;
              v29 = v19;
              v30 = 1024;
              v31 = v20;
              v32 = 2048;
              v33 = v21;
              _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FD78, 2, "writing data to elevationDB for phone,startTime,%f,ascended,%d,descended,%d,pressure,%f", COERCE_DOUBLE(&v26), 34, v24.n128_u32[0], v24.n128_f64[1]);
              v23 = (uint8_t *)v22;
              sub_100512490("Generic", 1, 0, 2, "void CLOdometerNotifierCompanion::pushElevation(std::shared_ptr<CLElevationVector>)", "%s\n", v22);
              if (v23 != buf)
                free(v23);
            }
          }
        }
      }
      v3 += 4;
    }
    while (v3 != (*a2)[1]);
  }
}

void sub_10008BF94(uint64_t a1, signed __int32 *a2, _OWORD *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v36[20];
  __int16 v37;
  _QWORD *v38;
  __int16 v39;
  std::__shared_weak_count *v40;
  _QWORD **v41;
  _QWORD *v42[3];
  std::__shared_weak_count *v43;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_102140238);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v36 = 2082;
      *(_QWORD *)&v36[2] = "";
      *(_WORD *)&v36[10] = 2082;
      *(_QWORD *)&v36[12] = "activity";
      v37 = 2082;
      v38 = v10;
      v39 = 2050;
      v40 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v41 = v42;
      memset(v42, 0, sizeof(v42));
      v43 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v41);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v36, *(_QWORD **)&v36[8]);
      v21 = v43;
      if (v43)
      {
        v22 = (unint64_t *)&v43->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v41, v42[0]);
    }
    if (a4)
    {
      v24 = (char *)operator new(0xD8uLL);
      v25 = a3[9];
      *(_OWORD *)(v24 + 152) = a3[8];
      *(_OWORD *)(v24 + 168) = v25;
      v26 = a3[11];
      *(_OWORD *)(v24 + 184) = a3[10];
      *(_OWORD *)(v24 + 200) = v26;
      v27 = a3[5];
      *(_OWORD *)(v24 + 88) = a3[4];
      *(_OWORD *)(v24 + 104) = v27;
      v28 = a3[7];
      *(_OWORD *)(v24 + 120) = a3[6];
      *(_OWORD *)(v24 + 136) = v28;
      v29 = a3[1];
      *(_OWORD *)(v24 + 24) = *a3;
      *(_OWORD *)(v24 + 40) = v29;
      v30 = a3[3];
      *(_OWORD *)(v24 + 56) = a3[2];
      *((_QWORD *)v24 + 2) = 0;
      *(_QWORD *)v24 = off_1021406D8;
      *((_QWORD *)v24 + 1) = 0;
      *(_OWORD *)(v24 + 72) = v30;
      *(_QWORD *)buf = v24 + 24;
      *(_QWORD *)v36 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v31 = *(std::__shared_weak_count **)v36;
      if (*(_QWORD *)v36)
      {
        v32 = (unint64_t *)(*(_QWORD *)v36 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_10008C65C();
    os_activity_scope_leave(&state);
  }
}

void sub_10008C610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

void sub_10008C65C()
{
  operator new();
}

void sub_10008C75C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  double v20;
  int v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  uint8_t buf[4];
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  int v46;
  __int16 v47;
  uint64_t v48;

  v3 = *(_QWORD *)(a1 + 8368);
  if (v3)
    sub_100CAEC44(v3, a2);
  if (qword_1022A0190 != -1)
    dispatch_once(&qword_1022A0190, &stru_10214DE00);
  v4 = qword_1022A0198;
  if (os_log_type_enabled((os_log_t)qword_1022A0198, OS_LOG_TYPE_INFO))
  {
    v5 = *(_QWORD *)a2;
    v6 = *(_QWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    v9 = *(unsigned __int8 *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    *(_DWORD *)buf = 134219520;
    v36 = v5;
    v37 = 2048;
    v38 = v6;
    v39 = 2048;
    v40 = v7;
    v41 = 2048;
    v42 = v8;
    v43 = 2048;
    v44 = v10;
    v45 = 1024;
    v46 = v9;
    v47 = 2048;
    v48 = v11;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Update reached MotionStateMediator, startTime, %f, mctTimestampSec, %f type, %ld, confidence, %ld, estimatedStateProbabilityOutdoor, %f, isAstronomicalDaytime, %d, daylightConfidence, %ld", buf, 0x44u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0190 != -1)
      dispatch_once(&qword_1022A0190, &stru_10214DE00);
    v12 = *(_QWORD *)a2;
    v13 = *(_QWORD *)(a2 + 8);
    v14 = *(_QWORD *)(a2 + 16);
    v15 = *(_QWORD *)(a2 + 24);
    v16 = *(unsigned __int8 *)(a2 + 48);
    v17 = *(_QWORD *)(a2 + 32);
    v18 = *(_QWORD *)(a2 + 40);
    v21 = 134219520;
    v22 = v12;
    v23 = 2048;
    v24 = v13;
    v25 = 2048;
    v26 = v14;
    v27 = 2048;
    v28 = v15;
    v29 = 2048;
    v30 = v17;
    v31 = 1024;
    v32 = v16;
    v33 = 2048;
    v34 = v18;
    LODWORD(v20) = 68;
    v19 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0198, 1, "Update reached MotionStateMediator, startTime, %f, mctTimestampSec, %f type, %ld, confidence, %ld, estimatedStateProbabilityOutdoor, %f, isAstronomicalDaytime, %d, daylightConfidence, %ld", COERCE_DOUBLE(&v21), v20);
    sub_100512490("Generic", 1, 0, 2, "void CLMotionStateMediator::onOutdoorUpdate(const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v19);
    if (v19 != (char *)buf)
      free(v19);
  }
}

__n128 sub_10008C9F8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v2;
  __n128 result;

  v2 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = v2;
  result = *(__n128 *)(a1 + 64);
  *(__n128 *)(a2 + 32) = result;
  *(_QWORD *)(a2 + 48) = *(_QWORD *)(a1 + 80);
  return result;
}

void sub_10008CA14(uint64_t a1, uint64_t *a2)
{
  sub_10008CA1C(a1 - 120, a2);
}

void sub_10008CA1C(uint64_t a1, uint64_t *a2)
{
  _BOOL4 v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *__p[2];
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  int v21;
  _DWORD v22[2];
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  __int16 v29;
  uint64_t v30;
  _BYTE buf[28];
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;

  if (objc_msgSend(*(id *)(a1 + 152), "indoord"))
  {
    sub_10008CDE0((uint64_t)v19);
    v21 |= 1u;
    if (!v20)
      operator new();
    v4 = sub_10008CFE0((uint64_t)a2, v20);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021A47C0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
    {
      v6 = a2[2];
      v7 = a2[3];
      v8 = *a2;
      v9 = a2[4];
      *(_DWORD *)buf = 67241217;
      *(_DWORD *)&buf[4] = v4;
      *(_WORD *)&buf[8] = 2050;
      *(_QWORD *)&buf[10] = v6;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = v7;
      v32 = 2049;
      v33 = v8;
      v34 = 2050;
      v35 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "ClxIndoor, outdoor update converted, %{public}d, type, %{public}ld, confidence, %ld , start time, %{private}.3f, outdoor prob, %{public}.3f", buf, 0x30u);
    }
    if (sub_1001BFF7C(115, 2))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021A47C0);
      v12 = a2[2];
      v13 = a2[3];
      v14 = *a2;
      v15 = a2[4];
      v22[0] = 67241217;
      v22[1] = v4;
      v23 = 2050;
      v24 = v12;
      v25 = 2048;
      v26 = v13;
      v27 = 2049;
      v28 = v14;
      v29 = 2050;
      v30 = v15;
      v16 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 2, "ClxIndoor, outdoor update converted, %{public}d, type, %{public}ld, confidence, %ld , start time, %{private}.3f, outdoor prob, %{public}.3f", v22, 48);
      sub_100512490("Generic", 1, 0, 2, "virtual void CLPipelineLocationProvider::sendOutdoorUpdate(const CLOutdoor_Type::OutdoorUpdate &)", "%s\n", v16);
      if (v16 != buf)
        free(v16);
    }
    memset(buf, 0, 24);
    wireless_diagnostics::google::protobuf::MessageLite::SerializeToString(v19, buf);
    v10 = objc_alloc((Class)CLPOutdoorEstimatorLogEntryNotification);
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_100115CE4(__p, *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)buf;
      v18 = *(_QWORD *)&buf[16];
    }
    v11 = objc_msgSend(v10, "initWithSerializedOutdoorEstimatorLogEntry:", __p);
    if (SHIBYTE(v18) < 0)
      operator delete(__p[0]);
    objc_msgSend(objc_msgSend(*(id *)(a1 + 152), "indoord"), "clpOutdoorEstimatorLogEntryNotificationAvailable:", v11);
    if ((buf[23] & 0x80000000) != 0)
      operator delete(*(void **)buf);
    sub_10008CDB0((wireless_diagnostics::google::protobuf::MessageLite *)v19);
  }
}

void sub_10008CD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  sub_10008CDB0((wireless_diagnostics::google::protobuf::MessageLite *)&a17);
  _Unwind_Resume(a1);
}

void sub_10008CDB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A84A0;
  sub_10008CE08(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
}

double sub_10008CDE0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021A84A0;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return result;
}

_QWORD *sub_10008CE08(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((_QWORD *)qword_102311CF8 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = v1[2];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = v1[3];
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = v1[4];
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = v1[5];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    v7 = v1[6];
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = v1[7];
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v9 = v1[8];
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    result = (_QWORD *)v1[9];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10008CEF0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A8590;
  sub_10008CF54(a1);
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

double sub_10008CF34(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021A8590;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  return result;
}

_QWORD *sub_10008CF54(_QWORD *result)
{
  _QWORD *v1;
  uint64_t v2;

  if ((_QWORD *)qword_102311D08 != result)
  {
    v1 = result;
    v2 = result[1];
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    result = (_QWORD *)v1[2];
    if (result)
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  }
  return result;
}

void sub_10008CFB0(wireless_diagnostics::google::protobuf::MessageLite *a1)
{
  *(_QWORD *)a1 = off_1021A8518;
  wireless_diagnostics::google::protobuf::MessageLite::~MessageLite(a1);
  operator delete();
}

BOOL sub_10008CFE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  double v11;
  const char *v13;
  int v14;
  const char *v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  int8x16_t v19;

  if (!a2)
    return 0;
  sub_10010F434((uint64_t)&v18);
  *(_DWORD *)(a2 + 52) |= 1u;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    operator new();
  *(_DWORD *)(v4 + 36) |= 1u;
  *(_DWORD *)(a2 + 52) |= 1u;
  *(_DWORD *)(v4 + 36) |= 2u;
  *(int8x16_t *)(v4 + 8) = vextq_s8(v19, v19, 8uLL);
  *(_DWORD *)(a2 + 52) |= 1u;
  v5 = v18;
  *(_DWORD *)(v4 + 36) |= 4u;
  *(_QWORD *)(v4 + 24) = v5;
  *(_DWORD *)(a2 + 52) |= 2u;
  v6 = *(_QWORD *)(a2 + 16);
  if (!v6)
    operator new();
  v7 = sub_10010EC50(v6, *(double *)a1);
  v17 = 0;
  sub_10008D3C8(*(_QWORD *)(a1 + 16), &v17);
  v8 = v17;
  if (!sub_10008D1F0(v17))
  {
    v13 = "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorType_IsValid(value)";
    v14 = 2227;
    v15 = "set_type";
    goto LABEL_13;
  }
  *(_DWORD *)(a2 + 52) |= 4u;
  *(_DWORD *)(a2 + 24) = v8;
  v16 = 0;
  sub_10008D1FC(*(_QWORD *)(a1 + 24), &v16);
  v9 = v16;
  if (!sub_10002A324(v16))
  {
    v13 = "::CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence_IsValid(value)";
    v14 = 2250;
    v15 = "set_confidence";
LABEL_13:
    __assert_rtn(v15, "CLPOutdoorEstimatorLogEntry.pb.h", v14, v13);
  }
  v10 = *(_DWORD *)(a2 + 52);
  *(_DWORD *)(a2 + 28) = v9;
  v11 = *(double *)(a1 + 32);
  *(_DWORD *)(a2 + 52) = v10 | 0x38;
  *(double *)(a2 + 32) = 1.0 - v11;
  *(double *)(a2 + 40) = v11;
  return v7;
}

void sub_10008D1A4()
{
  operator delete();
}

double sub_10008D1D4(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = off_1021A8518;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  return result;
}

BOOL sub_10008D1F0(unsigned int a1)
{
  return a1 < 3;
}

uint64_t sub_10008D1FC(unint64_t a1, _DWORD *a2)
{
  int v3;
  NSObject *v4;
  char *v6;
  _DWORD v7[4];
  uint8_t buf[4];
  int v9;

  v3 = a1;
  if (a1 >= 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213E5B0);
    v4 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "fromCMIndoorOutdoorConfidence received unhandled indoor outdoor confidence: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213E5B0);
      v7[0] = 67109120;
      v7[1] = v3;
      v6 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "fromCMIndoorOutdoorConfidence received unhandled indoor outdoor confidence: %d", v7);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCMIndoorOutdoorConfidence(const CMIndoorOutdoorConfidence, CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorConfidence &)", "%s\n", v6);
      if (v6 != (char *)buf)
        free(v6);
    }
    v3 = 0;
  }
  *a2 = v3;
  return 1;
}

void sub_10008D3BC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

uint64_t sub_10008D3C8(unint64_t a1, _DWORD *a2)
{
  int v3;
  int v4;
  NSObject *v5;
  char *v7;
  _DWORD v8[4];
  uint8_t buf[4];
  int v10;

  v3 = a1;
  if (a1 >= 4)
  {
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10213E5B0);
    v5 = qword_1022A0048;
    if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "fromCMIndoorOutdoorType received unhandled indoor outdoor type: %d", buf, 8u);
    }
    if (sub_1001BFF7C(115, 0))
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10213E5B0);
      v8[0] = 67109120;
      v8[1] = v3;
      v7 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0048, 16, "fromCMIndoorOutdoorType received unhandled indoor outdoor type: %d", v8);
      sub_100512490("Generic", 1, 0, 0, "BOOL CLOutdoorUpdateToProtobufConverter::fromCMIndoorOutdoorType(const CMIndoorOutdoorType, CLP::LogEntry::OutdoorEstimator::CMIndoorOutdoorType &)", "%s\n", v7);
      if (v7 != (char *)buf)
        free(v7);
    }
    v4 = 0;
  }
  else
  {
    v4 = dword_101BB2DD0[a1];
  }
  *a2 = v4;
  return 1;
}

void sub_10008D598(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

id sub_10008D5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 8), "pipelinedSeeded");
  if ((_DWORD)result)
    return (id)(*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 152))(*(_QWORD *)(a1 + 24), a3);
  return result;
}

id sub_10008D654(uint64_t a1, uint64_t a2, void *a3)
{
  int v3;
  id result;
  int v6;

  v3 = a2;
  result = sub_10008DB50(a3, a2);
  if (result)
  {
    v6 = v3;
    return (id)(*(uint64_t (**)(_QWORD, int *, id, _QWORD))(a1 + 24))(0, &v6, result, *(_QWORD *)(a1 + 32));
  }
  return result;
}

void sub_10008D6A0(_QWORD *a1, int *a2, void *a3)
{
  uint64_t v4;
  _QWORD *v5;
  int v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  uint64_t *v12;
  id v13;
  _QWORD *v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  int v23;
  NSObject *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  int v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  uint64_t *v39;
  int v40;
  BOOL v41;
  uint64_t *v42;
  _QWORD *v43;
  BOOL v44;
  _QWORD *v45;
  int v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  _QWORD *v50;
  int v51;
  _QWORD *v52;
  __int16 v53;
  int v54;
  uint8_t buf[4];
  _QWORD *v56;
  __int16 v57;
  int v58;

  if (!*((_BYTE *)a1 + 108))
  {
    v5 = a1 + 8;
    v4 = a1[8];
    if (v4)
    {
      v8 = *a2;
      v9 = a1 + 8;
      do
      {
        v10 = *(_DWORD *)(v4 + 32);
        v11 = v10 < v8;
        if (v10 >= v8)
          v12 = (uint64_t *)v4;
        else
          v12 = (uint64_t *)(v4 + 8);
        if (!v11)
          v9 = (_QWORD *)v4;
        v4 = *v12;
      }
      while (*v12);
      if (v9 != v5 && v8 >= *((_DWORD *)v9 + 8))
      {
        v50 = v9;
        v13 = sub_10008DB50(a3, (uint64_t)a2);
        (*(void (**)(_QWORD *, int *, id, _QWORD *))(*a1 + 184))(a1, a2, v13, v9 + 10);
        v14 = (_QWORD *)v9[5];
        if (v14 != v9 + 6)
        {
          v15 = a1 + 11;
          v16 = a1 + 1;
          do
          {
            v17 = *v15;
            if (!*v15)
              goto LABEL_25;
            v18 = *((_DWORD *)v14 + 8);
            v19 = a1 + 11;
            do
            {
              v20 = *(_DWORD *)(v17 + 32);
              v21 = v20 < v18;
              if (v20 >= v18)
                v22 = (uint64_t *)v17;
              else
                v22 = (uint64_t *)(v17 + 8);
              if (!v21)
                v19 = (uint64_t *)v17;
              v17 = *v22;
            }
            while (*v22);
            if (v19 != v15 && (v23 = *((_DWORD *)v19 + 8), v18 >= v23))
            {
              v49 = v19;
              sub_10008DA74(a1, (uint64_t)&v49, (uint64_t)&v50, a3);
              v27 = a1[8];
              if (!v27)
                return;
              v28 = *a2;
              v29 = v5;
              do
              {
                v30 = *(_DWORD *)(v27 + 32);
                v31 = v30 < v28;
                if (v30 >= v28)
                  v32 = (uint64_t *)v27;
                else
                  v32 = (uint64_t *)(v27 + 8);
                if (!v31)
                  v29 = (_QWORD *)v27;
                v27 = *v32;
              }
              while (*v32);
              if (v29 == v5 || v28 < *((_DWORD *)v29 + 8))
                return;
              v50 = v29;
              v34 = v29[6];
              v14 = v29 + 6;
              v33 = v34;
              if (v34)
              {
                v35 = v14;
                v36 = v33;
                do
                {
                  v37 = *(_DWORD *)(v36 + 32);
                  v38 = v37 < v23;
                  if (v37 >= v23)
                    v39 = (uint64_t *)v36;
                  else
                    v39 = (uint64_t *)(v36 + 8);
                  if (!v38)
                    v35 = (_QWORD *)v36;
                  v36 = *v39;
                }
                while (*v39);
                if (v35 == v14 || v23 < *((_DWORD *)v35 + 8))
                {
                  do
                  {
                    v40 = *(_DWORD *)(v33 + 32);
                    v41 = v23 < v40;
                    if (v23 >= v40)
                      v42 = (uint64_t *)(v33 + 8);
                    else
                      v42 = (uint64_t *)v33;
                    if (v41)
                      v14 = (_QWORD *)v33;
                    v33 = *v42;
                  }
                  while (*v42);
                }
                else
                {
                  v43 = (_QWORD *)v35[1];
                  if (v43)
                  {
                    do
                    {
                      v14 = v43;
                      v43 = (_QWORD *)*v43;
                    }
                    while (v43);
                  }
                  else
                  {
                    do
                    {
                      v14 = (_QWORD *)v35[2];
                      v44 = *v14 == (_QWORD)v35;
                      v35 = v14;
                    }
                    while (!v44);
                  }
                }
              }
            }
            else
            {
LABEL_25:
              v49 = a1 + 11;
              if (qword_1022A0220 != -1)
                dispatch_once(&qword_1022A0220, &stru_10219F928);
              v24 = qword_1022A0228;
              if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_FAULT))
              {
                v25 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v25 = (_QWORD *)*v16;
                v26 = *((_DWORD *)v14 + 8);
                *(_DWORD *)buf = 136446466;
                v56 = v25;
                v57 = 1026;
                v58 = v26;
                _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "%{public}s; unknown client %{public}d",
                  buf,
                  0x12u);
              }
              if (sub_1001BFF7C(115, 0))
              {
                bzero(buf, 0x65CuLL);
                if (qword_1022A0220 != -1)
                  dispatch_once(&qword_1022A0220, &stru_10219F928);
                v45 = a1 + 1;
                if (*((char *)a1 + 31) < 0)
                  v45 = (_QWORD *)*v16;
                v46 = *((_DWORD *)v14 + 8);
                v51 = 136446466;
                v52 = v45;
                v53 = 1026;
                v54 = v46;
                LODWORD(v48) = 18;
                v47 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A0228, 17, "%{public}s; unknown client %{public}d",
                                &v51,
                                v48);
                sub_100512490("Generic", 1, 0, 0, "void CLNotifier<CLLocationAwarenessProvider_Type::Notification, CLLocationAwarenessProvider_Type::NotificationData, char, CLLocationAwarenessProvider_Type::RegInfo>::invokeClientsWithData(const Notification_T &, CLCppContainer *) [Notification_T = CLLocationAwarenessProvider_Type::Notification, NotificationData_T = CLLocationAwarenessProvider_Type::NotificationData, NotificationInfo_T = char, RegistrationInfo_T = CLLocationAwarenessProvider_Type::RegInfo]", "%s\n", v47);
                if (v47 != (char *)buf)
                  free(v47);
              }
            }
          }
          while (v14 != v50 + 6);
        }
      }
    }
  }
}

_BYTE *sub_10008DA74(_BYTE *result, uint64_t a2, uint64_t a3, void *a4)
{
  _BYTE *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t v13;
  int *v14;

  if (!result[108])
  {
    v7 = result;
    v8 = *(unsigned int *)(*(_QWORD *)a2 + 32);
    LODWORD(v13) = *(_DWORD *)(*(_QWORD *)a3 + 32);
    v9 = sub_10008DB50(a4, a2);
    v10 = *(_QWORD *)a3 + 80;
    v11 = (uint64_t **)(*(_QWORD *)a3 + 40);
    v14 = (int *)(*(_QWORD *)a2 + 32);
    v12 = sub_10008DF48(v11, v14, (uint64_t)&unk_101B9EB60, &v14);
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t *, id, uint64_t, uint64_t **))(*(_QWORD *)v7 + 192))(v7, v8, &v13, v9, v10, v12 + 5);
    if ((_DWORD)result)
      return objc_msgSend(*(id *)(*(_QWORD *)a2 + 64), "onNotification:withData:", *(unsigned int *)(*(_QWORD *)a3 + 32), a4, v13);
  }
  return result;
}

id sub_10008DB50(void *a1, uint64_t a2)
{
  uint64_t v3;

  v3 = objc_opt_class(CLCppContainer, a2);
  if ((objc_opt_isKindOfClass(a1, v3) & 1) != 0)
    return sub_10008DB9C(a1);
  else
    return 0;
}

id sub_10008DB9C(void *a1)
{
  id v2;
  NSObject *v3;
  const char *v4;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint8_t buf[4];
  id v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  unint64_t v14;

  v2 = objc_msgSend(a1, "binaryVersion");
  objc_msgSend(a1, "sizeOfType");
  if (!v2)
    return objc_msgSend(a1, "cppObjectPtr");
  if (getenv("_INTERSILO_UNIT_TEST"))
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    v3 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F79CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 16, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  else
  {
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    v6 = qword_10229FC38;
    if (os_log_type_enabled((os_log_t)qword_10229FC38, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)buf = 134218498;
      v10 = v2;
      v11 = 2048;
      v12 = 0;
      v13 = 2080;
      v14 = 0x8000000101C3F79CLL & 0x7FFFFFFFFFFFFFFFLL;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", buf, 0x20u);
    }
    if (!sub_1001BFF7C(115, 0))
      return 0;
    bzero(buf, 0x65CuLL);
    if (qword_10229FC30 != -1)
      dispatch_once(&qword_10229FC30, &stru_10219FA70);
    LODWORD(v8) = 134218498;
    HIDWORD(v8) = (_DWORD)v2;
    v4 = (const char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_10229FC38, 17, "Mismatch of versions between encoded (%llu) and decoded (%llu) objects! This is possibly because the version has changed on one side and possibly broken ABI compatibility. Please update your type for %s accordingly", &v8, 32, v8);
  }
  v7 = (uint8_t *)v4;
  sub_100512490("Generic", 1, 0, 0, "const Object_T *safeDecoder(CLCppContainer *, Callback) [Object_T = CLLocationAwarenessProvider_Type::NotificationData, Callback = (lambda at /Library/Caches/com.apple.xbs/Sources/CoreLocation/Shared/Intersilo/CLCppContainer.h:228:46)]", "%s\n", v4);
  if (v7 != buf)
    free(v7);
  return 0;
}

uint64_t **sub_10008DF48(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  uint64_t **v9;
  int v10;
  char *v11;
  int64x2_t v12;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *a2;
    while (1)
    {
      while (1)
      {
        v9 = (uint64_t **)v6;
        v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10)
          break;
        v6 = *v9;
        v7 = v9;
        if (!*v9)
          goto LABEL_10;
      }
      if (v10 >= v8)
        break;
      v6 = v9[1];
      if (!v6)
      {
        v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v9 = a1 + 1;
LABEL_10:
    v11 = (char *)operator new(0x58uLL);
    *((_DWORD *)v11 + 8) = **a4;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    v12 = vdupq_n_s64(0x7FF0000000000000uLL);
    *(int64x2_t *)(v11 + 40) = v12;
    *((int64x2_t *)v11 + 4) = v12;
    sub_1000145B0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_10008E020(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_activity_scope_state_s state;
  char v11;
  uint8_t buf[4];
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;

  CLProfilingIdentify("CLSignificantChangeManager::onAwarenessNotification");
  objc_msgSend(objc_msgSend(*(id *)(a4 + 32), "silo"), "assertInside");
  if (qword_1022A0220 != -1)
    dispatch_once(&qword_1022A0220, &stru_10217CB70);
  if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
  {
    v11 = 1;
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: CLSignificantChangeManager::onAwarenessNotification", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_DEFAULT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_10217CB70);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 68289538;
      v13 = 0;
      v14 = 2082;
      v15 = "";
      v16 = 2082;
      v17 = "activity";
      v18 = 2050;
      v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"CLSignificantChangeManager::onAwarenessNotification\", \"event\":%{public, location:escape_only}s, \"this\":\"%{public}p\"}", buf, 0x26u);
    }
  }
  else
  {
    v11 = 0;
  }
  sub_10008E1F0(a4, v6, v7, a3);
  if (v11)
    os_activity_scope_leave(&state);
}

void sub_10008E1D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, os_activity_scope_state_s state, char a11)
{
  if (a11)
    os_activity_scope_leave(&state);
  _Unwind_Resume(exception_object);
}

void sub_10008E1F0(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  NSObject *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[8];
  _OWORD v12[2];
  uint64_t buf;
  __int16 v14;
  const char *v15;
  __int16 v16;
  int v17;
  __int16 v18;
  _OWORD *v19;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10217CB90);
  v6 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    buf = 68289539;
    v14 = 2082;
    v15 = "";
    v16 = 1040;
    v17 = 156;
    v18 = 2097;
    v19 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#SLC Got location\", \"location\":%{private, location:CLClientLocation}.*P}", (uint8_t *)&buf, 0x22u);
  }
  v7 = a4[7];
  v11[6] = a4[6];
  v11[7] = v7;
  v12[0] = a4[8];
  *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)((char *)a4 + 140);
  v8 = a4[3];
  v11[2] = a4[2];
  v11[3] = v8;
  v9 = a4[5];
  v11[4] = a4[4];
  v11[5] = v9;
  v10 = a4[1];
  v11[0] = *a4;
  v11[1] = v10;
  sub_100188608(a1, (uint64_t)v11);
}

void sub_10008E33C(uint64_t a1, signed __int32 *a2, const void *a3, int a4)
{
  NSObject *v8;
  NSObject *v9;
  _QWORD *v10;
  std::__shared_weak_count *v11;
  __n128 *v12;
  signed __int32 v13;
  __n128 *v14;
  signed __int32 v15;
  BOOL v16;
  __n128 **v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  os_activity_scope_state_s state;
  uint8_t buf[8];
  _BYTE v30[20];
  __int16 v31;
  _QWORD *v32;
  __int16 v33;
  std::__shared_weak_count *v34;
  _QWORD **v35;
  _QWORD *v36[3];
  std::__shared_weak_count *v37;

  if (!*(_BYTE *)(a1 + 108))
  {
    v8 = _os_activity_create((void *)&_mh_execute_header, "CL: notifyClientsWithData (Fallback)", (os_activity_t)&_os_activity_current, OS_ACTIVITY_FLAG_IF_NONE_PRESENT);
    os_activity_scope_enter(v8, &state);

    if (qword_1022A0220 != -1)
      dispatch_once(&qword_1022A0220, &stru_1021A5F48);
    v9 = qword_1022A0228;
    if (os_log_type_enabled((os_log_t)qword_1022A0228, OS_LOG_TYPE_DEBUG))
    {
      v10 = (_QWORD *)(a1 + 8);
      if (*(char *)(a1 + 31) < 0)
        v10 = (_QWORD *)*v10;
      v11 = (std::__shared_weak_count *)*a2;
      *(_DWORD *)buf = 68289794;
      *(_DWORD *)&buf[4] = 0;
      *(_WORD *)v30 = 2082;
      *(_QWORD *)&v30[2] = "";
      *(_WORD *)&v30[10] = 2082;
      *(_QWORD *)&v30[12] = "activity";
      v31 = 2082;
      v32 = v10;
      v33 = 2050;
      v34 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"notifyClientsWithData\", \"event\":%{public, location:escape_only}s, \"name\":%{public, location:escape_only}s, \"notification\":%{public}lld}", buf, 0x30u);
    }
    v12 = *(__n128 **)(a1 + 64);
    if (!v12)
      goto LABEL_18;
    v13 = *a2;
    v14 = (__n128 *)(a1 + 64);
    do
    {
      v15 = v12[2].n128_i32[0];
      v16 = v15 < v13;
      if (v15 >= v13)
        v17 = (__n128 **)v12;
      else
        v17 = (__n128 **)&v12->n128_u64[1];
      if (!v16)
        v14 = v12;
      v12 = *v17;
    }
    while (*v17);
    if (v14 == (__n128 *)(a1 + 64) || v13 < (signed __int32)v14[2].n128_u32[0])
    {
LABEL_18:
      v35 = v36;
      memset(v36, 0, sizeof(v36));
      v37 = 0;
      sub_1004A6D60((uint64_t)buf, a2, (uint64_t)&v35);
      v14 = sub_1004A6C20((uint64_t **)(a1 + 56), (__n128 *)buf);
      v18 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      sub_100008848((uint64_t)v30, *(_QWORD **)&v30[8]);
      v21 = v37;
      if (v37)
      {
        v22 = (unint64_t *)&v37->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
          std::__shared_weak_count::__release_weak(v21);
        }
      }
      sub_100008848((uint64_t)&v35, v36[0]);
    }
    if (a4)
    {
      v24 = operator new(0x5A8uLL);
      v24[2] = 0;
      *v24 = off_1021A74F0;
      v24[1] = 0;
      memcpy(v24 + 3, a3, 0x590uLL);
      *(_QWORD *)buf = v24 + 3;
      *(_QWORD *)v30 = v24;
      sub_1002B7674((uint64_t)&v14[4], (__int128 *)buf);
      v25 = *(std::__shared_weak_count **)v30;
      if (*(_QWORD *)v30)
      {
        v26 = (unint64_t *)(*(_QWORD *)v30 + 8);
        do
          v27 = __ldaxr(v26);
        while (__stlxr(v27 - 1, v26));
        if (!v27)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
    }
    else
    {
      sub_100346F9C((__n128 *)v14[4].n128_u64);
    }
    if (v14[3].n128_u64[1])
      sub_1011DCAB0();
    os_activity_scope_leave(&state);
  }
}

void sub_10008E980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, os_activity_scope_state_s state, char a18)
{
  os_activity_scope_leave(&state);
  _Unwind_Resume(a1);
}

id sub_10008E9D0(const void *a1, int a2, void *a3, uint64_t a4)
{
  _QWORD v9[7];
  int v10;

  CFRetain(a1);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10009F81C;
  v9[3] = &unk_1021785E0;
  v9[5] = a4;
  v9[6] = a1;
  v10 = a2;
  v9[4] = a3;
  return objc_msgSend(objc_msgSend(a3, "silo"), "async:", v9);
}

void sub_10008EA5C(uint64_t a1, uint64_t *a2)
{
  const std::string::value_type *v4;
  const std::string::value_type *v5;
  unsigned int v6;
  std::string *v7;
  __int128 v8;
  void **v9;
  std::string::size_type v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  std::string *v15;
  __int128 v16;
  void **v17;
  std::string::size_type v18;
  NSObject *v20;
  std::string *v21;
  std::string *v22;
  char *v23;
  NSObject *v24;
  char *v25;
  NSObject *v26;
  std::string *v27;
  std::string *v28;
  char *v29;
  NSObject *v30;
  std::string *v31;
  std::string *v32;
  uint64_t v33;
  std::string v34;
  std::string v35;
  _OWORD v36[2];
  void *__p[2];
  int64_t v38;

  if (*a2)
  {
    sub_1015A2E04(&v34, "MovingApDetector");
    std::string::append(&v34, ", gps: ");
    if (sub_10018D33C(*(_QWORD *)(a1 + 24)))
      v4 = "y";
    else
      v4 = "n";
    std::string::append(&v34, v4);
    std::string::append(&v34, ", cell: ");
    if (sub_10018D26C(*(_QWORD *)(a1 + 24)))
      v5 = "y";
    else
      v5 = "n";
    std::string::append(&v34, v5);
    if (!sub_1000CC504(*a2))
    {
      std::string::append(&v34, ", database invalid");
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v26 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v27 = &v34;
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v27 = (std::string *)v34.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_10215F1D0);
        v28 = &v34;
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v28 = (std::string *)v34.__r_.__value_.__r.__words[0];
        LODWORD(v36[0]) = 136315138;
        *(_QWORD *)((char *)v36 + 4) = v28;
        v29 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s", (const char *)v36);
        sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v29);
        if (v29 != (char *)__p)
          free(v29);
      }
      goto LABEL_79;
    }
    sub_10008F320(*a2, v36);
    if (*(_QWORD *)&v36[0] == *((_QWORD *)&v36[0] + 1))
    {
      std::string::append(&v34, ", database empty");
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v30 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v31 = &v34;
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v31 = (std::string *)v34.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_77;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v32 = &v34;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v32 = (std::string *)v34.__r_.__value_.__r.__words[0];
      LODWORD(v35.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v32;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s", (const char *)&v35);
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v23);
    }
    else
    {
      v6 = sub_10005995C(*a2);
      std::to_string(&v35, v6);
      v7 = std::string::insert(&v35, 0, ", database count: ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v38 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (v38 >= 0)
        v9 = __p;
      else
        v9 = (void **)__p[0];
      if (v38 >= 0)
        v10 = HIBYTE(v38);
      else
        v10 = (std::string::size_type)__p[1];
      std::string::append(&v34, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v38) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v35.__r_.__value_.__l.__data_);
      std::string::append(&v34, ", samples");
      v11 = rand();
      v12 = 0;
      v13 = *(_QWORD *)&v36[0];
      v14 = v11 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v36[0] + 1) - *(_QWORD *)&v36[0]) >> 6));
      do
      {
        v33 = *(_QWORD *)(v13 + 192 * v14);
        sub_1000C2254(&v33, &v35);
        v15 = std::string::insert(&v35, 0, ", ");
        v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v38 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        if (v38 >= 0)
          v17 = __p;
        else
          v17 = (void **)__p[0];
        if (v38 >= 0)
          v18 = HIBYTE(v38);
        else
          v18 = (std::string::size_type)__p[1];
        std::string::append(&v34, (const std::string::value_type *)v17, v18);
        if (SHIBYTE(v38) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v35.__r_.__value_.__l.__data_);
        ++v14;
        v13 = *(_QWORD *)&v36[0];
      }
      while (v14 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v36[0] + 1) - *(_QWORD *)&v36[0]) >> 6) && v12++ < 4);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v20 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
      {
        v21 = &v34;
        if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v21 = (std::string *)v34.__r_.__value_.__r.__words[0];
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)__p, 0xCu);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_77;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_10215F1D0);
      v22 = &v34;
      if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v22 = (std::string *)v34.__r_.__value_.__r.__words[0];
      LODWORD(v35.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
      v23 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "%s", (const char *)&v35);
      sub_100512490("Generic", 1, 0, 2, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v23);
    }
    if (v23 != (char *)__p)
      free(v23);
LABEL_77:
    if (*(_QWORD *)&v36[0])
    {
      *((_QWORD *)&v36[0] + 1) = *(_QWORD *)&v36[0];
      operator delete(*(void **)&v36[0]);
    }
LABEL_79:
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_10215F1D0);
  v24 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "MovingApDetector, centroid database is null!", (uint8_t *)__p, 2u);
  }
  if (sub_1001BFF7C(115, 0))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_10215F1D0);
    LOWORD(v34.__r_.__value_.__l.__data_) = 0;
    v25 = (char *)_os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 17, "MovingApDetector, centroid database is null!", &v34, 2);
    sub_100512490("Generic", 1, 0, 0, "void CLMovingApDetector::logGpsCellAndBadWifiCentroidDatabaseInfo(const std::unique_ptr<CLWifiLocationDatabase> &)", "%s\n", v25);
    if (v25 != (char *)__p)
      free(v25);
  }
}

void sub_10008F288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *__p,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_10008F320(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  size_t v6;
  _QWORD *v7;
  _QWORD *v8;
  size_t v9;
  _QWORD *v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  size_t v15;
  _QWORD *v16;
  _QWORD *v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  size_t v21;
  _QWORD *v22;
  _QWORD *v23;
  size_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  size_t v31;
  _QWORD *v32;
  size_t v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  NSObject *v39;
  char *v40;
  void *__p[2];
  char v43;
  uint8_t buf[16];
  uint64_t v45;
  _QWORD v46[8];

  if (sub_1000CC504(a1))
  {
    sub_100263E50((uint64_t)buf);
    v3 = sub_100263F7C(&v45, (uint64_t)"SELECT ", 7);
    v4 = sub_100263F7C(v3, (uint64_t)"MAC", 3);
    v5 = sub_100263F7C(v4, (uint64_t)" , ", 3);
    v6 = strlen("Latitude");
    v7 = sub_100263F7C(v5, (uint64_t)"Latitude", v6);
    v8 = sub_100263F7C(v7, (uint64_t)" , ", 3);
    v9 = strlen("Longitude");
    v10 = sub_100263F7C(v8, (uint64_t)"Longitude", v9);
    v11 = sub_100263F7C(v10, (uint64_t)" , ", 3);
    v12 = strlen("Altitude");
    v13 = sub_100263F7C(v11, (uint64_t)"Altitude", v12);
    v14 = sub_100263F7C(v13, (uint64_t)" , ", 3);
    v15 = strlen("HorizontalAccuracy");
    v16 = sub_100263F7C(v14, (uint64_t)"HorizontalAccuracy", v15);
    v17 = sub_100263F7C(v16, (uint64_t)" , ", 3);
    v18 = strlen("VerticalAccuracy");
    v19 = sub_100263F7C(v17, (uint64_t)"VerticalAccuracy", v18);
    v20 = sub_100263F7C(v19, (uint64_t)" , ", 3);
    v21 = strlen("Score");
    v22 = sub_100263F7C(v20, (uint64_t)"Score", v21);
    v23 = sub_100263F7C(v22, (uint64_t)" , ", 3);
    v24 = strlen("Reach");
    v25 = sub_100263F7C(v23, (uint64_t)"Reach", v24);
    v26 = sub_100263F7C(v25, (uint64_t)" , ", 3);
    v27 = sub_100263F7C(v26, (uint64_t)"Channel", 7);
    v28 = sub_100263F7C(v27, (uint64_t)" , ", 3);
    v29 = sub_100263F7C(v28, (uint64_t)"InfoMask", 8);
    v30 = sub_100263F7C(v29, (uint64_t)" , ", 3);
    v31 = strlen("Timestamp");
    sub_100263F7C(v30, (uint64_t)"Timestamp", v31);
    if (!*(_BYTE *)(a1 + 16))
    {
      v32 = sub_100263F7C(&v45, (uint64_t)" , ", 3);
      v33 = strlen("ZaxisHarvestTraces");
      sub_100263F7C(v32, (uint64_t)"ZaxisHarvestTraces", v33);
    }
    v34 = sub_100263F7C(&v45, (uint64_t)" FROM ", 6);
    v35 = *(char *)(a1 + 295);
    if (v35 >= 0)
      v36 = a1 + 272;
    else
      v36 = *(_QWORD *)(a1 + 272);
    if (v35 >= 0)
      v37 = *(unsigned __int8 *)(a1 + 295);
    else
      v37 = *(_QWORD *)(a1 + 280);
    sub_100263F7C(v34, v36, v37);
    std::stringbuf::str(__p, v46);
    if (v43 >= 0)
      v38 = (char *)__p;
    else
      v38 = (char *)__p[0];
    sub_1000CDA68(a1 + 64, v38);
  }
  if (qword_1022A0280 != -1)
    dispatch_once(&qword_1022A0280, &stru_10214FCF8);
  v39 = off_1022A0288;
  if (os_log_type_enabled((os_log_t)off_1022A0288, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEBUG, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiLocationDatabase!", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A0280 != -1)
      dispatch_once(&qword_1022A0280, &stru_10214FCF8);
    LOWORD(__p[0]) = 0;
    v40 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, off_1022A0288, 2, "#Warning Attempt to call getAllEntries() without a backing database in CLWifiLocationDatabase!", __p, 2);
    sub_100512490("Generic", 1, 0, 2, "std::vector<CLWifiLocationDatabaseEntry> CLWifiLocationDatabase::getAllEntries()", "%s\n", v40);
    if (v40 != (char *)buf)
      free(v40);
  }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
}

void sub_10008FB7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24)
{
  if (a22 < 0)
    operator delete(__p);
  sub_1018B38B4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_10008FC44(uint64_t a1)
{
  unsigned int v1;
  NSObject *v2;
  char *v4;
  _DWORD v5[4];
  uint8_t buf[4];
  unsigned int v7;

  v1 = sub_10008FDF8(a1);
  if (qword_1022A02D0 != -1)
    dispatch_once(&qword_1022A02D0, &stru_102146180);
  v2 = qword_1022A02D8;
  if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 67109120;
    v7 = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "Registration status: %d", buf, 8u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v5[0] = 67109120;
    v5[1] = v1;
    v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "Registration status: %d", v5);
    sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getIsRegisteredOnCell()", "%s\n", v4);
    if (v4 != (char *)buf)
      free(v4);
  }
  return v1 > 3;
}

uint64_t sub_10008FDF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v6;

  v6 = 0;
  if (!(*(unsigned int (**)(uint64_t, const void **))(*(_QWORD *)a1 + 208))(a1, &v6))
  {
    LODWORD(v3) = 0;
LABEL_9:
    if (sub_100596068(a1))
      return 7;
    else
      return v3;
  }
  v2 = sub_1000901D8(v6);
  v3 = v2;
  if (v2 <= 3 && (_DWORD)v2 != 2)
    goto LABEL_9;
  return v3;
}

BOOL sub_10008FE6C(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  int v5;
  uint64_t v6;
  NSObject *v7;
  _BOOL4 v8;
  _BOOL8 result;
  uint8_t *v10;
  NSObject *v11;
  _WORD v12[8];
  uint8_t buf[4];
  int v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  int v18;

  if (!*(_BYTE *)(a1 + 160))
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v4 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      v5 = *(unsigned __int8 *)(a1 + 160);
      *(_DWORD *)buf = 68289282;
      v14 = 0;
      v15 = 2082;
      v16 = "";
      v17 = 1026;
      v18 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"DaemonNotReady for CT SPI\", \"fDaemonReady\":%{public}hhd}", buf, 0x18u);
    }
  }
  v6 = *(_QWORD *)(a1 + 144);
  if (v6)
  {
    if (!_CTServerConnectionGetRegistrationStatus(v6, a2))
      return 1;
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v7 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "_CTServerConnectionGetRegistrationStatus failed", buf, 2u);
    }
    v8 = sub_1001BFF7C(115, 0);
    result = 0;
    if (v8)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v12[0] = 0;
      v10 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 16, "_CTServerConnectionGetRegistrationStatus failed", v12, 2);
      sub_100512490("Generic", 1, 0, 0, "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)", "%s\n");
LABEL_24:
      if (v10 != buf)
        free(v10);
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v11 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "currently not connected to telephony service", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if (result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v12[0] = 0;
      v10 = (uint8_t *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 2, "currently not connected to telephony service", v12, 2);
      sub_100512490("Generic", 1, 0, 2, "virtual BOOL CLTelephonyService::getRegistrationStatus(CFStringRef &)", "%s\n");
      goto LABEL_24;
    }
  }
  return result;
}

uint64_t sub_1000901D8(const void *a1)
{
  uint64_t result;
  NSObject *v3;
  char *v4;
  _WORD v5[8];
  uint8_t buf[1640];

  if (a1)
  {
    if (CFEqual(a1, kCTRegistrationStatusNotRegistered))
    {
      return 1;
    }
    else if (CFEqual(a1, kCTRegistrationStatusSearching))
    {
      return 2;
    }
    else if (CFEqual(a1, kCTRegistrationStatusDenied))
    {
      return 3;
    }
    else if (CFEqual(a1, kCTRegistrationStatusRegisteredHome))
    {
      return 4;
    }
    else if (CFEqual(a1, kCTRegistrationStatusRegisteredRoaming))
    {
      return 5;
    }
    else if (CFEqual(a1, kCTRegistrationStatusEmergencyOnly))
    {
      return 6;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    if (qword_1022A02D0 != -1)
      dispatch_once(&qword_1022A02D0, &stru_102146180);
    v3 = qword_1022A02D8;
    if (os_log_type_enabled((os_log_t)qword_1022A02D8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#Warning CELL_LOC: fromRegistrationStatus(statusStr): statusStr == NULL", buf, 2u);
    }
    result = sub_1001BFF7C(115, 2);
    if ((_DWORD)result)
    {
      bzero(buf, 0x65CuLL);
      if (qword_1022A02D0 != -1)
        dispatch_once(&qword_1022A02D0, &stru_102146180);
      v5[0] = 0;
      v4 = (char *)_os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A02D8, 0, "#Warning CELL_LOC: fromRegistrationStatus(statusStr): statusStr == NULL", v5, 2);
      sub_100512490("Generic", 1, 0, 2, "CLTelephonyService_Type::RegistrationStatus fromRegistrationStatus(CFStringRef)", "%s\n", v4);
      if (v4 != (char *)buf)
        free(v4);
      return 0;
    }
  }
  return result;
}

void sub_100090424(uint64_t a1, CLConnection *a2)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t *v4;
  CLConnection *v5;
  _QWORD *v6;
  unint64_t v7;
  BOOL v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  id v12;
  uint64_t UniqueRemotePid;
  id v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint8_t *v19;
  int v20;
  id v21;
  uint8_t buf[4];
  _BYTE v23[14];
  __int16 v24;
  uint64_t v25;

  v6 = *(_QWORD **)(a1 + 824);
  if (!v6)
    goto LABEL_12;
  v5 = a2;
  v2 = a1;
  v3 = (uint64_t **)(a1 + 816);
  v4 = (uint64_t *)(a1 + 824);
  do
  {
    v7 = v6[4];
    v8 = v7 >= (unint64_t)a2;
    if (v7 >= (unint64_t)a2)
      v9 = v6;
    else
      v9 = v6 + 1;
    if (v8)
      v4 = v6;
    v6 = (_QWORD *)*v9;
  }
  while (*v9);
  if (v4 == (uint64_t *)(a1 + 824) || v4[4] > (unint64_t)a2)
  {
LABEL_12:
    sub_10190899C();
    __break(1u);
  }
  v10 = v4[5];
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v11 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138543362;
    *(_QWORD *)v23 = sub_1001948D4(v10, 0);
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Client %{public}@ disconnected", buf, 0xCu);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_102154528);
    v17 = qword_1022A01D8;
    v20 = 138543362;
    v21 = sub_1001948D4(v10, 0);
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, v17, 0, "Client %{public}@ disconnected", &v20, 12);
    v19 = (uint8_t *)v18;
    sub_100512490("Generic", 1, 0, 2, "void CLClientManager::handleDaemonClientDisconnection(CLConnection *)", "%s\n", v18);
    if (v19 != buf)
      free(v19);
  }
  if (sub_1000B9570(v10))
  {
    v12 = sub_1001948D4(v10, 0);
    UniqueRemotePid = CLConnection::getUniqueRemotePid(v5);
    sub_1001A508C(v2, (uint64_t)v12, UniqueRemotePid, 0);
  }
  if (sub_1000B9570(v10))
  {
    v14 = sub_1001948D4(v10, 0);
    if ((objc_msgSend(v14, "isValidCKP") & 1) == 0)
    {
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_102154528);
      v15 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 68289282;
        *(_DWORD *)v23 = 0;
        *(_WORD *)&v23[4] = 2082;
        *(_QWORD *)&v23[6] = "";
        v24 = 2050;
        v25 = v10;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"#Warning Disconnecting client has successful registration, but no valid CKP\", \"CLDC\":\"%{public}p\"}", buf, 0x1Cu);
      }
    }
    sub_1001A6AC4(v2, (uint64_t)v14, v10);
    sub_1001A6B50(v2, v10, 0);
  }
  v16 = v4[5];
  sub_10008A9F0(v3, v4);
  operator delete(v4);
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  if (!*(_QWORD *)(v2 + 832))
    objc_msgSend(*(id *)(*(_QWORD *)(v2 + 160) + 16), "unregister:forNotification:", *(_QWORD *)(*(_QWORD *)(v2 + 160) + 8), 18);
}

void sub_10009079C(uint64_t a1)
{
  sub_1000907C0(a1);
  operator delete();
}

uint64_t sub_1000907C0(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD v9[2];
  __int16 v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;

  *(_QWORD *)a1 = off_102174980;
  *(_QWORD *)(a1 + 8) = &off_102174A58;
  if (*(_BYTE *)(a1 + 72) && *(_BYTE *)(a1 + 91))
    sub_1007D6064(*(_QWORD *)(a1 + 16), *(void **)(a1 + 48), 0, 0, 1, 0, 0);

  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 376) = 0;
  *(_QWORD *)(a1 + 384) = 0;

  *(_QWORD *)(a1 + 392) = 0;
  sub_100090C74(a1);
  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102174F78);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 68290562;
    v9[1] = 0;
    v10 = 2082;
    v11 = "";
    v12 = 2082;
    v13 = "state_transition";
    v14 = 2082;
    v15 = "DaemonClient";
    v16 = 2050;
    v18 = 2082;
    v17 = a1;
    v19 = "lifecycle";
    v20 = 2050;
    v21 = a1;
    v22 = 2050;
    v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "{\"msg%{public}.0s\":\"state transition\", \"event\":%{public, location:escape_only}s, \"state\":%{public, location:escape_only}s, \"id\":\"%{public}p\", \"property\":%{public, location:escape_only}s, \"old\":\"%{public}p\", \"new\":\"%{public}p\"}", (uint8_t *)v9, 0x4Eu);
  }
  sub_100090A0C((_QWORD *)(a1 + 400));
  sub_100090BB8(a1 + 328);
  sub_100090B34(a1 + 288);
  v3 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  sub_100090AE4(a1 + 168, *(char **)(a1 + 176));
  sub_1001A5CBC((uint64_t *)(a1 + 128));
  return a1;
}

void sub_100090A00(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_10024F88C(a1);
}

_QWORD *sub_100090A0C(_QWORD *a1)
{
  *a1 = off_102141E98;
  sub_100090A50((uint64_t)a1);
  sub_100261F44((uint64_t)(a1 + 1));
  return a1;
}

void sub_100090A50(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = operator new(0x20uLL);
  v2[2] = 0;
  *v2 = off_102141ED0;
  v2[1] = 0;
  *((_QWORD *)&v6 + 1) = v2;
  *((_DWORD *)v2 + 6) = 31337;
  *(_QWORD *)&v6 = v2 + 3;
  sub_1002B7674(a1 + 8, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_100090AE4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_100090AE4(a1, *(_QWORD *)a2);
    sub_100090AE4(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100090B34(uint64_t a1)
{
  void *v2;

  sub_100090B6C(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100090B6C(int a1, _QWORD *__p)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  if (__p)
  {
    v2 = __p;
    do
    {
      v3 = (_QWORD *)*v2;
      v4 = v2[3];
      v2[3] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

uint64_t sub_100090BB8(uint64_t a1)
{
  void *v2;

  sub_100025624(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void sub_100090BF0(uint64_t a1)
{
  sub_100090C14(a1);
  operator delete();
}

uint64_t sub_100090C14(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_102148FB8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_100090C74(uint64_t a1)
{
  uint64_t **i;
  CLConnection *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if ((*(_QWORD *)(a1 + 64) & 0x14) != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);

  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  objc_msgSend(*(id *)(a1 + 40), "setValid:", 0);

  *(_QWORD *)(a1 + 40) = 0;
  for (i = *(uint64_t ***)(a1 + 344); i; i = (uint64_t **)*i)
    (*(void (**)(uint64_t *, uint64_t))(*i[3] + 24))(i[3], a1 + 8);
  sub_1000255D0(a1 + 328);
  sub_1001A5CBC((uint64_t *)(a1 + 128));
  v3 = *(CLConnection **)(a1 + 264);
  if (v3)
  {
    CLConnection::deferredDelete(v3);
    *(_QWORD *)(a1 + 264) = 0;
  }
  v4 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);

  if (*(_BYTE *)(a1 + 276))
  {
    *(_BYTE *)(a1 + 276) = 0;
    v6 = sub_100238258();
    sub_100024998(v6, a1, 0, 0);
  }

  v7 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);

  *(_QWORD *)(a1 + 112) = 0;
}

void sub_100090DD0(uint64_t a1)
{
  sub_100090DF4(a1);
  operator delete();
}

uint64_t sub_100090DF4(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_1021547E8;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

uint64_t sub_100090E54(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  const char *v30;
  uint8_t *v31;
  _WORD v32[8];
  uint8_t buf[1640];

  sub_100059DD8(a1, a1 + 4688);
  sub_100C84198((uint64_t *)(a1 + 80), 0);
  objc_msgSend(*(id *)(a1 + 264), "invalidate");

  *(_QWORD *)(a1 + 224) = 0;
  v2 = *(void **)(a1 + 240);
  if (v2)
  {

    *(_QWORD *)(a1 + 240) = 0;
  }
  v3 = *(void **)(a1 + 232);
  if (v3)
  {
    objc_msgSend(v3, "invalidate");

    *(_QWORD *)(a1 + 232) = 0;
  }

  *(_QWORD *)(a1 + 288) = 0;
  objc_msgSend(*(id *)(a1 + 280), "invalidate");

  *(_QWORD *)(a1 + 280) = 0;
  sub_100C841D4((uint64_t *)(a1 + 4472), 0);
  std::timed_mutex::lock((std::timed_mutex *)(a1 + 320));
  v4 = *(void **)(a1 + 4672);
  if (v4)
  {
    objc_msgSend(v4, "shutdown");

    *(_QWORD *)(a1 + 4672) = 0;
  }
  std::timed_mutex::unlock((std::timed_mutex *)(a1 + 320));
  if (qword_1022A00A0 != -1)
    dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
  v5 = qword_1022A00A8;
  if (os_log_type_enabled((os_log_t)qword_1022A00A8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Raven: destructing CLRavenController", buf, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(buf, 0x65CuLL);
    if (qword_1022A00A0 != -1)
      dispatch_once(&qword_1022A00A0, &stru_10217C5E0);
    v32[0] = 0;
    _os_log_send_and_compose_impl(2, 0, buf, 1628, &_mh_execute_header, qword_1022A00A8, 0, "Raven: destructing CLRavenController", v32, 2);
    v31 = (uint8_t *)v30;
    sub_100512490("Generic", 1, 0, 2, "CLRavenController::~CLRavenController()", "%s\n", v30);
    if (v31 != buf)
      free(v31);
  }
  *(_QWORD *)(a1 + 4704) = off_10217C480;
  *(_QWORD *)(a1 + 4688) = off_10217C480;
  v6 = *(_QWORD *)(a1 + 4680);
  *(_QWORD *)(a1 + 4680) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 4552);
  *(_QWORD *)(a1 + 4552) = 0;
  if (v7)
    operator delete();
  v8 = *(void **)(a1 + 4520);
  if (v8)
  {
    *(_QWORD *)(a1 + 4528) = v8;
    operator delete(v8);
  }
  sub_100C841D4((uint64_t *)(a1 + 4472), 0);
  std::mutex::~mutex((std::mutex *)(a1 + 4400));

  sub_100261F44(a1 + 4032);
  if (*(char *)(a1 + 3799) < 0)
    operator delete(*(void **)(a1 + 3776));
  sub_100261F44(a1 + 3672);
  sub_100261F44(a1 + 3552);
  raven::RavenSolutionEvent::~RavenSolutionEvent((raven::RavenSolutionEvent *)(a1 + 440));
  std::timed_mutex::~timed_mutex((std::timed_mutex *)(a1 + 320));
  v9 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  v10 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v11 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  v12 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v13 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = 0;
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  v14 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = 0;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  v15 = *(_QWORD *)(a1 + 208);
  *(_QWORD *)(a1 + 208) = 0;
  if (v15)
    (*(void (**)(void))(a1 + 216))();
  v16 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(a1 + 200) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  v17 = *(_QWORD *)(a1 + 192);
  *(_QWORD *)(a1 + 192) = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  v18 = *(_QWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 184) = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = *(_QWORD *)(a1 + 168);
  *(_QWORD *)(a1 + 168) = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v21 = *(_QWORD *)(a1 + 152);
  *(_QWORD *)(a1 + 152) = 0;
  if (v21)
    (*(void (**)(void))(a1 + 160))();
  v22 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v23 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  sub_100C96DE4((uint64_t *)(a1 + 88), 0);
  sub_100C84198((uint64_t *)(a1 + 80), 0);
  v24 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  if (v24)
    (*(void (**)(void))(a1 + 72))();
  v25 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v26 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  if (v26)
    (*(void (**)(void))(a1 + 48))();
  v27 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v27)
    (*(void (**)(void))(a1 + 32))();
  v28 = *(std::__shared_weak_count **)(a1 + 8);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  return a1;
}

void sub_100091338(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10024F88C(a1);
  _Unwind_Resume(a1);
}

void sub_100091370(uint64_t a1)
{
  sub_100091394(a1);
  operator delete();
}

uint64_t sub_100091394(uint64_t a1)
{
  id *v2;

  *(_QWORD *)a1 = off_10213E550;
  v2 = (id *)(a1 + 8);
  objc_msgSend(*(id *)(a1 + 16), "forget:", *(_QWORD *)(a1 + 8));

  objc_msgSend(*v2, "invalidate");
  *v2 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return a1;
}

void sub_1000913F4(uint64_t a1, unsigned int a2, uint64_t a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  int v9;
  NSObject *v10;
  NSObject *v11;
  int v12;
  int v13;
  __int16 v14;
  const char *v15;
  __int16 v16;
  uint64_t v17;

  v7 = a2 - 1;
  if (v7 < 8)
    v8 = v7 + 1;
  else
    v8 = 0;
  v9 = 0;
  switch(a3)
  {
    case 0:
      goto LABEL_15;
    case 1:
      v9 = 1;
      goto LABEL_15;
    case 2:
      v9 = 2;
      goto LABEL_15;
    case 3:
      if (qword_1022A01D0 != -1)
        dispatch_once(&qword_1022A01D0, &stru_10218B728);
      v10 = qword_1022A01D8;
      if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_FAULT))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2050;
        v17 = a2;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_FAULT, "{\"msg%{public}.0s\":\"Got max arrow state!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v12, 0x1Cu);
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218B728);
      }
      v11 = qword_1022A01D8;
      if (os_signpost_enabled((os_log_t)qword_1022A01D8))
      {
        v12 = 68289282;
        v13 = 0;
        v14 = 2082;
        v15 = "";
        v16 = 2050;
        v17 = a2;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "Got max arrow state!", "{\"msg%{public}.0s\":\"Got max arrow state!\", \"entityClass\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld}", (uint8_t *)&v12, 0x1Cu);
      }
      v9 = 0;
LABEL_15:
      *(_DWORD *)(a1 + 4 * v8 + 156) = v9;
      break;
    default:
      break;
  }
  if ((a4 & 1) != 0 || sub_100091A6C(a1, a2))
    sub_100091608(a1, a4);
}

void sub_100091608(uint64_t a1, int a2)
{
  uint64_t v3;
  int v4;
  NSObject *v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  void *v11;
  int v12;
  int v13;
  int v14;
  BOOL v16;
  BOOL v17;
  double v18;
  int v19;
  double v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  __int128 v26;
  _QWORD v28[5];
  int v29;
  uint8_t buf[4];
  int v31;
  __int16 v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;

  v3 = 0;
  v4 = 0;
  do
  {
    if (qword_1022A01D0 != -1)
      dispatch_once(&qword_1022A01D0, &stru_10218B728);
    v5 = qword_1022A01D8;
    if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(unsigned int *)(a1 + 4 * v3 + 156);
      *(_DWORD *)buf = 68289538;
      v31 = 0;
      v32 = 2082;
      v33 = "";
      v34 = 2050;
      v35 = v3;
      v36 = 2050;
      v37 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: entity class state mask\", \"class\":%{public, location:CLLocationDictionaryUtilitiesEntityClass}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x26u);
    }
    if (sub_100091A6C(a1, v3))
      v4 |= *(_DWORD *)(a1 + 4 * v3 + 156);
    ++v3;
  }
  while (v3 != 9);
  v8 = 0;
  v9 = a1 + 224;
  *(_QWORD *)&v7 = 68289794;
  v26 = v7;
  do
  {
    v10 = v8 == 1;
    v11 = *(void **)(a1 + 200 + 8 * v8);
    if (v8 == 2)
      v10 = 2;
    v12 = *(_DWORD *)(a1 + 192);
    v13 = v12 & v10;
    v14 = v10 & v4;
    if ((v12 & v10) != 0 && v14 == 0)
    {
      if (*(_BYTE *)(v9 + v8))
        v17 = a2 == 0;
      else
        v17 = 0;
      if (!v17)
      {
        v18 = sub_100091D8C(1);
        if (v8 == 2)
          v19 = 1;
        else
          v19 = a2;
        if (v19)
          v20 = 0.0;
        else
          v20 = v18;
        if (!objc_msgSend(v11, "handler", v18, v26))
        {
          v28[0] = _NSConcreteStackBlock;
          v28[1] = 3221225472;
          v28[2] = sub_10020E184;
          v28[3] = &unk_10213D6C0;
          v28[4] = a1;
          v29 = v8;
          objc_msgSend(v11, "setHandler:", v28);
        }
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218B728);
        v21 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 68289538;
          v31 = 0;
          v32 = 2082;
          v33 = "";
          v34 = 2050;
          v35 = v8;
          v36 = 1026;
          LODWORD(v37) = (int)v20;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: scheduling arrow demotion timer\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"delay\":%{public}d}", buf, 0x22u);
        }
        objc_msgSend(v11, "setNextFireDelay:", v20);
        *(_BYTE *)(v9 + v8) = 1;
      }
    }
    else
    {
      if (v13)
      {
        if (*(_BYTE *)(v9 + v8))
          v16 = v14 == 0;
        else
          v16 = 1;
        if (v16)
          goto LABEL_51;
      }
      else if (!v14)
      {
        goto LABEL_51;
      }
      *(_DWORD *)(a1 + 192) = v12 | v10;
      objc_msgSend(v11, "setNextFireDelay:", 1.79769313e308, v26);
      *(_BYTE *)(v9 + v8) = 0;
      if (v13)
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218B728);
        v22 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          v23 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)buf = v26;
          v31 = 0;
          v32 = 2082;
          v33 = "";
          v34 = 2050;
          v35 = v8;
          v36 = 2050;
          v37 = v23;
          v38 = 2050;
          v39 = v23;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: only cancelling a demotion timer due to another demotion timer in-flight\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"newMask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x30u);
        }
      }
      else
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_10218B728);
        v24 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(unsigned int *)(a1 + 192);
          *(_DWORD *)buf = 68289538;
          v31 = 0;
          v32 = 2082;
          v33 = "";
          v34 = 2050;
          v35 = v8;
          v36 = 2050;
          v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"#sbim: promoting arrow\", \"state\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld, \"mask\":%{public, location:CLLocationDictionaryUtilitiesArrowState}lld}", buf, 0x26u);
        }
        sub_100091AEC(a1);
      }
    }
LABEL_51:
    ++v8;
  }
  while (v8 != 3);
}

BOOL sub_100091A6C(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  _BOOL8 v5;

  v4 = a1 + 112;
  (*(void (**)(uint64_t))(*(_QWORD *)(a1 + 112) + 16))(a1 + 112);
  v5 = a2 < 8 && ((0x87u >> a2) & 1) != 0 || *(_BYTE *)(a1 + a2 + 145) != 0;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v5;
}

uint64_t sub_100091AEC(uint64_t a1)
{
  NSObject *v2;
  __CFNotificationCenter *DarwinNotifyCenter;
  int v4;
  uint64_t result;
  uint64_t v6;
  _DWORD v7[2];
  __int16 v8;
  const char *v9;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_10218B728);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    v7[0] = 68289026;
    v7[1] = 0;
    v8 = 2082;
    v9 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"sbim: Posting status bar icon visibility change notification\"}", (uint8_t *)v7, 0x12u);
  }
  DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
  CFNotificationCenterPostNotification(DarwinNotifyCenter, CLShouldDisplayStatusBarIconChangedNotification, 0, 0, 0);
  v4 = *(_DWORD *)(a1 + 192);
  result = _os_feature_enabled_impl("CoreLocation", "CLUnfederatedUsageSync");
  if ((result & 1) == 0)
  {
    if ((v4 & 2) != 0)
      v6 = 2;
    else
      v6 = v4 & 1;
    return (uint64_t)objc_msgSend(objc_msgSend(objc_msgSend(*(id *)(a1 + 128), "vendor"), "proxyForService:", CFSTR("CLUsageSyncManager")), "onStatusBarIconChange:", v6);
  }
  return result;
}

id sub_100091C2C(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void *v4;
  _QWORD v6[5];
  _QWORD v7[5];
  uint8_t buf[4];
  int v9;
  __int16 v10;
  const char *v11;

  if (qword_1022A01D0 != -1)
    dispatch_once(&qword_1022A01D0, &stru_102154528);
  v2 = qword_1022A01D8;
  if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 68289026;
    v9 = 0;
    v10 = 2082;
    v11 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "{\"msg%{public}.0s\":\"Scheduling pending app status event\"}", buf, 0x12u);
  }
  v3 = *(void **)(a1 + 40);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10020F6B4;
  v7[3] = &unk_10212ECA0;
  v7[4] = a1;
  objc_msgSend(v3, "afterInterval:async:", v7, sub_100091D8C(1));
  v4 = *(void **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10020F6AC;
  v6[3] = &unk_10212ECA0;
  v6[4] = a1;
  return objc_msgSend(v4, "afterInterval:async:", v6, sub_100091D8C(2));
}

double sub_100091D8C(int a1)
{
  double result;

  result = 60.0;
  if (a1 != 2)
    result = 0.0;
  if (a1 == 1)
    return 10.0;
  return result;
}

void sub_100091DB0(uint64_t a1, __n128 a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  id v10;
  NSObject *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  __n128 v17;
  uint8_t buf[4];
  int v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  id v23;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)(a1 + 24);
  if (v2 != (_QWORD *)(a1 + 24))
  {
    a2.n128_u64[0] = 68289282;
    v17 = a2;
    do
    {
      v5 = v2[4];
      v6 = (std::__shared_weak_count *)v2[5];
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      v9 = (_QWORD *)(v5 + 72);
      if (*(char *)(v5 + 95) < 0)
        v9 = (_QWORD *)*v9;
      v10 = sub_100196E90(*(_QWORD *)(a1 + 8), (uint64_t)+[CLClientKeyPath clientKeyPathWithClientKey:](CLClientKeyPath, "clientKeyPathWithClientKey:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9, *(_OWORD *)&v17, v5, v6)));
      if (sub_100091FD8(a1, (uint64_t)v10))
      {
        if (qword_1022A01D0 != -1)
          dispatch_once(&qword_1022A01D0, &stru_102154528);
        v11 = qword_1022A01D8;
        if (os_log_type_enabled((os_log_t)qword_1022A01D8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = v17.n128_u32[0];
          v19 = 0;
          v20 = 2082;
          v21 = "";
          v22 = 2114;
          v23 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "{\"msg%{public}.0s\":\"markReceivingLocationInformation\", \"ClientKeyPath\":%{public, location:escape_only}@}", buf, 0x1Cu);
        }
        sub_10019808C(*(_QWORD *)(a1 + 8), (uint64_t)v10, 1, 0);
      }
      if (v6)
      {
        v12 = (unint64_t *)&v6->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v14 = (_QWORD *)v2[1];
      if (v14)
      {
        do
        {
          v15 = v14;
          v14 = (_QWORD *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          v15 = (_QWORD *)v2[2];
          v16 = *v15 == (_QWORD)v2;
          v2 = v15;
        }
        while (!v16);
      }
      v2 = v15;
    }
    while (v15 != v3);
  }
}

void sub_100091FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_100261F44((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100091FD8(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  void **v5;
  id v6;
  void *__p[2];
  char v9;

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 8) + 136), "registeredKeyPathForClientIdentifier:", a2);
  if (!objc_msgSend(v3, "isValidCKP"))
    return 0;
  v4 = *(void **)(*(_QWORD *)(a1 + 8) + 136);
  sub_1000920A0(__p);
  if (v9 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  v6 = objc_msgSend(v4, "hasValueForKey:atKeyPath:", +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5), v3);
  if (v9 < 0)
    operator delete(__p[0]);
  return v6;
}

void sub_100092084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1000920A0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1015A2E04(a1, off_1022A2870);
}

uint64_t sub_1000920B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  if (a5)
  {
    v5 = result;
    if (*(_QWORD *)(*(_QWORD *)(result + 32) + 24))
    {
      result = IOHIDEventGetType(a5);
      if ((_DWORD)result == 12)
      {
        result = IOHIDEventGetIntegerValue(a5, 786438);
        if (result == 1)
          return sub_1000B2A98(*(_QWORD *)(*(_QWORD *)(v5 + 32) + 24), a5);
      }
    }
  }
  return result;
}

void sub_100092124(uint64_t a1, _QWORD *a2)
{
  char **v2;
  NSObject *v5;
  _BYTE *v6;
  uint64_t v7;
  uint8_t *v8;
  char *v9;
  char *v10;
  NSObject *v11;
  const char *v12;
  char *v13;
  void *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  double v22;
  NSObject *v23;
  _BYTE *v24;
  NSObject *v25;
  uint64_t v26;
  unint64_t v27;
  const char *v28;
  double v29;
  __int128 *v30;
  __int128 *v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  double v39;
  _OWORD *v40;
  unint64_t v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  char *v67;
  char *v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  NSObject *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  unint64_t v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  __int128 *v92;
  _BYTE v93[12];
  __int16 v94;
  unint64_t v95;
  __int16 v96;
  double v97;
  int v98;
  _BYTE *v99;
  uint8_t buf[16];
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  _OWORD v108[2];
  _BYTE __p[32];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  _OWORD v116[94];

  v2 = (char **)(a1 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a1 + 136);
  if (*a2 != a2[1])
  {
    sub_100092C24((uint64_t)a2, (uint64_t *)&v91);
    if (sub_10022AD14(a1, &v91))
    {
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021AE860);
      v5 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        sub_1000C2254((_QWORD *)(a1 + 72), (std::string *)__p);
        v6 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)buf = 136380675;
        *(_QWORD *)&buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, detected %{private}s as moving AP", buf, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (!sub_1001BFF7C(115, 2))
        goto LABEL_74;
      bzero(__p, 0x65CuLL);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021AE860);
      v7 = qword_1022A0048;
      sub_1000C2254((_QWORD *)(a1 + 72), (std::string *)buf);
      v8 = (SBYTE7(v101) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)v93 = 136380675;
      *(_QWORD *)&v93[4] = v8;
      _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v7, 2, "WifiCentroidCalculator, detected %{private}s as moving AP", v93, 12);
      v10 = v9;
      if (SBYTE7(v101) < 0)
        operator delete(*(void **)buf);
      sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v10);
      if (v10 == __p)
        goto LABEL_74;
    }
    else
    {
      v14 = v91;
      v15 = *(_OWORD *)((char *)v91 + 24);
      *(_OWORD *)buf = *(_OWORD *)((char *)v91 + 8);
      v101 = v15;
      v16 = *(_OWORD *)((char *)v91 + 40);
      v17 = *(_OWORD *)((char *)v91 + 56);
      v18 = *(_OWORD *)((char *)v91 + 88);
      v104 = *(_OWORD *)((char *)v91 + 72);
      v105 = v18;
      v102 = v16;
      v103 = v17;
      v19 = *(_OWORD *)((char *)v91 + 104);
      v20 = *(_OWORD *)((char *)v91 + 120);
      v21 = *(_OWORD *)((char *)v91 + 136);
      *(_OWORD *)((char *)v108 + 12) = *(_OWORD *)((char *)v91 + 148);
      v107 = v20;
      v108[0] = v21;
      v106 = v19;
      v22 = sub_100ED9F70((uint64_t)v91);
      if (qword_1022A0040 != -1)
        dispatch_once(&qword_1022A0040, &stru_1021AE860);
      v23 = qword_1022A0048;
      if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
      {
        sub_100ED9F98((uint64_t)v14, __p);
        v24 = __p[23] >= 0 ? __p : *(_BYTE **)__p;
        *(_DWORD *)v93 = 136380675;
        *(_QWORD *)&v93[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, latest entry %{private}s", v93, 0xCu);
        if ((__p[23] & 0x80000000) != 0)
          operator delete(*(void **)__p);
      }
      if (sub_1001BFF7C(115, 2))
      {
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AE860);
        v82 = qword_1022A0048;
        sub_100ED9F98((uint64_t)v14, v93);
        if (v96 >= 0)
          v83 = v93;
        else
          v83 = *(_BYTE **)v93;
        v98 = 136380675;
        v99 = v83;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, v82, 2, "WifiCentroidCalculator, latest entry %{private}s", &v98, 12);
        v85 = v84;
        if (SHIBYTE(v96) < 0)
          operator delete(*(void **)v93);
        sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v85);
        if (v85 != __p)
          free(v85);
      }
      if (v22 <= *(double *)(a1 + 208))
      {
        v29 = *((double *)sub_1000521B8() + 8);
        v31 = (__int128 *)v91;
        v30 = v92;
        if (v91 != v92)
        {
          v90 = a1 + 152;
          do
          {
            v32 = *(__int128 *)((char *)v31 + 24);
            *(_OWORD *)__p = *(__int128 *)((char *)v31 + 8);
            *(_OWORD *)&__p[16] = v32;
            v33 = *(__int128 *)((char *)v31 + 40);
            v34 = *(__int128 *)((char *)v31 + 56);
            v35 = *(__int128 *)((char *)v31 + 88);
            v112 = *(__int128 *)((char *)v31 + 72);
            v113 = v35;
            v110 = v33;
            v111 = v34;
            v36 = *(__int128 *)((char *)v31 + 104);
            v37 = *(__int128 *)((char *)v31 + 120);
            v38 = *(__int128 *)((char *)v31 + 136);
            *(_OWORD *)((char *)v116 + 12) = *(__int128 *)((char *)v31 + 148);
            v115 = v37;
            v116[0] = v38;
            v114 = v36;
            sub_10011E258((double *)(a1 + 96), (uint64_t)buf, (uint64_t)__p);
            if (v39 < v29)
            {
              v40 = *(_OWORD **)(a1 + 144);
              v41 = *(_QWORD *)(a1 + 152);
              if ((unint64_t)v40 >= v41)
              {
                v52 = 0xAAAAAAAAAAAAAAABLL * (((char *)v40 - *v2) >> 6);
                v53 = v52 + 1;
                if (v52 + 1 > 0x155555555555555)
                  sub_100259694();
                v54 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v41 - (_QWORD)*v2) >> 6);
                if (2 * v54 > v53)
                  v53 = 2 * v54;
                if (v54 >= 0xAAAAAAAAAAAAAALL)
                  v55 = 0x155555555555555;
                else
                  v55 = v53;
                if (v55)
                  v56 = (char *)sub_1002746CC(v90, v55);
                else
                  v56 = 0;
                v57 = &v56[192 * v52];
                v58 = *v31;
                v59 = v31[1];
                v60 = v31[3];
                *((_OWORD *)v57 + 2) = v31[2];
                *((_OWORD *)v57 + 3) = v60;
                *(_OWORD *)v57 = v58;
                *((_OWORD *)v57 + 1) = v59;
                v61 = v31[4];
                v62 = v31[5];
                v63 = v31[7];
                *((_OWORD *)v57 + 6) = v31[6];
                *((_OWORD *)v57 + 7) = v63;
                *((_OWORD *)v57 + 4) = v61;
                *((_OWORD *)v57 + 5) = v62;
                v64 = v31[8];
                v65 = v31[9];
                v66 = v31[11];
                *((_OWORD *)v57 + 10) = v31[10];
                *((_OWORD *)v57 + 11) = v66;
                *((_OWORD *)v57 + 8) = v64;
                *((_OWORD *)v57 + 9) = v65;
                v68 = *(char **)(a1 + 136);
                v67 = *(char **)(a1 + 144);
                v69 = v57;
                if (v67 != v68)
                {
                  do
                  {
                    v70 = *((_OWORD *)v67 - 12);
                    v71 = *((_OWORD *)v67 - 11);
                    v72 = *((_OWORD *)v67 - 9);
                    *((_OWORD *)v69 - 10) = *((_OWORD *)v67 - 10);
                    *((_OWORD *)v69 - 9) = v72;
                    *((_OWORD *)v69 - 12) = v70;
                    *((_OWORD *)v69 - 11) = v71;
                    v73 = *((_OWORD *)v67 - 8);
                    v74 = *((_OWORD *)v67 - 7);
                    v75 = *((_OWORD *)v67 - 5);
                    *((_OWORD *)v69 - 6) = *((_OWORD *)v67 - 6);
                    *((_OWORD *)v69 - 5) = v75;
                    *((_OWORD *)v69 - 8) = v73;
                    *((_OWORD *)v69 - 7) = v74;
                    v76 = *((_OWORD *)v67 - 4);
                    v77 = *((_OWORD *)v67 - 3);
                    v78 = *((_OWORD *)v67 - 1);
                    *((_OWORD *)v69 - 2) = *((_OWORD *)v67 - 2);
                    *((_OWORD *)v69 - 1) = v78;
                    *((_OWORD *)v69 - 4) = v76;
                    *((_OWORD *)v69 - 3) = v77;
                    v69 -= 192;
                    v67 -= 192;
                  }
                  while (v67 != v68);
                  v67 = *v2;
                }
                v51 = v57 + 192;
                *(_QWORD *)(a1 + 136) = v69;
                *(_QWORD *)(a1 + 144) = v57 + 192;
                *(_QWORD *)(a1 + 152) = &v56[192 * v55];
                if (v67)
                  operator delete(v67);
              }
              else
              {
                v42 = *v31;
                v43 = v31[1];
                v44 = v31[3];
                v40[2] = v31[2];
                v40[3] = v44;
                *v40 = v42;
                v40[1] = v43;
                v45 = v31[4];
                v46 = v31[5];
                v47 = v31[7];
                v40[6] = v31[6];
                v40[7] = v47;
                v40[4] = v45;
                v40[5] = v46;
                v48 = v31[8];
                v49 = v31[9];
                v50 = v31[11];
                v40[10] = v31[10];
                v40[11] = v50;
                v40[8] = v48;
                v40[9] = v49;
                v51 = v40 + 12;
              }
              *(_QWORD *)(a1 + 144) = v51;
            }
            v31 += 12;
          }
          while (v31 != v30);
        }
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AE860);
        v79 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
        {
          v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
          v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6);
          *(_DWORD *)__p = 134218496;
          *(_QWORD *)&__p[4] = v80;
          *(_WORD *)&__p[12] = 2048;
          *(_QWORD *)&__p[14] = v81;
          *(_WORD *)&__p[22] = 2048;
          *(double *)&__p[24] = v29;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, using %zu samples from %zu samples based on outlier threshold %.1f", __p, 0x20u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_74;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AE860);
        v86 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 144) - *(_QWORD *)(a1 + 136)) >> 6);
        v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 6);
        *(_DWORD *)v93 = 134218496;
        *(_QWORD *)&v93[4] = v86;
        v94 = 2048;
        v95 = v87;
        v96 = 2048;
        v97 = v29;
        LODWORD(v89) = 32;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCentroidCalculator, using %zu samples from %zu samples based on outlier threshold %.1f", (size_t)v93, v89, *(double *)&v90);
        v10 = (char *)v88;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v88);
      }
      else
      {
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AE860);
        v25 = qword_1022A0048;
        if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEFAULT))
        {
          v26 = *(_QWORD *)(a1 + 208);
          *(_DWORD *)__p = 134283777;
          *(double *)&__p[4] = v22;
          *(_WORD *)&__p[12] = 2049;
          *(_QWORD *)&__p[14] = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "WifiCentroidCalculator, discarding all entries as latest entry has age %{private}.1fs, greater than %{private}.1fs", __p, 0x16u);
        }
        if (!sub_1001BFF7C(115, 2))
          goto LABEL_74;
        bzero(__p, 0x65CuLL);
        if (qword_1022A0040 != -1)
          dispatch_once(&qword_1022A0040, &stru_1021AE860);
        v27 = *(_QWORD *)(a1 + 208);
        *(_DWORD *)v93 = 134283777;
        *(double *)&v93[4] = v22;
        v94 = 2049;
        v95 = v27;
        LODWORD(v89) = 22;
        _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 0, "WifiCentroidCalculator, discarding all entries as latest entry has age %{private}.1fs, greater than %{private}.1fs", v93, v89);
        v10 = (char *)v28;
        sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v28);
      }
      if (v10 == __p)
      {
LABEL_74:
        if (v91)
        {
          v92 = (__int128 *)v91;
          operator delete(v91);
        }
        return;
      }
    }
    free(v10);
    goto LABEL_74;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AE860);
  v11 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)__p = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "WifiCentroidCalculator, empty input entries", __p, 2u);
  }
  if (sub_1001BFF7C(115, 2))
  {
    bzero(__p, 0x65CuLL);
    if (qword_1022A0040 != -1)
      dispatch_once(&qword_1022A0040, &stru_1021AE860);
    *(_WORD *)buf = 0;
    _os_log_send_and_compose_impl(2, 0, __p, 1628, &_mh_execute_header, qword_1022A0048, 2, "WifiCentroidCalculator, empty input entries", buf, 2);
    v13 = (char *)v12;
    sub_100512490("Generic", 1, 0, 2, "void CLWifiCentroidCalculator::computeEntriesToUse(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v12);
    if (v13 != __p)
      free(v13);
  }
}

void sub_100092BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_100092C24(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  char *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  double v12;
  unint64_t v13;
  NSObject *v14;
  void **v15;
  void **v16;
  uint64_t v17;
  void **v18;
  _BYTE *v19;
  char *v20;
  void *__p[2];
  char v22;
  _BYTE buf[12];
  __int16 v24;
  void **v25;
  char v26;
  int v27;
  void **v28;
  __int16 v29;
  _BYTE *v30;
  void *v31[2];
  char v32;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  sub_1007B4CDC(a2, *(const void **)a1, *(_QWORD *)(a1 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 6));
  v3 = (char *)a2[1];
  v4 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v3[-*a2] >> 6));
  if (v3 == (char *)*a2)
    v5 = 0;
  else
    v5 = v4;
  sub_100093050(*a2, v3, v5, 1);
  v6 = *a2;
  v7 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6);
  if (v7 < 2)
    return;
  v8 = 0;
  v9 = *(double *)(v6 + 84);
  v10 = v6 + 276;
  v11 = 1;
  while (1)
  {
    v12 = v9;
    v9 = *(double *)(v10 + v8);
    if (v12 < v9)
      break;
    ++v11;
    v8 += 192;
    if (v7 == v11)
      return;
  }
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AE860);
  v13 = v11 - 1;
  v14 = qword_1022A0048;
  if (os_log_type_enabled((os_log_t)qword_1022A0048, OS_LOG_TYPE_FAULT))
  {
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) <= v13)
      goto LABEL_40;
    v15 = v31;
    sub_100ED9F98(*a2 + v8, v31);
    if (v32 < 0)
      v15 = (void **)v31[0];
    if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) <= v11)
      sub_1002EAEB0();
    sub_100ED9F98(*a2 + v8 + 192, __p);
    if (v22 >= 0)
      v16 = __p;
    else
      v16 = (void **)__p[0];
    *(_DWORD *)buf = 136380931;
    *(_QWORD *)&buf[4] = v15;
    v24 = 2081;
    v25 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "WifiCentroidCalculator, timestamps out of order! newer: %{private}s, older: %{private}s", buf, 0x16u);
    if (v22 < 0)
      operator delete(__p[0]);
    if (v32 < 0)
      operator delete(v31[0]);
  }
  if (!sub_1001BFF7C(115, 0))
    return;
  bzero(v31, 0x65CuLL);
  if (qword_1022A0040 != -1)
    dispatch_once(&qword_1022A0040, &stru_1021AE860);
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) <= v13)
LABEL_40:
    sub_1002EAEB0();
  v17 = qword_1022A0048;
  v18 = __p;
  sub_100ED9F98(*a2 + v8, __p);
  if (v22 < 0)
    v18 = (void **)__p[0];
  if (0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 6) <= v11)
    sub_1002EAEB0();
  sub_100ED9F98(*a2 + v8 + 192, buf);
  if (v26 >= 0)
    v19 = buf;
  else
    v19 = *(_BYTE **)buf;
  v27 = 136380931;
  v28 = v18;
  v29 = 2081;
  v30 = v19;
  v20 = (char *)_os_log_send_and_compose_impl(2, 0, v31, 1628, &_mh_execute_header, v17, 17, "WifiCentroidCalculator, timestamps out of order! newer: %{private}s, older: %{private}s", &v27, 22);
  if (v26 < 0)
    operator delete(*(void **)buf);
  if (v22 < 0)
    operator delete(__p[0]);
  sub_100512490("Generic", 1, 0, 0, "void sanityCheckEntriesAreSortedFromLatestToOldest(const std::vector<CLWifiHarvestDatabaseEntry> &)", "%s\n", v20);
  if (v20 != (char *)v31)
    free(v20);
}

void sub_100093008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;
  void *v32;

  if (a17 < 0)
    operator delete(__p);
  v32 = *(void **)v30;
  if (*(_QWORD *)v30)
  {
    *(_QWORD *)(v30 + 8) = v32;
    operator delete(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_100093050(uint64_t a1, char *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  double *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 *v13;
  uint64_t v14;
  __int128 *v15;
  __int128 *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  uint64_t v27;
  double v28;
  unint64_t v29;
  char *v30;
  char *v31;
  double v32;
  char *v33;
  double v34;
  __int128 *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  double *v45;
  double v46;
  __int128 *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  BOOL v57;
  uint64_t v58;
  double v59;
  double v60;
  __int128 *v61;
  char *v62;
  double v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  double *v73;
  double v74;
  __int128 *v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 *v94;
  __int128 *v95;
  __int128 *v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  BOOL v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  char *v125;
  BOOL v127;
  uint64_t v128;
  unint64_t v129;
  char *v130;
  double v131;
  uint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  int64_t v141;
  int64_t v142;
  int64_t v143;
  uint64_t v144;
  unint64_t v145;
  double v146;
  unint64_t v147;
  _OWORD *v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  uint64_t v158;
  uint64_t v159;
  int64_t v160;
  uint64_t v161;
  unint64_t v162;
  _OWORD *v163;
  uint64_t v164;
  uint64_t v165;
  int64_t v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  unint64_t v186;
  double v187;
  _OWORD *v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  uint64_t v198;
  double v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  double v206;
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  int v239;
  int v240;
  __int128 v241;
  int v242;
  int v243;
  int v244;
  int v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  __int128 v259;
  __int128 v260;
  int v261;
  int v262;
  int v263;
  __int128 v264;
  __int128 v265;
  __int128 v266;
  __int128 v267;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  __int128 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  __int128 v276;
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  __int128 v292;
  __int128 v293;
  __int128 v294;
  __int128 v295;
  __int128 v296;
  __int128 v297;
  __int128 v298;
  __int128 v299;
  __int128 v300;
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  __int128 v311;
  __int128 v312;
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __int128 v323;
  __int128 v324;
  __int128 v325;
  __int128 v326;
  __int128 v327;
  __int128 v328;
  __int128 v329;
  __int128 v330;
  __int128 v331;
  __int128 v332;
  __int128 v333;
  __int128 v334;
  __int128 v335;
  __int128 v336;
  __int128 v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  int v344;
  int v345;
  __int128 v346;
  int v347;
  __int128 v348;
  __int128 v349;
  __int128 v350;
  __int128 v351;
  __int128 v352;
  __int128 v353;
  __int128 v354;
  __int128 v355;
  __int128 v356;
  __int128 v357;
  __int128 v358;
  __int128 v359;
  __int128 v360;
  __int128 v361;
  __int128 v362;
  __int128 v363;
  __int128 v364;
  __int128 v365;
  __int128 v366;
  __int128 v367;
  __int128 v368;
  __int128 v369;
  __int128 v370;
  __int128 v371;
  __int128 v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  __int128 v377;
  __int128 v378;
  __int128 v379;
  __int128 v380;
  __int128 v381;
  __int128 v382;
  __int128 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int128 v390;
  __int128 v391;
  __int128 v392;

LABEL_1:
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (double *)(v8 + 276);
    v10 = (uint64_t)&a2[-v8];
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&a2[-v8] >> 6);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 108) > *(double *)(v8 + 84))
        {
          v291 = *(_OWORD *)(v8 + 32);
          v303 = *(_OWORD *)(v8 + 48);
          v267 = *(_OWORD *)v8;
          v279 = *(_OWORD *)(v8 + 16);
          v339 = *(_OWORD *)(v8 + 96);
          v351 = *(_OWORD *)(v8 + 112);
          v315 = *(_OWORD *)(v8 + 64);
          v327 = *(_OWORD *)(v8 + 80);
          v378 = *(_OWORD *)(v8 + 160);
          v387 = *(_OWORD *)(v8 + 176);
          v360 = *(_OWORD *)(v8 + 128);
          v369 = *(_OWORD *)(v8 + 144);
          v85 = *((_OWORD *)a2 - 12);
          v86 = *((_OWORD *)a2 - 11);
          v87 = *((_OWORD *)a2 - 9);
          *(_OWORD *)(v8 + 32) = *((_OWORD *)a2 - 10);
          *(_OWORD *)(v8 + 48) = v87;
          *(_OWORD *)v8 = v85;
          *(_OWORD *)(v8 + 16) = v86;
          v88 = *((_OWORD *)a2 - 8);
          v89 = *((_OWORD *)a2 - 7);
          v90 = *((_OWORD *)a2 - 5);
          *(_OWORD *)(v8 + 96) = *((_OWORD *)a2 - 6);
          *(_OWORD *)(v8 + 112) = v90;
          *(_OWORD *)(v8 + 64) = v88;
          *(_OWORD *)(v8 + 80) = v89;
          v91 = *((_OWORD *)a2 - 4);
          v92 = *((_OWORD *)a2 - 3);
          v93 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 160) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 176) = v93;
          *(_OWORD *)(v8 + 128) = v91;
          *(_OWORD *)(v8 + 144) = v92;
          *((_OWORD *)a2 - 10) = v291;
          *((_OWORD *)a2 - 9) = v303;
          *((_OWORD *)a2 - 12) = v267;
          *((_OWORD *)a2 - 11) = v279;
          *((_OWORD *)a2 - 6) = v339;
          *((_OWORD *)a2 - 5) = v351;
          *((_OWORD *)a2 - 8) = v315;
          *((_OWORD *)a2 - 7) = v327;
          *((_OWORD *)a2 - 2) = v378;
          *((_OWORD *)a2 - 1) = v387;
          *((_OWORD *)a2 - 4) = v360;
          *((_OWORD *)a2 - 3) = v369;
        }
        return;
      case 3:
        sub_10130E014((__int128 *)v8, (__int128 *)(v8 + 192), (__int128 *)a2 - 12);
        return;
      case 4:
        sub_10130E8A0(v8, v8 + 192, v8 + 384, (__int128 *)a2 - 12);
        return;
      case 5:
        v94 = (__int128 *)(v8 + 192);
        v95 = (__int128 *)(v8 + 384);
        v96 = (__int128 *)(v8 + 576);
        sub_10130E8A0(v8, v8 + 192, v8 + 384, (__int128 *)(v8 + 576));
        if (*(double *)(a2 - 108) > *(double *)(v8 + 660))
        {
          v340 = *(_OWORD *)(v8 + 672);
          v352 = *(_OWORD *)(v8 + 688);
          v316 = *(_OWORD *)(v8 + 640);
          v328 = *(_OWORD *)(v8 + 656);
          v379 = *(_OWORD *)(v8 + 736);
          v388 = *(_OWORD *)(v8 + 752);
          v361 = *(_OWORD *)(v8 + 704);
          v370 = *(_OWORD *)(v8 + 720);
          v268 = *v96;
          v280 = *(_OWORD *)(v8 + 592);
          v292 = *(_OWORD *)(v8 + 608);
          v304 = *(_OWORD *)(v8 + 624);
          v97 = *((_OWORD *)a2 - 12);
          v98 = *((_OWORD *)a2 - 11);
          v99 = *((_OWORD *)a2 - 9);
          *(_OWORD *)(v8 + 608) = *((_OWORD *)a2 - 10);
          *(_OWORD *)(v8 + 624) = v99;
          *v96 = v97;
          *(_OWORD *)(v8 + 592) = v98;
          v100 = *((_OWORD *)a2 - 8);
          v101 = *((_OWORD *)a2 - 7);
          v102 = *((_OWORD *)a2 - 5);
          *(_OWORD *)(v8 + 672) = *((_OWORD *)a2 - 6);
          *(_OWORD *)(v8 + 688) = v102;
          *(_OWORD *)(v8 + 640) = v100;
          *(_OWORD *)(v8 + 656) = v101;
          v103 = *((_OWORD *)a2 - 4);
          v104 = *((_OWORD *)a2 - 3);
          v105 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 736) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 752) = v105;
          *(_OWORD *)(v8 + 704) = v103;
          *(_OWORD *)(v8 + 720) = v104;
          *((_OWORD *)a2 - 10) = v292;
          *((_OWORD *)a2 - 9) = v304;
          *((_OWORD *)a2 - 12) = v268;
          *((_OWORD *)a2 - 11) = v280;
          *((_OWORD *)a2 - 6) = v340;
          *((_OWORD *)a2 - 5) = v352;
          *((_OWORD *)a2 - 8) = v316;
          *((_OWORD *)a2 - 7) = v328;
          *((_OWORD *)a2 - 2) = v379;
          *((_OWORD *)a2 - 1) = v388;
          *((_OWORD *)a2 - 4) = v361;
          *((_OWORD *)a2 - 3) = v370;
          if (*(double *)(v8 + 660) > *(double *)(v8 + 468))
          {
            v362 = *(_OWORD *)(v8 + 512);
            v371 = *(_OWORD *)(v8 + 528);
            v380 = *(_OWORD *)(v8 + 544);
            v389 = *(_OWORD *)(v8 + 560);
            v317 = *(_OWORD *)(v8 + 448);
            v329 = *(_OWORD *)(v8 + 464);
            v341 = *(_OWORD *)(v8 + 480);
            v353 = *(_OWORD *)(v8 + 496);
            v269 = *v95;
            v281 = *(_OWORD *)(v8 + 400);
            v293 = *(_OWORD *)(v8 + 416);
            v305 = *(_OWORD *)(v8 + 432);
            v106 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 528) = v106;
            v107 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 560) = v107;
            v108 = *(_OWORD *)(v8 + 656);
            *(_OWORD *)(v8 + 448) = *(_OWORD *)(v8 + 640);
            *(_OWORD *)(v8 + 464) = v108;
            v109 = *(_OWORD *)(v8 + 688);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 672);
            *(_OWORD *)(v8 + 496) = v109;
            v110 = *(_OWORD *)(v8 + 592);
            *v95 = *v96;
            *(_OWORD *)(v8 + 400) = v110;
            v111 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 608);
            *(_OWORD *)(v8 + 432) = v111;
            *(_OWORD *)(v8 + 704) = v362;
            *(_OWORD *)(v8 + 720) = v371;
            *(_OWORD *)(v8 + 736) = v380;
            *(_OWORD *)(v8 + 752) = v389;
            *(_OWORD *)(v8 + 640) = v317;
            *(_OWORD *)(v8 + 656) = v329;
            *(_OWORD *)(v8 + 672) = v341;
            *(_OWORD *)(v8 + 688) = v353;
            *v96 = v269;
            *(_OWORD *)(v8 + 592) = v281;
            v112 = *(double *)(v8 + 468) <= *v9;
            *(_OWORD *)(v8 + 608) = v293;
            *(_OWORD *)(v8 + 624) = v305;
            if (!v112)
            {
              v363 = *(_OWORD *)(v8 + 320);
              v372 = *(_OWORD *)(v8 + 336);
              v381 = *(_OWORD *)(v8 + 352);
              v390 = *(_OWORD *)(v8 + 368);
              v318 = *(_OWORD *)(v8 + 256);
              v330 = *(_OWORD *)(v8 + 272);
              v342 = *(_OWORD *)(v8 + 288);
              v354 = *(_OWORD *)(v8 + 304);
              v270 = *v94;
              v282 = *(_OWORD *)(v8 + 208);
              v294 = *(_OWORD *)(v8 + 224);
              v306 = *(_OWORD *)(v8 + 240);
              v113 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 336) = v113;
              v114 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 368) = v114;
              v115 = *(_OWORD *)(v8 + 464);
              *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 448);
              *(_OWORD *)(v8 + 272) = v115;
              v116 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 288) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 304) = v116;
              v117 = *(_OWORD *)(v8 + 400);
              *v94 = *v95;
              *(_OWORD *)(v8 + 208) = v117;
              v118 = *(_OWORD *)(v8 + 432);
              *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 416);
              *(_OWORD *)(v8 + 240) = v118;
              *(_OWORD *)(v8 + 512) = v363;
              *(_OWORD *)(v8 + 528) = v372;
              *(_OWORD *)(v8 + 544) = v381;
              *(_OWORD *)(v8 + 560) = v390;
              *(_OWORD *)(v8 + 448) = v318;
              *(_OWORD *)(v8 + 464) = v330;
              *(_OWORD *)(v8 + 480) = v342;
              *(_OWORD *)(v8 + 496) = v354;
              *v95 = v270;
              *(_OWORD *)(v8 + 400) = v282;
              v112 = *v9 <= *(double *)(v8 + 84);
              *(_OWORD *)(v8 + 416) = v294;
              *(_OWORD *)(v8 + 432) = v306;
              if (!v112)
              {
                v295 = *(_OWORD *)(v8 + 32);
                v307 = *(_OWORD *)(v8 + 48);
                v271 = *(_OWORD *)v8;
                v283 = *(_OWORD *)(v8 + 16);
                v343 = *(_OWORD *)(v8 + 96);
                v355 = *(_OWORD *)(v8 + 112);
                v319 = *(_OWORD *)(v8 + 64);
                v331 = *(_OWORD *)(v8 + 80);
                v382 = *(_OWORD *)(v8 + 160);
                v391 = *(_OWORD *)(v8 + 176);
                v364 = *(_OWORD *)(v8 + 128);
                v373 = *(_OWORD *)(v8 + 144);
                v119 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 112) = v119;
                v120 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 80) = v120;
                v121 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 176) = v121;
                v122 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 144) = v122;
                v123 = *(_OWORD *)(v8 + 208);
                *(_OWORD *)v8 = *v94;
                *(_OWORD *)(v8 + 16) = v123;
                v124 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 224);
                *(_OWORD *)(v8 + 48) = v124;
                *(_OWORD *)(v8 + 320) = v364;
                *(_OWORD *)(v8 + 336) = v373;
                *(_OWORD *)(v8 + 352) = v382;
                *(_OWORD *)(v8 + 368) = v391;
                *(_OWORD *)(v8 + 256) = v319;
                *(_OWORD *)(v8 + 272) = v331;
                *(_OWORD *)(v8 + 288) = v343;
                *(_OWORD *)(v8 + 304) = v355;
                *v94 = v271;
                *(_OWORD *)(v8 + 208) = v283;
                *(_OWORD *)(v8 + 224) = v295;
                *(_OWORD *)(v8 + 240) = v307;
              }
            }
          }
        }
        return;
      default:
        if (v10 <= 4607)
        {
          v125 = (char *)(v8 + 192);
          v127 = (char *)v8 == a2 || v125 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v127)
            {
              v128 = 0;
              v129 = v8;
              do
              {
                v130 = v125;
                v131 = *(double *)(v129 + 276);
                if (v131 > *(double *)(v129 + 84))
                {
                  v209 = *(_OWORD *)v125;
                  v215 = *((_OWORD *)v125 + 1);
                  v239 = *((_DWORD *)v125 + 20);
                  v227 = *((_OWORD *)v125 + 3);
                  v233 = *((_OWORD *)v125 + 4);
                  v221 = *((_OWORD *)v125 + 2);
                  v320 = *(_OWORD *)(v129 + 348);
                  v332 = *(_OWORD *)(v129 + 364);
                  v344 = *(_DWORD *)(v129 + 380);
                  v272 = *(_OWORD *)(v129 + 284);
                  v284 = *(_OWORD *)(v129 + 300);
                  v132 = v128;
                  v296 = *(_OWORD *)(v129 + 316);
                  v308 = *(_OWORD *)(v129 + 332);
                  while (1)
                  {
                    v133 = (_OWORD *)(v8 + v132);
                    v134 = *(_OWORD *)(v8 + v132 + 144);
                    v133[20] = *(_OWORD *)(v8 + v132 + 128);
                    v133[21] = v134;
                    v135 = *(_OWORD *)(v8 + v132 + 176);
                    v133[22] = *(_OWORD *)(v8 + v132 + 160);
                    v133[23] = v135;
                    v136 = *(_OWORD *)(v8 + v132 + 80);
                    v133[16] = *(_OWORD *)(v8 + v132 + 64);
                    v133[17] = v136;
                    v137 = *(_OWORD *)(v8 + v132 + 112);
                    v133[18] = *(_OWORD *)(v8 + v132 + 96);
                    v133[19] = v137;
                    v138 = *(_OWORD *)(v8 + v132 + 16);
                    v133[12] = *(_OWORD *)(v8 + v132);
                    v133[13] = v138;
                    v139 = *(_OWORD *)(v8 + v132 + 48);
                    v133[14] = *(_OWORD *)(v8 + v132 + 32);
                    v133[15] = v139;
                    if (!v132)
                      break;
                    v132 -= 192;
                    if (v131 <= *(double *)((char *)v133 - 108))
                    {
                      v140 = v8 + v132 + 192;
                      goto LABEL_77;
                    }
                  }
                  v140 = v8;
LABEL_77:
                  *(_OWORD *)v140 = v209;
                  *(_OWORD *)(v140 + 16) = v215;
                  *(_DWORD *)(v140 + 80) = v239;
                  *(_OWORD *)(v140 + 48) = v227;
                  *(_OWORD *)(v140 + 64) = v233;
                  *(_OWORD *)(v140 + 32) = v221;
                  *(double *)(v140 + 84) = v131;
                  *(_OWORD *)(v140 + 124) = v296;
                  *(_OWORD *)(v140 + 108) = v284;
                  *(_OWORD *)(v140 + 92) = v272;
                  *(_DWORD *)(v140 + 188) = v344;
                  *(_OWORD *)(v140 + 172) = v332;
                  *(_OWORD *)(v140 + 156) = v320;
                  *(_OWORD *)(v140 + 140) = v308;
                }
                v125 = v130 + 192;
                v128 += 192;
                v129 = (unint64_t)v130;
              }
              while (v130 + 192 != a2);
            }
          }
          else if (!v127)
          {
            do
            {
              v198 = (uint64_t)v125;
              v199 = *(double *)(a1 + 276);
              if (v199 > *(double *)(a1 + 84))
              {
                v212 = *(_OWORD *)v125;
                v218 = *((_OWORD *)v125 + 1);
                v242 = *((_DWORD *)v125 + 20);
                v230 = *((_OWORD *)v125 + 3);
                v236 = *((_OWORD *)v125 + 4);
                v224 = *((_OWORD *)v125 + 2);
                v323 = *(_OWORD *)(a1 + 348);
                v335 = *(_OWORD *)(a1 + 364);
                v347 = *(_DWORD *)(a1 + 380);
                v275 = *(_OWORD *)(a1 + 284);
                v287 = *(_OWORD *)(a1 + 300);
                v299 = *(_OWORD *)(a1 + 316);
                v311 = *(_OWORD *)(a1 + 332);
                do
                {
                  v200 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 336) = v200;
                  v201 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 368) = v201;
                  v202 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 272) = v202;
                  v203 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 304) = v203;
                  v204 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 192) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 208) = v204;
                  v205 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 240) = v205;
                  v206 = *(double *)(a1 - 108);
                  a1 -= 192;
                }
                while (v199 > v206);
                *(_OWORD *)(a1 + 192) = v212;
                *(_OWORD *)(a1 + 208) = v218;
                *(_DWORD *)(a1 + 272) = v242;
                *(_OWORD *)(a1 + 240) = v230;
                *(_OWORD *)(a1 + 256) = v236;
                *(_OWORD *)(a1 + 224) = v224;
                *(double *)(a1 + 276) = v199;
                *(_OWORD *)(a1 + 300) = v287;
                *(_OWORD *)(a1 + 316) = v299;
                *(_OWORD *)(a1 + 284) = v275;
                *(_DWORD *)(a1 + 380) = v347;
                *(_OWORD *)(a1 + 348) = v323;
                *(_OWORD *)(a1 + 364) = v335;
                *(_OWORD *)(a1 + 332) = v311;
              }
              v125 += 192;
              a1 = v198;
            }
            while ((char *)(v198 + 192) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((char *)v8 != a2)
          {
            v141 = (unint64_t)(v11 - 2) >> 1;
            v142 = v141;
            do
            {
              v143 = v142;
              if (v141 >= v142)
              {
                v144 = (2 * v142) | 1;
                v145 = v8 + 192 * v144;
                if (2 * v142 + 2 < v11 && *(double *)(v8 + 192 * v144 + 84) > *(double *)(v145 + 276))
                {
                  v145 += 192;
                  v144 = 2 * v142 + 2;
                }
                v146 = *(double *)(v8 + 192 * v142 + 84);
                if (*(double *)(v145 + 84) <= v146)
                {
                  v147 = v8 + 192 * v142;
                  v210 = *(_OWORD *)v147;
                  v216 = *(_OWORD *)(v147 + 16);
                  v240 = *(_DWORD *)(v147 + 80);
                  v228 = *(_OWORD *)(v147 + 48);
                  v234 = *(_OWORD *)(v147 + 64);
                  v222 = *(_OWORD *)(v147 + 32);
                  v345 = *(_DWORD *)(v147 + 188);
                  v321 = *(_OWORD *)(v147 + 156);
                  v333 = *(_OWORD *)(v147 + 172);
                  v309 = *(_OWORD *)(v147 + 140);
                  v285 = *(_OWORD *)(v147 + 108);
                  v297 = *(_OWORD *)(v147 + 124);
                  v273 = *(_OWORD *)(v147 + 92);
                  do
                  {
                    v148 = (_OWORD *)v147;
                    v147 = v145;
                    v149 = *(_OWORD *)v145;
                    v150 = *(_OWORD *)(v145 + 16);
                    v151 = *(_OWORD *)(v145 + 48);
                    v148[2] = *(_OWORD *)(v145 + 32);
                    v148[3] = v151;
                    *v148 = v149;
                    v148[1] = v150;
                    v152 = *(_OWORD *)(v145 + 64);
                    v153 = *(_OWORD *)(v145 + 80);
                    v154 = *(_OWORD *)(v145 + 112);
                    v148[6] = *(_OWORD *)(v145 + 96);
                    v148[7] = v154;
                    v148[4] = v152;
                    v148[5] = v153;
                    v155 = *(_OWORD *)(v145 + 128);
                    v156 = *(_OWORD *)(v145 + 144);
                    v157 = *(_OWORD *)(v145 + 176);
                    v148[10] = *(_OWORD *)(v145 + 160);
                    v148[11] = v157;
                    v148[8] = v155;
                    v148[9] = v156;
                    if (v141 < v144)
                      break;
                    v158 = (2 * v144) | 1;
                    v145 = v8 + 192 * v158;
                    v159 = 2 * v144 + 2;
                    if (v159 < v11 && *(double *)(v8 + 192 * v158 + 84) > *(double *)(v145 + 276))
                    {
                      v145 += 192;
                      v158 = v159;
                    }
                    v144 = v158;
                  }
                  while (*(double *)(v145 + 84) <= v146);
                  *(_OWORD *)v147 = v210;
                  *(_OWORD *)(v147 + 16) = v216;
                  *(_DWORD *)(v147 + 80) = v240;
                  *(_OWORD *)(v147 + 48) = v228;
                  *(_OWORD *)(v147 + 64) = v234;
                  *(_OWORD *)(v147 + 32) = v222;
                  *(double *)(v147 + 84) = v146;
                  *(_OWORD *)(v147 + 124) = v297;
                  *(_OWORD *)(v147 + 108) = v285;
                  *(_OWORD *)(v147 + 92) = v273;
                  *(_DWORD *)(v147 + 188) = v345;
                  *(_OWORD *)(v147 + 172) = v333;
                  *(_OWORD *)(v147 + 156) = v321;
                  *(_OWORD *)(v147 + 140) = v309;
                }
              }
              v142 = v143 - 1;
            }
            while (v143);
            v160 = v10 / 0xC0uLL;
            do
            {
              v161 = 0;
              v298 = *(_OWORD *)(v8 + 32);
              v310 = *(_OWORD *)(v8 + 48);
              v274 = *(_OWORD *)v8;
              v286 = *(_OWORD *)(v8 + 16);
              v346 = *(_OWORD *)(v8 + 96);
              v356 = *(_OWORD *)(v8 + 112);
              v322 = *(_OWORD *)(v8 + 64);
              v334 = *(_OWORD *)(v8 + 80);
              v383 = *(_OWORD *)(v8 + 160);
              v392 = *(_OWORD *)(v8 + 176);
              v365 = *(_OWORD *)(v8 + 128);
              v374 = *(_OWORD *)(v8 + 144);
              v162 = v8;
              do
              {
                v163 = (_OWORD *)v162;
                v164 = v161 + 1;
                v162 += 192 * (v161 + 1);
                v165 = 2 * v161;
                v161 = (2 * v161) | 1;
                v166 = v165 + 2;
                if (v166 < v160 && *(double *)((char *)&v163[12 * v164 + 5] + 4) > *(double *)(v162 + 276))
                {
                  v162 += 192;
                  v161 = v166;
                }
                v167 = *(_OWORD *)v162;
                v168 = *(_OWORD *)(v162 + 16);
                v169 = *(_OWORD *)(v162 + 48);
                v163[2] = *(_OWORD *)(v162 + 32);
                v163[3] = v169;
                *v163 = v167;
                v163[1] = v168;
                v170 = *(_OWORD *)(v162 + 64);
                v171 = *(_OWORD *)(v162 + 80);
                v172 = *(_OWORD *)(v162 + 112);
                v163[6] = *(_OWORD *)(v162 + 96);
                v163[7] = v172;
                v163[4] = v170;
                v163[5] = v171;
                v173 = *(_OWORD *)(v162 + 128);
                v174 = *(_OWORD *)(v162 + 144);
                v175 = *(_OWORD *)(v162 + 176);
                v163[10] = *(_OWORD *)(v162 + 160);
                v163[11] = v175;
                v163[8] = v173;
                v163[9] = v174;
              }
              while (v161 <= (uint64_t)((unint64_t)(v160 - 2) >> 1));
              a2 -= 192;
              if ((char *)v162 == a2)
              {
                *(_OWORD *)(v162 + 32) = v298;
                *(_OWORD *)(v162 + 48) = v310;
                *(_OWORD *)v162 = v274;
                *(_OWORD *)(v162 + 16) = v286;
                *(_OWORD *)(v162 + 96) = v346;
                *(_OWORD *)(v162 + 112) = v356;
                *(_OWORD *)(v162 + 64) = v322;
                *(_OWORD *)(v162 + 80) = v334;
                *(_OWORD *)(v162 + 160) = v383;
                *(_OWORD *)(v162 + 176) = v392;
                *(_OWORD *)(v162 + 128) = v365;
                *(_OWORD *)(v162 + 144) = v374;
              }
              else
              {
                v176 = *(_OWORD *)a2;
                v177 = *((_OWORD *)a2 + 1);
                v178 = *((_OWORD *)a2 + 3);
                *(_OWORD *)(v162 + 32) = *((_OWORD *)a2 + 2);
                *(_OWORD *)(v162 + 48) = v178;
                *(_OWORD *)v162 = v176;
                *(_OWORD *)(v162 + 16) = v177;
                v179 = *((_OWORD *)a2 + 4);
                v180 = *((_OWORD *)a2 + 5);
                v181 = *((_OWORD *)a2 + 7);
                *(_OWORD *)(v162 + 96) = *((_OWORD *)a2 + 6);
                *(_OWORD *)(v162 + 112) = v181;
                *(_OWORD *)(v162 + 64) = v179;
                *(_OWORD *)(v162 + 80) = v180;
                v182 = *((_OWORD *)a2 + 8);
                v183 = *((_OWORD *)a2 + 9);
                v184 = *((_OWORD *)a2 + 11);
                *(_OWORD *)(v162 + 160) = *((_OWORD *)a2 + 10);
                *(_OWORD *)(v162 + 176) = v184;
                *(_OWORD *)(v162 + 128) = v182;
                *(_OWORD *)(v162 + 144) = v183;
                *((_OWORD *)a2 + 2) = v298;
                *((_OWORD *)a2 + 3) = v310;
                *(_OWORD *)a2 = v274;
                *((_OWORD *)a2 + 1) = v286;
                *((_OWORD *)a2 + 6) = v346;
                *((_OWORD *)a2 + 7) = v356;
                *((_OWORD *)a2 + 4) = v322;
                *((_OWORD *)a2 + 5) = v334;
                *((_OWORD *)a2 + 10) = v383;
                *((_OWORD *)a2 + 11) = v392;
                *((_OWORD *)a2 + 8) = v365;
                *((_OWORD *)a2 + 9) = v374;
                v185 = v162 - v8 + 192;
                if (v185 >= 193)
                {
                  v186 = (v185 / 0xC0uLL - 2) >> 1;
                  v187 = *(double *)(v162 + 84);
                  if (*(double *)(v8 + 192 * v186 + 84) > v187)
                  {
                    v248 = *(_OWORD *)v162;
                    v251 = *(_OWORD *)(v162 + 16);
                    v263 = *(_DWORD *)(v162 + 80);
                    v257 = *(_OWORD *)(v162 + 48);
                    v260 = *(_OWORD *)(v162 + 64);
                    v254 = *(_OWORD *)(v162 + 32);
                    v245 = *(_DWORD *)(v162 + 188);
                    v235 = *(_OWORD *)(v162 + 156);
                    v241 = *(_OWORD *)(v162 + 172);
                    v229 = *(_OWORD *)(v162 + 140);
                    v217 = *(_OWORD *)(v162 + 108);
                    v223 = *(_OWORD *)(v162 + 124);
                    v211 = *(_OWORD *)(v162 + 92);
                    do
                    {
                      v188 = (_OWORD *)v162;
                      v162 = v8 + 192 * v186;
                      v189 = *(_OWORD *)v162;
                      v190 = *(_OWORD *)(v162 + 16);
                      v191 = *(_OWORD *)(v162 + 48);
                      v188[2] = *(_OWORD *)(v162 + 32);
                      v188[3] = v191;
                      *v188 = v189;
                      v188[1] = v190;
                      v192 = *(_OWORD *)(v162 + 64);
                      v193 = *(_OWORD *)(v162 + 80);
                      v194 = *(_OWORD *)(v162 + 112);
                      v188[6] = *(_OWORD *)(v162 + 96);
                      v188[7] = v194;
                      v188[4] = v192;
                      v188[5] = v193;
                      v195 = *(_OWORD *)(v162 + 128);
                      v196 = *(_OWORD *)(v162 + 144);
                      v197 = *(_OWORD *)(v162 + 176);
                      v188[10] = *(_OWORD *)(v162 + 160);
                      v188[11] = v197;
                      v188[8] = v195;
                      v188[9] = v196;
                      if (!v186)
                        break;
                      v186 = (v186 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 192 * v186 + 84) > v187);
                    *(_OWORD *)v162 = v248;
                    *(_OWORD *)(v162 + 16) = v251;
                    *(_DWORD *)(v162 + 80) = v263;
                    *(_OWORD *)(v162 + 48) = v257;
                    *(_OWORD *)(v162 + 64) = v260;
                    *(_OWORD *)(v162 + 32) = v254;
                    *(double *)(v162 + 84) = v187;
                    *(_OWORD *)(v162 + 124) = v223;
                    *(_OWORD *)(v162 + 108) = v217;
                    *(_OWORD *)(v162 + 92) = v211;
                    *(_DWORD *)(v162 + 188) = v245;
                    *(_OWORD *)(v162 + 172) = v241;
                    *(_OWORD *)(v162 + 156) = v235;
                    *(_OWORD *)(v162 + 140) = v229;
                  }
                }
              }
              v112 = v160-- <= 2;
            }
            while (!v112);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (__int128 *)(v8 + 192 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x6000)
        {
          sub_10130E014((__int128 *)(a1 + 192 * v12), (__int128 *)a1, (__int128 *)a2 - 12);
        }
        else
        {
          sub_10130E014((__int128 *)a1, (__int128 *)(a1 + 192 * v12), (__int128 *)a2 - 12);
          v14 = 3 * v12;
          v15 = (__int128 *)(a1 + 192 * v12 - 192);
          sub_10130E014((__int128 *)(a1 + 192), v15, (__int128 *)a2 - 24);
          v16 = (__int128 *)(a1 + 192 + (v14 << 6));
          sub_10130E014((__int128 *)(a1 + 384), v16, (__int128 *)a2 - 36);
          sub_10130E014(v15, v13, v16);
          v288 = *(_OWORD *)(a1 + 32);
          v300 = *(_OWORD *)(a1 + 48);
          v264 = *(_OWORD *)a1;
          v276 = *(_OWORD *)(a1 + 16);
          v336 = *(_OWORD *)(a1 + 96);
          v348 = *(_OWORD *)(a1 + 112);
          v312 = *(_OWORD *)(a1 + 64);
          v324 = *(_OWORD *)(a1 + 80);
          v375 = *(_OWORD *)(a1 + 160);
          v384 = *(_OWORD *)(a1 + 176);
          v357 = *(_OWORD *)(a1 + 128);
          v366 = *(_OWORD *)(a1 + 144);
          v17 = *v13;
          v18 = v13[1];
          v19 = v13[3];
          *(_OWORD *)(a1 + 32) = v13[2];
          *(_OWORD *)(a1 + 48) = v19;
          *(_OWORD *)a1 = v17;
          *(_OWORD *)(a1 + 16) = v18;
          v20 = v13[4];
          v21 = v13[5];
          v22 = v13[7];
          *(_OWORD *)(a1 + 96) = v13[6];
          *(_OWORD *)(a1 + 112) = v22;
          *(_OWORD *)(a1 + 64) = v20;
          *(_OWORD *)(a1 + 80) = v21;
          v23 = v13[8];
          v24 = v13[9];
          v25 = v13[11];
          *(_OWORD *)(a1 + 160) = v13[10];
          *(_OWORD *)(a1 + 176) = v25;
          *(_OWORD *)(a1 + 128) = v23;
          *(_OWORD *)(a1 + 144) = v24;
          v13[2] = v288;
          v13[3] = v300;
          *v13 = v264;
          v13[1] = v276;
          v13[6] = v336;
          v13[7] = v348;
          v13[4] = v312;
          v13[5] = v324;
          v13[10] = v375;
          v13[11] = v384;
          v13[8] = v357;
          v13[9] = v366;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v26 = *(double *)(a1 + 84);
          if (*(double *)(a1 - 108) > v26)
            goto LABEL_11;
          v247 = *(_OWORD *)a1;
          v250 = *(_OWORD *)(a1 + 16);
          v262 = *(_DWORD *)(a1 + 80);
          v256 = *(_OWORD *)(a1 + 48);
          v259 = *(_OWORD *)(a1 + 64);
          v253 = *(_OWORD *)(a1 + 32);
          v208 = *(_OWORD *)(a1 + 92);
          v214 = *(_OWORD *)(a1 + 108);
          v244 = *(_DWORD *)(a1 + 188);
          v232 = *(_OWORD *)(a1 + 156);
          v238 = *(_OWORD *)(a1 + 172);
          v220 = *(_OWORD *)(a1 + 124);
          v226 = *(_OWORD *)(a1 + 140);
          if (v26 <= *(double *)(a2 - 108))
          {
            do
            {
              v8 = (unint64_t)v9 - 84;
              if ((char *)v9 - 84 >= a2)
                break;
              v60 = *v9;
              v9 += 24;
            }
            while (v26 <= v60);
          }
          else
          {
            v58 = a1;
            do
            {
              v8 = v58 + 192;
              v59 = *(double *)(v58 + 276);
              v58 += 192;
            }
            while (v26 <= v59);
          }
          v61 = (__int128 *)a2;
          if (v8 < (unint64_t)a2)
          {
            v62 = a2;
            do
            {
              v61 = (__int128 *)(v62 - 192);
              v63 = *(double *)(v62 - 108);
              v62 -= 192;
            }
            while (v26 > v63);
          }
          while (v8 < (unint64_t)v61)
          {
            v290 = *(_OWORD *)(v8 + 32);
            v302 = *(_OWORD *)(v8 + 48);
            v266 = *(_OWORD *)v8;
            v278 = *(_OWORD *)(v8 + 16);
            v338 = *(_OWORD *)(v8 + 96);
            v350 = *(_OWORD *)(v8 + 112);
            v314 = *(_OWORD *)(v8 + 64);
            v326 = *(_OWORD *)(v8 + 80);
            v377 = *(_OWORD *)(v8 + 160);
            v386 = *(_OWORD *)(v8 + 176);
            v359 = *(_OWORD *)(v8 + 128);
            v368 = *(_OWORD *)(v8 + 144);
            v64 = *v61;
            v65 = v61[1];
            v66 = v61[3];
            *(_OWORD *)(v8 + 32) = v61[2];
            *(_OWORD *)(v8 + 48) = v66;
            *(_OWORD *)v8 = v64;
            *(_OWORD *)(v8 + 16) = v65;
            v67 = v61[4];
            v68 = v61[5];
            v69 = v61[7];
            *(_OWORD *)(v8 + 96) = v61[6];
            *(_OWORD *)(v8 + 112) = v69;
            *(_OWORD *)(v8 + 64) = v67;
            *(_OWORD *)(v8 + 80) = v68;
            v70 = v61[8];
            v71 = v61[9];
            v72 = v61[11];
            *(_OWORD *)(v8 + 160) = v61[10];
            *(_OWORD *)(v8 + 176) = v72;
            *(_OWORD *)(v8 + 128) = v70;
            *(_OWORD *)(v8 + 144) = v71;
            v61[2] = v290;
            v61[3] = v302;
            *v61 = v266;
            v61[1] = v278;
            v61[6] = v338;
            v61[7] = v350;
            v61[4] = v314;
            v61[5] = v326;
            v61[10] = v377;
            v61[11] = v386;
            v61[8] = v359;
            v61[9] = v368;
            do
            {
              v73 = (double *)(v8 + 276);
              v8 += 192;
            }
            while (v26 <= *v73);
            do
            {
              v74 = *(double *)((char *)v61 - 108);
              v61 -= 12;
            }
            while (v26 > v74);
          }
          v75 = (__int128 *)(v8 - 192);
          if (v8 - 192 != a1)
          {
            v76 = *v75;
            v77 = *(_OWORD *)(v8 - 176);
            v78 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 48) = v78;
            *(_OWORD *)a1 = v76;
            *(_OWORD *)(a1 + 16) = v77;
            v79 = *(_OWORD *)(v8 - 128);
            v80 = *(_OWORD *)(v8 - 112);
            v81 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 112) = v81;
            *(_OWORD *)(a1 + 64) = v79;
            *(_OWORD *)(a1 + 80) = v80;
            v82 = *(_OWORD *)(v8 - 64);
            v83 = *(_OWORD *)(v8 - 48);
            v84 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 160) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 176) = v84;
            *(_OWORD *)(a1 + 128) = v82;
            *(_OWORD *)(a1 + 144) = v83;
          }
          a4 = 0;
          *v75 = v247;
          *(_OWORD *)(v8 - 176) = v250;
          *(_DWORD *)(v8 - 112) = v262;
          *(_OWORD *)(v8 - 144) = v256;
          *(_OWORD *)(v8 - 128) = v259;
          *(_OWORD *)(v8 - 160) = v253;
          *(double *)(v8 - 108) = v26;
          *(_OWORD *)(v8 - 68) = v220;
          *(_OWORD *)(v8 - 84) = v214;
          *(_OWORD *)(v8 - 100) = v208;
          *(_DWORD *)(v8 - 4) = v244;
          *(_OWORD *)(v8 - 20) = v238;
          *(_OWORD *)(v8 - 36) = v232;
          *(_OWORD *)(v8 - 52) = v226;
          continue;
        }
        v26 = *(double *)(a1 + 84);
LABEL_11:
        v27 = 0;
        v246 = *(_OWORD *)a1;
        v249 = *(_OWORD *)(a1 + 16);
        v261 = *(_DWORD *)(a1 + 80);
        v243 = *(_DWORD *)(a1 + 188);
        v255 = *(_OWORD *)(a1 + 48);
        v258 = *(_OWORD *)(a1 + 64);
        v252 = *(_OWORD *)(a1 + 32);
        v231 = *(_OWORD *)(a1 + 156);
        v237 = *(_OWORD *)(a1 + 172);
        v207 = *(_OWORD *)(a1 + 92);
        v213 = *(_OWORD *)(a1 + 108);
        v219 = *(_OWORD *)(a1 + 124);
        v225 = *(_OWORD *)(a1 + 140);
        do
        {
          v28 = *(double *)(a1 + v27 + 276);
          v27 += 192;
        }
        while (v28 > v26);
        v29 = a1 + v27;
        v30 = a2;
        if (v27 == 192)
        {
          v33 = a2;
          while (v29 < (unint64_t)v33)
          {
            v31 = v33 - 192;
            v34 = *(double *)(v33 - 108);
            v33 -= 192;
            if (v34 > v26)
              goto LABEL_21;
          }
          v31 = v33;
        }
        else
        {
          do
          {
            v31 = v30 - 192;
            v32 = *(double *)(v30 - 108);
            v30 -= 192;
          }
          while (v32 <= v26);
        }
LABEL_21:
        v8 = v29;
        if (v29 < (unint64_t)v31)
        {
          v35 = (__int128 *)v31;
          do
          {
            v289 = *(_OWORD *)(v8 + 32);
            v301 = *(_OWORD *)(v8 + 48);
            v265 = *(_OWORD *)v8;
            v277 = *(_OWORD *)(v8 + 16);
            v337 = *(_OWORD *)(v8 + 96);
            v349 = *(_OWORD *)(v8 + 112);
            v313 = *(_OWORD *)(v8 + 64);
            v325 = *(_OWORD *)(v8 + 80);
            v376 = *(_OWORD *)(v8 + 160);
            v385 = *(_OWORD *)(v8 + 176);
            v358 = *(_OWORD *)(v8 + 128);
            v367 = *(_OWORD *)(v8 + 144);
            v36 = *v35;
            v37 = v35[1];
            v38 = v35[3];
            *(_OWORD *)(v8 + 32) = v35[2];
            *(_OWORD *)(v8 + 48) = v38;
            *(_OWORD *)v8 = v36;
            *(_OWORD *)(v8 + 16) = v37;
            v39 = v35[4];
            v40 = v35[5];
            v41 = v35[7];
            *(_OWORD *)(v8 + 96) = v35[6];
            *(_OWORD *)(v8 + 112) = v41;
            *(_OWORD *)(v8 + 64) = v39;
            *(_OWORD *)(v8 + 80) = v40;
            v42 = v35[8];
            v43 = v35[9];
            v44 = v35[11];
            *(_OWORD *)(v8 + 160) = v35[10];
            *(_OWORD *)(v8 + 176) = v44;
            *(_OWORD *)(v8 + 128) = v42;
            *(_OWORD *)(v8 + 144) = v43;
            v35[2] = v289;
            v35[3] = v301;
            *v35 = v265;
            v35[1] = v277;
            v35[6] = v337;
            v35[7] = v349;
            v35[4] = v313;
            v35[5] = v325;
            v35[10] = v376;
            v35[11] = v385;
            v35[8] = v358;
            v35[9] = v367;
            do
            {
              v45 = (double *)(v8 + 276);
              v8 += 192;
            }
            while (*v45 > v26);
            do
            {
              v46 = *(double *)((char *)v35 - 108);
              v35 -= 12;
            }
            while (v46 <= v26);
          }
          while (v8 < (unint64_t)v35);
        }
        v47 = (__int128 *)(v8 - 192);
        if (v8 - 192 != a1)
        {
          v48 = *v47;
          v49 = *(_OWORD *)(v8 - 176);
          v50 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 48) = v50;
          *(_OWORD *)a1 = v48;
          *(_OWORD *)(a1 + 16) = v49;
          v51 = *(_OWORD *)(v8 - 128);
          v52 = *(_OWORD *)(v8 - 112);
          v53 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 112) = v53;
          *(_OWORD *)(a1 + 64) = v51;
          *(_OWORD *)(a1 + 80) = v52;
          v54 = *(_OWORD *)(v8 - 64);
          v55 = *(_OWORD *)(v8 - 48);
          v56 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 176) = v56;
          *(_OWORD *)(a1 + 128) = v54;
          *(_OWORD *)(a1 + 144) = v55;
        }
        *v47 = v246;
        *(_OWORD *)(v8 - 176) = v249;
        *(_DWORD *)(v8 - 112) = v261;
        *(_OWORD *)(v8 - 144) = v255;
        *(_OWORD *)(v8 - 128) = v258;
        *(_OWORD *)(v8 - 160) = v252;
        *(double *)(v8 - 108) = v26;
        *(_OWORD *)(v8 - 68) = v219;
        *(_OWORD *)(v8 - 84) = v213;
        *(_OWORD *)(v8 - 100) = v207;
        *(_DWORD *)(v8 - 4) = v243;
        *(_OWORD *)(v8 - 20) = v237;
        *(_OWORD *)(v8 - 36) = v231;
        *(_OWORD *)(v8 - 52) = v225;
        if (v29 < (unint64_t)v31)
        {
LABEL_32:
          sub_100093050(a1, v8 - 192, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v57 = sub_10130E30C(a1, v8 - 192);
        if (!sub_10130E30C(v8, (uint64_t)a2))
        {
          if (v57)
            continue;
          goto LABEL_32;
        }
        a2 = (char *)(v8 - 192);
        if (!v57)
          goto LABEL_1;
        return;
    }
  }
}

  v234 = (__int128 *)(a2 - 864);
  v5 = a1;
  while (2)
  {
    a1 = v5;
    v6 = a2 - v5;
    v7 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - v5) >> 5);
    switch(v7)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_1006B7280((uint64_t)v234, v5))
        {
          sub_1006B8744((__int128 *)v5, v234);
          v150 = *(_DWORD *)(v5 + 696);
          *(_DWORD *)(v5 + 696) = *(_DWORD *)(a2 - 168);
          *(_DWORD *)(a2 - 168) = v150;
          v151 = *(_OWORD *)(v5 + 780);
          *(_OWORD *)&v240[16] = *(_OWORD *)(v5 + 764);
          *(_OWORD *)v241 = v151;
          v152 = *(_OWORD *)(v5 + 748);
          v239 = *(_OWORD *)(v5 + 732);
          *(_OWORD *)v240 = v152;
          *(_OWORD *)((char *)v243 + 12) = *(_OWORD *)(v5 + 840);
          v153 = *(_OWORD *)(v5 + 828);
          v154 = *(_OWORD *)(v5 + 796);
          v242 = *(_OWORD *)(v5 + 812);
          v243[0] = v153;
          *(_OWORD *)&v241[16] = v154;
          v155 = *(_OWORD *)(v5 + 716);
          v237 = *(_OWORD *)(v5 + 700);
          v238 = v155;
          v156 = *(_OWORD *)(a2 - 148);
          *(_OWORD *)(v5 + 700) = *(_OWORD *)(a2 - 164);
          *(_OWORD *)(v5 + 716) = v156;
          v157 = *(_OWORD *)(a2 - 132);
          v158 = *(_OWORD *)(a2 - 116);
          v159 = *(_OWORD *)(a2 - 84);
          *(_OWORD *)(v5 + 764) = *(_OWORD *)(a2 - 100);
          *(_OWORD *)(v5 + 780) = v159;
          *(_OWORD *)(v5 + 732) = v157;
          *(_OWORD *)(v5 + 748) = v158;
          v160 = *(_OWORD *)(a2 - 68);
          v161 = *(_OWORD *)(a2 - 52);
          v162 = *(_OWORD *)(a2 - 36);
          *(_OWORD *)(v5 + 840) = *(_OWORD *)(a2 - 24);
          *(_OWORD *)(v5 + 812) = v161;
          *(_OWORD *)(v5 + 828) = v162;
          *(_OWORD *)(v5 + 796) = v160;
          v163 = v237;
          *(_OWORD *)(a2 - 148) = v238;
          *(_OWORD *)(a2 - 164) = v163;
          v164 = v239;
          v165 = *(_OWORD *)v240;
          v166 = *(_OWORD *)&v240[16];
          *(_OWORD *)(a2 - 84) = *(_OWORD *)v241;
          *(_OWORD *)(a2 - 100) = v166;
          *(_OWORD *)(a2 - 116) = v165;
          *(_OWORD *)(a2 - 132) = v164;
          v167 = *(_OWORD *)&v241[16];
          v168 = v242;
          v169 = v243[0];
          *(_OWORD *)(a2 - 24) = *(_OWORD *)((char *)v243 + 12);
          *(_OWORD *)(a2 - 36) = v169;
          *(_OWORD *)(a2 - 52) = v168;
          *(_OWORD *)(a2 - 68) = v167;
          LOBYTE(v150) = *(_BYTE *)(v5 + 856);
          *(_BYTE *)(v5 + 856) = *(_BYTE *)(a2 - 8);
          *(_BYTE *)(a2 - 8) = v150;
        }
        return;
      case 3uLL:
        sub_1006B7ED4(v5, v5 + 864, (uint64_t)v234);
        return;
      case 4uLL:
        sub_1006B8B1C(v5, v5 + 864, v5 + 1728, (uint64_t)v234);
        return;
      case 5uLL:
        sub_1006B746C(v5, v5 + 864, v5 + 1728, v5 + 2592, (uint64_t)v234);
        return;
      default:
        if (v6 <= 20735)
        {
          if ((a4 & 1) != 0)
          {
            if (v5 != a2)
            {
              v170 = v5 + 864;
              if (v5 + 864 != a2)
              {
                v171 = 0;
                v172 = v5;
                do
                {
                  v173 = (__int128 *)v170;
                  if (sub_1006B7280(v170, v172))
                  {
                    v237 = *v173;
                    v174 = v173[1];
                    v175 = v173[2];
                    v176 = v173[3];
                    *(_OWORD *)&v240[12] = *(__int128 *)((char *)v173 + 60);
                    v239 = v175;
                    *(_OWORD *)v240 = v176;
                    v238 = v174;
                    *(_DWORD *)v241 = *(_DWORD *)(v172 + 944);
                    *(_OWORD *)&v241[8] = *(_OWORD *)(v172 + 952);
                    *(_QWORD *)&v241[24] = *(_QWORD *)(v172 + 968);
                    *(_QWORD *)(v172 + 968) = 0;
                    *(_QWORD *)(v172 + 952) = 0;
                    *(_QWORD *)(v172 + 960) = 0;
                    v177 = *(_OWORD *)(v172 + 976);
                    v178 = *(_OWORD *)(v172 + 992);
                    v179 = *(_OWORD *)(v172 + 1024);
                    v180 = *(_OWORD *)(v172 + 1040);
                    v243[1] = *(_OWORD *)(v172 + 1008);
                    v244 = v179;
                    v242 = v177;
                    v243[0] = v178;
                    v181 = *(_OWORD *)(v172 + 1056);
                    v182 = *(_OWORD *)(v172 + 1088);
                    v183 = *(_OWORD *)(v172 + 1104);
                    v247 = *(_OWORD *)(v172 + 1072);
                    v248 = v182;
                    v245 = v180;
                    v246 = v181;
                    v184 = *(_OWORD *)(v172 + 1120);
                    v185 = *(_OWORD *)(v172 + 1136);
                    *(_OWORD *)((char *)v252 + 12) = *(_OWORD *)(v172 + 1164);
                    v186 = *(_OWORD *)(v172 + 1152);
                    v251 = v185;
                    v252[0] = v186;
                    v249 = v183;
                    v250 = v184;
                    __p = *(_OWORD *)(v172 + 1184);
                    v254 = *(_QWORD *)(v172 + 1200);
                    *(_QWORD *)(v172 + 1184) = 0;
                    *(_QWORD *)(v172 + 1200) = 0;
                    *(_QWORD *)(v172 + 1192) = 0;
                    v187 = *(_OWORD *)(v172 + 1352);
                    v263 = *(_OWORD *)(v172 + 1336);
                    v264 = v187;
                    v265 = *(_DWORD *)(v172 + 1368);
                    v188 = *(_OWORD *)(v172 + 1288);
                    v259 = *(_OWORD *)(v172 + 1272);
                    v260 = v188;
                    v189 = *(_OWORD *)(v172 + 1320);
                    v261 = *(_OWORD *)(v172 + 1304);
                    v262 = v189;
                    v190 = *(_OWORD *)(v172 + 1224);
                    v255 = *(_OWORD *)(v172 + 1208);
                    v256 = v190;
                    v191 = *(_OWORD *)(v172 + 1256);
                    v257 = *(_OWORD *)(v172 + 1240);
                    v258 = v191;
                    v192 = *(_OWORD *)(v172 + 1520);
                    v274 = *(_OWORD *)(v172 + 1504);
                    v275 = v192;
                    v276 = *(_OWORD *)(v172 + 1536);
                    v277 = *(_DWORD *)(v172 + 1552);
                    v193 = *(_OWORD *)(v172 + 1456);
                    v270 = *(_OWORD *)(v172 + 1440);
                    v271 = v193;
                    v194 = *(_OWORD *)(v172 + 1488);
                    v272 = *(_OWORD *)(v172 + 1472);
                    v273 = v194;
                    v195 = *(_OWORD *)(v172 + 1392);
                    v266 = *(_OWORD *)(v172 + 1376);
                    v267 = v195;
                    v196 = *(_OWORD *)(v172 + 1424);
                    v268 = *(_OWORD *)(v172 + 1408);
                    v269 = v196;
                    v278 = *(_DWORD *)(v172 + 1560);
                    v197 = *(_OWORD *)(v172 + 1676);
                    v285 = *(_OWORD *)(v172 + 1660);
                    v286 = v197;
                    *(_OWORD *)v287 = *(_OWORD *)(v172 + 1692);
                    *(_OWORD *)&v287[12] = *(_OWORD *)(v172 + 1704);
                    v198 = *(_OWORD *)(v172 + 1612);
                    v281 = *(_OWORD *)(v172 + 1596);
                    v282 = v198;
                    v199 = *(_OWORD *)(v172 + 1644);
                    v283 = *(_OWORD *)(v172 + 1628);
                    v284 = v199;
                    v200 = *(_OWORD *)(v172 + 1580);
                    v279 = *(_OWORD *)(v172 + 1564);
                    v280 = v200;
                    v201 = v171;
                    v288 = *(_BYTE *)(v172 + 1720);
                    while (1)
                    {
                      sub_1006B8DD8(v5 + v201 + 864, v5 + v201);
                      if (!v201)
                        break;
                      v202 = sub_1006B7280((uint64_t)&v237, v5 + v201 - 864);
                      v201 -= 864;
                      if ((v202 & 1) == 0)
                      {
                        v203 = v5 + v201 + 864;
                        goto LABEL_76;
                      }
                    }
                    v203 = v5;
LABEL_76:
                    sub_1006B8DD8(v203, (uint64_t)&v237);
                    if (SHIBYTE(v254) < 0)
                      operator delete((void *)__p);
                    if (*(_QWORD *)&v241[8])
                    {
                      *(_QWORD *)&v241[16] = *(_QWORD *)&v241[8];
                      operator delete(*(void **)&v241[8]);
                    }
                  }
                  v170 = (uint64_t)(v173 + 54);
                  v171 += 864;
                  v172 = (uint64_t)v173;
                }
                while (v173 + 54 != (__int128 *)a2);
              }
            }
          }
          else if (v5 != a2)
          {
            v204 = v5 + 864;
            if (v5 + 864 != a2)
            {
              do
              {
                v205 = (__int128 *)v204;
                if (sub_1006B7280(v204, a1))
                {
                  v237 = *v205;
                  v206 = v205[1];
                  v207 = v205[2];
                  v208 = v205[3];
                  *(_OWORD *)&v240[12] = *(__int128 *)((char *)v205 + 60);
                  v239 = v207;
                  *(_OWORD *)v240 = v208;
                  v238 = v206;
                  *(_DWORD *)v241 = *(_DWORD *)(a1 + 944);
                  *(_OWORD *)&v241[8] = *(_OWORD *)(a1 + 952);
                  *(_QWORD *)&v241[24] = *(_QWORD *)(a1 + 968);
                  *(_QWORD *)(a1 + 968) = 0;
                  *(_QWORD *)(a1 + 952) = 0;
                  *(_QWORD *)(a1 + 960) = 0;
                  v209 = *(_OWORD *)(a1 + 976);
                  v210 = *(_OWORD *)(a1 + 992);
                  v211 = *(_OWORD *)(a1 + 1024);
                  v212 = *(_OWORD *)(a1 + 1040);
                  v243[1] = *(_OWORD *)(a1 + 1008);
                  v244 = v211;
                  v242 = v209;
                  v243[0] = v210;
                  v213 = *(_OWORD *)(a1 + 1056);
                  v214 = *(_OWORD *)(a1 + 1088);
                  v215 = *(_OWORD *)(a1 + 1104);
                  v247 = *(_OWORD *)(a1 + 1072);
                  v248 = v214;
                  v245 = v212;
                  v246 = v213;
                  v216 = *(_OWORD *)(a1 + 1120);
                  v217 = *(_OWORD *)(a1 + 1136);
                  *(_OWORD *)((char *)v252 + 12) = *(_OWORD *)(a1 + 1164);
                  v218 = *(_OWORD *)(a1 + 1152);
                  v251 = v217;
                  v252[0] = v218;
                  v249 = v215;
                  v250 = v216;
                  __p = *(_OWORD *)(a1 + 1184);
                  v254 = *(_QWORD *)(a1 + 1200);
                  *(_QWORD *)(a1 + 1184) = 0;
                  *(_QWORD *)(a1 + 1200) = 0;
                  *(_QWORD *)(a1 + 1192) = 0;
                  v219 = *(_OWORD *)(a1 + 1352);
                  v263 = *(_OWORD *)(a1 + 1336);
                  v264 = v219;
                  v265 = *(_DWORD *)(a1 + 1368);
                  v220 = *(_OWORD *)(a1 + 1288);
                  v259 = *(_OWORD *)(a1 + 1272);
                  v260 = v220;
                  v221 = *(_OWORD *)(a1 + 1320);
                  v261 = *(_OWORD *)(a1 + 1304);
                  v262 = v221;
                  v222 = *(_OWORD *)(a1 + 1224);
                  v255 = *(_OWORD *)(a1 + 1208);
                  v256 = v222;
                  v223 = *(_OWORD *)(a1 + 1256);
                  v257 = *(_OWORD *)(a1 + 1240);
                  v258 = v223;
                  v224 = *(_OWORD *)(a1 + 1520);
                  v274 = *(_OWORD *)(a1 + 1504);
                  v275 = v224;
                  v276 = *(_OWORD *)(a1 + 1536);
                  v277 = *(_DWORD *)(a1 + 1552);
                  v225 = *(_OWORD *)(a1 + 1456);
                  v270 = *(_OWORD *)(a1 + 1440);
                  v271 = v225;
                  v226 = *(_OWORD *)(a1 + 1488);
                  v272 = *(_OWORD *)(a1 + 1472);
                  v273 = v226;
                  v227 = *(_OWORD *)(a1 + 1392);
                  v266 = *(_OWORD *)(a1 + 1376);
                  v267 = v227;
                  v228 = *(_OWORD *)(a1 + 1424);
                  v268 = *(_OWORD *)(a1 + 1408);
                  v269 = v228;
                  v278 = *(_DWORD *)(a1 + 1560);
                  v229 = *(_OWORD *)(a1 + 1676);
                  v285 = *(_OWORD *)(a1 + 1660);
                  v286 = v229;
                  *(_OWORD *)v287 = *(_OWORD *)(a1 + 1692);
                  *(_OWORD *)&v287[12] = *(_OWORD *)(a1 + 1704);
                  v230 = *(_OWORD *)(a1 + 1612);
                  v281 = *(_OWORD *)(a1 + 1596);
                  v282 = v230;
                  v231 = *(_OWORD *)(a1 + 1644);
                  v283 = *(_OWORD *)(a1 + 1628);
                  v284 = v231;
                  v232 = *(_OWORD *)(a1 + 1580);
                  v279 = *(_OWORD *)(a1 + 1564);
                  v280 = v232;
                  v288 = *(_BYTE *)(a1 + 1720);
                  do
                  {
                    sub_1006B8DD8(a1 + 864, a1);
                    a1 -= 864;
                  }
                  while ((sub_1006B7280((uint64_t)&v237, a1) & 1) != 0);
                  sub_1006B8DD8(a1 + 864, (uint64_t)&v237);
                  if (SHIBYTE(v254) < 0)
                    operator delete((void *)__p);
                  if (*(_QWORD *)&v241[8])
                  {
                    *(_QWORD *)&v241[16] = *(_QWORD *)&v241[8];
                    operator delete(*(void **)&v241[8]);
                  }
                }
                v204 = (uint64_t)(v205 + 54);
                a1 = (uint64_t)v205;
              }
              while (v205 + 54 != (__int128 *)a2);
            }
          }
          return;
        }
        if (!a3)
        {
          sub_1006B7804(v5, a2, a2);
          return;
        }
        v8 = v7 >> 1;
        v9 = v5 + 864 * (v7 >> 1);
        if ((unint64_t)v6 <= 0x1B000)
        {
          sub_1006B7ED4(a1 + 864 * (v7 >> 1), a1, (uint64_t)v234);
        }
        else
        {
          sub_1006B7ED4(a1, a1 + 864 * (v7 >> 1), (uint64_t)v234);
          v10 = 864 * v8;
          sub_1006B7ED4(a1 + 864, v10 + a1 - 864, a2 - 1728);
          sub_1006B7ED4(a1 + 1728, a1 + 864 + v10, a2 - 2592);
          sub_1006B7ED4(v10 + a1 - 864, v9, a1 + 864 + v10);
          sub_1006B8744((__int128 *)a1, (__int128 *)v9);
          v11 = *(_DWORD *)(a1 + 696);
          *(_DWORD *)(a1 + 696) = *(_DWORD *)(v9 + 696);
          *(_DWORD *)(v9 + 696) = v11;
          v12 = *(_OWORD *)(a1 + 780);
          *(_OWORD *)&v240[16] = *(_OWORD *)(a1 + 764);
          *(_OWORD *)v241 = v12;
          v13 = *(_OWORD *)(a1 + 748);
          v239 = *(_OWORD *)(a1 + 732);
          *(_OWORD *)v240 = v13;
          *(_OWORD *)((char *)v243 + 12) = *(_OWORD *)(a1 + 840);
          v14 = *(_OWORD *)(a1 + 828);
          v15 = *(_OWORD *)(a1 + 796);
          v242 = *(_OWORD *)(a1 + 812);
          v243[0] = v14;
          *(_OWORD *)&v241[16] = v15;
          v16 = *(_OWORD *)(a1 + 716);
          v237 = *(_OWORD *)(a1 + 700);
          v238 = v16;
          v17 = *(_OWORD *)(v9 + 716);
          *(_OWORD *)(a1 + 700) = *(_OWORD *)(v9 + 700);
          *(_OWORD *)(a1 + 716) = v17;
          v18 = *(_OWORD *)(v9 + 732);
          v19 = *(_OWORD *)(v9 + 748);
          v20 = *(_OWORD *)(v9 + 780);
          *(_OWORD *)(a1 + 764) = *(_OWORD *)(v9 + 764);
          *(_OWORD *)(a1 + 780) = v20;
          *(_OWORD *)(a1 + 732) = v18;
          *(_OWORD *)(a1 + 748) = v19;
          v21 = *(_OWORD *)(v9 + 796);
          v22 = *(_OWORD *)(v9 + 812);
          v23 = *(_OWORD *)(v9 + 828);
          *(_OWORD *)(a1 + 840) = *(_OWORD *)(v9 + 840);
          *(_OWORD *)(a1 + 812) = v22;
          *(_OWORD *)(a1 + 828) = v23;
          *(_OWORD *)(a1 + 796) = v21;
          v24 = v238;
          *(_OWORD *)(v9 + 700) = v237;
          *(_OWORD *)(v9 + 716) = v24;
          v25 = v239;
          v26 = *(_OWORD *)v240;
          v27 = *(_OWORD *)v241;
          *(_OWORD *)(v9 + 764) = *(_OWORD *)&v240[16];
          *(_OWORD *)(v9 + 780) = v27;
          *(_OWORD *)(v9 + 732) = v25;
          *(_OWORD *)(v9 + 748) = v26;
          v28 = *(_OWORD *)&v241[16];
          v29 = v242;
          v30 = v243[0];
          *(_OWORD *)(v9 + 840) = *(_OWORD *)((char *)v243 + 12);
          *(_OWORD *)(v9 + 812) = v29;
          *(_OWORD *)(v9 + 828) = v30;
          *(_OWORD *)(v9 + 796) = v28;
          LOBYTE(v11) = *(_BYTE *)(a1 + 856);
          *(_BYTE *)(a1 + 856) = *(_BYTE *)(v9 + 856);
          *(_BYTE *)(v9 + 856) = v11;
        }
        --a3;
        if ((a4 & 1) == 0 && (sub_1006B7280(a1 - 864, a1) & 1) == 0)
        {
          v237 = *(_OWORD *)a1;
          v93 = *(_OWORD *)(a1 + 16);
          v94 = *(_OWORD *)(a1 + 32);
          v95 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)&v240[12] = *(_OWORD *)(a1 + 60);
          v239 = v94;
          *(_OWORD *)v240 = v95;
          v96 = *(_DWORD *)(a1 + 80);
          v238 = v93;
          *(_DWORD *)v241 = v96;
          *(_OWORD *)&v241[8] = *(_OWORD *)(a1 + 88);
          *(_QWORD *)&v241[24] = *(_QWORD *)(a1 + 104);
          *(_QWORD *)(a1 + 96) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          *(_QWORD *)(a1 + 88) = 0;
          v242 = *(_OWORD *)(a1 + 112);
          v97 = *(_OWORD *)(a1 + 128);
          v98 = *(_OWORD *)(a1 + 144);
          v99 = *(_OWORD *)(a1 + 176);
          v244 = *(_OWORD *)(a1 + 160);
          v245 = v99;
          v243[0] = v97;
          v243[1] = v98;
          v100 = *(_OWORD *)(a1 + 192);
          v101 = *(_OWORD *)(a1 + 208);
          v102 = *(_OWORD *)(a1 + 240);
          v248 = *(_OWORD *)(a1 + 224);
          v249 = v102;
          v246 = v100;
          v247 = v101;
          v103 = *(_OWORD *)(a1 + 256);
          v104 = *(_OWORD *)(a1 + 272);
          v105 = *(_OWORD *)(a1 + 288);
          *(_OWORD *)((char *)v252 + 12) = *(_OWORD *)(a1 + 300);
          v251 = v104;
          v252[0] = v105;
          v250 = v103;
          v106 = *(_OWORD *)(a1 + 320);
          v254 = *(_QWORD *)(a1 + 336);
          __p = v106;
          *(_QWORD *)(a1 + 328) = 0;
          *(_QWORD *)(a1 + 336) = 0;
          *(_QWORD *)(a1 + 320) = 0;
          v107 = *(_OWORD *)(a1 + 440);
          v109 = *(_OWORD *)(a1 + 392);
          v108 = *(_OWORD *)(a1 + 408);
          v260 = *(_OWORD *)(a1 + 424);
          v261 = v107;
          v258 = v109;
          v259 = v108;
          v110 = *(_OWORD *)(a1 + 344);
          v111 = *(_OWORD *)(a1 + 376);
          v256 = *(_OWORD *)(a1 + 360);
          v257 = v111;
          v255 = v110;
          v113 = *(_OWORD *)(a1 + 472);
          v112 = *(_OWORD *)(a1 + 488);
          v114 = *(_OWORD *)(a1 + 456);
          v265 = *(_DWORD *)(a1 + 504);
          v263 = v113;
          v264 = v112;
          v262 = v114;
          v115 = *(_OWORD *)(a1 + 512);
          v116 = *(_OWORD *)(a1 + 528);
          v117 = *(_OWORD *)(a1 + 560);
          v268 = *(_OWORD *)(a1 + 544);
          v269 = v117;
          v266 = v115;
          v267 = v116;
          v118 = *(_OWORD *)(a1 + 576);
          v119 = *(_OWORD *)(a1 + 592);
          v120 = *(_OWORD *)(a1 + 624);
          v272 = *(_OWORD *)(a1 + 608);
          v273 = v120;
          v270 = v118;
          v271 = v119;
          v121 = *(_OWORD *)(a1 + 640);
          v122 = *(_OWORD *)(a1 + 656);
          v123 = *(_OWORD *)(a1 + 672);
          v277 = *(_DWORD *)(a1 + 688);
          v275 = v122;
          v276 = v123;
          v274 = v121;
          v278 = *(_DWORD *)(a1 + 696);
          v124 = *(_OWORD *)(a1 + 716);
          v279 = *(_OWORD *)(a1 + 700);
          v280 = v124;
          v125 = *(_OWORD *)(a1 + 780);
          v127 = *(_OWORD *)(a1 + 732);
          v126 = *(_OWORD *)(a1 + 748);
          v283 = *(_OWORD *)(a1 + 764);
          v284 = v125;
          v281 = v127;
          v282 = v126;
          v129 = *(_OWORD *)(a1 + 812);
          v128 = *(_OWORD *)(a1 + 828);
          v130 = *(_OWORD *)(a1 + 796);
          *(_OWORD *)&v287[12] = *(_OWORD *)(a1 + 840);
          v286 = v129;
          *(_OWORD *)v287 = v128;
          v285 = v130;
          v288 = *(_BYTE *)(a1 + 856);
          if ((sub_1006B7280((uint64_t)&v237, (uint64_t)v234) & 1) != 0)
          {
            v5 = a1;
            do
              v5 += 864;
            while ((sub_1006B7280((uint64_t)&v237, v5) & 1) == 0);
          }
          else
          {
            v131 = a1 + 864;
            do
            {
              v5 = v131;
              if (v131 >= a2)
                break;
              v132 = sub_1006B7280((uint64_t)&v237, v131);
              v131 = v5 + 864;
            }
            while (!v132);
          }
          v133 = a2;
          if (v5 < a2)
          {
            v133 = a2;
            do
              v133 -= 864;
            while ((sub_1006B7280((uint64_t)&v237, v133) & 1) != 0);
          }
          while (v5 < v133)
          {
            sub_1006B8744((__int128 *)v5, (__int128 *)v133);
            v134 = *(_DWORD *)(v5 + 696);
            *(_DWORD *)(v5 + 696) = *(_DWORD *)(v133 + 696);
            *(_DWORD *)(v133 + 696) = v134;
            v135 = *(_OWORD *)(v5 + 812);
            v295 = *(_OWORD *)(v5 + 796);
            v296 = v135;
            v297[0] = *(_OWORD *)(v5 + 828);
            *(_OWORD *)((char *)v297 + 12) = *(_OWORD *)(v5 + 840);
            v136 = *(_OWORD *)(v5 + 748);
            v291 = *(_OWORD *)(v5 + 732);
            v292 = v136;
            v137 = *(_OWORD *)(v5 + 780);
            v293 = *(_OWORD *)(v5 + 764);
            v294 = v137;
            v138 = *(_OWORD *)(v5 + 716);
            v289 = *(_OWORD *)(v5 + 700);
            v290 = v138;
            v139 = *(_OWORD *)(v133 + 716);
            *(_OWORD *)(v5 + 700) = *(_OWORD *)(v133 + 700);
            *(_OWORD *)(v5 + 716) = v139;
            v140 = *(_OWORD *)(v133 + 732);
            v141 = *(_OWORD *)(v133 + 748);
            v142 = *(_OWORD *)(v133 + 780);
            *(_OWORD *)(v5 + 764) = *(_OWORD *)(v133 + 764);
            *(_OWORD *)(v5 + 780) = v142;
            *(_OWORD *)(v5 + 732) = v140;
            *(_OWORD *)(v5 + 748) = v141;
            v143 = *(_OWORD *)(v133 + 796);
            v144 = *(_OWORD *)(v133 + 812);
            v145 = *(_OWORD *)(v133 + 828);
            *(_OWORD *)(v5 + 840) = *(_OWORD *)(v133 + 840);
            *(_OWORD *)(v5 + 812) = v144;
            *(_OWORD *)(v5 + 828) = v145;
            *(_OWORD *)(v5 + 796) = v143;
            v146 = v296;
            *(_OWORD *)(v133 + 796) = v295;
            *(_OWORD *)(v133 + 812) = v146;
            *(_OWORD *)(v133 + 828) = v297[0];
            *(_OWORD *)(v133 + 840) = *(_OWORD *)((char *)v297 + 12);
            v147 = v292;
            *(_OWORD *)(v133 + 732) = v291;
            *(_OWORD *)(v133 + 748) = v147;
            v148 = v294;
            *(_OWORD *)(v133 + 764) = v293;
            *(_OWORD *)(v133 + 780) = v148;
            v149 = v290;
            *(_OWORD *)(v133 + 700) = v289;
            *(_OWORD *)(v133 + 716) = v149;
            LOBYTE(v134) = *(_BYTE *)(v5 + 856);
            *(_BYTE *)(v5 + 856) = *(_BYTE *)(v133 + 856);
            *(_BYTE *)(v133 + 856) = v134;
            do
              v5 += 864;
            while (!sub_1006B7280((uint64_t)&v237, v5));
            do
              v133 -= 864;
            while ((sub_1006B7280((uint64_t)&v237, v133) & 1) != 0);
          }
          if (v5 - 864 != a1)
            sub_1006B8DD8(a1, v5 - 864);
          sub_1006B8DD8(v5 - 864, (uint64_t)&v237);
          if (SHIBYTE(v254) < 0)
            operator delete((void *)__p);
          if (*(_QWORD *)&v241[8])
          {
            *(_QWORD *)&v241[16] = *(_QWORD *)&v241[8];
            operator delete(*(void **)&v241[8]);
          }
          a4 = 0;
          continue;
        }
        v31 = 0;
        v237 = *(_OWORD *)a1;
        v32 = *(_OWORD *)(a1 + 16);
        v33 = *(_OWORD *)(a1 + 32);
        v34 = *(_OWORD *)(a1 + 48);
        *(_OWORD *)&v240[12] = *(_OWORD *)(a1 + 60);
        *(_DWORD *)v241 = *(_DWORD *)(a1 + 80);
        v35 = *(_OWORD *)(a1 + 88);
        *(_QWORD *)&v241[24] = *(_QWORD *)(a1 + 104);
        v239 = v33;
        *(_OWORD *)v240 = v34;
        v238 = v32;
        *(_OWORD *)&v241[8] = v35;
        *(_QWORD *)(a1 + 96) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 88) = 0;
        v242 = *(_OWORD *)(a1 + 112);
        v36 = *(_OWORD *)(a1 + 128);
        v37 = *(_OWORD *)(a1 + 144);
        v38 = *(_OWORD *)(a1 + 176);
        v244 = *(_OWORD *)(a1 + 160);
        v245 = v38;
        v243[0] = v36;
        v243[1] = v37;
        v39 = *(_OWORD *)(a1 + 192);
        v40 = *(_OWORD *)(a1 + 208);
        v41 = *(_OWORD *)(a1 + 240);
        v248 = *(_OWORD *)(a1 + 224);
        v249 = v41;
        v246 = v39;
        v247 = v40;
        v42 = *(_OWORD *)(a1 + 256);
        v43 = *(_OWORD *)(a1 + 272);
        v44 = *(_OWORD *)(a1 + 288);
        *(_OWORD *)((char *)v252 + 12) = *(_OWORD *)(a1 + 300);
        v251 = v43;
        v252[0] = v44;
        v250 = v42;
        v45 = *(_OWORD *)(a1 + 320);
        v254 = *(_QWORD *)(a1 + 336);
        __p = v45;
        *(_QWORD *)(a1 + 328) = 0;
        *(_QWORD *)(a1 + 336) = 0;
        *(_QWORD *)(a1 + 320) = 0;
        v46 = *(_OWORD *)(a1 + 440);
        v48 = *(_OWORD *)(a1 + 392);
        v47 = *(_OWORD *)(a1 + 408);
        v260 = *(_OWORD *)(a1 + 424);
        v261 = v46;
        v258 = v48;
        v259 = v47;
        v49 = *(_OWORD *)(a1 + 344);
        v50 = *(_OWORD *)(a1 + 376);
        v256 = *(_OWORD *)(a1 + 360);
        v257 = v50;
        v255 = v49;
        v52 = *(_OWORD *)(a1 + 472);
        v51 = *(_OWORD *)(a1 + 488);
        v53 = *(_OWORD *)(a1 + 456);
        v265 = *(_DWORD *)(a1 + 504);
        v263 = v52;
        v264 = v51;
        v262 = v53;
        v54 = *(_OWORD *)(a1 + 512);
        v55 = *(_OWORD *)(a1 + 528);
        v56 = *(_OWORD *)(a1 + 560);
        v268 = *(_OWORD *)(a1 + 544);
        v269 = v56;
        v266 = v54;
        v267 = v55;
        v57 = *(_OWORD *)(a1 + 576);
        v58 = *(_OWORD *)(a1 + 592);
        v59 = *(_OWORD *)(a1 + 624);
        v272 = *(_OWORD *)(a1 + 608);
        v273 = v59;
        v270 = v57;
        v271 = v58;
        v60 = *(_OWORD *)(a1 + 640);
        v61 = *(_OWORD *)(a1 + 656);
        v62 = *(_OWORD *)(a1 + 672);
        v277 = *(_DWORD *)(a1 + 688);
        v275 = v61;
        v276 = v62;
        v274 = v60;
        v278 = *(_DWORD *)(a1 + 696);
        v63 = *(_OWORD *)(a1 + 716);
        v279 = *(_OWORD *)(a1 + 700);
        v280 = v63;
        v64 = *(_OWORD *)(a1 + 780);
        v66 = *(_OWORD *)(a1 + 732);
        v65 = *(_OWORD *)(a1 + 748);
        v283 = *(_OWORD *)(a1 + 764);
        v284 = v64;
        v281 = v66;
        v282 = v65;
        v68 = *(_OWORD *)(a1 + 812);
        v67 = *(_OWORD *)(a1 + 828);
        v69 = *(_OWORD *)(a1 + 796);
        *(_OWORD *)&v287[12] = *(_OWORD *)(a1 + 840);
        v286 = v68;
        *(_OWORD *)v287 = v67;
        v285 = v69;
        v288 = *(_BYTE *)(a1 + 856);
        do
        {
          v70 = sub_1006B7280(a1 + v31 + 864, (uint64_t)&v237);
          v31 += 864;
        }
        while ((v70 & 1) != 0);
        v71 = a1 + v31;
        v72 = a2;
        if (v31 == 864)
        {
          v72 = a2;
          do
          {
            if (v71 >= v72)
              break;
            v72 -= 864;
          }
          while ((sub_1006B7280(v72, (uint64_t)&v237) & 1) == 0);
        }
        else
        {
          do
            v72 -= 864;
          while (!sub_1006B7280(v72, (uint64_t)&v237));
        }
        if (v71 >= v72)
        {
          v91 = v71 - 864;
        }
        else
        {
          v73 = a1 + v31;
          v74 = v72;
          do
          {
            sub_1006B8744((__int128 *)v73, (__int128 *)v74);
            v75 = *(_DWORD *)(v73 + 696);
            *(_DWORD *)(v73 + 696) = *(_DWORD *)(v74 + 696);
            *(_DWORD *)(v74 + 696) = v75;
            v76 = *(_OWORD *)(v73 + 812);
            v295 = *(_OWORD *)(v73 + 796);
            v296 = v76;
            v297[0] = *(_OWORD *)(v73 + 828);
            *(_OWORD *)((char *)v297 + 12) = *(_OWORD *)(v73 + 840);
            v77 = *(_OWORD *)(v73 + 748);
            v291 = *(_OWORD *)(v73 + 732);
            v292 = v77;
            v78 = *(_OWORD *)(v73 + 780);
            v293 = *(_OWORD *)(v73 + 764);
            v294 = v78;
            v79 = *(_OWORD *)(v73 + 716);
            v289 = *(_OWORD *)(v73 + 700);
            v290 = v79;
            v80 = *(_OWORD *)(v74 + 716);
            *(_OWORD *)(v73 + 700) = *(_OWORD *)(v74 + 700);
            *(_OWORD *)(v73 + 716) = v80;
            v81 = *(_OWORD *)(v74 + 732);
            v82 = *(_OWORD *)(v74 + 748);
            v83 = *(_OWORD *)(v74 + 780);
            *(_OWORD *)(v73 + 764) = *(_OWORD *)(v74 + 764);
            *(_OWORD *)(v73 + 780) = v83;
            *(_OWORD *)(v73 + 732) = v81;
            *(_OWORD *)(v73 + 748) = v82;
            v84 = *(_OWORD *)(v74 + 796);
            v85 = *(_OWORD *)(v74 + 812);
            v86 = *(_OWORD *)(v74 + 828);
            *(_OWORD *)(v73 + 840) = *(_OWORD *)(v74 + 840);
            *(_OWORD *)(v73 + 812) = v85;
            *(_OWORD *)(v73 + 828) = v86;
            *(_OWORD *)(v73 + 796) = v84;
            v87 = v296;
            *(_OWORD *)(v74 + 796) = v295;
            *(_OWORD *)(v74 + 812) = v87;
            *(_OWORD *)(v74 + 828) = v297[0];
            *(_OWORD *)(v74 + 840) = *(_OWORD *)((char *)v297 + 12);
            v88 = v292;
            *(_OWORD *)(v74 + 732) = v291;
            *(_OWORD *)(v74 + 748) = v88;
            v89 = v294;
            *(_OWORD *)(v74 + 764) = v293;
            *(_OWORD *)(v74 + 780) = v89;
            v90 = v290;
            *(_OWORD *)(v74 + 700) = v289;
            *(_OWORD *)(v74 + 716) = v90;
            LOBYTE(v75) = *(_BYTE *)(v73 + 856);
            *(_BYTE *)(v73 + 856) = *(_BYTE *)(v74 + 856);
            *(_BYTE *)(v74 + 856) = v75;
            do
              v73 += 864;
            while ((sub_1006B7280(v73, (uint64_t)&v237) & 1) != 0);
            do
              v74 -= 864;
            while (!sub_1006B7280(v74, (uint64_t)&v237));
          }
          while (v73 < v74);
          v91 = v73 - 864;
        }
        if (v91 != a1)
          sub_1006B8DD8(a1, v91);
        sub_1006B8DD8(v91, (uint64_t)&v237);
        if (SHIBYTE(v254) < 0)
          operator delete((void *)__p);
        if (*(_QWORD *)&v241[8])
        {
          *(_QWORD *)&v241[16] = *(_QWORD *)&v241[8];
          operator delete(*(void **)&v241[8]);
        }
        if (v71 < v72)
        {
LABEL_35:
          sub_1001EB460(a1, v91, a3, a4 & 1);
          a4 = 0;
          v5 = v91 + 864;
          continue;
        }
        v92 = sub_1006B82F8(a1, v91);
        v5 = v91 + 864;
        if (!sub_1006B82F8(v91 + 864, a2))
        {
          if (v92)
            continue;
          goto LABEL_35;
        }
        a2 = v91;
        if (!v92)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v8 + 48))
        {
          v147 = *(__n128 *)v8;
          v159 = *(__n128 *)(v8 + 16);
          v192 = *(__n128 *)(v8 + 64);
          v201 = *(__n128 *)(v8 + 80);
          v171 = *(__n128 *)(v8 + 32);
          v183 = *(__n128 *)(v8 + 48);
          v60 = a2[-1];
          v62 = a2[-4];
          v61 = a2[-3];
          *(__n128 *)(v8 + 64) = a2[-2];
          *(__n128 *)(v8 + 80) = v60;
          *(__n128 *)(v8 + 32) = v62;
          *(__n128 *)(v8 + 48) = v61;
          v63 = a2[-5];
          *(__n128 *)v8 = a2[-6];
          *(__n128 *)(v8 + 16) = v63;
          a2[-6] = v147;
          a2[-5] = v159;
          a2[-2] = v192;
          a2[-1] = v201;
          a2[-4] = v171;
          a2[-3] = v183;
        }
        return;
      case 3:
        sub_100DC6AF0((__n128 *)v8, (__n128 *)(v8 + 96), a2 - 6);
        return;
      case 4:
        sub_100DC704C((__n128 *)v8, (__n128 *)(v8 + 96), (__n128 *)(v8 + 192), a2 - 6);
        return;
      case 5:
        v64 = (__n128 *)(v8 + 96);
        v65 = (__n128 *)(v8 + 192);
        v66 = (__n128 *)(v8 + 288);
        sub_100DC704C((__n128 *)v8, (__n128 *)(v8 + 96), (__n128 *)(v8 + 192), (__n128 *)(v8 + 288));
        if ((signed __int32)a2[-3].n128_u32[0] < *(_DWORD *)(v8 + 336))
        {
          v172 = *(__n128 *)(v8 + 320);
          v184 = *(__n128 *)(v8 + 336);
          v193 = *(__n128 *)(v8 + 352);
          v202 = *(__n128 *)(v8 + 368);
          v148 = *v66;
          v160 = *(__n128 *)(v8 + 304);
          v67 = a2[-5];
          *v66 = a2[-6];
          *(__n128 *)(v8 + 304) = v67;
          v68 = a2[-1];
          v70 = a2[-4];
          v69 = a2[-3];
          *(__n128 *)(v8 + 352) = a2[-2];
          *(__n128 *)(v8 + 368) = v68;
          *(__n128 *)(v8 + 320) = v70;
          *(__n128 *)(v8 + 336) = v69;
          a2[-6] = v148;
          a2[-5] = v160;
          a2[-2] = v193;
          a2[-1] = v202;
          a2[-4] = v172;
          a2[-3] = v184;
          if (*(_DWORD *)(v8 + 336) < *(_DWORD *)(v8 + 240))
          {
            v173 = *(_OWORD *)(v8 + 224);
            v185 = *(_OWORD *)(v8 + 240);
            v194 = *(_OWORD *)(v8 + 256);
            v203 = *(_OWORD *)(v8 + 272);
            v149 = *v65;
            v161 = *(_OWORD *)(v8 + 208);
            v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            v72 = *(_OWORD *)(v8 + 368);
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 272) = v72;
            v73 = *(_OWORD *)(v8 + 304);
            *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v73;
            *v66 = v149;
            *(_OWORD *)(v8 + 304) = v161;
            *(_OWORD *)(v8 + 352) = v194;
            *(_OWORD *)(v8 + 368) = v203;
            *(_OWORD *)(v8 + 320) = v173;
            *(_OWORD *)(v8 + 336) = v185;
            if (*(_DWORD *)(v8 + 240) < *(_DWORD *)(v8 + 144))
            {
              v174 = *(_OWORD *)(v8 + 128);
              v186 = *(_OWORD *)(v8 + 144);
              v195 = *(_OWORD *)(v8 + 160);
              v204 = *(_OWORD *)(v8 + 176);
              v150 = *v64;
              v162 = *(_OWORD *)(v8 + 112);
              v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              v75 = *(_OWORD *)(v8 + 272);
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 176) = v75;
              v76 = *(_OWORD *)(v8 + 208);
              *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v76;
              *v65 = v150;
              *(_OWORD *)(v8 + 208) = v162;
              *(_OWORD *)(v8 + 256) = v195;
              *(_OWORD *)(v8 + 272) = v204;
              *(_OWORD *)(v8 + 224) = v174;
              *(_OWORD *)(v8 + 240) = v186;
              if (*(_DWORD *)(v8 + 144) < *(_DWORD *)(v8 + 48))
              {
                v151 = *(__n128 *)v8;
                v163 = *(_OWORD *)(v8 + 16);
                v196 = *(_OWORD *)(v8 + 64);
                v205 = *(_OWORD *)(v8 + 80);
                v175 = *(_OWORD *)(v8 + 32);
                v187 = *(_OWORD *)(v8 + 48);
                v77 = *(_OWORD *)(v8 + 176);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 160);
                *(_OWORD *)(v8 + 80) = v77;
                v78 = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = v78;
                v79 = *(_OWORD *)(v8 + 112);
                *(__n128 *)v8 = *v64;
                *(_OWORD *)(v8 + 16) = v79;
                *v64 = v151;
                *(_OWORD *)(v8 + 112) = v163;
                *(_OWORD *)(v8 + 160) = v196;
                *(_OWORD *)(v8 + 176) = v205;
                *(_OWORD *)(v8 + 128) = v175;
                *(_OWORD *)(v8 + 144) = v187;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2303)
        {
          v80 = (__n128 *)(v8 + 96);
          v82 = (__n128 *)v8 == a2 || v80 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v82)
            {
              v83 = 0;
              v84 = (_OWORD *)v8;
              do
              {
                v85 = v80;
                v86 = *((_DWORD *)v84 + 36);
                if (v86 < *((_DWORD *)v84 + 12))
                {
                  v164 = v85[1];
                  v176 = v85[2];
                  v152 = *v85;
                  v215 = *(_OWORD *)((char *)v84 + 148);
                  v221 = *(_OWORD *)((char *)v84 + 164);
                  v87 = v84[11];
                  v88 = v83;
                  HIDWORD(v221) = v87;
                  while (1)
                  {
                    v89 = (_OWORD *)(v8 + v88);
                    v90 = *(_OWORD *)(v8 + v88 + 48);
                    v89[8] = *(_OWORD *)(v8 + v88 + 32);
                    v89[9] = v90;
                    v91 = *(_OWORD *)(v8 + v88 + 80);
                    v89[10] = *(_OWORD *)(v8 + v88 + 64);
                    v89[11] = v91;
                    v92 = *(_OWORD *)(v8 + v88 + 16);
                    v89[6] = *(_OWORD *)(v8 + v88);
                    v89[7] = v92;
                    if (!v88)
                      break;
                    v88 -= 96;
                    if (v86 >= *((_DWORD *)v89 - 12))
                    {
                      v93 = v8 + v88 + 96;
                      goto LABEL_78;
                    }
                  }
                  v93 = v8;
LABEL_78:
                  *(__n128 *)v93 = v152;
                  *(__n128 *)(v93 + 16) = v164;
                  *(__n128 *)(v93 + 32) = v176;
                  *(_DWORD *)(v93 + 48) = v86;
                  *(_OWORD *)(v93 + 52) = v215;
                  *(_OWORD *)(v93 + 68) = v221;
                  *(_OWORD *)(v93 + 80) = v87;
                }
                v80 = v85 + 6;
                v83 += 96;
                v84 = v85;
              }
              while (&v85[6] != a2);
            }
          }
          else if (!v82)
          {
            do
            {
              v138 = v80;
              v139 = *(_DWORD *)(a1 + 144);
              if (v139 < *(_DWORD *)(a1 + 48))
              {
                v167 = v80[1];
                v179 = v80[2];
                v155 = *v80;
                v218 = *(__n128 *)(a1 + 148);
                *(_OWORD *)v224 = *(_OWORD *)(a1 + 164);
                *(_OWORD *)&v224[12] = *(_OWORD *)(a1 + 176);
                do
                {
                  v140 = v80[-3];
                  v80[2] = v80[-4];
                  v80[3] = v140;
                  v141 = v80[-1];
                  v80[4] = v80[-2];
                  v80[5] = v141;
                  v142 = v80[-5];
                  *v80 = v80[-6];
                  v80[1] = v142;
                  v143 = v80[-9].n128_i32[0];
                  v80 -= 6;
                }
                while (v139 < v143);
                *v80 = v155;
                v80[1] = v167;
                v80[2] = v179;
                v80[3].n128_u32[0] = v139;
                v80[5] = *(__n128 *)&v224[12];
                *(__n128 *)((char *)v80 + 68) = *(__n128 *)v224;
                *(__n128 *)((char *)v80 + 52) = v218;
              }
              v80 = v138 + 6;
              a1 = (uint64_t)v138;
            }
            while (&v138[6] != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v94 = (unint64_t)(v10 - 2) >> 1;
            v95 = v94;
            do
            {
              v96 = v95;
              if (v94 >= v95)
              {
                v97 = (2 * v95) | 1;
                v98 = v8 + 96 * v97;
                if (2 * v95 + 2 < v10)
                {
                  v99 = *(_DWORD *)(v98 + 48);
                  v100 = *(_DWORD *)(v98 + 144);
                  v98 += 96 * (v99 < v100);
                  if (v99 < v100)
                    v97 = 2 * v95 + 2;
                }
                v101 = v8 + 96 * v95;
                v102 = *(_DWORD *)(v101 + 48);
                if (*(_DWORD *)(v98 + 48) >= v102)
                {
                  v165 = *(_OWORD *)(v101 + 16);
                  v177 = *(_OWORD *)(v101 + 32);
                  v153 = *(_OWORD *)v101;
                  *(_OWORD *)&v222[12] = *(_OWORD *)(v101 + 80);
                  v216 = *(_OWORD *)(v101 + 52);
                  *(_OWORD *)v222 = *(_OWORD *)(v101 + 68);
                  do
                  {
                    v103 = (_OWORD *)v101;
                    v101 = v98;
                    v104 = *(_OWORD *)(v98 + 16);
                    *v103 = *(_OWORD *)v98;
                    v103[1] = v104;
                    v105 = *(_OWORD *)(v98 + 32);
                    v106 = *(_OWORD *)(v98 + 48);
                    v107 = *(_OWORD *)(v98 + 80);
                    v103[4] = *(_OWORD *)(v98 + 64);
                    v103[5] = v107;
                    v103[2] = v105;
                    v103[3] = v106;
                    if (v94 < v97)
                      break;
                    v108 = (2 * v97) | 1;
                    v98 = v8 + 96 * v108;
                    v109 = 2 * v97 + 2;
                    if (v109 < v10)
                    {
                      v110 = *(_DWORD *)(v98 + 48);
                      v111 = *(_DWORD *)(v98 + 144);
                      v98 += 96 * (v110 < v111);
                      if (v110 < v111)
                        v108 = v109;
                    }
                    v97 = v108;
                  }
                  while (*(_DWORD *)(v98 + 48) >= v102);
                  *(_OWORD *)v101 = v153;
                  *(_OWORD *)(v101 + 16) = v165;
                  *(_OWORD *)(v101 + 32) = v177;
                  *(_DWORD *)(v101 + 48) = v102;
                  *(_OWORD *)(v101 + 52) = v216;
                  *(_OWORD *)(v101 + 68) = *(_OWORD *)v222;
                  *(_OWORD *)(v101 + 80) = *(_OWORD *)&v222[12];
                }
              }
              v95 = v96 - 1;
            }
            while (v96);
            v112 = v9 / 0x60uLL;
            do
            {
              v113 = 0;
              v154 = *(__n128 *)v8;
              v166 = *(__n128 *)(v8 + 16);
              v197 = *(__n128 *)(v8 + 64);
              v206 = *(__n128 *)(v8 + 80);
              v178 = *(__n128 *)(v8 + 32);
              v188 = *(__n128 *)(v8 + 48);
              v114 = (_OWORD *)v8;
              do
              {
                v115 = (uint64_t)&v114[6 * v113 + 6];
                v116 = (2 * v113) | 1;
                v117 = 2 * v113 + 2;
                if (v117 < v112)
                {
                  v118 = *(_DWORD *)(v115 + 48);
                  v119 = *(_DWORD *)(v115 + 144);
                  v115 += 96 * (v118 < v119);
                  if (v118 < v119)
                    v116 = v117;
                }
                v120 = *(_OWORD *)(v115 + 16);
                *v114 = *(_OWORD *)v115;
                v114[1] = v120;
                v121 = *(_OWORD *)(v115 + 32);
                v122 = *(_OWORD *)(v115 + 48);
                v123 = *(_OWORD *)(v115 + 80);
                v114[4] = *(_OWORD *)(v115 + 64);
                v114[5] = v123;
                v114[2] = v121;
                v114[3] = v122;
                v114 = (_OWORD *)v115;
                v113 = v116;
              }
              while (v116 <= (uint64_t)((unint64_t)(v112 - 2) >> 1));
              a2 -= 6;
              if ((__n128 *)v115 == a2)
              {
                *(__n128 *)v115 = v154;
                *(__n128 *)(v115 + 16) = v166;
                *(__n128 *)(v115 + 64) = v197;
                *(__n128 *)(v115 + 80) = v206;
                *(__n128 *)(v115 + 32) = v178;
                *(__n128 *)(v115 + 48) = v188;
              }
              else
              {
                v124 = a2[1];
                *(__n128 *)v115 = *a2;
                *(__n128 *)(v115 + 16) = v124;
                v125 = a2[2];
                v126 = a2[3];
                v127 = a2[5];
                *(__n128 *)(v115 + 64) = a2[4];
                *(__n128 *)(v115 + 80) = v127;
                *(__n128 *)(v115 + 32) = v125;
                *(__n128 *)(v115 + 48) = v126;
                a2[4] = v197;
                a2[5] = v206;
                a2[2] = v178;
                a2[3] = v188;
                *a2 = v154;
                a2[1] = v166;
                v128 = v115 - v8 + 96;
                if (v128 >= 97)
                {
                  v129 = (v128 / 0x60uLL - 2) >> 1;
                  v130 = (_OWORD *)(v8 + 96 * v129);
                  v131 = *(_DWORD *)(v115 + 48);
                  if (*((_DWORD *)v130 + 12) < v131)
                  {
                    v223 = *(_OWORD *)(v115 + 16);
                    v227 = *(_OWORD *)(v115 + 32);
                    v217 = *(_OWORD *)v115;
                    *(_OWORD *)&v212[12] = *(_OWORD *)(v115 + 80);
                    v209 = *(_OWORD *)(v115 + 52);
                    *(_OWORD *)v212 = *(_OWORD *)(v115 + 68);
                    do
                    {
                      v132 = (_OWORD *)v115;
                      v115 = (uint64_t)v130;
                      v133 = v130[1];
                      *v132 = *v130;
                      v132[1] = v133;
                      v134 = v130[2];
                      v135 = v130[3];
                      v136 = v130[5];
                      v132[4] = v130[4];
                      v132[5] = v136;
                      v132[2] = v134;
                      v132[3] = v135;
                      if (!v129)
                        break;
                      v129 = (v129 - 1) >> 1;
                      v130 = (_OWORD *)(v8 + 96 * v129);
                    }
                    while (*((_DWORD *)v130 + 12) < v131);
                    *(_OWORD *)v115 = v217;
                    *(_OWORD *)(v115 + 16) = v223;
                    *(_OWORD *)(v115 + 32) = v227;
                    *(_DWORD *)(v115 + 48) = v131;
                    *(_OWORD *)(v115 + 52) = v209;
                    *(_OWORD *)(v115 + 68) = *(_OWORD *)v212;
                    *(_OWORD *)(v115 + 80) = *(_OWORD *)&v212[12];
                  }
                }
              }
            }
            while (v112-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 96 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_100DC6AF0((__n128 *)(a1 + 96 * v11), (__n128 *)a1, a2 - 6);
        }
        else
        {
          sub_100DC6AF0((__n128 *)a1, (__n128 *)(a1 + 96 * v11), a2 - 6);
          v13 = 3 * v11;
          v14 = (__n128 *)(a1 + 96 * v11 - 96);
          sub_100DC6AF0((__n128 *)(a1 + 96), v14, a2 - 12);
          v15 = (__n128 *)(a1 + 96 + 32 * v13);
          sub_100DC6AF0((__n128 *)(a1 + 192), v15, a2 - 18);
          sub_100DC6AF0(v14, (__n128 *)v12, v15);
          v144 = *(__n128 *)a1;
          v156 = *(_OWORD *)(a1 + 16);
          v189 = *(_OWORD *)(a1 + 64);
          v198 = *(_OWORD *)(a1 + 80);
          v168 = *(_OWORD *)(a1 + 32);
          v180 = *(_OWORD *)(a1 + 48);
          v16 = *(_OWORD *)(v12 + 80);
          v18 = *(_OWORD *)(v12 + 32);
          v17 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v12 + 64);
          *(_OWORD *)(a1 + 80) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          *(_OWORD *)(a1 + 48) = v17;
          v19 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v19;
          *(__n128 *)v12 = v144;
          *(_OWORD *)(v12 + 16) = v156;
          *(_OWORD *)(v12 + 64) = v189;
          *(_OWORD *)(v12 + 80) = v198;
          *(_OWORD *)(v12 + 32) = v168;
          *(_OWORD *)(v12 + 48) = v180;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(_DWORD *)(a1 + 48);
          if (*(_DWORD *)(a1 - 48) < v20)
            goto LABEL_11;
          v220 = *(_OWORD *)(a1 + 16);
          v226 = *(_OWORD *)(a1 + 32);
          v214 = *(__n128 *)a1;
          v208 = *(_OWORD *)(a1 + 52);
          *(_OWORD *)v211 = *(_OWORD *)(a1 + 68);
          *(_OWORD *)&v211[12] = *(_OWORD *)(a1 + 80);
          if (v20 >= (signed __int32)a2[-3].n128_u32[0])
          {
            v44 = a1 + 96;
            do
            {
              v8 = v44;
              if (v44 >= (unint64_t)a2)
                break;
              v45 = *(_DWORD *)(v44 + 48);
              v44 += 96;
            }
            while (v20 >= v45);
          }
          else
          {
            v42 = a1;
            do
            {
              v8 = v42 + 96;
              v43 = *(_DWORD *)(v42 + 144);
              v42 += 96;
            }
            while (v20 >= v43);
          }
          v46 = a2;
          if (v8 < (unint64_t)a2)
          {
            v47 = a2;
            do
            {
              v46 = v47 - 6;
              v48 = v47[-3].n128_i32[0];
              v47 -= 6;
            }
            while (v20 < v48);
          }
          while (v8 < (unint64_t)v46)
          {
            v146 = *(__n128 *)v8;
            v158 = *(__n128 *)(v8 + 16);
            v191 = *(__n128 *)(v8 + 64);
            v200 = *(__n128 *)(v8 + 80);
            v170 = *(__n128 *)(v8 + 32);
            v182 = *(__n128 *)(v8 + 48);
            v49 = v46[5];
            v51 = v46[2];
            v50 = v46[3];
            *(__n128 *)(v8 + 64) = v46[4];
            *(__n128 *)(v8 + 80) = v49;
            *(__n128 *)(v8 + 32) = v51;
            *(__n128 *)(v8 + 48) = v50;
            v52 = v46[1];
            *(__n128 *)v8 = *v46;
            *(__n128 *)(v8 + 16) = v52;
            *v46 = v146;
            v46[1] = v158;
            v46[4] = v191;
            v46[5] = v200;
            v46[2] = v170;
            v46[3] = v182;
            do
            {
              v53 = *(_DWORD *)(v8 + 144);
              v8 += 96;
            }
            while (v20 >= v53);
            do
            {
              v54 = v46[-3].n128_i32[0];
              v46 -= 6;
            }
            while (v20 < v54);
          }
          v55 = (__n128 *)(v8 - 96);
          if (v8 - 96 != a1)
          {
            v56 = *(_OWORD *)(v8 - 80);
            *(__n128 *)a1 = *v55;
            *(_OWORD *)(a1 + 16) = v56;
            v57 = *(_OWORD *)(v8 - 64);
            v58 = *(_OWORD *)(v8 - 48);
            v59 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 80) = v59;
            *(_OWORD *)(a1 + 32) = v57;
            *(_OWORD *)(a1 + 48) = v58;
          }
          a4 = 0;
          *v55 = v214;
          *(_OWORD *)(v8 - 80) = v220;
          *(_OWORD *)(v8 - 64) = v226;
          *(_DWORD *)(v8 - 48) = v20;
          *(_OWORD *)(v8 - 16) = *(_OWORD *)&v211[12];
          *(_OWORD *)(v8 - 28) = *(_OWORD *)v211;
          *(_OWORD *)(v8 - 44) = v208;
          continue;
        }
        v20 = *(_DWORD *)(a1 + 48);
LABEL_11:
        v21 = 0;
        v219 = *(_OWORD *)(a1 + 16);
        v225 = *(_OWORD *)(a1 + 32);
        v213 = *(__n128 *)a1;
        v207 = *(_OWORD *)(a1 + 52);
        *(_OWORD *)v210 = *(_OWORD *)(a1 + 68);
        *(_OWORD *)&v210[12] = *(_OWORD *)(a1 + 80);
        do
        {
          v22 = *(_DWORD *)(a1 + v21 + 144);
          v21 += 96;
        }
        while (v22 < v20);
        v23 = a1 + v21;
        v24 = a2;
        if (v21 == 96)
        {
          v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            v25 = v27 - 6;
            v28 = v27[-3].n128_i32[0];
            v27 -= 6;
            if (v28 < v20)
              goto LABEL_21;
          }
          v25 = v27;
        }
        else
        {
          do
          {
            v25 = v24 - 6;
            v26 = v24[-3].n128_i32[0];
            v24 -= 6;
          }
          while (v26 >= v20);
        }
LABEL_21:
        v8 = v23;
        if (v23 < (unint64_t)v25)
        {
          v29 = v25;
          do
          {
            v145 = *(__n128 *)v8;
            v157 = *(__n128 *)(v8 + 16);
            v190 = *(__n128 *)(v8 + 64);
            v199 = *(__n128 *)(v8 + 80);
            v169 = *(__n128 *)(v8 + 32);
            v181 = *(__n128 *)(v8 + 48);
            v30 = v29[5];
            v32 = v29[2];
            v31 = v29[3];
            *(__n128 *)(v8 + 64) = v29[4];
            *(__n128 *)(v8 + 80) = v30;
            *(__n128 *)(v8 + 32) = v32;
            *(__n128 *)(v8 + 48) = v31;
            v33 = v29[1];
            *(__n128 *)v8 = *v29;
            *(__n128 *)(v8 + 16) = v33;
            *v29 = v145;
            v29[1] = v157;
            v29[4] = v190;
            v29[5] = v199;
            v29[2] = v169;
            v29[3] = v181;
            do
            {
              v34 = *(_DWORD *)(v8 + 144);
              v8 += 96;
            }
            while (v34 < v20);
            do
            {
              v35 = v29[-3].n128_i32[0];
              v29 -= 6;
            }
            while (v35 >= v20);
          }
          while (v8 < (unint64_t)v29);
        }
        v36 = (__n128 *)(v8 - 96);
        if (v8 - 96 != a1)
        {
          v37 = *(_OWORD *)(v8 - 80);
          *(__n128 *)a1 = *v36;
          *(_OWORD *)(a1 + 16) = v37;
          v38 = *(_OWORD *)(v8 - 64);
          v39 = *(_OWORD *)(v8 - 48);
          v40 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 80) = v40;
          *(_OWORD *)(a1 + 32) = v38;
          *(_OWORD *)(a1 + 48) = v39;
        }
        *v36 = v213;
        *(_OWORD *)(v8 - 80) = v219;
        *(_OWORD *)(v8 - 64) = v225;
        *(_DWORD *)(v8 - 48) = v20;
        *(_OWORD *)(v8 - 16) = *(_OWORD *)&v210[12];
        *(_OWORD *)(v8 - 28) = *(_OWORD *)v210;
        *(_OWORD *)(v8 - 44) = v207;
        if (v23 < (unint64_t)v25)
        {
LABEL_32:
          sub_100212FE4(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = sub_100DC6C98(a1, v8 - 96);
        if (!sub_100DC6C98(v8, (uint64_t)a2))
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = (__n128 *)(v8 - 96);
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 24;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_10114ED7C(a3, (_QWORD *)a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = (const void *)*((_QWORD *)a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *((_QWORD *)a2 - 1) = v29;
        }
        return;
      case 3uLL:
        sub_10114F008(v10, v10 + 3, (_QWORD *)a2 - 3, a3);
        return;
      case 4uLL:
        sub_10114F69C((uint64_t)v10, v10 + 3, v10 + 6, (_QWORD *)a2 - 3, a3);
        return;
      case 5uLL:
        sub_10114F784((uint64_t)v10, v10 + 3, v10 + 6, v10 + 9, (_QWORD *)a2 - 3, a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_10114EDE4((uint64_t)v10, a2, a3);
          else
            sub_10114EF04(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_10114F008(&v10[3 * v15], v10, (_QWORD *)a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10114F008(v10, &v10[3 * v15], (_QWORD *)a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_10114F008(v10 + 3, v18, (_QWORD *)a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_10114F008(v19, v20, (_QWORD *)a2 - 9, a3);
            sub_10114F008(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_10114ED7C(a3, (_QWORD *)(a1 - 24), (const void **)a1))
          {
            v10 = sub_10114F150((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = (const void **)sub_10114F2E0((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_10114F46C(a1, v22, a3);
          v10 = v22 + 3;
          if (!sub_10114F46C((uint64_t)(v22 + 3), (const void **)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_100213B88(a1, v22, a3, -v12, a5 & 1);
            v10 = v22 + 3;
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (char *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != (const void **)a2)
          sub_10114F8A4((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (uint64_t)a2 - v9;
    v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 3);
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(a2 - 2) < *(double *)(v9 + 8))
        {
          v26 = *(_QWORD *)v9;
          *(double *)v9 = *(a2 - 3);
          *((_QWORD *)a2 - 3) = v26;
          v27 = *(_QWORD *)(v9 + 8);
          *(double *)(v9 + 8) = *(a2 - 2);
          *((_QWORD *)a2 - 2) = v27;
          v28 = *(_QWORD *)(v9 + 16);
          *(double *)(v9 + 16) = *(a2 - 1);
          *((_QWORD *)a2 - 1) = v28;
        }
        return;
      case 3uLL:
        sub_10025AA88((_QWORD *)v9, (uint64_t *)(v9 + 24), (uint64_t *)a2 - 3);
        return;
      case 4uLL:
        sub_10025AFB4(v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), (uint64_t)(a2 - 3));
        return;
      case 5uLL:
        sub_10025B0AC(v9, (uint64_t *)(v9 + 24), (uint64_t *)(v9 + 48), (double *)(v9 + 72), a2 - 3);
        return;
      default:
        if (v12 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_10025A964(v9, a2);
          else
            sub_10025AA04((_QWORD *)v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = (uint64_t *)(v9 + 24 * (v13 >> 1));
          if ((unint64_t)v12 < 0xC01)
          {
            sub_10025AA88((_QWORD *)(v9 + 24 * v14), (uint64_t *)v9, (uint64_t *)a2 - 3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10025AA88((_QWORD *)v9, (uint64_t *)(v9 + 24 * v14), (uint64_t *)a2 - 3);
            v16 = 3 * v14;
            v17 = (uint64_t *)(v9 + 24 * v14 - 24);
            sub_10025AA88((_QWORD *)(v9 + 24), v17, (uint64_t *)a2 - 6);
            v18 = (_QWORD *)(v9 + 48);
            v19 = (uint64_t *)(v9 + 24 + 8 * v16);
            sub_10025AA88(v18, v19, (uint64_t *)a2 - 9);
            sub_10025AA88(v17, v15, v19);
            v20 = *(double *)a1;
            *(_QWORD *)a1 = *v15;
            *(double *)v15 = v20;
            v21 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v15[1];
            v15[1] = v21;
            v22 = *(_QWORD *)(a1 + 16);
            *(_QWORD *)(a1 + 16) = v15[2];
            v15[2] = v22;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(double *)(a1 - 16) >= *(double *)(a1 + 8))
          {
            v9 = sub_10025ABD0((double *)a1, a2);
            goto LABEL_16;
          }
LABEL_11:
          v23 = sub_10025ACDC((double *)a1, a2);
          if ((v24 & 1) == 0)
            goto LABEL_14;
          v25 = sub_10025ADEC(a1, v23);
          v9 = v23 + 24;
          if (!sub_10025ADEC(v23 + 24, (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v25)
              continue;
LABEL_14:
            sub_10025A5C8(a1, v23, a3, -v11, a5 & 1);
            v9 = v23 + 24;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = (double *)v23;
          if (v25)
            return;
          goto LABEL_1;
        }
        if ((double *)v9 != a2)
          sub_10025B1F0(v9, a2, a2, a3);
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 5;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*((double *)a2 - 3) < v9[1])
        {
          v22 = *(_QWORD *)v9;
          *(_QWORD *)v9 = *(a2 - 4);
          *(a2 - 4) = v22;
          v23 = *((_QWORD *)v9 + 1);
          *((_QWORD *)v9 + 1) = *(a2 - 3);
          *(a2 - 3) = v23;
          v24 = *((_QWORD *)v9 + 2);
          *((_QWORD *)v9 + 2) = *(a2 - 2);
          *(a2 - 2) = v24;
          LODWORD(v24) = *((_DWORD *)v9 + 6);
          *((_DWORD *)v9 + 6) = *((_DWORD *)a2 - 2);
          *((_DWORD *)a2 - 2) = v24;
        }
        return;
      case 3uLL:
        sub_10025BF14((uint64_t *)v9, (uint64_t *)v9 + 4, a2 - 4);
        return;
      case 4uLL:
        sub_10025C4E4((uint64_t)v9, (uint64_t)(v9 + 4), (uint64_t)(v9 + 8), (uint64_t)(a2 - 4));
        return;
      case 5uLL:
        sub_10025C60C((uint64_t)v9, (uint64_t)(v9 + 4), (uint64_t)(v9 + 8), (uint64_t)(v9 + 12), (uint64_t)(a2 - 4));
        return;
      default:
        if (v12 <= 767)
        {
          if ((a5 & 1) != 0)
            sub_10025BDD0((uint64_t)v9, a2);
          else
            sub_10025BE80(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[4 * (v13 >> 1)];
          if ((unint64_t)v12 <= 0x1000)
          {
            sub_10025BF14((uint64_t *)&v9[4 * (v13 >> 1)], (uint64_t *)v9, a2 - 4);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10025BF14((uint64_t *)v9, (uint64_t *)&v9[4 * (v13 >> 1)], a2 - 4);
            sub_10025BF14((uint64_t *)v9 + 4, (uint64_t *)v15 - 4, a2 - 8);
            sub_10025BF14((uint64_t *)v9 + 8, (uint64_t *)&v9[4 * v14 + 4], a2 - 12);
            sub_10025BF14((uint64_t *)v15 - 4, (uint64_t *)v15, (uint64_t *)&v9[4 * v14 + 4]);
            v16 = *(_QWORD *)v9;
            *v9 = *v15;
            *(_QWORD *)v15 = v16;
            v17 = *((_QWORD *)v9 + 1);
            v9[1] = v15[1];
            *((_QWORD *)v15 + 1) = v17;
            v18 = *((_QWORD *)v9 + 2);
            v9[2] = v15[2];
            *((_QWORD *)v15 + 2) = v18;
            LODWORD(v18) = *((_DWORD *)v9 + 6);
            *((_DWORD *)v9 + 6) = *((_DWORD *)v15 + 6);
            *((_DWORD *)v15 + 6) = v18;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(v9 - 3) >= v9[1])
          {
            v9 = sub_10025C0AC((uint64_t *)v9, (unint64_t)a2);
            goto LABEL_16;
          }
LABEL_11:
          v19 = sub_10025C1D8(v9, (unint64_t)a2);
          if ((v20 & 1) == 0)
            goto LABEL_14;
          v21 = sub_10025C308((uint64_t)v9, (uint64_t)v19);
          v9 = (double *)(v19 + 4);
          if (!sub_10025C308((uint64_t)(v19 + 4), (uint64_t)a2))
          {
            v10 = v11 + 1;
            if (v21)
              continue;
LABEL_14:
            sub_10025BA34(a1, v19, a3, -v11, a5 & 1);
            v9 = (double *)(v19 + 4);
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v19;
          if (v21)
            return;
          goto LABEL_1;
        }
        if (v9 != (double *)a2)
          sub_10025C790((uint64_t)v9, a2, a2, a3);
        return;
    }
  }
}

  v6 = (__int128 *)a2;
  v7 = a2 - 30;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v6 - (char *)v8;
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v101 = bswap64(*(a2 - 30));
        v102 = bswap64(*a1);
        if (v101 != v102 || (v101 = bswap64(*(a2 - 29)), v102 = bswap64(a1[1]), v101 != v102))
        {
          if (v101 < v102)
            v211 = -1;
          else
            v211 = 1;
          if (v211 < 0)
            sub_100302544((__int128 *)a1, (__int128 *)a2 - 15);
        }
        return;
      case 3:
        sub_1003045A0(a1, a1 + 30, v7);
        return;
      case 4:
        sub_100304B5C(a1, a1 + 30, a1 + 60, v7);
        return;
      case 5:
        sub_1003043F4(a1, a1 + 30, a1 + 60, a1 + 90, v7);
        return;
      default:
        if (v9 > 5759)
        {
          if (!a3)
          {
            if (a1 != (unint64_t *)v6)
            {
              v126 = (unint64_t)(v10 - 2) >> 1;
              v127 = v126;
              do
              {
                v128 = v127;
                if (v126 >= v127)
                {
                  v129 = (2 * v127) | 1;
                  v130 = &a1[30 * v129];
                  if (2 * v127 + 2 < v10)
                  {
                    v131 = bswap64(*v130);
                    v132 = bswap64(v130[30]);
                    if (v131 == v132 && (v131 = bswap64(v130[1]), v132 = bswap64(v130[31]), v131 == v132))
                      v133 = 0;
                    else
                      v133 = v131 < v132 ? -1 : 1;
                    if (v133 < 0)
                    {
                      v130 += 30;
                      v129 = 2 * v127 + 2;
                    }
                  }
                  v134 = &a1[30 * v127];
                  v135 = bswap64(*v130);
                  v136 = bswap64(*v134);
                  if (v135 == v136 && (v135 = bswap64(v130[1]), v136 = bswap64(v134[1]), v135 == v136)
                    || (v135 < v136 ? (v137 = -1) : (v137 = 1), (v137 & 0x80000000) == 0))
                  {
                    v138 = *(_OWORD *)v134;
                    v243 = v134[2];
                    v242 = v138;
                    v139 = &a1[30 * v128];
                    v140 = *(_OWORD *)(v139 + 3);
                    v245 = v139[5];
                    __p = v140;
                    v139[4] = 0;
                    v139[5] = 0;
                    v139[3] = 0;
                    v141 = *((_OWORD *)v139 + 3);
                    *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v139 + 60);
                    v246[0] = v141;
                    sub_1002DF194(v247);
                    v142 = &a1[30 * v128];
                    v143 = *(_OWORD *)(v142 + 27);
                    v249 = *((_BYTE *)v142 + 232);
                    v248 = v143;
                    do
                    {
                      v144 = v130;
                      v145 = *(_OWORD *)v130;
                      v134[2] = v130[2];
                      *(_OWORD *)v134 = v145;
                      v146 = (void **)(v134 + 3);
                      if (*((char *)v134 + 47) < 0)
                        operator delete(*v146);
                      v147 = *(_OWORD *)(v144 + 3);
                      v134[5] = v144[5];
                      *(_OWORD *)v146 = v147;
                      *((_BYTE *)v144 + 47) = 0;
                      *((_BYTE *)v144 + 24) = 0;
                      v148 = *((_OWORD *)v144 + 3);
                      *(_OWORD *)((char *)v134 + 60) = *(_OWORD *)((char *)v144 + 60);
                      *((_OWORD *)v134 + 3) = v148;
                      sub_1002E0BA0((uint64_t)(v134 + 10), (uint64_t)(v144 + 10));
                      v149 = *(_OWORD *)(v144 + 27);
                      *((_BYTE *)v134 + 232) = *((_BYTE *)v144 + 232);
                      *(_OWORD *)(v134 + 27) = v149;
                      if (v126 < v129)
                        break;
                      v130 = &a1[30 * ((2 * v129) | 1)];
                      if (2 * v129 + 2 >= v10)
                      {
                        v129 = (2 * v129) | 1;
                      }
                      else
                      {
                        v150 = bswap64(*v130);
                        v151 = bswap64(v130[30]);
                        if (v150 == v151 && (v150 = bswap64(v130[1]), v151 = bswap64(v130[31]), v150 == v151))
                          v152 = 0;
                        else
                          v152 = v150 < v151 ? -1 : 1;
                        if (v152 >= 0)
                        {
                          v129 = (2 * v129) | 1;
                        }
                        else
                        {
                          v130 += 30;
                          v129 = 2 * v129 + 2;
                        }
                      }
                      v153 = bswap64(*v130);
                      v154 = bswap64(v242);
                      if (v153 == v154
                        && (v153 = bswap64(v130[1]), v154 = bswap64(*((unint64_t *)&v242 + 1)), v153 == v154))
                      {
                        v155 = 0;
                      }
                      else
                      {
                        v155 = v153 < v154 ? -1 : 1;
                      }
                      v134 = v144;
                    }
                    while ((v155 & 0x80000000) == 0);
                    v156 = (void **)(v144 + 3);
                    v157 = v242;
                    v144[2] = v243;
                    *(_OWORD *)v144 = v157;
                    if (*((char *)v144 + 47) < 0)
                      operator delete(*v156);
                    v158 = __p;
                    v144[5] = v245;
                    *(_OWORD *)v156 = v158;
                    HIBYTE(v245) = 0;
                    LOBYTE(__p) = 0;
                    v159 = *(_OWORD *)((char *)v246 + 12);
                    *((_OWORD *)v144 + 3) = v246[0];
                    *(_OWORD *)((char *)v144 + 60) = v159;
                    sub_1002E0BA0((uint64_t)(v144 + 10), (uint64_t)v247);
                    v160 = v248;
                    *((_BYTE *)v144 + 232) = v249;
                    *(_OWORD *)(v144 + 27) = v160;
                    sub_1002DF2E0(v247);
                    if (SHIBYTE(v245) < 0)
                      operator delete((void *)__p);
                  }
                }
                v127 = v128 - 1;
              }
              while (v128);
              v161 = v9 / 0xF0uLL;
              v230 = (__int128 *)(a1 + 3);
              do
              {
                v235 = a1[2];
                v234 = *(_OWORD *)a1;
                v236 = *v230;
                v237 = a1[5];
                a1[4] = 0;
                a1[5] = 0;
                *(_QWORD *)v230 = 0;
                *(_OWORD *)v238 = *((_OWORD *)a1 + 3);
                *(_OWORD *)&v238[12] = *(_OWORD *)((char *)a1 + 60);
                sub_1002DF194(v239);
                v162 = 0;
                v163 = *(_OWORD *)(a1 + 27);
                v241 = *((_BYTE *)a1 + 232);
                v240 = v163;
                v164 = (uint64_t)a1;
                do
                {
                  v165 = v164 + 240 * v162 + 240;
                  v166 = 2 * v162;
                  v162 = (2 * v162) | 1;
                  if (v166 + 2 < v161)
                  {
                    v167 = bswap64(*(_QWORD *)v165);
                    v168 = bswap64(*(_QWORD *)(v165 + 240));
                    if (v167 == v168
                      && (v167 = bswap64(*(_QWORD *)(v165 + 8)), v168 = bswap64(*(_QWORD *)(v165 + 248)), v167 == v168))
                    {
                      v169 = 0;
                    }
                    else
                    {
                      v169 = v167 < v168 ? -1 : 1;
                    }
                    if (v169 < 0)
                    {
                      v165 += 240;
                      v162 = v166 + 2;
                    }
                  }
                  v170 = *(_OWORD *)v165;
                  *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
                  *(_OWORD *)v164 = v170;
                  v171 = (void **)(v164 + 24);
                  if (*(char *)(v164 + 47) < 0)
                    operator delete(*v171);
                  v172 = *(_OWORD *)(v165 + 24);
                  *(_QWORD *)(v164 + 40) = *(_QWORD *)(v165 + 40);
                  *(_OWORD *)v171 = v172;
                  *(_BYTE *)(v165 + 47) = 0;
                  *(_BYTE *)(v165 + 24) = 0;
                  v173 = *(_OWORD *)(v165 + 48);
                  *(_OWORD *)(v164 + 60) = *(_OWORD *)(v165 + 60);
                  *(_OWORD *)(v164 + 48) = v173;
                  sub_1002E0BA0(v164 + 80, v165 + 80);
                  v174 = *(_OWORD *)(v165 + 216);
                  *(_BYTE *)(v164 + 232) = *(_BYTE *)(v165 + 232);
                  *(_OWORD *)(v164 + 216) = v174;
                  v164 = v165;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                v175 = (void **)(v165 + 24);
                v176 = (__int128 *)(v165 + 48);
                v232 = (__int128 *)(v165 + 216);
                if ((unint64_t *)v165 == a2 - 30)
                {
                  *(_QWORD *)(v165 + 16) = v235;
                  *(_OWORD *)v165 = v234;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  *(_QWORD *)(v165 + 40) = v237;
                  *(_OWORD *)v175 = v236;
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)&v238[12];
                  *v176 = *(_OWORD *)v238;
                  sub_1002E0BA0(v165 + 80, (uint64_t)v239);
                  v190 = v240;
                  *(_BYTE *)(v165 + 232) = v241;
                  *v232 = v190;
                }
                else
                {
                  v177 = *((_OWORD *)a2 - 15);
                  *(_QWORD *)(v165 + 16) = *(a2 - 28);
                  *(_OWORD *)v165 = v177;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  v178 = *(_OWORD *)(a2 - 27);
                  *(_QWORD *)(v165 + 40) = *(a2 - 25);
                  *(_OWORD *)v175 = v178;
                  *((_BYTE *)a2 - 193) = 0;
                  *((_BYTE *)a2 - 216) = 0;
                  v179 = *((_OWORD *)a2 - 12);
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)a2 - 180);
                  *v176 = v179;
                  sub_1002E0BA0(v165 + 80, (uint64_t)(a2 - 20));
                  v180 = (void **)(a2 - 27);
                  v181 = *(_OWORD *)(a2 - 3);
                  *(_BYTE *)(v165 + 232) = *((_BYTE *)a2 - 8);
                  *v232 = v181;
                  *(a2 - 28) = v235;
                  *((_OWORD *)a2 - 15) = v234;
                  if (*((char *)a2 - 193) < 0)
                    operator delete(*v180);
                  v182 = a2 - 24;
                  *(a2 - 25) = v237;
                  *(_OWORD *)v180 = v236;
                  *(_OWORD *)((char *)v182 + 12) = *(_OWORD *)&v238[12];
                  *(_OWORD *)v182 = *(_OWORD *)v238;
                  sub_1002E0BA0((uint64_t)(a2 - 20), (uint64_t)v239);
                  v183 = a2 - 3;
                  v184 = v240;
                  *((_BYTE *)v183 + 16) = v241;
                  *(_OWORD *)v183 = v184;
                  v185 = v165 - (_QWORD)a1 + 240;
                  if (v185 >= 241)
                  {
                    v186 = (v185 / 0xF0uLL - 2) >> 1;
                    v187 = &a1[30 * v186];
                    v188 = bswap64(*v187);
                    v189 = bswap64(*(_QWORD *)v165);
                    if (v188 != v189 || (v188 = bswap64(v187[1]), v189 = bswap64(*(_QWORD *)(v165 + 8)), v188 != v189))
                    {
                      v191 = v188 < v189 ? -1 : 1;
                      if (v191 < 0)
                      {
                        v192 = *(_OWORD *)v165;
                        v243 = *(_QWORD *)(v165 + 16);
                        v242 = v192;
                        v193 = *(_OWORD *)v175;
                        v245 = *(_QWORD *)(v165 + 40);
                        __p = v193;
                        *(_QWORD *)(v165 + 32) = 0;
                        *(_QWORD *)(v165 + 40) = 0;
                        *v175 = 0;
                        v194 = *v176;
                        *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)(v165 + 60);
                        v246[0] = v194;
                        sub_1002DF194(v247);
                        v195 = *v232;
                        v249 = *(_BYTE *)(v165 + 232);
                        v248 = v195;
                        do
                        {
                          v196 = (uint64_t)v187;
                          v197 = *(_OWORD *)v187;
                          *(_QWORD *)(v165 + 16) = v187[2];
                          *(_OWORD *)v165 = v197;
                          v198 = (void **)(v165 + 24);
                          if (*(char *)(v165 + 47) < 0)
                            operator delete(*v198);
                          v199 = *(_OWORD *)(v187 + 3);
                          *(_QWORD *)(v165 + 40) = v187[5];
                          *(_OWORD *)v198 = v199;
                          *((_BYTE *)v187 + 47) = 0;
                          *((_BYTE *)v187 + 24) = 0;
                          v200 = *((_OWORD *)v187 + 3);
                          *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)v187 + 60);
                          *(_OWORD *)(v165 + 48) = v200;
                          sub_1002E0BA0(v165 + 80, (uint64_t)(v187 + 10));
                          v201 = *(_OWORD *)(v187 + 27);
                          *(_BYTE *)(v165 + 232) = *((_BYTE *)v187 + 232);
                          *(_OWORD *)(v165 + 216) = v201;
                          if (!v186)
                            break;
                          v186 = (v186 - 1) >> 1;
                          v187 = &a1[30 * v186];
                          v202 = bswap64(*v187);
                          v203 = bswap64(v242);
                          if (v202 == v203
                            && (v202 = bswap64(v187[1]), v203 = bswap64(*((unint64_t *)&v242 + 1)), v202 == v203))
                          {
                            v204 = 0;
                          }
                          else
                          {
                            v204 = v202 < v203 ? -1 : 1;
                          }
                          v165 = v196;
                        }
                        while (v204 < 0);
                        v205 = (void **)(v196 + 24);
                        v206 = v242;
                        *(_QWORD *)(v196 + 16) = v243;
                        *(_OWORD *)v196 = v206;
                        if (*(char *)(v196 + 47) < 0)
                          operator delete(*v205);
                        v207 = __p;
                        *(_QWORD *)(v196 + 40) = v245;
                        *(_OWORD *)v205 = v207;
                        HIBYTE(v245) = 0;
                        LOBYTE(__p) = 0;
                        v208 = *(_OWORD *)((char *)v246 + 12);
                        *(_OWORD *)(v196 + 48) = v246[0];
                        *(_OWORD *)(v196 + 60) = v208;
                        sub_1002E0BA0(v196 + 80, (uint64_t)v247);
                        v209 = v248;
                        *(_BYTE *)(v196 + 232) = v249;
                        *(_OWORD *)(v196 + 216) = v209;
                        sub_1002DF2E0(v247);
                        if (SHIBYTE(v245) < 0)
                          operator delete((void *)__p);
                      }
                    }
                  }
                }
                sub_1002DF2E0(v239);
                a2 -= 30;
              }
              while (v161-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &a1[30 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x7801)
          {
            sub_1003045A0(v12, a1, v7);
          }
          else
          {
            sub_1003045A0(a1, v12, v7);
            sub_1003045A0(a1 + 30, &a1[30 * v11 - 30], a2 - 60);
            sub_1003045A0(a1 + 60, &a1[30 * v11 + 30], a2 - 90);
            sub_1003045A0(&a1[30 * v11 - 30], v12, &a1[30 * v11 + 30]);
            sub_100302544((__int128 *)a1, (__int128 *)v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            if ((v13 = bswap64(*(a1 - 30)), v14 = bswap64(*a1), v13 == v14)
              && (v13 = bswap64(*(a1 - 29)), v14 = bswap64(a1[1]), v13 == v14)
              || (v13 < v14 ? (v22 = -1) : (v22 = 1), (v22 & 0x80000000) == 0))
            {
              v15 = *(_OWORD *)a1;
              v243 = a1[2];
              v242 = v15;
              v16 = a1[5];
              __p = *(_OWORD *)(a1 + 3);
              v245 = v16;
              a1[4] = 0;
              a1[5] = 0;
              a1[3] = 0;
              v17 = *(_OWORD *)((char *)a1 + 60);
              v246[0] = *((_OWORD *)a1 + 3);
              *(_OWORD *)((char *)v246 + 12) = v17;
              sub_1002DF194(v247);
              v18 = *(_OWORD *)(a1 + 27);
              v249 = *((_BYTE *)a1 + 232);
              v248 = v18;
              v19 = bswap64(v242);
              v20 = bswap64(*v7);
              if (v19 == v20
                && (v19 = bswap64(*((unint64_t *)&v242 + 1)), v20 = bswap64(*(a2 - 29)), v19 == v20))
              {
                v21 = 0;
              }
              else if (v19 < v20)
              {
                v21 = -1;
              }
              else
              {
                v21 = 1;
              }
              if (v21 < 0)
              {
                v69 = a1;
                v8 = a1;
                do
                {
                  v70 = v8[30];
                  v8 += 30;
                  v71 = bswap64(v242);
                  v72 = bswap64(v70);
                  if (v71 == v72
                    && (v71 = bswap64(*((unint64_t *)&v242 + 1)), v72 = bswap64(v69[31]), v71 == v72))
                  {
                    v73 = 0;
                  }
                  else if (v71 < v72)
                  {
                    v73 = -1;
                  }
                  else
                  {
                    v73 = 1;
                  }
                  v69 = v8;
                }
                while ((v73 & 0x80000000) == 0);
              }
              else
              {
                v65 = a1 + 30;
                do
                {
                  v8 = v65;
                  if (v65 >= (unint64_t *)v6)
                    break;
                  v66 = bswap64(v242);
                  v67 = bswap64(*v8);
                  if (v66 == v67 && (v66 = bswap64(*((unint64_t *)&v242 + 1)), v67 = bswap64(v8[1]), v66 == v67))
                    v68 = 0;
                  else
                    v68 = v66 < v67 ? -1 : 1;
                  v65 = v8 + 30;
                }
                while ((v68 & 0x80000000) == 0);
              }
              v74 = v6;
              if (v8 < (unint64_t *)v6)
              {
                v75 = v6;
                v74 = v6;
                do
                {
                  v76 = *((_QWORD *)v74 - 30);
                  v74 -= 15;
                  v77 = bswap64(v242);
                  v78 = bswap64(v76);
                  if (v77 == v78
                    && (v77 = bswap64(*((unint64_t *)&v242 + 1)), v78 = bswap64(*((_QWORD *)v75 - 29)),
                                                                         v77 == v78))
                  {
                    v79 = 0;
                  }
                  else if (v77 < v78)
                  {
                    v79 = -1;
                  }
                  else
                  {
                    v79 = 1;
                  }
                  v75 = v74;
                }
                while (v79 < 0);
              }
              while (v8 < (unint64_t *)v74)
              {
                sub_100302544((__int128 *)v8, v74);
                v80 = v8;
                do
                {
                  v81 = v8[30];
                  v8 += 30;
                  v82 = bswap64(v242);
                  v83 = bswap64(v81);
                  if (v82 == v83
                    && (v82 = bswap64(*((unint64_t *)&v242 + 1)), v83 = bswap64(v80[31]), v82 == v83))
                  {
                    v84 = 0;
                  }
                  else if (v82 < v83)
                  {
                    v84 = -1;
                  }
                  else
                  {
                    v84 = 1;
                  }
                  v80 = v8;
                }
                while ((v84 & 0x80000000) == 0);
                v85 = v74;
                do
                {
                  v86 = *((_QWORD *)v74 - 30);
                  v74 -= 15;
                  v87 = bswap64(v242);
                  v88 = bswap64(v86);
                  if (v87 == v88
                    && (v87 = bswap64(*((unint64_t *)&v242 + 1)), v88 = bswap64(*((_QWORD *)v85 - 29)),
                                                                         v87 == v88))
                  {
                    v89 = 0;
                  }
                  else if (v87 < v88)
                  {
                    v89 = -1;
                  }
                  else
                  {
                    v89 = 1;
                  }
                  v85 = v74;
                }
                while (v89 < 0);
              }
              v90 = v8 - 30;
              if (v8 - 30 != a1)
              {
                v91 = (void **)(a1 + 3);
                v92 = *(_OWORD *)v90;
                a1[2] = *(v8 - 28);
                *(_OWORD *)a1 = v92;
                if (*((char *)a1 + 47) < 0)
                  operator delete(*v91);
                v93 = *(_OWORD *)(v8 - 27);
                a1[5] = *(v8 - 25);
                *(_OWORD *)v91 = v93;
                *((_BYTE *)v8 - 193) = 0;
                *((_BYTE *)v8 - 216) = 0;
                v94 = *((_OWORD *)v8 - 12);
                *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
                *((_OWORD *)a1 + 3) = v94;
                sub_1002E0BA0((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
                v95 = *(_OWORD *)(v8 - 3);
                *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
                *(_OWORD *)(a1 + 27) = v95;
              }
              v96 = v242;
              *(v8 - 28) = v243;
              *(_OWORD *)v90 = v96;
              v97 = (void **)(v8 - 27);
              if (*((char *)v8 - 193) < 0)
                operator delete(*v97);
              v98 = __p;
              *(v8 - 25) = v245;
              *(_OWORD *)v97 = v98;
              HIBYTE(v245) = 0;
              LOBYTE(__p) = 0;
              v99 = v246[0];
              *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
              *((_OWORD *)v8 - 12) = v99;
              sub_1002E0BA0((uint64_t)(v8 - 20), (uint64_t)v247);
              v100 = v248;
              *((_BYTE *)v8 - 8) = v249;
              *(_OWORD *)(v8 - 3) = v100;
              sub_1002DF2E0(v247);
              if (SHIBYTE(v245) < 0)
                operator delete((void *)__p);
              goto LABEL_78;
            }
          }
          v23 = *(_OWORD *)a1;
          v243 = a1[2];
          v242 = v23;
          v24 = a1[5];
          __p = *(_OWORD *)(a1 + 3);
          v245 = v24;
          a1[4] = 0;
          a1[5] = 0;
          a1[3] = 0;
          v25 = *(_OWORD *)((char *)a1 + 60);
          v246[0] = *((_OWORD *)a1 + 3);
          *(_OWORD *)((char *)v246 + 12) = v25;
          sub_1002DF194(v247);
          v26 = 0;
          v27 = (void **)(a1 + 3);
          v28 = *(_OWORD *)(a1 + 27);
          v249 = *((_BYTE *)a1 + 232);
          v248 = v28;
          do
          {
            v29 = bswap64(a1[v26 + 30]);
            v30 = bswap64(v242);
            if (v29 == v30
              && (v29 = bswap64(a1[v26 + 31]), v30 = bswap64(*((unint64_t *)&v242 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v26 += 30;
          }
          while (v31 < 0);
          v32 = &a1[v26];
          v33 = v6;
          if (v26 == 30)
          {
            v38 = a2;
            while (v32 < v38)
            {
              v34 = (__int128 *)(v38 - 30);
              v39 = bswap64(*(v38 - 30));
              v40 = bswap64(v242);
              if (v39 == v40
                && (v39 = bswap64(*(v38 - 29)), v40 = bswap64(*((unint64_t *)&v242 + 1)), v39 == v40))
              {
                v41 = 0;
              }
              else if (v39 < v40)
              {
                v41 = -1;
              }
              else
              {
                v41 = 1;
              }
              v38 -= 30;
              if (v41 < 0)
                goto LABEL_46;
            }
            v34 = (__int128 *)v38;
          }
          else
          {
            do
            {
              v34 = v33 - 15;
              v35 = bswap64(*((_QWORD *)v33 - 30));
              v36 = bswap64(v242);
              if (v35 == v36
                && (v35 = bswap64(*((_QWORD *)v33 - 29)), v36 = bswap64(*((unint64_t *)&v242 + 1)), v35 == v36))
              {
                v37 = 0;
              }
              else if (v35 < v36)
              {
                v37 = -1;
              }
              else
              {
                v37 = 1;
              }
              v33 -= 15;
            }
            while ((v37 & 0x80000000) == 0);
          }
LABEL_46:
          v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            v42 = v34;
            do
            {
              sub_100302544((__int128 *)v8, v42);
              v43 = v8;
              do
              {
                v44 = v8[30];
                v8 += 30;
                v45 = bswap64(v44);
                v46 = bswap64(v242);
                if (v45 == v46 && (v45 = bswap64(v43[31]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  v47 = 0;
                }
                else if (v45 < v46)
                {
                  v47 = -1;
                }
                else
                {
                  v47 = 1;
                }
                v43 = v8;
              }
              while (v47 < 0);
              v48 = v42;
              do
              {
                v49 = *((_QWORD *)v42 - 30);
                v42 -= 15;
                v50 = bswap64(v49);
                v51 = bswap64(v242);
                if (v50 == v51
                  && (v50 = bswap64(*((_QWORD *)v48 - 29)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  v52 = 0;
                }
                else if (v50 < v51)
                {
                  v52 = -1;
                }
                else
                {
                  v52 = 1;
                }
                v48 = v42;
              }
              while ((v52 & 0x80000000) == 0);
            }
            while (v8 < (unint64_t *)v42);
          }
          v53 = v8 - 30;
          if (v8 - 30 != a1)
          {
            v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 28);
            *(_OWORD *)a1 = v54;
            if (*((char *)a1 + 47) < 0)
              operator delete(*v27);
            v55 = *(_OWORD *)(v8 - 27);
            a1[5] = *(v8 - 25);
            *(_OWORD *)v27 = v55;
            *((_BYTE *)v8 - 193) = 0;
            *((_BYTE *)v8 - 216) = 0;
            v56 = *((_OWORD *)v8 - 12);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
            *((_OWORD *)a1 + 3) = v56;
            sub_1002E0BA0((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
            v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
            *(_OWORD *)(a1 + 27) = v57;
          }
          v58 = v242;
          *(v8 - 28) = v243;
          *(_OWORD *)v53 = v58;
          v59 = (void **)(v8 - 27);
          if (*((char *)v8 - 193) < 0)
            operator delete(*v59);
          v60 = __p;
          *(v8 - 25) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
          *((_OWORD *)v8 - 12) = v61;
          sub_1002E0BA0((uint64_t)(v8 - 20), (uint64_t)v247);
          v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          sub_1002DF2E0(v247);
          if (SHIBYTE(v245) < 0)
            operator delete((void *)__p);
          v63 = v32 >= (unint64_t *)v34;
          v6 = (__int128 *)a2;
          if (!v63)
            goto LABEL_77;
          v64 = sub_100304734(a1, v8 - 30);
          if (!sub_100304734(v8, a2))
          {
            if (v64)
              continue;
LABEL_77:
            sub_100302BAC(a1, v8 - 30, a3, a4 & 1);
LABEL_78:
            a4 = 0;
            continue;
          }
          a2 = v8 - 30;
          if (v64)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == (unint64_t *)v6)
            return;
          v212 = a1 + 30;
          if (a1 + 30 == a2)
            return;
          for (i = a1 - 30; ; i += 30)
          {
            v214 = v212;
            v215 = bswap64(a1[30]);
            v216 = bswap64(*a1);
            if (v215 != v216)
              break;
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216)
              goto LABEL_279;
LABEL_297:
            v212 = v214 + 30;
            a1 = v214;
            if (v214 + 30 == v217)
              return;
          }
          v217 = a2;
LABEL_279:
          if (v215 < v216)
            v218 = -1;
          else
            v218 = 1;
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            v245 = a1[35];
            __p = *(_OWORD *)(a1 + 33);
            a1[34] = 0;
            a1[35] = 0;
            a1[33] = 0;
            v246[0] = *((_OWORD *)a1 + 18);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 300);
            sub_1002DF194(v247);
            v249 = *((_BYTE *)a1 + 472);
            v248 = *(_OWORD *)(a1 + 57);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 30) = *((_OWORD *)v220 + 15);
              v220[62] = v220[32];
              v221 = (void **)(v220 + 63);
              if (*((char *)v220 + 527) < 0)
                operator delete(*v221);
              v220[65] = v220[35];
              *(_OWORD *)v221 = *(_OWORD *)(v220 + 33);
              *((_BYTE *)v220 + 287) = 0;
              *((_BYTE *)v220 + 264) = 0;
              *((_OWORD *)v220 + 33) = *((_OWORD *)v220 + 18);
              *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v220 + 300);
              sub_1002E0BA0((uint64_t)(v220 + 70), (uint64_t)(v220 + 40));
              *((_BYTE *)v220 + 712) = *((_BYTE *)v220 + 472);
              *(_OWORD *)(v220 + 87) = *(_OWORD *)(v220 + 57);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }
              else if (v222 < v223)
              {
                v224 = -1;
              }
              else
              {
                v224 = 1;
              }
              v220 -= 30;
            }
            while (v224 < 0);
            v225 = v242;
            v220[62] = v243;
            *((_OWORD *)v220 + 30) = v225;
            v226 = (void **)(v220 + 63);
            if (*((char *)v220 + 527) < 0)
              operator delete(*v226);
            v227 = __p;
            v220[65] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 33) = v228;
            sub_1002E0BA0((uint64_t)(v220 + 70), (uint64_t)v247);
            v229 = v248;
            *((_BYTE *)v220 + 712) = v249;
            *(_OWORD *)(v220 + 87) = v229;
            sub_1002DF2E0(v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0)
              operator delete((void *)__p);
          }
          goto LABEL_297;
        }
        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 30;
          if (a1 + 30 != a2)
          {
            v104 = 0;
            v105 = v247;
            v106 = a1;
            do
            {
              v107 = v103;
              v108 = bswap64(v106[30]);
              v109 = bswap64(*v106);
              if (v108 != v109 || (v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  v245 = v106[35];
                  __p = *(_OWORD *)(v106 + 33);
                  v106[34] = 0;
                  v106[35] = 0;
                  v106[33] = 0;
                  v246[0] = *((_OWORD *)v106 + 18);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 300);
                  v112 = (uint64_t)v105;
                  sub_1002DF194(v105);
                  v249 = *((_BYTE *)v106 + 472);
                  v248 = *(_OWORD *)(v106 + 57);
                  v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *((_OWORD *)v114 + 15) = *(_OWORD *)((char *)a1 + v113);
                    *((_QWORD *)v114 + 32) = *(unint64_t *)((char *)a1 + v113 + 16);
                    v115 = (void **)((char *)a1 + v113 + 264);
                    if (*((char *)a1 + v113 + 287) < 0)
                      operator delete(*v115);
                    *(_OWORD *)v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 280) = *((_QWORD *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *((_OWORD *)v114 + 18) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 300) = *(_OWORD *)(v114 + 60);
                    sub_1002E0BA0((uint64_t)(v114 + 320), (uint64_t)(v114 + 80));
                    v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 456) = *(_OWORD *)((char *)a1 + v113 + 216);
                    *((_BYTE *)a1 + v113 + 472) = *((_BYTE *)a1 + v113 + 232);
                    if (!v113)
                      break;
                    v117 = bswap64(v242);
                    v118 = bswap64(*((_QWORD *)v116 - 30));
                    if (v117 == v118
                      && (v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          v118 = bswap64(*((_QWORD *)v116 - 29)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }
                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }
                    else
                    {
                      v119 = 1;
                    }
                    v113 -= 240;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 240;
                      goto LABEL_168;
                    }
                  }
                  v120 = (uint64_t)a1;
LABEL_168:
                  v121 = v242;
                  *(_QWORD *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  if (*(char *)(v120 + 47) < 0)
                    operator delete(*v122);
                  v123 = __p;
                  *((_QWORD *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  v105 = (_BYTE *)v112;
                  sub_1002E0BA0((uint64_t)(v116 + 80), v112);
                  v125 = v248;
                  v116[232] = v249;
                  *(_OWORD *)(v116 + 216) = v125;
                  sub_1002DF2E0(v112);
                  if (SHIBYTE(v245) < 0)
                    operator delete((void *)__p);
                }
              }
              v103 = v107 + 30;
              v104 += 240;
              v106 = v107;
            }
            while (v107 + 30 != a2);
          }
        }
        return;
    }
  }
}

  v6 = (__int128 *)a2;
  v7 = a2 - 30;
  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (char *)v6 - (char *)v8;
    v10 = 0xEEEEEEEEEEEEEEEFLL * (v9 >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v101 = bswap64(*(a2 - 30));
        v102 = bswap64(*a1);
        if (v101 != v102 || (v101 = bswap64(*(a2 - 29)), v102 = bswap64(a1[1]), v101 != v102))
        {
          if (v101 < v102)
            v211 = -1;
          else
            v211 = 1;
          if (v211 < 0)
            sub_100302544((__int128 *)a1, (__int128 *)a2 - 15);
        }
        return;
      case 3:
        sub_1003045A0(a1, a1 + 30, v7);
        return;
      case 4:
        sub_100304B5C(a1, a1 + 30, a1 + 60, v7);
        return;
      case 5:
        sub_1003043F4(a1, a1 + 30, a1 + 60, a1 + 90, v7);
        return;
      default:
        if (v9 > 5759)
        {
          if (!a3)
          {
            if (a1 != (unint64_t *)v6)
            {
              v126 = (unint64_t)(v10 - 2) >> 1;
              v127 = v126;
              do
              {
                v128 = v127;
                if (v126 >= v127)
                {
                  v129 = (2 * v127) | 1;
                  v130 = &a1[30 * v129];
                  if (2 * v127 + 2 < v10)
                  {
                    v131 = bswap64(*v130);
                    v132 = bswap64(v130[30]);
                    if (v131 == v132 && (v131 = bswap64(v130[1]), v132 = bswap64(v130[31]), v131 == v132))
                      v133 = 0;
                    else
                      v133 = v131 < v132 ? -1 : 1;
                    if (v133 < 0)
                    {
                      v130 += 30;
                      v129 = 2 * v127 + 2;
                    }
                  }
                  v134 = &a1[30 * v127];
                  v135 = bswap64(*v130);
                  v136 = bswap64(*v134);
                  if (v135 == v136 && (v135 = bswap64(v130[1]), v136 = bswap64(v134[1]), v135 == v136)
                    || (v135 < v136 ? (v137 = -1) : (v137 = 1), (v137 & 0x80000000) == 0))
                  {
                    v138 = *(_OWORD *)v134;
                    v243 = v134[2];
                    v242 = v138;
                    v139 = &a1[30 * v128];
                    v140 = *(_OWORD *)(v139 + 3);
                    v245 = v139[5];
                    __p = v140;
                    v139[4] = 0;
                    v139[5] = 0;
                    v139[3] = 0;
                    v141 = *((_OWORD *)v139 + 3);
                    *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v139 + 60);
                    v246[0] = v141;
                    sub_1002DF194(v247);
                    v142 = &a1[30 * v128];
                    v143 = *(_OWORD *)(v142 + 27);
                    v249 = *((_BYTE *)v142 + 232);
                    v248 = v143;
                    do
                    {
                      v144 = v130;
                      v145 = *(_OWORD *)v130;
                      v134[2] = v130[2];
                      *(_OWORD *)v134 = v145;
                      v146 = (void **)(v134 + 3);
                      if (*((char *)v134 + 47) < 0)
                        operator delete(*v146);
                      v147 = *(_OWORD *)(v144 + 3);
                      v134[5] = v144[5];
                      *(_OWORD *)v146 = v147;
                      *((_BYTE *)v144 + 47) = 0;
                      *((_BYTE *)v144 + 24) = 0;
                      v148 = *((_OWORD *)v144 + 3);
                      *(_OWORD *)((char *)v134 + 60) = *(_OWORD *)((char *)v144 + 60);
                      *((_OWORD *)v134 + 3) = v148;
                      sub_1002E0BA0((uint64_t)(v134 + 10), (uint64_t)(v144 + 10));
                      v149 = *(_OWORD *)(v144 + 27);
                      *((_BYTE *)v134 + 232) = *((_BYTE *)v144 + 232);
                      *(_OWORD *)(v134 + 27) = v149;
                      if (v126 < v129)
                        break;
                      v130 = &a1[30 * ((2 * v129) | 1)];
                      if (2 * v129 + 2 >= v10)
                      {
                        v129 = (2 * v129) | 1;
                      }
                      else
                      {
                        v150 = bswap64(*v130);
                        v151 = bswap64(v130[30]);
                        if (v150 == v151 && (v150 = bswap64(v130[1]), v151 = bswap64(v130[31]), v150 == v151))
                          v152 = 0;
                        else
                          v152 = v150 < v151 ? -1 : 1;
                        if (v152 >= 0)
                        {
                          v129 = (2 * v129) | 1;
                        }
                        else
                        {
                          v130 += 30;
                          v129 = 2 * v129 + 2;
                        }
                      }
                      v153 = bswap64(*v130);
                      v154 = bswap64(v242);
                      if (v153 == v154
                        && (v153 = bswap64(v130[1]), v154 = bswap64(*((unint64_t *)&v242 + 1)), v153 == v154))
                      {
                        v155 = 0;
                      }
                      else
                      {
                        v155 = v153 < v154 ? -1 : 1;
                      }
                      v134 = v144;
                    }
                    while ((v155 & 0x80000000) == 0);
                    v156 = (void **)(v144 + 3);
                    v157 = v242;
                    v144[2] = v243;
                    *(_OWORD *)v144 = v157;
                    if (*((char *)v144 + 47) < 0)
                      operator delete(*v156);
                    v158 = __p;
                    v144[5] = v245;
                    *(_OWORD *)v156 = v158;
                    HIBYTE(v245) = 0;
                    LOBYTE(__p) = 0;
                    v159 = *(_OWORD *)((char *)v246 + 12);
                    *((_OWORD *)v144 + 3) = v246[0];
                    *(_OWORD *)((char *)v144 + 60) = v159;
                    sub_1002E0BA0((uint64_t)(v144 + 10), (uint64_t)v247);
                    v160 = v248;
                    *((_BYTE *)v144 + 232) = v249;
                    *(_OWORD *)(v144 + 27) = v160;
                    sub_1002DF2E0(v247);
                    if (SHIBYTE(v245) < 0)
                      operator delete((void *)__p);
                  }
                }
                v127 = v128 - 1;
              }
              while (v128);
              v161 = v9 / 0xF0uLL;
              v230 = (__int128 *)(a1 + 3);
              do
              {
                v235 = a1[2];
                v234 = *(_OWORD *)a1;
                v236 = *v230;
                v237 = a1[5];
                a1[4] = 0;
                a1[5] = 0;
                *(_QWORD *)v230 = 0;
                *(_OWORD *)v238 = *((_OWORD *)a1 + 3);
                *(_OWORD *)&v238[12] = *(_OWORD *)((char *)a1 + 60);
                sub_1002DF194(v239);
                v162 = 0;
                v163 = *(_OWORD *)(a1 + 27);
                v241 = *((_BYTE *)a1 + 232);
                v240 = v163;
                v164 = (uint64_t)a1;
                do
                {
                  v165 = v164 + 240 * v162 + 240;
                  v166 = 2 * v162;
                  v162 = (2 * v162) | 1;
                  if (v166 + 2 < v161)
                  {
                    v167 = bswap64(*(_QWORD *)v165);
                    v168 = bswap64(*(_QWORD *)(v165 + 240));
                    if (v167 == v168
                      && (v167 = bswap64(*(_QWORD *)(v165 + 8)), v168 = bswap64(*(_QWORD *)(v165 + 248)), v167 == v168))
                    {
                      v169 = 0;
                    }
                    else
                    {
                      v169 = v167 < v168 ? -1 : 1;
                    }
                    if (v169 < 0)
                    {
                      v165 += 240;
                      v162 = v166 + 2;
                    }
                  }
                  v170 = *(_OWORD *)v165;
                  *(_QWORD *)(v164 + 16) = *(_QWORD *)(v165 + 16);
                  *(_OWORD *)v164 = v170;
                  v171 = (void **)(v164 + 24);
                  if (*(char *)(v164 + 47) < 0)
                    operator delete(*v171);
                  v172 = *(_OWORD *)(v165 + 24);
                  *(_QWORD *)(v164 + 40) = *(_QWORD *)(v165 + 40);
                  *(_OWORD *)v171 = v172;
                  *(_BYTE *)(v165 + 47) = 0;
                  *(_BYTE *)(v165 + 24) = 0;
                  v173 = *(_OWORD *)(v165 + 48);
                  *(_OWORD *)(v164 + 60) = *(_OWORD *)(v165 + 60);
                  *(_OWORD *)(v164 + 48) = v173;
                  sub_1002E0BA0(v164 + 80, v165 + 80);
                  v174 = *(_OWORD *)(v165 + 216);
                  *(_BYTE *)(v164 + 232) = *(_BYTE *)(v165 + 232);
                  *(_OWORD *)(v164 + 216) = v174;
                  v164 = v165;
                }
                while (v162 <= (uint64_t)((unint64_t)(v161 - 2) >> 1));
                v175 = (void **)(v165 + 24);
                v176 = (__int128 *)(v165 + 48);
                v232 = (__int128 *)(v165 + 216);
                if ((unint64_t *)v165 == a2 - 30)
                {
                  *(_QWORD *)(v165 + 16) = v235;
                  *(_OWORD *)v165 = v234;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  *(_QWORD *)(v165 + 40) = v237;
                  *(_OWORD *)v175 = v236;
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)&v238[12];
                  *v176 = *(_OWORD *)v238;
                  sub_1002E0BA0(v165 + 80, (uint64_t)v239);
                  v190 = v240;
                  *(_BYTE *)(v165 + 232) = v241;
                  *v232 = v190;
                }
                else
                {
                  v177 = *((_OWORD *)a2 - 15);
                  *(_QWORD *)(v165 + 16) = *(a2 - 28);
                  *(_OWORD *)v165 = v177;
                  if (*(char *)(v165 + 47) < 0)
                    operator delete(*v175);
                  v178 = *(_OWORD *)(a2 - 27);
                  *(_QWORD *)(v165 + 40) = *(a2 - 25);
                  *(_OWORD *)v175 = v178;
                  *((_BYTE *)a2 - 193) = 0;
                  *((_BYTE *)a2 - 216) = 0;
                  v179 = *((_OWORD *)a2 - 12);
                  *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)a2 - 180);
                  *v176 = v179;
                  sub_1002E0BA0(v165 + 80, (uint64_t)(a2 - 20));
                  v180 = (void **)(a2 - 27);
                  v181 = *(_OWORD *)(a2 - 3);
                  *(_BYTE *)(v165 + 232) = *((_BYTE *)a2 - 8);
                  *v232 = v181;
                  *(a2 - 28) = v235;
                  *((_OWORD *)a2 - 15) = v234;
                  if (*((char *)a2 - 193) < 0)
                    operator delete(*v180);
                  v182 = a2 - 24;
                  *(a2 - 25) = v237;
                  *(_OWORD *)v180 = v236;
                  *(_OWORD *)((char *)v182 + 12) = *(_OWORD *)&v238[12];
                  *(_OWORD *)v182 = *(_OWORD *)v238;
                  sub_1002E0BA0((uint64_t)(a2 - 20), (uint64_t)v239);
                  v183 = a2 - 3;
                  v184 = v240;
                  *((_BYTE *)v183 + 16) = v241;
                  *(_OWORD *)v183 = v184;
                  v185 = v165 - (_QWORD)a1 + 240;
                  if (v185 >= 241)
                  {
                    v186 = (v185 / 0xF0uLL - 2) >> 1;
                    v187 = &a1[30 * v186];
                    v188 = bswap64(*v187);
                    v189 = bswap64(*(_QWORD *)v165);
                    if (v188 != v189 || (v188 = bswap64(v187[1]), v189 = bswap64(*(_QWORD *)(v165 + 8)), v188 != v189))
                    {
                      v191 = v188 < v189 ? -1 : 1;
                      if (v191 < 0)
                      {
                        v192 = *(_OWORD *)v165;
                        v243 = *(_QWORD *)(v165 + 16);
                        v242 = v192;
                        v193 = *(_OWORD *)v175;
                        v245 = *(_QWORD *)(v165 + 40);
                        __p = v193;
                        *(_QWORD *)(v165 + 32) = 0;
                        *(_QWORD *)(v165 + 40) = 0;
                        *v175 = 0;
                        v194 = *v176;
                        *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)(v165 + 60);
                        v246[0] = v194;
                        sub_1002DF194(v247);
                        v195 = *v232;
                        v249 = *(_BYTE *)(v165 + 232);
                        v248 = v195;
                        do
                        {
                          v196 = (uint64_t)v187;
                          v197 = *(_OWORD *)v187;
                          *(_QWORD *)(v165 + 16) = v187[2];
                          *(_OWORD *)v165 = v197;
                          v198 = (void **)(v165 + 24);
                          if (*(char *)(v165 + 47) < 0)
                            operator delete(*v198);
                          v199 = *(_OWORD *)(v187 + 3);
                          *(_QWORD *)(v165 + 40) = v187[5];
                          *(_OWORD *)v198 = v199;
                          *((_BYTE *)v187 + 47) = 0;
                          *((_BYTE *)v187 + 24) = 0;
                          v200 = *((_OWORD *)v187 + 3);
                          *(_OWORD *)(v165 + 60) = *(_OWORD *)((char *)v187 + 60);
                          *(_OWORD *)(v165 + 48) = v200;
                          sub_1002E0BA0(v165 + 80, (uint64_t)(v187 + 10));
                          v201 = *(_OWORD *)(v187 + 27);
                          *(_BYTE *)(v165 + 232) = *((_BYTE *)v187 + 232);
                          *(_OWORD *)(v165 + 216) = v201;
                          if (!v186)
                            break;
                          v186 = (v186 - 1) >> 1;
                          v187 = &a1[30 * v186];
                          v202 = bswap64(*v187);
                          v203 = bswap64(v242);
                          if (v202 == v203
                            && (v202 = bswap64(v187[1]), v203 = bswap64(*((unint64_t *)&v242 + 1)), v202 == v203))
                          {
                            v204 = 0;
                          }
                          else
                          {
                            v204 = v202 < v203 ? -1 : 1;
                          }
                          v165 = v196;
                        }
                        while (v204 < 0);
                        v205 = (void **)(v196 + 24);
                        v206 = v242;
                        *(_QWORD *)(v196 + 16) = v243;
                        *(_OWORD *)v196 = v206;
                        if (*(char *)(v196 + 47) < 0)
                          operator delete(*v205);
                        v207 = __p;
                        *(_QWORD *)(v196 + 40) = v245;
                        *(_OWORD *)v205 = v207;
                        HIBYTE(v245) = 0;
                        LOBYTE(__p) = 0;
                        v208 = *(_OWORD *)((char *)v246 + 12);
                        *(_OWORD *)(v196 + 48) = v246[0];
                        *(_OWORD *)(v196 + 60) = v208;
                        sub_1002E0BA0(v196 + 80, (uint64_t)v247);
                        v209 = v248;
                        *(_BYTE *)(v196 + 232) = v249;
                        *(_OWORD *)(v196 + 216) = v209;
                        sub_1002DF2E0(v247);
                        if (SHIBYTE(v245) < 0)
                          operator delete((void *)__p);
                      }
                    }
                  }
                }
                sub_1002DF2E0(v239);
                a2 -= 30;
              }
              while (v161-- > 2);
            }
            return;
          }
          v11 = (unint64_t)v10 >> 1;
          v12 = &a1[30 * ((unint64_t)v10 >> 1)];
          if ((unint64_t)v9 < 0x7801)
          {
            sub_1003045A0(v12, a1, v7);
          }
          else
          {
            sub_1003045A0(a1, v12, v7);
            sub_1003045A0(a1 + 30, &a1[30 * v11 - 30], a2 - 60);
            sub_1003045A0(a1 + 60, &a1[30 * v11 + 30], a2 - 90);
            sub_1003045A0(&a1[30 * v11 - 30], v12, &a1[30 * v11 + 30]);
            sub_100302544((__int128 *)a1, (__int128 *)v12);
          }
          --a3;
          if ((a4 & 1) == 0)
          {
            if ((v13 = bswap64(*(a1 - 30)), v14 = bswap64(*a1), v13 == v14)
              && (v13 = bswap64(*(a1 - 29)), v14 = bswap64(a1[1]), v13 == v14)
              || (v13 < v14 ? (v22 = -1) : (v22 = 1), (v22 & 0x80000000) == 0))
            {
              v15 = *(_OWORD *)a1;
              v243 = a1[2];
              v242 = v15;
              v16 = a1[5];
              __p = *(_OWORD *)(a1 + 3);
              v245 = v16;
              a1[4] = 0;
              a1[5] = 0;
              a1[3] = 0;
              v17 = *(_OWORD *)((char *)a1 + 60);
              v246[0] = *((_OWORD *)a1 + 3);
              *(_OWORD *)((char *)v246 + 12) = v17;
              sub_1002DF194(v247);
              v18 = *(_OWORD *)(a1 + 27);
              v249 = *((_BYTE *)a1 + 232);
              v248 = v18;
              v19 = bswap64(v242);
              v20 = bswap64(*v7);
              if (v19 == v20
                && (v19 = bswap64(*((unint64_t *)&v242 + 1)), v20 = bswap64(*(a2 - 29)), v19 == v20))
              {
                v21 = 0;
              }
              else if (v19 < v20)
              {
                v21 = -1;
              }
              else
              {
                v21 = 1;
              }
              if (v21 < 0)
              {
                v69 = a1;
                v8 = a1;
                do
                {
                  v70 = v8[30];
                  v8 += 30;
                  v71 = bswap64(v242);
                  v72 = bswap64(v70);
                  if (v71 == v72
                    && (v71 = bswap64(*((unint64_t *)&v242 + 1)), v72 = bswap64(v69[31]), v71 == v72))
                  {
                    v73 = 0;
                  }
                  else if (v71 < v72)
                  {
                    v73 = -1;
                  }
                  else
                  {
                    v73 = 1;
                  }
                  v69 = v8;
                }
                while ((v73 & 0x80000000) == 0);
              }
              else
              {
                v65 = a1 + 30;
                do
                {
                  v8 = v65;
                  if (v65 >= (unint64_t *)v6)
                    break;
                  v66 = bswap64(v242);
                  v67 = bswap64(*v8);
                  if (v66 == v67 && (v66 = bswap64(*((unint64_t *)&v242 + 1)), v67 = bswap64(v8[1]), v66 == v67))
                    v68 = 0;
                  else
                    v68 = v66 < v67 ? -1 : 1;
                  v65 = v8 + 30;
                }
                while ((v68 & 0x80000000) == 0);
              }
              v74 = v6;
              if (v8 < (unint64_t *)v6)
              {
                v75 = v6;
                v74 = v6;
                do
                {
                  v76 = *((_QWORD *)v74 - 30);
                  v74 -= 15;
                  v77 = bswap64(v242);
                  v78 = bswap64(v76);
                  if (v77 == v78
                    && (v77 = bswap64(*((unint64_t *)&v242 + 1)), v78 = bswap64(*((_QWORD *)v75 - 29)),
                                                                         v77 == v78))
                  {
                    v79 = 0;
                  }
                  else if (v77 < v78)
                  {
                    v79 = -1;
                  }
                  else
                  {
                    v79 = 1;
                  }
                  v75 = v74;
                }
                while (v79 < 0);
              }
              while (v8 < (unint64_t *)v74)
              {
                sub_100302544((__int128 *)v8, v74);
                v80 = v8;
                do
                {
                  v81 = v8[30];
                  v8 += 30;
                  v82 = bswap64(v242);
                  v83 = bswap64(v81);
                  if (v82 == v83
                    && (v82 = bswap64(*((unint64_t *)&v242 + 1)), v83 = bswap64(v80[31]), v82 == v83))
                  {
                    v84 = 0;
                  }
                  else if (v82 < v83)
                  {
                    v84 = -1;
                  }
                  else
                  {
                    v84 = 1;
                  }
                  v80 = v8;
                }
                while ((v84 & 0x80000000) == 0);
                v85 = v74;
                do
                {
                  v86 = *((_QWORD *)v74 - 30);
                  v74 -= 15;
                  v87 = bswap64(v242);
                  v88 = bswap64(v86);
                  if (v87 == v88
                    && (v87 = bswap64(*((unint64_t *)&v242 + 1)), v88 = bswap64(*((_QWORD *)v85 - 29)),
                                                                         v87 == v88))
                  {
                    v89 = 0;
                  }
                  else if (v87 < v88)
                  {
                    v89 = -1;
                  }
                  else
                  {
                    v89 = 1;
                  }
                  v85 = v74;
                }
                while (v89 < 0);
              }
              v90 = v8 - 30;
              if (v8 - 30 != a1)
              {
                v91 = (void **)(a1 + 3);
                v92 = *(_OWORD *)v90;
                a1[2] = *(v8 - 28);
                *(_OWORD *)a1 = v92;
                if (*((char *)a1 + 47) < 0)
                  operator delete(*v91);
                v93 = *(_OWORD *)(v8 - 27);
                a1[5] = *(v8 - 25);
                *(_OWORD *)v91 = v93;
                *((_BYTE *)v8 - 193) = 0;
                *((_BYTE *)v8 - 216) = 0;
                v94 = *((_OWORD *)v8 - 12);
                *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
                *((_OWORD *)a1 + 3) = v94;
                sub_1002E0BA0((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
                v95 = *(_OWORD *)(v8 - 3);
                *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
                *(_OWORD *)(a1 + 27) = v95;
              }
              v96 = v242;
              *(v8 - 28) = v243;
              *(_OWORD *)v90 = v96;
              v97 = (void **)(v8 - 27);
              if (*((char *)v8 - 193) < 0)
                operator delete(*v97);
              v98 = __p;
              *(v8 - 25) = v245;
              *(_OWORD *)v97 = v98;
              HIBYTE(v245) = 0;
              LOBYTE(__p) = 0;
              v99 = v246[0];
              *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
              *((_OWORD *)v8 - 12) = v99;
              sub_1002E0BA0((uint64_t)(v8 - 20), (uint64_t)v247);
              v100 = v248;
              *((_BYTE *)v8 - 8) = v249;
              *(_OWORD *)(v8 - 3) = v100;
              sub_1002DF2E0(v247);
              if (SHIBYTE(v245) < 0)
                operator delete((void *)__p);
              goto LABEL_78;
            }
          }
          v23 = *(_OWORD *)a1;
          v243 = a1[2];
          v242 = v23;
          v24 = a1[5];
          __p = *(_OWORD *)(a1 + 3);
          v245 = v24;
          a1[4] = 0;
          a1[5] = 0;
          a1[3] = 0;
          v25 = *(_OWORD *)((char *)a1 + 60);
          v246[0] = *((_OWORD *)a1 + 3);
          *(_OWORD *)((char *)v246 + 12) = v25;
          sub_1002DF194(v247);
          v26 = 0;
          v27 = (void **)(a1 + 3);
          v28 = *(_OWORD *)(a1 + 27);
          v249 = *((_BYTE *)a1 + 232);
          v248 = v28;
          do
          {
            v29 = bswap64(a1[v26 + 30]);
            v30 = bswap64(v242);
            if (v29 == v30
              && (v29 = bswap64(a1[v26 + 31]), v30 = bswap64(*((unint64_t *)&v242 + 1)), v29 == v30))
            {
              v31 = 0;
            }
            else if (v29 < v30)
            {
              v31 = -1;
            }
            else
            {
              v31 = 1;
            }
            v26 += 30;
          }
          while (v31 < 0);
          v32 = &a1[v26];
          v33 = v6;
          if (v26 == 30)
          {
            v38 = a2;
            while (v32 < v38)
            {
              v34 = (__int128 *)(v38 - 30);
              v39 = bswap64(*(v38 - 30));
              v40 = bswap64(v242);
              if (v39 == v40
                && (v39 = bswap64(*(v38 - 29)), v40 = bswap64(*((unint64_t *)&v242 + 1)), v39 == v40))
              {
                v41 = 0;
              }
              else if (v39 < v40)
              {
                v41 = -1;
              }
              else
              {
                v41 = 1;
              }
              v38 -= 30;
              if (v41 < 0)
                goto LABEL_46;
            }
            v34 = (__int128 *)v38;
          }
          else
          {
            do
            {
              v34 = v33 - 15;
              v35 = bswap64(*((_QWORD *)v33 - 30));
              v36 = bswap64(v242);
              if (v35 == v36
                && (v35 = bswap64(*((_QWORD *)v33 - 29)), v36 = bswap64(*((unint64_t *)&v242 + 1)), v35 == v36))
              {
                v37 = 0;
              }
              else if (v35 < v36)
              {
                v37 = -1;
              }
              else
              {
                v37 = 1;
              }
              v33 -= 15;
            }
            while ((v37 & 0x80000000) == 0);
          }
LABEL_46:
          v8 = v32;
          if (v32 < (unint64_t *)v34)
          {
            v42 = v34;
            do
            {
              sub_100302544((__int128 *)v8, v42);
              v43 = v8;
              do
              {
                v44 = v8[30];
                v8 += 30;
                v45 = bswap64(v44);
                v46 = bswap64(v242);
                if (v45 == v46 && (v45 = bswap64(v43[31]), v46 = bswap64(*((unint64_t *)&v242 + 1)), v45 == v46))
                {
                  v47 = 0;
                }
                else if (v45 < v46)
                {
                  v47 = -1;
                }
                else
                {
                  v47 = 1;
                }
                v43 = v8;
              }
              while (v47 < 0);
              v48 = v42;
              do
              {
                v49 = *((_QWORD *)v42 - 30);
                v42 -= 15;
                v50 = bswap64(v49);
                v51 = bswap64(v242);
                if (v50 == v51
                  && (v50 = bswap64(*((_QWORD *)v48 - 29)), v51 = bswap64(*((unint64_t *)&v242 + 1)), v50 == v51))
                {
                  v52 = 0;
                }
                else if (v50 < v51)
                {
                  v52 = -1;
                }
                else
                {
                  v52 = 1;
                }
                v48 = v42;
              }
              while ((v52 & 0x80000000) == 0);
            }
            while (v8 < (unint64_t *)v42);
          }
          v53 = v8 - 30;
          if (v8 - 30 != a1)
          {
            v54 = *(_OWORD *)v53;
            a1[2] = *(v8 - 28);
            *(_OWORD *)a1 = v54;
            if (*((char *)a1 + 47) < 0)
              operator delete(*v27);
            v55 = *(_OWORD *)(v8 - 27);
            a1[5] = *(v8 - 25);
            *(_OWORD *)v27 = v55;
            *((_BYTE *)v8 - 193) = 0;
            *((_BYTE *)v8 - 216) = 0;
            v56 = *((_OWORD *)v8 - 12);
            *(_OWORD *)((char *)a1 + 60) = *(_OWORD *)((char *)v8 - 180);
            *((_OWORD *)a1 + 3) = v56;
            sub_1002E0BA0((uint64_t)(a1 + 10), (uint64_t)(v8 - 20));
            v57 = *(_OWORD *)(v8 - 3);
            *((_BYTE *)a1 + 232) = *((_BYTE *)v8 - 8);
            *(_OWORD *)(a1 + 27) = v57;
          }
          v58 = v242;
          *(v8 - 28) = v243;
          *(_OWORD *)v53 = v58;
          v59 = (void **)(v8 - 27);
          if (*((char *)v8 - 193) < 0)
            operator delete(*v59);
          v60 = __p;
          *(v8 - 25) = v245;
          *(_OWORD *)v59 = v60;
          HIBYTE(v245) = 0;
          LOBYTE(__p) = 0;
          v61 = v246[0];
          *(_OWORD *)((char *)v8 - 180) = *(_OWORD *)((char *)v246 + 12);
          *((_OWORD *)v8 - 12) = v61;
          sub_1002E0BA0((uint64_t)(v8 - 20), (uint64_t)v247);
          v62 = v248;
          *((_BYTE *)v8 - 8) = v249;
          *(_OWORD *)(v8 - 3) = v62;
          sub_1002DF2E0(v247);
          if (SHIBYTE(v245) < 0)
            operator delete((void *)__p);
          v63 = v32 >= (unint64_t *)v34;
          v6 = (__int128 *)a2;
          if (!v63)
            goto LABEL_77;
          v64 = sub_10030709C(a1, v8 - 30);
          if (!sub_10030709C(v8, a2))
          {
            if (v64)
              continue;
LABEL_77:
            sub_100305854(a1, v8 - 30, a3, a4 & 1);
LABEL_78:
            a4 = 0;
            continue;
          }
          a2 = v8 - 30;
          if (v64)
            return;
          goto LABEL_1;
        }
        if ((a4 & 1) == 0)
        {
          if (a1 == (unint64_t *)v6)
            return;
          v212 = a1 + 30;
          if (a1 + 30 == a2)
            return;
          for (i = a1 - 30; ; i += 30)
          {
            v214 = v212;
            v215 = bswap64(a1[30]);
            v216 = bswap64(*a1);
            if (v215 != v216)
              break;
            v215 = bswap64(v214[1]);
            v216 = bswap64(a1[1]);
            v217 = a2;
            if (v215 != v216)
              goto LABEL_279;
LABEL_297:
            v212 = v214 + 30;
            a1 = v214;
            if (v214 + 30 == v217)
              return;
          }
          v217 = a2;
LABEL_279:
          if (v215 < v216)
            v218 = -1;
          else
            v218 = 1;
          if (v218 < 0)
          {
            v219 = *(_OWORD *)v214;
            v243 = v214[2];
            v242 = v219;
            v245 = a1[35];
            __p = *(_OWORD *)(a1 + 33);
            a1[34] = 0;
            a1[35] = 0;
            a1[33] = 0;
            v246[0] = *((_OWORD *)a1 + 18);
            *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)a1 + 300);
            sub_1002DF194(v247);
            v249 = *((_BYTE *)a1 + 472);
            v248 = *(_OWORD *)(a1 + 57);
            v220 = i;
            do
            {
              *((_OWORD *)v220 + 30) = *((_OWORD *)v220 + 15);
              v220[62] = v220[32];
              v221 = (void **)(v220 + 63);
              if (*((char *)v220 + 527) < 0)
                operator delete(*v221);
              v220[65] = v220[35];
              *(_OWORD *)v221 = *(_OWORD *)(v220 + 33);
              *((_BYTE *)v220 + 287) = 0;
              *((_BYTE *)v220 + 264) = 0;
              *((_OWORD *)v220 + 33) = *((_OWORD *)v220 + 18);
              *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v220 + 300);
              sub_1002E0BA0((uint64_t)(v220 + 70), (uint64_t)(v220 + 40));
              *((_BYTE *)v220 + 712) = *((_BYTE *)v220 + 472);
              *(_OWORD *)(v220 + 87) = *(_OWORD *)(v220 + 57);
              v222 = bswap64(v242);
              v223 = bswap64(*v220);
              if (v222 == v223
                && (v222 = bswap64(*((unint64_t *)&v242 + 1)), v223 = bswap64(v220[1]), v222 == v223))
              {
                v224 = 0;
              }
              else if (v222 < v223)
              {
                v224 = -1;
              }
              else
              {
                v224 = 1;
              }
              v220 -= 30;
            }
            while (v224 < 0);
            v225 = v242;
            v220[62] = v243;
            *((_OWORD *)v220 + 30) = v225;
            v226 = (void **)(v220 + 63);
            if (*((char *)v220 + 527) < 0)
              operator delete(*v226);
            v227 = __p;
            v220[65] = v245;
            *(_OWORD *)v226 = v227;
            HIBYTE(v245) = 0;
            LOBYTE(__p) = 0;
            v228 = v246[0];
            *(_OWORD *)((char *)v220 + 540) = *(_OWORD *)((char *)v246 + 12);
            *((_OWORD *)v220 + 33) = v228;
            sub_1002E0BA0((uint64_t)(v220 + 70), (uint64_t)v247);
            v229 = v248;
            *((_BYTE *)v220 + 712) = v249;
            *(_OWORD *)(v220 + 87) = v229;
            sub_1002DF2E0(v247);
            v217 = a2;
            if (SHIBYTE(v245) < 0)
              operator delete((void *)__p);
          }
          goto LABEL_297;
        }
        if (a1 != (unint64_t *)v6)
        {
          v103 = a1 + 30;
          if (a1 + 30 != a2)
          {
            v104 = 0;
            v105 = v247;
            v106 = a1;
            do
            {
              v107 = v103;
              v108 = bswap64(v106[30]);
              v109 = bswap64(*v106);
              if (v108 != v109 || (v108 = bswap64(v107[1]), v109 = bswap64(v106[1]), v108 != v109))
              {
                v110 = v108 < v109 ? -1 : 1;
                if (v110 < 0)
                {
                  v111 = *(_OWORD *)v107;
                  v243 = v107[2];
                  v242 = v111;
                  v245 = v106[35];
                  __p = *(_OWORD *)(v106 + 33);
                  v106[34] = 0;
                  v106[35] = 0;
                  v106[33] = 0;
                  v246[0] = *((_OWORD *)v106 + 18);
                  *(_OWORD *)((char *)v246 + 12) = *(_OWORD *)((char *)v106 + 300);
                  v112 = (uint64_t)v105;
                  sub_1002DF194(v105);
                  v249 = *((_BYTE *)v106 + 472);
                  v248 = *(_OWORD *)(v106 + 57);
                  v113 = v104;
                  while (1)
                  {
                    v114 = (char *)a1 + v113;
                    *((_OWORD *)v114 + 15) = *(_OWORD *)((char *)a1 + v113);
                    *((_QWORD *)v114 + 32) = *(unint64_t *)((char *)a1 + v113 + 16);
                    v115 = (void **)((char *)a1 + v113 + 264);
                    if (*((char *)a1 + v113 + 287) < 0)
                      operator delete(*v115);
                    *(_OWORD *)v115 = *(_OWORD *)(v114 + 24);
                    *(unint64_t *)((char *)a1 + v113 + 280) = *((_QWORD *)v114 + 5);
                    v114[47] = 0;
                    v114[24] = 0;
                    *((_OWORD *)v114 + 18) = *((_OWORD *)v114 + 3);
                    *(_OWORD *)(v114 + 300) = *(_OWORD *)(v114 + 60);
                    sub_1002E0BA0((uint64_t)(v114 + 320), (uint64_t)(v114 + 80));
                    v116 = (char *)a1 + v113;
                    *(_OWORD *)((char *)a1 + v113 + 456) = *(_OWORD *)((char *)a1 + v113 + 216);
                    *((_BYTE *)a1 + v113 + 472) = *((_BYTE *)a1 + v113 + 232);
                    if (!v113)
                      break;
                    v117 = bswap64(v242);
                    v118 = bswap64(*((_QWORD *)v116 - 30));
                    if (v117 == v118
                      && (v117 = bswap64(*((unint64_t *)&v242 + 1)),
                          v118 = bswap64(*((_QWORD *)v116 - 29)),
                          v117 == v118))
                    {
                      v119 = 0;
                    }
                    else if (v117 < v118)
                    {
                      v119 = -1;
                    }
                    else
                    {
                      v119 = 1;
                    }
                    v113 -= 240;
                    if ((v119 & 0x80000000) == 0)
                    {
                      v120 = (uint64_t)a1 + v113 + 240;
                      goto LABEL_168;
                    }
                  }
                  v120 = (uint64_t)a1;
LABEL_168:
                  v121 = v242;
                  *(_QWORD *)(v120 + 16) = v243;
                  *(_OWORD *)v120 = v121;
                  v122 = (void **)(v116 + 24);
                  if (*(char *)(v120 + 47) < 0)
                    operator delete(*v122);
                  v123 = __p;
                  *((_QWORD *)v116 + 5) = v245;
                  *(_OWORD *)v122 = v123;
                  HIBYTE(v245) = 0;
                  LOBYTE(__p) = 0;
                  v124 = v246[0];
                  *(_OWORD *)(v116 + 60) = *(_OWORD *)((char *)v246 + 12);
                  *((_OWORD *)v116 + 3) = v124;
                  v105 = (_BYTE *)v112;
                  sub_1002E0BA0((uint64_t)(v116 + 80), v112);
                  v125 = v248;
                  v116[232] = v249;
                  *(_OWORD *)(v116 + 216) = v125;
                  sub_1002DF2E0(v112);
                  if (SHIBYTE(v245) < 0)
                    operator delete((void *)__p);
                }
              }
              v103 = v107 + 30;
              v104 += 240;
              v106 = v107;
            }
            while (v107 + 30 != a2);
          }
        }
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 5;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (*(double *)(v8 + 24) < a2[-1].n128_f64[1])
        {
          v105 = *(__n128 *)v8;
          v114 = *(__n128 *)(v8 + 16);
          v42 = a2[-1];
          *(__n128 *)v8 = a2[-2];
          *(__n128 *)(v8 + 16) = v42;
          a2[-2] = v105;
          a2[-1] = v114;
        }
        return;
      case 3uLL:
        sub_100308078((double *)v8, (double *)(v8 + 32), a2[-2].n128_f64);
        return;
      case 4uLL:
        sub_1003083A4((__n128 *)v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), a2 - 2);
        return;
      case 5uLL:
        v43 = (__n128 *)(v8 + 32);
        v44 = (__n128 *)(v8 + 64);
        v45 = (__n128 *)(v8 + 96);
        sub_1003083A4((__n128 *)v8, (__n128 *)(v8 + 32), (__n128 *)(v8 + 64), (__n128 *)(v8 + 96));
        if (*(double *)(v8 + 120) < a2[-1].n128_f64[1])
        {
          v46 = *v45;
          v115 = *(__n128 *)(v8 + 112);
          v47 = a2[-1];
          *v45 = a2[-2];
          *(__n128 *)(v8 + 112) = v47;
          a2[-2] = v46;
          a2[-1] = v115;
          if (*(double *)(v8 + 88) < *(double *)(v8 + 120))
          {
            v49 = *v44;
            v48 = *(_OWORD *)(v8 + 80);
            v50 = *(_OWORD *)(v8 + 112);
            *v44 = *v45;
            *(_OWORD *)(v8 + 80) = v50;
            *v45 = v49;
            *(_OWORD *)(v8 + 112) = v48;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 88))
            {
              v52 = *v43;
              v51 = *(_OWORD *)(v8 + 48);
              v53 = *(_OWORD *)(v8 + 80);
              *v43 = *v44;
              *(_OWORD *)(v8 + 48) = v53;
              *v44 = v52;
              *(_OWORD *)(v8 + 80) = v51;
              if (*(double *)(v8 + 24) < *(double *)(v8 + 56))
              {
                v106 = *(__n128 *)v8;
                v116 = *(_OWORD *)(v8 + 16);
                v54 = *(_OWORD *)(v8 + 48);
                *(__n128 *)v8 = *v43;
                *(_OWORD *)(v8 + 16) = v54;
                *v43 = v106;
                *(_OWORD *)(v8 + 48) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 767)
        {
          v55 = (__n128 *)(v8 + 32);
          v57 = (__n128 *)v8 == a2 || v55 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v57)
            {
              v58 = 0;
              v59 = v8;
              do
              {
                v60 = *(double *)(v59 + 24);
                v61 = *(double *)(v59 + 56);
                v59 = (unint64_t)v55;
                if (v60 < v61)
                {
                  v117 = v55[1].n128_i64[0];
                  v107 = *v55;
                  v62 = v58;
                  while (1)
                  {
                    v63 = v8 + v62;
                    v64 = *(_OWORD *)(v8 + v62 + 16);
                    *(_OWORD *)(v63 + 32) = *(_OWORD *)(v8 + v62);
                    *(_OWORD *)(v63 + 48) = v64;
                    if (!v62)
                      break;
                    v62 -= 32;
                    if (*(double *)(v63 - 8) >= v61)
                    {
                      v65 = v8 + v62 + 32;
                      goto LABEL_78;
                    }
                  }
                  v65 = v8;
LABEL_78:
                  *(_QWORD *)(v65 + 16) = v117;
                  *(__n128 *)v65 = v107;
                  *(double *)(v65 + 24) = v61;
                }
                v55 = (__n128 *)(v59 + 32);
                v58 += 32;
              }
              while ((__n128 *)(v59 + 32) != a2);
            }
          }
          else if (!v57)
          {
            do
            {
              v91 = *(double *)(a1 + 24);
              v92 = *(double *)(a1 + 56);
              a1 = (uint64_t)v55;
              if (v91 < v92)
              {
                v120 = v55[1].n128_i64[0];
                v110 = *v55;
                v93 = v55;
                do
                {
                  v94 = v93[-1];
                  *v93 = v93[-2];
                  v93[1] = v94;
                  v95 = v93[-3].n128_f64[1];
                  v93 -= 2;
                }
                while (v95 < v92);
                v93[1].n128_u64[0] = v120;
                *v93 = v110;
                v93[1].n128_f64[1] = v92;
              }
              v55 += 2;
            }
            while ((__n128 *)(a1 + 32) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__n128 *)v8 != a2)
          {
            v66 = (v10 - 2) >> 1;
            v67 = v66;
            do
            {
              v68 = v67;
              if (v66 >= v67)
              {
                v69 = (2 * v67) | 1;
                v70 = v8 + 32 * v69;
                if (2 * v68 + 2 < (uint64_t)v10 && *(double *)(v70 + 56) < *(double *)(v70 + 24))
                {
                  v70 += 32;
                  v69 = 2 * v68 + 2;
                }
                v71 = *(double *)(v8 + 32 * v68 + 24);
                if (v71 >= *(double *)(v70 + 24))
                {
                  v72 = v8 + 32 * v68;
                  v118 = *(_QWORD *)(v72 + 16);
                  v108 = *(_OWORD *)v72;
                  do
                  {
                    v73 = (_OWORD *)v72;
                    v72 = v70;
                    v74 = *(_OWORD *)(v70 + 16);
                    *v73 = *(_OWORD *)v70;
                    v73[1] = v74;
                    if (v66 < v69)
                      break;
                    v75 = 2 * v69;
                    v69 = (2 * v69) | 1;
                    v70 = v8 + 32 * v69;
                    v76 = v75 + 2;
                    if (v76 < (uint64_t)v10 && *(double *)(v70 + 56) < *(double *)(v70 + 24))
                    {
                      v70 += 32;
                      v69 = v76;
                    }
                  }
                  while (v71 >= *(double *)(v70 + 24));
                  *(_QWORD *)(v72 + 16) = v118;
                  *(_OWORD *)v72 = v108;
                  *(double *)(v72 + 24) = v71;
                }
              }
              v67 = v68 - 1;
            }
            while (v68);
            v77 = (unint64_t)v9 >> 5;
            do
            {
              v78 = 0;
              v109 = *(__n128 *)v8;
              v119 = *(__n128 *)(v8 + 16);
              v79 = v8;
              do
              {
                v80 = (_OWORD *)v79;
                v79 += 32 * (v78 + 1);
                v81 = 2 * v78;
                v78 = (2 * v78) | 1;
                v82 = v81 + 2;
                if (v82 < v77 && *(double *)(v79 + 56) < *(double *)(v79 + 24))
                {
                  v79 += 32;
                  v78 = v82;
                }
                v83 = *(_OWORD *)(v79 + 16);
                *v80 = *(_OWORD *)v79;
                v80[1] = v83;
              }
              while (v78 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              a2 -= 2;
              if ((__n128 *)v79 == a2)
              {
                *(__n128 *)v79 = v109;
                *(__n128 *)(v79 + 16) = v119;
              }
              else
              {
                v84 = a2[1];
                *(__n128 *)v79 = *a2;
                *(__n128 *)(v79 + 16) = v84;
                *a2 = v109;
                a2[1] = v119;
                v85 = v79 - v8 + 32;
                if (v85 >= 33)
                {
                  v86 = (((unint64_t)v85 >> 5) - 2) >> 1;
                  v87 = *(double *)(v79 + 24);
                  if (v87 < *(double *)(v8 + 32 * v86 + 24))
                  {
                    v101 = *(_QWORD *)(v79 + 16);
                    v98 = *(_OWORD *)v79;
                    do
                    {
                      v88 = (_OWORD *)v79;
                      v79 = v8 + 32 * v86;
                      v89 = *(_OWORD *)(v79 + 16);
                      *v88 = *(_OWORD *)v79;
                      v88[1] = v89;
                      if (!v86)
                        break;
                      v86 = (v86 - 1) >> 1;
                    }
                    while (v87 < *(double *)(v8 + 32 * v86 + 24));
                    *(_QWORD *)(v79 + 16) = v101;
                    *(_OWORD *)v79 = v98;
                    *(double *)(v79 + 24) = v87;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = v8 + 32 * (v10 >> 1);
        if ((unint64_t)v9 <= 0x1000)
        {
          sub_100308078((double *)(a1 + 32 * (v10 >> 1)), (double *)a1, a2[-2].n128_f64);
        }
        else
        {
          sub_100308078((double *)a1, (double *)(a1 + 32 * (v10 >> 1)), a2[-2].n128_f64);
          sub_100308078((double *)(a1 + 32), (double *)(v12 - 32), a2[-4].n128_f64);
          sub_100308078((double *)(a1 + 64), (double *)(a1 + 32 + 32 * v11), a2[-6].n128_f64);
          sub_100308078((double *)(v12 - 32), (double *)v12, (double *)(a1 + 32 + 32 * v11));
          v102 = *(_OWORD *)a1;
          v111 = *(_OWORD *)(a1 + 16);
          v13 = *(_OWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)v12 = v102;
          *(_OWORD *)(v12 + 16) = v111;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v14 = *(double *)(a1 + 24);
          if (v14 < *(double *)(a1 - 8))
            goto LABEL_11;
          v100 = *(_QWORD *)(a1 + 16);
          v97 = *(_OWORD *)a1;
          if (a2[-1].n128_f64[1] >= v14)
          {
            v32 = a1 + 32;
            do
            {
              v8 = v32;
              if (v32 >= (unint64_t)a2)
                break;
              v33 = *(double *)(v32 + 24);
              v32 += 32;
            }
            while (v33 >= v14);
          }
          else
          {
            v30 = a1;
            do
            {
              v8 = v30 + 32;
              v31 = *(double *)(v30 + 56);
              v30 += 32;
            }
            while (v31 >= v14);
          }
          v34 = a2;
          if (v8 < (unint64_t)a2)
          {
            v35 = a2;
            do
            {
              v34 = v35 - 2;
              v36 = v35[-1].n128_f64[1];
              v35 -= 2;
            }
            while (v36 < v14);
          }
          while (v8 < (unint64_t)v34)
          {
            v104 = *(__n128 *)v8;
            v113 = *(__n128 *)(v8 + 16);
            v37 = v34[1];
            *(__n128 *)v8 = *v34;
            *(__n128 *)(v8 + 16) = v37;
            *v34 = v104;
            v34[1] = v113;
            do
            {
              v38 = *(double *)(v8 + 56);
              v8 += 32;
            }
            while (v38 >= v14);
            do
            {
              v39 = v34[-1].n128_f64[1];
              v34 -= 2;
            }
            while (v39 < v14);
          }
          v40 = (_OWORD *)(v8 - 32);
          if (v8 - 32 != a1)
          {
            v41 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)a1 = *v40;
            *(_OWORD *)(a1 + 16) = v41;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 16) = v100;
          *v40 = v97;
          *(double *)(v8 - 8) = v14;
          continue;
        }
        v14 = *(double *)(a1 + 24);
LABEL_11:
        v15 = 0;
        v99 = *(_QWORD *)(a1 + 16);
        v96 = *(_OWORD *)a1;
        do
        {
          v16 = *(double *)(a1 + v15 + 56);
          v15 += 32;
        }
        while (v14 < v16);
        v17 = a1 + v15;
        v18 = a2;
        if (v15 == 32)
        {
          v21 = a2;
          while (v17 < (unint64_t)v21)
          {
            v19 = v21 - 2;
            v22 = v21[-1].n128_f64[1];
            v21 -= 2;
            if (v14 < v22)
              goto LABEL_21;
          }
          v19 = v21;
        }
        else
        {
          do
          {
            v19 = v18 - 2;
            v20 = v18[-1].n128_f64[1];
            v18 -= 2;
          }
          while (v14 >= v20);
        }
LABEL_21:
        v8 = v17;
        if (v17 < (unint64_t)v19)
        {
          v23 = v19;
          do
          {
            v103 = *(__n128 *)v8;
            v112 = *(__n128 *)(v8 + 16);
            v24 = v23[1];
            *(__n128 *)v8 = *v23;
            *(__n128 *)(v8 + 16) = v24;
            *v23 = v103;
            v23[1] = v112;
            do
            {
              v25 = *(double *)(v8 + 56);
              v8 += 32;
            }
            while (v14 < v25);
            do
            {
              v26 = v23[-1].n128_f64[1];
              v23 -= 2;
            }
            while (v14 >= v26);
          }
          while (v8 < (unint64_t)v23);
        }
        v27 = (_OWORD *)(v8 - 32);
        if (v8 - 32 != a1)
        {
          v28 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)a1 = *v27;
          *(_OWORD *)(a1 + 16) = v28;
        }
        *(_QWORD *)(v8 - 16) = v99;
        *v27 = v96;
        *(double *)(v8 - 8) = v14;
        if (v17 < (unint64_t)v19)
        {
LABEL_32:
          sub_10030784C(a1, v8 - 32, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_100308154(a1, v8 - 32);
        if (!sub_100308154(v8, (uint64_t)a2))
        {
          if (v29)
            continue;
          goto LABEL_32;
        }
        a2 = (__n128 *)(v8 - 32);
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 5;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xCCCCCCCCCCCCCCCDLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v40 = *a3;
        v58[0] = a2[-5];
        v41 = a2[-1];
        v43 = a2[-4];
        v42 = a2[-3];
        v58[3] = a2[-2];
        v58[4] = v41;
        v58[1] = v43;
        v58[2] = v42;
        v45 = v10[1];
        v44 = v10[2];
        v46 = v10[4];
        v57[3] = v10[3];
        v57[4] = v46;
        v57[1] = v45;
        v57[2] = v44;
        v57[0] = *v10;
        if (v40(v58, v57))
        {
          v59 = *v10;
          v47 = v10[1];
          v48 = v10[2];
          v49 = v10[4];
          v62 = v10[3];
          v63 = v49;
          v60 = v47;
          v61 = v48;
          v50 = a2[-1];
          v52 = a2[-4];
          v51 = a2[-3];
          v10[3] = a2[-2];
          v10[4] = v50;
          v10[1] = v52;
          v10[2] = v51;
          *v10 = *v9;
          v53 = v62;
          a2[-3] = v61;
          a2[-2] = v53;
          a2[-1] = v63;
          v54 = v60;
          *v9 = v59;
          a2[-4] = v54;
        }
        return;
      case 3uLL:
        sub_10050CF50(v10, (__n128 *)v10[5].n128_u64, (__n128 *)a2[-5].n128_u64, a3);
        return;
      case 4uLL:
        sub_10050DB18((__int128 *)v10, (__int128 *)&v10[5], (__int128 *)&v10[10], (__int128 *)&a2[-5], a3);
        return;
      case 5uLL:
        sub_10050DD2C((__int128 *)v10, (__int128 *)&v10[5], (__int128 *)&v10[10], (__int128 *)&v10[15], (__int128 *)&a2[-5], a3);
        return;
      default:
        if (v13 <= 1919)
        {
          if ((a5 & 1) != 0)
            sub_10050CC54((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          else
            sub_10050CDE8((uint64_t)v10, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[5 * (v14 >> 1)];
          if ((unint64_t)v13 < 0x2801)
          {
            sub_10050CF50(v16, v10, (__n128 *)a2[-5].n128_u64, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10050CF50(v10, v16, (__n128 *)a2[-5].n128_u64, a3);
            v17 = 5 * v15;
            v18 = &v10[5 * v15 - 5];
            sub_10050CF50((__n128 *)v10[5].n128_u64, v18, (__n128 *)a2[-10].n128_u64, a3);
            v19 = v10 + 10;
            v20 = &v10[v17 + 5];
            sub_10050CF50(v19, v20, (__n128 *)a2[-15].n128_u64, a3);
            sub_10050CF50(v18, v16, v20, a3);
            v59 = *a1;
            v21 = a1[1];
            v22 = a1[2];
            v23 = a1[4];
            v62 = a1[3];
            v63 = v23;
            v60 = v21;
            v61 = v22;
            v24 = v16[4];
            v26 = v16[1];
            v25 = v16[2];
            a1[3] = v16[3];
            a1[4] = v24;
            a1[1] = v26;
            a1[2] = v25;
            *a1 = *v16;
            v27 = v63;
            v29 = v60;
            v28 = v61;
            v16[3] = v62;
            v16[4] = v27;
            v16[1] = v29;
            v16[2] = v28;
            *v16 = v59;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          v30 = *a3;
          v56[0] = a1[-5];
          v31 = a1[-1];
          v33 = a1[-4];
          v32 = a1[-3];
          v56[3] = a1[-2];
          v56[4] = v31;
          v56[1] = v33;
          v56[2] = v32;
          v35 = a1[1];
          v34 = a1[2];
          v36 = a1[4];
          v55[3] = a1[3];
          v55[4] = v36;
          v55[1] = v35;
          v55[2] = v34;
          v55[0] = *a1;
          if ((((uint64_t (*)(_OWORD *, _OWORD *))v30)(v56, v55) & 1) == 0)
          {
            v10 = (__n128 *)sub_10050D284(a1, a2, (uint64_t (**)(_QWORD, _QWORD))a3);
            goto LABEL_16;
          }
LABEL_11:
          v37 = sub_10050D564((__int128 *)a1, (__int128 *)a2, (uint64_t (**)(_QWORD, _QWORD))a3);
          if ((v38 & 1) == 0)
            goto LABEL_14;
          v39 = sub_10050D82C((__int128 *)a1, v37, a3);
          v10 = (__n128 *)(v37 + 5);
          if (!sub_10050D82C(v37 + 5, (__int128 *)a2, a3))
          {
            v11 = v12 + 1;
            if (v39)
              continue;
LABEL_14:
            sub_10050C884(a1, v37, a3, -v12, a5 & 1);
            v10 = (__n128 *)(v37 + 5);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v37;
          if (v39)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_10050DFD4((uint64_t)v10, a2, a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(double *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(double *)v8)
        {
          v108 = *(_QWORD *)(v8 + 16);
          v99 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 16) = v108;
          *(_OWORD *)v38 = v99;
        }
        return;
      case 3:
        sub_100545880((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_100545BE8(v8, v8 + 24, v8 + 48, (unint64_t *)(a2 - 24));
        return;
      case 5:
        v41 = (__int128 *)(v8 + 24);
        v42 = (__int128 *)(v8 + 48);
        v43 = (__int128 *)(v8 + 72);
        sub_100545BE8(v8, v8 + 24, v8 + 48, (unint64_t *)(v8 + 72));
        v45 = *(double *)(a2 - 24);
        v44 = a2 - 24;
        if (v45 < *(double *)(v8 + 72))
        {
          v46 = *v43;
          v47 = *(_QWORD *)(v8 + 88);
          v48 = *(_QWORD *)(v44 + 16);
          *v43 = *(_OWORD *)v44;
          *(_QWORD *)(v8 + 88) = v48;
          *(_QWORD *)(v44 + 16) = v47;
          *(_OWORD *)v44 = v46;
          if (*(double *)v43 < *(double *)v42)
          {
            v49 = *(_QWORD *)(v8 + 64);
            v50 = *v42;
            *v42 = *v43;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v43 = v50;
            *(_QWORD *)(v8 + 88) = v49;
            if (*(double *)v42 < *(double *)v41)
            {
              v51 = *(_QWORD *)(v8 + 40);
              v52 = *v41;
              *v41 = *v42;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v42 = v52;
              *(_QWORD *)(v8 + 64) = v51;
              if (*(double *)(v8 + 24) < *(double *)v8)
              {
                v109 = *(_QWORD *)(v8 + 16);
                v100 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v41;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v41 = v100;
                *(_QWORD *)(v8 + 40) = v109;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v53 = v8 + 24;
          v55 = v8 == a2 || v53 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v55)
            {
              v56 = 0;
              v57 = v8;
              do
              {
                v58 = v53;
                v59 = *(double *)(v57 + 24);
                if (v59 < *(double *)v57)
                {
                  v101 = *(_OWORD *)(v57 + 32);
                  v60 = v56;
                  while (1)
                  {
                    v61 = v8 + v60;
                    *(_OWORD *)(v61 + 24) = *(_OWORD *)(v8 + v60);
                    *(_QWORD *)(v61 + 40) = *(_QWORD *)(v8 + v60 + 16);
                    if (!v60)
                      break;
                    v60 -= 24;
                    if (v59 >= *(double *)(v61 - 24))
                    {
                      v62 = v8 + v60 + 24;
                      goto LABEL_75;
                    }
                  }
                  v62 = v8;
LABEL_75:
                  *(double *)v62 = v59;
                  *(_OWORD *)(v62 + 8) = v101;
                }
                v53 = v58 + 24;
                v56 += 24;
                v57 = v58;
              }
              while (v58 + 24 != a2);
            }
          }
          else if (!v55)
          {
            do
            {
              v89 = v53;
              v90 = *(double *)(a1 + 24);
              if (v90 < *(double *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                v91 = v53;
                do
                {
                  *(_OWORD *)v91 = *(_OWORD *)(v91 - 24);
                  *(_QWORD *)(v91 + 16) = *(_QWORD *)(v91 - 8);
                  v92 = *(double *)(v91 - 48);
                  v91 -= 24;
                }
                while (v90 < v92);
                *(double *)v91 = v90;
                *(_OWORD *)(v91 + 8) = v104;
              }
              v53 += 24;
              a1 = v89;
            }
            while (v89 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v63 = (unint64_t)(v10 - 2) >> 1;
            v64 = v63;
            do
            {
              v65 = v64;
              if (v63 >= v64)
              {
                v66 = (2 * v64) | 1;
                v67 = v8 + 24 * v66;
                if (2 * v65 + 2 < v10 && *(double *)v67 < *(double *)(v67 + 24))
                {
                  v67 += 24;
                  v66 = 2 * v65 + 2;
                }
                v68 = v8 + 24 * v65;
                v69 = *(double *)v68;
                if (*(double *)v67 >= *(double *)v68)
                {
                  v102 = *(_OWORD *)(v68 + 8);
                  do
                  {
                    v70 = v68;
                    v68 = v67;
                    v71 = *(_OWORD *)v67;
                    *(_QWORD *)(v70 + 16) = *(_QWORD *)(v67 + 16);
                    *(_OWORD *)v70 = v71;
                    if (v63 < v66)
                      break;
                    v72 = 2 * v66;
                    v66 = (2 * v66) | 1;
                    v67 = v8 + 24 * v66;
                    v73 = v72 + 2;
                    if (v73 < v10 && *(double *)v67 < *(double *)(v67 + 24))
                    {
                      v67 += 24;
                      v66 = v73;
                    }
                  }
                  while (*(double *)v67 >= v69);
                  *(double *)v68 = v69;
                  *(_OWORD *)(v68 + 8) = v102;
                }
              }
              v64 = v65 - 1;
            }
            while (v65);
            v74 = v9 / 0x18uLL;
            do
            {
              v75 = 0;
              v110 = *(_QWORD *)(v8 + 16);
              v103 = *(_OWORD *)v8;
              v76 = v8;
              do
              {
                v77 = v76;
                v76 += 24 * v75 + 24;
                v78 = 2 * v75;
                v75 = (2 * v75) | 1;
                v79 = v78 + 2;
                if (v79 < v74 && *(double *)v76 < *(double *)(v76 + 24))
                {
                  v76 += 24;
                  v75 = v79;
                }
                v80 = *(_OWORD *)v76;
                *(_QWORD *)(v77 + 16) = *(_QWORD *)(v76 + 16);
                *(_OWORD *)v77 = v80;
              }
              while (v75 <= (uint64_t)((unint64_t)(v74 - 2) >> 1));
              a2 -= 24;
              if (v76 == a2)
              {
                *(_QWORD *)(v76 + 16) = v110;
                *(_OWORD *)v76 = v103;
              }
              else
              {
                v81 = *(_OWORD *)a2;
                *(_QWORD *)(v76 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v76 = v81;
                *(_QWORD *)(a2 + 16) = v110;
                *(_OWORD *)a2 = v103;
                v82 = v76 - v8 + 24;
                if (v82 >= 25)
                {
                  v83 = (v82 / 0x18uLL - 2) >> 1;
                  v84 = v8 + 24 * v83;
                  v85 = *(double *)v76;
                  if (*(double *)v84 < *(double *)v76)
                  {
                    v95 = *(_OWORD *)(v76 + 8);
                    do
                    {
                      v86 = v76;
                      v76 = v84;
                      v87 = *(_OWORD *)v84;
                      *(_QWORD *)(v86 + 16) = *(_QWORD *)(v84 + 16);
                      *(_OWORD *)v86 = v87;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = v8 + 24 * v83;
                    }
                    while (*(double *)v84 < v85);
                    *(double *)v76 = v85;
                    *(_OWORD *)(v76 + 8) = v95;
                  }
                }
              }
            }
            while (v74-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_100545880((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_100545880((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_100545880((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_100545880((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_100545880(v14, (__int128 *)v12, v15);
          v105 = *(_QWORD *)(a1 + 16);
          v96 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v105;
          *(_OWORD *)v12 = v96;
        }
        --a3;
        v17 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 24) >= v17)
        {
          v94 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            v107 = *(_QWORD *)(v8 + 16);
            v98 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v32 + 16);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 16) = v107;
            *(_OWORD *)v32 = v98;
            do
            {
              v35 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v17;
          *(_OWORD *)(v8 - 16) = v94;
          continue;
        }
        v18 = 0;
        v93 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(double *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            v106 = *(_QWORD *)(v8 + 16);
            v97 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 16) = v106;
            *(_OWORD *)v24 = v97;
            do
            {
              v26 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(double *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v28;
        }
        *(double *)(v8 - 24) = v17;
        *(_OWORD *)(v8 - 16) = v93;
        if (v20 < v21)
        {
LABEL_29:
          sub_100545004(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_100545970(a1, v8 - 24);
        if (!sub_100545970(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v8) >> 4);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(a2 - 9) < *(double *)(v8 + 8))
        {
          v148 = *(_OWORD *)v8;
          v184 = *(_OWORD *)(v8 + 48);
          v196 = *(_OWORD *)(v8 + 64);
          v160 = *(_OWORD *)(v8 + 16);
          v172 = *(_OWORD *)(v8 + 32);
          v55 = *((_OWORD *)a2 - 1);
          v57 = *((_OWORD *)a2 - 4);
          v56 = *((_OWORD *)a2 - 3);
          *(_OWORD *)(v8 + 48) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 64) = v55;
          *(_OWORD *)(v8 + 16) = v57;
          *(_OWORD *)(v8 + 32) = v56;
          *(_OWORD *)v8 = *((_OWORD *)a2 - 5);
          *((_OWORD *)a2 - 2) = v184;
          *((_OWORD *)a2 - 1) = v196;
          *((_OWORD *)a2 - 4) = v160;
          *((_OWORD *)a2 - 3) = v172;
          *((_OWORD *)a2 - 5) = v148;
        }
        return;
      case 3:
        sub_10058154C(v8, v8 + 80, (uint64_t)(a2 - 10));
        return;
      case 4:
        sub_100581AC0(v8, v8 + 80, v8 + 160, (uint64_t)(a2 - 10));
        return;
      case 5:
        v58 = (__int128 *)(v8 + 80);
        v59 = (__int128 *)(v8 + 160);
        v60 = (__int128 *)(v8 + 240);
        sub_100581AC0(v8, v8 + 80, v8 + 160, v8 + 240);
        if (*(a2 - 9) < *(double *)(v8 + 248))
        {
          v173 = *(_OWORD *)(v8 + 272);
          v185 = *(_OWORD *)(v8 + 288);
          v197 = *(_OWORD *)(v8 + 304);
          v149 = *v60;
          v161 = *(_OWORD *)(v8 + 256);
          v62 = *((_OWORD *)a2 - 4);
          v61 = *((_OWORD *)a2 - 3);
          v63 = *((_OWORD *)a2 - 1);
          *(_OWORD *)(v8 + 288) = *((_OWORD *)a2 - 2);
          *(_OWORD *)(v8 + 304) = v63;
          *(_OWORD *)(v8 + 256) = v62;
          *(_OWORD *)(v8 + 272) = v61;
          *v60 = *((_OWORD *)a2 - 5);
          *((_OWORD *)a2 - 5) = v149;
          *((_OWORD *)a2 - 2) = v185;
          *((_OWORD *)a2 - 1) = v197;
          *((_OWORD *)a2 - 4) = v161;
          *((_OWORD *)a2 - 3) = v173;
          if (*(double *)(v8 + 248) < *(double *)(v8 + 168))
          {
            v174 = *(_OWORD *)(v8 + 192);
            v186 = *(_OWORD *)(v8 + 208);
            v198 = *(_OWORD *)(v8 + 224);
            v150 = *v59;
            v162 = *(_OWORD *)(v8 + 176);
            v64 = *(_OWORD *)(v8 + 288);
            *(_OWORD *)(v8 + 192) = *(_OWORD *)(v8 + 272);
            *(_OWORD *)(v8 + 208) = v64;
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 304);
            v65 = *(_OWORD *)(v8 + 256);
            *v59 = *v60;
            *(_OWORD *)(v8 + 176) = v65;
            *(_OWORD *)(v8 + 288) = v186;
            *(_OWORD *)(v8 + 304) = v198;
            *(_OWORD *)(v8 + 256) = v162;
            *(_OWORD *)(v8 + 272) = v174;
            v66 = *(double *)(v8 + 168);
            v67 = *(double *)(v8 + 88);
            *v60 = v150;
            if (v66 < v67)
            {
              v175 = *(_OWORD *)(v8 + 112);
              v187 = *(_OWORD *)(v8 + 128);
              v199 = *(_OWORD *)(v8 + 144);
              v151 = *v58;
              v163 = *(_OWORD *)(v8 + 96);
              v68 = *(_OWORD *)(v8 + 208);
              *(_OWORD *)(v8 + 112) = *(_OWORD *)(v8 + 192);
              *(_OWORD *)(v8 + 128) = v68;
              *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 224);
              v69 = *(_OWORD *)(v8 + 176);
              *v58 = *v59;
              *(_OWORD *)(v8 + 96) = v69;
              *(_OWORD *)(v8 + 208) = v187;
              *(_OWORD *)(v8 + 224) = v199;
              *(_OWORD *)(v8 + 176) = v163;
              *(_OWORD *)(v8 + 192) = v175;
              v70 = *(double *)(v8 + 88);
              v71 = *(double *)(v8 + 8);
              *v59 = v151;
              if (v70 < v71)
              {
                v152 = *(_OWORD *)v8;
                v188 = *(_OWORD *)(v8 + 48);
                v200 = *(_OWORD *)(v8 + 64);
                v164 = *(_OWORD *)(v8 + 16);
                v176 = *(_OWORD *)(v8 + 32);
                v72 = *(_OWORD *)(v8 + 144);
                v73 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 48) = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 64) = v72;
                v74 = *v58;
                *(_OWORD *)(v8 + 16) = *(_OWORD *)(v8 + 96);
                *(_OWORD *)(v8 + 32) = v73;
                *(_OWORD *)v8 = v74;
                *(_OWORD *)(v8 + 128) = v188;
                *(_OWORD *)(v8 + 144) = v200;
                *(_OWORD *)(v8 + 96) = v164;
                *(_OWORD *)(v8 + 112) = v176;
                *v58 = v152;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 1919)
        {
          v75 = (double *)(v8 + 80);
          v77 = (double *)v8 == a2 || v75 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v77)
            {
              v78 = 0;
              v79 = v8;
              do
              {
                v80 = v75;
                v81 = *(double *)(v79 + 88);
                if (v81 < *(double *)(v79 + 8))
                {
                  v82 = *(_QWORD *)v75;
                  v153 = *(_OWORD *)(v79 + 96);
                  v165 = *(_OWORD *)(v79 + 112);
                  v177 = *(_OWORD *)(v79 + 128);
                  v189 = *(_OWORD *)(v79 + 144);
                  v83 = v78;
                  while (1)
                  {
                    v84 = (double *)(v8 + v83);
                    v85 = *(_OWORD *)(v8 + v83 + 48);
                    *((_OWORD *)v84 + 7) = *(_OWORD *)(v8 + v83 + 32);
                    *((_OWORD *)v84 + 8) = v85;
                    *((_OWORD *)v84 + 9) = *(_OWORD *)(v8 + v83 + 64);
                    v86 = *(_OWORD *)(v8 + v83 + 16);
                    *((_OWORD *)v84 + 5) = *(_OWORD *)(v8 + v83);
                    *((_OWORD *)v84 + 6) = v86;
                    if (!v83)
                      break;
                    v83 -= 80;
                    if (v81 >= *(v84 - 9))
                    {
                      v87 = v8 + v83 + 80;
                      goto LABEL_78;
                    }
                  }
                  v87 = v8;
LABEL_78:
                  *(_QWORD *)v87 = v82;
                  *(double *)(v87 + 8) = v81;
                  *(_OWORD *)(v87 + 16) = v153;
                  *(_OWORD *)(v87 + 32) = v165;
                  *(_OWORD *)(v87 + 48) = v177;
                  *(_OWORD *)(v87 + 64) = v189;
                }
                v75 = v80 + 10;
                v78 += 80;
                v79 = (unint64_t)v80;
              }
              while (v80 + 10 != a2);
            }
          }
          else if (!v77)
          {
            do
            {
              v128 = (uint64_t)v75;
              v129 = *(double *)(a1 + 88);
              if (v129 < *(double *)(a1 + 8))
              {
                v130 = *(_QWORD *)v75;
                v156 = *(_OWORD *)(a1 + 96);
                v168 = *(_OWORD *)(a1 + 112);
                v180 = *(_OWORD *)(a1 + 128);
                v192 = *(_OWORD *)(a1 + 144);
                do
                {
                  v131 = *((_OWORD *)v75 - 2);
                  *((_OWORD *)v75 + 2) = *((_OWORD *)v75 - 3);
                  *((_OWORD *)v75 + 3) = v131;
                  *((_OWORD *)v75 + 4) = *((_OWORD *)v75 - 1);
                  v132 = *((_OWORD *)v75 - 4);
                  *(_OWORD *)v75 = *((_OWORD *)v75 - 5);
                  *((_OWORD *)v75 + 1) = v132;
                  *(double *)&v132 = *(v75 - 19);
                  v75 -= 10;
                }
                while (v129 < *(double *)&v132);
                *(_QWORD *)v75 = v130;
                v75[1] = v129;
                *((_OWORD *)v75 + 3) = v180;
                *((_OWORD *)v75 + 4) = v192;
                *((_OWORD *)v75 + 1) = v156;
                *((_OWORD *)v75 + 2) = v168;
              }
              v75 = (double *)(v128 + 80);
              a1 = v128;
            }
            while ((double *)(v128 + 80) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((double *)v8 == a2)
            return;
          v88 = (unint64_t)(v10 - 2) >> 1;
          v89 = v88;
          do
          {
            v90 = v89;
            if (v88 >= v89)
            {
              v91 = (2 * v89) | 1;
              v92 = v8 + 80 * v91;
              if (2 * v90 + 2 < v10 && *(double *)(v8 + 80 * v91 + 8) < *(double *)(v92 + 88))
              {
                v92 += 80;
                v91 = 2 * v90 + 2;
              }
              v93 = *(double *)(v8 + 80 * v90 + 8);
              if (*(double *)(v92 + 8) >= v93)
              {
                v94 = v8 + 80 * v90;
                v95 = *(_QWORD *)v94;
                v178 = *(_OWORD *)(v94 + 48);
                v190 = *(_OWORD *)(v94 + 64);
                v154 = *(_OWORD *)(v94 + 16);
                v166 = *(_OWORD *)(v94 + 32);
                do
                {
                  v96 = (_OWORD *)v94;
                  v94 = v92;
                  *v96 = *(_OWORD *)v92;
                  v97 = *(_OWORD *)(v92 + 16);
                  v98 = *(_OWORD *)(v92 + 32);
                  v99 = *(_OWORD *)(v92 + 64);
                  v96[3] = *(_OWORD *)(v92 + 48);
                  v96[4] = v99;
                  v96[1] = v97;
                  v96[2] = v98;
                  if (v88 < v91)
                    break;
                  v100 = (2 * v91) | 1;
                  v92 = v8 + 80 * v100;
                  v101 = 2 * v91 + 2;
                  if (v101 < v10 && *(double *)(v8 + 80 * v100 + 8) < *(double *)(v92 + 88))
                  {
                    v92 += 80;
                    v100 = v101;
                  }
                  v91 = v100;
                }
                while (*(double *)(v92 + 8) >= v93);
                *(_QWORD *)v94 = v95;
                *(double *)(v94 + 8) = v93;
                *(_OWORD *)(v94 + 16) = v154;
                *(_OWORD *)(v94 + 32) = v166;
                *(_OWORD *)(v94 + 48) = v178;
                *(_OWORD *)(v94 + 64) = v190;
              }
            }
            v89 = v90 - 1;
          }
          while (v90);
          v102 = v9 / 0x50uLL;
          while (2)
          {
            v103 = 0;
            v155 = *(_OWORD *)v8;
            v191 = *(_OWORD *)(v8 + 48);
            v201 = *(_OWORD *)(v8 + 64);
            v167 = *(_OWORD *)(v8 + 16);
            v179 = *(_OWORD *)(v8 + 32);
            v104 = v8;
            do
            {
              v105 = (_OWORD *)v104;
              v106 = v103 + 1;
              v104 += 80 * (v103 + 1);
              v107 = 2 * v103;
              v103 = (2 * v103) | 1;
              v108 = v107 + 2;
              if (v108 < v102 && *((double *)&v105[5 * v106] + 1) < *(double *)(v104 + 88))
              {
                v104 += 80;
                v103 = v108;
              }
              *v105 = *(_OWORD *)v104;
              v109 = *(_OWORD *)(v104 + 16);
              v110 = *(_OWORD *)(v104 + 32);
              v111 = *(_OWORD *)(v104 + 64);
              v105[3] = *(_OWORD *)(v104 + 48);
              v105[4] = v111;
              v105[1] = v109;
              v105[2] = v110;
            }
            while (v103 <= (uint64_t)((unint64_t)(v102 - 2) >> 1));
            a2 -= 10;
            if ((double *)v104 != a2)
            {
              *(_OWORD *)v104 = *(_OWORD *)a2;
              v112 = *((_OWORD *)a2 + 1);
              v113 = *((_OWORD *)a2 + 2);
              v114 = *((_OWORD *)a2 + 4);
              *(_OWORD *)(v104 + 48) = *((_OWORD *)a2 + 3);
              *(_OWORD *)(v104 + 64) = v114;
              *(_OWORD *)(v104 + 16) = v112;
              *(_OWORD *)(v104 + 32) = v113;
              *((_OWORD *)a2 + 3) = v191;
              *((_OWORD *)a2 + 4) = v201;
              *((_OWORD *)a2 + 1) = v167;
              *((_OWORD *)a2 + 2) = v179;
              *(_OWORD *)a2 = v155;
              v115 = v104 - v8 + 80;
              if (v115 >= 81)
              {
                v116 = (v115 / 0x50uLL - 2) >> 1;
                v117 = *(double *)(v104 + 8);
                if (*(double *)(v8 + 80 * v116 + 8) < v117)
                {
                  v118 = *(_QWORD *)v104;
                  v141 = *(_OWORD *)(v104 + 48);
                  v144 = *(_OWORD *)(v104 + 64);
                  v135 = *(_OWORD *)(v104 + 16);
                  v138 = *(_OWORD *)(v104 + 32);
                  do
                  {
                    v119 = (_OWORD *)v104;
                    v104 = v8 + 80 * v116;
                    *v119 = *(_OWORD *)v104;
                    v120 = *(_OWORD *)(v104 + 16);
                    v121 = *(_OWORD *)(v104 + 32);
                    v122 = *(_OWORD *)(v104 + 64);
                    v119[3] = *(_OWORD *)(v104 + 48);
                    v119[4] = v122;
                    v119[1] = v120;
                    v119[2] = v121;
                    if (!v116)
                      break;
                    v116 = (v116 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 80 * v116 + 8) < v117);
                  *(_QWORD *)v104 = v118;
                  *(double *)(v104 + 8) = v117;
                  v123 = v135;
                  v124 = v138;
                  v125 = v141;
                  v126 = v144;
LABEL_110:
                  *(_OWORD *)(v104 + 48) = v125;
                  *(_OWORD *)(v104 + 64) = v126;
                  *(_OWORD *)(v104 + 16) = v123;
                  *(_OWORD *)(v104 + 32) = v124;
                }
              }
              if (v102-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v104 = v155;
          v123 = v167;
          v124 = v179;
          v125 = v191;
          v126 = v201;
          goto LABEL_110;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_OWORD *)(v8 + 80 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 < 0x2801)
        {
          sub_10058154C((uint64_t)v12, a1, (uint64_t)(a2 - 10));
        }
        else
        {
          sub_10058154C(a1, (uint64_t)v12, (uint64_t)(a2 - 10));
          v13 = 5 * v11;
          v14 = a1 + 80 * v11 - 80;
          sub_10058154C(a1 + 80, v14, (uint64_t)(a2 - 20));
          v15 = a1 + 80 + 16 * v13;
          sub_10058154C(a1 + 160, v15, (uint64_t)(a2 - 30));
          sub_10058154C(v14, (uint64_t)v12, v15);
          v145 = *(_OWORD *)a1;
          v181 = *(_OWORD *)(a1 + 48);
          v193 = *(_OWORD *)(a1 + 64);
          v157 = *(_OWORD *)(a1 + 16);
          v169 = *(_OWORD *)(a1 + 32);
          v16 = v12[4];
          v18 = v12[1];
          v17 = v12[2];
          *(_OWORD *)(a1 + 48) = v12[3];
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 16) = v18;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)a1 = *v12;
          v12[3] = v181;
          v12[4] = v193;
          v12[1] = v157;
          v12[2] = v169;
          *v12 = v145;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v19 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 72) < v19)
            goto LABEL_11;
          v39 = *(_QWORD *)a1;
          v140 = *(_OWORD *)(a1 + 48);
          v143 = *(_OWORD *)(a1 + 64);
          v134 = *(_OWORD *)(a1 + 16);
          v137 = *(_OWORD *)(a1 + 32);
          if (v19 >= *(a2 - 9))
          {
            v42 = a1 + 80;
            do
            {
              v8 = v42;
              if (v42 >= (unint64_t)a2)
                break;
              v43 = *(double *)(v42 + 8);
              v42 += 80;
            }
            while (v19 >= v43);
          }
          else
          {
            v40 = a1;
            do
            {
              v8 = v40 + 80;
              v41 = *(double *)(v40 + 88);
              v40 += 80;
            }
            while (v19 >= v41);
          }
          v44 = a2;
          if (v8 < (unint64_t)a2)
          {
            v45 = a2;
            do
            {
              v44 = v45 - 10;
              v46 = *(v45 - 9);
              v45 -= 10;
            }
            while (v19 < v46);
          }
          while (v8 < (unint64_t)v44)
          {
            v147 = *(_OWORD *)v8;
            v183 = *(_OWORD *)(v8 + 48);
            v195 = *(_OWORD *)(v8 + 64);
            v159 = *(_OWORD *)(v8 + 16);
            v171 = *(_OWORD *)(v8 + 32);
            v47 = *((_OWORD *)v44 + 4);
            v49 = *((_OWORD *)v44 + 1);
            v48 = *((_OWORD *)v44 + 2);
            *(_OWORD *)(v8 + 48) = *((_OWORD *)v44 + 3);
            *(_OWORD *)(v8 + 64) = v47;
            *(_OWORD *)(v8 + 16) = v49;
            *(_OWORD *)(v8 + 32) = v48;
            *(_OWORD *)v8 = *(_OWORD *)v44;
            *((_OWORD *)v44 + 3) = v183;
            *((_OWORD *)v44 + 4) = v195;
            *((_OWORD *)v44 + 1) = v159;
            *((_OWORD *)v44 + 2) = v171;
            *(_OWORD *)v44 = v147;
            do
            {
              v50 = *(double *)(v8 + 88);
              v8 += 80;
            }
            while (v19 >= v50);
            do
            {
              v51 = *(v44 - 9);
              v44 -= 10;
            }
            while (v19 < v51);
          }
          if (v8 - 80 != a1)
          {
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 80);
            v52 = *(_OWORD *)(v8 - 64);
            v53 = *(_OWORD *)(v8 - 48);
            v54 = *(_OWORD *)(v8 - 16);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 64) = v54;
            *(_OWORD *)(a1 + 16) = v52;
            *(_OWORD *)(a1 + 32) = v53;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 80) = v39;
          *(double *)(v8 - 72) = v19;
          *(_OWORD *)(v8 - 32) = v140;
          *(_OWORD *)(v8 - 16) = v143;
          *(_OWORD *)(v8 - 64) = v134;
          *(_OWORD *)(v8 - 48) = v137;
          continue;
        }
        v19 = *(double *)(a1 + 8);
LABEL_11:
        v20 = 0;
        v21 = *(_QWORD *)a1;
        v139 = *(_OWORD *)(a1 + 48);
        v142 = *(_OWORD *)(a1 + 64);
        v133 = *(_OWORD *)(a1 + 16);
        v136 = *(_OWORD *)(a1 + 32);
        do
        {
          v22 = *(double *)(a1 + v20 + 88);
          v20 += 80;
        }
        while (v22 < v19);
        v23 = a1 + v20;
        v24 = a2;
        if (v20 == 80)
        {
          v27 = a2;
          while (v23 < (unint64_t)v27)
          {
            v25 = v27 - 10;
            v28 = *(v27 - 9);
            v27 -= 10;
            if (v28 < v19)
              goto LABEL_21;
          }
          v25 = v27;
        }
        else
        {
          do
          {
            v25 = v24 - 10;
            v26 = *(v24 - 9);
            v24 -= 10;
          }
          while (v26 >= v19);
        }
LABEL_21:
        v8 = v23;
        if (v23 < (unint64_t)v25)
        {
          v29 = v25;
          do
          {
            v146 = *(_OWORD *)v8;
            v182 = *(_OWORD *)(v8 + 48);
            v194 = *(_OWORD *)(v8 + 64);
            v158 = *(_OWORD *)(v8 + 16);
            v170 = *(_OWORD *)(v8 + 32);
            v30 = *((_OWORD *)v29 + 4);
            v32 = *((_OWORD *)v29 + 1);
            v31 = *((_OWORD *)v29 + 2);
            *(_OWORD *)(v8 + 48) = *((_OWORD *)v29 + 3);
            *(_OWORD *)(v8 + 64) = v30;
            *(_OWORD *)(v8 + 16) = v32;
            *(_OWORD *)(v8 + 32) = v31;
            *(_OWORD *)v8 = *(_OWORD *)v29;
            *((_OWORD *)v29 + 3) = v182;
            *((_OWORD *)v29 + 4) = v194;
            *((_OWORD *)v29 + 1) = v158;
            *((_OWORD *)v29 + 2) = v170;
            *(_OWORD *)v29 = v146;
            do
            {
              v33 = *(double *)(v8 + 88);
              v8 += 80;
            }
            while (v33 < v19);
            do
            {
              v34 = *(v29 - 9);
              v29 -= 10;
            }
            while (v34 >= v19);
          }
          while (v8 < (unint64_t)v29);
        }
        if (v8 - 80 != a1)
        {
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 80);
          v35 = *(_OWORD *)(v8 - 64);
          v36 = *(_OWORD *)(v8 - 48);
          v37 = *(_OWORD *)(v8 - 16);
          *(_OWORD *)(a1 + 48) = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 64) = v37;
          *(_OWORD *)(a1 + 16) = v35;
          *(_OWORD *)(a1 + 32) = v36;
        }
        *(_QWORD *)(v8 - 80) = v21;
        *(double *)(v8 - 72) = v19;
        *(_OWORD *)(v8 - 32) = v139;
        *(_OWORD *)(v8 - 16) = v142;
        *(_OWORD *)(v8 - 64) = v133;
        *(_OWORD *)(v8 - 48) = v136;
        if (v23 < (unint64_t)v25)
        {
LABEL_32:
          sub_100580A64(a1, v8 - 80, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v38 = sub_10058172C(a1, v8 - 80);
        if (!sub_10058172C(v8, (uint64_t)a2))
        {
          if (v38)
            continue;
          goto LABEL_32;
        }
        a2 = (double *)(v8 - 80);
        if (!v38)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (a2[-1].n128_f64[1] < v9->n128_f64[1])
        {
          v26 = *v9;
          *v9 = a2[-1];
          a2[-1] = v26;
        }
        return;
      case 3uLL:
        sub_1005EAF48(v9->n128_f64, v9[1].n128_f64, a2[-1].n128_f64);
        return;
      case 4uLL:
        sub_1005EB358(v9->n128_f64, (uint64_t)&v9[1], (uint64_t)&v9[2], (uint64_t)&a2[-1]);
        return;
      case 5uLL:
        sub_1005EB3F8(v9->n128_f64, v9 + 1, v9 + 2, v9 + 3, a2 - 1);
        return;
      default:
        if (v12 > 383)
        {
          if (v11 == 1)
          {
            if (v9 != a2)
              sub_1005EB4C4(v9->n128_f64, a2->n128_f64, a2->n128_f64, a3);
            return;
          }
          v14 = v13 >> 1;
          n128_f64 = v9[v13 >> 1].n128_f64;
          if ((unint64_t)v12 < 0x801)
          {
            sub_1005EAF48(v9[v13 >> 1].n128_f64, v9->n128_f64, a2[-1].n128_f64);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1005EAF48(v9->n128_f64, v9[v13 >> 1].n128_f64, a2[-1].n128_f64);
            sub_1005EAF48(v9[1].n128_f64, n128_f64 - 2, a2[-2].n128_f64);
            sub_1005EAF48(v9[2].n128_f64, v9[v14 + 1].n128_f64, a2[-3].n128_f64);
            sub_1005EAF48(n128_f64 - 2, n128_f64, v9[v14 + 1].n128_f64);
            v25 = *v9;
            *v9 = *(__n128 *)n128_f64;
            *(__n128 *)n128_f64 = v25;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (v9[-1].n128_f64[1] >= v9->n128_f64[1])
          {
            v9 = (__n128 *)sub_1005EB004(v9->n128_f64, a2->n128_f64);
            goto LABEL_16;
          }
LABEL_11:
          v16 = (__n128 *)sub_1005EB0E8(v9->n128_f64, a2->n128_f64);
          if ((v17 & 1) == 0)
            goto LABEL_14;
          v18 = sub_1005EB1CC(v9, v16);
          v9 = v16 + 1;
          if (!sub_1005EB1CC(v16 + 1, a2))
          {
            v10 = v11 + 1;
            if (v18)
              continue;
LABEL_14:
            sub_1005EAB44(a1, v16, a3, -v11, a5 & 1);
            v9 = v16 + 1;
LABEL_16:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v16;
          if (v18)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          sub_1005EAEC4((uint64_t)v9, a2);
        }
        else if (v9 != a2)
        {
          while (&a1[1] != a2)
          {
            v20 = a1[1].n128_f64[1];
            v21 = a1->n128_f64[1];
            v19 = ++a1;
            if (v20 < v21)
            {
              v22 = v19->n128_u64[0];
              v23 = a1;
              do
              {
                *v23 = v23[-1];
                v24 = v23[-2].n128_f64[1];
                --v23;
              }
              while (v20 < v24);
              v23->n128_u64[0] = v22;
              v23->n128_f64[1] = v20;
            }
          }
        }
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = *((_QWORD *)v9 + 1);
          v9[1] = *(a2 - 1);
          *((_QWORD *)a2 - 1) = v23;
        }
        return;
      case 3uLL:
        sub_100672AA8(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        sub_100673084(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        sub_100673184(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (uint64_t)(a2 - 2));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_100672934(v9, a2);
          else
            sub_100672A0C(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_100672AA8(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_100672AA8(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_100672AA8(v9 + 2, v15 - 2, a2 - 4);
            sub_100672AA8(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_100672AA8(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            v9 = sub_100672BFC(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v18 = (double *)sub_100672D40(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_16;
          v20 = sub_100672E84((uint64_t)v9, v18);
          v9 = v18 + 2;
          if (!sub_100672E84((uint64_t)(v18 + 2), a2))
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_16:
            sub_1006725C0(a1, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_1006732D8((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v54 = *(double *)(a2 - 104);
        v55 = *(double *)v8;
        if (v54 > *(double *)v8)
        {
          *(double *)v8 = v54;
          *(double *)(a2 - 104) = v55;
          v160 = *(_OWORD *)(v8 + 8);
          v172 = *(_OWORD *)(v8 + 24);
          *(_OWORD *)v208 = *(_OWORD *)(v8 + 72);
          *(_OWORD *)&v208[16] = *(_OWORD *)(v8 + 88);
          v184 = *(_OWORD *)(v8 + 40);
          v196 = *(_OWORD *)(v8 + 56);
          v57 = *(_OWORD *)(a2 - 48);
          v56 = *(_OWORD *)(a2 - 32);
          v58 = *(_OWORD *)(a2 - 23);
          *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v8 + 81) = v58;
          *(_OWORD *)(v8 + 72) = v56;
          *(_OWORD *)(v8 + 56) = v57;
          v59 = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v8 + 8) = v59;
          *(_OWORD *)(a2 - 96) = v160;
          *(_OWORD *)(a2 - 80) = v172;
          *(_OWORD *)(a2 - 23) = *(_OWORD *)&v208[9];
          *(_OWORD *)(a2 - 48) = v196;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v208;
          *(_OWORD *)(a2 - 64) = v184;
        }
        return;
      case 3:
        sub_1006747F8(v8, v8 + 104, a2 - 104);
        return;
      case 4:
        sub_100674E98(v8, v8 + 104, v8 + 208, a2 - 104);
        return;
      case 5:
        sub_100674E98(v8, v8 + 104, v8 + 208, v8 + 312);
        v60 = *(double *)(a2 - 104);
        v61 = *(double *)(v8 + 312);
        if (v60 > v61)
        {
          *(double *)(v8 + 312) = v60;
          *(double *)(a2 - 104) = v61;
          v185 = *(_OWORD *)(v8 + 352);
          v197 = *(_OWORD *)(v8 + 368);
          *(_OWORD *)v209 = *(_OWORD *)(v8 + 384);
          *(_OWORD *)&v209[16] = *(_OWORD *)(v8 + 400);
          v161 = *(_OWORD *)(v8 + 320);
          v173 = *(_OWORD *)(v8 + 336);
          v62 = *(_OWORD *)(a2 - 80);
          *(_OWORD *)(v8 + 320) = *(_OWORD *)(a2 - 96);
          *(_OWORD *)(v8 + 336) = v62;
          v64 = *(_OWORD *)(a2 - 48);
          v63 = *(_OWORD *)(a2 - 32);
          v65 = *(_OWORD *)(a2 - 64);
          *(_OWORD *)(v8 + 393) = *(_OWORD *)(a2 - 23);
          *(_OWORD *)(v8 + 368) = v64;
          *(_OWORD *)(v8 + 384) = v63;
          *(_OWORD *)(v8 + 352) = v65;
          *(_OWORD *)(a2 - 96) = v161;
          *(_OWORD *)(a2 - 80) = v173;
          *(_OWORD *)(a2 - 23) = *(_OWORD *)&v209[9];
          *(_OWORD *)(a2 - 48) = v197;
          *(_OWORD *)(a2 - 32) = *(_OWORD *)v209;
          *(_OWORD *)(a2 - 64) = v185;
          v66 = *(double *)(v8 + 312);
          v67 = *(double *)(v8 + 208);
          if (v66 > v67)
          {
            *(double *)(v8 + 208) = v66;
            *(double *)(v8 + 312) = v67;
            v186 = *(_OWORD *)(v8 + 248);
            v198 = *(_OWORD *)(v8 + 264);
            *(_OWORD *)v210 = *(_OWORD *)(v8 + 280);
            *(_OWORD *)&v210[16] = *(_OWORD *)(v8 + 296);
            v162 = *(_OWORD *)(v8 + 216);
            v174 = *(_OWORD *)(v8 + 232);
            v68 = *(_OWORD *)(v8 + 368);
            *(_OWORD *)(v8 + 248) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 264) = v68;
            *(_OWORD *)(v8 + 280) = *(_OWORD *)(v8 + 384);
            *(_OWORD *)(v8 + 289) = *(_OWORD *)(v8 + 393);
            v69 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 216) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 232) = v69;
            *(_OWORD *)(v8 + 320) = v162;
            *(_OWORD *)(v8 + 336) = v174;
            *(_OWORD *)(v8 + 393) = *(_OWORD *)&v210[9];
            *(_OWORD *)(v8 + 368) = v198;
            *(_OWORD *)(v8 + 384) = *(_OWORD *)v210;
            *(_OWORD *)(v8 + 352) = v186;
            v70 = *(double *)(v8 + 104);
            if (v66 > v70)
            {
              *(double *)(v8 + 208) = v70;
              v187 = *(_OWORD *)(v8 + 144);
              v199 = *(_OWORD *)(v8 + 160);
              *(_OWORD *)v211 = *(_OWORD *)(v8 + 176);
              *(_OWORD *)&v211[16] = *(_OWORD *)(v8 + 192);
              v163 = *(_OWORD *)(v8 + 112);
              v175 = *(_OWORD *)(v8 + 128);
              v71 = *(_OWORD *)(v8 + 264);
              *(_OWORD *)(v8 + 144) = *(_OWORD *)(v8 + 248);
              *(_OWORD *)(v8 + 160) = v71;
              *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 280);
              *(_OWORD *)(v8 + 185) = *(_OWORD *)(v8 + 289);
              v72 = *(_OWORD *)(v8 + 232);
              *(_OWORD *)(v8 + 112) = *(_OWORD *)(v8 + 216);
              *(_OWORD *)(v8 + 128) = v72;
              *(_OWORD *)(v8 + 216) = v163;
              *(_OWORD *)(v8 + 232) = v175;
              *(_OWORD *)(v8 + 289) = *(_OWORD *)&v211[9];
              *(_OWORD *)(v8 + 264) = v199;
              *(_OWORD *)(v8 + 280) = *(_OWORD *)v211;
              *(_OWORD *)(v8 + 248) = v187;
              v73 = *(double *)v8;
              v74 = v66 <= *(double *)v8;
              *(double *)(v8 + 104) = v66;
              if (!v74)
              {
                *(double *)v8 = v66;
                *(double *)(v8 + 104) = v73;
                v164 = *(_OWORD *)(v8 + 8);
                v176 = *(_OWORD *)(v8 + 24);
                *(_OWORD *)v212 = *(_OWORD *)(v8 + 72);
                *(_OWORD *)&v212[16] = *(_OWORD *)(v8 + 88);
                v188 = *(_OWORD *)(v8 + 40);
                v200 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)(v8 + 81) = *(_OWORD *)(v8 + 185);
                *(_OWORD *)(v8 + 72) = *(_OWORD *)(v8 + 176);
                v75 = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 56) = *(_OWORD *)(v8 + 160);
                *(_OWORD *)(v8 + 40) = v75;
                v76 = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 8) = *(_OWORD *)(v8 + 112);
                *(_OWORD *)(v8 + 24) = v76;
                *(_OWORD *)(v8 + 112) = v164;
                *(_OWORD *)(v8 + 128) = v176;
                *(_OWORD *)(v8 + 185) = *(_OWORD *)&v212[9];
                *(_OWORD *)(v8 + 160) = v200;
                *(_OWORD *)(v8 + 176) = *(_OWORD *)v212;
                *(_OWORD *)(v8 + 144) = v188;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2495)
        {
          v77 = v8 + 104;
          v79 = v8 == a2 || v77 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v79)
            {
              v80 = 0;
              v81 = v8;
              do
              {
                v82 = v77;
                v83 = *(double *)(v81 + 104);
                if (v83 > *(double *)v81)
                {
                  v165 = *(_OWORD *)(v81 + 112);
                  v177 = *(_OWORD *)(v81 + 128);
                  *(_OWORD *)&v213[9] = *(_OWORD *)(v81 + 185);
                  v201 = *(_OWORD *)(v81 + 160);
                  *(_OWORD *)v213 = *(_OWORD *)(v81 + 176);
                  v189 = *(_OWORD *)(v81 + 144);
                  v84 = v80;
                  v85 = *(double *)v81;
                  while (1)
                  {
                    v86 = v8 + v84;
                    *(double *)(v86 + 104) = v85;
                    v87 = *(_OWORD *)(v8 + v84 + 56);
                    *(_OWORD *)(v86 + 144) = *(_OWORD *)(v8 + v84 + 40);
                    *(_OWORD *)(v86 + 160) = v87;
                    *(_OWORD *)(v86 + 176) = *(_OWORD *)(v8 + v84 + 72);
                    *(_OWORD *)(v86 + 185) = *(_OWORD *)(v8 + v84 + 81);
                    v88 = *(_OWORD *)(v8 + v84 + 24);
                    *(_OWORD *)(v86 + 112) = *(_OWORD *)(v8 + v84 + 8);
                    *(_OWORD *)(v86 + 128) = v88;
                    if (!v84)
                      break;
                    v85 = *(double *)(v86 - 104);
                    v84 -= 104;
                    if (v83 <= v85)
                    {
                      v89 = (double *)(v8 + v84 + 104);
                      goto LABEL_78;
                    }
                  }
                  v89 = (double *)v8;
LABEL_78:
                  *v89 = v83;
                  *(_OWORD *)(v86 + 24) = v177;
                  *(_OWORD *)(v86 + 8) = v165;
                  *(_OWORD *)(v86 + 81) = *(_OWORD *)&v213[9];
                  *(_OWORD *)(v86 + 72) = *(_OWORD *)v213;
                  *(_OWORD *)(v86 + 56) = v201;
                  *(_OWORD *)(v86 + 40) = v189;
                }
                v77 = v82 + 104;
                v80 += 104;
                v81 = v82;
              }
              while (v82 + 104 != a2);
            }
          }
          else if (!v79)
          {
            v135 = (_OWORD *)(v8 + 112);
            do
            {
              v136 = v77;
              v137 = *(double *)(a1 + 104);
              if (v137 > *(double *)a1)
              {
                v168 = *(_OWORD *)(a1 + 112);
                v180 = *(_OWORD *)(a1 + 128);
                *(_OWORD *)&v216[9] = *(_OWORD *)(a1 + 185);
                v204 = *(_OWORD *)(a1 + 160);
                *(_OWORD *)v216 = *(_OWORD *)(a1 + 176);
                v192 = *(_OWORD *)(a1 + 144);
                v138 = v135;
                v139 = *(double *)a1;
                do
                {
                  *((double *)v138 - 1) = v139;
                  v140 = *(_OWORD *)((char *)v138 - 56);
                  v138[2] = *(_OWORD *)((char *)v138 - 72);
                  v138[3] = v140;
                  v138[4] = *(_OWORD *)((char *)v138 - 40);
                  *(_OWORD *)((char *)v138 + 73) = *(_OWORD *)((char *)v138 - 31);
                  v141 = *(_OWORD *)((char *)v138 - 88);
                  *v138 = *(_OWORD *)((char *)v138 - 104);
                  v138[1] = v141;
                  v139 = *((double *)v138 - 27);
                  v138 = (_OWORD *)((char *)v138 - 104);
                }
                while (v137 > v139);
                *((double *)v138 - 1) = v137;
                *v138 = v168;
                v138[1] = v180;
                *(_OWORD *)((char *)v138 + 73) = *(_OWORD *)&v216[9];
                v138[3] = v204;
                v138[4] = *(_OWORD *)v216;
                v138[2] = v192;
              }
              v77 = v136 + 104;
              v135 = (_OWORD *)((char *)v135 + 104);
              a1 = v136;
            }
            while (v136 + 104 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v90 = (unint64_t)(v10 - 2) >> 1;
          v91 = v90;
          do
          {
            v92 = v91;
            if (v90 >= v91)
            {
              v93 = (2 * v91) | 1;
              v94 = v8 + 104 * v93;
              if (2 * v92 + 2 < v10 && *(double *)v94 > *(double *)(v94 + 104))
              {
                v94 += 104;
                v93 = 2 * v92 + 2;
              }
              v95 = v8 + 104 * v92;
              v96 = *(double *)v94;
              v97 = *(double *)v95;
              if (*(double *)v94 <= *(double *)v95)
              {
                v166 = *(_OWORD *)(v95 + 8);
                v178 = *(_OWORD *)(v95 + 24);
                *(_OWORD *)&v214[9] = *(_OWORD *)(v95 + 81);
                v202 = *(_OWORD *)(v95 + 56);
                *(_OWORD *)v214 = *(_OWORD *)(v95 + 72);
                v190 = *(_OWORD *)(v95 + 40);
                do
                {
                  v98 = v95;
                  v95 = v94;
                  *(double *)v98 = v96;
                  v99 = *(_OWORD *)(v94 + 8);
                  *(_OWORD *)(v98 + 24) = *(_OWORD *)(v94 + 24);
                  *(_OWORD *)(v98 + 8) = v99;
                  v100 = *(_OWORD *)(v94 + 40);
                  v101 = *(_OWORD *)(v94 + 56);
                  v102 = *(_OWORD *)(v94 + 72);
                  *(_OWORD *)(v98 + 81) = *(_OWORD *)(v94 + 81);
                  *(_OWORD *)(v98 + 72) = v102;
                  *(_OWORD *)(v98 + 56) = v101;
                  *(_OWORD *)(v98 + 40) = v100;
                  if (v90 < v93)
                    break;
                  v103 = 2 * v93;
                  v93 = (2 * v93) | 1;
                  v94 = v8 + 104 * v93;
                  v104 = v103 + 2;
                  if (v104 < v10 && *(double *)v94 > *(double *)(v94 + 104))
                  {
                    v94 += 104;
                    v93 = v104;
                  }
                  v96 = *(double *)v94;
                }
                while (*(double *)v94 <= v97);
                *(double *)v95 = v97;
                *(_OWORD *)(v95 + 8) = v166;
                *(_OWORD *)(v95 + 24) = v178;
                *(_OWORD *)(v95 + 81) = *(_OWORD *)&v214[9];
                *(_OWORD *)(v95 + 56) = v202;
                *(_OWORD *)(v95 + 72) = *(_OWORD *)v214;
                *(_OWORD *)(v95 + 40) = v190;
              }
            }
            v91 = v92 - 1;
          }
          while (v92);
          v105 = v9 / 0x68uLL;
          while (2)
          {
            v106 = 0;
            v107 = *(double *)v8;
            v144 = *(_OWORD *)(v8 + 8);
            v147 = *(_OWORD *)(v8 + 24);
            *(_OWORD *)&v156[9] = *(_OWORD *)(v8 + 81);
            v153 = *(_OWORD *)(v8 + 56);
            *(_OWORD *)v156 = *(_OWORD *)(v8 + 72);
            v150 = *(_OWORD *)(v8 + 40);
            v108 = v8;
            do
            {
              v109 = v108;
              v108 += 104 * v106 + 104;
              v110 = 2 * v106;
              v106 = (2 * v106) | 1;
              v111 = v110 + 2;
              if (v111 < v105 && *(double *)v108 > *(double *)(v108 + 104))
              {
                v108 += 104;
                v106 = v111;
              }
              *(_QWORD *)v109 = *(_QWORD *)v108;
              v112 = *(_OWORD *)(v108 + 8);
              *(_OWORD *)(v109 + 24) = *(_OWORD *)(v108 + 24);
              *(_OWORD *)(v109 + 8) = v112;
              v113 = *(_OWORD *)(v108 + 40);
              v114 = *(_OWORD *)(v108 + 56);
              v115 = *(_OWORD *)(v108 + 72);
              *(_OWORD *)(v109 + 81) = *(_OWORD *)(v108 + 81);
              *(_OWORD *)(v109 + 72) = v115;
              *(_OWORD *)(v109 + 56) = v114;
              *(_OWORD *)(v109 + 40) = v113;
            }
            while (v106 <= (uint64_t)((unint64_t)(v105 - 2) >> 1));
            v116 = (__int128 *)(v108 + 8);
            if (v108 != a2 - 104)
            {
              *(_QWORD *)v108 = *(_QWORD *)(a2 - 104);
              v117 = *(_OWORD *)(a2 - 80);
              *v116 = *(_OWORD *)(a2 - 96);
              *(_OWORD *)(v108 + 24) = v117;
              v118 = *(_OWORD *)(a2 - 64);
              v119 = *(_OWORD *)(a2 - 48);
              v120 = *(_OWORD *)(a2 - 32);
              *(_OWORD *)(v108 + 81) = *(_OWORD *)(a2 - 23);
              *(_OWORD *)(v108 + 56) = v119;
              *(_OWORD *)(v108 + 72) = v120;
              *(_OWORD *)(v108 + 40) = v118;
              *(double *)(a2 - 104) = v107;
              *(_OWORD *)(a2 - 96) = v144;
              *(_OWORD *)(a2 - 80) = v147;
              *(_OWORD *)(a2 - 23) = *(_OWORD *)&v156[9];
              *(_OWORD *)(a2 - 48) = v153;
              *(_OWORD *)(a2 - 32) = *(_OWORD *)v156;
              *(_OWORD *)(a2 - 64) = v150;
              v121 = v108 - v8 + 104;
              if (v121 >= 105)
              {
                v122 = (v121 / 0x68uLL - 2) >> 1;
                v123 = v8 + 104 * v122;
                v124 = *(double *)v123;
                v125 = *(double *)v108;
                if (*(double *)v123 > *(double *)v108)
                {
                  v167 = *v116;
                  v179 = *(_OWORD *)(v108 + 24);
                  *(_OWORD *)&v215[9] = *(_OWORD *)(v108 + 81);
                  v203 = *(_OWORD *)(v108 + 56);
                  *(_OWORD *)v215 = *(_OWORD *)(v108 + 72);
                  v191 = *(_OWORD *)(v108 + 40);
                  do
                  {
                    v126 = v108;
                    v108 = v123;
                    *(double *)v126 = v124;
                    v127 = *(_OWORD *)(v123 + 8);
                    *(_OWORD *)(v126 + 24) = *(_OWORD *)(v123 + 24);
                    *(_OWORD *)(v126 + 8) = v127;
                    v128 = *(_OWORD *)(v123 + 40);
                    v129 = *(_OWORD *)(v123 + 56);
                    v130 = *(_OWORD *)(v123 + 72);
                    *(_OWORD *)(v126 + 81) = *(_OWORD *)(v123 + 81);
                    *(_OWORD *)(v126 + 72) = v130;
                    *(_OWORD *)(v126 + 56) = v129;
                    *(_OWORD *)(v126 + 40) = v128;
                    if (!v122)
                      break;
                    v122 = (v122 - 1) >> 1;
                    v123 = v8 + 104 * v122;
                    v124 = *(double *)v123;
                  }
                  while (*(double *)v123 > v125);
                  v116 = (__int128 *)(v108 + 8);
                  *(double *)v108 = v125;
                  *(_OWORD *)(v108 + 8) = v167;
                  *(_OWORD *)(v108 + 24) = v179;
                  v131 = v191;
                  v132 = v203;
                  v133 = *(_OWORD *)v215;
                  v134 = *(_OWORD *)&v215[9];
LABEL_110:
                  *(__int128 *)((char *)v116 + 73) = v134;
                  v116[3] = v132;
                  v116[4] = v133;
                  v116[2] = v131;
                }
              }
              a2 -= 104;
              v74 = v105-- <= 2;
              if (v74)
                return;
              continue;
            }
            break;
          }
          *(double *)v108 = v107;
          *v116 = v144;
          *(_OWORD *)(v108 + 24) = v147;
          v131 = v150;
          v132 = v153;
          v133 = *(_OWORD *)v156;
          v134 = *(_OWORD *)&v156[9];
          goto LABEL_110;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 104 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x3401)
        {
          sub_1006747F8(v12, a1, a2 - 104);
        }
        else
        {
          sub_1006747F8(a1, v12, a2 - 104);
          sub_1006747F8(a1 + 104, 104 * v11 + a1 - 104, a2 - 208);
          sub_1006747F8(a1 + 208, a1 + 104 + 104 * v11, a2 - 312);
          sub_1006747F8(104 * v11 + a1 - 104, v12, a1 + 104 + 104 * v11);
          v13 = *(double *)a1;
          *(_QWORD *)a1 = *(_QWORD *)v12;
          *(double *)v12 = v13;
          v157 = *(_OWORD *)(a1 + 8);
          v169 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)v205 = *(_OWORD *)(a1 + 72);
          *(_OWORD *)&v205[16] = *(_OWORD *)(a1 + 88);
          v181 = *(_OWORD *)(a1 + 40);
          v193 = *(_OWORD *)(a1 + 56);
          v14 = *(_OWORD *)(v12 + 56);
          v15 = *(_OWORD *)(v12 + 72);
          v16 = *(_OWORD *)(v12 + 81);
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(v12 + 40);
          *(_OWORD *)(a1 + 81) = v16;
          *(_OWORD *)(a1 + 72) = v15;
          *(_OWORD *)(a1 + 56) = v14;
          v17 = *(_OWORD *)(v12 + 8);
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(v12 + 24);
          *(_OWORD *)(a1 + 8) = v17;
          *(_OWORD *)(v12 + 24) = v169;
          *(_OWORD *)(v12 + 8) = v157;
          *(_OWORD *)(v12 + 81) = *(_OWORD *)&v205[9];
          *(_OWORD *)(v12 + 72) = *(_OWORD *)v205;
          *(_OWORD *)(v12 + 56) = v193;
          *(_OWORD *)(v12 + 40) = v181;
        }
        --a3;
        v18 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 104) <= v18)
        {
          v143 = *(_OWORD *)(a1 + 8);
          v146 = *(_OWORD *)(a1 + 24);
          *(_OWORD *)&v155[9] = *(_OWORD *)(a1 + 81);
          v152 = *(_OWORD *)(a1 + 56);
          *(_OWORD *)v155 = *(_OWORD *)(a1 + 72);
          v149 = *(_OWORD *)(a1 + 40);
          if (v18 <= *(double *)(a2 - 104))
          {
            v39 = a1 + 104;
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v39 += 104;
            }
            while (v18 <= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v38 = *(double *)(v8 + 104);
              v8 += 104;
            }
            while (v18 <= v38);
          }
          v40 = a2;
          if (v8 < a2)
          {
            v40 = a2;
            do
            {
              v41 = *(double *)(v40 - 104);
              v40 -= 104;
            }
            while (v18 > v41);
          }
          if (v8 < v40)
          {
            v42 = *(double *)v8;
            v43 = *(double *)v40;
            do
            {
              *(double *)v8 = v43;
              *(double *)v40 = v42;
              v159 = *(_OWORD *)(v8 + 8);
              v171 = *(_OWORD *)(v8 + 24);
              *(_OWORD *)v207 = *(_OWORD *)(v8 + 72);
              *(_OWORD *)&v207[16] = *(_OWORD *)(v8 + 88);
              v183 = *(_OWORD *)(v8 + 40);
              v195 = *(_OWORD *)(v8 + 56);
              v44 = *(_OWORD *)(v40 + 56);
              v45 = *(_OWORD *)(v40 + 72);
              v46 = *(_OWORD *)(v40 + 81);
              *(_OWORD *)(v8 + 40) = *(_OWORD *)(v40 + 40);
              *(_OWORD *)(v8 + 81) = v46;
              *(_OWORD *)(v8 + 72) = v45;
              *(_OWORD *)(v8 + 56) = v44;
              v47 = *(_OWORD *)(v40 + 8);
              *(_OWORD *)(v8 + 24) = *(_OWORD *)(v40 + 24);
              *(_OWORD *)(v8 + 8) = v47;
              *(_OWORD *)(v40 + 24) = v171;
              *(_OWORD *)(v40 + 8) = v159;
              *(_OWORD *)(v40 + 81) = *(_OWORD *)&v207[9];
              *(_OWORD *)(v40 + 72) = *(_OWORD *)v207;
              *(_OWORD *)(v40 + 56) = v195;
              *(_OWORD *)(v40 + 40) = v183;
              do
              {
                v48 = *(double *)(v8 + 104);
                v8 += 104;
                v42 = v48;
              }
              while (v18 <= v48);
              do
              {
                v49 = *(double *)(v40 - 104);
                v40 -= 104;
                v43 = v49;
              }
              while (v18 > v49);
            }
            while (v8 < v40);
          }
          if (v8 - 104 != a1)
          {
            *(_QWORD *)a1 = *(_QWORD *)(v8 - 104);
            v50 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 24) = v50;
            v51 = *(_OWORD *)(v8 - 64);
            v52 = *(_OWORD *)(v8 - 48);
            v53 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 81) = *(_OWORD *)(v8 - 23);
            *(_OWORD *)(a1 + 56) = v52;
            *(_OWORD *)(a1 + 72) = v53;
            *(_OWORD *)(a1 + 40) = v51;
          }
          a4 = 0;
          *(double *)(v8 - 104) = v18;
          *(_OWORD *)(v8 - 96) = v143;
          *(_OWORD *)(v8 - 80) = v146;
          *(_OWORD *)(v8 - 23) = *(_OWORD *)&v155[9];
          *(_OWORD *)(v8 - 48) = v152;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v155;
          *(_OWORD *)(v8 - 64) = v149;
          continue;
        }
        v19 = 0;
        v142 = *(_OWORD *)(a1 + 8);
        v145 = *(_OWORD *)(a1 + 24);
        *(_OWORD *)&v154[9] = *(_OWORD *)(a1 + 81);
        v151 = *(_OWORD *)(a1 + 56);
        *(_OWORD *)v154 = *(_OWORD *)(a1 + 72);
        v148 = *(_OWORD *)(a1 + 40);
        do
        {
          v20 = *(double *)(a1 + v19 + 104);
          v19 += 104;
        }
        while (v20 > v18);
        v21 = a1 + v19;
        v22 = (double *)a2;
        if (v19 == 104)
        {
          v22 = (double *)a2;
          do
          {
            if (v21 >= (unint64_t)v22)
              break;
            v24 = *(v22 - 13);
            v22 -= 13;
          }
          while (v24 <= v18);
        }
        else
        {
          do
          {
            v23 = *(v22 - 13);
            v22 -= 13;
          }
          while (v23 <= v18);
        }
        if (v21 >= (unint64_t)v22)
        {
          v8 = a1 + v19;
        }
        else
        {
          v25 = *v22;
          v8 = a1 + v19;
          v26 = v22;
          do
          {
            *(double *)v8 = v25;
            *v26 = v20;
            v158 = *(_OWORD *)(v8 + 8);
            v170 = *(_OWORD *)(v8 + 24);
            *(_OWORD *)v206 = *(_OWORD *)(v8 + 72);
            *(_OWORD *)&v206[16] = *(_OWORD *)(v8 + 88);
            v182 = *(_OWORD *)(v8 + 40);
            v194 = *(_OWORD *)(v8 + 56);
            v27 = *(_OWORD *)(v26 + 7);
            v28 = *(_OWORD *)(v26 + 9);
            v29 = *(_OWORD *)((char *)v26 + 81);
            *(_OWORD *)(v8 + 40) = *(_OWORD *)(v26 + 5);
            *(_OWORD *)(v8 + 81) = v29;
            *(_OWORD *)(v8 + 72) = v28;
            *(_OWORD *)(v8 + 56) = v27;
            v30 = *(_OWORD *)(v26 + 1);
            *(_OWORD *)(v8 + 24) = *(_OWORD *)(v26 + 3);
            *(_OWORD *)(v8 + 8) = v30;
            *(_OWORD *)(v26 + 3) = v170;
            *(_OWORD *)(v26 + 1) = v158;
            *(_OWORD *)((char *)v26 + 81) = *(_OWORD *)&v206[9];
            *(_OWORD *)(v26 + 9) = *(_OWORD *)v206;
            *(_OWORD *)(v26 + 7) = v194;
            *(_OWORD *)(v26 + 5) = v182;
            do
            {
              v31 = *(double *)(v8 + 104);
              v8 += 104;
              v20 = v31;
            }
            while (v31 > v18);
            do
            {
              v32 = *(v26 - 13);
              v26 -= 13;
              v25 = v32;
            }
            while (v32 <= v18);
          }
          while (v8 < (unint64_t)v26);
        }
        if (v8 - 104 != a1)
        {
          *(_QWORD *)a1 = *(_QWORD *)(v8 - 104);
          v33 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 24) = v33;
          v34 = *(_OWORD *)(v8 - 64);
          v35 = *(_OWORD *)(v8 - 48);
          v36 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 81) = *(_OWORD *)(v8 - 23);
          *(_OWORD *)(a1 + 56) = v35;
          *(_OWORD *)(a1 + 72) = v36;
          *(_OWORD *)(a1 + 40) = v34;
        }
        *(double *)(v8 - 104) = v18;
        *(_OWORD *)(v8 - 96) = v142;
        *(_OWORD *)(v8 - 80) = v145;
        *(_OWORD *)(v8 - 23) = *(_OWORD *)&v154[9];
        *(_OWORD *)(v8 - 48) = v151;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v154;
        *(_OWORD *)(v8 - 64) = v148;
        if (v21 < (unint64_t)v22)
        {
LABEL_31:
          sub_100673A5C(a1, v8 - 104, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v37 = sub_100674A3C(a1, v8 - 104);
        if (!sub_100674A3C(v8, a2))
        {
          if (v37)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 104;
        if (!v37)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 6;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 5);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v84 = *((_DWORD *)a2 - 10);
        v85 = *(_DWORD *)(i + 56);
        if (v84 > v85
          || v84 == v85
          && ((v86 = *((_DWORD *)a2 - 18), v87 = *(_DWORD *)(i + 24), v86 > v87)
           || v86 == v87 && *((double *)a2 - 7) < *(double *)(i + 40)))
        {
          v228 = *(_OWORD *)i;
          v236 = *(_OWORD *)(i + 16);
          *(_OWORD *)v251 = *(_OWORD *)(i + 64);
          *(_OWORD *)&v251[16] = *(_OWORD *)(i + 80);
          v241 = *(_OWORD *)(i + 32);
          v246 = *(_OWORD *)(i + 48);
          v89 = *(a2 - 3);
          v88 = *(a2 - 2);
          v90 = *(a2 - 4);
          *(_OWORD *)(i + 73) = *(_OWORD *)((char *)a2 - 23);
          *(_OWORD *)(i + 48) = v89;
          *(_OWORD *)(i + 64) = v88;
          *(_OWORD *)(i + 32) = v90;
          v91 = *(a2 - 5);
          *(_OWORD *)i = *v8;
          *(_OWORD *)(i + 16) = v91;
          *v8 = v228;
          *(a2 - 5) = v236;
          *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v251[9];
          *(a2 - 3) = v246;
          *(a2 - 2) = *(_OWORD *)v251;
          *(a2 - 4) = v241;
        }
        return;
      case 3:
        sub_100676B04(i, i + 96, (uint64_t)(a2 - 6));
        return;
      case 4:
        sub_1006770DC(i, i + 96, i + 192, (uint64_t)(a2 - 6));
        return;
      case 5:
        sub_100676878(i, i + 96, i + 192, i + 288, (uint64_t)(a2 - 6));
        return;
      default:
        if (v10 <= 2303)
        {
          v92 = (_OWORD *)(i + 96);
          v94 = (_OWORD *)i == a2 || v92 == a2;
          if ((a4 & 1) != 0)
          {
            if (v94)
              return;
            v95 = 0;
            v96 = i;
            while (1)
            {
              v97 = v96;
              v96 = (unint64_t)v92;
              v98 = *(_DWORD *)(v97 + 152);
              v99 = *(_DWORD *)(v97 + 56);
              if (v98 > v99)
                break;
              if (v98 == v99)
              {
                v100 = *(_DWORD *)(v97 + 120);
                v101 = *(_DWORD *)(v97 + 24);
                if (v100 > v101 || v100 == v101 && *(double *)(v97 + 136) < *(double *)(v97 + 40))
                  goto LABEL_147;
              }
LABEL_159:
              v92 = (_OWORD *)(v96 + 96);
              v95 += 96;
              if ((_OWORD *)(v96 + 96) == a2)
                return;
            }
            v100 = *(_DWORD *)(v97 + 120);
LABEL_147:
            v204 = *(_QWORD *)(v96 + 16);
            v200 = *(_OWORD *)v96;
            v215 = *(_QWORD *)(v97 + 124);
            v219 = *(_DWORD *)(v97 + 132);
            v102 = *(double *)(v97 + 136);
            v103 = *(_QWORD *)(v97 + 144);
            *(_OWORD *)v229 = *(_OWORD *)(v97 + 156);
            *(_OWORD *)&v229[16] = *(_OWORD *)(v97 + 172);
            v104 = *(_OWORD *)(v97 + 64);
            *(_OWORD *)(v96 + 48) = *(_OWORD *)(v97 + 48);
            *(_OWORD *)(v96 + 64) = v104;
            *(_OWORD *)(v96 + 73) = *(_OWORD *)(v97 + 73);
            v105 = *(_OWORD *)(v97 + 32);
            *(_OWORD *)(v96 + 16) = *(_OWORD *)(v97 + 16);
            *(_OWORD *)(v96 + 32) = v105;
            v106 = i;
            *(_OWORD *)v96 = *(_OWORD *)v97;
            if (v97 != i)
            {
              v107 = v95;
              while (1)
              {
                v108 = (_OWORD *)(i + v107);
                v109 = *(_DWORD *)(i + v107 - 40);
                if (v98 <= v109)
                {
                  if (v98 != v109)
                  {
                    v106 = i + v107;
                    goto LABEL_158;
                  }
                  v110 = *(_DWORD *)(i + v107 - 72);
                  if (v100 <= v110 && (v100 != v110 || v102 >= *(double *)(i + v107 - 56)))
                    break;
                }
                v97 -= 96;
                v111 = *(v108 - 3);
                v108[2] = *(v108 - 4);
                v108[3] = v111;
                v108[4] = *(v108 - 2);
                *(_OWORD *)((char *)v108 + 73) = *(_OWORD *)((char *)v108 - 23);
                v112 = *(v108 - 5);
                *v108 = *(v108 - 6);
                v108[1] = v112;
                v107 -= 96;
                if (!v107)
                {
                  v106 = i;
                  goto LABEL_158;
                }
              }
              v106 = v97;
            }
LABEL_158:
            *(_QWORD *)(v106 + 16) = v204;
            *(_OWORD *)v106 = v200;
            *(_DWORD *)(v106 + 24) = v100;
            *(_QWORD *)(v106 + 28) = v215;
            *(_DWORD *)(v106 + 36) = v219;
            *(double *)(v106 + 40) = v102;
            *(_QWORD *)(v106 + 48) = v103;
            *(_DWORD *)(v106 + 56) = v98;
            *(_OWORD *)(v106 + 60) = *(_OWORD *)v229;
            *(_OWORD *)(v106 + 73) = *(_OWORD *)&v229[13];
            goto LABEL_159;
          }
          if (v94)
            return;
          while (1)
          {
            v184 = a1;
            a1 = (uint64_t)v92;
            v185 = *(_DWORD *)(v184 + 152);
            v186 = *(_DWORD *)(v184 + 56);
            if (v185 > v186)
              break;
            if (v185 == v186)
            {
              v187 = *(_DWORD *)(v184 + 120);
              v188 = *(_DWORD *)(v184 + 24);
              if (v187 > v188 || v187 == v188 && *(double *)(v184 + 136) < *(double *)(v184 + 40))
                goto LABEL_234;
            }
LABEL_242:
            v92 = (_OWORD *)(a1 + 96);
            if ((_OWORD *)(a1 + 96) == a2)
              return;
          }
          v187 = *(_DWORD *)(v184 + 120);
LABEL_234:
          v206 = *(_QWORD *)(a1 + 16);
          v203 = *(_OWORD *)a1;
          v218 = *(_QWORD *)(v184 + 124);
          v221 = *(_DWORD *)(v184 + 132);
          v189 = *(double *)(v184 + 136);
          v190 = *(_QWORD *)(v184 + 144);
          v191 = *(_OWORD *)(v184 + 156);
          v192 = *(_OWORD *)(v184 + 172);
          v193 = (_OWORD *)a1;
          *(_DWORD *)v232 = HIDWORD(v191);
          *(_OWORD *)&v232[4] = v192;
          while (1)
          {
            v194 = *(v193 - 3);
            v193[2] = *(v193 - 4);
            v193[3] = v194;
            v193[4] = *(v193 - 2);
            *(_OWORD *)((char *)v193 + 73) = *(_OWORD *)((char *)v193 - 23);
            v195 = *(v193 - 5);
            *v193 = *(v193 - 6);
            v193[1] = v195;
            v196 = *((_DWORD *)v193 - 34);
            if (v185 <= v196)
            {
              if (v185 != v196)
                break;
              v197 = *((_DWORD *)v193 - 42);
              if (v187 <= v197 && (v187 != v197 || v189 >= *((double *)v193 - 19)))
                break;
            }
            v193 -= 6;
          }
          *((_QWORD *)v193 - 10) = v206;
          *(v193 - 6) = v203;
          *((_DWORD *)v193 - 18) = v187;
          *((_DWORD *)v193 - 15) = v221;
          *(_QWORD *)((char *)v193 - 68) = v218;
          *((double *)v193 - 7) = v189;
          *((_QWORD *)v193 - 6) = v190;
          *((_DWORD *)v193 - 10) = v185;
          *(_OWORD *)((char *)v193 - 23) = *(_OWORD *)&v232[1];
          *(_OWORD *)((char *)v193 - 36) = v191;
          goto LABEL_242;
        }
        if (!a3)
        {
          if ((_OWORD *)i == a2)
            return;
          v113 = (unint64_t)(v11 - 2) >> 1;
          v114 = v113;
          while (1)
          {
            v115 = v114;
            if (v113 >= v114)
            {
              v116 = (2 * v114) | 1;
              v117 = i + 96 * v116;
              if (2 * v115 + 2 < v11)
              {
                v118 = *(_DWORD *)(i + 96 * v116 + 56);
                v119 = *(_DWORD *)(v117 + 152);
                if (v118 > v119
                  || v118 == v119
                  && ((v120 = *(_DWORD *)(i + 96 * v116 + 24), v121 = *(_DWORD *)(v117 + 120), v120 > v121)
                   || v120 == v121 && *(double *)(i + 96 * v116 + 40) < *(double *)(v117 + 136)))
                {
                  v117 += 96;
                  v116 = 2 * v115 + 2;
                }
              }
              v122 = *(_DWORD *)(v117 + 56);
              v123 = *(_DWORD *)(i + 96 * v115 + 56);
              if (v122 <= v123)
              {
                v124 = i + 96 * v115;
                if (v122 != v123)
                {
                  v126 = *(_DWORD *)(v124 + 24);
LABEL_177:
                  v205 = *(_QWORD *)(v124 + 16);
                  v201 = *(_OWORD *)v124;
                  v220 = *(_DWORD *)(v124 + 36);
                  v216 = *(_QWORD *)(v124 + 28);
                  v127 = *(double *)(v124 + 40);
                  v128 = *(_QWORD *)(v124 + 48);
                  *(_OWORD *)v230 = *(_OWORD *)(v124 + 60);
                  *(_OWORD *)&v230[16] = *(_OWORD *)(v124 + 76);
                  v129 = *(_OWORD *)(v117 + 16);
                  *(_OWORD *)v124 = *(_OWORD *)v117;
                  for (*(_OWORD *)(v124 + 16) = v129; ; *(_OWORD *)(v124 + 16) = v141)
                  {
                    v130 = *(_OWORD *)(v117 + 32);
                    v131 = *(_OWORD *)(v117 + 48);
                    v132 = *(_OWORD *)(v117 + 64);
                    *(_OWORD *)(v124 + 73) = *(_OWORD *)(v117 + 73);
                    *(_OWORD *)(v124 + 48) = v131;
                    *(_OWORD *)(v124 + 64) = v132;
                    *(_OWORD *)(v124 + 32) = v130;
                    if (v113 < v116)
                      goto LABEL_193;
                    v124 = v117;
                    v133 = 2 * v116;
                    v116 = (2 * v116) | 1;
                    v117 = i + 96 * v116;
                    v134 = v133 + 2;
                    if (v134 < v11)
                    {
                      v135 = *(_DWORD *)(i + 96 * v116 + 56);
                      v136 = *(_DWORD *)(v117 + 152);
                      if (v135 > v136
                        || v135 == v136
                        && ((v137 = *(_DWORD *)(i + 96 * v116 + 24), v138 = *(_DWORD *)(v117 + 120), v137 > v138)
                         || v137 == v138 && *(double *)(i + 96 * v116 + 40) < *(double *)(v117 + 136)))
                      {
                        v117 += 96;
                        v116 = v134;
                      }
                    }
                    v139 = *(_DWORD *)(v117 + 56);
                    if (v139 > v123)
                      break;
                    if (v139 == v123)
                    {
                      v140 = *(_DWORD *)(v117 + 24);
                      if (v140 > v126 || v140 == v126 && *(double *)(v117 + 40) < v127)
                        break;
                    }
                    v141 = *(_OWORD *)(v117 + 16);
                    *(_OWORD *)v124 = *(_OWORD *)v117;
                  }
                  v117 = v124;
LABEL_193:
                  *(_QWORD *)(v117 + 16) = v205;
                  *(_OWORD *)v117 = v201;
                  *(_DWORD *)(v117 + 24) = v126;
                  *(_QWORD *)(v117 + 28) = v216;
                  *(_DWORD *)(v117 + 36) = v220;
                  *(double *)(v117 + 40) = v127;
                  *(_QWORD *)(v117 + 48) = v128;
                  *(_DWORD *)(v117 + 56) = v123;
                  *(_OWORD *)(v117 + 60) = *(_OWORD *)v230;
                  *(_OWORD *)(v117 + 73) = *(_OWORD *)&v230[13];
                  goto LABEL_194;
                }
                v125 = *(_DWORD *)(v117 + 24);
                v126 = *(_DWORD *)(i + 96 * v115 + 24);
                if (v125 <= v126)
                {
                  if (v125 != v126)
                    goto LABEL_177;
                  v126 = *(_DWORD *)(v117 + 24);
                  if (*(double *)(v117 + 40) >= *(double *)(i + 96 * v115 + 40))
                    goto LABEL_177;
                }
              }
            }
LABEL_194:
            v114 = v115 - 1;
            if (!v115)
            {
              v142 = v10 / 0x60uLL;
              while (1)
              {
                v143 = 0;
                v231 = *(_OWORD *)i;
                v237 = *(_OWORD *)(i + 16);
                *(_OWORD *)v252 = *(_OWORD *)(i + 64);
                *(_OWORD *)&v252[16] = *(_OWORD *)(i + 80);
                v242 = *(_OWORD *)(i + 32);
                v247 = *(_OWORD *)(i + 48);
                v144 = i;
                do
                {
                  v145 = (_OWORD *)v144;
                  v146 = v143 + 1;
                  v144 += 96 * (v143 + 1);
                  v147 = 2 * v143;
                  v143 = (2 * v143) | 1;
                  v148 = v147 + 2;
                  if (v148 < v142)
                  {
                    v149 = DWORD2(v145[6 * v146 + 3]);
                    v150 = *(_DWORD *)(v144 + 152);
                    if (v149 > v150
                      || v149 == v150
                      && ((v151 = DWORD2(v145[6 * v146 + 1]), v152 = *(_DWORD *)(v144 + 120), v151 > v152)
                       || v151 == v152 && *((double *)&v145[6 * v146 + 2] + 1) < *(double *)(v144 + 136)))
                    {
                      v144 += 96;
                      v143 = v148;
                    }
                  }
                  v153 = *(_OWORD *)(v144 + 16);
                  *v145 = *(_OWORD *)v144;
                  v145[1] = v153;
                  v154 = *(_OWORD *)(v144 + 32);
                  v155 = *(_OWORD *)(v144 + 48);
                  v156 = *(_OWORD *)(v144 + 64);
                  *(_OWORD *)((char *)v145 + 73) = *(_OWORD *)(v144 + 73);
                  v145[3] = v155;
                  v145[4] = v156;
                  v145[2] = v154;
                }
                while (v143 <= (uint64_t)((unint64_t)(v142 - 2) >> 1));
                a2 -= 6;
                if ((_OWORD *)v144 == a2)
                {
                  *(_OWORD *)v144 = v231;
                  *(_OWORD *)(v144 + 16) = v237;
                  *(_OWORD *)(v144 + 73) = *(_OWORD *)&v252[9];
                  *(_OWORD *)(v144 + 48) = v247;
                  *(_OWORD *)(v144 + 64) = *(_OWORD *)v252;
                  *(_OWORD *)(v144 + 32) = v242;
                }
                else
                {
                  v157 = a2[1];
                  *(_OWORD *)v144 = *a2;
                  *(_OWORD *)(v144 + 16) = v157;
                  v158 = a2[2];
                  v159 = a2[3];
                  v160 = a2[4];
                  *(_OWORD *)(v144 + 73) = *(_OWORD *)((char *)a2 + 73);
                  *(_OWORD *)(v144 + 48) = v159;
                  *(_OWORD *)(v144 + 64) = v160;
                  *(_OWORD *)(v144 + 32) = v158;
                  *(_OWORD *)((char *)a2 + 73) = *(_OWORD *)&v252[9];
                  a2[3] = v247;
                  a2[4] = *(_OWORD *)v252;
                  a2[2] = v242;
                  *a2 = v231;
                  a2[1] = v237;
                  v161 = v144 - i + 96;
                  if (v161 >= 97)
                  {
                    v162 = v161 / 0x60uLL - 2;
                    v163 = v162 >> 1;
                    v164 = i + 96 * (v162 >> 1);
                    v165 = *(_DWORD *)(v164 + 56);
                    v166 = *(_DWORD *)(v144 + 56);
                    if (v165 > v166)
                    {
                      v167 = *(_DWORD *)(v144 + 24);
LABEL_209:
                      v224 = *(_QWORD *)(v144 + 16);
                      v217 = *(_OWORD *)v144;
                      v212 = *(_DWORD *)(v144 + 36);
                      v209 = *(_QWORD *)(v144 + 28);
                      v168 = *(double *)(v144 + 40);
                      v169 = *(_QWORD *)(v144 + 48);
                      *(_OWORD *)v202 = *(_OWORD *)(v144 + 60);
                      *(_OWORD *)&v202[16] = *(_OWORD *)(v144 + 76);
                      v170 = *(_OWORD *)(v164 + 16);
                      *(_OWORD *)v144 = *(_OWORD *)v164;
                      *(_OWORD *)(v144 + 16) = v170;
                      v171 = *(_OWORD *)(v164 + 32);
                      v172 = *(_OWORD *)(v164 + 48);
                      v173 = *(_OWORD *)(v164 + 64);
                      *(_OWORD *)(v144 + 73) = *(_OWORD *)(v164 + 73);
                      *(_OWORD *)(v144 + 48) = v172;
                      *(_OWORD *)(v144 + 64) = v173;
                      *(_OWORD *)(v144 + 32) = v171;
                      if (v162 >= 2)
                      {
                        while (1)
                        {
                          v175 = v163 - 1;
                          v163 = (v163 - 1) >> 1;
                          v174 = i + 96 * v163;
                          v176 = *(_DWORD *)(v174 + 56);
                          if (v176 <= v166)
                          {
                            if (v176 != v166)
                              break;
                            v177 = *(_DWORD *)(i + 96 * v163 + 24);
                            if (v177 <= v167 && (v177 != v167 || *(double *)(i + 96 * v163 + 40) >= v168))
                              break;
                          }
                          v178 = *(_OWORD *)(v174 + 16);
                          *(_OWORD *)v164 = *(_OWORD *)v174;
                          *(_OWORD *)(v164 + 16) = v178;
                          v179 = *(_OWORD *)(v174 + 32);
                          v180 = *(_OWORD *)(v174 + 48);
                          v181 = *(_OWORD *)(v174 + 64);
                          *(_OWORD *)(v164 + 73) = *(_OWORD *)(v174 + 73);
                          *(_OWORD *)(v164 + 48) = v180;
                          *(_OWORD *)(v164 + 64) = v181;
                          *(_OWORD *)(v164 + 32) = v179;
                          v164 = i + 96 * v163;
                          if (v175 <= 1)
                            goto LABEL_217;
                        }
                      }
                      v174 = v164;
LABEL_217:
                      *(_QWORD *)(v174 + 16) = v224;
                      *(_OWORD *)v174 = v217;
                      *(_DWORD *)(v174 + 24) = v167;
                      *(_QWORD *)(v174 + 28) = v209;
                      *(_DWORD *)(v174 + 36) = v212;
                      *(double *)(v174 + 40) = v168;
                      *(_QWORD *)(v174 + 48) = v169;
                      *(_DWORD *)(v174 + 56) = v166;
                      *(_OWORD *)(v174 + 60) = *(_OWORD *)v202;
                      *(_OWORD *)(v174 + 73) = *(_OWORD *)&v202[13];
                      goto LABEL_219;
                    }
                    if (v165 == v166)
                    {
                      v183 = *(_DWORD *)(i + 96 * v163 + 24);
                      v167 = *(_DWORD *)(v144 + 24);
                      if (v183 > v167)
                        goto LABEL_209;
                      if (v183 == v167)
                      {
                        v167 = *(_DWORD *)(i + 96 * v163 + 24);
                        if (*(double *)(i + 96 * v163 + 40) < *(double *)(v144 + 40))
                          goto LABEL_209;
                      }
                    }
                  }
                }
LABEL_219:
                if (v142-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_OWORD *)(i + 96 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x3000)
        {
          sub_100676B04(a1 + 96 * v12, a1, (uint64_t)(a2 - 6));
        }
        else
        {
          sub_100676B04(a1, a1 + 96 * v12, (uint64_t)(a2 - 6));
          v14 = 3 * v12;
          v15 = a1 + 96 * v12 - 96;
          sub_100676B04(a1 + 96, v15, (uint64_t)(a2 - 12));
          v16 = a1 + 96 + 32 * v14;
          sub_100676B04(a1 + 192, v16, (uint64_t)(a2 - 18));
          sub_100676B04(v15, (uint64_t)v13, v16);
          v225 = *(_OWORD *)a1;
          v233 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v248 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v248[16] = *(_OWORD *)(a1 + 80);
          v238 = *(_OWORD *)(a1 + 32);
          v243 = *(_OWORD *)(a1 + 48);
          v18 = v13[3];
          v17 = v13[4];
          v19 = v13[2];
          *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v13 + 73);
          *(_OWORD *)(a1 + 48) = v18;
          *(_OWORD *)(a1 + 64) = v17;
          *(_OWORD *)(a1 + 32) = v19;
          v20 = v13[1];
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v20;
          *v13 = v225;
          v13[1] = v233;
          *(_OWORD *)((char *)v13 + 73) = *(_OWORD *)&v248[9];
          v13[3] = v243;
          v13[4] = *(_OWORD *)v248;
          v13[2] = v238;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v21 = *(_DWORD *)(a1 - 40);
          v22 = *(_DWORD *)(a1 + 56);
          if (v21 > v22)
          {
            v21 = *(_DWORD *)(a1 + 56);
            goto LABEL_17;
          }
          if (v21 == v22)
          {
            v23 = *(_DWORD *)(a1 - 72);
            v56 = *(_DWORD *)(a1 + 24);
            if (v23 > v56)
              goto LABEL_17;
            if (v23 == v56)
            {
              if (*(double *)(a1 - 56) < *(double *)(a1 + 40))
                goto LABEL_17;
              v56 = *(_DWORD *)(a1 - 72);
            }
          }
          else
          {
            v56 = *(_DWORD *)(a1 + 24);
          }
          v223 = *(_QWORD *)(a1 + 16);
          v214 = *(_OWORD *)a1;
          v211 = *(_DWORD *)(a1 + 36);
          v208 = *(_QWORD *)(a1 + 28);
          v57 = *(double *)(a1 + 40);
          v58 = *(_QWORD *)(a1 + 48);
          *(_OWORD *)v199 = *(_OWORD *)(a1 + 60);
          *(_OWORD *)&v199[16] = *(_OWORD *)(a1 + 76);
          v59 = *((_DWORD *)a2 - 10);
          if (v22 > v59
            || v22 == v59 && ((v66 = *((_DWORD *)a2 - 18), v56 > v66) || v56 == v66 && v57 < *((double *)a2 - 7)))
          {
            i = a1 + 96;
            v60 = *(_DWORD *)(a1 + 152);
            if (v22 <= v60)
            {
              v61 = a1 + 136;
              do
              {
                if (v22 == v60)
                {
                  v62 = *(_DWORD *)(v61 - 16);
                  if (v56 > v62)
                    goto LABEL_81;
                  if (v56 == v62 && v57 < *(double *)v61)
                    break;
                }
                i += 96;
                v60 = *(_DWORD *)(v61 + 112);
                v61 += 96;
              }
              while (v22 <= v60);
              i = v61 - 40;
            }
          }
          else
          {
            for (i = a1 + 96; i < (unint64_t)a2; i += 96)
            {
              v67 = *(_DWORD *)(i + 56);
              if (v22 > v67)
                break;
              if (v22 == v67)
              {
                v68 = *(_DWORD *)(i + 24);
                if (v56 > v68 || v56 == v68 && v57 < *(double *)(i + 40))
                  break;
              }
            }
          }
LABEL_81:
          v63 = (double *)a2;
          if (i < (unint64_t)a2)
          {
            for (j = (double *)a2 - 7; ; j -= 12)
            {
              if (v22 <= v59)
              {
                if (v22 != v59)
                  break;
                v65 = *((_DWORD *)j - 4);
                if (v56 <= v65 && (v56 != v65 || v57 >= *j))
                  break;
              }
              v59 = *((_DWORD *)j - 20);
            }
            v63 = j - 5;
          }
          while (i < (unint64_t)v63)
          {
            v227 = *(_OWORD *)i;
            v235 = *(_OWORD *)(i + 16);
            *(_OWORD *)v250 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v250[16] = *(_OWORD *)(i + 80);
            v240 = *(_OWORD *)(i + 32);
            v245 = *(_OWORD *)(i + 48);
            v70 = *((_OWORD *)v63 + 3);
            v69 = *((_OWORD *)v63 + 4);
            v71 = *((_OWORD *)v63 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v63 + 73);
            *(_OWORD *)(i + 48) = v70;
            *(_OWORD *)(i + 64) = v69;
            *(_OWORD *)(i + 32) = v71;
            v72 = *((_OWORD *)v63 + 1);
            *(_OWORD *)i = *(_OWORD *)v63;
            *(_OWORD *)(i + 16) = v72;
            *(_OWORD *)v63 = v227;
            *((_OWORD *)v63 + 1) = v235;
            *(_OWORD *)((char *)v63 + 73) = *(_OWORD *)&v250[9];
            *((_OWORD *)v63 + 3) = v245;
            *((_OWORD *)v63 + 4) = *(_OWORD *)v250;
            *((_OWORD *)v63 + 2) = v240;
            v73 = i + 96;
            v74 = *(_DWORD *)(i + 152);
            if (v22 <= v74)
            {
              v75 = i + 136;
              do
              {
                if (v22 == v74)
                {
                  v76 = *(_DWORD *)(v75 - 16);
                  if (v56 > v76)
                    break;
                  if (v56 == v76 && v57 < *(double *)v75)
                    goto LABEL_103;
                }
                v73 += 96;
                v74 = *(_DWORD *)(v75 + 112);
                v75 += 96;
              }
              while (v22 <= v74);
              i = v75 - 40;
            }
            else
            {
LABEL_103:
              i = v73;
            }
            do
            {
              do
              {
                v63 -= 12;
                v77 = *((_DWORD *)v63 + 14);
              }
              while (v22 > v77);
              if (v22 != v77)
                break;
              v78 = *((_DWORD *)v63 + 6);
            }
            while (v56 > v78 || v56 == v78 && v57 < v63[5]);
          }
          v79 = (_OWORD *)(i - 96);
          if (i - 96 != a1)
          {
            v80 = *(_OWORD *)(i - 80);
            *(_OWORD *)a1 = *v79;
            *(_OWORD *)(a1 + 16) = v80;
            v81 = *(_OWORD *)(i - 64);
            v82 = *(_OWORD *)(i - 48);
            v83 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
            *(_OWORD *)(a1 + 48) = v82;
            *(_OWORD *)(a1 + 64) = v83;
            *(_OWORD *)(a1 + 32) = v81;
          }
          a4 = 0;
          *(_QWORD *)(i - 80) = v223;
          *v79 = v214;
          *(_DWORD *)(i - 72) = v56;
          *(_DWORD *)(i - 60) = v211;
          *(_QWORD *)(i - 68) = v208;
          *(double *)(i - 56) = v57;
          *(_QWORD *)(i - 48) = v58;
          *(_DWORD *)(i - 40) = v22;
          *(_OWORD *)(i - 23) = *(_OWORD *)&v199[13];
          *(_OWORD *)(i - 36) = *(_OWORD *)v199;
          continue;
        }
        v21 = *(_DWORD *)(a1 + 56);
LABEL_17:
        v24 = 0;
        v222 = *(_QWORD *)(a1 + 16);
        v213 = *(_OWORD *)a1;
        v25 = *(_DWORD *)(a1 + 24);
        v207 = *(_QWORD *)(a1 + 28);
        v210 = *(_DWORD *)(a1 + 36);
        v26 = *(double *)(a1 + 40);
        v27 = *(_QWORD *)(a1 + 48);
        *(_OWORD *)v198 = *(_OWORD *)(a1 + 60);
        *(_OWORD *)&v198[16] = *(_OWORD *)(a1 + 76);
        while (1)
        {
          v28 = *(_DWORD *)(a1 + v24 + 152);
          if (v28 <= v21)
          {
            if (v28 != v21)
              break;
            v29 = *(_DWORD *)(a1 + v24 + 120);
            if (v29 <= v25 && (v29 != v25 || *(double *)(a1 + v24 + 136) >= v26))
              break;
          }
          v24 += 96;
        }
        v30 = a1 + v24 + 96;
        if (v24)
        {
          v31 = *((_DWORD *)a2 - 10);
          v32 = (double *)a2 - 7;
          v33 = (double *)(a2 - 6);
          if (v31 <= v21)
          {
            do
            {
              if (v31 == v21)
              {
                v34 = *((_DWORD *)v32 - 4);
                if (v34 > v25)
                  goto LABEL_48;
                if (v34 == v25 && *v32 < v26)
                  break;
              }
              v33 -= 12;
              v31 = *((_DWORD *)v32 - 20);
              v32 -= 12;
            }
            while (v31 <= v21);
LABEL_31:
            v33 = v32 - 5;
          }
        }
        else
        {
          v33 = (double *)a2;
          if (v30 < (unint64_t)a2)
          {
            v35 = *((_DWORD *)a2 - 10);
            v33 = (double *)(a2 - 6);
            if (v35 <= v21)
            {
              v32 = (double *)a2 - 7;
              v33 = (double *)(a2 - 6);
              while (1)
              {
                v36 = v32 - 5;
                if (v35 != v21)
                  goto LABEL_44;
                v37 = *((_DWORD *)v32 - 4);
                if (v37 > v25)
                  break;
                if (v37 == v25)
                {
                  if (*v32 < v26 || v30 >= (unint64_t)v36)
                    break;
                }
                else
                {
LABEL_44:
                  if (v30 >= (unint64_t)v36)
                  {
                    v33 = v32 - 5;
                    break;
                  }
                }
                v33 -= 12;
                v35 = *((_DWORD *)v32 - 20);
                v32 -= 12;
                if (v35 > v21)
                  goto LABEL_31;
              }
            }
          }
        }
LABEL_48:
        i = v30;
        if (v30 < (unint64_t)v33)
        {
          v39 = v33;
          do
          {
            v226 = *(_OWORD *)i;
            v234 = *(_OWORD *)(i + 16);
            *(_OWORD *)v249 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v249[16] = *(_OWORD *)(i + 80);
            v239 = *(_OWORD *)(i + 32);
            v244 = *(_OWORD *)(i + 48);
            v41 = *((_OWORD *)v39 + 3);
            v40 = *((_OWORD *)v39 + 4);
            v42 = *((_OWORD *)v39 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v39 + 73);
            *(_OWORD *)(i + 48) = v41;
            *(_OWORD *)(i + 64) = v40;
            *(_OWORD *)(i + 32) = v42;
            v43 = *((_OWORD *)v39 + 1);
            *(_OWORD *)i = *(_OWORD *)v39;
            *(_OWORD *)(i + 16) = v43;
            *(_OWORD *)v39 = v226;
            *((_OWORD *)v39 + 1) = v234;
            *(_OWORD *)((char *)v39 + 73) = *(_OWORD *)&v249[9];
            *((_OWORD *)v39 + 3) = v244;
            *((_OWORD *)v39 + 4) = *(_OWORD *)v249;
            *((_OWORD *)v39 + 2) = v239;
            do
            {
              do
              {
                i += 96;
                v44 = *(_DWORD *)(i + 56);
              }
              while (v44 > v21);
              if (v44 != v21)
                break;
              v45 = *(_DWORD *)(i + 24);
            }
            while (v45 > v25 || v45 == v25 && *(double *)(i + 40) < v26);
            v46 = v39 - 12;
            v47 = *((_DWORD *)v39 - 10);
            if (v47 <= v21)
            {
              v48 = v39 - 7;
              do
              {
                if (v47 == v21)
                {
                  v49 = *((_DWORD *)v48 - 4);
                  if (v49 > v25)
                    break;
                  if (v49 == v25 && *v48 < v26)
                    goto LABEL_64;
                }
                v46 -= 12;
                v47 = *((_DWORD *)v48 - 20);
                v48 -= 12;
              }
              while (v47 <= v21);
              v46 = v48 - 5;
            }
LABEL_64:
            v39 = v46;
          }
          while (i < (unint64_t)v46);
        }
        v50 = (_OWORD *)(i - 96);
        if (i - 96 != a1)
        {
          v51 = *(_OWORD *)(i - 80);
          *(_OWORD *)a1 = *v50;
          *(_OWORD *)(a1 + 16) = v51;
          v52 = *(_OWORD *)(i - 64);
          v53 = *(_OWORD *)(i - 48);
          v54 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
          *(_OWORD *)(a1 + 48) = v53;
          *(_OWORD *)(a1 + 64) = v54;
          *(_OWORD *)(a1 + 32) = v52;
        }
        *(_QWORD *)(i - 80) = v222;
        *v50 = v213;
        *(_DWORD *)(i - 72) = v25;
        *(_DWORD *)(i - 60) = v210;
        *(_QWORD *)(i - 68) = v207;
        *(double *)(i - 56) = v26;
        *(_QWORD *)(i - 48) = v27;
        *(_DWORD *)(i - 40) = v21;
        *(_OWORD *)(i - 23) = *(_OWORD *)&v198[13];
        *(_OWORD *)(i - 36) = *(_OWORD *)v198;
        if (v30 < (unint64_t)v33)
        {
LABEL_70:
          sub_1006757C8(a1, i - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v55 = sub_100676DC0(a1, i - 96);
        if (!sub_100676DC0(i, (uint64_t)a2))
        {
          if (v55)
            continue;
          goto LABEL_70;
        }
        a2 = (_OWORD *)(i - 96);
        if (!v55)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 6;
  i = a1;
  while (2)
  {
    a1 = i;
    v10 = (uint64_t)a2 - i;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - i) >> 5);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v83 = *((_DWORD *)a2 - 10);
        v84 = *(_DWORD *)(i + 56);
        if (v83 > v84
          || v83 == v84
          && ((v85 = *((_DWORD *)a2 - 18), v86 = *(_DWORD *)(i + 24), v85 > v86)
           || v85 == v86 && *((double *)a2 - 8) < *(double *)(i + 32)))
        {
          v224 = *(_OWORD *)i;
          v232 = *(_OWORD *)(i + 16);
          *(_OWORD *)v247 = *(_OWORD *)(i + 64);
          *(_OWORD *)&v247[16] = *(_OWORD *)(i + 80);
          v237 = *(_OWORD *)(i + 32);
          v242 = *(_OWORD *)(i + 48);
          v88 = *(a2 - 3);
          v87 = *(a2 - 2);
          v89 = *(a2 - 4);
          *(_OWORD *)(i + 73) = *(_OWORD *)((char *)a2 - 23);
          *(_OWORD *)(i + 48) = v88;
          *(_OWORD *)(i + 64) = v87;
          *(_OWORD *)(i + 32) = v89;
          v90 = *(a2 - 5);
          *(_OWORD *)i = *v8;
          *(_OWORD *)(i + 16) = v90;
          *v8 = v224;
          *(a2 - 5) = v232;
          *(_OWORD *)((char *)a2 - 23) = *(_OWORD *)&v247[9];
          *(a2 - 3) = v242;
          *(a2 - 2) = *(_OWORD *)v247;
          *(a2 - 4) = v237;
        }
        return;
      case 3:
        sub_100678590(i, i + 96, (uint64_t)(a2 - 6));
        return;
      case 4:
        sub_100678B50(i, i + 96, i + 192, (uint64_t)(a2 - 6));
        return;
      case 5:
        sub_100678304(i, i + 96, i + 192, i + 288, (uint64_t)(a2 - 6));
        return;
      default:
        if (v10 <= 2303)
        {
          v91 = (_OWORD *)(i + 96);
          v93 = (_OWORD *)i == a2 || v91 == a2;
          if ((a4 & 1) != 0)
          {
            if (v93)
              return;
            v94 = 0;
            v95 = i;
            while (1)
            {
              v96 = v95;
              v95 = (unint64_t)v91;
              v97 = *(_DWORD *)(v96 + 152);
              v98 = *(_DWORD *)(v96 + 56);
              if (v97 > v98)
                break;
              if (v97 == v98)
              {
                v99 = *(_DWORD *)(v96 + 120);
                v100 = *(_DWORD *)(v96 + 24);
                if (v99 > v100 || v99 == v100 && *(double *)(v96 + 128) < *(double *)(v96 + 32))
                  goto LABEL_147;
              }
LABEL_159:
              v91 = (_OWORD *)(v95 + 96);
              v94 += 96;
              if ((_OWORD *)(v95 + 96) == a2)
                return;
            }
            v99 = *(_DWORD *)(v96 + 120);
LABEL_147:
            v206 = *(_QWORD *)(v95 + 16);
            v202 = *(_OWORD *)v95;
            v101 = *(_DWORD *)(v96 + 124);
            v102 = *(double *)(v96 + 128);
            v214 = *(_OWORD *)(v96 + 136);
            *(_OWORD *)v225 = *(_OWORD *)(v96 + 156);
            *(_OWORD *)&v225[16] = *(_OWORD *)(v96 + 172);
            v103 = *(_OWORD *)(v96 + 16);
            *(_OWORD *)v95 = *(_OWORD *)v96;
            *(_OWORD *)(v95 + 16) = v103;
            *(_OWORD *)(v95 + 73) = *(_OWORD *)(v96 + 73);
            v104 = *(_OWORD *)(v96 + 64);
            v105 = *(_OWORD *)(v96 + 32);
            v106 = i;
            *(_OWORD *)(v95 + 48) = *(_OWORD *)(v96 + 48);
            *(_OWORD *)(v95 + 64) = v104;
            *(_OWORD *)(v95 + 32) = v105;
            if (v96 != i)
            {
              v107 = v94;
              while (1)
              {
                v108 = (_OWORD *)(i + v107);
                v109 = *(_DWORD *)(i + v107 - 40);
                if (v97 <= v109)
                {
                  if (v97 != v109)
                  {
                    v106 = i + v107;
                    goto LABEL_158;
                  }
                  v110 = *(_DWORD *)(i + v107 - 72);
                  if (v99 <= v110 && (v99 != v110 || v102 >= *(double *)(i + v107 - 64)))
                    break;
                }
                v96 -= 96;
                v111 = *(v108 - 3);
                v108[2] = *(v108 - 4);
                v108[3] = v111;
                v108[4] = *(v108 - 2);
                *(_OWORD *)((char *)v108 + 73) = *(_OWORD *)((char *)v108 - 23);
                v112 = *(v108 - 5);
                *v108 = *(v108 - 6);
                v108[1] = v112;
                v107 -= 96;
                if (!v107)
                {
                  v106 = i;
                  goto LABEL_158;
                }
              }
              v106 = v96;
            }
LABEL_158:
            *(_OWORD *)v106 = v202;
            *(_QWORD *)(v106 + 16) = v206;
            *(_DWORD *)(v106 + 24) = v99;
            *(_DWORD *)(v106 + 28) = v101;
            *(double *)(v106 + 32) = v102;
            *(_OWORD *)(v106 + 40) = v214;
            *(_DWORD *)(v106 + 56) = v97;
            *(_OWORD *)(v106 + 60) = *(_OWORD *)v225;
            *(_OWORD *)(v106 + 73) = *(_OWORD *)&v225[13];
            goto LABEL_159;
          }
          if (v93)
            return;
          while (1)
          {
            v188 = a1;
            a1 = (uint64_t)v91;
            v189 = *(_DWORD *)(v188 + 152);
            v190 = *(_DWORD *)(v188 + 56);
            if (v189 > v190)
              break;
            if (v189 == v190)
            {
              v191 = *(_DWORD *)(v188 + 120);
              v192 = *(_DWORD *)(v188 + 24);
              if (v191 > v192 || v191 == v192 && *(double *)(v188 + 128) < *(double *)(v188 + 32))
                goto LABEL_234;
            }
LABEL_241:
            v91 = (_OWORD *)(a1 + 96);
            if ((_OWORD *)(a1 + 96) == a2)
              return;
          }
          v191 = *(_DWORD *)(v188 + 120);
LABEL_234:
          v208 = *(_QWORD *)(a1 + 16);
          v205 = *(_OWORD *)a1;
          v193 = *(_DWORD *)(v188 + 124);
          v194 = *(double *)(v188 + 128);
          v217 = *(_OWORD *)(v188 + 136);
          *(_OWORD *)v228 = *(_OWORD *)(v188 + 156);
          *(_OWORD *)&v228[16] = *(_OWORD *)(v188 + 172);
          do
          {
            do
            {
              v195 = v188;
              v196 = *(_OWORD *)(v188 + 48);
              *(_OWORD *)(v188 + 128) = *(_OWORD *)(v188 + 32);
              *(_OWORD *)(v188 + 144) = v196;
              *(_OWORD *)(v188 + 160) = *(_OWORD *)(v188 + 64);
              *(_OWORD *)(v188 + 169) = *(_OWORD *)(v188 + 73);
              v197 = *(_OWORD *)(v188 + 16);
              *(_OWORD *)(v188 + 96) = *(_OWORD *)v188;
              *(_OWORD *)(v188 + 112) = v197;
              v188 -= 96;
              v198 = *(_DWORD *)(v195 - 40);
            }
            while (v189 > v198);
            if (v189 != v198)
              break;
            v199 = *(_DWORD *)(v195 - 72);
          }
          while (v191 > v199 || v191 == v199 && v194 < *(double *)(v195 - 64));
          *(_OWORD *)v195 = v205;
          *(_QWORD *)(v195 + 16) = v208;
          *(_DWORD *)(v195 + 24) = v191;
          *(_DWORD *)(v195 + 28) = v193;
          *(double *)(v195 + 32) = v194;
          *(_OWORD *)(v195 + 40) = v217;
          *(_DWORD *)(v195 + 56) = v189;
          *(_OWORD *)(v195 + 60) = *(_OWORD *)v228;
          *(_OWORD *)(v195 + 73) = *(_OWORD *)&v228[13];
          goto LABEL_241;
        }
        if (!a3)
        {
          if ((_OWORD *)i == a2)
            return;
          v113 = (unint64_t)(v11 - 2) >> 1;
          v114 = v113;
          while (1)
          {
            v115 = v114;
            if (v113 >= v114)
            {
              v116 = (2 * v114) | 1;
              v117 = (_OWORD *)(i + 96 * v116);
              if (2 * v115 + 2 < v11)
              {
                v118 = *(_DWORD *)(i + 96 * v116 + 56);
                v119 = *((_DWORD *)v117 + 38);
                if (v118 > v119
                  || v118 == v119
                  && ((v120 = *(_DWORD *)(i + 96 * v116 + 24), v121 = *((_DWORD *)v117 + 30), v120 > v121)
                   || v120 == v121 && *(double *)(i + 96 * v116 + 32) < *((double *)v117 + 16)))
                {
                  v117 += 6;
                  v116 = 2 * v115 + 2;
                }
              }
              v122 = *((_DWORD *)v117 + 14);
              v123 = *(_DWORD *)(i + 96 * v115 + 56);
              if (v122 <= v123)
              {
                v124 = i + 96 * v115;
                if (v122 != v123)
                {
                  v126 = *(_DWORD *)(v124 + 24);
LABEL_177:
                  v207 = *(_QWORD *)(v124 + 16);
                  v203 = *(_OWORD *)v124;
                  v127 = *(_DWORD *)(v124 + 28);
                  v128 = *(double *)(v124 + 32);
                  v215 = *(_OWORD *)(v124 + 40);
                  *(_OWORD *)v226 = *(_OWORD *)(v124 + 60);
                  *(_OWORD *)&v226[16] = *(_OWORD *)(v124 + 76);
                  v130 = v117[3];
                  v129 = v117[4];
                  v131 = v117[2];
                  *(_OWORD *)(v124 + 73) = *(_OWORD *)((char *)v117 + 73);
                  *(_OWORD *)(v124 + 48) = v130;
                  *(_OWORD *)(v124 + 64) = v129;
                  *(_OWORD *)(v124 + 32) = v131;
                  v132 = v117[1];
                  *(_OWORD *)v124 = *v117;
                  *(_OWORD *)(v124 + 16) = v132;
                  while (1)
                  {
                    if (v113 < v116)
                      goto LABEL_193;
                    v133 = v117;
                    v134 = 2 * v116;
                    v116 = (2 * v116) | 1;
                    v117 = (_OWORD *)(i + 96 * v116);
                    v135 = v134 + 2;
                    if (v135 < v11)
                    {
                      v136 = *(_DWORD *)(i + 96 * v116 + 56);
                      v137 = *((_DWORD *)v117 + 38);
                      if (v136 > v137
                        || v136 == v137
                        && ((v138 = *(_DWORD *)(i + 96 * v116 + 24), v139 = *((_DWORD *)v117 + 30), v138 > v139)
                         || v138 == v139 && *(double *)(i + 96 * v116 + 32) < *((double *)v117 + 16)))
                      {
                        v117 += 6;
                        v116 = v135;
                      }
                    }
                    v140 = *((_DWORD *)v117 + 14);
                    if (v140 > v123)
                      break;
                    if (v140 == v123)
                    {
                      v141 = *((_DWORD *)v117 + 6);
                      if (v141 > v126 || v141 == v126 && *((double *)v117 + 4) < v128)
                        break;
                    }
                    v142 = v117[1];
                    *v133 = *v117;
                    v133[1] = v142;
                    v143 = v117[2];
                    v144 = v117[3];
                    v145 = v117[4];
                    *(_OWORD *)((char *)v133 + 73) = *(_OWORD *)((char *)v117 + 73);
                    v133[3] = v144;
                    v133[4] = v145;
                    v133[2] = v143;
                  }
                  v117 = v133;
LABEL_193:
                  *v117 = v203;
                  *((_QWORD *)v117 + 2) = v207;
                  *((_DWORD *)v117 + 6) = v126;
                  *((_DWORD *)v117 + 7) = v127;
                  *((double *)v117 + 4) = v128;
                  *(_OWORD *)((char *)v117 + 40) = v215;
                  *((_DWORD *)v117 + 14) = v123;
                  *(_OWORD *)((char *)v117 + 60) = *(_OWORD *)v226;
                  *(_OWORD *)((char *)v117 + 73) = *(_OWORD *)&v226[13];
                  goto LABEL_194;
                }
                v125 = *((_DWORD *)v117 + 6);
                v126 = *(_DWORD *)(i + 96 * v115 + 24);
                if (v125 <= v126)
                {
                  if (v125 != v126)
                    goto LABEL_177;
                  v126 = *((_DWORD *)v117 + 6);
                  if (*((double *)v117 + 4) >= *(double *)(i + 96 * v115 + 32))
                    goto LABEL_177;
                }
              }
            }
LABEL_194:
            v114 = v115 - 1;
            if (!v115)
            {
              v146 = v10 / 0x60uLL;
              while (1)
              {
                v147 = 0;
                v227 = *(_OWORD *)i;
                v233 = *(_OWORD *)(i + 16);
                *(_OWORD *)v248 = *(_OWORD *)(i + 64);
                *(_OWORD *)&v248[16] = *(_OWORD *)(i + 80);
                v238 = *(_OWORD *)(i + 32);
                v243 = *(_OWORD *)(i + 48);
                v148 = i;
                do
                {
                  v149 = (_OWORD *)v148;
                  v150 = v147 + 1;
                  v148 += 96 * (v147 + 1);
                  v151 = 2 * v147;
                  v147 = (2 * v147) | 1;
                  v152 = v151 + 2;
                  if (v152 < v146)
                  {
                    v153 = DWORD2(v149[6 * v150 + 3]);
                    v154 = *(_DWORD *)(v148 + 152);
                    if (v153 > v154
                      || v153 == v154
                      && ((v155 = DWORD2(v149[6 * v150 + 1]), v156 = *(_DWORD *)(v148 + 120), v155 > v156)
                       || v155 == v156 && *(double *)&v149[6 * v150 + 2] < *(double *)(v148 + 128)))
                    {
                      v148 += 96;
                      v147 = v152;
                    }
                  }
                  v157 = *(_OWORD *)(v148 + 16);
                  *v149 = *(_OWORD *)v148;
                  v149[1] = v157;
                  v158 = *(_OWORD *)(v148 + 32);
                  v159 = *(_OWORD *)(v148 + 48);
                  v160 = *(_OWORD *)(v148 + 64);
                  *(_OWORD *)((char *)v149 + 73) = *(_OWORD *)(v148 + 73);
                  v149[3] = v159;
                  v149[4] = v160;
                  v149[2] = v158;
                }
                while (v147 <= (uint64_t)((unint64_t)(v146 - 2) >> 1));
                a2 -= 6;
                if ((_OWORD *)v148 == a2)
                {
                  *(_OWORD *)v148 = v227;
                  *(_OWORD *)(v148 + 16) = v233;
                  *(_OWORD *)(v148 + 73) = *(_OWORD *)&v248[9];
                  *(_OWORD *)(v148 + 48) = v243;
                  *(_OWORD *)(v148 + 64) = *(_OWORD *)v248;
                  *(_OWORD *)(v148 + 32) = v238;
                }
                else
                {
                  v161 = a2[1];
                  *(_OWORD *)v148 = *a2;
                  *(_OWORD *)(v148 + 16) = v161;
                  v162 = a2[2];
                  v163 = a2[3];
                  v164 = a2[4];
                  *(_OWORD *)(v148 + 73) = *(_OWORD *)((char *)a2 + 73);
                  *(_OWORD *)(v148 + 48) = v163;
                  *(_OWORD *)(v148 + 64) = v164;
                  *(_OWORD *)(v148 + 32) = v162;
                  *(_OWORD *)((char *)a2 + 73) = *(_OWORD *)&v248[9];
                  a2[3] = v243;
                  a2[4] = *(_OWORD *)v248;
                  a2[2] = v238;
                  *a2 = v227;
                  a2[1] = v233;
                  v165 = v148 - i + 96;
                  if (v165 >= 97)
                  {
                    v166 = v165 / 0x60uLL - 2;
                    v167 = v166 >> 1;
                    v168 = i + 96 * (v166 >> 1);
                    v169 = *(_DWORD *)(v168 + 56);
                    v170 = *(_DWORD *)(v148 + 56);
                    if (v169 > v170)
                    {
                      v171 = *(_DWORD *)(v148 + 24);
LABEL_209:
                      v220 = *(_QWORD *)(v148 + 16);
                      v216 = *(_OWORD *)v148;
                      v172 = *(_DWORD *)(v148 + 28);
                      v173 = *(double *)(v148 + 32);
                      v211 = *(_OWORD *)(v148 + 40);
                      *(_OWORD *)v204 = *(_OWORD *)(v148 + 60);
                      *(_OWORD *)&v204[16] = *(_OWORD *)(v148 + 76);
                      v175 = *(_OWORD *)(v168 + 48);
                      v174 = *(_OWORD *)(v168 + 64);
                      v176 = *(_OWORD *)(v168 + 32);
                      *(_OWORD *)(v148 + 73) = *(_OWORD *)(v168 + 73);
                      *(_OWORD *)(v148 + 48) = v175;
                      *(_OWORD *)(v148 + 64) = v174;
                      *(_OWORD *)(v148 + 32) = v176;
                      v177 = *(_OWORD *)(v168 + 16);
                      *(_OWORD *)v148 = *(_OWORD *)v168;
                      *(_OWORD *)(v148 + 16) = v177;
                      if (v166 >= 2)
                      {
                        while (1)
                        {
                          v179 = v167 - 1;
                          v167 = (v167 - 1) >> 1;
                          v178 = i + 96 * v167;
                          v180 = *(_DWORD *)(v178 + 56);
                          if (v180 <= v170)
                          {
                            if (v180 != v170)
                              break;
                            v181 = *(_DWORD *)(i + 96 * v167 + 24);
                            if (v181 <= v171 && (v181 != v171 || *(double *)(i + 96 * v167 + 32) >= v173))
                              break;
                          }
                          v182 = *(_OWORD *)(v178 + 16);
                          *(_OWORD *)v168 = *(_OWORD *)v178;
                          *(_OWORD *)(v168 + 16) = v182;
                          v183 = *(_OWORD *)(v178 + 32);
                          v184 = *(_OWORD *)(v178 + 48);
                          v185 = *(_OWORD *)(v178 + 64);
                          *(_OWORD *)(v168 + 73) = *(_OWORD *)(v178 + 73);
                          *(_OWORD *)(v168 + 48) = v184;
                          *(_OWORD *)(v168 + 64) = v185;
                          *(_OWORD *)(v168 + 32) = v183;
                          v168 = i + 96 * v167;
                          if (v179 <= 1)
                            goto LABEL_217;
                        }
                      }
                      v178 = v168;
LABEL_217:
                      *(_OWORD *)v178 = v216;
                      *(_QWORD *)(v178 + 16) = v220;
                      *(_DWORD *)(v178 + 24) = v171;
                      *(_DWORD *)(v178 + 28) = v172;
                      *(double *)(v178 + 32) = v173;
                      *(_OWORD *)(v178 + 40) = v211;
                      *(_DWORD *)(v178 + 56) = v170;
                      *(_OWORD *)(v178 + 60) = *(_OWORD *)v204;
                      *(_OWORD *)(v178 + 73) = *(_OWORD *)&v204[13];
                      goto LABEL_219;
                    }
                    if (v169 == v170)
                    {
                      v187 = *(_DWORD *)(i + 96 * v167 + 24);
                      v171 = *(_DWORD *)(v148 + 24);
                      if (v187 > v171)
                        goto LABEL_209;
                      if (v187 == v171)
                      {
                        v171 = *(_DWORD *)(i + 96 * v167 + 24);
                        if (*(double *)(i + 96 * v167 + 32) < *(double *)(v148 + 32))
                          goto LABEL_209;
                      }
                    }
                  }
                }
LABEL_219:
                if (v146-- <= 2)
                  return;
              }
            }
          }
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_OWORD *)(i + 96 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x3000)
        {
          sub_100678590(a1 + 96 * v12, a1, (uint64_t)(a2 - 6));
        }
        else
        {
          sub_100678590(a1, a1 + 96 * v12, (uint64_t)(a2 - 6));
          v14 = 3 * v12;
          v15 = a1 + 96 * v12 - 96;
          sub_100678590(a1 + 96, v15, (uint64_t)(a2 - 12));
          v16 = a1 + 96 + 32 * v14;
          sub_100678590(a1 + 192, v16, (uint64_t)(a2 - 18));
          sub_100678590(v15, (uint64_t)v13, v16);
          v221 = *(_OWORD *)a1;
          v229 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v244 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v244[16] = *(_OWORD *)(a1 + 80);
          v234 = *(_OWORD *)(a1 + 32);
          v239 = *(_OWORD *)(a1 + 48);
          v18 = v13[3];
          v17 = v13[4];
          v19 = v13[2];
          *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v13 + 73);
          *(_OWORD *)(a1 + 48) = v18;
          *(_OWORD *)(a1 + 64) = v17;
          *(_OWORD *)(a1 + 32) = v19;
          v20 = v13[1];
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v20;
          *v13 = v221;
          v13[1] = v229;
          *(_OWORD *)((char *)v13 + 73) = *(_OWORD *)&v244[9];
          v13[3] = v239;
          v13[4] = *(_OWORD *)v244;
          v13[2] = v234;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v21 = *(_DWORD *)(a1 - 40);
          v22 = *(_DWORD *)(a1 + 56);
          if (v21 > v22)
          {
            v21 = *(_DWORD *)(a1 + 56);
            goto LABEL_17;
          }
          if (v21 == v22)
          {
            v23 = *(_DWORD *)(a1 - 72);
            v55 = *(_DWORD *)(a1 + 24);
            if (v23 > v55)
              goto LABEL_17;
            if (v23 == v55)
            {
              if (*(double *)(a1 - 64) < *(double *)(a1 + 32))
                goto LABEL_17;
              v55 = *(_DWORD *)(a1 - 72);
            }
          }
          else
          {
            v55 = *(_DWORD *)(a1 + 24);
          }
          v219 = *(_QWORD *)(a1 + 16);
          v56 = *(_DWORD *)(a1 + 28);
          v57 = *(double *)(a1 + 32);
          v210 = *(_OWORD *)(a1 + 40);
          v213 = *(_OWORD *)a1;
          *(_OWORD *)v201 = *(_OWORD *)(a1 + 60);
          *(_OWORD *)&v201[16] = *(_OWORD *)(a1 + 76);
          v58 = *((_DWORD *)a2 - 10);
          if (v22 > v58
            || v22 == v58 && ((v65 = *((_DWORD *)a2 - 18), v55 > v65) || v55 == v65 && v57 < *((double *)a2 - 8)))
          {
            i = a1 + 96;
            v59 = *(_DWORD *)(a1 + 152);
            if (v22 <= v59)
            {
              v60 = a1 + 128;
              do
              {
                if (v22 == v59)
                {
                  v61 = *(_DWORD *)(v60 - 8);
                  if (v55 > v61)
                    goto LABEL_81;
                  if (v55 == v61 && v57 < *(double *)v60)
                    break;
                }
                i += 96;
                v59 = *(_DWORD *)(v60 + 120);
                v60 += 96;
              }
              while (v22 <= v59);
              i = v60 - 32;
            }
          }
          else
          {
            for (i = a1 + 96; i < (unint64_t)a2; i += 96)
            {
              v66 = *(_DWORD *)(i + 56);
              if (v22 > v66)
                break;
              if (v22 == v66)
              {
                v67 = *(_DWORD *)(i + 24);
                if (v55 > v67 || v55 == v67 && v57 < *(double *)(i + 32))
                  break;
              }
            }
          }
LABEL_81:
          v62 = (double *)a2;
          if (i < (unint64_t)a2)
          {
            for (j = (double *)(a2 - 4); ; j -= 12)
            {
              if (v22 <= v58)
              {
                if (v22 != v58)
                  break;
                v64 = *((_DWORD *)j - 2);
                if (v55 <= v64 && (v55 != v64 || v57 >= *j))
                  break;
              }
              v58 = *((_DWORD *)j - 18);
            }
            v62 = j - 4;
          }
          while (i < (unint64_t)v62)
          {
            v223 = *(_OWORD *)i;
            v231 = *(_OWORD *)(i + 16);
            *(_OWORD *)v246 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v246[16] = *(_OWORD *)(i + 80);
            v236 = *(_OWORD *)(i + 32);
            v241 = *(_OWORD *)(i + 48);
            v69 = *((_OWORD *)v62 + 3);
            v68 = *((_OWORD *)v62 + 4);
            v70 = *((_OWORD *)v62 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v62 + 73);
            *(_OWORD *)(i + 48) = v69;
            *(_OWORD *)(i + 64) = v68;
            *(_OWORD *)(i + 32) = v70;
            v71 = *((_OWORD *)v62 + 1);
            *(_OWORD *)i = *(_OWORD *)v62;
            *(_OWORD *)(i + 16) = v71;
            *(_OWORD *)v62 = v223;
            *((_OWORD *)v62 + 1) = v231;
            *(_OWORD *)((char *)v62 + 73) = *(_OWORD *)&v246[9];
            *((_OWORD *)v62 + 3) = v241;
            *((_OWORD *)v62 + 4) = *(_OWORD *)v246;
            *((_OWORD *)v62 + 2) = v236;
            v72 = i + 96;
            v73 = *(_DWORD *)(i + 152);
            if (v22 <= v73)
            {
              v74 = i + 128;
              do
              {
                if (v22 == v73)
                {
                  v75 = *(_DWORD *)(v74 - 8);
                  if (v55 > v75)
                    break;
                  if (v55 == v75 && v57 < *(double *)v74)
                    goto LABEL_103;
                }
                v72 += 96;
                v73 = *(_DWORD *)(v74 + 120);
                v74 += 96;
              }
              while (v22 <= v73);
              i = v74 - 32;
            }
            else
            {
LABEL_103:
              i = v72;
            }
            do
            {
              do
              {
                v62 -= 12;
                v76 = *((_DWORD *)v62 + 14);
              }
              while (v22 > v76);
              if (v22 != v76)
                break;
              v77 = *((_DWORD *)v62 + 6);
            }
            while (v55 > v77 || v55 == v77 && v57 < v62[4]);
          }
          v78 = (_OWORD *)(i - 96);
          if (i - 96 != a1)
          {
            v79 = *(_OWORD *)(i - 80);
            *(_OWORD *)a1 = *v78;
            *(_OWORD *)(a1 + 16) = v79;
            v80 = *(_OWORD *)(i - 64);
            v81 = *(_OWORD *)(i - 48);
            v82 = *(_OWORD *)(i - 32);
            *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
            *(_OWORD *)(a1 + 48) = v81;
            *(_OWORD *)(a1 + 64) = v82;
            *(_OWORD *)(a1 + 32) = v80;
          }
          a4 = 0;
          *(_QWORD *)(i - 80) = v219;
          *v78 = v213;
          *(_DWORD *)(i - 72) = v55;
          *(_DWORD *)(i - 68) = v56;
          *(double *)(i - 64) = v57;
          *(_OWORD *)(i - 56) = v210;
          *(_DWORD *)(i - 40) = v22;
          *(_OWORD *)(i - 23) = *(_OWORD *)&v201[13];
          *(_OWORD *)(i - 36) = *(_OWORD *)v201;
          continue;
        }
        v21 = *(_DWORD *)(a1 + 56);
LABEL_17:
        v24 = 0;
        v218 = *(_QWORD *)(a1 + 16);
        v25 = *(_QWORD *)(a1 + 24);
        v26 = *(double *)(a1 + 32);
        v209 = *(_OWORD *)(a1 + 40);
        v212 = *(_OWORD *)a1;
        *(_OWORD *)v200 = *(_OWORD *)(a1 + 60);
        *(_OWORD *)&v200[16] = *(_OWORD *)(a1 + 76);
        while (1)
        {
          v27 = *(_DWORD *)(a1 + v24 + 152);
          if (v27 <= v21)
          {
            if (v27 != v21)
              break;
            v28 = *(_DWORD *)(a1 + v24 + 120);
            if (v28 <= (int)v25 && (v28 != (_DWORD)v25 || *(double *)(a1 + v24 + 128) >= v26))
              break;
          }
          v24 += 96;
        }
        v29 = a1 + v24 + 96;
        if (v24)
        {
          v30 = *((_DWORD *)a2 - 10);
          v31 = (double *)(a2 - 4);
          v32 = (double *)(a2 - 6);
          if (v30 <= v21)
          {
            do
            {
              if (v30 == v21)
              {
                v33 = *((_DWORD *)v31 - 2);
                if (v33 > (int)v25)
                  goto LABEL_48;
                if (v33 == (_DWORD)v25 && *v31 < v26)
                  break;
              }
              v32 -= 12;
              v30 = *((_DWORD *)v31 - 18);
              v31 -= 12;
            }
            while (v30 <= v21);
LABEL_31:
            v32 = v31 - 4;
          }
        }
        else
        {
          v32 = (double *)a2;
          if (v29 < (unint64_t)a2)
          {
            v34 = *((_DWORD *)a2 - 10);
            v32 = (double *)(a2 - 6);
            if (v34 <= v21)
            {
              v31 = (double *)(a2 - 4);
              v32 = (double *)(a2 - 6);
              while (1)
              {
                v35 = v31 - 4;
                if (v34 != v21)
                  goto LABEL_44;
                v36 = *((_DWORD *)v31 - 2);
                if (v36 > (int)v25)
                  break;
                if (v36 == (_DWORD)v25)
                {
                  if (*v31 < v26 || v29 >= (unint64_t)v35)
                    break;
                }
                else
                {
LABEL_44:
                  if (v29 >= (unint64_t)v35)
                  {
                    v32 = v31 - 4;
                    break;
                  }
                }
                v32 -= 12;
                v34 = *((_DWORD *)v31 - 18);
                v31 -= 12;
                if (v34 > v21)
                  goto LABEL_31;
              }
            }
          }
        }
LABEL_48:
        i = v29;
        if (v29 < (unint64_t)v32)
        {
          v38 = v32;
          do
          {
            v222 = *(_OWORD *)i;
            v230 = *(_OWORD *)(i + 16);
            *(_OWORD *)v245 = *(_OWORD *)(i + 64);
            *(_OWORD *)&v245[16] = *(_OWORD *)(i + 80);
            v235 = *(_OWORD *)(i + 32);
            v240 = *(_OWORD *)(i + 48);
            v40 = *((_OWORD *)v38 + 3);
            v39 = *((_OWORD *)v38 + 4);
            v41 = *((_OWORD *)v38 + 2);
            *(_OWORD *)(i + 73) = *(_OWORD *)((char *)v38 + 73);
            *(_OWORD *)(i + 48) = v40;
            *(_OWORD *)(i + 64) = v39;
            *(_OWORD *)(i + 32) = v41;
            v42 = *((_OWORD *)v38 + 1);
            *(_OWORD *)i = *(_OWORD *)v38;
            *(_OWORD *)(i + 16) = v42;
            *(_OWORD *)v38 = v222;
            *((_OWORD *)v38 + 1) = v230;
            *(_OWORD *)((char *)v38 + 73) = *(_OWORD *)&v245[9];
            *((_OWORD *)v38 + 3) = v240;
            *((_OWORD *)v38 + 4) = *(_OWORD *)v245;
            *((_OWORD *)v38 + 2) = v235;
            do
            {
              do
              {
                i += 96;
                v43 = *(_DWORD *)(i + 56);
              }
              while (v43 > v21);
              if (v43 != v21)
                break;
              v44 = *(_DWORD *)(i + 24);
            }
            while (v44 > (int)v25 || v44 == (_DWORD)v25 && *(double *)(i + 32) < v26);
            v45 = v38 - 12;
            v46 = *((_DWORD *)v38 - 10);
            if (v46 <= v21)
            {
              v47 = v38 - 8;
              do
              {
                if (v46 == v21)
                {
                  v48 = *((_DWORD *)v47 - 2);
                  if (v48 > (int)v25)
                    break;
                  if (v48 == (_DWORD)v25 && *v47 < v26)
                    goto LABEL_64;
                }
                v45 -= 12;
                v46 = *((_DWORD *)v47 - 18);
                v47 -= 12;
              }
              while (v46 <= v21);
              v45 = v47 - 4;
            }
LABEL_64:
            v38 = v45;
          }
          while (i < (unint64_t)v45);
        }
        v49 = (_OWORD *)(i - 96);
        if (i - 96 != a1)
        {
          v50 = *(_OWORD *)(i - 80);
          *(_OWORD *)a1 = *v49;
          *(_OWORD *)(a1 + 16) = v50;
          v51 = *(_OWORD *)(i - 64);
          v52 = *(_OWORD *)(i - 48);
          v53 = *(_OWORD *)(i - 32);
          *(_OWORD *)(a1 + 73) = *(_OWORD *)(i - 23);
          *(_OWORD *)(a1 + 48) = v52;
          *(_OWORD *)(a1 + 64) = v53;
          *(_OWORD *)(a1 + 32) = v51;
        }
        *v49 = v212;
        *(_QWORD *)(i - 80) = v218;
        *(_QWORD *)(i - 72) = v25;
        *(double *)(i - 64) = v26;
        *(_OWORD *)(i - 56) = v209;
        *(_DWORD *)(i - 40) = v21;
        *(_OWORD *)(i - 23) = *(_OWORD *)&v200[13];
        *(_OWORD *)(i - 36) = *(_OWORD *)v200;
        if (v29 < (unint64_t)v32)
        {
LABEL_70:
          sub_1006772C8(a1, i - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v54 = sub_10067884C(a1, i - 96);
        if (!sub_10067884C(i, (uint64_t)a2))
        {
          if (v54)
            continue;
          goto LABEL_70;
        }
        a2 = (_OWORD *)(i - 96);
        if (!v54)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a1;
LABEL_2:
  v10 = 1 - a4;
  while (2)
  {
    a1 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = ((char *)a2 - (char *)v9) >> 4;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v21 = *(a2 - 2);
        v22 = *v9;
        if (v21 < *v9 || v22 >= v21 && *(a2 - 1) < v9[1])
        {
          *v9 = v21;
          *(a2 - 2) = v22;
          v23 = *((_QWORD *)v9 + 1);
          v9[1] = *(a2 - 1);
          *((_QWORD *)a2 - 1) = v23;
        }
        return;
      case 3uLL:
        sub_100672AA8(v9, v9 + 2, a2 - 2);
        return;
      case 4uLL:
        sub_100673084(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(a2 - 2));
        return;
      case 5uLL:
        sub_100673184(v9, (uint64_t)(v9 + 2), (uint64_t)(v9 + 4), (uint64_t)(v9 + 6), (uint64_t)(a2 - 2));
        return;
      default:
        if (v12 <= 383)
        {
          if ((a5 & 1) != 0)
            sub_100672934(v9, a2);
          else
            sub_100672A0C(v9, a2);
          return;
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[2 * (v13 >> 1)];
          if ((unint64_t)v12 < 0x801)
          {
            sub_100672AA8(&v9[2 * (v13 >> 1)], v9, a2 - 2);
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          else
          {
            sub_100672AA8(v9, &v9[2 * (v13 >> 1)], a2 - 2);
            sub_100672AA8(v9 + 2, v15 - 2, a2 - 4);
            sub_100672AA8(v9 + 4, &v9[2 * v14 + 2], a2 - 6);
            sub_100672AA8(v15 - 2, v15, &v9[2 * v14 + 2]);
            v16 = *(_OWORD *)v9;
            *(_OWORD *)v9 = *(_OWORD *)v15;
            *(_OWORD *)v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_13;
          }
          v17 = *(v9 - 2);
          if (v17 >= *v9 && (*v9 < v17 || *(v9 - 1) >= v9[1]))
          {
            v9 = sub_100672BFC(v9, a2);
            goto LABEL_18;
          }
LABEL_13:
          v18 = (double *)sub_100672D40(v9, a2);
          if ((v19 & 1) == 0)
            goto LABEL_16;
          v20 = sub_100956F2C((uint64_t)v9, v18);
          v9 = v18 + 2;
          if (!sub_100956F2C((uint64_t)(v18 + 2), a2))
          {
            v10 = v11 + 1;
            if (v20)
              continue;
LABEL_16:
            sub_100956BB8(a1, v18, a3, -v11, a5 & 1);
            v9 = v18 + 2;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_2;
          }
          a4 = -v11;
          a2 = v18;
          if (v20)
            return;
          goto LABEL_1;
        }
        if (v9 != a2)
          sub_10095712C((uint64_t)v9, (uint64_t)a2, (uint64_t)a2, a3);
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = (uint64_t)((uint64_t)a2 - v8) >> 4;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v33 = *(a2 - 2);
        v32 = a2 - 2;
        if (v33 < *(double *)v8)
        {
          v85 = *(_OWORD *)v8;
          *(_OWORD *)v8 = *(_OWORD *)v32;
          *(_OWORD *)v32 = v85;
        }
        return;
      case 3uLL:
        sub_1009EAD90((double *)v8, (double *)(v8 + 16), a2 - 2);
        return;
      case 4uLL:
        sub_1009EB03C((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), (unint64_t *)a2 - 2);
        return;
      case 5uLL:
        v34 = (__int128 *)(v8 + 16);
        v35 = (__int128 *)(v8 + 32);
        v36 = (__int128 *)(v8 + 48);
        sub_1009EB03C((double *)v8, (double *)(v8 + 16), (double *)(v8 + 32), (unint64_t *)(v8 + 48));
        v38 = *(a2 - 2);
        v37 = a2 - 2;
        if (v38 < *(double *)(v8 + 48))
        {
          v39 = *v36;
          *v36 = *(_OWORD *)v37;
          *(_OWORD *)v37 = v39;
          if (*(double *)v36 < *(double *)v35)
          {
            v40 = *v35;
            *v35 = *v36;
            *v36 = v40;
            if (*(double *)v35 < *(double *)v34)
            {
              v41 = *v34;
              *v34 = *v35;
              *v35 = v41;
              if (*(double *)(v8 + 16) < *(double *)v8)
              {
                v86 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v34;
                *v34 = v86;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 383)
        {
          v42 = (double *)(v8 + 16);
          v44 = (double *)v8 == a2 || v42 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v44)
            {
              v45 = 0;
              v46 = v8;
              do
              {
                v47 = v42;
                v48 = *(double *)(v46 + 16);
                if (v48 < *(double *)v46)
                {
                  v49 = *(_QWORD *)(v46 + 24);
                  v50 = v45;
                  while (1)
                  {
                    *(_OWORD *)(v8 + v50 + 16) = *(_OWORD *)(v8 + v50);
                    if (!v50)
                      break;
                    v51 = *(double *)(v8 + v50 - 16);
                    v50 -= 16;
                    if (v48 >= v51)
                    {
                      v52 = v8 + v50 + 16;
                      goto LABEL_76;
                    }
                  }
                  v52 = v8;
LABEL_76:
                  *(double *)v52 = v48;
                  *(_QWORD *)(v52 + 8) = v49;
                }
                v42 = v47 + 2;
                v45 += 16;
                v46 = (unint64_t)v47;
              }
              while (v47 + 2 != a2);
            }
          }
          else if (!v44)
          {
            do
            {
              v77 = (uint64_t)v42;
              v78 = *(double *)(a1 + 16);
              if (v78 < *(double *)a1)
              {
                v79 = *(_QWORD *)(a1 + 24);
                v80 = v42;
                do
                {
                  *(_OWORD *)v80 = *((_OWORD *)v80 - 1);
                  v81 = *(v80 - 4);
                  v80 -= 2;
                }
                while (v78 < v81);
                *v80 = v78;
                *((_QWORD *)v80 + 1) = v79;
              }
              v42 += 2;
              a1 = v77;
            }
            while ((double *)(v77 + 16) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((double *)v8 != a2)
          {
            v53 = (v10 - 2) >> 1;
            v54 = v53;
            do
            {
              v55 = v54;
              if (v53 >= v54)
              {
                v56 = (2 * v54) | 1;
                v57 = (double *)(v8 + 16 * v56);
                if (2 * v55 + 2 < (uint64_t)v10 && *v57 < v57[2])
                {
                  v57 += 2;
                  v56 = 2 * v55 + 2;
                }
                v58 = (double *)(v8 + 16 * v55);
                v59 = *v58;
                if (*v57 >= *v58)
                {
                  v60 = *((_QWORD *)v58 + 1);
                  do
                  {
                    v61 = v58;
                    v58 = v57;
                    *(_OWORD *)v61 = *(_OWORD *)v57;
                    if (v53 < v56)
                      break;
                    v62 = 2 * v56;
                    v56 = (2 * v56) | 1;
                    v57 = (double *)(v8 + 16 * v56);
                    v63 = v62 + 2;
                    if (v63 < (uint64_t)v10 && *v57 < v57[2])
                    {
                      v57 += 2;
                      v56 = v63;
                    }
                  }
                  while (*v57 >= v59);
                  *v58 = v59;
                  *((_QWORD *)v58 + 1) = v60;
                }
              }
              v54 = v55 - 1;
            }
            while (v55);
            v64 = (unint64_t)v9 >> 4;
            do
            {
              v65 = 0;
              v87 = *(_OWORD *)v8;
              v66 = (double *)v8;
              do
              {
                v67 = v66;
                v66 += 2 * v65 + 2;
                v68 = 2 * v65;
                v65 = (2 * v65) | 1;
                v69 = v68 + 2;
                if (v69 < v64 && *v66 < v66[2])
                {
                  v66 += 2;
                  v65 = v69;
                }
                *(_OWORD *)v67 = *(_OWORD *)v66;
              }
              while (v65 <= (uint64_t)((unint64_t)(v64 - 2) >> 1));
              a2 -= 2;
              if (v66 == a2)
              {
                *(_OWORD *)v66 = v87;
              }
              else
              {
                *(_OWORD *)v66 = *(_OWORD *)a2;
                *(_OWORD *)a2 = v87;
                v70 = (uint64_t)v66 - v8 + 16;
                if (v70 >= 17)
                {
                  v71 = (((unint64_t)v70 >> 4) - 2) >> 1;
                  v72 = (double *)(v8 + 16 * v71);
                  v73 = *v66;
                  if (*v72 < *v66)
                  {
                    v74 = *((_QWORD *)v66 + 1);
                    do
                    {
                      v75 = v66;
                      v66 = v72;
                      *(_OWORD *)v75 = *(_OWORD *)v72;
                      if (!v71)
                        break;
                      v71 = (v71 - 1) >> 1;
                      v72 = (double *)(v8 + 16 * v71);
                    }
                    while (*v72 < v73);
                    *v66 = v73;
                    *((_QWORD *)v66 + 1) = v74;
                  }
                }
              }
            }
            while (v64-- > 2);
          }
          return;
        }
        v11 = v10 >> 1;
        v12 = (double *)(v8 + 16 * (v10 >> 1));
        if ((unint64_t)v9 < 0x801)
        {
          sub_1009EAD90((double *)(a1 + 16 * (v10 >> 1)), (double *)a1, a2 - 2);
        }
        else
        {
          sub_1009EAD90((double *)a1, (double *)(a1 + 16 * (v10 >> 1)), a2 - 2);
          sub_1009EAD90((double *)(a1 + 16), v12 - 2, a2 - 4);
          sub_1009EAD90((double *)(a1 + 32), (double *)(a1 + 16 + 16 * v11), a2 - 6);
          sub_1009EAD90(v12 - 2, v12, (double *)(a1 + 16 + 16 * v11));
          v82 = *(_OWORD *)a1;
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_OWORD *)v12 = v82;
        }
        --a3;
        v13 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 16) >= v13)
        {
          if (v13 >= *(a2 - 2))
          {
            v26 = a1 + 16;
            do
            {
              v8 = v26;
              if (v26 >= (unint64_t)a2)
                break;
              v26 += 16;
            }
            while (v13 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v25 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v25);
          }
          v27 = a2;
          if (v8 < (unint64_t)a2)
          {
            v27 = a2;
            do
            {
              v28 = *(v27 - 2);
              v27 -= 2;
            }
            while (v13 < v28);
          }
          v29 = *(_QWORD *)(a1 + 8);
          while (v8 < (unint64_t)v27)
          {
            v84 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v27;
            *(_OWORD *)v27 = v84;
            do
            {
              v30 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v13 >= v30);
            do
            {
              v31 = *(v27 - 2);
              v27 -= 2;
            }
            while (v13 < v31);
          }
          if (v8 - 16 != a1)
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
          a4 = 0;
          *(double *)(v8 - 16) = v13;
          *(_QWORD *)(v8 - 8) = v29;
          continue;
        }
        v14 = 0;
        v15 = *(_QWORD *)(a1 + 8);
        do
        {
          v16 = *(double *)(a1 + v14 + 16);
          v14 += 16;
        }
        while (v16 < v13);
        v17 = a1 + v14;
        v18 = a2;
        if (v14 == 16)
        {
          v18 = a2;
          do
          {
            if (v17 >= (unint64_t)v18)
              break;
            v20 = *(v18 - 2);
            v18 -= 2;
          }
          while (v20 >= v13);
        }
        else
        {
          do
          {
            v19 = *(v18 - 2);
            v18 -= 2;
          }
          while (v19 >= v13);
        }
        v8 = a1 + v14;
        if (v17 < (unint64_t)v18)
        {
          v21 = v18;
          do
          {
            v83 = *(_OWORD *)v8;
            *(_OWORD *)v8 = *(_OWORD *)v21;
            *(_OWORD *)v21 = v83;
            do
            {
              v22 = *(double *)(v8 + 16);
              v8 += 16;
            }
            while (v22 < v13);
            do
            {
              v23 = *(v21 - 2);
              v21 -= 2;
            }
            while (v23 >= v13);
          }
          while (v8 < (unint64_t)v21);
        }
        if (v8 - 16 != a1)
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 16);
        *(double *)(v8 - 16) = v13;
        *(_QWORD *)(v8 - 8) = v15;
        if (v17 < (unint64_t)v18)
        {
LABEL_29:
          sub_1009EA698(a1, v8 - 16, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v24 = sub_1009EAE34(a1, v8 - 16);
        if (!sub_1009EAE34(v8, (uint64_t)a2))
        {
          if (v24)
            continue;
          goto LABEL_29;
        }
        a2 = (double *)(v8 - 16);
        if (!v24)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 25;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = 0x8F5C28F5C28F5C29 * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 19);
        v43 = *(_QWORD *)(v10 + 48);
        if (v42 == v43)
        {
          v44 = *(a2 - 18);
          v45 = *(_QWORD *)(v10 + 56);
          v46 = v44 < v45;
          if (v44 == v45)
          {
            v47 = *(a2 - 17);
            v48 = *(_QWORD *)(v10 + 64);
            v46 = v47 < v48;
            if (v47 == v48)
              v46 = *((_OWORD *)a2 - 8) < *(_OWORD *)(v10 + 72);
          }
          if (!v46
            && (*(a2 - 16) != *(_QWORD *)(v10 + 72)
             || *(a2 - 17) != *(_QWORD *)(v10 + 64)
             || v44 != v45
             || *(a2 - 15) != *(_QWORD *)(v10 + 80)
             || !sub_100B88E88((uint64_t)(a2 - 25), v10, a3)))
          {
            return result;
          }
        }
        else if (v42 >= v43)
        {
          return result;
        }
        v59 = *(_OWORD *)v10;
        v65 = *(_OWORD *)(v10 + 48);
        v67 = *(_OWORD *)(v10 + 64);
        v61 = *(_OWORD *)(v10 + 16);
        v63 = *(_OWORD *)(v10 + 32);
        v73 = *(_OWORD *)(v10 + 112);
        v75 = *(_OWORD *)(v10 + 128);
        v69 = *(_OWORD *)(v10 + 80);
        v71 = *(_OWORD *)(v10 + 96);
        v83 = *(_QWORD *)(v10 + 192);
        v79 = *(_OWORD *)(v10 + 160);
        v81 = *(_OWORD *)(v10 + 176);
        v77 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)v10 = *v9;
        v49 = *(_OWORD *)(a2 - 23);
        v50 = *(_OWORD *)(a2 - 21);
        v51 = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v10 + 64) = v51;
        *(_OWORD *)(v10 + 16) = v49;
        *(_OWORD *)(v10 + 32) = v50;
        v52 = *(_OWORD *)(a2 - 15);
        v53 = *(_OWORD *)(a2 - 13);
        v54 = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v10 + 128) = v54;
        *(_OWORD *)(v10 + 80) = v52;
        *(_OWORD *)(v10 + 96) = v53;
        v55 = *(_OWORD *)(a2 - 7);
        v56 = *(_OWORD *)(a2 - 5);
        v57 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v10 + 192) = *(a2 - 1);
        *(_OWORD *)(v10 + 160) = v56;
        *(_OWORD *)(v10 + 176) = v57;
        *(_OWORD *)(v10 + 144) = v55;
        *(_OWORD *)(a2 - 5) = v79;
        *(_OWORD *)(a2 - 3) = v81;
        *(a2 - 1) = v83;
        *(_OWORD *)(a2 - 13) = v71;
        *(_OWORD *)(a2 - 11) = v73;
        *(_OWORD *)(a2 - 9) = v75;
        *(_OWORD *)(a2 - 7) = v77;
        *(_OWORD *)(a2 - 21) = v63;
        *(_OWORD *)(a2 - 19) = v65;
        *(_OWORD *)(a2 - 17) = v67;
        *(_OWORD *)(a2 - 15) = v69;
        result = *(double *)&v61;
        *v9 = v59;
        *(_OWORD *)(a2 - 23) = v61;
        return result;
      case 3uLL:
        sub_100B8777C(v10, v10 + 200, (uint64_t)(a2 - 25));
        return result;
      case 4uLL:
        *(_QWORD *)&result = sub_100B89250(v10, v10 + 200, v10 + 400, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = sub_100B89688(v10, v10 + 200, v10 + 400, v10 + 600, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      default:
        if (v13 <= 4799)
        {
          if ((a5 & 1) == 0)
            return sub_100B874E4(v10, (uint64_t)a2, a3);
          sub_100B871F4(v10, (uint64_t)a2, a3);
          return result;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = v10 + 200 * (v14 >> 1);
          if ((unint64_t)v13 < 0x6401)
          {
            sub_100B8777C(v16, v10, (uint64_t)(a2 - 25));
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            sub_100B8777C(v10, v16, (uint64_t)(a2 - 25));
            v17 = 200 * v15;
            v18 = 200 * v15 + v10 - 200;
            sub_100B8777C(v10 + 200, v17 + v10 - 200, (uint64_t)(a2 - 50));
            v19 = v10 + 400;
            v20 = v10 + 200 + v17;
            sub_100B8777C(v19, v20, (uint64_t)(a2 - 75));
            sub_100B8777C(v18, v16, v20);
            v58 = *(_OWORD *)a1;
            v64 = *(_OWORD *)(a1 + 48);
            v66 = *(_OWORD *)(a1 + 64);
            v60 = *(_OWORD *)(a1 + 16);
            v62 = *(_OWORD *)(a1 + 32);
            v72 = *(_OWORD *)(a1 + 112);
            v74 = *(_OWORD *)(a1 + 128);
            v68 = *(_OWORD *)(a1 + 80);
            v70 = *(_OWORD *)(a1 + 96);
            v82 = *(_QWORD *)(a1 + 192);
            v78 = *(_OWORD *)(a1 + 160);
            v80 = *(_OWORD *)(a1 + 176);
            v76 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            v22 = *(_OWORD *)(v16 + 16);
            v23 = *(_OWORD *)(v16 + 32);
            v24 = *(_OWORD *)(v16 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            v25 = *(_OWORD *)(v16 + 80);
            v26 = *(_OWORD *)(v16 + 96);
            v27 = *(_OWORD *)(v16 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v16 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v25;
            *(_OWORD *)(a1 + 96) = v26;
            v28 = *(_OWORD *)(v16 + 144);
            v29 = *(_OWORD *)(v16 + 160);
            v30 = *(_OWORD *)(v16 + 176);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(v16 + 192);
            *(_OWORD *)(a1 + 160) = v29;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v28;
            *(_OWORD *)v16 = v58;
            *(_OWORD *)(v16 + 48) = v64;
            *(_OWORD *)(v16 + 64) = v66;
            *(_OWORD *)(v16 + 16) = v60;
            *(_OWORD *)(v16 + 32) = v62;
            *(_OWORD *)(v16 + 112) = v72;
            *(_OWORD *)(v16 + 128) = v74;
            *(_OWORD *)(v16 + 80) = v68;
            *(_OWORD *)(v16 + 96) = v70;
            *(_QWORD *)(v16 + 192) = v82;
            *(_OWORD *)(v16 + 160) = v78;
            *(_OWORD *)(v16 + 176) = v80;
            *(_OWORD *)(v16 + 144) = v76;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v31 = *(_QWORD *)(a1 - 152);
          v32 = *(_QWORD *)(a1 + 48);
          if (v31 == v32)
          {
            v33 = *(_QWORD *)(a1 - 144);
            v34 = *(_QWORD *)(a1 + 56);
            v35 = v33 < v34;
            if (v33 == v34)
            {
              v36 = *(_QWORD *)(a1 - 136);
              v37 = *(_QWORD *)(a1 + 64);
              v35 = v36 < v37;
              if (v36 == v37)
                v35 = *(_OWORD *)(a1 - 128) < *(_OWORD *)(a1 + 72);
            }
            if (!v35
              && (*(_QWORD *)(a1 - 128) != *(_QWORD *)(a1 + 72)
               || *(_QWORD *)(a1 - 136) != *(_QWORD *)(a1 + 64)
               || v33 != v34
               || *(_QWORD *)(a1 - 120) != *(_QWORD *)(a1 + 80)
               || (sub_100B88E88(a1 - 200, a1, v21) & 1) == 0))
            {
LABEL_26:
              v10 = sub_100B87E60((__int128 *)a1, (unint64_t)a2, a3);
              goto LABEL_27;
            }
          }
          else if (v31 >= v32)
          {
            goto LABEL_26;
          }
LABEL_22:
          v38 = sub_100B88424((__int128 *)a1, a2, a3);
          if ((v39 & 1) == 0)
            goto LABEL_25;
          v40 = sub_100B88970(a1, v38, a3);
          v10 = v38 + 200;
          if (!sub_100B88970(v38 + 200, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v40)
              continue;
LABEL_25:
            sub_100B86C08(a1, v38, a3, -v12, a5 & 1);
            v10 = v38 + 200;
LABEL_27:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (_QWORD *)v38;
          if (v40)
            return result;
          goto LABEL_1;
        }
        if ((_QWORD *)v10 != a2)
          sub_100B89C14(v10, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

  v9 = a2 - 25;
  v10 = a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = v10;
    v12 = v11;
    v13 = (uint64_t)a2 - v10;
    v14 = 0x8F5C28F5C28F5C29 * ((uint64_t)((uint64_t)a2 - v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v42 = *(a2 - 9);
        v43 = *(_QWORD *)(v10 + 128);
        if (v42 == v43)
        {
          v44 = *(a2 - 8);
          v45 = *(_QWORD *)(v10 + 136);
          v46 = v44 < v45;
          if (v44 == v45)
          {
            v47 = *(a2 - 7);
            v48 = *(_QWORD *)(v10 + 144);
            v46 = v47 < v48;
            if (v47 == v48)
              v46 = *((_OWORD *)a2 - 3) < *(_OWORD *)(v10 + 152);
          }
          if (!v46
            && (*(a2 - 6) != *(_QWORD *)(v10 + 152)
             || *(a2 - 7) != *(_QWORD *)(v10 + 144)
             || v44 != v45
             || *(a2 - 5) != *(_QWORD *)(v10 + 160)
             || !sub_100B8D030((uint64_t)(a2 - 25), v10, a3)))
          {
            return result;
          }
        }
        else if (v42 >= v43)
        {
          return result;
        }
        v59 = *(_OWORD *)v10;
        v65 = *(_OWORD *)(v10 + 48);
        v67 = *(_OWORD *)(v10 + 64);
        v61 = *(_OWORD *)(v10 + 16);
        v63 = *(_OWORD *)(v10 + 32);
        v73 = *(_OWORD *)(v10 + 112);
        v75 = *(_OWORD *)(v10 + 128);
        v69 = *(_OWORD *)(v10 + 80);
        v71 = *(_OWORD *)(v10 + 96);
        v83 = *(_QWORD *)(v10 + 192);
        v79 = *(_OWORD *)(v10 + 160);
        v81 = *(_OWORD *)(v10 + 176);
        v77 = *(_OWORD *)(v10 + 144);
        *(_OWORD *)v10 = *v9;
        v49 = *(_OWORD *)(a2 - 23);
        v50 = *(_OWORD *)(a2 - 21);
        v51 = *(_OWORD *)(a2 - 17);
        *(_OWORD *)(v10 + 48) = *(_OWORD *)(a2 - 19);
        *(_OWORD *)(v10 + 64) = v51;
        *(_OWORD *)(v10 + 16) = v49;
        *(_OWORD *)(v10 + 32) = v50;
        v52 = *(_OWORD *)(a2 - 15);
        v53 = *(_OWORD *)(a2 - 13);
        v54 = *(_OWORD *)(a2 - 9);
        *(_OWORD *)(v10 + 112) = *(_OWORD *)(a2 - 11);
        *(_OWORD *)(v10 + 128) = v54;
        *(_OWORD *)(v10 + 80) = v52;
        *(_OWORD *)(v10 + 96) = v53;
        v55 = *(_OWORD *)(a2 - 7);
        v56 = *(_OWORD *)(a2 - 5);
        v57 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(v10 + 192) = *(a2 - 1);
        *(_OWORD *)(v10 + 160) = v56;
        *(_OWORD *)(v10 + 176) = v57;
        *(_OWORD *)(v10 + 144) = v55;
        *(_OWORD *)(a2 - 5) = v79;
        *(_OWORD *)(a2 - 3) = v81;
        *(a2 - 1) = v83;
        *(_OWORD *)(a2 - 13) = v71;
        *(_OWORD *)(a2 - 11) = v73;
        *(_OWORD *)(a2 - 9) = v75;
        *(_OWORD *)(a2 - 7) = v77;
        *(_OWORD *)(a2 - 21) = v63;
        *(_OWORD *)(a2 - 19) = v65;
        *(_OWORD *)(a2 - 17) = v67;
        *(_OWORD *)(a2 - 15) = v69;
        result = *(double *)&v61;
        *v9 = v59;
        *(_OWORD *)(a2 - 23) = v61;
        return result;
      case 3uLL:
        sub_100B8B924(v10, v10 + 200, (uint64_t)(a2 - 25));
        return result;
      case 4uLL:
        *(_QWORD *)&result = sub_100B8D3F8(v10, v10 + 200, v10 + 400, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      case 5uLL:
        *(_QWORD *)&result = sub_100B8D830(v10, v10 + 200, v10 + 400, v10 + 600, (uint64_t)(a2 - 25)).n128_u64[0];
        return result;
      default:
        if (v13 <= 4799)
        {
          if ((a5 & 1) == 0)
            return sub_100B8B6A4(v10, (uint64_t)a2, a3);
          sub_100B8B3B4(v10, (uint64_t)a2, a3);
          return result;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = v10 + 200 * (v14 >> 1);
          if ((unint64_t)v13 < 0x6401)
          {
            sub_100B8B924(v16, v10, (uint64_t)(a2 - 25));
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          else
          {
            sub_100B8B924(v10, v16, (uint64_t)(a2 - 25));
            v17 = 200 * v15;
            v18 = 200 * v15 + v10 - 200;
            sub_100B8B924(v10 + 200, v17 + v10 - 200, (uint64_t)(a2 - 50));
            v19 = v10 + 400;
            v20 = v10 + 200 + v17;
            sub_100B8B924(v19, v20, (uint64_t)(a2 - 75));
            sub_100B8B924(v18, v16, v20);
            v58 = *(_OWORD *)a1;
            v64 = *(_OWORD *)(a1 + 48);
            v66 = *(_OWORD *)(a1 + 64);
            v60 = *(_OWORD *)(a1 + 16);
            v62 = *(_OWORD *)(a1 + 32);
            v72 = *(_OWORD *)(a1 + 112);
            v74 = *(_OWORD *)(a1 + 128);
            v68 = *(_OWORD *)(a1 + 80);
            v70 = *(_OWORD *)(a1 + 96);
            v82 = *(_QWORD *)(a1 + 192);
            v78 = *(_OWORD *)(a1 + 160);
            v80 = *(_OWORD *)(a1 + 176);
            v76 = *(_OWORD *)(a1 + 144);
            *(_OWORD *)a1 = *(_OWORD *)v16;
            v22 = *(_OWORD *)(v16 + 16);
            v23 = *(_OWORD *)(v16 + 32);
            v24 = *(_OWORD *)(v16 + 64);
            *(_OWORD *)(a1 + 48) = *(_OWORD *)(v16 + 48);
            *(_OWORD *)(a1 + 64) = v24;
            *(_OWORD *)(a1 + 16) = v22;
            *(_OWORD *)(a1 + 32) = v23;
            v25 = *(_OWORD *)(v16 + 80);
            v26 = *(_OWORD *)(v16 + 96);
            v27 = *(_OWORD *)(v16 + 128);
            *(_OWORD *)(a1 + 112) = *(_OWORD *)(v16 + 112);
            *(_OWORD *)(a1 + 128) = v27;
            *(_OWORD *)(a1 + 80) = v25;
            *(_OWORD *)(a1 + 96) = v26;
            v28 = *(_OWORD *)(v16 + 144);
            v29 = *(_OWORD *)(v16 + 160);
            v30 = *(_OWORD *)(v16 + 176);
            *(_QWORD *)(a1 + 192) = *(_QWORD *)(v16 + 192);
            *(_OWORD *)(a1 + 160) = v29;
            *(_OWORD *)(a1 + 176) = v30;
            *(_OWORD *)(a1 + 144) = v28;
            *(_OWORD *)v16 = v58;
            *(_OWORD *)(v16 + 48) = v64;
            *(_OWORD *)(v16 + 64) = v66;
            *(_OWORD *)(v16 + 16) = v60;
            *(_OWORD *)(v16 + 32) = v62;
            *(_OWORD *)(v16 + 112) = v72;
            *(_OWORD *)(v16 + 128) = v74;
            *(_OWORD *)(v16 + 80) = v68;
            *(_OWORD *)(v16 + 96) = v70;
            *(_QWORD *)(v16 + 192) = v82;
            *(_OWORD *)(v16 + 160) = v78;
            *(_OWORD *)(v16 + 176) = v80;
            *(_OWORD *)(v16 + 144) = v76;
            if ((a5 & 1) != 0)
              goto LABEL_22;
          }
          v31 = *(_QWORD *)(a1 - 72);
          v32 = *(_QWORD *)(a1 + 128);
          if (v31 == v32)
          {
            v33 = *(_QWORD *)(a1 - 64);
            v34 = *(_QWORD *)(a1 + 136);
            v35 = v33 < v34;
            if (v33 == v34)
            {
              v36 = *(_QWORD *)(a1 - 56);
              v37 = *(_QWORD *)(a1 + 144);
              v35 = v36 < v37;
              if (v36 == v37)
                v35 = *(_OWORD *)(a1 - 48) < *(_OWORD *)(a1 + 152);
            }
            if (!v35
              && (*(_QWORD *)(a1 - 48) != *(_QWORD *)(a1 + 152)
               || *(_QWORD *)(a1 - 56) != *(_QWORD *)(a1 + 144)
               || v33 != v34
               || *(_QWORD *)(a1 - 40) != *(_QWORD *)(a1 + 160)
               || (sub_100B8D030(a1 - 200, a1, v21) & 1) == 0))
            {
LABEL_26:
              v10 = sub_100B8C008((__int128 *)a1, (unint64_t)a2, a3);
              goto LABEL_27;
            }
          }
          else if (v31 >= v32)
          {
            goto LABEL_26;
          }
LABEL_22:
          v38 = sub_100B8C5CC((__int128 *)a1, a2, a3);
          if ((v39 & 1) == 0)
            goto LABEL_25;
          v40 = sub_100B8CB18(a1, v38, a3);
          v10 = v38 + 200;
          if (!sub_100B8CB18(v38 + 200, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v40)
              continue;
LABEL_25:
            sub_100B8ADC8(a1, v38, a3, -v12, a5 & 1);
            v10 = v38 + 200;
LABEL_27:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (_QWORD *)v38;
          if (v40)
            return result;
          goto LABEL_1;
        }
        if ((_QWORD *)v10 != a2)
          sub_100B8DDBC(v10, (uint64_t)a2, (uint64_t)a2, a3);
        return result;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 32) < *(double *)(v8 + 8))
        {
          v145 = *(_QWORD *)(v8 + 32);
          v126 = *(_OWORD *)v8;
          v135 = *(_OWORD *)(v8 + 16);
          v50 = *(_OWORD *)(a2 - 40);
          v51 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 32) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v50;
          *(_OWORD *)(v8 + 16) = v51;
          *(_QWORD *)(a2 - 8) = v145;
          *(_OWORD *)(a2 - 24) = v135;
          *(_OWORD *)(a2 - 40) = v126;
        }
        return;
      case 3:
        sub_100C30878((__int128 *)v8, (double *)(v8 + 40), (double *)(a2 - 40));
        return;
      case 4:
        sub_100C30C14(v8, v8 + 40, v8 + 80, a2 - 40);
        return;
      case 5:
        v52 = (__int128 *)(v8 + 40);
        v53 = (__int128 *)(v8 + 80);
        v54 = (__int128 *)(v8 + 120);
        sub_100C30C14(v8, v8 + 40, v8 + 80, v8 + 120);
        if (*(double *)(a2 - 32) < *(double *)(v8 + 128))
        {
          v55 = *v54;
          v136 = *(_OWORD *)(v8 + 136);
          v56 = *(_QWORD *)(v8 + 152);
          v57 = *(_OWORD *)(a2 - 24);
          v58 = *(_OWORD *)(a2 - 40);
          *(_QWORD *)(v8 + 152) = *(_QWORD *)(a2 - 8);
          *v54 = v58;
          *(_OWORD *)(v8 + 136) = v57;
          *(_OWORD *)(a2 - 24) = v136;
          *(_QWORD *)(a2 - 8) = v56;
          *(_OWORD *)(a2 - 40) = v55;
          if (*(double *)(v8 + 128) < *(double *)(v8 + 88))
          {
            v59 = *(_QWORD *)(v8 + 112);
            v61 = *v53;
            v60 = *(_OWORD *)(v8 + 96);
            v62 = *(_OWORD *)(v8 + 136);
            *v53 = *v54;
            *(_OWORD *)(v8 + 96) = v62;
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 152);
            *v54 = v61;
            *(_OWORD *)(v8 + 136) = v60;
            *(_QWORD *)(v8 + 152) = v59;
            if (*(double *)(v8 + 88) < *(double *)(v8 + 48))
            {
              v63 = *(_QWORD *)(v8 + 72);
              v65 = *v52;
              v64 = *(_OWORD *)(v8 + 56);
              v66 = *(_OWORD *)(v8 + 96);
              *v52 = *v53;
              *(_OWORD *)(v8 + 56) = v66;
              *(_QWORD *)(v8 + 72) = *(_QWORD *)(v8 + 112);
              *v53 = v65;
              *(_OWORD *)(v8 + 96) = v64;
              *(_QWORD *)(v8 + 112) = v63;
              if (*(double *)(v8 + 48) < *(double *)(v8 + 8))
              {
                v146 = *(_QWORD *)(v8 + 32);
                v127 = *(_OWORD *)v8;
                v137 = *(_OWORD *)(v8 + 16);
                v67 = *(_OWORD *)(v8 + 56);
                *(_OWORD *)v8 = *v52;
                *(_OWORD *)(v8 + 16) = v67;
                *(_QWORD *)(v8 + 32) = *(_QWORD *)(v8 + 72);
                *v52 = v127;
                *(_OWORD *)(v8 + 56) = v137;
                *(_QWORD *)(v8 + 72) = v146;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 959)
        {
          v68 = v8 + 40;
          v70 = v8 == a2 || v68 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v70)
            {
              v71 = 0;
              v72 = v8;
              do
              {
                v73 = v68;
                v74 = *(double *)(v72 + 48);
                if (v74 < *(double *)(v72 + 8))
                {
                  v75 = *(_QWORD *)v68;
                  v128 = *(_OWORD *)(v72 + 56);
                  v138 = *(_QWORD *)(v72 + 72);
                  v76 = v71;
                  while (1)
                  {
                    v77 = v8 + v76;
                    v78 = *(_OWORD *)(v8 + v76 + 16);
                    *(_OWORD *)(v77 + 40) = *(_OWORD *)(v8 + v76);
                    *(_OWORD *)(v77 + 56) = v78;
                    *(_QWORD *)(v77 + 72) = *(_QWORD *)(v8 + v76 + 32);
                    if (!v76)
                      break;
                    v76 -= 40;
                    if (v74 >= *(double *)(v77 - 32))
                    {
                      v79 = v8 + v76 + 40;
                      goto LABEL_78;
                    }
                  }
                  v79 = v8;
LABEL_78:
                  *(_QWORD *)v79 = v75;
                  *(double *)(v79 + 8) = v74;
                  *(_OWORD *)(v79 + 16) = v128;
                  *(_QWORD *)(v79 + 32) = v138;
                }
                v68 = v73 + 40;
                v71 += 40;
                v72 = v73;
              }
              while (v73 + 40 != a2);
            }
          }
          else if (!v70)
          {
            do
            {
              v112 = v68;
              v113 = *(double *)(a1 + 48);
              if (v113 < *(double *)(a1 + 8))
              {
                v114 = *(_QWORD *)v68;
                v131 = *(_OWORD *)(a1 + 56);
                v141 = *(_QWORD *)(a1 + 72);
                do
                {
                  v115 = *(_OWORD *)(v68 - 24);
                  *(_OWORD *)v68 = *(_OWORD *)(v68 - 40);
                  *(_OWORD *)(v68 + 16) = v115;
                  *(_QWORD *)(v68 + 32) = *(_QWORD *)(v68 - 8);
                  v116 = *(double *)(v68 - 72);
                  v68 -= 40;
                }
                while (v113 < v116);
                *(_QWORD *)v68 = v114;
                *(double *)(v68 + 8) = v113;
                *(_QWORD *)(v68 + 32) = v141;
                *(_OWORD *)(v68 + 16) = v131;
              }
              v68 = v112 + 40;
              a1 = v112;
            }
            while (v112 + 40 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v80 = (unint64_t)(v10 - 2) >> 1;
            v81 = v80;
            do
            {
              v82 = v81;
              if (v80 >= v81)
              {
                v83 = (2 * v81) | 1;
                v84 = v8 + 40 * v83;
                if (2 * v82 + 2 < v10 && *(double *)(v8 + 40 * v83 + 8) < *(double *)(v84 + 48))
                {
                  v84 += 40;
                  v83 = 2 * v82 + 2;
                }
                v85 = *(double *)(v8 + 40 * v82 + 8);
                if (*(double *)(v84 + 8) >= v85)
                {
                  v86 = v8 + 40 * v82;
                  v87 = *(_QWORD *)v86;
                  v139 = *(_QWORD *)(v86 + 32);
                  v129 = *(_OWORD *)(v86 + 16);
                  do
                  {
                    v88 = v86;
                    v86 = v84;
                    v89 = *(_OWORD *)v84;
                    v90 = *(_OWORD *)(v84 + 16);
                    *(_QWORD *)(v88 + 32) = *(_QWORD *)(v84 + 32);
                    *(_OWORD *)v88 = v89;
                    *(_OWORD *)(v88 + 16) = v90;
                    if (v80 < v83)
                      break;
                    v91 = (2 * v83) | 1;
                    v84 = v8 + 40 * v91;
                    v92 = 2 * v83 + 2;
                    if (v92 < v10 && *(double *)(v8 + 40 * v91 + 8) < *(double *)(v84 + 48))
                    {
                      v84 += 40;
                      v91 = v92;
                    }
                    v83 = v91;
                  }
                  while (*(double *)(v84 + 8) >= v85);
                  *(_QWORD *)v86 = v87;
                  *(double *)(v86 + 8) = v85;
                  *(_OWORD *)(v86 + 16) = v129;
                  *(_QWORD *)(v86 + 32) = v139;
                }
              }
              v81 = v82 - 1;
            }
            while (v82);
            v93 = v9 / 0x28uLL;
            do
            {
              v94 = 0;
              v147 = *(_QWORD *)(v8 + 32);
              v130 = *(_OWORD *)v8;
              v140 = *(_OWORD *)(v8 + 16);
              v95 = v8;
              do
              {
                v96 = v95;
                v97 = v94 + 1;
                v95 += 40 * (v94 + 1);
                v98 = 2 * v94;
                v94 = (2 * v94) | 1;
                v99 = v98 + 2;
                if (v99 < v93 && *(double *)(v96 + 40 * v97 + 8) < *(double *)(v95 + 48))
                {
                  v95 += 40;
                  v94 = v99;
                }
                v100 = *(_OWORD *)v95;
                v101 = *(_OWORD *)(v95 + 16);
                *(_QWORD *)(v96 + 32) = *(_QWORD *)(v95 + 32);
                *(_OWORD *)v96 = v100;
                *(_OWORD *)(v96 + 16) = v101;
              }
              while (v94 <= (uint64_t)((unint64_t)(v93 - 2) >> 1));
              a2 -= 40;
              if (v95 == a2)
              {
                *(_QWORD *)(v95 + 32) = v147;
                *(_OWORD *)v95 = v130;
                *(_OWORD *)(v95 + 16) = v140;
              }
              else
              {
                v102 = *(_OWORD *)a2;
                v103 = *(_OWORD *)(a2 + 16);
                *(_QWORD *)(v95 + 32) = *(_QWORD *)(a2 + 32);
                *(_OWORD *)v95 = v102;
                *(_OWORD *)(v95 + 16) = v103;
                *(_QWORD *)(a2 + 32) = v147;
                *(_OWORD *)a2 = v130;
                *(_OWORD *)(a2 + 16) = v140;
                v104 = v95 - v8 + 40;
                if (v104 >= 41)
                {
                  v105 = (v104 / 0x28uLL - 2) >> 1;
                  v106 = *(double *)(v95 + 8);
                  if (*(double *)(v8 + 40 * v105 + 8) < v106)
                  {
                    v107 = *(_QWORD *)v95;
                    v122 = *(_QWORD *)(v95 + 32);
                    v119 = *(_OWORD *)(v95 + 16);
                    do
                    {
                      v108 = v95;
                      v95 = v8 + 40 * v105;
                      v109 = *(_OWORD *)v95;
                      v110 = *(_OWORD *)(v95 + 16);
                      *(_QWORD *)(v108 + 32) = *(_QWORD *)(v95 + 32);
                      *(_OWORD *)v108 = v109;
                      *(_OWORD *)(v108 + 16) = v110;
                      if (!v105)
                        break;
                      v105 = (v105 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 40 * v105 + 8) < v106);
                    *(_QWORD *)v95 = v107;
                    *(double *)(v95 + 8) = v106;
                    *(_QWORD *)(v95 + 32) = v122;
                    *(_OWORD *)(v95 + 16) = v119;
                  }
                }
              }
            }
            while (v93-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 40 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x1401)
        {
          sub_100C30878((__int128 *)v12, (double *)a1, (double *)(a2 - 40));
        }
        else
        {
          sub_100C30878((__int128 *)a1, (double *)v12, (double *)(a2 - 40));
          v13 = 5 * v11;
          v14 = (double *)(a1 + 40 * v11 - 40);
          sub_100C30878((__int128 *)(a1 + 40), v14, (double *)(a2 - 80));
          v15 = (double *)(a1 + 40 + 8 * v13);
          sub_100C30878((__int128 *)(a1 + 80), v15, (double *)(a2 - 120));
          sub_100C30878((__int128 *)v14, (double *)v12, v15);
          v142 = *(_QWORD *)(a1 + 32);
          v123 = *(_OWORD *)a1;
          v132 = *(_OWORD *)(a1 + 16);
          v16 = *(_OWORD *)v12;
          v17 = *(_OWORD *)(v12 + 16);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v12 + 32);
          *(_OWORD *)a1 = v16;
          *(_OWORD *)(a1 + 16) = v17;
          *(_QWORD *)(v12 + 32) = v142;
          *(_OWORD *)v12 = v123;
          *(_OWORD *)(v12 + 16) = v132;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v18 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 32) < v18)
            goto LABEL_11;
          v36 = *(double *)a1;
          v118 = *(_OWORD *)(a1 + 16);
          v121 = *(_QWORD *)(a1 + 32);
          if (v18 >= *(double *)(a2 - 32))
          {
            v39 = a1 + 40;
            do
            {
              v8 = v39;
              if (v39 >= a2)
                break;
              v40 = *(double *)(v39 + 8);
              v39 += 40;
            }
            while (v18 >= v40);
          }
          else
          {
            v37 = a1;
            do
            {
              v8 = v37 + 40;
              v38 = *(double *)(v37 + 48);
              v37 += 40;
            }
            while (v18 >= v38);
          }
          v41 = a2;
          if (v8 < a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 40;
              v43 = *(double *)(v42 - 32);
              v42 -= 40;
            }
            while (v18 < v43);
          }
          while (v8 < v41)
          {
            v144 = *(_QWORD *)(v8 + 32);
            v125 = *(_OWORD *)v8;
            v134 = *(_OWORD *)(v8 + 16);
            v44 = *(_OWORD *)v41;
            v45 = *(_OWORD *)(v41 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v41 + 32);
            *(_OWORD *)v8 = v44;
            *(_OWORD *)(v8 + 16) = v45;
            *(_QWORD *)(v41 + 32) = v144;
            *(_OWORD *)v41 = v125;
            *(_OWORD *)(v41 + 16) = v134;
            do
            {
              v46 = *(double *)(v8 + 48);
              v8 += 40;
            }
            while (v18 >= v46);
            do
            {
              v47 = *(double *)(v41 - 32);
              v41 -= 40;
            }
            while (v18 < v47);
          }
          if (v8 - 40 != a1)
          {
            v48 = *(_OWORD *)(v8 - 40);
            v49 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v48;
            *(_OWORD *)(a1 + 16) = v49;
          }
          a4 = 0;
          *(double *)(v8 - 40) = v36;
          *(double *)(v8 - 32) = v18;
          *(_QWORD *)(v8 - 8) = v121;
          *(_OWORD *)(v8 - 24) = v118;
          continue;
        }
        v18 = *(double *)(a1 + 8);
LABEL_11:
        v19 = 0;
        v20 = *(double *)a1;
        v117 = *(_OWORD *)(a1 + 16);
        v120 = *(_QWORD *)(a1 + 32);
        do
        {
          v21 = *(double *)(a1 + v19 + 48);
          v19 += 40;
        }
        while (v21 < v18);
        v22 = a1 + v19;
        v23 = a2;
        if (v19 == 40)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 40;
            v27 = *(double *)(v26 - 32);
            v26 -= 40;
            if (v27 < v18)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 40;
            v25 = *(double *)(v23 - 32);
            v23 -= 40;
          }
          while (v25 >= v18);
        }
LABEL_21:
        v8 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v143 = *(_QWORD *)(v8 + 32);
            v124 = *(_OWORD *)v8;
            v133 = *(_OWORD *)(v8 + 16);
            v29 = *(_OWORD *)v28;
            v30 = *(_OWORD *)(v28 + 16);
            *(_QWORD *)(v8 + 32) = *(_QWORD *)(v28 + 32);
            *(_OWORD *)v8 = v29;
            *(_OWORD *)(v8 + 16) = v30;
            *(_QWORD *)(v28 + 32) = v143;
            *(_OWORD *)v28 = v124;
            *(_OWORD *)(v28 + 16) = v133;
            do
            {
              v31 = *(double *)(v8 + 48);
              v8 += 40;
            }
            while (v31 < v18);
            do
            {
              v32 = *(double *)(v28 - 32);
              v28 -= 40;
            }
            while (v32 >= v18);
          }
          while (v8 < v28);
        }
        if (v8 - 40 != a1)
        {
          v33 = *(_OWORD *)(v8 - 40);
          v34 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v33;
          *(_OWORD *)(a1 + 16) = v34;
        }
        *(double *)(v8 - 40) = v20;
        *(double *)(v8 - 32) = v18;
        *(_QWORD *)(v8 - 8) = v120;
        *(_OWORD *)(v8 - 24) = v117;
        if (v22 < v24)
        {
LABEL_32:
          sub_100C2FF0C(a1, v8 - 40, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v35 = sub_100C30968(a1, v8 - 40);
        if (!sub_100C30968(v8, a2))
        {
          if (v35)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 40;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(double *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(double *)v8)
        {
          *(_QWORD *)&v96[16] = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v96 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 13) = *(_QWORD *)(v38 + 13);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 13) = *(_QWORD *)&v96[13];
          *(_OWORD *)v38 = *(_OWORD *)v96;
        }
        return;
      case 3:
        sub_100C315A8((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_100C3198C(v8, v8 + 24, v8 + 48, (unint64_t *)(a2 - 24));
        return;
      case 5:
        v41 = (_OWORD *)(v8 + 24);
        v42 = (_OWORD *)(v8 + 48);
        v43 = (_OWORD *)(v8 + 72);
        sub_100C3198C(v8, v8 + 24, v8 + 48, (unint64_t *)(v8 + 72));
        v45 = *(double *)(a2 - 24);
        v44 = a2 - 24;
        if (v45 < *(double *)(v8 + 72))
        {
          *(_OWORD *)v97 = *v43;
          v46 = *v43;
          *(_QWORD *)&v97[16] = *(_QWORD *)(v8 + 88);
          v47 = *(_QWORD *)(v44 + 13);
          *v43 = *(_OWORD *)v44;
          *(_QWORD *)(v8 + 85) = v47;
          *(_QWORD *)(v44 + 13) = *(_QWORD *)&v97[13];
          *(_OWORD *)v44 = v46;
          if (*(double *)v43 < *(double *)v42)
          {
            *(_OWORD *)v98 = *v42;
            v48 = *v42;
            *(_QWORD *)&v98[16] = *(_QWORD *)(v8 + 64);
            *v42 = *v43;
            *(_QWORD *)(v8 + 61) = *(_QWORD *)(v8 + 85);
            *v43 = v48;
            *(_QWORD *)(v8 + 85) = *(_QWORD *)&v98[13];
            if (*(double *)v42 < *(double *)v41)
            {
              *(_OWORD *)v99 = *v41;
              v49 = *v41;
              *(_QWORD *)&v99[16] = *(_QWORD *)(v8 + 40);
              *v41 = *v42;
              *(_QWORD *)(v8 + 37) = *(_QWORD *)(v8 + 61);
              *v42 = v49;
              *(_QWORD *)(v8 + 61) = *(_QWORD *)&v99[13];
              if (*(double *)(v8 + 24) < *(double *)v8)
              {
                *(_QWORD *)&v100[16] = *(_QWORD *)(v8 + 16);
                *(_OWORD *)v100 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v41;
                *(_QWORD *)(v8 + 13) = *(_QWORD *)(v8 + 37);
                *v41 = *(_OWORD *)v100;
                *(_QWORD *)(v8 + 37) = *(_QWORD *)&v100[13];
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v50 = v8 + 24;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v55 = v50;
                v56 = *(double *)(v54 + 24);
                if (v56 < *(double *)v54)
                {
                  v101 = *(_OWORD *)(v54 + 32);
                  v57 = v53;
                  while (1)
                  {
                    v58 = v8 + v57;
                    *(_OWORD *)(v58 + 24) = *(_OWORD *)(v8 + v57);
                    *(_QWORD *)(v58 + 37) = *(_QWORD *)(v8 + v57 + 13);
                    if (!v57)
                      break;
                    v57 -= 24;
                    if (v56 >= *(double *)(v58 - 24))
                    {
                      v59 = v8 + v57 + 24;
                      goto LABEL_75;
                    }
                  }
                  v59 = v8;
LABEL_75:
                  *(double *)v59 = v56;
                  *(_QWORD *)(v59 + 8) = v101;
                  *(_QWORD *)(v59 + 13) = *(_QWORD *)((char *)&v101 + 5);
                }
                v50 = v55 + 24;
                v53 += 24;
                v54 = v55;
              }
              while (v55 + 24 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v86 = v50;
              v87 = *(double *)(a1 + 24);
              if (v87 < *(double *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                v88 = v50;
                do
                {
                  *(_OWORD *)v88 = *(_OWORD *)(v88 - 24);
                  *(_QWORD *)(v88 + 13) = *(_QWORD *)(v88 - 11);
                  v89 = *(double *)(v88 - 48);
                  v88 -= 24;
                }
                while (v87 < v89);
                *(double *)v88 = v87;
                *(_QWORD *)(v88 + 13) = *(_QWORD *)((char *)&v104 + 5);
                *(_QWORD *)(v88 + 8) = v104;
              }
              v50 += 24;
              a1 = v86;
            }
            while (v86 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = v8 + 24 * v63;
                if (2 * v62 + 2 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                {
                  v64 += 24;
                  v63 = 2 * v62 + 2;
                }
                v65 = v8 + 24 * v62;
                v66 = *(double *)v65;
                if (*(double *)v64 >= *(double *)v65)
                {
                  v102 = *(_OWORD *)(v65 + 8);
                  do
                  {
                    v67 = v65;
                    v65 = v64;
                    v68 = *(_OWORD *)v64;
                    *(_QWORD *)(v67 + 13) = *(_QWORD *)(v64 + 13);
                    *(_OWORD *)v67 = v68;
                    if (v60 < v63)
                      break;
                    v69 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = v8 + 24 * v63;
                    v70 = v69 + 2;
                    if (v70 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                    {
                      v64 += 24;
                      v63 = v70;
                    }
                  }
                  while (*(double *)v64 >= v66);
                  *(double *)v65 = v66;
                  *(_QWORD *)(v65 + 8) = v102;
                  *(_QWORD *)(v65 + 13) = *(_QWORD *)((char *)&v102 + 5);
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = v9 / 0x18uLL;
            do
            {
              v72 = 0;
              *(_QWORD *)&v103[16] = *(_QWORD *)(v8 + 16);
              *(_OWORD *)v103 = *(_OWORD *)v8;
              v73 = v8;
              do
              {
                v74 = v73;
                v73 += 24 * v72 + 24;
                v75 = 2 * v72;
                v72 = (2 * v72) | 1;
                v76 = v75 + 2;
                if (v76 < v71 && *(double *)v73 < *(double *)(v73 + 24))
                {
                  v73 += 24;
                  v72 = v76;
                }
                v77 = *(_OWORD *)v73;
                *(_QWORD *)(v74 + 13) = *(_QWORD *)(v73 + 13);
                *(_OWORD *)v74 = v77;
              }
              while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              a2 -= 24;
              if (v73 == a2)
              {
                *(_QWORD *)(v73 + 13) = *(_QWORD *)&v103[13];
                *(_OWORD *)v73 = *(_OWORD *)v103;
              }
              else
              {
                v78 = *(_OWORD *)a2;
                *(_QWORD *)(v73 + 13) = *(_QWORD *)(a2 + 13);
                *(_OWORD *)v73 = v78;
                *(_QWORD *)(a2 + 13) = *(_QWORD *)&v103[13];
                *(_OWORD *)a2 = *(_OWORD *)v103;
                v79 = v73 - v8 + 24;
                if (v79 >= 25)
                {
                  v80 = (v79 / 0x18uLL - 2) >> 1;
                  v81 = v8 + 24 * v80;
                  v82 = *(double *)v73;
                  if (*(double *)v81 < *(double *)v73)
                  {
                    v92 = *(_OWORD *)(v73 + 8);
                    do
                    {
                      v83 = v73;
                      v73 = v81;
                      v84 = *(_OWORD *)v81;
                      *(_QWORD *)(v83 + 13) = *(_QWORD *)(v81 + 13);
                      *(_OWORD *)v83 = v84;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = v8 + 24 * v80;
                    }
                    while (*(double *)v81 < v82);
                    *(double *)v73 = v82;
                    *(_QWORD *)(v73 + 8) = v92;
                    *(_QWORD *)(v73 + 13) = *(_QWORD *)((char *)&v92 + 5);
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_100C315A8((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_100C315A8((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_100C315A8((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_100C315A8(v14, (__int128 *)v12, v15);
          *(_QWORD *)&v93[16] = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v93 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 13);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 13) = v16;
          *(_QWORD *)(v12 + 13) = *(_QWORD *)&v93[13];
          *(_OWORD *)v12 = *(_OWORD *)v93;
        }
        --a3;
        v17 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 24) >= v17)
        {
          v91 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            *(_QWORD *)&v95[16] = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v95 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 13) = *(_QWORD *)(v32 + 13);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 13) = *(_QWORD *)&v95[13];
            *(_OWORD *)v32 = *(_OWORD *)v95;
            do
            {
              v35 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 13) = *(_QWORD *)(v8 - 11);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v17;
          *(_QWORD *)(v8 - 11) = *(_QWORD *)((char *)&v91 + 5);
          *(_QWORD *)(v8 - 16) = v91;
          continue;
        }
        v18 = 0;
        v90 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(double *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            *(_QWORD *)&v94[16] = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v94 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 13) = *(_QWORD *)(v24 + 13);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 13) = *(_QWORD *)&v94[13];
            *(_OWORD *)v24 = *(_OWORD *)v94;
            do
            {
              v26 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(double *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 13) = *(_QWORD *)(v8 - 11);
          *(_OWORD *)a1 = v28;
        }
        *(double *)(v8 - 24) = v17;
        *(_QWORD *)(v8 - 11) = *(_QWORD *)((char *)&v90 + 5);
        *(_QWORD *)(v8 - 16) = v90;
        if (v20 < v21)
        {
LABEL_29:
          sub_100C30CE0(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_100C316D0(a1, v8 - 24);
        if (!sub_100C316D0(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 11) < *(double *)(v8 + 8))
        {
          v159 = *(_OWORD *)v8;
          v171 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v206 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)&v206[16] = *(_OWORD *)(v8 + 80);
          v182 = *(_OWORD *)(v8 + 32);
          v194 = *(_OWORD *)(v8 + 48);
          v61 = *(a2 - 3);
          v60 = *(a2 - 2);
          v62 = *(a2 - 4);
          *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 48) = v61;
          *(_OWORD *)(v8 + 64) = v60;
          *(_OWORD *)(v8 + 32) = v62;
          v63 = *(a2 - 5);
          *(_OWORD *)v8 = *(a2 - 6);
          *(_OWORD *)(v8 + 16) = v63;
          *(a2 - 6) = v159;
          *(a2 - 5) = v171;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v206[12];
          *(a2 - 3) = v194;
          *(a2 - 2) = *(_OWORD *)v206;
          *(a2 - 4) = v182;
        }
        return;
      case 3:
        sub_100C32654(v8, v8 + 96, (uint64_t)(a2 - 6));
        return;
      case 4:
        sub_100C32C1C(v8, v8 + 96, v8 + 192, (uint64_t)(a2 - 6));
        return;
      case 5:
        v64 = (__int128 *)(v8 + 96);
        v65 = (__int128 *)(v8 + 192);
        v66 = (__int128 *)(v8 + 288);
        sub_100C32C1C(v8, v8 + 96, v8 + 192, v8 + 288);
        if (*((double *)a2 - 11) < *(double *)(v8 + 296))
        {
          v183 = *(_OWORD *)(v8 + 320);
          v195 = *(_OWORD *)(v8 + 336);
          *(_OWORD *)v207 = *(_OWORD *)(v8 + 352);
          *(_OWORD *)&v207[16] = *(_OWORD *)(v8 + 368);
          v160 = *v66;
          v172 = *(_OWORD *)(v8 + 304);
          v67 = *(a2 - 5);
          *v66 = *(a2 - 6);
          *(_OWORD *)(v8 + 304) = v67;
          v69 = *(a2 - 3);
          v68 = *(a2 - 2);
          v70 = *(a2 - 4);
          *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 336) = v69;
          *(_OWORD *)(v8 + 352) = v68;
          *(_OWORD *)(v8 + 320) = v70;
          *(a2 - 6) = v160;
          *(a2 - 5) = v172;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v207[12];
          *(a2 - 3) = v195;
          *(a2 - 2) = *(_OWORD *)v207;
          *(a2 - 4) = v183;
          if (*(double *)(v8 + 296) < *(double *)(v8 + 200))
          {
            v184 = *(_OWORD *)(v8 + 224);
            v196 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)v208 = *(_OWORD *)(v8 + 256);
            *(_OWORD *)&v208[16] = *(_OWORD *)(v8 + 272);
            v161 = *v65;
            v173 = *(_OWORD *)(v8 + 208);
            v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 268) = *(_OWORD *)(v8 + 364);
            v72 = *(_OWORD *)(v8 + 304);
            *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v72;
            *v66 = v161;
            *(_OWORD *)(v8 + 304) = v173;
            *(_OWORD *)(v8 + 364) = *(_OWORD *)&v208[12];
            v73 = *(double *)(v8 + 200) < *(double *)(v8 + 104);
            *(_OWORD *)(v8 + 336) = v196;
            *(_OWORD *)(v8 + 352) = *(_OWORD *)v208;
            *(_OWORD *)(v8 + 320) = v184;
            if (v73)
            {
              v185 = *(_OWORD *)(v8 + 128);
              v197 = *(_OWORD *)(v8 + 144);
              *(_OWORD *)v209 = *(_OWORD *)(v8 + 160);
              *(_OWORD *)&v209[16] = *(_OWORD *)(v8 + 176);
              v162 = *v64;
              v174 = *(_OWORD *)(v8 + 112);
              v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 172) = *(_OWORD *)(v8 + 268);
              v75 = *(_OWORD *)(v8 + 208);
              *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v75;
              *v65 = v162;
              *(_OWORD *)(v8 + 208) = v174;
              *(_OWORD *)(v8 + 268) = *(_OWORD *)&v209[12];
              v73 = *(double *)(v8 + 104) < *(double *)(v8 + 8);
              *(_OWORD *)(v8 + 240) = v197;
              *(_OWORD *)(v8 + 256) = *(_OWORD *)v209;
              *(_OWORD *)(v8 + 224) = v185;
              if (v73)
              {
                v163 = *(_OWORD *)v8;
                v175 = *(_OWORD *)(v8 + 16);
                *(_OWORD *)v210 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)&v210[16] = *(_OWORD *)(v8 + 80);
                v186 = *(_OWORD *)(v8 + 32);
                v198 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)(v8 + 76) = *(_OWORD *)(v8 + 172);
                v76 = *(_OWORD *)(v8 + 160);
                v77 = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 64) = v76;
                v78 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v8 = *v64;
                *(_OWORD *)(v8 + 16) = v78;
                *(_OWORD *)(v8 + 32) = v77;
                *v64 = v163;
                *(_OWORD *)(v8 + 112) = v175;
                *(_OWORD *)(v8 + 172) = *(_OWORD *)&v210[12];
                *(_OWORD *)(v8 + 144) = v198;
                *(_OWORD *)(v8 + 160) = *(_OWORD *)v210;
                *(_OWORD *)(v8 + 128) = v186;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2303)
        {
          v79 = (_OWORD *)(v8 + 96);
          v81 = (_OWORD *)v8 == a2 || v79 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = v8;
              do
              {
                v84 = v79;
                v85 = *(double *)(v83 + 104);
                if (v85 < *(double *)(v83 + 8))
                {
                  v86 = *(_QWORD *)v79;
                  v187 = *(_OWORD *)(v83 + 144);
                  *(_OWORD *)v199 = *(_OWORD *)(v83 + 160);
                  *(_OWORD *)&v199[16] = *(_OWORD *)(v83 + 176);
                  v88 = *(_OWORD *)(v83 + 112);
                  v87 = *(_OWORD *)(v83 + 128);
                  v89 = v82;
                  v164 = v88;
                  while (1)
                  {
                    v90 = (_OWORD *)(v8 + v89);
                    v91 = *(_OWORD *)(v8 + v89 + 48);
                    v90[8] = *(_OWORD *)(v8 + v89 + 32);
                    v90[9] = v91;
                    v90[10] = *(_OWORD *)(v8 + v89 + 64);
                    *(_OWORD *)((char *)v90 + 172) = *(_OWORD *)(v8 + v89 + 76);
                    v92 = *(_OWORD *)(v8 + v89 + 16);
                    v90[6] = *(_OWORD *)(v8 + v89);
                    v90[7] = v92;
                    if (!v89)
                      break;
                    v89 -= 96;
                    if (v85 >= *((double *)v90 - 11))
                    {
                      v93 = v8 + v89 + 96;
                      goto LABEL_80;
                    }
                  }
                  v93 = v8;
LABEL_80:
                  *(_QWORD *)v93 = v86;
                  *(double *)(v93 + 8) = v85;
                  *(_OWORD *)(v93 + 48) = v187;
                  *(_OWORD *)(v93 + 64) = *(_OWORD *)v199;
                  *(_OWORD *)(v93 + 76) = *(_OWORD *)&v199[12];
                  *(_OWORD *)(v93 + 16) = v164;
                  *(_OWORD *)(v93 + 32) = v87;
                }
                v79 = v84 + 6;
                v82 += 96;
                v83 = (unint64_t)v84;
              }
              while (v84 + 6 != a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v138 = (uint64_t)v79;
              v139 = *(double *)(a1 + 104);
              if (v139 < *(double *)(a1 + 8))
              {
                v140 = *(_QWORD *)v79;
                v190 = *(_OWORD *)(a1 + 144);
                *(_OWORD *)v202 = *(_OWORD *)(a1 + 160);
                *(_OWORD *)&v202[16] = *(_OWORD *)(a1 + 176);
                v167 = *(_OWORD *)(a1 + 112);
                v178 = *(_OWORD *)(a1 + 128);
                do
                {
                  v141 = *(v79 - 3);
                  v79[2] = *(v79 - 4);
                  v79[3] = v141;
                  v79[4] = *(v79 - 2);
                  *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)((char *)v79 - 20);
                  v142 = *(v79 - 5);
                  *v79 = *(v79 - 6);
                  v79[1] = v142;
                  v143 = *((double *)v79 - 23);
                  v79 -= 6;
                }
                while (v139 < v143);
                *(_QWORD *)v79 = v140;
                *((double *)v79 + 1) = v139;
                v79[1] = v167;
                *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)&v202[12];
                v79[3] = v190;
                v79[4] = *(_OWORD *)v202;
                v79[2] = v178;
              }
              v79 = (_OWORD *)(v138 + 96);
              a1 = v138;
            }
            while ((_OWORD *)(v138 + 96) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v8 == a2)
            return;
          v94 = (unint64_t)(v10 - 2) >> 1;
          v95 = v94;
          do
          {
            v96 = v95;
            if (v94 >= v95)
            {
              v97 = (2 * v95) | 1;
              v98 = v8 + 96 * v97;
              if (2 * v96 + 2 < v10 && *(double *)(v8 + 96 * v97 + 8) < *(double *)(v98 + 104))
              {
                v98 += 96;
                v97 = 2 * v96 + 2;
              }
              v99 = *(double *)(v8 + 96 * v96 + 8);
              if (*(double *)(v98 + 8) >= v99)
              {
                v100 = v8 + 96 * v96;
                v101 = *(_QWORD *)v100;
                v165 = *(_OWORD *)(v100 + 16);
                *(_OWORD *)v200 = *(_OWORD *)(v100 + 64);
                *(_OWORD *)&v200[16] = *(_OWORD *)(v100 + 80);
                v176 = *(_OWORD *)(v100 + 32);
                v188 = *(_OWORD *)(v100 + 48);
                do
                {
                  v102 = (_OWORD *)v100;
                  v100 = v98;
                  v103 = *(_OWORD *)(v98 + 16);
                  *v102 = *(_OWORD *)v98;
                  v102[1] = v103;
                  v104 = *(_OWORD *)(v98 + 32);
                  v105 = *(_OWORD *)(v98 + 48);
                  v106 = *(_OWORD *)(v98 + 64);
                  *(_OWORD *)((char *)v102 + 76) = *(_OWORD *)(v98 + 76);
                  v102[3] = v105;
                  v102[4] = v106;
                  v102[2] = v104;
                  if (v94 < v97)
                    break;
                  v107 = (2 * v97) | 1;
                  v98 = v8 + 96 * v107;
                  v108 = 2 * v97 + 2;
                  if (v108 < v10 && *(double *)(v8 + 96 * v107 + 8) < *(double *)(v98 + 104))
                  {
                    v98 += 96;
                    v107 = v108;
                  }
                  v97 = v107;
                }
                while (*(double *)(v98 + 8) >= v99);
                *(_QWORD *)v100 = v101;
                *(double *)(v100 + 8) = v99;
                *(_OWORD *)(v100 + 48) = v188;
                *(_OWORD *)(v100 + 64) = *(_OWORD *)v200;
                *(_OWORD *)(v100 + 76) = *(_OWORD *)&v200[12];
                *(_OWORD *)(v100 + 16) = v165;
                *(_OWORD *)(v100 + 32) = v176;
              }
            }
            v95 = v96 - 1;
          }
          while (v96);
          v109 = v9 / 0x60uLL;
          while (2)
          {
            v110 = 0;
            v166 = *(_OWORD *)v8;
            v177 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v211 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v211[16] = *(_OWORD *)(v8 + 80);
            v189 = *(_OWORD *)(v8 + 32);
            v201 = *(_OWORD *)(v8 + 48);
            v111 = v8;
            do
            {
              v112 = (_OWORD *)v111;
              v113 = v110 + 1;
              v111 += 96 * (v110 + 1);
              v114 = 2 * v110;
              v110 = (2 * v110) | 1;
              v115 = v114 + 2;
              if (v115 < v109 && *((double *)&v112[6 * v113] + 1) < *(double *)(v111 + 104))
              {
                v111 += 96;
                v110 = v115;
              }
              v116 = *(_OWORD *)(v111 + 16);
              *v112 = *(_OWORD *)v111;
              v112[1] = v116;
              v117 = *(_OWORD *)(v111 + 32);
              v118 = *(_OWORD *)(v111 + 48);
              v119 = *(_OWORD *)(v111 + 64);
              *(_OWORD *)((char *)v112 + 76) = *(_OWORD *)(v111 + 76);
              v112[3] = v118;
              v112[4] = v119;
              v112[2] = v117;
            }
            while (v110 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
            a2 -= 6;
            if ((_OWORD *)v111 != a2)
            {
              v120 = a2[1];
              *(_OWORD *)v111 = *a2;
              *(_OWORD *)(v111 + 16) = v120;
              v121 = a2[2];
              v122 = a2[3];
              v123 = a2[4];
              *(_OWORD *)(v111 + 76) = *(_OWORD *)((char *)a2 + 76);
              *(_OWORD *)(v111 + 48) = v122;
              *(_OWORD *)(v111 + 64) = v123;
              *(_OWORD *)(v111 + 32) = v121;
              *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)&v211[12];
              a2[3] = v201;
              a2[4] = *(_OWORD *)v211;
              a2[2] = v189;
              *a2 = v166;
              a2[1] = v177;
              v124 = v111 - v8 + 96;
              if (v124 >= 97)
              {
                v125 = (v124 / 0x60uLL - 2) >> 1;
                v126 = *(double *)(v111 + 8);
                if (*(double *)(v8 + 96 * v125 + 8) < v126)
                {
                  v127 = *(_QWORD *)v111;
                  v146 = *(_OWORD *)(v111 + 16);
                  *(_OWORD *)v155 = *(_OWORD *)(v111 + 64);
                  *(_OWORD *)&v155[16] = *(_OWORD *)(v111 + 80);
                  v149 = *(_OWORD *)(v111 + 32);
                  v152 = *(_OWORD *)(v111 + 48);
                  do
                  {
                    v128 = (_OWORD *)v111;
                    v111 = v8 + 96 * v125;
                    v129 = *(_OWORD *)(v111 + 16);
                    *v128 = *(_OWORD *)v111;
                    v128[1] = v129;
                    v130 = *(_OWORD *)(v111 + 32);
                    v131 = *(_OWORD *)(v111 + 48);
                    v132 = *(_OWORD *)(v111 + 64);
                    *(_OWORD *)((char *)v128 + 76) = *(_OWORD *)(v111 + 76);
                    v128[3] = v131;
                    v128[4] = v132;
                    v128[2] = v130;
                    if (!v125)
                      break;
                    v125 = (v125 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 96 * v125 + 8) < v126);
                  *(_QWORD *)v111 = v127;
                  *(double *)(v111 + 8) = v126;
                  *(_OWORD *)(v111 + 16) = v146;
                  v133 = v149;
                  v134 = v152;
                  v135 = *(_OWORD *)v155;
                  v136 = *(_OWORD *)&v155[12];
LABEL_112:
                  *(_OWORD *)(v111 + 76) = v136;
                  *(_OWORD *)(v111 + 48) = v134;
                  *(_OWORD *)(v111 + 64) = v135;
                  *(_OWORD *)(v111 + 32) = v133;
                }
              }
              if (v109-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v111 = v166;
          *(_OWORD *)(v111 + 16) = v177;
          v133 = v189;
          v134 = v201;
          v135 = *(_OWORD *)v211;
          v136 = *(_OWORD *)&v211[12];
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_OWORD *)(v8 + 96 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_100C32654(a1 + 96 * v11, a1, (uint64_t)(a2 - 6));
        }
        else
        {
          sub_100C32654(a1, a1 + 96 * v11, (uint64_t)(a2 - 6));
          v13 = 3 * v11;
          v14 = a1 + 96 * v11 - 96;
          sub_100C32654(a1 + 96, v14, (uint64_t)(a2 - 12));
          v15 = a1 + 96 + 32 * v13;
          sub_100C32654(a1 + 192, v15, (uint64_t)(a2 - 18));
          sub_100C32654(v14, (uint64_t)v12, v15);
          v156 = *(_OWORD *)a1;
          v168 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v203 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v203[16] = *(_OWORD *)(a1 + 80);
          v179 = *(_OWORD *)(a1 + 32);
          v191 = *(_OWORD *)(a1 + 48);
          v17 = v12[3];
          v16 = v12[4];
          v18 = v12[2];
          *(_OWORD *)(a1 + 76) = *(_OWORD *)((char *)v12 + 76);
          *(_OWORD *)(a1 + 48) = v17;
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          v19 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v19;
          *v12 = v156;
          v12[1] = v168;
          *(_OWORD *)((char *)v12 + 76) = *(_OWORD *)&v203[12];
          v12[3] = v191;
          v12[4] = *(_OWORD *)v203;
          v12[2] = v179;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 88) < v20)
            goto LABEL_11;
          v42 = *(_QWORD *)a1;
          *(_OWORD *)v154 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v154[16] = *(_OWORD *)(a1 + 80);
          v148 = *(_OWORD *)(a1 + 32);
          v151 = *(_OWORD *)(a1 + 48);
          v145 = *(_OWORD *)(a1 + 16);
          if (v20 >= *((double *)a2 - 11))
          {
            v45 = a1 + 96;
            do
            {
              v8 = v45;
              if (v45 >= (unint64_t)a2)
                break;
              v46 = *(double *)(v45 + 8);
              v45 += 96;
            }
            while (v20 >= v46);
          }
          else
          {
            v43 = a1;
            do
            {
              v8 = v43 + 96;
              v44 = *(double *)(v43 + 104);
              v43 += 96;
            }
            while (v20 >= v44);
          }
          v47 = (double *)a2;
          if (v8 < (unint64_t)a2)
          {
            v48 = (double *)a2;
            do
            {
              v47 = v48 - 12;
              v49 = *(v48 - 11);
              v48 -= 12;
            }
            while (v20 < v49);
          }
          while (v8 < (unint64_t)v47)
          {
            v158 = *(_OWORD *)v8;
            v170 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v205 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v205[16] = *(_OWORD *)(v8 + 80);
            v181 = *(_OWORD *)(v8 + 32);
            v193 = *(_OWORD *)(v8 + 48);
            v51 = *((_OWORD *)v47 + 3);
            v50 = *((_OWORD *)v47 + 4);
            v52 = *((_OWORD *)v47 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v47 + 76);
            *(_OWORD *)(v8 + 48) = v51;
            *(_OWORD *)(v8 + 64) = v50;
            *(_OWORD *)(v8 + 32) = v52;
            v53 = *((_OWORD *)v47 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v47;
            *(_OWORD *)(v8 + 16) = v53;
            *(_OWORD *)v47 = v158;
            *((_OWORD *)v47 + 1) = v170;
            *(_OWORD *)((char *)v47 + 76) = *(_OWORD *)&v205[12];
            *((_OWORD *)v47 + 3) = v193;
            *((_OWORD *)v47 + 4) = *(_OWORD *)v205;
            *((_OWORD *)v47 + 2) = v181;
            do
            {
              v54 = *(double *)(v8 + 104);
              v8 += 96;
            }
            while (v20 >= v54);
            do
            {
              v55 = *(v47 - 11);
              v47 -= 12;
            }
            while (v20 < v55);
          }
          if (v8 - 96 != a1)
          {
            v56 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 16) = v56;
            v57 = *(_OWORD *)(v8 - 64);
            v58 = *(_OWORD *)(v8 - 48);
            v59 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
            *(_OWORD *)(a1 + 48) = v58;
            *(_OWORD *)(a1 + 64) = v59;
            *(_OWORD *)(a1 + 32) = v57;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 96) = v42;
          *(double *)(v8 - 88) = v20;
          *(_OWORD *)(v8 - 80) = v145;
          *(_OWORD *)(v8 - 20) = *(_OWORD *)&v154[12];
          *(_OWORD *)(v8 - 48) = v151;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v154;
          *(_OWORD *)(v8 - 64) = v148;
          continue;
        }
        v20 = *(double *)(a1 + 8);
LABEL_11:
        v21 = 0;
        v22 = *(_QWORD *)a1;
        *(_OWORD *)v153 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v153[16] = *(_OWORD *)(a1 + 80);
        v147 = *(_OWORD *)(a1 + 32);
        v150 = *(_OWORD *)(a1 + 48);
        v144 = *(_OWORD *)(a1 + 16);
        do
        {
          v23 = *(double *)(a1 + v21 + 104);
          v21 += 96;
        }
        while (v23 < v20);
        v24 = a1 + v21;
        v25 = (double *)a2;
        if (v21 == 96)
        {
          v28 = (double *)a2;
          while (v24 < (unint64_t)v28)
          {
            v26 = v28 - 12;
            v29 = *(v28 - 11);
            v28 -= 12;
            if (v29 < v20)
              goto LABEL_21;
          }
          v26 = v28;
        }
        else
        {
          do
          {
            v26 = v25 - 12;
            v27 = *(v25 - 11);
            v25 -= 12;
          }
          while (v27 >= v20);
        }
LABEL_21:
        v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          v30 = v26;
          do
          {
            v157 = *(_OWORD *)v8;
            v169 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v204 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v204[16] = *(_OWORD *)(v8 + 80);
            v180 = *(_OWORD *)(v8 + 32);
            v192 = *(_OWORD *)(v8 + 48);
            v32 = *((_OWORD *)v30 + 3);
            v31 = *((_OWORD *)v30 + 4);
            v33 = *((_OWORD *)v30 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v30 + 76);
            *(_OWORD *)(v8 + 48) = v32;
            *(_OWORD *)(v8 + 64) = v31;
            *(_OWORD *)(v8 + 32) = v33;
            v34 = *((_OWORD *)v30 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v30;
            *(_OWORD *)(v8 + 16) = v34;
            *(_OWORD *)v30 = v157;
            *((_OWORD *)v30 + 1) = v169;
            *(_OWORD *)((char *)v30 + 76) = *(_OWORD *)&v204[12];
            *((_OWORD *)v30 + 3) = v192;
            *((_OWORD *)v30 + 4) = *(_OWORD *)v204;
            *((_OWORD *)v30 + 2) = v180;
            do
            {
              v35 = *(double *)(v8 + 104);
              v8 += 96;
            }
            while (v35 < v20);
            do
            {
              v36 = *(v30 - 11);
              v30 -= 12;
            }
            while (v36 >= v20);
          }
          while (v8 < (unint64_t)v30);
        }
        if (v8 - 96 != a1)
        {
          v37 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 16) = v37;
          v38 = *(_OWORD *)(v8 - 64);
          v39 = *(_OWORD *)(v8 - 48);
          v40 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v40;
          *(_OWORD *)(a1 + 32) = v38;
        }
        *(_QWORD *)(v8 - 96) = v22;
        *(double *)(v8 - 88) = v20;
        *(_OWORD *)(v8 - 80) = v144;
        *(_OWORD *)(v8 - 20) = *(_OWORD *)&v153[12];
        *(_OWORD *)(v8 - 48) = v150;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v153;
        *(_OWORD *)(v8 - 64) = v147;
        if (v24 < (unint64_t)v26)
        {
LABEL_32:
          sub_100C31A7C(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = sub_100C32844(a1, v8 - 96);
        if (!sub_100C32844(v8, (uint64_t)a2))
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = (_OWORD *)(v8 - 96);
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a2 - 12;
  v303 = (uint64_t)(a2 - 36);
  v304 = (uint64_t)(a2 - 24);
  v9 = a1;
  v306 = (uint64_t)a2;
  while (2)
  {
    a1 = v9;
    v10 = (uint64_t)a2 - v9;
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v9) >> 5);
    switch(v11)
    {
      case 0:
      case 1:
        return;
      case 2:
        v150 = *(a2 - 8);
        *(float *)&v315 = v150;
        *(float *)&v309 = (float)(int)sub_100219A9C((uint64_t)v8);
        v151 = sub_100C726E0((float *)&v315, (float *)&v309);
        v152 = *(double *)(a1 + 32);
        *(float *)&v315 = v152;
        *(float *)&v309 = (float)(int)sub_100219A9C(a1);
        v153 = sub_100C726E0((float *)&v315, (float *)&v309);
        if (v151 > 0.0 && v151 > v153)
        {
          v154 = *(_OWORD *)(a1 + 16);
          v315 = *(_OWORD *)a1;
          v316 = v154;
          v155 = *(_OWORD *)(a1 + 32);
          v156 = *(_OWORD *)(a1 + 48);
          v157 = *(_OWORD *)(a1 + 80);
          v319 = *(_OWORD *)(a1 + 64);
          v320 = v157;
          v317 = v155;
          v318 = v156;
          v158 = *((_OWORD *)v8 + 5);
          v160 = *((_OWORD *)v8 + 2);
          v159 = *((_OWORD *)v8 + 3);
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v8 + 4);
          *(_OWORD *)(a1 + 80) = v158;
          *(_OWORD *)(a1 + 32) = v160;
          *(_OWORD *)(a1 + 48) = v159;
          v161 = *((_OWORD *)v8 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v8;
          *(_OWORD *)(a1 + 16) = v161;
          v162 = v316;
          *(_OWORD *)v8 = v315;
          *((_OWORD *)v8 + 1) = v162;
          v163 = v317;
          v164 = v318;
          v165 = v320;
          *((_OWORD *)v8 + 4) = v319;
          *((_OWORD *)v8 + 5) = v165;
          *((_OWORD *)v8 + 2) = v163;
          *((_OWORD *)v8 + 3) = v164;
        }
        return;
      case 3:
        sub_100C73FE0(a1, a1 + 96, (uint64_t)v8);
        return;
      case 4:
        sub_100C74678(a1, a1 + 96, a1 + 192, (uint64_t)v8);
        return;
      case 5:
        sub_100C73CE4(a1, a1 + 96, a1 + 192, a1 + 288, (uint64_t)v8);
        return;
      default:
        if (v10 <= 2303)
        {
          if ((a4 & 1) != 0)
          {
            if ((double *)a1 != a2)
            {
              v166 = a1 + 96;
              if ((double *)(a1 + 96) != a2)
              {
                v167 = 0;
                v168 = (__int128 *)a1;
                do
                {
                  v169 = (uint64_t)v168;
                  v168 = (__int128 *)v166;
                  v170 = *(double *)(v169 + 128);
                  *(float *)&v315 = v170;
                  *(float *)&v309 = (float)(int)sub_100219A9C(v166);
                  v171 = sub_100C726E0((float *)&v315, (float *)&v309);
                  v172 = *(double *)(v169 + 32);
                  *(float *)&v315 = v172;
                  *(float *)&v309 = (float)(int)sub_100219A9C(v169);
                  v173 = sub_100C726E0((float *)&v315, (float *)&v309);
                  if (v171 > 0.0 && v171 > v173)
                  {
                    v175 = v168[1];
                    v315 = *v168;
                    v316 = v175;
                    v176 = v168[2];
                    v177 = v168[3];
                    v178 = v168[5];
                    v319 = v168[4];
                    v320 = v178;
                    v317 = v176;
                    v318 = v177;
                    v179 = v167;
                    while (1)
                    {
                      v180 = (double *)(a1 + v179);
                      v181 = *(_OWORD *)(a1 + v179 + 48);
                      *((_OWORD *)v180 + 8) = *(_OWORD *)(a1 + v179 + 32);
                      *((_OWORD *)v180 + 9) = v181;
                      v182 = *(_OWORD *)(a1 + v179 + 80);
                      *((_OWORD *)v180 + 10) = *(_OWORD *)(a1 + v179 + 64);
                      *((_OWORD *)v180 + 11) = v182;
                      v183 = *(_OWORD *)(a1 + v179 + 16);
                      *((_OWORD *)v180 + 6) = *(_OWORD *)(a1 + v179);
                      *((_OWORD *)v180 + 7) = v183;
                      if (!v179)
                        break;
                      v184 = *(double *)&v317;
                      *(float *)&v309 = v184;
                      v321[0] = (float)(int)sub_100219A9C((uint64_t)&v315);
                      v185 = sub_100C726E0((float *)&v309, v321);
                      v186 = *(v180 - 8);
                      *(float *)&v309 = v186;
                      v321[0] = (float)(int)sub_100219A9C((uint64_t)(v180 - 12));
                      v187 = sub_100C726E0((float *)&v309, v321);
                      v179 -= 96;
                      if (v185 <= 0.0 || v185 <= v187)
                      {
                        v188 = (_OWORD *)(a1 + v179 + 96);
                        goto LABEL_114;
                      }
                    }
                    v188 = (_OWORD *)a1;
LABEL_114:
                    v189 = v316;
                    *v188 = v315;
                    v188[1] = v189;
                    v190 = v317;
                    v191 = v318;
                    v192 = v320;
                    v188[4] = v319;
                    v188[5] = v192;
                    v188[2] = v190;
                    v188[3] = v191;
                    a2 = (double *)v306;
                  }
                  v166 = (uint64_t)(v168 + 6);
                  v167 += 96;
                }
                while (v168 + 6 != (__int128 *)a2);
              }
            }
          }
          else if ((double *)a1 != a2)
          {
            v280 = a1 + 96;
            if ((double *)(a1 + 96) != a2)
            {
              v281 = a1 - 96;
              do
              {
                v282 = a1;
                a1 = v280;
                v283 = *(double *)(v282 + 128);
                *(float *)&v315 = v283;
                *(float *)&v309 = (float)(int)sub_100219A9C(v280);
                v284 = sub_100C726E0((float *)&v315, (float *)&v309);
                v285 = *(double *)(v282 + 32);
                *(float *)&v315 = v285;
                *(float *)&v309 = (float)(int)sub_100219A9C(v282);
                v286 = sub_100C726E0((float *)&v315, (float *)&v309);
                if (v284 > 0.0 && v284 > v286)
                {
                  v288 = *(_OWORD *)(a1 + 16);
                  v315 = *(_OWORD *)a1;
                  v316 = v288;
                  v289 = *(_OWORD *)(a1 + 32);
                  v290 = *(_OWORD *)(a1 + 48);
                  v291 = *(_OWORD *)(a1 + 80);
                  v319 = *(_OWORD *)(a1 + 64);
                  v320 = v291;
                  v317 = v289;
                  v318 = v290;
                  v292 = v281;
                  do
                  {
                    v293 = *(_OWORD *)(v292 + 176);
                    *(_OWORD *)(v292 + 256) = *(_OWORD *)(v292 + 160);
                    *(_OWORD *)(v292 + 272) = v293;
                    v294 = *(_OWORD *)(v292 + 144);
                    *(_OWORD *)(v292 + 224) = *(_OWORD *)(v292 + 128);
                    *(_OWORD *)(v292 + 240) = v294;
                    v295 = *(_OWORD *)(v292 + 112);
                    *(_OWORD *)(v292 + 192) = *(_OWORD *)(v292 + 96);
                    *(_OWORD *)(v292 + 208) = v295;
                    *(float *)&v294 = *(double *)&v317;
                    LODWORD(v309) = v294;
                    v321[0] = (float)(int)sub_100219A9C((uint64_t)&v315);
                    v296 = sub_100C726E0((float *)&v309, v321);
                    v297 = *(double *)(v292 + 32);
                    *(float *)&v309 = v297;
                    v321[0] = (float)(int)sub_100219A9C(v292);
                    v298 = sub_100C726E0((float *)&v309, v321);
                    v292 -= 96;
                  }
                  while (v296 > 0.0 && v296 > v298);
                  v299 = v316;
                  *(_OWORD *)(v292 + 192) = v315;
                  *(_OWORD *)(v292 + 208) = v299;
                  v300 = v317;
                  v301 = v318;
                  v302 = v320;
                  *(_OWORD *)(v292 + 256) = v319;
                  *(_OWORD *)(v292 + 272) = v302;
                  *(_OWORD *)(v292 + 224) = v300;
                  *(_OWORD *)(v292 + 240) = v301;
                }
                v280 = a1 + 96;
                v281 += 96;
              }
              while ((double *)(a1 + 96) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((double *)a1 != a2)
          {
            v193 = (unint64_t)(v11 - 2) >> 1;
            v305 = v193;
            do
            {
              v194 = v193;
              if (v305 >= v193)
              {
                v195 = (2 * v193) | 1;
                v196 = a1 + 96 * v195;
                if (2 * v193 + 2 < v11)
                {
                  v197 = *(double *)(a1 + 96 * v195 + 32);
                  *(float *)&v315 = v197;
                  *(float *)&v309 = (float)(int)sub_100219A9C(a1 + 96 * v195);
                  v198 = sub_100C726E0((float *)&v315, (float *)&v309);
                  v199 = *(double *)(v196 + 128);
                  *(float *)&v315 = v199;
                  *(float *)&v309 = (float)(int)sub_100219A9C(v196 + 96);
                  if (((v198 > 0.0) & (v198 > sub_100C726E0((float *)&v315, (float *)&v309))) != 0)
                  {
                    v196 += 96;
                    v195 = 2 * v194 + 2;
                  }
                }
                v200 = a1 + 96 * v194;
                v201 = *(double *)(v196 + 32);
                *(float *)&v315 = v201;
                *(float *)&v309 = (float)(int)sub_100219A9C(v196);
                v202 = sub_100C726E0((float *)&v315, (float *)&v309);
                v203 = *(double *)(v200 + 32);
                *(float *)&v315 = v203;
                *(float *)&v309 = (float)(int)sub_100219A9C(v200);
                v204 = sub_100C726E0((float *)&v315, (float *)&v309);
                if (v202 <= 0.0 || v202 <= v204)
                {
                  v205 = *(_OWORD *)(v200 + 16);
                  v315 = *(_OWORD *)v200;
                  v316 = v205;
                  v206 = *(_OWORD *)(v200 + 32);
                  v207 = *(_OWORD *)(v200 + 48);
                  v208 = *(_OWORD *)(v200 + 80);
                  v319 = *(_OWORD *)(v200 + 64);
                  v320 = v208;
                  v317 = v206;
                  v318 = v207;
                  while (1)
                  {
                    v209 = (_OWORD *)v196;
                    v210 = *(_OWORD *)(v196 + 16);
                    *(_OWORD *)v200 = *(_OWORD *)v196;
                    *(_OWORD *)(v200 + 16) = v210;
                    v211 = *(_OWORD *)(v196 + 32);
                    v212 = *(_OWORD *)(v196 + 48);
                    v213 = *(_OWORD *)(v196 + 80);
                    *(_OWORD *)(v200 + 64) = *(_OWORD *)(v196 + 64);
                    *(_OWORD *)(v200 + 80) = v213;
                    *(_OWORD *)(v200 + 32) = v211;
                    *(_OWORD *)(v200 + 48) = v212;
                    if (v305 < v195)
                      break;
                    v214 = (2 * v195) | 1;
                    v196 = a1 + 96 * v214;
                    v195 = 2 * v195 + 2;
                    if (v195 >= v11)
                    {
                      v195 = v214;
                    }
                    else
                    {
                      v215 = *(double *)(a1 + 96 * v214 + 32);
                      *(float *)&v309 = v215;
                      v321[0] = (float)(int)sub_100219A9C(a1 + 96 * v214);
                      v216 = sub_100C726E0((float *)&v309, v321);
                      v217 = *(double *)(v196 + 128);
                      *(float *)&v309 = v217;
                      v321[0] = (float)(int)sub_100219A9C(v196 + 96);
                      if (((v216 > 0.0) & (v216 > sub_100C726E0((float *)&v309, v321))) != 0)
                        v196 += 96;
                      else
                        v195 = v214;
                    }
                    v218 = *(double *)(v196 + 32);
                    *(float *)&v309 = v218;
                    v321[0] = (float)(int)sub_100219A9C(v196);
                    v219 = sub_100C726E0((float *)&v309, v321);
                    v220 = *(double *)&v317;
                    *(float *)&v309 = v220;
                    v321[0] = (float)(int)sub_100219A9C((uint64_t)&v315);
                    v221 = sub_100C726E0((float *)&v309, v321);
                    v200 = (uint64_t)v209;
                    if (v219 > 0.0)
                    {
                      v200 = (uint64_t)v209;
                      if (v219 > v221)
                        break;
                    }
                  }
                  v222 = v316;
                  *v209 = v315;
                  v209[1] = v222;
                  v223 = v317;
                  v224 = v318;
                  v225 = v320;
                  v209[4] = v319;
                  v209[5] = v225;
                  v209[2] = v223;
                  v209[3] = v224;
                }
              }
              v193 = v194 - 1;
            }
            while (v194);
            v226 = v10 / 0x60uLL;
            v227 = (_OWORD *)v306;
            do
            {
              v307 = v227;
              v228 = 0;
              v229 = *(_OWORD *)(a1 + 16);
              v309 = *(_OWORD *)a1;
              v310 = v229;
              v230 = *(_OWORD *)(a1 + 32);
              v231 = *(_OWORD *)(a1 + 48);
              v232 = *(_OWORD *)(a1 + 80);
              v313 = *(_OWORD *)(a1 + 64);
              v314 = v232;
              v311 = v230;
              v312 = v231;
              v233 = (_OWORD *)a1;
              do
              {
                v234 = (uint64_t)&v233[6 * v228 + 6];
                v235 = (2 * v228) | 1;
                v236 = 2 * v228 + 2;
                if (v236 < v226)
                {
                  v237 = *(double *)&v233[6 * v228 + 8];
                  *(float *)&v315 = v237;
                  v321[0] = (float)(int)sub_100219A9C(v234);
                  v238 = sub_100C726E0((float *)&v315, v321);
                  v239 = *(double *)(v234 + 128);
                  *(float *)&v315 = v239;
                  v321[0] = (float)(int)sub_100219A9C(v234 + 96);
                  if (((v238 > 0.0) & (v238 > sub_100C726E0((float *)&v315, v321))) != 0)
                  {
                    v234 += 96;
                    v235 = v236;
                  }
                }
                v240 = *(_OWORD *)(v234 + 16);
                *v233 = *(_OWORD *)v234;
                v233[1] = v240;
                v241 = *(_OWORD *)(v234 + 32);
                v242 = *(_OWORD *)(v234 + 48);
                v243 = *(_OWORD *)(v234 + 80);
                v233[4] = *(_OWORD *)(v234 + 64);
                v233[5] = v243;
                v233[2] = v241;
                v233[3] = v242;
                v233 = (_OWORD *)v234;
                v228 = v235;
              }
              while (v235 <= (uint64_t)((unint64_t)(v226 - 2) >> 1));
              v227 = v307 - 6;
              if ((_OWORD *)v234 == v307 - 6)
              {
                v276 = v310;
                *(_OWORD *)v234 = v309;
                *(_OWORD *)(v234 + 16) = v276;
                v277 = v311;
                v278 = v312;
                v279 = v314;
                *(_OWORD *)(v234 + 64) = v313;
                *(_OWORD *)(v234 + 80) = v279;
                *(_OWORD *)(v234 + 32) = v277;
                *(_OWORD *)(v234 + 48) = v278;
              }
              else
              {
                v244 = *(v307 - 5);
                *(_OWORD *)v234 = *v227;
                *(_OWORD *)(v234 + 16) = v244;
                v245 = *(v307 - 4);
                v246 = *(v307 - 3);
                v247 = *(v307 - 1);
                *(_OWORD *)(v234 + 64) = *(v307 - 2);
                *(_OWORD *)(v234 + 80) = v247;
                *(_OWORD *)(v234 + 32) = v245;
                *(_OWORD *)(v234 + 48) = v246;
                v248 = v314;
                v250 = v311;
                v249 = v312;
                *(v307 - 2) = v313;
                *(v307 - 1) = v248;
                *(v307 - 4) = v250;
                *(v307 - 3) = v249;
                v251 = v310;
                *v227 = v309;
                *(v307 - 5) = v251;
                v252 = v234 - a1 + 96;
                if (v252 >= 97)
                {
                  v253 = (v252 / 0x60uLL - 2) >> 1;
                  v254 = a1 + 96 * v253;
                  v255 = *(double *)(v254 + 32);
                  *(float *)&v315 = v255;
                  v321[0] = (float)(int)sub_100219A9C(v254);
                  v256 = sub_100C726E0((float *)&v315, v321);
                  v257 = *(double *)(v234 + 32);
                  *(float *)&v315 = v257;
                  v321[0] = (float)(int)sub_100219A9C(v234);
                  v258 = sub_100C726E0((float *)&v315, v321);
                  if (v256 > 0.0 && v256 > v258)
                  {
                    v259 = *(_OWORD *)(v234 + 16);
                    v315 = *(_OWORD *)v234;
                    v316 = v259;
                    v260 = *(_OWORD *)(v234 + 32);
                    v261 = *(_OWORD *)(v234 + 48);
                    v262 = *(_OWORD *)(v234 + 80);
                    v319 = *(_OWORD *)(v234 + 64);
                    v320 = v262;
                    v317 = v260;
                    v318 = v261;
                    do
                    {
                      v263 = (_OWORD *)v254;
                      v264 = *(_OWORD *)(v254 + 16);
                      *(_OWORD *)v234 = *(_OWORD *)v254;
                      *(_OWORD *)(v234 + 16) = v264;
                      v265 = *(_OWORD *)(v254 + 32);
                      v266 = *(_OWORD *)(v254 + 48);
                      v267 = *(_OWORD *)(v254 + 80);
                      *(_OWORD *)(v234 + 64) = *(_OWORD *)(v254 + 64);
                      *(_OWORD *)(v234 + 80) = v267;
                      *(_OWORD *)(v234 + 32) = v265;
                      *(_OWORD *)(v234 + 48) = v266;
                      if (!v253)
                        break;
                      v253 = (v253 - 1) >> 1;
                      v254 = a1 + 96 * v253;
                      v268 = *(double *)(v254 + 32);
                      v321[0] = v268;
                      v308 = (float)(int)sub_100219A9C(v254);
                      v269 = sub_100C726E0(v321, &v308);
                      v270 = *(double *)&v317;
                      v321[0] = v270;
                      v308 = (float)(int)sub_100219A9C((uint64_t)&v315);
                      v271 = sub_100C726E0(v321, &v308);
                      if (v269 <= 0.0)
                        break;
                      v234 = (uint64_t)v263;
                    }
                    while (v269 > v271);
                    v272 = v316;
                    *v263 = v315;
                    v263[1] = v272;
                    v273 = v317;
                    v274 = v318;
                    v275 = v320;
                    v263[4] = v319;
                    v263[5] = v275;
                    v263[2] = v273;
                    v263[3] = v274;
                  }
                }
              }
              v40 = v226-- <= 2;
            }
            while (!v40);
          }
          return;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = (_OWORD *)(a1 + 96 * ((unint64_t)v11 >> 1));
        if ((unint64_t)v10 <= 0x3000)
        {
          sub_100C73FE0((uint64_t)v13, a1, (uint64_t)v8);
        }
        else
        {
          sub_100C73FE0(a1, (uint64_t)v13, (uint64_t)v8);
          v14 = 3 * v12;
          sub_100C73FE0(a1 + 96, a1 + 32 * v14 - 96, v304);
          sub_100C73FE0(a1 + 192, a1 + 96 + 32 * v14, v303);
          sub_100C73FE0(a1 + 32 * v14 - 96, (uint64_t)v13, a1 + 96 + 32 * v14);
          v15 = *(_OWORD *)(a1 + 16);
          v315 = *(_OWORD *)a1;
          v316 = v15;
          v16 = *(_OWORD *)(a1 + 32);
          v17 = *(_OWORD *)(a1 + 48);
          v18 = *(_OWORD *)(a1 + 80);
          v319 = *(_OWORD *)(a1 + 64);
          v320 = v18;
          v317 = v16;
          v318 = v17;
          v19 = v13[5];
          v21 = v13[2];
          v20 = v13[3];
          *(_OWORD *)(a1 + 64) = v13[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v21;
          *(_OWORD *)(a1 + 48) = v20;
          v22 = v13[1];
          *(_OWORD *)a1 = *v13;
          *(_OWORD *)(a1 + 16) = v22;
          v23 = v316;
          *v13 = v315;
          v13[1] = v23;
          v24 = v317;
          v25 = v318;
          v26 = v320;
          v13[4] = v319;
          v13[5] = v26;
          v13[2] = v24;
          v13[3] = v25;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v27 = *(double *)(a1 - 64);
          *(float *)&v315 = v27;
          *(float *)&v309 = (float)(int)sub_100219A9C(a1 - 96);
          v28 = sub_100C726E0((float *)&v315, (float *)&v309);
          v29 = *(double *)(a1 + 32);
          *(float *)&v315 = v29;
          *(float *)&v309 = (float)(int)sub_100219A9C(a1);
          v30 = sub_100C726E0((float *)&v315, (float *)&v309);
          if (v28 <= 0.0 || v28 <= v30)
          {
            v91 = *(_OWORD *)(a1 + 16);
            v309 = *(_OWORD *)a1;
            v310 = v91;
            v92 = *(_OWORD *)(a1 + 32);
            v93 = *(_OWORD *)(a1 + 48);
            v94 = *(_OWORD *)(a1 + 80);
            v313 = *(_OWORD *)(a1 + 64);
            v314 = v94;
            v311 = v92;
            v312 = v93;
            *(float *)&v92 = *(double *)&v92;
            LODWORD(v315) = v92;
            v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
            v95 = sub_100C726E0((float *)&v315, v321);
            v96 = *(a2 - 8);
            *(float *)&v315 = v96;
            v321[0] = (float)(int)sub_100219A9C((uint64_t)v8);
            v97 = sub_100C726E0((float *)&v315, v321);
            if (v95 <= 0.0 || v95 <= v97)
            {
              v104 = a1 + 96;
              do
              {
                v9 = v104;
                if (v104 >= (unint64_t)a2)
                  break;
                v105 = *(double *)&v311;
                *(float *)&v315 = v105;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
                v106 = sub_100C726E0((float *)&v315, v321);
                v107 = *(double *)(v9 + 32);
                *(float *)&v315 = v107;
                v321[0] = (float)(int)sub_100219A9C(v9);
                v108 = sub_100C726E0((float *)&v315, v321);
                v104 = v9 + 96;
              }
              while (v106 <= 0.0 || v106 <= v108);
            }
            else
            {
              v98 = a1 + 96;
              do
              {
                v99 = *(double *)&v311;
                *(float *)&v315 = v99;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
                v100 = sub_100C726E0((float *)&v315, v321);
                v101 = *(double *)(v98 + 32);
                *(float *)&v315 = v101;
                v321[0] = (float)(int)sub_100219A9C(v98);
                v102 = sub_100C726E0((float *)&v315, v321);
                v98 += 96;
              }
              while (v100 <= 0.0 || v100 <= v102);
              v9 = v98 - 96;
            }
            v110 = a2;
            if (v9 < (unint64_t)a2)
            {
              v111 = a2;
              do
              {
                v110 = v111 - 12;
                v112 = *(double *)&v311;
                *(float *)&v315 = v112;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
                v113 = sub_100C726E0((float *)&v315, v321);
                v114 = *(v111 - 8);
                *(float *)&v315 = v114;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)(v111 - 12));
                v115 = sub_100C726E0((float *)&v315, v321);
                v116 = v113 <= 0.0 || v113 <= v115;
                v111 -= 12;
              }
              while (!v116);
            }
            while (v9 < (unint64_t)v110)
            {
              v117 = *(_OWORD *)(v9 + 16);
              v315 = *(_OWORD *)v9;
              v316 = v117;
              v118 = *(_OWORD *)(v9 + 32);
              v119 = *(_OWORD *)(v9 + 48);
              v120 = *(_OWORD *)(v9 + 80);
              v319 = *(_OWORD *)(v9 + 64);
              v320 = v120;
              v317 = v118;
              v318 = v119;
              v121 = *((_OWORD *)v110 + 5);
              v123 = *((_OWORD *)v110 + 2);
              v122 = *((_OWORD *)v110 + 3);
              *(_OWORD *)(v9 + 64) = *((_OWORD *)v110 + 4);
              *(_OWORD *)(v9 + 80) = v121;
              *(_OWORD *)(v9 + 32) = v123;
              *(_OWORD *)(v9 + 48) = v122;
              v124 = *((_OWORD *)v110 + 1);
              *(_OWORD *)v9 = *(_OWORD *)v110;
              *(_OWORD *)(v9 + 16) = v124;
              v125 = v9 + 96;
              v126 = v316;
              *(_OWORD *)v110 = v315;
              *((_OWORD *)v110 + 1) = v126;
              v127 = v317;
              v128 = v318;
              v129 = v320;
              *((_OWORD *)v110 + 4) = v319;
              *((_OWORD *)v110 + 5) = v129;
              *((_OWORD *)v110 + 2) = v127;
              *((_OWORD *)v110 + 3) = v128;
              do
              {
                v130 = *(double *)&v311;
                *(float *)&v315 = v130;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
                v131 = sub_100C726E0((float *)&v315, v321);
                v132 = *(double *)(v125 + 32);
                *(float *)&v315 = v132;
                v321[0] = (float)(int)sub_100219A9C(v125);
                v133 = sub_100C726E0((float *)&v315, v321);
                v125 += 96;
              }
              while (v131 <= 0.0 || v131 <= v133);
              v9 = v125 - 96;
              do
              {
                v135 = v110;
                v110 -= 12;
                v136 = *(double *)&v311;
                *(float *)&v315 = v136;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
                v137 = sub_100C726E0((float *)&v315, v321);
                v138 = *(v135 - 8);
                *(float *)&v315 = v138;
                v321[0] = (float)(int)sub_100219A9C((uint64_t)v110);
                v139 = sub_100C726E0((float *)&v315, v321);
              }
              while (v137 > 0.0 && v137 > v139);
            }
            v141 = (_OWORD *)(v9 - 96);
            if (v9 - 96 != a1)
            {
              v142 = *(_OWORD *)(v9 - 80);
              *(_OWORD *)a1 = *v141;
              *(_OWORD *)(a1 + 16) = v142;
              v143 = *(_OWORD *)(v9 - 64);
              v144 = *(_OWORD *)(v9 - 48);
              v145 = *(_OWORD *)(v9 - 16);
              *(_OWORD *)(a1 + 64) = *(_OWORD *)(v9 - 32);
              *(_OWORD *)(a1 + 80) = v145;
              *(_OWORD *)(a1 + 32) = v143;
              *(_OWORD *)(a1 + 48) = v144;
            }
            a4 = 0;
            v146 = v310;
            *v141 = v309;
            *(_OWORD *)(v9 - 80) = v146;
            v147 = v311;
            v148 = v312;
            v149 = v314;
            *(_OWORD *)(v9 - 32) = v313;
            *(_OWORD *)(v9 - 16) = v149;
            *(_OWORD *)(v9 - 64) = v147;
            *(_OWORD *)(v9 - 48) = v148;
            continue;
          }
        }
        v31 = 0;
        v32 = *(_OWORD *)(a1 + 16);
        v309 = *(_OWORD *)a1;
        v310 = v32;
        v33 = *(_OWORD *)(a1 + 32);
        v34 = *(_OWORD *)(a1 + 48);
        v35 = *(_OWORD *)(a1 + 80);
        v313 = *(_OWORD *)(a1 + 64);
        v314 = v35;
        v311 = v33;
        v312 = v34;
        do
        {
          v36 = *(double *)(a1 + v31 + 128);
          *(float *)&v315 = v36;
          v321[0] = (float)(int)sub_100219A9C(a1 + v31 + 96);
          v37 = sub_100C726E0((float *)&v315, v321);
          v38 = *(double *)&v311;
          *(float *)&v315 = v38;
          v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
          v39 = sub_100C726E0((float *)&v315, v321);
          v31 += 96;
          v40 = v37 <= 0.0 || v37 <= v39;
        }
        while (!v40);
        v41 = a1 + v31;
        v42 = v306;
        if (v31 == 96)
        {
          v49 = v306;
          while (v41 < v49)
          {
            v43 = (double *)(v49 - 96);
            v50 = *(double *)(v49 - 64);
            *(float *)&v315 = v50;
            v321[0] = (float)(int)sub_100219A9C(v49 - 96);
            v51 = sub_100C726E0((float *)&v315, v321);
            v52 = *(double *)&v311;
            *(float *)&v315 = v52;
            v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
            v53 = sub_100C726E0((float *)&v315, v321);
            v54 = v51 <= 0.0 || v51 <= v53;
            v49 = (unint64_t)v43;
            if (!v54)
              goto LABEL_31;
          }
          v43 = (double *)v49;
        }
        else
        {
          do
          {
            v43 = (double *)(v42 - 96);
            v44 = *(double *)(v42 - 64);
            *(float *)&v315 = v44;
            v321[0] = (float)(int)sub_100219A9C(v42 - 96);
            v45 = sub_100C726E0((float *)&v315, v321);
            v46 = *(double *)&v311;
            *(float *)&v315 = v46;
            v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
            v47 = sub_100C726E0((float *)&v315, v321);
            v48 = v45 <= 0.0 || v45 <= v47;
            v42 = (uint64_t)v43;
          }
          while (v48);
        }
LABEL_31:
        if (v41 >= (unint64_t)v43)
        {
          v80 = (double *)(v41 - 96);
        }
        else
        {
          v55 = (double *)(a1 + v31);
          v56 = v43;
          do
          {
            v57 = *((_OWORD *)v55 + 1);
            v315 = *(_OWORD *)v55;
            v316 = v57;
            v58 = *((_OWORD *)v55 + 2);
            v59 = *((_OWORD *)v55 + 3);
            v60 = *((_OWORD *)v55 + 5);
            v319 = *((_OWORD *)v55 + 4);
            v320 = v60;
            v317 = v58;
            v318 = v59;
            v61 = *((_OWORD *)v56 + 5);
            v63 = *((_OWORD *)v56 + 2);
            v62 = *((_OWORD *)v56 + 3);
            *((_OWORD *)v55 + 4) = *((_OWORD *)v56 + 4);
            *((_OWORD *)v55 + 5) = v61;
            *((_OWORD *)v55 + 2) = v63;
            *((_OWORD *)v55 + 3) = v62;
            v64 = *((_OWORD *)v56 + 1);
            *(_OWORD *)v55 = *(_OWORD *)v56;
            *((_OWORD *)v55 + 1) = v64;
            v65 = v316;
            *(_OWORD *)v56 = v315;
            *((_OWORD *)v56 + 1) = v65;
            v66 = v317;
            v67 = v318;
            v68 = v320;
            *((_OWORD *)v56 + 4) = v319;
            *((_OWORD *)v56 + 5) = v68;
            *((_OWORD *)v56 + 2) = v66;
            *((_OWORD *)v56 + 3) = v67;
            v69 = (uint64_t)(v55 + 12);
            do
            {
              v70 = *(double *)(v69 + 32);
              *(float *)&v315 = v70;
              v321[0] = (float)(int)sub_100219A9C(v69);
              v71 = sub_100C726E0((float *)&v315, v321);
              v72 = *(double *)&v311;
              *(float *)&v315 = v72;
              v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
              v73 = sub_100C726E0((float *)&v315, v321);
              v69 += 96;
            }
            while (v71 > 0.0 && v71 > v73);
            v55 = (double *)(v69 - 96);
            do
            {
              v75 = *(v56 - 8);
              v56 -= 12;
              *(float *)&v75 = v75;
              LODWORD(v315) = LODWORD(v75);
              v321[0] = (float)(int)sub_100219A9C((uint64_t)v56);
              v76 = sub_100C726E0((float *)&v315, v321);
              v77 = *(double *)&v311;
              *(float *)&v315 = v77;
              v321[0] = (float)(int)sub_100219A9C((uint64_t)&v309);
              v78 = sub_100C726E0((float *)&v315, v321);
            }
            while (v76 <= 0.0 || v76 <= v78);
          }
          while (v55 < v56);
          v80 = (double *)(v69 - 192);
        }
        if (v80 != (double *)a1)
        {
          v81 = *((_OWORD *)v80 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v80;
          *(_OWORD *)(a1 + 16) = v81;
          v82 = *((_OWORD *)v80 + 2);
          v83 = *((_OWORD *)v80 + 3);
          v84 = *((_OWORD *)v80 + 5);
          *(_OWORD *)(a1 + 64) = *((_OWORD *)v80 + 4);
          *(_OWORD *)(a1 + 80) = v84;
          *(_OWORD *)(a1 + 32) = v82;
          *(_OWORD *)(a1 + 48) = v83;
        }
        v85 = v310;
        *(_OWORD *)v80 = v309;
        *((_OWORD *)v80 + 1) = v85;
        v86 = v311;
        v87 = v312;
        v88 = v314;
        *((_OWORD *)v80 + 4) = v313;
        *((_OWORD *)v80 + 5) = v88;
        *((_OWORD *)v80 + 2) = v86;
        *((_OWORD *)v80 + 3) = v87;
        v89 = v41 >= (unint64_t)v43;
        a2 = (double *)v306;
        if (!v89)
        {
LABEL_53:
          sub_100C72B5C(a1, v80, a3, a4 & 1);
          a4 = 0;
          v9 = (unint64_t)(v80 + 12);
          continue;
        }
        v90 = sub_100C74364(a1, (uint64_t)v80);
        v9 = (unint64_t)(v80 + 12);
        if (!sub_100C74364((uint64_t)(v80 + 12), v306))
        {
          if (v90)
            continue;
          goto LABEL_53;
        }
        a2 = v80;
        if (!v90)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 112) < *(double *)(v8 + 8))
        {
          v223 = *(_OWORD *)(v8 + 32);
          v235 = *(_OWORD *)(v8 + 48);
          v199 = *(_OWORD *)v8;
          v211 = *(_OWORD *)(v8 + 16);
          v282 = *(_QWORD *)(v8 + 112);
          v258 = *(_OWORD *)(v8 + 80);
          v270 = *(_OWORD *)(v8 + 96);
          v246 = *(_OWORD *)(v8 + 64);
          v70 = *(_OWORD *)(a2 - 40);
          v71 = *(_OWORD *)(a2 - 24);
          v72 = *(_OWORD *)(a2 - 56);
          *(_QWORD *)(v8 + 112) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 80) = v70;
          *(_OWORD *)(v8 + 96) = v71;
          *(_OWORD *)(v8 + 64) = v72;
          v73 = *(_OWORD *)(a2 - 120);
          v74 = *(_OWORD *)(a2 - 104);
          v75 = *(_OWORD *)(a2 - 72);
          *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(v8 + 48) = v75;
          *(_OWORD *)v8 = v73;
          *(_OWORD *)(v8 + 16) = v74;
          *(_OWORD *)(a2 - 72) = v235;
          *(_OWORD *)(a2 - 88) = v223;
          *(_OWORD *)(a2 - 104) = v211;
          *(_OWORD *)(a2 - 120) = v199;
          *(_QWORD *)(a2 - 8) = v282;
          *(_OWORD *)(a2 - 24) = v270;
          *(_OWORD *)(a2 - 40) = v258;
          *(_OWORD *)(a2 - 56) = v246;
        }
        return;
      case 3:
        sub_10105396C((__int128 *)v8, (__int128 *)(v8 + 120), (double *)(a2 - 120));
        return;
      case 4:
        sub_1010540B0(v8, v8 + 120, (__int128 *)(v8 + 240), (__int128 *)(a2 - 120));
        return;
      case 5:
        v76 = (__int128 *)(v8 + 120);
        v77 = (__int128 *)(v8 + 240);
        v78 = (__int128 *)(v8 + 360);
        sub_1010540B0(v8, v8 + 120, (__int128 *)(v8 + 240), (__int128 *)(v8 + 360));
        if (*(double *)(a2 - 112) < *(double *)(v8 + 368))
        {
          v247 = *(_OWORD *)(v8 + 424);
          v259 = *(_OWORD *)(v8 + 440);
          v271 = *(_OWORD *)(v8 + 456);
          v283 = *(_QWORD *)(v8 + 472);
          v200 = *v78;
          v212 = *(_OWORD *)(v8 + 376);
          v224 = *(_OWORD *)(v8 + 392);
          v236 = *(_OWORD *)(v8 + 408);
          v79 = *(_OWORD *)(a2 - 120);
          v80 = *(_OWORD *)(a2 - 104);
          v81 = *(_OWORD *)(a2 - 72);
          *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(v8 + 408) = v81;
          *v78 = v79;
          *(_OWORD *)(v8 + 376) = v80;
          v82 = *(_QWORD *)(a2 - 8);
          v83 = *(_OWORD *)(a2 - 24);
          v84 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(v8 + 440) = v84;
          *(_OWORD *)(v8 + 456) = v83;
          *(_QWORD *)(v8 + 472) = v82;
          *(_OWORD *)(a2 - 72) = v236;
          *(_OWORD *)(a2 - 88) = v224;
          *(_OWORD *)(a2 - 104) = v212;
          *(_OWORD *)(a2 - 120) = v200;
          *(_QWORD *)(a2 - 8) = v283;
          *(_OWORD *)(a2 - 24) = v271;
          *(_OWORD *)(a2 - 40) = v259;
          *(_OWORD *)(a2 - 56) = v247;
          if (*(double *)(v8 + 368) < *(double *)(v8 + 248))
          {
            v248 = *(_OWORD *)(v8 + 304);
            v260 = *(_OWORD *)(v8 + 320);
            v272 = *(_OWORD *)(v8 + 336);
            v284 = *(_QWORD *)(v8 + 352);
            v201 = *v77;
            v213 = *(_OWORD *)(v8 + 256);
            v225 = *(_OWORD *)(v8 + 272);
            v237 = *(_OWORD *)(v8 + 288);
            v85 = *v78;
            v86 = *(_OWORD *)(v8 + 376);
            v87 = *(_OWORD *)(v8 + 408);
            *(_OWORD *)(v8 + 272) = *(_OWORD *)(v8 + 392);
            *(_OWORD *)(v8 + 288) = v87;
            *v77 = v85;
            *(_OWORD *)(v8 + 256) = v86;
            v88 = *(_OWORD *)(v8 + 424);
            v89 = *(_OWORD *)(v8 + 440);
            v90 = *(_OWORD *)(v8 + 456);
            *(_QWORD *)(v8 + 352) = *(_QWORD *)(v8 + 472);
            *(_OWORD *)(v8 + 320) = v89;
            *(_OWORD *)(v8 + 336) = v90;
            *(_OWORD *)(v8 + 304) = v88;
            *(_OWORD *)(v8 + 392) = v225;
            *(_OWORD *)(v8 + 408) = v237;
            *v78 = v201;
            *(_OWORD *)(v8 + 376) = v213;
            *(_QWORD *)(v8 + 472) = v284;
            *(_OWORD *)(v8 + 440) = v260;
            *(_OWORD *)(v8 + 456) = v272;
            *(_QWORD *)&v90 = *(_QWORD *)(v8 + 248);
            *(_QWORD *)&v87 = *(_QWORD *)(v8 + 128);
            *(_OWORD *)(v8 + 424) = v248;
            if (*(double *)&v90 < *(double *)&v87)
            {
              v249 = *(_OWORD *)(v8 + 184);
              v261 = *(_OWORD *)(v8 + 200);
              v273 = *(_OWORD *)(v8 + 216);
              v285 = *(_QWORD *)(v8 + 232);
              v202 = *v76;
              v214 = *(_OWORD *)(v8 + 136);
              v226 = *(_OWORD *)(v8 + 152);
              v238 = *(_OWORD *)(v8 + 168);
              v91 = *v77;
              v92 = *(_OWORD *)(v8 + 256);
              v93 = *(_OWORD *)(v8 + 288);
              *(_OWORD *)(v8 + 152) = *(_OWORD *)(v8 + 272);
              *(_OWORD *)(v8 + 168) = v93;
              *v76 = v91;
              *(_OWORD *)(v8 + 136) = v92;
              v94 = *(_OWORD *)(v8 + 304);
              v95 = *(_OWORD *)(v8 + 320);
              v96 = *(_OWORD *)(v8 + 336);
              *(_QWORD *)(v8 + 232) = *(_QWORD *)(v8 + 352);
              *(_OWORD *)(v8 + 200) = v95;
              *(_OWORD *)(v8 + 216) = v96;
              *(_OWORD *)(v8 + 184) = v94;
              *(_OWORD *)(v8 + 272) = v226;
              *(_OWORD *)(v8 + 288) = v238;
              *v77 = v202;
              *(_OWORD *)(v8 + 256) = v214;
              *(_QWORD *)(v8 + 352) = v285;
              *(_OWORD *)(v8 + 320) = v261;
              *(_OWORD *)(v8 + 336) = v273;
              *(_QWORD *)&v96 = *(_QWORD *)(v8 + 128);
              *(_QWORD *)&v93 = *(_QWORD *)(v8 + 8);
              *(_OWORD *)(v8 + 304) = v249;
              if (*(double *)&v96 < *(double *)&v93)
              {
                v227 = *(_OWORD *)(v8 + 32);
                v239 = *(_OWORD *)(v8 + 48);
                v203 = *(_OWORD *)v8;
                v215 = *(_OWORD *)(v8 + 16);
                v286 = *(_QWORD *)(v8 + 112);
                v262 = *(_OWORD *)(v8 + 80);
                v274 = *(_OWORD *)(v8 + 96);
                v250 = *(_OWORD *)(v8 + 64);
                v97 = *(_OWORD *)(v8 + 200);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 184);
                *(_OWORD *)(v8 + 80) = v97;
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 216);
                *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 232);
                v98 = *(_OWORD *)(v8 + 136);
                *(_OWORD *)v8 = *v76;
                *(_OWORD *)(v8 + 16) = v98;
                v99 = *(_OWORD *)(v8 + 168);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 152);
                *(_OWORD *)(v8 + 48) = v99;
                *(_OWORD *)(v8 + 152) = v227;
                *(_OWORD *)(v8 + 168) = v239;
                *v76 = v203;
                *(_OWORD *)(v8 + 136) = v215;
                *(_QWORD *)(v8 + 232) = v286;
                *(_OWORD *)(v8 + 200) = v262;
                *(_OWORD *)(v8 + 216) = v274;
                *(_OWORD *)(v8 + 184) = v250;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2879)
        {
          v100 = v8 + 120;
          v102 = v8 == a2 || v100 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v105 = v100;
                v106 = *(double *)(v104 + 128);
                if (v106 < *(double *)(v104 + 8))
                {
                  v107 = *(_QWORD *)v100;
                  v108 = *(_OWORD *)(v104 + 184);
                  v251 = *(_OWORD *)(v104 + 200);
                  v263 = *(_OWORD *)(v104 + 216);
                  v275 = *(_QWORD *)(v104 + 232);
                  v204 = *(_OWORD *)(v104 + 136);
                  v216 = *(_OWORD *)(v104 + 152);
                  v109 = *(_OWORD *)(v104 + 168);
                  v110 = v103;
                  v228 = v109;
                  while (1)
                  {
                    v111 = v8 + v110;
                    v112 = *(_OWORD *)(v8 + v110 + 80);
                    *(_OWORD *)(v111 + 184) = *(_OWORD *)(v8 + v110 + 64);
                    *(_OWORD *)(v111 + 200) = v112;
                    *(_OWORD *)(v111 + 216) = *(_OWORD *)(v8 + v110 + 96);
                    v113 = *(_OWORD *)(v8 + v110 + 16);
                    *(_OWORD *)(v111 + 120) = *(_OWORD *)(v8 + v110);
                    *(_OWORD *)(v111 + 136) = v113;
                    v114 = *(_OWORD *)(v8 + v110 + 48);
                    *(_OWORD *)(v111 + 152) = *(_OWORD *)(v8 + v110 + 32);
                    *(_QWORD *)(v111 + 232) = *(_QWORD *)(v8 + v110 + 112);
                    *(_OWORD *)(v111 + 168) = v114;
                    if (!v110)
                      break;
                    v110 -= 120;
                    if (v106 >= *(double *)(v111 - 112))
                    {
                      v115 = v8 + v110 + 120;
                      goto LABEL_78;
                    }
                  }
                  v115 = v8;
LABEL_78:
                  *(_QWORD *)v115 = v107;
                  *(double *)(v115 + 8) = v106;
                  *(_OWORD *)(v115 + 80) = v251;
                  *(_OWORD *)(v115 + 96) = v263;
                  *(_QWORD *)(v115 + 112) = v275;
                  *(_OWORD *)(v115 + 16) = v204;
                  *(_OWORD *)(v115 + 32) = v216;
                  *(_OWORD *)(v115 + 48) = v228;
                  *(_OWORD *)(v115 + 64) = v108;
                }
                v100 = v105 + 120;
                v103 += 120;
                v104 = v105;
              }
              while (v105 + 120 != a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v168 = v100;
              v169 = *(double *)(a1 + 128);
              if (v169 < *(double *)(a1 + 8))
              {
                v170 = *(_QWORD *)v100;
                v254 = *(_OWORD *)(a1 + 200);
                v266 = *(_OWORD *)(a1 + 216);
                v278 = *(_QWORD *)(a1 + 232);
                v207 = *(_OWORD *)(a1 + 136);
                v219 = *(_OWORD *)(a1 + 152);
                v231 = *(_OWORD *)(a1 + 168);
                v242 = *(_OWORD *)(a1 + 184);
                do
                {
                  v171 = *(_OWORD *)(v100 - 40);
                  *(_OWORD *)(v100 + 64) = *(_OWORD *)(v100 - 56);
                  *(_OWORD *)(v100 + 80) = v171;
                  *(_OWORD *)(v100 + 96) = *(_OWORD *)(v100 - 24);
                  *(_QWORD *)(v100 + 112) = *(_QWORD *)(v100 - 8);
                  v172 = *(_OWORD *)(v100 - 104);
                  *(_OWORD *)v100 = *(_OWORD *)(v100 - 120);
                  *(_OWORD *)(v100 + 16) = v172;
                  v173 = *(_OWORD *)(v100 - 72);
                  *(_OWORD *)(v100 + 32) = *(_OWORD *)(v100 - 88);
                  *(_OWORD *)(v100 + 48) = v173;
                  v174 = *(double *)(v100 - 232);
                  v100 -= 120;
                }
                while (v169 < v174);
                *(_QWORD *)v100 = v170;
                *(double *)(v100 + 8) = v169;
                *(_OWORD *)(v100 + 32) = v219;
                *(_OWORD *)(v100 + 48) = v231;
                *(_OWORD *)(v100 + 16) = v207;
                *(_QWORD *)(v100 + 112) = v278;
                *(_OWORD *)(v100 + 80) = v254;
                *(_OWORD *)(v100 + 96) = v266;
                *(_OWORD *)(v100 + 64) = v242;
              }
              v100 = v168 + 120;
              a1 = v168;
            }
            while (v168 + 120 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 == a2)
            return;
          v116 = (unint64_t)(v10 - 2) >> 1;
          v117 = v116;
          do
          {
            v118 = v117;
            if (v116 >= v117)
            {
              v119 = (2 * v117) | 1;
              v120 = v8 + 120 * v119;
              if (2 * v117 + 2 < v10 && *(double *)(v8 + 120 * v119 + 8) < *(double *)(v120 + 128))
              {
                v120 += 120;
                v119 = 2 * v117 + 2;
              }
              v121 = *(double *)(v8 + 120 * v117 + 8);
              if (*(double *)(v120 + 8) >= v121)
              {
                v122 = v8 + 120 * v117;
                v123 = *(_QWORD *)v122;
                v217 = *(_OWORD *)(v122 + 32);
                v229 = *(_OWORD *)(v122 + 48);
                v205 = *(_OWORD *)(v122 + 16);
                v276 = *(_QWORD *)(v122 + 112);
                v252 = *(_OWORD *)(v122 + 80);
                v264 = *(_OWORD *)(v122 + 96);
                v240 = *(_OWORD *)(v122 + 64);
                do
                {
                  v124 = v122;
                  v122 = v120;
                  v125 = *(_OWORD *)v120;
                  v126 = *(_OWORD *)(v120 + 16);
                  v127 = *(_OWORD *)(v120 + 48);
                  *(_OWORD *)(v124 + 32) = *(_OWORD *)(v120 + 32);
                  *(_OWORD *)(v124 + 48) = v127;
                  *(_OWORD *)v124 = v125;
                  *(_OWORD *)(v124 + 16) = v126;
                  v128 = *(_OWORD *)(v120 + 64);
                  v129 = *(_OWORD *)(v120 + 80);
                  v130 = *(_OWORD *)(v120 + 96);
                  *(_QWORD *)(v124 + 112) = *(_QWORD *)(v120 + 112);
                  *(_OWORD *)(v124 + 80) = v129;
                  *(_OWORD *)(v124 + 96) = v130;
                  *(_OWORD *)(v124 + 64) = v128;
                  if (v116 < v119)
                    break;
                  v131 = (2 * v119) | 1;
                  v120 = v8 + 120 * v131;
                  v132 = 2 * v119 + 2;
                  if (v132 < v10 && *(double *)(v8 + 120 * v131 + 8) < *(double *)(v120 + 128))
                  {
                    v120 += 120;
                    v131 = v132;
                  }
                  v119 = v131;
                }
                while (*(double *)(v120 + 8) >= v121);
                *(_QWORD *)v122 = v123;
                *(double *)(v122 + 8) = v121;
                *(_OWORD *)(v122 + 80) = v252;
                *(_OWORD *)(v122 + 96) = v264;
                *(_QWORD *)(v122 + 112) = v276;
                *(_OWORD *)(v122 + 16) = v205;
                *(_OWORD *)(v122 + 32) = v217;
                *(_OWORD *)(v122 + 48) = v229;
                *(_OWORD *)(v122 + 64) = v240;
              }
            }
            v117 = v118 - 1;
          }
          while (v118);
          v133 = v9 / 0x78uLL;
          while (2)
          {
            v134 = 0;
            v230 = *(_OWORD *)(v8 + 32);
            v241 = *(_OWORD *)(v8 + 48);
            v206 = *(_OWORD *)v8;
            v218 = *(_OWORD *)(v8 + 16);
            v287 = *(_QWORD *)(v8 + 112);
            v265 = *(_OWORD *)(v8 + 80);
            v277 = *(_OWORD *)(v8 + 96);
            v253 = *(_OWORD *)(v8 + 64);
            v135 = v8;
            do
            {
              v136 = v135;
              v137 = v134 + 1;
              v135 += 120 * (v134 + 1);
              v138 = 2 * v134;
              v134 = (2 * v134) | 1;
              v139 = v138 + 2;
              if (v139 < v133 && *(double *)(v136 + 120 * v137 + 8) < *(double *)(v135 + 128))
              {
                v135 += 120;
                v134 = v139;
              }
              v140 = *(_OWORD *)v135;
              v141 = *(_OWORD *)(v135 + 16);
              v142 = *(_OWORD *)(v135 + 48);
              *(_OWORD *)(v136 + 32) = *(_OWORD *)(v135 + 32);
              *(_OWORD *)(v136 + 48) = v142;
              *(_OWORD *)v136 = v140;
              *(_OWORD *)(v136 + 16) = v141;
              v143 = *(_OWORD *)(v135 + 64);
              v144 = *(_OWORD *)(v135 + 80);
              v145 = *(_OWORD *)(v135 + 96);
              *(_QWORD *)(v136 + 112) = *(_QWORD *)(v135 + 112);
              *(_OWORD *)(v136 + 80) = v144;
              *(_OWORD *)(v136 + 96) = v145;
              *(_OWORD *)(v136 + 64) = v143;
            }
            while (v134 <= (uint64_t)((unint64_t)(v133 - 2) >> 1));
            a2 -= 120;
            if (v135 != a2)
            {
              v146 = *(_OWORD *)a2;
              v147 = *(_OWORD *)(a2 + 16);
              v148 = *(_OWORD *)(a2 + 48);
              *(_OWORD *)(v135 + 32) = *(_OWORD *)(a2 + 32);
              *(_OWORD *)(v135 + 48) = v148;
              *(_OWORD *)v135 = v146;
              *(_OWORD *)(v135 + 16) = v147;
              v149 = *(_OWORD *)(a2 + 64);
              v150 = *(_OWORD *)(a2 + 80);
              v151 = *(_OWORD *)(a2 + 96);
              *(_QWORD *)(v135 + 112) = *(_QWORD *)(a2 + 112);
              *(_OWORD *)(v135 + 80) = v150;
              *(_OWORD *)(v135 + 96) = v151;
              *(_OWORD *)(v135 + 64) = v149;
              *(_QWORD *)(a2 + 112) = v287;
              *(_OWORD *)(a2 + 80) = v265;
              *(_OWORD *)(a2 + 96) = v277;
              *(_OWORD *)(a2 + 64) = v253;
              *(_OWORD *)(a2 + 32) = v230;
              *(_OWORD *)(a2 + 48) = v241;
              *(_OWORD *)a2 = v206;
              *(_OWORD *)(a2 + 16) = v218;
              v152 = v135 - v8 + 120;
              if (v152 >= 121)
              {
                v153 = (v152 / 0x78uLL - 2) >> 1;
                v154 = *(double *)(v135 + 8);
                if (*(double *)(v8 + 120 * v153 + 8) < v154)
                {
                  v155 = *(_QWORD *)v135;
                  v180 = *(_OWORD *)(v135 + 32);
                  v183 = *(_OWORD *)(v135 + 48);
                  v177 = *(_OWORD *)(v135 + 16);
                  v195 = *(_QWORD *)(v135 + 112);
                  v189 = *(_OWORD *)(v135 + 80);
                  v192 = *(_OWORD *)(v135 + 96);
                  v186 = *(_OWORD *)(v135 + 64);
                  do
                  {
                    v156 = v135;
                    v135 = v8 + 120 * v153;
                    v157 = *(_OWORD *)v135;
                    v158 = *(_OWORD *)(v135 + 16);
                    v159 = *(_OWORD *)(v135 + 48);
                    *(_OWORD *)(v156 + 32) = *(_OWORD *)(v135 + 32);
                    *(_OWORD *)(v156 + 48) = v159;
                    *(_OWORD *)v156 = v157;
                    *(_OWORD *)(v156 + 16) = v158;
                    v160 = *(_OWORD *)(v135 + 64);
                    v161 = *(_OWORD *)(v135 + 80);
                    v162 = *(_OWORD *)(v135 + 96);
                    *(_QWORD *)(v156 + 112) = *(_QWORD *)(v135 + 112);
                    *(_OWORD *)(v156 + 80) = v161;
                    *(_OWORD *)(v156 + 96) = v162;
                    *(_OWORD *)(v156 + 64) = v160;
                    if (!v153)
                      break;
                    v153 = (v153 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 120 * v153 + 8) < v154);
                  *(_QWORD *)v135 = v155;
                  *(double *)(v135 + 8) = v154;
                  *(_OWORD *)(v135 + 32) = v180;
                  *(_OWORD *)(v135 + 48) = v183;
                  *(_OWORD *)(v135 + 16) = v177;
                  v163 = v186;
                  v164 = v189;
                  v165 = v192;
                  v166 = v195;
LABEL_110:
                  *(_QWORD *)(v135 + 112) = v166;
                  *(_OWORD *)(v135 + 80) = v164;
                  *(_OWORD *)(v135 + 96) = v165;
                  *(_OWORD *)(v135 + 64) = v163;
                }
              }
              if (v133-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)(v135 + 32) = v230;
          *(_OWORD *)(v135 + 48) = v241;
          *(_OWORD *)v135 = v206;
          *(_OWORD *)(v135 + 16) = v218;
          v163 = v253;
          v164 = v265;
          v165 = v277;
          v166 = v287;
          goto LABEL_110;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 120 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x3C01)
        {
          sub_10105396C((__int128 *)v12, (__int128 *)a1, (double *)(a2 - 120));
        }
        else
        {
          sub_10105396C((__int128 *)a1, (__int128 *)v12, (double *)(a2 - 120));
          v13 = 120 * v11;
          v14 = (__int128 *)(120 * v11 + a1 - 120);
          sub_10105396C((__int128 *)(a1 + 120), v14, (double *)(a2 - 240));
          v15 = (__int128 *)(a1 + 120 + v13);
          sub_10105396C((__int128 *)(a1 + 240), v15, (double *)(a2 - 360));
          sub_10105396C(v14, (__int128 *)v12, (double *)v15);
          v220 = *(_OWORD *)(a1 + 32);
          v232 = *(_OWORD *)(a1 + 48);
          v196 = *(_OWORD *)a1;
          v208 = *(_OWORD *)(a1 + 16);
          v279 = *(_QWORD *)(a1 + 112);
          v255 = *(_OWORD *)(a1 + 80);
          v267 = *(_OWORD *)(a1 + 96);
          v243 = *(_OWORD *)(a1 + 64);
          v17 = *(_OWORD *)(v12 + 80);
          v16 = *(_OWORD *)(v12 + 96);
          v18 = *(_OWORD *)(v12 + 64);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 + 112);
          *(_OWORD *)(a1 + 80) = v17;
          *(_OWORD *)(a1 + 96) = v16;
          *(_OWORD *)(a1 + 64) = v18;
          v19 = *(_OWORD *)v12;
          v20 = *(_OWORD *)(v12 + 16);
          v21 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(a1 + 48) = v21;
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          *(_OWORD *)(v12 + 32) = v220;
          *(_OWORD *)(v12 + 48) = v232;
          *(_OWORD *)v12 = v196;
          *(_OWORD *)(v12 + 16) = v208;
          *(_QWORD *)(v12 + 112) = v279;
          *(_OWORD *)(v12 + 80) = v255;
          *(_OWORD *)(v12 + 96) = v267;
          *(_OWORD *)(v12 + 64) = v243;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 112) < v22)
            goto LABEL_11;
          v48 = *(_QWORD *)a1;
          v194 = *(_QWORD *)(a1 + 112);
          v176 = *(_OWORD *)(a1 + 16);
          v179 = *(_OWORD *)(a1 + 32);
          v188 = *(_OWORD *)(a1 + 80);
          v191 = *(_OWORD *)(a1 + 96);
          v182 = *(_OWORD *)(a1 + 48);
          v185 = *(_OWORD *)(a1 + 64);
          if (v22 >= *(double *)(a2 - 112))
          {
            v51 = a1 + 120;
            do
            {
              v8 = v51;
              if (v51 >= a2)
                break;
              v52 = *(double *)(v51 + 8);
              v51 += 120;
            }
            while (v22 >= v52);
          }
          else
          {
            v49 = a1;
            do
            {
              v8 = v49 + 120;
              v50 = *(double *)(v49 + 128);
              v49 += 120;
            }
            while (v22 >= v50);
          }
          v53 = a2;
          if (v8 < a2)
          {
            v54 = a2;
            do
            {
              v53 = v54 - 120;
              v55 = *(double *)(v54 - 112);
              v54 -= 120;
            }
            while (v22 < v55);
          }
          while (v8 < v53)
          {
            v222 = *(_OWORD *)(v8 + 32);
            v234 = *(_OWORD *)(v8 + 48);
            v198 = *(_OWORD *)v8;
            v210 = *(_OWORD *)(v8 + 16);
            v281 = *(_QWORD *)(v8 + 112);
            v257 = *(_OWORD *)(v8 + 80);
            v269 = *(_OWORD *)(v8 + 96);
            v245 = *(_OWORD *)(v8 + 64);
            v57 = *(_OWORD *)(v53 + 80);
            v56 = *(_OWORD *)(v53 + 96);
            v58 = *(_OWORD *)(v53 + 64);
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v53 + 112);
            *(_OWORD *)(v8 + 80) = v57;
            *(_OWORD *)(v8 + 96) = v56;
            *(_OWORD *)(v8 + 64) = v58;
            v59 = *(_OWORD *)v53;
            v60 = *(_OWORD *)(v53 + 16);
            v61 = *(_OWORD *)(v53 + 48);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(v53 + 32);
            *(_OWORD *)(v8 + 48) = v61;
            *(_OWORD *)v8 = v59;
            *(_OWORD *)(v8 + 16) = v60;
            *(_OWORD *)(v53 + 32) = v222;
            *(_OWORD *)(v53 + 48) = v234;
            *(_OWORD *)v53 = v198;
            *(_OWORD *)(v53 + 16) = v210;
            *(_QWORD *)(v53 + 112) = v281;
            *(_OWORD *)(v53 + 80) = v257;
            *(_OWORD *)(v53 + 96) = v269;
            *(_OWORD *)(v53 + 64) = v245;
            do
            {
              v62 = *(double *)(v8 + 128);
              v8 += 120;
            }
            while (v22 >= v62);
            do
            {
              v63 = *(double *)(v53 - 112);
              v53 -= 120;
            }
            while (v22 < v63);
          }
          if (v8 - 120 != a1)
          {
            v64 = *(_OWORD *)(v8 - 120);
            v65 = *(_OWORD *)(v8 - 104);
            v66 = *(_OWORD *)(v8 - 72);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 88);
            *(_OWORD *)(a1 + 48) = v66;
            *(_OWORD *)a1 = v64;
            *(_OWORD *)(a1 + 16) = v65;
            v67 = *(_OWORD *)(v8 - 56);
            v68 = *(_OWORD *)(v8 - 40);
            v69 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 80) = v68;
            *(_OWORD *)(a1 + 96) = v69;
            *(_OWORD *)(a1 + 64) = v67;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 120) = v48;
          *(double *)(v8 - 112) = v22;
          *(_OWORD *)(v8 - 72) = v182;
          *(_OWORD *)(v8 - 88) = v179;
          *(_OWORD *)(v8 - 104) = v176;
          *(_QWORD *)(v8 - 8) = v194;
          *(_OWORD *)(v8 - 24) = v191;
          *(_OWORD *)(v8 - 40) = v188;
          *(_OWORD *)(v8 - 56) = v185;
          continue;
        }
        v22 = *(double *)(a1 + 8);
LABEL_11:
        v23 = 0;
        v24 = *(_QWORD *)a1;
        v193 = *(_QWORD *)(a1 + 112);
        v181 = *(_OWORD *)(a1 + 48);
        v184 = *(_OWORD *)(a1 + 64);
        v187 = *(_OWORD *)(a1 + 80);
        v190 = *(_OWORD *)(a1 + 96);
        v175 = *(_OWORD *)(a1 + 16);
        v178 = *(_OWORD *)(a1 + 32);
        do
        {
          v25 = *(double *)(a1 + v23 + 128);
          v23 += 120;
        }
        while (v25 < v22);
        v26 = a1 + v23;
        v27 = a2;
        if (v23 == 120)
        {
          v30 = a2;
          while (v26 < v30)
          {
            v28 = v30 - 120;
            v31 = *(double *)(v30 - 112);
            v30 -= 120;
            if (v31 < v22)
              goto LABEL_21;
          }
          v28 = v30;
        }
        else
        {
          do
          {
            v28 = v27 - 120;
            v29 = *(double *)(v27 - 112);
            v27 -= 120;
          }
          while (v29 >= v22);
        }
LABEL_21:
        v8 = v26;
        if (v26 < v28)
        {
          v32 = v28;
          do
          {
            v221 = *(_OWORD *)(v8 + 32);
            v233 = *(_OWORD *)(v8 + 48);
            v197 = *(_OWORD *)v8;
            v209 = *(_OWORD *)(v8 + 16);
            v280 = *(_QWORD *)(v8 + 112);
            v256 = *(_OWORD *)(v8 + 80);
            v268 = *(_OWORD *)(v8 + 96);
            v244 = *(_OWORD *)(v8 + 64);
            v34 = *(_OWORD *)(v32 + 80);
            v33 = *(_OWORD *)(v32 + 96);
            v35 = *(_OWORD *)(v32 + 64);
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v32 + 112);
            *(_OWORD *)(v8 + 80) = v34;
            *(_OWORD *)(v8 + 96) = v33;
            *(_OWORD *)(v8 + 64) = v35;
            v36 = *(_OWORD *)v32;
            v37 = *(_OWORD *)(v32 + 16);
            v38 = *(_OWORD *)(v32 + 48);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(v32 + 32);
            *(_OWORD *)(v8 + 48) = v38;
            *(_OWORD *)v8 = v36;
            *(_OWORD *)(v8 + 16) = v37;
            *(_OWORD *)(v32 + 32) = v221;
            *(_OWORD *)(v32 + 48) = v233;
            *(_OWORD *)v32 = v197;
            *(_OWORD *)(v32 + 16) = v209;
            *(_QWORD *)(v32 + 112) = v280;
            *(_OWORD *)(v32 + 80) = v256;
            *(_OWORD *)(v32 + 96) = v268;
            *(_OWORD *)(v32 + 64) = v244;
            do
            {
              v39 = *(double *)(v8 + 128);
              v8 += 120;
            }
            while (v39 < v22);
            do
            {
              v40 = *(double *)(v32 - 112);
              v32 -= 120;
            }
            while (v40 >= v22);
          }
          while (v8 < v32);
        }
        if (v8 - 120 != a1)
        {
          v41 = *(_OWORD *)(v8 - 120);
          v42 = *(_OWORD *)(v8 - 104);
          v43 = *(_OWORD *)(v8 - 72);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 88);
          *(_OWORD *)(a1 + 48) = v43;
          *(_OWORD *)a1 = v41;
          *(_OWORD *)(a1 + 16) = v42;
          v44 = *(_OWORD *)(v8 - 56);
          v45 = *(_OWORD *)(v8 - 40);
          v46 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 80) = v45;
          *(_OWORD *)(a1 + 96) = v46;
          *(_OWORD *)(a1 + 64) = v44;
        }
        *(_QWORD *)(v8 - 120) = v24;
        *(double *)(v8 - 112) = v22;
        *(_OWORD *)(v8 - 72) = v181;
        *(_OWORD *)(v8 - 88) = v178;
        *(_OWORD *)(v8 - 104) = v175;
        *(_QWORD *)(v8 - 8) = v193;
        *(_OWORD *)(v8 - 24) = v190;
        *(_OWORD *)(v8 - 40) = v187;
        *(_OWORD *)(v8 - 56) = v184;
        if (v26 < v28)
        {
LABEL_32:
          sub_101052B50(a1, v8 - 120, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v47 = sub_101053BF4(a1, v8 - 120);
        if (!sub_101053BF4(v8, a2))
        {
          if (v47)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 120;
        if (!v47)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        v39 = *(double *)(a2 - 24);
        v38 = a2 - 24;
        if (v39 < *(double *)v8)
        {
          *(_QWORD *)&v96[16] = *(_QWORD *)(v8 + 16);
          *(_OWORD *)v96 = *(_OWORD *)v8;
          v40 = *(_OWORD *)v38;
          *(_QWORD *)(v8 + 13) = *(_QWORD *)(v38 + 13);
          *(_OWORD *)v8 = v40;
          *(_QWORD *)(v38 + 13) = *(_QWORD *)&v96[13];
          *(_OWORD *)v38 = *(_OWORD *)v96;
        }
        return;
      case 3:
        sub_100C315A8((__int128 *)v8, (__int128 *)(v8 + 24), (__int128 *)(a2 - 24));
        return;
      case 4:
        sub_100C3198C(v8, v8 + 24, v8 + 48, (unint64_t *)(a2 - 24));
        return;
      case 5:
        v41 = (_OWORD *)(v8 + 24);
        v42 = (_OWORD *)(v8 + 48);
        v43 = (_OWORD *)(v8 + 72);
        sub_100C3198C(v8, v8 + 24, v8 + 48, (unint64_t *)(v8 + 72));
        v45 = *(double *)(a2 - 24);
        v44 = a2 - 24;
        if (v45 < *(double *)(v8 + 72))
        {
          *(_OWORD *)v97 = *v43;
          v46 = *v43;
          *(_QWORD *)&v97[16] = *(_QWORD *)(v8 + 88);
          v47 = *(_QWORD *)(v44 + 13);
          *v43 = *(_OWORD *)v44;
          *(_QWORD *)(v8 + 85) = v47;
          *(_QWORD *)(v44 + 13) = *(_QWORD *)&v97[13];
          *(_OWORD *)v44 = v46;
          if (*(double *)v43 < *(double *)v42)
          {
            *(_OWORD *)v98 = *v42;
            v48 = *v42;
            *(_QWORD *)&v98[16] = *(_QWORD *)(v8 + 64);
            *v42 = *v43;
            *(_QWORD *)(v8 + 61) = *(_QWORD *)(v8 + 85);
            *v43 = v48;
            *(_QWORD *)(v8 + 85) = *(_QWORD *)&v98[13];
            if (*(double *)v42 < *(double *)v41)
            {
              *(_OWORD *)v99 = *v41;
              v49 = *v41;
              *(_QWORD *)&v99[16] = *(_QWORD *)(v8 + 40);
              *v41 = *v42;
              *(_QWORD *)(v8 + 37) = *(_QWORD *)(v8 + 61);
              *v42 = v49;
              *(_QWORD *)(v8 + 61) = *(_QWORD *)&v99[13];
              if (*(double *)(v8 + 24) < *(double *)v8)
              {
                *(_QWORD *)&v100[16] = *(_QWORD *)(v8 + 16);
                *(_OWORD *)v100 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v41;
                *(_QWORD *)(v8 + 13) = *(_QWORD *)(v8 + 37);
                *v41 = *(_OWORD *)v100;
                *(_QWORD *)(v8 + 37) = *(_QWORD *)&v100[13];
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v50 = v8 + 24;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 0;
              v54 = v8;
              do
              {
                v55 = v50;
                v56 = *(double *)(v54 + 24);
                if (v56 < *(double *)v54)
                {
                  v101 = *(_OWORD *)(v54 + 32);
                  v57 = v53;
                  while (1)
                  {
                    v58 = v8 + v57;
                    *(_OWORD *)(v58 + 24) = *(_OWORD *)(v8 + v57);
                    *(_QWORD *)(v58 + 37) = *(_QWORD *)(v8 + v57 + 13);
                    if (!v57)
                      break;
                    v57 -= 24;
                    if (v56 >= *(double *)(v58 - 24))
                    {
                      v59 = v8 + v57 + 24;
                      goto LABEL_75;
                    }
                  }
                  v59 = v8;
LABEL_75:
                  *(double *)v59 = v56;
                  *(_QWORD *)(v59 + 8) = v101;
                  *(_QWORD *)(v59 + 13) = *(_QWORD *)((char *)&v101 + 5);
                }
                v50 = v55 + 24;
                v53 += 24;
                v54 = v55;
              }
              while (v55 + 24 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v86 = v50;
              v87 = *(double *)(a1 + 24);
              if (v87 < *(double *)a1)
              {
                v104 = *(_OWORD *)(a1 + 32);
                v88 = v50;
                do
                {
                  *(_OWORD *)v88 = *(_OWORD *)(v88 - 24);
                  *(_QWORD *)(v88 + 13) = *(_QWORD *)(v88 - 11);
                  v89 = *(double *)(v88 - 48);
                  v88 -= 24;
                }
                while (v87 < v89);
                *(double *)v88 = v87;
                *(_QWORD *)(v88 + 13) = *(_QWORD *)((char *)&v104 + 5);
                *(_QWORD *)(v88 + 8) = v104;
              }
              v50 += 24;
              a1 = v86;
            }
            while (v86 + 24 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = v8 + 24 * v63;
                if (2 * v62 + 2 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                {
                  v64 += 24;
                  v63 = 2 * v62 + 2;
                }
                v65 = v8 + 24 * v62;
                v66 = *(double *)v65;
                if (*(double *)v64 >= *(double *)v65)
                {
                  v102 = *(_OWORD *)(v65 + 8);
                  do
                  {
                    v67 = v65;
                    v65 = v64;
                    v68 = *(_OWORD *)v64;
                    *(_QWORD *)(v67 + 13) = *(_QWORD *)(v64 + 13);
                    *(_OWORD *)v67 = v68;
                    if (v60 < v63)
                      break;
                    v69 = 2 * v63;
                    v63 = (2 * v63) | 1;
                    v64 = v8 + 24 * v63;
                    v70 = v69 + 2;
                    if (v70 < v10 && *(double *)v64 < *(double *)(v64 + 24))
                    {
                      v64 += 24;
                      v63 = v70;
                    }
                  }
                  while (*(double *)v64 >= v66);
                  *(double *)v65 = v66;
                  *(_QWORD *)(v65 + 8) = v102;
                  *(_QWORD *)(v65 + 13) = *(_QWORD *)((char *)&v102 + 5);
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            v71 = v9 / 0x18uLL;
            do
            {
              v72 = 0;
              *(_QWORD *)&v103[16] = *(_QWORD *)(v8 + 16);
              *(_OWORD *)v103 = *(_OWORD *)v8;
              v73 = v8;
              do
              {
                v74 = v73;
                v73 += 24 * v72 + 24;
                v75 = 2 * v72;
                v72 = (2 * v72) | 1;
                v76 = v75 + 2;
                if (v76 < v71 && *(double *)v73 < *(double *)(v73 + 24))
                {
                  v73 += 24;
                  v72 = v76;
                }
                v77 = *(_OWORD *)v73;
                *(_QWORD *)(v74 + 13) = *(_QWORD *)(v73 + 13);
                *(_OWORD *)v74 = v77;
              }
              while (v72 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              a2 -= 24;
              if (v73 == a2)
              {
                *(_QWORD *)(v73 + 13) = *(_QWORD *)&v103[13];
                *(_OWORD *)v73 = *(_OWORD *)v103;
              }
              else
              {
                v78 = *(_OWORD *)a2;
                *(_QWORD *)(v73 + 13) = *(_QWORD *)(a2 + 13);
                *(_OWORD *)v73 = v78;
                *(_QWORD *)(a2 + 13) = *(_QWORD *)&v103[13];
                *(_OWORD *)a2 = *(_OWORD *)v103;
                v79 = v73 - v8 + 24;
                if (v79 >= 25)
                {
                  v80 = (v79 / 0x18uLL - 2) >> 1;
                  v81 = v8 + 24 * v80;
                  v82 = *(double *)v73;
                  if (*(double *)v81 < *(double *)v73)
                  {
                    v92 = *(_OWORD *)(v73 + 8);
                    do
                    {
                      v83 = v73;
                      v73 = v81;
                      v84 = *(_OWORD *)v81;
                      *(_QWORD *)(v83 + 13) = *(_QWORD *)(v81 + 13);
                      *(_OWORD *)v83 = v84;
                      if (!v80)
                        break;
                      v80 = (v80 - 1) >> 1;
                      v81 = v8 + 24 * v80;
                    }
                    while (*(double *)v81 < v82);
                    *(double *)v73 = v82;
                    *(_QWORD *)(v73 + 8) = v92;
                    *(_QWORD *)(v73 + 13) = *(_QWORD *)((char *)&v92 + 5);
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_100C315A8((__int128 *)(a1 + 24 * v11), (__int128 *)a1, (__int128 *)(a2 - 24));
        }
        else
        {
          sub_100C315A8((__int128 *)a1, (__int128 *)(a1 + 24 * v11), (__int128 *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (__int128 *)(a1 + 24 * v11 - 24);
          sub_100C315A8((__int128 *)(a1 + 24), v14, (__int128 *)(a2 - 48));
          v15 = (__int128 *)(a1 + 24 + 8 * v13);
          sub_100C315A8((__int128 *)(a1 + 48), v15, (__int128 *)(a2 - 72));
          sub_100C315A8(v14, (__int128 *)v12, v15);
          *(_QWORD *)&v93[16] = *(_QWORD *)(a1 + 16);
          *(_OWORD *)v93 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 13);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 13) = v16;
          *(_QWORD *)(v12 + 13) = *(_QWORD *)&v93[13];
          *(_OWORD *)v12 = *(_OWORD *)v93;
        }
        --a3;
        v17 = *(double *)a1;
        if ((a4 & 1) == 0 && *(double *)(a1 - 24) >= v17)
        {
          v91 = *(_OWORD *)(a1 + 8);
          if (v17 >= *(double *)(a2 - 24))
          {
            v31 = a1 + 24;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              v31 += 24;
            }
            while (v17 >= *(double *)v8);
          }
          else
          {
            v8 = a1;
            do
            {
              v30 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v30);
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
            {
              v33 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v33);
          }
          while (v8 < v32)
          {
            *(_QWORD *)&v95[16] = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v95 = *(_OWORD *)v8;
            v34 = *(_OWORD *)v32;
            *(_QWORD *)(v8 + 13) = *(_QWORD *)(v32 + 13);
            *(_OWORD *)v8 = v34;
            *(_QWORD *)(v32 + 13) = *(_QWORD *)&v95[13];
            *(_OWORD *)v32 = *(_OWORD *)v95;
            do
            {
              v35 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v17 >= v35);
            do
            {
              v36 = *(double *)(v32 - 24);
              v32 -= 24;
            }
            while (v17 < v36);
          }
          if (v8 - 24 != a1)
          {
            v37 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 13) = *(_QWORD *)(v8 - 11);
            *(_OWORD *)a1 = v37;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v17;
          *(_QWORD *)(v8 - 11) = *(_QWORD *)((char *)&v91 + 5);
          *(_QWORD *)(v8 - 16) = v91;
          continue;
        }
        v18 = 0;
        v90 = *(_OWORD *)(a1 + 8);
        do
        {
          v19 = *(double *)(a1 + v18 + 24);
          v18 += 24;
        }
        while (v19 < v17);
        v20 = a1 + v18;
        v21 = a2;
        if (v18 == 24)
        {
          v21 = a2;
          do
          {
            if (v20 >= v21)
              break;
            v23 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v23 >= v17);
        }
        else
        {
          do
          {
            v22 = *(double *)(v21 - 24);
            v21 -= 24;
          }
          while (v22 >= v17);
        }
        v8 = a1 + v18;
        if (v20 < v21)
        {
          v24 = v21;
          do
          {
            *(_QWORD *)&v94[16] = *(_QWORD *)(v8 + 16);
            *(_OWORD *)v94 = *(_OWORD *)v8;
            v25 = *(_OWORD *)v24;
            *(_QWORD *)(v8 + 13) = *(_QWORD *)(v24 + 13);
            *(_OWORD *)v8 = v25;
            *(_QWORD *)(v24 + 13) = *(_QWORD *)&v94[13];
            *(_OWORD *)v24 = *(_OWORD *)v94;
            do
            {
              v26 = *(double *)(v8 + 24);
              v8 += 24;
            }
            while (v26 < v17);
            do
            {
              v27 = *(double *)(v24 - 24);
              v24 -= 24;
            }
            while (v27 >= v17);
          }
          while (v8 < v24);
        }
        if (v8 - 24 != a1)
        {
          v28 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 13) = *(_QWORD *)(v8 - 11);
          *(_OWORD *)a1 = v28;
        }
        *(double *)(v8 - 24) = v17;
        *(_QWORD *)(v8 - 11) = *(_QWORD *)((char *)&v90 + 5);
        *(_QWORD *)(v8 - 16) = v90;
        if (v20 < v21)
        {
LABEL_29:
          sub_101054284(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v29 = sub_101054B4C(a1, v8 - 24);
        if (!sub_101054B4C(v8, a2))
        {
          if (v29)
            continue;
          goto LABEL_29;
        }
        a2 = v8 - 24;
        if (!v29)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 88) > *(double *)(v8 + 32))
        {
          v220 = *(_OWORD *)(v8 + 32);
          v232 = *(_OWORD *)(v8 + 48);
          v196 = *(_OWORD *)v8;
          v208 = *(_OWORD *)(v8 + 16);
          v274 = *(_QWORD *)(v8 + 112);
          v256 = *(_OWORD *)(v8 + 80);
          v265 = *(_OWORD *)(v8 + 96);
          v244 = *(_OWORD *)(v8 + 64);
          v70 = *(_OWORD *)(a2 - 40);
          v71 = *(_OWORD *)(a2 - 24);
          v72 = *(_OWORD *)(a2 - 56);
          *(_QWORD *)(v8 + 112) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)(v8 + 80) = v70;
          *(_OWORD *)(v8 + 96) = v71;
          *(_OWORD *)(v8 + 64) = v72;
          v73 = *(_OWORD *)(a2 - 120);
          v74 = *(_OWORD *)(a2 - 104);
          v75 = *(_OWORD *)(a2 - 72);
          *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(v8 + 48) = v75;
          *(_OWORD *)v8 = v73;
          *(_OWORD *)(v8 + 16) = v74;
          *(_OWORD *)(a2 - 72) = v232;
          *(_OWORD *)(a2 - 88) = v220;
          *(_OWORD *)(a2 - 104) = v208;
          *(_OWORD *)(a2 - 120) = v196;
          *(_QWORD *)(a2 - 8) = v274;
          *(_OWORD *)(a2 - 24) = v265;
          *(_OWORD *)(a2 - 40) = v256;
          *(_OWORD *)(a2 - 56) = v244;
        }
        return;
      case 3:
        sub_101055BE8((__int128 *)v8, (__int128 *)(v8 + 120), (double *)(a2 - 120));
        return;
      case 4:
        sub_101056334(v8, v8 + 120, (__int128 *)(v8 + 240), (__int128 *)(a2 - 120));
        return;
      case 5:
        v76 = (__int128 *)(v8 + 120);
        v77 = (__int128 *)(v8 + 240);
        v78 = (__int128 *)(v8 + 360);
        sub_101056334(v8, v8 + 120, (__int128 *)(v8 + 240), (__int128 *)(v8 + 360));
        if (*(double *)(a2 - 88) > *(double *)(v8 + 392))
        {
          v245 = *(_OWORD *)(v8 + 424);
          v257 = *(_OWORD *)(v8 + 440);
          v266 = *(_OWORD *)(v8 + 456);
          v275 = *(_QWORD *)(v8 + 472);
          v197 = *v78;
          v209 = *(_OWORD *)(v8 + 376);
          v221 = *(_OWORD *)(v8 + 392);
          v233 = *(_OWORD *)(v8 + 408);
          v79 = *(_OWORD *)(a2 - 120);
          v80 = *(_OWORD *)(a2 - 104);
          v81 = *(_OWORD *)(a2 - 72);
          *(_OWORD *)(v8 + 392) = *(_OWORD *)(a2 - 88);
          *(_OWORD *)(v8 + 408) = v81;
          *v78 = v79;
          *(_OWORD *)(v8 + 376) = v80;
          v82 = *(_QWORD *)(a2 - 8);
          v83 = *(_OWORD *)(a2 - 24);
          v84 = *(_OWORD *)(a2 - 40);
          *(_OWORD *)(v8 + 424) = *(_OWORD *)(a2 - 56);
          *(_OWORD *)(v8 + 440) = v84;
          *(_OWORD *)(v8 + 456) = v83;
          *(_QWORD *)(v8 + 472) = v82;
          *(_OWORD *)(a2 - 72) = v233;
          *(_OWORD *)(a2 - 88) = v221;
          *(_OWORD *)(a2 - 104) = v209;
          *(_OWORD *)(a2 - 120) = v197;
          *(_QWORD *)(a2 - 8) = v275;
          *(_OWORD *)(a2 - 24) = v266;
          *(_OWORD *)(a2 - 40) = v257;
          *(_OWORD *)(a2 - 56) = v245;
          if (*(double *)(v8 + 392) > *(double *)(v8 + 272))
          {
            v246 = *(_OWORD *)(v8 + 304);
            v258 = *(_OWORD *)(v8 + 320);
            v267 = *(_OWORD *)(v8 + 336);
            v276 = *(_QWORD *)(v8 + 352);
            v198 = *v77;
            v210 = *(_OWORD *)(v8 + 256);
            v222 = *(_OWORD *)(v8 + 272);
            v234 = *(_OWORD *)(v8 + 288);
            v85 = *v78;
            v86 = *(_OWORD *)(v8 + 376);
            v87 = *(_OWORD *)(v8 + 408);
            *(_OWORD *)(v8 + 272) = *(_OWORD *)(v8 + 392);
            *(_OWORD *)(v8 + 288) = v87;
            *v77 = v85;
            *(_OWORD *)(v8 + 256) = v86;
            v88 = *(_OWORD *)(v8 + 424);
            v89 = *(_OWORD *)(v8 + 440);
            v90 = *(_OWORD *)(v8 + 456);
            *(_QWORD *)(v8 + 352) = *(_QWORD *)(v8 + 472);
            *(_OWORD *)(v8 + 320) = v89;
            *(_OWORD *)(v8 + 336) = v90;
            *(_OWORD *)(v8 + 304) = v88;
            *(_OWORD *)(v8 + 392) = v222;
            *(_OWORD *)(v8 + 408) = v234;
            *v78 = v198;
            *(_OWORD *)(v8 + 376) = v210;
            *(_QWORD *)(v8 + 472) = v276;
            *(_OWORD *)(v8 + 440) = v258;
            *(_OWORD *)(v8 + 456) = v267;
            *(_QWORD *)&v90 = *(_QWORD *)(v8 + 272);
            *(_QWORD *)&v87 = *(_QWORD *)(v8 + 152);
            *(_OWORD *)(v8 + 424) = v246;
            if (*(double *)&v90 > *(double *)&v87)
            {
              v247 = *(_OWORD *)(v8 + 184);
              v259 = *(_OWORD *)(v8 + 200);
              v268 = *(_OWORD *)(v8 + 216);
              v277 = *(_QWORD *)(v8 + 232);
              v199 = *v76;
              v211 = *(_OWORD *)(v8 + 136);
              v223 = *(_OWORD *)(v8 + 152);
              v235 = *(_OWORD *)(v8 + 168);
              v91 = *v77;
              v92 = *(_OWORD *)(v8 + 256);
              v93 = *(_OWORD *)(v8 + 288);
              *(_OWORD *)(v8 + 152) = *(_OWORD *)(v8 + 272);
              *(_OWORD *)(v8 + 168) = v93;
              *v76 = v91;
              *(_OWORD *)(v8 + 136) = v92;
              v94 = *(_OWORD *)(v8 + 304);
              v95 = *(_OWORD *)(v8 + 320);
              v96 = *(_OWORD *)(v8 + 336);
              *(_QWORD *)(v8 + 232) = *(_QWORD *)(v8 + 352);
              *(_OWORD *)(v8 + 200) = v95;
              *(_OWORD *)(v8 + 216) = v96;
              *(_OWORD *)(v8 + 184) = v94;
              *(_OWORD *)(v8 + 272) = v223;
              *(_OWORD *)(v8 + 288) = v235;
              *v77 = v199;
              *(_OWORD *)(v8 + 256) = v211;
              *(_QWORD *)(v8 + 352) = v277;
              *(_OWORD *)(v8 + 320) = v259;
              *(_OWORD *)(v8 + 336) = v268;
              *(_QWORD *)&v96 = *(_QWORD *)(v8 + 152);
              *(_QWORD *)&v93 = *(_QWORD *)(v8 + 32);
              *(_OWORD *)(v8 + 304) = v247;
              if (*(double *)&v96 > *(double *)&v93)
              {
                v224 = *(_OWORD *)(v8 + 32);
                v236 = *(_OWORD *)(v8 + 48);
                v200 = *(_OWORD *)v8;
                v212 = *(_OWORD *)(v8 + 16);
                v278 = *(_QWORD *)(v8 + 112);
                v260 = *(_OWORD *)(v8 + 80);
                v269 = *(_OWORD *)(v8 + 96);
                v248 = *(_OWORD *)(v8 + 64);
                v97 = *(_OWORD *)(v8 + 200);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 184);
                *(_OWORD *)(v8 + 80) = v97;
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 216);
                *(_QWORD *)(v8 + 112) = *(_QWORD *)(v8 + 232);
                v98 = *(_OWORD *)(v8 + 136);
                *(_OWORD *)v8 = *v76;
                *(_OWORD *)(v8 + 16) = v98;
                v99 = *(_OWORD *)(v8 + 168);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 152);
                *(_OWORD *)(v8 + 48) = v99;
                *(_OWORD *)(v8 + 152) = v224;
                *(_OWORD *)(v8 + 168) = v236;
                *v76 = v200;
                *(_OWORD *)(v8 + 136) = v212;
                *(_QWORD *)(v8 + 232) = v278;
                *(_OWORD *)(v8 + 200) = v260;
                *(_OWORD *)(v8 + 216) = v269;
                *(_OWORD *)(v8 + 184) = v248;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2879)
        {
          v100 = (_OWORD *)(v8 + 120);
          v102 = v8 == a2 || v100 == (_OWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v102)
            {
              v103 = 0;
              v104 = v8;
              do
              {
                v105 = v100;
                v106 = *(double *)(v104 + 152);
                if (v106 > *(double *)(v104 + 32))
                {
                  v168 = *v100;
                  v174 = v100[1];
                  v225 = *(_OWORD *)(v104 + 192);
                  v237 = *(_OWORD *)(v104 + 208);
                  v249 = *(_OWORD *)(v104 + 224);
                  v107 = v103;
                  v201 = *(_OWORD *)(v104 + 160);
                  v213 = *(_OWORD *)(v104 + 176);
                  while (1)
                  {
                    v108 = v8 + v107;
                    v109 = *(_OWORD *)(v8 + v107 + 80);
                    *(_OWORD *)(v108 + 184) = *(_OWORD *)(v8 + v107 + 64);
                    *(_OWORD *)(v108 + 200) = v109;
                    *(_OWORD *)(v108 + 216) = *(_OWORD *)(v8 + v107 + 96);
                    v110 = *(_OWORD *)(v8 + v107 + 16);
                    *(_OWORD *)(v108 + 120) = *(_OWORD *)(v8 + v107);
                    *(_OWORD *)(v108 + 136) = v110;
                    v111 = *(_OWORD *)(v8 + v107 + 48);
                    *(_OWORD *)(v108 + 152) = *(_OWORD *)(v8 + v107 + 32);
                    *(_QWORD *)(v108 + 232) = *(_QWORD *)(v8 + v107 + 112);
                    *(_OWORD *)(v108 + 168) = v111;
                    if (!v107)
                      break;
                    v107 -= 120;
                    if (v106 <= *(double *)(v108 - 88))
                    {
                      v112 = v8 + v107 + 120;
                      goto LABEL_78;
                    }
                  }
                  v112 = v8;
LABEL_78:
                  *(_OWORD *)v112 = v168;
                  *(_OWORD *)(v112 + 16) = v174;
                  *(double *)(v112 + 32) = v106;
                  *(_OWORD *)(v112 + 56) = v213;
                  *(_OWORD *)(v112 + 72) = v225;
                  *(_OWORD *)(v112 + 88) = v237;
                  *(_OWORD *)(v112 + 104) = v249;
                  *(_OWORD *)(v112 + 40) = v201;
                }
                v100 = (_OWORD *)((char *)v105 + 120);
                v103 += 120;
                v104 = (unint64_t)v105;
              }
              while ((_OWORD *)((char *)v105 + 120) != (_OWORD *)a2);
            }
          }
          else if (!v102)
          {
            do
            {
              v159 = v100;
              v160 = *(double *)(a1 + 152);
              if (v160 > *(double *)(a1 + 32))
              {
                v171 = *v100;
                v177 = v100[1];
                v228 = *(_OWORD *)(a1 + 192);
                v240 = *(_OWORD *)(a1 + 208);
                v252 = *(_OWORD *)(a1 + 224);
                v161 = v100;
                v204 = *(_OWORD *)(a1 + 160);
                v216 = *(_OWORD *)(a1 + 176);
                do
                {
                  v162 = *(_OWORD *)((char *)v161 - 40);
                  v161[4] = *(_OWORD *)((char *)v161 - 56);
                  v161[5] = v162;
                  v161[6] = *(_OWORD *)((char *)v161 - 24);
                  *((_QWORD *)v161 + 14) = *((_QWORD *)v161 - 1);
                  v163 = *(_OWORD *)((char *)v161 - 104);
                  *v161 = *(_OWORD *)((char *)v161 - 120);
                  v161[1] = v163;
                  v164 = *(_OWORD *)((char *)v161 - 72);
                  v161[2] = *(_OWORD *)((char *)v161 - 88);
                  v161[3] = v164;
                  v165 = *((double *)v161 - 26);
                  v161 = (_OWORD *)((char *)v161 - 120);
                }
                while (v160 > v165);
                *v161 = v171;
                v161[1] = v177;
                *((double *)v161 + 4) = v160;
                *(_OWORD *)((char *)v161 + 40) = v204;
                *(_OWORD *)((char *)v161 + 104) = v252;
                *(_OWORD *)((char *)v161 + 88) = v240;
                *(_OWORD *)((char *)v161 + 72) = v228;
                *(_OWORD *)((char *)v161 + 56) = v216;
              }
              v100 = (_OWORD *)((char *)v100 + 120);
              a1 = (uint64_t)v159;
            }
            while ((_OWORD *)((char *)v159 + 120) != (_OWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v113 = (unint64_t)(v10 - 2) >> 1;
            v114 = v113;
            do
            {
              v115 = v114;
              if (v113 >= v114)
              {
                v116 = (2 * v114) | 1;
                v117 = v8 + 120 * v116;
                if (2 * v114 + 2 < v10 && *(double *)(v8 + 120 * v116 + 32) > *(double *)(v117 + 152))
                {
                  v117 += 120;
                  v116 = 2 * v114 + 2;
                }
                v118 = *(double *)(v8 + 120 * v114 + 32);
                if (*(double *)(v117 + 32) <= v118)
                {
                  v119 = v8 + 120 * v114;
                  v169 = *(_OWORD *)v119;
                  v175 = *(_OWORD *)(v119 + 16);
                  v238 = *(_OWORD *)(v119 + 88);
                  v250 = *(_OWORD *)(v119 + 104);
                  v214 = *(_OWORD *)(v119 + 56);
                  v226 = *(_OWORD *)(v119 + 72);
                  v202 = *(_OWORD *)(v119 + 40);
                  do
                  {
                    v120 = v119;
                    v119 = v117;
                    v121 = *(_OWORD *)v117;
                    v122 = *(_OWORD *)(v117 + 16);
                    v123 = *(_OWORD *)(v117 + 48);
                    *(_OWORD *)(v120 + 32) = *(_OWORD *)(v117 + 32);
                    *(_OWORD *)(v120 + 48) = v123;
                    *(_OWORD *)v120 = v121;
                    *(_OWORD *)(v120 + 16) = v122;
                    v124 = *(_OWORD *)(v117 + 64);
                    v125 = *(_OWORD *)(v117 + 80);
                    v126 = *(_OWORD *)(v117 + 96);
                    *(_QWORD *)(v120 + 112) = *(_QWORD *)(v117 + 112);
                    *(_OWORD *)(v120 + 80) = v125;
                    *(_OWORD *)(v120 + 96) = v126;
                    *(_OWORD *)(v120 + 64) = v124;
                    if (v113 < v116)
                      break;
                    v127 = (2 * v116) | 1;
                    v117 = v8 + 120 * v127;
                    v128 = 2 * v116 + 2;
                    if (v128 < v10 && *(double *)(v8 + 120 * v127 + 32) > *(double *)(v117 + 152))
                    {
                      v117 += 120;
                      v127 = v128;
                    }
                    v116 = v127;
                  }
                  while (*(double *)(v117 + 32) <= v118);
                  *(_OWORD *)v119 = v169;
                  *(_OWORD *)(v119 + 16) = v175;
                  *(double *)(v119 + 32) = v118;
                  *(_OWORD *)(v119 + 56) = v214;
                  *(_OWORD *)(v119 + 72) = v226;
                  *(_OWORD *)(v119 + 88) = v238;
                  *(_OWORD *)(v119 + 104) = v250;
                  *(_OWORD *)(v119 + 40) = v202;
                }
              }
              v114 = v115 - 1;
            }
            while (v115);
            v129 = v9 / 0x78uLL;
            do
            {
              v130 = 0;
              v227 = *(_OWORD *)(v8 + 32);
              v239 = *(_OWORD *)(v8 + 48);
              v203 = *(_OWORD *)v8;
              v215 = *(_OWORD *)(v8 + 16);
              v279 = *(_QWORD *)(v8 + 112);
              v261 = *(_OWORD *)(v8 + 80);
              v270 = *(_OWORD *)(v8 + 96);
              v251 = *(_OWORD *)(v8 + 64);
              v131 = v8;
              do
              {
                v132 = v131;
                v133 = v130 + 1;
                v131 += 120 * (v130 + 1);
                v134 = 2 * v130;
                v130 = (2 * v130) | 1;
                v135 = v134 + 2;
                if (v135 < v129 && *(double *)(v132 + 120 * v133 + 32) > *(double *)(v131 + 152))
                {
                  v131 += 120;
                  v130 = v135;
                }
                v136 = *(_OWORD *)v131;
                v137 = *(_OWORD *)(v131 + 16);
                v138 = *(_OWORD *)(v131 + 48);
                *(_OWORD *)(v132 + 32) = *(_OWORD *)(v131 + 32);
                *(_OWORD *)(v132 + 48) = v138;
                *(_OWORD *)v132 = v136;
                *(_OWORD *)(v132 + 16) = v137;
                v139 = *(_OWORD *)(v131 + 64);
                v140 = *(_OWORD *)(v131 + 80);
                v141 = *(_OWORD *)(v131 + 96);
                *(_QWORD *)(v132 + 112) = *(_QWORD *)(v131 + 112);
                *(_OWORD *)(v132 + 80) = v140;
                *(_OWORD *)(v132 + 96) = v141;
                *(_OWORD *)(v132 + 64) = v139;
              }
              while (v130 <= (uint64_t)((unint64_t)(v129 - 2) >> 1));
              a2 -= 120;
              if (v131 == a2)
              {
                *(_OWORD *)(v131 + 32) = v227;
                *(_OWORD *)(v131 + 48) = v239;
                *(_OWORD *)v131 = v203;
                *(_OWORD *)(v131 + 16) = v215;
                *(_QWORD *)(v131 + 112) = v279;
                *(_OWORD *)(v131 + 80) = v261;
                *(_OWORD *)(v131 + 96) = v270;
                *(_OWORD *)(v131 + 64) = v251;
              }
              else
              {
                v142 = *(_OWORD *)a2;
                v143 = *(_OWORD *)(a2 + 16);
                v144 = *(_OWORD *)(a2 + 48);
                *(_OWORD *)(v131 + 32) = *(_OWORD *)(a2 + 32);
                *(_OWORD *)(v131 + 48) = v144;
                *(_OWORD *)v131 = v142;
                *(_OWORD *)(v131 + 16) = v143;
                v145 = *(_OWORD *)(a2 + 64);
                v146 = *(_OWORD *)(a2 + 80);
                v147 = *(_OWORD *)(a2 + 96);
                *(_QWORD *)(v131 + 112) = *(_QWORD *)(a2 + 112);
                *(_OWORD *)(v131 + 80) = v146;
                *(_OWORD *)(v131 + 96) = v147;
                *(_OWORD *)(v131 + 64) = v145;
                *(_QWORD *)(a2 + 112) = v279;
                *(_OWORD *)(a2 + 80) = v261;
                *(_OWORD *)(a2 + 96) = v270;
                *(_OWORD *)(a2 + 64) = v251;
                *(_OWORD *)(a2 + 32) = v227;
                *(_OWORD *)(a2 + 48) = v239;
                *(_OWORD *)a2 = v203;
                *(_OWORD *)(a2 + 16) = v215;
                v148 = v131 - v8 + 120;
                if (v148 >= 121)
                {
                  v149 = (v148 / 0x78uLL - 2) >> 1;
                  v150 = *(double *)(v131 + 32);
                  if (*(double *)(v8 + 120 * v149 + 32) > v150)
                  {
                    v189 = *(_OWORD *)v131;
                    v192 = *(_OWORD *)(v131 + 16);
                    v183 = *(_OWORD *)(v131 + 88);
                    v186 = *(_OWORD *)(v131 + 104);
                    v176 = *(_OWORD *)(v131 + 56);
                    v180 = *(_OWORD *)(v131 + 72);
                    v170 = *(_OWORD *)(v131 + 40);
                    do
                    {
                      v151 = v131;
                      v131 = v8 + 120 * v149;
                      v152 = *(_OWORD *)v131;
                      v153 = *(_OWORD *)(v131 + 16);
                      v154 = *(_OWORD *)(v131 + 48);
                      *(_OWORD *)(v151 + 32) = *(_OWORD *)(v131 + 32);
                      *(_OWORD *)(v151 + 48) = v154;
                      *(_OWORD *)v151 = v152;
                      *(_OWORD *)(v151 + 16) = v153;
                      v155 = *(_OWORD *)(v131 + 64);
                      v156 = *(_OWORD *)(v131 + 80);
                      v157 = *(_OWORD *)(v131 + 96);
                      *(_QWORD *)(v151 + 112) = *(_QWORD *)(v131 + 112);
                      *(_OWORD *)(v151 + 80) = v156;
                      *(_OWORD *)(v151 + 96) = v157;
                      *(_OWORD *)(v151 + 64) = v155;
                      if (!v149)
                        break;
                      v149 = (v149 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 120 * v149 + 32) > v150);
                    *(_OWORD *)v131 = v189;
                    *(_OWORD *)(v131 + 16) = v192;
                    *(double *)(v131 + 32) = v150;
                    *(_OWORD *)(v131 + 40) = v170;
                    *(_OWORD *)(v131 + 104) = v186;
                    *(_OWORD *)(v131 + 88) = v183;
                    *(_OWORD *)(v131 + 72) = v180;
                    *(_OWORD *)(v131 + 56) = v176;
                  }
                }
              }
            }
            while (v129-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 120 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0x3C01)
        {
          sub_101055BE8((__int128 *)v12, (__int128 *)a1, (double *)(a2 - 120));
        }
        else
        {
          sub_101055BE8((__int128 *)a1, (__int128 *)v12, (double *)(a2 - 120));
          v13 = 120 * v11;
          v14 = (__int128 *)(120 * v11 + a1 - 120);
          sub_101055BE8((__int128 *)(a1 + 120), v14, (double *)(a2 - 240));
          v15 = (__int128 *)(a1 + 120 + v13);
          sub_101055BE8((__int128 *)(a1 + 240), v15, (double *)(a2 - 360));
          sub_101055BE8(v14, (__int128 *)v12, (double *)v15);
          v217 = *(_OWORD *)(a1 + 32);
          v229 = *(_OWORD *)(a1 + 48);
          v193 = *(_OWORD *)a1;
          v205 = *(_OWORD *)(a1 + 16);
          v271 = *(_QWORD *)(a1 + 112);
          v253 = *(_OWORD *)(a1 + 80);
          v262 = *(_OWORD *)(a1 + 96);
          v241 = *(_OWORD *)(a1 + 64);
          v17 = *(_OWORD *)(v12 + 80);
          v16 = *(_OWORD *)(v12 + 96);
          v18 = *(_OWORD *)(v12 + 64);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v12 + 112);
          *(_OWORD *)(a1 + 80) = v17;
          *(_OWORD *)(a1 + 96) = v16;
          *(_OWORD *)(a1 + 64) = v18;
          v19 = *(_OWORD *)v12;
          v20 = *(_OWORD *)(v12 + 16);
          v21 = *(_OWORD *)(v12 + 48);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v12 + 32);
          *(_OWORD *)(a1 + 48) = v21;
          *(_OWORD *)a1 = v19;
          *(_OWORD *)(a1 + 16) = v20;
          *(_OWORD *)(v12 + 32) = v217;
          *(_OWORD *)(v12 + 48) = v229;
          *(_OWORD *)v12 = v193;
          *(_OWORD *)(v12 + 16) = v205;
          *(_QWORD *)(v12 + 112) = v271;
          *(_OWORD *)(v12 + 80) = v253;
          *(_OWORD *)(v12 + 96) = v262;
          *(_OWORD *)(v12 + 64) = v241;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v22 = *(double *)(a1 + 32);
          if (*(double *)(a1 - 88) > v22)
            goto LABEL_11;
          v188 = *(_OWORD *)a1;
          v191 = *(_OWORD *)(a1 + 16);
          v185 = *(_OWORD *)(a1 + 104);
          v179 = *(_OWORD *)(a1 + 72);
          v182 = *(_OWORD *)(a1 + 88);
          v167 = *(_OWORD *)(a1 + 40);
          v173 = *(_OWORD *)(a1 + 56);
          if (v22 <= *(double *)(a2 - 88))
          {
            v50 = a1 + 120;
            do
            {
              v8 = v50;
              if (v50 >= a2)
                break;
              v51 = *(double *)(v50 + 32);
              v50 += 120;
            }
            while (v22 <= v51);
          }
          else
          {
            v48 = a1;
            do
            {
              v8 = v48 + 120;
              v49 = *(double *)(v48 + 152);
              v48 += 120;
            }
            while (v22 <= v49);
          }
          v52 = a2;
          if (v8 < a2)
          {
            v53 = a2;
            do
            {
              v52 = v53 - 120;
              v54 = *(double *)(v53 - 88);
              v53 -= 120;
            }
            while (v22 > v54);
          }
          while (v8 < v52)
          {
            v219 = *(_OWORD *)(v8 + 32);
            v231 = *(_OWORD *)(v8 + 48);
            v195 = *(_OWORD *)v8;
            v207 = *(_OWORD *)(v8 + 16);
            v273 = *(_QWORD *)(v8 + 112);
            v255 = *(_OWORD *)(v8 + 80);
            v264 = *(_OWORD *)(v8 + 96);
            v243 = *(_OWORD *)(v8 + 64);
            v56 = *(_OWORD *)(v52 + 80);
            v55 = *(_OWORD *)(v52 + 96);
            v57 = *(_OWORD *)(v52 + 64);
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v52 + 112);
            *(_OWORD *)(v8 + 80) = v56;
            *(_OWORD *)(v8 + 96) = v55;
            *(_OWORD *)(v8 + 64) = v57;
            v58 = *(_OWORD *)v52;
            v59 = *(_OWORD *)(v52 + 16);
            v60 = *(_OWORD *)(v52 + 48);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(v52 + 32);
            *(_OWORD *)(v8 + 48) = v60;
            *(_OWORD *)v8 = v58;
            *(_OWORD *)(v8 + 16) = v59;
            *(_OWORD *)(v52 + 32) = v219;
            *(_OWORD *)(v52 + 48) = v231;
            *(_OWORD *)v52 = v195;
            *(_OWORD *)(v52 + 16) = v207;
            *(_QWORD *)(v52 + 112) = v273;
            *(_OWORD *)(v52 + 80) = v255;
            *(_OWORD *)(v52 + 96) = v264;
            *(_OWORD *)(v52 + 64) = v243;
            do
            {
              v61 = *(double *)(v8 + 152);
              v8 += 120;
            }
            while (v22 <= v61);
            do
            {
              v62 = *(double *)(v52 - 88);
              v52 -= 120;
            }
            while (v22 > v62);
          }
          v63 = (__int128 *)(v8 - 120);
          if (v8 - 120 != a1)
          {
            v64 = *v63;
            v65 = *(_OWORD *)(v8 - 104);
            v66 = *(_OWORD *)(v8 - 72);
            *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 88);
            *(_OWORD *)(a1 + 48) = v66;
            *(_OWORD *)a1 = v64;
            *(_OWORD *)(a1 + 16) = v65;
            v67 = *(_OWORD *)(v8 - 56);
            v68 = *(_OWORD *)(v8 - 40);
            v69 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)(a1 + 80) = v68;
            *(_OWORD *)(a1 + 96) = v69;
            *(_OWORD *)(a1 + 64) = v67;
          }
          a4 = 0;
          *v63 = v188;
          *(_OWORD *)(v8 - 104) = v191;
          *(double *)(v8 - 88) = v22;
          *(_OWORD *)(v8 - 80) = v167;
          *(_OWORD *)(v8 - 32) = v182;
          *(_OWORD *)(v8 - 16) = v185;
          *(_OWORD *)(v8 - 64) = v173;
          *(_OWORD *)(v8 - 48) = v179;
          continue;
        }
        v22 = *(double *)(a1 + 32);
LABEL_11:
        v23 = 0;
        v187 = *(_OWORD *)a1;
        v190 = *(_OWORD *)(a1 + 16);
        v181 = *(_OWORD *)(a1 + 88);
        v184 = *(_OWORD *)(a1 + 104);
        v172 = *(_OWORD *)(a1 + 56);
        v178 = *(_OWORD *)(a1 + 72);
        v166 = *(_OWORD *)(a1 + 40);
        do
        {
          v24 = *(double *)(a1 + v23 + 152);
          v23 += 120;
        }
        while (v24 > v22);
        v25 = a1 + v23;
        v26 = a2;
        if (v23 == 120)
        {
          v29 = a2;
          while (v25 < v29)
          {
            v27 = v29 - 120;
            v30 = *(double *)(v29 - 88);
            v29 -= 120;
            if (v30 > v22)
              goto LABEL_21;
          }
          v27 = v29;
        }
        else
        {
          do
          {
            v27 = v26 - 120;
            v28 = *(double *)(v26 - 88);
            v26 -= 120;
          }
          while (v28 <= v22);
        }
LABEL_21:
        v8 = v25;
        if (v25 < v27)
        {
          v31 = v27;
          do
          {
            v218 = *(_OWORD *)(v8 + 32);
            v230 = *(_OWORD *)(v8 + 48);
            v194 = *(_OWORD *)v8;
            v206 = *(_OWORD *)(v8 + 16);
            v272 = *(_QWORD *)(v8 + 112);
            v254 = *(_OWORD *)(v8 + 80);
            v263 = *(_OWORD *)(v8 + 96);
            v242 = *(_OWORD *)(v8 + 64);
            v33 = *(_OWORD *)(v31 + 80);
            v32 = *(_OWORD *)(v31 + 96);
            v34 = *(_OWORD *)(v31 + 64);
            *(_QWORD *)(v8 + 112) = *(_QWORD *)(v31 + 112);
            *(_OWORD *)(v8 + 80) = v33;
            *(_OWORD *)(v8 + 96) = v32;
            *(_OWORD *)(v8 + 64) = v34;
            v35 = *(_OWORD *)v31;
            v36 = *(_OWORD *)(v31 + 16);
            v37 = *(_OWORD *)(v31 + 48);
            *(_OWORD *)(v8 + 32) = *(_OWORD *)(v31 + 32);
            *(_OWORD *)(v8 + 48) = v37;
            *(_OWORD *)v8 = v35;
            *(_OWORD *)(v8 + 16) = v36;
            *(_OWORD *)(v31 + 32) = v218;
            *(_OWORD *)(v31 + 48) = v230;
            *(_OWORD *)v31 = v194;
            *(_OWORD *)(v31 + 16) = v206;
            *(_QWORD *)(v31 + 112) = v272;
            *(_OWORD *)(v31 + 80) = v254;
            *(_OWORD *)(v31 + 96) = v263;
            *(_OWORD *)(v31 + 64) = v242;
            do
            {
              v38 = *(double *)(v8 + 152);
              v8 += 120;
            }
            while (v38 > v22);
            do
            {
              v39 = *(double *)(v31 - 88);
              v31 -= 120;
            }
            while (v39 <= v22);
          }
          while (v8 < v31);
        }
        v40 = (__int128 *)(v8 - 120);
        if (v8 - 120 != a1)
        {
          v41 = *v40;
          v42 = *(_OWORD *)(v8 - 104);
          v43 = *(_OWORD *)(v8 - 72);
          *(_OWORD *)(a1 + 32) = *(_OWORD *)(v8 - 88);
          *(_OWORD *)(a1 + 48) = v43;
          *(_OWORD *)a1 = v41;
          *(_OWORD *)(a1 + 16) = v42;
          v44 = *(_OWORD *)(v8 - 56);
          v45 = *(_OWORD *)(v8 - 40);
          v46 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)(a1 + 80) = v45;
          *(_OWORD *)(a1 + 96) = v46;
          *(_OWORD *)(a1 + 64) = v44;
        }
        *v40 = v187;
        *(_OWORD *)(v8 - 104) = v190;
        *(double *)(v8 - 88) = v22;
        *(_OWORD *)(v8 - 80) = v166;
        *(_OWORD *)(v8 - 32) = v181;
        *(_OWORD *)(v8 - 16) = v184;
        *(_OWORD *)(v8 - 64) = v172;
        *(_OWORD *)(v8 - 48) = v178;
        if (v25 < v27)
        {
LABEL_32:
          sub_101054E08(a1, v8 - 120, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v47 = sub_101055E70(a1, v8 - 120);
        if (!sub_101055E70(v8, a2))
        {
          if (v47)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 120;
        if (!v47)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 16) < *(double *)(v8 + 8))
        {
          v115 = *(_QWORD *)(v8 + 16);
          v109 = *(_OWORD *)v8;
          v47 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v47;
          *(_QWORD *)(a2 - 8) = v115;
          *(_OWORD *)(a2 - 24) = v109;
        }
        return;
      case 3:
        sub_1010E4420((__int128 *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
        return;
      case 4:
        sub_1010E4784(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        v48 = (__int128 *)(v8 + 24);
        v49 = (__int128 *)(v8 + 48);
        v50 = (__int128 *)(v8 + 72);
        sub_1010E4784(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(double *)(a2 - 16) < *(double *)(v8 + 80))
        {
          v51 = *v50;
          v52 = *(_QWORD *)(v8 + 88);
          v53 = *(_QWORD *)(a2 - 8);
          *v50 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 88) = v53;
          *(_QWORD *)(a2 - 8) = v52;
          *(_OWORD *)(a2 - 24) = v51;
          if (*(double *)(v8 + 80) < *(double *)(v8 + 56))
          {
            v54 = *(_QWORD *)(v8 + 64);
            v55 = *v49;
            *v49 = *v50;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v50 = v55;
            *(_QWORD *)(v8 + 88) = v54;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 32))
            {
              v56 = *(_QWORD *)(v8 + 40);
              v57 = *v48;
              *v48 = *v49;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v49 = v57;
              *(_QWORD *)(v8 + 64) = v56;
              if (*(double *)(v8 + 32) < *(double *)(v8 + 8))
              {
                v116 = *(_QWORD *)(v8 + 16);
                v110 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v48;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v48 = v110;
                *(_QWORD *)(v8 + 40) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v58 = (_QWORD *)(v8 + 24);
          v60 = v8 == a2 || v58 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v8;
              do
              {
                v63 = v58;
                v64 = *(double *)(v62 + 32);
                if (v64 < *(double *)(v62 + 8))
                {
                  v65 = *v58;
                  v66 = *(_QWORD *)(v62 + 40);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v8 + v67);
                    *(_QWORD *)(v68 + 40) = *(_QWORD *)(v8 + v67 + 16);
                    if (!v67)
                      break;
                    v67 -= 24;
                    if (v64 >= *(double *)(v68 - 16))
                    {
                      v69 = v8 + v67 + 24;
                      goto LABEL_79;
                    }
                  }
                  v69 = v8;
LABEL_79:
                  *(_QWORD *)v69 = v65;
                  *(double *)(v69 + 8) = v64;
                  *(_QWORD *)(v69 + 16) = v66;
                }
                v58 = v63 + 3;
                v61 += 24;
                v62 = (unint64_t)v63;
              }
              while (v63 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v60)
          {
            do
            {
              v100 = v58;
              v101 = *(double *)(a1 + 32);
              if (v101 < *(double *)(a1 + 8))
              {
                v102 = *v58;
                v103 = *(_QWORD *)(a1 + 40);
                v104 = (double *)v58;
                do
                {
                  *(_OWORD *)v104 = *(_OWORD *)(v104 - 3);
                  v104[2] = *(v104 - 1);
                  v105 = *(v104 - 5);
                  v104 -= 3;
                }
                while (v101 < v105);
                *(_QWORD *)v104 = v102;
                v104[1] = v101;
                *((_QWORD *)v104 + 2) = v103;
              }
              v58 += 3;
              a1 = (uint64_t)v100;
            }
            while (v100 + 3 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v70 = (unint64_t)(v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v8 + 24 * v73;
                if (2 * v72 + 2 < v10 && *(double *)(v8 + 24 * v73 + 8) < *(double *)(v74 + 32))
                {
                  v74 += 24;
                  v73 = 2 * v72 + 2;
                }
                v75 = *(double *)(v8 + 24 * v72 + 8);
                if (*(double *)(v74 + 8) >= v75)
                {
                  v76 = v8 + 24 * v72;
                  v77 = *(_QWORD *)v76;
                  v78 = *(_QWORD *)(v76 + 16);
                  do
                  {
                    v79 = v76;
                    v76 = v74;
                    v80 = *(_OWORD *)v74;
                    *(_QWORD *)(v79 + 16) = *(_QWORD *)(v74 + 16);
                    *(_OWORD *)v79 = v80;
                    if (v70 < v73)
                      break;
                    v81 = (2 * v73) | 1;
                    v74 = v8 + 24 * v81;
                    v82 = 2 * v73 + 2;
                    if (v82 < v10 && *(double *)(v8 + 24 * v81 + 8) < *(double *)(v74 + 32))
                    {
                      v74 += 24;
                      v81 = v82;
                    }
                    v73 = v81;
                  }
                  while (*(double *)(v74 + 8) >= v75);
                  *(_QWORD *)v76 = v77;
                  *(double *)(v76 + 8) = v75;
                  *(_QWORD *)(v76 + 16) = v78;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v83 = v9 / 0x18uLL;
            do
            {
              v84 = 0;
              v117 = *(_QWORD *)(v8 + 16);
              v111 = *(_OWORD *)v8;
              v85 = v8;
              do
              {
                v86 = v85;
                v87 = v84 + 1;
                v85 += 24 * (v84 + 1);
                v88 = 2 * v84;
                v84 = (2 * v84) | 1;
                v89 = v88 + 2;
                if (v89 < v83 && *(double *)(v86 + 24 * v87 + 8) < *(double *)(v85 + 32))
                {
                  v85 += 24;
                  v84 = v89;
                }
                v90 = *(_OWORD *)v85;
                *(_QWORD *)(v86 + 16) = *(_QWORD *)(v85 + 16);
                *(_OWORD *)v86 = v90;
              }
              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24;
              if (v85 == a2)
              {
                *(_QWORD *)(v85 + 16) = v117;
                *(_OWORD *)v85 = v111;
              }
              else
              {
                v91 = *(_OWORD *)a2;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v85 = v91;
                *(_QWORD *)(a2 + 16) = v117;
                *(_OWORD *)a2 = v111;
                v92 = v85 - v8 + 24;
                if (v92 >= 25)
                {
                  v93 = (v92 / 0x18uLL - 2) >> 1;
                  v94 = *(double *)(v85 + 8);
                  if (*(double *)(v8 + 24 * v93 + 8) < v94)
                  {
                    v95 = *(_QWORD *)v85;
                    v96 = *(_QWORD *)(v85 + 16);
                    do
                    {
                      v97 = v85;
                      v85 = v8 + 24 * v93;
                      v98 = *(_OWORD *)v85;
                      *(_QWORD *)(v97 + 16) = *(_QWORD *)(v85 + 16);
                      *(_OWORD *)v97 = v98;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 24 * v93 + 8) < v94);
                    *(_QWORD *)v85 = v95;
                    *(double *)(v85 + 8) = v94;
                    *(_QWORD *)(v85 + 16) = v96;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1010E4420((__int128 *)(a1 + 24 * v11), (double *)a1, (double *)(a2 - 24));
        }
        else
        {
          sub_1010E4420((__int128 *)a1, (double *)(a1 + 24 * v11), (double *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (double *)(a1 + 24 * v11 - 24);
          sub_1010E4420((__int128 *)(a1 + 24), v14, (double *)(a2 - 48));
          v15 = (double *)(a1 + 24 + 8 * v13);
          sub_1010E4420((__int128 *)(a1 + 48), v15, (double *)(a2 - 72));
          sub_1010E4420((__int128 *)v14, (double *)v12, v15);
          v112 = *(_QWORD *)(a1 + 16);
          v106 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v112;
          *(_OWORD *)v12 = v106;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v17)
            goto LABEL_11;
          if (v17 >= *(double *)(a2 - 16))
          {
            v36 = a1 + 24;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = *(double *)(v36 + 8);
              v36 += 24;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = a1;
            do
            {
              v8 = v34 + 24;
              v35 = *(double *)(v34 + 32);
              v34 += 24;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 24;
              v40 = *(double *)(v39 - 16);
              v39 -= 24;
            }
            while (v17 < v40);
          }
          v41 = *(double *)a1;
          v42 = *(_QWORD *)(a1 + 16);
          while (v8 < v38)
          {
            v114 = *(_QWORD *)(v8 + 16);
            v108 = *(_OWORD *)v8;
            v43 = *(_OWORD *)v38;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v8 = v43;
            *(_QWORD *)(v38 + 16) = v114;
            *(_OWORD *)v38 = v108;
            do
            {
              v44 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v17 >= v44);
            do
            {
              v45 = *(double *)(v38 - 16);
              v38 -= 24;
            }
            while (v17 < v45);
          }
          if (v8 - 24 != a1)
          {
            v46 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v41;
          *(double *)(v8 - 16) = v17;
          *(_QWORD *)(v8 - 8) = v42;
          continue;
        }
        v17 = *(double *)(a1 + 8);
LABEL_11:
        v18 = 0;
        v19 = *(double *)a1;
        v20 = *(_QWORD *)(a1 + 16);
        do
        {
          v21 = *(double *)(a1 + v18 + 32);
          v18 += 24;
        }
        while (v21 < v17);
        v22 = a1 + v18;
        v23 = a2;
        if (v18 == 24)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 24;
            v27 = *(double *)(v26 - 16);
            v26 -= 24;
            if (v27 < v17)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 24;
            v25 = *(double *)(v23 - 16);
            v23 -= 24;
          }
          while (v25 >= v17);
        }
LABEL_21:
        v8 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v113 = *(_QWORD *)(v8 + 16);
            v107 = *(_OWORD *)v8;
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v8 = v29;
            *(_QWORD *)(v28 + 16) = v113;
            *(_OWORD *)v28 = v107;
            do
            {
              v30 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v30 < v17);
            do
            {
              v31 = *(double *)(v28 - 16);
              v28 -= 24;
            }
            while (v31 >= v17);
          }
          while (v8 < v28);
        }
        if (v8 - 24 != a1)
        {
          v32 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v32;
        }
        *(double *)(v8 - 24) = v19;
        *(double *)(v8 - 16) = v17;
        *(_QWORD *)(v8 - 8) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_1010E3B78(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1010E4510(a1, v8 - 24);
        if (!sub_1010E4510(v8, a2))
        {
          if (v33)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 24;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = (float *)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)v10) >> 3);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v26 = a2[-2].n128_f32[2];
        v25 = &a2[-2].n128_i8[8];
        if (v26 < *v10)
        {
          v36 = *((_QWORD *)v10 + 2);
          v33 = *(_OWORD *)v10;
          v27 = *(_OWORD *)v25;
          *((_QWORD *)v10 + 2) = *((_QWORD *)v25 + 2);
          *(_OWORD *)v10 = v27;
          *(_OWORD *)v25 = v33;
          *((_QWORD *)v25 + 2) = v36;
        }
        return;
      case 3uLL:
        sub_1013174E0((__int128 *)v10, (__int128 *)(v10 + 6), (__int128 *)&a2[-2].n128_i8[8]);
        return;
      case 4uLL:
        sub_101317A48((uint64_t)v10, (uint64_t)(v10 + 6), (uint64_t)(v10 + 12), (uint64_t)&a2[-2].n128_i64[1]);
        return;
      case 5uLL:
        sub_101317B18((__n128 *)v10, (__n128 *)(v10 + 6), (__n128 *)v10 + 3, (__n128 *)(v10 + 18), (__n128 *)((char *)a2 - 24));
        return;
      default:
        if (v13 > 575)
        {
          if (v12 == 1)
          {
            if (v10 != (float *)a2)
              sub_101317C24((uint64_t)v10, a2, a2, a3, a6);
            return;
          }
          v15 = v14 >> 1;
          v16 = &v10[6 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_1013174E0((__int128 *)&v10[6 * v15], (__int128 *)v10, (__int128 *)&a2[-2].n128_i8[8]);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1013174E0((__int128 *)v10, (__int128 *)&v10[6 * v15], (__int128 *)&a2[-2].n128_i8[8]);
            v17 = 3 * v15;
            v18 = (__int128 *)&v10[6 * v15 - 6];
            sub_1013174E0((__int128 *)(v10 + 6), v18, (__int128 *)&a2[-3]);
            v19 = (__int128 *)(v10 + 12);
            v20 = (__int128 *)&v10[2 * v17 + 6];
            sub_1013174E0(v19, v20, (__int128 *)&a2[-5].n128_i8[8]);
            sub_1013174E0(v18, (__int128 *)v16, v20);
            v35 = *(_QWORD *)(a1 + 16);
            v32 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = *((_QWORD *)v16 + 2);
            *(_OWORD *)a1 = v21;
            *((_QWORD *)v16 + 2) = v35;
            *(_OWORD *)v16 = v32;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (*(float *)(a1 - 24) >= *(float *)a1)
          {
            v10 = sub_1013175EC((float *)a1, (float *)a2);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_101317720(a1, (unint64_t)a2);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_101317854(a1, v22);
          v10 = (float *)(v22 + 24);
          if (!sub_101317854(v22 + 24, (uint64_t)a2))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_101316F5C(a1, v22, a3, -v12, a5 & 1);
            v10 = (float *)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (__n128 *)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if ((a5 & 1) != 0)
        {
          sub_1013173F8((uint64_t)v10, (uint64_t)a2);
        }
        else if (v10 != (float *)a2)
        {
          v28 = v10 + 6;
          while (v28 != (float *)a2)
          {
            v29 = (uint64_t)v28;
            v30 = *(float *)(a1 + 24);
            if (v30 < *(float *)a1)
            {
              v34 = *(_OWORD *)(a1 + 28);
              v37 = *(_DWORD *)(a1 + 44);
              do
              {
                *(_OWORD *)v28 = *(_OWORD *)(v28 - 6);
                *((_QWORD *)v28 + 2) = *((_QWORD *)v28 - 1);
                v31 = *(v28 - 12);
                v28 -= 6;
              }
              while (v30 < v31);
              *v28 = v30;
              *((_DWORD *)v28 + 5) = v37;
              *(_OWORD *)(v28 + 1) = v34;
            }
            v28 = (float *)(v29 + 24);
            a1 = v29;
          }
        }
        return;
    }
  }
}

  v8 = a2 - 9;
  v288 = a2 - 27;
  v289 = a2 - 18;
  v9 = a1;
  v290 = a2;
  while (2)
  {
    a1 = v9;
    v10 = (char *)a2 - (char *)v9;
    v11 = 0x8E38E38E38E38E39 * (a2 - v9);
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v126 = sub_100C3C640((uint64_t)v8);
        if (v126 < sub_100C3C640((uint64_t)v9))
        {
          v299 = *v9;
          v127 = v9[1];
          v128 = v9[2];
          v129 = v9[4];
          v302 = v9[3];
          v303 = v129;
          v300 = v127;
          v301 = v128;
          v130 = v9[5];
          v131 = v9[6];
          v132 = v9[8];
          *(_OWORD *)v306 = v9[7];
          *(_OWORD *)&v306[16] = v132;
          v304 = v130;
          v305 = v131;
          *v9 = *v8;
          v133 = v8[1];
          v134 = v8[2];
          v135 = v8[4];
          v9[3] = v8[3];
          v9[4] = v135;
          v9[1] = v133;
          v9[2] = v134;
          v136 = v8[5];
          v137 = v8[6];
          v138 = v8[7];
          *(__int128 *)((char *)v9 + 124) = *(__int128 *)((char *)v8 + 124);
          v9[6] = v137;
          v9[7] = v138;
          v9[5] = v136;
          *v8 = v299;
          v139 = v300;
          v140 = v301;
          v141 = v303;
          v8[3] = v302;
          v8[4] = v141;
          v8[1] = v139;
          v8[2] = v140;
          v142 = v304;
          v143 = v305;
          v144 = *(_OWORD *)v306;
          *(__int128 *)((char *)v8 + 124) = *(_OWORD *)&v306[12];
          v8[6] = v143;
          v8[7] = v144;
          v8[5] = v142;
        }
        return;
      case 3uLL:
        sub_10136D5E0(v9, v9 + 9, v8);
        return;
      case 4uLL:
        sub_10136DBB8(v9, v9 + 9, v9 + 18, v8);
        return;
      case 5uLL:
        sub_10136D320(v9, v9 + 9, v9 + 18, v9 + 27, v8);
        return;
      default:
        if (v10 <= 3455)
        {
          v145 = (uint64_t)(v9 + 9);
          v146 = v9 == a2 || v145 == (_QWORD)a2;
          v147 = v146;
          if ((a4 & 1) != 0)
          {
            if ((v147 & 1) == 0)
            {
              v148 = 0;
              v149 = v9;
              do
              {
                v150 = (uint64_t)v149;
                v149 = (__int128 *)v145;
                v151 = sub_100C3C640(v145);
                if (v151 < sub_100C3C640(v150))
                {
                  v299 = *v149;
                  v152 = v149[1];
                  v153 = v149[2];
                  v154 = v149[4];
                  v302 = v149[3];
                  v303 = v154;
                  v300 = v152;
                  v301 = v153;
                  v155 = v149[5];
                  v156 = v149[6];
                  v157 = v149[8];
                  *(_OWORD *)v306 = v149[7];
                  *(_OWORD *)&v306[16] = v157;
                  v304 = v155;
                  v305 = v156;
                  v158 = v148;
                  while (1)
                  {
                    v159 = (__int128 *)((char *)v9 + v158);
                    v160 = *(__int128 *)((char *)v9 + v158 + 112);
                    v159[15] = *(__int128 *)((char *)v9 + v158 + 96);
                    v159[16] = v160;
                    *(__int128 *)((char *)v9 + v158 + 268) = *(__int128 *)((char *)v9 + v158 + 124);
                    v161 = *(__int128 *)((char *)v9 + v158 + 48);
                    v159[11] = *(__int128 *)((char *)v9 + v158 + 32);
                    v159[12] = v161;
                    v162 = *(__int128 *)((char *)v9 + v158 + 80);
                    v159[13] = *(__int128 *)((char *)v9 + v158 + 64);
                    v159[14] = v162;
                    v163 = *(__int128 *)((char *)v9 + v158 + 16);
                    v159[9] = *(__int128 *)((char *)v9 + v158);
                    v159[10] = v163;
                    if (!v158)
                      break;
                    v158 -= 144;
                    v164 = sub_100C3C640((uint64_t)&v299);
                    if (v164 >= sub_100C3C640((uint64_t)v9 + v158))
                    {
                      v165 = (__int128 *)((char *)v9 + v158 + 144);
                      goto LABEL_73;
                    }
                  }
                  v165 = v9;
LABEL_73:
                  *v165 = v299;
                  v166 = v300;
                  v167 = v301;
                  v168 = v303;
                  v165[3] = v302;
                  v165[4] = v168;
                  v165[1] = v166;
                  v165[2] = v167;
                  v169 = v304;
                  v170 = v305;
                  v171 = *(_OWORD *)v306;
                  *(__int128 *)((char *)v165 + 124) = *(_OWORD *)&v306[12];
                  v165[6] = v170;
                  v165[7] = v171;
                  v165[5] = v169;
                  a2 = v290;
                }
                v145 = (uint64_t)(v149 + 9);
                v148 += 144;
              }
              while (v149 + 9 != a2);
            }
          }
          else if ((v147 & 1) == 0)
          {
            v266 = v9 - 9;
            do
            {
              v267 = (uint64_t)a1;
              a1 = (__int128 *)v145;
              v268 = sub_100C3C640(v145);
              if (v268 < sub_100C3C640(v267))
              {
                v299 = *a1;
                v269 = a1[1];
                v270 = a1[2];
                v271 = a1[4];
                v302 = a1[3];
                v303 = v271;
                v300 = v269;
                v301 = v270;
                v272 = a1[5];
                v273 = a1[6];
                v274 = a1[8];
                *(_OWORD *)v306 = a1[7];
                *(_OWORD *)&v306[16] = v274;
                v304 = v272;
                v305 = v273;
                v275 = v266;
                do
                {
                  v276 = v275[16];
                  v275[24] = v275[15];
                  v275[25] = v276;
                  v277 = v275[12];
                  v275[20] = v275[11];
                  v275[21] = v277;
                  v278 = v275[14];
                  v275[22] = v275[13];
                  v275[23] = v278;
                  v279 = v275[10];
                  v275[18] = v275[9];
                  v275[19] = v279;
                  *(__int128 *)((char *)v275 + 412) = *(__int128 *)((char *)v275 + 268);
                  v280 = sub_100C3C640((uint64_t)&v299);
                  v281 = sub_100C3C640((uint64_t)v275);
                  v275 -= 9;
                }
                while (v280 < v281);
                v275[18] = v299;
                v282 = v300;
                v283 = v301;
                v284 = v303;
                v275[21] = v302;
                v275[22] = v284;
                v275[19] = v282;
                v275[20] = v283;
                v285 = *(_OWORD *)&v306[12];
                v286 = v304;
                v287 = *(_OWORD *)v306;
                v275[24] = v305;
                v275[25] = v287;
                v275[23] = v286;
                *(__int128 *)((char *)v275 + 412) = v285;
              }
              v145 = (uint64_t)(a1 + 9);
              v266 += 9;
            }
            while (a1 + 9 != a2);
          }
          return;
        }
        if (!a3)
        {
          if (v9 != a2)
          {
            v172 = (v11 - 2) >> 1;
            v173 = v172;
            do
            {
              v174 = v173;
              if (v172 >= v173)
              {
                v175 = (2 * v173) | 1;
                v176 = &a1[9 * v175];
                if (2 * v173 + 2 < (uint64_t)v11)
                {
                  v177 = sub_100C3C640((uint64_t)&a1[9 * v175]);
                  if (v177 < sub_100C3C640((uint64_t)(v176 + 9)))
                  {
                    v176 += 9;
                    v175 = 2 * v174 + 2;
                  }
                }
                v178 = &a1[9 * v174];
                v179 = sub_100C3C640((uint64_t)v176);
                if (v179 >= sub_100C3C640((uint64_t)v178))
                {
                  v299 = *v178;
                  v180 = v178[1];
                  v181 = v178[2];
                  v182 = v178[4];
                  v302 = v178[3];
                  v303 = v182;
                  v300 = v180;
                  v301 = v181;
                  v183 = v178[5];
                  v184 = v178[6];
                  v185 = v178[8];
                  *(_OWORD *)v306 = v178[7];
                  *(_OWORD *)&v306[16] = v185;
                  v304 = v183;
                  v305 = v184;
                  do
                  {
                    v186 = v176;
                    *v178 = *v176;
                    v187 = v176[1];
                    v188 = v176[2];
                    v189 = v176[4];
                    v178[3] = v176[3];
                    v178[4] = v189;
                    v178[1] = v187;
                    v178[2] = v188;
                    v190 = v176[5];
                    v191 = v176[6];
                    v192 = v176[7];
                    *(__int128 *)((char *)v178 + 124) = *(__int128 *)((char *)v176 + 124);
                    v178[6] = v191;
                    v178[7] = v192;
                    v178[5] = v190;
                    if (v172 < v175)
                      break;
                    v193 = (2 * v175) | 1;
                    v176 = &a1[9 * v193];
                    v194 = 2 * v175 + 2;
                    if (v194 < (uint64_t)v11)
                    {
                      v195 = sub_100C3C640((uint64_t)&a1[9 * v193]);
                      if (v195 < sub_100C3C640((uint64_t)(v176 + 9)))
                      {
                        v176 += 9;
                        v193 = v194;
                      }
                    }
                    v196 = sub_100C3C640((uint64_t)v176);
                    v178 = v186;
                    v175 = v193;
                  }
                  while (v196 >= sub_100C3C640((uint64_t)&v299));
                  *v186 = v299;
                  v197 = v300;
                  v198 = v301;
                  v199 = v303;
                  v186[3] = v302;
                  v186[4] = v199;
                  v186[1] = v197;
                  v186[2] = v198;
                  v200 = v304;
                  v201 = v305;
                  v202 = *(_OWORD *)v306;
                  *(__int128 *)((char *)v186 + 124) = *(_OWORD *)&v306[12];
                  v186[6] = v201;
                  v186[7] = v202;
                  v186[5] = v200;
                }
              }
              v173 = v174 - 1;
            }
            while (v174);
            v203 = v10 / 0x90uLL;
            v204 = v290;
            do
            {
              v205 = 0;
              v291 = *a1;
              v206 = a1[1];
              v207 = a1[2];
              v208 = a1[4];
              v294 = a1[3];
              v295 = v208;
              v292 = v206;
              v293 = v207;
              v209 = a1[5];
              v210 = a1[6];
              v211 = a1[8];
              *(_OWORD *)v298 = a1[7];
              *(_OWORD *)&v298[16] = v211;
              v296 = v209;
              v297 = v210;
              v212 = a1;
              do
              {
                v213 = &v212[9 * v205 + 9];
                v214 = (2 * v205) | 1;
                v215 = 2 * v205 + 2;
                if (v215 < v203)
                {
                  v216 = sub_100C3C640((uint64_t)&v212[9 * v205 + 9]);
                  if (v216 < sub_100C3C640((uint64_t)(v213 + 9)))
                  {
                    v213 += 9;
                    v214 = v215;
                  }
                }
                *v212 = *v213;
                v217 = v213[1];
                v218 = v213[2];
                v219 = v213[4];
                v212[3] = v213[3];
                v212[4] = v219;
                v212[1] = v217;
                v212[2] = v218;
                v220 = v213[5];
                v221 = v213[6];
                v222 = v213[7];
                *(__int128 *)((char *)v212 + 124) = *(__int128 *)((char *)v213 + 124);
                v212[6] = v221;
                v212[7] = v222;
                v212[5] = v220;
                v212 = v213;
                v205 = v214;
              }
              while (v214 <= (uint64_t)((unint64_t)(v203 - 2) >> 1));
              v204 -= 9;
              if (v213 == v204)
              {
                *v213 = v291;
                v259 = v292;
                v260 = v293;
                v261 = v295;
                v213[3] = v294;
                v213[4] = v261;
                v213[1] = v259;
                v213[2] = v260;
                v262 = v296;
                v263 = v297;
                v264 = *(_OWORD *)v298;
                *(__int128 *)((char *)v213 + 124) = *(_OWORD *)&v298[12];
                v213[6] = v263;
                v213[7] = v264;
                v213[5] = v262;
              }
              else
              {
                *v213 = *v204;
                v223 = v204[1];
                v224 = v204[2];
                v225 = v204[4];
                v213[3] = v204[3];
                v213[4] = v225;
                v213[1] = v223;
                v213[2] = v224;
                v226 = v204[5];
                v227 = v204[6];
                v228 = v204[7];
                *(__int128 *)((char *)v213 + 124) = *(__int128 *)((char *)v204 + 124);
                v213[6] = v227;
                v213[7] = v228;
                v213[5] = v226;
                *v204 = v291;
                v229 = v292;
                v230 = v293;
                v231 = v295;
                v204[3] = v294;
                v204[4] = v231;
                v204[1] = v229;
                v204[2] = v230;
                v232 = v296;
                v233 = v297;
                v234 = *(_OWORD *)v298;
                *(__int128 *)((char *)v204 + 124) = *(_OWORD *)&v298[12];
                v204[6] = v233;
                v204[7] = v234;
                v204[5] = v232;
                v235 = (char *)v213 - (char *)a1 + 144;
                if (v235 >= 145)
                {
                  v236 = (v235 / 0x90uLL - 2) >> 1;
                  v237 = &a1[9 * v236];
                  v238 = sub_100C3C640((uint64_t)v237);
                  if (v238 < sub_100C3C640((uint64_t)v213))
                  {
                    v299 = *v213;
                    v239 = v213[1];
                    v240 = v213[2];
                    v241 = v213[4];
                    v302 = v213[3];
                    v303 = v241;
                    v300 = v239;
                    v301 = v240;
                    v242 = v213[5];
                    v243 = v213[6];
                    v244 = v213[8];
                    *(_OWORD *)v306 = v213[7];
                    *(_OWORD *)&v306[16] = v244;
                    v304 = v242;
                    v305 = v243;
                    do
                    {
                      v245 = v237;
                      *v213 = *v237;
                      v246 = v237[1];
                      v247 = v237[2];
                      v248 = v237[4];
                      v213[3] = v237[3];
                      v213[4] = v248;
                      v213[1] = v246;
                      v213[2] = v247;
                      v249 = v237[5];
                      v250 = v237[6];
                      v251 = v237[7];
                      *(__int128 *)((char *)v213 + 124) = *(__int128 *)((char *)v237 + 124);
                      v213[6] = v250;
                      v213[7] = v251;
                      v213[5] = v249;
                      if (!v236)
                        break;
                      v236 = (v236 - 1) >> 1;
                      v237 = &a1[9 * v236];
                      v252 = sub_100C3C640((uint64_t)v237);
                      v213 = v245;
                    }
                    while (v252 < sub_100C3C640((uint64_t)&v299));
                    *v245 = v299;
                    v253 = v300;
                    v254 = v301;
                    v255 = v303;
                    v245[3] = v302;
                    v245[4] = v255;
                    v245[1] = v253;
                    v245[2] = v254;
                    v256 = v304;
                    v257 = v305;
                    v258 = *(_OWORD *)v306;
                    *(__int128 *)((char *)v245 + 124) = *(_OWORD *)&v306[12];
                    v245[6] = v257;
                    v245[7] = v258;
                    v245[5] = v256;
                  }
                }
              }
            }
            while (v203-- > 2);
          }
          return;
        }
        v12 = &v9[9 * (v11 >> 1)];
        if ((unint64_t)v10 < 0x4801)
        {
          sub_10136D5E0(&a1[9 * (v11 >> 1)], a1, v8);
        }
        else
        {
          sub_10136D5E0(a1, &a1[9 * (v11 >> 1)], v8);
          sub_10136D5E0(a1 + 9, &a1[9 * (v11 >> 1) - 9], v289);
          sub_10136D5E0(a1 + 18, &a1[9 * (v11 >> 1) + 9], v288);
          sub_10136D5E0(&a1[9 * (v11 >> 1) - 9], &a1[9 * (v11 >> 1)], &a1[9 * (v11 >> 1) + 9]);
          v299 = *a1;
          v13 = a1[1];
          v14 = a1[2];
          v15 = a1[4];
          v302 = a1[3];
          v303 = v15;
          v300 = v13;
          v301 = v14;
          v16 = a1[5];
          v17 = a1[6];
          v18 = a1[8];
          *(_OWORD *)v306 = a1[7];
          *(_OWORD *)&v306[16] = v18;
          v304 = v16;
          v305 = v17;
          *a1 = *v12;
          v19 = v12[1];
          v20 = v12[2];
          v21 = v12[4];
          a1[3] = v12[3];
          a1[4] = v21;
          a1[1] = v19;
          a1[2] = v20;
          v22 = v12[5];
          v23 = v12[6];
          v24 = v12[7];
          *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)v12 + 124);
          a1[6] = v23;
          a1[7] = v24;
          a1[5] = v22;
          *v12 = v299;
          v25 = v300;
          v26 = v301;
          v27 = v303;
          v12[3] = v302;
          v12[4] = v27;
          v12[1] = v25;
          v12[2] = v26;
          v28 = v304;
          v29 = v305;
          v30 = *(_OWORD *)v306;
          *(__int128 *)((char *)v12 + 124) = *(_OWORD *)&v306[12];
          v12[6] = v29;
          v12[7] = v30;
          v12[5] = v28;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v31 = sub_100C3C640((uint64_t)(a1 - 9));
          if (v31 >= sub_100C3C640((uint64_t)a1))
          {
            v291 = *a1;
            v80 = a1[1];
            v81 = a1[2];
            v82 = a1[4];
            v294 = a1[3];
            v295 = v82;
            v292 = v80;
            v293 = v81;
            v83 = a1[5];
            v84 = a1[6];
            v85 = a1[8];
            *(_OWORD *)v298 = a1[7];
            *(_OWORD *)&v298[16] = v85;
            v296 = v83;
            v297 = v84;
            v86 = sub_100C3C640((uint64_t)&v291);
            if (v86 >= sub_100C3C640((uint64_t)v8))
            {
              v88 = a1 + 9;
              a2 = v290;
              do
              {
                v9 = v88;
                if (v88 >= v290)
                  break;
                v89 = sub_100C3C640((uint64_t)&v291);
                v90 = sub_100C3C640((uint64_t)v9);
                v88 = v9 + 9;
              }
              while (v89 >= v90);
            }
            else
            {
              v9 = a1;
              a2 = v290;
              do
              {
                v9 += 9;
                v87 = sub_100C3C640((uint64_t)&v291);
              }
              while (v87 >= sub_100C3C640((uint64_t)v9));
            }
            v91 = a2;
            if (v9 < a2)
            {
              v91 = a2;
              do
              {
                v91 -= 9;
                v92 = sub_100C3C640((uint64_t)&v291);
              }
              while (v92 < sub_100C3C640((uint64_t)v91));
            }
            while (v9 < v91)
            {
              v299 = *v9;
              v93 = v9[1];
              v94 = v9[2];
              v95 = v9[4];
              v302 = v9[3];
              v303 = v95;
              v300 = v93;
              v301 = v94;
              v96 = v9[5];
              v97 = v9[6];
              v98 = v9[8];
              *(_OWORD *)v306 = v9[7];
              *(_OWORD *)&v306[16] = v98;
              v304 = v96;
              v305 = v97;
              *v9 = *v91;
              v99 = v91[1];
              v100 = v91[2];
              v101 = v91[4];
              v9[3] = v91[3];
              v9[4] = v101;
              v9[1] = v99;
              v9[2] = v100;
              v102 = v91[5];
              v103 = v91[6];
              v104 = v91[7];
              *(__int128 *)((char *)v9 + 124) = *(__int128 *)((char *)v91 + 124);
              v9[6] = v103;
              v9[7] = v104;
              v9[5] = v102;
              *v91 = v299;
              v105 = v300;
              v106 = v301;
              v107 = v303;
              v91[3] = v302;
              v91[4] = v107;
              v91[1] = v105;
              v91[2] = v106;
              v108 = v304;
              v109 = v305;
              v110 = *(_OWORD *)v306;
              *(__int128 *)((char *)v91 + 124) = *(_OWORD *)&v306[12];
              v91[6] = v109;
              v91[7] = v110;
              v91[5] = v108;
              do
              {
                v9 += 9;
                v111 = sub_100C3C640((uint64_t)&v291);
              }
              while (v111 >= sub_100C3C640((uint64_t)v9));
              do
              {
                v91 -= 9;
                v112 = sub_100C3C640((uint64_t)&v291);
              }
              while (v112 < sub_100C3C640((uint64_t)v91));
            }
            v113 = v9 - 9;
            if (v9 - 9 != a1)
            {
              *a1 = *v113;
              v114 = *(v9 - 8);
              v115 = *(v9 - 7);
              v116 = *(v9 - 5);
              a1[3] = *(v9 - 6);
              a1[4] = v116;
              a1[1] = v114;
              a1[2] = v115;
              v117 = *(v9 - 4);
              v118 = *(v9 - 3);
              v119 = *(v9 - 2);
              *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)v9 - 20);
              a1[6] = v118;
              a1[7] = v119;
              a1[5] = v117;
            }
            a4 = 0;
            *v113 = v291;
            v120 = v292;
            v121 = v293;
            v122 = v295;
            *(v9 - 6) = v294;
            *(v9 - 5) = v122;
            *(v9 - 8) = v120;
            *(v9 - 7) = v121;
            v123 = v296;
            v124 = v297;
            v125 = *(_OWORD *)v298;
            *(__int128 *)((char *)v9 - 20) = *(_OWORD *)&v298[12];
            *(v9 - 3) = v124;
            *(v9 - 2) = v125;
            *(v9 - 4) = v123;
            continue;
          }
        }
        v32 = 0;
        v291 = *a1;
        v33 = a1[1];
        v34 = a1[2];
        v35 = a1[4];
        v294 = a1[3];
        v295 = v35;
        v292 = v33;
        v293 = v34;
        v36 = a1[5];
        v37 = a1[6];
        v38 = a1[8];
        *(_OWORD *)v298 = a1[7];
        *(_OWORD *)&v298[16] = v38;
        v296 = v36;
        v297 = v37;
        do
        {
          v32 += 9;
          v39 = sub_100C3C640((uint64_t)&a1[v32]);
        }
        while (v39 < sub_100C3C640((uint64_t)&v291));
        v40 = &a1[v32];
        v41 = (unint64_t)v290;
        v146 = v32 == 9;
        a2 = v290;
        if (v146)
        {
          v41 = (unint64_t)v290;
          do
          {
            if ((unint64_t)v40 >= v41)
              break;
            v41 -= 144;
            v43 = sub_100C3C640(v41);
          }
          while (v43 >= sub_100C3C640((uint64_t)&v291));
        }
        else
        {
          do
          {
            v41 -= 144;
            v42 = sub_100C3C640(v41);
          }
          while (v42 >= sub_100C3C640((uint64_t)&v291));
        }
        if ((unint64_t)v40 >= v41)
        {
          v66 = v40 - 9;
        }
        else
        {
          v44 = v40;
          v45 = (__int128 *)v41;
          do
          {
            v299 = *v44;
            v46 = v44[1];
            v47 = v44[2];
            v48 = v44[4];
            v302 = v44[3];
            v303 = v48;
            v300 = v46;
            v301 = v47;
            v49 = v44[5];
            v50 = v44[6];
            v51 = v44[8];
            *(_OWORD *)v306 = v44[7];
            *(_OWORD *)&v306[16] = v51;
            v304 = v49;
            v305 = v50;
            *v44 = *v45;
            v52 = v45[1];
            v53 = v45[2];
            v54 = v45[4];
            v44[3] = v45[3];
            v44[4] = v54;
            v44[1] = v52;
            v44[2] = v53;
            v55 = v45[5];
            v56 = v45[6];
            v57 = v45[7];
            *(__int128 *)((char *)v44 + 124) = *(__int128 *)((char *)v45 + 124);
            v44[6] = v56;
            v44[7] = v57;
            v44[5] = v55;
            *v45 = v299;
            v58 = v300;
            v59 = v301;
            v60 = v303;
            v45[3] = v302;
            v45[4] = v60;
            v45[1] = v58;
            v45[2] = v59;
            v61 = v304;
            v62 = v305;
            v63 = *(_OWORD *)v306;
            *(__int128 *)((char *)v45 + 124) = *(_OWORD *)&v306[12];
            v45[6] = v62;
            v45[7] = v63;
            v45[5] = v61;
            do
            {
              v44 += 9;
              v64 = sub_100C3C640((uint64_t)v44);
            }
            while (v64 < sub_100C3C640((uint64_t)&v291));
            do
            {
              v45 -= 9;
              v65 = sub_100C3C640((uint64_t)v45);
            }
            while (v65 >= sub_100C3C640((uint64_t)&v291));
          }
          while (v44 < v45);
          v66 = v44 - 9;
        }
        if (v66 != a1)
        {
          *a1 = *v66;
          v67 = v66[1];
          v68 = v66[2];
          v69 = v66[4];
          a1[3] = v66[3];
          a1[4] = v69;
          a1[1] = v67;
          a1[2] = v68;
          v70 = v66[5];
          v71 = v66[6];
          v72 = v66[7];
          *(__int128 *)((char *)a1 + 124) = *(__int128 *)((char *)v66 + 124);
          a1[6] = v71;
          a1[7] = v72;
          a1[5] = v70;
        }
        *v66 = v291;
        v73 = v292;
        v74 = v293;
        v75 = v295;
        v66[3] = v294;
        v66[4] = v75;
        v66[1] = v73;
        v66[2] = v74;
        v76 = v296;
        v77 = v297;
        v78 = *(_OWORD *)v298;
        *(__int128 *)((char *)v66 + 124) = *(_OWORD *)&v298[12];
        v66[6] = v77;
        v66[7] = v78;
        v66[5] = v76;
        if ((unint64_t)v40 < v41)
        {
LABEL_31:
          sub_10136C588(a1, v66, a3, a4 & 1);
          a4 = 0;
          v9 = v66 + 9;
          continue;
        }
        v79 = sub_10136D900(a1, v66);
        v9 = v66 + 9;
        if (!sub_10136D900(v66 + 9, v290))
        {
          if (v79)
            continue;
          goto LABEL_31;
        }
        a2 = v66;
        if (!v79)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 11) < *(double *)(v8 + 8))
        {
          v159 = *(_OWORD *)v8;
          v171 = *(_OWORD *)(v8 + 16);
          *(_OWORD *)v206 = *(_OWORD *)(v8 + 64);
          *(_OWORD *)&v206[16] = *(_OWORD *)(v8 + 80);
          v182 = *(_OWORD *)(v8 + 32);
          v194 = *(_OWORD *)(v8 + 48);
          v61 = *(a2 - 3);
          v60 = *(a2 - 2);
          v62 = *(a2 - 4);
          *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 48) = v61;
          *(_OWORD *)(v8 + 64) = v60;
          *(_OWORD *)(v8 + 32) = v62;
          v63 = *(a2 - 5);
          *(_OWORD *)v8 = *(a2 - 6);
          *(_OWORD *)(v8 + 16) = v63;
          *(a2 - 6) = v159;
          *(a2 - 5) = v171;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v206[12];
          *(a2 - 3) = v194;
          *(a2 - 2) = *(_OWORD *)v206;
          *(a2 - 4) = v182;
        }
        return;
      case 3:
        sub_100C32654(v8, v8 + 96, (uint64_t)(a2 - 6));
        return;
      case 4:
        sub_100C32C1C(v8, v8 + 96, v8 + 192, (uint64_t)(a2 - 6));
        return;
      case 5:
        v64 = (__int128 *)(v8 + 96);
        v65 = (__int128 *)(v8 + 192);
        v66 = (__int128 *)(v8 + 288);
        sub_100C32C1C(v8, v8 + 96, v8 + 192, v8 + 288);
        if (*((double *)a2 - 11) < *(double *)(v8 + 296))
        {
          v183 = *(_OWORD *)(v8 + 320);
          v195 = *(_OWORD *)(v8 + 336);
          *(_OWORD *)v207 = *(_OWORD *)(v8 + 352);
          *(_OWORD *)&v207[16] = *(_OWORD *)(v8 + 368);
          v160 = *v66;
          v172 = *(_OWORD *)(v8 + 304);
          v67 = *(a2 - 5);
          *v66 = *(a2 - 6);
          *(_OWORD *)(v8 + 304) = v67;
          v69 = *(a2 - 3);
          v68 = *(a2 - 2);
          v70 = *(a2 - 4);
          *(_OWORD *)(v8 + 364) = *(_OWORD *)((char *)a2 - 20);
          *(_OWORD *)(v8 + 336) = v69;
          *(_OWORD *)(v8 + 352) = v68;
          *(_OWORD *)(v8 + 320) = v70;
          *(a2 - 6) = v160;
          *(a2 - 5) = v172;
          *(_OWORD *)((char *)a2 - 20) = *(_OWORD *)&v207[12];
          *(a2 - 3) = v195;
          *(a2 - 2) = *(_OWORD *)v207;
          *(a2 - 4) = v183;
          if (*(double *)(v8 + 296) < *(double *)(v8 + 200))
          {
            v184 = *(_OWORD *)(v8 + 224);
            v196 = *(_OWORD *)(v8 + 240);
            *(_OWORD *)v208 = *(_OWORD *)(v8 + 256);
            *(_OWORD *)&v208[16] = *(_OWORD *)(v8 + 272);
            v161 = *v65;
            v173 = *(_OWORD *)(v8 + 208);
            v71 = *(_OWORD *)(v8 + 336);
            *(_OWORD *)(v8 + 224) = *(_OWORD *)(v8 + 320);
            *(_OWORD *)(v8 + 240) = v71;
            *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 352);
            *(_OWORD *)(v8 + 268) = *(_OWORD *)(v8 + 364);
            v72 = *(_OWORD *)(v8 + 304);
            *v65 = *v66;
            *(_OWORD *)(v8 + 208) = v72;
            *v66 = v161;
            *(_OWORD *)(v8 + 304) = v173;
            *(_OWORD *)(v8 + 364) = *(_OWORD *)&v208[12];
            v73 = *(double *)(v8 + 200) < *(double *)(v8 + 104);
            *(_OWORD *)(v8 + 336) = v196;
            *(_OWORD *)(v8 + 352) = *(_OWORD *)v208;
            *(_OWORD *)(v8 + 320) = v184;
            if (v73)
            {
              v185 = *(_OWORD *)(v8 + 128);
              v197 = *(_OWORD *)(v8 + 144);
              *(_OWORD *)v209 = *(_OWORD *)(v8 + 160);
              *(_OWORD *)&v209[16] = *(_OWORD *)(v8 + 176);
              v162 = *v64;
              v174 = *(_OWORD *)(v8 + 112);
              v74 = *(_OWORD *)(v8 + 240);
              *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 224);
              *(_OWORD *)(v8 + 144) = v74;
              *(_OWORD *)(v8 + 160) = *(_OWORD *)(v8 + 256);
              *(_OWORD *)(v8 + 172) = *(_OWORD *)(v8 + 268);
              v75 = *(_OWORD *)(v8 + 208);
              *v64 = *v65;
              *(_OWORD *)(v8 + 112) = v75;
              *v65 = v162;
              *(_OWORD *)(v8 + 208) = v174;
              *(_OWORD *)(v8 + 268) = *(_OWORD *)&v209[12];
              v73 = *(double *)(v8 + 104) < *(double *)(v8 + 8);
              *(_OWORD *)(v8 + 240) = v197;
              *(_OWORD *)(v8 + 256) = *(_OWORD *)v209;
              *(_OWORD *)(v8 + 224) = v185;
              if (v73)
              {
                v163 = *(_OWORD *)v8;
                v175 = *(_OWORD *)(v8 + 16);
                *(_OWORD *)v210 = *(_OWORD *)(v8 + 64);
                *(_OWORD *)&v210[16] = *(_OWORD *)(v8 + 80);
                v186 = *(_OWORD *)(v8 + 32);
                v198 = *(_OWORD *)(v8 + 48);
                *(_OWORD *)(v8 + 76) = *(_OWORD *)(v8 + 172);
                v76 = *(_OWORD *)(v8 + 160);
                v77 = *(_OWORD *)(v8 + 128);
                *(_OWORD *)(v8 + 48) = *(_OWORD *)(v8 + 144);
                *(_OWORD *)(v8 + 64) = v76;
                v78 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v8 = *v64;
                *(_OWORD *)(v8 + 16) = v78;
                *(_OWORD *)(v8 + 32) = v77;
                *v64 = v163;
                *(_OWORD *)(v8 + 112) = v175;
                *(_OWORD *)(v8 + 172) = *(_OWORD *)&v210[12];
                *(_OWORD *)(v8 + 144) = v198;
                *(_OWORD *)(v8 + 160) = *(_OWORD *)v210;
                *(_OWORD *)(v8 + 128) = v186;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 2303)
        {
          v79 = (_OWORD *)(v8 + 96);
          v81 = (_OWORD *)v8 == a2 || v79 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v81)
            {
              v82 = 0;
              v83 = v8;
              do
              {
                v84 = v79;
                v85 = *(double *)(v83 + 104);
                if (v85 < *(double *)(v83 + 8))
                {
                  v86 = *(_QWORD *)v79;
                  v187 = *(_OWORD *)(v83 + 144);
                  *(_OWORD *)v199 = *(_OWORD *)(v83 + 160);
                  *(_OWORD *)&v199[16] = *(_OWORD *)(v83 + 176);
                  v88 = *(_OWORD *)(v83 + 112);
                  v87 = *(_OWORD *)(v83 + 128);
                  v89 = v82;
                  v164 = v88;
                  while (1)
                  {
                    v90 = (_OWORD *)(v8 + v89);
                    v91 = *(_OWORD *)(v8 + v89 + 48);
                    v90[8] = *(_OWORD *)(v8 + v89 + 32);
                    v90[9] = v91;
                    v90[10] = *(_OWORD *)(v8 + v89 + 64);
                    *(_OWORD *)((char *)v90 + 172) = *(_OWORD *)(v8 + v89 + 76);
                    v92 = *(_OWORD *)(v8 + v89 + 16);
                    v90[6] = *(_OWORD *)(v8 + v89);
                    v90[7] = v92;
                    if (!v89)
                      break;
                    v89 -= 96;
                    if (v85 >= *((double *)v90 - 11))
                    {
                      v93 = v8 + v89 + 96;
                      goto LABEL_80;
                    }
                  }
                  v93 = v8;
LABEL_80:
                  *(_QWORD *)v93 = v86;
                  *(double *)(v93 + 8) = v85;
                  *(_OWORD *)(v93 + 48) = v187;
                  *(_OWORD *)(v93 + 64) = *(_OWORD *)v199;
                  *(_OWORD *)(v93 + 76) = *(_OWORD *)&v199[12];
                  *(_OWORD *)(v93 + 16) = v164;
                  *(_OWORD *)(v93 + 32) = v87;
                }
                v79 = v84 + 6;
                v82 += 96;
                v83 = (unint64_t)v84;
              }
              while (v84 + 6 != a2);
            }
          }
          else if (!v81)
          {
            do
            {
              v138 = (uint64_t)v79;
              v139 = *(double *)(a1 + 104);
              if (v139 < *(double *)(a1 + 8))
              {
                v140 = *(_QWORD *)v79;
                v190 = *(_OWORD *)(a1 + 144);
                *(_OWORD *)v202 = *(_OWORD *)(a1 + 160);
                *(_OWORD *)&v202[16] = *(_OWORD *)(a1 + 176);
                v167 = *(_OWORD *)(a1 + 112);
                v178 = *(_OWORD *)(a1 + 128);
                do
                {
                  v141 = *(v79 - 3);
                  v79[2] = *(v79 - 4);
                  v79[3] = v141;
                  v79[4] = *(v79 - 2);
                  *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)((char *)v79 - 20);
                  v142 = *(v79 - 5);
                  *v79 = *(v79 - 6);
                  v79[1] = v142;
                  v143 = *((double *)v79 - 23);
                  v79 -= 6;
                }
                while (v139 < v143);
                *(_QWORD *)v79 = v140;
                *((double *)v79 + 1) = v139;
                v79[1] = v167;
                *(_OWORD *)((char *)v79 + 76) = *(_OWORD *)&v202[12];
                v79[3] = v190;
                v79[4] = *(_OWORD *)v202;
                v79[2] = v178;
              }
              v79 = (_OWORD *)(v138 + 96);
              a1 = v138;
            }
            while ((_OWORD *)(v138 + 96) != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((_OWORD *)v8 == a2)
            return;
          v94 = (unint64_t)(v10 - 2) >> 1;
          v95 = v94;
          do
          {
            v96 = v95;
            if (v94 >= v95)
            {
              v97 = (2 * v95) | 1;
              v98 = v8 + 96 * v97;
              if (2 * v96 + 2 < v10 && *(double *)(v8 + 96 * v97 + 8) < *(double *)(v98 + 104))
              {
                v98 += 96;
                v97 = 2 * v96 + 2;
              }
              v99 = *(double *)(v8 + 96 * v96 + 8);
              if (*(double *)(v98 + 8) >= v99)
              {
                v100 = v8 + 96 * v96;
                v101 = *(_QWORD *)v100;
                v165 = *(_OWORD *)(v100 + 16);
                *(_OWORD *)v200 = *(_OWORD *)(v100 + 64);
                *(_OWORD *)&v200[16] = *(_OWORD *)(v100 + 80);
                v176 = *(_OWORD *)(v100 + 32);
                v188 = *(_OWORD *)(v100 + 48);
                do
                {
                  v102 = (_OWORD *)v100;
                  v100 = v98;
                  v103 = *(_OWORD *)(v98 + 16);
                  *v102 = *(_OWORD *)v98;
                  v102[1] = v103;
                  v104 = *(_OWORD *)(v98 + 32);
                  v105 = *(_OWORD *)(v98 + 48);
                  v106 = *(_OWORD *)(v98 + 64);
                  *(_OWORD *)((char *)v102 + 76) = *(_OWORD *)(v98 + 76);
                  v102[3] = v105;
                  v102[4] = v106;
                  v102[2] = v104;
                  if (v94 < v97)
                    break;
                  v107 = (2 * v97) | 1;
                  v98 = v8 + 96 * v107;
                  v108 = 2 * v97 + 2;
                  if (v108 < v10 && *(double *)(v8 + 96 * v107 + 8) < *(double *)(v98 + 104))
                  {
                    v98 += 96;
                    v107 = v108;
                  }
                  v97 = v107;
                }
                while (*(double *)(v98 + 8) >= v99);
                *(_QWORD *)v100 = v101;
                *(double *)(v100 + 8) = v99;
                *(_OWORD *)(v100 + 48) = v188;
                *(_OWORD *)(v100 + 64) = *(_OWORD *)v200;
                *(_OWORD *)(v100 + 76) = *(_OWORD *)&v200[12];
                *(_OWORD *)(v100 + 16) = v165;
                *(_OWORD *)(v100 + 32) = v176;
              }
            }
            v95 = v96 - 1;
          }
          while (v96);
          v109 = v9 / 0x60uLL;
          while (2)
          {
            v110 = 0;
            v166 = *(_OWORD *)v8;
            v177 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v211 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v211[16] = *(_OWORD *)(v8 + 80);
            v189 = *(_OWORD *)(v8 + 32);
            v201 = *(_OWORD *)(v8 + 48);
            v111 = v8;
            do
            {
              v112 = (_OWORD *)v111;
              v113 = v110 + 1;
              v111 += 96 * (v110 + 1);
              v114 = 2 * v110;
              v110 = (2 * v110) | 1;
              v115 = v114 + 2;
              if (v115 < v109 && *((double *)&v112[6 * v113] + 1) < *(double *)(v111 + 104))
              {
                v111 += 96;
                v110 = v115;
              }
              v116 = *(_OWORD *)(v111 + 16);
              *v112 = *(_OWORD *)v111;
              v112[1] = v116;
              v117 = *(_OWORD *)(v111 + 32);
              v118 = *(_OWORD *)(v111 + 48);
              v119 = *(_OWORD *)(v111 + 64);
              *(_OWORD *)((char *)v112 + 76) = *(_OWORD *)(v111 + 76);
              v112[3] = v118;
              v112[4] = v119;
              v112[2] = v117;
            }
            while (v110 <= (uint64_t)((unint64_t)(v109 - 2) >> 1));
            a2 -= 6;
            if ((_OWORD *)v111 != a2)
            {
              v120 = a2[1];
              *(_OWORD *)v111 = *a2;
              *(_OWORD *)(v111 + 16) = v120;
              v121 = a2[2];
              v122 = a2[3];
              v123 = a2[4];
              *(_OWORD *)(v111 + 76) = *(_OWORD *)((char *)a2 + 76);
              *(_OWORD *)(v111 + 48) = v122;
              *(_OWORD *)(v111 + 64) = v123;
              *(_OWORD *)(v111 + 32) = v121;
              *(_OWORD *)((char *)a2 + 76) = *(_OWORD *)&v211[12];
              a2[3] = v201;
              a2[4] = *(_OWORD *)v211;
              a2[2] = v189;
              *a2 = v166;
              a2[1] = v177;
              v124 = v111 - v8 + 96;
              if (v124 >= 97)
              {
                v125 = (v124 / 0x60uLL - 2) >> 1;
                v126 = *(double *)(v111 + 8);
                if (*(double *)(v8 + 96 * v125 + 8) < v126)
                {
                  v127 = *(_QWORD *)v111;
                  v146 = *(_OWORD *)(v111 + 16);
                  *(_OWORD *)v155 = *(_OWORD *)(v111 + 64);
                  *(_OWORD *)&v155[16] = *(_OWORD *)(v111 + 80);
                  v149 = *(_OWORD *)(v111 + 32);
                  v152 = *(_OWORD *)(v111 + 48);
                  do
                  {
                    v128 = (_OWORD *)v111;
                    v111 = v8 + 96 * v125;
                    v129 = *(_OWORD *)(v111 + 16);
                    *v128 = *(_OWORD *)v111;
                    v128[1] = v129;
                    v130 = *(_OWORD *)(v111 + 32);
                    v131 = *(_OWORD *)(v111 + 48);
                    v132 = *(_OWORD *)(v111 + 64);
                    *(_OWORD *)((char *)v128 + 76) = *(_OWORD *)(v111 + 76);
                    v128[3] = v131;
                    v128[4] = v132;
                    v128[2] = v130;
                    if (!v125)
                      break;
                    v125 = (v125 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 96 * v125 + 8) < v126);
                  *(_QWORD *)v111 = v127;
                  *(double *)(v111 + 8) = v126;
                  *(_OWORD *)(v111 + 16) = v146;
                  v133 = v149;
                  v134 = v152;
                  v135 = *(_OWORD *)v155;
                  v136 = *(_OWORD *)&v155[12];
LABEL_112:
                  *(_OWORD *)(v111 + 76) = v136;
                  *(_OWORD *)(v111 + 48) = v134;
                  *(_OWORD *)(v111 + 64) = v135;
                  *(_OWORD *)(v111 + 32) = v133;
                }
              }
              if (v109-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v111 = v166;
          *(_OWORD *)(v111 + 16) = v177;
          v133 = v189;
          v134 = v201;
          v135 = *(_OWORD *)v211;
          v136 = *(_OWORD *)&v211[12];
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (_OWORD *)(v8 + 96 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x3000)
        {
          sub_100C32654(a1 + 96 * v11, a1, (uint64_t)(a2 - 6));
        }
        else
        {
          sub_100C32654(a1, a1 + 96 * v11, (uint64_t)(a2 - 6));
          v13 = 3 * v11;
          v14 = a1 + 96 * v11 - 96;
          sub_100C32654(a1 + 96, v14, (uint64_t)(a2 - 12));
          v15 = a1 + 96 + 32 * v13;
          sub_100C32654(a1 + 192, v15, (uint64_t)(a2 - 18));
          sub_100C32654(v14, (uint64_t)v12, v15);
          v156 = *(_OWORD *)a1;
          v168 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)v203 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v203[16] = *(_OWORD *)(a1 + 80);
          v179 = *(_OWORD *)(a1 + 32);
          v191 = *(_OWORD *)(a1 + 48);
          v17 = v12[3];
          v16 = v12[4];
          v18 = v12[2];
          *(_OWORD *)(a1 + 76) = *(_OWORD *)((char *)v12 + 76);
          *(_OWORD *)(a1 + 48) = v17;
          *(_OWORD *)(a1 + 64) = v16;
          *(_OWORD *)(a1 + 32) = v18;
          v19 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v19;
          *v12 = v156;
          v12[1] = v168;
          *(_OWORD *)((char *)v12 + 76) = *(_OWORD *)&v203[12];
          v12[3] = v191;
          v12[4] = *(_OWORD *)v203;
          v12[2] = v179;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v20 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 88) < v20)
            goto LABEL_11;
          v42 = *(_QWORD *)a1;
          *(_OWORD *)v154 = *(_OWORD *)(a1 + 64);
          *(_OWORD *)&v154[16] = *(_OWORD *)(a1 + 80);
          v148 = *(_OWORD *)(a1 + 32);
          v151 = *(_OWORD *)(a1 + 48);
          v145 = *(_OWORD *)(a1 + 16);
          if (v20 >= *((double *)a2 - 11))
          {
            v45 = a1 + 96;
            do
            {
              v8 = v45;
              if (v45 >= (unint64_t)a2)
                break;
              v46 = *(double *)(v45 + 8);
              v45 += 96;
            }
            while (v20 >= v46);
          }
          else
          {
            v43 = a1;
            do
            {
              v8 = v43 + 96;
              v44 = *(double *)(v43 + 104);
              v43 += 96;
            }
            while (v20 >= v44);
          }
          v47 = (double *)a2;
          if (v8 < (unint64_t)a2)
          {
            v48 = (double *)a2;
            do
            {
              v47 = v48 - 12;
              v49 = *(v48 - 11);
              v48 -= 12;
            }
            while (v20 < v49);
          }
          while (v8 < (unint64_t)v47)
          {
            v158 = *(_OWORD *)v8;
            v170 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v205 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v205[16] = *(_OWORD *)(v8 + 80);
            v181 = *(_OWORD *)(v8 + 32);
            v193 = *(_OWORD *)(v8 + 48);
            v51 = *((_OWORD *)v47 + 3);
            v50 = *((_OWORD *)v47 + 4);
            v52 = *((_OWORD *)v47 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v47 + 76);
            *(_OWORD *)(v8 + 48) = v51;
            *(_OWORD *)(v8 + 64) = v50;
            *(_OWORD *)(v8 + 32) = v52;
            v53 = *((_OWORD *)v47 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v47;
            *(_OWORD *)(v8 + 16) = v53;
            *(_OWORD *)v47 = v158;
            *((_OWORD *)v47 + 1) = v170;
            *(_OWORD *)((char *)v47 + 76) = *(_OWORD *)&v205[12];
            *((_OWORD *)v47 + 3) = v193;
            *((_OWORD *)v47 + 4) = *(_OWORD *)v205;
            *((_OWORD *)v47 + 2) = v181;
            do
            {
              v54 = *(double *)(v8 + 104);
              v8 += 96;
            }
            while (v20 >= v54);
            do
            {
              v55 = *(v47 - 11);
              v47 -= 12;
            }
            while (v20 < v55);
          }
          if (v8 - 96 != a1)
          {
            v56 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 16) = v56;
            v57 = *(_OWORD *)(v8 - 64);
            v58 = *(_OWORD *)(v8 - 48);
            v59 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
            *(_OWORD *)(a1 + 48) = v58;
            *(_OWORD *)(a1 + 64) = v59;
            *(_OWORD *)(a1 + 32) = v57;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 96) = v42;
          *(double *)(v8 - 88) = v20;
          *(_OWORD *)(v8 - 80) = v145;
          *(_OWORD *)(v8 - 20) = *(_OWORD *)&v154[12];
          *(_OWORD *)(v8 - 48) = v151;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v154;
          *(_OWORD *)(v8 - 64) = v148;
          continue;
        }
        v20 = *(double *)(a1 + 8);
LABEL_11:
        v21 = 0;
        v22 = *(_QWORD *)a1;
        *(_OWORD *)v153 = *(_OWORD *)(a1 + 64);
        *(_OWORD *)&v153[16] = *(_OWORD *)(a1 + 80);
        v147 = *(_OWORD *)(a1 + 32);
        v150 = *(_OWORD *)(a1 + 48);
        v144 = *(_OWORD *)(a1 + 16);
        do
        {
          v23 = *(double *)(a1 + v21 + 104);
          v21 += 96;
        }
        while (v23 < v20);
        v24 = a1 + v21;
        v25 = (double *)a2;
        if (v21 == 96)
        {
          v28 = (double *)a2;
          while (v24 < (unint64_t)v28)
          {
            v26 = v28 - 12;
            v29 = *(v28 - 11);
            v28 -= 12;
            if (v29 < v20)
              goto LABEL_21;
          }
          v26 = v28;
        }
        else
        {
          do
          {
            v26 = v25 - 12;
            v27 = *(v25 - 11);
            v25 -= 12;
          }
          while (v27 >= v20);
        }
LABEL_21:
        v8 = v24;
        if (v24 < (unint64_t)v26)
        {
          v30 = v26;
          do
          {
            v157 = *(_OWORD *)v8;
            v169 = *(_OWORD *)(v8 + 16);
            *(_OWORD *)v204 = *(_OWORD *)(v8 + 64);
            *(_OWORD *)&v204[16] = *(_OWORD *)(v8 + 80);
            v180 = *(_OWORD *)(v8 + 32);
            v192 = *(_OWORD *)(v8 + 48);
            v32 = *((_OWORD *)v30 + 3);
            v31 = *((_OWORD *)v30 + 4);
            v33 = *((_OWORD *)v30 + 2);
            *(_OWORD *)(v8 + 76) = *(_OWORD *)((char *)v30 + 76);
            *(_OWORD *)(v8 + 48) = v32;
            *(_OWORD *)(v8 + 64) = v31;
            *(_OWORD *)(v8 + 32) = v33;
            v34 = *((_OWORD *)v30 + 1);
            *(_OWORD *)v8 = *(_OWORD *)v30;
            *(_OWORD *)(v8 + 16) = v34;
            *(_OWORD *)v30 = v157;
            *((_OWORD *)v30 + 1) = v169;
            *(_OWORD *)((char *)v30 + 76) = *(_OWORD *)&v204[12];
            *((_OWORD *)v30 + 3) = v192;
            *((_OWORD *)v30 + 4) = *(_OWORD *)v204;
            *((_OWORD *)v30 + 2) = v180;
            do
            {
              v35 = *(double *)(v8 + 104);
              v8 += 96;
            }
            while (v35 < v20);
            do
            {
              v36 = *(v30 - 11);
              v30 -= 12;
            }
            while (v36 >= v20);
          }
          while (v8 < (unint64_t)v30);
        }
        if (v8 - 96 != a1)
        {
          v37 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 16) = v37;
          v38 = *(_OWORD *)(v8 - 64);
          v39 = *(_OWORD *)(v8 - 48);
          v40 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 76) = *(_OWORD *)(v8 - 20);
          *(_OWORD *)(a1 + 48) = v39;
          *(_OWORD *)(a1 + 64) = v40;
          *(_OWORD *)(a1 + 32) = v38;
        }
        *(_QWORD *)(v8 - 96) = v22;
        *(double *)(v8 - 88) = v20;
        *(_OWORD *)(v8 - 80) = v144;
        *(_OWORD *)(v8 - 20) = *(_OWORD *)&v153[12];
        *(_OWORD *)(v8 - 48) = v150;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v153;
        *(_OWORD *)(v8 - 64) = v147;
        if (v24 < (unint64_t)v26)
        {
LABEL_32:
          sub_10147D11C(a1, v8 - 96, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v41 = sub_10147DCF4(a1, v8 - 96);
        if (!sub_10147DCF4(v8, (uint64_t)a2))
        {
          if (v41)
            continue;
          goto LABEL_32;
        }
        a2 = (_OWORD *)(v8 - 96);
        if (!v41)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          v270 = *(_OWORD *)v8;
          v282 = *(_OWORD *)(v8 + 16);
          v317 = *(_OWORD *)(v8 + 64);
          v329 = *(_OWORD *)(v8 + 80);
          v293 = *(_OWORD *)(v8 + 32);
          v305 = *(_OWORD *)(v8 + 48);
          v365 = *(_OWORD *)(v8 + 128);
          v377 = *(_OWORD *)(v8 + 144);
          v341 = *(_OWORD *)(v8 + 96);
          v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          v389 = *(_OWORD *)(v8 + 160);
          v401 = *(_OWORD *)(v8 + 176);
          v90 = *(a2 - 13);
          *(_OWORD *)v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          v91 = *(a2 - 12);
          v92 = *(a2 - 11);
          v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 48) = v92;
          v94 = *(a2 - 8);
          v95 = *(a2 - 7);
          v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 128) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          v97 = *(a2 - 4);
          v98 = *(a2 - 3);
          v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }
        return;
      case 3:
        sub_1014A58C8((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4:
        sub_1014A62A8(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5:
        v100 = (__int128 *)(v8 + 224);
        v101 = (__int128 *)(v8 + 448);
        v102 = (__int128 *)(v8 + 672);
        sub_1014A62A8(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          v318 = *(_OWORD *)(v8 + 736);
          v330 = *(_OWORD *)(v8 + 752);
          v294 = *(_OWORD *)(v8 + 704);
          v306 = *(_OWORD *)(v8 + 720);
          v366 = *(_OWORD *)(v8 + 800);
          v378 = *(_OWORD *)(v8 + 816);
          v342 = *(_OWORD *)(v8 + 768);
          v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          v390 = *(_OWORD *)(v8 + 832);
          v402 = *(_OWORD *)(v8 + 848);
          v271 = *v102;
          v283 = *(_OWORD *)(v8 + 688);
          v103 = *(a2 - 13);
          *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 688) = v103;
          v104 = *(a2 - 12);
          v105 = *(a2 - 11);
          v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          v107 = *(a2 - 8);
          v108 = *(a2 - 7);
          v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 768) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          v110 = *(a2 - 4);
          v111 = *(a2 - 3);
          v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 848) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            v391 = *(_OWORD *)(v8 + 608);
            v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            v343 = *(_OWORD *)(v8 + 544);
            v355 = *(_OWORD *)(v8 + 560);
            v367 = *(_OWORD *)(v8 + 576);
            v379 = *(_OWORD *)(v8 + 592);
            v295 = *(_OWORD *)(v8 + 480);
            v307 = *(_OWORD *)(v8 + 496);
            v319 = *(_OWORD *)(v8 + 512);
            v331 = *(_OWORD *)(v8 + 528);
            v272 = *v101;
            v284 = *(_OWORD *)(v8 + 464);
            v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 608) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 528) = v117;
            v118 = *(_OWORD *)(v8 + 688);
            *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 848) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 768) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            *v102 = v272;
            *(_OWORD *)(v8 + 688) = v284;
            if (v119)
            {
              v392 = *(_OWORD *)(v8 + 384);
              v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              v344 = *(_OWORD *)(v8 + 320);
              v356 = *(_OWORD *)(v8 + 336);
              v368 = *(_OWORD *)(v8 + 352);
              v380 = *(_OWORD *)(v8 + 368);
              v296 = *(_OWORD *)(v8 + 256);
              v308 = *(_OWORD *)(v8 + 272);
              v320 = *(_OWORD *)(v8 + 288);
              v332 = *(_OWORD *)(v8 + 304);
              v273 = *v100;
              v285 = *(_OWORD *)(v8 + 240);
              v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 368) = v122;
              v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 288) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              v125 = *(_OWORD *)(v8 + 464);
              *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 608) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 528) = v332;
              v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                v274 = *(_OWORD *)v8;
                v286 = *(_OWORD *)(v8 + 16);
                v321 = *(_OWORD *)(v8 + 64);
                v333 = *(_OWORD *)(v8 + 80);
                v297 = *(_OWORD *)(v8 + 32);
                v309 = *(_OWORD *)(v8 + 48);
                v369 = *(_OWORD *)(v8 + 128);
                v381 = *(_OWORD *)(v8 + 144);
                v345 = *(_OWORD *)(v8 + 96);
                v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                v393 = *(_OWORD *)(v8 + 160);
                v405 = *(_OWORD *)(v8 + 176);
                v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 48) = v127;
                v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                v130 = *(_OWORD *)(v8 + 416);
                v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 368) = v381;
                *(_OWORD *)(v8 + 256) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 288) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 5375)
        {
          v133 = (__int128 *)(v8 + 224);
          v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              v136 = 0;
              v137 = v8;
              do
              {
                v138 = v133;
                v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  v140 = *(_QWORD *)v133;
                  v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  v346 = *(_OWORD *)(v137 + 336);
                  v358 = *(_OWORD *)(v137 + 352);
                  v370 = *(_OWORD *)(v137 + 368);
                  v382 = *(_OWORD *)(v137 + 384);
                  v298 = *(_OWORD *)(v137 + 272);
                  v310 = *(_OWORD *)(v137 + 288);
                  v322 = *(_OWORD *)(v137 + 304);
                  v334 = *(_OWORD *)(v137 + 320);
                  v142 = *(_OWORD *)(v137 + 240);
                  v141 = *(_OWORD *)(v137 + 256);
                  v143 = v136;
                  v275 = v142;
                  while (1)
                  {
                    v144 = (double *)(v8 + v143);
                    v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 18) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143)
                      break;
                    v143 -= 224;
                    if (v139 >= *(v144 - 27))
                    {
                      v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }
                  v151 = v8;
LABEL_80:
                  *(_QWORD *)v151 = v140;
                  *(double *)(v151 + 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 128) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 48) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }
                v133 = v138 + 14;
                v136 += 224;
                v137 = (unint64_t)v138;
              }
              while (v138 + 14 != a2);
            }
          }
          else if (!v135)
          {
            do
            {
              v220 = v133;
              v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                v222 = *(_QWORD *)v133;
                v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                v349 = *(_OWORD *)(a1 + 336);
                v361 = *(_OWORD *)(a1 + 352);
                v373 = *(_OWORD *)(a1 + 368);
                v385 = *(_OWORD *)(a1 + 384);
                v301 = *(_OWORD *)(a1 + 272);
                v313 = *(_OWORD *)(a1 + 288);
                v325 = *(_OWORD *)(a1 + 304);
                v337 = *(_OWORD *)(a1 + 320);
                v278 = *(_OWORD *)(a1 + 240);
                v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  v223 = a1 + 224;
                  v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 368) = v226;
                  v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  v119 = v221 < *(double *)(a1 - 216);
                  v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224;
                  *(_OWORD *)(v223 + 205) = v230;
                }
                while (v119);
                *(_QWORD *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 288) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 256) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 368) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }
              v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }
            while (v220 + 14 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 == a2)
            return;
          v152 = (unint64_t)(v10 - 2) >> 1;
          v153 = v152;
          do
          {
            v154 = v153;
            if (v152 >= v153)
            {
              v155 = (2 * v153) | 1;
              v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224;
                v155 = 2 * v153 + 2;
              }
              v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                v158 = v8 + 224 * v153;
                v159 = *(_QWORD *)v158;
                v276 = *(_OWORD *)(v158 + 16);
                v311 = *(_OWORD *)(v158 + 64);
                v323 = *(_OWORD *)(v158 + 80);
                v287 = *(_OWORD *)(v158 + 32);
                v299 = *(_OWORD *)(v158 + 48);
                v359 = *(_OWORD *)(v158 + 128);
                v371 = *(_OWORD *)(v158 + 144);
                v335 = *(_OWORD *)(v158 + 96);
                v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                v383 = *(_OWORD *)(v158 + 160);
                v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  v160 = (_OWORD *)v158;
                  v158 = v156;
                  v161 = *(_OWORD *)(v156 + 16);
                  *v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  v162 = *(_OWORD *)(v156 + 32);
                  v163 = *(_OWORD *)(v156 + 48);
                  v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  v165 = *(_OWORD *)(v156 + 96);
                  v166 = *(_OWORD *)(v156 + 112);
                  v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  v168 = *(_OWORD *)(v156 + 160);
                  v169 = *(_OWORD *)(v156 + 176);
                  v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155)
                    break;
                  v171 = (2 * v155) | 1;
                  v156 = v8 + 224 * v171;
                  v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224;
                    v171 = v172;
                  }
                  v155 = v171;
                }
                while (*(double *)(v156 + 8) >= v157);
                *(_QWORD *)v158 = v159;
                *(double *)(v158 + 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 128) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 48) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }
            v153 = v154 - 1;
          }
          while (v154);
          v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            v174 = 0;
            v277 = *(_OWORD *)v8;
            v288 = *(_OWORD *)(v8 + 16);
            v324 = *(_OWORD *)(v8 + 64);
            v336 = *(_OWORD *)(v8 + 80);
            v300 = *(_OWORD *)(v8 + 32);
            v312 = *(_OWORD *)(v8 + 48);
            v372 = *(_OWORD *)(v8 + 128);
            v384 = *(_OWORD *)(v8 + 144);
            v348 = *(_OWORD *)(v8 + 96);
            v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            v396 = *(_OWORD *)(v8 + 160);
            v408 = *(_OWORD *)(v8 + 176);
            v175 = v8;
            do
            {
              v176 = (_OWORD *)v175;
              v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              v178 = 2 * v174;
              v174 = (2 * v174) | 1;
              v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224;
                v174 = v179;
              }
              v180 = *(_OWORD *)(v175 + 16);
              *v176 = *(_OWORD *)v175;
              v176[1] = v180;
              v181 = *(_OWORD *)(v175 + 32);
              v182 = *(_OWORD *)(v175 + 48);
              v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              v184 = *(_OWORD *)(v175 + 96);
              v185 = *(_OWORD *)(v175 + 112);
              v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              v187 = *(_OWORD *)(v175 + 160);
              v188 = *(_OWORD *)(v175 + 176);
              v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }
            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              v190 = a2[1];
              *(_OWORD *)v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              v191 = a2[2];
              v192 = a2[3];
              v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 48) = v192;
              v194 = a2[6];
              v195 = a2[7];
              v196 = a2[9];
              *(_OWORD *)(v175 + 128) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              v197 = a2[10];
              v198 = a2[11];
              v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                v201 = (unint64_t)(((((unint64_t)v200 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                        - 2) >> 1;
                v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  v203 = *(_QWORD *)v175;
                  v233 = *(_OWORD *)(v175 + 16);
                  v242 = *(_OWORD *)(v175 + 64);
                  v245 = *(_OWORD *)(v175 + 80);
                  v236 = *(_OWORD *)(v175 + 32);
                  v239 = *(_OWORD *)(v175 + 48);
                  v254 = *(_OWORD *)(v175 + 128);
                  v257 = *(_OWORD *)(v175 + 144);
                  v248 = *(_OWORD *)(v175 + 96);
                  v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  v260 = *(_OWORD *)(v175 + 160);
                  v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    v204 = (_OWORD *)v175;
                    v175 = v8 + 224 * v201;
                    v205 = *(_OWORD *)(v175 + 16);
                    *v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    v206 = *(_OWORD *)(v175 + 32);
                    v207 = *(_OWORD *)(v175 + 48);
                    v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    v209 = *(_OWORD *)(v175 + 96);
                    v210 = *(_OWORD *)(v175 + 112);
                    v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    v212 = *(_OWORD *)(v175 + 160);
                    v213 = *(_OWORD *)(v175 + 176);
                    v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    v204[10] = v212;
                    if (!v201)
                      break;
                    v201 = (v201 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(_QWORD *)v175 = v203;
                  *(double *)(v175 + 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 48) = v239;
                  *(_OWORD *)(v175 + 128) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  v215 = v260;
                  v216 = v263;
                  v217 = *(_OWORD *)v266;
                  v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }
              if (v173-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 48) = v312;
          *(_OWORD *)(v175 + 128) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          v215 = v396;
          v216 = v408;
          v217 = *(_OWORD *)v418;
          v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_1014A58C8((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }
        else
        {
          sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          v13 = 224 * v11;
          v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_1014A58C8((__int128 *)(a1 + 224), v14, a2 - 28);
          v15 = (__int128 *)(a1 + 224 + v13);
          sub_1014A58C8((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_1014A58C8(v14, v12, v15);
          v267 = *(_OWORD *)a1;
          v279 = *(_OWORD *)(a1 + 16);
          v314 = *(_OWORD *)(a1 + 64);
          v326 = *(_OWORD *)(a1 + 80);
          v290 = *(_OWORD *)(a1 + 32);
          v302 = *(_OWORD *)(a1 + 48);
          v362 = *(_OWORD *)(a1 + 128);
          v374 = *(_OWORD *)(a1 + 144);
          v338 = *(_OWORD *)(a1 + 96);
          v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          v386 = *(_OWORD *)(a1 + 160);
          v398 = *(_OWORD *)(a1 + 176);
          v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          v17 = v12[2];
          v18 = v12[3];
          v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 48) = v18;
          v20 = v12[6];
          v21 = v12[7];
          v22 = v12[9];
          *(_OWORD *)(a1 + 128) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          v23 = v12[10];
          v24 = v12[11];
          v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          *v12 = v267;
          v12[1] = v279;
          v12[4] = v314;
          v12[5] = v326;
          v12[2] = v290;
          v12[3] = v302;
          v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v26 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 216) < v26)
            goto LABEL_11;
          v60 = *(_QWORD *)a1;
          v241 = *(_OWORD *)(a1 + 64);
          v244 = *(_OWORD *)(a1 + 80);
          v235 = *(_OWORD *)(a1 + 32);
          v238 = *(_OWORD *)(a1 + 48);
          v253 = *(_OWORD *)(a1 + 128);
          v256 = *(_OWORD *)(a1 + 144);
          v247 = *(_OWORD *)(a1 + 96);
          v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          v259 = *(_OWORD *)(a1 + 160);
          v262 = *(_OWORD *)(a1 + 176);
          v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            v63 = a1 + 224;
            do
            {
              v8 = v63;
              if (v63 >= (unint64_t)a2)
                break;
              v64 = *(double *)(v63 + 8);
              v63 += 224;
            }
            while (v26 >= v64);
          }
          else
          {
            v61 = a1;
            do
            {
              v8 = v61 + 224;
              v62 = *(double *)(v61 + 232);
              v61 += 224;
            }
            while (v26 >= v62);
          }
          v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            v66 = a2;
            do
            {
              v65 = v66 - 14;
              v67 = *((double *)v66 - 27);
              v66 -= 14;
            }
            while (v26 < v67);
          }
          while (v8 < (unint64_t)v65)
          {
            v269 = *(_OWORD *)v8;
            v281 = *(_OWORD *)(v8 + 16);
            v316 = *(_OWORD *)(v8 + 64);
            v328 = *(_OWORD *)(v8 + 80);
            v292 = *(_OWORD *)(v8 + 32);
            v304 = *(_OWORD *)(v8 + 48);
            v364 = *(_OWORD *)(v8 + 128);
            v376 = *(_OWORD *)(v8 + 144);
            v340 = *(_OWORD *)(v8 + 96);
            v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            v388 = *(_OWORD *)(v8 + 160);
            v400 = *(_OWORD *)(v8 + 176);
            v68 = v65[1];
            *(_OWORD *)v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            v69 = v65[2];
            v70 = v65[3];
            v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 48) = v70;
            v72 = v65[6];
            v73 = v65[7];
            v74 = v65[9];
            *(_OWORD *)(v8 + 128) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            v75 = v65[10];
            v76 = v65[11];
            v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              v78 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v26 >= v78);
            do
            {
              v79 = *((double *)v65 - 27);
              v65 -= 14;
            }
            while (v26 < v79);
          }
          if (v8 - 224 != a1)
          {
            v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            v81 = *(_OWORD *)(v8 - 192);
            v82 = *(_OWORD *)(v8 - 176);
            v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 48) = v82;
            v84 = *(_OWORD *)(v8 - 128);
            v85 = *(_OWORD *)(v8 - 112);
            v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            v87 = *(_OWORD *)(v8 - 64);
            v88 = *(_OWORD *)(v8 - 48);
            v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 208) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 128) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 48) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }
        v26 = *(double *)(a1 + 8);
LABEL_11:
        v27 = 0;
        v28 = *(_QWORD *)a1;
        v240 = *(_OWORD *)(a1 + 64);
        v243 = *(_OWORD *)(a1 + 80);
        v252 = *(_OWORD *)(a1 + 128);
        v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        v258 = *(_OWORD *)(a1 + 160);
        v261 = *(_OWORD *)(a1 + 176);
        v246 = *(_OWORD *)(a1 + 96);
        v249 = *(_OWORD *)(a1 + 112);
        v234 = *(_OWORD *)(a1 + 32);
        v237 = *(_OWORD *)(a1 + 48);
        v231 = *(_OWORD *)(a1 + 16);
        do
        {
          v29 = *(double *)(a1 + v27 + 232);
          v27 += 224;
        }
        while (v29 < v26);
        v30 = a1 + v27;
        v31 = a2;
        if (v27 == 224)
        {
          v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            v32 = v34 - 14;
            v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26)
              goto LABEL_21;
          }
          v32 = v34;
        }
        else
        {
          do
          {
            v32 = v31 - 14;
            v33 = *((double *)v31 - 27);
            v31 -= 14;
          }
          while (v33 >= v26);
        }
LABEL_21:
        v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            v37 = v36[1];
            *(_OWORD *)v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            v38 = v36[2];
            v39 = v36[3];
            v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 48) = v39;
            v41 = v36[6];
            v42 = v36[7];
            v43 = v36[9];
            *(_OWORD *)(v8 + 128) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            v44 = v36[10];
            v45 = v36[11];
            v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              v47 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v47 < v26);
            do
            {
              v48 = *((double *)v36 - 27);
              v36 -= 14;
            }
            while (v48 >= v26);
          }
          while (v8 < (unint64_t)v36);
        }
        if (v8 - 224 != a1)
        {
          v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          v50 = *(_OWORD *)(v8 - 192);
          v51 = *(_OWORD *)(v8 - 176);
          v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 48) = v51;
          v53 = *(_OWORD *)(v8 - 128);
          v54 = *(_OWORD *)(v8 - 112);
          v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          v56 = *(_OWORD *)(v8 - 64);
          v57 = *(_OWORD *)(v8 - 48);
          v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }
        *(_QWORD *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 208) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 128) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 48) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_1014A46F0(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v59 = sub_1014A5C7C(a1, v8 - 224);
        if (!sub_1014A5C7C(v8, (uint64_t)a2))
        {
          if (v59)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 224);
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          v270 = *(_OWORD *)v8;
          v282 = *(_OWORD *)(v8 + 16);
          v317 = *(_OWORD *)(v8 + 64);
          v329 = *(_OWORD *)(v8 + 80);
          v293 = *(_OWORD *)(v8 + 32);
          v305 = *(_OWORD *)(v8 + 48);
          v365 = *(_OWORD *)(v8 + 128);
          v377 = *(_OWORD *)(v8 + 144);
          v341 = *(_OWORD *)(v8 + 96);
          v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          v389 = *(_OWORD *)(v8 + 160);
          v401 = *(_OWORD *)(v8 + 176);
          v90 = *(a2 - 13);
          *(_OWORD *)v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          v91 = *(a2 - 12);
          v92 = *(a2 - 11);
          v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 48) = v92;
          v94 = *(a2 - 8);
          v95 = *(a2 - 7);
          v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 128) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          v97 = *(a2 - 4);
          v98 = *(a2 - 3);
          v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }
        return;
      case 3:
        sub_1014A58C8((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4:
        sub_1014A62A8(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5:
        v100 = (__int128 *)(v8 + 224);
        v101 = (__int128 *)(v8 + 448);
        v102 = (__int128 *)(v8 + 672);
        sub_1014A62A8(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          v318 = *(_OWORD *)(v8 + 736);
          v330 = *(_OWORD *)(v8 + 752);
          v294 = *(_OWORD *)(v8 + 704);
          v306 = *(_OWORD *)(v8 + 720);
          v366 = *(_OWORD *)(v8 + 800);
          v378 = *(_OWORD *)(v8 + 816);
          v342 = *(_OWORD *)(v8 + 768);
          v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          v390 = *(_OWORD *)(v8 + 832);
          v402 = *(_OWORD *)(v8 + 848);
          v271 = *v102;
          v283 = *(_OWORD *)(v8 + 688);
          v103 = *(a2 - 13);
          *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 688) = v103;
          v104 = *(a2 - 12);
          v105 = *(a2 - 11);
          v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          v107 = *(a2 - 8);
          v108 = *(a2 - 7);
          v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 768) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          v110 = *(a2 - 4);
          v111 = *(a2 - 3);
          v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 848) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            v391 = *(_OWORD *)(v8 + 608);
            v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            v343 = *(_OWORD *)(v8 + 544);
            v355 = *(_OWORD *)(v8 + 560);
            v367 = *(_OWORD *)(v8 + 576);
            v379 = *(_OWORD *)(v8 + 592);
            v295 = *(_OWORD *)(v8 + 480);
            v307 = *(_OWORD *)(v8 + 496);
            v319 = *(_OWORD *)(v8 + 512);
            v331 = *(_OWORD *)(v8 + 528);
            v272 = *v101;
            v284 = *(_OWORD *)(v8 + 464);
            v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 608) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 528) = v117;
            v118 = *(_OWORD *)(v8 + 688);
            *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 848) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 768) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            *v102 = v272;
            *(_OWORD *)(v8 + 688) = v284;
            if (v119)
            {
              v392 = *(_OWORD *)(v8 + 384);
              v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              v344 = *(_OWORD *)(v8 + 320);
              v356 = *(_OWORD *)(v8 + 336);
              v368 = *(_OWORD *)(v8 + 352);
              v380 = *(_OWORD *)(v8 + 368);
              v296 = *(_OWORD *)(v8 + 256);
              v308 = *(_OWORD *)(v8 + 272);
              v320 = *(_OWORD *)(v8 + 288);
              v332 = *(_OWORD *)(v8 + 304);
              v273 = *v100;
              v285 = *(_OWORD *)(v8 + 240);
              v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 368) = v122;
              v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 288) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              v125 = *(_OWORD *)(v8 + 464);
              *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 608) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 528) = v332;
              v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                v274 = *(_OWORD *)v8;
                v286 = *(_OWORD *)(v8 + 16);
                v321 = *(_OWORD *)(v8 + 64);
                v333 = *(_OWORD *)(v8 + 80);
                v297 = *(_OWORD *)(v8 + 32);
                v309 = *(_OWORD *)(v8 + 48);
                v369 = *(_OWORD *)(v8 + 128);
                v381 = *(_OWORD *)(v8 + 144);
                v345 = *(_OWORD *)(v8 + 96);
                v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                v393 = *(_OWORD *)(v8 + 160);
                v405 = *(_OWORD *)(v8 + 176);
                v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 48) = v127;
                v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                v130 = *(_OWORD *)(v8 + 416);
                v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 368) = v381;
                *(_OWORD *)(v8 + 256) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 288) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 5375)
        {
          v133 = (__int128 *)(v8 + 224);
          v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              v136 = 0;
              v137 = v8;
              do
              {
                v138 = v133;
                v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  v140 = *(_QWORD *)v133;
                  v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  v346 = *(_OWORD *)(v137 + 336);
                  v358 = *(_OWORD *)(v137 + 352);
                  v370 = *(_OWORD *)(v137 + 368);
                  v382 = *(_OWORD *)(v137 + 384);
                  v298 = *(_OWORD *)(v137 + 272);
                  v310 = *(_OWORD *)(v137 + 288);
                  v322 = *(_OWORD *)(v137 + 304);
                  v334 = *(_OWORD *)(v137 + 320);
                  v142 = *(_OWORD *)(v137 + 240);
                  v141 = *(_OWORD *)(v137 + 256);
                  v143 = v136;
                  v275 = v142;
                  while (1)
                  {
                    v144 = (double *)(v8 + v143);
                    v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 18) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143)
                      break;
                    v143 -= 224;
                    if (v139 >= *(v144 - 27))
                    {
                      v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }
                  v151 = v8;
LABEL_80:
                  *(_QWORD *)v151 = v140;
                  *(double *)(v151 + 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 128) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 48) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }
                v133 = v138 + 14;
                v136 += 224;
                v137 = (unint64_t)v138;
              }
              while (v138 + 14 != a2);
            }
          }
          else if (!v135)
          {
            do
            {
              v220 = v133;
              v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                v222 = *(_QWORD *)v133;
                v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                v349 = *(_OWORD *)(a1 + 336);
                v361 = *(_OWORD *)(a1 + 352);
                v373 = *(_OWORD *)(a1 + 368);
                v385 = *(_OWORD *)(a1 + 384);
                v301 = *(_OWORD *)(a1 + 272);
                v313 = *(_OWORD *)(a1 + 288);
                v325 = *(_OWORD *)(a1 + 304);
                v337 = *(_OWORD *)(a1 + 320);
                v278 = *(_OWORD *)(a1 + 240);
                v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  v223 = a1 + 224;
                  v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 368) = v226;
                  v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  v119 = v221 < *(double *)(a1 - 216);
                  v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224;
                  *(_OWORD *)(v223 + 205) = v230;
                }
                while (v119);
                *(_QWORD *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 288) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 256) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 368) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }
              v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }
            while (v220 + 14 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 == a2)
            return;
          v152 = (unint64_t)(v10 - 2) >> 1;
          v153 = v152;
          do
          {
            v154 = v153;
            if (v152 >= v153)
            {
              v155 = (2 * v153) | 1;
              v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224;
                v155 = 2 * v153 + 2;
              }
              v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                v158 = v8 + 224 * v153;
                v159 = *(_QWORD *)v158;
                v276 = *(_OWORD *)(v158 + 16);
                v311 = *(_OWORD *)(v158 + 64);
                v323 = *(_OWORD *)(v158 + 80);
                v287 = *(_OWORD *)(v158 + 32);
                v299 = *(_OWORD *)(v158 + 48);
                v359 = *(_OWORD *)(v158 + 128);
                v371 = *(_OWORD *)(v158 + 144);
                v335 = *(_OWORD *)(v158 + 96);
                v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                v383 = *(_OWORD *)(v158 + 160);
                v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  v160 = (_OWORD *)v158;
                  v158 = v156;
                  v161 = *(_OWORD *)(v156 + 16);
                  *v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  v162 = *(_OWORD *)(v156 + 32);
                  v163 = *(_OWORD *)(v156 + 48);
                  v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  v165 = *(_OWORD *)(v156 + 96);
                  v166 = *(_OWORD *)(v156 + 112);
                  v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  v168 = *(_OWORD *)(v156 + 160);
                  v169 = *(_OWORD *)(v156 + 176);
                  v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155)
                    break;
                  v171 = (2 * v155) | 1;
                  v156 = v8 + 224 * v171;
                  v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224;
                    v171 = v172;
                  }
                  v155 = v171;
                }
                while (*(double *)(v156 + 8) >= v157);
                *(_QWORD *)v158 = v159;
                *(double *)(v158 + 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 128) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 48) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }
            v153 = v154 - 1;
          }
          while (v154);
          v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            v174 = 0;
            v277 = *(_OWORD *)v8;
            v288 = *(_OWORD *)(v8 + 16);
            v324 = *(_OWORD *)(v8 + 64);
            v336 = *(_OWORD *)(v8 + 80);
            v300 = *(_OWORD *)(v8 + 32);
            v312 = *(_OWORD *)(v8 + 48);
            v372 = *(_OWORD *)(v8 + 128);
            v384 = *(_OWORD *)(v8 + 144);
            v348 = *(_OWORD *)(v8 + 96);
            v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            v396 = *(_OWORD *)(v8 + 160);
            v408 = *(_OWORD *)(v8 + 176);
            v175 = v8;
            do
            {
              v176 = (_OWORD *)v175;
              v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              v178 = 2 * v174;
              v174 = (2 * v174) | 1;
              v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224;
                v174 = v179;
              }
              v180 = *(_OWORD *)(v175 + 16);
              *v176 = *(_OWORD *)v175;
              v176[1] = v180;
              v181 = *(_OWORD *)(v175 + 32);
              v182 = *(_OWORD *)(v175 + 48);
              v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              v184 = *(_OWORD *)(v175 + 96);
              v185 = *(_OWORD *)(v175 + 112);
              v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              v187 = *(_OWORD *)(v175 + 160);
              v188 = *(_OWORD *)(v175 + 176);
              v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }
            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              v190 = a2[1];
              *(_OWORD *)v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              v191 = a2[2];
              v192 = a2[3];
              v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 48) = v192;
              v194 = a2[6];
              v195 = a2[7];
              v196 = a2[9];
              *(_OWORD *)(v175 + 128) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              v197 = a2[10];
              v198 = a2[11];
              v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                v201 = (unint64_t)(((((unint64_t)v200 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                        - 2) >> 1;
                v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  v203 = *(_QWORD *)v175;
                  v233 = *(_OWORD *)(v175 + 16);
                  v242 = *(_OWORD *)(v175 + 64);
                  v245 = *(_OWORD *)(v175 + 80);
                  v236 = *(_OWORD *)(v175 + 32);
                  v239 = *(_OWORD *)(v175 + 48);
                  v254 = *(_OWORD *)(v175 + 128);
                  v257 = *(_OWORD *)(v175 + 144);
                  v248 = *(_OWORD *)(v175 + 96);
                  v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  v260 = *(_OWORD *)(v175 + 160);
                  v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    v204 = (_OWORD *)v175;
                    v175 = v8 + 224 * v201;
                    v205 = *(_OWORD *)(v175 + 16);
                    *v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    v206 = *(_OWORD *)(v175 + 32);
                    v207 = *(_OWORD *)(v175 + 48);
                    v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    v209 = *(_OWORD *)(v175 + 96);
                    v210 = *(_OWORD *)(v175 + 112);
                    v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    v212 = *(_OWORD *)(v175 + 160);
                    v213 = *(_OWORD *)(v175 + 176);
                    v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    v204[10] = v212;
                    if (!v201)
                      break;
                    v201 = (v201 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(_QWORD *)v175 = v203;
                  *(double *)(v175 + 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 48) = v239;
                  *(_OWORD *)(v175 + 128) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  v215 = v260;
                  v216 = v263;
                  v217 = *(_OWORD *)v266;
                  v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }
              if (v173-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 48) = v312;
          *(_OWORD *)(v175 + 128) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          v215 = v396;
          v216 = v408;
          v217 = *(_OWORD *)v418;
          v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_1014A58C8((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }
        else
        {
          sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          v13 = 224 * v11;
          v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_1014A58C8((__int128 *)(a1 + 224), v14, a2 - 28);
          v15 = (__int128 *)(a1 + 224 + v13);
          sub_1014A58C8((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_1014A58C8(v14, v12, v15);
          v267 = *(_OWORD *)a1;
          v279 = *(_OWORD *)(a1 + 16);
          v314 = *(_OWORD *)(a1 + 64);
          v326 = *(_OWORD *)(a1 + 80);
          v290 = *(_OWORD *)(a1 + 32);
          v302 = *(_OWORD *)(a1 + 48);
          v362 = *(_OWORD *)(a1 + 128);
          v374 = *(_OWORD *)(a1 + 144);
          v338 = *(_OWORD *)(a1 + 96);
          v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          v386 = *(_OWORD *)(a1 + 160);
          v398 = *(_OWORD *)(a1 + 176);
          v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          v17 = v12[2];
          v18 = v12[3];
          v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 48) = v18;
          v20 = v12[6];
          v21 = v12[7];
          v22 = v12[9];
          *(_OWORD *)(a1 + 128) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          v23 = v12[10];
          v24 = v12[11];
          v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          *v12 = v267;
          v12[1] = v279;
          v12[4] = v314;
          v12[5] = v326;
          v12[2] = v290;
          v12[3] = v302;
          v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v26 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 216) < v26)
            goto LABEL_11;
          v60 = *(_QWORD *)a1;
          v241 = *(_OWORD *)(a1 + 64);
          v244 = *(_OWORD *)(a1 + 80);
          v235 = *(_OWORD *)(a1 + 32);
          v238 = *(_OWORD *)(a1 + 48);
          v253 = *(_OWORD *)(a1 + 128);
          v256 = *(_OWORD *)(a1 + 144);
          v247 = *(_OWORD *)(a1 + 96);
          v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          v259 = *(_OWORD *)(a1 + 160);
          v262 = *(_OWORD *)(a1 + 176);
          v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            v63 = a1 + 224;
            do
            {
              v8 = v63;
              if (v63 >= (unint64_t)a2)
                break;
              v64 = *(double *)(v63 + 8);
              v63 += 224;
            }
            while (v26 >= v64);
          }
          else
          {
            v61 = a1;
            do
            {
              v8 = v61 + 224;
              v62 = *(double *)(v61 + 232);
              v61 += 224;
            }
            while (v26 >= v62);
          }
          v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            v66 = a2;
            do
            {
              v65 = v66 - 14;
              v67 = *((double *)v66 - 27);
              v66 -= 14;
            }
            while (v26 < v67);
          }
          while (v8 < (unint64_t)v65)
          {
            v269 = *(_OWORD *)v8;
            v281 = *(_OWORD *)(v8 + 16);
            v316 = *(_OWORD *)(v8 + 64);
            v328 = *(_OWORD *)(v8 + 80);
            v292 = *(_OWORD *)(v8 + 32);
            v304 = *(_OWORD *)(v8 + 48);
            v364 = *(_OWORD *)(v8 + 128);
            v376 = *(_OWORD *)(v8 + 144);
            v340 = *(_OWORD *)(v8 + 96);
            v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            v388 = *(_OWORD *)(v8 + 160);
            v400 = *(_OWORD *)(v8 + 176);
            v68 = v65[1];
            *(_OWORD *)v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            v69 = v65[2];
            v70 = v65[3];
            v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 48) = v70;
            v72 = v65[6];
            v73 = v65[7];
            v74 = v65[9];
            *(_OWORD *)(v8 + 128) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            v75 = v65[10];
            v76 = v65[11];
            v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              v78 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v26 >= v78);
            do
            {
              v79 = *((double *)v65 - 27);
              v65 -= 14;
            }
            while (v26 < v79);
          }
          if (v8 - 224 != a1)
          {
            v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            v81 = *(_OWORD *)(v8 - 192);
            v82 = *(_OWORD *)(v8 - 176);
            v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 48) = v82;
            v84 = *(_OWORD *)(v8 - 128);
            v85 = *(_OWORD *)(v8 - 112);
            v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            v87 = *(_OWORD *)(v8 - 64);
            v88 = *(_OWORD *)(v8 - 48);
            v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 208) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 128) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 48) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }
        v26 = *(double *)(a1 + 8);
LABEL_11:
        v27 = 0;
        v28 = *(_QWORD *)a1;
        v240 = *(_OWORD *)(a1 + 64);
        v243 = *(_OWORD *)(a1 + 80);
        v252 = *(_OWORD *)(a1 + 128);
        v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        v258 = *(_OWORD *)(a1 + 160);
        v261 = *(_OWORD *)(a1 + 176);
        v246 = *(_OWORD *)(a1 + 96);
        v249 = *(_OWORD *)(a1 + 112);
        v234 = *(_OWORD *)(a1 + 32);
        v237 = *(_OWORD *)(a1 + 48);
        v231 = *(_OWORD *)(a1 + 16);
        do
        {
          v29 = *(double *)(a1 + v27 + 232);
          v27 += 224;
        }
        while (v29 < v26);
        v30 = a1 + v27;
        v31 = a2;
        if (v27 == 224)
        {
          v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            v32 = v34 - 14;
            v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26)
              goto LABEL_21;
          }
          v32 = v34;
        }
        else
        {
          do
          {
            v32 = v31 - 14;
            v33 = *((double *)v31 - 27);
            v31 -= 14;
          }
          while (v33 >= v26);
        }
LABEL_21:
        v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            v37 = v36[1];
            *(_OWORD *)v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            v38 = v36[2];
            v39 = v36[3];
            v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 48) = v39;
            v41 = v36[6];
            v42 = v36[7];
            v43 = v36[9];
            *(_OWORD *)(v8 + 128) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            v44 = v36[10];
            v45 = v36[11];
            v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              v47 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v47 < v26);
            do
            {
              v48 = *((double *)v36 - 27);
              v36 -= 14;
            }
            while (v48 >= v26);
          }
          while (v8 < (unint64_t)v36);
        }
        if (v8 - 224 != a1)
        {
          v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          v50 = *(_OWORD *)(v8 - 192);
          v51 = *(_OWORD *)(v8 - 176);
          v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 48) = v51;
          v53 = *(_OWORD *)(v8 - 128);
          v54 = *(_OWORD *)(v8 - 112);
          v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          v56 = *(_OWORD *)(v8 - 64);
          v57 = *(_OWORD *)(v8 - 48);
          v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }
        *(_QWORD *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 208) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 128) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 48) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_1014A6548(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v59 = sub_1014A7720(a1, v8 - 224);
        if (!sub_1014A7720(v8, (uint64_t)a2))
        {
          if (v59)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 224);
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 16) < *(double *)(v8 + 8))
        {
          v115 = *(_QWORD *)(v8 + 16);
          v109 = *(_OWORD *)v8;
          v47 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v47;
          *(_QWORD *)(a2 - 8) = v115;
          *(_OWORD *)(a2 - 24) = v109;
        }
        return;
      case 3:
        sub_1010E4420((__int128 *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
        return;
      case 4:
        sub_1010E4784(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        v48 = (__int128 *)(v8 + 24);
        v49 = (__int128 *)(v8 + 48);
        v50 = (__int128 *)(v8 + 72);
        sub_1010E4784(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(double *)(a2 - 16) < *(double *)(v8 + 80))
        {
          v51 = *v50;
          v52 = *(_QWORD *)(v8 + 88);
          v53 = *(_QWORD *)(a2 - 8);
          *v50 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 88) = v53;
          *(_QWORD *)(a2 - 8) = v52;
          *(_OWORD *)(a2 - 24) = v51;
          if (*(double *)(v8 + 80) < *(double *)(v8 + 56))
          {
            v54 = *(_QWORD *)(v8 + 64);
            v55 = *v49;
            *v49 = *v50;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v50 = v55;
            *(_QWORD *)(v8 + 88) = v54;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 32))
            {
              v56 = *(_QWORD *)(v8 + 40);
              v57 = *v48;
              *v48 = *v49;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v49 = v57;
              *(_QWORD *)(v8 + 64) = v56;
              if (*(double *)(v8 + 32) < *(double *)(v8 + 8))
              {
                v116 = *(_QWORD *)(v8 + 16);
                v110 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v48;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v48 = v110;
                *(_QWORD *)(v8 + 40) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v58 = (_QWORD *)(v8 + 24);
          v60 = v8 == a2 || v58 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v8;
              do
              {
                v63 = v58;
                v64 = *(double *)(v62 + 32);
                if (v64 < *(double *)(v62 + 8))
                {
                  v65 = *v58;
                  v66 = *(_QWORD *)(v62 + 40);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v8 + v67);
                    *(_QWORD *)(v68 + 40) = *(_QWORD *)(v8 + v67 + 16);
                    if (!v67)
                      break;
                    v67 -= 24;
                    if (v64 >= *(double *)(v68 - 16))
                    {
                      v69 = v8 + v67 + 24;
                      goto LABEL_79;
                    }
                  }
                  v69 = v8;
LABEL_79:
                  *(_QWORD *)v69 = v65;
                  *(double *)(v69 + 8) = v64;
                  *(_QWORD *)(v69 + 16) = v66;
                }
                v58 = v63 + 3;
                v61 += 24;
                v62 = (unint64_t)v63;
              }
              while (v63 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v60)
          {
            do
            {
              v100 = v58;
              v101 = *(double *)(a1 + 32);
              if (v101 < *(double *)(a1 + 8))
              {
                v102 = *v58;
                v103 = *(_QWORD *)(a1 + 40);
                v104 = (double *)v58;
                do
                {
                  *(_OWORD *)v104 = *(_OWORD *)(v104 - 3);
                  v104[2] = *(v104 - 1);
                  v105 = *(v104 - 5);
                  v104 -= 3;
                }
                while (v101 < v105);
                *(_QWORD *)v104 = v102;
                v104[1] = v101;
                *((_QWORD *)v104 + 2) = v103;
              }
              v58 += 3;
              a1 = (uint64_t)v100;
            }
            while (v100 + 3 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v70 = (unint64_t)(v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v8 + 24 * v73;
                if (2 * v72 + 2 < v10 && *(double *)(v8 + 24 * v73 + 8) < *(double *)(v74 + 32))
                {
                  v74 += 24;
                  v73 = 2 * v72 + 2;
                }
                v75 = *(double *)(v8 + 24 * v72 + 8);
                if (*(double *)(v74 + 8) >= v75)
                {
                  v76 = v8 + 24 * v72;
                  v77 = *(_QWORD *)v76;
                  v78 = *(_QWORD *)(v76 + 16);
                  do
                  {
                    v79 = v76;
                    v76 = v74;
                    v80 = *(_OWORD *)v74;
                    *(_QWORD *)(v79 + 16) = *(_QWORD *)(v74 + 16);
                    *(_OWORD *)v79 = v80;
                    if (v70 < v73)
                      break;
                    v81 = (2 * v73) | 1;
                    v74 = v8 + 24 * v81;
                    v82 = 2 * v73 + 2;
                    if (v82 < v10 && *(double *)(v8 + 24 * v81 + 8) < *(double *)(v74 + 32))
                    {
                      v74 += 24;
                      v81 = v82;
                    }
                    v73 = v81;
                  }
                  while (*(double *)(v74 + 8) >= v75);
                  *(_QWORD *)v76 = v77;
                  *(double *)(v76 + 8) = v75;
                  *(_QWORD *)(v76 + 16) = v78;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v83 = v9 / 0x18uLL;
            do
            {
              v84 = 0;
              v117 = *(_QWORD *)(v8 + 16);
              v111 = *(_OWORD *)v8;
              v85 = v8;
              do
              {
                v86 = v85;
                v87 = v84 + 1;
                v85 += 24 * (v84 + 1);
                v88 = 2 * v84;
                v84 = (2 * v84) | 1;
                v89 = v88 + 2;
                if (v89 < v83 && *(double *)(v86 + 24 * v87 + 8) < *(double *)(v85 + 32))
                {
                  v85 += 24;
                  v84 = v89;
                }
                v90 = *(_OWORD *)v85;
                *(_QWORD *)(v86 + 16) = *(_QWORD *)(v85 + 16);
                *(_OWORD *)v86 = v90;
              }
              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24;
              if (v85 == a2)
              {
                *(_QWORD *)(v85 + 16) = v117;
                *(_OWORD *)v85 = v111;
              }
              else
              {
                v91 = *(_OWORD *)a2;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v85 = v91;
                *(_QWORD *)(a2 + 16) = v117;
                *(_OWORD *)a2 = v111;
                v92 = v85 - v8 + 24;
                if (v92 >= 25)
                {
                  v93 = (v92 / 0x18uLL - 2) >> 1;
                  v94 = *(double *)(v85 + 8);
                  if (*(double *)(v8 + 24 * v93 + 8) < v94)
                  {
                    v95 = *(_QWORD *)v85;
                    v96 = *(_QWORD *)(v85 + 16);
                    do
                    {
                      v97 = v85;
                      v85 = v8 + 24 * v93;
                      v98 = *(_OWORD *)v85;
                      *(_QWORD *)(v97 + 16) = *(_QWORD *)(v85 + 16);
                      *(_OWORD *)v97 = v98;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 24 * v93 + 8) < v94);
                    *(_QWORD *)v85 = v95;
                    *(double *)(v85 + 8) = v94;
                    *(_QWORD *)(v85 + 16) = v96;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1010E4420((__int128 *)(a1 + 24 * v11), (double *)a1, (double *)(a2 - 24));
        }
        else
        {
          sub_1010E4420((__int128 *)a1, (double *)(a1 + 24 * v11), (double *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (double *)(a1 + 24 * v11 - 24);
          sub_1010E4420((__int128 *)(a1 + 24), v14, (double *)(a2 - 48));
          v15 = (double *)(a1 + 24 + 8 * v13);
          sub_1010E4420((__int128 *)(a1 + 48), v15, (double *)(a2 - 72));
          sub_1010E4420((__int128 *)v14, (double *)v12, v15);
          v112 = *(_QWORD *)(a1 + 16);
          v106 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v112;
          *(_OWORD *)v12 = v106;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v17)
            goto LABEL_11;
          if (v17 >= *(double *)(a2 - 16))
          {
            v36 = a1 + 24;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = *(double *)(v36 + 8);
              v36 += 24;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = a1;
            do
            {
              v8 = v34 + 24;
              v35 = *(double *)(v34 + 32);
              v34 += 24;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 24;
              v40 = *(double *)(v39 - 16);
              v39 -= 24;
            }
            while (v17 < v40);
          }
          v41 = *(double *)a1;
          v42 = *(_QWORD *)(a1 + 16);
          while (v8 < v38)
          {
            v114 = *(_QWORD *)(v8 + 16);
            v108 = *(_OWORD *)v8;
            v43 = *(_OWORD *)v38;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v8 = v43;
            *(_QWORD *)(v38 + 16) = v114;
            *(_OWORD *)v38 = v108;
            do
            {
              v44 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v17 >= v44);
            do
            {
              v45 = *(double *)(v38 - 16);
              v38 -= 24;
            }
            while (v17 < v45);
          }
          if (v8 - 24 != a1)
          {
            v46 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v41;
          *(double *)(v8 - 16) = v17;
          *(_QWORD *)(v8 - 8) = v42;
          continue;
        }
        v17 = *(double *)(a1 + 8);
LABEL_11:
        v18 = 0;
        v19 = *(double *)a1;
        v20 = *(_QWORD *)(a1 + 16);
        do
        {
          v21 = *(double *)(a1 + v18 + 32);
          v18 += 24;
        }
        while (v21 < v17);
        v22 = a1 + v18;
        v23 = a2;
        if (v18 == 24)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 24;
            v27 = *(double *)(v26 - 16);
            v26 -= 24;
            if (v27 < v17)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 24;
            v25 = *(double *)(v23 - 16);
            v23 -= 24;
          }
          while (v25 >= v17);
        }
LABEL_21:
        v8 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v113 = *(_QWORD *)(v8 + 16);
            v107 = *(_OWORD *)v8;
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v8 = v29;
            *(_QWORD *)(v28 + 16) = v113;
            *(_OWORD *)v28 = v107;
            do
            {
              v30 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v30 < v17);
            do
            {
              v31 = *(double *)(v28 - 16);
              v28 -= 24;
            }
            while (v31 >= v17);
          }
          while (v8 < v28);
        }
        if (v8 - 24 != a1)
        {
          v32 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v32;
        }
        *(double *)(v8 - 24) = v19;
        *(double *)(v8 - 16) = v17;
        *(_QWORD *)(v8 - 8) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_1014A7E18(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1014A86C0(a1, v8 - 24);
        if (!sub_1014A86C0(v8, a2))
        {
          if (v33)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 24;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = (uint64_t)a2 - v8;
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)((uint64_t)a2 - v8) >> 5);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*((double *)a2 - 27) < *(double *)(v8 + 8))
        {
          v270 = *(_OWORD *)v8;
          v282 = *(_OWORD *)(v8 + 16);
          v317 = *(_OWORD *)(v8 + 64);
          v329 = *(_OWORD *)(v8 + 80);
          v293 = *(_OWORD *)(v8 + 32);
          v305 = *(_OWORD *)(v8 + 48);
          v365 = *(_OWORD *)(v8 + 128);
          v377 = *(_OWORD *)(v8 + 144);
          v341 = *(_OWORD *)(v8 + 96);
          v353 = *(_OWORD *)(v8 + 112);
          *(_OWORD *)v413 = *(_OWORD *)(v8 + 192);
          *(_OWORD *)&v413[16] = *(_OWORD *)(v8 + 208);
          v389 = *(_OWORD *)(v8 + 160);
          v401 = *(_OWORD *)(v8 + 176);
          v90 = *(a2 - 13);
          *(_OWORD *)v8 = *(a2 - 14);
          *(_OWORD *)(v8 + 16) = v90;
          v91 = *(a2 - 12);
          v92 = *(a2 - 11);
          v93 = *(a2 - 9);
          *(_OWORD *)(v8 + 64) = *(a2 - 10);
          *(_OWORD *)(v8 + 80) = v93;
          *(_OWORD *)(v8 + 32) = v91;
          *(_OWORD *)(v8 + 48) = v92;
          v94 = *(a2 - 8);
          v95 = *(a2 - 7);
          v96 = *(a2 - 5);
          *(_OWORD *)(v8 + 128) = *(a2 - 6);
          *(_OWORD *)(v8 + 144) = v96;
          *(_OWORD *)(v8 + 96) = v94;
          *(_OWORD *)(v8 + 112) = v95;
          v97 = *(a2 - 4);
          v98 = *(a2 - 3);
          v99 = *(a2 - 2);
          *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 176) = v98;
          *(_OWORD *)(v8 + 192) = v99;
          *(_OWORD *)(v8 + 160) = v97;
          *(a2 - 14) = v270;
          *(a2 - 13) = v282;
          *(a2 - 10) = v317;
          *(a2 - 9) = v329;
          *(a2 - 12) = v293;
          *(a2 - 11) = v305;
          *(a2 - 6) = v365;
          *(a2 - 5) = v377;
          *(a2 - 8) = v341;
          *(a2 - 7) = v353;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v413[13];
          *(a2 - 3) = v401;
          *(a2 - 2) = *(_OWORD *)v413;
          *(a2 - 4) = v389;
        }
        return;
      case 3:
        sub_1014A58C8((__int128 *)v8, (__int128 *)(v8 + 224), a2 - 14);
        return;
      case 4:
        sub_1014A62A8(v8, v8 + 224, v8 + 448, (uint64_t)(a2 - 14));
        return;
      case 5:
        v100 = (__int128 *)(v8 + 224);
        v101 = (__int128 *)(v8 + 448);
        v102 = (__int128 *)(v8 + 672);
        sub_1014A62A8(v8, v8 + 224, v8 + 448, v8 + 672);
        if (*((double *)a2 - 27) < *(double *)(v8 + 680))
        {
          v318 = *(_OWORD *)(v8 + 736);
          v330 = *(_OWORD *)(v8 + 752);
          v294 = *(_OWORD *)(v8 + 704);
          v306 = *(_OWORD *)(v8 + 720);
          v366 = *(_OWORD *)(v8 + 800);
          v378 = *(_OWORD *)(v8 + 816);
          v342 = *(_OWORD *)(v8 + 768);
          v354 = *(_OWORD *)(v8 + 784);
          *(_OWORD *)v414 = *(_OWORD *)(v8 + 864);
          *(_OWORD *)&v414[16] = *(_OWORD *)(v8 + 880);
          v390 = *(_OWORD *)(v8 + 832);
          v402 = *(_OWORD *)(v8 + 848);
          v271 = *v102;
          v283 = *(_OWORD *)(v8 + 688);
          v103 = *(a2 - 13);
          *v102 = *(a2 - 14);
          *(_OWORD *)(v8 + 688) = v103;
          v104 = *(a2 - 12);
          v105 = *(a2 - 11);
          v106 = *(a2 - 9);
          *(_OWORD *)(v8 + 736) = *(a2 - 10);
          *(_OWORD *)(v8 + 752) = v106;
          *(_OWORD *)(v8 + 704) = v104;
          *(_OWORD *)(v8 + 720) = v105;
          v107 = *(a2 - 8);
          v108 = *(a2 - 7);
          v109 = *(a2 - 5);
          *(_OWORD *)(v8 + 800) = *(a2 - 6);
          *(_OWORD *)(v8 + 816) = v109;
          *(_OWORD *)(v8 + 768) = v107;
          *(_OWORD *)(v8 + 784) = v108;
          v110 = *(a2 - 4);
          v111 = *(a2 - 3);
          v112 = *(a2 - 2);
          *(_OWORD *)(v8 + 877) = *(__int128 *)((char *)a2 - 19);
          *(_OWORD *)(v8 + 848) = v111;
          *(_OWORD *)(v8 + 864) = v112;
          *(_OWORD *)(v8 + 832) = v110;
          *(a2 - 14) = v271;
          *(a2 - 13) = v283;
          *(a2 - 10) = v318;
          *(a2 - 9) = v330;
          *(a2 - 12) = v294;
          *(a2 - 11) = v306;
          *(a2 - 6) = v366;
          *(a2 - 5) = v378;
          *(a2 - 8) = v342;
          *(a2 - 7) = v354;
          *(__int128 *)((char *)a2 - 19) = *(_OWORD *)&v414[13];
          *(a2 - 3) = v402;
          *(a2 - 2) = *(_OWORD *)v414;
          *(a2 - 4) = v390;
          if (*(double *)(v8 + 680) < *(double *)(v8 + 456))
          {
            v391 = *(_OWORD *)(v8 + 608);
            v403 = *(_OWORD *)(v8 + 624);
            *(_OWORD *)v415 = *(_OWORD *)(v8 + 640);
            *(_OWORD *)&v415[16] = *(_OWORD *)(v8 + 656);
            v343 = *(_OWORD *)(v8 + 544);
            v355 = *(_OWORD *)(v8 + 560);
            v367 = *(_OWORD *)(v8 + 576);
            v379 = *(_OWORD *)(v8 + 592);
            v295 = *(_OWORD *)(v8 + 480);
            v307 = *(_OWORD *)(v8 + 496);
            v319 = *(_OWORD *)(v8 + 512);
            v331 = *(_OWORD *)(v8 + 528);
            v272 = *v101;
            v284 = *(_OWORD *)(v8 + 464);
            v113 = *(_OWORD *)(v8 + 848);
            *(_OWORD *)(v8 + 608) = *(_OWORD *)(v8 + 832);
            *(_OWORD *)(v8 + 624) = v113;
            *(_OWORD *)(v8 + 640) = *(_OWORD *)(v8 + 864);
            *(_OWORD *)(v8 + 653) = *(_OWORD *)(v8 + 877);
            v114 = *(_OWORD *)(v8 + 784);
            *(_OWORD *)(v8 + 544) = *(_OWORD *)(v8 + 768);
            *(_OWORD *)(v8 + 560) = v114;
            v115 = *(_OWORD *)(v8 + 816);
            *(_OWORD *)(v8 + 576) = *(_OWORD *)(v8 + 800);
            *(_OWORD *)(v8 + 592) = v115;
            v116 = *(_OWORD *)(v8 + 720);
            *(_OWORD *)(v8 + 480) = *(_OWORD *)(v8 + 704);
            *(_OWORD *)(v8 + 496) = v116;
            v117 = *(_OWORD *)(v8 + 752);
            *(_OWORD *)(v8 + 512) = *(_OWORD *)(v8 + 736);
            *(_OWORD *)(v8 + 528) = v117;
            v118 = *(_OWORD *)(v8 + 688);
            *v101 = *v102;
            *(_OWORD *)(v8 + 464) = v118;
            *(_OWORD *)(v8 + 832) = v391;
            *(_OWORD *)(v8 + 848) = v403;
            *(_OWORD *)(v8 + 864) = *(_OWORD *)v415;
            *(_OWORD *)(v8 + 877) = *(_OWORD *)&v415[13];
            *(_OWORD *)(v8 + 768) = v343;
            *(_OWORD *)(v8 + 784) = v355;
            *(_OWORD *)(v8 + 800) = v367;
            *(_OWORD *)(v8 + 816) = v379;
            *(_OWORD *)(v8 + 704) = v295;
            *(_OWORD *)(v8 + 720) = v307;
            *(_OWORD *)(v8 + 736) = v319;
            *(_OWORD *)(v8 + 752) = v331;
            v119 = *(double *)(v8 + 456) < *(double *)(v8 + 232);
            *v102 = v272;
            *(_OWORD *)(v8 + 688) = v284;
            if (v119)
            {
              v392 = *(_OWORD *)(v8 + 384);
              v404 = *(_OWORD *)(v8 + 400);
              *(_OWORD *)v416 = *(_OWORD *)(v8 + 416);
              *(_OWORD *)&v416[16] = *(_OWORD *)(v8 + 432);
              v344 = *(_OWORD *)(v8 + 320);
              v356 = *(_OWORD *)(v8 + 336);
              v368 = *(_OWORD *)(v8 + 352);
              v380 = *(_OWORD *)(v8 + 368);
              v296 = *(_OWORD *)(v8 + 256);
              v308 = *(_OWORD *)(v8 + 272);
              v320 = *(_OWORD *)(v8 + 288);
              v332 = *(_OWORD *)(v8 + 304);
              v273 = *v100;
              v285 = *(_OWORD *)(v8 + 240);
              v120 = *(_OWORD *)(v8 + 624);
              *(_OWORD *)(v8 + 384) = *(_OWORD *)(v8 + 608);
              *(_OWORD *)(v8 + 400) = v120;
              *(_OWORD *)(v8 + 416) = *(_OWORD *)(v8 + 640);
              *(_OWORD *)(v8 + 429) = *(_OWORD *)(v8 + 653);
              v121 = *(_OWORD *)(v8 + 560);
              *(_OWORD *)(v8 + 320) = *(_OWORD *)(v8 + 544);
              *(_OWORD *)(v8 + 336) = v121;
              v122 = *(_OWORD *)(v8 + 592);
              *(_OWORD *)(v8 + 352) = *(_OWORD *)(v8 + 576);
              *(_OWORD *)(v8 + 368) = v122;
              v123 = *(_OWORD *)(v8 + 496);
              *(_OWORD *)(v8 + 256) = *(_OWORD *)(v8 + 480);
              *(_OWORD *)(v8 + 272) = v123;
              v124 = *(_OWORD *)(v8 + 528);
              *(_OWORD *)(v8 + 288) = *(_OWORD *)(v8 + 512);
              *(_OWORD *)(v8 + 304) = v124;
              v125 = *(_OWORD *)(v8 + 464);
              *v100 = *v101;
              *(_OWORD *)(v8 + 240) = v125;
              *(_OWORD *)(v8 + 608) = v392;
              *(_OWORD *)(v8 + 624) = v404;
              *(_OWORD *)(v8 + 640) = *(_OWORD *)v416;
              *(_OWORD *)(v8 + 653) = *(_OWORD *)&v416[13];
              *(_OWORD *)(v8 + 544) = v344;
              *(_OWORD *)(v8 + 560) = v356;
              *(_OWORD *)(v8 + 576) = v368;
              *(_OWORD *)(v8 + 592) = v380;
              *(_OWORD *)(v8 + 480) = v296;
              *(_OWORD *)(v8 + 496) = v308;
              *(_OWORD *)(v8 + 512) = v320;
              *(_OWORD *)(v8 + 528) = v332;
              v119 = *(double *)(v8 + 232) < *(double *)(v8 + 8);
              *v101 = v273;
              *(_OWORD *)(v8 + 464) = v285;
              if (v119)
              {
                v274 = *(_OWORD *)v8;
                v286 = *(_OWORD *)(v8 + 16);
                v321 = *(_OWORD *)(v8 + 64);
                v333 = *(_OWORD *)(v8 + 80);
                v297 = *(_OWORD *)(v8 + 32);
                v309 = *(_OWORD *)(v8 + 48);
                v369 = *(_OWORD *)(v8 + 128);
                v381 = *(_OWORD *)(v8 + 144);
                v345 = *(_OWORD *)(v8 + 96);
                v357 = *(_OWORD *)(v8 + 112);
                *(_OWORD *)v417 = *(_OWORD *)(v8 + 192);
                *(_OWORD *)&v417[16] = *(_OWORD *)(v8 + 208);
                v393 = *(_OWORD *)(v8 + 160);
                v405 = *(_OWORD *)(v8 + 176);
                v126 = *(_OWORD *)(v8 + 304);
                *(_OWORD *)(v8 + 64) = *(_OWORD *)(v8 + 288);
                *(_OWORD *)(v8 + 80) = v126;
                v127 = *(_OWORD *)(v8 + 272);
                *(_OWORD *)(v8 + 32) = *(_OWORD *)(v8 + 256);
                *(_OWORD *)(v8 + 48) = v127;
                v128 = *(_OWORD *)(v8 + 368);
                *(_OWORD *)(v8 + 128) = *(_OWORD *)(v8 + 352);
                *(_OWORD *)(v8 + 144) = v128;
                v129 = *(_OWORD *)(v8 + 336);
                *(_OWORD *)(v8 + 96) = *(_OWORD *)(v8 + 320);
                *(_OWORD *)(v8 + 112) = v129;
                *(_OWORD *)(v8 + 205) = *(_OWORD *)(v8 + 429);
                v130 = *(_OWORD *)(v8 + 416);
                v131 = *(_OWORD *)(v8 + 384);
                *(_OWORD *)(v8 + 176) = *(_OWORD *)(v8 + 400);
                *(_OWORD *)(v8 + 192) = v130;
                *(_OWORD *)(v8 + 160) = v131;
                v132 = *(_OWORD *)(v8 + 240);
                *(_OWORD *)v8 = *v100;
                *(_OWORD *)(v8 + 16) = v132;
                *(_OWORD *)(v8 + 384) = v393;
                *(_OWORD *)(v8 + 400) = v405;
                *(_OWORD *)(v8 + 416) = *(_OWORD *)v417;
                *(_OWORD *)(v8 + 429) = *(_OWORD *)&v417[13];
                *(_OWORD *)(v8 + 320) = v345;
                *(_OWORD *)(v8 + 336) = v357;
                *(_OWORD *)(v8 + 352) = v369;
                *(_OWORD *)(v8 + 368) = v381;
                *(_OWORD *)(v8 + 256) = v297;
                *(_OWORD *)(v8 + 272) = v309;
                *(_OWORD *)(v8 + 288) = v321;
                *(_OWORD *)(v8 + 304) = v333;
                *v100 = v274;
                *(_OWORD *)(v8 + 240) = v286;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 5375)
        {
          v133 = (__int128 *)(v8 + 224);
          v135 = (__int128 *)v8 == a2 || v133 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v135)
            {
              v136 = 0;
              v137 = v8;
              do
              {
                v138 = v133;
                v139 = *(double *)(v137 + 232);
                if (v139 < *(double *)(v137 + 8))
                {
                  v140 = *(_QWORD *)v133;
                  v394 = *(_OWORD *)(v137 + 400);
                  *(_OWORD *)v406 = *(_OWORD *)(v137 + 416);
                  *(_OWORD *)&v406[16] = *(_OWORD *)(v137 + 432);
                  v346 = *(_OWORD *)(v137 + 336);
                  v358 = *(_OWORD *)(v137 + 352);
                  v370 = *(_OWORD *)(v137 + 368);
                  v382 = *(_OWORD *)(v137 + 384);
                  v298 = *(_OWORD *)(v137 + 272);
                  v310 = *(_OWORD *)(v137 + 288);
                  v322 = *(_OWORD *)(v137 + 304);
                  v334 = *(_OWORD *)(v137 + 320);
                  v142 = *(_OWORD *)(v137 + 240);
                  v141 = *(_OWORD *)(v137 + 256);
                  v143 = v136;
                  v275 = v142;
                  while (1)
                  {
                    v144 = (double *)(v8 + v143);
                    v145 = *(_OWORD *)(v8 + v143 + 176);
                    *((_OWORD *)v144 + 24) = *(_OWORD *)(v8 + v143 + 160);
                    *((_OWORD *)v144 + 25) = v145;
                    *((_OWORD *)v144 + 26) = *(_OWORD *)(v8 + v143 + 192);
                    *(_OWORD *)(v8 + v143 + 429) = *(_OWORD *)(v8 + v143 + 205);
                    v146 = *(_OWORD *)(v8 + v143 + 112);
                    *((_OWORD *)v144 + 20) = *(_OWORD *)(v8 + v143 + 96);
                    *((_OWORD *)v144 + 21) = v146;
                    v147 = *(_OWORD *)(v8 + v143 + 144);
                    *((_OWORD *)v144 + 22) = *(_OWORD *)(v8 + v143 + 128);
                    *((_OWORD *)v144 + 23) = v147;
                    v148 = *(_OWORD *)(v8 + v143 + 48);
                    *((_OWORD *)v144 + 16) = *(_OWORD *)(v8 + v143 + 32);
                    *((_OWORD *)v144 + 17) = v148;
                    v149 = *(_OWORD *)(v8 + v143 + 80);
                    *((_OWORD *)v144 + 18) = *(_OWORD *)(v8 + v143 + 64);
                    *((_OWORD *)v144 + 19) = v149;
                    v150 = *(_OWORD *)(v8 + v143 + 16);
                    *((_OWORD *)v144 + 14) = *(_OWORD *)(v8 + v143);
                    *((_OWORD *)v144 + 15) = v150;
                    if (!v143)
                      break;
                    v143 -= 224;
                    if (v139 >= *(v144 - 27))
                    {
                      v151 = v8 + v143 + 224;
                      goto LABEL_80;
                    }
                  }
                  v151 = v8;
LABEL_80:
                  *(_QWORD *)v151 = v140;
                  *(double *)(v151 + 8) = v139;
                  *(_OWORD *)(v151 + 176) = v394;
                  *(_OWORD *)(v151 + 192) = *(_OWORD *)v406;
                  *(_OWORD *)(v151 + 205) = *(_OWORD *)&v406[13];
                  *(_OWORD *)(v151 + 112) = v346;
                  *(_OWORD *)(v151 + 128) = v358;
                  *(_OWORD *)(v151 + 144) = v370;
                  *(_OWORD *)(v151 + 160) = v382;
                  *(_OWORD *)(v151 + 48) = v298;
                  *(_OWORD *)(v151 + 64) = v310;
                  *(_OWORD *)(v151 + 80) = v322;
                  *(_OWORD *)(v151 + 96) = v334;
                  *(_OWORD *)(v151 + 16) = v275;
                  *(_OWORD *)(v151 + 32) = v141;
                }
                v133 = v138 + 14;
                v136 += 224;
                v137 = (unint64_t)v138;
              }
              while (v138 + 14 != a2);
            }
          }
          else if (!v135)
          {
            do
            {
              v220 = v133;
              v221 = *(double *)(a1 + 232);
              if (v221 < *(double *)(a1 + 8))
              {
                v222 = *(_QWORD *)v133;
                v397 = *(_OWORD *)(a1 + 400);
                *(_OWORD *)v409 = *(_OWORD *)(a1 + 416);
                *(_OWORD *)&v409[16] = *(_OWORD *)(a1 + 432);
                v349 = *(_OWORD *)(a1 + 336);
                v361 = *(_OWORD *)(a1 + 352);
                v373 = *(_OWORD *)(a1 + 368);
                v385 = *(_OWORD *)(a1 + 384);
                v301 = *(_OWORD *)(a1 + 272);
                v313 = *(_OWORD *)(a1 + 288);
                v325 = *(_OWORD *)(a1 + 304);
                v337 = *(_OWORD *)(a1 + 320);
                v278 = *(_OWORD *)(a1 + 240);
                v289 = *(_OWORD *)(a1 + 256);
                do
                {
                  v223 = a1 + 224;
                  v224 = *(_OWORD *)(a1 + 176);
                  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a1 + 160);
                  *(_OWORD *)(a1 + 400) = v224;
                  *(_OWORD *)(a1 + 416) = *(_OWORD *)(a1 + 192);
                  v225 = *(_OWORD *)(a1 + 112);
                  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a1 + 96);
                  *(_OWORD *)(a1 + 336) = v225;
                  v226 = *(_OWORD *)(a1 + 144);
                  *(_OWORD *)(a1 + 352) = *(_OWORD *)(a1 + 128);
                  *(_OWORD *)(a1 + 368) = v226;
                  v227 = *(_OWORD *)(a1 + 48);
                  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a1 + 32);
                  *(_OWORD *)(a1 + 272) = v227;
                  v228 = *(_OWORD *)(a1 + 80);
                  *(_OWORD *)(a1 + 288) = *(_OWORD *)(a1 + 64);
                  *(_OWORD *)(a1 + 304) = v228;
                  v229 = *(_OWORD *)(a1 + 16);
                  *(_OWORD *)(a1 + 224) = *(_OWORD *)a1;
                  *(_OWORD *)(a1 + 240) = v229;
                  v119 = v221 < *(double *)(a1 - 216);
                  v230 = *(_OWORD *)(a1 + 205);
                  a1 -= 224;
                  *(_OWORD *)(v223 + 205) = v230;
                }
                while (v119);
                *(_QWORD *)(a1 + 224) = v222;
                *(double *)(a1 + 232) = v221;
                *(_OWORD *)(a1 + 240) = v278;
                *(_OWORD *)(a1 + 288) = v313;
                *(_OWORD *)(a1 + 304) = v325;
                *(_OWORD *)(a1 + 256) = v289;
                *(_OWORD *)(a1 + 272) = v301;
                *(_OWORD *)(a1 + 352) = v361;
                *(_OWORD *)(a1 + 368) = v373;
                *(_OWORD *)(a1 + 320) = v337;
                *(_OWORD *)(a1 + 336) = v349;
                *(_OWORD *)(a1 + 429) = *(_OWORD *)&v409[13];
                *(_OWORD *)(a1 + 400) = v397;
                *(_OWORD *)(a1 + 416) = *(_OWORD *)v409;
                *(_OWORD *)(a1 + 384) = v385;
              }
              v133 = v220 + 14;
              a1 = (uint64_t)v220;
            }
            while (v220 + 14 != a2);
          }
          return;
        }
        if (!a3)
        {
          if ((__int128 *)v8 == a2)
            return;
          v152 = (unint64_t)(v10 - 2) >> 1;
          v153 = v152;
          do
          {
            v154 = v153;
            if (v152 >= v153)
            {
              v155 = (2 * v153) | 1;
              v156 = v8 + 224 * v155;
              if (2 * v153 + 2 < v10 && *(double *)(v8 + 224 * v155 + 8) < *(double *)(v156 + 232))
              {
                v156 += 224;
                v155 = 2 * v153 + 2;
              }
              v157 = *(double *)(v8 + 224 * v153 + 8);
              if (*(double *)(v156 + 8) >= v157)
              {
                v158 = v8 + 224 * v153;
                v159 = *(_QWORD *)v158;
                v276 = *(_OWORD *)(v158 + 16);
                v311 = *(_OWORD *)(v158 + 64);
                v323 = *(_OWORD *)(v158 + 80);
                v287 = *(_OWORD *)(v158 + 32);
                v299 = *(_OWORD *)(v158 + 48);
                v359 = *(_OWORD *)(v158 + 128);
                v371 = *(_OWORD *)(v158 + 144);
                v335 = *(_OWORD *)(v158 + 96);
                v347 = *(_OWORD *)(v158 + 112);
                *(_OWORD *)v407 = *(_OWORD *)(v158 + 192);
                *(_OWORD *)&v407[16] = *(_OWORD *)(v158 + 208);
                v383 = *(_OWORD *)(v158 + 160);
                v395 = *(_OWORD *)(v158 + 176);
                do
                {
                  v160 = (_OWORD *)v158;
                  v158 = v156;
                  v161 = *(_OWORD *)(v156 + 16);
                  *v160 = *(_OWORD *)v156;
                  v160[1] = v161;
                  v162 = *(_OWORD *)(v156 + 32);
                  v163 = *(_OWORD *)(v156 + 48);
                  v164 = *(_OWORD *)(v156 + 80);
                  v160[4] = *(_OWORD *)(v156 + 64);
                  v160[5] = v164;
                  v160[2] = v162;
                  v160[3] = v163;
                  v165 = *(_OWORD *)(v156 + 96);
                  v166 = *(_OWORD *)(v156 + 112);
                  v167 = *(_OWORD *)(v156 + 144);
                  v160[8] = *(_OWORD *)(v156 + 128);
                  v160[9] = v167;
                  v160[6] = v165;
                  v160[7] = v166;
                  v168 = *(_OWORD *)(v156 + 160);
                  v169 = *(_OWORD *)(v156 + 176);
                  v170 = *(_OWORD *)(v156 + 192);
                  *(_OWORD *)((char *)v160 + 205) = *(_OWORD *)(v156 + 205);
                  v160[11] = v169;
                  v160[12] = v170;
                  v160[10] = v168;
                  if (v152 < v155)
                    break;
                  v171 = (2 * v155) | 1;
                  v156 = v8 + 224 * v171;
                  v172 = 2 * v155 + 2;
                  if (v172 < v10 && *(double *)(v8 + 224 * v171 + 8) < *(double *)(v156 + 232))
                  {
                    v156 += 224;
                    v171 = v172;
                  }
                  v155 = v171;
                }
                while (*(double *)(v156 + 8) >= v157);
                *(_QWORD *)v158 = v159;
                *(double *)(v158 + 8) = v157;
                *(_OWORD *)(v158 + 176) = v395;
                *(_OWORD *)(v158 + 192) = *(_OWORD *)v407;
                *(_OWORD *)(v158 + 205) = *(_OWORD *)&v407[13];
                *(_OWORD *)(v158 + 112) = v347;
                *(_OWORD *)(v158 + 128) = v359;
                *(_OWORD *)(v158 + 144) = v371;
                *(_OWORD *)(v158 + 160) = v383;
                *(_OWORD *)(v158 + 48) = v299;
                *(_OWORD *)(v158 + 64) = v311;
                *(_OWORD *)(v158 + 80) = v323;
                *(_OWORD *)(v158 + 96) = v335;
                *(_OWORD *)(v158 + 16) = v276;
                *(_OWORD *)(v158 + 32) = v287;
              }
            }
            v153 = v154 - 1;
          }
          while (v154);
          v173 = (((unint64_t)v9 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64;
          while (2)
          {
            v174 = 0;
            v277 = *(_OWORD *)v8;
            v288 = *(_OWORD *)(v8 + 16);
            v324 = *(_OWORD *)(v8 + 64);
            v336 = *(_OWORD *)(v8 + 80);
            v300 = *(_OWORD *)(v8 + 32);
            v312 = *(_OWORD *)(v8 + 48);
            v372 = *(_OWORD *)(v8 + 128);
            v384 = *(_OWORD *)(v8 + 144);
            v348 = *(_OWORD *)(v8 + 96);
            v360 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v418 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v418[16] = *(_OWORD *)(v8 + 208);
            v396 = *(_OWORD *)(v8 + 160);
            v408 = *(_OWORD *)(v8 + 176);
            v175 = v8;
            do
            {
              v176 = (_OWORD *)v175;
              v177 = v174 + 1;
              v175 += 224 * (v174 + 1);
              v178 = 2 * v174;
              v174 = (2 * v174) | 1;
              v179 = v178 + 2;
              if (v179 < v173 && *((double *)&v176[14 * v177] + 1) < *(double *)(v175 + 232))
              {
                v175 += 224;
                v174 = v179;
              }
              v180 = *(_OWORD *)(v175 + 16);
              *v176 = *(_OWORD *)v175;
              v176[1] = v180;
              v181 = *(_OWORD *)(v175 + 32);
              v182 = *(_OWORD *)(v175 + 48);
              v183 = *(_OWORD *)(v175 + 80);
              v176[4] = *(_OWORD *)(v175 + 64);
              v176[5] = v183;
              v176[2] = v181;
              v176[3] = v182;
              v184 = *(_OWORD *)(v175 + 96);
              v185 = *(_OWORD *)(v175 + 112);
              v186 = *(_OWORD *)(v175 + 144);
              v176[8] = *(_OWORD *)(v175 + 128);
              v176[9] = v186;
              v176[6] = v184;
              v176[7] = v185;
              v187 = *(_OWORD *)(v175 + 160);
              v188 = *(_OWORD *)(v175 + 176);
              v189 = *(_OWORD *)(v175 + 192);
              *(_OWORD *)((char *)v176 + 205) = *(_OWORD *)(v175 + 205);
              v176[11] = v188;
              v176[12] = v189;
              v176[10] = v187;
            }
            while (v174 <= (uint64_t)((unint64_t)(v173 - 2) >> 1));
            a2 -= 14;
            if ((__int128 *)v175 != a2)
            {
              v190 = a2[1];
              *(_OWORD *)v175 = *a2;
              *(_OWORD *)(v175 + 16) = v190;
              v191 = a2[2];
              v192 = a2[3];
              v193 = a2[5];
              *(_OWORD *)(v175 + 64) = a2[4];
              *(_OWORD *)(v175 + 80) = v193;
              *(_OWORD *)(v175 + 32) = v191;
              *(_OWORD *)(v175 + 48) = v192;
              v194 = a2[6];
              v195 = a2[7];
              v196 = a2[9];
              *(_OWORD *)(v175 + 128) = a2[8];
              *(_OWORD *)(v175 + 144) = v196;
              *(_OWORD *)(v175 + 96) = v194;
              *(_OWORD *)(v175 + 112) = v195;
              v197 = a2[10];
              v198 = a2[11];
              v199 = a2[12];
              *(_OWORD *)(v175 + 205) = *(__int128 *)((char *)a2 + 205);
              *(_OWORD *)(v175 + 176) = v198;
              *(_OWORD *)(v175 + 192) = v199;
              *(_OWORD *)(v175 + 160) = v197;
              *a2 = v277;
              a2[1] = v288;
              a2[4] = v324;
              a2[5] = v336;
              a2[2] = v300;
              a2[3] = v312;
              a2[8] = v372;
              a2[9] = v384;
              a2[6] = v348;
              a2[7] = v360;
              *(__int128 *)((char *)a2 + 205) = *(_OWORD *)&v418[13];
              a2[11] = v408;
              a2[12] = *(_OWORD *)v418;
              a2[10] = v396;
              v200 = v175 - v8 + 224;
              if (v200 >= 225)
              {
                v201 = (unint64_t)(((((unint64_t)v200 >> 5) * (unsigned __int128)0x2492492492492493uLL) >> 64)
                                        - 2) >> 1;
                v202 = *(double *)(v175 + 8);
                if (*(double *)(v8 + 224 * v201 + 8) < v202)
                {
                  v203 = *(_QWORD *)v175;
                  v233 = *(_OWORD *)(v175 + 16);
                  v242 = *(_OWORD *)(v175 + 64);
                  v245 = *(_OWORD *)(v175 + 80);
                  v236 = *(_OWORD *)(v175 + 32);
                  v239 = *(_OWORD *)(v175 + 48);
                  v254 = *(_OWORD *)(v175 + 128);
                  v257 = *(_OWORD *)(v175 + 144);
                  v248 = *(_OWORD *)(v175 + 96);
                  v251 = *(_OWORD *)(v175 + 112);
                  *(_OWORD *)v266 = *(_OWORD *)(v175 + 192);
                  *(_OWORD *)&v266[16] = *(_OWORD *)(v175 + 208);
                  v260 = *(_OWORD *)(v175 + 160);
                  v263 = *(_OWORD *)(v175 + 176);
                  do
                  {
                    v204 = (_OWORD *)v175;
                    v175 = v8 + 224 * v201;
                    v205 = *(_OWORD *)(v175 + 16);
                    *v204 = *(_OWORD *)v175;
                    v204[1] = v205;
                    v206 = *(_OWORD *)(v175 + 32);
                    v207 = *(_OWORD *)(v175 + 48);
                    v208 = *(_OWORD *)(v175 + 80);
                    v204[4] = *(_OWORD *)(v175 + 64);
                    v204[5] = v208;
                    v204[2] = v206;
                    v204[3] = v207;
                    v209 = *(_OWORD *)(v175 + 96);
                    v210 = *(_OWORD *)(v175 + 112);
                    v211 = *(_OWORD *)(v175 + 144);
                    v204[8] = *(_OWORD *)(v175 + 128);
                    v204[9] = v211;
                    v204[6] = v209;
                    v204[7] = v210;
                    v212 = *(_OWORD *)(v175 + 160);
                    v213 = *(_OWORD *)(v175 + 176);
                    v214 = *(_OWORD *)(v175 + 192);
                    *(_OWORD *)((char *)v204 + 205) = *(_OWORD *)(v175 + 205);
                    v204[11] = v213;
                    v204[12] = v214;
                    v204[10] = v212;
                    if (!v201)
                      break;
                    v201 = (v201 - 1) >> 1;
                  }
                  while (*(double *)(v8 + 224 * v201 + 8) < v202);
                  *(_QWORD *)v175 = v203;
                  *(double *)(v175 + 8) = v202;
                  *(_OWORD *)(v175 + 16) = v233;
                  *(_OWORD *)(v175 + 64) = v242;
                  *(_OWORD *)(v175 + 80) = v245;
                  *(_OWORD *)(v175 + 32) = v236;
                  *(_OWORD *)(v175 + 48) = v239;
                  *(_OWORD *)(v175 + 128) = v254;
                  *(_OWORD *)(v175 + 144) = v257;
                  *(_OWORD *)(v175 + 96) = v248;
                  *(_OWORD *)(v175 + 112) = v251;
                  v215 = v260;
                  v216 = v263;
                  v217 = *(_OWORD *)v266;
                  v218 = *(_OWORD *)&v266[13];
LABEL_112:
                  *(_OWORD *)(v175 + 205) = v218;
                  *(_OWORD *)(v175 + 176) = v216;
                  *(_OWORD *)(v175 + 192) = v217;
                  *(_OWORD *)(v175 + 160) = v215;
                }
              }
              if (v173-- <= 2)
                return;
              continue;
            }
            break;
          }
          *(_OWORD *)v175 = v277;
          *(_OWORD *)(v175 + 16) = v288;
          *(_OWORD *)(v175 + 64) = v324;
          *(_OWORD *)(v175 + 80) = v336;
          *(_OWORD *)(v175 + 32) = v300;
          *(_OWORD *)(v175 + 48) = v312;
          *(_OWORD *)(v175 + 128) = v372;
          *(_OWORD *)(v175 + 144) = v384;
          *(_OWORD *)(v175 + 96) = v348;
          *(_OWORD *)(v175 + 112) = v360;
          v215 = v396;
          v216 = v408;
          v217 = *(_OWORD *)v418;
          v218 = *(_OWORD *)&v418[13];
          goto LABEL_112;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = (__int128 *)(v8 + 224 * ((unint64_t)v10 >> 1));
        if ((unint64_t)v9 <= 0x7000)
        {
          sub_1014A58C8((__int128 *)(a1 + 224 * v11), (__int128 *)a1, a2 - 14);
        }
        else
        {
          sub_1014A58C8((__int128 *)a1, (__int128 *)(a1 + 224 * v11), a2 - 14);
          v13 = 224 * v11;
          v14 = (__int128 *)(224 * v11 + a1 - 224);
          sub_1014A58C8((__int128 *)(a1 + 224), v14, a2 - 28);
          v15 = (__int128 *)(a1 + 224 + v13);
          sub_1014A58C8((__int128 *)(a1 + 448), v15, a2 - 42);
          sub_1014A58C8(v14, v12, v15);
          v267 = *(_OWORD *)a1;
          v279 = *(_OWORD *)(a1 + 16);
          v314 = *(_OWORD *)(a1 + 64);
          v326 = *(_OWORD *)(a1 + 80);
          v290 = *(_OWORD *)(a1 + 32);
          v302 = *(_OWORD *)(a1 + 48);
          v362 = *(_OWORD *)(a1 + 128);
          v374 = *(_OWORD *)(a1 + 144);
          v338 = *(_OWORD *)(a1 + 96);
          v350 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v410 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v410[16] = *(_OWORD *)(a1 + 208);
          v386 = *(_OWORD *)(a1 + 160);
          v398 = *(_OWORD *)(a1 + 176);
          v16 = v12[1];
          *(_OWORD *)a1 = *v12;
          *(_OWORD *)(a1 + 16) = v16;
          v17 = v12[2];
          v18 = v12[3];
          v19 = v12[5];
          *(_OWORD *)(a1 + 64) = v12[4];
          *(_OWORD *)(a1 + 80) = v19;
          *(_OWORD *)(a1 + 32) = v17;
          *(_OWORD *)(a1 + 48) = v18;
          v20 = v12[6];
          v21 = v12[7];
          v22 = v12[9];
          *(_OWORD *)(a1 + 128) = v12[8];
          *(_OWORD *)(a1 + 144) = v22;
          *(_OWORD *)(a1 + 96) = v20;
          *(_OWORD *)(a1 + 112) = v21;
          v23 = v12[10];
          v24 = v12[11];
          v25 = v12[12];
          *(_OWORD *)(a1 + 205) = *(__int128 *)((char *)v12 + 205);
          *(_OWORD *)(a1 + 176) = v24;
          *(_OWORD *)(a1 + 192) = v25;
          *(_OWORD *)(a1 + 160) = v23;
          *v12 = v267;
          v12[1] = v279;
          v12[4] = v314;
          v12[5] = v326;
          v12[2] = v290;
          v12[3] = v302;
          v12[8] = v362;
          v12[9] = v374;
          v12[6] = v338;
          v12[7] = v350;
          *(__int128 *)((char *)v12 + 205) = *(_OWORD *)&v410[13];
          v12[11] = v398;
          v12[12] = *(_OWORD *)v410;
          v12[10] = v386;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v26 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 216) < v26)
            goto LABEL_11;
          v60 = *(_QWORD *)a1;
          v241 = *(_OWORD *)(a1 + 64);
          v244 = *(_OWORD *)(a1 + 80);
          v235 = *(_OWORD *)(a1 + 32);
          v238 = *(_OWORD *)(a1 + 48);
          v253 = *(_OWORD *)(a1 + 128);
          v256 = *(_OWORD *)(a1 + 144);
          v247 = *(_OWORD *)(a1 + 96);
          v250 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)v265 = *(_OWORD *)(a1 + 192);
          *(_OWORD *)&v265[16] = *(_OWORD *)(a1 + 208);
          v259 = *(_OWORD *)(a1 + 160);
          v262 = *(_OWORD *)(a1 + 176);
          v232 = *(_OWORD *)(a1 + 16);
          if (v26 >= *((double *)a2 - 27))
          {
            v63 = a1 + 224;
            do
            {
              v8 = v63;
              if (v63 >= (unint64_t)a2)
                break;
              v64 = *(double *)(v63 + 8);
              v63 += 224;
            }
            while (v26 >= v64);
          }
          else
          {
            v61 = a1;
            do
            {
              v8 = v61 + 224;
              v62 = *(double *)(v61 + 232);
              v61 += 224;
            }
            while (v26 >= v62);
          }
          v65 = a2;
          if (v8 < (unint64_t)a2)
          {
            v66 = a2;
            do
            {
              v65 = v66 - 14;
              v67 = *((double *)v66 - 27);
              v66 -= 14;
            }
            while (v26 < v67);
          }
          while (v8 < (unint64_t)v65)
          {
            v269 = *(_OWORD *)v8;
            v281 = *(_OWORD *)(v8 + 16);
            v316 = *(_OWORD *)(v8 + 64);
            v328 = *(_OWORD *)(v8 + 80);
            v292 = *(_OWORD *)(v8 + 32);
            v304 = *(_OWORD *)(v8 + 48);
            v364 = *(_OWORD *)(v8 + 128);
            v376 = *(_OWORD *)(v8 + 144);
            v340 = *(_OWORD *)(v8 + 96);
            v352 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v412 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v412[16] = *(_OWORD *)(v8 + 208);
            v388 = *(_OWORD *)(v8 + 160);
            v400 = *(_OWORD *)(v8 + 176);
            v68 = v65[1];
            *(_OWORD *)v8 = *v65;
            *(_OWORD *)(v8 + 16) = v68;
            v69 = v65[2];
            v70 = v65[3];
            v71 = v65[5];
            *(_OWORD *)(v8 + 64) = v65[4];
            *(_OWORD *)(v8 + 80) = v71;
            *(_OWORD *)(v8 + 32) = v69;
            *(_OWORD *)(v8 + 48) = v70;
            v72 = v65[6];
            v73 = v65[7];
            v74 = v65[9];
            *(_OWORD *)(v8 + 128) = v65[8];
            *(_OWORD *)(v8 + 144) = v74;
            *(_OWORD *)(v8 + 96) = v72;
            *(_OWORD *)(v8 + 112) = v73;
            v75 = v65[10];
            v76 = v65[11];
            v77 = v65[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v65 + 205);
            *(_OWORD *)(v8 + 176) = v76;
            *(_OWORD *)(v8 + 192) = v77;
            *(_OWORD *)(v8 + 160) = v75;
            *v65 = v269;
            v65[1] = v281;
            v65[4] = v316;
            v65[5] = v328;
            v65[2] = v292;
            v65[3] = v304;
            v65[8] = v364;
            v65[9] = v376;
            v65[6] = v340;
            v65[7] = v352;
            *(__int128 *)((char *)v65 + 205) = *(_OWORD *)&v412[13];
            v65[11] = v400;
            v65[12] = *(_OWORD *)v412;
            v65[10] = v388;
            do
            {
              v78 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v26 >= v78);
            do
            {
              v79 = *((double *)v65 - 27);
              v65 -= 14;
            }
            while (v26 < v79);
          }
          if (v8 - 224 != a1)
          {
            v80 = *(_OWORD *)(v8 - 208);
            *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
            *(_OWORD *)(a1 + 16) = v80;
            v81 = *(_OWORD *)(v8 - 192);
            v82 = *(_OWORD *)(v8 - 176);
            v83 = *(_OWORD *)(v8 - 144);
            *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
            *(_OWORD *)(a1 + 80) = v83;
            *(_OWORD *)(a1 + 32) = v81;
            *(_OWORD *)(a1 + 48) = v82;
            v84 = *(_OWORD *)(v8 - 128);
            v85 = *(_OWORD *)(v8 - 112);
            v86 = *(_OWORD *)(v8 - 80);
            *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
            *(_OWORD *)(a1 + 144) = v86;
            *(_OWORD *)(a1 + 96) = v84;
            *(_OWORD *)(a1 + 112) = v85;
            v87 = *(_OWORD *)(v8 - 64);
            v88 = *(_OWORD *)(v8 - 48);
            v89 = *(_OWORD *)(v8 - 32);
            *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
            *(_OWORD *)(a1 + 176) = v88;
            *(_OWORD *)(a1 + 192) = v89;
            *(_OWORD *)(a1 + 160) = v87;
          }
          a4 = 0;
          *(_QWORD *)(v8 - 224) = v60;
          *(double *)(v8 - 216) = v26;
          *(_OWORD *)(v8 - 208) = v232;
          *(_OWORD *)(v8 - 160) = v241;
          *(_OWORD *)(v8 - 144) = v244;
          *(_OWORD *)(v8 - 192) = v235;
          *(_OWORD *)(v8 - 176) = v238;
          *(_OWORD *)(v8 - 96) = v253;
          *(_OWORD *)(v8 - 80) = v256;
          *(_OWORD *)(v8 - 128) = v247;
          *(_OWORD *)(v8 - 112) = v250;
          *(_OWORD *)(v8 - 19) = *(_OWORD *)&v265[13];
          *(_OWORD *)(v8 - 48) = v262;
          *(_OWORD *)(v8 - 32) = *(_OWORD *)v265;
          *(_OWORD *)(v8 - 64) = v259;
          continue;
        }
        v26 = *(double *)(a1 + 8);
LABEL_11:
        v27 = 0;
        v28 = *(_QWORD *)a1;
        v240 = *(_OWORD *)(a1 + 64);
        v243 = *(_OWORD *)(a1 + 80);
        v252 = *(_OWORD *)(a1 + 128);
        v255 = *(_OWORD *)(a1 + 144);
        *(_OWORD *)v264 = *(_OWORD *)(a1 + 192);
        *(_OWORD *)&v264[16] = *(_OWORD *)(a1 + 208);
        v258 = *(_OWORD *)(a1 + 160);
        v261 = *(_OWORD *)(a1 + 176);
        v246 = *(_OWORD *)(a1 + 96);
        v249 = *(_OWORD *)(a1 + 112);
        v234 = *(_OWORD *)(a1 + 32);
        v237 = *(_OWORD *)(a1 + 48);
        v231 = *(_OWORD *)(a1 + 16);
        do
        {
          v29 = *(double *)(a1 + v27 + 232);
          v27 += 224;
        }
        while (v29 < v26);
        v30 = a1 + v27;
        v31 = a2;
        if (v27 == 224)
        {
          v34 = a2;
          while (v30 < (unint64_t)v34)
          {
            v32 = v34 - 14;
            v35 = *((double *)v34 - 27);
            v34 -= 14;
            if (v35 < v26)
              goto LABEL_21;
          }
          v32 = v34;
        }
        else
        {
          do
          {
            v32 = v31 - 14;
            v33 = *((double *)v31 - 27);
            v31 -= 14;
          }
          while (v33 >= v26);
        }
LABEL_21:
        v8 = v30;
        if (v30 < (unint64_t)v32)
        {
          v36 = v32;
          do
          {
            v268 = *(_OWORD *)v8;
            v280 = *(_OWORD *)(v8 + 16);
            v315 = *(_OWORD *)(v8 + 64);
            v327 = *(_OWORD *)(v8 + 80);
            v291 = *(_OWORD *)(v8 + 32);
            v303 = *(_OWORD *)(v8 + 48);
            v363 = *(_OWORD *)(v8 + 128);
            v375 = *(_OWORD *)(v8 + 144);
            v339 = *(_OWORD *)(v8 + 96);
            v351 = *(_OWORD *)(v8 + 112);
            *(_OWORD *)v411 = *(_OWORD *)(v8 + 192);
            *(_OWORD *)&v411[16] = *(_OWORD *)(v8 + 208);
            v387 = *(_OWORD *)(v8 + 160);
            v399 = *(_OWORD *)(v8 + 176);
            v37 = v36[1];
            *(_OWORD *)v8 = *v36;
            *(_OWORD *)(v8 + 16) = v37;
            v38 = v36[2];
            v39 = v36[3];
            v40 = v36[5];
            *(_OWORD *)(v8 + 64) = v36[4];
            *(_OWORD *)(v8 + 80) = v40;
            *(_OWORD *)(v8 + 32) = v38;
            *(_OWORD *)(v8 + 48) = v39;
            v41 = v36[6];
            v42 = v36[7];
            v43 = v36[9];
            *(_OWORD *)(v8 + 128) = v36[8];
            *(_OWORD *)(v8 + 144) = v43;
            *(_OWORD *)(v8 + 96) = v41;
            *(_OWORD *)(v8 + 112) = v42;
            v44 = v36[10];
            v45 = v36[11];
            v46 = v36[12];
            *(_OWORD *)(v8 + 205) = *(__int128 *)((char *)v36 + 205);
            *(_OWORD *)(v8 + 176) = v45;
            *(_OWORD *)(v8 + 192) = v46;
            *(_OWORD *)(v8 + 160) = v44;
            *v36 = v268;
            v36[1] = v280;
            v36[4] = v315;
            v36[5] = v327;
            v36[2] = v291;
            v36[3] = v303;
            v36[8] = v363;
            v36[9] = v375;
            v36[6] = v339;
            v36[7] = v351;
            *(__int128 *)((char *)v36 + 205) = *(_OWORD *)&v411[13];
            v36[11] = v399;
            v36[12] = *(_OWORD *)v411;
            v36[10] = v387;
            do
            {
              v47 = *(double *)(v8 + 232);
              v8 += 224;
            }
            while (v47 < v26);
            do
            {
              v48 = *((double *)v36 - 27);
              v36 -= 14;
            }
            while (v48 >= v26);
          }
          while (v8 < (unint64_t)v36);
        }
        if (v8 - 224 != a1)
        {
          v49 = *(_OWORD *)(v8 - 208);
          *(_OWORD *)a1 = *(_OWORD *)(v8 - 224);
          *(_OWORD *)(a1 + 16) = v49;
          v50 = *(_OWORD *)(v8 - 192);
          v51 = *(_OWORD *)(v8 - 176);
          v52 = *(_OWORD *)(v8 - 144);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(v8 - 160);
          *(_OWORD *)(a1 + 80) = v52;
          *(_OWORD *)(a1 + 32) = v50;
          *(_OWORD *)(a1 + 48) = v51;
          v53 = *(_OWORD *)(v8 - 128);
          v54 = *(_OWORD *)(v8 - 112);
          v55 = *(_OWORD *)(v8 - 80);
          *(_OWORD *)(a1 + 128) = *(_OWORD *)(v8 - 96);
          *(_OWORD *)(a1 + 144) = v55;
          *(_OWORD *)(a1 + 96) = v53;
          *(_OWORD *)(a1 + 112) = v54;
          v56 = *(_OWORD *)(v8 - 64);
          v57 = *(_OWORD *)(v8 - 48);
          v58 = *(_OWORD *)(v8 - 32);
          *(_OWORD *)(a1 + 205) = *(_OWORD *)(v8 - 19);
          *(_OWORD *)(a1 + 176) = v57;
          *(_OWORD *)(a1 + 192) = v58;
          *(_OWORD *)(a1 + 160) = v56;
        }
        *(_QWORD *)(v8 - 224) = v28;
        *(double *)(v8 - 216) = v26;
        *(_OWORD *)(v8 - 208) = v231;
        *(_OWORD *)(v8 - 160) = v240;
        *(_OWORD *)(v8 - 144) = v243;
        *(_OWORD *)(v8 - 192) = v234;
        *(_OWORD *)(v8 - 176) = v237;
        *(_OWORD *)(v8 - 96) = v252;
        *(_OWORD *)(v8 - 80) = v255;
        *(_OWORD *)(v8 - 128) = v246;
        *(_OWORD *)(v8 - 112) = v249;
        *(_OWORD *)(v8 - 19) = *(_OWORD *)&v264[13];
        *(_OWORD *)(v8 - 48) = v261;
        *(_OWORD *)(v8 - 32) = *(_OWORD *)v264;
        *(_OWORD *)(v8 - 64) = v258;
        if (v30 < (unint64_t)v32)
        {
LABEL_32:
          sub_1014A8934(a1, v8 - 224, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v59 = sub_1014A9B0C(a1, v8 - 224);
        if (!sub_1014A9B0C(v8, (uint64_t)a2))
        {
          if (v59)
            continue;
          goto LABEL_32;
        }
        a2 = (__int128 *)(v8 - 224);
        if (!v59)
          goto LABEL_1;
        return;
    }
  }
}

  v8 = a1;
  while (2)
  {
    a1 = v8;
    v9 = a2 - v8;
    v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2 - v8) >> 3);
    switch(v10)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (*(double *)(a2 - 16) < *(double *)(v8 + 8))
        {
          v115 = *(_QWORD *)(v8 + 16);
          v109 = *(_OWORD *)v8;
          v47 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 16) = *(_QWORD *)(a2 - 8);
          *(_OWORD *)v8 = v47;
          *(_QWORD *)(a2 - 8) = v115;
          *(_OWORD *)(a2 - 24) = v109;
        }
        return;
      case 3:
        sub_1010E4420((__int128 *)v8, (double *)(v8 + 24), (double *)(a2 - 24));
        return;
      case 4:
        sub_1010E4784(v8, v8 + 24, v8 + 48, a2 - 24);
        return;
      case 5:
        v48 = (__int128 *)(v8 + 24);
        v49 = (__int128 *)(v8 + 48);
        v50 = (__int128 *)(v8 + 72);
        sub_1010E4784(v8, v8 + 24, v8 + 48, v8 + 72);
        if (*(double *)(a2 - 16) < *(double *)(v8 + 80))
        {
          v51 = *v50;
          v52 = *(_QWORD *)(v8 + 88);
          v53 = *(_QWORD *)(a2 - 8);
          *v50 = *(_OWORD *)(a2 - 24);
          *(_QWORD *)(v8 + 88) = v53;
          *(_QWORD *)(a2 - 8) = v52;
          *(_OWORD *)(a2 - 24) = v51;
          if (*(double *)(v8 + 80) < *(double *)(v8 + 56))
          {
            v54 = *(_QWORD *)(v8 + 64);
            v55 = *v49;
            *v49 = *v50;
            *(_QWORD *)(v8 + 64) = *(_QWORD *)(v8 + 88);
            *v50 = v55;
            *(_QWORD *)(v8 + 88) = v54;
            if (*(double *)(v8 + 56) < *(double *)(v8 + 32))
            {
              v56 = *(_QWORD *)(v8 + 40);
              v57 = *v48;
              *v48 = *v49;
              *(_QWORD *)(v8 + 40) = *(_QWORD *)(v8 + 64);
              *v49 = v57;
              *(_QWORD *)(v8 + 64) = v56;
              if (*(double *)(v8 + 32) < *(double *)(v8 + 8))
              {
                v116 = *(_QWORD *)(v8 + 16);
                v110 = *(_OWORD *)v8;
                *(_OWORD *)v8 = *v48;
                *(_QWORD *)(v8 + 16) = *(_QWORD *)(v8 + 40);
                *v48 = v110;
                *(_QWORD *)(v8 + 40) = v116;
              }
            }
          }
        }
        return;
      default:
        if (v9 <= 575)
        {
          v58 = (_QWORD *)(v8 + 24);
          v60 = v8 == a2 || v58 == (_QWORD *)a2;
          if ((a4 & 1) != 0)
          {
            if (!v60)
            {
              v61 = 0;
              v62 = v8;
              do
              {
                v63 = v58;
                v64 = *(double *)(v62 + 32);
                if (v64 < *(double *)(v62 + 8))
                {
                  v65 = *v58;
                  v66 = *(_QWORD *)(v62 + 40);
                  v67 = v61;
                  while (1)
                  {
                    v68 = v8 + v67;
                    *(_OWORD *)(v68 + 24) = *(_OWORD *)(v8 + v67);
                    *(_QWORD *)(v68 + 40) = *(_QWORD *)(v8 + v67 + 16);
                    if (!v67)
                      break;
                    v67 -= 24;
                    if (v64 >= *(double *)(v68 - 16))
                    {
                      v69 = v8 + v67 + 24;
                      goto LABEL_79;
                    }
                  }
                  v69 = v8;
LABEL_79:
                  *(_QWORD *)v69 = v65;
                  *(double *)(v69 + 8) = v64;
                  *(_QWORD *)(v69 + 16) = v66;
                }
                v58 = v63 + 3;
                v61 += 24;
                v62 = (unint64_t)v63;
              }
              while (v63 + 3 != (_QWORD *)a2);
            }
          }
          else if (!v60)
          {
            do
            {
              v100 = v58;
              v101 = *(double *)(a1 + 32);
              if (v101 < *(double *)(a1 + 8))
              {
                v102 = *v58;
                v103 = *(_QWORD *)(a1 + 40);
                v104 = (double *)v58;
                do
                {
                  *(_OWORD *)v104 = *(_OWORD *)(v104 - 3);
                  v104[2] = *(v104 - 1);
                  v105 = *(v104 - 5);
                  v104 -= 3;
                }
                while (v101 < v105);
                *(_QWORD *)v104 = v102;
                v104[1] = v101;
                *((_QWORD *)v104 + 2) = v103;
              }
              v58 += 3;
              a1 = (uint64_t)v100;
            }
            while (v100 + 3 != (_QWORD *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v70 = (unint64_t)(v10 - 2) >> 1;
            v71 = v70;
            do
            {
              v72 = v71;
              if (v70 >= v71)
              {
                v73 = (2 * v71) | 1;
                v74 = v8 + 24 * v73;
                if (2 * v72 + 2 < v10 && *(double *)(v8 + 24 * v73 + 8) < *(double *)(v74 + 32))
                {
                  v74 += 24;
                  v73 = 2 * v72 + 2;
                }
                v75 = *(double *)(v8 + 24 * v72 + 8);
                if (*(double *)(v74 + 8) >= v75)
                {
                  v76 = v8 + 24 * v72;
                  v77 = *(_QWORD *)v76;
                  v78 = *(_QWORD *)(v76 + 16);
                  do
                  {
                    v79 = v76;
                    v76 = v74;
                    v80 = *(_OWORD *)v74;
                    *(_QWORD *)(v79 + 16) = *(_QWORD *)(v74 + 16);
                    *(_OWORD *)v79 = v80;
                    if (v70 < v73)
                      break;
                    v81 = (2 * v73) | 1;
                    v74 = v8 + 24 * v81;
                    v82 = 2 * v73 + 2;
                    if (v82 < v10 && *(double *)(v8 + 24 * v81 + 8) < *(double *)(v74 + 32))
                    {
                      v74 += 24;
                      v81 = v82;
                    }
                    v73 = v81;
                  }
                  while (*(double *)(v74 + 8) >= v75);
                  *(_QWORD *)v76 = v77;
                  *(double *)(v76 + 8) = v75;
                  *(_QWORD *)(v76 + 16) = v78;
                }
              }
              v71 = v72 - 1;
            }
            while (v72);
            v83 = v9 / 0x18uLL;
            do
            {
              v84 = 0;
              v117 = *(_QWORD *)(v8 + 16);
              v111 = *(_OWORD *)v8;
              v85 = v8;
              do
              {
                v86 = v85;
                v87 = v84 + 1;
                v85 += 24 * (v84 + 1);
                v88 = 2 * v84;
                v84 = (2 * v84) | 1;
                v89 = v88 + 2;
                if (v89 < v83 && *(double *)(v86 + 24 * v87 + 8) < *(double *)(v85 + 32))
                {
                  v85 += 24;
                  v84 = v89;
                }
                v90 = *(_OWORD *)v85;
                *(_QWORD *)(v86 + 16) = *(_QWORD *)(v85 + 16);
                *(_OWORD *)v86 = v90;
              }
              while (v84 <= (uint64_t)((unint64_t)(v83 - 2) >> 1));
              a2 -= 24;
              if (v85 == a2)
              {
                *(_QWORD *)(v85 + 16) = v117;
                *(_OWORD *)v85 = v111;
              }
              else
              {
                v91 = *(_OWORD *)a2;
                *(_QWORD *)(v85 + 16) = *(_QWORD *)(a2 + 16);
                *(_OWORD *)v85 = v91;
                *(_QWORD *)(a2 + 16) = v117;
                *(_OWORD *)a2 = v111;
                v92 = v85 - v8 + 24;
                if (v92 >= 25)
                {
                  v93 = (v92 / 0x18uLL - 2) >> 1;
                  v94 = *(double *)(v85 + 8);
                  if (*(double *)(v8 + 24 * v93 + 8) < v94)
                  {
                    v95 = *(_QWORD *)v85;
                    v96 = *(_QWORD *)(v85 + 16);
                    do
                    {
                      v97 = v85;
                      v85 = v8 + 24 * v93;
                      v98 = *(_OWORD *)v85;
                      *(_QWORD *)(v97 + 16) = *(_QWORD *)(v85 + 16);
                      *(_OWORD *)v97 = v98;
                      if (!v93)
                        break;
                      v93 = (v93 - 1) >> 1;
                    }
                    while (*(double *)(v8 + 24 * v93 + 8) < v94);
                    *(_QWORD *)v85 = v95;
                    *(double *)(v85 + 8) = v94;
                    *(_QWORD *)(v85 + 16) = v96;
                  }
                }
              }
            }
            while (v83-- > 2);
          }
          return;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = v8 + 24 * ((unint64_t)v10 >> 1);
        if ((unint64_t)v9 < 0xC01)
        {
          sub_1010E4420((__int128 *)(a1 + 24 * v11), (double *)a1, (double *)(a2 - 24));
        }
        else
        {
          sub_1010E4420((__int128 *)a1, (double *)(a1 + 24 * v11), (double *)(a2 - 24));
          v13 = 3 * v11;
          v14 = (double *)(a1 + 24 * v11 - 24);
          sub_1010E4420((__int128 *)(a1 + 24), v14, (double *)(a2 - 48));
          v15 = (double *)(a1 + 24 + 8 * v13);
          sub_1010E4420((__int128 *)(a1 + 48), v15, (double *)(a2 - 72));
          sub_1010E4420((__int128 *)v14, (double *)v12, v15);
          v112 = *(_QWORD *)(a1 + 16);
          v106 = *(_OWORD *)a1;
          v16 = *(_QWORD *)(v12 + 16);
          *(_OWORD *)a1 = *(_OWORD *)v12;
          *(_QWORD *)(a1 + 16) = v16;
          *(_QWORD *)(v12 + 16) = v112;
          *(_OWORD *)v12 = v106;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v17 = *(double *)(a1 + 8);
          if (*(double *)(a1 - 16) < v17)
            goto LABEL_11;
          if (v17 >= *(double *)(a2 - 16))
          {
            v36 = a1 + 24;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = *(double *)(v36 + 8);
              v36 += 24;
            }
            while (v17 >= v37);
          }
          else
          {
            v34 = a1;
            do
            {
              v8 = v34 + 24;
              v35 = *(double *)(v34 + 32);
              v34 += 24;
            }
            while (v17 >= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 24;
              v40 = *(double *)(v39 - 16);
              v39 -= 24;
            }
            while (v17 < v40);
          }
          v41 = *(double *)a1;
          v42 = *(_QWORD *)(a1 + 16);
          while (v8 < v38)
          {
            v114 = *(_QWORD *)(v8 + 16);
            v108 = *(_OWORD *)v8;
            v43 = *(_OWORD *)v38;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v38 + 16);
            *(_OWORD *)v8 = v43;
            *(_QWORD *)(v38 + 16) = v114;
            *(_OWORD *)v38 = v108;
            do
            {
              v44 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v17 >= v44);
            do
            {
              v45 = *(double *)(v38 - 16);
              v38 -= 24;
            }
            while (v17 < v45);
          }
          if (v8 - 24 != a1)
          {
            v46 = *(_OWORD *)(v8 - 24);
            *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
            *(_OWORD *)a1 = v46;
          }
          a4 = 0;
          *(double *)(v8 - 24) = v41;
          *(double *)(v8 - 16) = v17;
          *(_QWORD *)(v8 - 8) = v42;
          continue;
        }
        v17 = *(double *)(a1 + 8);
LABEL_11:
        v18 = 0;
        v19 = *(double *)a1;
        v20 = *(_QWORD *)(a1 + 16);
        do
        {
          v21 = *(double *)(a1 + v18 + 32);
          v18 += 24;
        }
        while (v21 < v17);
        v22 = a1 + v18;
        v23 = a2;
        if (v18 == 24)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 24;
            v27 = *(double *)(v26 - 16);
            v26 -= 24;
            if (v27 < v17)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 24;
            v25 = *(double *)(v23 - 16);
            v23 -= 24;
          }
          while (v25 >= v17);
        }
LABEL_21:
        v8 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v113 = *(_QWORD *)(v8 + 16);
            v107 = *(_OWORD *)v8;
            v29 = *(_OWORD *)v28;
            *(_QWORD *)(v8 + 16) = *(_QWORD *)(v28 + 16);
            *(_OWORD *)v8 = v29;
            *(_QWORD *)(v28 + 16) = v113;
            *(_OWORD *)v28 = v107;
            do
            {
              v30 = *(double *)(v8 + 32);
              v8 += 24;
            }
            while (v30 < v17);
            do
            {
              v31 = *(double *)(v28 - 16);
              v28 -= 24;
            }
            while (v31 >= v17);
          }
          while (v8 < v28);
        }
        if (v8 - 24 != a1)
        {
          v32 = *(_OWORD *)(v8 - 24);
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v8 - 8);
          *(_OWORD *)a1 = v32;
        }
        *(double *)(v8 - 24) = v19;
        *(double *)(v8 - 16) = v17;
        *(_QWORD *)(v8 - 8) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_1014AA138(a1, v8 - 24, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1014AA9E0(a1, v8 - 24);
        if (!sub_1014AA9E0(v8, a2))
        {
          if (v33)
            continue;
          goto LABEL_32;
        }
        a2 = v8 - 24;
        if (!v33)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 24;
  v119 = (void **)(a2 - 48);
  v122 = a2;
  v116 = (void **)(a2 - 72);
  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = v122 - v10;
    v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v122 - v10) >> 3);
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        sub_1015EA454(*a3, (void **)v9, v129);
        sub_1015EA454(*a3, (void **)a1, __p);
        v51 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
        if (v128 < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v130) < 0)
          operator delete(v129[0]);
        if (v51)
        {
          v52 = *(_OWORD *)a1;
          v130 = *(void **)(a1 + 16);
          *(_OWORD *)v129 = v52;
          v53 = *(_OWORD *)v9;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v9 + 16);
          *(_OWORD *)a1 = v53;
          v54 = *(_OWORD *)v129;
          *(_QWORD *)(v9 + 16) = v130;
          *(_OWORD *)v9 = v54;
        }
        return;
      case 3uLL:
        sub_1015E9E34((void **)a1, (void **)(a1 + 24), (void **)v9, a3);
        return;
      case 4uLL:
        sub_1015EB67C(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)v9, a3);
        return;
      case 5uLL:
        sub_1015E9BBC(a1, (void **)(a1 + 24), (void **)(a1 + 48), (void **)(a1 + 72), (void **)v9, a3);
        return;
      default:
        if (v11 <= 575)
        {
          if ((a5 & 1) != 0)
          {
            if (a1 == v122)
              return;
            v55 = (void **)(a1 + 24);
            if (a1 + 24 == v122)
              return;
            v56 = 0;
            v57 = (void **)a1;
            while (1)
            {
              v58 = v55;
              sub_1015EA454(*a3, v55, v129);
              sub_1015EA454(*a3, v57, __p);
              v59 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
              {
                operator delete(v129[0]);
                if (v59)
                {
LABEL_133:
                  v60 = *(_OWORD *)v58;
                  v126 = v58[2];
                  v125 = v60;
                  v58[1] = 0;
                  v58[2] = 0;
                  *v58 = 0;
                  v61 = v56;
                  do
                  {
                    v62 = a1 + v61;
                    v63 = (void **)(a1 + v61 + 24);
                    if (*(char *)(a1 + v61 + 47) < 0)
                      operator delete(*v63);
                    *(_OWORD *)v63 = *(_OWORD *)v62;
                    *(_QWORD *)(a1 + v61 + 40) = *(_QWORD *)(v62 + 16);
                    *(_BYTE *)(v62 + 23) = 0;
                    *(_BYTE *)v62 = 0;
                    if (!v61)
                    {
                      v65 = a1;
                      goto LABEL_145;
                    }
                    sub_1015EA454(*a3, (void **)&v125, v129);
                    sub_1015EA454(*a3, (void **)(a1 + v61 - 24), __p);
                    v64 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v130) < 0)
                      operator delete(v129[0]);
                    v61 -= 24;
                  }
                  while (v64);
                  v65 = a1 + v61 + 24;
                  if (*(char *)(a1 + v61 + 47) < 0)
                    operator delete(*(void **)v65);
LABEL_145:
                  v66 = v125;
                  *(_QWORD *)(v65 + 16) = v126;
                  *(_OWORD *)v65 = v66;
                }
              }
              else if (v59)
              {
                goto LABEL_133;
              }
              v55 = v58 + 3;
              v56 += 24;
              v57 = v58;
              if (v58 + 3 == (void **)v122)
                return;
            }
          }
          if (a1 == v122)
            return;
          v105 = (void **)(a1 + 24);
          if (a1 + 24 == v122)
            return;
          for (i = a1 - 24; ; i += 24)
          {
            v107 = v105;
            sub_1015EA454(*a3, v105, v129);
            sub_1015EA454(*a3, (void **)a1, __p);
            v108 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v108)
              {
LABEL_230:
                v109 = *(_OWORD *)v107;
                v126 = v107[2];
                v125 = v109;
                v107[1] = 0;
                v107[2] = 0;
                *v107 = 0;
                v110 = i;
                do
                {
                  v111 = (void **)(v110 + 48);
                  if (*(char *)(v110 + 71) < 0)
                    operator delete(*v111);
                  *(_OWORD *)v111 = *(_OWORD *)(v110 + 24);
                  *(_QWORD *)(v110 + 64) = *(_QWORD *)(v110 + 40);
                  *(_BYTE *)(v110 + 47) = 0;
                  *(_BYTE *)(v110 + 24) = 0;
                  sub_1015EA454(*a3, (void **)&v125, v129);
                  sub_1015EA454(*a3, (void **)v110, __p);
                  v112 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    operator delete(v129[0]);
                  v110 -= 24;
                }
                while (v112);
                v113 = *(char *)(v110 + 71);
                v114 = v110 + 48;
                if (v113 < 0)
                  operator delete(*(void **)v114);
                v115 = v125;
                *(_QWORD *)(v114 + 16) = v126;
                *(_OWORD *)v114 = v115;
              }
            }
            else if (v108)
            {
              goto LABEL_230;
            }
            v105 = v107 + 3;
            a1 = (uint64_t)v107;
            if (v107 + 3 == (void **)v122)
              return;
          }
        }
        if (!a4)
        {
          v67 = (_OWORD *)v122;
          if (a1 == v122)
            return;
          v68 = (v12 - 2) >> 1;
          v120 = v68;
          do
          {
            v69 = v68;
            if (v120 >= v68)
            {
              v70 = (2 * v68) | 1;
              v71 = a1 + 24 * v70;
              v72 = 2 * v68 + 2;
              v73 = v68;
              if (v72 < (uint64_t)v12)
              {
                sub_1015EA454(*a3, (void **)(a1 + 24 * v70), v129);
                sub_1015EA454(*a3, (void **)(v71 + 24), __p);
                v74 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                if (v74)
                {
                  v71 += 24;
                  v70 = v72;
                }
              }
              sub_1015EA454(*a3, (void **)v71, v129);
              v117 = v73;
              v75 = a1 + 24 * v73;
              sub_1015EA454(*a3, (void **)v75, __p);
              v76 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
              v67 = (_OWORD *)v122;
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
                operator delete(v129[0]);
              v69 = v73;
              if (!v76)
              {
                v77 = *(_OWORD *)v75;
                v126 = *(void **)(v75 + 16);
                v125 = v77;
                *(_QWORD *)(v75 + 8) = 0;
                *(_QWORD *)(v75 + 16) = 0;
                *(_QWORD *)v75 = 0;
                do
                {
                  v78 = v71;
                  if (*(char *)(v75 + 23) < 0)
                    operator delete(*(void **)v75);
                  v79 = *(_OWORD *)v71;
                  *(_QWORD *)(v75 + 16) = *(_QWORD *)(v71 + 16);
                  *(_OWORD *)v75 = v79;
                  *(_BYTE *)(v71 + 23) = 0;
                  *(_BYTE *)v71 = 0;
                  if (v120 < v70)
                    goto LABEL_183;
                  v80 = (2 * v70) | 1;
                  v71 = a1 + 24 * v80;
                  v70 = 2 * v70 + 2;
                  if (v70 >= (uint64_t)v12)
                  {
                    v70 = v80;
                  }
                  else
                  {
                    sub_1015EA454(*a3, (void **)(a1 + 24 * v80), v129);
                    sub_1015EA454(*a3, (void **)(v71 + 24), __p);
                    v81 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                    if (v128 < 0)
                      operator delete(__p[0]);
                    if (SHIBYTE(v130) < 0)
                      operator delete(v129[0]);
                    if (v81)
                      v71 += 24;
                    else
                      v70 = v80;
                  }
                  sub_1015EA454(*a3, (void **)v71, v129);
                  sub_1015EA454(*a3, (void **)&v125, __p);
                  v82 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    operator delete(v129[0]);
                  v75 = v78;
                }
                while (!v82);
                if (*(char *)(v78 + 23) < 0)
                  operator delete(*(void **)v78);
LABEL_183:
                v83 = v125;
                *(_QWORD *)(v78 + 16) = v126;
                *(_OWORD *)v78 = v83;
                v67 = (_OWORD *)v122;
                v69 = v117;
              }
            }
            v68 = v69 - 1;
          }
          while (v69);
          v84 = v11 / 0x18uLL;
          while (1)
          {
            v85 = 0;
            v118 = v67;
            v121 = *(void **)a1;
            *(_QWORD *)v131 = *(_QWORD *)(a1 + 8);
            *(_QWORD *)&v131[7] = *(_QWORD *)(a1 + 15);
            v123 = *(_BYTE *)(a1 + 23);
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            v86 = a1;
            do
            {
              v87 = v86 + 24 * v85 + 24;
              v88 = 2 * v85;
              v85 = (2 * v85) | 1;
              v89 = v88 + 2;
              if (v88 + 2 < v84)
              {
                sub_1015EA454(*a3, (void **)v87, v129);
                sub_1015EA454(*a3, (void **)(v87 + 24), __p);
                v90 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                if (v90)
                {
                  v87 += 24;
                  v85 = v89;
                }
              }
              if (*(char *)(v86 + 23) < 0)
                operator delete(*(void **)v86);
              v91 = *(_OWORD *)v87;
              *(_QWORD *)(v86 + 16) = *(_QWORD *)(v87 + 16);
              *(_OWORD *)v86 = v91;
              *(_BYTE *)(v87 + 23) = 0;
              *(_BYTE *)v87 = 0;
              v86 = v87;
            }
            while (v85 <= (uint64_t)((unint64_t)(v84 - 2) >> 1));
            v67 = (_OWORD *)((char *)v118 - 24);
            if ((_OWORD *)v87 == (_OWORD *)((char *)v118 - 24))
            {
              *(_QWORD *)v87 = v121;
              v98 = *(_QWORD *)&v131[7];
              *(_QWORD *)(v87 + 8) = *(_QWORD *)v131;
              *(_QWORD *)(v87 + 15) = v98;
              *(_BYTE *)(v87 + 23) = v123;
            }
            else
            {
              v92 = *v67;
              *(_QWORD *)(v87 + 16) = *((_QWORD *)v118 - 1);
              *(_OWORD *)v87 = v92;
              *((_QWORD *)v118 - 3) = v121;
              v93 = *(_QWORD *)v131;
              *(_QWORD *)((char *)v118 - 9) = *(_QWORD *)&v131[7];
              *((_QWORD *)v118 - 2) = v93;
              *((_BYTE *)v118 - 1) = v123;
              v94 = v87 - a1 + 24;
              if (v94 >= 25)
              {
                v95 = (v94 / 0x18uLL - 2) >> 1;
                v96 = a1 + 24 * v95;
                sub_1015EA454(*a3, (void **)v96, v129);
                sub_1015EA454(*a3, (void **)v87, __p);
                v97 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                {
                  operator delete(v129[0]);
                  if (v97)
                  {
LABEL_206:
                    v99 = *(_OWORD *)v87;
                    v126 = *(void **)(v87 + 16);
                    v125 = v99;
                    *(_QWORD *)(v87 + 8) = 0;
                    *(_QWORD *)(v87 + 16) = 0;
                    *(_QWORD *)v87 = 0;
                    while (1)
                    {
                      v100 = v96;
                      if (*(char *)(v87 + 23) < 0)
                        operator delete(*(void **)v87);
                      v101 = *(_OWORD *)v96;
                      *(_QWORD *)(v87 + 16) = *(_QWORD *)(v96 + 16);
                      *(_OWORD *)v87 = v101;
                      *(_BYTE *)(v96 + 23) = 0;
                      *(_BYTE *)v96 = 0;
                      if (!v95)
                        break;
                      v95 = (v95 - 1) >> 1;
                      v96 = a1 + 24 * v95;
                      sub_1015EA454(*a3, (void **)v96, v129);
                      sub_1015EA454(*a3, (void **)&v125, __p);
                      v102 = sub_100279008((uint64_t)&v124, (const void **)v129, (const void **)__p);
                      if (v128 < 0)
                        operator delete(__p[0]);
                      if (SHIBYTE(v130) < 0)
                        operator delete(v129[0]);
                      v87 = v100;
                      if (!v102)
                      {
                        if (*(char *)(v100 + 23) < 0)
                          operator delete(*(void **)v100);
                        break;
                      }
                    }
                    v103 = v125;
                    *(_QWORD *)(v100 + 16) = v126;
                    *(_OWORD *)v100 = v103;
                    v67 = (_OWORD *)((char *)v118 - 24);
                  }
                }
                else if (v97)
                {
                  goto LABEL_206;
                }
              }
            }
            if (v84-- <= 2)
              return;
          }
        }
        v13 = v12 >> 1;
        v14 = a1 + 24 * (v12 >> 1);
        if ((unint64_t)v11 < 0xC01)
        {
          sub_1015E9E34((void **)(a1 + 24 * (v12 >> 1)), (void **)a1, (void **)v9, a3);
        }
        else
        {
          sub_1015E9E34((void **)a1, (void **)(a1 + 24 * (v12 >> 1)), (void **)v9, a3);
          sub_1015E9E34((void **)(a1 + 24), (void **)(a1 + 24 * v13 - 24), v119, a3);
          sub_1015E9E34((void **)(a1 + 48), (void **)(a1 + 24 * v13 + 24), v116, a3);
          sub_1015E9E34((void **)(a1 + 24 * v13 - 24), (void **)v14, (void **)(a1 + 24 * v13 + 24), a3);
          v15 = *(_OWORD *)a1;
          v130 = *(void **)(a1 + 16);
          *(_OWORD *)v129 = v15;
          v16 = *(_OWORD *)v14;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)a1 = v16;
          v17 = *(_OWORD *)v129;
          *(_QWORD *)(v14 + 16) = v130;
          *(_OWORD *)v14 = v17;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          sub_1015EA454(*a3, (void **)(a1 - 24), v129);
          sub_1015EA454(*a3, (void **)a1, __p);
          v18 = sub_100279008((uint64_t)&v125, (const void **)v129, (const void **)__p);
          if (v128 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v130) < 0)
            operator delete(v129[0]);
          if (!v18)
          {
            v36 = *(_OWORD *)a1;
            v126 = *(void **)(a1 + 16);
            v125 = v36;
            *(_QWORD *)(a1 + 8) = 0;
            *(_QWORD *)(a1 + 16) = 0;
            *(_QWORD *)a1 = 0;
            sub_1015EA454(*a3, (void **)&v125, v129);
            sub_1015EA454(*a3, (void **)v9, __p);
            v37 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
              operator delete(v129[0]);
            if (v37)
            {
              v10 = a1;
              do
              {
                sub_1015EA454(*a3, (void **)&v125, v129);
                v10 += 24;
                sub_1015EA454(*a3, (void **)v10, __p);
                v38 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
              }
              while (!v38);
            }
            else
            {
              v39 = a1 + 24;
              do
              {
                v10 = v39;
                if (v39 >= v122)
                  break;
                sub_1015EA454(*a3, (void **)&v125, v129);
                sub_1015EA454(*a3, (void **)v10, __p);
                v40 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  operator delete(v129[0]);
                v39 = v10 + 24;
              }
              while (!v40);
            }
            v41 = v122;
            if (v10 < v122)
            {
              v41 = v122;
              do
              {
                while (1)
                {
                  sub_1015EA454(*a3, (void **)&v125, v129);
                  v41 -= 24;
                  sub_1015EA454(*a3, (void **)v41, __p);
                  v42 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    break;
                  if (!v42)
                    goto LABEL_103;
                }
                operator delete(v129[0]);
              }
              while (v42);
            }
LABEL_103:
            while (v10 < v41)
            {
              v43 = *(_OWORD *)v10;
              v130 = *(void **)(v10 + 16);
              *(_OWORD *)v129 = v43;
              v44 = *(_OWORD *)v41;
              *(_QWORD *)(v10 + 16) = *(_QWORD *)(v41 + 16);
              *(_OWORD *)v10 = v44;
              v45 = *(_OWORD *)v129;
              *(_QWORD *)(v41 + 16) = v130;
              *(_OWORD *)v41 = v45;
              do
              {
                while (1)
                {
                  sub_1015EA454(*a3, (void **)&v125, v129);
                  v10 += 24;
                  sub_1015EA454(*a3, (void **)v10, __p);
                  v46 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if (SHIBYTE(v130) < 0)
                    break;
                  if (v46)
                    goto LABEL_99;
                }
                operator delete(v129[0]);
              }
              while (!v46);
              do
              {
                while (1)
                {
LABEL_99:
                  sub_1015EA454(*a3, (void **)&v125, v129);
                  v41 -= 24;
                  sub_1015EA454(*a3, (void **)v41, __p);
                  v47 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                  if (v128 < 0)
                    operator delete(__p[0]);
                  if ((SHIBYTE(v130) & 0x80000000) == 0)
                    break;
                  operator delete(v129[0]);
                  if (!v47)
                    goto LABEL_103;
                }
              }
              while (v47);
            }
            v48 = (__int128 *)(v10 - 24);
            if (v10 - 24 == a1)
            {
              if (*(char *)(v10 - 1) < 0)
                operator delete(*(void **)a1);
            }
            else
            {
              if (*(char *)(a1 + 23) < 0)
                operator delete(*(void **)a1);
              v49 = *v48;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
              *(_OWORD *)a1 = v49;
              *(_BYTE *)(v10 - 1) = 0;
              *(_BYTE *)(v10 - 24) = 0;
            }
            a5 = 0;
            v50 = v125;
            *(_QWORD *)(v10 - 8) = v126;
            *v48 = v50;
            continue;
          }
        }
        v19 = 0;
        v20 = *(_OWORD *)a1;
        v126 = *(void **)(a1 + 16);
        v125 = v20;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
        *(_QWORD *)a1 = 0;
        do
        {
          sub_1015EA454(*a3, (void **)(a1 + v19 + 24), v129);
          sub_1015EA454(*a3, (void **)&v125, __p);
          v21 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
          if (v128 < 0)
            operator delete(__p[0]);
          if (SHIBYTE(v130) < 0)
            operator delete(v129[0]);
          v19 += 24;
        }
        while (v21);
        v22 = a1 + v19;
        v23 = (void **)v122;
        if (v19 == 24)
        {
          v23 = (void **)v122;
          while (v22 < (unint64_t)v23)
          {
            v23 -= 3;
            sub_1015EA454(*a3, v23, v129);
            sub_1015EA454(*a3, (void **)&v125, __p);
            v25 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
            if (v128 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v130) < 0)
            {
              operator delete(v129[0]);
              if (v25)
                break;
            }
            else if (v25)
            {
              break;
            }
          }
        }
        else
        {
          do
          {
            while (1)
            {
              v23 -= 3;
              sub_1015EA454(*a3, v23, v129);
              sub_1015EA454(*a3, (void **)&v125, __p);
              v24 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
              if (v128 < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v130) < 0)
                break;
              if (v24)
                goto LABEL_36;
            }
            operator delete(v129[0]);
          }
          while (!v24);
        }
LABEL_36:
        v10 = a1 + v19;
        if (v22 < (unint64_t)v23)
        {
          v26 = v23;
          do
          {
            v27 = *(_OWORD *)v10;
            v130 = *(void **)(v10 + 16);
            *(_OWORD *)v129 = v27;
            v28 = *(_OWORD *)v26;
            *(_QWORD *)(v10 + 16) = v26[2];
            *(_OWORD *)v10 = v28;
            v29 = *(_OWORD *)v129;
            v26[2] = v130;
            *(_OWORD *)v26 = v29;
            do
            {
              while (1)
              {
                v10 += 24;
                sub_1015EA454(*a3, (void **)v10, v129);
                sub_1015EA454(*a3, (void **)&v125, __p);
                v30 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if (SHIBYTE(v130) < 0)
                  break;
                if (!v30)
                  goto LABEL_47;
              }
              operator delete(v129[0]);
            }
            while (v30);
            do
            {
              while (1)
              {
LABEL_47:
                v26 -= 3;
                sub_1015EA454(*a3, v26, v129);
                sub_1015EA454(*a3, (void **)&v125, __p);
                v31 = sub_100279008((uint64_t)v131, (const void **)v129, (const void **)__p);
                if (v128 < 0)
                  operator delete(__p[0]);
                if ((SHIBYTE(v130) & 0x80000000) == 0)
                  break;
                operator delete(v129[0]);
                if (v31)
                  goto LABEL_51;
              }
            }
            while (!v31);
LABEL_51:
            ;
          }
          while (v10 < (unint64_t)v26);
        }
        v32 = (__int128 *)(v10 - 24);
        if (v10 - 24 == a1)
        {
          if (*(char *)(v10 - 1) < 0)
            operator delete(*(void **)a1);
        }
        else
        {
          if (*(char *)(a1 + 23) < 0)
            operator delete(*(void **)a1);
          v33 = *v32;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)a1 = v33;
          *(_BYTE *)(v10 - 1) = 0;
          *(_BYTE *)(v10 - 24) = 0;
        }
        v34 = v125;
        *(_QWORD *)(v10 - 8) = v126;
        *v32 = v34;
        if (v22 < (unint64_t)v23)
        {
LABEL_61:
          sub_1015E8920(a1, v10 - 24, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1015EA104(a1, v10 - 24, a3);
        if (!sub_1015EA104(v10, v122, a3))
        {
          if (v35)
            continue;
          goto LABEL_61;
        }
        a2 = v10 - 24;
        if (!v35)
          goto LABEL_1;
        return;
    }
  }
}

  v9 = a2 - 3;
  v10 = (const void **)a1;
LABEL_2:
  v11 = 1 - a4;
  while (2)
  {
    a1 = (uint64_t)v10;
    v12 = v11;
    v13 = (char *)a2 - (char *)v10;
    v14 = 0xAAAAAAAAAAAAAAABLL * (a2 - v10);
    switch(v14)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (sub_100279008(a3, a2 - 3, v10))
        {
          v29 = v10[2];
          v27 = *(_OWORD *)v10;
          v25 = *(_OWORD *)v9;
          v10[2] = *(a2 - 1);
          *(_OWORD *)v10 = v25;
          *(_OWORD *)v9 = v27;
          *(a2 - 1) = v29;
        }
        return;
      case 3uLL:
        sub_10163C514(v10, v10 + 3, a2 - 3, a3);
        return;
      case 4uLL:
        sub_10163CBA8((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(a2 - 3), a3);
        return;
      case 5uLL:
        sub_10163CC90((uint64_t)v10, v10 + 3, v10 + 6, (__int128 *)(v10 + 9), (__int128 *)(a2 - 3), a3);
        return;
      default:
        if (v13 <= 575)
        {
          if ((a5 & 1) != 0)
            sub_10163C2F0((uint64_t)v10, a2, a3);
          else
            sub_10163C410(v10, a2, a3);
          return;
        }
        if (v12 != 1)
        {
          v15 = v14 >> 1;
          v16 = &v10[3 * (v14 >> 1)];
          if ((unint64_t)v13 < 0xC01)
          {
            sub_10163C514(&v10[3 * v15], v10, a2 - 3, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_10163C514(v10, &v10[3 * v15], a2 - 3, a3);
            v17 = 3 * v15;
            v18 = &v10[3 * v15 - 3];
            sub_10163C514(v10 + 3, v18, a2 - 6, a3);
            v19 = v10 + 6;
            v20 = &v10[v17 + 3];
            sub_10163C514(v19, v20, a2 - 9, a3);
            sub_10163C514(v18, v16, v20, a3);
            v28 = *(const void **)(a1 + 16);
            v26 = *(_OWORD *)a1;
            v21 = *(_OWORD *)v16;
            *(_QWORD *)(a1 + 16) = v16[2];
            *(_OWORD *)a1 = v21;
            v16[2] = v28;
            *(_OWORD *)v16 = v26;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_100279008(a3, (const void **)(a1 - 24), (const void **)a1))
          {
            v10 = sub_10163C65C((const void **)a1, (unint64_t)a2, a3);
            goto LABEL_16;
          }
LABEL_11:
          v22 = sub_10163C7EC((__int128 *)a1, a2, a3);
          if ((v23 & 1) == 0)
            goto LABEL_14;
          v24 = sub_10163C978(a1, v22, a3);
          v10 = (const void **)(v22 + 24);
          if (!sub_10163C978(v22 + 24, (uint64_t)a2, a3))
          {
            v11 = v12 + 1;
            if (v24)
              continue;
LABEL_14:
            sub_10163BF4C(a1, v22, a3, -v12, a5 & 1);
            v10 = (const void **)(v22 + 24);
LABEL_16:
            a5 = 0;
            a4 = -v12;
            goto LABEL_2;
          }
          a4 = -v12;
          a2 = (const void **)v22;
          if (v24)
            return;
          goto LABEL_1;
        }
        if (v10 != a2)
          sub_10163CDB0((uint64_t)v10, (__int128 *)a2, (__int128 *)a2, a3);
        return;
    }
  }
}

  v8 = (uint64_t)&a2[-2].n128_i64[1] + 4;
  v99 = (uint64_t)&a2[-3].n128_i64[1];
  v100 = a2;
  v9 = (uint64_t)a2[-4].n128_i64 + 4;
  v10 = (unint64_t)a1;
  while (2)
  {
    a1 = (__n128 *)v10;
    v11 = (uint64_t)a2 - v10;
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((uint64_t)a2 - v10) >> 2);
    switch(v12)
    {
      case 0:
      case 1:
        return;
      case 2:
        if (sub_101884DB4(v8, (uint64_t)a1))
        {
          v43 = *a1;
          v104 = a1[1].n128_u32[0];
          v103 = v43;
          v44 = *(__n128 *)v8;
          a1[1].n128_u32[0] = *(_DWORD *)(v8 + 16);
          *a1 = v44;
          v45 = v103;
          *(_DWORD *)(v8 + 16) = v104;
          *(__n128 *)v8 = v45;
        }
        return;
      case 3:
        sub_10188DB40((uint64_t)a1, (uint64_t)a1[1].n128_i64 + 4, v8);
        return;
      case 4:
        sub_10188DE20(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], v8);
        return;
      case 5:
        sub_10188DEEC(a1, (uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[2].n128_i64[1], (uint64_t)&a1[3].n128_i64[1] + 4, v8);
        return;
      default:
        if (v11 <= 479)
        {
          v46 = (uint64_t)a1[1].n128_i64 + 4;
          v48 = a1 == a2 || v46 == (_QWORD)a2;
          if ((a4 & 1) != 0)
          {
            if (!v48)
            {
              v49 = 0;
              v50 = (uint64_t)a1;
              do
              {
                v51 = v50;
                v50 = v46;
                if (sub_101884DB4(v46, v51))
                {
                  v52 = *(__n128 *)v50;
                  v104 = *(_DWORD *)(v50 + 16);
                  v103 = v52;
                  v53 = v49;
                  while (1)
                  {
                    v54 = (char *)a1 + v53;
                    *(__n128 *)(v54 + 20) = *(__n128 *)((char *)a1 + v53);
                    *((_DWORD *)v54 + 9) = *(unsigned __int32 *)((char *)a1[1].n128_u32 + v53);
                    if (!v53)
                      break;
                    v53 -= 20;
                    if (!sub_101884DB4((uint64_t)&v103, (uint64_t)a1 + v53))
                    {
                      v55 = (uint64_t)a1[1].n128_i64 + v53 + 4;
                      goto LABEL_74;
                    }
                  }
                  v55 = (uint64_t)a1;
LABEL_74:
                  v56 = v103;
                  *(_DWORD *)(v55 + 16) = v104;
                  *(__n128 *)v55 = v56;
                }
                v46 = v50 + 20;
                v49 += 20;
              }
              while ((__n128 *)(v50 + 20) != a2);
            }
          }
          else if (!v48)
          {
            v93 = &a1[-2].n128_i8[12];
            do
            {
              v94 = (uint64_t)a1;
              a1 = (__n128 *)v46;
              if (sub_101884DB4(v46, v94))
              {
                v95 = *a1;
                v104 = a1[1].n128_u32[0];
                v103 = v95;
                v96 = (uint64_t)v93;
                do
                {
                  *(_OWORD *)(v96 + 40) = *(_OWORD *)(v96 + 20);
                  *(_DWORD *)(v96 + 56) = *(_DWORD *)(v96 + 36);
                  v97 = sub_101884DB4((uint64_t)&v103, v96);
                  v96 -= 20;
                }
                while (v97);
                v98 = v103;
                *(_DWORD *)(v96 + 56) = v104;
                *(__n128 *)(v96 + 40) = v98;
              }
              v46 = (uint64_t)a1[1].n128_i64 + 4;
              v93 += 20;
            }
            while (&a1[1].n128_u8[4] != (unsigned __int8 *)a2);
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            v57 = (unint64_t)(v12 - 2) >> 1;
            v58 = v57;
            do
            {
              v59 = v58;
              if (v57 >= v58)
              {
                v60 = (2 * v58) | 1;
                v61 = (uint64_t)a1 + 20 * v60;
                if (2 * v58 + 2 < v12 && sub_101884DB4((uint64_t)a1 + 20 * v60, v61 + 20))
                {
                  v61 += 20;
                  v60 = 2 * v59 + 2;
                }
                v62 = (uint64_t)a1 + 20 * v59;
                if (!sub_101884DB4(v61, v62))
                {
                  v63 = *(__n128 *)v62;
                  v104 = *(_DWORD *)(v62 + 16);
                  v103 = v63;
                  do
                  {
                    v64 = v61;
                    v65 = *(_OWORD *)v61;
                    *(_DWORD *)(v62 + 16) = *(_DWORD *)(v61 + 16);
                    *(_OWORD *)v62 = v65;
                    if (v57 < v60)
                      break;
                    v66 = (2 * v60) | 1;
                    v61 = (uint64_t)a1 + 20 * v66;
                    v67 = 2 * v60 + 2;
                    if (v67 < v12 && sub_101884DB4((uint64_t)a1 + 20 * v66, v61 + 20))
                    {
                      v61 += 20;
                      v66 = v67;
                    }
                    v62 = v64;
                    v60 = v66;
                  }
                  while (!sub_101884DB4(v61, (uint64_t)&v103));
                  v68 = v103;
                  *(_DWORD *)(v64 + 16) = v104;
                  *(__n128 *)v64 = v68;
                }
              }
              v58 = v59 - 1;
            }
            while (v59);
            v69 = v11 / 0x14uLL;
            v70 = v100;
            do
            {
              v71 = v70;
              v72 = 0;
              v73 = *a1;
              v102 = a1[1].n128_u32[0];
              v101 = v73;
              v74 = v69 - 2;
              if (v69 < 2)
                v74 = v69 - 1;
              v75 = v74 >> 1;
              v76 = (uint64_t)a1;
              do
              {
                v77 = v76 + 20 * v72 + 20;
                v78 = (2 * v72) | 1;
                v79 = 2 * v72 + 2;
                if (v79 < v69 && sub_101884DB4(v76 + 20 * v72 + 20, v76 + 20 * v72 + 40))
                {
                  v77 += 20;
                  v78 = v79;
                }
                v80 = *(__n128 *)v77;
                *(_DWORD *)(v76 + 16) = *(_DWORD *)(v77 + 16);
                *(__n128 *)v76 = v80;
                v76 = v77;
                v72 = v78;
              }
              while (v78 <= v75);
              v70 = (__n128 *)((char *)v71 - 20);
              if ((__n128 *)v77 == (__n128 *)((char *)&v71[-2].n128_f64[1] + 4))
              {
                v91 = v101;
                *(_DWORD *)(v77 + 16) = v102;
                *(__n128 *)v77 = v91;
                v84 = v69 - 1;
              }
              else
              {
                v81 = *v70;
                *(_DWORD *)(v77 + 16) = v71[-1].n128_u32[3];
                *(__n128 *)v77 = v81;
                v82 = v101;
                v71[-1].n128_u32[3] = v102;
                *v70 = v82;
                v83 = v77 - (_QWORD)a1 + 20;
                v84 = v69 - 1;
                if (v83 >= 21)
                {
                  v85 = (v83 / 0x14uLL - 2) >> 1;
                  v86 = (uint64_t)a1 + 20 * v85;
                  if (sub_101884DB4(v86, v77))
                  {
                    v87 = *(__n128 *)v77;
                    v104 = *(_DWORD *)(v77 + 16);
                    v103 = v87;
                    do
                    {
                      v88 = v86;
                      v89 = *(_OWORD *)v86;
                      *(_DWORD *)(v77 + 16) = *(_DWORD *)(v86 + 16);
                      *(_OWORD *)v77 = v89;
                      if (!v85)
                        break;
                      v85 = (v85 - 1) >> 1;
                      v86 = (uint64_t)a1 + 20 * v85;
                      v77 = v88;
                    }
                    while (sub_101884DB4(v86, (uint64_t)&v103));
                    v90 = v103;
                    *(_DWORD *)(v88 + 16) = v104;
                    *(__n128 *)v88 = v90;
                  }
                }
              }
              v92 = v69 <= 2;
              v69 = v84;
            }
            while (!v92);
          }
          return;
        }
        v13 = (unint64_t)v12 >> 1;
        v14 = (uint64_t)a1 + 20 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0xA01)
        {
          sub_10188DB40(v14, (uint64_t)a1, v8);
        }
        else
        {
          sub_10188DB40((uint64_t)a1, v14, v8);
          v15 = 5 * v13;
          sub_10188DB40((uint64_t)a1[1].n128_i64 + 4, (uint64_t)&a1[-1] + 4 * v15 - 4, v99);
          sub_10188DB40((uint64_t)&a1[2].n128_i64[1], (uint64_t)a1[1].n128_i64 + 4 * v15 + 4, v9);
          sub_10188DB40((uint64_t)&a1[-1] + 4 * v15 - 4, v14, (uint64_t)a1[1].n128_i64 + 4 * v15 + 4);
          v16 = *a1;
          v104 = a1[1].n128_u32[0];
          v103 = v16;
          v17 = *(_DWORD *)(v14 + 16);
          *a1 = *(__n128 *)v14;
          a1[1].n128_u32[0] = v17;
          v18 = v103;
          *(_DWORD *)(v14 + 16) = v104;
          *(__n128 *)v14 = v18;
        }
        --a3;
        if ((a4 & 1) == 0 && !sub_101884DB4((uint64_t)&a1[-2].n128_i64[1] + 4, (uint64_t)a1))
        {
          v33 = *a1;
          v102 = a1[1].n128_u32[0];
          v101 = v33;
          if (sub_101884DB4((uint64_t)&v101, v8))
          {
            v10 = (unint64_t)a1;
            do
              v10 += 20;
            while (!sub_101884DB4((uint64_t)&v101, v10));
          }
          else
          {
            v34 = (unint64_t)a1[1].n128_u64 + 4;
            do
            {
              v10 = v34;
              if (v34 >= (unint64_t)a2)
                break;
              v35 = sub_101884DB4((uint64_t)&v101, v34);
              v34 = v10 + 20;
            }
            while (!v35);
          }
          v36 = (unint64_t)a2;
          if (v10 < (unint64_t)a2)
          {
            v36 = (unint64_t)a2;
            do
              v36 -= 20;
            while (sub_101884DB4((uint64_t)&v101, v36));
          }
          while (v10 < v36)
          {
            v37 = *(__n128 *)v10;
            v104 = *(_DWORD *)(v10 + 16);
            v103 = v37;
            v38 = *(_OWORD *)v36;
            *(_DWORD *)(v10 + 16) = *(_DWORD *)(v36 + 16);
            *(_OWORD *)v10 = v38;
            v39 = v103;
            *(_DWORD *)(v36 + 16) = v104;
            *(__n128 *)v36 = v39;
            do
              v10 += 20;
            while (!sub_101884DB4((uint64_t)&v101, v10));
            do
              v36 -= 20;
            while (sub_101884DB4((uint64_t)&v101, v36));
          }
          v40 = (__n128 *)(v10 - 20);
          if ((__n128 *)(v10 - 20) != a1)
          {
            v41 = *v40;
            a1[1].n128_u32[0] = *(_DWORD *)(v10 - 4);
            *a1 = v41;
          }
          a4 = 0;
          v42 = v101;
          *(_DWORD *)(v10 - 4) = v102;
          *v40 = v42;
          continue;
        }
        v19 = 0;
        v20 = *a1;
        v102 = a1[1].n128_u32[0];
        v101 = v20;
        do
          v19 += 20;
        while (sub_101884DB4((uint64_t)a1 + v19, (uint64_t)&v101));
        v21 = (char *)a1 + v19;
        v22 = (unint64_t)v100;
        if (v19 == 20)
        {
          v22 = (unint64_t)v100;
          do
          {
            if ((unint64_t)v21 >= v22)
              break;
            v22 -= 20;
          }
          while (!sub_101884DB4(v22, (uint64_t)&v101));
        }
        else
        {
          do
            v22 -= 20;
          while (!sub_101884DB4(v22, (uint64_t)&v101));
        }
        if ((unint64_t)v21 >= v22)
        {
          v28 = (unint64_t)(v21 - 20);
        }
        else
        {
          v23 = (unint64_t)a1->n128_u64 + v19;
          v24 = v22;
          do
          {
            v25 = *(__n128 *)v23;
            v104 = *(_DWORD *)(v23 + 16);
            v103 = v25;
            v26 = *(_OWORD *)v24;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
            *(_OWORD *)v23 = v26;
            v27 = v103;
            *(_DWORD *)(v24 + 16) = v104;
            *(__n128 *)v24 = v27;
            do
              v23 += 20;
            while (sub_101884DB4(v23, (uint64_t)&v101));
            do
              v24 -= 20;
            while (!sub_101884DB4(v24, (uint64_t)&v101));
          }
          while (v23 < v24);
          v28 = v23 - 20;
        }
        if ((__n128 *)v28 != a1)
        {
          v29 = *(__n128 *)v28;
          a1[1].n128_u32[0] = *(_DWORD *)(v28 + 16);
          *a1 = v29;
        }
        v30 = v101;
        *(_DWORD *)(v28 + 16) = v102;
        *(__n128 *)v28 = v30;
        v31 = (unint64_t)v21 >= v22;
        a2 = v100;
        if (!v31)
        {
LABEL_32:
          sub_10188D2B4(a1, v28, a3, a4 & 1);
          a4 = 0;
          v10 = v28 + 20;
          continue;
        }
        v32 = sub_10188DC5C(a1, (__n128 *)v28);
        v10 = v28 + 20;
        if (!sub_10188DC5C((__n128 *)(v28 + 20), v100))
        {
          if (v32)
            continue;
          goto LABEL_32;
        }
        a2 = (__n128 *)v28;
        if (!v32)
          goto LABEL_1;
        return;
    }
  }
}

  v10 = a1;
  while (2)
  {
    a1 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = ((char *)a2 - (char *)v10) >> 5;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v10[2]))
        {
          v120 = *(_OWORD *)v10;
          v129 = *((_OWORD *)v10 + 1);
          v52 = *((_OWORD *)a2 - 1);
          *(_OWORD *)v10 = *((_OWORD *)a2 - 2);
          *((_OWORD *)v10 + 1) = v52;
          *((_OWORD *)a2 - 2) = v120;
          *((_OWORD *)a2 - 1) = v129;
        }
        return;
      case 3uLL:
        sub_1018C0390(v10, v10 + 4, a2 - 4, a3);
        return;
      case 4uLL:
        sub_1018C06E4(v10, v10 + 4, v10 + 8, (uint64_t)(a2 - 4), a3);
        return;
      case 5uLL:
        v53 = (__int128 *)(v10 + 4);
        v54 = (__int128 *)(v10 + 8);
        v55 = (__int128 *)(v10 + 12);
        sub_1018C06E4(v10, v10 + 4, v10 + 8, (uint64_t)(v10 + 12), a3);
        if (vabdd_f64(*a3, *(a2 - 2)) < vabdd_f64(*a3, v10[14]))
        {
          v56 = *v55;
          v130 = *((_OWORD *)v10 + 7);
          v57 = *((_OWORD *)a2 - 1);
          *v55 = *((_OWORD *)a2 - 2);
          *((_OWORD *)v10 + 7) = v57;
          *((_OWORD *)a2 - 2) = v56;
          *((_OWORD *)a2 - 1) = v130;
          if (vabdd_f64(*a3, v10[14]) < vabdd_f64(*a3, v10[10]))
          {
            v59 = *v54;
            v58 = *((_OWORD *)v10 + 5);
            v60 = *((_OWORD *)v10 + 7);
            *v54 = *v55;
            *((_OWORD *)v10 + 5) = v60;
            *v55 = v59;
            *((_OWORD *)v10 + 7) = v58;
            if (vabdd_f64(*a3, v10[10]) < vabdd_f64(*a3, v10[6]))
            {
              v62 = *v53;
              v61 = *((_OWORD *)v10 + 3);
              v63 = *((_OWORD *)v10 + 5);
              *v53 = *v54;
              *((_OWORD *)v10 + 3) = v63;
              *v54 = v62;
              *((_OWORD *)v10 + 5) = v61;
              if (vabdd_f64(*a3, v10[6]) < vabdd_f64(*a3, v10[2]))
              {
                v121 = *(_OWORD *)v10;
                v131 = *((_OWORD *)v10 + 1);
                v64 = *((_OWORD *)v10 + 3);
                *(_OWORD *)v10 = *v53;
                *((_OWORD *)v10 + 1) = v64;
                *v53 = v121;
                *((_OWORD *)v10 + 3) = v131;
              }
            }
          }
        }
        return;
      default:
        if (v11 <= 767)
        {
          v65 = v10 + 4;
          v67 = v10 == a2 || v65 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v67)
            {
              v68 = 0;
              v69 = *a3;
              v70 = v10;
              do
              {
                v71 = v65;
                v72 = v70[6];
                if (vabdd_f64(v69, v72) < vabdd_f64(v69, v70[2]))
                {
                  v122 = *(_OWORD *)v65;
                  v73 = *((_QWORD *)v70 + 7);
                  v74 = v68;
                  while (1)
                  {
                    v75 = (char *)v10 + v74;
                    v76 = *(_OWORD *)((char *)v10 + v74 + 16);
                    *((_OWORD *)v75 + 2) = *(_OWORD *)((char *)v10 + v74);
                    *((_OWORD *)v75 + 3) = v76;
                    if (!v74)
                      break;
                    v74 -= 32;
                    if (vabdd_f64(*a3, v72) >= vabdd_f64(*a3, *((double *)v75 - 2)))
                    {
                      v77 = (uint64_t)v10 + v74 + 32;
                      goto LABEL_79;
                    }
                  }
                  v77 = (uint64_t)v10;
LABEL_79:
                  *(_OWORD *)v77 = v122;
                  *(double *)(v77 + 16) = v72;
                  *(_QWORD *)(v77 + 24) = v73;
                  v69 = *a3;
                }
                v65 = v71 + 4;
                v68 += 32;
                v70 = v71;
              }
              while (v71 + 4 != a2);
            }
          }
          else if (!v67)
          {
            v108 = *a3;
            do
            {
              v109 = v65;
              v110 = a1[6];
              if (vabdd_f64(v108, v110) < vabdd_f64(v108, a1[2]))
              {
                v125 = *(_OWORD *)v65;
                v111 = *((_QWORD *)a1 + 7);
                do
                {
                  v112 = *((_OWORD *)v65 - 1);
                  *(_OWORD *)v65 = *((_OWORD *)v65 - 2);
                  *((_OWORD *)v65 + 1) = v112;
                  v113 = *(v65 - 6);
                  v65 -= 4;
                }
                while (vabdd_f64(*a3, v110) < vabdd_f64(*a3, v113));
                *(_OWORD *)v65 = v125;
                v65[2] = v110;
                *((_QWORD *)v65 + 3) = v111;
                v108 = *a3;
              }
              v65 = v109 + 4;
              a1 = v109;
            }
            while (v109 + 4 != a2);
          }
          return;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v78 = (v12 - 2) >> 1;
            v79 = v78;
            do
            {
              v80 = v79;
              if (v78 >= v79)
              {
                v81 = (2 * v79) | 1;
                v82 = &v10[4 * v81];
                v83 = *a3;
                if (2 * v80 + 2 < (uint64_t)v12 && vabdd_f64(v83, v82[2]) < vabdd_f64(v83, v82[6]))
                {
                  v82 += 4;
                  v81 = 2 * v80 + 2;
                }
                v84 = &v10[4 * v80];
                v85 = v84[2];
                if (vabdd_f64(v83, v82[2]) >= vabdd_f64(v83, v85))
                {
                  v123 = *(_OWORD *)v84;
                  v86 = *((_QWORD *)v84 + 3);
                  do
                  {
                    v87 = v84;
                    v84 = v82;
                    v88 = *((_OWORD *)v82 + 1);
                    *(_OWORD *)v87 = *(_OWORD *)v82;
                    *((_OWORD *)v87 + 1) = v88;
                    if (v78 < v81)
                      break;
                    v89 = 2 * v81;
                    v81 = (2 * v81) | 1;
                    v82 = &v10[4 * v81];
                    v90 = v89 + 2;
                    v91 = *a3;
                    if (v90 < (uint64_t)v12 && vabdd_f64(v91, v82[2]) < vabdd_f64(v91, v82[6]))
                    {
                      v82 += 4;
                      v81 = v90;
                    }
                  }
                  while (vabdd_f64(v91, v82[2]) >= vabdd_f64(v91, v85));
                  *(_OWORD *)v84 = v123;
                  v84[2] = v85;
                  *((_QWORD *)v84 + 3) = v86;
                }
              }
              v79 = v80 - 1;
            }
            while (v80);
            v92 = (unint64_t)v11 >> 5;
            do
            {
              v93 = 0;
              v124 = *(_OWORD *)v10;
              v132 = *((_OWORD *)v10 + 1);
              v94 = v10;
              do
              {
                v95 = v94;
                v94 += 4 * v93 + 4;
                v96 = 2 * v93;
                v93 = (2 * v93) | 1;
                v97 = v96 + 2;
                if (v97 < v92 && vabdd_f64(*a3, v94[2]) < vabdd_f64(*a3, v94[6]))
                {
                  v94 += 4;
                  v93 = v97;
                }
                v98 = *((_OWORD *)v94 + 1);
                *(_OWORD *)v95 = *(_OWORD *)v94;
                *((_OWORD *)v95 + 1) = v98;
              }
              while (v93 <= (uint64_t)((unint64_t)(v92 - 2) >> 1));
              a2 -= 4;
              if (v94 == a2)
              {
                *(_OWORD *)v94 = v124;
                *((_OWORD *)v94 + 1) = v132;
              }
              else
              {
                v99 = *((_OWORD *)a2 + 1);
                *(_OWORD *)v94 = *(_OWORD *)a2;
                *((_OWORD *)v94 + 1) = v99;
                *(_OWORD *)a2 = v124;
                *((_OWORD *)a2 + 1) = v132;
                v100 = (char *)v94 - (char *)v10 + 32;
                if (v100 >= 33)
                {
                  v101 = (((unint64_t)v100 >> 5) - 2) >> 1;
                  v102 = &v10[4 * v101];
                  v103 = v94[2];
                  if (vabdd_f64(*a3, v102[2]) < vabdd_f64(*a3, v103))
                  {
                    v116 = *(_OWORD *)v94;
                    v104 = *((_QWORD *)v94 + 3);
                    do
                    {
                      v105 = v94;
                      v94 = v102;
                      v106 = *((_OWORD *)v102 + 1);
                      *(_OWORD *)v105 = *(_OWORD *)v102;
                      *((_OWORD *)v105 + 1) = v106;
                      if (!v101)
                        break;
                      v101 = (v101 - 1) >> 1;
                      v102 = &v10[4 * v101];
                    }
                    while (vabdd_f64(*a3, v102[2]) < vabdd_f64(*a3, v103));
                    *(_OWORD *)v94 = v116;
                    v94[2] = v103;
                    *((_QWORD *)v94 + 3) = v104;
                  }
                }
              }
            }
            while (v92-- > 2);
          }
          return;
        }
        v13 = v12 >> 1;
        v14 = &v10[4 * (v12 >> 1)];
        if ((unint64_t)v11 <= 0x1000)
        {
          sub_1018C0390(&a1[4 * (v12 >> 1)], a1, a2 - 4, a3);
        }
        else
        {
          sub_1018C0390(a1, &a1[4 * (v12 >> 1)], a2 - 4, a3);
          sub_1018C0390(a1 + 4, v14 - 4, a2 - 8, a3);
          sub_1018C0390(a1 + 8, &a1[4 * v13 + 4], a2 - 12, a3);
          sub_1018C0390(v14 - 4, v14, &a1[4 * v13 + 4], a3);
          v117 = *(_OWORD *)a1;
          v126 = *((_OWORD *)a1 + 1);
          v15 = *((_OWORD *)v14 + 1);
          *(_OWORD *)a1 = *(_OWORD *)v14;
          *((_OWORD *)a1 + 1) = v15;
          *(_OWORD *)v14 = v117;
          *((_OWORD *)v14 + 1) = v126;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v17 = *a3;
          v16 = a1[2];
          v18 = vabdd_f64(*a3, v16);
          if (vabdd_f64(*a3, *(a1 - 2)) < v18)
            goto LABEL_11;
          v115 = *(_OWORD *)a1;
          if (v18 >= vabdd_f64(v17, *(a2 - 2)))
          {
            v39 = a1 + 4;
            do
            {
              v10 = v39;
              if (v39 >= a2)
                break;
              v40 = vabdd_f64(v17, v39[2]);
              v39 += 4;
            }
            while (v18 >= v40);
          }
          else
          {
            v37 = a1;
            do
            {
              v10 = v37 + 4;
              v38 = vabdd_f64(v17, v37[6]);
              v37 += 4;
            }
            while (v18 >= v38);
          }
          v41 = a2;
          if (v10 < a2)
          {
            v42 = a2;
            do
            {
              v41 = v42 - 4;
              v43 = vabdd_f64(v17, *(v42 - 2));
              v42 -= 4;
            }
            while (v18 < v43);
          }
          v44 = *((_QWORD *)a1 + 3);
          while (v10 < v41)
          {
            v119 = *(_OWORD *)v10;
            v128 = *((_OWORD *)v10 + 1);
            v45 = *((_OWORD *)v41 + 1);
            *(_OWORD *)v10 = *(_OWORD *)v41;
            *((_OWORD *)v10 + 1) = v45;
            *(_OWORD *)v41 = v119;
            *((_OWORD *)v41 + 1) = v128;
            v46 = *a3;
            v47 = vabdd_f64(*a3, v16);
            do
            {
              v48 = v10[6];
              v10 += 4;
            }
            while (v47 >= vabdd_f64(v46, v48));
            do
            {
              v49 = *(v41 - 2);
              v41 -= 4;
            }
            while (v47 < vabdd_f64(v46, v49));
          }
          v50 = v10 - 4;
          if (v10 - 4 != a1)
          {
            v51 = *((_OWORD *)v10 - 1);
            *(_OWORD *)a1 = *(_OWORD *)v50;
            *((_OWORD *)a1 + 1) = v51;
          }
          a5 = 0;
          *(_OWORD *)v50 = v115;
          *(v10 - 2) = v16;
          *((_QWORD *)v10 - 1) = v44;
          continue;
        }
        v16 = a1[2];
        v17 = *a3;
        v18 = vabdd_f64(*a3, v16);
LABEL_11:
        v19 = 0;
        v114 = *(_OWORD *)a1;
        v20 = *((_QWORD *)a1 + 3);
        do
        {
          v21 = vabdd_f64(v17, a1[v19 + 6]);
          v19 += 4;
        }
        while (v21 < v18);
        v22 = &a1[v19];
        v23 = a2;
        if (v19 == 4)
        {
          v26 = a2;
          while (v22 < v26)
          {
            v24 = v26 - 4;
            v27 = vabdd_f64(v17, *(v26 - 2));
            v26 -= 4;
            if (v27 < v18)
              goto LABEL_21;
          }
          v24 = v26;
        }
        else
        {
          do
          {
            v24 = v23 - 4;
            v25 = vabdd_f64(v17, *(v23 - 2));
            v23 -= 4;
          }
          while (v25 >= v18);
        }
LABEL_21:
        v10 = v22;
        if (v22 < v24)
        {
          v28 = v24;
          do
          {
            v118 = *(_OWORD *)v10;
            v127 = *((_OWORD *)v10 + 1);
            v29 = *((_OWORD *)v28 + 1);
            *(_OWORD *)v10 = *(_OWORD *)v28;
            *((_OWORD *)v10 + 1) = v29;
            *(_OWORD *)v28 = v118;
            *((_OWORD *)v28 + 1) = v127;
            v30 = *a3;
            v31 = vabdd_f64(*a3, v16);
            do
            {
              v32 = v10[6];
              v10 += 4;
            }
            while (vabdd_f64(v30, v32) < v31);
            do
            {
              v33 = *(v28 - 2);
              v28 -= 4;
            }
            while (vabdd_f64(v30, v33) >= v31);
          }
          while (v10 < v28);
        }
        v34 = v10 - 4;
        if (v10 - 4 != a1)
        {
          v35 = *((_OWORD *)v10 - 1);
          *(_OWORD *)a1 = *(_OWORD *)v34;
          *((_OWORD *)a1 + 1) = v35;
        }
        *(_OWORD *)v34 = v114;
        *(v10 - 2) = v16;
        *((_QWORD *)v10 - 1) = v20;
        if (v22 < v24)
        {
LABEL_32:
          sub_1018BFAAC(a1, v10 - 4, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v36 = sub_1018C045C(a1, v10 - 4, a3);
        if (!sub_1018C045C(v10, a2, a3))
        {
          if (v36)
            continue;
          goto LABEL_32;
        }
        a2 = v10 - 4;
        if (!v36)
          goto LABEL_1;
        return;
    }
  }
}

